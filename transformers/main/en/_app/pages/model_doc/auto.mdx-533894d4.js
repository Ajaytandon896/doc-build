import{S as n0t,i as s0t,s as l0t,e as a,k as l,w as v,t as o,M as i0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as d0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function c0t(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,q6,fm,qe,Xe,ci,An,N6,yn,Ln,j6,mi,xn,D6,fi,gm,Ma;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mm=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),q6=o(")."),fm=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),N6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),j6=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),D6=o(` attribute is set to the same class you use when registering the model (here
`),fi=a("code"),gm=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var a$=s(u);f=r(a$,"NewModelConfig"),a$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var n$=s(li);mm=r(n$,"model_type"),n$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var s$=s(ii);di=r(s$,'"new-model"'),s$.forEach(t),q6=r(Ae,")."),Ae.forEach(t),fm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),N6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var l$=s(yn);Ln=r(l$,"PreTrainedModel"),l$.forEach(t),j6=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var hm=s(mi);xn=r(hm,"config_class"),hm.forEach(t),D6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),fi=n(Eo,"CODE",{});var i$=s(fi);gm=r(i$,"NewModelConfig"),i$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mm),e(g,et),e(g,ii),e(ii,di),e(g,q6),b(ze,fm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,N6),e(qe,yn),e(yn,Ln),e(qe,j6),e(qe,mi),e(mi,xn),e(qe,D6),e(qe,fi),e(fi,gm),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(fm),ze&&t(qe)}}}function m0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g0t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function h0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u0t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function p0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ayt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function syt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lyt(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,q6,fm,qe,Xe,ci,An,N6,yn,Ln,j6,mi,xn,D6,fi,gm,Ma,ze,Ae,a$,gi,n$,s$,Eo,Ea,l$,hm,i$,hje,tPe,hi,um,PZ,G6,uje,IZ,pje,aPe,$n,_je,qZ,bje,Fje,NZ,vje,Tje,nPe,O6,sPe,d$,Mje,lPe,pm,iPe,ui,_m,jZ,V6,Eje,DZ,Cje,dPe,Co,X6,wje,z6,Aje,c$,yje,Lje,xje,Q6,$je,GZ,kje,Sje,Rje,Er,W6,Bje,OZ,Pje,Ije,pi,qje,VZ,Nje,jje,XZ,Dje,Gje,Oje,y,bm,zZ,Vje,Xje,m$,zje,Qje,Wje,Fm,QZ,Hje,Uje,f$,Jje,Yje,Kje,vm,WZ,Zje,eDe,g$,oDe,rDe,tDe,Tm,HZ,aDe,nDe,h$,sDe,lDe,iDe,Mm,UZ,dDe,cDe,u$,mDe,fDe,gDe,Em,JZ,hDe,uDe,p$,pDe,_De,bDe,Cm,YZ,FDe,vDe,_$,TDe,MDe,EDe,wm,KZ,CDe,wDe,b$,ADe,yDe,LDe,Am,ZZ,xDe,$De,F$,kDe,SDe,RDe,ym,eee,BDe,PDe,v$,IDe,qDe,NDe,Lm,oee,jDe,DDe,T$,GDe,ODe,VDe,xm,ree,XDe,zDe,M$,QDe,WDe,HDe,$m,tee,UDe,JDe,E$,YDe,KDe,ZDe,km,aee,eGe,oGe,C$,rGe,tGe,aGe,Sm,nee,nGe,sGe,w$,lGe,iGe,dGe,Rm,see,cGe,mGe,A$,fGe,gGe,hGe,Bm,lee,uGe,pGe,y$,_Ge,bGe,FGe,Pm,iee,vGe,TGe,L$,MGe,EGe,CGe,Im,dee,wGe,AGe,x$,yGe,LGe,xGe,qm,cee,$Ge,kGe,$$,SGe,RGe,BGe,Nm,mee,PGe,IGe,k$,qGe,NGe,jGe,jm,fee,DGe,GGe,S$,OGe,VGe,XGe,Dm,gee,zGe,QGe,R$,WGe,HGe,UGe,Gm,hee,JGe,YGe,B$,KGe,ZGe,eOe,Om,uee,oOe,rOe,P$,tOe,aOe,nOe,Vm,pee,sOe,lOe,I$,iOe,dOe,cOe,Xm,_ee,mOe,fOe,q$,gOe,hOe,uOe,zm,bee,pOe,_Oe,N$,bOe,FOe,vOe,Qm,Fee,TOe,MOe,j$,EOe,COe,wOe,Wm,vee,AOe,yOe,D$,LOe,xOe,$Oe,Hm,Tee,kOe,SOe,G$,ROe,BOe,POe,Um,Mee,IOe,qOe,O$,NOe,jOe,DOe,Jm,Eee,GOe,OOe,V$,VOe,XOe,zOe,Ym,Cee,QOe,WOe,X$,HOe,UOe,JOe,Km,wee,YOe,KOe,z$,ZOe,eVe,oVe,Zm,Aee,rVe,tVe,Q$,aVe,nVe,sVe,ef,yee,lVe,iVe,W$,dVe,cVe,mVe,of,Lee,fVe,gVe,H$,hVe,uVe,pVe,rf,xee,_Ve,bVe,U$,FVe,vVe,TVe,tf,$ee,MVe,EVe,J$,CVe,wVe,AVe,af,kee,yVe,LVe,Y$,xVe,$Ve,kVe,nf,See,SVe,RVe,K$,BVe,PVe,IVe,sf,Ree,qVe,NVe,Z$,jVe,DVe,GVe,lf,Bee,OVe,VVe,ek,XVe,zVe,QVe,df,Pee,WVe,HVe,ok,UVe,JVe,YVe,cf,Iee,KVe,ZVe,rk,eXe,oXe,rXe,mf,qee,tXe,aXe,tk,nXe,sXe,lXe,ff,Nee,iXe,dXe,ak,cXe,mXe,fXe,gf,jee,gXe,hXe,nk,uXe,pXe,_Xe,hf,Dee,bXe,FXe,sk,vXe,TXe,MXe,uf,Gee,EXe,CXe,lk,wXe,AXe,yXe,pf,Oee,LXe,xXe,ik,$Xe,kXe,SXe,_f,Vee,RXe,BXe,dk,PXe,IXe,qXe,bf,Xee,NXe,jXe,ck,DXe,GXe,OXe,Ff,zee,VXe,XXe,mk,zXe,QXe,WXe,vf,Qee,HXe,UXe,fk,JXe,YXe,KXe,Tf,Wee,ZXe,eze,gk,oze,rze,tze,Mf,Hee,aze,nze,hk,sze,lze,ize,Ef,Uee,dze,cze,uk,mze,fze,gze,Cf,Jee,hze,uze,pk,pze,_ze,bze,wf,Yee,Fze,vze,_k,Tze,Mze,Eze,Af,Kee,Cze,wze,bk,Aze,yze,Lze,yf,Zee,xze,$ze,Fk,kze,Sze,Rze,Lf,eoe,Bze,Pze,vk,Ize,qze,Nze,xf,ooe,jze,Dze,Tk,Gze,Oze,Vze,$f,roe,Xze,zze,Mk,Qze,Wze,Hze,kf,toe,Uze,Jze,Ek,Yze,Kze,Zze,Sf,aoe,eQe,oQe,Ck,rQe,tQe,aQe,Rf,noe,nQe,sQe,wk,lQe,iQe,dQe,Bf,soe,cQe,mQe,Ak,fQe,gQe,hQe,Pf,loe,uQe,pQe,yk,_Qe,bQe,FQe,If,ioe,vQe,TQe,Lk,MQe,EQe,CQe,qf,doe,wQe,AQe,xk,yQe,LQe,xQe,Nf,coe,$Qe,kQe,$k,SQe,RQe,BQe,jf,moe,PQe,IQe,kk,qQe,NQe,jQe,Df,foe,DQe,GQe,Sk,OQe,VQe,XQe,Gf,goe,zQe,QQe,Rk,WQe,HQe,UQe,Of,hoe,JQe,YQe,Bk,KQe,ZQe,eWe,Vf,uoe,oWe,rWe,Pk,tWe,aWe,nWe,Xf,poe,sWe,lWe,Ik,iWe,dWe,cWe,zf,_oe,mWe,fWe,qk,gWe,hWe,uWe,Qf,boe,pWe,_We,Nk,bWe,FWe,vWe,Wf,Foe,TWe,MWe,jk,EWe,CWe,wWe,Hf,voe,AWe,yWe,Dk,LWe,xWe,$We,Uf,Toe,kWe,SWe,Gk,RWe,BWe,PWe,Jf,Moe,IWe,qWe,Ok,NWe,jWe,DWe,Yf,Eoe,GWe,OWe,Vk,VWe,XWe,zWe,Kf,Coe,QWe,WWe,Xk,HWe,UWe,JWe,Zf,woe,YWe,KWe,zk,ZWe,eHe,oHe,eg,Aoe,rHe,tHe,Qk,aHe,nHe,sHe,og,yoe,lHe,iHe,Wk,dHe,cHe,mHe,rg,Loe,fHe,gHe,Hk,hHe,uHe,pHe,tg,xoe,_He,bHe,Uk,FHe,vHe,THe,ag,$oe,MHe,EHe,Jk,CHe,wHe,AHe,ng,koe,yHe,LHe,Yk,xHe,$He,kHe,sg,Soe,SHe,RHe,Kk,BHe,PHe,IHe,lg,Roe,qHe,NHe,Zk,jHe,DHe,GHe,ig,Boe,OHe,VHe,eS,XHe,zHe,QHe,dg,Poe,WHe,HHe,oS,UHe,JHe,YHe,cg,Ioe,KHe,ZHe,rS,eUe,oUe,rUe,mg,qoe,tUe,aUe,tS,nUe,sUe,lUe,fg,Noe,iUe,dUe,aS,cUe,mUe,fUe,gg,joe,gUe,hUe,nS,uUe,pUe,_Ue,hg,bUe,ug,H6,FUe,Doe,vUe,cPe,_i,pg,Goe,U6,TUe,Ooe,MUe,mPe,wo,J6,EUe,Y6,CUe,sS,wUe,AUe,yUe,K6,LUe,Voe,xUe,$Ue,kUe,Cr,Z6,SUe,Xoe,RUe,BUe,Ca,PUe,zoe,IUe,qUe,Qoe,NUe,jUe,Woe,DUe,GUe,OUe,k,kn,Hoe,VUe,XUe,lS,zUe,QUe,iS,WUe,HUe,UUe,Sn,Uoe,JUe,YUe,dS,KUe,ZUe,cS,eJe,oJe,rJe,Rn,Joe,tJe,aJe,mS,nJe,sJe,fS,lJe,iJe,dJe,_g,Yoe,cJe,mJe,gS,fJe,gJe,hJe,Bn,Koe,uJe,pJe,hS,_Je,bJe,uS,FJe,vJe,TJe,bg,Zoe,MJe,EJe,pS,CJe,wJe,AJe,Fg,ere,yJe,LJe,_S,xJe,$Je,kJe,vg,ore,SJe,RJe,bS,BJe,PJe,IJe,Pn,rre,qJe,NJe,FS,jJe,DJe,vS,GJe,OJe,VJe,In,tre,XJe,zJe,TS,QJe,WJe,MS,HJe,UJe,JJe,qn,are,YJe,KJe,ES,ZJe,eYe,CS,oYe,rYe,tYe,Tg,nre,aYe,nYe,wS,sYe,lYe,iYe,Mg,sre,dYe,cYe,AS,mYe,fYe,gYe,Nn,lre,hYe,uYe,yS,pYe,_Ye,LS,bYe,FYe,vYe,Eg,ire,TYe,MYe,xS,EYe,CYe,wYe,jn,dre,AYe,yYe,$S,LYe,xYe,kS,$Ye,kYe,SYe,Dn,cre,RYe,BYe,SS,PYe,IYe,RS,qYe,NYe,jYe,Gn,mre,DYe,GYe,BS,OYe,VYe,PS,XYe,zYe,QYe,Cg,fre,WYe,HYe,IS,UYe,JYe,YYe,On,gre,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,Vn,hre,nKe,sKe,jS,lKe,iKe,DS,dKe,cKe,mKe,Xn,ure,fKe,gKe,GS,hKe,uKe,OS,pKe,_Ke,bKe,zn,pre,FKe,vKe,VS,TKe,MKe,XS,EKe,CKe,wKe,Qn,_re,AKe,yKe,zS,LKe,xKe,QS,$Ke,kKe,SKe,Wn,bre,RKe,BKe,WS,PKe,IKe,HS,qKe,NKe,jKe,wg,Fre,DKe,GKe,US,OKe,VKe,XKe,Hn,vre,zKe,QKe,JS,WKe,HKe,YS,UKe,JKe,YKe,Ag,Tre,KKe,ZKe,KS,eZe,oZe,rZe,Un,Mre,tZe,aZe,ZS,nZe,sZe,eR,lZe,iZe,dZe,Jn,Ere,cZe,mZe,oR,fZe,gZe,rR,hZe,uZe,pZe,Yn,Cre,_Ze,bZe,tR,FZe,vZe,aR,TZe,MZe,EZe,Kn,wre,CZe,wZe,nR,AZe,yZe,sR,LZe,xZe,$Ze,Zn,Are,kZe,SZe,lR,RZe,BZe,iR,PZe,IZe,qZe,yg,yre,NZe,jZe,dR,DZe,GZe,OZe,es,Lre,VZe,XZe,cR,zZe,QZe,mR,WZe,HZe,UZe,os,xre,JZe,YZe,fR,KZe,ZZe,gR,eeo,oeo,reo,rs,$re,teo,aeo,hR,neo,seo,uR,leo,ieo,deo,ts,kre,ceo,meo,pR,feo,geo,_R,heo,ueo,peo,as,Sre,_eo,beo,bR,Feo,veo,FR,Teo,Meo,Eeo,ns,Rre,Ceo,weo,vR,Aeo,yeo,TR,Leo,xeo,$eo,Lg,Bre,keo,Seo,MR,Reo,Beo,Peo,ss,Pre,Ieo,qeo,ER,Neo,jeo,CR,Deo,Geo,Oeo,xg,Ire,Veo,Xeo,wR,zeo,Qeo,Weo,$g,qre,Heo,Ueo,AR,Jeo,Yeo,Keo,ls,Nre,Zeo,eoo,yR,ooo,roo,LR,too,aoo,noo,is,jre,soo,loo,xR,ioo,doo,$R,coo,moo,foo,ds,Dre,goo,hoo,kR,uoo,poo,SR,_oo,boo,Foo,kg,Gre,voo,Too,RR,Moo,Eoo,Coo,cs,Ore,woo,Aoo,BR,yoo,Loo,PR,xoo,$oo,koo,ms,Vre,Soo,Roo,IR,Boo,Poo,qR,Ioo,qoo,Noo,fs,Xre,joo,Doo,NR,Goo,Ooo,jR,Voo,Xoo,zoo,gs,zre,Qoo,Woo,DR,Hoo,Uoo,GR,Joo,Yoo,Koo,hs,Qre,Zoo,ero,OR,oro,rro,VR,tro,aro,nro,us,Wre,sro,lro,XR,iro,dro,zR,cro,mro,fro,Sg,Hre,gro,hro,QR,uro,pro,_ro,Rg,Ure,bro,Fro,WR,vro,Tro,Mro,Bg,Jre,Ero,Cro,HR,wro,Aro,yro,Pg,Yre,Lro,xro,UR,$ro,kro,Sro,ps,Kre,Rro,Bro,JR,Pro,Iro,YR,qro,Nro,jro,Ig,Zre,Dro,Gro,KR,Oro,Vro,Xro,_s,ete,zro,Qro,ZR,Wro,Hro,eB,Uro,Jro,Yro,bs,ote,Kro,Zro,oB,eto,oto,rB,rto,tto,ato,Fs,rte,nto,sto,tB,lto,ito,aB,dto,cto,mto,vs,tte,fto,gto,nB,hto,uto,sB,pto,_to,bto,Ts,ate,Fto,vto,lB,Tto,Mto,iB,Eto,Cto,wto,Ms,nte,Ato,yto,dB,Lto,xto,cB,$to,kto,Sto,qg,ste,Rto,Bto,mB,Pto,Ito,qto,Ng,lte,Nto,jto,fB,Dto,Gto,Oto,Es,ite,Vto,Xto,gB,zto,Qto,hB,Wto,Hto,Uto,Cs,dte,Jto,Yto,uB,Kto,Zto,pB,eao,oao,rao,ws,cte,tao,aao,_B,nao,sao,bB,lao,iao,dao,jg,mte,cao,mao,FB,fao,gao,hao,Dg,fte,uao,pao,vB,_ao,bao,Fao,Gg,gte,vao,Tao,TB,Mao,Eao,Cao,As,hte,wao,Aao,MB,yao,Lao,EB,xao,$ao,kao,Og,ute,Sao,Rao,CB,Bao,Pao,Iao,Vg,pte,qao,Nao,wB,jao,Dao,Gao,ys,_te,Oao,Vao,AB,Xao,zao,yB,Qao,Wao,Hao,Xg,bte,Uao,Jao,LB,Yao,Kao,Zao,zg,Fte,eno,ono,xB,rno,tno,ano,Ls,vte,nno,sno,$B,lno,ino,kB,dno,cno,mno,xs,Tte,fno,gno,SB,hno,uno,RB,pno,_no,bno,$s,Mte,Fno,vno,BB,Tno,Mno,PB,Eno,Cno,wno,ks,Ete,Ano,yno,IB,Lno,xno,qB,$no,kno,Sno,Qg,Rno,Wg,ey,Bno,Cte,Pno,fPe,bi,Hg,wte,oy,Ino,Ate,qno,gPe,Ao,ry,Nno,ty,jno,NB,Dno,Gno,Ono,ay,Vno,yte,Xno,zno,Qno,Qe,ny,Wno,Lte,Hno,Uno,wa,Jno,xte,Yno,Kno,$te,Zno,eso,kte,oso,rso,tso,te,Ug,Ste,aso,nso,jB,sso,lso,iso,Jg,Rte,dso,cso,DB,mso,fso,gso,Yg,Bte,hso,uso,GB,pso,_so,bso,Kg,Pte,Fso,vso,OB,Tso,Mso,Eso,Zg,Ite,Cso,wso,VB,Aso,yso,Lso,eh,qte,xso,$so,XB,kso,Sso,Rso,oh,Nte,Bso,Pso,zB,Iso,qso,Nso,rh,jte,jso,Dso,QB,Gso,Oso,Vso,th,Dte,Xso,zso,WB,Qso,Wso,Hso,ah,Gte,Uso,Jso,HB,Yso,Kso,Zso,nh,Ote,elo,olo,UB,rlo,tlo,alo,sh,Vte,nlo,slo,JB,llo,ilo,dlo,lh,Xte,clo,mlo,YB,flo,glo,hlo,ih,zte,ulo,plo,KB,_lo,blo,Flo,dh,Qte,vlo,Tlo,ZB,Mlo,Elo,Clo,ch,Wte,wlo,Alo,eP,ylo,Llo,xlo,mh,Hte,$lo,klo,oP,Slo,Rlo,Blo,fh,Ute,Plo,Ilo,rP,qlo,Nlo,jlo,gh,Jte,Dlo,Glo,tP,Olo,Vlo,Xlo,hh,Yte,zlo,Qlo,aP,Wlo,Hlo,Ulo,uh,Kte,Jlo,Ylo,nP,Klo,Zlo,eio,ph,Zte,oio,rio,sP,tio,aio,nio,_h,eae,sio,lio,lP,iio,dio,cio,bh,oae,mio,fio,iP,gio,hio,uio,Fh,pio,vh,_io,Th,sy,bio,rae,Fio,hPe,Fi,Mh,tae,ly,vio,aae,Tio,uPe,yo,iy,Mio,dy,Eio,dP,Cio,wio,Aio,cy,yio,nae,Lio,xio,$io,We,my,kio,sae,Sio,Rio,vi,Bio,lae,Pio,Iio,iae,qio,Nio,jio,be,Eh,dae,Dio,Gio,cP,Oio,Vio,Xio,Ch,cae,zio,Qio,mP,Wio,Hio,Uio,wh,mae,Jio,Yio,fP,Kio,Zio,edo,Ah,fae,odo,rdo,gP,tdo,ado,ndo,yh,gae,sdo,ldo,hP,ido,ddo,cdo,Lh,hae,mdo,fdo,uP,gdo,hdo,udo,xh,uae,pdo,_do,pP,bdo,Fdo,vdo,$h,pae,Tdo,Mdo,_P,Edo,Cdo,wdo,kh,_ae,Ado,ydo,bP,Ldo,xdo,$do,Sh,bae,kdo,Sdo,FP,Rdo,Bdo,Pdo,Rh,Fae,Ido,qdo,vP,Ndo,jdo,Ddo,Bh,vae,Gdo,Odo,TP,Vdo,Xdo,zdo,Ph,Tae,Qdo,Wdo,MP,Hdo,Udo,Jdo,Ih,Mae,Ydo,Kdo,EP,Zdo,eco,oco,qh,rco,Nh,tco,jh,fy,aco,Eae,nco,pPe,Ti,Dh,Cae,gy,sco,wae,lco,_Pe,Lo,hy,ico,Mi,dco,CP,cco,mco,wP,fco,gco,hco,uy,uco,Aae,pco,_co,bco,ot,py,Fco,yae,vco,Tco,Ei,Mco,Lae,Eco,Cco,AP,wco,Aco,yco,Gh,Lco,He,_y,xco,xae,$co,kco,Aa,Sco,$ae,Rco,Bco,kae,Pco,Ico,Sae,qco,Nco,jco,x,Oh,Rae,Dco,Gco,yP,Oco,Vco,Xco,Vh,Bae,zco,Qco,LP,Wco,Hco,Uco,Xh,Pae,Jco,Yco,xP,Kco,Zco,emo,zh,Iae,omo,rmo,$P,tmo,amo,nmo,Qh,qae,smo,lmo,kP,imo,dmo,cmo,Wh,Nae,mmo,fmo,SP,gmo,hmo,umo,Hh,jae,pmo,_mo,RP,bmo,Fmo,vmo,Uh,Dae,Tmo,Mmo,BP,Emo,Cmo,wmo,Jh,Gae,Amo,ymo,PP,Lmo,xmo,$mo,Yh,Oae,kmo,Smo,IP,Rmo,Bmo,Pmo,Kh,Vae,Imo,qmo,qP,Nmo,jmo,Dmo,Zh,Xae,Gmo,Omo,NP,Vmo,Xmo,zmo,eu,zae,Qmo,Wmo,jP,Hmo,Umo,Jmo,ou,Qae,Ymo,Kmo,DP,Zmo,efo,ofo,ru,Wae,rfo,tfo,GP,afo,nfo,sfo,tu,Hae,lfo,ifo,OP,dfo,cfo,mfo,au,Uae,ffo,gfo,VP,hfo,ufo,pfo,nu,Jae,_fo,bfo,XP,Ffo,vfo,Tfo,su,Yae,Mfo,Efo,zP,Cfo,wfo,Afo,lu,Kae,yfo,Lfo,QP,xfo,$fo,kfo,iu,Zae,Sfo,Rfo,WP,Bfo,Pfo,Ifo,du,ene,qfo,Nfo,HP,jfo,Dfo,Gfo,cu,one,Ofo,Vfo,UP,Xfo,zfo,Qfo,mu,rne,Wfo,Hfo,JP,Ufo,Jfo,Yfo,fu,tne,Kfo,Zfo,YP,ego,ogo,rgo,gu,ane,tgo,ago,KP,ngo,sgo,lgo,hu,nne,igo,dgo,ZP,cgo,mgo,fgo,uu,sne,ggo,hgo,eI,ugo,pgo,_go,pu,lne,bgo,Fgo,oI,vgo,Tgo,Mgo,_u,ine,Ego,Cgo,rI,wgo,Ago,ygo,Ss,dne,Lgo,xgo,tI,$go,kgo,aI,Sgo,Rgo,Bgo,bu,cne,Pgo,Igo,nI,qgo,Ngo,jgo,Fu,mne,Dgo,Ggo,sI,Ogo,Vgo,Xgo,vu,fne,zgo,Qgo,lI,Wgo,Hgo,Ugo,Tu,gne,Jgo,Ygo,iI,Kgo,Zgo,eho,Mu,hne,oho,rho,dI,tho,aho,nho,Eu,une,sho,lho,cI,iho,dho,cho,Cu,pne,mho,fho,mI,gho,hho,uho,wu,_ne,pho,_ho,fI,bho,Fho,vho,Au,bne,Tho,Mho,gI,Eho,Cho,who,yu,Fne,Aho,yho,hI,Lho,xho,$ho,Lu,vne,kho,Sho,uI,Rho,Bho,Pho,xu,Tne,Iho,qho,pI,Nho,jho,Dho,$u,Mne,Gho,Oho,_I,Vho,Xho,zho,ku,Ene,Qho,Who,bI,Hho,Uho,Jho,Su,Cne,Yho,Kho,FI,Zho,euo,ouo,Ru,wne,ruo,tuo,vI,auo,nuo,suo,Bu,Ane,luo,iuo,TI,duo,cuo,muo,Pu,yne,fuo,guo,MI,huo,uuo,puo,Iu,Lne,_uo,buo,EI,Fuo,vuo,Tuo,qu,xne,Muo,Euo,CI,Cuo,wuo,Auo,Nu,$ne,yuo,Luo,wI,xuo,$uo,kuo,ju,kne,Suo,Ruo,AI,Buo,Puo,Iuo,Du,Sne,quo,Nuo,yI,juo,Duo,Guo,Gu,Rne,Ouo,Vuo,LI,Xuo,zuo,Quo,Ou,Bne,Wuo,Huo,xI,Uuo,Juo,Yuo,Vu,Pne,Kuo,Zuo,$I,epo,opo,rpo,Xu,Ine,tpo,apo,kI,npo,spo,lpo,zu,qne,ipo,dpo,SI,cpo,mpo,fpo,Qu,Nne,gpo,hpo,RI,upo,ppo,_po,Wu,jne,bpo,Fpo,BI,vpo,Tpo,Mpo,Hu,Dne,Epo,Cpo,PI,wpo,Apo,ypo,Uu,Gne,Lpo,xpo,II,$po,kpo,Spo,Ju,One,Rpo,Bpo,qI,Ppo,Ipo,qpo,Yu,Vne,Npo,jpo,NI,Dpo,Gpo,Opo,Ku,Xne,Vpo,Xpo,jI,zpo,Qpo,Wpo,Zu,zne,Hpo,Upo,DI,Jpo,Ypo,Kpo,ep,Qne,Zpo,e_o,GI,o_o,r_o,t_o,op,Wne,a_o,n_o,OI,s_o,l_o,i_o,rp,Hne,d_o,c_o,VI,m_o,f_o,g_o,tp,Une,h_o,u_o,XI,p_o,__o,b_o,ap,Jne,F_o,v_o,zI,T_o,M_o,E_o,np,Yne,C_o,w_o,QI,A_o,y_o,L_o,sp,Kne,x_o,$_o,WI,k_o,S_o,R_o,lp,Zne,B_o,P_o,HI,I_o,q_o,N_o,ip,ese,j_o,D_o,UI,G_o,O_o,V_o,dp,ose,X_o,z_o,JI,Q_o,W_o,H_o,cp,rse,U_o,J_o,YI,Y_o,K_o,Z_o,mp,tse,ebo,obo,KI,rbo,tbo,abo,fp,ase,nbo,sbo,ZI,lbo,ibo,dbo,gp,nse,cbo,mbo,eq,fbo,gbo,hbo,hp,sse,ubo,pbo,oq,_bo,bbo,Fbo,up,lse,vbo,Tbo,rq,Mbo,Ebo,Cbo,pp,ise,wbo,Abo,tq,ybo,Lbo,xbo,_p,dse,$bo,kbo,aq,Sbo,Rbo,Bbo,bp,cse,Pbo,Ibo,nq,qbo,Nbo,jbo,Fp,mse,Dbo,Gbo,sq,Obo,Vbo,Xbo,vp,fse,zbo,Qbo,lq,Wbo,Hbo,Ubo,Tp,gse,Jbo,Ybo,iq,Kbo,Zbo,e2o,Mp,hse,o2o,r2o,dq,t2o,a2o,n2o,Ep,use,s2o,l2o,cq,i2o,d2o,c2o,Cp,pse,m2o,f2o,mq,g2o,h2o,u2o,wp,_se,p2o,_2o,fq,b2o,F2o,v2o,Ap,bse,T2o,M2o,gq,E2o,C2o,w2o,yp,Fse,A2o,y2o,hq,L2o,x2o,$2o,Lp,k2o,vse,S2o,R2o,Tse,B2o,P2o,xp,bPe,Ci,$p,Mse,by,I2o,Ese,q2o,FPe,xo,Fy,N2o,wi,j2o,uq,D2o,G2o,pq,O2o,V2o,X2o,vy,z2o,Cse,Q2o,W2o,H2o,rt,Ty,U2o,wse,J2o,Y2o,Ai,K2o,Ase,Z2o,eFo,_q,oFo,rFo,tFo,kp,aFo,Ue,My,nFo,yse,sFo,lFo,ya,iFo,Lse,dFo,cFo,xse,mFo,fFo,$se,gFo,hFo,uFo,G,Sp,kse,pFo,_Fo,bq,bFo,FFo,vFo,Rp,Sse,TFo,MFo,Fq,EFo,CFo,wFo,Bp,Rse,AFo,yFo,vq,LFo,xFo,$Fo,Pp,Bse,kFo,SFo,Tq,RFo,BFo,PFo,Ip,Pse,IFo,qFo,Mq,NFo,jFo,DFo,qp,Ise,GFo,OFo,Eq,VFo,XFo,zFo,Np,qse,QFo,WFo,Cq,HFo,UFo,JFo,jp,Nse,YFo,KFo,wq,ZFo,evo,ovo,Dp,jse,rvo,tvo,Aq,avo,nvo,svo,Gp,Dse,lvo,ivo,yq,dvo,cvo,mvo,Op,Gse,fvo,gvo,Lq,hvo,uvo,pvo,Vp,Ose,_vo,bvo,xq,Fvo,vvo,Tvo,Xp,Vse,Mvo,Evo,$q,Cvo,wvo,Avo,zp,Xse,yvo,Lvo,kq,xvo,$vo,kvo,Qp,zse,Svo,Rvo,Sq,Bvo,Pvo,Ivo,Wp,Qse,qvo,Nvo,Rq,jvo,Dvo,Gvo,Hp,Wse,Ovo,Vvo,Bq,Xvo,zvo,Qvo,Up,Hse,Wvo,Hvo,Pq,Uvo,Jvo,Yvo,Jp,Use,Kvo,Zvo,Iq,e1o,o1o,r1o,Yp,Jse,t1o,a1o,qq,n1o,s1o,l1o,Kp,Yse,i1o,d1o,Nq,c1o,m1o,f1o,Zp,Kse,g1o,h1o,jq,u1o,p1o,_1o,e_,Zse,b1o,F1o,Dq,v1o,T1o,M1o,o_,ele,E1o,C1o,Gq,w1o,A1o,y1o,r_,ole,L1o,x1o,Oq,$1o,k1o,S1o,t_,rle,R1o,B1o,Vq,P1o,I1o,q1o,a_,tle,N1o,j1o,Xq,D1o,G1o,O1o,n_,ale,V1o,X1o,zq,z1o,Q1o,W1o,s_,nle,H1o,U1o,Qq,J1o,Y1o,K1o,l_,sle,Z1o,eTo,Wq,oTo,rTo,tTo,i_,lle,aTo,nTo,Hq,sTo,lTo,iTo,d_,ile,dTo,cTo,Uq,mTo,fTo,gTo,c_,dle,hTo,uTo,Jq,pTo,_To,bTo,m_,cle,FTo,vTo,Yq,TTo,MTo,ETo,f_,mle,CTo,wTo,Kq,ATo,yTo,LTo,g_,fle,xTo,$To,Zq,kTo,STo,RTo,h_,gle,BTo,PTo,eN,ITo,qTo,NTo,u_,hle,jTo,DTo,oN,GTo,OTo,VTo,p_,ule,XTo,zTo,rN,QTo,WTo,HTo,__,UTo,ple,JTo,YTo,_le,KTo,ZTo,b_,vPe,yi,F_,ble,Ey,eMo,Fle,oMo,TPe,$o,Cy,rMo,Li,tMo,tN,aMo,nMo,aN,sMo,lMo,iMo,wy,dMo,vle,cMo,mMo,fMo,tt,Ay,gMo,Tle,hMo,uMo,xi,pMo,Mle,_Mo,bMo,nN,FMo,vMo,TMo,v_,MMo,Je,yy,EMo,Ele,CMo,wMo,La,AMo,Cle,yMo,LMo,wle,xMo,$Mo,Ale,kMo,SMo,RMo,z,T_,yle,BMo,PMo,sN,IMo,qMo,NMo,M_,Lle,jMo,DMo,lN,GMo,OMo,VMo,E_,xle,XMo,zMo,iN,QMo,WMo,HMo,C_,$le,UMo,JMo,dN,YMo,KMo,ZMo,w_,kle,e4o,o4o,cN,r4o,t4o,a4o,A_,Sle,n4o,s4o,mN,l4o,i4o,d4o,y_,Rle,c4o,m4o,fN,f4o,g4o,h4o,L_,Ble,u4o,p4o,gN,_4o,b4o,F4o,x_,Ple,v4o,T4o,hN,M4o,E4o,C4o,$_,Ile,w4o,A4o,uN,y4o,L4o,x4o,k_,qle,$4o,k4o,pN,S4o,R4o,B4o,S_,Nle,P4o,I4o,_N,q4o,N4o,j4o,R_,jle,D4o,G4o,bN,O4o,V4o,X4o,B_,Dle,z4o,Q4o,FN,W4o,H4o,U4o,P_,Gle,J4o,Y4o,vN,K4o,Z4o,eEo,I_,Ole,oEo,rEo,TN,tEo,aEo,nEo,q_,Vle,sEo,lEo,MN,iEo,dEo,cEo,N_,Xle,mEo,fEo,EN,gEo,hEo,uEo,j_,zle,pEo,_Eo,CN,bEo,FEo,vEo,D_,Qle,TEo,MEo,wN,EEo,CEo,wEo,G_,Wle,AEo,yEo,AN,LEo,xEo,$Eo,O_,Hle,kEo,SEo,yN,REo,BEo,PEo,V_,Ule,IEo,qEo,LN,NEo,jEo,DEo,X_,Jle,GEo,OEo,xN,VEo,XEo,zEo,z_,Yle,QEo,WEo,$N,HEo,UEo,JEo,Q_,Kle,YEo,KEo,kN,ZEo,e5o,o5o,W_,Zle,r5o,t5o,SN,a5o,n5o,s5o,H_,eie,l5o,i5o,RN,d5o,c5o,m5o,U_,oie,f5o,g5o,BN,h5o,u5o,p5o,J_,rie,_5o,b5o,PN,F5o,v5o,T5o,Y_,tie,M5o,E5o,IN,C5o,w5o,A5o,K_,aie,y5o,L5o,qN,x5o,$5o,k5o,Z_,nie,S5o,R5o,NN,B5o,P5o,I5o,eb,sie,q5o,N5o,jN,j5o,D5o,G5o,ob,lie,O5o,V5o,DN,X5o,z5o,Q5o,rb,W5o,iie,H5o,U5o,die,J5o,Y5o,tb,MPe,$i,ab,cie,Ly,K5o,mie,Z5o,EPe,ko,xy,eCo,ki,oCo,GN,rCo,tCo,ON,aCo,nCo,sCo,$y,lCo,fie,iCo,dCo,cCo,at,ky,mCo,gie,fCo,gCo,Si,hCo,hie,uCo,pCo,VN,_Co,bCo,FCo,nb,vCo,Ye,Sy,TCo,uie,MCo,ECo,xa,CCo,pie,wCo,ACo,_ie,yCo,LCo,bie,xCo,$Co,kCo,Q,sb,Fie,SCo,RCo,XN,BCo,PCo,ICo,lb,vie,qCo,NCo,zN,jCo,DCo,GCo,ib,Tie,OCo,VCo,QN,XCo,zCo,QCo,db,Mie,WCo,HCo,WN,UCo,JCo,YCo,cb,Eie,KCo,ZCo,HN,e3o,o3o,r3o,mb,Cie,t3o,a3o,UN,n3o,s3o,l3o,fb,wie,i3o,d3o,JN,c3o,m3o,f3o,gb,Aie,g3o,h3o,YN,u3o,p3o,_3o,hb,yie,b3o,F3o,KN,v3o,T3o,M3o,ub,Lie,E3o,C3o,ZN,w3o,A3o,y3o,pb,xie,L3o,x3o,ej,$3o,k3o,S3o,_b,$ie,R3o,B3o,oj,P3o,I3o,q3o,bb,kie,N3o,j3o,rj,D3o,G3o,O3o,Fb,Sie,V3o,X3o,tj,z3o,Q3o,W3o,vb,Rie,H3o,U3o,aj,J3o,Y3o,K3o,Tb,Bie,Z3o,ewo,nj,owo,rwo,two,Mb,Pie,awo,nwo,sj,swo,lwo,iwo,Eb,Iie,dwo,cwo,lj,mwo,fwo,gwo,Cb,qie,hwo,uwo,ij,pwo,_wo,bwo,wb,Nie,Fwo,vwo,dj,Two,Mwo,Ewo,Ab,jie,Cwo,wwo,cj,Awo,ywo,Lwo,yb,Die,xwo,$wo,mj,kwo,Swo,Rwo,Lb,Gie,Bwo,Pwo,fj,Iwo,qwo,Nwo,xb,Oie,jwo,Dwo,gj,Gwo,Owo,Vwo,$b,Vie,Xwo,zwo,hj,Qwo,Wwo,Hwo,kb,Xie,Uwo,Jwo,uj,Ywo,Kwo,Zwo,Sb,zie,eAo,oAo,pj,rAo,tAo,aAo,Rb,Qie,nAo,sAo,_j,lAo,iAo,dAo,Bb,Wie,cAo,mAo,bj,fAo,gAo,hAo,Pb,Hie,uAo,pAo,Fj,_Ao,bAo,FAo,Ib,Uie,vAo,TAo,Jie,MAo,EAo,CAo,qb,Yie,wAo,AAo,vj,yAo,LAo,xAo,Nb,Kie,$Ao,kAo,Tj,SAo,RAo,BAo,jb,Zie,PAo,IAo,Mj,qAo,NAo,jAo,Db,ede,DAo,GAo,Ej,OAo,VAo,XAo,Gb,zAo,ode,QAo,WAo,rde,HAo,UAo,Ob,CPe,Ri,Vb,tde,Ry,JAo,ade,YAo,wPe,So,By,KAo,Bi,ZAo,Cj,e0o,o0o,wj,r0o,t0o,a0o,Py,n0o,nde,s0o,l0o,i0o,nt,Iy,d0o,sde,c0o,m0o,Pi,f0o,lde,g0o,h0o,Aj,u0o,p0o,_0o,Xb,b0o,Ke,qy,F0o,ide,v0o,T0o,$a,M0o,dde,E0o,C0o,cde,w0o,A0o,mde,y0o,L0o,x0o,he,zb,fde,$0o,k0o,yj,S0o,R0o,B0o,Qb,gde,P0o,I0o,Lj,q0o,N0o,j0o,Wb,hde,D0o,G0o,xj,O0o,V0o,X0o,Hb,ude,z0o,Q0o,$j,W0o,H0o,U0o,Ub,pde,J0o,Y0o,kj,K0o,Z0o,e6o,Jb,_de,o6o,r6o,Sj,t6o,a6o,n6o,Yb,bde,s6o,l6o,Rj,i6o,d6o,c6o,Kb,Fde,m6o,f6o,Bj,g6o,h6o,u6o,Zb,vde,p6o,_6o,Pj,b6o,F6o,v6o,e2,Tde,T6o,M6o,Ij,E6o,C6o,w6o,o2,Mde,A6o,y6o,qj,L6o,x6o,$6o,r2,Ede,k6o,S6o,Nj,R6o,B6o,P6o,t2,Cde,I6o,q6o,jj,N6o,j6o,D6o,a2,wde,G6o,O6o,Dj,V6o,X6o,z6o,n2,Ade,Q6o,W6o,Gj,H6o,U6o,J6o,s2,yde,Y6o,K6o,Oj,Z6o,eyo,oyo,l2,Lde,ryo,tyo,Vj,ayo,nyo,syo,i2,lyo,xde,iyo,dyo,$de,cyo,myo,d2,APe,Ii,c2,kde,Ny,fyo,Sde,gyo,yPe,Ro,jy,hyo,qi,uyo,Xj,pyo,_yo,zj,byo,Fyo,vyo,Dy,Tyo,Rde,Myo,Eyo,Cyo,st,Gy,wyo,Bde,Ayo,yyo,Ni,Lyo,Pde,xyo,$yo,Qj,kyo,Syo,Ryo,m2,Byo,Ze,Oy,Pyo,Ide,Iyo,qyo,ka,Nyo,qde,jyo,Dyo,Nde,Gyo,Oyo,jde,Vyo,Xyo,zyo,q,f2,Dde,Qyo,Wyo,Wj,Hyo,Uyo,Jyo,g2,Gde,Yyo,Kyo,Hj,Zyo,eLo,oLo,h2,Ode,rLo,tLo,Uj,aLo,nLo,sLo,u2,Vde,lLo,iLo,Jj,dLo,cLo,mLo,p2,Xde,fLo,gLo,Yj,hLo,uLo,pLo,_2,zde,_Lo,bLo,Kj,FLo,vLo,TLo,b2,Qde,MLo,ELo,Zj,CLo,wLo,ALo,F2,Wde,yLo,LLo,eD,xLo,$Lo,kLo,v2,Hde,SLo,RLo,oD,BLo,PLo,ILo,T2,Ude,qLo,NLo,rD,jLo,DLo,GLo,M2,Jde,OLo,VLo,tD,XLo,zLo,QLo,E2,Yde,WLo,HLo,aD,ULo,JLo,YLo,C2,Kde,KLo,ZLo,nD,e8o,o8o,r8o,w2,Zde,t8o,a8o,sD,n8o,s8o,l8o,A2,ece,i8o,d8o,lD,c8o,m8o,f8o,y2,oce,g8o,h8o,iD,u8o,p8o,_8o,L2,rce,b8o,F8o,dD,v8o,T8o,M8o,x2,tce,E8o,C8o,cD,w8o,A8o,y8o,$2,ace,L8o,x8o,mD,$8o,k8o,S8o,k2,nce,R8o,B8o,fD,P8o,I8o,q8o,S2,sce,N8o,j8o,gD,D8o,G8o,O8o,R2,lce,V8o,X8o,hD,z8o,Q8o,W8o,B2,ice,H8o,U8o,uD,J8o,Y8o,K8o,P2,dce,Z8o,exo,pD,oxo,rxo,txo,I2,cce,axo,nxo,_D,sxo,lxo,ixo,q2,mce,dxo,cxo,bD,mxo,fxo,gxo,N2,fce,hxo,uxo,FD,pxo,_xo,bxo,j2,gce,Fxo,vxo,vD,Txo,Mxo,Exo,D2,hce,Cxo,wxo,TD,Axo,yxo,Lxo,G2,uce,xxo,$xo,MD,kxo,Sxo,Rxo,O2,pce,Bxo,Pxo,ED,Ixo,qxo,Nxo,V2,_ce,jxo,Dxo,CD,Gxo,Oxo,Vxo,X2,bce,Xxo,zxo,wD,Qxo,Wxo,Hxo,z2,Fce,Uxo,Jxo,AD,Yxo,Kxo,Zxo,Q2,vce,e7o,o7o,yD,r7o,t7o,a7o,W2,Tce,n7o,s7o,LD,l7o,i7o,d7o,H2,Mce,c7o,m7o,xD,f7o,g7o,h7o,U2,Ece,u7o,p7o,$D,_7o,b7o,F7o,J2,Cce,v7o,T7o,kD,M7o,E7o,C7o,Y2,wce,w7o,A7o,SD,y7o,L7o,x7o,K2,Ace,$7o,k7o,RD,S7o,R7o,B7o,Z2,yce,P7o,I7o,BD,q7o,N7o,j7o,eF,Lce,D7o,G7o,PD,O7o,V7o,X7o,oF,xce,z7o,Q7o,ID,W7o,H7o,U7o,rF,$ce,J7o,Y7o,qD,K7o,Z7o,e9o,tF,kce,o9o,r9o,ND,t9o,a9o,n9o,aF,Sce,s9o,l9o,jD,i9o,d9o,c9o,nF,m9o,Rce,f9o,g9o,Bce,h9o,u9o,sF,LPe,ji,lF,Pce,Vy,p9o,Ice,_9o,xPe,Bo,Xy,b9o,Di,F9o,DD,v9o,T9o,GD,M9o,E9o,C9o,zy,w9o,qce,A9o,y9o,L9o,lt,Qy,x9o,Nce,$9o,k9o,Gi,S9o,jce,R9o,B9o,OD,P9o,I9o,q9o,iF,N9o,eo,Wy,j9o,Dce,D9o,G9o,Sa,O9o,Gce,V9o,X9o,Oce,z9o,Q9o,Vce,W9o,H9o,U9o,Y,dF,Xce,J9o,Y9o,VD,K9o,Z9o,e$o,cF,zce,o$o,r$o,XD,t$o,a$o,n$o,mF,Qce,s$o,l$o,zD,i$o,d$o,c$o,fF,Wce,m$o,f$o,QD,g$o,h$o,u$o,gF,Hce,p$o,_$o,WD,b$o,F$o,v$o,hF,Uce,T$o,M$o,HD,E$o,C$o,w$o,uF,Jce,A$o,y$o,UD,L$o,x$o,$$o,pF,Yce,k$o,S$o,JD,R$o,B$o,P$o,_F,Kce,I$o,q$o,YD,N$o,j$o,D$o,bF,Zce,G$o,O$o,KD,V$o,X$o,z$o,FF,eme,Q$o,W$o,ZD,H$o,U$o,J$o,vF,ome,Y$o,K$o,eG,Z$o,eko,oko,TF,rme,rko,tko,oG,ako,nko,sko,MF,tme,lko,iko,rG,dko,cko,mko,EF,ame,fko,gko,tG,hko,uko,pko,CF,nme,_ko,bko,aG,Fko,vko,Tko,wF,sme,Mko,Eko,nG,Cko,wko,Ako,AF,lme,yko,Lko,sG,xko,$ko,kko,yF,ime,Sko,Rko,lG,Bko,Pko,Iko,LF,dme,qko,Nko,iG,jko,Dko,Gko,xF,cme,Oko,Vko,dG,Xko,zko,Qko,$F,mme,Wko,Hko,cG,Uko,Jko,Yko,kF,fme,Kko,Zko,mG,eSo,oSo,rSo,SF,gme,tSo,aSo,fG,nSo,sSo,lSo,RF,hme,iSo,dSo,gG,cSo,mSo,fSo,BF,ume,gSo,hSo,hG,uSo,pSo,_So,PF,pme,bSo,FSo,uG,vSo,TSo,MSo,IF,_me,ESo,CSo,pG,wSo,ASo,ySo,qF,LSo,bme,xSo,$So,Fme,kSo,SSo,NF,$Pe,Oi,jF,vme,Hy,RSo,Tme,BSo,kPe,Po,Uy,PSo,Vi,ISo,_G,qSo,NSo,bG,jSo,DSo,GSo,Jy,OSo,Mme,VSo,XSo,zSo,it,Yy,QSo,Eme,WSo,HSo,Xi,USo,Cme,JSo,YSo,FG,KSo,ZSo,eRo,DF,oRo,oo,Ky,rRo,wme,tRo,aRo,Ra,nRo,Ame,sRo,lRo,yme,iRo,dRo,Lme,cRo,mRo,fRo,Yr,GF,xme,gRo,hRo,vG,uRo,pRo,_Ro,OF,$me,bRo,FRo,TG,vRo,TRo,MRo,VF,kme,ERo,CRo,MG,wRo,ARo,yRo,XF,Sme,LRo,xRo,EG,$Ro,kRo,SRo,zF,Rme,RRo,BRo,CG,PRo,IRo,qRo,QF,NRo,Bme,jRo,DRo,Pme,GRo,ORo,WF,SPe,zi,HF,Ime,Zy,VRo,qme,XRo,RPe,Io,eL,zRo,Qi,QRo,wG,WRo,HRo,AG,URo,JRo,YRo,oL,KRo,Nme,ZRo,eBo,oBo,dt,rL,rBo,jme,tBo,aBo,Wi,nBo,Dme,sBo,lBo,yG,iBo,dBo,cBo,UF,mBo,ro,tL,fBo,Gme,gBo,hBo,Ba,uBo,Ome,pBo,_Bo,Vme,bBo,FBo,Xme,vBo,TBo,MBo,U,JF,zme,EBo,CBo,LG,wBo,ABo,yBo,YF,Qme,LBo,xBo,xG,$Bo,kBo,SBo,KF,Wme,RBo,BBo,$G,PBo,IBo,qBo,ZF,Hme,NBo,jBo,kG,DBo,GBo,OBo,ev,Ume,VBo,XBo,SG,zBo,QBo,WBo,ov,Jme,HBo,UBo,RG,JBo,YBo,KBo,rv,Yme,ZBo,ePo,BG,oPo,rPo,tPo,tv,Kme,aPo,nPo,PG,sPo,lPo,iPo,av,Zme,dPo,cPo,IG,mPo,fPo,gPo,nv,efe,hPo,uPo,qG,pPo,_Po,bPo,sv,ofe,FPo,vPo,NG,TPo,MPo,EPo,lv,rfe,CPo,wPo,jG,APo,yPo,LPo,iv,tfe,xPo,$Po,DG,kPo,SPo,RPo,dv,afe,BPo,PPo,GG,IPo,qPo,NPo,cv,nfe,jPo,DPo,OG,GPo,OPo,VPo,mv,sfe,XPo,zPo,VG,QPo,WPo,HPo,fv,lfe,UPo,JPo,XG,YPo,KPo,ZPo,gv,ife,eIo,oIo,zG,rIo,tIo,aIo,hv,dfe,nIo,sIo,QG,lIo,iIo,dIo,uv,cfe,cIo,mIo,WG,fIo,gIo,hIo,pv,mfe,uIo,pIo,HG,_Io,bIo,FIo,_v,ffe,vIo,TIo,UG,MIo,EIo,CIo,bv,gfe,wIo,AIo,JG,yIo,LIo,xIo,Fv,hfe,$Io,kIo,YG,SIo,RIo,BIo,vv,ufe,PIo,IIo,KG,qIo,NIo,jIo,Tv,pfe,DIo,GIo,ZG,OIo,VIo,XIo,Mv,_fe,zIo,QIo,eO,WIo,HIo,UIo,Ev,bfe,JIo,YIo,oO,KIo,ZIo,eqo,Cv,Ffe,oqo,rqo,rO,tqo,aqo,nqo,wv,vfe,sqo,lqo,tO,iqo,dqo,cqo,Av,Tfe,mqo,fqo,aO,gqo,hqo,uqo,yv,Mfe,pqo,_qo,nO,bqo,Fqo,vqo,Lv,Efe,Tqo,Mqo,sO,Eqo,Cqo,wqo,xv,Aqo,Cfe,yqo,Lqo,wfe,xqo,$qo,$v,BPe,Hi,kv,Afe,aL,kqo,yfe,Sqo,PPe,qo,nL,Rqo,Ui,Bqo,lO,Pqo,Iqo,iO,qqo,Nqo,jqo,sL,Dqo,Lfe,Gqo,Oqo,Vqo,ct,lL,Xqo,xfe,zqo,Qqo,Ji,Wqo,$fe,Hqo,Uqo,dO,Jqo,Yqo,Kqo,Sv,Zqo,to,iL,eNo,kfe,oNo,rNo,Pa,tNo,Sfe,aNo,nNo,Rfe,sNo,lNo,Bfe,iNo,dNo,cNo,O,Rv,Pfe,mNo,fNo,cO,gNo,hNo,uNo,Bv,Ife,pNo,_No,mO,bNo,FNo,vNo,Pv,qfe,TNo,MNo,fO,ENo,CNo,wNo,Iv,Nfe,ANo,yNo,gO,LNo,xNo,$No,qv,jfe,kNo,SNo,hO,RNo,BNo,PNo,Nv,Dfe,INo,qNo,uO,NNo,jNo,DNo,jv,Gfe,GNo,ONo,pO,VNo,XNo,zNo,Dv,Ofe,QNo,WNo,_O,HNo,UNo,JNo,Gv,Vfe,YNo,KNo,bO,ZNo,ejo,ojo,Ov,Xfe,rjo,tjo,FO,ajo,njo,sjo,Vv,zfe,ljo,ijo,vO,djo,cjo,mjo,Xv,Qfe,fjo,gjo,TO,hjo,ujo,pjo,zv,Wfe,_jo,bjo,MO,Fjo,vjo,Tjo,Qv,Hfe,Mjo,Ejo,EO,Cjo,wjo,Ajo,Wv,Ufe,yjo,Ljo,CO,xjo,$jo,kjo,Hv,Jfe,Sjo,Rjo,wO,Bjo,Pjo,Ijo,Uv,Yfe,qjo,Njo,AO,jjo,Djo,Gjo,Jv,Kfe,Ojo,Vjo,yO,Xjo,zjo,Qjo,Yv,Zfe,Wjo,Hjo,LO,Ujo,Jjo,Yjo,Kv,ege,Kjo,Zjo,xO,eDo,oDo,rDo,Zv,oge,tDo,aDo,$O,nDo,sDo,lDo,e1,rge,iDo,dDo,kO,cDo,mDo,fDo,o1,tge,gDo,hDo,SO,uDo,pDo,_Do,r1,age,bDo,FDo,RO,vDo,TDo,MDo,t1,nge,EDo,CDo,BO,wDo,ADo,yDo,a1,sge,LDo,xDo,PO,$Do,kDo,SDo,n1,lge,RDo,BDo,IO,PDo,IDo,qDo,s1,ige,NDo,jDo,qO,DDo,GDo,ODo,l1,dge,VDo,XDo,NO,zDo,QDo,WDo,i1,cge,HDo,UDo,jO,JDo,YDo,KDo,d1,mge,ZDo,eGo,DO,oGo,rGo,tGo,c1,fge,aGo,nGo,GO,sGo,lGo,iGo,m1,gge,dGo,cGo,OO,mGo,fGo,gGo,f1,hge,hGo,uGo,VO,pGo,_Go,bGo,g1,uge,FGo,vGo,XO,TGo,MGo,EGo,h1,pge,CGo,wGo,zO,AGo,yGo,LGo,u1,_ge,xGo,$Go,QO,kGo,SGo,RGo,p1,bge,BGo,PGo,WO,IGo,qGo,NGo,_1,Fge,jGo,DGo,HO,GGo,OGo,VGo,b1,XGo,vge,zGo,QGo,Tge,WGo,HGo,F1,IPe,Yi,v1,Mge,dL,UGo,Ege,JGo,qPe,No,cL,YGo,Ki,KGo,UO,ZGo,eOo,JO,oOo,rOo,tOo,mL,aOo,Cge,nOo,sOo,lOo,mt,fL,iOo,wge,dOo,cOo,Zi,mOo,Age,fOo,gOo,YO,hOo,uOo,pOo,T1,_Oo,ao,gL,bOo,yge,FOo,vOo,Ia,TOo,Lge,MOo,EOo,xge,COo,wOo,$ge,AOo,yOo,LOo,kge,M1,Sge,xOo,$Oo,KO,kOo,SOo,ROo,E1,BOo,Rge,POo,IOo,Bge,qOo,NOo,C1,NPe,ed,w1,Pge,hL,jOo,Ige,DOo,jPe,jo,uL,GOo,od,OOo,ZO,VOo,XOo,eV,zOo,QOo,WOo,pL,HOo,qge,UOo,JOo,YOo,ft,_L,KOo,Nge,ZOo,eVo,rd,oVo,jge,rVo,tVo,oV,aVo,nVo,sVo,A1,lVo,no,bL,iVo,Dge,dVo,cVo,qa,mVo,Gge,fVo,gVo,Oge,hVo,uVo,Vge,pVo,_Vo,bVo,Fe,y1,Xge,FVo,vVo,rV,TVo,MVo,EVo,L1,zge,CVo,wVo,tV,AVo,yVo,LVo,x1,Qge,xVo,$Vo,aV,kVo,SVo,RVo,Rs,Wge,BVo,PVo,nV,IVo,qVo,sV,NVo,jVo,DVo,$1,Hge,GVo,OVo,lV,VVo,XVo,zVo,gt,Uge,QVo,WVo,iV,HVo,UVo,dV,JVo,YVo,cV,KVo,ZVo,eXo,k1,Jge,oXo,rXo,mV,tXo,aXo,nXo,S1,Yge,sXo,lXo,fV,iXo,dXo,cXo,R1,Kge,mXo,fXo,gV,gXo,hXo,uXo,B1,Zge,pXo,_Xo,hV,bXo,FXo,vXo,P1,ehe,TXo,MXo,uV,EXo,CXo,wXo,I1,ohe,AXo,yXo,pV,LXo,xXo,$Xo,q1,rhe,kXo,SXo,_V,RXo,BXo,PXo,N1,IXo,the,qXo,NXo,ahe,jXo,DXo,j1,DPe,td,D1,nhe,FL,GXo,she,OXo,GPe,Do,vL,VXo,ad,XXo,bV,zXo,QXo,FV,WXo,HXo,UXo,TL,JXo,lhe,YXo,KXo,ZXo,ht,ML,ezo,ihe,ozo,rzo,nd,tzo,dhe,azo,nzo,vV,szo,lzo,izo,G1,dzo,so,EL,czo,che,mzo,fzo,Na,gzo,mhe,hzo,uzo,fhe,pzo,_zo,ghe,bzo,Fzo,vzo,hhe,O1,uhe,Tzo,Mzo,TV,Ezo,Czo,wzo,V1,Azo,phe,yzo,Lzo,_he,xzo,$zo,X1,OPe,sd,z1,bhe,CL,kzo,Fhe,Szo,VPe,Go,wL,Rzo,ld,Bzo,MV,Pzo,Izo,EV,qzo,Nzo,jzo,AL,Dzo,vhe,Gzo,Ozo,Vzo,ut,yL,Xzo,The,zzo,Qzo,id,Wzo,Mhe,Hzo,Uzo,CV,Jzo,Yzo,Kzo,Q1,Zzo,lo,LL,eQo,Ehe,oQo,rQo,ja,tQo,Che,aQo,nQo,whe,sQo,lQo,Ahe,iQo,dQo,cQo,Ne,W1,yhe,mQo,fQo,wV,gQo,hQo,uQo,H1,Lhe,pQo,_Qo,AV,bQo,FQo,vQo,U1,xhe,TQo,MQo,yV,EQo,CQo,wQo,J1,$he,AQo,yQo,LV,LQo,xQo,$Qo,Y1,khe,kQo,SQo,xV,RQo,BQo,PQo,K1,She,IQo,qQo,$V,NQo,jQo,DQo,Z1,Rhe,GQo,OQo,kV,VQo,XQo,zQo,eT,Bhe,QQo,WQo,SV,HQo,UQo,JQo,oT,YQo,Phe,KQo,ZQo,Ihe,eWo,oWo,rT,XPe,dd,tT,qhe,xL,rWo,Nhe,tWo,zPe,Oo,$L,aWo,cd,nWo,RV,sWo,lWo,BV,iWo,dWo,cWo,kL,mWo,jhe,fWo,gWo,hWo,pt,SL,uWo,Dhe,pWo,_Wo,md,bWo,Ghe,FWo,vWo,PV,TWo,MWo,EWo,aT,CWo,io,RL,wWo,Ohe,AWo,yWo,Da,LWo,Vhe,xWo,$Wo,Xhe,kWo,SWo,zhe,RWo,BWo,PWo,Ga,nT,Qhe,IWo,qWo,IV,NWo,jWo,DWo,sT,Whe,GWo,OWo,qV,VWo,XWo,zWo,lT,Hhe,QWo,WWo,NV,HWo,UWo,JWo,iT,Uhe,YWo,KWo,jV,ZWo,eHo,oHo,dT,rHo,Jhe,tHo,aHo,Yhe,nHo,sHo,cT,QPe,fd,mT,Khe,BL,lHo,Zhe,iHo,WPe,Vo,PL,dHo,gd,cHo,DV,mHo,fHo,GV,gHo,hHo,uHo,IL,pHo,eue,_Ho,bHo,FHo,_t,qL,vHo,oue,THo,MHo,hd,EHo,rue,CHo,wHo,OV,AHo,yHo,LHo,fT,xHo,co,NL,$Ho,tue,kHo,SHo,Oa,RHo,aue,BHo,PHo,nue,IHo,qHo,sue,NHo,jHo,DHo,je,gT,lue,GHo,OHo,VV,VHo,XHo,zHo,hT,iue,QHo,WHo,XV,HHo,UHo,JHo,uT,due,YHo,KHo,zV,ZHo,eUo,oUo,pT,cue,rUo,tUo,QV,aUo,nUo,sUo,_T,mue,lUo,iUo,WV,dUo,cUo,mUo,bT,fue,fUo,gUo,HV,hUo,uUo,pUo,FT,gue,_Uo,bUo,UV,FUo,vUo,TUo,vT,hue,MUo,EUo,JV,CUo,wUo,AUo,TT,yUo,uue,LUo,xUo,pue,$Uo,kUo,MT,HPe,ud,ET,_ue,jL,SUo,bue,RUo,UPe,Xo,DL,BUo,pd,PUo,YV,IUo,qUo,KV,NUo,jUo,DUo,GL,GUo,Fue,OUo,VUo,XUo,bt,OL,zUo,vue,QUo,WUo,_d,HUo,Tue,UUo,JUo,ZV,YUo,KUo,ZUo,CT,eJo,mo,VL,oJo,Mue,rJo,tJo,Va,aJo,Eue,nJo,sJo,Cue,lJo,iJo,wue,dJo,cJo,mJo,XL,wT,Aue,fJo,gJo,eX,hJo,uJo,pJo,AT,yue,_Jo,bJo,oX,FJo,vJo,TJo,yT,MJo,Lue,EJo,CJo,xue,wJo,AJo,LT,JPe,bd,xT,$ue,zL,yJo,kue,LJo,YPe,zo,QL,xJo,Fd,$Jo,rX,kJo,SJo,tX,RJo,BJo,PJo,WL,IJo,Sue,qJo,NJo,jJo,Ft,HL,DJo,Rue,GJo,OJo,vd,VJo,Bue,XJo,zJo,aX,QJo,WJo,HJo,$T,UJo,fo,UL,JJo,Pue,YJo,KJo,Xa,ZJo,Iue,eYo,oYo,que,rYo,tYo,Nue,aYo,nYo,sYo,za,kT,jue,lYo,iYo,nX,dYo,cYo,mYo,ST,Due,fYo,gYo,sX,hYo,uYo,pYo,RT,Gue,_Yo,bYo,lX,FYo,vYo,TYo,BT,Oue,MYo,EYo,iX,CYo,wYo,AYo,PT,yYo,Vue,LYo,xYo,Xue,$Yo,kYo,IT,KPe,Td,qT,zue,JL,SYo,Que,RYo,ZPe,Qo,YL,BYo,Md,PYo,dX,IYo,qYo,cX,NYo,jYo,DYo,KL,GYo,Wue,OYo,VYo,XYo,vt,ZL,zYo,Hue,QYo,WYo,Ed,HYo,Uue,UYo,JYo,mX,YYo,KYo,ZYo,NT,eKo,go,e8,oKo,Jue,rKo,tKo,Qa,aKo,Yue,nKo,sKo,Kue,lKo,iKo,Zue,dKo,cKo,mKo,Cd,jT,epe,fKo,gKo,fX,hKo,uKo,pKo,DT,ope,_Ko,bKo,gX,FKo,vKo,TKo,GT,rpe,MKo,EKo,hX,CKo,wKo,AKo,OT,yKo,tpe,LKo,xKo,ape,$Ko,kKo,VT,eIe,wd,XT,npe,o8,SKo,spe,RKo,oIe,Wo,r8,BKo,Ad,PKo,uX,IKo,qKo,pX,NKo,jKo,DKo,t8,GKo,lpe,OKo,VKo,XKo,Tt,a8,zKo,ipe,QKo,WKo,yd,HKo,dpe,UKo,JKo,_X,YKo,KKo,ZKo,zT,eZo,ho,n8,oZo,cpe,rZo,tZo,Wa,aZo,mpe,nZo,sZo,fpe,lZo,iZo,gpe,dZo,cZo,mZo,s8,QT,hpe,fZo,gZo,bX,hZo,uZo,pZo,WT,upe,_Zo,bZo,FX,FZo,vZo,TZo,HT,MZo,ppe,EZo,CZo,_pe,wZo,AZo,UT,rIe,Ld,JT,bpe,l8,yZo,Fpe,LZo,tIe,Ho,i8,xZo,xd,$Zo,vX,kZo,SZo,TX,RZo,BZo,PZo,d8,IZo,vpe,qZo,NZo,jZo,Mt,c8,DZo,Tpe,GZo,OZo,$d,VZo,Mpe,XZo,zZo,MX,QZo,WZo,HZo,YT,UZo,uo,m8,JZo,Epe,YZo,KZo,Ha,ZZo,Cpe,eer,oer,wpe,rer,ter,Ape,aer,ner,ser,ype,KT,Lpe,ler,ier,EX,der,cer,mer,ZT,fer,xpe,ger,her,$pe,uer,per,eM,aIe,kd,oM,kpe,f8,_er,Spe,ber,nIe,Uo,g8,Fer,Sd,ver,CX,Ter,Mer,wX,Eer,Cer,wer,h8,Aer,Rpe,yer,Ler,xer,Et,u8,$er,Bpe,ker,Ser,Rd,Rer,Ppe,Ber,Per,AX,Ier,qer,Ner,rM,jer,po,p8,Der,Ipe,Ger,Oer,Ua,Ver,qpe,Xer,zer,Npe,Qer,Wer,jpe,Her,Uer,Jer,Ja,tM,Dpe,Yer,Ker,yX,Zer,eor,oor,aM,Gpe,ror,tor,LX,aor,nor,sor,nM,Ope,lor,ior,xX,dor,cor,mor,sM,Vpe,gor,hor,$X,uor,por,_or,lM,bor,Xpe,For,vor,zpe,Tor,Mor,iM,sIe,Bd,dM,Qpe,_8,Eor,Wpe,Cor,lIe,Jo,b8,wor,Pd,Aor,kX,yor,Lor,SX,xor,$or,kor,F8,Sor,Hpe,Ror,Bor,Por,Ct,v8,Ior,Upe,qor,Nor,Id,jor,Jpe,Dor,Gor,RX,Oor,Vor,Xor,cM,zor,_o,T8,Qor,Ype,Wor,Hor,Ya,Uor,Kpe,Jor,Yor,Zpe,Kor,Zor,e_e,err,orr,rrr,o_e,mM,r_e,trr,arr,BX,nrr,srr,lrr,fM,irr,t_e,drr,crr,a_e,mrr,frr,gM,iIe,qd,hM,n_e,M8,grr,s_e,hrr,dIe,Yo,E8,urr,Nd,prr,PX,_rr,brr,IX,Frr,vrr,Trr,C8,Mrr,l_e,Err,Crr,wrr,wt,w8,Arr,i_e,yrr,Lrr,jd,xrr,d_e,$rr,krr,qX,Srr,Rrr,Brr,uM,Prr,wr,A8,Irr,c_e,qrr,Nrr,Ka,jrr,m_e,Drr,Grr,f_e,Orr,Vrr,g_e,Xrr,zrr,Qrr,j,pM,h_e,Wrr,Hrr,NX,Urr,Jrr,Yrr,_M,u_e,Krr,Zrr,jX,etr,otr,rtr,bM,p_e,ttr,atr,DX,ntr,str,ltr,FM,__e,itr,dtr,GX,ctr,mtr,ftr,vM,b_e,gtr,htr,OX,utr,ptr,_tr,TM,F_e,btr,Ftr,VX,vtr,Ttr,Mtr,MM,v_e,Etr,Ctr,XX,wtr,Atr,ytr,EM,T_e,Ltr,xtr,zX,$tr,ktr,Str,CM,M_e,Rtr,Btr,QX,Ptr,Itr,qtr,wM,E_e,Ntr,jtr,WX,Dtr,Gtr,Otr,AM,C_e,Vtr,Xtr,HX,ztr,Qtr,Wtr,yM,w_e,Htr,Utr,UX,Jtr,Ytr,Ktr,LM,A_e,Ztr,ear,JX,oar,rar,tar,xM,y_e,aar,nar,YX,sar,lar,iar,$M,L_e,dar,car,KX,mar,far,gar,kM,x_e,har,uar,ZX,par,_ar,bar,SM,$_e,Far,Tar,ez,Mar,Ear,Car,Bs,k_e,war,Aar,oz,yar,Lar,rz,xar,$ar,kar,RM,S_e,Sar,Rar,tz,Bar,Par,Iar,BM,R_e,qar,Nar,az,jar,Dar,Gar,PM,B_e,Oar,Var,nz,Xar,zar,Qar,IM,P_e,War,Har,sz,Uar,Jar,Yar,qM,I_e,Kar,Zar,lz,enr,onr,rnr,NM,q_e,tnr,anr,iz,nnr,snr,lnr,jM,N_e,inr,dnr,dz,cnr,mnr,fnr,DM,j_e,gnr,hnr,cz,unr,pnr,_nr,GM,D_e,bnr,Fnr,mz,vnr,Tnr,Mnr,OM,G_e,Enr,Cnr,fz,wnr,Anr,ynr,VM,O_e,Lnr,xnr,gz,$nr,knr,Snr,XM,V_e,Rnr,Bnr,hz,Pnr,Inr,qnr,zM,X_e,Nnr,jnr,uz,Dnr,Gnr,Onr,QM,z_e,Vnr,Xnr,pz,znr,Qnr,Wnr,WM,Q_e,Hnr,Unr,_z,Jnr,Ynr,Knr,HM,W_e,Znr,esr,bz,osr,rsr,tsr,UM,H_e,asr,nsr,Fz,ssr,lsr,isr,JM,U_e,dsr,csr,vz,msr,fsr,gsr,YM,J_e,hsr,usr,Tz,psr,_sr,bsr,KM,Y_e,Fsr,vsr,Mz,Tsr,Msr,Esr,ZM,K_e,Csr,wsr,Ez,Asr,ysr,Lsr,e4,Z_e,xsr,$sr,Cz,ksr,Ssr,Rsr,o4,ebe,Bsr,Psr,wz,Isr,qsr,Nsr,r4,obe,jsr,Dsr,Az,Gsr,Osr,Vsr,t4,rbe,Xsr,zsr,yz,Qsr,Wsr,Hsr,a4,tbe,Usr,Jsr,Lz,Ysr,Ksr,Zsr,n4,abe,elr,olr,xz,rlr,tlr,alr,s4,cIe,Dd,l4,nbe,y8,nlr,sbe,slr,mIe,Ko,L8,llr,Gd,ilr,$z,dlr,clr,kz,mlr,flr,glr,x8,hlr,lbe,ulr,plr,_lr,At,$8,blr,ibe,Flr,vlr,Od,Tlr,dbe,Mlr,Elr,Sz,Clr,wlr,Alr,i4,ylr,Ar,k8,Llr,cbe,xlr,$lr,Za,klr,mbe,Slr,Rlr,fbe,Blr,Plr,gbe,Ilr,qlr,Nlr,ne,d4,hbe,jlr,Dlr,Rz,Glr,Olr,Vlr,c4,ube,Xlr,zlr,Bz,Qlr,Wlr,Hlr,m4,pbe,Ulr,Jlr,Pz,Ylr,Klr,Zlr,f4,_be,eir,oir,Iz,rir,tir,air,g4,bbe,nir,sir,qz,lir,iir,dir,h4,Fbe,cir,mir,Nz,fir,gir,hir,u4,vbe,uir,pir,jz,_ir,bir,Fir,p4,Tbe,vir,Tir,Dz,Mir,Eir,Cir,_4,Mbe,wir,Air,Gz,yir,Lir,xir,b4,Ebe,$ir,kir,Oz,Sir,Rir,Bir,F4,Cbe,Pir,Iir,Vz,qir,Nir,jir,v4,wbe,Dir,Gir,Xz,Oir,Vir,Xir,T4,Abe,zir,Qir,zz,Wir,Hir,Uir,M4,ybe,Jir,Yir,Qz,Kir,Zir,edr,E4,Lbe,odr,rdr,Wz,tdr,adr,ndr,C4,xbe,sdr,ldr,Hz,idr,ddr,cdr,w4,$be,mdr,fdr,Uz,gdr,hdr,udr,A4,kbe,pdr,_dr,Jz,bdr,Fdr,vdr,y4,Sbe,Tdr,Mdr,Yz,Edr,Cdr,wdr,L4,Rbe,Adr,ydr,Kz,Ldr,xdr,$dr,x4,Bbe,kdr,Sdr,Zz,Rdr,Bdr,Pdr,$4,Pbe,Idr,qdr,eQ,Ndr,jdr,Ddr,k4,Ibe,Gdr,Odr,oQ,Vdr,Xdr,zdr,S4,fIe,Vd,R4,qbe,S8,Qdr,Nbe,Wdr,gIe,Zo,R8,Hdr,Xd,Udr,rQ,Jdr,Ydr,tQ,Kdr,Zdr,ecr,B8,ocr,jbe,rcr,tcr,acr,yt,P8,ncr,Dbe,scr,lcr,zd,icr,Gbe,dcr,ccr,aQ,mcr,fcr,gcr,B4,hcr,yr,I8,ucr,Obe,pcr,_cr,en,bcr,Vbe,Fcr,vcr,Xbe,Tcr,Mcr,zbe,Ecr,Ccr,wcr,Te,P4,Qbe,Acr,ycr,nQ,Lcr,xcr,$cr,I4,Wbe,kcr,Scr,sQ,Rcr,Bcr,Pcr,q4,Hbe,Icr,qcr,lQ,Ncr,jcr,Dcr,N4,Ube,Gcr,Ocr,iQ,Vcr,Xcr,zcr,j4,Jbe,Qcr,Wcr,dQ,Hcr,Ucr,Jcr,D4,Ybe,Ycr,Kcr,cQ,Zcr,emr,omr,G4,Kbe,rmr,tmr,mQ,amr,nmr,smr,O4,Zbe,lmr,imr,fQ,dmr,cmr,mmr,V4,e2e,fmr,gmr,gQ,hmr,umr,pmr,X4,o2e,_mr,bmr,hQ,Fmr,vmr,Tmr,z4,r2e,Mmr,Emr,uQ,Cmr,wmr,Amr,Q4,t2e,ymr,Lmr,pQ,xmr,$mr,kmr,W4,hIe,Qd,H4,a2e,q8,Smr,n2e,Rmr,uIe,er,N8,Bmr,Wd,Pmr,_Q,Imr,qmr,bQ,Nmr,jmr,Dmr,j8,Gmr,s2e,Omr,Vmr,Xmr,Lt,D8,zmr,l2e,Qmr,Wmr,Hd,Hmr,i2e,Umr,Jmr,FQ,Ymr,Kmr,Zmr,U4,efr,Lr,G8,ofr,d2e,rfr,tfr,on,afr,c2e,nfr,sfr,m2e,lfr,ifr,f2e,dfr,cfr,mfr,Ud,J4,g2e,ffr,gfr,vQ,hfr,ufr,pfr,Y4,h2e,_fr,bfr,TQ,Ffr,vfr,Tfr,K4,u2e,Mfr,Efr,MQ,Cfr,wfr,Afr,Z4,pIe,Jd,eE,p2e,O8,yfr,_2e,Lfr,_Ie,or,V8,xfr,Yd,$fr,EQ,kfr,Sfr,CQ,Rfr,Bfr,Pfr,X8,Ifr,b2e,qfr,Nfr,jfr,xt,z8,Dfr,F2e,Gfr,Ofr,Kd,Vfr,v2e,Xfr,zfr,wQ,Qfr,Wfr,Hfr,oE,Ufr,xr,Q8,Jfr,T2e,Yfr,Kfr,rn,Zfr,M2e,egr,ogr,E2e,rgr,tgr,C2e,agr,ngr,sgr,ie,rE,w2e,lgr,igr,AQ,dgr,cgr,mgr,tE,A2e,fgr,ggr,yQ,hgr,ugr,pgr,aE,y2e,_gr,bgr,LQ,Fgr,vgr,Tgr,nE,L2e,Mgr,Egr,xQ,Cgr,wgr,Agr,sE,x2e,ygr,Lgr,$Q,xgr,$gr,kgr,lE,$2e,Sgr,Rgr,kQ,Bgr,Pgr,Igr,iE,k2e,qgr,Ngr,SQ,jgr,Dgr,Ggr,dE,S2e,Ogr,Vgr,RQ,Xgr,zgr,Qgr,cE,R2e,Wgr,Hgr,BQ,Ugr,Jgr,Ygr,mE,B2e,Kgr,Zgr,PQ,ehr,ohr,rhr,fE,P2e,thr,ahr,IQ,nhr,shr,lhr,gE,I2e,ihr,dhr,qQ,chr,mhr,fhr,hE,q2e,ghr,hhr,NQ,uhr,phr,_hr,uE,N2e,bhr,Fhr,jQ,vhr,Thr,Mhr,pE,j2e,Ehr,Chr,DQ,whr,Ahr,yhr,_E,D2e,Lhr,xhr,GQ,$hr,khr,Shr,bE,G2e,Rhr,Bhr,OQ,Phr,Ihr,qhr,FE,O2e,Nhr,jhr,VQ,Dhr,Ghr,Ohr,vE,V2e,Vhr,Xhr,XQ,zhr,Qhr,Whr,TE,X2e,Hhr,Uhr,zQ,Jhr,Yhr,Khr,ME,bIe,Zd,EE,z2e,W8,Zhr,Q2e,eur,FIe,rr,H8,our,ec,rur,QQ,tur,aur,WQ,nur,sur,lur,U8,iur,W2e,dur,cur,mur,$t,J8,fur,H2e,gur,hur,oc,uur,U2e,pur,_ur,HQ,bur,Fur,vur,CE,Tur,$r,Y8,Mur,J2e,Eur,Cur,tn,wur,Y2e,Aur,yur,K2e,Lur,xur,Z2e,$ur,kur,Sur,ye,wE,eFe,Rur,Bur,UQ,Pur,Iur,qur,AE,oFe,Nur,jur,JQ,Dur,Gur,Our,yE,rFe,Vur,Xur,YQ,zur,Qur,Wur,LE,tFe,Hur,Uur,KQ,Jur,Yur,Kur,xE,aFe,Zur,epr,ZQ,opr,rpr,tpr,$E,nFe,apr,npr,eW,spr,lpr,ipr,kE,sFe,dpr,cpr,oW,mpr,fpr,gpr,SE,lFe,hpr,upr,rW,ppr,_pr,bpr,RE,iFe,Fpr,vpr,tW,Tpr,Mpr,Epr,BE,dFe,Cpr,wpr,aW,Apr,ypr,Lpr,PE,vIe,rc,IE,cFe,K8,xpr,mFe,$pr,TIe,tr,Z8,kpr,tc,Spr,nW,Rpr,Bpr,sW,Ppr,Ipr,qpr,ex,Npr,fFe,jpr,Dpr,Gpr,kt,ox,Opr,gFe,Vpr,Xpr,ac,zpr,hFe,Qpr,Wpr,lW,Hpr,Upr,Jpr,qE,Ypr,kr,rx,Kpr,uFe,Zpr,e_r,an,o_r,pFe,r_r,t_r,_Fe,a_r,n_r,bFe,s_r,l_r,i_r,Z,NE,FFe,d_r,c_r,iW,m_r,f_r,g_r,jE,vFe,h_r,u_r,dW,p_r,__r,b_r,DE,TFe,F_r,v_r,cW,T_r,M_r,E_r,GE,MFe,C_r,w_r,mW,A_r,y_r,L_r,OE,EFe,x_r,$_r,fW,k_r,S_r,R_r,VE,CFe,B_r,P_r,gW,I_r,q_r,N_r,XE,wFe,j_r,D_r,hW,G_r,O_r,V_r,zE,AFe,X_r,z_r,uW,Q_r,W_r,H_r,QE,yFe,U_r,J_r,pW,Y_r,K_r,Z_r,WE,LFe,ebr,obr,_W,rbr,tbr,abr,HE,xFe,nbr,sbr,bW,lbr,ibr,dbr,UE,$Fe,cbr,mbr,FW,fbr,gbr,hbr,JE,kFe,ubr,pbr,vW,_br,bbr,Fbr,YE,SFe,vbr,Tbr,TW,Mbr,Ebr,Cbr,KE,RFe,wbr,Abr,MW,ybr,Lbr,xbr,ZE,BFe,$br,kbr,EW,Sbr,Rbr,Bbr,e5,PFe,Pbr,Ibr,CW,qbr,Nbr,jbr,o5,IFe,Dbr,Gbr,wW,Obr,Vbr,Xbr,r5,qFe,zbr,Qbr,AW,Wbr,Hbr,Ubr,t5,NFe,Jbr,Ybr,yW,Kbr,Zbr,e2r,a5,jFe,o2r,r2r,LW,t2r,a2r,n2r,n5,DFe,s2r,l2r,xW,i2r,d2r,c2r,s5,GFe,m2r,f2r,$W,g2r,h2r,u2r,l5,OFe,p2r,_2r,kW,b2r,F2r,v2r,i5,VFe,T2r,M2r,SW,E2r,C2r,w2r,d5,XFe,A2r,y2r,RW,L2r,x2r,$2r,c5,MIe,nc,m5,zFe,tx,k2r,QFe,S2r,EIe,ar,ax,R2r,sc,B2r,BW,P2r,I2r,PW,q2r,N2r,j2r,nx,D2r,WFe,G2r,O2r,V2r,St,sx,X2r,HFe,z2r,Q2r,lc,W2r,UFe,H2r,U2r,IW,J2r,Y2r,K2r,f5,Z2r,Sr,lx,eFr,JFe,oFr,rFr,nn,tFr,YFe,aFr,nFr,KFe,sFr,lFr,ZFe,iFr,dFr,cFr,ue,g5,eve,mFr,fFr,qW,gFr,hFr,uFr,h5,ove,pFr,_Fr,NW,bFr,FFr,vFr,u5,rve,TFr,MFr,jW,EFr,CFr,wFr,p5,tve,AFr,yFr,DW,LFr,xFr,$Fr,_5,ave,kFr,SFr,GW,RFr,BFr,PFr,b5,nve,IFr,qFr,OW,NFr,jFr,DFr,F5,sve,GFr,OFr,VW,VFr,XFr,zFr,v5,lve,QFr,WFr,XW,HFr,UFr,JFr,T5,ive,YFr,KFr,zW,ZFr,evr,ovr,M5,dve,rvr,tvr,QW,avr,nvr,svr,E5,cve,lvr,ivr,WW,dvr,cvr,mvr,C5,mve,fvr,gvr,HW,hvr,uvr,pvr,w5,fve,_vr,bvr,UW,Fvr,vvr,Tvr,A5,gve,Mvr,Evr,JW,Cvr,wvr,Avr,y5,hve,yvr,Lvr,YW,xvr,$vr,kvr,L5,uve,Svr,Rvr,KW,Bvr,Pvr,Ivr,x5,pve,qvr,Nvr,ZW,jvr,Dvr,Gvr,$5,CIe,ic,k5,_ve,ix,Ovr,bve,Vvr,wIe,nr,dx,Xvr,dc,zvr,eH,Qvr,Wvr,oH,Hvr,Uvr,Jvr,cx,Yvr,Fve,Kvr,Zvr,e1r,Rt,mx,o1r,vve,r1r,t1r,cc,a1r,Tve,n1r,s1r,rH,l1r,i1r,d1r,S5,c1r,Rr,fx,m1r,Mve,f1r,g1r,sn,h1r,Eve,u1r,p1r,Cve,_1r,b1r,wve,F1r,v1r,T1r,gx,R5,Ave,M1r,E1r,tH,C1r,w1r,A1r,B5,yve,y1r,L1r,aH,x1r,$1r,k1r,P5,AIe,mc,I5,Lve,hx,S1r,xve,R1r,yIe,sr,ux,B1r,fc,P1r,nH,I1r,q1r,sH,N1r,j1r,D1r,px,G1r,$ve,O1r,V1r,X1r,Bt,_x,z1r,kve,Q1r,W1r,gc,H1r,Sve,U1r,J1r,lH,Y1r,K1r,Z1r,q5,eTr,Br,bx,oTr,Rve,rTr,tTr,ln,aTr,Bve,nTr,sTr,Pve,lTr,iTr,Ive,dTr,cTr,mTr,qve,N5,Nve,fTr,gTr,iH,hTr,uTr,pTr,j5,LIe,hc,D5,jve,Fx,_Tr,Dve,bTr,xIe,lr,vx,FTr,uc,vTr,dH,TTr,MTr,cH,ETr,CTr,wTr,Tx,ATr,Gve,yTr,LTr,xTr,Pt,Mx,$Tr,Ove,kTr,STr,pc,RTr,Vve,BTr,PTr,mH,ITr,qTr,NTr,G5,jTr,Pr,Ex,DTr,Xve,GTr,OTr,dn,VTr,zve,XTr,zTr,Qve,QTr,WTr,Wve,HTr,UTr,JTr,de,O5,Hve,YTr,KTr,fH,ZTr,eMr,oMr,V5,Uve,rMr,tMr,gH,aMr,nMr,sMr,X5,Jve,lMr,iMr,hH,dMr,cMr,mMr,z5,Yve,fMr,gMr,uH,hMr,uMr,pMr,Q5,Kve,_Mr,bMr,pH,FMr,vMr,TMr,W5,Zve,MMr,EMr,_H,CMr,wMr,AMr,H5,e1e,yMr,LMr,bH,xMr,$Mr,kMr,U5,o1e,SMr,RMr,FH,BMr,PMr,IMr,J5,r1e,qMr,NMr,vH,jMr,DMr,GMr,Y5,t1e,OMr,VMr,TH,XMr,zMr,QMr,K5,a1e,WMr,HMr,MH,UMr,JMr,YMr,Z5,n1e,KMr,ZMr,EH,e4r,o4r,r4r,eC,s1e,t4r,a4r,CH,n4r,s4r,l4r,oC,l1e,i4r,d4r,wH,c4r,m4r,f4r,rC,i1e,g4r,h4r,AH,u4r,p4r,_4r,tC,d1e,b4r,F4r,yH,v4r,T4r,M4r,aC,c1e,E4r,C4r,LH,w4r,A4r,y4r,nC,m1e,L4r,x4r,xH,$4r,k4r,S4r,sC,f1e,R4r,B4r,$H,P4r,I4r,q4r,lC,g1e,N4r,j4r,kH,D4r,G4r,O4r,iC,$Ie,_c,dC,h1e,Cx,V4r,u1e,X4r,kIe,ir,wx,z4r,bc,Q4r,SH,W4r,H4r,RH,U4r,J4r,Y4r,Ax,K4r,p1e,Z4r,eEr,oEr,It,yx,rEr,_1e,tEr,aEr,Fc,nEr,b1e,sEr,lEr,BH,iEr,dEr,cEr,cC,mEr,Ir,Lx,fEr,F1e,gEr,hEr,cn,uEr,v1e,pEr,_Er,T1e,bEr,FEr,M1e,vEr,TEr,MEr,ce,mC,E1e,EEr,CEr,PH,wEr,AEr,yEr,fC,C1e,LEr,xEr,IH,$Er,kEr,SEr,gC,w1e,REr,BEr,qH,PEr,IEr,qEr,hC,A1e,NEr,jEr,NH,DEr,GEr,OEr,uC,y1e,VEr,XEr,jH,zEr,QEr,WEr,pC,L1e,HEr,UEr,DH,JEr,YEr,KEr,_C,x1e,ZEr,e5r,GH,o5r,r5r,t5r,bC,$1e,a5r,n5r,OH,s5r,l5r,i5r,FC,k1e,d5r,c5r,VH,m5r,f5r,g5r,vC,S1e,h5r,u5r,XH,p5r,_5r,b5r,TC,R1e,F5r,v5r,zH,T5r,M5r,E5r,MC,B1e,C5r,w5r,QH,A5r,y5r,L5r,EC,P1e,x5r,$5r,WH,k5r,S5r,R5r,CC,I1e,B5r,P5r,HH,I5r,q5r,N5r,wC,q1e,j5r,D5r,UH,G5r,O5r,V5r,AC,N1e,X5r,z5r,JH,Q5r,W5r,H5r,yC,j1e,U5r,J5r,YH,Y5r,K5r,Z5r,LC,D1e,eCr,oCr,KH,rCr,tCr,aCr,xC,G1e,nCr,sCr,ZH,lCr,iCr,dCr,$C,O1e,cCr,mCr,eU,fCr,gCr,hCr,kC,SIe,vc,SC,V1e,xx,uCr,X1e,pCr,RIe,dr,$x,_Cr,Tc,bCr,oU,FCr,vCr,rU,TCr,MCr,ECr,kx,CCr,z1e,wCr,ACr,yCr,qt,Sx,LCr,Q1e,xCr,$Cr,Mc,kCr,W1e,SCr,RCr,tU,BCr,PCr,ICr,RC,qCr,qr,Rx,NCr,H1e,jCr,DCr,mn,GCr,U1e,OCr,VCr,J1e,XCr,zCr,Y1e,QCr,WCr,HCr,K1e,BC,Z1e,UCr,JCr,aU,YCr,KCr,ZCr,PC,BIe,Ec,IC,eTe,Bx,e3r,oTe,o3r,PIe,cr,Px,r3r,Cc,t3r,nU,a3r,n3r,sU,s3r,l3r,i3r,Ix,d3r,rTe,c3r,m3r,f3r,Nt,qx,g3r,tTe,h3r,u3r,wc,p3r,aTe,_3r,b3r,lU,F3r,v3r,T3r,qC,M3r,Nr,Nx,E3r,nTe,C3r,w3r,fn,A3r,sTe,y3r,L3r,lTe,x3r,$3r,iTe,k3r,S3r,R3r,dTe,NC,cTe,B3r,P3r,iU,I3r,q3r,N3r,jC,IIe,Ac,DC,mTe,jx,j3r,fTe,D3r,qIe,mr,Dx,G3r,yc,O3r,dU,V3r,X3r,cU,z3r,Q3r,W3r,Gx,H3r,gTe,U3r,J3r,Y3r,jt,Ox,K3r,hTe,Z3r,ewr,Lc,owr,uTe,rwr,twr,mU,awr,nwr,swr,GC,lwr,jr,Vx,iwr,pTe,dwr,cwr,gn,mwr,_Te,fwr,gwr,bTe,hwr,uwr,FTe,pwr,_wr,bwr,oe,OC,vTe,Fwr,vwr,fU,Twr,Mwr,Ewr,VC,TTe,Cwr,wwr,gU,Awr,ywr,Lwr,XC,MTe,xwr,$wr,hU,kwr,Swr,Rwr,zC,ETe,Bwr,Pwr,uU,Iwr,qwr,Nwr,QC,CTe,jwr,Dwr,pU,Gwr,Owr,Vwr,WC,wTe,Xwr,zwr,_U,Qwr,Wwr,Hwr,HC,ATe,Uwr,Jwr,bU,Ywr,Kwr,Zwr,UC,yTe,eAr,oAr,FU,rAr,tAr,aAr,JC,LTe,nAr,sAr,vU,lAr,iAr,dAr,YC,xTe,cAr,mAr,TU,fAr,gAr,hAr,KC,$Te,uAr,pAr,MU,_Ar,bAr,FAr,ZC,kTe,vAr,TAr,EU,MAr,EAr,CAr,e3,STe,wAr,AAr,CU,yAr,LAr,xAr,o3,RTe,$Ar,kAr,wU,SAr,RAr,BAr,r3,BTe,PAr,IAr,AU,qAr,NAr,jAr,t3,PTe,DAr,GAr,yU,OAr,VAr,XAr,a3,ITe,zAr,QAr,LU,WAr,HAr,UAr,n3,qTe,JAr,YAr,xU,KAr,ZAr,e0r,s3,NTe,o0r,r0r,$U,t0r,a0r,n0r,l3,jTe,s0r,l0r,kU,i0r,d0r,c0r,i3,DTe,m0r,f0r,SU,g0r,h0r,u0r,d3,GTe,p0r,_0r,RU,b0r,F0r,v0r,c3,OTe,T0r,M0r,BU,E0r,C0r,w0r,m3,VTe,A0r,y0r,PU,L0r,x0r,$0r,f3,XTe,k0r,S0r,IU,R0r,B0r,P0r,g3,NIe,xc,h3,zTe,Xx,I0r,QTe,q0r,jIe,fr,zx,N0r,$c,j0r,qU,D0r,G0r,NU,O0r,V0r,X0r,Qx,z0r,WTe,Q0r,W0r,H0r,Dt,Wx,U0r,HTe,J0r,Y0r,kc,K0r,UTe,Z0r,e6r,jU,o6r,r6r,t6r,u3,a6r,Dr,Hx,n6r,JTe,s6r,l6r,hn,i6r,YTe,d6r,c6r,KTe,m6r,f6r,ZTe,g6r,h6r,u6r,ke,p3,eMe,p6r,_6r,DU,b6r,F6r,v6r,_3,oMe,T6r,M6r,GU,E6r,C6r,w6r,b3,rMe,A6r,y6r,OU,L6r,x6r,$6r,F3,tMe,k6r,S6r,VU,R6r,B6r,P6r,v3,aMe,I6r,q6r,XU,N6r,j6r,D6r,T3,nMe,G6r,O6r,zU,V6r,X6r,z6r,M3,sMe,Q6r,W6r,QU,H6r,U6r,J6r,E3,lMe,Y6r,K6r,WU,Z6r,eyr,oyr,C3,iMe,ryr,tyr,HU,ayr,nyr,syr,w3,DIe,Sc,A3,dMe,Ux,lyr,cMe,iyr,GIe,gr,Jx,dyr,Rc,cyr,UU,myr,fyr,JU,gyr,hyr,uyr,Yx,pyr,mMe,_yr,byr,Fyr,Gt,Kx,vyr,fMe,Tyr,Myr,Bc,Eyr,gMe,Cyr,wyr,YU,Ayr,yyr,Lyr,y3,xyr,Gr,Zx,$yr,hMe,kyr,Syr,un,Ryr,uMe,Byr,Pyr,pMe,Iyr,qyr,_Me,Nyr,jyr,Dyr,Me,L3,bMe,Gyr,Oyr,KU,Vyr,Xyr,zyr,x3,FMe,Qyr,Wyr,ZU,Hyr,Uyr,Jyr,$3,vMe,Yyr,Kyr,eJ,Zyr,eLr,oLr,k3,TMe,rLr,tLr,oJ,aLr,nLr,sLr,S3,MMe,lLr,iLr,rJ,dLr,cLr,mLr,R3,EMe,fLr,gLr,tJ,hLr,uLr,pLr,B3,CMe,_Lr,bLr,aJ,FLr,vLr,TLr,P3,wMe,MLr,ELr,nJ,CLr,wLr,ALr,I3,AMe,yLr,LLr,sJ,xLr,$Lr,kLr,q3,yMe,SLr,RLr,lJ,BLr,PLr,ILr,N3,LMe,qLr,NLr,iJ,jLr,DLr,GLr,j3,xMe,OLr,VLr,dJ,XLr,zLr,QLr,D3,OIe,Pc,G3,$Me,e7,WLr,kMe,HLr,VIe,hr,o7,ULr,Ic,JLr,cJ,YLr,KLr,mJ,ZLr,e8r,o8r,r7,r8r,SMe,t8r,a8r,n8r,Ot,t7,s8r,RMe,l8r,i8r,qc,d8r,BMe,c8r,m8r,fJ,f8r,g8r,h8r,O3,u8r,Or,a7,p8r,PMe,_8r,b8r,pn,F8r,IMe,v8r,T8r,qMe,M8r,E8r,NMe,C8r,w8r,A8r,Le,V3,jMe,y8r,L8r,gJ,x8r,$8r,k8r,X3,DMe,S8r,R8r,hJ,B8r,P8r,I8r,z3,GMe,q8r,N8r,uJ,j8r,D8r,G8r,Q3,OMe,O8r,V8r,pJ,X8r,z8r,Q8r,W3,VMe,W8r,H8r,_J,U8r,J8r,Y8r,H3,XMe,K8r,Z8r,bJ,exr,oxr,rxr,U3,zMe,txr,axr,FJ,nxr,sxr,lxr,J3,QMe,ixr,dxr,vJ,cxr,mxr,fxr,Y3,WMe,gxr,hxr,TJ,uxr,pxr,_xr,K3,HMe,bxr,Fxr,MJ,vxr,Txr,Mxr,Z3,XIe,Nc,ew,UMe,n7,Exr,JMe,Cxr,zIe,ur,s7,wxr,jc,Axr,EJ,yxr,Lxr,CJ,xxr,$xr,kxr,l7,Sxr,YMe,Rxr,Bxr,Pxr,Vt,i7,Ixr,KMe,qxr,Nxr,Dc,jxr,ZMe,Dxr,Gxr,wJ,Oxr,Vxr,Xxr,ow,zxr,Vr,d7,Qxr,e4e,Wxr,Hxr,_n,Uxr,o4e,Jxr,Yxr,r4e,Kxr,Zxr,t4e,e7r,o7r,r7r,Se,rw,a4e,t7r,a7r,AJ,n7r,s7r,l7r,tw,n4e,i7r,d7r,yJ,c7r,m7r,f7r,aw,s4e,g7r,h7r,LJ,u7r,p7r,_7r,nw,l4e,b7r,F7r,xJ,v7r,T7r,M7r,sw,i4e,E7r,C7r,$J,w7r,A7r,y7r,lw,d4e,L7r,x7r,kJ,$7r,k7r,S7r,iw,c4e,R7r,B7r,SJ,P7r,I7r,q7r,dw,m4e,N7r,j7r,RJ,D7r,G7r,O7r,cw,f4e,V7r,X7r,BJ,z7r,Q7r,W7r,mw,QIe,Gc,fw,g4e,c7,H7r,h4e,U7r,WIe,pr,m7,J7r,Oc,Y7r,PJ,K7r,Z7r,IJ,e9r,o9r,r9r,f7,t9r,u4e,a9r,n9r,s9r,Xt,g7,l9r,p4e,i9r,d9r,Vc,c9r,_4e,m9r,f9r,qJ,g9r,h9r,u9r,gw,p9r,Xr,h7,_9r,b4e,b9r,F9r,bn,v9r,F4e,T9r,M9r,v4e,E9r,C9r,T4e,w9r,A9r,y9r,xe,hw,M4e,L9r,x9r,NJ,$9r,k9r,S9r,uw,E4e,R9r,B9r,jJ,P9r,I9r,q9r,pw,C4e,N9r,j9r,DJ,D9r,G9r,O9r,_w,w4e,V9r,X9r,GJ,z9r,Q9r,W9r,bw,A4e,H9r,U9r,OJ,J9r,Y9r,K9r,Fw,y4e,Z9r,e$r,VJ,o$r,r$r,t$r,vw,L4e,a$r,n$r,XJ,s$r,l$r,i$r,Tw,x4e,d$r,c$r,zJ,m$r,f$r,g$r,Mw,$4e,h$r,u$r,QJ,p$r,_$r,b$r,Ew,k4e,F$r,v$r,WJ,T$r,M$r,E$r,Cw,HIe,Xc,ww,S4e,u7,C$r,R4e,w$r,UIe,_r,p7,A$r,zc,y$r,HJ,L$r,x$r,UJ,$$r,k$r,S$r,_7,R$r,B4e,B$r,P$r,I$r,zt,b7,q$r,P4e,N$r,j$r,Qc,D$r,I4e,G$r,O$r,JJ,V$r,X$r,z$r,Aw,Q$r,zr,F7,W$r,q4e,H$r,U$r,Fn,J$r,N4e,Y$r,K$r,j4e,Z$r,ekr,D4e,okr,rkr,tkr,$e,yw,G4e,akr,nkr,YJ,skr,lkr,ikr,Lw,O4e,dkr,ckr,KJ,mkr,fkr,gkr,xw,V4e,hkr,ukr,ZJ,pkr,_kr,bkr,$w,X4e,Fkr,vkr,eY,Tkr,Mkr,Ekr,kw,z4e,Ckr,wkr,oY,Akr,ykr,Lkr,Sw,Q4e,xkr,$kr,rY,kkr,Skr,Rkr,Rw,W4e,Bkr,Pkr,tY,Ikr,qkr,Nkr,Bw,H4e,jkr,Dkr,aY,Gkr,Okr,Vkr,Pw,U4e,Xkr,zkr,nY,Qkr,Wkr,Hkr,Iw,J4e,Ukr,Jkr,sY,Ykr,Kkr,Zkr,qw,JIe,Wc,Nw,Y4e,v7,eSr,K4e,oSr,YIe,br,T7,rSr,Hc,tSr,lY,aSr,nSr,iY,sSr,lSr,iSr,M7,dSr,Z4e,cSr,mSr,fSr,Qt,E7,gSr,eEe,hSr,uSr,Uc,pSr,oEe,_Sr,bSr,dY,FSr,vSr,TSr,jw,MSr,Qr,C7,ESr,rEe,CSr,wSr,vn,ASr,tEe,ySr,LSr,aEe,xSr,$Sr,nEe,kSr,SSr,RSr,De,Dw,sEe,BSr,PSr,cY,ISr,qSr,NSr,Gw,lEe,jSr,DSr,mY,GSr,OSr,VSr,Ow,iEe,XSr,zSr,fY,QSr,WSr,HSr,Vw,dEe,USr,JSr,gY,YSr,KSr,ZSr,Xw,cEe,eRr,oRr,hY,rRr,tRr,aRr,zw,mEe,nRr,sRr,uY,lRr,iRr,dRr,Qw,fEe,cRr,mRr,pY,fRr,gRr,hRr,Ww,gEe,uRr,pRr,_Y,_Rr,bRr,FRr,Hw,KIe,Jc,Uw,hEe,w7,vRr,uEe,TRr,ZIe,Fr,A7,MRr,Yc,ERr,bY,CRr,wRr,FY,ARr,yRr,LRr,y7,xRr,pEe,$Rr,kRr,SRr,Wt,L7,RRr,_Ee,BRr,PRr,Kc,IRr,bEe,qRr,NRr,vY,jRr,DRr,GRr,Jw,ORr,Wr,x7,VRr,FEe,XRr,zRr,Tn,QRr,vEe,WRr,HRr,TEe,URr,JRr,MEe,YRr,KRr,ZRr,Ge,Yw,EEe,eBr,oBr,TY,rBr,tBr,aBr,Kw,CEe,nBr,sBr,MY,lBr,iBr,dBr,Zw,wEe,cBr,mBr,EY,fBr,gBr,hBr,eA,AEe,uBr,pBr,CY,_Br,bBr,FBr,oA,yEe,vBr,TBr,wY,MBr,EBr,CBr,rA,LEe,wBr,ABr,AY,yBr,LBr,xBr,tA,xEe,$Br,kBr,yY,SBr,RBr,BBr,aA,$Ee,PBr,IBr,LY,qBr,NBr,jBr,nA,eqe,Zc,sA,kEe,$7,DBr,SEe,GBr,oqe,vr,k7,OBr,em,VBr,xY,XBr,zBr,$Y,QBr,WBr,HBr,S7,UBr,REe,JBr,YBr,KBr,Ht,R7,ZBr,BEe,ePr,oPr,om,rPr,PEe,tPr,aPr,kY,nPr,sPr,lPr,lA,iPr,Hr,B7,dPr,IEe,cPr,mPr,Mn,fPr,qEe,gPr,hPr,NEe,uPr,pPr,jEe,_Pr,bPr,FPr,DEe,iA,GEe,vPr,TPr,SY,MPr,EPr,CPr,dA,rqe,rm,cA,OEe,P7,wPr,VEe,APr,tqe,Tr,I7,yPr,tm,LPr,RY,xPr,$Pr,BY,kPr,SPr,RPr,q7,BPr,XEe,PPr,IPr,qPr,Ut,N7,NPr,zEe,jPr,DPr,am,GPr,QEe,OPr,VPr,PY,XPr,zPr,QPr,mA,WPr,Ur,j7,HPr,WEe,UPr,JPr,En,YPr,HEe,KPr,ZPr,UEe,eIr,oIr,JEe,rIr,tIr,aIr,D7,fA,YEe,nIr,sIr,IY,lIr,iIr,dIr,gA,KEe,cIr,mIr,qY,fIr,gIr,hIr,hA,aqe,nm,uA,ZEe,G7,uIr,e5e,pIr,nqe,Mr,O7,_Ir,sm,bIr,NY,FIr,vIr,jY,TIr,MIr,EIr,V7,CIr,o5e,wIr,AIr,yIr,Jt,X7,LIr,r5e,xIr,$Ir,lm,kIr,t5e,SIr,RIr,DY,BIr,PIr,IIr,pA,qIr,Jr,z7,NIr,a5e,jIr,DIr,Cn,GIr,n5e,OIr,VIr,s5e,XIr,zIr,l5e,QIr,WIr,HIr,i5e,_A,d5e,UIr,JIr,GY,YIr,KIr,ZIr,bA,sqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),G6=new ee({}),O6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new eqr({props:{warning:!0,$$slots:{default:[c0t]},$$scope:{ctx:A}}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L563"}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[m0t]},$$scope:{ctx:A}}}),H6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L708"}}),U6=new ee({}),J6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L377"}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[f0t]},$$scope:{ctx:A}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L587"}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Fh=new eqr({props:{$$slots:{default:[g0t]},$$scope:{ctx:A}}}),vh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[h0t]},$$scope:{ctx:A}}}),sy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L76"}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new eqr({props:{$$slots:{default:[u0t]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[p0t]},$$scope:{ctx:A}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L243"}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L716"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_0t]},$$scope:{ctx:A}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[b0t]},$$scope:{ctx:A}}}),by=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L723"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F0t]},$$scope:{ctx:A}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[v0t]},$$scope:{ctx:A}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L738"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[T0t]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[M0t]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L745"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[E0t]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[C0t]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L752"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[w0t]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[A0t]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L761"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[y0t]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[L0t]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L795"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[x0t]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$0t]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L802"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[k0t]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[S0t]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[R0t]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B0t]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[P0t]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[I0t]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[q0t]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[N0t]},$$scope:{ctx:A}}}),hL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[j0t]},$$scope:{ctx:A}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[D0t]},$$scope:{ctx:A}}}),FL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[G0t]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[O0t]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[V0t]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[X0t]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L864"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[W0t]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[U0t]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[K0t]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Z0t]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),f8=new ee({}),g8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L834"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),hx=new ee({}),ux=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),Fx=new ee({}),vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),c7=new ee({}),m7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),u7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),v7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),G7=new ee({}),O7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),X7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mm=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),q6=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),N6=o("AutoConfig"),yn=o(", "),Ln=a("a"),j6=o("AutoModel"),mi=o(`, and
`),xn=a("a"),D6=o("AutoTokenizer"),fi=o(" will directly create a class of the relevant architecture. For instance"),gm=l(),v(Ma.$$.fragment),ze=l(),Ae=a("p"),a$=o("will create a model that is an instance of "),gi=a("a"),n$=o("BertModel"),s$=o("."),Eo=l(),Ea=a("p"),l$=o("There is one class of "),hm=a("code"),i$=o("AutoModel"),hje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tPe=l(),hi=a("h2"),um=a("a"),PZ=a("span"),v(G6.$$.fragment),uje=l(),IZ=a("span"),pje=o("Extending the Auto Classes"),aPe=l(),$n=a("p"),_je=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qZ=a("code"),bje=o("NewModel"),Fje=o(", make sure you have a "),NZ=a("code"),vje=o("NewModelConfig"),Tje=o(` then you can add those to the auto
classes like this:`),nPe=l(),v(O6.$$.fragment),sPe=l(),d$=a("p"),Mje=o("You will then be able to use the auto classes like you would usually do!"),lPe=l(),v(pm.$$.fragment),iPe=l(),ui=a("h2"),_m=a("a"),jZ=a("span"),v(V6.$$.fragment),Eje=l(),DZ=a("span"),Cje=o("AutoConfig"),dPe=l(),Co=a("div"),v(X6.$$.fragment),wje=l(),z6=a("p"),Aje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c$=a("a"),yje=o("from_pretrained()"),Lje=o(" class method."),xje=l(),Q6=a("p"),$je=o("This class cannot be instantiated directly using "),GZ=a("code"),kje=o("__init__()"),Sje=o(" (throws an error)."),Rje=l(),Er=a("div"),v(W6.$$.fragment),Bje=l(),OZ=a("p"),Pje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ije=l(),pi=a("p"),qje=o("The configuration class to instantiate is selected based on the "),VZ=a("code"),Nje=o("model_type"),jje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XZ=a("code"),Dje=o("pretrained_model_name_or_path"),Gje=o(":"),Oje=l(),y=a("ul"),bm=a("li"),zZ=a("strong"),Vje=o("albert"),Xje=o(" \u2014 "),m$=a("a"),zje=o("AlbertConfig"),Qje=o(" (ALBERT model)"),Wje=l(),Fm=a("li"),QZ=a("strong"),Hje=o("bart"),Uje=o(" \u2014 "),f$=a("a"),Jje=o("BartConfig"),Yje=o(" (BART model)"),Kje=l(),vm=a("li"),WZ=a("strong"),Zje=o("beit"),eDe=o(" \u2014 "),g$=a("a"),oDe=o("BeitConfig"),rDe=o(" (BEiT model)"),tDe=l(),Tm=a("li"),HZ=a("strong"),aDe=o("bert"),nDe=o(" \u2014 "),h$=a("a"),sDe=o("BertConfig"),lDe=o(" (BERT model)"),iDe=l(),Mm=a("li"),UZ=a("strong"),dDe=o("bert-generation"),cDe=o(" \u2014 "),u$=a("a"),mDe=o("BertGenerationConfig"),fDe=o(" (Bert Generation model)"),gDe=l(),Em=a("li"),JZ=a("strong"),hDe=o("big_bird"),uDe=o(" \u2014 "),p$=a("a"),pDe=o("BigBirdConfig"),_De=o(" (BigBird model)"),bDe=l(),Cm=a("li"),YZ=a("strong"),FDe=o("bigbird_pegasus"),vDe=o(" \u2014 "),_$=a("a"),TDe=o("BigBirdPegasusConfig"),MDe=o(" (BigBirdPegasus model)"),EDe=l(),wm=a("li"),KZ=a("strong"),CDe=o("blenderbot"),wDe=o(" \u2014 "),b$=a("a"),ADe=o("BlenderbotConfig"),yDe=o(" (Blenderbot model)"),LDe=l(),Am=a("li"),ZZ=a("strong"),xDe=o("blenderbot-small"),$De=o(" \u2014 "),F$=a("a"),kDe=o("BlenderbotSmallConfig"),SDe=o(" (BlenderbotSmall model)"),RDe=l(),ym=a("li"),eee=a("strong"),BDe=o("camembert"),PDe=o(" \u2014 "),v$=a("a"),IDe=o("CamembertConfig"),qDe=o(" (CamemBERT model)"),NDe=l(),Lm=a("li"),oee=a("strong"),jDe=o("canine"),DDe=o(" \u2014 "),T$=a("a"),GDe=o("CanineConfig"),ODe=o(" (Canine model)"),VDe=l(),xm=a("li"),ree=a("strong"),XDe=o("clip"),zDe=o(" \u2014 "),M$=a("a"),QDe=o("CLIPConfig"),WDe=o(" (CLIP model)"),HDe=l(),$m=a("li"),tee=a("strong"),UDe=o("convbert"),JDe=o(" \u2014 "),E$=a("a"),YDe=o("ConvBertConfig"),KDe=o(" (ConvBERT model)"),ZDe=l(),km=a("li"),aee=a("strong"),eGe=o("convnext"),oGe=o(" \u2014 "),C$=a("a"),rGe=o("ConvNextConfig"),tGe=o(" (ConvNext model)"),aGe=l(),Sm=a("li"),nee=a("strong"),nGe=o("ctrl"),sGe=o(" \u2014 "),w$=a("a"),lGe=o("CTRLConfig"),iGe=o(" (CTRL model)"),dGe=l(),Rm=a("li"),see=a("strong"),cGe=o("data2vec-audio"),mGe=o(" \u2014 "),A$=a("a"),fGe=o("Data2VecAudioConfig"),gGe=o(" (Data2VecAudio model)"),hGe=l(),Bm=a("li"),lee=a("strong"),uGe=o("data2vec-text"),pGe=o(" \u2014 "),y$=a("a"),_Ge=o("Data2VecTextConfig"),bGe=o(" (Data2VecText model)"),FGe=l(),Pm=a("li"),iee=a("strong"),vGe=o("data2vec-vision"),TGe=o(" \u2014 "),L$=a("a"),MGe=o("Data2VecVisionConfig"),EGe=o(" (Data2VecVision model)"),CGe=l(),Im=a("li"),dee=a("strong"),wGe=o("deberta"),AGe=o(" \u2014 "),x$=a("a"),yGe=o("DebertaConfig"),LGe=o(" (DeBERTa model)"),xGe=l(),qm=a("li"),cee=a("strong"),$Ge=o("deberta-v2"),kGe=o(" \u2014 "),$$=a("a"),SGe=o("DebertaV2Config"),RGe=o(" (DeBERTa-v2 model)"),BGe=l(),Nm=a("li"),mee=a("strong"),PGe=o("decision_transformer"),IGe=o(" \u2014 "),k$=a("a"),qGe=o("DecisionTransformerConfig"),NGe=o(" (Decision Transformer model)"),jGe=l(),jm=a("li"),fee=a("strong"),DGe=o("deit"),GGe=o(" \u2014 "),S$=a("a"),OGe=o("DeiTConfig"),VGe=o(" (DeiT model)"),XGe=l(),Dm=a("li"),gee=a("strong"),zGe=o("detr"),QGe=o(" \u2014 "),R$=a("a"),WGe=o("DetrConfig"),HGe=o(" (DETR model)"),UGe=l(),Gm=a("li"),hee=a("strong"),JGe=o("distilbert"),YGe=o(" \u2014 "),B$=a("a"),KGe=o("DistilBertConfig"),ZGe=o(" (DistilBERT model)"),eOe=l(),Om=a("li"),uee=a("strong"),oOe=o("dpr"),rOe=o(" \u2014 "),P$=a("a"),tOe=o("DPRConfig"),aOe=o(" (DPR model)"),nOe=l(),Vm=a("li"),pee=a("strong"),sOe=o("dpt"),lOe=o(" \u2014 "),I$=a("a"),iOe=o("DPTConfig"),dOe=o(" (DPT model)"),cOe=l(),Xm=a("li"),_ee=a("strong"),mOe=o("electra"),fOe=o(" \u2014 "),q$=a("a"),gOe=o("ElectraConfig"),hOe=o(" (ELECTRA model)"),uOe=l(),zm=a("li"),bee=a("strong"),pOe=o("encoder-decoder"),_Oe=o(" \u2014 "),N$=a("a"),bOe=o("EncoderDecoderConfig"),FOe=o(" (Encoder decoder model)"),vOe=l(),Qm=a("li"),Fee=a("strong"),TOe=o("flaubert"),MOe=o(" \u2014 "),j$=a("a"),EOe=o("FlaubertConfig"),COe=o(" (FlauBERT model)"),wOe=l(),Wm=a("li"),vee=a("strong"),AOe=o("fnet"),yOe=o(" \u2014 "),D$=a("a"),LOe=o("FNetConfig"),xOe=o(" (FNet model)"),$Oe=l(),Hm=a("li"),Tee=a("strong"),kOe=o("fsmt"),SOe=o(" \u2014 "),G$=a("a"),ROe=o("FSMTConfig"),BOe=o(" (FairSeq Machine-Translation model)"),POe=l(),Um=a("li"),Mee=a("strong"),IOe=o("funnel"),qOe=o(" \u2014 "),O$=a("a"),NOe=o("FunnelConfig"),jOe=o(" (Funnel Transformer model)"),DOe=l(),Jm=a("li"),Eee=a("strong"),GOe=o("glpn"),OOe=o(" \u2014 "),V$=a("a"),VOe=o("GLPNConfig"),XOe=o(" (GLPN model)"),zOe=l(),Ym=a("li"),Cee=a("strong"),QOe=o("gpt2"),WOe=o(" \u2014 "),X$=a("a"),HOe=o("GPT2Config"),UOe=o(" (OpenAI GPT-2 model)"),JOe=l(),Km=a("li"),wee=a("strong"),YOe=o("gpt_neo"),KOe=o(" \u2014 "),z$=a("a"),ZOe=o("GPTNeoConfig"),eVe=o(" (GPT Neo model)"),oVe=l(),Zm=a("li"),Aee=a("strong"),rVe=o("gptj"),tVe=o(" \u2014 "),Q$=a("a"),aVe=o("GPTJConfig"),nVe=o(" (GPT-J model)"),sVe=l(),ef=a("li"),yee=a("strong"),lVe=o("hubert"),iVe=o(" \u2014 "),W$=a("a"),dVe=o("HubertConfig"),cVe=o(" (Hubert model)"),mVe=l(),of=a("li"),Lee=a("strong"),fVe=o("ibert"),gVe=o(" \u2014 "),H$=a("a"),hVe=o("IBertConfig"),uVe=o(" (I-BERT model)"),pVe=l(),rf=a("li"),xee=a("strong"),_Ve=o("imagegpt"),bVe=o(" \u2014 "),U$=a("a"),FVe=o("ImageGPTConfig"),vVe=o(" (ImageGPT model)"),TVe=l(),tf=a("li"),$ee=a("strong"),MVe=o("layoutlm"),EVe=o(" \u2014 "),J$=a("a"),CVe=o("LayoutLMConfig"),wVe=o(" (LayoutLM model)"),AVe=l(),af=a("li"),kee=a("strong"),yVe=o("layoutlmv2"),LVe=o(" \u2014 "),Y$=a("a"),xVe=o("LayoutLMv2Config"),$Ve=o(" (LayoutLMv2 model)"),kVe=l(),nf=a("li"),See=a("strong"),SVe=o("led"),RVe=o(" \u2014 "),K$=a("a"),BVe=o("LEDConfig"),PVe=o(" (LED model)"),IVe=l(),sf=a("li"),Ree=a("strong"),qVe=o("longformer"),NVe=o(" \u2014 "),Z$=a("a"),jVe=o("LongformerConfig"),DVe=o(" (Longformer model)"),GVe=l(),lf=a("li"),Bee=a("strong"),OVe=o("luke"),VVe=o(" \u2014 "),ek=a("a"),XVe=o("LukeConfig"),zVe=o(" (LUKE model)"),QVe=l(),df=a("li"),Pee=a("strong"),WVe=o("lxmert"),HVe=o(" \u2014 "),ok=a("a"),UVe=o("LxmertConfig"),JVe=o(" (LXMERT model)"),YVe=l(),cf=a("li"),Iee=a("strong"),KVe=o("m2m_100"),ZVe=o(" \u2014 "),rk=a("a"),eXe=o("M2M100Config"),oXe=o(" (M2M100 model)"),rXe=l(),mf=a("li"),qee=a("strong"),tXe=o("marian"),aXe=o(" \u2014 "),tk=a("a"),nXe=o("MarianConfig"),sXe=o(" (Marian model)"),lXe=l(),ff=a("li"),Nee=a("strong"),iXe=o("maskformer"),dXe=o(" \u2014 "),ak=a("a"),cXe=o("MaskFormerConfig"),mXe=o(" (MaskFormer model)"),fXe=l(),gf=a("li"),jee=a("strong"),gXe=o("mbart"),hXe=o(" \u2014 "),nk=a("a"),uXe=o("MBartConfig"),pXe=o(" (mBART model)"),_Xe=l(),hf=a("li"),Dee=a("strong"),bXe=o("megatron-bert"),FXe=o(" \u2014 "),sk=a("a"),vXe=o("MegatronBertConfig"),TXe=o(" (MegatronBert model)"),MXe=l(),uf=a("li"),Gee=a("strong"),EXe=o("mobilebert"),CXe=o(" \u2014 "),lk=a("a"),wXe=o("MobileBertConfig"),AXe=o(" (MobileBERT model)"),yXe=l(),pf=a("li"),Oee=a("strong"),LXe=o("mpnet"),xXe=o(" \u2014 "),ik=a("a"),$Xe=o("MPNetConfig"),kXe=o(" (MPNet model)"),SXe=l(),_f=a("li"),Vee=a("strong"),RXe=o("mt5"),BXe=o(" \u2014 "),dk=a("a"),PXe=o("MT5Config"),IXe=o(" (mT5 model)"),qXe=l(),bf=a("li"),Xee=a("strong"),NXe=o("nystromformer"),jXe=o(" \u2014 "),ck=a("a"),DXe=o("NystromformerConfig"),GXe=o(" (Nystromformer model)"),OXe=l(),Ff=a("li"),zee=a("strong"),VXe=o("openai-gpt"),XXe=o(" \u2014 "),mk=a("a"),zXe=o("OpenAIGPTConfig"),QXe=o(" (OpenAI GPT model)"),WXe=l(),vf=a("li"),Qee=a("strong"),HXe=o("pegasus"),UXe=o(" \u2014 "),fk=a("a"),JXe=o("PegasusConfig"),YXe=o(" (Pegasus model)"),KXe=l(),Tf=a("li"),Wee=a("strong"),ZXe=o("perceiver"),eze=o(" \u2014 "),gk=a("a"),oze=o("PerceiverConfig"),rze=o(" (Perceiver model)"),tze=l(),Mf=a("li"),Hee=a("strong"),aze=o("plbart"),nze=o(" \u2014 "),hk=a("a"),sze=o("PLBartConfig"),lze=o(" (PLBart model)"),ize=l(),Ef=a("li"),Uee=a("strong"),dze=o("poolformer"),cze=o(" \u2014 "),uk=a("a"),mze=o("PoolFormerConfig"),fze=o(" (PoolFormer model)"),gze=l(),Cf=a("li"),Jee=a("strong"),hze=o("prophetnet"),uze=o(" \u2014 "),pk=a("a"),pze=o("ProphetNetConfig"),_ze=o(" (ProphetNet model)"),bze=l(),wf=a("li"),Yee=a("strong"),Fze=o("qdqbert"),vze=o(" \u2014 "),_k=a("a"),Tze=o("QDQBertConfig"),Mze=o(" (QDQBert model)"),Eze=l(),Af=a("li"),Kee=a("strong"),Cze=o("rag"),wze=o(" \u2014 "),bk=a("a"),Aze=o("RagConfig"),yze=o(" (RAG model)"),Lze=l(),yf=a("li"),Zee=a("strong"),xze=o("realm"),$ze=o(" \u2014 "),Fk=a("a"),kze=o("RealmConfig"),Sze=o(" (Realm model)"),Rze=l(),Lf=a("li"),eoe=a("strong"),Bze=o("reformer"),Pze=o(" \u2014 "),vk=a("a"),Ize=o("ReformerConfig"),qze=o(" (Reformer model)"),Nze=l(),xf=a("li"),ooe=a("strong"),jze=o("regnet"),Dze=o(" \u2014 "),Tk=a("a"),Gze=o("RegNetConfig"),Oze=o(" (RegNet model)"),Vze=l(),$f=a("li"),roe=a("strong"),Xze=o("rembert"),zze=o(" \u2014 "),Mk=a("a"),Qze=o("RemBertConfig"),Wze=o(" (RemBERT model)"),Hze=l(),kf=a("li"),toe=a("strong"),Uze=o("resnet"),Jze=o(" \u2014 "),Ek=a("a"),Yze=o("ResNetConfig"),Kze=o(" (ResNet model)"),Zze=l(),Sf=a("li"),aoe=a("strong"),eQe=o("retribert"),oQe=o(" \u2014 "),Ck=a("a"),rQe=o("RetriBertConfig"),tQe=o(" (RetriBERT model)"),aQe=l(),Rf=a("li"),noe=a("strong"),nQe=o("roberta"),sQe=o(" \u2014 "),wk=a("a"),lQe=o("RobertaConfig"),iQe=o(" (RoBERTa model)"),dQe=l(),Bf=a("li"),soe=a("strong"),cQe=o("roformer"),mQe=o(" \u2014 "),Ak=a("a"),fQe=o("RoFormerConfig"),gQe=o(" (RoFormer model)"),hQe=l(),Pf=a("li"),loe=a("strong"),uQe=o("segformer"),pQe=o(" \u2014 "),yk=a("a"),_Qe=o("SegformerConfig"),bQe=o(" (SegFormer model)"),FQe=l(),If=a("li"),ioe=a("strong"),vQe=o("sew"),TQe=o(" \u2014 "),Lk=a("a"),MQe=o("SEWConfig"),EQe=o(" (SEW model)"),CQe=l(),qf=a("li"),doe=a("strong"),wQe=o("sew-d"),AQe=o(" \u2014 "),xk=a("a"),yQe=o("SEWDConfig"),LQe=o(" (SEW-D model)"),xQe=l(),Nf=a("li"),coe=a("strong"),$Qe=o("speech-encoder-decoder"),kQe=o(" \u2014 "),$k=a("a"),SQe=o("SpeechEncoderDecoderConfig"),RQe=o(" (Speech Encoder decoder model)"),BQe=l(),jf=a("li"),moe=a("strong"),PQe=o("speech_to_text"),IQe=o(" \u2014 "),kk=a("a"),qQe=o("Speech2TextConfig"),NQe=o(" (Speech2Text model)"),jQe=l(),Df=a("li"),foe=a("strong"),DQe=o("speech_to_text_2"),GQe=o(" \u2014 "),Sk=a("a"),OQe=o("Speech2Text2Config"),VQe=o(" (Speech2Text2 model)"),XQe=l(),Gf=a("li"),goe=a("strong"),zQe=o("splinter"),QQe=o(" \u2014 "),Rk=a("a"),WQe=o("SplinterConfig"),HQe=o(" (Splinter model)"),UQe=l(),Of=a("li"),hoe=a("strong"),JQe=o("squeezebert"),YQe=o(" \u2014 "),Bk=a("a"),KQe=o("SqueezeBertConfig"),ZQe=o(" (SqueezeBERT model)"),eWe=l(),Vf=a("li"),uoe=a("strong"),oWe=o("swin"),rWe=o(" \u2014 "),Pk=a("a"),tWe=o("SwinConfig"),aWe=o(" (Swin model)"),nWe=l(),Xf=a("li"),poe=a("strong"),sWe=o("t5"),lWe=o(" \u2014 "),Ik=a("a"),iWe=o("T5Config"),dWe=o(" (T5 model)"),cWe=l(),zf=a("li"),_oe=a("strong"),mWe=o("tapas"),fWe=o(" \u2014 "),qk=a("a"),gWe=o("TapasConfig"),hWe=o(" (TAPAS model)"),uWe=l(),Qf=a("li"),boe=a("strong"),pWe=o("tapex"),_We=o(" \u2014 "),Nk=a("a"),bWe=o("BartConfig"),FWe=o(" (TAPEX model)"),vWe=l(),Wf=a("li"),Foe=a("strong"),TWe=o("transfo-xl"),MWe=o(" \u2014 "),jk=a("a"),EWe=o("TransfoXLConfig"),CWe=o(" (Transformer-XL model)"),wWe=l(),Hf=a("li"),voe=a("strong"),AWe=o("trocr"),yWe=o(" \u2014 "),Dk=a("a"),LWe=o("TrOCRConfig"),xWe=o(" (TrOCR model)"),$We=l(),Uf=a("li"),Toe=a("strong"),kWe=o("unispeech"),SWe=o(" \u2014 "),Gk=a("a"),RWe=o("UniSpeechConfig"),BWe=o(" (UniSpeech model)"),PWe=l(),Jf=a("li"),Moe=a("strong"),IWe=o("unispeech-sat"),qWe=o(" \u2014 "),Ok=a("a"),NWe=o("UniSpeechSatConfig"),jWe=o(" (UniSpeechSat model)"),DWe=l(),Yf=a("li"),Eoe=a("strong"),GWe=o("van"),OWe=o(" \u2014 "),Vk=a("a"),VWe=o("VanConfig"),XWe=o(" (VAN model)"),zWe=l(),Kf=a("li"),Coe=a("strong"),QWe=o("vilt"),WWe=o(" \u2014 "),Xk=a("a"),HWe=o("ViltConfig"),UWe=o(" (ViLT model)"),JWe=l(),Zf=a("li"),woe=a("strong"),YWe=o("vision-encoder-decoder"),KWe=o(" \u2014 "),zk=a("a"),ZWe=o("VisionEncoderDecoderConfig"),eHe=o(" (Vision Encoder decoder model)"),oHe=l(),eg=a("li"),Aoe=a("strong"),rHe=o("vision-text-dual-encoder"),tHe=o(" \u2014 "),Qk=a("a"),aHe=o("VisionTextDualEncoderConfig"),nHe=o(" (VisionTextDualEncoder model)"),sHe=l(),og=a("li"),yoe=a("strong"),lHe=o("visual_bert"),iHe=o(" \u2014 "),Wk=a("a"),dHe=o("VisualBertConfig"),cHe=o(" (VisualBert model)"),mHe=l(),rg=a("li"),Loe=a("strong"),fHe=o("vit"),gHe=o(" \u2014 "),Hk=a("a"),hHe=o("ViTConfig"),uHe=o(" (ViT model)"),pHe=l(),tg=a("li"),xoe=a("strong"),_He=o("vit_mae"),bHe=o(" \u2014 "),Uk=a("a"),FHe=o("ViTMAEConfig"),vHe=o(" (ViTMAE model)"),THe=l(),ag=a("li"),$oe=a("strong"),MHe=o("wav2vec2"),EHe=o(" \u2014 "),Jk=a("a"),CHe=o("Wav2Vec2Config"),wHe=o(" (Wav2Vec2 model)"),AHe=l(),ng=a("li"),koe=a("strong"),yHe=o("wavlm"),LHe=o(" \u2014 "),Yk=a("a"),xHe=o("WavLMConfig"),$He=o(" (WavLM model)"),kHe=l(),sg=a("li"),Soe=a("strong"),SHe=o("xglm"),RHe=o(" \u2014 "),Kk=a("a"),BHe=o("XGLMConfig"),PHe=o(" (XGLM model)"),IHe=l(),lg=a("li"),Roe=a("strong"),qHe=o("xlm"),NHe=o(" \u2014 "),Zk=a("a"),jHe=o("XLMConfig"),DHe=o(" (XLM model)"),GHe=l(),ig=a("li"),Boe=a("strong"),OHe=o("xlm-prophetnet"),VHe=o(" \u2014 "),eS=a("a"),XHe=o("XLMProphetNetConfig"),zHe=o(" (XLMProphetNet model)"),QHe=l(),dg=a("li"),Poe=a("strong"),WHe=o("xlm-roberta"),HHe=o(" \u2014 "),oS=a("a"),UHe=o("XLMRobertaConfig"),JHe=o(" (XLM-RoBERTa model)"),YHe=l(),cg=a("li"),Ioe=a("strong"),KHe=o("xlm-roberta-xl"),ZHe=o(" \u2014 "),rS=a("a"),eUe=o("XLMRobertaXLConfig"),oUe=o(" (XLM-RoBERTa-XL model)"),rUe=l(),mg=a("li"),qoe=a("strong"),tUe=o("xlnet"),aUe=o(" \u2014 "),tS=a("a"),nUe=o("XLNetConfig"),sUe=o(" (XLNet model)"),lUe=l(),fg=a("li"),Noe=a("strong"),iUe=o("yolos"),dUe=o(" \u2014 "),aS=a("a"),cUe=o("YolosConfig"),mUe=o(" (YOLOS model)"),fUe=l(),gg=a("li"),joe=a("strong"),gUe=o("yoso"),hUe=o(" \u2014 "),nS=a("a"),uUe=o("YosoConfig"),pUe=o(" (YOSO model)"),_Ue=l(),v(hg.$$.fragment),bUe=l(),ug=a("div"),v(H6.$$.fragment),FUe=l(),Doe=a("p"),vUe=o("Register a new configuration for this class."),cPe=l(),_i=a("h2"),pg=a("a"),Goe=a("span"),v(U6.$$.fragment),TUe=l(),Ooe=a("span"),MUe=o("AutoTokenizer"),mPe=l(),wo=a("div"),v(J6.$$.fragment),EUe=l(),Y6=a("p"),CUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sS=a("a"),wUe=o("AutoTokenizer.from_pretrained()"),AUe=o(" class method."),yUe=l(),K6=a("p"),LUe=o("This class cannot be instantiated directly using "),Voe=a("code"),xUe=o("__init__()"),$Ue=o(" (throws an error)."),kUe=l(),Cr=a("div"),v(Z6.$$.fragment),SUe=l(),Xoe=a("p"),RUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BUe=l(),Ca=a("p"),PUe=o("The tokenizer class to instantiate is selected based on the "),zoe=a("code"),IUe=o("model_type"),qUe=o(` property of the config object (either
passed as an argument or loaded from `),Qoe=a("code"),NUe=o("pretrained_model_name_or_path"),jUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=a("code"),DUe=o("pretrained_model_name_or_path"),GUe=o(":"),OUe=l(),k=a("ul"),kn=a("li"),Hoe=a("strong"),VUe=o("albert"),XUe=o(" \u2014 "),lS=a("a"),zUe=o("AlbertTokenizer"),QUe=o(" or "),iS=a("a"),WUe=o("AlbertTokenizerFast"),HUe=o(" (ALBERT model)"),UUe=l(),Sn=a("li"),Uoe=a("strong"),JUe=o("bart"),YUe=o(" \u2014 "),dS=a("a"),KUe=o("BartTokenizer"),ZUe=o(" or "),cS=a("a"),eJe=o("BartTokenizerFast"),oJe=o(" (BART model)"),rJe=l(),Rn=a("li"),Joe=a("strong"),tJe=o("barthez"),aJe=o(" \u2014 "),mS=a("a"),nJe=o("BarthezTokenizer"),sJe=o(" or "),fS=a("a"),lJe=o("BarthezTokenizerFast"),iJe=o(" (BARThez model)"),dJe=l(),_g=a("li"),Yoe=a("strong"),cJe=o("bartpho"),mJe=o(" \u2014 "),gS=a("a"),fJe=o("BartphoTokenizer"),gJe=o(" (BARTpho model)"),hJe=l(),Bn=a("li"),Koe=a("strong"),uJe=o("bert"),pJe=o(" \u2014 "),hS=a("a"),_Je=o("BertTokenizer"),bJe=o(" or "),uS=a("a"),FJe=o("BertTokenizerFast"),vJe=o(" (BERT model)"),TJe=l(),bg=a("li"),Zoe=a("strong"),MJe=o("bert-generation"),EJe=o(" \u2014 "),pS=a("a"),CJe=o("BertGenerationTokenizer"),wJe=o(" (Bert Generation model)"),AJe=l(),Fg=a("li"),ere=a("strong"),yJe=o("bert-japanese"),LJe=o(" \u2014 "),_S=a("a"),xJe=o("BertJapaneseTokenizer"),$Je=o(" (BertJapanese model)"),kJe=l(),vg=a("li"),ore=a("strong"),SJe=o("bertweet"),RJe=o(" \u2014 "),bS=a("a"),BJe=o("BertweetTokenizer"),PJe=o(" (Bertweet model)"),IJe=l(),Pn=a("li"),rre=a("strong"),qJe=o("big_bird"),NJe=o(" \u2014 "),FS=a("a"),jJe=o("BigBirdTokenizer"),DJe=o(" or "),vS=a("a"),GJe=o("BigBirdTokenizerFast"),OJe=o(" (BigBird model)"),VJe=l(),In=a("li"),tre=a("strong"),XJe=o("bigbird_pegasus"),zJe=o(" \u2014 "),TS=a("a"),QJe=o("PegasusTokenizer"),WJe=o(" or "),MS=a("a"),HJe=o("PegasusTokenizerFast"),UJe=o(" (BigBirdPegasus model)"),JJe=l(),qn=a("li"),are=a("strong"),YJe=o("blenderbot"),KJe=o(" \u2014 "),ES=a("a"),ZJe=o("BlenderbotTokenizer"),eYe=o(" or "),CS=a("a"),oYe=o("BlenderbotTokenizerFast"),rYe=o(" (Blenderbot model)"),tYe=l(),Tg=a("li"),nre=a("strong"),aYe=o("blenderbot-small"),nYe=o(" \u2014 "),wS=a("a"),sYe=o("BlenderbotSmallTokenizer"),lYe=o(" (BlenderbotSmall model)"),iYe=l(),Mg=a("li"),sre=a("strong"),dYe=o("byt5"),cYe=o(" \u2014 "),AS=a("a"),mYe=o("ByT5Tokenizer"),fYe=o(" (ByT5 model)"),gYe=l(),Nn=a("li"),lre=a("strong"),hYe=o("camembert"),uYe=o(" \u2014 "),yS=a("a"),pYe=o("CamembertTokenizer"),_Ye=o(" or "),LS=a("a"),bYe=o("CamembertTokenizerFast"),FYe=o(" (CamemBERT model)"),vYe=l(),Eg=a("li"),ire=a("strong"),TYe=o("canine"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("CanineTokenizer"),CYe=o(" (Canine model)"),wYe=l(),jn=a("li"),dre=a("strong"),AYe=o("clip"),yYe=o(" \u2014 "),$S=a("a"),LYe=o("CLIPTokenizer"),xYe=o(" or "),kS=a("a"),$Ye=o("CLIPTokenizerFast"),kYe=o(" (CLIP model)"),SYe=l(),Dn=a("li"),cre=a("strong"),RYe=o("convbert"),BYe=o(" \u2014 "),SS=a("a"),PYe=o("ConvBertTokenizer"),IYe=o(" or "),RS=a("a"),qYe=o("ConvBertTokenizerFast"),NYe=o(" (ConvBERT model)"),jYe=l(),Gn=a("li"),mre=a("strong"),DYe=o("cpm"),GYe=o(" \u2014 "),BS=a("a"),OYe=o("CpmTokenizer"),VYe=o(" or "),PS=a("a"),XYe=o("CpmTokenizerFast"),zYe=o(" (CPM model)"),QYe=l(),Cg=a("li"),fre=a("strong"),WYe=o("ctrl"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("CTRLTokenizer"),JYe=o(" (CTRL model)"),YYe=l(),On=a("li"),gre=a("strong"),KYe=o("data2vec-text"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("RobertaTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("RobertaTokenizerFast"),tKe=o(" (Data2VecText model)"),aKe=l(),Vn=a("li"),hre=a("strong"),nKe=o("deberta"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("DebertaTokenizer"),iKe=o(" or "),DS=a("a"),dKe=o("DebertaTokenizerFast"),cKe=o(" (DeBERTa model)"),mKe=l(),Xn=a("li"),ure=a("strong"),fKe=o("deberta-v2"),gKe=o(" \u2014 "),GS=a("a"),hKe=o("DebertaV2Tokenizer"),uKe=o(" or "),OS=a("a"),pKe=o("DebertaV2TokenizerFast"),_Ke=o(" (DeBERTa-v2 model)"),bKe=l(),zn=a("li"),pre=a("strong"),FKe=o("distilbert"),vKe=o(" \u2014 "),VS=a("a"),TKe=o("DistilBertTokenizer"),MKe=o(" or "),XS=a("a"),EKe=o("DistilBertTokenizerFast"),CKe=o(" (DistilBERT model)"),wKe=l(),Qn=a("li"),_re=a("strong"),AKe=o("dpr"),yKe=o(" \u2014 "),zS=a("a"),LKe=o("DPRQuestionEncoderTokenizer"),xKe=o(" or "),QS=a("a"),$Ke=o("DPRQuestionEncoderTokenizerFast"),kKe=o(" (DPR model)"),SKe=l(),Wn=a("li"),bre=a("strong"),RKe=o("electra"),BKe=o(" \u2014 "),WS=a("a"),PKe=o("ElectraTokenizer"),IKe=o(" or "),HS=a("a"),qKe=o("ElectraTokenizerFast"),NKe=o(" (ELECTRA model)"),jKe=l(),wg=a("li"),Fre=a("strong"),DKe=o("flaubert"),GKe=o(" \u2014 "),US=a("a"),OKe=o("FlaubertTokenizer"),VKe=o(" (FlauBERT model)"),XKe=l(),Hn=a("li"),vre=a("strong"),zKe=o("fnet"),QKe=o(" \u2014 "),JS=a("a"),WKe=o("FNetTokenizer"),HKe=o(" or "),YS=a("a"),UKe=o("FNetTokenizerFast"),JKe=o(" (FNet model)"),YKe=l(),Ag=a("li"),Tre=a("strong"),KKe=o("fsmt"),ZKe=o(" \u2014 "),KS=a("a"),eZe=o("FSMTTokenizer"),oZe=o(" (FairSeq Machine-Translation model)"),rZe=l(),Un=a("li"),Mre=a("strong"),tZe=o("funnel"),aZe=o(" \u2014 "),ZS=a("a"),nZe=o("FunnelTokenizer"),sZe=o(" or "),eR=a("a"),lZe=o("FunnelTokenizerFast"),iZe=o(" (Funnel Transformer model)"),dZe=l(),Jn=a("li"),Ere=a("strong"),cZe=o("gpt2"),mZe=o(" \u2014 "),oR=a("a"),fZe=o("GPT2Tokenizer"),gZe=o(" or "),rR=a("a"),hZe=o("GPT2TokenizerFast"),uZe=o(" (OpenAI GPT-2 model)"),pZe=l(),Yn=a("li"),Cre=a("strong"),_Ze=o("gpt_neo"),bZe=o(" \u2014 "),tR=a("a"),FZe=o("GPT2Tokenizer"),vZe=o(" or "),aR=a("a"),TZe=o("GPT2TokenizerFast"),MZe=o(" (GPT Neo model)"),EZe=l(),Kn=a("li"),wre=a("strong"),CZe=o("gptj"),wZe=o(" \u2014 "),nR=a("a"),AZe=o("GPT2Tokenizer"),yZe=o(" or "),sR=a("a"),LZe=o("GPT2TokenizerFast"),xZe=o(" (GPT-J model)"),$Ze=l(),Zn=a("li"),Are=a("strong"),kZe=o("herbert"),SZe=o(" \u2014 "),lR=a("a"),RZe=o("HerbertTokenizer"),BZe=o(" or "),iR=a("a"),PZe=o("HerbertTokenizerFast"),IZe=o(" (HerBERT model)"),qZe=l(),yg=a("li"),yre=a("strong"),NZe=o("hubert"),jZe=o(" \u2014 "),dR=a("a"),DZe=o("Wav2Vec2CTCTokenizer"),GZe=o(" (Hubert model)"),OZe=l(),es=a("li"),Lre=a("strong"),VZe=o("ibert"),XZe=o(" \u2014 "),cR=a("a"),zZe=o("RobertaTokenizer"),QZe=o(" or "),mR=a("a"),WZe=o("RobertaTokenizerFast"),HZe=o(" (I-BERT model)"),UZe=l(),os=a("li"),xre=a("strong"),JZe=o("layoutlm"),YZe=o(" \u2014 "),fR=a("a"),KZe=o("LayoutLMTokenizer"),ZZe=o(" or "),gR=a("a"),eeo=o("LayoutLMTokenizerFast"),oeo=o(" (LayoutLM model)"),reo=l(),rs=a("li"),$re=a("strong"),teo=o("layoutlmv2"),aeo=o(" \u2014 "),hR=a("a"),neo=o("LayoutLMv2Tokenizer"),seo=o(" or "),uR=a("a"),leo=o("LayoutLMv2TokenizerFast"),ieo=o(" (LayoutLMv2 model)"),deo=l(),ts=a("li"),kre=a("strong"),ceo=o("layoutxlm"),meo=o(" \u2014 "),pR=a("a"),feo=o("LayoutXLMTokenizer"),geo=o(" or "),_R=a("a"),heo=o("LayoutXLMTokenizerFast"),ueo=o(" (LayoutXLM model)"),peo=l(),as=a("li"),Sre=a("strong"),_eo=o("led"),beo=o(" \u2014 "),bR=a("a"),Feo=o("LEDTokenizer"),veo=o(" or "),FR=a("a"),Teo=o("LEDTokenizerFast"),Meo=o(" (LED model)"),Eeo=l(),ns=a("li"),Rre=a("strong"),Ceo=o("longformer"),weo=o(" \u2014 "),vR=a("a"),Aeo=o("LongformerTokenizer"),yeo=o(" or "),TR=a("a"),Leo=o("LongformerTokenizerFast"),xeo=o(" (Longformer model)"),$eo=l(),Lg=a("li"),Bre=a("strong"),keo=o("luke"),Seo=o(" \u2014 "),MR=a("a"),Reo=o("LukeTokenizer"),Beo=o(" (LUKE model)"),Peo=l(),ss=a("li"),Pre=a("strong"),Ieo=o("lxmert"),qeo=o(" \u2014 "),ER=a("a"),Neo=o("LxmertTokenizer"),jeo=o(" or "),CR=a("a"),Deo=o("LxmertTokenizerFast"),Geo=o(" (LXMERT model)"),Oeo=l(),xg=a("li"),Ire=a("strong"),Veo=o("m2m_100"),Xeo=o(" \u2014 "),wR=a("a"),zeo=o("M2M100Tokenizer"),Qeo=o(" (M2M100 model)"),Weo=l(),$g=a("li"),qre=a("strong"),Heo=o("marian"),Ueo=o(" \u2014 "),AR=a("a"),Jeo=o("MarianTokenizer"),Yeo=o(" (Marian model)"),Keo=l(),ls=a("li"),Nre=a("strong"),Zeo=o("mbart"),eoo=o(" \u2014 "),yR=a("a"),ooo=o("MBartTokenizer"),roo=o(" or "),LR=a("a"),too=o("MBartTokenizerFast"),aoo=o(" (mBART model)"),noo=l(),is=a("li"),jre=a("strong"),soo=o("mbart50"),loo=o(" \u2014 "),xR=a("a"),ioo=o("MBart50Tokenizer"),doo=o(" or "),$R=a("a"),coo=o("MBart50TokenizerFast"),moo=o(" (mBART-50 model)"),foo=l(),ds=a("li"),Dre=a("strong"),goo=o("megatron-bert"),hoo=o(" \u2014 "),kR=a("a"),uoo=o("BertTokenizer"),poo=o(" or "),SR=a("a"),_oo=o("BertTokenizerFast"),boo=o(" (MegatronBert model)"),Foo=l(),kg=a("li"),Gre=a("strong"),voo=o("mluke"),Too=o(" \u2014 "),RR=a("a"),Moo=o("MLukeTokenizer"),Eoo=o(" (mLUKE model)"),Coo=l(),cs=a("li"),Ore=a("strong"),woo=o("mobilebert"),Aoo=o(" \u2014 "),BR=a("a"),yoo=o("MobileBertTokenizer"),Loo=o(" or "),PR=a("a"),xoo=o("MobileBertTokenizerFast"),$oo=o(" (MobileBERT model)"),koo=l(),ms=a("li"),Vre=a("strong"),Soo=o("mpnet"),Roo=o(" \u2014 "),IR=a("a"),Boo=o("MPNetTokenizer"),Poo=o(" or "),qR=a("a"),Ioo=o("MPNetTokenizerFast"),qoo=o(" (MPNet model)"),Noo=l(),fs=a("li"),Xre=a("strong"),joo=o("mt5"),Doo=o(" \u2014 "),NR=a("a"),Goo=o("MT5Tokenizer"),Ooo=o(" or "),jR=a("a"),Voo=o("MT5TokenizerFast"),Xoo=o(" (mT5 model)"),zoo=l(),gs=a("li"),zre=a("strong"),Qoo=o("nystromformer"),Woo=o(" \u2014 "),DR=a("a"),Hoo=o("AlbertTokenizer"),Uoo=o(" or "),GR=a("a"),Joo=o("AlbertTokenizerFast"),Yoo=o(" (Nystromformer model)"),Koo=l(),hs=a("li"),Qre=a("strong"),Zoo=o("openai-gpt"),ero=o(" \u2014 "),OR=a("a"),oro=o("OpenAIGPTTokenizer"),rro=o(" or "),VR=a("a"),tro=o("OpenAIGPTTokenizerFast"),aro=o(" (OpenAI GPT model)"),nro=l(),us=a("li"),Wre=a("strong"),sro=o("pegasus"),lro=o(" \u2014 "),XR=a("a"),iro=o("PegasusTokenizer"),dro=o(" or "),zR=a("a"),cro=o("PegasusTokenizerFast"),mro=o(" (Pegasus model)"),fro=l(),Sg=a("li"),Hre=a("strong"),gro=o("perceiver"),hro=o(" \u2014 "),QR=a("a"),uro=o("PerceiverTokenizer"),pro=o(" (Perceiver model)"),_ro=l(),Rg=a("li"),Ure=a("strong"),bro=o("phobert"),Fro=o(" \u2014 "),WR=a("a"),vro=o("PhobertTokenizer"),Tro=o(" (PhoBERT model)"),Mro=l(),Bg=a("li"),Jre=a("strong"),Ero=o("plbart"),Cro=o(" \u2014 "),HR=a("a"),wro=o("PLBartTokenizer"),Aro=o(" (PLBart model)"),yro=l(),Pg=a("li"),Yre=a("strong"),Lro=o("prophetnet"),xro=o(" \u2014 "),UR=a("a"),$ro=o("ProphetNetTokenizer"),kro=o(" (ProphetNet model)"),Sro=l(),ps=a("li"),Kre=a("strong"),Rro=o("qdqbert"),Bro=o(" \u2014 "),JR=a("a"),Pro=o("BertTokenizer"),Iro=o(" or "),YR=a("a"),qro=o("BertTokenizerFast"),Nro=o(" (QDQBert model)"),jro=l(),Ig=a("li"),Zre=a("strong"),Dro=o("rag"),Gro=o(" \u2014 "),KR=a("a"),Oro=o("RagTokenizer"),Vro=o(" (RAG model)"),Xro=l(),_s=a("li"),ete=a("strong"),zro=o("realm"),Qro=o(" \u2014 "),ZR=a("a"),Wro=o("RealmTokenizer"),Hro=o(" or "),eB=a("a"),Uro=o("RealmTokenizerFast"),Jro=o(" (Realm model)"),Yro=l(),bs=a("li"),ote=a("strong"),Kro=o("reformer"),Zro=o(" \u2014 "),oB=a("a"),eto=o("ReformerTokenizer"),oto=o(" or "),rB=a("a"),rto=o("ReformerTokenizerFast"),tto=o(" (Reformer model)"),ato=l(),Fs=a("li"),rte=a("strong"),nto=o("rembert"),sto=o(" \u2014 "),tB=a("a"),lto=o("RemBertTokenizer"),ito=o(" or "),aB=a("a"),dto=o("RemBertTokenizerFast"),cto=o(" (RemBERT model)"),mto=l(),vs=a("li"),tte=a("strong"),fto=o("retribert"),gto=o(" \u2014 "),nB=a("a"),hto=o("RetriBertTokenizer"),uto=o(" or "),sB=a("a"),pto=o("RetriBertTokenizerFast"),_to=o(" (RetriBERT model)"),bto=l(),Ts=a("li"),ate=a("strong"),Fto=o("roberta"),vto=o(" \u2014 "),lB=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),iB=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (RoBERTa model)"),wto=l(),Ms=a("li"),nte=a("strong"),Ato=o("roformer"),yto=o(" \u2014 "),dB=a("a"),Lto=o("RoFormerTokenizer"),xto=o(" or "),cB=a("a"),$to=o("RoFormerTokenizerFast"),kto=o(" (RoFormer model)"),Sto=l(),qg=a("li"),ste=a("strong"),Rto=o("speech_to_text"),Bto=o(" \u2014 "),mB=a("a"),Pto=o("Speech2TextTokenizer"),Ito=o(" (Speech2Text model)"),qto=l(),Ng=a("li"),lte=a("strong"),Nto=o("speech_to_text_2"),jto=o(" \u2014 "),fB=a("a"),Dto=o("Speech2Text2Tokenizer"),Gto=o(" (Speech2Text2 model)"),Oto=l(),Es=a("li"),ite=a("strong"),Vto=o("splinter"),Xto=o(" \u2014 "),gB=a("a"),zto=o("SplinterTokenizer"),Qto=o(" or "),hB=a("a"),Wto=o("SplinterTokenizerFast"),Hto=o(" (Splinter model)"),Uto=l(),Cs=a("li"),dte=a("strong"),Jto=o("squeezebert"),Yto=o(" \u2014 "),uB=a("a"),Kto=o("SqueezeBertTokenizer"),Zto=o(" or "),pB=a("a"),eao=o("SqueezeBertTokenizerFast"),oao=o(" (SqueezeBERT model)"),rao=l(),ws=a("li"),cte=a("strong"),tao=o("t5"),aao=o(" \u2014 "),_B=a("a"),nao=o("T5Tokenizer"),sao=o(" or "),bB=a("a"),lao=o("T5TokenizerFast"),iao=o(" (T5 model)"),dao=l(),jg=a("li"),mte=a("strong"),cao=o("tapas"),mao=o(" \u2014 "),FB=a("a"),fao=o("TapasTokenizer"),gao=o(" (TAPAS model)"),hao=l(),Dg=a("li"),fte=a("strong"),uao=o("tapex"),pao=o(" \u2014 "),vB=a("a"),_ao=o("TapexTokenizer"),bao=o(" (TAPEX model)"),Fao=l(),Gg=a("li"),gte=a("strong"),vao=o("transfo-xl"),Tao=o(" \u2014 "),TB=a("a"),Mao=o("TransfoXLTokenizer"),Eao=o(" (Transformer-XL model)"),Cao=l(),As=a("li"),hte=a("strong"),wao=o("visual_bert"),Aao=o(" \u2014 "),MB=a("a"),yao=o("BertTokenizer"),Lao=o(" or "),EB=a("a"),xao=o("BertTokenizerFast"),$ao=o(" (VisualBert model)"),kao=l(),Og=a("li"),ute=a("strong"),Sao=o("wav2vec2"),Rao=o(" \u2014 "),CB=a("a"),Bao=o("Wav2Vec2CTCTokenizer"),Pao=o(" (Wav2Vec2 model)"),Iao=l(),Vg=a("li"),pte=a("strong"),qao=o("wav2vec2_phoneme"),Nao=o(" \u2014 "),wB=a("a"),jao=o("Wav2Vec2PhonemeCTCTokenizer"),Dao=o(" (Wav2Vec2Phoneme model)"),Gao=l(),ys=a("li"),_te=a("strong"),Oao=o("xglm"),Vao=o(" \u2014 "),AB=a("a"),Xao=o("XGLMTokenizer"),zao=o(" or "),yB=a("a"),Qao=o("XGLMTokenizerFast"),Wao=o(" (XGLM model)"),Hao=l(),Xg=a("li"),bte=a("strong"),Uao=o("xlm"),Jao=o(" \u2014 "),LB=a("a"),Yao=o("XLMTokenizer"),Kao=o(" (XLM model)"),Zao=l(),zg=a("li"),Fte=a("strong"),eno=o("xlm-prophetnet"),ono=o(" \u2014 "),xB=a("a"),rno=o("XLMProphetNetTokenizer"),tno=o(" (XLMProphetNet model)"),ano=l(),Ls=a("li"),vte=a("strong"),nno=o("xlm-roberta"),sno=o(" \u2014 "),$B=a("a"),lno=o("XLMRobertaTokenizer"),ino=o(" or "),kB=a("a"),dno=o("XLMRobertaTokenizerFast"),cno=o(" (XLM-RoBERTa model)"),mno=l(),xs=a("li"),Tte=a("strong"),fno=o("xlm-roberta-xl"),gno=o(" \u2014 "),SB=a("a"),hno=o("RobertaTokenizer"),uno=o(" or "),RB=a("a"),pno=o("RobertaTokenizerFast"),_no=o(" (XLM-RoBERTa-XL model)"),bno=l(),$s=a("li"),Mte=a("strong"),Fno=o("xlnet"),vno=o(" \u2014 "),BB=a("a"),Tno=o("XLNetTokenizer"),Mno=o(" or "),PB=a("a"),Eno=o("XLNetTokenizerFast"),Cno=o(" (XLNet model)"),wno=l(),ks=a("li"),Ete=a("strong"),Ano=o("yoso"),yno=o(" \u2014 "),IB=a("a"),Lno=o("AlbertTokenizer"),xno=o(" or "),qB=a("a"),$no=o("AlbertTokenizerFast"),kno=o(" (YOSO model)"),Sno=l(),v(Qg.$$.fragment),Rno=l(),Wg=a("div"),v(ey.$$.fragment),Bno=l(),Cte=a("p"),Pno=o("Register a new tokenizer in this mapping."),fPe=l(),bi=a("h2"),Hg=a("a"),wte=a("span"),v(oy.$$.fragment),Ino=l(),Ate=a("span"),qno=o("AutoFeatureExtractor"),gPe=l(),Ao=a("div"),v(ry.$$.fragment),Nno=l(),ty=a("p"),jno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=a("a"),Dno=o("AutoFeatureExtractor.from_pretrained()"),Gno=o(" class method."),Ono=l(),ay=a("p"),Vno=o("This class cannot be instantiated directly using "),yte=a("code"),Xno=o("__init__()"),zno=o(" (throws an error)."),Qno=l(),Qe=a("div"),v(ny.$$.fragment),Wno=l(),Lte=a("p"),Hno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uno=l(),wa=a("p"),Jno=o("The feature extractor class to instantiate is selected based on the "),xte=a("code"),Yno=o("model_type"),Kno=o(` property of the config object
(either passed as an argument or loaded from `),$te=a("code"),Zno=o("pretrained_model_name_or_path"),eso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kte=a("code"),oso=o("pretrained_model_name_or_path"),rso=o(":"),tso=l(),te=a("ul"),Ug=a("li"),Ste=a("strong"),aso=o("beit"),nso=o(" \u2014 "),jB=a("a"),sso=o("BeitFeatureExtractor"),lso=o(" (BEiT model)"),iso=l(),Jg=a("li"),Rte=a("strong"),dso=o("clip"),cso=o(" \u2014 "),DB=a("a"),mso=o("CLIPFeatureExtractor"),fso=o(" (CLIP model)"),gso=l(),Yg=a("li"),Bte=a("strong"),hso=o("convnext"),uso=o(" \u2014 "),GB=a("a"),pso=o("ConvNextFeatureExtractor"),_so=o(" (ConvNext model)"),bso=l(),Kg=a("li"),Pte=a("strong"),Fso=o("data2vec-audio"),vso=o(" \u2014 "),OB=a("a"),Tso=o("Wav2Vec2FeatureExtractor"),Mso=o(" (Data2VecAudio model)"),Eso=l(),Zg=a("li"),Ite=a("strong"),Cso=o("data2vec-vision"),wso=o(" \u2014 "),VB=a("a"),Aso=o("BeitFeatureExtractor"),yso=o(" (Data2VecVision model)"),Lso=l(),eh=a("li"),qte=a("strong"),xso=o("deit"),$so=o(" \u2014 "),XB=a("a"),kso=o("DeiTFeatureExtractor"),Sso=o(" (DeiT model)"),Rso=l(),oh=a("li"),Nte=a("strong"),Bso=o("detr"),Pso=o(" \u2014 "),zB=a("a"),Iso=o("DetrFeatureExtractor"),qso=o(" (DETR model)"),Nso=l(),rh=a("li"),jte=a("strong"),jso=o("dpt"),Dso=o(" \u2014 "),QB=a("a"),Gso=o("DPTFeatureExtractor"),Oso=o(" (DPT model)"),Vso=l(),th=a("li"),Dte=a("strong"),Xso=o("glpn"),zso=o(" \u2014 "),WB=a("a"),Qso=o("GLPNFeatureExtractor"),Wso=o(" (GLPN model)"),Hso=l(),ah=a("li"),Gte=a("strong"),Uso=o("hubert"),Jso=o(" \u2014 "),HB=a("a"),Yso=o("Wav2Vec2FeatureExtractor"),Kso=o(" (Hubert model)"),Zso=l(),nh=a("li"),Ote=a("strong"),elo=o("layoutlmv2"),olo=o(" \u2014 "),UB=a("a"),rlo=o("LayoutLMv2FeatureExtractor"),tlo=o(" (LayoutLMv2 model)"),alo=l(),sh=a("li"),Vte=a("strong"),nlo=o("maskformer"),slo=o(" \u2014 "),JB=a("a"),llo=o("MaskFormerFeatureExtractor"),ilo=o(" (MaskFormer model)"),dlo=l(),lh=a("li"),Xte=a("strong"),clo=o("perceiver"),mlo=o(" \u2014 "),YB=a("a"),flo=o("PerceiverFeatureExtractor"),glo=o(" (Perceiver model)"),hlo=l(),ih=a("li"),zte=a("strong"),ulo=o("poolformer"),plo=o(" \u2014 "),KB=a("a"),_lo=o("PoolFormerFeatureExtractor"),blo=o(" (PoolFormer model)"),Flo=l(),dh=a("li"),Qte=a("strong"),vlo=o("regnet"),Tlo=o(" \u2014 "),ZB=a("a"),Mlo=o("ConvNextFeatureExtractor"),Elo=o(" (RegNet model)"),Clo=l(),ch=a("li"),Wte=a("strong"),wlo=o("resnet"),Alo=o(" \u2014 "),eP=a("a"),ylo=o("ConvNextFeatureExtractor"),Llo=o(" (ResNet model)"),xlo=l(),mh=a("li"),Hte=a("strong"),$lo=o("segformer"),klo=o(" \u2014 "),oP=a("a"),Slo=o("SegformerFeatureExtractor"),Rlo=o(" (SegFormer model)"),Blo=l(),fh=a("li"),Ute=a("strong"),Plo=o("speech_to_text"),Ilo=o(" \u2014 "),rP=a("a"),qlo=o("Speech2TextFeatureExtractor"),Nlo=o(" (Speech2Text model)"),jlo=l(),gh=a("li"),Jte=a("strong"),Dlo=o("swin"),Glo=o(" \u2014 "),tP=a("a"),Olo=o("ViTFeatureExtractor"),Vlo=o(" (Swin model)"),Xlo=l(),hh=a("li"),Yte=a("strong"),zlo=o("van"),Qlo=o(" \u2014 "),aP=a("a"),Wlo=o("ConvNextFeatureExtractor"),Hlo=o(" (VAN model)"),Ulo=l(),uh=a("li"),Kte=a("strong"),Jlo=o("vit"),Ylo=o(" \u2014 "),nP=a("a"),Klo=o("ViTFeatureExtractor"),Zlo=o(" (ViT model)"),eio=l(),ph=a("li"),Zte=a("strong"),oio=o("vit_mae"),rio=o(" \u2014 "),sP=a("a"),tio=o("ViTFeatureExtractor"),aio=o(" (ViTMAE model)"),nio=l(),_h=a("li"),eae=a("strong"),sio=o("wav2vec2"),lio=o(" \u2014 "),lP=a("a"),iio=o("Wav2Vec2FeatureExtractor"),dio=o(" (Wav2Vec2 model)"),cio=l(),bh=a("li"),oae=a("strong"),mio=o("yolos"),fio=o(" \u2014 "),iP=a("a"),gio=o("YolosFeatureExtractor"),hio=o(" (YOLOS model)"),uio=l(),v(Fh.$$.fragment),pio=l(),v(vh.$$.fragment),_io=l(),Th=a("div"),v(sy.$$.fragment),bio=l(),rae=a("p"),Fio=o("Register a new feature extractor for this class."),hPe=l(),Fi=a("h2"),Mh=a("a"),tae=a("span"),v(ly.$$.fragment),vio=l(),aae=a("span"),Tio=o("AutoProcessor"),uPe=l(),yo=a("div"),v(iy.$$.fragment),Mio=l(),dy=a("p"),Eio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dP=a("a"),Cio=o("AutoProcessor.from_pretrained()"),wio=o(" class method."),Aio=l(),cy=a("p"),yio=o("This class cannot be instantiated directly using "),nae=a("code"),Lio=o("__init__()"),xio=o(" (throws an error)."),$io=l(),We=a("div"),v(my.$$.fragment),kio=l(),sae=a("p"),Sio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rio=l(),vi=a("p"),Bio=o("The processor class to instantiate is selected based on the "),lae=a("code"),Pio=o("model_type"),Iio=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),qio=o("pretrained_model_name_or_path"),Nio=o(" if possible):"),jio=l(),be=a("ul"),Eh=a("li"),dae=a("strong"),Dio=o("clip"),Gio=o(" \u2014 "),cP=a("a"),Oio=o("CLIPProcessor"),Vio=o(" (CLIP model)"),Xio=l(),Ch=a("li"),cae=a("strong"),zio=o("layoutlmv2"),Qio=o(" \u2014 "),mP=a("a"),Wio=o("LayoutLMv2Processor"),Hio=o(" (LayoutLMv2 model)"),Uio=l(),wh=a("li"),mae=a("strong"),Jio=o("layoutxlm"),Yio=o(" \u2014 "),fP=a("a"),Kio=o("LayoutXLMProcessor"),Zio=o(" (LayoutXLM model)"),edo=l(),Ah=a("li"),fae=a("strong"),odo=o("sew"),rdo=o(" \u2014 "),gP=a("a"),tdo=o("Wav2Vec2Processor"),ado=o(" (SEW model)"),ndo=l(),yh=a("li"),gae=a("strong"),sdo=o("sew-d"),ldo=o(" \u2014 "),hP=a("a"),ido=o("Wav2Vec2Processor"),ddo=o(" (SEW-D model)"),cdo=l(),Lh=a("li"),hae=a("strong"),mdo=o("speech_to_text"),fdo=o(" \u2014 "),uP=a("a"),gdo=o("Speech2TextProcessor"),hdo=o(" (Speech2Text model)"),udo=l(),xh=a("li"),uae=a("strong"),pdo=o("speech_to_text_2"),_do=o(" \u2014 "),pP=a("a"),bdo=o("Speech2Text2Processor"),Fdo=o(" (Speech2Text2 model)"),vdo=l(),$h=a("li"),pae=a("strong"),Tdo=o("trocr"),Mdo=o(" \u2014 "),_P=a("a"),Edo=o("TrOCRProcessor"),Cdo=o(" (TrOCR model)"),wdo=l(),kh=a("li"),_ae=a("strong"),Ado=o("unispeech"),ydo=o(" \u2014 "),bP=a("a"),Ldo=o("Wav2Vec2Processor"),xdo=o(" (UniSpeech model)"),$do=l(),Sh=a("li"),bae=a("strong"),kdo=o("unispeech-sat"),Sdo=o(" \u2014 "),FP=a("a"),Rdo=o("Wav2Vec2Processor"),Bdo=o(" (UniSpeechSat model)"),Pdo=l(),Rh=a("li"),Fae=a("strong"),Ido=o("vilt"),qdo=o(" \u2014 "),vP=a("a"),Ndo=o("ViltProcessor"),jdo=o(" (ViLT model)"),Ddo=l(),Bh=a("li"),vae=a("strong"),Gdo=o("vision-text-dual-encoder"),Odo=o(" \u2014 "),TP=a("a"),Vdo=o("VisionTextDualEncoderProcessor"),Xdo=o(" (VisionTextDualEncoder model)"),zdo=l(),Ph=a("li"),Tae=a("strong"),Qdo=o("wav2vec2"),Wdo=o(" \u2014 "),MP=a("a"),Hdo=o("Wav2Vec2Processor"),Udo=o(" (Wav2Vec2 model)"),Jdo=l(),Ih=a("li"),Mae=a("strong"),Ydo=o("wavlm"),Kdo=o(" \u2014 "),EP=a("a"),Zdo=o("Wav2Vec2Processor"),eco=o(" (WavLM model)"),oco=l(),v(qh.$$.fragment),rco=l(),v(Nh.$$.fragment),tco=l(),jh=a("div"),v(fy.$$.fragment),aco=l(),Eae=a("p"),nco=o("Register a new processor for this class."),pPe=l(),Ti=a("h2"),Dh=a("a"),Cae=a("span"),v(gy.$$.fragment),sco=l(),wae=a("span"),lco=o("AutoModel"),_Pe=l(),Lo=a("div"),v(hy.$$.fragment),ico=l(),Mi=a("p"),dco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CP=a("a"),cco=o("from_pretrained()"),mco=o(" class method or the "),wP=a("a"),fco=o("from_config()"),gco=o(` class
method.`),hco=l(),uy=a("p"),uco=o("This class cannot be instantiated directly using "),Aae=a("code"),pco=o("__init__()"),_co=o(" (throws an error)."),bco=l(),ot=a("div"),v(py.$$.fragment),Fco=l(),yae=a("p"),vco=o("Instantiates one of the base model classes of the library from a configuration."),Tco=l(),Ei=a("p"),Mco=o(`Note:
Loading a model from its configuration file does `),Lae=a("strong"),Eco=o("not"),Cco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AP=a("a"),wco=o("from_pretrained()"),Aco=o(" to load the model weights."),yco=l(),v(Gh.$$.fragment),Lco=l(),He=a("div"),v(_y.$$.fragment),xco=l(),xae=a("p"),$co=o("Instantiate one of the base model classes of the library from a pretrained model."),kco=l(),Aa=a("p"),Sco=o("The model class to instantiate is selected based on the "),$ae=a("code"),Rco=o("model_type"),Bco=o(` property of the config object (either
passed as an argument or loaded from `),kae=a("code"),Pco=o("pretrained_model_name_or_path"),Ico=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=a("code"),qco=o("pretrained_model_name_or_path"),Nco=o(":"),jco=l(),x=a("ul"),Oh=a("li"),Rae=a("strong"),Dco=o("albert"),Gco=o(" \u2014 "),yP=a("a"),Oco=o("AlbertModel"),Vco=o(" (ALBERT model)"),Xco=l(),Vh=a("li"),Bae=a("strong"),zco=o("bart"),Qco=o(" \u2014 "),LP=a("a"),Wco=o("BartModel"),Hco=o(" (BART model)"),Uco=l(),Xh=a("li"),Pae=a("strong"),Jco=o("beit"),Yco=o(" \u2014 "),xP=a("a"),Kco=o("BeitModel"),Zco=o(" (BEiT model)"),emo=l(),zh=a("li"),Iae=a("strong"),omo=o("bert"),rmo=o(" \u2014 "),$P=a("a"),tmo=o("BertModel"),amo=o(" (BERT model)"),nmo=l(),Qh=a("li"),qae=a("strong"),smo=o("bert-generation"),lmo=o(" \u2014 "),kP=a("a"),imo=o("BertGenerationEncoder"),dmo=o(" (Bert Generation model)"),cmo=l(),Wh=a("li"),Nae=a("strong"),mmo=o("big_bird"),fmo=o(" \u2014 "),SP=a("a"),gmo=o("BigBirdModel"),hmo=o(" (BigBird model)"),umo=l(),Hh=a("li"),jae=a("strong"),pmo=o("bigbird_pegasus"),_mo=o(" \u2014 "),RP=a("a"),bmo=o("BigBirdPegasusModel"),Fmo=o(" (BigBirdPegasus model)"),vmo=l(),Uh=a("li"),Dae=a("strong"),Tmo=o("blenderbot"),Mmo=o(" \u2014 "),BP=a("a"),Emo=o("BlenderbotModel"),Cmo=o(" (Blenderbot model)"),wmo=l(),Jh=a("li"),Gae=a("strong"),Amo=o("blenderbot-small"),ymo=o(" \u2014 "),PP=a("a"),Lmo=o("BlenderbotSmallModel"),xmo=o(" (BlenderbotSmall model)"),$mo=l(),Yh=a("li"),Oae=a("strong"),kmo=o("camembert"),Smo=o(" \u2014 "),IP=a("a"),Rmo=o("CamembertModel"),Bmo=o(" (CamemBERT model)"),Pmo=l(),Kh=a("li"),Vae=a("strong"),Imo=o("canine"),qmo=o(" \u2014 "),qP=a("a"),Nmo=o("CanineModel"),jmo=o(" (Canine model)"),Dmo=l(),Zh=a("li"),Xae=a("strong"),Gmo=o("clip"),Omo=o(" \u2014 "),NP=a("a"),Vmo=o("CLIPModel"),Xmo=o(" (CLIP model)"),zmo=l(),eu=a("li"),zae=a("strong"),Qmo=o("convbert"),Wmo=o(" \u2014 "),jP=a("a"),Hmo=o("ConvBertModel"),Umo=o(" (ConvBERT model)"),Jmo=l(),ou=a("li"),Qae=a("strong"),Ymo=o("convnext"),Kmo=o(" \u2014 "),DP=a("a"),Zmo=o("ConvNextModel"),efo=o(" (ConvNext model)"),ofo=l(),ru=a("li"),Wae=a("strong"),rfo=o("ctrl"),tfo=o(" \u2014 "),GP=a("a"),afo=o("CTRLModel"),nfo=o(" (CTRL model)"),sfo=l(),tu=a("li"),Hae=a("strong"),lfo=o("data2vec-audio"),ifo=o(" \u2014 "),OP=a("a"),dfo=o("Data2VecAudioModel"),cfo=o(" (Data2VecAudio model)"),mfo=l(),au=a("li"),Uae=a("strong"),ffo=o("data2vec-text"),gfo=o(" \u2014 "),VP=a("a"),hfo=o("Data2VecTextModel"),ufo=o(" (Data2VecText model)"),pfo=l(),nu=a("li"),Jae=a("strong"),_fo=o("data2vec-vision"),bfo=o(" \u2014 "),XP=a("a"),Ffo=o("Data2VecVisionModel"),vfo=o(" (Data2VecVision model)"),Tfo=l(),su=a("li"),Yae=a("strong"),Mfo=o("deberta"),Efo=o(" \u2014 "),zP=a("a"),Cfo=o("DebertaModel"),wfo=o(" (DeBERTa model)"),Afo=l(),lu=a("li"),Kae=a("strong"),yfo=o("deberta-v2"),Lfo=o(" \u2014 "),QP=a("a"),xfo=o("DebertaV2Model"),$fo=o(" (DeBERTa-v2 model)"),kfo=l(),iu=a("li"),Zae=a("strong"),Sfo=o("decision_transformer"),Rfo=o(" \u2014 "),WP=a("a"),Bfo=o("DecisionTransformerModel"),Pfo=o(" (Decision Transformer model)"),Ifo=l(),du=a("li"),ene=a("strong"),qfo=o("deit"),Nfo=o(" \u2014 "),HP=a("a"),jfo=o("DeiTModel"),Dfo=o(" (DeiT model)"),Gfo=l(),cu=a("li"),one=a("strong"),Ofo=o("detr"),Vfo=o(" \u2014 "),UP=a("a"),Xfo=o("DetrModel"),zfo=o(" (DETR model)"),Qfo=l(),mu=a("li"),rne=a("strong"),Wfo=o("distilbert"),Hfo=o(" \u2014 "),JP=a("a"),Ufo=o("DistilBertModel"),Jfo=o(" (DistilBERT model)"),Yfo=l(),fu=a("li"),tne=a("strong"),Kfo=o("dpr"),Zfo=o(" \u2014 "),YP=a("a"),ego=o("DPRQuestionEncoder"),ogo=o(" (DPR model)"),rgo=l(),gu=a("li"),ane=a("strong"),tgo=o("dpt"),ago=o(" \u2014 "),KP=a("a"),ngo=o("DPTModel"),sgo=o(" (DPT model)"),lgo=l(),hu=a("li"),nne=a("strong"),igo=o("electra"),dgo=o(" \u2014 "),ZP=a("a"),cgo=o("ElectraModel"),mgo=o(" (ELECTRA model)"),fgo=l(),uu=a("li"),sne=a("strong"),ggo=o("flaubert"),hgo=o(" \u2014 "),eI=a("a"),ugo=o("FlaubertModel"),pgo=o(" (FlauBERT model)"),_go=l(),pu=a("li"),lne=a("strong"),bgo=o("fnet"),Fgo=o(" \u2014 "),oI=a("a"),vgo=o("FNetModel"),Tgo=o(" (FNet model)"),Mgo=l(),_u=a("li"),ine=a("strong"),Ego=o("fsmt"),Cgo=o(" \u2014 "),rI=a("a"),wgo=o("FSMTModel"),Ago=o(" (FairSeq Machine-Translation model)"),ygo=l(),Ss=a("li"),dne=a("strong"),Lgo=o("funnel"),xgo=o(" \u2014 "),tI=a("a"),$go=o("FunnelModel"),kgo=o(" or "),aI=a("a"),Sgo=o("FunnelBaseModel"),Rgo=o(" (Funnel Transformer model)"),Bgo=l(),bu=a("li"),cne=a("strong"),Pgo=o("glpn"),Igo=o(" \u2014 "),nI=a("a"),qgo=o("GLPNModel"),Ngo=o(" (GLPN model)"),jgo=l(),Fu=a("li"),mne=a("strong"),Dgo=o("gpt2"),Ggo=o(" \u2014 "),sI=a("a"),Ogo=o("GPT2Model"),Vgo=o(" (OpenAI GPT-2 model)"),Xgo=l(),vu=a("li"),fne=a("strong"),zgo=o("gpt_neo"),Qgo=o(" \u2014 "),lI=a("a"),Wgo=o("GPTNeoModel"),Hgo=o(" (GPT Neo model)"),Ugo=l(),Tu=a("li"),gne=a("strong"),Jgo=o("gptj"),Ygo=o(" \u2014 "),iI=a("a"),Kgo=o("GPTJModel"),Zgo=o(" (GPT-J model)"),eho=l(),Mu=a("li"),hne=a("strong"),oho=o("hubert"),rho=o(" \u2014 "),dI=a("a"),tho=o("HubertModel"),aho=o(" (Hubert model)"),nho=l(),Eu=a("li"),une=a("strong"),sho=o("ibert"),lho=o(" \u2014 "),cI=a("a"),iho=o("IBertModel"),dho=o(" (I-BERT model)"),cho=l(),Cu=a("li"),pne=a("strong"),mho=o("imagegpt"),fho=o(" \u2014 "),mI=a("a"),gho=o("ImageGPTModel"),hho=o(" (ImageGPT model)"),uho=l(),wu=a("li"),_ne=a("strong"),pho=o("layoutlm"),_ho=o(" \u2014 "),fI=a("a"),bho=o("LayoutLMModel"),Fho=o(" (LayoutLM model)"),vho=l(),Au=a("li"),bne=a("strong"),Tho=o("layoutlmv2"),Mho=o(" \u2014 "),gI=a("a"),Eho=o("LayoutLMv2Model"),Cho=o(" (LayoutLMv2 model)"),who=l(),yu=a("li"),Fne=a("strong"),Aho=o("led"),yho=o(" \u2014 "),hI=a("a"),Lho=o("LEDModel"),xho=o(" (LED model)"),$ho=l(),Lu=a("li"),vne=a("strong"),kho=o("longformer"),Sho=o(" \u2014 "),uI=a("a"),Rho=o("LongformerModel"),Bho=o(" (Longformer model)"),Pho=l(),xu=a("li"),Tne=a("strong"),Iho=o("luke"),qho=o(" \u2014 "),pI=a("a"),Nho=o("LukeModel"),jho=o(" (LUKE model)"),Dho=l(),$u=a("li"),Mne=a("strong"),Gho=o("lxmert"),Oho=o(" \u2014 "),_I=a("a"),Vho=o("LxmertModel"),Xho=o(" (LXMERT model)"),zho=l(),ku=a("li"),Ene=a("strong"),Qho=o("m2m_100"),Who=o(" \u2014 "),bI=a("a"),Hho=o("M2M100Model"),Uho=o(" (M2M100 model)"),Jho=l(),Su=a("li"),Cne=a("strong"),Yho=o("marian"),Kho=o(" \u2014 "),FI=a("a"),Zho=o("MarianModel"),euo=o(" (Marian model)"),ouo=l(),Ru=a("li"),wne=a("strong"),ruo=o("maskformer"),tuo=o(" \u2014 "),vI=a("a"),auo=o("MaskFormerModel"),nuo=o(" (MaskFormer model)"),suo=l(),Bu=a("li"),Ane=a("strong"),luo=o("mbart"),iuo=o(" \u2014 "),TI=a("a"),duo=o("MBartModel"),cuo=o(" (mBART model)"),muo=l(),Pu=a("li"),yne=a("strong"),fuo=o("megatron-bert"),guo=o(" \u2014 "),MI=a("a"),huo=o("MegatronBertModel"),uuo=o(" (MegatronBert model)"),puo=l(),Iu=a("li"),Lne=a("strong"),_uo=o("mobilebert"),buo=o(" \u2014 "),EI=a("a"),Fuo=o("MobileBertModel"),vuo=o(" (MobileBERT model)"),Tuo=l(),qu=a("li"),xne=a("strong"),Muo=o("mpnet"),Euo=o(" \u2014 "),CI=a("a"),Cuo=o("MPNetModel"),wuo=o(" (MPNet model)"),Auo=l(),Nu=a("li"),$ne=a("strong"),yuo=o("mt5"),Luo=o(" \u2014 "),wI=a("a"),xuo=o("MT5Model"),$uo=o(" (mT5 model)"),kuo=l(),ju=a("li"),kne=a("strong"),Suo=o("nystromformer"),Ruo=o(" \u2014 "),AI=a("a"),Buo=o("NystromformerModel"),Puo=o(" (Nystromformer model)"),Iuo=l(),Du=a("li"),Sne=a("strong"),quo=o("openai-gpt"),Nuo=o(" \u2014 "),yI=a("a"),juo=o("OpenAIGPTModel"),Duo=o(" (OpenAI GPT model)"),Guo=l(),Gu=a("li"),Rne=a("strong"),Ouo=o("pegasus"),Vuo=o(" \u2014 "),LI=a("a"),Xuo=o("PegasusModel"),zuo=o(" (Pegasus model)"),Quo=l(),Ou=a("li"),Bne=a("strong"),Wuo=o("perceiver"),Huo=o(" \u2014 "),xI=a("a"),Uuo=o("PerceiverModel"),Juo=o(" (Perceiver model)"),Yuo=l(),Vu=a("li"),Pne=a("strong"),Kuo=o("plbart"),Zuo=o(" \u2014 "),$I=a("a"),epo=o("PLBartModel"),opo=o(" (PLBart model)"),rpo=l(),Xu=a("li"),Ine=a("strong"),tpo=o("poolformer"),apo=o(" \u2014 "),kI=a("a"),npo=o("PoolFormerModel"),spo=o(" (PoolFormer model)"),lpo=l(),zu=a("li"),qne=a("strong"),ipo=o("prophetnet"),dpo=o(" \u2014 "),SI=a("a"),cpo=o("ProphetNetModel"),mpo=o(" (ProphetNet model)"),fpo=l(),Qu=a("li"),Nne=a("strong"),gpo=o("qdqbert"),hpo=o(" \u2014 "),RI=a("a"),upo=o("QDQBertModel"),ppo=o(" (QDQBert model)"),_po=l(),Wu=a("li"),jne=a("strong"),bpo=o("reformer"),Fpo=o(" \u2014 "),BI=a("a"),vpo=o("ReformerModel"),Tpo=o(" (Reformer model)"),Mpo=l(),Hu=a("li"),Dne=a("strong"),Epo=o("regnet"),Cpo=o(" \u2014 "),PI=a("a"),wpo=o("RegNetModel"),Apo=o(" (RegNet model)"),ypo=l(),Uu=a("li"),Gne=a("strong"),Lpo=o("rembert"),xpo=o(" \u2014 "),II=a("a"),$po=o("RemBertModel"),kpo=o(" (RemBERT model)"),Spo=l(),Ju=a("li"),One=a("strong"),Rpo=o("resnet"),Bpo=o(" \u2014 "),qI=a("a"),Ppo=o("ResNetModel"),Ipo=o(" (ResNet model)"),qpo=l(),Yu=a("li"),Vne=a("strong"),Npo=o("retribert"),jpo=o(" \u2014 "),NI=a("a"),Dpo=o("RetriBertModel"),Gpo=o(" (RetriBERT model)"),Opo=l(),Ku=a("li"),Xne=a("strong"),Vpo=o("roberta"),Xpo=o(" \u2014 "),jI=a("a"),zpo=o("RobertaModel"),Qpo=o(" (RoBERTa model)"),Wpo=l(),Zu=a("li"),zne=a("strong"),Hpo=o("roformer"),Upo=o(" \u2014 "),DI=a("a"),Jpo=o("RoFormerModel"),Ypo=o(" (RoFormer model)"),Kpo=l(),ep=a("li"),Qne=a("strong"),Zpo=o("segformer"),e_o=o(" \u2014 "),GI=a("a"),o_o=o("SegformerModel"),r_o=o(" (SegFormer model)"),t_o=l(),op=a("li"),Wne=a("strong"),a_o=o("sew"),n_o=o(" \u2014 "),OI=a("a"),s_o=o("SEWModel"),l_o=o(" (SEW model)"),i_o=l(),rp=a("li"),Hne=a("strong"),d_o=o("sew-d"),c_o=o(" \u2014 "),VI=a("a"),m_o=o("SEWDModel"),f_o=o(" (SEW-D model)"),g_o=l(),tp=a("li"),Une=a("strong"),h_o=o("speech_to_text"),u_o=o(" \u2014 "),XI=a("a"),p_o=o("Speech2TextModel"),__o=o(" (Speech2Text model)"),b_o=l(),ap=a("li"),Jne=a("strong"),F_o=o("splinter"),v_o=o(" \u2014 "),zI=a("a"),T_o=o("SplinterModel"),M_o=o(" (Splinter model)"),E_o=l(),np=a("li"),Yne=a("strong"),C_o=o("squeezebert"),w_o=o(" \u2014 "),QI=a("a"),A_o=o("SqueezeBertModel"),y_o=o(" (SqueezeBERT model)"),L_o=l(),sp=a("li"),Kne=a("strong"),x_o=o("swin"),$_o=o(" \u2014 "),WI=a("a"),k_o=o("SwinModel"),S_o=o(" (Swin model)"),R_o=l(),lp=a("li"),Zne=a("strong"),B_o=o("t5"),P_o=o(" \u2014 "),HI=a("a"),I_o=o("T5Model"),q_o=o(" (T5 model)"),N_o=l(),ip=a("li"),ese=a("strong"),j_o=o("tapas"),D_o=o(" \u2014 "),UI=a("a"),G_o=o("TapasModel"),O_o=o(" (TAPAS model)"),V_o=l(),dp=a("li"),ose=a("strong"),X_o=o("transfo-xl"),z_o=o(" \u2014 "),JI=a("a"),Q_o=o("TransfoXLModel"),W_o=o(" (Transformer-XL model)"),H_o=l(),cp=a("li"),rse=a("strong"),U_o=o("unispeech"),J_o=o(" \u2014 "),YI=a("a"),Y_o=o("UniSpeechModel"),K_o=o(" (UniSpeech model)"),Z_o=l(),mp=a("li"),tse=a("strong"),ebo=o("unispeech-sat"),obo=o(" \u2014 "),KI=a("a"),rbo=o("UniSpeechSatModel"),tbo=o(" (UniSpeechSat model)"),abo=l(),fp=a("li"),ase=a("strong"),nbo=o("van"),sbo=o(" \u2014 "),ZI=a("a"),lbo=o("VanModel"),ibo=o(" (VAN model)"),dbo=l(),gp=a("li"),nse=a("strong"),cbo=o("vilt"),mbo=o(" \u2014 "),eq=a("a"),fbo=o("ViltModel"),gbo=o(" (ViLT model)"),hbo=l(),hp=a("li"),sse=a("strong"),ubo=o("vision-text-dual-encoder"),pbo=o(" \u2014 "),oq=a("a"),_bo=o("VisionTextDualEncoderModel"),bbo=o(" (VisionTextDualEncoder model)"),Fbo=l(),up=a("li"),lse=a("strong"),vbo=o("visual_bert"),Tbo=o(" \u2014 "),rq=a("a"),Mbo=o("VisualBertModel"),Ebo=o(" (VisualBert model)"),Cbo=l(),pp=a("li"),ise=a("strong"),wbo=o("vit"),Abo=o(" \u2014 "),tq=a("a"),ybo=o("ViTModel"),Lbo=o(" (ViT model)"),xbo=l(),_p=a("li"),dse=a("strong"),$bo=o("vit_mae"),kbo=o(" \u2014 "),aq=a("a"),Sbo=o("ViTMAEModel"),Rbo=o(" (ViTMAE model)"),Bbo=l(),bp=a("li"),cse=a("strong"),Pbo=o("wav2vec2"),Ibo=o(" \u2014 "),nq=a("a"),qbo=o("Wav2Vec2Model"),Nbo=o(" (Wav2Vec2 model)"),jbo=l(),Fp=a("li"),mse=a("strong"),Dbo=o("wavlm"),Gbo=o(" \u2014 "),sq=a("a"),Obo=o("WavLMModel"),Vbo=o(" (WavLM model)"),Xbo=l(),vp=a("li"),fse=a("strong"),zbo=o("xglm"),Qbo=o(" \u2014 "),lq=a("a"),Wbo=o("XGLMModel"),Hbo=o(" (XGLM model)"),Ubo=l(),Tp=a("li"),gse=a("strong"),Jbo=o("xlm"),Ybo=o(" \u2014 "),iq=a("a"),Kbo=o("XLMModel"),Zbo=o(" (XLM model)"),e2o=l(),Mp=a("li"),hse=a("strong"),o2o=o("xlm-prophetnet"),r2o=o(" \u2014 "),dq=a("a"),t2o=o("XLMProphetNetModel"),a2o=o(" (XLMProphetNet model)"),n2o=l(),Ep=a("li"),use=a("strong"),s2o=o("xlm-roberta"),l2o=o(" \u2014 "),cq=a("a"),i2o=o("XLMRobertaModel"),d2o=o(" (XLM-RoBERTa model)"),c2o=l(),Cp=a("li"),pse=a("strong"),m2o=o("xlm-roberta-xl"),f2o=o(" \u2014 "),mq=a("a"),g2o=o("XLMRobertaXLModel"),h2o=o(" (XLM-RoBERTa-XL model)"),u2o=l(),wp=a("li"),_se=a("strong"),p2o=o("xlnet"),_2o=o(" \u2014 "),fq=a("a"),b2o=o("XLNetModel"),F2o=o(" (XLNet model)"),v2o=l(),Ap=a("li"),bse=a("strong"),T2o=o("yolos"),M2o=o(" \u2014 "),gq=a("a"),E2o=o("YolosModel"),C2o=o(" (YOLOS model)"),w2o=l(),yp=a("li"),Fse=a("strong"),A2o=o("yoso"),y2o=o(" \u2014 "),hq=a("a"),L2o=o("YosoModel"),x2o=o(" (YOSO model)"),$2o=l(),Lp=a("p"),k2o=o("The model is set in evaluation mode by default using "),vse=a("code"),S2o=o("model.eval()"),R2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=a("code"),B2o=o("model.train()"),P2o=l(),v(xp.$$.fragment),bPe=l(),Ci=a("h2"),$p=a("a"),Mse=a("span"),v(by.$$.fragment),I2o=l(),Ese=a("span"),q2o=o("AutoModelForPreTraining"),FPe=l(),xo=a("div"),v(Fy.$$.fragment),N2o=l(),wi=a("p"),j2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=a("a"),D2o=o("from_pretrained()"),G2o=o(" class method or the "),pq=a("a"),O2o=o("from_config()"),V2o=o(` class
method.`),X2o=l(),vy=a("p"),z2o=o("This class cannot be instantiated directly using "),Cse=a("code"),Q2o=o("__init__()"),W2o=o(" (throws an error)."),H2o=l(),rt=a("div"),v(Ty.$$.fragment),U2o=l(),wse=a("p"),J2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y2o=l(),Ai=a("p"),K2o=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),Z2o=o("not"),eFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_q=a("a"),oFo=o("from_pretrained()"),rFo=o(" to load the model weights."),tFo=l(),v(kp.$$.fragment),aFo=l(),Ue=a("div"),v(My.$$.fragment),nFo=l(),yse=a("p"),sFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lFo=l(),ya=a("p"),iFo=o("The model class to instantiate is selected based on the "),Lse=a("code"),dFo=o("model_type"),cFo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),mFo=o("pretrained_model_name_or_path"),fFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),gFo=o("pretrained_model_name_or_path"),hFo=o(":"),uFo=l(),G=a("ul"),Sp=a("li"),kse=a("strong"),pFo=o("albert"),_Fo=o(" \u2014 "),bq=a("a"),bFo=o("AlbertForPreTraining"),FFo=o(" (ALBERT model)"),vFo=l(),Rp=a("li"),Sse=a("strong"),TFo=o("bart"),MFo=o(" \u2014 "),Fq=a("a"),EFo=o("BartForConditionalGeneration"),CFo=o(" (BART model)"),wFo=l(),Bp=a("li"),Rse=a("strong"),AFo=o("bert"),yFo=o(" \u2014 "),vq=a("a"),LFo=o("BertForPreTraining"),xFo=o(" (BERT model)"),$Fo=l(),Pp=a("li"),Bse=a("strong"),kFo=o("big_bird"),SFo=o(" \u2014 "),Tq=a("a"),RFo=o("BigBirdForPreTraining"),BFo=o(" (BigBird model)"),PFo=l(),Ip=a("li"),Pse=a("strong"),IFo=o("camembert"),qFo=o(" \u2014 "),Mq=a("a"),NFo=o("CamembertForMaskedLM"),jFo=o(" (CamemBERT model)"),DFo=l(),qp=a("li"),Ise=a("strong"),GFo=o("ctrl"),OFo=o(" \u2014 "),Eq=a("a"),VFo=o("CTRLLMHeadModel"),XFo=o(" (CTRL model)"),zFo=l(),Np=a("li"),qse=a("strong"),QFo=o("data2vec-text"),WFo=o(" \u2014 "),Cq=a("a"),HFo=o("Data2VecTextForMaskedLM"),UFo=o(" (Data2VecText model)"),JFo=l(),jp=a("li"),Nse=a("strong"),YFo=o("deberta"),KFo=o(" \u2014 "),wq=a("a"),ZFo=o("DebertaForMaskedLM"),evo=o(" (DeBERTa model)"),ovo=l(),Dp=a("li"),jse=a("strong"),rvo=o("deberta-v2"),tvo=o(" \u2014 "),Aq=a("a"),avo=o("DebertaV2ForMaskedLM"),nvo=o(" (DeBERTa-v2 model)"),svo=l(),Gp=a("li"),Dse=a("strong"),lvo=o("distilbert"),ivo=o(" \u2014 "),yq=a("a"),dvo=o("DistilBertForMaskedLM"),cvo=o(" (DistilBERT model)"),mvo=l(),Op=a("li"),Gse=a("strong"),fvo=o("electra"),gvo=o(" \u2014 "),Lq=a("a"),hvo=o("ElectraForPreTraining"),uvo=o(" (ELECTRA model)"),pvo=l(),Vp=a("li"),Ose=a("strong"),_vo=o("flaubert"),bvo=o(" \u2014 "),xq=a("a"),Fvo=o("FlaubertWithLMHeadModel"),vvo=o(" (FlauBERT model)"),Tvo=l(),Xp=a("li"),Vse=a("strong"),Mvo=o("fnet"),Evo=o(" \u2014 "),$q=a("a"),Cvo=o("FNetForPreTraining"),wvo=o(" (FNet model)"),Avo=l(),zp=a("li"),Xse=a("strong"),yvo=o("fsmt"),Lvo=o(" \u2014 "),kq=a("a"),xvo=o("FSMTForConditionalGeneration"),$vo=o(" (FairSeq Machine-Translation model)"),kvo=l(),Qp=a("li"),zse=a("strong"),Svo=o("funnel"),Rvo=o(" \u2014 "),Sq=a("a"),Bvo=o("FunnelForPreTraining"),Pvo=o(" (Funnel Transformer model)"),Ivo=l(),Wp=a("li"),Qse=a("strong"),qvo=o("gpt2"),Nvo=o(" \u2014 "),Rq=a("a"),jvo=o("GPT2LMHeadModel"),Dvo=o(" (OpenAI GPT-2 model)"),Gvo=l(),Hp=a("li"),Wse=a("strong"),Ovo=o("ibert"),Vvo=o(" \u2014 "),Bq=a("a"),Xvo=o("IBertForMaskedLM"),zvo=o(" (I-BERT model)"),Qvo=l(),Up=a("li"),Hse=a("strong"),Wvo=o("layoutlm"),Hvo=o(" \u2014 "),Pq=a("a"),Uvo=o("LayoutLMForMaskedLM"),Jvo=o(" (LayoutLM model)"),Yvo=l(),Jp=a("li"),Use=a("strong"),Kvo=o("longformer"),Zvo=o(" \u2014 "),Iq=a("a"),e1o=o("LongformerForMaskedLM"),o1o=o(" (Longformer model)"),r1o=l(),Yp=a("li"),Jse=a("strong"),t1o=o("lxmert"),a1o=o(" \u2014 "),qq=a("a"),n1o=o("LxmertForPreTraining"),s1o=o(" (LXMERT model)"),l1o=l(),Kp=a("li"),Yse=a("strong"),i1o=o("megatron-bert"),d1o=o(" \u2014 "),Nq=a("a"),c1o=o("MegatronBertForPreTraining"),m1o=o(" (MegatronBert model)"),f1o=l(),Zp=a("li"),Kse=a("strong"),g1o=o("mobilebert"),h1o=o(" \u2014 "),jq=a("a"),u1o=o("MobileBertForPreTraining"),p1o=o(" (MobileBERT model)"),_1o=l(),e_=a("li"),Zse=a("strong"),b1o=o("mpnet"),F1o=o(" \u2014 "),Dq=a("a"),v1o=o("MPNetForMaskedLM"),T1o=o(" (MPNet model)"),M1o=l(),o_=a("li"),ele=a("strong"),E1o=o("openai-gpt"),C1o=o(" \u2014 "),Gq=a("a"),w1o=o("OpenAIGPTLMHeadModel"),A1o=o(" (OpenAI GPT model)"),y1o=l(),r_=a("li"),ole=a("strong"),L1o=o("retribert"),x1o=o(" \u2014 "),Oq=a("a"),$1o=o("RetriBertModel"),k1o=o(" (RetriBERT model)"),S1o=l(),t_=a("li"),rle=a("strong"),R1o=o("roberta"),B1o=o(" \u2014 "),Vq=a("a"),P1o=o("RobertaForMaskedLM"),I1o=o(" (RoBERTa model)"),q1o=l(),a_=a("li"),tle=a("strong"),N1o=o("squeezebert"),j1o=o(" \u2014 "),Xq=a("a"),D1o=o("SqueezeBertForMaskedLM"),G1o=o(" (SqueezeBERT model)"),O1o=l(),n_=a("li"),ale=a("strong"),V1o=o("t5"),X1o=o(" \u2014 "),zq=a("a"),z1o=o("T5ForConditionalGeneration"),Q1o=o(" (T5 model)"),W1o=l(),s_=a("li"),nle=a("strong"),H1o=o("tapas"),U1o=o(" \u2014 "),Qq=a("a"),J1o=o("TapasForMaskedLM"),Y1o=o(" (TAPAS model)"),K1o=l(),l_=a("li"),sle=a("strong"),Z1o=o("transfo-xl"),eTo=o(" \u2014 "),Wq=a("a"),oTo=o("TransfoXLLMHeadModel"),rTo=o(" (Transformer-XL model)"),tTo=l(),i_=a("li"),lle=a("strong"),aTo=o("unispeech"),nTo=o(" \u2014 "),Hq=a("a"),sTo=o("UniSpeechForPreTraining"),lTo=o(" (UniSpeech model)"),iTo=l(),d_=a("li"),ile=a("strong"),dTo=o("unispeech-sat"),cTo=o(" \u2014 "),Uq=a("a"),mTo=o("UniSpeechSatForPreTraining"),fTo=o(" (UniSpeechSat model)"),gTo=l(),c_=a("li"),dle=a("strong"),hTo=o("visual_bert"),uTo=o(" \u2014 "),Jq=a("a"),pTo=o("VisualBertForPreTraining"),_To=o(" (VisualBert model)"),bTo=l(),m_=a("li"),cle=a("strong"),FTo=o("vit_mae"),vTo=o(" \u2014 "),Yq=a("a"),TTo=o("ViTMAEForPreTraining"),MTo=o(" (ViTMAE model)"),ETo=l(),f_=a("li"),mle=a("strong"),CTo=o("wav2vec2"),wTo=o(" \u2014 "),Kq=a("a"),ATo=o("Wav2Vec2ForPreTraining"),yTo=o(" (Wav2Vec2 model)"),LTo=l(),g_=a("li"),fle=a("strong"),xTo=o("xlm"),$To=o(" \u2014 "),Zq=a("a"),kTo=o("XLMWithLMHeadModel"),STo=o(" (XLM model)"),RTo=l(),h_=a("li"),gle=a("strong"),BTo=o("xlm-roberta"),PTo=o(" \u2014 "),eN=a("a"),ITo=o("XLMRobertaForMaskedLM"),qTo=o(" (XLM-RoBERTa model)"),NTo=l(),u_=a("li"),hle=a("strong"),jTo=o("xlm-roberta-xl"),DTo=o(" \u2014 "),oN=a("a"),GTo=o("XLMRobertaXLForMaskedLM"),OTo=o(" (XLM-RoBERTa-XL model)"),VTo=l(),p_=a("li"),ule=a("strong"),XTo=o("xlnet"),zTo=o(" \u2014 "),rN=a("a"),QTo=o("XLNetLMHeadModel"),WTo=o(" (XLNet model)"),HTo=l(),__=a("p"),UTo=o("The model is set in evaluation mode by default using "),ple=a("code"),JTo=o("model.eval()"),YTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_le=a("code"),KTo=o("model.train()"),ZTo=l(),v(b_.$$.fragment),vPe=l(),yi=a("h2"),F_=a("a"),ble=a("span"),v(Ey.$$.fragment),eMo=l(),Fle=a("span"),oMo=o("AutoModelForCausalLM"),TPe=l(),$o=a("div"),v(Cy.$$.fragment),rMo=l(),Li=a("p"),tMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tN=a("a"),aMo=o("from_pretrained()"),nMo=o(" class method or the "),aN=a("a"),sMo=o("from_config()"),lMo=o(` class
method.`),iMo=l(),wy=a("p"),dMo=o("This class cannot be instantiated directly using "),vle=a("code"),cMo=o("__init__()"),mMo=o(" (throws an error)."),fMo=l(),tt=a("div"),v(Ay.$$.fragment),gMo=l(),Tle=a("p"),hMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uMo=l(),xi=a("p"),pMo=o(`Note:
Loading a model from its configuration file does `),Mle=a("strong"),_Mo=o("not"),bMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),FMo=o("from_pretrained()"),vMo=o(" to load the model weights."),TMo=l(),v(v_.$$.fragment),MMo=l(),Je=a("div"),v(yy.$$.fragment),EMo=l(),Ele=a("p"),CMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wMo=l(),La=a("p"),AMo=o("The model class to instantiate is selected based on the "),Cle=a("code"),yMo=o("model_type"),LMo=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),xMo=o("pretrained_model_name_or_path"),$Mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),kMo=o("pretrained_model_name_or_path"),SMo=o(":"),RMo=l(),z=a("ul"),T_=a("li"),yle=a("strong"),BMo=o("bart"),PMo=o(" \u2014 "),sN=a("a"),IMo=o("BartForCausalLM"),qMo=o(" (BART model)"),NMo=l(),M_=a("li"),Lle=a("strong"),jMo=o("bert"),DMo=o(" \u2014 "),lN=a("a"),GMo=o("BertLMHeadModel"),OMo=o(" (BERT model)"),VMo=l(),E_=a("li"),xle=a("strong"),XMo=o("bert-generation"),zMo=o(" \u2014 "),iN=a("a"),QMo=o("BertGenerationDecoder"),WMo=o(" (Bert Generation model)"),HMo=l(),C_=a("li"),$le=a("strong"),UMo=o("big_bird"),JMo=o(" \u2014 "),dN=a("a"),YMo=o("BigBirdForCausalLM"),KMo=o(" (BigBird model)"),ZMo=l(),w_=a("li"),kle=a("strong"),e4o=o("bigbird_pegasus"),o4o=o(" \u2014 "),cN=a("a"),r4o=o("BigBirdPegasusForCausalLM"),t4o=o(" (BigBirdPegasus model)"),a4o=l(),A_=a("li"),Sle=a("strong"),n4o=o("blenderbot"),s4o=o(" \u2014 "),mN=a("a"),l4o=o("BlenderbotForCausalLM"),i4o=o(" (Blenderbot model)"),d4o=l(),y_=a("li"),Rle=a("strong"),c4o=o("blenderbot-small"),m4o=o(" \u2014 "),fN=a("a"),f4o=o("BlenderbotSmallForCausalLM"),g4o=o(" (BlenderbotSmall model)"),h4o=l(),L_=a("li"),Ble=a("strong"),u4o=o("camembert"),p4o=o(" \u2014 "),gN=a("a"),_4o=o("CamembertForCausalLM"),b4o=o(" (CamemBERT model)"),F4o=l(),x_=a("li"),Ple=a("strong"),v4o=o("ctrl"),T4o=o(" \u2014 "),hN=a("a"),M4o=o("CTRLLMHeadModel"),E4o=o(" (CTRL model)"),C4o=l(),$_=a("li"),Ile=a("strong"),w4o=o("data2vec-text"),A4o=o(" \u2014 "),uN=a("a"),y4o=o("Data2VecTextForCausalLM"),L4o=o(" (Data2VecText model)"),x4o=l(),k_=a("li"),qle=a("strong"),$4o=o("electra"),k4o=o(" \u2014 "),pN=a("a"),S4o=o("ElectraForCausalLM"),R4o=o(" (ELECTRA model)"),B4o=l(),S_=a("li"),Nle=a("strong"),P4o=o("gpt2"),I4o=o(" \u2014 "),_N=a("a"),q4o=o("GPT2LMHeadModel"),N4o=o(" (OpenAI GPT-2 model)"),j4o=l(),R_=a("li"),jle=a("strong"),D4o=o("gpt_neo"),G4o=o(" \u2014 "),bN=a("a"),O4o=o("GPTNeoForCausalLM"),V4o=o(" (GPT Neo model)"),X4o=l(),B_=a("li"),Dle=a("strong"),z4o=o("gptj"),Q4o=o(" \u2014 "),FN=a("a"),W4o=o("GPTJForCausalLM"),H4o=o(" (GPT-J model)"),U4o=l(),P_=a("li"),Gle=a("strong"),J4o=o("marian"),Y4o=o(" \u2014 "),vN=a("a"),K4o=o("MarianForCausalLM"),Z4o=o(" (Marian model)"),eEo=l(),I_=a("li"),Ole=a("strong"),oEo=o("mbart"),rEo=o(" \u2014 "),TN=a("a"),tEo=o("MBartForCausalLM"),aEo=o(" (mBART model)"),nEo=l(),q_=a("li"),Vle=a("strong"),sEo=o("megatron-bert"),lEo=o(" \u2014 "),MN=a("a"),iEo=o("MegatronBertForCausalLM"),dEo=o(" (MegatronBert model)"),cEo=l(),N_=a("li"),Xle=a("strong"),mEo=o("openai-gpt"),fEo=o(" \u2014 "),EN=a("a"),gEo=o("OpenAIGPTLMHeadModel"),hEo=o(" (OpenAI GPT model)"),uEo=l(),j_=a("li"),zle=a("strong"),pEo=o("pegasus"),_Eo=o(" \u2014 "),CN=a("a"),bEo=o("PegasusForCausalLM"),FEo=o(" (Pegasus model)"),vEo=l(),D_=a("li"),Qle=a("strong"),TEo=o("plbart"),MEo=o(" \u2014 "),wN=a("a"),EEo=o("PLBartForCausalLM"),CEo=o(" (PLBart model)"),wEo=l(),G_=a("li"),Wle=a("strong"),AEo=o("prophetnet"),yEo=o(" \u2014 "),AN=a("a"),LEo=o("ProphetNetForCausalLM"),xEo=o(" (ProphetNet model)"),$Eo=l(),O_=a("li"),Hle=a("strong"),kEo=o("qdqbert"),SEo=o(" \u2014 "),yN=a("a"),REo=o("QDQBertLMHeadModel"),BEo=o(" (QDQBert model)"),PEo=l(),V_=a("li"),Ule=a("strong"),IEo=o("reformer"),qEo=o(" \u2014 "),LN=a("a"),NEo=o("ReformerModelWithLMHead"),jEo=o(" (Reformer model)"),DEo=l(),X_=a("li"),Jle=a("strong"),GEo=o("rembert"),OEo=o(" \u2014 "),xN=a("a"),VEo=o("RemBertForCausalLM"),XEo=o(" (RemBERT model)"),zEo=l(),z_=a("li"),Yle=a("strong"),QEo=o("roberta"),WEo=o(" \u2014 "),$N=a("a"),HEo=o("RobertaForCausalLM"),UEo=o(" (RoBERTa model)"),JEo=l(),Q_=a("li"),Kle=a("strong"),YEo=o("roformer"),KEo=o(" \u2014 "),kN=a("a"),ZEo=o("RoFormerForCausalLM"),e5o=o(" (RoFormer model)"),o5o=l(),W_=a("li"),Zle=a("strong"),r5o=o("speech_to_text_2"),t5o=o(" \u2014 "),SN=a("a"),a5o=o("Speech2Text2ForCausalLM"),n5o=o(" (Speech2Text2 model)"),s5o=l(),H_=a("li"),eie=a("strong"),l5o=o("transfo-xl"),i5o=o(" \u2014 "),RN=a("a"),d5o=o("TransfoXLLMHeadModel"),c5o=o(" (Transformer-XL model)"),m5o=l(),U_=a("li"),oie=a("strong"),f5o=o("trocr"),g5o=o(" \u2014 "),BN=a("a"),h5o=o("TrOCRForCausalLM"),u5o=o(" (TrOCR model)"),p5o=l(),J_=a("li"),rie=a("strong"),_5o=o("xglm"),b5o=o(" \u2014 "),PN=a("a"),F5o=o("XGLMForCausalLM"),v5o=o(" (XGLM model)"),T5o=l(),Y_=a("li"),tie=a("strong"),M5o=o("xlm"),E5o=o(" \u2014 "),IN=a("a"),C5o=o("XLMWithLMHeadModel"),w5o=o(" (XLM model)"),A5o=l(),K_=a("li"),aie=a("strong"),y5o=o("xlm-prophetnet"),L5o=o(" \u2014 "),qN=a("a"),x5o=o("XLMProphetNetForCausalLM"),$5o=o(" (XLMProphetNet model)"),k5o=l(),Z_=a("li"),nie=a("strong"),S5o=o("xlm-roberta"),R5o=o(" \u2014 "),NN=a("a"),B5o=o("XLMRobertaForCausalLM"),P5o=o(" (XLM-RoBERTa model)"),I5o=l(),eb=a("li"),sie=a("strong"),q5o=o("xlm-roberta-xl"),N5o=o(" \u2014 "),jN=a("a"),j5o=o("XLMRobertaXLForCausalLM"),D5o=o(" (XLM-RoBERTa-XL model)"),G5o=l(),ob=a("li"),lie=a("strong"),O5o=o("xlnet"),V5o=o(" \u2014 "),DN=a("a"),X5o=o("XLNetLMHeadModel"),z5o=o(" (XLNet model)"),Q5o=l(),rb=a("p"),W5o=o("The model is set in evaluation mode by default using "),iie=a("code"),H5o=o("model.eval()"),U5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=a("code"),J5o=o("model.train()"),Y5o=l(),v(tb.$$.fragment),MPe=l(),$i=a("h2"),ab=a("a"),cie=a("span"),v(Ly.$$.fragment),K5o=l(),mie=a("span"),Z5o=o("AutoModelForMaskedLM"),EPe=l(),ko=a("div"),v(xy.$$.fragment),eCo=l(),ki=a("p"),oCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GN=a("a"),rCo=o("from_pretrained()"),tCo=o(" class method or the "),ON=a("a"),aCo=o("from_config()"),nCo=o(` class
method.`),sCo=l(),$y=a("p"),lCo=o("This class cannot be instantiated directly using "),fie=a("code"),iCo=o("__init__()"),dCo=o(" (throws an error)."),cCo=l(),at=a("div"),v(ky.$$.fragment),mCo=l(),gie=a("p"),fCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gCo=l(),Si=a("p"),hCo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),uCo=o("not"),pCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),_Co=o("from_pretrained()"),bCo=o(" to load the model weights."),FCo=l(),v(nb.$$.fragment),vCo=l(),Ye=a("div"),v(Sy.$$.fragment),TCo=l(),uie=a("p"),MCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ECo=l(),xa=a("p"),CCo=o("The model class to instantiate is selected based on the "),pie=a("code"),wCo=o("model_type"),ACo=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),yCo=o("pretrained_model_name_or_path"),LCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),xCo=o("pretrained_model_name_or_path"),$Co=o(":"),kCo=l(),Q=a("ul"),sb=a("li"),Fie=a("strong"),SCo=o("albert"),RCo=o(" \u2014 "),XN=a("a"),BCo=o("AlbertForMaskedLM"),PCo=o(" (ALBERT model)"),ICo=l(),lb=a("li"),vie=a("strong"),qCo=o("bart"),NCo=o(" \u2014 "),zN=a("a"),jCo=o("BartForConditionalGeneration"),DCo=o(" (BART model)"),GCo=l(),ib=a("li"),Tie=a("strong"),OCo=o("bert"),VCo=o(" \u2014 "),QN=a("a"),XCo=o("BertForMaskedLM"),zCo=o(" (BERT model)"),QCo=l(),db=a("li"),Mie=a("strong"),WCo=o("big_bird"),HCo=o(" \u2014 "),WN=a("a"),UCo=o("BigBirdForMaskedLM"),JCo=o(" (BigBird model)"),YCo=l(),cb=a("li"),Eie=a("strong"),KCo=o("camembert"),ZCo=o(" \u2014 "),HN=a("a"),e3o=o("CamembertForMaskedLM"),o3o=o(" (CamemBERT model)"),r3o=l(),mb=a("li"),Cie=a("strong"),t3o=o("convbert"),a3o=o(" \u2014 "),UN=a("a"),n3o=o("ConvBertForMaskedLM"),s3o=o(" (ConvBERT model)"),l3o=l(),fb=a("li"),wie=a("strong"),i3o=o("data2vec-text"),d3o=o(" \u2014 "),JN=a("a"),c3o=o("Data2VecTextForMaskedLM"),m3o=o(" (Data2VecText model)"),f3o=l(),gb=a("li"),Aie=a("strong"),g3o=o("deberta"),h3o=o(" \u2014 "),YN=a("a"),u3o=o("DebertaForMaskedLM"),p3o=o(" (DeBERTa model)"),_3o=l(),hb=a("li"),yie=a("strong"),b3o=o("deberta-v2"),F3o=o(" \u2014 "),KN=a("a"),v3o=o("DebertaV2ForMaskedLM"),T3o=o(" (DeBERTa-v2 model)"),M3o=l(),ub=a("li"),Lie=a("strong"),E3o=o("distilbert"),C3o=o(" \u2014 "),ZN=a("a"),w3o=o("DistilBertForMaskedLM"),A3o=o(" (DistilBERT model)"),y3o=l(),pb=a("li"),xie=a("strong"),L3o=o("electra"),x3o=o(" \u2014 "),ej=a("a"),$3o=o("ElectraForMaskedLM"),k3o=o(" (ELECTRA model)"),S3o=l(),_b=a("li"),$ie=a("strong"),R3o=o("flaubert"),B3o=o(" \u2014 "),oj=a("a"),P3o=o("FlaubertWithLMHeadModel"),I3o=o(" (FlauBERT model)"),q3o=l(),bb=a("li"),kie=a("strong"),N3o=o("fnet"),j3o=o(" \u2014 "),rj=a("a"),D3o=o("FNetForMaskedLM"),G3o=o(" (FNet model)"),O3o=l(),Fb=a("li"),Sie=a("strong"),V3o=o("funnel"),X3o=o(" \u2014 "),tj=a("a"),z3o=o("FunnelForMaskedLM"),Q3o=o(" (Funnel Transformer model)"),W3o=l(),vb=a("li"),Rie=a("strong"),H3o=o("ibert"),U3o=o(" \u2014 "),aj=a("a"),J3o=o("IBertForMaskedLM"),Y3o=o(" (I-BERT model)"),K3o=l(),Tb=a("li"),Bie=a("strong"),Z3o=o("layoutlm"),ewo=o(" \u2014 "),nj=a("a"),owo=o("LayoutLMForMaskedLM"),rwo=o(" (LayoutLM model)"),two=l(),Mb=a("li"),Pie=a("strong"),awo=o("longformer"),nwo=o(" \u2014 "),sj=a("a"),swo=o("LongformerForMaskedLM"),lwo=o(" (Longformer model)"),iwo=l(),Eb=a("li"),Iie=a("strong"),dwo=o("mbart"),cwo=o(" \u2014 "),lj=a("a"),mwo=o("MBartForConditionalGeneration"),fwo=o(" (mBART model)"),gwo=l(),Cb=a("li"),qie=a("strong"),hwo=o("megatron-bert"),uwo=o(" \u2014 "),ij=a("a"),pwo=o("MegatronBertForMaskedLM"),_wo=o(" (MegatronBert model)"),bwo=l(),wb=a("li"),Nie=a("strong"),Fwo=o("mobilebert"),vwo=o(" \u2014 "),dj=a("a"),Two=o("MobileBertForMaskedLM"),Mwo=o(" (MobileBERT model)"),Ewo=l(),Ab=a("li"),jie=a("strong"),Cwo=o("mpnet"),wwo=o(" \u2014 "),cj=a("a"),Awo=o("MPNetForMaskedLM"),ywo=o(" (MPNet model)"),Lwo=l(),yb=a("li"),Die=a("strong"),xwo=o("nystromformer"),$wo=o(" \u2014 "),mj=a("a"),kwo=o("NystromformerForMaskedLM"),Swo=o(" (Nystromformer model)"),Rwo=l(),Lb=a("li"),Gie=a("strong"),Bwo=o("perceiver"),Pwo=o(" \u2014 "),fj=a("a"),Iwo=o("PerceiverForMaskedLM"),qwo=o(" (Perceiver model)"),Nwo=l(),xb=a("li"),Oie=a("strong"),jwo=o("qdqbert"),Dwo=o(" \u2014 "),gj=a("a"),Gwo=o("QDQBertForMaskedLM"),Owo=o(" (QDQBert model)"),Vwo=l(),$b=a("li"),Vie=a("strong"),Xwo=o("reformer"),zwo=o(" \u2014 "),hj=a("a"),Qwo=o("ReformerForMaskedLM"),Wwo=o(" (Reformer model)"),Hwo=l(),kb=a("li"),Xie=a("strong"),Uwo=o("rembert"),Jwo=o(" \u2014 "),uj=a("a"),Ywo=o("RemBertForMaskedLM"),Kwo=o(" (RemBERT model)"),Zwo=l(),Sb=a("li"),zie=a("strong"),eAo=o("roberta"),oAo=o(" \u2014 "),pj=a("a"),rAo=o("RobertaForMaskedLM"),tAo=o(" (RoBERTa model)"),aAo=l(),Rb=a("li"),Qie=a("strong"),nAo=o("roformer"),sAo=o(" \u2014 "),_j=a("a"),lAo=o("RoFormerForMaskedLM"),iAo=o(" (RoFormer model)"),dAo=l(),Bb=a("li"),Wie=a("strong"),cAo=o("squeezebert"),mAo=o(" \u2014 "),bj=a("a"),fAo=o("SqueezeBertForMaskedLM"),gAo=o(" (SqueezeBERT model)"),hAo=l(),Pb=a("li"),Hie=a("strong"),uAo=o("tapas"),pAo=o(" \u2014 "),Fj=a("a"),_Ao=o("TapasForMaskedLM"),bAo=o(" (TAPAS model)"),FAo=l(),Ib=a("li"),Uie=a("strong"),vAo=o("wav2vec2"),TAo=o(" \u2014 "),Jie=a("code"),MAo=o("Wav2Vec2ForMaskedLM"),EAo=o(" (Wav2Vec2 model)"),CAo=l(),qb=a("li"),Yie=a("strong"),wAo=o("xlm"),AAo=o(" \u2014 "),vj=a("a"),yAo=o("XLMWithLMHeadModel"),LAo=o(" (XLM model)"),xAo=l(),Nb=a("li"),Kie=a("strong"),$Ao=o("xlm-roberta"),kAo=o(" \u2014 "),Tj=a("a"),SAo=o("XLMRobertaForMaskedLM"),RAo=o(" (XLM-RoBERTa model)"),BAo=l(),jb=a("li"),Zie=a("strong"),PAo=o("xlm-roberta-xl"),IAo=o(" \u2014 "),Mj=a("a"),qAo=o("XLMRobertaXLForMaskedLM"),NAo=o(" (XLM-RoBERTa-XL model)"),jAo=l(),Db=a("li"),ede=a("strong"),DAo=o("yoso"),GAo=o(" \u2014 "),Ej=a("a"),OAo=o("YosoForMaskedLM"),VAo=o(" (YOSO model)"),XAo=l(),Gb=a("p"),zAo=o("The model is set in evaluation mode by default using "),ode=a("code"),QAo=o("model.eval()"),WAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),HAo=o("model.train()"),UAo=l(),v(Ob.$$.fragment),CPe=l(),Ri=a("h2"),Vb=a("a"),tde=a("span"),v(Ry.$$.fragment),JAo=l(),ade=a("span"),YAo=o("AutoModelForSeq2SeqLM"),wPe=l(),So=a("div"),v(By.$$.fragment),KAo=l(),Bi=a("p"),ZAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cj=a("a"),e0o=o("from_pretrained()"),o0o=o(" class method or the "),wj=a("a"),r0o=o("from_config()"),t0o=o(` class
method.`),a0o=l(),Py=a("p"),n0o=o("This class cannot be instantiated directly using "),nde=a("code"),s0o=o("__init__()"),l0o=o(" (throws an error)."),i0o=l(),nt=a("div"),v(Iy.$$.fragment),d0o=l(),sde=a("p"),c0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m0o=l(),Pi=a("p"),f0o=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),g0o=o("not"),h0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=a("a"),u0o=o("from_pretrained()"),p0o=o(" to load the model weights."),_0o=l(),v(Xb.$$.fragment),b0o=l(),Ke=a("div"),v(qy.$$.fragment),F0o=l(),ide=a("p"),v0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T0o=l(),$a=a("p"),M0o=o("The model class to instantiate is selected based on the "),dde=a("code"),E0o=o("model_type"),C0o=o(` property of the config object (either
passed as an argument or loaded from `),cde=a("code"),w0o=o("pretrained_model_name_or_path"),A0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),y0o=o("pretrained_model_name_or_path"),L0o=o(":"),x0o=l(),he=a("ul"),zb=a("li"),fde=a("strong"),$0o=o("bart"),k0o=o(" \u2014 "),yj=a("a"),S0o=o("BartForConditionalGeneration"),R0o=o(" (BART model)"),B0o=l(),Qb=a("li"),gde=a("strong"),P0o=o("bigbird_pegasus"),I0o=o(" \u2014 "),Lj=a("a"),q0o=o("BigBirdPegasusForConditionalGeneration"),N0o=o(" (BigBirdPegasus model)"),j0o=l(),Wb=a("li"),hde=a("strong"),D0o=o("blenderbot"),G0o=o(" \u2014 "),xj=a("a"),O0o=o("BlenderbotForConditionalGeneration"),V0o=o(" (Blenderbot model)"),X0o=l(),Hb=a("li"),ude=a("strong"),z0o=o("blenderbot-small"),Q0o=o(" \u2014 "),$j=a("a"),W0o=o("BlenderbotSmallForConditionalGeneration"),H0o=o(" (BlenderbotSmall model)"),U0o=l(),Ub=a("li"),pde=a("strong"),J0o=o("encoder-decoder"),Y0o=o(" \u2014 "),kj=a("a"),K0o=o("EncoderDecoderModel"),Z0o=o(" (Encoder decoder model)"),e6o=l(),Jb=a("li"),_de=a("strong"),o6o=o("fsmt"),r6o=o(" \u2014 "),Sj=a("a"),t6o=o("FSMTForConditionalGeneration"),a6o=o(" (FairSeq Machine-Translation model)"),n6o=l(),Yb=a("li"),bde=a("strong"),s6o=o("led"),l6o=o(" \u2014 "),Rj=a("a"),i6o=o("LEDForConditionalGeneration"),d6o=o(" (LED model)"),c6o=l(),Kb=a("li"),Fde=a("strong"),m6o=o("m2m_100"),f6o=o(" \u2014 "),Bj=a("a"),g6o=o("M2M100ForConditionalGeneration"),h6o=o(" (M2M100 model)"),u6o=l(),Zb=a("li"),vde=a("strong"),p6o=o("marian"),_6o=o(" \u2014 "),Pj=a("a"),b6o=o("MarianMTModel"),F6o=o(" (Marian model)"),v6o=l(),e2=a("li"),Tde=a("strong"),T6o=o("mbart"),M6o=o(" \u2014 "),Ij=a("a"),E6o=o("MBartForConditionalGeneration"),C6o=o(" (mBART model)"),w6o=l(),o2=a("li"),Mde=a("strong"),A6o=o("mt5"),y6o=o(" \u2014 "),qj=a("a"),L6o=o("MT5ForConditionalGeneration"),x6o=o(" (mT5 model)"),$6o=l(),r2=a("li"),Ede=a("strong"),k6o=o("pegasus"),S6o=o(" \u2014 "),Nj=a("a"),R6o=o("PegasusForConditionalGeneration"),B6o=o(" (Pegasus model)"),P6o=l(),t2=a("li"),Cde=a("strong"),I6o=o("plbart"),q6o=o(" \u2014 "),jj=a("a"),N6o=o("PLBartForConditionalGeneration"),j6o=o(" (PLBart model)"),D6o=l(),a2=a("li"),wde=a("strong"),G6o=o("prophetnet"),O6o=o(" \u2014 "),Dj=a("a"),V6o=o("ProphetNetForConditionalGeneration"),X6o=o(" (ProphetNet model)"),z6o=l(),n2=a("li"),Ade=a("strong"),Q6o=o("t5"),W6o=o(" \u2014 "),Gj=a("a"),H6o=o("T5ForConditionalGeneration"),U6o=o(" (T5 model)"),J6o=l(),s2=a("li"),yde=a("strong"),Y6o=o("tapex"),K6o=o(" \u2014 "),Oj=a("a"),Z6o=o("BartForConditionalGeneration"),eyo=o(" (TAPEX model)"),oyo=l(),l2=a("li"),Lde=a("strong"),ryo=o("xlm-prophetnet"),tyo=o(" \u2014 "),Vj=a("a"),ayo=o("XLMProphetNetForConditionalGeneration"),nyo=o(" (XLMProphetNet model)"),syo=l(),i2=a("p"),lyo=o("The model is set in evaluation mode by default using "),xde=a("code"),iyo=o("model.eval()"),dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),cyo=o("model.train()"),myo=l(),v(d2.$$.fragment),APe=l(),Ii=a("h2"),c2=a("a"),kde=a("span"),v(Ny.$$.fragment),fyo=l(),Sde=a("span"),gyo=o("AutoModelForSequenceClassification"),yPe=l(),Ro=a("div"),v(jy.$$.fragment),hyo=l(),qi=a("p"),uyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xj=a("a"),pyo=o("from_pretrained()"),_yo=o(" class method or the "),zj=a("a"),byo=o("from_config()"),Fyo=o(` class
method.`),vyo=l(),Dy=a("p"),Tyo=o("This class cannot be instantiated directly using "),Rde=a("code"),Myo=o("__init__()"),Eyo=o(" (throws an error)."),Cyo=l(),st=a("div"),v(Gy.$$.fragment),wyo=l(),Bde=a("p"),Ayo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yyo=l(),Ni=a("p"),Lyo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),xyo=o("not"),$yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),kyo=o("from_pretrained()"),Syo=o(" to load the model weights."),Ryo=l(),v(m2.$$.fragment),Byo=l(),Ze=a("div"),v(Oy.$$.fragment),Pyo=l(),Ide=a("p"),Iyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qyo=l(),ka=a("p"),Nyo=o("The model class to instantiate is selected based on the "),qde=a("code"),jyo=o("model_type"),Dyo=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),Gyo=o("pretrained_model_name_or_path"),Oyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),Vyo=o("pretrained_model_name_or_path"),Xyo=o(":"),zyo=l(),q=a("ul"),f2=a("li"),Dde=a("strong"),Qyo=o("albert"),Wyo=o(" \u2014 "),Wj=a("a"),Hyo=o("AlbertForSequenceClassification"),Uyo=o(" (ALBERT model)"),Jyo=l(),g2=a("li"),Gde=a("strong"),Yyo=o("bart"),Kyo=o(" \u2014 "),Hj=a("a"),Zyo=o("BartForSequenceClassification"),eLo=o(" (BART model)"),oLo=l(),h2=a("li"),Ode=a("strong"),rLo=o("bert"),tLo=o(" \u2014 "),Uj=a("a"),aLo=o("BertForSequenceClassification"),nLo=o(" (BERT model)"),sLo=l(),u2=a("li"),Vde=a("strong"),lLo=o("big_bird"),iLo=o(" \u2014 "),Jj=a("a"),dLo=o("BigBirdForSequenceClassification"),cLo=o(" (BigBird model)"),mLo=l(),p2=a("li"),Xde=a("strong"),fLo=o("bigbird_pegasus"),gLo=o(" \u2014 "),Yj=a("a"),hLo=o("BigBirdPegasusForSequenceClassification"),uLo=o(" (BigBirdPegasus model)"),pLo=l(),_2=a("li"),zde=a("strong"),_Lo=o("camembert"),bLo=o(" \u2014 "),Kj=a("a"),FLo=o("CamembertForSequenceClassification"),vLo=o(" (CamemBERT model)"),TLo=l(),b2=a("li"),Qde=a("strong"),MLo=o("canine"),ELo=o(" \u2014 "),Zj=a("a"),CLo=o("CanineForSequenceClassification"),wLo=o(" (Canine model)"),ALo=l(),F2=a("li"),Wde=a("strong"),yLo=o("convbert"),LLo=o(" \u2014 "),eD=a("a"),xLo=o("ConvBertForSequenceClassification"),$Lo=o(" (ConvBERT model)"),kLo=l(),v2=a("li"),Hde=a("strong"),SLo=o("ctrl"),RLo=o(" \u2014 "),oD=a("a"),BLo=o("CTRLForSequenceClassification"),PLo=o(" (CTRL model)"),ILo=l(),T2=a("li"),Ude=a("strong"),qLo=o("data2vec-text"),NLo=o(" \u2014 "),rD=a("a"),jLo=o("Data2VecTextForSequenceClassification"),DLo=o(" (Data2VecText model)"),GLo=l(),M2=a("li"),Jde=a("strong"),OLo=o("deberta"),VLo=o(" \u2014 "),tD=a("a"),XLo=o("DebertaForSequenceClassification"),zLo=o(" (DeBERTa model)"),QLo=l(),E2=a("li"),Yde=a("strong"),WLo=o("deberta-v2"),HLo=o(" \u2014 "),aD=a("a"),ULo=o("DebertaV2ForSequenceClassification"),JLo=o(" (DeBERTa-v2 model)"),YLo=l(),C2=a("li"),Kde=a("strong"),KLo=o("distilbert"),ZLo=o(" \u2014 "),nD=a("a"),e8o=o("DistilBertForSequenceClassification"),o8o=o(" (DistilBERT model)"),r8o=l(),w2=a("li"),Zde=a("strong"),t8o=o("electra"),a8o=o(" \u2014 "),sD=a("a"),n8o=o("ElectraForSequenceClassification"),s8o=o(" (ELECTRA model)"),l8o=l(),A2=a("li"),ece=a("strong"),i8o=o("flaubert"),d8o=o(" \u2014 "),lD=a("a"),c8o=o("FlaubertForSequenceClassification"),m8o=o(" (FlauBERT model)"),f8o=l(),y2=a("li"),oce=a("strong"),g8o=o("fnet"),h8o=o(" \u2014 "),iD=a("a"),u8o=o("FNetForSequenceClassification"),p8o=o(" (FNet model)"),_8o=l(),L2=a("li"),rce=a("strong"),b8o=o("funnel"),F8o=o(" \u2014 "),dD=a("a"),v8o=o("FunnelForSequenceClassification"),T8o=o(" (Funnel Transformer model)"),M8o=l(),x2=a("li"),tce=a("strong"),E8o=o("gpt2"),C8o=o(" \u2014 "),cD=a("a"),w8o=o("GPT2ForSequenceClassification"),A8o=o(" (OpenAI GPT-2 model)"),y8o=l(),$2=a("li"),ace=a("strong"),L8o=o("gpt_neo"),x8o=o(" \u2014 "),mD=a("a"),$8o=o("GPTNeoForSequenceClassification"),k8o=o(" (GPT Neo model)"),S8o=l(),k2=a("li"),nce=a("strong"),R8o=o("gptj"),B8o=o(" \u2014 "),fD=a("a"),P8o=o("GPTJForSequenceClassification"),I8o=o(" (GPT-J model)"),q8o=l(),S2=a("li"),sce=a("strong"),N8o=o("ibert"),j8o=o(" \u2014 "),gD=a("a"),D8o=o("IBertForSequenceClassification"),G8o=o(" (I-BERT model)"),O8o=l(),R2=a("li"),lce=a("strong"),V8o=o("layoutlm"),X8o=o(" \u2014 "),hD=a("a"),z8o=o("LayoutLMForSequenceClassification"),Q8o=o(" (LayoutLM model)"),W8o=l(),B2=a("li"),ice=a("strong"),H8o=o("layoutlmv2"),U8o=o(" \u2014 "),uD=a("a"),J8o=o("LayoutLMv2ForSequenceClassification"),Y8o=o(" (LayoutLMv2 model)"),K8o=l(),P2=a("li"),dce=a("strong"),Z8o=o("led"),exo=o(" \u2014 "),pD=a("a"),oxo=o("LEDForSequenceClassification"),rxo=o(" (LED model)"),txo=l(),I2=a("li"),cce=a("strong"),axo=o("longformer"),nxo=o(" \u2014 "),_D=a("a"),sxo=o("LongformerForSequenceClassification"),lxo=o(" (Longformer model)"),ixo=l(),q2=a("li"),mce=a("strong"),dxo=o("mbart"),cxo=o(" \u2014 "),bD=a("a"),mxo=o("MBartForSequenceClassification"),fxo=o(" (mBART model)"),gxo=l(),N2=a("li"),fce=a("strong"),hxo=o("megatron-bert"),uxo=o(" \u2014 "),FD=a("a"),pxo=o("MegatronBertForSequenceClassification"),_xo=o(" (MegatronBert model)"),bxo=l(),j2=a("li"),gce=a("strong"),Fxo=o("mobilebert"),vxo=o(" \u2014 "),vD=a("a"),Txo=o("MobileBertForSequenceClassification"),Mxo=o(" (MobileBERT model)"),Exo=l(),D2=a("li"),hce=a("strong"),Cxo=o("mpnet"),wxo=o(" \u2014 "),TD=a("a"),Axo=o("MPNetForSequenceClassification"),yxo=o(" (MPNet model)"),Lxo=l(),G2=a("li"),uce=a("strong"),xxo=o("nystromformer"),$xo=o(" \u2014 "),MD=a("a"),kxo=o("NystromformerForSequenceClassification"),Sxo=o(" (Nystromformer model)"),Rxo=l(),O2=a("li"),pce=a("strong"),Bxo=o("openai-gpt"),Pxo=o(" \u2014 "),ED=a("a"),Ixo=o("OpenAIGPTForSequenceClassification"),qxo=o(" (OpenAI GPT model)"),Nxo=l(),V2=a("li"),_ce=a("strong"),jxo=o("perceiver"),Dxo=o(" \u2014 "),CD=a("a"),Gxo=o("PerceiverForSequenceClassification"),Oxo=o(" (Perceiver model)"),Vxo=l(),X2=a("li"),bce=a("strong"),Xxo=o("plbart"),zxo=o(" \u2014 "),wD=a("a"),Qxo=o("PLBartForSequenceClassification"),Wxo=o(" (PLBart model)"),Hxo=l(),z2=a("li"),Fce=a("strong"),Uxo=o("qdqbert"),Jxo=o(" \u2014 "),AD=a("a"),Yxo=o("QDQBertForSequenceClassification"),Kxo=o(" (QDQBert model)"),Zxo=l(),Q2=a("li"),vce=a("strong"),e7o=o("reformer"),o7o=o(" \u2014 "),yD=a("a"),r7o=o("ReformerForSequenceClassification"),t7o=o(" (Reformer model)"),a7o=l(),W2=a("li"),Tce=a("strong"),n7o=o("rembert"),s7o=o(" \u2014 "),LD=a("a"),l7o=o("RemBertForSequenceClassification"),i7o=o(" (RemBERT model)"),d7o=l(),H2=a("li"),Mce=a("strong"),c7o=o("roberta"),m7o=o(" \u2014 "),xD=a("a"),f7o=o("RobertaForSequenceClassification"),g7o=o(" (RoBERTa model)"),h7o=l(),U2=a("li"),Ece=a("strong"),u7o=o("roformer"),p7o=o(" \u2014 "),$D=a("a"),_7o=o("RoFormerForSequenceClassification"),b7o=o(" (RoFormer model)"),F7o=l(),J2=a("li"),Cce=a("strong"),v7o=o("squeezebert"),T7o=o(" \u2014 "),kD=a("a"),M7o=o("SqueezeBertForSequenceClassification"),E7o=o(" (SqueezeBERT model)"),C7o=l(),Y2=a("li"),wce=a("strong"),w7o=o("tapas"),A7o=o(" \u2014 "),SD=a("a"),y7o=o("TapasForSequenceClassification"),L7o=o(" (TAPAS model)"),x7o=l(),K2=a("li"),Ace=a("strong"),$7o=o("tapex"),k7o=o(" \u2014 "),RD=a("a"),S7o=o("BartForSequenceClassification"),R7o=o(" (TAPEX model)"),B7o=l(),Z2=a("li"),yce=a("strong"),P7o=o("transfo-xl"),I7o=o(" \u2014 "),BD=a("a"),q7o=o("TransfoXLForSequenceClassification"),N7o=o(" (Transformer-XL model)"),j7o=l(),eF=a("li"),Lce=a("strong"),D7o=o("xlm"),G7o=o(" \u2014 "),PD=a("a"),O7o=o("XLMForSequenceClassification"),V7o=o(" (XLM model)"),X7o=l(),oF=a("li"),xce=a("strong"),z7o=o("xlm-roberta"),Q7o=o(" \u2014 "),ID=a("a"),W7o=o("XLMRobertaForSequenceClassification"),H7o=o(" (XLM-RoBERTa model)"),U7o=l(),rF=a("li"),$ce=a("strong"),J7o=o("xlm-roberta-xl"),Y7o=o(" \u2014 "),qD=a("a"),K7o=o("XLMRobertaXLForSequenceClassification"),Z7o=o(" (XLM-RoBERTa-XL model)"),e9o=l(),tF=a("li"),kce=a("strong"),o9o=o("xlnet"),r9o=o(" \u2014 "),ND=a("a"),t9o=o("XLNetForSequenceClassification"),a9o=o(" (XLNet model)"),n9o=l(),aF=a("li"),Sce=a("strong"),s9o=o("yoso"),l9o=o(" \u2014 "),jD=a("a"),i9o=o("YosoForSequenceClassification"),d9o=o(" (YOSO model)"),c9o=l(),nF=a("p"),m9o=o("The model is set in evaluation mode by default using "),Rce=a("code"),f9o=o("model.eval()"),g9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=a("code"),h9o=o("model.train()"),u9o=l(),v(sF.$$.fragment),LPe=l(),ji=a("h2"),lF=a("a"),Pce=a("span"),v(Vy.$$.fragment),p9o=l(),Ice=a("span"),_9o=o("AutoModelForMultipleChoice"),xPe=l(),Bo=a("div"),v(Xy.$$.fragment),b9o=l(),Di=a("p"),F9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DD=a("a"),v9o=o("from_pretrained()"),T9o=o(" class method or the "),GD=a("a"),M9o=o("from_config()"),E9o=o(` class
method.`),C9o=l(),zy=a("p"),w9o=o("This class cannot be instantiated directly using "),qce=a("code"),A9o=o("__init__()"),y9o=o(" (throws an error)."),L9o=l(),lt=a("div"),v(Qy.$$.fragment),x9o=l(),Nce=a("p"),$9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k9o=l(),Gi=a("p"),S9o=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),R9o=o("not"),B9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),P9o=o("from_pretrained()"),I9o=o(" to load the model weights."),q9o=l(),v(iF.$$.fragment),N9o=l(),eo=a("div"),v(Wy.$$.fragment),j9o=l(),Dce=a("p"),D9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G9o=l(),Sa=a("p"),O9o=o("The model class to instantiate is selected based on the "),Gce=a("code"),V9o=o("model_type"),X9o=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),z9o=o("pretrained_model_name_or_path"),Q9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),W9o=o("pretrained_model_name_or_path"),H9o=o(":"),U9o=l(),Y=a("ul"),dF=a("li"),Xce=a("strong"),J9o=o("albert"),Y9o=o(" \u2014 "),VD=a("a"),K9o=o("AlbertForMultipleChoice"),Z9o=o(" (ALBERT model)"),e$o=l(),cF=a("li"),zce=a("strong"),o$o=o("bert"),r$o=o(" \u2014 "),XD=a("a"),t$o=o("BertForMultipleChoice"),a$o=o(" (BERT model)"),n$o=l(),mF=a("li"),Qce=a("strong"),s$o=o("big_bird"),l$o=o(" \u2014 "),zD=a("a"),i$o=o("BigBirdForMultipleChoice"),d$o=o(" (BigBird model)"),c$o=l(),fF=a("li"),Wce=a("strong"),m$o=o("camembert"),f$o=o(" \u2014 "),QD=a("a"),g$o=o("CamembertForMultipleChoice"),h$o=o(" (CamemBERT model)"),u$o=l(),gF=a("li"),Hce=a("strong"),p$o=o("canine"),_$o=o(" \u2014 "),WD=a("a"),b$o=o("CanineForMultipleChoice"),F$o=o(" (Canine model)"),v$o=l(),hF=a("li"),Uce=a("strong"),T$o=o("convbert"),M$o=o(" \u2014 "),HD=a("a"),E$o=o("ConvBertForMultipleChoice"),C$o=o(" (ConvBERT model)"),w$o=l(),uF=a("li"),Jce=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),UD=a("a"),L$o=o("Data2VecTextForMultipleChoice"),x$o=o(" (Data2VecText model)"),$$o=l(),pF=a("li"),Yce=a("strong"),k$o=o("distilbert"),S$o=o(" \u2014 "),JD=a("a"),R$o=o("DistilBertForMultipleChoice"),B$o=o(" (DistilBERT model)"),P$o=l(),_F=a("li"),Kce=a("strong"),I$o=o("electra"),q$o=o(" \u2014 "),YD=a("a"),N$o=o("ElectraForMultipleChoice"),j$o=o(" (ELECTRA model)"),D$o=l(),bF=a("li"),Zce=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),KD=a("a"),V$o=o("FlaubertForMultipleChoice"),X$o=o(" (FlauBERT model)"),z$o=l(),FF=a("li"),eme=a("strong"),Q$o=o("fnet"),W$o=o(" \u2014 "),ZD=a("a"),H$o=o("FNetForMultipleChoice"),U$o=o(" (FNet model)"),J$o=l(),vF=a("li"),ome=a("strong"),Y$o=o("funnel"),K$o=o(" \u2014 "),eG=a("a"),Z$o=o("FunnelForMultipleChoice"),eko=o(" (Funnel Transformer model)"),oko=l(),TF=a("li"),rme=a("strong"),rko=o("ibert"),tko=o(" \u2014 "),oG=a("a"),ako=o("IBertForMultipleChoice"),nko=o(" (I-BERT model)"),sko=l(),MF=a("li"),tme=a("strong"),lko=o("longformer"),iko=o(" \u2014 "),rG=a("a"),dko=o("LongformerForMultipleChoice"),cko=o(" (Longformer model)"),mko=l(),EF=a("li"),ame=a("strong"),fko=o("megatron-bert"),gko=o(" \u2014 "),tG=a("a"),hko=o("MegatronBertForMultipleChoice"),uko=o(" (MegatronBert model)"),pko=l(),CF=a("li"),nme=a("strong"),_ko=o("mobilebert"),bko=o(" \u2014 "),aG=a("a"),Fko=o("MobileBertForMultipleChoice"),vko=o(" (MobileBERT model)"),Tko=l(),wF=a("li"),sme=a("strong"),Mko=o("mpnet"),Eko=o(" \u2014 "),nG=a("a"),Cko=o("MPNetForMultipleChoice"),wko=o(" (MPNet model)"),Ako=l(),AF=a("li"),lme=a("strong"),yko=o("nystromformer"),Lko=o(" \u2014 "),sG=a("a"),xko=o("NystromformerForMultipleChoice"),$ko=o(" (Nystromformer model)"),kko=l(),yF=a("li"),ime=a("strong"),Sko=o("qdqbert"),Rko=o(" \u2014 "),lG=a("a"),Bko=o("QDQBertForMultipleChoice"),Pko=o(" (QDQBert model)"),Iko=l(),LF=a("li"),dme=a("strong"),qko=o("rembert"),Nko=o(" \u2014 "),iG=a("a"),jko=o("RemBertForMultipleChoice"),Dko=o(" (RemBERT model)"),Gko=l(),xF=a("li"),cme=a("strong"),Oko=o("roberta"),Vko=o(" \u2014 "),dG=a("a"),Xko=o("RobertaForMultipleChoice"),zko=o(" (RoBERTa model)"),Qko=l(),$F=a("li"),mme=a("strong"),Wko=o("roformer"),Hko=o(" \u2014 "),cG=a("a"),Uko=o("RoFormerForMultipleChoice"),Jko=o(" (RoFormer model)"),Yko=l(),kF=a("li"),fme=a("strong"),Kko=o("squeezebert"),Zko=o(" \u2014 "),mG=a("a"),eSo=o("SqueezeBertForMultipleChoice"),oSo=o(" (SqueezeBERT model)"),rSo=l(),SF=a("li"),gme=a("strong"),tSo=o("xlm"),aSo=o(" \u2014 "),fG=a("a"),nSo=o("XLMForMultipleChoice"),sSo=o(" (XLM model)"),lSo=l(),RF=a("li"),hme=a("strong"),iSo=o("xlm-roberta"),dSo=o(" \u2014 "),gG=a("a"),cSo=o("XLMRobertaForMultipleChoice"),mSo=o(" (XLM-RoBERTa model)"),fSo=l(),BF=a("li"),ume=a("strong"),gSo=o("xlm-roberta-xl"),hSo=o(" \u2014 "),hG=a("a"),uSo=o("XLMRobertaXLForMultipleChoice"),pSo=o(" (XLM-RoBERTa-XL model)"),_So=l(),PF=a("li"),pme=a("strong"),bSo=o("xlnet"),FSo=o(" \u2014 "),uG=a("a"),vSo=o("XLNetForMultipleChoice"),TSo=o(" (XLNet model)"),MSo=l(),IF=a("li"),_me=a("strong"),ESo=o("yoso"),CSo=o(" \u2014 "),pG=a("a"),wSo=o("YosoForMultipleChoice"),ASo=o(" (YOSO model)"),ySo=l(),qF=a("p"),LSo=o("The model is set in evaluation mode by default using "),bme=a("code"),xSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),kSo=o("model.train()"),SSo=l(),v(NF.$$.fragment),$Pe=l(),Oi=a("h2"),jF=a("a"),vme=a("span"),v(Hy.$$.fragment),RSo=l(),Tme=a("span"),BSo=o("AutoModelForNextSentencePrediction"),kPe=l(),Po=a("div"),v(Uy.$$.fragment),PSo=l(),Vi=a("p"),ISo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_G=a("a"),qSo=o("from_pretrained()"),NSo=o(" class method or the "),bG=a("a"),jSo=o("from_config()"),DSo=o(` class
method.`),GSo=l(),Jy=a("p"),OSo=o("This class cannot be instantiated directly using "),Mme=a("code"),VSo=o("__init__()"),XSo=o(" (throws an error)."),zSo=l(),it=a("div"),v(Yy.$$.fragment),QSo=l(),Eme=a("p"),WSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HSo=l(),Xi=a("p"),USo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),JSo=o("not"),YSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),KSo=o("from_pretrained()"),ZSo=o(" to load the model weights."),eRo=l(),v(DF.$$.fragment),oRo=l(),oo=a("div"),v(Ky.$$.fragment),rRo=l(),wme=a("p"),tRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aRo=l(),Ra=a("p"),nRo=o("The model class to instantiate is selected based on the "),Ame=a("code"),sRo=o("model_type"),lRo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),iRo=o("pretrained_model_name_or_path"),dRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),cRo=o("pretrained_model_name_or_path"),mRo=o(":"),fRo=l(),Yr=a("ul"),GF=a("li"),xme=a("strong"),gRo=o("bert"),hRo=o(" \u2014 "),vG=a("a"),uRo=o("BertForNextSentencePrediction"),pRo=o(" (BERT model)"),_Ro=l(),OF=a("li"),$me=a("strong"),bRo=o("fnet"),FRo=o(" \u2014 "),TG=a("a"),vRo=o("FNetForNextSentencePrediction"),TRo=o(" (FNet model)"),MRo=l(),VF=a("li"),kme=a("strong"),ERo=o("megatron-bert"),CRo=o(" \u2014 "),MG=a("a"),wRo=o("MegatronBertForNextSentencePrediction"),ARo=o(" (MegatronBert model)"),yRo=l(),XF=a("li"),Sme=a("strong"),LRo=o("mobilebert"),xRo=o(" \u2014 "),EG=a("a"),$Ro=o("MobileBertForNextSentencePrediction"),kRo=o(" (MobileBERT model)"),SRo=l(),zF=a("li"),Rme=a("strong"),RRo=o("qdqbert"),BRo=o(" \u2014 "),CG=a("a"),PRo=o("QDQBertForNextSentencePrediction"),IRo=o(" (QDQBert model)"),qRo=l(),QF=a("p"),NRo=o("The model is set in evaluation mode by default using "),Bme=a("code"),jRo=o("model.eval()"),DRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),GRo=o("model.train()"),ORo=l(),v(WF.$$.fragment),SPe=l(),zi=a("h2"),HF=a("a"),Ime=a("span"),v(Zy.$$.fragment),VRo=l(),qme=a("span"),XRo=o("AutoModelForTokenClassification"),RPe=l(),Io=a("div"),v(eL.$$.fragment),zRo=l(),Qi=a("p"),QRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wG=a("a"),WRo=o("from_pretrained()"),HRo=o(" class method or the "),AG=a("a"),URo=o("from_config()"),JRo=o(` class
method.`),YRo=l(),oL=a("p"),KRo=o("This class cannot be instantiated directly using "),Nme=a("code"),ZRo=o("__init__()"),eBo=o(" (throws an error)."),oBo=l(),dt=a("div"),v(rL.$$.fragment),rBo=l(),jme=a("p"),tBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aBo=l(),Wi=a("p"),nBo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),sBo=o("not"),lBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),iBo=o("from_pretrained()"),dBo=o(" to load the model weights."),cBo=l(),v(UF.$$.fragment),mBo=l(),ro=a("div"),v(tL.$$.fragment),fBo=l(),Gme=a("p"),gBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hBo=l(),Ba=a("p"),uBo=o("The model class to instantiate is selected based on the "),Ome=a("code"),pBo=o("model_type"),_Bo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),bBo=o("pretrained_model_name_or_path"),FBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),vBo=o("pretrained_model_name_or_path"),TBo=o(":"),MBo=l(),U=a("ul"),JF=a("li"),zme=a("strong"),EBo=o("albert"),CBo=o(" \u2014 "),LG=a("a"),wBo=o("AlbertForTokenClassification"),ABo=o(" (ALBERT model)"),yBo=l(),YF=a("li"),Qme=a("strong"),LBo=o("bert"),xBo=o(" \u2014 "),xG=a("a"),$Bo=o("BertForTokenClassification"),kBo=o(" (BERT model)"),SBo=l(),KF=a("li"),Wme=a("strong"),RBo=o("big_bird"),BBo=o(" \u2014 "),$G=a("a"),PBo=o("BigBirdForTokenClassification"),IBo=o(" (BigBird model)"),qBo=l(),ZF=a("li"),Hme=a("strong"),NBo=o("camembert"),jBo=o(" \u2014 "),kG=a("a"),DBo=o("CamembertForTokenClassification"),GBo=o(" (CamemBERT model)"),OBo=l(),ev=a("li"),Ume=a("strong"),VBo=o("canine"),XBo=o(" \u2014 "),SG=a("a"),zBo=o("CanineForTokenClassification"),QBo=o(" (Canine model)"),WBo=l(),ov=a("li"),Jme=a("strong"),HBo=o("convbert"),UBo=o(" \u2014 "),RG=a("a"),JBo=o("ConvBertForTokenClassification"),YBo=o(" (ConvBERT model)"),KBo=l(),rv=a("li"),Yme=a("strong"),ZBo=o("data2vec-text"),ePo=o(" \u2014 "),BG=a("a"),oPo=o("Data2VecTextForTokenClassification"),rPo=o(" (Data2VecText model)"),tPo=l(),tv=a("li"),Kme=a("strong"),aPo=o("deberta"),nPo=o(" \u2014 "),PG=a("a"),sPo=o("DebertaForTokenClassification"),lPo=o(" (DeBERTa model)"),iPo=l(),av=a("li"),Zme=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),IG=a("a"),mPo=o("DebertaV2ForTokenClassification"),fPo=o(" (DeBERTa-v2 model)"),gPo=l(),nv=a("li"),efe=a("strong"),hPo=o("distilbert"),uPo=o(" \u2014 "),qG=a("a"),pPo=o("DistilBertForTokenClassification"),_Po=o(" (DistilBERT model)"),bPo=l(),sv=a("li"),ofe=a("strong"),FPo=o("electra"),vPo=o(" \u2014 "),NG=a("a"),TPo=o("ElectraForTokenClassification"),MPo=o(" (ELECTRA model)"),EPo=l(),lv=a("li"),rfe=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),jG=a("a"),APo=o("FlaubertForTokenClassification"),yPo=o(" (FlauBERT model)"),LPo=l(),iv=a("li"),tfe=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),DG=a("a"),kPo=o("FNetForTokenClassification"),SPo=o(" (FNet model)"),RPo=l(),dv=a("li"),afe=a("strong"),BPo=o("funnel"),PPo=o(" \u2014 "),GG=a("a"),IPo=o("FunnelForTokenClassification"),qPo=o(" (Funnel Transformer model)"),NPo=l(),cv=a("li"),nfe=a("strong"),jPo=o("gpt2"),DPo=o(" \u2014 "),OG=a("a"),GPo=o("GPT2ForTokenClassification"),OPo=o(" (OpenAI GPT-2 model)"),VPo=l(),mv=a("li"),sfe=a("strong"),XPo=o("ibert"),zPo=o(" \u2014 "),VG=a("a"),QPo=o("IBertForTokenClassification"),WPo=o(" (I-BERT model)"),HPo=l(),fv=a("li"),lfe=a("strong"),UPo=o("layoutlm"),JPo=o(" \u2014 "),XG=a("a"),YPo=o("LayoutLMForTokenClassification"),KPo=o(" (LayoutLM model)"),ZPo=l(),gv=a("li"),ife=a("strong"),eIo=o("layoutlmv2"),oIo=o(" \u2014 "),zG=a("a"),rIo=o("LayoutLMv2ForTokenClassification"),tIo=o(" (LayoutLMv2 model)"),aIo=l(),hv=a("li"),dfe=a("strong"),nIo=o("longformer"),sIo=o(" \u2014 "),QG=a("a"),lIo=o("LongformerForTokenClassification"),iIo=o(" (Longformer model)"),dIo=l(),uv=a("li"),cfe=a("strong"),cIo=o("megatron-bert"),mIo=o(" \u2014 "),WG=a("a"),fIo=o("MegatronBertForTokenClassification"),gIo=o(" (MegatronBert model)"),hIo=l(),pv=a("li"),mfe=a("strong"),uIo=o("mobilebert"),pIo=o(" \u2014 "),HG=a("a"),_Io=o("MobileBertForTokenClassification"),bIo=o(" (MobileBERT model)"),FIo=l(),_v=a("li"),ffe=a("strong"),vIo=o("mpnet"),TIo=o(" \u2014 "),UG=a("a"),MIo=o("MPNetForTokenClassification"),EIo=o(" (MPNet model)"),CIo=l(),bv=a("li"),gfe=a("strong"),wIo=o("nystromformer"),AIo=o(" \u2014 "),JG=a("a"),yIo=o("NystromformerForTokenClassification"),LIo=o(" (Nystromformer model)"),xIo=l(),Fv=a("li"),hfe=a("strong"),$Io=o("qdqbert"),kIo=o(" \u2014 "),YG=a("a"),SIo=o("QDQBertForTokenClassification"),RIo=o(" (QDQBert model)"),BIo=l(),vv=a("li"),ufe=a("strong"),PIo=o("rembert"),IIo=o(" \u2014 "),KG=a("a"),qIo=o("RemBertForTokenClassification"),NIo=o(" (RemBERT model)"),jIo=l(),Tv=a("li"),pfe=a("strong"),DIo=o("roberta"),GIo=o(" \u2014 "),ZG=a("a"),OIo=o("RobertaForTokenClassification"),VIo=o(" (RoBERTa model)"),XIo=l(),Mv=a("li"),_fe=a("strong"),zIo=o("roformer"),QIo=o(" \u2014 "),eO=a("a"),WIo=o("RoFormerForTokenClassification"),HIo=o(" (RoFormer model)"),UIo=l(),Ev=a("li"),bfe=a("strong"),JIo=o("squeezebert"),YIo=o(" \u2014 "),oO=a("a"),KIo=o("SqueezeBertForTokenClassification"),ZIo=o(" (SqueezeBERT model)"),eqo=l(),Cv=a("li"),Ffe=a("strong"),oqo=o("xlm"),rqo=o(" \u2014 "),rO=a("a"),tqo=o("XLMForTokenClassification"),aqo=o(" (XLM model)"),nqo=l(),wv=a("li"),vfe=a("strong"),sqo=o("xlm-roberta"),lqo=o(" \u2014 "),tO=a("a"),iqo=o("XLMRobertaForTokenClassification"),dqo=o(" (XLM-RoBERTa model)"),cqo=l(),Av=a("li"),Tfe=a("strong"),mqo=o("xlm-roberta-xl"),fqo=o(" \u2014 "),aO=a("a"),gqo=o("XLMRobertaXLForTokenClassification"),hqo=o(" (XLM-RoBERTa-XL model)"),uqo=l(),yv=a("li"),Mfe=a("strong"),pqo=o("xlnet"),_qo=o(" \u2014 "),nO=a("a"),bqo=o("XLNetForTokenClassification"),Fqo=o(" (XLNet model)"),vqo=l(),Lv=a("li"),Efe=a("strong"),Tqo=o("yoso"),Mqo=o(" \u2014 "),sO=a("a"),Eqo=o("YosoForTokenClassification"),Cqo=o(" (YOSO model)"),wqo=l(),xv=a("p"),Aqo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),yqo=o("model.eval()"),Lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),xqo=o("model.train()"),$qo=l(),v($v.$$.fragment),BPe=l(),Hi=a("h2"),kv=a("a"),Afe=a("span"),v(aL.$$.fragment),kqo=l(),yfe=a("span"),Sqo=o("AutoModelForQuestionAnswering"),PPe=l(),qo=a("div"),v(nL.$$.fragment),Rqo=l(),Ui=a("p"),Bqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lO=a("a"),Pqo=o("from_pretrained()"),Iqo=o(" class method or the "),iO=a("a"),qqo=o("from_config()"),Nqo=o(` class
method.`),jqo=l(),sL=a("p"),Dqo=o("This class cannot be instantiated directly using "),Lfe=a("code"),Gqo=o("__init__()"),Oqo=o(" (throws an error)."),Vqo=l(),ct=a("div"),v(lL.$$.fragment),Xqo=l(),xfe=a("p"),zqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qqo=l(),Ji=a("p"),Wqo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),Hqo=o("not"),Uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=a("a"),Jqo=o("from_pretrained()"),Yqo=o(" to load the model weights."),Kqo=l(),v(Sv.$$.fragment),Zqo=l(),to=a("div"),v(iL.$$.fragment),eNo=l(),kfe=a("p"),oNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rNo=l(),Pa=a("p"),tNo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),aNo=o("model_type"),nNo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),sNo=o("pretrained_model_name_or_path"),lNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(":"),cNo=l(),O=a("ul"),Rv=a("li"),Pfe=a("strong"),mNo=o("albert"),fNo=o(" \u2014 "),cO=a("a"),gNo=o("AlbertForQuestionAnswering"),hNo=o(" (ALBERT model)"),uNo=l(),Bv=a("li"),Ife=a("strong"),pNo=o("bart"),_No=o(" \u2014 "),mO=a("a"),bNo=o("BartForQuestionAnswering"),FNo=o(" (BART model)"),vNo=l(),Pv=a("li"),qfe=a("strong"),TNo=o("bert"),MNo=o(" \u2014 "),fO=a("a"),ENo=o("BertForQuestionAnswering"),CNo=o(" (BERT model)"),wNo=l(),Iv=a("li"),Nfe=a("strong"),ANo=o("big_bird"),yNo=o(" \u2014 "),gO=a("a"),LNo=o("BigBirdForQuestionAnswering"),xNo=o(" (BigBird model)"),$No=l(),qv=a("li"),jfe=a("strong"),kNo=o("bigbird_pegasus"),SNo=o(" \u2014 "),hO=a("a"),RNo=o("BigBirdPegasusForQuestionAnswering"),BNo=o(" (BigBirdPegasus model)"),PNo=l(),Nv=a("li"),Dfe=a("strong"),INo=o("camembert"),qNo=o(" \u2014 "),uO=a("a"),NNo=o("CamembertForQuestionAnswering"),jNo=o(" (CamemBERT model)"),DNo=l(),jv=a("li"),Gfe=a("strong"),GNo=o("canine"),ONo=o(" \u2014 "),pO=a("a"),VNo=o("CanineForQuestionAnswering"),XNo=o(" (Canine model)"),zNo=l(),Dv=a("li"),Ofe=a("strong"),QNo=o("convbert"),WNo=o(" \u2014 "),_O=a("a"),HNo=o("ConvBertForQuestionAnswering"),UNo=o(" (ConvBERT model)"),JNo=l(),Gv=a("li"),Vfe=a("strong"),YNo=o("data2vec-text"),KNo=o(" \u2014 "),bO=a("a"),ZNo=o("Data2VecTextForQuestionAnswering"),ejo=o(" (Data2VecText model)"),ojo=l(),Ov=a("li"),Xfe=a("strong"),rjo=o("deberta"),tjo=o(" \u2014 "),FO=a("a"),ajo=o("DebertaForQuestionAnswering"),njo=o(" (DeBERTa model)"),sjo=l(),Vv=a("li"),zfe=a("strong"),ljo=o("deberta-v2"),ijo=o(" \u2014 "),vO=a("a"),djo=o("DebertaV2ForQuestionAnswering"),cjo=o(" (DeBERTa-v2 model)"),mjo=l(),Xv=a("li"),Qfe=a("strong"),fjo=o("distilbert"),gjo=o(" \u2014 "),TO=a("a"),hjo=o("DistilBertForQuestionAnswering"),ujo=o(" (DistilBERT model)"),pjo=l(),zv=a("li"),Wfe=a("strong"),_jo=o("electra"),bjo=o(" \u2014 "),MO=a("a"),Fjo=o("ElectraForQuestionAnswering"),vjo=o(" (ELECTRA model)"),Tjo=l(),Qv=a("li"),Hfe=a("strong"),Mjo=o("flaubert"),Ejo=o(" \u2014 "),EO=a("a"),Cjo=o("FlaubertForQuestionAnsweringSimple"),wjo=o(" (FlauBERT model)"),Ajo=l(),Wv=a("li"),Ufe=a("strong"),yjo=o("fnet"),Ljo=o(" \u2014 "),CO=a("a"),xjo=o("FNetForQuestionAnswering"),$jo=o(" (FNet model)"),kjo=l(),Hv=a("li"),Jfe=a("strong"),Sjo=o("funnel"),Rjo=o(" \u2014 "),wO=a("a"),Bjo=o("FunnelForQuestionAnswering"),Pjo=o(" (Funnel Transformer model)"),Ijo=l(),Uv=a("li"),Yfe=a("strong"),qjo=o("gptj"),Njo=o(" \u2014 "),AO=a("a"),jjo=o("GPTJForQuestionAnswering"),Djo=o(" (GPT-J model)"),Gjo=l(),Jv=a("li"),Kfe=a("strong"),Ojo=o("ibert"),Vjo=o(" \u2014 "),yO=a("a"),Xjo=o("IBertForQuestionAnswering"),zjo=o(" (I-BERT model)"),Qjo=l(),Yv=a("li"),Zfe=a("strong"),Wjo=o("layoutlmv2"),Hjo=o(" \u2014 "),LO=a("a"),Ujo=o("LayoutLMv2ForQuestionAnswering"),Jjo=o(" (LayoutLMv2 model)"),Yjo=l(),Kv=a("li"),ege=a("strong"),Kjo=o("led"),Zjo=o(" \u2014 "),xO=a("a"),eDo=o("LEDForQuestionAnswering"),oDo=o(" (LED model)"),rDo=l(),Zv=a("li"),oge=a("strong"),tDo=o("longformer"),aDo=o(" \u2014 "),$O=a("a"),nDo=o("LongformerForQuestionAnswering"),sDo=o(" (Longformer model)"),lDo=l(),e1=a("li"),rge=a("strong"),iDo=o("lxmert"),dDo=o(" \u2014 "),kO=a("a"),cDo=o("LxmertForQuestionAnswering"),mDo=o(" (LXMERT model)"),fDo=l(),o1=a("li"),tge=a("strong"),gDo=o("mbart"),hDo=o(" \u2014 "),SO=a("a"),uDo=o("MBartForQuestionAnswering"),pDo=o(" (mBART model)"),_Do=l(),r1=a("li"),age=a("strong"),bDo=o("megatron-bert"),FDo=o(" \u2014 "),RO=a("a"),vDo=o("MegatronBertForQuestionAnswering"),TDo=o(" (MegatronBert model)"),MDo=l(),t1=a("li"),nge=a("strong"),EDo=o("mobilebert"),CDo=o(" \u2014 "),BO=a("a"),wDo=o("MobileBertForQuestionAnswering"),ADo=o(" (MobileBERT model)"),yDo=l(),a1=a("li"),sge=a("strong"),LDo=o("mpnet"),xDo=o(" \u2014 "),PO=a("a"),$Do=o("MPNetForQuestionAnswering"),kDo=o(" (MPNet model)"),SDo=l(),n1=a("li"),lge=a("strong"),RDo=o("nystromformer"),BDo=o(" \u2014 "),IO=a("a"),PDo=o("NystromformerForQuestionAnswering"),IDo=o(" (Nystromformer model)"),qDo=l(),s1=a("li"),ige=a("strong"),NDo=o("qdqbert"),jDo=o(" \u2014 "),qO=a("a"),DDo=o("QDQBertForQuestionAnswering"),GDo=o(" (QDQBert model)"),ODo=l(),l1=a("li"),dge=a("strong"),VDo=o("reformer"),XDo=o(" \u2014 "),NO=a("a"),zDo=o("ReformerForQuestionAnswering"),QDo=o(" (Reformer model)"),WDo=l(),i1=a("li"),cge=a("strong"),HDo=o("rembert"),UDo=o(" \u2014 "),jO=a("a"),JDo=o("RemBertForQuestionAnswering"),YDo=o(" (RemBERT model)"),KDo=l(),d1=a("li"),mge=a("strong"),ZDo=o("roberta"),eGo=o(" \u2014 "),DO=a("a"),oGo=o("RobertaForQuestionAnswering"),rGo=o(" (RoBERTa model)"),tGo=l(),c1=a("li"),fge=a("strong"),aGo=o("roformer"),nGo=o(" \u2014 "),GO=a("a"),sGo=o("RoFormerForQuestionAnswering"),lGo=o(" (RoFormer model)"),iGo=l(),m1=a("li"),gge=a("strong"),dGo=o("splinter"),cGo=o(" \u2014 "),OO=a("a"),mGo=o("SplinterForQuestionAnswering"),fGo=o(" (Splinter model)"),gGo=l(),f1=a("li"),hge=a("strong"),hGo=o("squeezebert"),uGo=o(" \u2014 "),VO=a("a"),pGo=o("SqueezeBertForQuestionAnswering"),_Go=o(" (SqueezeBERT model)"),bGo=l(),g1=a("li"),uge=a("strong"),FGo=o("xlm"),vGo=o(" \u2014 "),XO=a("a"),TGo=o("XLMForQuestionAnsweringSimple"),MGo=o(" (XLM model)"),EGo=l(),h1=a("li"),pge=a("strong"),CGo=o("xlm-roberta"),wGo=o(" \u2014 "),zO=a("a"),AGo=o("XLMRobertaForQuestionAnswering"),yGo=o(" (XLM-RoBERTa model)"),LGo=l(),u1=a("li"),_ge=a("strong"),xGo=o("xlm-roberta-xl"),$Go=o(" \u2014 "),QO=a("a"),kGo=o("XLMRobertaXLForQuestionAnswering"),SGo=o(" (XLM-RoBERTa-XL model)"),RGo=l(),p1=a("li"),bge=a("strong"),BGo=o("xlnet"),PGo=o(" \u2014 "),WO=a("a"),IGo=o("XLNetForQuestionAnsweringSimple"),qGo=o(" (XLNet model)"),NGo=l(),_1=a("li"),Fge=a("strong"),jGo=o("yoso"),DGo=o(" \u2014 "),HO=a("a"),GGo=o("YosoForQuestionAnswering"),OGo=o(" (YOSO model)"),VGo=l(),b1=a("p"),XGo=o("The model is set in evaluation mode by default using "),vge=a("code"),zGo=o("model.eval()"),QGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),WGo=o("model.train()"),HGo=l(),v(F1.$$.fragment),IPe=l(),Yi=a("h2"),v1=a("a"),Mge=a("span"),v(dL.$$.fragment),UGo=l(),Ege=a("span"),JGo=o("AutoModelForTableQuestionAnswering"),qPe=l(),No=a("div"),v(cL.$$.fragment),YGo=l(),Ki=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UO=a("a"),ZGo=o("from_pretrained()"),eOo=o(" class method or the "),JO=a("a"),oOo=o("from_config()"),rOo=o(` class
method.`),tOo=l(),mL=a("p"),aOo=o("This class cannot be instantiated directly using "),Cge=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),mt=a("div"),v(fL.$$.fragment),iOo=l(),wge=a("p"),dOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cOo=l(),Zi=a("p"),mOo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),fOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),hOo=o("from_pretrained()"),uOo=o(" to load the model weights."),pOo=l(),v(T1.$$.fragment),_Oo=l(),ao=a("div"),v(gL.$$.fragment),bOo=l(),yge=a("p"),FOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vOo=l(),Ia=a("p"),TOo=o("The model class to instantiate is selected based on the "),Lge=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),AOo=o("pretrained_model_name_or_path"),yOo=o(":"),LOo=l(),kge=a("ul"),M1=a("li"),Sge=a("strong"),xOo=o("tapas"),$Oo=o(" \u2014 "),KO=a("a"),kOo=o("TapasForQuestionAnswering"),SOo=o(" (TAPAS model)"),ROo=l(),E1=a("p"),BOo=o("The model is set in evaluation mode by default using "),Rge=a("code"),POo=o("model.eval()"),IOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),qOo=o("model.train()"),NOo=l(),v(C1.$$.fragment),NPe=l(),ed=a("h2"),w1=a("a"),Pge=a("span"),v(hL.$$.fragment),jOo=l(),Ige=a("span"),DOo=o("AutoModelForImageClassification"),jPe=l(),jo=a("div"),v(uL.$$.fragment),GOo=l(),od=a("p"),OOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZO=a("a"),VOo=o("from_pretrained()"),XOo=o(" class method or the "),eV=a("a"),zOo=o("from_config()"),QOo=o(` class
method.`),WOo=l(),pL=a("p"),HOo=o("This class cannot be instantiated directly using "),qge=a("code"),UOo=o("__init__()"),JOo=o(" (throws an error)."),YOo=l(),ft=a("div"),v(_L.$$.fragment),KOo=l(),Nge=a("p"),ZOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eVo=l(),rd=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),aVo=o("from_pretrained()"),nVo=o(" to load the model weights."),sVo=l(),v(A1.$$.fragment),lVo=l(),no=a("div"),v(bL.$$.fragment),iVo=l(),Dge=a("p"),dVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cVo=l(),qa=a("p"),mVo=o("The model class to instantiate is selected based on the "),Gge=a("code"),fVo=o("model_type"),gVo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),hVo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),pVo=o("pretrained_model_name_or_path"),_Vo=o(":"),bVo=l(),Fe=a("ul"),y1=a("li"),Xge=a("strong"),FVo=o("beit"),vVo=o(" \u2014 "),rV=a("a"),TVo=o("BeitForImageClassification"),MVo=o(" (BEiT model)"),EVo=l(),L1=a("li"),zge=a("strong"),CVo=o("convnext"),wVo=o(" \u2014 "),tV=a("a"),AVo=o("ConvNextForImageClassification"),yVo=o(" (ConvNext model)"),LVo=l(),x1=a("li"),Qge=a("strong"),xVo=o("data2vec-vision"),$Vo=o(" \u2014 "),aV=a("a"),kVo=o("Data2VecVisionForImageClassification"),SVo=o(" (Data2VecVision model)"),RVo=l(),Rs=a("li"),Wge=a("strong"),BVo=o("deit"),PVo=o(" \u2014 "),nV=a("a"),IVo=o("DeiTForImageClassification"),qVo=o(" or "),sV=a("a"),NVo=o("DeiTForImageClassificationWithTeacher"),jVo=o(" (DeiT model)"),DVo=l(),$1=a("li"),Hge=a("strong"),GVo=o("imagegpt"),OVo=o(" \u2014 "),lV=a("a"),VVo=o("ImageGPTForImageClassification"),XVo=o(" (ImageGPT model)"),zVo=l(),gt=a("li"),Uge=a("strong"),QVo=o("perceiver"),WVo=o(" \u2014 "),iV=a("a"),HVo=o("PerceiverForImageClassificationLearned"),UVo=o(" or "),dV=a("a"),JVo=o("PerceiverForImageClassificationFourier"),YVo=o(" or "),cV=a("a"),KVo=o("PerceiverForImageClassificationConvProcessing"),ZVo=o(" (Perceiver model)"),eXo=l(),k1=a("li"),Jge=a("strong"),oXo=o("poolformer"),rXo=o(" \u2014 "),mV=a("a"),tXo=o("PoolFormerForImageClassification"),aXo=o(" (PoolFormer model)"),nXo=l(),S1=a("li"),Yge=a("strong"),sXo=o("regnet"),lXo=o(" \u2014 "),fV=a("a"),iXo=o("RegNetForImageClassification"),dXo=o(" (RegNet model)"),cXo=l(),R1=a("li"),Kge=a("strong"),mXo=o("resnet"),fXo=o(" \u2014 "),gV=a("a"),gXo=o("ResNetForImageClassification"),hXo=o(" (ResNet model)"),uXo=l(),B1=a("li"),Zge=a("strong"),pXo=o("segformer"),_Xo=o(" \u2014 "),hV=a("a"),bXo=o("SegformerForImageClassification"),FXo=o(" (SegFormer model)"),vXo=l(),P1=a("li"),ehe=a("strong"),TXo=o("swin"),MXo=o(" \u2014 "),uV=a("a"),EXo=o("SwinForImageClassification"),CXo=o(" (Swin model)"),wXo=l(),I1=a("li"),ohe=a("strong"),AXo=o("van"),yXo=o(" \u2014 "),pV=a("a"),LXo=o("VanForImageClassification"),xXo=o(" (VAN model)"),$Xo=l(),q1=a("li"),rhe=a("strong"),kXo=o("vit"),SXo=o(" \u2014 "),_V=a("a"),RXo=o("ViTForImageClassification"),BXo=o(" (ViT model)"),PXo=l(),N1=a("p"),IXo=o("The model is set in evaluation mode by default using "),the=a("code"),qXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),jXo=o("model.train()"),DXo=l(),v(j1.$$.fragment),DPe=l(),td=a("h2"),D1=a("a"),nhe=a("span"),v(FL.$$.fragment),GXo=l(),she=a("span"),OXo=o("AutoModelForVision2Seq"),GPe=l(),Do=a("div"),v(vL.$$.fragment),VXo=l(),ad=a("p"),XXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bV=a("a"),zXo=o("from_pretrained()"),QXo=o(" class method or the "),FV=a("a"),WXo=o("from_config()"),HXo=o(` class
method.`),UXo=l(),TL=a("p"),JXo=o("This class cannot be instantiated directly using "),lhe=a("code"),YXo=o("__init__()"),KXo=o(" (throws an error)."),ZXo=l(),ht=a("div"),v(ML.$$.fragment),ezo=l(),ihe=a("p"),ozo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rzo=l(),nd=a("p"),tzo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),azo=o("not"),nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),szo=o("from_pretrained()"),lzo=o(" to load the model weights."),izo=l(),v(G1.$$.fragment),dzo=l(),so=a("div"),v(EL.$$.fragment),czo=l(),che=a("p"),mzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fzo=l(),Na=a("p"),gzo=o("The model class to instantiate is selected based on the "),mhe=a("code"),hzo=o("model_type"),uzo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),pzo=o("pretrained_model_name_or_path"),_zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),bzo=o("pretrained_model_name_or_path"),Fzo=o(":"),vzo=l(),hhe=a("ul"),O1=a("li"),uhe=a("strong"),Tzo=o("vision-encoder-decoder"),Mzo=o(" \u2014 "),TV=a("a"),Ezo=o("VisionEncoderDecoderModel"),Czo=o(" (Vision Encoder decoder model)"),wzo=l(),V1=a("p"),Azo=o("The model is set in evaluation mode by default using "),phe=a("code"),yzo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),xzo=o("model.train()"),$zo=l(),v(X1.$$.fragment),OPe=l(),sd=a("h2"),z1=a("a"),bhe=a("span"),v(CL.$$.fragment),kzo=l(),Fhe=a("span"),Szo=o("AutoModelForAudioClassification"),VPe=l(),Go=a("div"),v(wL.$$.fragment),Rzo=l(),ld=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),MV=a("a"),Pzo=o("from_pretrained()"),Izo=o(" class method or the "),EV=a("a"),qzo=o("from_config()"),Nzo=o(` class
method.`),jzo=l(),AL=a("p"),Dzo=o("This class cannot be instantiated directly using "),vhe=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),ut=a("div"),v(yL.$$.fragment),Xzo=l(),The=a("p"),zzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qzo=l(),id=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),Hzo=o("not"),Uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),v(Q1.$$.fragment),Zzo=l(),lo=a("div"),v(LL.$$.fragment),eQo=l(),Ehe=a("p"),oQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rQo=l(),ja=a("p"),tQo=o("The model class to instantiate is selected based on the "),Che=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Ne=a("ul"),W1=a("li"),yhe=a("strong"),mQo=o("data2vec-audio"),fQo=o(" \u2014 "),wV=a("a"),gQo=o("Data2VecAudioForSequenceClassification"),hQo=o(" (Data2VecAudio model)"),uQo=l(),H1=a("li"),Lhe=a("strong"),pQo=o("hubert"),_Qo=o(" \u2014 "),AV=a("a"),bQo=o("HubertForSequenceClassification"),FQo=o(" (Hubert model)"),vQo=l(),U1=a("li"),xhe=a("strong"),TQo=o("sew"),MQo=o(" \u2014 "),yV=a("a"),EQo=o("SEWForSequenceClassification"),CQo=o(" (SEW model)"),wQo=l(),J1=a("li"),$he=a("strong"),AQo=o("sew-d"),yQo=o(" \u2014 "),LV=a("a"),LQo=o("SEWDForSequenceClassification"),xQo=o(" (SEW-D model)"),$Qo=l(),Y1=a("li"),khe=a("strong"),kQo=o("unispeech"),SQo=o(" \u2014 "),xV=a("a"),RQo=o("UniSpeechForSequenceClassification"),BQo=o(" (UniSpeech model)"),PQo=l(),K1=a("li"),She=a("strong"),IQo=o("unispeech-sat"),qQo=o(" \u2014 "),$V=a("a"),NQo=o("UniSpeechSatForSequenceClassification"),jQo=o(" (UniSpeechSat model)"),DQo=l(),Z1=a("li"),Rhe=a("strong"),GQo=o("wav2vec2"),OQo=o(" \u2014 "),kV=a("a"),VQo=o("Wav2Vec2ForSequenceClassification"),XQo=o(" (Wav2Vec2 model)"),zQo=l(),eT=a("li"),Bhe=a("strong"),QQo=o("wavlm"),WQo=o(" \u2014 "),SV=a("a"),HQo=o("WavLMForSequenceClassification"),UQo=o(" (WavLM model)"),JQo=l(),oT=a("p"),YQo=o("The model is set in evaluation mode by default using "),Phe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),eWo=o("model.train()"),oWo=l(),v(rT.$$.fragment),XPe=l(),dd=a("h2"),tT=a("a"),qhe=a("span"),v(xL.$$.fragment),rWo=l(),Nhe=a("span"),tWo=o("AutoModelForAudioFrameClassification"),zPe=l(),Oo=a("div"),v($L.$$.fragment),aWo=l(),cd=a("p"),nWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RV=a("a"),sWo=o("from_pretrained()"),lWo=o(" class method or the "),BV=a("a"),iWo=o("from_config()"),dWo=o(` class
method.`),cWo=l(),kL=a("p"),mWo=o("This class cannot be instantiated directly using "),jhe=a("code"),fWo=o("__init__()"),gWo=o(" (throws an error)."),hWo=l(),pt=a("div"),v(SL.$$.fragment),uWo=l(),Dhe=a("p"),pWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Wo=l(),md=a("p"),bWo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),FWo=o("not"),vWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),TWo=o("from_pretrained()"),MWo=o(" to load the model weights."),EWo=l(),v(aT.$$.fragment),CWo=l(),io=a("div"),v(RL.$$.fragment),wWo=l(),Ohe=a("p"),AWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yWo=l(),Da=a("p"),LWo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),xWo=o("model_type"),$Wo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),kWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),RWo=o("pretrained_model_name_or_path"),BWo=o(":"),PWo=l(),Ga=a("ul"),nT=a("li"),Qhe=a("strong"),IWo=o("data2vec-audio"),qWo=o(" \u2014 "),IV=a("a"),NWo=o("Data2VecAudioForAudioFrameClassification"),jWo=o(" (Data2VecAudio model)"),DWo=l(),sT=a("li"),Whe=a("strong"),GWo=o("unispeech-sat"),OWo=o(" \u2014 "),qV=a("a"),VWo=o("UniSpeechSatForAudioFrameClassification"),XWo=o(" (UniSpeechSat model)"),zWo=l(),lT=a("li"),Hhe=a("strong"),QWo=o("wav2vec2"),WWo=o(" \u2014 "),NV=a("a"),HWo=o("Wav2Vec2ForAudioFrameClassification"),UWo=o(" (Wav2Vec2 model)"),JWo=l(),iT=a("li"),Uhe=a("strong"),YWo=o("wavlm"),KWo=o(" \u2014 "),jV=a("a"),ZWo=o("WavLMForAudioFrameClassification"),eHo=o(" (WavLM model)"),oHo=l(),dT=a("p"),rHo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),tHo=o("model.eval()"),aHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),nHo=o("model.train()"),sHo=l(),v(cT.$$.fragment),QPe=l(),fd=a("h2"),mT=a("a"),Khe=a("span"),v(BL.$$.fragment),lHo=l(),Zhe=a("span"),iHo=o("AutoModelForCTC"),WPe=l(),Vo=a("div"),v(PL.$$.fragment),dHo=l(),gd=a("p"),cHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DV=a("a"),mHo=o("from_pretrained()"),fHo=o(" class method or the "),GV=a("a"),gHo=o("from_config()"),hHo=o(` class
method.`),uHo=l(),IL=a("p"),pHo=o("This class cannot be instantiated directly using "),eue=a("code"),_Ho=o("__init__()"),bHo=o(" (throws an error)."),FHo=l(),_t=a("div"),v(qL.$$.fragment),vHo=l(),oue=a("p"),THo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),MHo=l(),hd=a("p"),EHo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),CHo=o("not"),wHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),AHo=o("from_pretrained()"),yHo=o(" to load the model weights."),LHo=l(),v(fT.$$.fragment),xHo=l(),co=a("div"),v(NL.$$.fragment),$Ho=l(),tue=a("p"),kHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SHo=l(),Oa=a("p"),RHo=o("The model class to instantiate is selected based on the "),aue=a("code"),BHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),IHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(":"),DHo=l(),je=a("ul"),gT=a("li"),lue=a("strong"),GHo=o("data2vec-audio"),OHo=o(" \u2014 "),VV=a("a"),VHo=o("Data2VecAudioForCTC"),XHo=o(" (Data2VecAudio model)"),zHo=l(),hT=a("li"),iue=a("strong"),QHo=o("hubert"),WHo=o(" \u2014 "),XV=a("a"),HHo=o("HubertForCTC"),UHo=o(" (Hubert model)"),JHo=l(),uT=a("li"),due=a("strong"),YHo=o("sew"),KHo=o(" \u2014 "),zV=a("a"),ZHo=o("SEWForCTC"),eUo=o(" (SEW model)"),oUo=l(),pT=a("li"),cue=a("strong"),rUo=o("sew-d"),tUo=o(" \u2014 "),QV=a("a"),aUo=o("SEWDForCTC"),nUo=o(" (SEW-D model)"),sUo=l(),_T=a("li"),mue=a("strong"),lUo=o("unispeech"),iUo=o(" \u2014 "),WV=a("a"),dUo=o("UniSpeechForCTC"),cUo=o(" (UniSpeech model)"),mUo=l(),bT=a("li"),fue=a("strong"),fUo=o("unispeech-sat"),gUo=o(" \u2014 "),HV=a("a"),hUo=o("UniSpeechSatForCTC"),uUo=o(" (UniSpeechSat model)"),pUo=l(),FT=a("li"),gue=a("strong"),_Uo=o("wav2vec2"),bUo=o(" \u2014 "),UV=a("a"),FUo=o("Wav2Vec2ForCTC"),vUo=o(" (Wav2Vec2 model)"),TUo=l(),vT=a("li"),hue=a("strong"),MUo=o("wavlm"),EUo=o(" \u2014 "),JV=a("a"),CUo=o("WavLMForCTC"),wUo=o(" (WavLM model)"),AUo=l(),TT=a("p"),yUo=o("The model is set in evaluation mode by default using "),uue=a("code"),LUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),$Uo=o("model.train()"),kUo=l(),v(MT.$$.fragment),HPe=l(),ud=a("h2"),ET=a("a"),_ue=a("span"),v(jL.$$.fragment),SUo=l(),bue=a("span"),RUo=o("AutoModelForSpeechSeq2Seq"),UPe=l(),Xo=a("div"),v(DL.$$.fragment),BUo=l(),pd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YV=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),KV=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),GL=a("p"),GUo=o("This class cannot be instantiated directly using "),Fue=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),bt=a("div"),v(OL.$$.fragment),zUo=l(),vue=a("p"),QUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WUo=l(),_d=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),v(CT.$$.fragment),eJo=l(),mo=a("div"),v(VL.$$.fragment),oJo=l(),Mue=a("p"),rJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tJo=l(),Va=a("p"),aJo=o("The model class to instantiate is selected based on the "),Eue=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),mJo=l(),XL=a("ul"),wT=a("li"),Aue=a("strong"),fJo=o("speech-encoder-decoder"),gJo=o(" \u2014 "),eX=a("a"),hJo=o("SpeechEncoderDecoderModel"),uJo=o(" (Speech Encoder decoder model)"),pJo=l(),AT=a("li"),yue=a("strong"),_Jo=o("speech_to_text"),bJo=o(" \u2014 "),oX=a("a"),FJo=o("Speech2TextForConditionalGeneration"),vJo=o(" (Speech2Text model)"),TJo=l(),yT=a("p"),MJo=o("The model is set in evaluation mode by default using "),Lue=a("code"),EJo=o("model.eval()"),CJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),wJo=o("model.train()"),AJo=l(),v(LT.$$.fragment),JPe=l(),bd=a("h2"),xT=a("a"),$ue=a("span"),v(zL.$$.fragment),yJo=l(),kue=a("span"),LJo=o("AutoModelForAudioXVector"),YPe=l(),zo=a("div"),v(QL.$$.fragment),xJo=l(),Fd=a("p"),$Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rX=a("a"),kJo=o("from_pretrained()"),SJo=o(" class method or the "),tX=a("a"),RJo=o("from_config()"),BJo=o(` class
method.`),PJo=l(),WL=a("p"),IJo=o("This class cannot be instantiated directly using "),Sue=a("code"),qJo=o("__init__()"),NJo=o(" (throws an error)."),jJo=l(),Ft=a("div"),v(HL.$$.fragment),DJo=l(),Rue=a("p"),GJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OJo=l(),vd=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),XJo=o("not"),zJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),QJo=o("from_pretrained()"),WJo=o(" to load the model weights."),HJo=l(),v($T.$$.fragment),UJo=l(),fo=a("div"),v(UL.$$.fragment),JJo=l(),Pue=a("p"),YJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KJo=l(),Xa=a("p"),ZJo=o("The model class to instantiate is selected based on the "),Iue=a("code"),eYo=o("model_type"),oYo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),rYo=o("pretrained_model_name_or_path"),tYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(":"),sYo=l(),za=a("ul"),kT=a("li"),jue=a("strong"),lYo=o("data2vec-audio"),iYo=o(" \u2014 "),nX=a("a"),dYo=o("Data2VecAudioForXVector"),cYo=o(" (Data2VecAudio model)"),mYo=l(),ST=a("li"),Due=a("strong"),fYo=o("unispeech-sat"),gYo=o(" \u2014 "),sX=a("a"),hYo=o("UniSpeechSatForXVector"),uYo=o(" (UniSpeechSat model)"),pYo=l(),RT=a("li"),Gue=a("strong"),_Yo=o("wav2vec2"),bYo=o(" \u2014 "),lX=a("a"),FYo=o("Wav2Vec2ForXVector"),vYo=o(" (Wav2Vec2 model)"),TYo=l(),BT=a("li"),Oue=a("strong"),MYo=o("wavlm"),EYo=o(" \u2014 "),iX=a("a"),CYo=o("WavLMForXVector"),wYo=o(" (WavLM model)"),AYo=l(),PT=a("p"),yYo=o("The model is set in evaluation mode by default using "),Vue=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),$Yo=o("model.train()"),kYo=l(),v(IT.$$.fragment),KPe=l(),Td=a("h2"),qT=a("a"),zue=a("span"),v(JL.$$.fragment),SYo=l(),Que=a("span"),RYo=o("AutoModelForMaskedImageModeling"),ZPe=l(),Qo=a("div"),v(YL.$$.fragment),BYo=l(),Md=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dX=a("a"),IYo=o("from_pretrained()"),qYo=o(" class method or the "),cX=a("a"),NYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),KL=a("p"),GYo=o("This class cannot be instantiated directly using "),Wue=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),vt=a("div"),v(ZL.$$.fragment),zYo=l(),Hue=a("p"),QYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WYo=l(),Ed=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),v(NT.$$.fragment),eKo=l(),go=a("div"),v(e8.$$.fragment),oKo=l(),Jue=a("p"),rKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tKo=l(),Qa=a("p"),aKo=o("The model class to instantiate is selected based on the "),Yue=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),mKo=l(),Cd=a("ul"),jT=a("li"),epe=a("strong"),fKo=o("deit"),gKo=o(" \u2014 "),fX=a("a"),hKo=o("DeiTForMaskedImageModeling"),uKo=o(" (DeiT model)"),pKo=l(),DT=a("li"),ope=a("strong"),_Ko=o("swin"),bKo=o(" \u2014 "),gX=a("a"),FKo=o("SwinForMaskedImageModeling"),vKo=o(" (Swin model)"),TKo=l(),GT=a("li"),rpe=a("strong"),MKo=o("vit"),EKo=o(" \u2014 "),hX=a("a"),CKo=o("ViTForMaskedImageModeling"),wKo=o(" (ViT model)"),AKo=l(),OT=a("p"),yKo=o("The model is set in evaluation mode by default using "),tpe=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),$Ko=o("model.train()"),kKo=l(),v(VT.$$.fragment),eIe=l(),wd=a("h2"),XT=a("a"),npe=a("span"),v(o8.$$.fragment),SKo=l(),spe=a("span"),RKo=o("AutoModelForObjectDetection"),oIe=l(),Wo=a("div"),v(r8.$$.fragment),BKo=l(),Ad=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uX=a("a"),IKo=o("from_pretrained()"),qKo=o(" class method or the "),pX=a("a"),NKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),t8=a("p"),GKo=o("This class cannot be instantiated directly using "),lpe=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),Tt=a("div"),v(a8.$$.fragment),zKo=l(),ipe=a("p"),QKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),WKo=l(),yd=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),v(zT.$$.fragment),eZo=l(),ho=a("div"),v(n8.$$.fragment),oZo=l(),cpe=a("p"),rZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tZo=l(),Wa=a("p"),aZo=o("The model class to instantiate is selected based on the "),mpe=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),mZo=l(),s8=a("ul"),QT=a("li"),hpe=a("strong"),fZo=o("detr"),gZo=o(" \u2014 "),bX=a("a"),hZo=o("DetrForObjectDetection"),uZo=o(" (DETR model)"),pZo=l(),WT=a("li"),upe=a("strong"),_Zo=o("yolos"),bZo=o(" \u2014 "),FX=a("a"),FZo=o("YolosForObjectDetection"),vZo=o(" (YOLOS model)"),TZo=l(),HT=a("p"),MZo=o("The model is set in evaluation mode by default using "),ppe=a("code"),EZo=o("model.eval()"),CZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),wZo=o("model.train()"),AZo=l(),v(UT.$$.fragment),rIe=l(),Ld=a("h2"),JT=a("a"),bpe=a("span"),v(l8.$$.fragment),yZo=l(),Fpe=a("span"),LZo=o("AutoModelForImageSegmentation"),tIe=l(),Ho=a("div"),v(i8.$$.fragment),xZo=l(),xd=a("p"),$Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vX=a("a"),kZo=o("from_pretrained()"),SZo=o(" class method or the "),TX=a("a"),RZo=o("from_config()"),BZo=o(` class
method.`),PZo=l(),d8=a("p"),IZo=o("This class cannot be instantiated directly using "),vpe=a("code"),qZo=o("__init__()"),NZo=o(" (throws an error)."),jZo=l(),Mt=a("div"),v(c8.$$.fragment),DZo=l(),Tpe=a("p"),GZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OZo=l(),$d=a("p"),VZo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),XZo=o("not"),zZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),QZo=o("from_pretrained()"),WZo=o(" to load the model weights."),HZo=l(),v(YT.$$.fragment),UZo=l(),uo=a("div"),v(m8.$$.fragment),JZo=l(),Epe=a("p"),YZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),KZo=l(),Ha=a("p"),ZZo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),eer=o("model_type"),oer=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(":"),ser=l(),ype=a("ul"),KT=a("li"),Lpe=a("strong"),ler=o("detr"),ier=o(" \u2014 "),EX=a("a"),der=o("DetrForSegmentation"),cer=o(" (DETR model)"),mer=l(),ZT=a("p"),fer=o("The model is set in evaluation mode by default using "),xpe=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),uer=o("model.train()"),per=l(),v(eM.$$.fragment),aIe=l(),kd=a("h2"),oM=a("a"),kpe=a("span"),v(f8.$$.fragment),_er=l(),Spe=a("span"),ber=o("AutoModelForSemanticSegmentation"),nIe=l(),Uo=a("div"),v(g8.$$.fragment),Fer=l(),Sd=a("p"),ver=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CX=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),wX=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),h8=a("p"),Aer=o("This class cannot be instantiated directly using "),Rpe=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),Et=a("div"),v(u8.$$.fragment),$er=l(),Bpe=a("p"),ker=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ser=l(),Rd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),Ber=o("not"),Per=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),v(rM.$$.fragment),jer=l(),po=a("div"),v(p8.$$.fragment),Der=l(),Ipe=a("p"),Ger=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Oer=l(),Ua=a("p"),Ver=o("The model class to instantiate is selected based on the "),qpe=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),Qer=o("pretrained_model_name_or_path"),Wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Ja=a("ul"),tM=a("li"),Dpe=a("strong"),Yer=o("beit"),Ker=o(" \u2014 "),yX=a("a"),Zer=o("BeitForSemanticSegmentation"),eor=o(" (BEiT model)"),oor=l(),aM=a("li"),Gpe=a("strong"),ror=o("data2vec-vision"),tor=o(" \u2014 "),LX=a("a"),aor=o("Data2VecVisionForSemanticSegmentation"),nor=o(" (Data2VecVision model)"),sor=l(),nM=a("li"),Ope=a("strong"),lor=o("dpt"),ior=o(" \u2014 "),xX=a("a"),dor=o("DPTForSemanticSegmentation"),cor=o(" (DPT model)"),mor=l(),sM=a("li"),Vpe=a("strong"),gor=o("segformer"),hor=o(" \u2014 "),$X=a("a"),uor=o("SegformerForSemanticSegmentation"),por=o(" (SegFormer model)"),_or=l(),lM=a("p"),bor=o("The model is set in evaluation mode by default using "),Xpe=a("code"),For=o("model.eval()"),vor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),Tor=o("model.train()"),Mor=l(),v(iM.$$.fragment),sIe=l(),Bd=a("h2"),dM=a("a"),Qpe=a("span"),v(_8.$$.fragment),Eor=l(),Wpe=a("span"),Cor=o("AutoModelForInstanceSegmentation"),lIe=l(),Jo=a("div"),v(b8.$$.fragment),wor=l(),Pd=a("p"),Aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kX=a("a"),yor=o("from_pretrained()"),Lor=o(" class method or the "),SX=a("a"),xor=o("from_config()"),$or=o(` class
method.`),kor=l(),F8=a("p"),Sor=o("This class cannot be instantiated directly using "),Hpe=a("code"),Ror=o("__init__()"),Bor=o(" (throws an error)."),Por=l(),Ct=a("div"),v(v8.$$.fragment),Ior=l(),Upe=a("p"),qor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nor=l(),Id=a("p"),jor=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),Dor=o("not"),Gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),Oor=o("from_pretrained()"),Vor=o(" to load the model weights."),Xor=l(),v(cM.$$.fragment),zor=l(),_o=a("div"),v(T8.$$.fragment),Qor=l(),Ype=a("p"),Wor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hor=l(),Ya=a("p"),Uor=o("The model class to instantiate is selected based on the "),Kpe=a("code"),Jor=o("model_type"),Yor=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),err=o("pretrained_model_name_or_path"),orr=o(":"),rrr=l(),o_e=a("ul"),mM=a("li"),r_e=a("strong"),trr=o("maskformer"),arr=o(" \u2014 "),BX=a("a"),nrr=o("MaskFormerForInstanceSegmentation"),srr=o(" (MaskFormer model)"),lrr=l(),fM=a("p"),irr=o("The model is set in evaluation mode by default using "),t_e=a("code"),drr=o("model.eval()"),crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),mrr=o("model.train()"),frr=l(),v(gM.$$.fragment),iIe=l(),qd=a("h2"),hM=a("a"),n_e=a("span"),v(M8.$$.fragment),grr=l(),s_e=a("span"),hrr=o("TFAutoModel"),dIe=l(),Yo=a("div"),v(E8.$$.fragment),urr=l(),Nd=a("p"),prr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PX=a("a"),_rr=o("from_pretrained()"),brr=o(" class method or the "),IX=a("a"),Frr=o("from_config()"),vrr=o(` class
method.`),Trr=l(),C8=a("p"),Mrr=o("This class cannot be instantiated directly using "),l_e=a("code"),Err=o("__init__()"),Crr=o(" (throws an error)."),wrr=l(),wt=a("div"),v(w8.$$.fragment),Arr=l(),i_e=a("p"),yrr=o("Instantiates one of the base model classes of the library from a configuration."),Lrr=l(),jd=a("p"),xrr=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),$rr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Brr=l(),v(uM.$$.fragment),Prr=l(),wr=a("div"),v(A8.$$.fragment),Irr=l(),c_e=a("p"),qrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nrr=l(),Ka=a("p"),jrr=o("The model class to instantiate is selected based on the "),m_e=a("code"),Drr=o("model_type"),Grr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Orr=o("pretrained_model_name_or_path"),Vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Xrr=o("pretrained_model_name_or_path"),zrr=o(":"),Qrr=l(),j=a("ul"),pM=a("li"),h_e=a("strong"),Wrr=o("albert"),Hrr=o(" \u2014 "),NX=a("a"),Urr=o("TFAlbertModel"),Jrr=o(" (ALBERT model)"),Yrr=l(),_M=a("li"),u_e=a("strong"),Krr=o("bart"),Zrr=o(" \u2014 "),jX=a("a"),etr=o("TFBartModel"),otr=o(" (BART model)"),rtr=l(),bM=a("li"),p_e=a("strong"),ttr=o("bert"),atr=o(" \u2014 "),DX=a("a"),ntr=o("TFBertModel"),str=o(" (BERT model)"),ltr=l(),FM=a("li"),__e=a("strong"),itr=o("blenderbot"),dtr=o(" \u2014 "),GX=a("a"),ctr=o("TFBlenderbotModel"),mtr=o(" (Blenderbot model)"),ftr=l(),vM=a("li"),b_e=a("strong"),gtr=o("blenderbot-small"),htr=o(" \u2014 "),OX=a("a"),utr=o("TFBlenderbotSmallModel"),ptr=o(" (BlenderbotSmall model)"),_tr=l(),TM=a("li"),F_e=a("strong"),btr=o("camembert"),Ftr=o(" \u2014 "),VX=a("a"),vtr=o("TFCamembertModel"),Ttr=o(" (CamemBERT model)"),Mtr=l(),MM=a("li"),v_e=a("strong"),Etr=o("clip"),Ctr=o(" \u2014 "),XX=a("a"),wtr=o("TFCLIPModel"),Atr=o(" (CLIP model)"),ytr=l(),EM=a("li"),T_e=a("strong"),Ltr=o("convbert"),xtr=o(" \u2014 "),zX=a("a"),$tr=o("TFConvBertModel"),ktr=o(" (ConvBERT model)"),Str=l(),CM=a("li"),M_e=a("strong"),Rtr=o("convnext"),Btr=o(" \u2014 "),QX=a("a"),Ptr=o("TFConvNextModel"),Itr=o(" (ConvNext model)"),qtr=l(),wM=a("li"),E_e=a("strong"),Ntr=o("ctrl"),jtr=o(" \u2014 "),WX=a("a"),Dtr=o("TFCTRLModel"),Gtr=o(" (CTRL model)"),Otr=l(),AM=a("li"),C_e=a("strong"),Vtr=o("data2vec-vision"),Xtr=o(" \u2014 "),HX=a("a"),ztr=o("TFData2VecVisionModel"),Qtr=o(" (Data2VecVision model)"),Wtr=l(),yM=a("li"),w_e=a("strong"),Htr=o("deberta"),Utr=o(" \u2014 "),UX=a("a"),Jtr=o("TFDebertaModel"),Ytr=o(" (DeBERTa model)"),Ktr=l(),LM=a("li"),A_e=a("strong"),Ztr=o("deberta-v2"),ear=o(" \u2014 "),JX=a("a"),oar=o("TFDebertaV2Model"),rar=o(" (DeBERTa-v2 model)"),tar=l(),xM=a("li"),y_e=a("strong"),aar=o("distilbert"),nar=o(" \u2014 "),YX=a("a"),sar=o("TFDistilBertModel"),lar=o(" (DistilBERT model)"),iar=l(),$M=a("li"),L_e=a("strong"),dar=o("dpr"),car=o(" \u2014 "),KX=a("a"),mar=o("TFDPRQuestionEncoder"),far=o(" (DPR model)"),gar=l(),kM=a("li"),x_e=a("strong"),har=o("electra"),uar=o(" \u2014 "),ZX=a("a"),par=o("TFElectraModel"),_ar=o(" (ELECTRA model)"),bar=l(),SM=a("li"),$_e=a("strong"),Far=o("flaubert"),Tar=o(" \u2014 "),ez=a("a"),Mar=o("TFFlaubertModel"),Ear=o(" (FlauBERT model)"),Car=l(),Bs=a("li"),k_e=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),oz=a("a"),yar=o("TFFunnelModel"),Lar=o(" or "),rz=a("a"),xar=o("TFFunnelBaseModel"),$ar=o(" (Funnel Transformer model)"),kar=l(),RM=a("li"),S_e=a("strong"),Sar=o("gpt2"),Rar=o(" \u2014 "),tz=a("a"),Bar=o("TFGPT2Model"),Par=o(" (OpenAI GPT-2 model)"),Iar=l(),BM=a("li"),R_e=a("strong"),qar=o("gptj"),Nar=o(" \u2014 "),az=a("a"),jar=o("TFGPTJModel"),Dar=o(" (GPT-J model)"),Gar=l(),PM=a("li"),B_e=a("strong"),Oar=o("hubert"),Var=o(" \u2014 "),nz=a("a"),Xar=o("TFHubertModel"),zar=o(" (Hubert model)"),Qar=l(),IM=a("li"),P_e=a("strong"),War=o("layoutlm"),Har=o(" \u2014 "),sz=a("a"),Uar=o("TFLayoutLMModel"),Jar=o(" (LayoutLM model)"),Yar=l(),qM=a("li"),I_e=a("strong"),Kar=o("led"),Zar=o(" \u2014 "),lz=a("a"),enr=o("TFLEDModel"),onr=o(" (LED model)"),rnr=l(),NM=a("li"),q_e=a("strong"),tnr=o("longformer"),anr=o(" \u2014 "),iz=a("a"),nnr=o("TFLongformerModel"),snr=o(" (Longformer model)"),lnr=l(),jM=a("li"),N_e=a("strong"),inr=o("lxmert"),dnr=o(" \u2014 "),dz=a("a"),cnr=o("TFLxmertModel"),mnr=o(" (LXMERT model)"),fnr=l(),DM=a("li"),j_e=a("strong"),gnr=o("marian"),hnr=o(" \u2014 "),cz=a("a"),unr=o("TFMarianModel"),pnr=o(" (Marian model)"),_nr=l(),GM=a("li"),D_e=a("strong"),bnr=o("mbart"),Fnr=o(" \u2014 "),mz=a("a"),vnr=o("TFMBartModel"),Tnr=o(" (mBART model)"),Mnr=l(),OM=a("li"),G_e=a("strong"),Enr=o("mobilebert"),Cnr=o(" \u2014 "),fz=a("a"),wnr=o("TFMobileBertModel"),Anr=o(" (MobileBERT model)"),ynr=l(),VM=a("li"),O_e=a("strong"),Lnr=o("mpnet"),xnr=o(" \u2014 "),gz=a("a"),$nr=o("TFMPNetModel"),knr=o(" (MPNet model)"),Snr=l(),XM=a("li"),V_e=a("strong"),Rnr=o("mt5"),Bnr=o(" \u2014 "),hz=a("a"),Pnr=o("TFMT5Model"),Inr=o(" (mT5 model)"),qnr=l(),zM=a("li"),X_e=a("strong"),Nnr=o("openai-gpt"),jnr=o(" \u2014 "),uz=a("a"),Dnr=o("TFOpenAIGPTModel"),Gnr=o(" (OpenAI GPT model)"),Onr=l(),QM=a("li"),z_e=a("strong"),Vnr=o("pegasus"),Xnr=o(" \u2014 "),pz=a("a"),znr=o("TFPegasusModel"),Qnr=o(" (Pegasus model)"),Wnr=l(),WM=a("li"),Q_e=a("strong"),Hnr=o("rembert"),Unr=o(" \u2014 "),_z=a("a"),Jnr=o("TFRemBertModel"),Ynr=o(" (RemBERT model)"),Knr=l(),HM=a("li"),W_e=a("strong"),Znr=o("roberta"),esr=o(" \u2014 "),bz=a("a"),osr=o("TFRobertaModel"),rsr=o(" (RoBERTa model)"),tsr=l(),UM=a("li"),H_e=a("strong"),asr=o("roformer"),nsr=o(" \u2014 "),Fz=a("a"),ssr=o("TFRoFormerModel"),lsr=o(" (RoFormer model)"),isr=l(),JM=a("li"),U_e=a("strong"),dsr=o("speech_to_text"),csr=o(" \u2014 "),vz=a("a"),msr=o("TFSpeech2TextModel"),fsr=o(" (Speech2Text model)"),gsr=l(),YM=a("li"),J_e=a("strong"),hsr=o("t5"),usr=o(" \u2014 "),Tz=a("a"),psr=o("TFT5Model"),_sr=o(" (T5 model)"),bsr=l(),KM=a("li"),Y_e=a("strong"),Fsr=o("tapas"),vsr=o(" \u2014 "),Mz=a("a"),Tsr=o("TFTapasModel"),Msr=o(" (TAPAS model)"),Esr=l(),ZM=a("li"),K_e=a("strong"),Csr=o("transfo-xl"),wsr=o(" \u2014 "),Ez=a("a"),Asr=o("TFTransfoXLModel"),ysr=o(" (Transformer-XL model)"),Lsr=l(),e4=a("li"),Z_e=a("strong"),xsr=o("vit"),$sr=o(" \u2014 "),Cz=a("a"),ksr=o("TFViTModel"),Ssr=o(" (ViT model)"),Rsr=l(),o4=a("li"),ebe=a("strong"),Bsr=o("vit_mae"),Psr=o(" \u2014 "),wz=a("a"),Isr=o("TFViTMAEModel"),qsr=o(" (ViTMAE model)"),Nsr=l(),r4=a("li"),obe=a("strong"),jsr=o("wav2vec2"),Dsr=o(" \u2014 "),Az=a("a"),Gsr=o("TFWav2Vec2Model"),Osr=o(" (Wav2Vec2 model)"),Vsr=l(),t4=a("li"),rbe=a("strong"),Xsr=o("xlm"),zsr=o(" \u2014 "),yz=a("a"),Qsr=o("TFXLMModel"),Wsr=o(" (XLM model)"),Hsr=l(),a4=a("li"),tbe=a("strong"),Usr=o("xlm-roberta"),Jsr=o(" \u2014 "),Lz=a("a"),Ysr=o("TFXLMRobertaModel"),Ksr=o(" (XLM-RoBERTa model)"),Zsr=l(),n4=a("li"),abe=a("strong"),elr=o("xlnet"),olr=o(" \u2014 "),xz=a("a"),rlr=o("TFXLNetModel"),tlr=o(" (XLNet model)"),alr=l(),v(s4.$$.fragment),cIe=l(),Dd=a("h2"),l4=a("a"),nbe=a("span"),v(y8.$$.fragment),nlr=l(),sbe=a("span"),slr=o("TFAutoModelForPreTraining"),mIe=l(),Ko=a("div"),v(L8.$$.fragment),llr=l(),Gd=a("p"),ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$z=a("a"),dlr=o("from_pretrained()"),clr=o(" class method or the "),kz=a("a"),mlr=o("from_config()"),flr=o(` class
method.`),glr=l(),x8=a("p"),hlr=o("This class cannot be instantiated directly using "),lbe=a("code"),ulr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),At=a("div"),v($8.$$.fragment),blr=l(),ibe=a("p"),Flr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vlr=l(),Od=a("p"),Tlr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),Mlr=o("not"),Elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),Clr=o("from_pretrained()"),wlr=o(" to load the model weights."),Alr=l(),v(i4.$$.fragment),ylr=l(),Ar=a("div"),v(k8.$$.fragment),Llr=l(),cbe=a("p"),xlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$lr=l(),Za=a("p"),klr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Slr=o("model_type"),Rlr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Blr=o("pretrained_model_name_or_path"),Plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),Ilr=o("pretrained_model_name_or_path"),qlr=o(":"),Nlr=l(),ne=a("ul"),d4=a("li"),hbe=a("strong"),jlr=o("albert"),Dlr=o(" \u2014 "),Rz=a("a"),Glr=o("TFAlbertForPreTraining"),Olr=o(" (ALBERT model)"),Vlr=l(),c4=a("li"),ube=a("strong"),Xlr=o("bart"),zlr=o(" \u2014 "),Bz=a("a"),Qlr=o("TFBartForConditionalGeneration"),Wlr=o(" (BART model)"),Hlr=l(),m4=a("li"),pbe=a("strong"),Ulr=o("bert"),Jlr=o(" \u2014 "),Pz=a("a"),Ylr=o("TFBertForPreTraining"),Klr=o(" (BERT model)"),Zlr=l(),f4=a("li"),_be=a("strong"),eir=o("camembert"),oir=o(" \u2014 "),Iz=a("a"),rir=o("TFCamembertForMaskedLM"),tir=o(" (CamemBERT model)"),air=l(),g4=a("li"),bbe=a("strong"),nir=o("ctrl"),sir=o(" \u2014 "),qz=a("a"),lir=o("TFCTRLLMHeadModel"),iir=o(" (CTRL model)"),dir=l(),h4=a("li"),Fbe=a("strong"),cir=o("distilbert"),mir=o(" \u2014 "),Nz=a("a"),fir=o("TFDistilBertForMaskedLM"),gir=o(" (DistilBERT model)"),hir=l(),u4=a("li"),vbe=a("strong"),uir=o("electra"),pir=o(" \u2014 "),jz=a("a"),_ir=o("TFElectraForPreTraining"),bir=o(" (ELECTRA model)"),Fir=l(),p4=a("li"),Tbe=a("strong"),vir=o("flaubert"),Tir=o(" \u2014 "),Dz=a("a"),Mir=o("TFFlaubertWithLMHeadModel"),Eir=o(" (FlauBERT model)"),Cir=l(),_4=a("li"),Mbe=a("strong"),wir=o("funnel"),Air=o(" \u2014 "),Gz=a("a"),yir=o("TFFunnelForPreTraining"),Lir=o(" (Funnel Transformer model)"),xir=l(),b4=a("li"),Ebe=a("strong"),$ir=o("gpt2"),kir=o(" \u2014 "),Oz=a("a"),Sir=o("TFGPT2LMHeadModel"),Rir=o(" (OpenAI GPT-2 model)"),Bir=l(),F4=a("li"),Cbe=a("strong"),Pir=o("layoutlm"),Iir=o(" \u2014 "),Vz=a("a"),qir=o("TFLayoutLMForMaskedLM"),Nir=o(" (LayoutLM model)"),jir=l(),v4=a("li"),wbe=a("strong"),Dir=o("lxmert"),Gir=o(" \u2014 "),Xz=a("a"),Oir=o("TFLxmertForPreTraining"),Vir=o(" (LXMERT model)"),Xir=l(),T4=a("li"),Abe=a("strong"),zir=o("mobilebert"),Qir=o(" \u2014 "),zz=a("a"),Wir=o("TFMobileBertForPreTraining"),Hir=o(" (MobileBERT model)"),Uir=l(),M4=a("li"),ybe=a("strong"),Jir=o("mpnet"),Yir=o(" \u2014 "),Qz=a("a"),Kir=o("TFMPNetForMaskedLM"),Zir=o(" (MPNet model)"),edr=l(),E4=a("li"),Lbe=a("strong"),odr=o("openai-gpt"),rdr=o(" \u2014 "),Wz=a("a"),tdr=o("TFOpenAIGPTLMHeadModel"),adr=o(" (OpenAI GPT model)"),ndr=l(),C4=a("li"),xbe=a("strong"),sdr=o("roberta"),ldr=o(" \u2014 "),Hz=a("a"),idr=o("TFRobertaForMaskedLM"),ddr=o(" (RoBERTa model)"),cdr=l(),w4=a("li"),$be=a("strong"),mdr=o("t5"),fdr=o(" \u2014 "),Uz=a("a"),gdr=o("TFT5ForConditionalGeneration"),hdr=o(" (T5 model)"),udr=l(),A4=a("li"),kbe=a("strong"),pdr=o("tapas"),_dr=o(" \u2014 "),Jz=a("a"),bdr=o("TFTapasForMaskedLM"),Fdr=o(" (TAPAS model)"),vdr=l(),y4=a("li"),Sbe=a("strong"),Tdr=o("transfo-xl"),Mdr=o(" \u2014 "),Yz=a("a"),Edr=o("TFTransfoXLLMHeadModel"),Cdr=o(" (Transformer-XL model)"),wdr=l(),L4=a("li"),Rbe=a("strong"),Adr=o("vit_mae"),ydr=o(" \u2014 "),Kz=a("a"),Ldr=o("TFViTMAEForPreTraining"),xdr=o(" (ViTMAE model)"),$dr=l(),x4=a("li"),Bbe=a("strong"),kdr=o("xlm"),Sdr=o(" \u2014 "),Zz=a("a"),Rdr=o("TFXLMWithLMHeadModel"),Bdr=o(" (XLM model)"),Pdr=l(),$4=a("li"),Pbe=a("strong"),Idr=o("xlm-roberta"),qdr=o(" \u2014 "),eQ=a("a"),Ndr=o("TFXLMRobertaForMaskedLM"),jdr=o(" (XLM-RoBERTa model)"),Ddr=l(),k4=a("li"),Ibe=a("strong"),Gdr=o("xlnet"),Odr=o(" \u2014 "),oQ=a("a"),Vdr=o("TFXLNetLMHeadModel"),Xdr=o(" (XLNet model)"),zdr=l(),v(S4.$$.fragment),fIe=l(),Vd=a("h2"),R4=a("a"),qbe=a("span"),v(S8.$$.fragment),Qdr=l(),Nbe=a("span"),Wdr=o("TFAutoModelForCausalLM"),gIe=l(),Zo=a("div"),v(R8.$$.fragment),Hdr=l(),Xd=a("p"),Udr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rQ=a("a"),Jdr=o("from_pretrained()"),Ydr=o(" class method or the "),tQ=a("a"),Kdr=o("from_config()"),Zdr=o(` class
method.`),ecr=l(),B8=a("p"),ocr=o("This class cannot be instantiated directly using "),jbe=a("code"),rcr=o("__init__()"),tcr=o(" (throws an error)."),acr=l(),yt=a("div"),v(P8.$$.fragment),ncr=l(),Dbe=a("p"),scr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lcr=l(),zd=a("p"),icr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),dcr=o("not"),ccr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),mcr=o("from_pretrained()"),fcr=o(" to load the model weights."),gcr=l(),v(B4.$$.fragment),hcr=l(),yr=a("div"),v(I8.$$.fragment),ucr=l(),Obe=a("p"),pcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_cr=l(),en=a("p"),bcr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),Fcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(":"),wcr=l(),Te=a("ul"),P4=a("li"),Qbe=a("strong"),Acr=o("bert"),ycr=o(" \u2014 "),nQ=a("a"),Lcr=o("TFBertLMHeadModel"),xcr=o(" (BERT model)"),$cr=l(),I4=a("li"),Wbe=a("strong"),kcr=o("camembert"),Scr=o(" \u2014 "),sQ=a("a"),Rcr=o("TFCamembertForCausalLM"),Bcr=o(" (CamemBERT model)"),Pcr=l(),q4=a("li"),Hbe=a("strong"),Icr=o("ctrl"),qcr=o(" \u2014 "),lQ=a("a"),Ncr=o("TFCTRLLMHeadModel"),jcr=o(" (CTRL model)"),Dcr=l(),N4=a("li"),Ube=a("strong"),Gcr=o("gpt2"),Ocr=o(" \u2014 "),iQ=a("a"),Vcr=o("TFGPT2LMHeadModel"),Xcr=o(" (OpenAI GPT-2 model)"),zcr=l(),j4=a("li"),Jbe=a("strong"),Qcr=o("gptj"),Wcr=o(" \u2014 "),dQ=a("a"),Hcr=o("TFGPTJForCausalLM"),Ucr=o(" (GPT-J model)"),Jcr=l(),D4=a("li"),Ybe=a("strong"),Ycr=o("openai-gpt"),Kcr=o(" \u2014 "),cQ=a("a"),Zcr=o("TFOpenAIGPTLMHeadModel"),emr=o(" (OpenAI GPT model)"),omr=l(),G4=a("li"),Kbe=a("strong"),rmr=o("rembert"),tmr=o(" \u2014 "),mQ=a("a"),amr=o("TFRemBertForCausalLM"),nmr=o(" (RemBERT model)"),smr=l(),O4=a("li"),Zbe=a("strong"),lmr=o("roberta"),imr=o(" \u2014 "),fQ=a("a"),dmr=o("TFRobertaForCausalLM"),cmr=o(" (RoBERTa model)"),mmr=l(),V4=a("li"),e2e=a("strong"),fmr=o("roformer"),gmr=o(" \u2014 "),gQ=a("a"),hmr=o("TFRoFormerForCausalLM"),umr=o(" (RoFormer model)"),pmr=l(),X4=a("li"),o2e=a("strong"),_mr=o("transfo-xl"),bmr=o(" \u2014 "),hQ=a("a"),Fmr=o("TFTransfoXLLMHeadModel"),vmr=o(" (Transformer-XL model)"),Tmr=l(),z4=a("li"),r2e=a("strong"),Mmr=o("xlm"),Emr=o(" \u2014 "),uQ=a("a"),Cmr=o("TFXLMWithLMHeadModel"),wmr=o(" (XLM model)"),Amr=l(),Q4=a("li"),t2e=a("strong"),ymr=o("xlnet"),Lmr=o(" \u2014 "),pQ=a("a"),xmr=o("TFXLNetLMHeadModel"),$mr=o(" (XLNet model)"),kmr=l(),v(W4.$$.fragment),hIe=l(),Qd=a("h2"),H4=a("a"),a2e=a("span"),v(q8.$$.fragment),Smr=l(),n2e=a("span"),Rmr=o("TFAutoModelForImageClassification"),uIe=l(),er=a("div"),v(N8.$$.fragment),Bmr=l(),Wd=a("p"),Pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=a("a"),Imr=o("from_pretrained()"),qmr=o(" class method or the "),bQ=a("a"),Nmr=o("from_config()"),jmr=o(` class
method.`),Dmr=l(),j8=a("p"),Gmr=o("This class cannot be instantiated directly using "),s2e=a("code"),Omr=o("__init__()"),Vmr=o(" (throws an error)."),Xmr=l(),Lt=a("div"),v(D8.$$.fragment),zmr=l(),l2e=a("p"),Qmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wmr=l(),Hd=a("p"),Hmr=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),Umr=o("not"),Jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Ymr=o("from_pretrained()"),Kmr=o(" to load the model weights."),Zmr=l(),v(U4.$$.fragment),efr=l(),Lr=a("div"),v(G8.$$.fragment),ofr=l(),d2e=a("p"),rfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tfr=l(),on=a("p"),afr=o("The model class to instantiate is selected based on the "),c2e=a("code"),nfr=o("model_type"),sfr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),dfr=o("pretrained_model_name_or_path"),cfr=o(":"),mfr=l(),Ud=a("ul"),J4=a("li"),g2e=a("strong"),ffr=o("convnext"),gfr=o(" \u2014 "),vQ=a("a"),hfr=o("TFConvNextForImageClassification"),ufr=o(" (ConvNext model)"),pfr=l(),Y4=a("li"),h2e=a("strong"),_fr=o("data2vec-vision"),bfr=o(" \u2014 "),TQ=a("a"),Ffr=o("TFData2VecVisionForImageClassification"),vfr=o(" (Data2VecVision model)"),Tfr=l(),K4=a("li"),u2e=a("strong"),Mfr=o("vit"),Efr=o(" \u2014 "),MQ=a("a"),Cfr=o("TFViTForImageClassification"),wfr=o(" (ViT model)"),Afr=l(),v(Z4.$$.fragment),pIe=l(),Jd=a("h2"),eE=a("a"),p2e=a("span"),v(O8.$$.fragment),yfr=l(),_2e=a("span"),Lfr=o("TFAutoModelForMaskedLM"),_Ie=l(),or=a("div"),v(V8.$$.fragment),xfr=l(),Yd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),CQ=a("a"),Rfr=o("from_config()"),Bfr=o(` class
method.`),Pfr=l(),X8=a("p"),Ifr=o("This class cannot be instantiated directly using "),b2e=a("code"),qfr=o("__init__()"),Nfr=o(" (throws an error)."),jfr=l(),xt=a("div"),v(z8.$$.fragment),Dfr=l(),F2e=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ofr=l(),Kd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Qfr=o("from_pretrained()"),Wfr=o(" to load the model weights."),Hfr=l(),v(oE.$$.fragment),Ufr=l(),xr=a("div"),v(Q8.$$.fragment),Jfr=l(),T2e=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kfr=l(),rn=a("p"),Zfr=o("The model class to instantiate is selected based on the "),M2e=a("code"),egr=o("model_type"),ogr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(":"),sgr=l(),ie=a("ul"),rE=a("li"),w2e=a("strong"),lgr=o("albert"),igr=o(" \u2014 "),AQ=a("a"),dgr=o("TFAlbertForMaskedLM"),cgr=o(" (ALBERT model)"),mgr=l(),tE=a("li"),A2e=a("strong"),fgr=o("bert"),ggr=o(" \u2014 "),yQ=a("a"),hgr=o("TFBertForMaskedLM"),ugr=o(" (BERT model)"),pgr=l(),aE=a("li"),y2e=a("strong"),_gr=o("camembert"),bgr=o(" \u2014 "),LQ=a("a"),Fgr=o("TFCamembertForMaskedLM"),vgr=o(" (CamemBERT model)"),Tgr=l(),nE=a("li"),L2e=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),xQ=a("a"),Cgr=o("TFConvBertForMaskedLM"),wgr=o(" (ConvBERT model)"),Agr=l(),sE=a("li"),x2e=a("strong"),ygr=o("deberta"),Lgr=o(" \u2014 "),$Q=a("a"),xgr=o("TFDebertaForMaskedLM"),$gr=o(" (DeBERTa model)"),kgr=l(),lE=a("li"),$2e=a("strong"),Sgr=o("deberta-v2"),Rgr=o(" \u2014 "),kQ=a("a"),Bgr=o("TFDebertaV2ForMaskedLM"),Pgr=o(" (DeBERTa-v2 model)"),Igr=l(),iE=a("li"),k2e=a("strong"),qgr=o("distilbert"),Ngr=o(" \u2014 "),SQ=a("a"),jgr=o("TFDistilBertForMaskedLM"),Dgr=o(" (DistilBERT model)"),Ggr=l(),dE=a("li"),S2e=a("strong"),Ogr=o("electra"),Vgr=o(" \u2014 "),RQ=a("a"),Xgr=o("TFElectraForMaskedLM"),zgr=o(" (ELECTRA model)"),Qgr=l(),cE=a("li"),R2e=a("strong"),Wgr=o("flaubert"),Hgr=o(" \u2014 "),BQ=a("a"),Ugr=o("TFFlaubertWithLMHeadModel"),Jgr=o(" (FlauBERT model)"),Ygr=l(),mE=a("li"),B2e=a("strong"),Kgr=o("funnel"),Zgr=o(" \u2014 "),PQ=a("a"),ehr=o("TFFunnelForMaskedLM"),ohr=o(" (Funnel Transformer model)"),rhr=l(),fE=a("li"),P2e=a("strong"),thr=o("layoutlm"),ahr=o(" \u2014 "),IQ=a("a"),nhr=o("TFLayoutLMForMaskedLM"),shr=o(" (LayoutLM model)"),lhr=l(),gE=a("li"),I2e=a("strong"),ihr=o("longformer"),dhr=o(" \u2014 "),qQ=a("a"),chr=o("TFLongformerForMaskedLM"),mhr=o(" (Longformer model)"),fhr=l(),hE=a("li"),q2e=a("strong"),ghr=o("mobilebert"),hhr=o(" \u2014 "),NQ=a("a"),uhr=o("TFMobileBertForMaskedLM"),phr=o(" (MobileBERT model)"),_hr=l(),uE=a("li"),N2e=a("strong"),bhr=o("mpnet"),Fhr=o(" \u2014 "),jQ=a("a"),vhr=o("TFMPNetForMaskedLM"),Thr=o(" (MPNet model)"),Mhr=l(),pE=a("li"),j2e=a("strong"),Ehr=o("rembert"),Chr=o(" \u2014 "),DQ=a("a"),whr=o("TFRemBertForMaskedLM"),Ahr=o(" (RemBERT model)"),yhr=l(),_E=a("li"),D2e=a("strong"),Lhr=o("roberta"),xhr=o(" \u2014 "),GQ=a("a"),$hr=o("TFRobertaForMaskedLM"),khr=o(" (RoBERTa model)"),Shr=l(),bE=a("li"),G2e=a("strong"),Rhr=o("roformer"),Bhr=o(" \u2014 "),OQ=a("a"),Phr=o("TFRoFormerForMaskedLM"),Ihr=o(" (RoFormer model)"),qhr=l(),FE=a("li"),O2e=a("strong"),Nhr=o("tapas"),jhr=o(" \u2014 "),VQ=a("a"),Dhr=o("TFTapasForMaskedLM"),Ghr=o(" (TAPAS model)"),Ohr=l(),vE=a("li"),V2e=a("strong"),Vhr=o("xlm"),Xhr=o(" \u2014 "),XQ=a("a"),zhr=o("TFXLMWithLMHeadModel"),Qhr=o(" (XLM model)"),Whr=l(),TE=a("li"),X2e=a("strong"),Hhr=o("xlm-roberta"),Uhr=o(" \u2014 "),zQ=a("a"),Jhr=o("TFXLMRobertaForMaskedLM"),Yhr=o(" (XLM-RoBERTa model)"),Khr=l(),v(ME.$$.fragment),bIe=l(),Zd=a("h2"),EE=a("a"),z2e=a("span"),v(W8.$$.fragment),Zhr=l(),Q2e=a("span"),eur=o("TFAutoModelForSeq2SeqLM"),FIe=l(),rr=a("div"),v(H8.$$.fragment),our=l(),ec=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QQ=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),WQ=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),U8=a("p"),iur=o("This class cannot be instantiated directly using "),W2e=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),mur=l(),$t=a("div"),v(J8.$$.fragment),fur=l(),H2e=a("p"),gur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hur=l(),oc=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),pur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),bur=o("from_pretrained()"),Fur=o(" to load the model weights."),vur=l(),v(CE.$$.fragment),Tur=l(),$r=a("div"),v(Y8.$$.fragment),Mur=l(),J2e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cur=l(),tn=a("p"),wur=o("The model class to instantiate is selected based on the "),Y2e=a("code"),Aur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),ye=a("ul"),wE=a("li"),eFe=a("strong"),Rur=o("bart"),Bur=o(" \u2014 "),UQ=a("a"),Pur=o("TFBartForConditionalGeneration"),Iur=o(" (BART model)"),qur=l(),AE=a("li"),oFe=a("strong"),Nur=o("blenderbot"),jur=o(" \u2014 "),JQ=a("a"),Dur=o("TFBlenderbotForConditionalGeneration"),Gur=o(" (Blenderbot model)"),Our=l(),yE=a("li"),rFe=a("strong"),Vur=o("blenderbot-small"),Xur=o(" \u2014 "),YQ=a("a"),zur=o("TFBlenderbotSmallForConditionalGeneration"),Qur=o(" (BlenderbotSmall model)"),Wur=l(),LE=a("li"),tFe=a("strong"),Hur=o("encoder-decoder"),Uur=o(" \u2014 "),KQ=a("a"),Jur=o("TFEncoderDecoderModel"),Yur=o(" (Encoder decoder model)"),Kur=l(),xE=a("li"),aFe=a("strong"),Zur=o("led"),epr=o(" \u2014 "),ZQ=a("a"),opr=o("TFLEDForConditionalGeneration"),rpr=o(" (LED model)"),tpr=l(),$E=a("li"),nFe=a("strong"),apr=o("marian"),npr=o(" \u2014 "),eW=a("a"),spr=o("TFMarianMTModel"),lpr=o(" (Marian model)"),ipr=l(),kE=a("li"),sFe=a("strong"),dpr=o("mbart"),cpr=o(" \u2014 "),oW=a("a"),mpr=o("TFMBartForConditionalGeneration"),fpr=o(" (mBART model)"),gpr=l(),SE=a("li"),lFe=a("strong"),hpr=o("mt5"),upr=o(" \u2014 "),rW=a("a"),ppr=o("TFMT5ForConditionalGeneration"),_pr=o(" (mT5 model)"),bpr=l(),RE=a("li"),iFe=a("strong"),Fpr=o("pegasus"),vpr=o(" \u2014 "),tW=a("a"),Tpr=o("TFPegasusForConditionalGeneration"),Mpr=o(" (Pegasus model)"),Epr=l(),BE=a("li"),dFe=a("strong"),Cpr=o("t5"),wpr=o(" \u2014 "),aW=a("a"),Apr=o("TFT5ForConditionalGeneration"),ypr=o(" (T5 model)"),Lpr=l(),v(PE.$$.fragment),vIe=l(),rc=a("h2"),IE=a("a"),cFe=a("span"),v(K8.$$.fragment),xpr=l(),mFe=a("span"),$pr=o("TFAutoModelForSequenceClassification"),TIe=l(),tr=a("div"),v(Z8.$$.fragment),kpr=l(),tc=a("p"),Spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nW=a("a"),Rpr=o("from_pretrained()"),Bpr=o(" class method or the "),sW=a("a"),Ppr=o("from_config()"),Ipr=o(` class
method.`),qpr=l(),ex=a("p"),Npr=o("This class cannot be instantiated directly using "),fFe=a("code"),jpr=o("__init__()"),Dpr=o(" (throws an error)."),Gpr=l(),kt=a("div"),v(ox.$$.fragment),Opr=l(),gFe=a("p"),Vpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xpr=l(),ac=a("p"),zpr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Qpr=o("not"),Wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Hpr=o("from_pretrained()"),Upr=o(" to load the model weights."),Jpr=l(),v(qE.$$.fragment),Ypr=l(),kr=a("div"),v(rx.$$.fragment),Kpr=l(),uFe=a("p"),Zpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e_r=l(),an=a("p"),o_r=o("The model class to instantiate is selected based on the "),pFe=a("code"),r_r=o("model_type"),t_r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(":"),i_r=l(),Z=a("ul"),NE=a("li"),FFe=a("strong"),d_r=o("albert"),c_r=o(" \u2014 "),iW=a("a"),m_r=o("TFAlbertForSequenceClassification"),f_r=o(" (ALBERT model)"),g_r=l(),jE=a("li"),vFe=a("strong"),h_r=o("bert"),u_r=o(" \u2014 "),dW=a("a"),p_r=o("TFBertForSequenceClassification"),__r=o(" (BERT model)"),b_r=l(),DE=a("li"),TFe=a("strong"),F_r=o("camembert"),v_r=o(" \u2014 "),cW=a("a"),T_r=o("TFCamembertForSequenceClassification"),M_r=o(" (CamemBERT model)"),E_r=l(),GE=a("li"),MFe=a("strong"),C_r=o("convbert"),w_r=o(" \u2014 "),mW=a("a"),A_r=o("TFConvBertForSequenceClassification"),y_r=o(" (ConvBERT model)"),L_r=l(),OE=a("li"),EFe=a("strong"),x_r=o("ctrl"),$_r=o(" \u2014 "),fW=a("a"),k_r=o("TFCTRLForSequenceClassification"),S_r=o(" (CTRL model)"),R_r=l(),VE=a("li"),CFe=a("strong"),B_r=o("deberta"),P_r=o(" \u2014 "),gW=a("a"),I_r=o("TFDebertaForSequenceClassification"),q_r=o(" (DeBERTa model)"),N_r=l(),XE=a("li"),wFe=a("strong"),j_r=o("deberta-v2"),D_r=o(" \u2014 "),hW=a("a"),G_r=o("TFDebertaV2ForSequenceClassification"),O_r=o(" (DeBERTa-v2 model)"),V_r=l(),zE=a("li"),AFe=a("strong"),X_r=o("distilbert"),z_r=o(" \u2014 "),uW=a("a"),Q_r=o("TFDistilBertForSequenceClassification"),W_r=o(" (DistilBERT model)"),H_r=l(),QE=a("li"),yFe=a("strong"),U_r=o("electra"),J_r=o(" \u2014 "),pW=a("a"),Y_r=o("TFElectraForSequenceClassification"),K_r=o(" (ELECTRA model)"),Z_r=l(),WE=a("li"),LFe=a("strong"),ebr=o("flaubert"),obr=o(" \u2014 "),_W=a("a"),rbr=o("TFFlaubertForSequenceClassification"),tbr=o(" (FlauBERT model)"),abr=l(),HE=a("li"),xFe=a("strong"),nbr=o("funnel"),sbr=o(" \u2014 "),bW=a("a"),lbr=o("TFFunnelForSequenceClassification"),ibr=o(" (Funnel Transformer model)"),dbr=l(),UE=a("li"),$Fe=a("strong"),cbr=o("gpt2"),mbr=o(" \u2014 "),FW=a("a"),fbr=o("TFGPT2ForSequenceClassification"),gbr=o(" (OpenAI GPT-2 model)"),hbr=l(),JE=a("li"),kFe=a("strong"),ubr=o("gptj"),pbr=o(" \u2014 "),vW=a("a"),_br=o("TFGPTJForSequenceClassification"),bbr=o(" (GPT-J model)"),Fbr=l(),YE=a("li"),SFe=a("strong"),vbr=o("layoutlm"),Tbr=o(" \u2014 "),TW=a("a"),Mbr=o("TFLayoutLMForSequenceClassification"),Ebr=o(" (LayoutLM model)"),Cbr=l(),KE=a("li"),RFe=a("strong"),wbr=o("longformer"),Abr=o(" \u2014 "),MW=a("a"),ybr=o("TFLongformerForSequenceClassification"),Lbr=o(" (Longformer model)"),xbr=l(),ZE=a("li"),BFe=a("strong"),$br=o("mobilebert"),kbr=o(" \u2014 "),EW=a("a"),Sbr=o("TFMobileBertForSequenceClassification"),Rbr=o(" (MobileBERT model)"),Bbr=l(),e5=a("li"),PFe=a("strong"),Pbr=o("mpnet"),Ibr=o(" \u2014 "),CW=a("a"),qbr=o("TFMPNetForSequenceClassification"),Nbr=o(" (MPNet model)"),jbr=l(),o5=a("li"),IFe=a("strong"),Dbr=o("openai-gpt"),Gbr=o(" \u2014 "),wW=a("a"),Obr=o("TFOpenAIGPTForSequenceClassification"),Vbr=o(" (OpenAI GPT model)"),Xbr=l(),r5=a("li"),qFe=a("strong"),zbr=o("rembert"),Qbr=o(" \u2014 "),AW=a("a"),Wbr=o("TFRemBertForSequenceClassification"),Hbr=o(" (RemBERT model)"),Ubr=l(),t5=a("li"),NFe=a("strong"),Jbr=o("roberta"),Ybr=o(" \u2014 "),yW=a("a"),Kbr=o("TFRobertaForSequenceClassification"),Zbr=o(" (RoBERTa model)"),e2r=l(),a5=a("li"),jFe=a("strong"),o2r=o("roformer"),r2r=o(" \u2014 "),LW=a("a"),t2r=o("TFRoFormerForSequenceClassification"),a2r=o(" (RoFormer model)"),n2r=l(),n5=a("li"),DFe=a("strong"),s2r=o("tapas"),l2r=o(" \u2014 "),xW=a("a"),i2r=o("TFTapasForSequenceClassification"),d2r=o(" (TAPAS model)"),c2r=l(),s5=a("li"),GFe=a("strong"),m2r=o("transfo-xl"),f2r=o(" \u2014 "),$W=a("a"),g2r=o("TFTransfoXLForSequenceClassification"),h2r=o(" (Transformer-XL model)"),u2r=l(),l5=a("li"),OFe=a("strong"),p2r=o("xlm"),_2r=o(" \u2014 "),kW=a("a"),b2r=o("TFXLMForSequenceClassification"),F2r=o(" (XLM model)"),v2r=l(),i5=a("li"),VFe=a("strong"),T2r=o("xlm-roberta"),M2r=o(" \u2014 "),SW=a("a"),E2r=o("TFXLMRobertaForSequenceClassification"),C2r=o(" (XLM-RoBERTa model)"),w2r=l(),d5=a("li"),XFe=a("strong"),A2r=o("xlnet"),y2r=o(" \u2014 "),RW=a("a"),L2r=o("TFXLNetForSequenceClassification"),x2r=o(" (XLNet model)"),$2r=l(),v(c5.$$.fragment),MIe=l(),nc=a("h2"),m5=a("a"),zFe=a("span"),v(tx.$$.fragment),k2r=l(),QFe=a("span"),S2r=o("TFAutoModelForMultipleChoice"),EIe=l(),ar=a("div"),v(ax.$$.fragment),R2r=l(),sc=a("p"),B2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BW=a("a"),P2r=o("from_pretrained()"),I2r=o(" class method or the "),PW=a("a"),q2r=o("from_config()"),N2r=o(` class
method.`),j2r=l(),nx=a("p"),D2r=o("This class cannot be instantiated directly using "),WFe=a("code"),G2r=o("__init__()"),O2r=o(" (throws an error)."),V2r=l(),St=a("div"),v(sx.$$.fragment),X2r=l(),HFe=a("p"),z2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q2r=l(),lc=a("p"),W2r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),J2r=o("from_pretrained()"),Y2r=o(" to load the model weights."),K2r=l(),v(f5.$$.fragment),Z2r=l(),Sr=a("div"),v(lx.$$.fragment),eFr=l(),JFe=a("p"),oFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rFr=l(),nn=a("p"),tFr=o("The model class to instantiate is selected based on the "),YFe=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),ue=a("ul"),g5=a("li"),eve=a("strong"),mFr=o("albert"),fFr=o(" \u2014 "),qW=a("a"),gFr=o("TFAlbertForMultipleChoice"),hFr=o(" (ALBERT model)"),uFr=l(),h5=a("li"),ove=a("strong"),pFr=o("bert"),_Fr=o(" \u2014 "),NW=a("a"),bFr=o("TFBertForMultipleChoice"),FFr=o(" (BERT model)"),vFr=l(),u5=a("li"),rve=a("strong"),TFr=o("camembert"),MFr=o(" \u2014 "),jW=a("a"),EFr=o("TFCamembertForMultipleChoice"),CFr=o(" (CamemBERT model)"),wFr=l(),p5=a("li"),tve=a("strong"),AFr=o("convbert"),yFr=o(" \u2014 "),DW=a("a"),LFr=o("TFConvBertForMultipleChoice"),xFr=o(" (ConvBERT model)"),$Fr=l(),_5=a("li"),ave=a("strong"),kFr=o("distilbert"),SFr=o(" \u2014 "),GW=a("a"),RFr=o("TFDistilBertForMultipleChoice"),BFr=o(" (DistilBERT model)"),PFr=l(),b5=a("li"),nve=a("strong"),IFr=o("electra"),qFr=o(" \u2014 "),OW=a("a"),NFr=o("TFElectraForMultipleChoice"),jFr=o(" (ELECTRA model)"),DFr=l(),F5=a("li"),sve=a("strong"),GFr=o("flaubert"),OFr=o(" \u2014 "),VW=a("a"),VFr=o("TFFlaubertForMultipleChoice"),XFr=o(" (FlauBERT model)"),zFr=l(),v5=a("li"),lve=a("strong"),QFr=o("funnel"),WFr=o(" \u2014 "),XW=a("a"),HFr=o("TFFunnelForMultipleChoice"),UFr=o(" (Funnel Transformer model)"),JFr=l(),T5=a("li"),ive=a("strong"),YFr=o("longformer"),KFr=o(" \u2014 "),zW=a("a"),ZFr=o("TFLongformerForMultipleChoice"),evr=o(" (Longformer model)"),ovr=l(),M5=a("li"),dve=a("strong"),rvr=o("mobilebert"),tvr=o(" \u2014 "),QW=a("a"),avr=o("TFMobileBertForMultipleChoice"),nvr=o(" (MobileBERT model)"),svr=l(),E5=a("li"),cve=a("strong"),lvr=o("mpnet"),ivr=o(" \u2014 "),WW=a("a"),dvr=o("TFMPNetForMultipleChoice"),cvr=o(" (MPNet model)"),mvr=l(),C5=a("li"),mve=a("strong"),fvr=o("rembert"),gvr=o(" \u2014 "),HW=a("a"),hvr=o("TFRemBertForMultipleChoice"),uvr=o(" (RemBERT model)"),pvr=l(),w5=a("li"),fve=a("strong"),_vr=o("roberta"),bvr=o(" \u2014 "),UW=a("a"),Fvr=o("TFRobertaForMultipleChoice"),vvr=o(" (RoBERTa model)"),Tvr=l(),A5=a("li"),gve=a("strong"),Mvr=o("roformer"),Evr=o(" \u2014 "),JW=a("a"),Cvr=o("TFRoFormerForMultipleChoice"),wvr=o(" (RoFormer model)"),Avr=l(),y5=a("li"),hve=a("strong"),yvr=o("xlm"),Lvr=o(" \u2014 "),YW=a("a"),xvr=o("TFXLMForMultipleChoice"),$vr=o(" (XLM model)"),kvr=l(),L5=a("li"),uve=a("strong"),Svr=o("xlm-roberta"),Rvr=o(" \u2014 "),KW=a("a"),Bvr=o("TFXLMRobertaForMultipleChoice"),Pvr=o(" (XLM-RoBERTa model)"),Ivr=l(),x5=a("li"),pve=a("strong"),qvr=o("xlnet"),Nvr=o(" \u2014 "),ZW=a("a"),jvr=o("TFXLNetForMultipleChoice"),Dvr=o(" (XLNet model)"),Gvr=l(),v($5.$$.fragment),CIe=l(),ic=a("h2"),k5=a("a"),_ve=a("span"),v(ix.$$.fragment),Ovr=l(),bve=a("span"),Vvr=o("TFAutoModelForNextSentencePrediction"),wIe=l(),nr=a("div"),v(dx.$$.fragment),Xvr=l(),dc=a("p"),zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eH=a("a"),Qvr=o("from_pretrained()"),Wvr=o(" class method or the "),oH=a("a"),Hvr=o("from_config()"),Uvr=o(` class
method.`),Jvr=l(),cx=a("p"),Yvr=o("This class cannot be instantiated directly using "),Fve=a("code"),Kvr=o("__init__()"),Zvr=o(" (throws an error)."),e1r=l(),Rt=a("div"),v(mx.$$.fragment),o1r=l(),vve=a("p"),r1r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t1r=l(),cc=a("p"),a1r=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),n1r=o("not"),s1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),l1r=o("from_pretrained()"),i1r=o(" to load the model weights."),d1r=l(),v(S5.$$.fragment),c1r=l(),Rr=a("div"),v(fx.$$.fragment),m1r=l(),Mve=a("p"),f1r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g1r=l(),sn=a("p"),h1r=o("The model class to instantiate is selected based on the "),Eve=a("code"),u1r=o("model_type"),p1r=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),_1r=o("pretrained_model_name_or_path"),b1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),F1r=o("pretrained_model_name_or_path"),v1r=o(":"),T1r=l(),gx=a("ul"),R5=a("li"),Ave=a("strong"),M1r=o("bert"),E1r=o(" \u2014 "),tH=a("a"),C1r=o("TFBertForNextSentencePrediction"),w1r=o(" (BERT model)"),A1r=l(),B5=a("li"),yve=a("strong"),y1r=o("mobilebert"),L1r=o(" \u2014 "),aH=a("a"),x1r=o("TFMobileBertForNextSentencePrediction"),$1r=o(" (MobileBERT model)"),k1r=l(),v(P5.$$.fragment),AIe=l(),mc=a("h2"),I5=a("a"),Lve=a("span"),v(hx.$$.fragment),S1r=l(),xve=a("span"),R1r=o("TFAutoModelForTableQuestionAnswering"),yIe=l(),sr=a("div"),v(ux.$$.fragment),B1r=l(),fc=a("p"),P1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=a("a"),I1r=o("from_pretrained()"),q1r=o(" class method or the "),sH=a("a"),N1r=o("from_config()"),j1r=o(` class
method.`),D1r=l(),px=a("p"),G1r=o("This class cannot be instantiated directly using "),$ve=a("code"),O1r=o("__init__()"),V1r=o(" (throws an error)."),X1r=l(),Bt=a("div"),v(_x.$$.fragment),z1r=l(),kve=a("p"),Q1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W1r=l(),gc=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),U1r=o("not"),J1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Y1r=o("from_pretrained()"),K1r=o(" to load the model weights."),Z1r=l(),v(q5.$$.fragment),eTr=l(),Br=a("div"),v(bx.$$.fragment),oTr=l(),Rve=a("p"),rTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tTr=l(),ln=a("p"),aTr=o("The model class to instantiate is selected based on the "),Bve=a("code"),nTr=o("model_type"),sTr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(":"),mTr=l(),qve=a("ul"),N5=a("li"),Nve=a("strong"),fTr=o("tapas"),gTr=o(" \u2014 "),iH=a("a"),hTr=o("TFTapasForQuestionAnswering"),uTr=o(" (TAPAS model)"),pTr=l(),v(j5.$$.fragment),LIe=l(),hc=a("h2"),D5=a("a"),jve=a("span"),v(Fx.$$.fragment),_Tr=l(),Dve=a("span"),bTr=o("TFAutoModelForTokenClassification"),xIe=l(),lr=a("div"),v(vx.$$.fragment),FTr=l(),uc=a("p"),vTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=a("a"),TTr=o("from_pretrained()"),MTr=o(" class method or the "),cH=a("a"),ETr=o("from_config()"),CTr=o(` class
method.`),wTr=l(),Tx=a("p"),ATr=o("This class cannot be instantiated directly using "),Gve=a("code"),yTr=o("__init__()"),LTr=o(" (throws an error)."),xTr=l(),Pt=a("div"),v(Mx.$$.fragment),$Tr=l(),Ove=a("p"),kTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),STr=l(),pc=a("p"),RTr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),BTr=o("not"),PTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),ITr=o("from_pretrained()"),qTr=o(" to load the model weights."),NTr=l(),v(G5.$$.fragment),jTr=l(),Pr=a("div"),v(Ex.$$.fragment),DTr=l(),Xve=a("p"),GTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OTr=l(),dn=a("p"),VTr=o("The model class to instantiate is selected based on the "),zve=a("code"),XTr=o("model_type"),zTr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(":"),JTr=l(),de=a("ul"),O5=a("li"),Hve=a("strong"),YTr=o("albert"),KTr=o(" \u2014 "),fH=a("a"),ZTr=o("TFAlbertForTokenClassification"),eMr=o(" (ALBERT model)"),oMr=l(),V5=a("li"),Uve=a("strong"),rMr=o("bert"),tMr=o(" \u2014 "),gH=a("a"),aMr=o("TFBertForTokenClassification"),nMr=o(" (BERT model)"),sMr=l(),X5=a("li"),Jve=a("strong"),lMr=o("camembert"),iMr=o(" \u2014 "),hH=a("a"),dMr=o("TFCamembertForTokenClassification"),cMr=o(" (CamemBERT model)"),mMr=l(),z5=a("li"),Yve=a("strong"),fMr=o("convbert"),gMr=o(" \u2014 "),uH=a("a"),hMr=o("TFConvBertForTokenClassification"),uMr=o(" (ConvBERT model)"),pMr=l(),Q5=a("li"),Kve=a("strong"),_Mr=o("deberta"),bMr=o(" \u2014 "),pH=a("a"),FMr=o("TFDebertaForTokenClassification"),vMr=o(" (DeBERTa model)"),TMr=l(),W5=a("li"),Zve=a("strong"),MMr=o("deberta-v2"),EMr=o(" \u2014 "),_H=a("a"),CMr=o("TFDebertaV2ForTokenClassification"),wMr=o(" (DeBERTa-v2 model)"),AMr=l(),H5=a("li"),e1e=a("strong"),yMr=o("distilbert"),LMr=o(" \u2014 "),bH=a("a"),xMr=o("TFDistilBertForTokenClassification"),$Mr=o(" (DistilBERT model)"),kMr=l(),U5=a("li"),o1e=a("strong"),SMr=o("electra"),RMr=o(" \u2014 "),FH=a("a"),BMr=o("TFElectraForTokenClassification"),PMr=o(" (ELECTRA model)"),IMr=l(),J5=a("li"),r1e=a("strong"),qMr=o("flaubert"),NMr=o(" \u2014 "),vH=a("a"),jMr=o("TFFlaubertForTokenClassification"),DMr=o(" (FlauBERT model)"),GMr=l(),Y5=a("li"),t1e=a("strong"),OMr=o("funnel"),VMr=o(" \u2014 "),TH=a("a"),XMr=o("TFFunnelForTokenClassification"),zMr=o(" (Funnel Transformer model)"),QMr=l(),K5=a("li"),a1e=a("strong"),WMr=o("layoutlm"),HMr=o(" \u2014 "),MH=a("a"),UMr=o("TFLayoutLMForTokenClassification"),JMr=o(" (LayoutLM model)"),YMr=l(),Z5=a("li"),n1e=a("strong"),KMr=o("longformer"),ZMr=o(" \u2014 "),EH=a("a"),e4r=o("TFLongformerForTokenClassification"),o4r=o(" (Longformer model)"),r4r=l(),eC=a("li"),s1e=a("strong"),t4r=o("mobilebert"),a4r=o(" \u2014 "),CH=a("a"),n4r=o("TFMobileBertForTokenClassification"),s4r=o(" (MobileBERT model)"),l4r=l(),oC=a("li"),l1e=a("strong"),i4r=o("mpnet"),d4r=o(" \u2014 "),wH=a("a"),c4r=o("TFMPNetForTokenClassification"),m4r=o(" (MPNet model)"),f4r=l(),rC=a("li"),i1e=a("strong"),g4r=o("rembert"),h4r=o(" \u2014 "),AH=a("a"),u4r=o("TFRemBertForTokenClassification"),p4r=o(" (RemBERT model)"),_4r=l(),tC=a("li"),d1e=a("strong"),b4r=o("roberta"),F4r=o(" \u2014 "),yH=a("a"),v4r=o("TFRobertaForTokenClassification"),T4r=o(" (RoBERTa model)"),M4r=l(),aC=a("li"),c1e=a("strong"),E4r=o("roformer"),C4r=o(" \u2014 "),LH=a("a"),w4r=o("TFRoFormerForTokenClassification"),A4r=o(" (RoFormer model)"),y4r=l(),nC=a("li"),m1e=a("strong"),L4r=o("xlm"),x4r=o(" \u2014 "),xH=a("a"),$4r=o("TFXLMForTokenClassification"),k4r=o(" (XLM model)"),S4r=l(),sC=a("li"),f1e=a("strong"),R4r=o("xlm-roberta"),B4r=o(" \u2014 "),$H=a("a"),P4r=o("TFXLMRobertaForTokenClassification"),I4r=o(" (XLM-RoBERTa model)"),q4r=l(),lC=a("li"),g1e=a("strong"),N4r=o("xlnet"),j4r=o(" \u2014 "),kH=a("a"),D4r=o("TFXLNetForTokenClassification"),G4r=o(" (XLNet model)"),O4r=l(),v(iC.$$.fragment),$Ie=l(),_c=a("h2"),dC=a("a"),h1e=a("span"),v(Cx.$$.fragment),V4r=l(),u1e=a("span"),X4r=o("TFAutoModelForQuestionAnswering"),kIe=l(),ir=a("div"),v(wx.$$.fragment),z4r=l(),bc=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=a("a"),W4r=o("from_pretrained()"),H4r=o(" class method or the "),RH=a("a"),U4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),Ax=a("p"),K4r=o("This class cannot be instantiated directly using "),p1e=a("code"),Z4r=o("__init__()"),eEr=o(" (throws an error)."),oEr=l(),It=a("div"),v(yx.$$.fragment),rEr=l(),_1e=a("p"),tEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aEr=l(),Fc=a("p"),nEr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),sEr=o("not"),lEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),iEr=o("from_pretrained()"),dEr=o(" to load the model weights."),cEr=l(),v(cC.$$.fragment),mEr=l(),Ir=a("div"),v(Lx.$$.fragment),fEr=l(),F1e=a("p"),gEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hEr=l(),cn=a("p"),uEr=o("The model class to instantiate is selected based on the "),v1e=a("code"),pEr=o("model_type"),_Er=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),bEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),vEr=o("pretrained_model_name_or_path"),TEr=o(":"),MEr=l(),ce=a("ul"),mC=a("li"),E1e=a("strong"),EEr=o("albert"),CEr=o(" \u2014 "),PH=a("a"),wEr=o("TFAlbertForQuestionAnswering"),AEr=o(" (ALBERT model)"),yEr=l(),fC=a("li"),C1e=a("strong"),LEr=o("bert"),xEr=o(" \u2014 "),IH=a("a"),$Er=o("TFBertForQuestionAnswering"),kEr=o(" (BERT model)"),SEr=l(),gC=a("li"),w1e=a("strong"),REr=o("camembert"),BEr=o(" \u2014 "),qH=a("a"),PEr=o("TFCamembertForQuestionAnswering"),IEr=o(" (CamemBERT model)"),qEr=l(),hC=a("li"),A1e=a("strong"),NEr=o("convbert"),jEr=o(" \u2014 "),NH=a("a"),DEr=o("TFConvBertForQuestionAnswering"),GEr=o(" (ConvBERT model)"),OEr=l(),uC=a("li"),y1e=a("strong"),VEr=o("deberta"),XEr=o(" \u2014 "),jH=a("a"),zEr=o("TFDebertaForQuestionAnswering"),QEr=o(" (DeBERTa model)"),WEr=l(),pC=a("li"),L1e=a("strong"),HEr=o("deberta-v2"),UEr=o(" \u2014 "),DH=a("a"),JEr=o("TFDebertaV2ForQuestionAnswering"),YEr=o(" (DeBERTa-v2 model)"),KEr=l(),_C=a("li"),x1e=a("strong"),ZEr=o("distilbert"),e5r=o(" \u2014 "),GH=a("a"),o5r=o("TFDistilBertForQuestionAnswering"),r5r=o(" (DistilBERT model)"),t5r=l(),bC=a("li"),$1e=a("strong"),a5r=o("electra"),n5r=o(" \u2014 "),OH=a("a"),s5r=o("TFElectraForQuestionAnswering"),l5r=o(" (ELECTRA model)"),i5r=l(),FC=a("li"),k1e=a("strong"),d5r=o("flaubert"),c5r=o(" \u2014 "),VH=a("a"),m5r=o("TFFlaubertForQuestionAnsweringSimple"),f5r=o(" (FlauBERT model)"),g5r=l(),vC=a("li"),S1e=a("strong"),h5r=o("funnel"),u5r=o(" \u2014 "),XH=a("a"),p5r=o("TFFunnelForQuestionAnswering"),_5r=o(" (Funnel Transformer model)"),b5r=l(),TC=a("li"),R1e=a("strong"),F5r=o("gptj"),v5r=o(" \u2014 "),zH=a("a"),T5r=o("TFGPTJForQuestionAnswering"),M5r=o(" (GPT-J model)"),E5r=l(),MC=a("li"),B1e=a("strong"),C5r=o("longformer"),w5r=o(" \u2014 "),QH=a("a"),A5r=o("TFLongformerForQuestionAnswering"),y5r=o(" (Longformer model)"),L5r=l(),EC=a("li"),P1e=a("strong"),x5r=o("mobilebert"),$5r=o(" \u2014 "),WH=a("a"),k5r=o("TFMobileBertForQuestionAnswering"),S5r=o(" (MobileBERT model)"),R5r=l(),CC=a("li"),I1e=a("strong"),B5r=o("mpnet"),P5r=o(" \u2014 "),HH=a("a"),I5r=o("TFMPNetForQuestionAnswering"),q5r=o(" (MPNet model)"),N5r=l(),wC=a("li"),q1e=a("strong"),j5r=o("rembert"),D5r=o(" \u2014 "),UH=a("a"),G5r=o("TFRemBertForQuestionAnswering"),O5r=o(" (RemBERT model)"),V5r=l(),AC=a("li"),N1e=a("strong"),X5r=o("roberta"),z5r=o(" \u2014 "),JH=a("a"),Q5r=o("TFRobertaForQuestionAnswering"),W5r=o(" (RoBERTa model)"),H5r=l(),yC=a("li"),j1e=a("strong"),U5r=o("roformer"),J5r=o(" \u2014 "),YH=a("a"),Y5r=o("TFRoFormerForQuestionAnswering"),K5r=o(" (RoFormer model)"),Z5r=l(),LC=a("li"),D1e=a("strong"),eCr=o("xlm"),oCr=o(" \u2014 "),KH=a("a"),rCr=o("TFXLMForQuestionAnsweringSimple"),tCr=o(" (XLM model)"),aCr=l(),xC=a("li"),G1e=a("strong"),nCr=o("xlm-roberta"),sCr=o(" \u2014 "),ZH=a("a"),lCr=o("TFXLMRobertaForQuestionAnswering"),iCr=o(" (XLM-RoBERTa model)"),dCr=l(),$C=a("li"),O1e=a("strong"),cCr=o("xlnet"),mCr=o(" \u2014 "),eU=a("a"),fCr=o("TFXLNetForQuestionAnsweringSimple"),gCr=o(" (XLNet model)"),hCr=l(),v(kC.$$.fragment),SIe=l(),vc=a("h2"),SC=a("a"),V1e=a("span"),v(xx.$$.fragment),uCr=l(),X1e=a("span"),pCr=o("TFAutoModelForVision2Seq"),RIe=l(),dr=a("div"),v($x.$$.fragment),_Cr=l(),Tc=a("p"),bCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oU=a("a"),FCr=o("from_pretrained()"),vCr=o(" class method or the "),rU=a("a"),TCr=o("from_config()"),MCr=o(` class
method.`),ECr=l(),kx=a("p"),CCr=o("This class cannot be instantiated directly using "),z1e=a("code"),wCr=o("__init__()"),ACr=o(" (throws an error)."),yCr=l(),qt=a("div"),v(Sx.$$.fragment),LCr=l(),Q1e=a("p"),xCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Cr=l(),Mc=a("p"),kCr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),SCr=o("not"),RCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),BCr=o("from_pretrained()"),PCr=o(" to load the model weights."),ICr=l(),v(RC.$$.fragment),qCr=l(),qr=a("div"),v(Rx.$$.fragment),NCr=l(),H1e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DCr=l(),mn=a("p"),GCr=o("The model class to instantiate is selected based on the "),U1e=a("code"),OCr=o("model_type"),VCr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(":"),HCr=l(),K1e=a("ul"),BC=a("li"),Z1e=a("strong"),UCr=o("vision-encoder-decoder"),JCr=o(" \u2014 "),aU=a("a"),YCr=o("TFVisionEncoderDecoderModel"),KCr=o(" (Vision Encoder decoder model)"),ZCr=l(),v(PC.$$.fragment),BIe=l(),Ec=a("h2"),IC=a("a"),eTe=a("span"),v(Bx.$$.fragment),e3r=l(),oTe=a("span"),o3r=o("TFAutoModelForSpeechSeq2Seq"),PIe=l(),cr=a("div"),v(Px.$$.fragment),r3r=l(),Cc=a("p"),t3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nU=a("a"),a3r=o("from_pretrained()"),n3r=o(" class method or the "),sU=a("a"),s3r=o("from_config()"),l3r=o(` class
method.`),i3r=l(),Ix=a("p"),d3r=o("This class cannot be instantiated directly using "),rTe=a("code"),c3r=o("__init__()"),m3r=o(" (throws an error)."),f3r=l(),Nt=a("div"),v(qx.$$.fragment),g3r=l(),tTe=a("p"),h3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u3r=l(),wc=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),_3r=o("not"),b3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),F3r=o("from_pretrained()"),v3r=o(" to load the model weights."),T3r=l(),v(qC.$$.fragment),M3r=l(),Nr=a("div"),v(Nx.$$.fragment),E3r=l(),nTe=a("p"),C3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w3r=l(),fn=a("p"),A3r=o("The model class to instantiate is selected based on the "),sTe=a("code"),y3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(":"),R3r=l(),dTe=a("ul"),NC=a("li"),cTe=a("strong"),B3r=o("speech_to_text"),P3r=o(" \u2014 "),iU=a("a"),I3r=o("TFSpeech2TextForConditionalGeneration"),q3r=o(" (Speech2Text model)"),N3r=l(),v(jC.$$.fragment),IIe=l(),Ac=a("h2"),DC=a("a"),mTe=a("span"),v(jx.$$.fragment),j3r=l(),fTe=a("span"),D3r=o("FlaxAutoModel"),qIe=l(),mr=a("div"),v(Dx.$$.fragment),G3r=l(),yc=a("p"),O3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=a("a"),V3r=o("from_pretrained()"),X3r=o(" class method or the "),cU=a("a"),z3r=o("from_config()"),Q3r=o(` class
method.`),W3r=l(),Gx=a("p"),H3r=o("This class cannot be instantiated directly using "),gTe=a("code"),U3r=o("__init__()"),J3r=o(" (throws an error)."),Y3r=l(),jt=a("div"),v(Ox.$$.fragment),K3r=l(),hTe=a("p"),Z3r=o("Instantiates one of the base model classes of the library from a configuration."),ewr=l(),Lc=a("p"),owr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),rwr=o("not"),twr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),awr=o("from_pretrained()"),nwr=o(" to load the model weights."),swr=l(),v(GC.$$.fragment),lwr=l(),jr=a("div"),v(Vx.$$.fragment),iwr=l(),pTe=a("p"),dwr=o("Instantiate one of the base model classes of the library from a pretrained model."),cwr=l(),gn=a("p"),mwr=o("The model class to instantiate is selected based on the "),_Te=a("code"),fwr=o("model_type"),gwr=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),hwr=o("pretrained_model_name_or_path"),uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(":"),bwr=l(),oe=a("ul"),OC=a("li"),vTe=a("strong"),Fwr=o("albert"),vwr=o(" \u2014 "),fU=a("a"),Twr=o("FlaxAlbertModel"),Mwr=o(" (ALBERT model)"),Ewr=l(),VC=a("li"),TTe=a("strong"),Cwr=o("bart"),wwr=o(" \u2014 "),gU=a("a"),Awr=o("FlaxBartModel"),ywr=o(" (BART model)"),Lwr=l(),XC=a("li"),MTe=a("strong"),xwr=o("beit"),$wr=o(" \u2014 "),hU=a("a"),kwr=o("FlaxBeitModel"),Swr=o(" (BEiT model)"),Rwr=l(),zC=a("li"),ETe=a("strong"),Bwr=o("bert"),Pwr=o(" \u2014 "),uU=a("a"),Iwr=o("FlaxBertModel"),qwr=o(" (BERT model)"),Nwr=l(),QC=a("li"),CTe=a("strong"),jwr=o("big_bird"),Dwr=o(" \u2014 "),pU=a("a"),Gwr=o("FlaxBigBirdModel"),Owr=o(" (BigBird model)"),Vwr=l(),WC=a("li"),wTe=a("strong"),Xwr=o("blenderbot"),zwr=o(" \u2014 "),_U=a("a"),Qwr=o("FlaxBlenderbotModel"),Wwr=o(" (Blenderbot model)"),Hwr=l(),HC=a("li"),ATe=a("strong"),Uwr=o("blenderbot-small"),Jwr=o(" \u2014 "),bU=a("a"),Ywr=o("FlaxBlenderbotSmallModel"),Kwr=o(" (BlenderbotSmall model)"),Zwr=l(),UC=a("li"),yTe=a("strong"),eAr=o("clip"),oAr=o(" \u2014 "),FU=a("a"),rAr=o("FlaxCLIPModel"),tAr=o(" (CLIP model)"),aAr=l(),JC=a("li"),LTe=a("strong"),nAr=o("distilbert"),sAr=o(" \u2014 "),vU=a("a"),lAr=o("FlaxDistilBertModel"),iAr=o(" (DistilBERT model)"),dAr=l(),YC=a("li"),xTe=a("strong"),cAr=o("electra"),mAr=o(" \u2014 "),TU=a("a"),fAr=o("FlaxElectraModel"),gAr=o(" (ELECTRA model)"),hAr=l(),KC=a("li"),$Te=a("strong"),uAr=o("gpt2"),pAr=o(" \u2014 "),MU=a("a"),_Ar=o("FlaxGPT2Model"),bAr=o(" (OpenAI GPT-2 model)"),FAr=l(),ZC=a("li"),kTe=a("strong"),vAr=o("gpt_neo"),TAr=o(" \u2014 "),EU=a("a"),MAr=o("FlaxGPTNeoModel"),EAr=o(" (GPT Neo model)"),CAr=l(),e3=a("li"),STe=a("strong"),wAr=o("gptj"),AAr=o(" \u2014 "),CU=a("a"),yAr=o("FlaxGPTJModel"),LAr=o(" (GPT-J model)"),xAr=l(),o3=a("li"),RTe=a("strong"),$Ar=o("marian"),kAr=o(" \u2014 "),wU=a("a"),SAr=o("FlaxMarianModel"),RAr=o(" (Marian model)"),BAr=l(),r3=a("li"),BTe=a("strong"),PAr=o("mbart"),IAr=o(" \u2014 "),AU=a("a"),qAr=o("FlaxMBartModel"),NAr=o(" (mBART model)"),jAr=l(),t3=a("li"),PTe=a("strong"),DAr=o("mt5"),GAr=o(" \u2014 "),yU=a("a"),OAr=o("FlaxMT5Model"),VAr=o(" (mT5 model)"),XAr=l(),a3=a("li"),ITe=a("strong"),zAr=o("pegasus"),QAr=o(" \u2014 "),LU=a("a"),WAr=o("FlaxPegasusModel"),HAr=o(" (Pegasus model)"),UAr=l(),n3=a("li"),qTe=a("strong"),JAr=o("roberta"),YAr=o(" \u2014 "),xU=a("a"),KAr=o("FlaxRobertaModel"),ZAr=o(" (RoBERTa model)"),e0r=l(),s3=a("li"),NTe=a("strong"),o0r=o("roformer"),r0r=o(" \u2014 "),$U=a("a"),t0r=o("FlaxRoFormerModel"),a0r=o(" (RoFormer model)"),n0r=l(),l3=a("li"),jTe=a("strong"),s0r=o("t5"),l0r=o(" \u2014 "),kU=a("a"),i0r=o("FlaxT5Model"),d0r=o(" (T5 model)"),c0r=l(),i3=a("li"),DTe=a("strong"),m0r=o("vision-text-dual-encoder"),f0r=o(" \u2014 "),SU=a("a"),g0r=o("FlaxVisionTextDualEncoderModel"),h0r=o(" (VisionTextDualEncoder model)"),u0r=l(),d3=a("li"),GTe=a("strong"),p0r=o("vit"),_0r=o(" \u2014 "),RU=a("a"),b0r=o("FlaxViTModel"),F0r=o(" (ViT model)"),v0r=l(),c3=a("li"),OTe=a("strong"),T0r=o("wav2vec2"),M0r=o(" \u2014 "),BU=a("a"),E0r=o("FlaxWav2Vec2Model"),C0r=o(" (Wav2Vec2 model)"),w0r=l(),m3=a("li"),VTe=a("strong"),A0r=o("xglm"),y0r=o(" \u2014 "),PU=a("a"),L0r=o("FlaxXGLMModel"),x0r=o(" (XGLM model)"),$0r=l(),f3=a("li"),XTe=a("strong"),k0r=o("xlm-roberta"),S0r=o(" \u2014 "),IU=a("a"),R0r=o("FlaxXLMRobertaModel"),B0r=o(" (XLM-RoBERTa model)"),P0r=l(),v(g3.$$.fragment),NIe=l(),xc=a("h2"),h3=a("a"),zTe=a("span"),v(Xx.$$.fragment),I0r=l(),QTe=a("span"),q0r=o("FlaxAutoModelForCausalLM"),jIe=l(),fr=a("div"),v(zx.$$.fragment),N0r=l(),$c=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),NU=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),Qx=a("p"),z0r=o("This class cannot be instantiated directly using "),WTe=a("code"),Q0r=o("__init__()"),W0r=o(" (throws an error)."),H0r=l(),Dt=a("div"),v(Wx.$$.fragment),U0r=l(),HTe=a("p"),J0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y0r=l(),kc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),Z0r=o("not"),e6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),o6r=o("from_pretrained()"),r6r=o(" to load the model weights."),t6r=l(),v(u3.$$.fragment),a6r=l(),Dr=a("div"),v(Hx.$$.fragment),n6r=l(),JTe=a("p"),s6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l6r=l(),hn=a("p"),i6r=o("The model class to instantiate is selected based on the "),YTe=a("code"),d6r=o("model_type"),c6r=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),m6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),g6r=o("pretrained_model_name_or_path"),h6r=o(":"),u6r=l(),ke=a("ul"),p3=a("li"),eMe=a("strong"),p6r=o("bart"),_6r=o(" \u2014 "),DU=a("a"),b6r=o("FlaxBartForCausalLM"),F6r=o(" (BART model)"),v6r=l(),_3=a("li"),oMe=a("strong"),T6r=o("bert"),M6r=o(" \u2014 "),GU=a("a"),E6r=o("FlaxBertForCausalLM"),C6r=o(" (BERT model)"),w6r=l(),b3=a("li"),rMe=a("strong"),A6r=o("big_bird"),y6r=o(" \u2014 "),OU=a("a"),L6r=o("FlaxBigBirdForCausalLM"),x6r=o(" (BigBird model)"),$6r=l(),F3=a("li"),tMe=a("strong"),k6r=o("electra"),S6r=o(" \u2014 "),VU=a("a"),R6r=o("FlaxElectraForCausalLM"),B6r=o(" (ELECTRA model)"),P6r=l(),v3=a("li"),aMe=a("strong"),I6r=o("gpt2"),q6r=o(" \u2014 "),XU=a("a"),N6r=o("FlaxGPT2LMHeadModel"),j6r=o(" (OpenAI GPT-2 model)"),D6r=l(),T3=a("li"),nMe=a("strong"),G6r=o("gpt_neo"),O6r=o(" \u2014 "),zU=a("a"),V6r=o("FlaxGPTNeoForCausalLM"),X6r=o(" (GPT Neo model)"),z6r=l(),M3=a("li"),sMe=a("strong"),Q6r=o("gptj"),W6r=o(" \u2014 "),QU=a("a"),H6r=o("FlaxGPTJForCausalLM"),U6r=o(" (GPT-J model)"),J6r=l(),E3=a("li"),lMe=a("strong"),Y6r=o("roberta"),K6r=o(" \u2014 "),WU=a("a"),Z6r=o("FlaxRobertaForCausalLM"),eyr=o(" (RoBERTa model)"),oyr=l(),C3=a("li"),iMe=a("strong"),ryr=o("xglm"),tyr=o(" \u2014 "),HU=a("a"),ayr=o("FlaxXGLMForCausalLM"),nyr=o(" (XGLM model)"),syr=l(),v(w3.$$.fragment),DIe=l(),Sc=a("h2"),A3=a("a"),dMe=a("span"),v(Ux.$$.fragment),lyr=l(),cMe=a("span"),iyr=o("FlaxAutoModelForPreTraining"),GIe=l(),gr=a("div"),v(Jx.$$.fragment),dyr=l(),Rc=a("p"),cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UU=a("a"),myr=o("from_pretrained()"),fyr=o(" class method or the "),JU=a("a"),gyr=o("from_config()"),hyr=o(` class
method.`),uyr=l(),Yx=a("p"),pyr=o("This class cannot be instantiated directly using "),mMe=a("code"),_yr=o("__init__()"),byr=o(" (throws an error)."),Fyr=l(),Gt=a("div"),v(Kx.$$.fragment),vyr=l(),fMe=a("p"),Tyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myr=l(),Bc=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),Cyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Ayr=o("from_pretrained()"),yyr=o(" to load the model weights."),Lyr=l(),v(y3.$$.fragment),xyr=l(),Gr=a("div"),v(Zx.$$.fragment),$yr=l(),hMe=a("p"),kyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Syr=l(),un=a("p"),Ryr=o("The model class to instantiate is selected based on the "),uMe=a("code"),Byr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),Iyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(":"),Dyr=l(),Me=a("ul"),L3=a("li"),bMe=a("strong"),Gyr=o("albert"),Oyr=o(" \u2014 "),KU=a("a"),Vyr=o("FlaxAlbertForPreTraining"),Xyr=o(" (ALBERT model)"),zyr=l(),x3=a("li"),FMe=a("strong"),Qyr=o("bart"),Wyr=o(" \u2014 "),ZU=a("a"),Hyr=o("FlaxBartForConditionalGeneration"),Uyr=o(" (BART model)"),Jyr=l(),$3=a("li"),vMe=a("strong"),Yyr=o("bert"),Kyr=o(" \u2014 "),eJ=a("a"),Zyr=o("FlaxBertForPreTraining"),eLr=o(" (BERT model)"),oLr=l(),k3=a("li"),TMe=a("strong"),rLr=o("big_bird"),tLr=o(" \u2014 "),oJ=a("a"),aLr=o("FlaxBigBirdForPreTraining"),nLr=o(" (BigBird model)"),sLr=l(),S3=a("li"),MMe=a("strong"),lLr=o("electra"),iLr=o(" \u2014 "),rJ=a("a"),dLr=o("FlaxElectraForPreTraining"),cLr=o(" (ELECTRA model)"),mLr=l(),R3=a("li"),EMe=a("strong"),fLr=o("mbart"),gLr=o(" \u2014 "),tJ=a("a"),hLr=o("FlaxMBartForConditionalGeneration"),uLr=o(" (mBART model)"),pLr=l(),B3=a("li"),CMe=a("strong"),_Lr=o("mt5"),bLr=o(" \u2014 "),aJ=a("a"),FLr=o("FlaxMT5ForConditionalGeneration"),vLr=o(" (mT5 model)"),TLr=l(),P3=a("li"),wMe=a("strong"),MLr=o("roberta"),ELr=o(" \u2014 "),nJ=a("a"),CLr=o("FlaxRobertaForMaskedLM"),wLr=o(" (RoBERTa model)"),ALr=l(),I3=a("li"),AMe=a("strong"),yLr=o("roformer"),LLr=o(" \u2014 "),sJ=a("a"),xLr=o("FlaxRoFormerForMaskedLM"),$Lr=o(" (RoFormer model)"),kLr=l(),q3=a("li"),yMe=a("strong"),SLr=o("t5"),RLr=o(" \u2014 "),lJ=a("a"),BLr=o("FlaxT5ForConditionalGeneration"),PLr=o(" (T5 model)"),ILr=l(),N3=a("li"),LMe=a("strong"),qLr=o("wav2vec2"),NLr=o(" \u2014 "),iJ=a("a"),jLr=o("FlaxWav2Vec2ForPreTraining"),DLr=o(" (Wav2Vec2 model)"),GLr=l(),j3=a("li"),xMe=a("strong"),OLr=o("xlm-roberta"),VLr=o(" \u2014 "),dJ=a("a"),XLr=o("FlaxXLMRobertaForMaskedLM"),zLr=o(" (XLM-RoBERTa model)"),QLr=l(),v(D3.$$.fragment),OIe=l(),Pc=a("h2"),G3=a("a"),$Me=a("span"),v(e7.$$.fragment),WLr=l(),kMe=a("span"),HLr=o("FlaxAutoModelForMaskedLM"),VIe=l(),hr=a("div"),v(o7.$$.fragment),ULr=l(),Ic=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),mJ=a("a"),ZLr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),r7=a("p"),r8r=o("This class cannot be instantiated directly using "),SMe=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),Ot=a("div"),v(t7.$$.fragment),s8r=l(),RMe=a("p"),l8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i8r=l(),qc=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),BMe=a("strong"),c8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),f8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),v(O3.$$.fragment),u8r=l(),Or=a("div"),v(a7.$$.fragment),p8r=l(),PMe=a("p"),_8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b8r=l(),pn=a("p"),F8r=o("The model class to instantiate is selected based on the "),IMe=a("code"),v8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),Le=a("ul"),V3=a("li"),jMe=a("strong"),y8r=o("albert"),L8r=o(" \u2014 "),gJ=a("a"),x8r=o("FlaxAlbertForMaskedLM"),$8r=o(" (ALBERT model)"),k8r=l(),X3=a("li"),DMe=a("strong"),S8r=o("bart"),R8r=o(" \u2014 "),hJ=a("a"),B8r=o("FlaxBartForConditionalGeneration"),P8r=o(" (BART model)"),I8r=l(),z3=a("li"),GMe=a("strong"),q8r=o("bert"),N8r=o(" \u2014 "),uJ=a("a"),j8r=o("FlaxBertForMaskedLM"),D8r=o(" (BERT model)"),G8r=l(),Q3=a("li"),OMe=a("strong"),O8r=o("big_bird"),V8r=o(" \u2014 "),pJ=a("a"),X8r=o("FlaxBigBirdForMaskedLM"),z8r=o(" (BigBird model)"),Q8r=l(),W3=a("li"),VMe=a("strong"),W8r=o("distilbert"),H8r=o(" \u2014 "),_J=a("a"),U8r=o("FlaxDistilBertForMaskedLM"),J8r=o(" (DistilBERT model)"),Y8r=l(),H3=a("li"),XMe=a("strong"),K8r=o("electra"),Z8r=o(" \u2014 "),bJ=a("a"),exr=o("FlaxElectraForMaskedLM"),oxr=o(" (ELECTRA model)"),rxr=l(),U3=a("li"),zMe=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),FJ=a("a"),nxr=o("FlaxMBartForConditionalGeneration"),sxr=o(" (mBART model)"),lxr=l(),J3=a("li"),QMe=a("strong"),ixr=o("roberta"),dxr=o(" \u2014 "),vJ=a("a"),cxr=o("FlaxRobertaForMaskedLM"),mxr=o(" (RoBERTa model)"),fxr=l(),Y3=a("li"),WMe=a("strong"),gxr=o("roformer"),hxr=o(" \u2014 "),TJ=a("a"),uxr=o("FlaxRoFormerForMaskedLM"),pxr=o(" (RoFormer model)"),_xr=l(),K3=a("li"),HMe=a("strong"),bxr=o("xlm-roberta"),Fxr=o(" \u2014 "),MJ=a("a"),vxr=o("FlaxXLMRobertaForMaskedLM"),Txr=o(" (XLM-RoBERTa model)"),Mxr=l(),v(Z3.$$.fragment),XIe=l(),Nc=a("h2"),ew=a("a"),UMe=a("span"),v(n7.$$.fragment),Exr=l(),JMe=a("span"),Cxr=o("FlaxAutoModelForSeq2SeqLM"),zIe=l(),ur=a("div"),v(s7.$$.fragment),wxr=l(),jc=a("p"),Axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=a("a"),yxr=o("from_pretrained()"),Lxr=o(" class method or the "),CJ=a("a"),xxr=o("from_config()"),$xr=o(` class
method.`),kxr=l(),l7=a("p"),Sxr=o("This class cannot be instantiated directly using "),YMe=a("code"),Rxr=o("__init__()"),Bxr=o(" (throws an error)."),Pxr=l(),Vt=a("div"),v(i7.$$.fragment),Ixr=l(),KMe=a("p"),qxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nxr=l(),Dc=a("p"),jxr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),Dxr=o("not"),Gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" to load the model weights."),Xxr=l(),v(ow.$$.fragment),zxr=l(),Vr=a("div"),v(d7.$$.fragment),Qxr=l(),e4e=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hxr=l(),_n=a("p"),Uxr=o("The model class to instantiate is selected based on the "),o4e=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(":"),r7r=l(),Se=a("ul"),rw=a("li"),a4e=a("strong"),t7r=o("bart"),a7r=o(" \u2014 "),AJ=a("a"),n7r=o("FlaxBartForConditionalGeneration"),s7r=o(" (BART model)"),l7r=l(),tw=a("li"),n4e=a("strong"),i7r=o("blenderbot"),d7r=o(" \u2014 "),yJ=a("a"),c7r=o("FlaxBlenderbotForConditionalGeneration"),m7r=o(" (Blenderbot model)"),f7r=l(),aw=a("li"),s4e=a("strong"),g7r=o("blenderbot-small"),h7r=o(" \u2014 "),LJ=a("a"),u7r=o("FlaxBlenderbotSmallForConditionalGeneration"),p7r=o(" (BlenderbotSmall model)"),_7r=l(),nw=a("li"),l4e=a("strong"),b7r=o("encoder-decoder"),F7r=o(" \u2014 "),xJ=a("a"),v7r=o("FlaxEncoderDecoderModel"),T7r=o(" (Encoder decoder model)"),M7r=l(),sw=a("li"),i4e=a("strong"),E7r=o("marian"),C7r=o(" \u2014 "),$J=a("a"),w7r=o("FlaxMarianMTModel"),A7r=o(" (Marian model)"),y7r=l(),lw=a("li"),d4e=a("strong"),L7r=o("mbart"),x7r=o(" \u2014 "),kJ=a("a"),$7r=o("FlaxMBartForConditionalGeneration"),k7r=o(" (mBART model)"),S7r=l(),iw=a("li"),c4e=a("strong"),R7r=o("mt5"),B7r=o(" \u2014 "),SJ=a("a"),P7r=o("FlaxMT5ForConditionalGeneration"),I7r=o(" (mT5 model)"),q7r=l(),dw=a("li"),m4e=a("strong"),N7r=o("pegasus"),j7r=o(" \u2014 "),RJ=a("a"),D7r=o("FlaxPegasusForConditionalGeneration"),G7r=o(" (Pegasus model)"),O7r=l(),cw=a("li"),f4e=a("strong"),V7r=o("t5"),X7r=o(" \u2014 "),BJ=a("a"),z7r=o("FlaxT5ForConditionalGeneration"),Q7r=o(" (T5 model)"),W7r=l(),v(mw.$$.fragment),QIe=l(),Gc=a("h2"),fw=a("a"),g4e=a("span"),v(c7.$$.fragment),H7r=l(),h4e=a("span"),U7r=o("FlaxAutoModelForSequenceClassification"),WIe=l(),pr=a("div"),v(m7.$$.fragment),J7r=l(),Oc=a("p"),Y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PJ=a("a"),K7r=o("from_pretrained()"),Z7r=o(" class method or the "),IJ=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),f7=a("p"),t9r=o("This class cannot be instantiated directly using "),u4e=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Xt=a("div"),v(g7.$$.fragment),l9r=l(),p4e=a("p"),i9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d9r=l(),Vc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),m9r=o("not"),f9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),u9r=l(),v(gw.$$.fragment),p9r=l(),Xr=a("div"),v(h7.$$.fragment),_9r=l(),b4e=a("p"),b9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F9r=l(),bn=a("p"),v9r=o("The model class to instantiate is selected based on the "),F4e=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),y9r=l(),xe=a("ul"),hw=a("li"),M4e=a("strong"),L9r=o("albert"),x9r=o(" \u2014 "),NJ=a("a"),$9r=o("FlaxAlbertForSequenceClassification"),k9r=o(" (ALBERT model)"),S9r=l(),uw=a("li"),E4e=a("strong"),R9r=o("bart"),B9r=o(" \u2014 "),jJ=a("a"),P9r=o("FlaxBartForSequenceClassification"),I9r=o(" (BART model)"),q9r=l(),pw=a("li"),C4e=a("strong"),N9r=o("bert"),j9r=o(" \u2014 "),DJ=a("a"),D9r=o("FlaxBertForSequenceClassification"),G9r=o(" (BERT model)"),O9r=l(),_w=a("li"),w4e=a("strong"),V9r=o("big_bird"),X9r=o(" \u2014 "),GJ=a("a"),z9r=o("FlaxBigBirdForSequenceClassification"),Q9r=o(" (BigBird model)"),W9r=l(),bw=a("li"),A4e=a("strong"),H9r=o("distilbert"),U9r=o(" \u2014 "),OJ=a("a"),J9r=o("FlaxDistilBertForSequenceClassification"),Y9r=o(" (DistilBERT model)"),K9r=l(),Fw=a("li"),y4e=a("strong"),Z9r=o("electra"),e$r=o(" \u2014 "),VJ=a("a"),o$r=o("FlaxElectraForSequenceClassification"),r$r=o(" (ELECTRA model)"),t$r=l(),vw=a("li"),L4e=a("strong"),a$r=o("mbart"),n$r=o(" \u2014 "),XJ=a("a"),s$r=o("FlaxMBartForSequenceClassification"),l$r=o(" (mBART model)"),i$r=l(),Tw=a("li"),x4e=a("strong"),d$r=o("roberta"),c$r=o(" \u2014 "),zJ=a("a"),m$r=o("FlaxRobertaForSequenceClassification"),f$r=o(" (RoBERTa model)"),g$r=l(),Mw=a("li"),$4e=a("strong"),h$r=o("roformer"),u$r=o(" \u2014 "),QJ=a("a"),p$r=o("FlaxRoFormerForSequenceClassification"),_$r=o(" (RoFormer model)"),b$r=l(),Ew=a("li"),k4e=a("strong"),F$r=o("xlm-roberta"),v$r=o(" \u2014 "),WJ=a("a"),T$r=o("FlaxXLMRobertaForSequenceClassification"),M$r=o(" (XLM-RoBERTa model)"),E$r=l(),v(Cw.$$.fragment),HIe=l(),Xc=a("h2"),ww=a("a"),S4e=a("span"),v(u7.$$.fragment),C$r=l(),R4e=a("span"),w$r=o("FlaxAutoModelForQuestionAnswering"),UIe=l(),_r=a("div"),v(p7.$$.fragment),A$r=l(),zc=a("p"),y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HJ=a("a"),L$r=o("from_pretrained()"),x$r=o(" class method or the "),UJ=a("a"),$$r=o("from_config()"),k$r=o(` class
method.`),S$r=l(),_7=a("p"),R$r=o("This class cannot be instantiated directly using "),B4e=a("code"),B$r=o("__init__()"),P$r=o(" (throws an error)."),I$r=l(),zt=a("div"),v(b7.$$.fragment),q$r=l(),P4e=a("p"),N$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j$r=l(),Qc=a("p"),D$r=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),G$r=o("not"),O$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),V$r=o("from_pretrained()"),X$r=o(" to load the model weights."),z$r=l(),v(Aw.$$.fragment),Q$r=l(),zr=a("div"),v(F7.$$.fragment),W$r=l(),q4e=a("p"),H$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U$r=l(),Fn=a("p"),J$r=o("The model class to instantiate is selected based on the "),N4e=a("code"),Y$r=o("model_type"),K$r=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),Z$r=o("pretrained_model_name_or_path"),ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(":"),tkr=l(),$e=a("ul"),yw=a("li"),G4e=a("strong"),akr=o("albert"),nkr=o(" \u2014 "),YJ=a("a"),skr=o("FlaxAlbertForQuestionAnswering"),lkr=o(" (ALBERT model)"),ikr=l(),Lw=a("li"),O4e=a("strong"),dkr=o("bart"),ckr=o(" \u2014 "),KJ=a("a"),mkr=o("FlaxBartForQuestionAnswering"),fkr=o(" (BART model)"),gkr=l(),xw=a("li"),V4e=a("strong"),hkr=o("bert"),ukr=o(" \u2014 "),ZJ=a("a"),pkr=o("FlaxBertForQuestionAnswering"),_kr=o(" (BERT model)"),bkr=l(),$w=a("li"),X4e=a("strong"),Fkr=o("big_bird"),vkr=o(" \u2014 "),eY=a("a"),Tkr=o("FlaxBigBirdForQuestionAnswering"),Mkr=o(" (BigBird model)"),Ekr=l(),kw=a("li"),z4e=a("strong"),Ckr=o("distilbert"),wkr=o(" \u2014 "),oY=a("a"),Akr=o("FlaxDistilBertForQuestionAnswering"),ykr=o(" (DistilBERT model)"),Lkr=l(),Sw=a("li"),Q4e=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),rY=a("a"),kkr=o("FlaxElectraForQuestionAnswering"),Skr=o(" (ELECTRA model)"),Rkr=l(),Rw=a("li"),W4e=a("strong"),Bkr=o("mbart"),Pkr=o(" \u2014 "),tY=a("a"),Ikr=o("FlaxMBartForQuestionAnswering"),qkr=o(" (mBART model)"),Nkr=l(),Bw=a("li"),H4e=a("strong"),jkr=o("roberta"),Dkr=o(" \u2014 "),aY=a("a"),Gkr=o("FlaxRobertaForQuestionAnswering"),Okr=o(" (RoBERTa model)"),Vkr=l(),Pw=a("li"),U4e=a("strong"),Xkr=o("roformer"),zkr=o(" \u2014 "),nY=a("a"),Qkr=o("FlaxRoFormerForQuestionAnswering"),Wkr=o(" (RoFormer model)"),Hkr=l(),Iw=a("li"),J4e=a("strong"),Ukr=o("xlm-roberta"),Jkr=o(" \u2014 "),sY=a("a"),Ykr=o("FlaxXLMRobertaForQuestionAnswering"),Kkr=o(" (XLM-RoBERTa model)"),Zkr=l(),v(qw.$$.fragment),JIe=l(),Wc=a("h2"),Nw=a("a"),Y4e=a("span"),v(v7.$$.fragment),eSr=l(),K4e=a("span"),oSr=o("FlaxAutoModelForTokenClassification"),YIe=l(),br=a("div"),v(T7.$$.fragment),rSr=l(),Hc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),iY=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),M7=a("p"),dSr=o("This class cannot be instantiated directly using "),Z4e=a("code"),cSr=o("__init__()"),mSr=o(" (throws an error)."),fSr=l(),Qt=a("div"),v(E7.$$.fragment),gSr=l(),eEe=a("p"),hSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uSr=l(),Uc=a("p"),pSr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),FSr=o("from_pretrained()"),vSr=o(" to load the model weights."),TSr=l(),v(jw.$$.fragment),MSr=l(),Qr=a("div"),v(C7.$$.fragment),ESr=l(),rEe=a("p"),CSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wSr=l(),vn=a("p"),ASr=o("The model class to instantiate is selected based on the "),tEe=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),De=a("ul"),Dw=a("li"),sEe=a("strong"),BSr=o("albert"),PSr=o(" \u2014 "),cY=a("a"),ISr=o("FlaxAlbertForTokenClassification"),qSr=o(" (ALBERT model)"),NSr=l(),Gw=a("li"),lEe=a("strong"),jSr=o("bert"),DSr=o(" \u2014 "),mY=a("a"),GSr=o("FlaxBertForTokenClassification"),OSr=o(" (BERT model)"),VSr=l(),Ow=a("li"),iEe=a("strong"),XSr=o("big_bird"),zSr=o(" \u2014 "),fY=a("a"),QSr=o("FlaxBigBirdForTokenClassification"),WSr=o(" (BigBird model)"),HSr=l(),Vw=a("li"),dEe=a("strong"),USr=o("distilbert"),JSr=o(" \u2014 "),gY=a("a"),YSr=o("FlaxDistilBertForTokenClassification"),KSr=o(" (DistilBERT model)"),ZSr=l(),Xw=a("li"),cEe=a("strong"),eRr=o("electra"),oRr=o(" \u2014 "),hY=a("a"),rRr=o("FlaxElectraForTokenClassification"),tRr=o(" (ELECTRA model)"),aRr=l(),zw=a("li"),mEe=a("strong"),nRr=o("roberta"),sRr=o(" \u2014 "),uY=a("a"),lRr=o("FlaxRobertaForTokenClassification"),iRr=o(" (RoBERTa model)"),dRr=l(),Qw=a("li"),fEe=a("strong"),cRr=o("roformer"),mRr=o(" \u2014 "),pY=a("a"),fRr=o("FlaxRoFormerForTokenClassification"),gRr=o(" (RoFormer model)"),hRr=l(),Ww=a("li"),gEe=a("strong"),uRr=o("xlm-roberta"),pRr=o(" \u2014 "),_Y=a("a"),_Rr=o("FlaxXLMRobertaForTokenClassification"),bRr=o(" (XLM-RoBERTa model)"),FRr=l(),v(Hw.$$.fragment),KIe=l(),Jc=a("h2"),Uw=a("a"),hEe=a("span"),v(w7.$$.fragment),vRr=l(),uEe=a("span"),TRr=o("FlaxAutoModelForMultipleChoice"),ZIe=l(),Fr=a("div"),v(A7.$$.fragment),MRr=l(),Yc=a("p"),ERr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bY=a("a"),CRr=o("from_pretrained()"),wRr=o(" class method or the "),FY=a("a"),ARr=o("from_config()"),yRr=o(` class
method.`),LRr=l(),y7=a("p"),xRr=o("This class cannot be instantiated directly using "),pEe=a("code"),$Rr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),Wt=a("div"),v(L7.$$.fragment),RRr=l(),_Ee=a("p"),BRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PRr=l(),Kc=a("p"),IRr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),qRr=o("not"),NRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),jRr=o("from_pretrained()"),DRr=o(" to load the model weights."),GRr=l(),v(Jw.$$.fragment),ORr=l(),Wr=a("div"),v(x7.$$.fragment),VRr=l(),FEe=a("p"),XRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zRr=l(),Tn=a("p"),QRr=o("The model class to instantiate is selected based on the "),vEe=a("code"),WRr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),YRr=o("pretrained_model_name_or_path"),KRr=o(":"),ZRr=l(),Ge=a("ul"),Yw=a("li"),EEe=a("strong"),eBr=o("albert"),oBr=o(" \u2014 "),TY=a("a"),rBr=o("FlaxAlbertForMultipleChoice"),tBr=o(" (ALBERT model)"),aBr=l(),Kw=a("li"),CEe=a("strong"),nBr=o("bert"),sBr=o(" \u2014 "),MY=a("a"),lBr=o("FlaxBertForMultipleChoice"),iBr=o(" (BERT model)"),dBr=l(),Zw=a("li"),wEe=a("strong"),cBr=o("big_bird"),mBr=o(" \u2014 "),EY=a("a"),fBr=o("FlaxBigBirdForMultipleChoice"),gBr=o(" (BigBird model)"),hBr=l(),eA=a("li"),AEe=a("strong"),uBr=o("distilbert"),pBr=o(" \u2014 "),CY=a("a"),_Br=o("FlaxDistilBertForMultipleChoice"),bBr=o(" (DistilBERT model)"),FBr=l(),oA=a("li"),yEe=a("strong"),vBr=o("electra"),TBr=o(" \u2014 "),wY=a("a"),MBr=o("FlaxElectraForMultipleChoice"),EBr=o(" (ELECTRA model)"),CBr=l(),rA=a("li"),LEe=a("strong"),wBr=o("roberta"),ABr=o(" \u2014 "),AY=a("a"),yBr=o("FlaxRobertaForMultipleChoice"),LBr=o(" (RoBERTa model)"),xBr=l(),tA=a("li"),xEe=a("strong"),$Br=o("roformer"),kBr=o(" \u2014 "),yY=a("a"),SBr=o("FlaxRoFormerForMultipleChoice"),RBr=o(" (RoFormer model)"),BBr=l(),aA=a("li"),$Ee=a("strong"),PBr=o("xlm-roberta"),IBr=o(" \u2014 "),LY=a("a"),qBr=o("FlaxXLMRobertaForMultipleChoice"),NBr=o(" (XLM-RoBERTa model)"),jBr=l(),v(nA.$$.fragment),eqe=l(),Zc=a("h2"),sA=a("a"),kEe=a("span"),v($7.$$.fragment),DBr=l(),SEe=a("span"),GBr=o("FlaxAutoModelForNextSentencePrediction"),oqe=l(),vr=a("div"),v(k7.$$.fragment),OBr=l(),em=a("p"),VBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xY=a("a"),XBr=o("from_pretrained()"),zBr=o(" class method or the "),$Y=a("a"),QBr=o("from_config()"),WBr=o(` class
method.`),HBr=l(),S7=a("p"),UBr=o("This class cannot be instantiated directly using "),REe=a("code"),JBr=o("__init__()"),YBr=o(" (throws an error)."),KBr=l(),Ht=a("div"),v(R7.$$.fragment),ZBr=l(),BEe=a("p"),ePr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oPr=l(),om=a("p"),rPr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),tPr=o("not"),aPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),nPr=o("from_pretrained()"),sPr=o(" to load the model weights."),lPr=l(),v(lA.$$.fragment),iPr=l(),Hr=a("div"),v(B7.$$.fragment),dPr=l(),IEe=a("p"),cPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mPr=l(),Mn=a("p"),fPr=o("The model class to instantiate is selected based on the "),qEe=a("code"),gPr=o("model_type"),hPr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),uPr=o("pretrained_model_name_or_path"),pPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(":"),FPr=l(),DEe=a("ul"),iA=a("li"),GEe=a("strong"),vPr=o("bert"),TPr=o(" \u2014 "),SY=a("a"),MPr=o("FlaxBertForNextSentencePrediction"),EPr=o(" (BERT model)"),CPr=l(),v(dA.$$.fragment),rqe=l(),rm=a("h2"),cA=a("a"),OEe=a("span"),v(P7.$$.fragment),wPr=l(),VEe=a("span"),APr=o("FlaxAutoModelForImageClassification"),tqe=l(),Tr=a("div"),v(I7.$$.fragment),yPr=l(),tm=a("p"),LPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RY=a("a"),xPr=o("from_pretrained()"),$Pr=o(" class method or the "),BY=a("a"),kPr=o("from_config()"),SPr=o(` class
method.`),RPr=l(),q7=a("p"),BPr=o("This class cannot be instantiated directly using "),XEe=a("code"),PPr=o("__init__()"),IPr=o(" (throws an error)."),qPr=l(),Ut=a("div"),v(N7.$$.fragment),NPr=l(),zEe=a("p"),jPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DPr=l(),am=a("p"),GPr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),OPr=o("not"),VPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),XPr=o("from_pretrained()"),zPr=o(" to load the model weights."),QPr=l(),v(mA.$$.fragment),WPr=l(),Ur=a("div"),v(j7.$$.fragment),HPr=l(),WEe=a("p"),UPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JPr=l(),En=a("p"),YPr=o("The model class to instantiate is selected based on the "),HEe=a("code"),KPr=o("model_type"),ZPr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),eIr=o("pretrained_model_name_or_path"),oIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(":"),aIr=l(),D7=a("ul"),fA=a("li"),YEe=a("strong"),nIr=o("beit"),sIr=o(" \u2014 "),IY=a("a"),lIr=o("FlaxBeitForImageClassification"),iIr=o(" (BEiT model)"),dIr=l(),gA=a("li"),KEe=a("strong"),cIr=o("vit"),mIr=o(" \u2014 "),qY=a("a"),fIr=o("FlaxViTForImageClassification"),gIr=o(" (ViT model)"),hIr=l(),v(hA.$$.fragment),aqe=l(),nm=a("h2"),uA=a("a"),ZEe=a("span"),v(G7.$$.fragment),uIr=l(),e5e=a("span"),pIr=o("FlaxAutoModelForVision2Seq"),nqe=l(),Mr=a("div"),v(O7.$$.fragment),_Ir=l(),sm=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NY=a("a"),FIr=o("from_pretrained()"),vIr=o(" class method or the "),jY=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),V7=a("p"),CIr=o("This class cannot be instantiated directly using "),o5e=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Jt=a("div"),v(X7.$$.fragment),LIr=l(),r5e=a("p"),xIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ir=l(),lm=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),BIr=o("from_pretrained()"),PIr=o(" to load the model weights."),IIr=l(),v(pA.$$.fragment),qIr=l(),Jr=a("div"),v(z7.$$.fragment),NIr=l(),a5e=a("p"),jIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DIr=l(),Cn=a("p"),GIr=o("The model class to instantiate is selected based on the "),n5e=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),i5e=a("ul"),_A=a("li"),d5e=a("strong"),UIr=o("vision-encoder-decoder"),JIr=o(" \u2014 "),GY=a("a"),YIr=o("FlaxVisionEncoderDecoderModel"),KIr=o(" (Vision Encoder decoder model)"),ZIr=l(),v(bA.$$.fragment),this.h()},l(m){const _=i0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var Q7=s(u);f=n(Q7,"A",{id:!0,class:!0,href:!0});var c5e=s(f);p=n(c5e,"SPAN",{});var m5e=s(p);T(d.$$.fragment,m5e),m5e.forEach(t),c5e.forEach(t),h=i(Q7),Mo=n(Q7,"SPAN",{});var f5e=s(Mo);li=r(f5e,"Auto Classes"),f5e.forEach(t),Q7.forEach(t),mm=i(m),et=n(m,"P",{});var W7=s(et);ii=r(W7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(W7,"CODE",{});var g5e=s(di);q6=r(g5e,"from_pretrained()"),g5e.forEach(t),fm=r(W7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),W7.forEach(t),qe=i(m),Xe=n(m,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var h5e=s(An);N6=r(h5e,"AutoConfig"),h5e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var u5e=s(Ln);j6=r(u5e,"AutoModel"),u5e.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var p5e=s(xn);D6=r(p5e,"AutoTokenizer"),p5e.forEach(t),fi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),gm=i(m),T(Ma.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var H7=s(Ae);a$=r(H7,"will create a model that is an instance of "),gi=n(H7,"A",{href:!0});var _5e=s(gi);n$=r(_5e,"BertModel"),_5e.forEach(t),s$=r(H7,"."),H7.forEach(t),Eo=i(m),Ea=n(m,"P",{});var U7=s(Ea);l$=r(U7,"There is one class of "),hm=n(U7,"CODE",{});var b5e=s(hm);i$=r(b5e,"AutoModel"),b5e.forEach(t),hje=r(U7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),U7.forEach(t),tPe=i(m),hi=n(m,"H2",{class:!0});var J7=s(hi);um=n(J7,"A",{id:!0,class:!0,href:!0});var F5e=s(um);PZ=n(F5e,"SPAN",{});var v5e=s(PZ);T(G6.$$.fragment,v5e),v5e.forEach(t),F5e.forEach(t),uje=i(J7),IZ=n(J7,"SPAN",{});var T5e=s(IZ);pje=r(T5e,"Extending the Auto Classes"),T5e.forEach(t),J7.forEach(t),aPe=i(m),$n=n(m,"P",{});var im=s($n);_je=r(im,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qZ=n(im,"CODE",{});var M5e=s(qZ);bje=r(M5e,"NewModel"),M5e.forEach(t),Fje=r(im,", make sure you have a "),NZ=n(im,"CODE",{});var E5e=s(NZ);vje=r(E5e,"NewModelConfig"),E5e.forEach(t),Tje=r(im,` then you can add those to the auto
classes like this:`),im.forEach(t),nPe=i(m),T(O6.$$.fragment,m),sPe=i(m),d$=n(m,"P",{});var C5e=s(d$);Mje=r(C5e,"You will then be able to use the auto classes like you would usually do!"),C5e.forEach(t),lPe=i(m),T(pm.$$.fragment,m),iPe=i(m),ui=n(m,"H2",{class:!0});var Y7=s(ui);_m=n(Y7,"A",{id:!0,class:!0,href:!0});var w5e=s(_m);jZ=n(w5e,"SPAN",{});var A5e=s(jZ);T(V6.$$.fragment,A5e),A5e.forEach(t),w5e.forEach(t),Eje=i(Y7),DZ=n(Y7,"SPAN",{});var y5e=s(DZ);Cje=r(y5e,"AutoConfig"),y5e.forEach(t),Y7.forEach(t),dPe=i(m),Co=n(m,"DIV",{class:!0});var Kr=s(Co);T(X6.$$.fragment,Kr),wje=i(Kr),z6=n(Kr,"P",{});var K7=s(z6);Aje=r(K7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c$=n(K7,"A",{href:!0});var L5e=s(c$);yje=r(L5e,"from_pretrained()"),L5e.forEach(t),Lje=r(K7," class method."),K7.forEach(t),xje=i(Kr),Q6=n(Kr,"P",{});var Z7=s(Q6);$je=r(Z7,"This class cannot be instantiated directly using "),GZ=n(Z7,"CODE",{});var x5e=s(GZ);kje=r(x5e,"__init__()"),x5e.forEach(t),Sje=r(Z7," (throws an error)."),Z7.forEach(t),Rje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(W6.$$.fragment,Zr),Bje=i(Zr),OZ=n(Zr,"P",{});var $5e=s(OZ);Pje=r($5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$5e.forEach(t),Ije=i(Zr),pi=n(Zr,"P",{});var dm=s(pi);qje=r(dm,"The configuration class to instantiate is selected based on the "),VZ=n(dm,"CODE",{});var k5e=s(VZ);Nje=r(k5e,"model_type"),k5e.forEach(t),jje=r(dm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XZ=n(dm,"CODE",{});var S5e=s(XZ);Dje=r(S5e,"pretrained_model_name_or_path"),S5e.forEach(t),Gje=r(dm,":"),dm.forEach(t),Oje=i(Zr),y=n(Zr,"UL",{});var L=s(y);bm=n(L,"LI",{});var FA=s(bm);zZ=n(FA,"STRONG",{});var R5e=s(zZ);Vje=r(R5e,"albert"),R5e.forEach(t),Xje=r(FA," \u2014 "),m$=n(FA,"A",{href:!0});var B5e=s(m$);zje=r(B5e,"AlbertConfig"),B5e.forEach(t),Qje=r(FA," (ALBERT model)"),FA.forEach(t),Wje=i(L),Fm=n(L,"LI",{});var vA=s(Fm);QZ=n(vA,"STRONG",{});var P5e=s(QZ);Hje=r(P5e,"bart"),P5e.forEach(t),Uje=r(vA," \u2014 "),f$=n(vA,"A",{href:!0});var I5e=s(f$);Jje=r(I5e,"BartConfig"),I5e.forEach(t),Yje=r(vA," (BART model)"),vA.forEach(t),Kje=i(L),vm=n(L,"LI",{});var TA=s(vm);WZ=n(TA,"STRONG",{});var q5e=s(WZ);Zje=r(q5e,"beit"),q5e.forEach(t),eDe=r(TA," \u2014 "),g$=n(TA,"A",{href:!0});var N5e=s(g$);oDe=r(N5e,"BeitConfig"),N5e.forEach(t),rDe=r(TA," (BEiT model)"),TA.forEach(t),tDe=i(L),Tm=n(L,"LI",{});var MA=s(Tm);HZ=n(MA,"STRONG",{});var j5e=s(HZ);aDe=r(j5e,"bert"),j5e.forEach(t),nDe=r(MA," \u2014 "),h$=n(MA,"A",{href:!0});var D5e=s(h$);sDe=r(D5e,"BertConfig"),D5e.forEach(t),lDe=r(MA," (BERT model)"),MA.forEach(t),iDe=i(L),Mm=n(L,"LI",{});var EA=s(Mm);UZ=n(EA,"STRONG",{});var G5e=s(UZ);dDe=r(G5e,"bert-generation"),G5e.forEach(t),cDe=r(EA," \u2014 "),u$=n(EA,"A",{href:!0});var O5e=s(u$);mDe=r(O5e,"BertGenerationConfig"),O5e.forEach(t),fDe=r(EA," (Bert Generation model)"),EA.forEach(t),gDe=i(L),Em=n(L,"LI",{});var CA=s(Em);JZ=n(CA,"STRONG",{});var V5e=s(JZ);hDe=r(V5e,"big_bird"),V5e.forEach(t),uDe=r(CA," \u2014 "),p$=n(CA,"A",{href:!0});var X5e=s(p$);pDe=r(X5e,"BigBirdConfig"),X5e.forEach(t),_De=r(CA," (BigBird model)"),CA.forEach(t),bDe=i(L),Cm=n(L,"LI",{});var wA=s(Cm);YZ=n(wA,"STRONG",{});var z5e=s(YZ);FDe=r(z5e,"bigbird_pegasus"),z5e.forEach(t),vDe=r(wA," \u2014 "),_$=n(wA,"A",{href:!0});var Q5e=s(_$);TDe=r(Q5e,"BigBirdPegasusConfig"),Q5e.forEach(t),MDe=r(wA," (BigBirdPegasus model)"),wA.forEach(t),EDe=i(L),wm=n(L,"LI",{});var AA=s(wm);KZ=n(AA,"STRONG",{});var W5e=s(KZ);CDe=r(W5e,"blenderbot"),W5e.forEach(t),wDe=r(AA," \u2014 "),b$=n(AA,"A",{href:!0});var H5e=s(b$);ADe=r(H5e,"BlenderbotConfig"),H5e.forEach(t),yDe=r(AA," (Blenderbot model)"),AA.forEach(t),LDe=i(L),Am=n(L,"LI",{});var yA=s(Am);ZZ=n(yA,"STRONG",{});var U5e=s(ZZ);xDe=r(U5e,"blenderbot-small"),U5e.forEach(t),$De=r(yA," \u2014 "),F$=n(yA,"A",{href:!0});var J5e=s(F$);kDe=r(J5e,"BlenderbotSmallConfig"),J5e.forEach(t),SDe=r(yA," (BlenderbotSmall model)"),yA.forEach(t),RDe=i(L),ym=n(L,"LI",{});var LA=s(ym);eee=n(LA,"STRONG",{});var Y5e=s(eee);BDe=r(Y5e,"camembert"),Y5e.forEach(t),PDe=r(LA," \u2014 "),v$=n(LA,"A",{href:!0});var K5e=s(v$);IDe=r(K5e,"CamembertConfig"),K5e.forEach(t),qDe=r(LA," (CamemBERT model)"),LA.forEach(t),NDe=i(L),Lm=n(L,"LI",{});var xA=s(Lm);oee=n(xA,"STRONG",{});var Z5e=s(oee);jDe=r(Z5e,"canine"),Z5e.forEach(t),DDe=r(xA," \u2014 "),T$=n(xA,"A",{href:!0});var eCe=s(T$);GDe=r(eCe,"CanineConfig"),eCe.forEach(t),ODe=r(xA," (Canine model)"),xA.forEach(t),VDe=i(L),xm=n(L,"LI",{});var $A=s(xm);ree=n($A,"STRONG",{});var oCe=s(ree);XDe=r(oCe,"clip"),oCe.forEach(t),zDe=r($A," \u2014 "),M$=n($A,"A",{href:!0});var rCe=s(M$);QDe=r(rCe,"CLIPConfig"),rCe.forEach(t),WDe=r($A," (CLIP model)"),$A.forEach(t),HDe=i(L),$m=n(L,"LI",{});var kA=s($m);tee=n(kA,"STRONG",{});var tCe=s(tee);UDe=r(tCe,"convbert"),tCe.forEach(t),JDe=r(kA," \u2014 "),E$=n(kA,"A",{href:!0});var aCe=s(E$);YDe=r(aCe,"ConvBertConfig"),aCe.forEach(t),KDe=r(kA," (ConvBERT model)"),kA.forEach(t),ZDe=i(L),km=n(L,"LI",{});var SA=s(km);aee=n(SA,"STRONG",{});var nCe=s(aee);eGe=r(nCe,"convnext"),nCe.forEach(t),oGe=r(SA," \u2014 "),C$=n(SA,"A",{href:!0});var sCe=s(C$);rGe=r(sCe,"ConvNextConfig"),sCe.forEach(t),tGe=r(SA," (ConvNext model)"),SA.forEach(t),aGe=i(L),Sm=n(L,"LI",{});var RA=s(Sm);nee=n(RA,"STRONG",{});var lCe=s(nee);nGe=r(lCe,"ctrl"),lCe.forEach(t),sGe=r(RA," \u2014 "),w$=n(RA,"A",{href:!0});var iCe=s(w$);lGe=r(iCe,"CTRLConfig"),iCe.forEach(t),iGe=r(RA," (CTRL model)"),RA.forEach(t),dGe=i(L),Rm=n(L,"LI",{});var BA=s(Rm);see=n(BA,"STRONG",{});var dCe=s(see);cGe=r(dCe,"data2vec-audio"),dCe.forEach(t),mGe=r(BA," \u2014 "),A$=n(BA,"A",{href:!0});var cCe=s(A$);fGe=r(cCe,"Data2VecAudioConfig"),cCe.forEach(t),gGe=r(BA," (Data2VecAudio model)"),BA.forEach(t),hGe=i(L),Bm=n(L,"LI",{});var PA=s(Bm);lee=n(PA,"STRONG",{});var mCe=s(lee);uGe=r(mCe,"data2vec-text"),mCe.forEach(t),pGe=r(PA," \u2014 "),y$=n(PA,"A",{href:!0});var fCe=s(y$);_Ge=r(fCe,"Data2VecTextConfig"),fCe.forEach(t),bGe=r(PA," (Data2VecText model)"),PA.forEach(t),FGe=i(L),Pm=n(L,"LI",{});var IA=s(Pm);iee=n(IA,"STRONG",{});var gCe=s(iee);vGe=r(gCe,"data2vec-vision"),gCe.forEach(t),TGe=r(IA," \u2014 "),L$=n(IA,"A",{href:!0});var hCe=s(L$);MGe=r(hCe,"Data2VecVisionConfig"),hCe.forEach(t),EGe=r(IA," (Data2VecVision model)"),IA.forEach(t),CGe=i(L),Im=n(L,"LI",{});var qA=s(Im);dee=n(qA,"STRONG",{});var uCe=s(dee);wGe=r(uCe,"deberta"),uCe.forEach(t),AGe=r(qA," \u2014 "),x$=n(qA,"A",{href:!0});var pCe=s(x$);yGe=r(pCe,"DebertaConfig"),pCe.forEach(t),LGe=r(qA," (DeBERTa model)"),qA.forEach(t),xGe=i(L),qm=n(L,"LI",{});var NA=s(qm);cee=n(NA,"STRONG",{});var _Ce=s(cee);$Ge=r(_Ce,"deberta-v2"),_Ce.forEach(t),kGe=r(NA," \u2014 "),$$=n(NA,"A",{href:!0});var bCe=s($$);SGe=r(bCe,"DebertaV2Config"),bCe.forEach(t),RGe=r(NA," (DeBERTa-v2 model)"),NA.forEach(t),BGe=i(L),Nm=n(L,"LI",{});var jA=s(Nm);mee=n(jA,"STRONG",{});var FCe=s(mee);PGe=r(FCe,"decision_transformer"),FCe.forEach(t),IGe=r(jA," \u2014 "),k$=n(jA,"A",{href:!0});var vCe=s(k$);qGe=r(vCe,"DecisionTransformerConfig"),vCe.forEach(t),NGe=r(jA," (Decision Transformer model)"),jA.forEach(t),jGe=i(L),jm=n(L,"LI",{});var DA=s(jm);fee=n(DA,"STRONG",{});var TCe=s(fee);DGe=r(TCe,"deit"),TCe.forEach(t),GGe=r(DA," \u2014 "),S$=n(DA,"A",{href:!0});var MCe=s(S$);OGe=r(MCe,"DeiTConfig"),MCe.forEach(t),VGe=r(DA," (DeiT model)"),DA.forEach(t),XGe=i(L),Dm=n(L,"LI",{});var GA=s(Dm);gee=n(GA,"STRONG",{});var ECe=s(gee);zGe=r(ECe,"detr"),ECe.forEach(t),QGe=r(GA," \u2014 "),R$=n(GA,"A",{href:!0});var oqr=s(R$);WGe=r(oqr,"DetrConfig"),oqr.forEach(t),HGe=r(GA," (DETR model)"),GA.forEach(t),UGe=i(L),Gm=n(L,"LI",{});var CCe=s(Gm);hee=n(CCe,"STRONG",{});var rqr=s(hee);JGe=r(rqr,"distilbert"),rqr.forEach(t),YGe=r(CCe," \u2014 "),B$=n(CCe,"A",{href:!0});var tqr=s(B$);KGe=r(tqr,"DistilBertConfig"),tqr.forEach(t),ZGe=r(CCe," (DistilBERT model)"),CCe.forEach(t),eOe=i(L),Om=n(L,"LI",{});var wCe=s(Om);uee=n(wCe,"STRONG",{});var aqr=s(uee);oOe=r(aqr,"dpr"),aqr.forEach(t),rOe=r(wCe," \u2014 "),P$=n(wCe,"A",{href:!0});var nqr=s(P$);tOe=r(nqr,"DPRConfig"),nqr.forEach(t),aOe=r(wCe," (DPR model)"),wCe.forEach(t),nOe=i(L),Vm=n(L,"LI",{});var ACe=s(Vm);pee=n(ACe,"STRONG",{});var sqr=s(pee);sOe=r(sqr,"dpt"),sqr.forEach(t),lOe=r(ACe," \u2014 "),I$=n(ACe,"A",{href:!0});var lqr=s(I$);iOe=r(lqr,"DPTConfig"),lqr.forEach(t),dOe=r(ACe," (DPT model)"),ACe.forEach(t),cOe=i(L),Xm=n(L,"LI",{});var yCe=s(Xm);_ee=n(yCe,"STRONG",{});var iqr=s(_ee);mOe=r(iqr,"electra"),iqr.forEach(t),fOe=r(yCe," \u2014 "),q$=n(yCe,"A",{href:!0});var dqr=s(q$);gOe=r(dqr,"ElectraConfig"),dqr.forEach(t),hOe=r(yCe," (ELECTRA model)"),yCe.forEach(t),uOe=i(L),zm=n(L,"LI",{});var LCe=s(zm);bee=n(LCe,"STRONG",{});var cqr=s(bee);pOe=r(cqr,"encoder-decoder"),cqr.forEach(t),_Oe=r(LCe," \u2014 "),N$=n(LCe,"A",{href:!0});var mqr=s(N$);bOe=r(mqr,"EncoderDecoderConfig"),mqr.forEach(t),FOe=r(LCe," (Encoder decoder model)"),LCe.forEach(t),vOe=i(L),Qm=n(L,"LI",{});var xCe=s(Qm);Fee=n(xCe,"STRONG",{});var fqr=s(Fee);TOe=r(fqr,"flaubert"),fqr.forEach(t),MOe=r(xCe," \u2014 "),j$=n(xCe,"A",{href:!0});var gqr=s(j$);EOe=r(gqr,"FlaubertConfig"),gqr.forEach(t),COe=r(xCe," (FlauBERT model)"),xCe.forEach(t),wOe=i(L),Wm=n(L,"LI",{});var $Ce=s(Wm);vee=n($Ce,"STRONG",{});var hqr=s(vee);AOe=r(hqr,"fnet"),hqr.forEach(t),yOe=r($Ce," \u2014 "),D$=n($Ce,"A",{href:!0});var uqr=s(D$);LOe=r(uqr,"FNetConfig"),uqr.forEach(t),xOe=r($Ce," (FNet model)"),$Ce.forEach(t),$Oe=i(L),Hm=n(L,"LI",{});var kCe=s(Hm);Tee=n(kCe,"STRONG",{});var pqr=s(Tee);kOe=r(pqr,"fsmt"),pqr.forEach(t),SOe=r(kCe," \u2014 "),G$=n(kCe,"A",{href:!0});var _qr=s(G$);ROe=r(_qr,"FSMTConfig"),_qr.forEach(t),BOe=r(kCe," (FairSeq Machine-Translation model)"),kCe.forEach(t),POe=i(L),Um=n(L,"LI",{});var SCe=s(Um);Mee=n(SCe,"STRONG",{});var bqr=s(Mee);IOe=r(bqr,"funnel"),bqr.forEach(t),qOe=r(SCe," \u2014 "),O$=n(SCe,"A",{href:!0});var Fqr=s(O$);NOe=r(Fqr,"FunnelConfig"),Fqr.forEach(t),jOe=r(SCe," (Funnel Transformer model)"),SCe.forEach(t),DOe=i(L),Jm=n(L,"LI",{});var RCe=s(Jm);Eee=n(RCe,"STRONG",{});var vqr=s(Eee);GOe=r(vqr,"glpn"),vqr.forEach(t),OOe=r(RCe," \u2014 "),V$=n(RCe,"A",{href:!0});var Tqr=s(V$);VOe=r(Tqr,"GLPNConfig"),Tqr.forEach(t),XOe=r(RCe," (GLPN model)"),RCe.forEach(t),zOe=i(L),Ym=n(L,"LI",{});var BCe=s(Ym);Cee=n(BCe,"STRONG",{});var Mqr=s(Cee);QOe=r(Mqr,"gpt2"),Mqr.forEach(t),WOe=r(BCe," \u2014 "),X$=n(BCe,"A",{href:!0});var Eqr=s(X$);HOe=r(Eqr,"GPT2Config"),Eqr.forEach(t),UOe=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),JOe=i(L),Km=n(L,"LI",{});var PCe=s(Km);wee=n(PCe,"STRONG",{});var Cqr=s(wee);YOe=r(Cqr,"gpt_neo"),Cqr.forEach(t),KOe=r(PCe," \u2014 "),z$=n(PCe,"A",{href:!0});var wqr=s(z$);ZOe=r(wqr,"GPTNeoConfig"),wqr.forEach(t),eVe=r(PCe," (GPT Neo model)"),PCe.forEach(t),oVe=i(L),Zm=n(L,"LI",{});var ICe=s(Zm);Aee=n(ICe,"STRONG",{});var Aqr=s(Aee);rVe=r(Aqr,"gptj"),Aqr.forEach(t),tVe=r(ICe," \u2014 "),Q$=n(ICe,"A",{href:!0});var yqr=s(Q$);aVe=r(yqr,"GPTJConfig"),yqr.forEach(t),nVe=r(ICe," (GPT-J model)"),ICe.forEach(t),sVe=i(L),ef=n(L,"LI",{});var qCe=s(ef);yee=n(qCe,"STRONG",{});var Lqr=s(yee);lVe=r(Lqr,"hubert"),Lqr.forEach(t),iVe=r(qCe," \u2014 "),W$=n(qCe,"A",{href:!0});var xqr=s(W$);dVe=r(xqr,"HubertConfig"),xqr.forEach(t),cVe=r(qCe," (Hubert model)"),qCe.forEach(t),mVe=i(L),of=n(L,"LI",{});var NCe=s(of);Lee=n(NCe,"STRONG",{});var $qr=s(Lee);fVe=r($qr,"ibert"),$qr.forEach(t),gVe=r(NCe," \u2014 "),H$=n(NCe,"A",{href:!0});var kqr=s(H$);hVe=r(kqr,"IBertConfig"),kqr.forEach(t),uVe=r(NCe," (I-BERT model)"),NCe.forEach(t),pVe=i(L),rf=n(L,"LI",{});var jCe=s(rf);xee=n(jCe,"STRONG",{});var Sqr=s(xee);_Ve=r(Sqr,"imagegpt"),Sqr.forEach(t),bVe=r(jCe," \u2014 "),U$=n(jCe,"A",{href:!0});var Rqr=s(U$);FVe=r(Rqr,"ImageGPTConfig"),Rqr.forEach(t),vVe=r(jCe," (ImageGPT model)"),jCe.forEach(t),TVe=i(L),tf=n(L,"LI",{});var DCe=s(tf);$ee=n(DCe,"STRONG",{});var Bqr=s($ee);MVe=r(Bqr,"layoutlm"),Bqr.forEach(t),EVe=r(DCe," \u2014 "),J$=n(DCe,"A",{href:!0});var Pqr=s(J$);CVe=r(Pqr,"LayoutLMConfig"),Pqr.forEach(t),wVe=r(DCe," (LayoutLM model)"),DCe.forEach(t),AVe=i(L),af=n(L,"LI",{});var GCe=s(af);kee=n(GCe,"STRONG",{});var Iqr=s(kee);yVe=r(Iqr,"layoutlmv2"),Iqr.forEach(t),LVe=r(GCe," \u2014 "),Y$=n(GCe,"A",{href:!0});var qqr=s(Y$);xVe=r(qqr,"LayoutLMv2Config"),qqr.forEach(t),$Ve=r(GCe," (LayoutLMv2 model)"),GCe.forEach(t),kVe=i(L),nf=n(L,"LI",{});var OCe=s(nf);See=n(OCe,"STRONG",{});var Nqr=s(See);SVe=r(Nqr,"led"),Nqr.forEach(t),RVe=r(OCe," \u2014 "),K$=n(OCe,"A",{href:!0});var jqr=s(K$);BVe=r(jqr,"LEDConfig"),jqr.forEach(t),PVe=r(OCe," (LED model)"),OCe.forEach(t),IVe=i(L),sf=n(L,"LI",{});var VCe=s(sf);Ree=n(VCe,"STRONG",{});var Dqr=s(Ree);qVe=r(Dqr,"longformer"),Dqr.forEach(t),NVe=r(VCe," \u2014 "),Z$=n(VCe,"A",{href:!0});var Gqr=s(Z$);jVe=r(Gqr,"LongformerConfig"),Gqr.forEach(t),DVe=r(VCe," (Longformer model)"),VCe.forEach(t),GVe=i(L),lf=n(L,"LI",{});var XCe=s(lf);Bee=n(XCe,"STRONG",{});var Oqr=s(Bee);OVe=r(Oqr,"luke"),Oqr.forEach(t),VVe=r(XCe," \u2014 "),ek=n(XCe,"A",{href:!0});var Vqr=s(ek);XVe=r(Vqr,"LukeConfig"),Vqr.forEach(t),zVe=r(XCe," (LUKE model)"),XCe.forEach(t),QVe=i(L),df=n(L,"LI",{});var zCe=s(df);Pee=n(zCe,"STRONG",{});var Xqr=s(Pee);WVe=r(Xqr,"lxmert"),Xqr.forEach(t),HVe=r(zCe," \u2014 "),ok=n(zCe,"A",{href:!0});var zqr=s(ok);UVe=r(zqr,"LxmertConfig"),zqr.forEach(t),JVe=r(zCe," (LXMERT model)"),zCe.forEach(t),YVe=i(L),cf=n(L,"LI",{});var QCe=s(cf);Iee=n(QCe,"STRONG",{});var Qqr=s(Iee);KVe=r(Qqr,"m2m_100"),Qqr.forEach(t),ZVe=r(QCe," \u2014 "),rk=n(QCe,"A",{href:!0});var Wqr=s(rk);eXe=r(Wqr,"M2M100Config"),Wqr.forEach(t),oXe=r(QCe," (M2M100 model)"),QCe.forEach(t),rXe=i(L),mf=n(L,"LI",{});var WCe=s(mf);qee=n(WCe,"STRONG",{});var Hqr=s(qee);tXe=r(Hqr,"marian"),Hqr.forEach(t),aXe=r(WCe," \u2014 "),tk=n(WCe,"A",{href:!0});var Uqr=s(tk);nXe=r(Uqr,"MarianConfig"),Uqr.forEach(t),sXe=r(WCe," (Marian model)"),WCe.forEach(t),lXe=i(L),ff=n(L,"LI",{});var HCe=s(ff);Nee=n(HCe,"STRONG",{});var Jqr=s(Nee);iXe=r(Jqr,"maskformer"),Jqr.forEach(t),dXe=r(HCe," \u2014 "),ak=n(HCe,"A",{href:!0});var Yqr=s(ak);cXe=r(Yqr,"MaskFormerConfig"),Yqr.forEach(t),mXe=r(HCe," (MaskFormer model)"),HCe.forEach(t),fXe=i(L),gf=n(L,"LI",{});var UCe=s(gf);jee=n(UCe,"STRONG",{});var Kqr=s(jee);gXe=r(Kqr,"mbart"),Kqr.forEach(t),hXe=r(UCe," \u2014 "),nk=n(UCe,"A",{href:!0});var Zqr=s(nk);uXe=r(Zqr,"MBartConfig"),Zqr.forEach(t),pXe=r(UCe," (mBART model)"),UCe.forEach(t),_Xe=i(L),hf=n(L,"LI",{});var JCe=s(hf);Dee=n(JCe,"STRONG",{});var eNr=s(Dee);bXe=r(eNr,"megatron-bert"),eNr.forEach(t),FXe=r(JCe," \u2014 "),sk=n(JCe,"A",{href:!0});var oNr=s(sk);vXe=r(oNr,"MegatronBertConfig"),oNr.forEach(t),TXe=r(JCe," (MegatronBert model)"),JCe.forEach(t),MXe=i(L),uf=n(L,"LI",{});var YCe=s(uf);Gee=n(YCe,"STRONG",{});var rNr=s(Gee);EXe=r(rNr,"mobilebert"),rNr.forEach(t),CXe=r(YCe," \u2014 "),lk=n(YCe,"A",{href:!0});var tNr=s(lk);wXe=r(tNr,"MobileBertConfig"),tNr.forEach(t),AXe=r(YCe," (MobileBERT model)"),YCe.forEach(t),yXe=i(L),pf=n(L,"LI",{});var KCe=s(pf);Oee=n(KCe,"STRONG",{});var aNr=s(Oee);LXe=r(aNr,"mpnet"),aNr.forEach(t),xXe=r(KCe," \u2014 "),ik=n(KCe,"A",{href:!0});var nNr=s(ik);$Xe=r(nNr,"MPNetConfig"),nNr.forEach(t),kXe=r(KCe," (MPNet model)"),KCe.forEach(t),SXe=i(L),_f=n(L,"LI",{});var ZCe=s(_f);Vee=n(ZCe,"STRONG",{});var sNr=s(Vee);RXe=r(sNr,"mt5"),sNr.forEach(t),BXe=r(ZCe," \u2014 "),dk=n(ZCe,"A",{href:!0});var lNr=s(dk);PXe=r(lNr,"MT5Config"),lNr.forEach(t),IXe=r(ZCe," (mT5 model)"),ZCe.forEach(t),qXe=i(L),bf=n(L,"LI",{});var e3e=s(bf);Xee=n(e3e,"STRONG",{});var iNr=s(Xee);NXe=r(iNr,"nystromformer"),iNr.forEach(t),jXe=r(e3e," \u2014 "),ck=n(e3e,"A",{href:!0});var dNr=s(ck);DXe=r(dNr,"NystromformerConfig"),dNr.forEach(t),GXe=r(e3e," (Nystromformer model)"),e3e.forEach(t),OXe=i(L),Ff=n(L,"LI",{});var o3e=s(Ff);zee=n(o3e,"STRONG",{});var cNr=s(zee);VXe=r(cNr,"openai-gpt"),cNr.forEach(t),XXe=r(o3e," \u2014 "),mk=n(o3e,"A",{href:!0});var mNr=s(mk);zXe=r(mNr,"OpenAIGPTConfig"),mNr.forEach(t),QXe=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),WXe=i(L),vf=n(L,"LI",{});var r3e=s(vf);Qee=n(r3e,"STRONG",{});var fNr=s(Qee);HXe=r(fNr,"pegasus"),fNr.forEach(t),UXe=r(r3e," \u2014 "),fk=n(r3e,"A",{href:!0});var gNr=s(fk);JXe=r(gNr,"PegasusConfig"),gNr.forEach(t),YXe=r(r3e," (Pegasus model)"),r3e.forEach(t),KXe=i(L),Tf=n(L,"LI",{});var t3e=s(Tf);Wee=n(t3e,"STRONG",{});var hNr=s(Wee);ZXe=r(hNr,"perceiver"),hNr.forEach(t),eze=r(t3e," \u2014 "),gk=n(t3e,"A",{href:!0});var uNr=s(gk);oze=r(uNr,"PerceiverConfig"),uNr.forEach(t),rze=r(t3e," (Perceiver model)"),t3e.forEach(t),tze=i(L),Mf=n(L,"LI",{});var a3e=s(Mf);Hee=n(a3e,"STRONG",{});var pNr=s(Hee);aze=r(pNr,"plbart"),pNr.forEach(t),nze=r(a3e," \u2014 "),hk=n(a3e,"A",{href:!0});var _Nr=s(hk);sze=r(_Nr,"PLBartConfig"),_Nr.forEach(t),lze=r(a3e," (PLBart model)"),a3e.forEach(t),ize=i(L),Ef=n(L,"LI",{});var n3e=s(Ef);Uee=n(n3e,"STRONG",{});var bNr=s(Uee);dze=r(bNr,"poolformer"),bNr.forEach(t),cze=r(n3e," \u2014 "),uk=n(n3e,"A",{href:!0});var FNr=s(uk);mze=r(FNr,"PoolFormerConfig"),FNr.forEach(t),fze=r(n3e," (PoolFormer model)"),n3e.forEach(t),gze=i(L),Cf=n(L,"LI",{});var s3e=s(Cf);Jee=n(s3e,"STRONG",{});var vNr=s(Jee);hze=r(vNr,"prophetnet"),vNr.forEach(t),uze=r(s3e," \u2014 "),pk=n(s3e,"A",{href:!0});var TNr=s(pk);pze=r(TNr,"ProphetNetConfig"),TNr.forEach(t),_ze=r(s3e," (ProphetNet model)"),s3e.forEach(t),bze=i(L),wf=n(L,"LI",{});var l3e=s(wf);Yee=n(l3e,"STRONG",{});var MNr=s(Yee);Fze=r(MNr,"qdqbert"),MNr.forEach(t),vze=r(l3e," \u2014 "),_k=n(l3e,"A",{href:!0});var ENr=s(_k);Tze=r(ENr,"QDQBertConfig"),ENr.forEach(t),Mze=r(l3e," (QDQBert model)"),l3e.forEach(t),Eze=i(L),Af=n(L,"LI",{});var i3e=s(Af);Kee=n(i3e,"STRONG",{});var CNr=s(Kee);Cze=r(CNr,"rag"),CNr.forEach(t),wze=r(i3e," \u2014 "),bk=n(i3e,"A",{href:!0});var wNr=s(bk);Aze=r(wNr,"RagConfig"),wNr.forEach(t),yze=r(i3e," (RAG model)"),i3e.forEach(t),Lze=i(L),yf=n(L,"LI",{});var d3e=s(yf);Zee=n(d3e,"STRONG",{});var ANr=s(Zee);xze=r(ANr,"realm"),ANr.forEach(t),$ze=r(d3e," \u2014 "),Fk=n(d3e,"A",{href:!0});var yNr=s(Fk);kze=r(yNr,"RealmConfig"),yNr.forEach(t),Sze=r(d3e," (Realm model)"),d3e.forEach(t),Rze=i(L),Lf=n(L,"LI",{});var c3e=s(Lf);eoe=n(c3e,"STRONG",{});var LNr=s(eoe);Bze=r(LNr,"reformer"),LNr.forEach(t),Pze=r(c3e," \u2014 "),vk=n(c3e,"A",{href:!0});var xNr=s(vk);Ize=r(xNr,"ReformerConfig"),xNr.forEach(t),qze=r(c3e," (Reformer model)"),c3e.forEach(t),Nze=i(L),xf=n(L,"LI",{});var m3e=s(xf);ooe=n(m3e,"STRONG",{});var $Nr=s(ooe);jze=r($Nr,"regnet"),$Nr.forEach(t),Dze=r(m3e," \u2014 "),Tk=n(m3e,"A",{href:!0});var kNr=s(Tk);Gze=r(kNr,"RegNetConfig"),kNr.forEach(t),Oze=r(m3e," (RegNet model)"),m3e.forEach(t),Vze=i(L),$f=n(L,"LI",{});var f3e=s($f);roe=n(f3e,"STRONG",{});var SNr=s(roe);Xze=r(SNr,"rembert"),SNr.forEach(t),zze=r(f3e," \u2014 "),Mk=n(f3e,"A",{href:!0});var RNr=s(Mk);Qze=r(RNr,"RemBertConfig"),RNr.forEach(t),Wze=r(f3e," (RemBERT model)"),f3e.forEach(t),Hze=i(L),kf=n(L,"LI",{});var g3e=s(kf);toe=n(g3e,"STRONG",{});var BNr=s(toe);Uze=r(BNr,"resnet"),BNr.forEach(t),Jze=r(g3e," \u2014 "),Ek=n(g3e,"A",{href:!0});var PNr=s(Ek);Yze=r(PNr,"ResNetConfig"),PNr.forEach(t),Kze=r(g3e," (ResNet model)"),g3e.forEach(t),Zze=i(L),Sf=n(L,"LI",{});var h3e=s(Sf);aoe=n(h3e,"STRONG",{});var INr=s(aoe);eQe=r(INr,"retribert"),INr.forEach(t),oQe=r(h3e," \u2014 "),Ck=n(h3e,"A",{href:!0});var qNr=s(Ck);rQe=r(qNr,"RetriBertConfig"),qNr.forEach(t),tQe=r(h3e," (RetriBERT model)"),h3e.forEach(t),aQe=i(L),Rf=n(L,"LI",{});var u3e=s(Rf);noe=n(u3e,"STRONG",{});var NNr=s(noe);nQe=r(NNr,"roberta"),NNr.forEach(t),sQe=r(u3e," \u2014 "),wk=n(u3e,"A",{href:!0});var jNr=s(wk);lQe=r(jNr,"RobertaConfig"),jNr.forEach(t),iQe=r(u3e," (RoBERTa model)"),u3e.forEach(t),dQe=i(L),Bf=n(L,"LI",{});var p3e=s(Bf);soe=n(p3e,"STRONG",{});var DNr=s(soe);cQe=r(DNr,"roformer"),DNr.forEach(t),mQe=r(p3e," \u2014 "),Ak=n(p3e,"A",{href:!0});var GNr=s(Ak);fQe=r(GNr,"RoFormerConfig"),GNr.forEach(t),gQe=r(p3e," (RoFormer model)"),p3e.forEach(t),hQe=i(L),Pf=n(L,"LI",{});var _3e=s(Pf);loe=n(_3e,"STRONG",{});var ONr=s(loe);uQe=r(ONr,"segformer"),ONr.forEach(t),pQe=r(_3e," \u2014 "),yk=n(_3e,"A",{href:!0});var VNr=s(yk);_Qe=r(VNr,"SegformerConfig"),VNr.forEach(t),bQe=r(_3e," (SegFormer model)"),_3e.forEach(t),FQe=i(L),If=n(L,"LI",{});var b3e=s(If);ioe=n(b3e,"STRONG",{});var XNr=s(ioe);vQe=r(XNr,"sew"),XNr.forEach(t),TQe=r(b3e," \u2014 "),Lk=n(b3e,"A",{href:!0});var zNr=s(Lk);MQe=r(zNr,"SEWConfig"),zNr.forEach(t),EQe=r(b3e," (SEW model)"),b3e.forEach(t),CQe=i(L),qf=n(L,"LI",{});var F3e=s(qf);doe=n(F3e,"STRONG",{});var QNr=s(doe);wQe=r(QNr,"sew-d"),QNr.forEach(t),AQe=r(F3e," \u2014 "),xk=n(F3e,"A",{href:!0});var WNr=s(xk);yQe=r(WNr,"SEWDConfig"),WNr.forEach(t),LQe=r(F3e," (SEW-D model)"),F3e.forEach(t),xQe=i(L),Nf=n(L,"LI",{});var v3e=s(Nf);coe=n(v3e,"STRONG",{});var HNr=s(coe);$Qe=r(HNr,"speech-encoder-decoder"),HNr.forEach(t),kQe=r(v3e," \u2014 "),$k=n(v3e,"A",{href:!0});var UNr=s($k);SQe=r(UNr,"SpeechEncoderDecoderConfig"),UNr.forEach(t),RQe=r(v3e," (Speech Encoder decoder model)"),v3e.forEach(t),BQe=i(L),jf=n(L,"LI",{});var T3e=s(jf);moe=n(T3e,"STRONG",{});var JNr=s(moe);PQe=r(JNr,"speech_to_text"),JNr.forEach(t),IQe=r(T3e," \u2014 "),kk=n(T3e,"A",{href:!0});var YNr=s(kk);qQe=r(YNr,"Speech2TextConfig"),YNr.forEach(t),NQe=r(T3e," (Speech2Text model)"),T3e.forEach(t),jQe=i(L),Df=n(L,"LI",{});var M3e=s(Df);foe=n(M3e,"STRONG",{});var KNr=s(foe);DQe=r(KNr,"speech_to_text_2"),KNr.forEach(t),GQe=r(M3e," \u2014 "),Sk=n(M3e,"A",{href:!0});var ZNr=s(Sk);OQe=r(ZNr,"Speech2Text2Config"),ZNr.forEach(t),VQe=r(M3e," (Speech2Text2 model)"),M3e.forEach(t),XQe=i(L),Gf=n(L,"LI",{});var E3e=s(Gf);goe=n(E3e,"STRONG",{});var ejr=s(goe);zQe=r(ejr,"splinter"),ejr.forEach(t),QQe=r(E3e," \u2014 "),Rk=n(E3e,"A",{href:!0});var ojr=s(Rk);WQe=r(ojr,"SplinterConfig"),ojr.forEach(t),HQe=r(E3e," (Splinter model)"),E3e.forEach(t),UQe=i(L),Of=n(L,"LI",{});var C3e=s(Of);hoe=n(C3e,"STRONG",{});var rjr=s(hoe);JQe=r(rjr,"squeezebert"),rjr.forEach(t),YQe=r(C3e," \u2014 "),Bk=n(C3e,"A",{href:!0});var tjr=s(Bk);KQe=r(tjr,"SqueezeBertConfig"),tjr.forEach(t),ZQe=r(C3e," (SqueezeBERT model)"),C3e.forEach(t),eWe=i(L),Vf=n(L,"LI",{});var w3e=s(Vf);uoe=n(w3e,"STRONG",{});var ajr=s(uoe);oWe=r(ajr,"swin"),ajr.forEach(t),rWe=r(w3e," \u2014 "),Pk=n(w3e,"A",{href:!0});var njr=s(Pk);tWe=r(njr,"SwinConfig"),njr.forEach(t),aWe=r(w3e," (Swin model)"),w3e.forEach(t),nWe=i(L),Xf=n(L,"LI",{});var A3e=s(Xf);poe=n(A3e,"STRONG",{});var sjr=s(poe);sWe=r(sjr,"t5"),sjr.forEach(t),lWe=r(A3e," \u2014 "),Ik=n(A3e,"A",{href:!0});var ljr=s(Ik);iWe=r(ljr,"T5Config"),ljr.forEach(t),dWe=r(A3e," (T5 model)"),A3e.forEach(t),cWe=i(L),zf=n(L,"LI",{});var y3e=s(zf);_oe=n(y3e,"STRONG",{});var ijr=s(_oe);mWe=r(ijr,"tapas"),ijr.forEach(t),fWe=r(y3e," \u2014 "),qk=n(y3e,"A",{href:!0});var djr=s(qk);gWe=r(djr,"TapasConfig"),djr.forEach(t),hWe=r(y3e," (TAPAS model)"),y3e.forEach(t),uWe=i(L),Qf=n(L,"LI",{});var L3e=s(Qf);boe=n(L3e,"STRONG",{});var cjr=s(boe);pWe=r(cjr,"tapex"),cjr.forEach(t),_We=r(L3e," \u2014 "),Nk=n(L3e,"A",{href:!0});var mjr=s(Nk);bWe=r(mjr,"BartConfig"),mjr.forEach(t),FWe=r(L3e," (TAPEX model)"),L3e.forEach(t),vWe=i(L),Wf=n(L,"LI",{});var x3e=s(Wf);Foe=n(x3e,"STRONG",{});var fjr=s(Foe);TWe=r(fjr,"transfo-xl"),fjr.forEach(t),MWe=r(x3e," \u2014 "),jk=n(x3e,"A",{href:!0});var gjr=s(jk);EWe=r(gjr,"TransfoXLConfig"),gjr.forEach(t),CWe=r(x3e," (Transformer-XL model)"),x3e.forEach(t),wWe=i(L),Hf=n(L,"LI",{});var $3e=s(Hf);voe=n($3e,"STRONG",{});var hjr=s(voe);AWe=r(hjr,"trocr"),hjr.forEach(t),yWe=r($3e," \u2014 "),Dk=n($3e,"A",{href:!0});var ujr=s(Dk);LWe=r(ujr,"TrOCRConfig"),ujr.forEach(t),xWe=r($3e," (TrOCR model)"),$3e.forEach(t),$We=i(L),Uf=n(L,"LI",{});var k3e=s(Uf);Toe=n(k3e,"STRONG",{});var pjr=s(Toe);kWe=r(pjr,"unispeech"),pjr.forEach(t),SWe=r(k3e," \u2014 "),Gk=n(k3e,"A",{href:!0});var _jr=s(Gk);RWe=r(_jr,"UniSpeechConfig"),_jr.forEach(t),BWe=r(k3e," (UniSpeech model)"),k3e.forEach(t),PWe=i(L),Jf=n(L,"LI",{});var S3e=s(Jf);Moe=n(S3e,"STRONG",{});var bjr=s(Moe);IWe=r(bjr,"unispeech-sat"),bjr.forEach(t),qWe=r(S3e," \u2014 "),Ok=n(S3e,"A",{href:!0});var Fjr=s(Ok);NWe=r(Fjr,"UniSpeechSatConfig"),Fjr.forEach(t),jWe=r(S3e," (UniSpeechSat model)"),S3e.forEach(t),DWe=i(L),Yf=n(L,"LI",{});var R3e=s(Yf);Eoe=n(R3e,"STRONG",{});var vjr=s(Eoe);GWe=r(vjr,"van"),vjr.forEach(t),OWe=r(R3e," \u2014 "),Vk=n(R3e,"A",{href:!0});var Tjr=s(Vk);VWe=r(Tjr,"VanConfig"),Tjr.forEach(t),XWe=r(R3e," (VAN model)"),R3e.forEach(t),zWe=i(L),Kf=n(L,"LI",{});var B3e=s(Kf);Coe=n(B3e,"STRONG",{});var Mjr=s(Coe);QWe=r(Mjr,"vilt"),Mjr.forEach(t),WWe=r(B3e," \u2014 "),Xk=n(B3e,"A",{href:!0});var Ejr=s(Xk);HWe=r(Ejr,"ViltConfig"),Ejr.forEach(t),UWe=r(B3e," (ViLT model)"),B3e.forEach(t),JWe=i(L),Zf=n(L,"LI",{});var P3e=s(Zf);woe=n(P3e,"STRONG",{});var Cjr=s(woe);YWe=r(Cjr,"vision-encoder-decoder"),Cjr.forEach(t),KWe=r(P3e," \u2014 "),zk=n(P3e,"A",{href:!0});var wjr=s(zk);ZWe=r(wjr,"VisionEncoderDecoderConfig"),wjr.forEach(t),eHe=r(P3e," (Vision Encoder decoder model)"),P3e.forEach(t),oHe=i(L),eg=n(L,"LI",{});var I3e=s(eg);Aoe=n(I3e,"STRONG",{});var Ajr=s(Aoe);rHe=r(Ajr,"vision-text-dual-encoder"),Ajr.forEach(t),tHe=r(I3e," \u2014 "),Qk=n(I3e,"A",{href:!0});var yjr=s(Qk);aHe=r(yjr,"VisionTextDualEncoderConfig"),yjr.forEach(t),nHe=r(I3e," (VisionTextDualEncoder model)"),I3e.forEach(t),sHe=i(L),og=n(L,"LI",{});var q3e=s(og);yoe=n(q3e,"STRONG",{});var Ljr=s(yoe);lHe=r(Ljr,"visual_bert"),Ljr.forEach(t),iHe=r(q3e," \u2014 "),Wk=n(q3e,"A",{href:!0});var xjr=s(Wk);dHe=r(xjr,"VisualBertConfig"),xjr.forEach(t),cHe=r(q3e," (VisualBert model)"),q3e.forEach(t),mHe=i(L),rg=n(L,"LI",{});var N3e=s(rg);Loe=n(N3e,"STRONG",{});var $jr=s(Loe);fHe=r($jr,"vit"),$jr.forEach(t),gHe=r(N3e," \u2014 "),Hk=n(N3e,"A",{href:!0});var kjr=s(Hk);hHe=r(kjr,"ViTConfig"),kjr.forEach(t),uHe=r(N3e," (ViT model)"),N3e.forEach(t),pHe=i(L),tg=n(L,"LI",{});var j3e=s(tg);xoe=n(j3e,"STRONG",{});var Sjr=s(xoe);_He=r(Sjr,"vit_mae"),Sjr.forEach(t),bHe=r(j3e," \u2014 "),Uk=n(j3e,"A",{href:!0});var Rjr=s(Uk);FHe=r(Rjr,"ViTMAEConfig"),Rjr.forEach(t),vHe=r(j3e," (ViTMAE model)"),j3e.forEach(t),THe=i(L),ag=n(L,"LI",{});var D3e=s(ag);$oe=n(D3e,"STRONG",{});var Bjr=s($oe);MHe=r(Bjr,"wav2vec2"),Bjr.forEach(t),EHe=r(D3e," \u2014 "),Jk=n(D3e,"A",{href:!0});var Pjr=s(Jk);CHe=r(Pjr,"Wav2Vec2Config"),Pjr.forEach(t),wHe=r(D3e," (Wav2Vec2 model)"),D3e.forEach(t),AHe=i(L),ng=n(L,"LI",{});var G3e=s(ng);koe=n(G3e,"STRONG",{});var Ijr=s(koe);yHe=r(Ijr,"wavlm"),Ijr.forEach(t),LHe=r(G3e," \u2014 "),Yk=n(G3e,"A",{href:!0});var qjr=s(Yk);xHe=r(qjr,"WavLMConfig"),qjr.forEach(t),$He=r(G3e," (WavLM model)"),G3e.forEach(t),kHe=i(L),sg=n(L,"LI",{});var O3e=s(sg);Soe=n(O3e,"STRONG",{});var Njr=s(Soe);SHe=r(Njr,"xglm"),Njr.forEach(t),RHe=r(O3e," \u2014 "),Kk=n(O3e,"A",{href:!0});var jjr=s(Kk);BHe=r(jjr,"XGLMConfig"),jjr.forEach(t),PHe=r(O3e," (XGLM model)"),O3e.forEach(t),IHe=i(L),lg=n(L,"LI",{});var V3e=s(lg);Roe=n(V3e,"STRONG",{});var Djr=s(Roe);qHe=r(Djr,"xlm"),Djr.forEach(t),NHe=r(V3e," \u2014 "),Zk=n(V3e,"A",{href:!0});var Gjr=s(Zk);jHe=r(Gjr,"XLMConfig"),Gjr.forEach(t),DHe=r(V3e," (XLM model)"),V3e.forEach(t),GHe=i(L),ig=n(L,"LI",{});var X3e=s(ig);Boe=n(X3e,"STRONG",{});var Ojr=s(Boe);OHe=r(Ojr,"xlm-prophetnet"),Ojr.forEach(t),VHe=r(X3e," \u2014 "),eS=n(X3e,"A",{href:!0});var Vjr=s(eS);XHe=r(Vjr,"XLMProphetNetConfig"),Vjr.forEach(t),zHe=r(X3e," (XLMProphetNet model)"),X3e.forEach(t),QHe=i(L),dg=n(L,"LI",{});var z3e=s(dg);Poe=n(z3e,"STRONG",{});var Xjr=s(Poe);WHe=r(Xjr,"xlm-roberta"),Xjr.forEach(t),HHe=r(z3e," \u2014 "),oS=n(z3e,"A",{href:!0});var zjr=s(oS);UHe=r(zjr,"XLMRobertaConfig"),zjr.forEach(t),JHe=r(z3e," (XLM-RoBERTa model)"),z3e.forEach(t),YHe=i(L),cg=n(L,"LI",{});var Q3e=s(cg);Ioe=n(Q3e,"STRONG",{});var Qjr=s(Ioe);KHe=r(Qjr,"xlm-roberta-xl"),Qjr.forEach(t),ZHe=r(Q3e," \u2014 "),rS=n(Q3e,"A",{href:!0});var Wjr=s(rS);eUe=r(Wjr,"XLMRobertaXLConfig"),Wjr.forEach(t),oUe=r(Q3e," (XLM-RoBERTa-XL model)"),Q3e.forEach(t),rUe=i(L),mg=n(L,"LI",{});var W3e=s(mg);qoe=n(W3e,"STRONG",{});var Hjr=s(qoe);tUe=r(Hjr,"xlnet"),Hjr.forEach(t),aUe=r(W3e," \u2014 "),tS=n(W3e,"A",{href:!0});var Ujr=s(tS);nUe=r(Ujr,"XLNetConfig"),Ujr.forEach(t),sUe=r(W3e," (XLNet model)"),W3e.forEach(t),lUe=i(L),fg=n(L,"LI",{});var H3e=s(fg);Noe=n(H3e,"STRONG",{});var Jjr=s(Noe);iUe=r(Jjr,"yolos"),Jjr.forEach(t),dUe=r(H3e," \u2014 "),aS=n(H3e,"A",{href:!0});var Yjr=s(aS);cUe=r(Yjr,"YolosConfig"),Yjr.forEach(t),mUe=r(H3e," (YOLOS model)"),H3e.forEach(t),fUe=i(L),gg=n(L,"LI",{});var U3e=s(gg);joe=n(U3e,"STRONG",{});var Kjr=s(joe);gUe=r(Kjr,"yoso"),Kjr.forEach(t),hUe=r(U3e," \u2014 "),nS=n(U3e,"A",{href:!0});var Zjr=s(nS);uUe=r(Zjr,"YosoConfig"),Zjr.forEach(t),pUe=r(U3e," (YOSO model)"),U3e.forEach(t),L.forEach(t),_Ue=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),bUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var lqe=s(ug);T(H6.$$.fragment,lqe),FUe=i(lqe),Doe=n(lqe,"P",{});var eDr=s(Doe);vUe=r(eDr,"Register a new configuration for this class."),eDr.forEach(t),lqe.forEach(t),Kr.forEach(t),cPe=i(m),_i=n(m,"H2",{class:!0});var iqe=s(_i);pg=n(iqe,"A",{id:!0,class:!0,href:!0});var oDr=s(pg);Goe=n(oDr,"SPAN",{});var rDr=s(Goe);T(U6.$$.fragment,rDr),rDr.forEach(t),oDr.forEach(t),TUe=i(iqe),Ooe=n(iqe,"SPAN",{});var tDr=s(Ooe);MUe=r(tDr,"AutoTokenizer"),tDr.forEach(t),iqe.forEach(t),mPe=i(m),wo=n(m,"DIV",{class:!0});var Ps=s(wo);T(J6.$$.fragment,Ps),EUe=i(Ps),Y6=n(Ps,"P",{});var dqe=s(Y6);CUe=r(dqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sS=n(dqe,"A",{href:!0});var aDr=s(sS);wUe=r(aDr,"AutoTokenizer.from_pretrained()"),aDr.forEach(t),AUe=r(dqe," class method."),dqe.forEach(t),yUe=i(Ps),K6=n(Ps,"P",{});var cqe=s(K6);LUe=r(cqe,"This class cannot be instantiated directly using "),Voe=n(cqe,"CODE",{});var nDr=s(Voe);xUe=r(nDr,"__init__()"),nDr.forEach(t),$Ue=r(cqe," (throws an error)."),cqe.forEach(t),kUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(Z6.$$.fragment,Is),SUe=i(Is),Xoe=n(Is,"P",{});var sDr=s(Xoe);RUe=r(sDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sDr.forEach(t),BUe=i(Is),Ca=n(Is,"P",{});var OA=s(Ca);PUe=r(OA,"The tokenizer class to instantiate is selected based on the "),zoe=n(OA,"CODE",{});var lDr=s(zoe);IUe=r(lDr,"model_type"),lDr.forEach(t),qUe=r(OA,` property of the config object (either
passed as an argument or loaded from `),Qoe=n(OA,"CODE",{});var iDr=s(Qoe);NUe=r(iDr,"pretrained_model_name_or_path"),iDr.forEach(t),jUe=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=n(OA,"CODE",{});var dDr=s(Woe);DUe=r(dDr,"pretrained_model_name_or_path"),dDr.forEach(t),GUe=r(OA,":"),OA.forEach(t),OUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var e9=s(kn);Hoe=n(e9,"STRONG",{});var cDr=s(Hoe);VUe=r(cDr,"albert"),cDr.forEach(t),XUe=r(e9," \u2014 "),lS=n(e9,"A",{href:!0});var mDr=s(lS);zUe=r(mDr,"AlbertTokenizer"),mDr.forEach(t),QUe=r(e9," or "),iS=n(e9,"A",{href:!0});var fDr=s(iS);WUe=r(fDr,"AlbertTokenizerFast"),fDr.forEach(t),HUe=r(e9," (ALBERT model)"),e9.forEach(t),UUe=i(S),Sn=n(S,"LI",{});var o9=s(Sn);Uoe=n(o9,"STRONG",{});var gDr=s(Uoe);JUe=r(gDr,"bart"),gDr.forEach(t),YUe=r(o9," \u2014 "),dS=n(o9,"A",{href:!0});var hDr=s(dS);KUe=r(hDr,"BartTokenizer"),hDr.forEach(t),ZUe=r(o9," or "),cS=n(o9,"A",{href:!0});var uDr=s(cS);eJe=r(uDr,"BartTokenizerFast"),uDr.forEach(t),oJe=r(o9," (BART model)"),o9.forEach(t),rJe=i(S),Rn=n(S,"LI",{});var r9=s(Rn);Joe=n(r9,"STRONG",{});var pDr=s(Joe);tJe=r(pDr,"barthez"),pDr.forEach(t),aJe=r(r9," \u2014 "),mS=n(r9,"A",{href:!0});var _Dr=s(mS);nJe=r(_Dr,"BarthezTokenizer"),_Dr.forEach(t),sJe=r(r9," or "),fS=n(r9,"A",{href:!0});var bDr=s(fS);lJe=r(bDr,"BarthezTokenizerFast"),bDr.forEach(t),iJe=r(r9," (BARThez model)"),r9.forEach(t),dJe=i(S),_g=n(S,"LI",{});var J3e=s(_g);Yoe=n(J3e,"STRONG",{});var FDr=s(Yoe);cJe=r(FDr,"bartpho"),FDr.forEach(t),mJe=r(J3e," \u2014 "),gS=n(J3e,"A",{href:!0});var vDr=s(gS);fJe=r(vDr,"BartphoTokenizer"),vDr.forEach(t),gJe=r(J3e," (BARTpho model)"),J3e.forEach(t),hJe=i(S),Bn=n(S,"LI",{});var t9=s(Bn);Koe=n(t9,"STRONG",{});var TDr=s(Koe);uJe=r(TDr,"bert"),TDr.forEach(t),pJe=r(t9," \u2014 "),hS=n(t9,"A",{href:!0});var MDr=s(hS);_Je=r(MDr,"BertTokenizer"),MDr.forEach(t),bJe=r(t9," or "),uS=n(t9,"A",{href:!0});var EDr=s(uS);FJe=r(EDr,"BertTokenizerFast"),EDr.forEach(t),vJe=r(t9," (BERT model)"),t9.forEach(t),TJe=i(S),bg=n(S,"LI",{});var Y3e=s(bg);Zoe=n(Y3e,"STRONG",{});var CDr=s(Zoe);MJe=r(CDr,"bert-generation"),CDr.forEach(t),EJe=r(Y3e," \u2014 "),pS=n(Y3e,"A",{href:!0});var wDr=s(pS);CJe=r(wDr,"BertGenerationTokenizer"),wDr.forEach(t),wJe=r(Y3e," (Bert Generation model)"),Y3e.forEach(t),AJe=i(S),Fg=n(S,"LI",{});var K3e=s(Fg);ere=n(K3e,"STRONG",{});var ADr=s(ere);yJe=r(ADr,"bert-japanese"),ADr.forEach(t),LJe=r(K3e," \u2014 "),_S=n(K3e,"A",{href:!0});var yDr=s(_S);xJe=r(yDr,"BertJapaneseTokenizer"),yDr.forEach(t),$Je=r(K3e," (BertJapanese model)"),K3e.forEach(t),kJe=i(S),vg=n(S,"LI",{});var Z3e=s(vg);ore=n(Z3e,"STRONG",{});var LDr=s(ore);SJe=r(LDr,"bertweet"),LDr.forEach(t),RJe=r(Z3e," \u2014 "),bS=n(Z3e,"A",{href:!0});var xDr=s(bS);BJe=r(xDr,"BertweetTokenizer"),xDr.forEach(t),PJe=r(Z3e," (Bertweet model)"),Z3e.forEach(t),IJe=i(S),Pn=n(S,"LI",{});var a9=s(Pn);rre=n(a9,"STRONG",{});var $Dr=s(rre);qJe=r($Dr,"big_bird"),$Dr.forEach(t),NJe=r(a9," \u2014 "),FS=n(a9,"A",{href:!0});var kDr=s(FS);jJe=r(kDr,"BigBirdTokenizer"),kDr.forEach(t),DJe=r(a9," or "),vS=n(a9,"A",{href:!0});var SDr=s(vS);GJe=r(SDr,"BigBirdTokenizerFast"),SDr.forEach(t),OJe=r(a9," (BigBird model)"),a9.forEach(t),VJe=i(S),In=n(S,"LI",{});var n9=s(In);tre=n(n9,"STRONG",{});var RDr=s(tre);XJe=r(RDr,"bigbird_pegasus"),RDr.forEach(t),zJe=r(n9," \u2014 "),TS=n(n9,"A",{href:!0});var BDr=s(TS);QJe=r(BDr,"PegasusTokenizer"),BDr.forEach(t),WJe=r(n9," or "),MS=n(n9,"A",{href:!0});var PDr=s(MS);HJe=r(PDr,"PegasusTokenizerFast"),PDr.forEach(t),UJe=r(n9," (BigBirdPegasus model)"),n9.forEach(t),JJe=i(S),qn=n(S,"LI",{});var s9=s(qn);are=n(s9,"STRONG",{});var IDr=s(are);YJe=r(IDr,"blenderbot"),IDr.forEach(t),KJe=r(s9," \u2014 "),ES=n(s9,"A",{href:!0});var qDr=s(ES);ZJe=r(qDr,"BlenderbotTokenizer"),qDr.forEach(t),eYe=r(s9," or "),CS=n(s9,"A",{href:!0});var NDr=s(CS);oYe=r(NDr,"BlenderbotTokenizerFast"),NDr.forEach(t),rYe=r(s9," (Blenderbot model)"),s9.forEach(t),tYe=i(S),Tg=n(S,"LI",{});var ewe=s(Tg);nre=n(ewe,"STRONG",{});var jDr=s(nre);aYe=r(jDr,"blenderbot-small"),jDr.forEach(t),nYe=r(ewe," \u2014 "),wS=n(ewe,"A",{href:!0});var DDr=s(wS);sYe=r(DDr,"BlenderbotSmallTokenizer"),DDr.forEach(t),lYe=r(ewe," (BlenderbotSmall model)"),ewe.forEach(t),iYe=i(S),Mg=n(S,"LI",{});var owe=s(Mg);sre=n(owe,"STRONG",{});var GDr=s(sre);dYe=r(GDr,"byt5"),GDr.forEach(t),cYe=r(owe," \u2014 "),AS=n(owe,"A",{href:!0});var ODr=s(AS);mYe=r(ODr,"ByT5Tokenizer"),ODr.forEach(t),fYe=r(owe," (ByT5 model)"),owe.forEach(t),gYe=i(S),Nn=n(S,"LI",{});var l9=s(Nn);lre=n(l9,"STRONG",{});var VDr=s(lre);hYe=r(VDr,"camembert"),VDr.forEach(t),uYe=r(l9," \u2014 "),yS=n(l9,"A",{href:!0});var XDr=s(yS);pYe=r(XDr,"CamembertTokenizer"),XDr.forEach(t),_Ye=r(l9," or "),LS=n(l9,"A",{href:!0});var zDr=s(LS);bYe=r(zDr,"CamembertTokenizerFast"),zDr.forEach(t),FYe=r(l9," (CamemBERT model)"),l9.forEach(t),vYe=i(S),Eg=n(S,"LI",{});var rwe=s(Eg);ire=n(rwe,"STRONG",{});var QDr=s(ire);TYe=r(QDr,"canine"),QDr.forEach(t),MYe=r(rwe," \u2014 "),xS=n(rwe,"A",{href:!0});var WDr=s(xS);EYe=r(WDr,"CanineTokenizer"),WDr.forEach(t),CYe=r(rwe," (Canine model)"),rwe.forEach(t),wYe=i(S),jn=n(S,"LI",{});var i9=s(jn);dre=n(i9,"STRONG",{});var HDr=s(dre);AYe=r(HDr,"clip"),HDr.forEach(t),yYe=r(i9," \u2014 "),$S=n(i9,"A",{href:!0});var UDr=s($S);LYe=r(UDr,"CLIPTokenizer"),UDr.forEach(t),xYe=r(i9," or "),kS=n(i9,"A",{href:!0});var JDr=s(kS);$Ye=r(JDr,"CLIPTokenizerFast"),JDr.forEach(t),kYe=r(i9," (CLIP model)"),i9.forEach(t),SYe=i(S),Dn=n(S,"LI",{});var d9=s(Dn);cre=n(d9,"STRONG",{});var YDr=s(cre);RYe=r(YDr,"convbert"),YDr.forEach(t),BYe=r(d9," \u2014 "),SS=n(d9,"A",{href:!0});var KDr=s(SS);PYe=r(KDr,"ConvBertTokenizer"),KDr.forEach(t),IYe=r(d9," or "),RS=n(d9,"A",{href:!0});var ZDr=s(RS);qYe=r(ZDr,"ConvBertTokenizerFast"),ZDr.forEach(t),NYe=r(d9," (ConvBERT model)"),d9.forEach(t),jYe=i(S),Gn=n(S,"LI",{});var c9=s(Gn);mre=n(c9,"STRONG",{});var eGr=s(mre);DYe=r(eGr,"cpm"),eGr.forEach(t),GYe=r(c9," \u2014 "),BS=n(c9,"A",{href:!0});var oGr=s(BS);OYe=r(oGr,"CpmTokenizer"),oGr.forEach(t),VYe=r(c9," or "),PS=n(c9,"A",{href:!0});var rGr=s(PS);XYe=r(rGr,"CpmTokenizerFast"),rGr.forEach(t),zYe=r(c9," (CPM model)"),c9.forEach(t),QYe=i(S),Cg=n(S,"LI",{});var twe=s(Cg);fre=n(twe,"STRONG",{});var tGr=s(fre);WYe=r(tGr,"ctrl"),tGr.forEach(t),HYe=r(twe," \u2014 "),IS=n(twe,"A",{href:!0});var aGr=s(IS);UYe=r(aGr,"CTRLTokenizer"),aGr.forEach(t),JYe=r(twe," (CTRL model)"),twe.forEach(t),YYe=i(S),On=n(S,"LI",{});var m9=s(On);gre=n(m9,"STRONG",{});var nGr=s(gre);KYe=r(nGr,"data2vec-text"),nGr.forEach(t),ZYe=r(m9," \u2014 "),qS=n(m9,"A",{href:!0});var sGr=s(qS);eKe=r(sGr,"RobertaTokenizer"),sGr.forEach(t),oKe=r(m9," or "),NS=n(m9,"A",{href:!0});var lGr=s(NS);rKe=r(lGr,"RobertaTokenizerFast"),lGr.forEach(t),tKe=r(m9," (Data2VecText model)"),m9.forEach(t),aKe=i(S),Vn=n(S,"LI",{});var f9=s(Vn);hre=n(f9,"STRONG",{});var iGr=s(hre);nKe=r(iGr,"deberta"),iGr.forEach(t),sKe=r(f9," \u2014 "),jS=n(f9,"A",{href:!0});var dGr=s(jS);lKe=r(dGr,"DebertaTokenizer"),dGr.forEach(t),iKe=r(f9," or "),DS=n(f9,"A",{href:!0});var cGr=s(DS);dKe=r(cGr,"DebertaTokenizerFast"),cGr.forEach(t),cKe=r(f9," (DeBERTa model)"),f9.forEach(t),mKe=i(S),Xn=n(S,"LI",{});var g9=s(Xn);ure=n(g9,"STRONG",{});var mGr=s(ure);fKe=r(mGr,"deberta-v2"),mGr.forEach(t),gKe=r(g9," \u2014 "),GS=n(g9,"A",{href:!0});var fGr=s(GS);hKe=r(fGr,"DebertaV2Tokenizer"),fGr.forEach(t),uKe=r(g9," or "),OS=n(g9,"A",{href:!0});var gGr=s(OS);pKe=r(gGr,"DebertaV2TokenizerFast"),gGr.forEach(t),_Ke=r(g9," (DeBERTa-v2 model)"),g9.forEach(t),bKe=i(S),zn=n(S,"LI",{});var h9=s(zn);pre=n(h9,"STRONG",{});var hGr=s(pre);FKe=r(hGr,"distilbert"),hGr.forEach(t),vKe=r(h9," \u2014 "),VS=n(h9,"A",{href:!0});var uGr=s(VS);TKe=r(uGr,"DistilBertTokenizer"),uGr.forEach(t),MKe=r(h9," or "),XS=n(h9,"A",{href:!0});var pGr=s(XS);EKe=r(pGr,"DistilBertTokenizerFast"),pGr.forEach(t),CKe=r(h9," (DistilBERT model)"),h9.forEach(t),wKe=i(S),Qn=n(S,"LI",{});var u9=s(Qn);_re=n(u9,"STRONG",{});var _Gr=s(_re);AKe=r(_Gr,"dpr"),_Gr.forEach(t),yKe=r(u9," \u2014 "),zS=n(u9,"A",{href:!0});var bGr=s(zS);LKe=r(bGr,"DPRQuestionEncoderTokenizer"),bGr.forEach(t),xKe=r(u9," or "),QS=n(u9,"A",{href:!0});var FGr=s(QS);$Ke=r(FGr,"DPRQuestionEncoderTokenizerFast"),FGr.forEach(t),kKe=r(u9," (DPR model)"),u9.forEach(t),SKe=i(S),Wn=n(S,"LI",{});var p9=s(Wn);bre=n(p9,"STRONG",{});var vGr=s(bre);RKe=r(vGr,"electra"),vGr.forEach(t),BKe=r(p9," \u2014 "),WS=n(p9,"A",{href:!0});var TGr=s(WS);PKe=r(TGr,"ElectraTokenizer"),TGr.forEach(t),IKe=r(p9," or "),HS=n(p9,"A",{href:!0});var MGr=s(HS);qKe=r(MGr,"ElectraTokenizerFast"),MGr.forEach(t),NKe=r(p9," (ELECTRA model)"),p9.forEach(t),jKe=i(S),wg=n(S,"LI",{});var awe=s(wg);Fre=n(awe,"STRONG",{});var EGr=s(Fre);DKe=r(EGr,"flaubert"),EGr.forEach(t),GKe=r(awe," \u2014 "),US=n(awe,"A",{href:!0});var CGr=s(US);OKe=r(CGr,"FlaubertTokenizer"),CGr.forEach(t),VKe=r(awe," (FlauBERT model)"),awe.forEach(t),XKe=i(S),Hn=n(S,"LI",{});var _9=s(Hn);vre=n(_9,"STRONG",{});var wGr=s(vre);zKe=r(wGr,"fnet"),wGr.forEach(t),QKe=r(_9," \u2014 "),JS=n(_9,"A",{href:!0});var AGr=s(JS);WKe=r(AGr,"FNetTokenizer"),AGr.forEach(t),HKe=r(_9," or "),YS=n(_9,"A",{href:!0});var yGr=s(YS);UKe=r(yGr,"FNetTokenizerFast"),yGr.forEach(t),JKe=r(_9," (FNet model)"),_9.forEach(t),YKe=i(S),Ag=n(S,"LI",{});var nwe=s(Ag);Tre=n(nwe,"STRONG",{});var LGr=s(Tre);KKe=r(LGr,"fsmt"),LGr.forEach(t),ZKe=r(nwe," \u2014 "),KS=n(nwe,"A",{href:!0});var xGr=s(KS);eZe=r(xGr,"FSMTTokenizer"),xGr.forEach(t),oZe=r(nwe," (FairSeq Machine-Translation model)"),nwe.forEach(t),rZe=i(S),Un=n(S,"LI",{});var b9=s(Un);Mre=n(b9,"STRONG",{});var $Gr=s(Mre);tZe=r($Gr,"funnel"),$Gr.forEach(t),aZe=r(b9," \u2014 "),ZS=n(b9,"A",{href:!0});var kGr=s(ZS);nZe=r(kGr,"FunnelTokenizer"),kGr.forEach(t),sZe=r(b9," or "),eR=n(b9,"A",{href:!0});var SGr=s(eR);lZe=r(SGr,"FunnelTokenizerFast"),SGr.forEach(t),iZe=r(b9," (Funnel Transformer model)"),b9.forEach(t),dZe=i(S),Jn=n(S,"LI",{});var F9=s(Jn);Ere=n(F9,"STRONG",{});var RGr=s(Ere);cZe=r(RGr,"gpt2"),RGr.forEach(t),mZe=r(F9," \u2014 "),oR=n(F9,"A",{href:!0});var BGr=s(oR);fZe=r(BGr,"GPT2Tokenizer"),BGr.forEach(t),gZe=r(F9," or "),rR=n(F9,"A",{href:!0});var PGr=s(rR);hZe=r(PGr,"GPT2TokenizerFast"),PGr.forEach(t),uZe=r(F9," (OpenAI GPT-2 model)"),F9.forEach(t),pZe=i(S),Yn=n(S,"LI",{});var v9=s(Yn);Cre=n(v9,"STRONG",{});var IGr=s(Cre);_Ze=r(IGr,"gpt_neo"),IGr.forEach(t),bZe=r(v9," \u2014 "),tR=n(v9,"A",{href:!0});var qGr=s(tR);FZe=r(qGr,"GPT2Tokenizer"),qGr.forEach(t),vZe=r(v9," or "),aR=n(v9,"A",{href:!0});var NGr=s(aR);TZe=r(NGr,"GPT2TokenizerFast"),NGr.forEach(t),MZe=r(v9," (GPT Neo model)"),v9.forEach(t),EZe=i(S),Kn=n(S,"LI",{});var T9=s(Kn);wre=n(T9,"STRONG",{});var jGr=s(wre);CZe=r(jGr,"gptj"),jGr.forEach(t),wZe=r(T9," \u2014 "),nR=n(T9,"A",{href:!0});var DGr=s(nR);AZe=r(DGr,"GPT2Tokenizer"),DGr.forEach(t),yZe=r(T9," or "),sR=n(T9,"A",{href:!0});var GGr=s(sR);LZe=r(GGr,"GPT2TokenizerFast"),GGr.forEach(t),xZe=r(T9," (GPT-J model)"),T9.forEach(t),$Ze=i(S),Zn=n(S,"LI",{});var M9=s(Zn);Are=n(M9,"STRONG",{});var OGr=s(Are);kZe=r(OGr,"herbert"),OGr.forEach(t),SZe=r(M9," \u2014 "),lR=n(M9,"A",{href:!0});var VGr=s(lR);RZe=r(VGr,"HerbertTokenizer"),VGr.forEach(t),BZe=r(M9," or "),iR=n(M9,"A",{href:!0});var XGr=s(iR);PZe=r(XGr,"HerbertTokenizerFast"),XGr.forEach(t),IZe=r(M9," (HerBERT model)"),M9.forEach(t),qZe=i(S),yg=n(S,"LI",{});var swe=s(yg);yre=n(swe,"STRONG",{});var zGr=s(yre);NZe=r(zGr,"hubert"),zGr.forEach(t),jZe=r(swe," \u2014 "),dR=n(swe,"A",{href:!0});var QGr=s(dR);DZe=r(QGr,"Wav2Vec2CTCTokenizer"),QGr.forEach(t),GZe=r(swe," (Hubert model)"),swe.forEach(t),OZe=i(S),es=n(S,"LI",{});var E9=s(es);Lre=n(E9,"STRONG",{});var WGr=s(Lre);VZe=r(WGr,"ibert"),WGr.forEach(t),XZe=r(E9," \u2014 "),cR=n(E9,"A",{href:!0});var HGr=s(cR);zZe=r(HGr,"RobertaTokenizer"),HGr.forEach(t),QZe=r(E9," or "),mR=n(E9,"A",{href:!0});var UGr=s(mR);WZe=r(UGr,"RobertaTokenizerFast"),UGr.forEach(t),HZe=r(E9," (I-BERT model)"),E9.forEach(t),UZe=i(S),os=n(S,"LI",{});var C9=s(os);xre=n(C9,"STRONG",{});var JGr=s(xre);JZe=r(JGr,"layoutlm"),JGr.forEach(t),YZe=r(C9," \u2014 "),fR=n(C9,"A",{href:!0});var YGr=s(fR);KZe=r(YGr,"LayoutLMTokenizer"),YGr.forEach(t),ZZe=r(C9," or "),gR=n(C9,"A",{href:!0});var KGr=s(gR);eeo=r(KGr,"LayoutLMTokenizerFast"),KGr.forEach(t),oeo=r(C9," (LayoutLM model)"),C9.forEach(t),reo=i(S),rs=n(S,"LI",{});var w9=s(rs);$re=n(w9,"STRONG",{});var ZGr=s($re);teo=r(ZGr,"layoutlmv2"),ZGr.forEach(t),aeo=r(w9," \u2014 "),hR=n(w9,"A",{href:!0});var eOr=s(hR);neo=r(eOr,"LayoutLMv2Tokenizer"),eOr.forEach(t),seo=r(w9," or "),uR=n(w9,"A",{href:!0});var oOr=s(uR);leo=r(oOr,"LayoutLMv2TokenizerFast"),oOr.forEach(t),ieo=r(w9," (LayoutLMv2 model)"),w9.forEach(t),deo=i(S),ts=n(S,"LI",{});var A9=s(ts);kre=n(A9,"STRONG",{});var rOr=s(kre);ceo=r(rOr,"layoutxlm"),rOr.forEach(t),meo=r(A9," \u2014 "),pR=n(A9,"A",{href:!0});var tOr=s(pR);feo=r(tOr,"LayoutXLMTokenizer"),tOr.forEach(t),geo=r(A9," or "),_R=n(A9,"A",{href:!0});var aOr=s(_R);heo=r(aOr,"LayoutXLMTokenizerFast"),aOr.forEach(t),ueo=r(A9," (LayoutXLM model)"),A9.forEach(t),peo=i(S),as=n(S,"LI",{});var y9=s(as);Sre=n(y9,"STRONG",{});var nOr=s(Sre);_eo=r(nOr,"led"),nOr.forEach(t),beo=r(y9," \u2014 "),bR=n(y9,"A",{href:!0});var sOr=s(bR);Feo=r(sOr,"LEDTokenizer"),sOr.forEach(t),veo=r(y9," or "),FR=n(y9,"A",{href:!0});var lOr=s(FR);Teo=r(lOr,"LEDTokenizerFast"),lOr.forEach(t),Meo=r(y9," (LED model)"),y9.forEach(t),Eeo=i(S),ns=n(S,"LI",{});var L9=s(ns);Rre=n(L9,"STRONG",{});var iOr=s(Rre);Ceo=r(iOr,"longformer"),iOr.forEach(t),weo=r(L9," \u2014 "),vR=n(L9,"A",{href:!0});var dOr=s(vR);Aeo=r(dOr,"LongformerTokenizer"),dOr.forEach(t),yeo=r(L9," or "),TR=n(L9,"A",{href:!0});var cOr=s(TR);Leo=r(cOr,"LongformerTokenizerFast"),cOr.forEach(t),xeo=r(L9," (Longformer model)"),L9.forEach(t),$eo=i(S),Lg=n(S,"LI",{});var lwe=s(Lg);Bre=n(lwe,"STRONG",{});var mOr=s(Bre);keo=r(mOr,"luke"),mOr.forEach(t),Seo=r(lwe," \u2014 "),MR=n(lwe,"A",{href:!0});var fOr=s(MR);Reo=r(fOr,"LukeTokenizer"),fOr.forEach(t),Beo=r(lwe," (LUKE model)"),lwe.forEach(t),Peo=i(S),ss=n(S,"LI",{});var x9=s(ss);Pre=n(x9,"STRONG",{});var gOr=s(Pre);Ieo=r(gOr,"lxmert"),gOr.forEach(t),qeo=r(x9," \u2014 "),ER=n(x9,"A",{href:!0});var hOr=s(ER);Neo=r(hOr,"LxmertTokenizer"),hOr.forEach(t),jeo=r(x9," or "),CR=n(x9,"A",{href:!0});var uOr=s(CR);Deo=r(uOr,"LxmertTokenizerFast"),uOr.forEach(t),Geo=r(x9," (LXMERT model)"),x9.forEach(t),Oeo=i(S),xg=n(S,"LI",{});var iwe=s(xg);Ire=n(iwe,"STRONG",{});var pOr=s(Ire);Veo=r(pOr,"m2m_100"),pOr.forEach(t),Xeo=r(iwe," \u2014 "),wR=n(iwe,"A",{href:!0});var _Or=s(wR);zeo=r(_Or,"M2M100Tokenizer"),_Or.forEach(t),Qeo=r(iwe," (M2M100 model)"),iwe.forEach(t),Weo=i(S),$g=n(S,"LI",{});var dwe=s($g);qre=n(dwe,"STRONG",{});var bOr=s(qre);Heo=r(bOr,"marian"),bOr.forEach(t),Ueo=r(dwe," \u2014 "),AR=n(dwe,"A",{href:!0});var FOr=s(AR);Jeo=r(FOr,"MarianTokenizer"),FOr.forEach(t),Yeo=r(dwe," (Marian model)"),dwe.forEach(t),Keo=i(S),ls=n(S,"LI",{});var $9=s(ls);Nre=n($9,"STRONG",{});var vOr=s(Nre);Zeo=r(vOr,"mbart"),vOr.forEach(t),eoo=r($9," \u2014 "),yR=n($9,"A",{href:!0});var TOr=s(yR);ooo=r(TOr,"MBartTokenizer"),TOr.forEach(t),roo=r($9," or "),LR=n($9,"A",{href:!0});var MOr=s(LR);too=r(MOr,"MBartTokenizerFast"),MOr.forEach(t),aoo=r($9," (mBART model)"),$9.forEach(t),noo=i(S),is=n(S,"LI",{});var k9=s(is);jre=n(k9,"STRONG",{});var EOr=s(jre);soo=r(EOr,"mbart50"),EOr.forEach(t),loo=r(k9," \u2014 "),xR=n(k9,"A",{href:!0});var COr=s(xR);ioo=r(COr,"MBart50Tokenizer"),COr.forEach(t),doo=r(k9," or "),$R=n(k9,"A",{href:!0});var wOr=s($R);coo=r(wOr,"MBart50TokenizerFast"),wOr.forEach(t),moo=r(k9," (mBART-50 model)"),k9.forEach(t),foo=i(S),ds=n(S,"LI",{});var S9=s(ds);Dre=n(S9,"STRONG",{});var AOr=s(Dre);goo=r(AOr,"megatron-bert"),AOr.forEach(t),hoo=r(S9," \u2014 "),kR=n(S9,"A",{href:!0});var yOr=s(kR);uoo=r(yOr,"BertTokenizer"),yOr.forEach(t),poo=r(S9," or "),SR=n(S9,"A",{href:!0});var LOr=s(SR);_oo=r(LOr,"BertTokenizerFast"),LOr.forEach(t),boo=r(S9," (MegatronBert model)"),S9.forEach(t),Foo=i(S),kg=n(S,"LI",{});var cwe=s(kg);Gre=n(cwe,"STRONG",{});var xOr=s(Gre);voo=r(xOr,"mluke"),xOr.forEach(t),Too=r(cwe," \u2014 "),RR=n(cwe,"A",{href:!0});var $Or=s(RR);Moo=r($Or,"MLukeTokenizer"),$Or.forEach(t),Eoo=r(cwe," (mLUKE model)"),cwe.forEach(t),Coo=i(S),cs=n(S,"LI",{});var R9=s(cs);Ore=n(R9,"STRONG",{});var kOr=s(Ore);woo=r(kOr,"mobilebert"),kOr.forEach(t),Aoo=r(R9," \u2014 "),BR=n(R9,"A",{href:!0});var SOr=s(BR);yoo=r(SOr,"MobileBertTokenizer"),SOr.forEach(t),Loo=r(R9," or "),PR=n(R9,"A",{href:!0});var ROr=s(PR);xoo=r(ROr,"MobileBertTokenizerFast"),ROr.forEach(t),$oo=r(R9," (MobileBERT model)"),R9.forEach(t),koo=i(S),ms=n(S,"LI",{});var B9=s(ms);Vre=n(B9,"STRONG",{});var BOr=s(Vre);Soo=r(BOr,"mpnet"),BOr.forEach(t),Roo=r(B9," \u2014 "),IR=n(B9,"A",{href:!0});var POr=s(IR);Boo=r(POr,"MPNetTokenizer"),POr.forEach(t),Poo=r(B9," or "),qR=n(B9,"A",{href:!0});var IOr=s(qR);Ioo=r(IOr,"MPNetTokenizerFast"),IOr.forEach(t),qoo=r(B9," (MPNet model)"),B9.forEach(t),Noo=i(S),fs=n(S,"LI",{});var P9=s(fs);Xre=n(P9,"STRONG",{});var qOr=s(Xre);joo=r(qOr,"mt5"),qOr.forEach(t),Doo=r(P9," \u2014 "),NR=n(P9,"A",{href:!0});var NOr=s(NR);Goo=r(NOr,"MT5Tokenizer"),NOr.forEach(t),Ooo=r(P9," or "),jR=n(P9,"A",{href:!0});var jOr=s(jR);Voo=r(jOr,"MT5TokenizerFast"),jOr.forEach(t),Xoo=r(P9," (mT5 model)"),P9.forEach(t),zoo=i(S),gs=n(S,"LI",{});var I9=s(gs);zre=n(I9,"STRONG",{});var DOr=s(zre);Qoo=r(DOr,"nystromformer"),DOr.forEach(t),Woo=r(I9," \u2014 "),DR=n(I9,"A",{href:!0});var GOr=s(DR);Hoo=r(GOr,"AlbertTokenizer"),GOr.forEach(t),Uoo=r(I9," or "),GR=n(I9,"A",{href:!0});var OOr=s(GR);Joo=r(OOr,"AlbertTokenizerFast"),OOr.forEach(t),Yoo=r(I9," (Nystromformer model)"),I9.forEach(t),Koo=i(S),hs=n(S,"LI",{});var q9=s(hs);Qre=n(q9,"STRONG",{});var VOr=s(Qre);Zoo=r(VOr,"openai-gpt"),VOr.forEach(t),ero=r(q9," \u2014 "),OR=n(q9,"A",{href:!0});var XOr=s(OR);oro=r(XOr,"OpenAIGPTTokenizer"),XOr.forEach(t),rro=r(q9," or "),VR=n(q9,"A",{href:!0});var zOr=s(VR);tro=r(zOr,"OpenAIGPTTokenizerFast"),zOr.forEach(t),aro=r(q9," (OpenAI GPT model)"),q9.forEach(t),nro=i(S),us=n(S,"LI",{});var N9=s(us);Wre=n(N9,"STRONG",{});var QOr=s(Wre);sro=r(QOr,"pegasus"),QOr.forEach(t),lro=r(N9," \u2014 "),XR=n(N9,"A",{href:!0});var WOr=s(XR);iro=r(WOr,"PegasusTokenizer"),WOr.forEach(t),dro=r(N9," or "),zR=n(N9,"A",{href:!0});var HOr=s(zR);cro=r(HOr,"PegasusTokenizerFast"),HOr.forEach(t),mro=r(N9," (Pegasus model)"),N9.forEach(t),fro=i(S),Sg=n(S,"LI",{});var mwe=s(Sg);Hre=n(mwe,"STRONG",{});var UOr=s(Hre);gro=r(UOr,"perceiver"),UOr.forEach(t),hro=r(mwe," \u2014 "),QR=n(mwe,"A",{href:!0});var JOr=s(QR);uro=r(JOr,"PerceiverTokenizer"),JOr.forEach(t),pro=r(mwe," (Perceiver model)"),mwe.forEach(t),_ro=i(S),Rg=n(S,"LI",{});var fwe=s(Rg);Ure=n(fwe,"STRONG",{});var YOr=s(Ure);bro=r(YOr,"phobert"),YOr.forEach(t),Fro=r(fwe," \u2014 "),WR=n(fwe,"A",{href:!0});var KOr=s(WR);vro=r(KOr,"PhobertTokenizer"),KOr.forEach(t),Tro=r(fwe," (PhoBERT model)"),fwe.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var gwe=s(Bg);Jre=n(gwe,"STRONG",{});var ZOr=s(Jre);Ero=r(ZOr,"plbart"),ZOr.forEach(t),Cro=r(gwe," \u2014 "),HR=n(gwe,"A",{href:!0});var eVr=s(HR);wro=r(eVr,"PLBartTokenizer"),eVr.forEach(t),Aro=r(gwe," (PLBart model)"),gwe.forEach(t),yro=i(S),Pg=n(S,"LI",{});var hwe=s(Pg);Yre=n(hwe,"STRONG",{});var oVr=s(Yre);Lro=r(oVr,"prophetnet"),oVr.forEach(t),xro=r(hwe," \u2014 "),UR=n(hwe,"A",{href:!0});var rVr=s(UR);$ro=r(rVr,"ProphetNetTokenizer"),rVr.forEach(t),kro=r(hwe," (ProphetNet model)"),hwe.forEach(t),Sro=i(S),ps=n(S,"LI",{});var j9=s(ps);Kre=n(j9,"STRONG",{});var tVr=s(Kre);Rro=r(tVr,"qdqbert"),tVr.forEach(t),Bro=r(j9," \u2014 "),JR=n(j9,"A",{href:!0});var aVr=s(JR);Pro=r(aVr,"BertTokenizer"),aVr.forEach(t),Iro=r(j9," or "),YR=n(j9,"A",{href:!0});var nVr=s(YR);qro=r(nVr,"BertTokenizerFast"),nVr.forEach(t),Nro=r(j9," (QDQBert model)"),j9.forEach(t),jro=i(S),Ig=n(S,"LI",{});var uwe=s(Ig);Zre=n(uwe,"STRONG",{});var sVr=s(Zre);Dro=r(sVr,"rag"),sVr.forEach(t),Gro=r(uwe," \u2014 "),KR=n(uwe,"A",{href:!0});var lVr=s(KR);Oro=r(lVr,"RagTokenizer"),lVr.forEach(t),Vro=r(uwe," (RAG model)"),uwe.forEach(t),Xro=i(S),_s=n(S,"LI",{});var D9=s(_s);ete=n(D9,"STRONG",{});var iVr=s(ete);zro=r(iVr,"realm"),iVr.forEach(t),Qro=r(D9," \u2014 "),ZR=n(D9,"A",{href:!0});var dVr=s(ZR);Wro=r(dVr,"RealmTokenizer"),dVr.forEach(t),Hro=r(D9," or "),eB=n(D9,"A",{href:!0});var cVr=s(eB);Uro=r(cVr,"RealmTokenizerFast"),cVr.forEach(t),Jro=r(D9," (Realm model)"),D9.forEach(t),Yro=i(S),bs=n(S,"LI",{});var G9=s(bs);ote=n(G9,"STRONG",{});var mVr=s(ote);Kro=r(mVr,"reformer"),mVr.forEach(t),Zro=r(G9," \u2014 "),oB=n(G9,"A",{href:!0});var fVr=s(oB);eto=r(fVr,"ReformerTokenizer"),fVr.forEach(t),oto=r(G9," or "),rB=n(G9,"A",{href:!0});var gVr=s(rB);rto=r(gVr,"ReformerTokenizerFast"),gVr.forEach(t),tto=r(G9," (Reformer model)"),G9.forEach(t),ato=i(S),Fs=n(S,"LI",{});var O9=s(Fs);rte=n(O9,"STRONG",{});var hVr=s(rte);nto=r(hVr,"rembert"),hVr.forEach(t),sto=r(O9," \u2014 "),tB=n(O9,"A",{href:!0});var uVr=s(tB);lto=r(uVr,"RemBertTokenizer"),uVr.forEach(t),ito=r(O9," or "),aB=n(O9,"A",{href:!0});var pVr=s(aB);dto=r(pVr,"RemBertTokenizerFast"),pVr.forEach(t),cto=r(O9," (RemBERT model)"),O9.forEach(t),mto=i(S),vs=n(S,"LI",{});var V9=s(vs);tte=n(V9,"STRONG",{});var _Vr=s(tte);fto=r(_Vr,"retribert"),_Vr.forEach(t),gto=r(V9," \u2014 "),nB=n(V9,"A",{href:!0});var bVr=s(nB);hto=r(bVr,"RetriBertTokenizer"),bVr.forEach(t),uto=r(V9," or "),sB=n(V9,"A",{href:!0});var FVr=s(sB);pto=r(FVr,"RetriBertTokenizerFast"),FVr.forEach(t),_to=r(V9," (RetriBERT model)"),V9.forEach(t),bto=i(S),Ts=n(S,"LI",{});var X9=s(Ts);ate=n(X9,"STRONG",{});var vVr=s(ate);Fto=r(vVr,"roberta"),vVr.forEach(t),vto=r(X9," \u2014 "),lB=n(X9,"A",{href:!0});var TVr=s(lB);Tto=r(TVr,"RobertaTokenizer"),TVr.forEach(t),Mto=r(X9," or "),iB=n(X9,"A",{href:!0});var MVr=s(iB);Eto=r(MVr,"RobertaTokenizerFast"),MVr.forEach(t),Cto=r(X9," (RoBERTa model)"),X9.forEach(t),wto=i(S),Ms=n(S,"LI",{});var z9=s(Ms);nte=n(z9,"STRONG",{});var EVr=s(nte);Ato=r(EVr,"roformer"),EVr.forEach(t),yto=r(z9," \u2014 "),dB=n(z9,"A",{href:!0});var CVr=s(dB);Lto=r(CVr,"RoFormerTokenizer"),CVr.forEach(t),xto=r(z9," or "),cB=n(z9,"A",{href:!0});var wVr=s(cB);$to=r(wVr,"RoFormerTokenizerFast"),wVr.forEach(t),kto=r(z9," (RoFormer model)"),z9.forEach(t),Sto=i(S),qg=n(S,"LI",{});var pwe=s(qg);ste=n(pwe,"STRONG",{});var AVr=s(ste);Rto=r(AVr,"speech_to_text"),AVr.forEach(t),Bto=r(pwe," \u2014 "),mB=n(pwe,"A",{href:!0});var yVr=s(mB);Pto=r(yVr,"Speech2TextTokenizer"),yVr.forEach(t),Ito=r(pwe," (Speech2Text model)"),pwe.forEach(t),qto=i(S),Ng=n(S,"LI",{});var _we=s(Ng);lte=n(_we,"STRONG",{});var LVr=s(lte);Nto=r(LVr,"speech_to_text_2"),LVr.forEach(t),jto=r(_we," \u2014 "),fB=n(_we,"A",{href:!0});var xVr=s(fB);Dto=r(xVr,"Speech2Text2Tokenizer"),xVr.forEach(t),Gto=r(_we," (Speech2Text2 model)"),_we.forEach(t),Oto=i(S),Es=n(S,"LI",{});var Q9=s(Es);ite=n(Q9,"STRONG",{});var $Vr=s(ite);Vto=r($Vr,"splinter"),$Vr.forEach(t),Xto=r(Q9," \u2014 "),gB=n(Q9,"A",{href:!0});var kVr=s(gB);zto=r(kVr,"SplinterTokenizer"),kVr.forEach(t),Qto=r(Q9," or "),hB=n(Q9,"A",{href:!0});var SVr=s(hB);Wto=r(SVr,"SplinterTokenizerFast"),SVr.forEach(t),Hto=r(Q9," (Splinter model)"),Q9.forEach(t),Uto=i(S),Cs=n(S,"LI",{});var W9=s(Cs);dte=n(W9,"STRONG",{});var RVr=s(dte);Jto=r(RVr,"squeezebert"),RVr.forEach(t),Yto=r(W9," \u2014 "),uB=n(W9,"A",{href:!0});var BVr=s(uB);Kto=r(BVr,"SqueezeBertTokenizer"),BVr.forEach(t),Zto=r(W9," or "),pB=n(W9,"A",{href:!0});var PVr=s(pB);eao=r(PVr,"SqueezeBertTokenizerFast"),PVr.forEach(t),oao=r(W9," (SqueezeBERT model)"),W9.forEach(t),rao=i(S),ws=n(S,"LI",{});var H9=s(ws);cte=n(H9,"STRONG",{});var IVr=s(cte);tao=r(IVr,"t5"),IVr.forEach(t),aao=r(H9," \u2014 "),_B=n(H9,"A",{href:!0});var qVr=s(_B);nao=r(qVr,"T5Tokenizer"),qVr.forEach(t),sao=r(H9," or "),bB=n(H9,"A",{href:!0});var NVr=s(bB);lao=r(NVr,"T5TokenizerFast"),NVr.forEach(t),iao=r(H9," (T5 model)"),H9.forEach(t),dao=i(S),jg=n(S,"LI",{});var bwe=s(jg);mte=n(bwe,"STRONG",{});var jVr=s(mte);cao=r(jVr,"tapas"),jVr.forEach(t),mao=r(bwe," \u2014 "),FB=n(bwe,"A",{href:!0});var DVr=s(FB);fao=r(DVr,"TapasTokenizer"),DVr.forEach(t),gao=r(bwe," (TAPAS model)"),bwe.forEach(t),hao=i(S),Dg=n(S,"LI",{});var Fwe=s(Dg);fte=n(Fwe,"STRONG",{});var GVr=s(fte);uao=r(GVr,"tapex"),GVr.forEach(t),pao=r(Fwe," \u2014 "),vB=n(Fwe,"A",{href:!0});var OVr=s(vB);_ao=r(OVr,"TapexTokenizer"),OVr.forEach(t),bao=r(Fwe," (TAPEX model)"),Fwe.forEach(t),Fao=i(S),Gg=n(S,"LI",{});var vwe=s(Gg);gte=n(vwe,"STRONG",{});var VVr=s(gte);vao=r(VVr,"transfo-xl"),VVr.forEach(t),Tao=r(vwe," \u2014 "),TB=n(vwe,"A",{href:!0});var XVr=s(TB);Mao=r(XVr,"TransfoXLTokenizer"),XVr.forEach(t),Eao=r(vwe," (Transformer-XL model)"),vwe.forEach(t),Cao=i(S),As=n(S,"LI",{});var U9=s(As);hte=n(U9,"STRONG",{});var zVr=s(hte);wao=r(zVr,"visual_bert"),zVr.forEach(t),Aao=r(U9," \u2014 "),MB=n(U9,"A",{href:!0});var QVr=s(MB);yao=r(QVr,"BertTokenizer"),QVr.forEach(t),Lao=r(U9," or "),EB=n(U9,"A",{href:!0});var WVr=s(EB);xao=r(WVr,"BertTokenizerFast"),WVr.forEach(t),$ao=r(U9," (VisualBert model)"),U9.forEach(t),kao=i(S),Og=n(S,"LI",{});var Twe=s(Og);ute=n(Twe,"STRONG",{});var HVr=s(ute);Sao=r(HVr,"wav2vec2"),HVr.forEach(t),Rao=r(Twe," \u2014 "),CB=n(Twe,"A",{href:!0});var UVr=s(CB);Bao=r(UVr,"Wav2Vec2CTCTokenizer"),UVr.forEach(t),Pao=r(Twe," (Wav2Vec2 model)"),Twe.forEach(t),Iao=i(S),Vg=n(S,"LI",{});var Mwe=s(Vg);pte=n(Mwe,"STRONG",{});var JVr=s(pte);qao=r(JVr,"wav2vec2_phoneme"),JVr.forEach(t),Nao=r(Mwe," \u2014 "),wB=n(Mwe,"A",{href:!0});var YVr=s(wB);jao=r(YVr,"Wav2Vec2PhonemeCTCTokenizer"),YVr.forEach(t),Dao=r(Mwe," (Wav2Vec2Phoneme model)"),Mwe.forEach(t),Gao=i(S),ys=n(S,"LI",{});var J9=s(ys);_te=n(J9,"STRONG",{});var KVr=s(_te);Oao=r(KVr,"xglm"),KVr.forEach(t),Vao=r(J9," \u2014 "),AB=n(J9,"A",{href:!0});var ZVr=s(AB);Xao=r(ZVr,"XGLMTokenizer"),ZVr.forEach(t),zao=r(J9," or "),yB=n(J9,"A",{href:!0});var eXr=s(yB);Qao=r(eXr,"XGLMTokenizerFast"),eXr.forEach(t),Wao=r(J9," (XGLM model)"),J9.forEach(t),Hao=i(S),Xg=n(S,"LI",{});var Ewe=s(Xg);bte=n(Ewe,"STRONG",{});var oXr=s(bte);Uao=r(oXr,"xlm"),oXr.forEach(t),Jao=r(Ewe," \u2014 "),LB=n(Ewe,"A",{href:!0});var rXr=s(LB);Yao=r(rXr,"XLMTokenizer"),rXr.forEach(t),Kao=r(Ewe," (XLM model)"),Ewe.forEach(t),Zao=i(S),zg=n(S,"LI",{});var Cwe=s(zg);Fte=n(Cwe,"STRONG",{});var tXr=s(Fte);eno=r(tXr,"xlm-prophetnet"),tXr.forEach(t),ono=r(Cwe," \u2014 "),xB=n(Cwe,"A",{href:!0});var aXr=s(xB);rno=r(aXr,"XLMProphetNetTokenizer"),aXr.forEach(t),tno=r(Cwe," (XLMProphetNet model)"),Cwe.forEach(t),ano=i(S),Ls=n(S,"LI",{});var Y9=s(Ls);vte=n(Y9,"STRONG",{});var nXr=s(vte);nno=r(nXr,"xlm-roberta"),nXr.forEach(t),sno=r(Y9," \u2014 "),$B=n(Y9,"A",{href:!0});var sXr=s($B);lno=r(sXr,"XLMRobertaTokenizer"),sXr.forEach(t),ino=r(Y9," or "),kB=n(Y9,"A",{href:!0});var lXr=s(kB);dno=r(lXr,"XLMRobertaTokenizerFast"),lXr.forEach(t),cno=r(Y9," (XLM-RoBERTa model)"),Y9.forEach(t),mno=i(S),xs=n(S,"LI",{});var K9=s(xs);Tte=n(K9,"STRONG",{});var iXr=s(Tte);fno=r(iXr,"xlm-roberta-xl"),iXr.forEach(t),gno=r(K9," \u2014 "),SB=n(K9,"A",{href:!0});var dXr=s(SB);hno=r(dXr,"RobertaTokenizer"),dXr.forEach(t),uno=r(K9," or "),RB=n(K9,"A",{href:!0});var cXr=s(RB);pno=r(cXr,"RobertaTokenizerFast"),cXr.forEach(t),_no=r(K9," (XLM-RoBERTa-XL model)"),K9.forEach(t),bno=i(S),$s=n(S,"LI",{});var Z9=s($s);Mte=n(Z9,"STRONG",{});var mXr=s(Mte);Fno=r(mXr,"xlnet"),mXr.forEach(t),vno=r(Z9," \u2014 "),BB=n(Z9,"A",{href:!0});var fXr=s(BB);Tno=r(fXr,"XLNetTokenizer"),fXr.forEach(t),Mno=r(Z9," or "),PB=n(Z9,"A",{href:!0});var gXr=s(PB);Eno=r(gXr,"XLNetTokenizerFast"),gXr.forEach(t),Cno=r(Z9," (XLNet model)"),Z9.forEach(t),wno=i(S),ks=n(S,"LI",{});var e$=s(ks);Ete=n(e$,"STRONG",{});var hXr=s(Ete);Ano=r(hXr,"yoso"),hXr.forEach(t),yno=r(e$," \u2014 "),IB=n(e$,"A",{href:!0});var uXr=s(IB);Lno=r(uXr,"AlbertTokenizer"),uXr.forEach(t),xno=r(e$," or "),qB=n(e$,"A",{href:!0});var pXr=s(qB);$no=r(pXr,"AlbertTokenizerFast"),pXr.forEach(t),kno=r(e$," (YOSO model)"),e$.forEach(t),S.forEach(t),Sno=i(Is),T(Qg.$$.fragment,Is),Is.forEach(t),Rno=i(Ps),Wg=n(Ps,"DIV",{class:!0});var mqe=s(Wg);T(ey.$$.fragment,mqe),Bno=i(mqe),Cte=n(mqe,"P",{});var _Xr=s(Cte);Pno=r(_Xr,"Register a new tokenizer in this mapping."),_Xr.forEach(t),mqe.forEach(t),Ps.forEach(t),fPe=i(m),bi=n(m,"H2",{class:!0});var fqe=s(bi);Hg=n(fqe,"A",{id:!0,class:!0,href:!0});var bXr=s(Hg);wte=n(bXr,"SPAN",{});var FXr=s(wte);T(oy.$$.fragment,FXr),FXr.forEach(t),bXr.forEach(t),Ino=i(fqe),Ate=n(fqe,"SPAN",{});var vXr=s(Ate);qno=r(vXr,"AutoFeatureExtractor"),vXr.forEach(t),fqe.forEach(t),gPe=i(m),Ao=n(m,"DIV",{class:!0});var qs=s(Ao);T(ry.$$.fragment,qs),Nno=i(qs),ty=n(qs,"P",{});var gqe=s(ty);jno=r(gqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=n(gqe,"A",{href:!0});var TXr=s(NB);Dno=r(TXr,"AutoFeatureExtractor.from_pretrained()"),TXr.forEach(t),Gno=r(gqe," class method."),gqe.forEach(t),Ono=i(qs),ay=n(qs,"P",{});var hqe=s(ay);Vno=r(hqe,"This class cannot be instantiated directly using "),yte=n(hqe,"CODE",{});var MXr=s(yte);Xno=r(MXr,"__init__()"),MXr.forEach(t),zno=r(hqe," (throws an error)."),hqe.forEach(t),Qno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(ny.$$.fragment,Yt),Wno=i(Yt),Lte=n(Yt,"P",{});var EXr=s(Lte);Hno=r(EXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),EXr.forEach(t),Uno=i(Yt),wa=n(Yt,"P",{});var VA=s(wa);Jno=r(VA,"The feature extractor class to instantiate is selected based on the "),xte=n(VA,"CODE",{});var CXr=s(xte);Yno=r(CXr,"model_type"),CXr.forEach(t),Kno=r(VA,` property of the config object
(either passed as an argument or loaded from `),$te=n(VA,"CODE",{});var wXr=s($te);Zno=r(wXr,"pretrained_model_name_or_path"),wXr.forEach(t),eso=r(VA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kte=n(VA,"CODE",{});var AXr=s(kte);oso=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),rso=r(VA,":"),VA.forEach(t),tso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var wwe=s(Ug);Ste=n(wwe,"STRONG",{});var yXr=s(Ste);aso=r(yXr,"beit"),yXr.forEach(t),nso=r(wwe," \u2014 "),jB=n(wwe,"A",{href:!0});var LXr=s(jB);sso=r(LXr,"BeitFeatureExtractor"),LXr.forEach(t),lso=r(wwe," (BEiT model)"),wwe.forEach(t),iso=i(se),Jg=n(se,"LI",{});var Awe=s(Jg);Rte=n(Awe,"STRONG",{});var xXr=s(Rte);dso=r(xXr,"clip"),xXr.forEach(t),cso=r(Awe," \u2014 "),DB=n(Awe,"A",{href:!0});var $Xr=s(DB);mso=r($Xr,"CLIPFeatureExtractor"),$Xr.forEach(t),fso=r(Awe," (CLIP model)"),Awe.forEach(t),gso=i(se),Yg=n(se,"LI",{});var ywe=s(Yg);Bte=n(ywe,"STRONG",{});var kXr=s(Bte);hso=r(kXr,"convnext"),kXr.forEach(t),uso=r(ywe," \u2014 "),GB=n(ywe,"A",{href:!0});var SXr=s(GB);pso=r(SXr,"ConvNextFeatureExtractor"),SXr.forEach(t),_so=r(ywe," (ConvNext model)"),ywe.forEach(t),bso=i(se),Kg=n(se,"LI",{});var Lwe=s(Kg);Pte=n(Lwe,"STRONG",{});var RXr=s(Pte);Fso=r(RXr,"data2vec-audio"),RXr.forEach(t),vso=r(Lwe," \u2014 "),OB=n(Lwe,"A",{href:!0});var BXr=s(OB);Tso=r(BXr,"Wav2Vec2FeatureExtractor"),BXr.forEach(t),Mso=r(Lwe," (Data2VecAudio model)"),Lwe.forEach(t),Eso=i(se),Zg=n(se,"LI",{});var xwe=s(Zg);Ite=n(xwe,"STRONG",{});var PXr=s(Ite);Cso=r(PXr,"data2vec-vision"),PXr.forEach(t),wso=r(xwe," \u2014 "),VB=n(xwe,"A",{href:!0});var IXr=s(VB);Aso=r(IXr,"BeitFeatureExtractor"),IXr.forEach(t),yso=r(xwe," (Data2VecVision model)"),xwe.forEach(t),Lso=i(se),eh=n(se,"LI",{});var $we=s(eh);qte=n($we,"STRONG",{});var qXr=s(qte);xso=r(qXr,"deit"),qXr.forEach(t),$so=r($we," \u2014 "),XB=n($we,"A",{href:!0});var NXr=s(XB);kso=r(NXr,"DeiTFeatureExtractor"),NXr.forEach(t),Sso=r($we," (DeiT model)"),$we.forEach(t),Rso=i(se),oh=n(se,"LI",{});var kwe=s(oh);Nte=n(kwe,"STRONG",{});var jXr=s(Nte);Bso=r(jXr,"detr"),jXr.forEach(t),Pso=r(kwe," \u2014 "),zB=n(kwe,"A",{href:!0});var DXr=s(zB);Iso=r(DXr,"DetrFeatureExtractor"),DXr.forEach(t),qso=r(kwe," (DETR model)"),kwe.forEach(t),Nso=i(se),rh=n(se,"LI",{});var Swe=s(rh);jte=n(Swe,"STRONG",{});var GXr=s(jte);jso=r(GXr,"dpt"),GXr.forEach(t),Dso=r(Swe," \u2014 "),QB=n(Swe,"A",{href:!0});var OXr=s(QB);Gso=r(OXr,"DPTFeatureExtractor"),OXr.forEach(t),Oso=r(Swe," (DPT model)"),Swe.forEach(t),Vso=i(se),th=n(se,"LI",{});var Rwe=s(th);Dte=n(Rwe,"STRONG",{});var VXr=s(Dte);Xso=r(VXr,"glpn"),VXr.forEach(t),zso=r(Rwe," \u2014 "),WB=n(Rwe,"A",{href:!0});var XXr=s(WB);Qso=r(XXr,"GLPNFeatureExtractor"),XXr.forEach(t),Wso=r(Rwe," (GLPN model)"),Rwe.forEach(t),Hso=i(se),ah=n(se,"LI",{});var Bwe=s(ah);Gte=n(Bwe,"STRONG",{});var zXr=s(Gte);Uso=r(zXr,"hubert"),zXr.forEach(t),Jso=r(Bwe," \u2014 "),HB=n(Bwe,"A",{href:!0});var QXr=s(HB);Yso=r(QXr,"Wav2Vec2FeatureExtractor"),QXr.forEach(t),Kso=r(Bwe," (Hubert model)"),Bwe.forEach(t),Zso=i(se),nh=n(se,"LI",{});var Pwe=s(nh);Ote=n(Pwe,"STRONG",{});var WXr=s(Ote);elo=r(WXr,"layoutlmv2"),WXr.forEach(t),olo=r(Pwe," \u2014 "),UB=n(Pwe,"A",{href:!0});var HXr=s(UB);rlo=r(HXr,"LayoutLMv2FeatureExtractor"),HXr.forEach(t),tlo=r(Pwe," (LayoutLMv2 model)"),Pwe.forEach(t),alo=i(se),sh=n(se,"LI",{});var Iwe=s(sh);Vte=n(Iwe,"STRONG",{});var UXr=s(Vte);nlo=r(UXr,"maskformer"),UXr.forEach(t),slo=r(Iwe," \u2014 "),JB=n(Iwe,"A",{href:!0});var JXr=s(JB);llo=r(JXr,"MaskFormerFeatureExtractor"),JXr.forEach(t),ilo=r(Iwe," (MaskFormer model)"),Iwe.forEach(t),dlo=i(se),lh=n(se,"LI",{});var qwe=s(lh);Xte=n(qwe,"STRONG",{});var YXr=s(Xte);clo=r(YXr,"perceiver"),YXr.forEach(t),mlo=r(qwe," \u2014 "),YB=n(qwe,"A",{href:!0});var KXr=s(YB);flo=r(KXr,"PerceiverFeatureExtractor"),KXr.forEach(t),glo=r(qwe," (Perceiver model)"),qwe.forEach(t),hlo=i(se),ih=n(se,"LI",{});var Nwe=s(ih);zte=n(Nwe,"STRONG",{});var ZXr=s(zte);ulo=r(ZXr,"poolformer"),ZXr.forEach(t),plo=r(Nwe," \u2014 "),KB=n(Nwe,"A",{href:!0});var ezr=s(KB);_lo=r(ezr,"PoolFormerFeatureExtractor"),ezr.forEach(t),blo=r(Nwe," (PoolFormer model)"),Nwe.forEach(t),Flo=i(se),dh=n(se,"LI",{});var jwe=s(dh);Qte=n(jwe,"STRONG",{});var ozr=s(Qte);vlo=r(ozr,"regnet"),ozr.forEach(t),Tlo=r(jwe," \u2014 "),ZB=n(jwe,"A",{href:!0});var rzr=s(ZB);Mlo=r(rzr,"ConvNextFeatureExtractor"),rzr.forEach(t),Elo=r(jwe," (RegNet model)"),jwe.forEach(t),Clo=i(se),ch=n(se,"LI",{});var Dwe=s(ch);Wte=n(Dwe,"STRONG",{});var tzr=s(Wte);wlo=r(tzr,"resnet"),tzr.forEach(t),Alo=r(Dwe," \u2014 "),eP=n(Dwe,"A",{href:!0});var azr=s(eP);ylo=r(azr,"ConvNextFeatureExtractor"),azr.forEach(t),Llo=r(Dwe," (ResNet model)"),Dwe.forEach(t),xlo=i(se),mh=n(se,"LI",{});var Gwe=s(mh);Hte=n(Gwe,"STRONG",{});var nzr=s(Hte);$lo=r(nzr,"segformer"),nzr.forEach(t),klo=r(Gwe," \u2014 "),oP=n(Gwe,"A",{href:!0});var szr=s(oP);Slo=r(szr,"SegformerFeatureExtractor"),szr.forEach(t),Rlo=r(Gwe," (SegFormer model)"),Gwe.forEach(t),Blo=i(se),fh=n(se,"LI",{});var Owe=s(fh);Ute=n(Owe,"STRONG",{});var lzr=s(Ute);Plo=r(lzr,"speech_to_text"),lzr.forEach(t),Ilo=r(Owe," \u2014 "),rP=n(Owe,"A",{href:!0});var izr=s(rP);qlo=r(izr,"Speech2TextFeatureExtractor"),izr.forEach(t),Nlo=r(Owe," (Speech2Text model)"),Owe.forEach(t),jlo=i(se),gh=n(se,"LI",{});var Vwe=s(gh);Jte=n(Vwe,"STRONG",{});var dzr=s(Jte);Dlo=r(dzr,"swin"),dzr.forEach(t),Glo=r(Vwe," \u2014 "),tP=n(Vwe,"A",{href:!0});var czr=s(tP);Olo=r(czr,"ViTFeatureExtractor"),czr.forEach(t),Vlo=r(Vwe," (Swin model)"),Vwe.forEach(t),Xlo=i(se),hh=n(se,"LI",{});var Xwe=s(hh);Yte=n(Xwe,"STRONG",{});var mzr=s(Yte);zlo=r(mzr,"van"),mzr.forEach(t),Qlo=r(Xwe," \u2014 "),aP=n(Xwe,"A",{href:!0});var fzr=s(aP);Wlo=r(fzr,"ConvNextFeatureExtractor"),fzr.forEach(t),Hlo=r(Xwe," (VAN model)"),Xwe.forEach(t),Ulo=i(se),uh=n(se,"LI",{});var zwe=s(uh);Kte=n(zwe,"STRONG",{});var gzr=s(Kte);Jlo=r(gzr,"vit"),gzr.forEach(t),Ylo=r(zwe," \u2014 "),nP=n(zwe,"A",{href:!0});var hzr=s(nP);Klo=r(hzr,"ViTFeatureExtractor"),hzr.forEach(t),Zlo=r(zwe," (ViT model)"),zwe.forEach(t),eio=i(se),ph=n(se,"LI",{});var Qwe=s(ph);Zte=n(Qwe,"STRONG",{});var uzr=s(Zte);oio=r(uzr,"vit_mae"),uzr.forEach(t),rio=r(Qwe," \u2014 "),sP=n(Qwe,"A",{href:!0});var pzr=s(sP);tio=r(pzr,"ViTFeatureExtractor"),pzr.forEach(t),aio=r(Qwe," (ViTMAE model)"),Qwe.forEach(t),nio=i(se),_h=n(se,"LI",{});var Wwe=s(_h);eae=n(Wwe,"STRONG",{});var _zr=s(eae);sio=r(_zr,"wav2vec2"),_zr.forEach(t),lio=r(Wwe," \u2014 "),lP=n(Wwe,"A",{href:!0});var bzr=s(lP);iio=r(bzr,"Wav2Vec2FeatureExtractor"),bzr.forEach(t),dio=r(Wwe," (Wav2Vec2 model)"),Wwe.forEach(t),cio=i(se),bh=n(se,"LI",{});var Hwe=s(bh);oae=n(Hwe,"STRONG",{});var Fzr=s(oae);mio=r(Fzr,"yolos"),Fzr.forEach(t),fio=r(Hwe," \u2014 "),iP=n(Hwe,"A",{href:!0});var vzr=s(iP);gio=r(vzr,"YolosFeatureExtractor"),vzr.forEach(t),hio=r(Hwe," (YOLOS model)"),Hwe.forEach(t),se.forEach(t),uio=i(Yt),T(Fh.$$.fragment,Yt),pio=i(Yt),T(vh.$$.fragment,Yt),Yt.forEach(t),_io=i(qs),Th=n(qs,"DIV",{class:!0});var uqe=s(Th);T(sy.$$.fragment,uqe),bio=i(uqe),rae=n(uqe,"P",{});var Tzr=s(rae);Fio=r(Tzr,"Register a new feature extractor for this class."),Tzr.forEach(t),uqe.forEach(t),qs.forEach(t),hPe=i(m),Fi=n(m,"H2",{class:!0});var pqe=s(Fi);Mh=n(pqe,"A",{id:!0,class:!0,href:!0});var Mzr=s(Mh);tae=n(Mzr,"SPAN",{});var Ezr=s(tae);T(ly.$$.fragment,Ezr),Ezr.forEach(t),Mzr.forEach(t),vio=i(pqe),aae=n(pqe,"SPAN",{});var Czr=s(aae);Tio=r(Czr,"AutoProcessor"),Czr.forEach(t),pqe.forEach(t),uPe=i(m),yo=n(m,"DIV",{class:!0});var Ns=s(yo);T(iy.$$.fragment,Ns),Mio=i(Ns),dy=n(Ns,"P",{});var _qe=s(dy);Eio=r(_qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dP=n(_qe,"A",{href:!0});var wzr=s(dP);Cio=r(wzr,"AutoProcessor.from_pretrained()"),wzr.forEach(t),wio=r(_qe," class method."),_qe.forEach(t),Aio=i(Ns),cy=n(Ns,"P",{});var bqe=s(cy);yio=r(bqe,"This class cannot be instantiated directly using "),nae=n(bqe,"CODE",{});var Azr=s(nae);Lio=r(Azr,"__init__()"),Azr.forEach(t),xio=r(bqe," (throws an error)."),bqe.forEach(t),$io=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(my.$$.fragment,Kt),kio=i(Kt),sae=n(Kt,"P",{});var yzr=s(sae);Sio=r(yzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yzr.forEach(t),Rio=i(Kt),vi=n(Kt,"P",{});var OY=s(vi);Bio=r(OY,"The processor class to instantiate is selected based on the "),lae=n(OY,"CODE",{});var Lzr=s(lae);Pio=r(Lzr,"model_type"),Lzr.forEach(t),Iio=r(OY,` property of the config object (either
passed as an argument or loaded from `),iae=n(OY,"CODE",{});var xzr=s(iae);qio=r(xzr,"pretrained_model_name_or_path"),xzr.forEach(t),Nio=r(OY," if possible):"),OY.forEach(t),jio=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Eh=n(ve,"LI",{});var Uwe=s(Eh);dae=n(Uwe,"STRONG",{});var $zr=s(dae);Dio=r($zr,"clip"),$zr.forEach(t),Gio=r(Uwe," \u2014 "),cP=n(Uwe,"A",{href:!0});var kzr=s(cP);Oio=r(kzr,"CLIPProcessor"),kzr.forEach(t),Vio=r(Uwe," (CLIP model)"),Uwe.forEach(t),Xio=i(ve),Ch=n(ve,"LI",{});var Jwe=s(Ch);cae=n(Jwe,"STRONG",{});var Szr=s(cae);zio=r(Szr,"layoutlmv2"),Szr.forEach(t),Qio=r(Jwe," \u2014 "),mP=n(Jwe,"A",{href:!0});var Rzr=s(mP);Wio=r(Rzr,"LayoutLMv2Processor"),Rzr.forEach(t),Hio=r(Jwe," (LayoutLMv2 model)"),Jwe.forEach(t),Uio=i(ve),wh=n(ve,"LI",{});var Ywe=s(wh);mae=n(Ywe,"STRONG",{});var Bzr=s(mae);Jio=r(Bzr,"layoutxlm"),Bzr.forEach(t),Yio=r(Ywe," \u2014 "),fP=n(Ywe,"A",{href:!0});var Pzr=s(fP);Kio=r(Pzr,"LayoutXLMProcessor"),Pzr.forEach(t),Zio=r(Ywe," (LayoutXLM model)"),Ywe.forEach(t),edo=i(ve),Ah=n(ve,"LI",{});var Kwe=s(Ah);fae=n(Kwe,"STRONG",{});var Izr=s(fae);odo=r(Izr,"sew"),Izr.forEach(t),rdo=r(Kwe," \u2014 "),gP=n(Kwe,"A",{href:!0});var qzr=s(gP);tdo=r(qzr,"Wav2Vec2Processor"),qzr.forEach(t),ado=r(Kwe," (SEW model)"),Kwe.forEach(t),ndo=i(ve),yh=n(ve,"LI",{});var Zwe=s(yh);gae=n(Zwe,"STRONG",{});var Nzr=s(gae);sdo=r(Nzr,"sew-d"),Nzr.forEach(t),ldo=r(Zwe," \u2014 "),hP=n(Zwe,"A",{href:!0});var jzr=s(hP);ido=r(jzr,"Wav2Vec2Processor"),jzr.forEach(t),ddo=r(Zwe," (SEW-D model)"),Zwe.forEach(t),cdo=i(ve),Lh=n(ve,"LI",{});var eAe=s(Lh);hae=n(eAe,"STRONG",{});var Dzr=s(hae);mdo=r(Dzr,"speech_to_text"),Dzr.forEach(t),fdo=r(eAe," \u2014 "),uP=n(eAe,"A",{href:!0});var Gzr=s(uP);gdo=r(Gzr,"Speech2TextProcessor"),Gzr.forEach(t),hdo=r(eAe," (Speech2Text model)"),eAe.forEach(t),udo=i(ve),xh=n(ve,"LI",{});var oAe=s(xh);uae=n(oAe,"STRONG",{});var Ozr=s(uae);pdo=r(Ozr,"speech_to_text_2"),Ozr.forEach(t),_do=r(oAe," \u2014 "),pP=n(oAe,"A",{href:!0});var Vzr=s(pP);bdo=r(Vzr,"Speech2Text2Processor"),Vzr.forEach(t),Fdo=r(oAe," (Speech2Text2 model)"),oAe.forEach(t),vdo=i(ve),$h=n(ve,"LI",{});var rAe=s($h);pae=n(rAe,"STRONG",{});var Xzr=s(pae);Tdo=r(Xzr,"trocr"),Xzr.forEach(t),Mdo=r(rAe," \u2014 "),_P=n(rAe,"A",{href:!0});var zzr=s(_P);Edo=r(zzr,"TrOCRProcessor"),zzr.forEach(t),Cdo=r(rAe," (TrOCR model)"),rAe.forEach(t),wdo=i(ve),kh=n(ve,"LI",{});var tAe=s(kh);_ae=n(tAe,"STRONG",{});var Qzr=s(_ae);Ado=r(Qzr,"unispeech"),Qzr.forEach(t),ydo=r(tAe," \u2014 "),bP=n(tAe,"A",{href:!0});var Wzr=s(bP);Ldo=r(Wzr,"Wav2Vec2Processor"),Wzr.forEach(t),xdo=r(tAe," (UniSpeech model)"),tAe.forEach(t),$do=i(ve),Sh=n(ve,"LI",{});var aAe=s(Sh);bae=n(aAe,"STRONG",{});var Hzr=s(bae);kdo=r(Hzr,"unispeech-sat"),Hzr.forEach(t),Sdo=r(aAe," \u2014 "),FP=n(aAe,"A",{href:!0});var Uzr=s(FP);Rdo=r(Uzr,"Wav2Vec2Processor"),Uzr.forEach(t),Bdo=r(aAe," (UniSpeechSat model)"),aAe.forEach(t),Pdo=i(ve),Rh=n(ve,"LI",{});var nAe=s(Rh);Fae=n(nAe,"STRONG",{});var Jzr=s(Fae);Ido=r(Jzr,"vilt"),Jzr.forEach(t),qdo=r(nAe," \u2014 "),vP=n(nAe,"A",{href:!0});var Yzr=s(vP);Ndo=r(Yzr,"ViltProcessor"),Yzr.forEach(t),jdo=r(nAe," (ViLT model)"),nAe.forEach(t),Ddo=i(ve),Bh=n(ve,"LI",{});var sAe=s(Bh);vae=n(sAe,"STRONG",{});var Kzr=s(vae);Gdo=r(Kzr,"vision-text-dual-encoder"),Kzr.forEach(t),Odo=r(sAe," \u2014 "),TP=n(sAe,"A",{href:!0});var Zzr=s(TP);Vdo=r(Zzr,"VisionTextDualEncoderProcessor"),Zzr.forEach(t),Xdo=r(sAe," (VisionTextDualEncoder model)"),sAe.forEach(t),zdo=i(ve),Ph=n(ve,"LI",{});var lAe=s(Ph);Tae=n(lAe,"STRONG",{});var eQr=s(Tae);Qdo=r(eQr,"wav2vec2"),eQr.forEach(t),Wdo=r(lAe," \u2014 "),MP=n(lAe,"A",{href:!0});var oQr=s(MP);Hdo=r(oQr,"Wav2Vec2Processor"),oQr.forEach(t),Udo=r(lAe," (Wav2Vec2 model)"),lAe.forEach(t),Jdo=i(ve),Ih=n(ve,"LI",{});var iAe=s(Ih);Mae=n(iAe,"STRONG",{});var rQr=s(Mae);Ydo=r(rQr,"wavlm"),rQr.forEach(t),Kdo=r(iAe," \u2014 "),EP=n(iAe,"A",{href:!0});var tQr=s(EP);Zdo=r(tQr,"Wav2Vec2Processor"),tQr.forEach(t),eco=r(iAe," (WavLM model)"),iAe.forEach(t),ve.forEach(t),oco=i(Kt),T(qh.$$.fragment,Kt),rco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),tco=i(Ns),jh=n(Ns,"DIV",{class:!0});var Fqe=s(jh);T(fy.$$.fragment,Fqe),aco=i(Fqe),Eae=n(Fqe,"P",{});var aQr=s(Eae);nco=r(aQr,"Register a new processor for this class."),aQr.forEach(t),Fqe.forEach(t),Ns.forEach(t),pPe=i(m),Ti=n(m,"H2",{class:!0});var vqe=s(Ti);Dh=n(vqe,"A",{id:!0,class:!0,href:!0});var nQr=s(Dh);Cae=n(nQr,"SPAN",{});var sQr=s(Cae);T(gy.$$.fragment,sQr),sQr.forEach(t),nQr.forEach(t),sco=i(vqe),wae=n(vqe,"SPAN",{});var lQr=s(wae);lco=r(lQr,"AutoModel"),lQr.forEach(t),vqe.forEach(t),_Pe=i(m),Lo=n(m,"DIV",{class:!0});var js=s(Lo);T(hy.$$.fragment,js),ico=i(js),Mi=n(js,"P",{});var VY=s(Mi);dco=r(VY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CP=n(VY,"A",{href:!0});var iQr=s(CP);cco=r(iQr,"from_pretrained()"),iQr.forEach(t),mco=r(VY," class method or the "),wP=n(VY,"A",{href:!0});var dQr=s(wP);fco=r(dQr,"from_config()"),dQr.forEach(t),gco=r(VY,` class
method.`),VY.forEach(t),hco=i(js),uy=n(js,"P",{});var Tqe=s(uy);uco=r(Tqe,"This class cannot be instantiated directly using "),Aae=n(Tqe,"CODE",{});var cQr=s(Aae);pco=r(cQr,"__init__()"),cQr.forEach(t),_co=r(Tqe," (throws an error)."),Tqe.forEach(t),bco=i(js),ot=n(js,"DIV",{class:!0});var XA=s(ot);T(py.$$.fragment,XA),Fco=i(XA),yae=n(XA,"P",{});var mQr=s(yae);vco=r(mQr,"Instantiates one of the base model classes of the library from a configuration."),mQr.forEach(t),Tco=i(XA),Ei=n(XA,"P",{});var XY=s(Ei);Mco=r(XY,`Note:
Loading a model from its configuration file does `),Lae=n(XY,"STRONG",{});var fQr=s(Lae);Eco=r(fQr,"not"),fQr.forEach(t),Cco=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AP=n(XY,"A",{href:!0});var gQr=s(AP);wco=r(gQr,"from_pretrained()"),gQr.forEach(t),Aco=r(XY," to load the model weights."),XY.forEach(t),yco=i(XA),T(Gh.$$.fragment,XA),XA.forEach(t),Lco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(_y.$$.fragment,Zt),xco=i(Zt),xae=n(Zt,"P",{});var hQr=s(xae);$co=r(hQr,"Instantiate one of the base model classes of the library from a pretrained model."),hQr.forEach(t),kco=i(Zt),Aa=n(Zt,"P",{});var zA=s(Aa);Sco=r(zA,"The model class to instantiate is selected based on the "),$ae=n(zA,"CODE",{});var uQr=s($ae);Rco=r(uQr,"model_type"),uQr.forEach(t),Bco=r(zA,` property of the config object (either
passed as an argument or loaded from `),kae=n(zA,"CODE",{});var pQr=s(kae);Pco=r(pQr,"pretrained_model_name_or_path"),pQr.forEach(t),Ico=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=n(zA,"CODE",{});var _Qr=s(Sae);qco=r(_Qr,"pretrained_model_name_or_path"),_Qr.forEach(t),Nco=r(zA,":"),zA.forEach(t),jco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var dAe=s(Oh);Rae=n(dAe,"STRONG",{});var bQr=s(Rae);Dco=r(bQr,"albert"),bQr.forEach(t),Gco=r(dAe," \u2014 "),yP=n(dAe,"A",{href:!0});var FQr=s(yP);Oco=r(FQr,"AlbertModel"),FQr.forEach(t),Vco=r(dAe," (ALBERT model)"),dAe.forEach(t),Xco=i($),Vh=n($,"LI",{});var cAe=s(Vh);Bae=n(cAe,"STRONG",{});var vQr=s(Bae);zco=r(vQr,"bart"),vQr.forEach(t),Qco=r(cAe," \u2014 "),LP=n(cAe,"A",{href:!0});var TQr=s(LP);Wco=r(TQr,"BartModel"),TQr.forEach(t),Hco=r(cAe," (BART model)"),cAe.forEach(t),Uco=i($),Xh=n($,"LI",{});var mAe=s(Xh);Pae=n(mAe,"STRONG",{});var MQr=s(Pae);Jco=r(MQr,"beit"),MQr.forEach(t),Yco=r(mAe," \u2014 "),xP=n(mAe,"A",{href:!0});var EQr=s(xP);Kco=r(EQr,"BeitModel"),EQr.forEach(t),Zco=r(mAe," (BEiT model)"),mAe.forEach(t),emo=i($),zh=n($,"LI",{});var fAe=s(zh);Iae=n(fAe,"STRONG",{});var CQr=s(Iae);omo=r(CQr,"bert"),CQr.forEach(t),rmo=r(fAe," \u2014 "),$P=n(fAe,"A",{href:!0});var wQr=s($P);tmo=r(wQr,"BertModel"),wQr.forEach(t),amo=r(fAe," (BERT model)"),fAe.forEach(t),nmo=i($),Qh=n($,"LI",{});var gAe=s(Qh);qae=n(gAe,"STRONG",{});var AQr=s(qae);smo=r(AQr,"bert-generation"),AQr.forEach(t),lmo=r(gAe," \u2014 "),kP=n(gAe,"A",{href:!0});var yQr=s(kP);imo=r(yQr,"BertGenerationEncoder"),yQr.forEach(t),dmo=r(gAe," (Bert Generation model)"),gAe.forEach(t),cmo=i($),Wh=n($,"LI",{});var hAe=s(Wh);Nae=n(hAe,"STRONG",{});var LQr=s(Nae);mmo=r(LQr,"big_bird"),LQr.forEach(t),fmo=r(hAe," \u2014 "),SP=n(hAe,"A",{href:!0});var xQr=s(SP);gmo=r(xQr,"BigBirdModel"),xQr.forEach(t),hmo=r(hAe," (BigBird model)"),hAe.forEach(t),umo=i($),Hh=n($,"LI",{});var uAe=s(Hh);jae=n(uAe,"STRONG",{});var $Qr=s(jae);pmo=r($Qr,"bigbird_pegasus"),$Qr.forEach(t),_mo=r(uAe," \u2014 "),RP=n(uAe,"A",{href:!0});var kQr=s(RP);bmo=r(kQr,"BigBirdPegasusModel"),kQr.forEach(t),Fmo=r(uAe," (BigBirdPegasus model)"),uAe.forEach(t),vmo=i($),Uh=n($,"LI",{});var pAe=s(Uh);Dae=n(pAe,"STRONG",{});var SQr=s(Dae);Tmo=r(SQr,"blenderbot"),SQr.forEach(t),Mmo=r(pAe," \u2014 "),BP=n(pAe,"A",{href:!0});var RQr=s(BP);Emo=r(RQr,"BlenderbotModel"),RQr.forEach(t),Cmo=r(pAe," (Blenderbot model)"),pAe.forEach(t),wmo=i($),Jh=n($,"LI",{});var _Ae=s(Jh);Gae=n(_Ae,"STRONG",{});var BQr=s(Gae);Amo=r(BQr,"blenderbot-small"),BQr.forEach(t),ymo=r(_Ae," \u2014 "),PP=n(_Ae,"A",{href:!0});var PQr=s(PP);Lmo=r(PQr,"BlenderbotSmallModel"),PQr.forEach(t),xmo=r(_Ae," (BlenderbotSmall model)"),_Ae.forEach(t),$mo=i($),Yh=n($,"LI",{});var bAe=s(Yh);Oae=n(bAe,"STRONG",{});var IQr=s(Oae);kmo=r(IQr,"camembert"),IQr.forEach(t),Smo=r(bAe," \u2014 "),IP=n(bAe,"A",{href:!0});var qQr=s(IP);Rmo=r(qQr,"CamembertModel"),qQr.forEach(t),Bmo=r(bAe," (CamemBERT model)"),bAe.forEach(t),Pmo=i($),Kh=n($,"LI",{});var FAe=s(Kh);Vae=n(FAe,"STRONG",{});var NQr=s(Vae);Imo=r(NQr,"canine"),NQr.forEach(t),qmo=r(FAe," \u2014 "),qP=n(FAe,"A",{href:!0});var jQr=s(qP);Nmo=r(jQr,"CanineModel"),jQr.forEach(t),jmo=r(FAe," (Canine model)"),FAe.forEach(t),Dmo=i($),Zh=n($,"LI",{});var vAe=s(Zh);Xae=n(vAe,"STRONG",{});var DQr=s(Xae);Gmo=r(DQr,"clip"),DQr.forEach(t),Omo=r(vAe," \u2014 "),NP=n(vAe,"A",{href:!0});var GQr=s(NP);Vmo=r(GQr,"CLIPModel"),GQr.forEach(t),Xmo=r(vAe," (CLIP model)"),vAe.forEach(t),zmo=i($),eu=n($,"LI",{});var TAe=s(eu);zae=n(TAe,"STRONG",{});var OQr=s(zae);Qmo=r(OQr,"convbert"),OQr.forEach(t),Wmo=r(TAe," \u2014 "),jP=n(TAe,"A",{href:!0});var VQr=s(jP);Hmo=r(VQr,"ConvBertModel"),VQr.forEach(t),Umo=r(TAe," (ConvBERT model)"),TAe.forEach(t),Jmo=i($),ou=n($,"LI",{});var MAe=s(ou);Qae=n(MAe,"STRONG",{});var XQr=s(Qae);Ymo=r(XQr,"convnext"),XQr.forEach(t),Kmo=r(MAe," \u2014 "),DP=n(MAe,"A",{href:!0});var zQr=s(DP);Zmo=r(zQr,"ConvNextModel"),zQr.forEach(t),efo=r(MAe," (ConvNext model)"),MAe.forEach(t),ofo=i($),ru=n($,"LI",{});var EAe=s(ru);Wae=n(EAe,"STRONG",{});var QQr=s(Wae);rfo=r(QQr,"ctrl"),QQr.forEach(t),tfo=r(EAe," \u2014 "),GP=n(EAe,"A",{href:!0});var WQr=s(GP);afo=r(WQr,"CTRLModel"),WQr.forEach(t),nfo=r(EAe," (CTRL model)"),EAe.forEach(t),sfo=i($),tu=n($,"LI",{});var CAe=s(tu);Hae=n(CAe,"STRONG",{});var HQr=s(Hae);lfo=r(HQr,"data2vec-audio"),HQr.forEach(t),ifo=r(CAe," \u2014 "),OP=n(CAe,"A",{href:!0});var UQr=s(OP);dfo=r(UQr,"Data2VecAudioModel"),UQr.forEach(t),cfo=r(CAe," (Data2VecAudio model)"),CAe.forEach(t),mfo=i($),au=n($,"LI",{});var wAe=s(au);Uae=n(wAe,"STRONG",{});var JQr=s(Uae);ffo=r(JQr,"data2vec-text"),JQr.forEach(t),gfo=r(wAe," \u2014 "),VP=n(wAe,"A",{href:!0});var YQr=s(VP);hfo=r(YQr,"Data2VecTextModel"),YQr.forEach(t),ufo=r(wAe," (Data2VecText model)"),wAe.forEach(t),pfo=i($),nu=n($,"LI",{});var AAe=s(nu);Jae=n(AAe,"STRONG",{});var KQr=s(Jae);_fo=r(KQr,"data2vec-vision"),KQr.forEach(t),bfo=r(AAe," \u2014 "),XP=n(AAe,"A",{href:!0});var ZQr=s(XP);Ffo=r(ZQr,"Data2VecVisionModel"),ZQr.forEach(t),vfo=r(AAe," (Data2VecVision model)"),AAe.forEach(t),Tfo=i($),su=n($,"LI",{});var yAe=s(su);Yae=n(yAe,"STRONG",{});var eWr=s(Yae);Mfo=r(eWr,"deberta"),eWr.forEach(t),Efo=r(yAe," \u2014 "),zP=n(yAe,"A",{href:!0});var oWr=s(zP);Cfo=r(oWr,"DebertaModel"),oWr.forEach(t),wfo=r(yAe," (DeBERTa model)"),yAe.forEach(t),Afo=i($),lu=n($,"LI",{});var LAe=s(lu);Kae=n(LAe,"STRONG",{});var rWr=s(Kae);yfo=r(rWr,"deberta-v2"),rWr.forEach(t),Lfo=r(LAe," \u2014 "),QP=n(LAe,"A",{href:!0});var tWr=s(QP);xfo=r(tWr,"DebertaV2Model"),tWr.forEach(t),$fo=r(LAe," (DeBERTa-v2 model)"),LAe.forEach(t),kfo=i($),iu=n($,"LI",{});var xAe=s(iu);Zae=n(xAe,"STRONG",{});var aWr=s(Zae);Sfo=r(aWr,"decision_transformer"),aWr.forEach(t),Rfo=r(xAe," \u2014 "),WP=n(xAe,"A",{href:!0});var nWr=s(WP);Bfo=r(nWr,"DecisionTransformerModel"),nWr.forEach(t),Pfo=r(xAe," (Decision Transformer model)"),xAe.forEach(t),Ifo=i($),du=n($,"LI",{});var $Ae=s(du);ene=n($Ae,"STRONG",{});var sWr=s(ene);qfo=r(sWr,"deit"),sWr.forEach(t),Nfo=r($Ae," \u2014 "),HP=n($Ae,"A",{href:!0});var lWr=s(HP);jfo=r(lWr,"DeiTModel"),lWr.forEach(t),Dfo=r($Ae," (DeiT model)"),$Ae.forEach(t),Gfo=i($),cu=n($,"LI",{});var kAe=s(cu);one=n(kAe,"STRONG",{});var iWr=s(one);Ofo=r(iWr,"detr"),iWr.forEach(t),Vfo=r(kAe," \u2014 "),UP=n(kAe,"A",{href:!0});var dWr=s(UP);Xfo=r(dWr,"DetrModel"),dWr.forEach(t),zfo=r(kAe," (DETR model)"),kAe.forEach(t),Qfo=i($),mu=n($,"LI",{});var SAe=s(mu);rne=n(SAe,"STRONG",{});var cWr=s(rne);Wfo=r(cWr,"distilbert"),cWr.forEach(t),Hfo=r(SAe," \u2014 "),JP=n(SAe,"A",{href:!0});var mWr=s(JP);Ufo=r(mWr,"DistilBertModel"),mWr.forEach(t),Jfo=r(SAe," (DistilBERT model)"),SAe.forEach(t),Yfo=i($),fu=n($,"LI",{});var RAe=s(fu);tne=n(RAe,"STRONG",{});var fWr=s(tne);Kfo=r(fWr,"dpr"),fWr.forEach(t),Zfo=r(RAe," \u2014 "),YP=n(RAe,"A",{href:!0});var gWr=s(YP);ego=r(gWr,"DPRQuestionEncoder"),gWr.forEach(t),ogo=r(RAe," (DPR model)"),RAe.forEach(t),rgo=i($),gu=n($,"LI",{});var BAe=s(gu);ane=n(BAe,"STRONG",{});var hWr=s(ane);tgo=r(hWr,"dpt"),hWr.forEach(t),ago=r(BAe," \u2014 "),KP=n(BAe,"A",{href:!0});var uWr=s(KP);ngo=r(uWr,"DPTModel"),uWr.forEach(t),sgo=r(BAe," (DPT model)"),BAe.forEach(t),lgo=i($),hu=n($,"LI",{});var PAe=s(hu);nne=n(PAe,"STRONG",{});var pWr=s(nne);igo=r(pWr,"electra"),pWr.forEach(t),dgo=r(PAe," \u2014 "),ZP=n(PAe,"A",{href:!0});var _Wr=s(ZP);cgo=r(_Wr,"ElectraModel"),_Wr.forEach(t),mgo=r(PAe," (ELECTRA model)"),PAe.forEach(t),fgo=i($),uu=n($,"LI",{});var IAe=s(uu);sne=n(IAe,"STRONG",{});var bWr=s(sne);ggo=r(bWr,"flaubert"),bWr.forEach(t),hgo=r(IAe," \u2014 "),eI=n(IAe,"A",{href:!0});var FWr=s(eI);ugo=r(FWr,"FlaubertModel"),FWr.forEach(t),pgo=r(IAe," (FlauBERT model)"),IAe.forEach(t),_go=i($),pu=n($,"LI",{});var qAe=s(pu);lne=n(qAe,"STRONG",{});var vWr=s(lne);bgo=r(vWr,"fnet"),vWr.forEach(t),Fgo=r(qAe," \u2014 "),oI=n(qAe,"A",{href:!0});var TWr=s(oI);vgo=r(TWr,"FNetModel"),TWr.forEach(t),Tgo=r(qAe," (FNet model)"),qAe.forEach(t),Mgo=i($),_u=n($,"LI",{});var NAe=s(_u);ine=n(NAe,"STRONG",{});var MWr=s(ine);Ego=r(MWr,"fsmt"),MWr.forEach(t),Cgo=r(NAe," \u2014 "),rI=n(NAe,"A",{href:!0});var EWr=s(rI);wgo=r(EWr,"FSMTModel"),EWr.forEach(t),Ago=r(NAe," (FairSeq Machine-Translation model)"),NAe.forEach(t),ygo=i($),Ss=n($,"LI",{});var o$=s(Ss);dne=n(o$,"STRONG",{});var CWr=s(dne);Lgo=r(CWr,"funnel"),CWr.forEach(t),xgo=r(o$," \u2014 "),tI=n(o$,"A",{href:!0});var wWr=s(tI);$go=r(wWr,"FunnelModel"),wWr.forEach(t),kgo=r(o$," or "),aI=n(o$,"A",{href:!0});var AWr=s(aI);Sgo=r(AWr,"FunnelBaseModel"),AWr.forEach(t),Rgo=r(o$," (Funnel Transformer model)"),o$.forEach(t),Bgo=i($),bu=n($,"LI",{});var jAe=s(bu);cne=n(jAe,"STRONG",{});var yWr=s(cne);Pgo=r(yWr,"glpn"),yWr.forEach(t),Igo=r(jAe," \u2014 "),nI=n(jAe,"A",{href:!0});var LWr=s(nI);qgo=r(LWr,"GLPNModel"),LWr.forEach(t),Ngo=r(jAe," (GLPN model)"),jAe.forEach(t),jgo=i($),Fu=n($,"LI",{});var DAe=s(Fu);mne=n(DAe,"STRONG",{});var xWr=s(mne);Dgo=r(xWr,"gpt2"),xWr.forEach(t),Ggo=r(DAe," \u2014 "),sI=n(DAe,"A",{href:!0});var $Wr=s(sI);Ogo=r($Wr,"GPT2Model"),$Wr.forEach(t),Vgo=r(DAe," (OpenAI GPT-2 model)"),DAe.forEach(t),Xgo=i($),vu=n($,"LI",{});var GAe=s(vu);fne=n(GAe,"STRONG",{});var kWr=s(fne);zgo=r(kWr,"gpt_neo"),kWr.forEach(t),Qgo=r(GAe," \u2014 "),lI=n(GAe,"A",{href:!0});var SWr=s(lI);Wgo=r(SWr,"GPTNeoModel"),SWr.forEach(t),Hgo=r(GAe," (GPT Neo model)"),GAe.forEach(t),Ugo=i($),Tu=n($,"LI",{});var OAe=s(Tu);gne=n(OAe,"STRONG",{});var RWr=s(gne);Jgo=r(RWr,"gptj"),RWr.forEach(t),Ygo=r(OAe," \u2014 "),iI=n(OAe,"A",{href:!0});var BWr=s(iI);Kgo=r(BWr,"GPTJModel"),BWr.forEach(t),Zgo=r(OAe," (GPT-J model)"),OAe.forEach(t),eho=i($),Mu=n($,"LI",{});var VAe=s(Mu);hne=n(VAe,"STRONG",{});var PWr=s(hne);oho=r(PWr,"hubert"),PWr.forEach(t),rho=r(VAe," \u2014 "),dI=n(VAe,"A",{href:!0});var IWr=s(dI);tho=r(IWr,"HubertModel"),IWr.forEach(t),aho=r(VAe," (Hubert model)"),VAe.forEach(t),nho=i($),Eu=n($,"LI",{});var XAe=s(Eu);une=n(XAe,"STRONG",{});var qWr=s(une);sho=r(qWr,"ibert"),qWr.forEach(t),lho=r(XAe," \u2014 "),cI=n(XAe,"A",{href:!0});var NWr=s(cI);iho=r(NWr,"IBertModel"),NWr.forEach(t),dho=r(XAe," (I-BERT model)"),XAe.forEach(t),cho=i($),Cu=n($,"LI",{});var zAe=s(Cu);pne=n(zAe,"STRONG",{});var jWr=s(pne);mho=r(jWr,"imagegpt"),jWr.forEach(t),fho=r(zAe," \u2014 "),mI=n(zAe,"A",{href:!0});var DWr=s(mI);gho=r(DWr,"ImageGPTModel"),DWr.forEach(t),hho=r(zAe," (ImageGPT model)"),zAe.forEach(t),uho=i($),wu=n($,"LI",{});var QAe=s(wu);_ne=n(QAe,"STRONG",{});var GWr=s(_ne);pho=r(GWr,"layoutlm"),GWr.forEach(t),_ho=r(QAe," \u2014 "),fI=n(QAe,"A",{href:!0});var OWr=s(fI);bho=r(OWr,"LayoutLMModel"),OWr.forEach(t),Fho=r(QAe," (LayoutLM model)"),QAe.forEach(t),vho=i($),Au=n($,"LI",{});var WAe=s(Au);bne=n(WAe,"STRONG",{});var VWr=s(bne);Tho=r(VWr,"layoutlmv2"),VWr.forEach(t),Mho=r(WAe," \u2014 "),gI=n(WAe,"A",{href:!0});var XWr=s(gI);Eho=r(XWr,"LayoutLMv2Model"),XWr.forEach(t),Cho=r(WAe," (LayoutLMv2 model)"),WAe.forEach(t),who=i($),yu=n($,"LI",{});var HAe=s(yu);Fne=n(HAe,"STRONG",{});var zWr=s(Fne);Aho=r(zWr,"led"),zWr.forEach(t),yho=r(HAe," \u2014 "),hI=n(HAe,"A",{href:!0});var QWr=s(hI);Lho=r(QWr,"LEDModel"),QWr.forEach(t),xho=r(HAe," (LED model)"),HAe.forEach(t),$ho=i($),Lu=n($,"LI",{});var UAe=s(Lu);vne=n(UAe,"STRONG",{});var WWr=s(vne);kho=r(WWr,"longformer"),WWr.forEach(t),Sho=r(UAe," \u2014 "),uI=n(UAe,"A",{href:!0});var HWr=s(uI);Rho=r(HWr,"LongformerModel"),HWr.forEach(t),Bho=r(UAe," (Longformer model)"),UAe.forEach(t),Pho=i($),xu=n($,"LI",{});var JAe=s(xu);Tne=n(JAe,"STRONG",{});var UWr=s(Tne);Iho=r(UWr,"luke"),UWr.forEach(t),qho=r(JAe," \u2014 "),pI=n(JAe,"A",{href:!0});var JWr=s(pI);Nho=r(JWr,"LukeModel"),JWr.forEach(t),jho=r(JAe," (LUKE model)"),JAe.forEach(t),Dho=i($),$u=n($,"LI",{});var YAe=s($u);Mne=n(YAe,"STRONG",{});var YWr=s(Mne);Gho=r(YWr,"lxmert"),YWr.forEach(t),Oho=r(YAe," \u2014 "),_I=n(YAe,"A",{href:!0});var KWr=s(_I);Vho=r(KWr,"LxmertModel"),KWr.forEach(t),Xho=r(YAe," (LXMERT model)"),YAe.forEach(t),zho=i($),ku=n($,"LI",{});var KAe=s(ku);Ene=n(KAe,"STRONG",{});var ZWr=s(Ene);Qho=r(ZWr,"m2m_100"),ZWr.forEach(t),Who=r(KAe," \u2014 "),bI=n(KAe,"A",{href:!0});var eHr=s(bI);Hho=r(eHr,"M2M100Model"),eHr.forEach(t),Uho=r(KAe," (M2M100 model)"),KAe.forEach(t),Jho=i($),Su=n($,"LI",{});var ZAe=s(Su);Cne=n(ZAe,"STRONG",{});var oHr=s(Cne);Yho=r(oHr,"marian"),oHr.forEach(t),Kho=r(ZAe," \u2014 "),FI=n(ZAe,"A",{href:!0});var rHr=s(FI);Zho=r(rHr,"MarianModel"),rHr.forEach(t),euo=r(ZAe," (Marian model)"),ZAe.forEach(t),ouo=i($),Ru=n($,"LI",{});var e0e=s(Ru);wne=n(e0e,"STRONG",{});var tHr=s(wne);ruo=r(tHr,"maskformer"),tHr.forEach(t),tuo=r(e0e," \u2014 "),vI=n(e0e,"A",{href:!0});var aHr=s(vI);auo=r(aHr,"MaskFormerModel"),aHr.forEach(t),nuo=r(e0e," (MaskFormer model)"),e0e.forEach(t),suo=i($),Bu=n($,"LI",{});var o0e=s(Bu);Ane=n(o0e,"STRONG",{});var nHr=s(Ane);luo=r(nHr,"mbart"),nHr.forEach(t),iuo=r(o0e," \u2014 "),TI=n(o0e,"A",{href:!0});var sHr=s(TI);duo=r(sHr,"MBartModel"),sHr.forEach(t),cuo=r(o0e," (mBART model)"),o0e.forEach(t),muo=i($),Pu=n($,"LI",{});var r0e=s(Pu);yne=n(r0e,"STRONG",{});var lHr=s(yne);fuo=r(lHr,"megatron-bert"),lHr.forEach(t),guo=r(r0e," \u2014 "),MI=n(r0e,"A",{href:!0});var iHr=s(MI);huo=r(iHr,"MegatronBertModel"),iHr.forEach(t),uuo=r(r0e," (MegatronBert model)"),r0e.forEach(t),puo=i($),Iu=n($,"LI",{});var t0e=s(Iu);Lne=n(t0e,"STRONG",{});var dHr=s(Lne);_uo=r(dHr,"mobilebert"),dHr.forEach(t),buo=r(t0e," \u2014 "),EI=n(t0e,"A",{href:!0});var cHr=s(EI);Fuo=r(cHr,"MobileBertModel"),cHr.forEach(t),vuo=r(t0e," (MobileBERT model)"),t0e.forEach(t),Tuo=i($),qu=n($,"LI",{});var a0e=s(qu);xne=n(a0e,"STRONG",{});var mHr=s(xne);Muo=r(mHr,"mpnet"),mHr.forEach(t),Euo=r(a0e," \u2014 "),CI=n(a0e,"A",{href:!0});var fHr=s(CI);Cuo=r(fHr,"MPNetModel"),fHr.forEach(t),wuo=r(a0e," (MPNet model)"),a0e.forEach(t),Auo=i($),Nu=n($,"LI",{});var n0e=s(Nu);$ne=n(n0e,"STRONG",{});var gHr=s($ne);yuo=r(gHr,"mt5"),gHr.forEach(t),Luo=r(n0e," \u2014 "),wI=n(n0e,"A",{href:!0});var hHr=s(wI);xuo=r(hHr,"MT5Model"),hHr.forEach(t),$uo=r(n0e," (mT5 model)"),n0e.forEach(t),kuo=i($),ju=n($,"LI",{});var s0e=s(ju);kne=n(s0e,"STRONG",{});var uHr=s(kne);Suo=r(uHr,"nystromformer"),uHr.forEach(t),Ruo=r(s0e," \u2014 "),AI=n(s0e,"A",{href:!0});var pHr=s(AI);Buo=r(pHr,"NystromformerModel"),pHr.forEach(t),Puo=r(s0e," (Nystromformer model)"),s0e.forEach(t),Iuo=i($),Du=n($,"LI",{});var l0e=s(Du);Sne=n(l0e,"STRONG",{});var _Hr=s(Sne);quo=r(_Hr,"openai-gpt"),_Hr.forEach(t),Nuo=r(l0e," \u2014 "),yI=n(l0e,"A",{href:!0});var bHr=s(yI);juo=r(bHr,"OpenAIGPTModel"),bHr.forEach(t),Duo=r(l0e," (OpenAI GPT model)"),l0e.forEach(t),Guo=i($),Gu=n($,"LI",{});var i0e=s(Gu);Rne=n(i0e,"STRONG",{});var FHr=s(Rne);Ouo=r(FHr,"pegasus"),FHr.forEach(t),Vuo=r(i0e," \u2014 "),LI=n(i0e,"A",{href:!0});var vHr=s(LI);Xuo=r(vHr,"PegasusModel"),vHr.forEach(t),zuo=r(i0e," (Pegasus model)"),i0e.forEach(t),Quo=i($),Ou=n($,"LI",{});var d0e=s(Ou);Bne=n(d0e,"STRONG",{});var THr=s(Bne);Wuo=r(THr,"perceiver"),THr.forEach(t),Huo=r(d0e," \u2014 "),xI=n(d0e,"A",{href:!0});var MHr=s(xI);Uuo=r(MHr,"PerceiverModel"),MHr.forEach(t),Juo=r(d0e," (Perceiver model)"),d0e.forEach(t),Yuo=i($),Vu=n($,"LI",{});var c0e=s(Vu);Pne=n(c0e,"STRONG",{});var EHr=s(Pne);Kuo=r(EHr,"plbart"),EHr.forEach(t),Zuo=r(c0e," \u2014 "),$I=n(c0e,"A",{href:!0});var CHr=s($I);epo=r(CHr,"PLBartModel"),CHr.forEach(t),opo=r(c0e," (PLBart model)"),c0e.forEach(t),rpo=i($),Xu=n($,"LI",{});var m0e=s(Xu);Ine=n(m0e,"STRONG",{});var wHr=s(Ine);tpo=r(wHr,"poolformer"),wHr.forEach(t),apo=r(m0e," \u2014 "),kI=n(m0e,"A",{href:!0});var AHr=s(kI);npo=r(AHr,"PoolFormerModel"),AHr.forEach(t),spo=r(m0e," (PoolFormer model)"),m0e.forEach(t),lpo=i($),zu=n($,"LI",{});var f0e=s(zu);qne=n(f0e,"STRONG",{});var yHr=s(qne);ipo=r(yHr,"prophetnet"),yHr.forEach(t),dpo=r(f0e," \u2014 "),SI=n(f0e,"A",{href:!0});var LHr=s(SI);cpo=r(LHr,"ProphetNetModel"),LHr.forEach(t),mpo=r(f0e," (ProphetNet model)"),f0e.forEach(t),fpo=i($),Qu=n($,"LI",{});var g0e=s(Qu);Nne=n(g0e,"STRONG",{});var xHr=s(Nne);gpo=r(xHr,"qdqbert"),xHr.forEach(t),hpo=r(g0e," \u2014 "),RI=n(g0e,"A",{href:!0});var $Hr=s(RI);upo=r($Hr,"QDQBertModel"),$Hr.forEach(t),ppo=r(g0e," (QDQBert model)"),g0e.forEach(t),_po=i($),Wu=n($,"LI",{});var h0e=s(Wu);jne=n(h0e,"STRONG",{});var kHr=s(jne);bpo=r(kHr,"reformer"),kHr.forEach(t),Fpo=r(h0e," \u2014 "),BI=n(h0e,"A",{href:!0});var SHr=s(BI);vpo=r(SHr,"ReformerModel"),SHr.forEach(t),Tpo=r(h0e," (Reformer model)"),h0e.forEach(t),Mpo=i($),Hu=n($,"LI",{});var u0e=s(Hu);Dne=n(u0e,"STRONG",{});var RHr=s(Dne);Epo=r(RHr,"regnet"),RHr.forEach(t),Cpo=r(u0e," \u2014 "),PI=n(u0e,"A",{href:!0});var BHr=s(PI);wpo=r(BHr,"RegNetModel"),BHr.forEach(t),Apo=r(u0e," (RegNet model)"),u0e.forEach(t),ypo=i($),Uu=n($,"LI",{});var p0e=s(Uu);Gne=n(p0e,"STRONG",{});var PHr=s(Gne);Lpo=r(PHr,"rembert"),PHr.forEach(t),xpo=r(p0e," \u2014 "),II=n(p0e,"A",{href:!0});var IHr=s(II);$po=r(IHr,"RemBertModel"),IHr.forEach(t),kpo=r(p0e," (RemBERT model)"),p0e.forEach(t),Spo=i($),Ju=n($,"LI",{});var _0e=s(Ju);One=n(_0e,"STRONG",{});var qHr=s(One);Rpo=r(qHr,"resnet"),qHr.forEach(t),Bpo=r(_0e," \u2014 "),qI=n(_0e,"A",{href:!0});var NHr=s(qI);Ppo=r(NHr,"ResNetModel"),NHr.forEach(t),Ipo=r(_0e," (ResNet model)"),_0e.forEach(t),qpo=i($),Yu=n($,"LI",{});var b0e=s(Yu);Vne=n(b0e,"STRONG",{});var jHr=s(Vne);Npo=r(jHr,"retribert"),jHr.forEach(t),jpo=r(b0e," \u2014 "),NI=n(b0e,"A",{href:!0});var DHr=s(NI);Dpo=r(DHr,"RetriBertModel"),DHr.forEach(t),Gpo=r(b0e," (RetriBERT model)"),b0e.forEach(t),Opo=i($),Ku=n($,"LI",{});var F0e=s(Ku);Xne=n(F0e,"STRONG",{});var GHr=s(Xne);Vpo=r(GHr,"roberta"),GHr.forEach(t),Xpo=r(F0e," \u2014 "),jI=n(F0e,"A",{href:!0});var OHr=s(jI);zpo=r(OHr,"RobertaModel"),OHr.forEach(t),Qpo=r(F0e," (RoBERTa model)"),F0e.forEach(t),Wpo=i($),Zu=n($,"LI",{});var v0e=s(Zu);zne=n(v0e,"STRONG",{});var VHr=s(zne);Hpo=r(VHr,"roformer"),VHr.forEach(t),Upo=r(v0e," \u2014 "),DI=n(v0e,"A",{href:!0});var XHr=s(DI);Jpo=r(XHr,"RoFormerModel"),XHr.forEach(t),Ypo=r(v0e," (RoFormer model)"),v0e.forEach(t),Kpo=i($),ep=n($,"LI",{});var T0e=s(ep);Qne=n(T0e,"STRONG",{});var zHr=s(Qne);Zpo=r(zHr,"segformer"),zHr.forEach(t),e_o=r(T0e," \u2014 "),GI=n(T0e,"A",{href:!0});var QHr=s(GI);o_o=r(QHr,"SegformerModel"),QHr.forEach(t),r_o=r(T0e," (SegFormer model)"),T0e.forEach(t),t_o=i($),op=n($,"LI",{});var M0e=s(op);Wne=n(M0e,"STRONG",{});var WHr=s(Wne);a_o=r(WHr,"sew"),WHr.forEach(t),n_o=r(M0e," \u2014 "),OI=n(M0e,"A",{href:!0});var HHr=s(OI);s_o=r(HHr,"SEWModel"),HHr.forEach(t),l_o=r(M0e," (SEW model)"),M0e.forEach(t),i_o=i($),rp=n($,"LI",{});var E0e=s(rp);Hne=n(E0e,"STRONG",{});var UHr=s(Hne);d_o=r(UHr,"sew-d"),UHr.forEach(t),c_o=r(E0e," \u2014 "),VI=n(E0e,"A",{href:!0});var JHr=s(VI);m_o=r(JHr,"SEWDModel"),JHr.forEach(t),f_o=r(E0e," (SEW-D model)"),E0e.forEach(t),g_o=i($),tp=n($,"LI",{});var C0e=s(tp);Une=n(C0e,"STRONG",{});var YHr=s(Une);h_o=r(YHr,"speech_to_text"),YHr.forEach(t),u_o=r(C0e," \u2014 "),XI=n(C0e,"A",{href:!0});var KHr=s(XI);p_o=r(KHr,"Speech2TextModel"),KHr.forEach(t),__o=r(C0e," (Speech2Text model)"),C0e.forEach(t),b_o=i($),ap=n($,"LI",{});var w0e=s(ap);Jne=n(w0e,"STRONG",{});var ZHr=s(Jne);F_o=r(ZHr,"splinter"),ZHr.forEach(t),v_o=r(w0e," \u2014 "),zI=n(w0e,"A",{href:!0});var eUr=s(zI);T_o=r(eUr,"SplinterModel"),eUr.forEach(t),M_o=r(w0e," (Splinter model)"),w0e.forEach(t),E_o=i($),np=n($,"LI",{});var A0e=s(np);Yne=n(A0e,"STRONG",{});var oUr=s(Yne);C_o=r(oUr,"squeezebert"),oUr.forEach(t),w_o=r(A0e," \u2014 "),QI=n(A0e,"A",{href:!0});var rUr=s(QI);A_o=r(rUr,"SqueezeBertModel"),rUr.forEach(t),y_o=r(A0e," (SqueezeBERT model)"),A0e.forEach(t),L_o=i($),sp=n($,"LI",{});var y0e=s(sp);Kne=n(y0e,"STRONG",{});var tUr=s(Kne);x_o=r(tUr,"swin"),tUr.forEach(t),$_o=r(y0e," \u2014 "),WI=n(y0e,"A",{href:!0});var aUr=s(WI);k_o=r(aUr,"SwinModel"),aUr.forEach(t),S_o=r(y0e," (Swin model)"),y0e.forEach(t),R_o=i($),lp=n($,"LI",{});var L0e=s(lp);Zne=n(L0e,"STRONG",{});var nUr=s(Zne);B_o=r(nUr,"t5"),nUr.forEach(t),P_o=r(L0e," \u2014 "),HI=n(L0e,"A",{href:!0});var sUr=s(HI);I_o=r(sUr,"T5Model"),sUr.forEach(t),q_o=r(L0e," (T5 model)"),L0e.forEach(t),N_o=i($),ip=n($,"LI",{});var x0e=s(ip);ese=n(x0e,"STRONG",{});var lUr=s(ese);j_o=r(lUr,"tapas"),lUr.forEach(t),D_o=r(x0e," \u2014 "),UI=n(x0e,"A",{href:!0});var iUr=s(UI);G_o=r(iUr,"TapasModel"),iUr.forEach(t),O_o=r(x0e," (TAPAS model)"),x0e.forEach(t),V_o=i($),dp=n($,"LI",{});var $0e=s(dp);ose=n($0e,"STRONG",{});var dUr=s(ose);X_o=r(dUr,"transfo-xl"),dUr.forEach(t),z_o=r($0e," \u2014 "),JI=n($0e,"A",{href:!0});var cUr=s(JI);Q_o=r(cUr,"TransfoXLModel"),cUr.forEach(t),W_o=r($0e," (Transformer-XL model)"),$0e.forEach(t),H_o=i($),cp=n($,"LI",{});var k0e=s(cp);rse=n(k0e,"STRONG",{});var mUr=s(rse);U_o=r(mUr,"unispeech"),mUr.forEach(t),J_o=r(k0e," \u2014 "),YI=n(k0e,"A",{href:!0});var fUr=s(YI);Y_o=r(fUr,"UniSpeechModel"),fUr.forEach(t),K_o=r(k0e," (UniSpeech model)"),k0e.forEach(t),Z_o=i($),mp=n($,"LI",{});var S0e=s(mp);tse=n(S0e,"STRONG",{});var gUr=s(tse);ebo=r(gUr,"unispeech-sat"),gUr.forEach(t),obo=r(S0e," \u2014 "),KI=n(S0e,"A",{href:!0});var hUr=s(KI);rbo=r(hUr,"UniSpeechSatModel"),hUr.forEach(t),tbo=r(S0e," (UniSpeechSat model)"),S0e.forEach(t),abo=i($),fp=n($,"LI",{});var R0e=s(fp);ase=n(R0e,"STRONG",{});var uUr=s(ase);nbo=r(uUr,"van"),uUr.forEach(t),sbo=r(R0e," \u2014 "),ZI=n(R0e,"A",{href:!0});var pUr=s(ZI);lbo=r(pUr,"VanModel"),pUr.forEach(t),ibo=r(R0e," (VAN model)"),R0e.forEach(t),dbo=i($),gp=n($,"LI",{});var B0e=s(gp);nse=n(B0e,"STRONG",{});var _Ur=s(nse);cbo=r(_Ur,"vilt"),_Ur.forEach(t),mbo=r(B0e," \u2014 "),eq=n(B0e,"A",{href:!0});var bUr=s(eq);fbo=r(bUr,"ViltModel"),bUr.forEach(t),gbo=r(B0e," (ViLT model)"),B0e.forEach(t),hbo=i($),hp=n($,"LI",{});var P0e=s(hp);sse=n(P0e,"STRONG",{});var FUr=s(sse);ubo=r(FUr,"vision-text-dual-encoder"),FUr.forEach(t),pbo=r(P0e," \u2014 "),oq=n(P0e,"A",{href:!0});var vUr=s(oq);_bo=r(vUr,"VisionTextDualEncoderModel"),vUr.forEach(t),bbo=r(P0e," (VisionTextDualEncoder model)"),P0e.forEach(t),Fbo=i($),up=n($,"LI",{});var I0e=s(up);lse=n(I0e,"STRONG",{});var TUr=s(lse);vbo=r(TUr,"visual_bert"),TUr.forEach(t),Tbo=r(I0e," \u2014 "),rq=n(I0e,"A",{href:!0});var MUr=s(rq);Mbo=r(MUr,"VisualBertModel"),MUr.forEach(t),Ebo=r(I0e," (VisualBert model)"),I0e.forEach(t),Cbo=i($),pp=n($,"LI",{});var q0e=s(pp);ise=n(q0e,"STRONG",{});var EUr=s(ise);wbo=r(EUr,"vit"),EUr.forEach(t),Abo=r(q0e," \u2014 "),tq=n(q0e,"A",{href:!0});var CUr=s(tq);ybo=r(CUr,"ViTModel"),CUr.forEach(t),Lbo=r(q0e," (ViT model)"),q0e.forEach(t),xbo=i($),_p=n($,"LI",{});var N0e=s(_p);dse=n(N0e,"STRONG",{});var wUr=s(dse);$bo=r(wUr,"vit_mae"),wUr.forEach(t),kbo=r(N0e," \u2014 "),aq=n(N0e,"A",{href:!0});var AUr=s(aq);Sbo=r(AUr,"ViTMAEModel"),AUr.forEach(t),Rbo=r(N0e," (ViTMAE model)"),N0e.forEach(t),Bbo=i($),bp=n($,"LI",{});var j0e=s(bp);cse=n(j0e,"STRONG",{});var yUr=s(cse);Pbo=r(yUr,"wav2vec2"),yUr.forEach(t),Ibo=r(j0e," \u2014 "),nq=n(j0e,"A",{href:!0});var LUr=s(nq);qbo=r(LUr,"Wav2Vec2Model"),LUr.forEach(t),Nbo=r(j0e," (Wav2Vec2 model)"),j0e.forEach(t),jbo=i($),Fp=n($,"LI",{});var D0e=s(Fp);mse=n(D0e,"STRONG",{});var xUr=s(mse);Dbo=r(xUr,"wavlm"),xUr.forEach(t),Gbo=r(D0e," \u2014 "),sq=n(D0e,"A",{href:!0});var $Ur=s(sq);Obo=r($Ur,"WavLMModel"),$Ur.forEach(t),Vbo=r(D0e," (WavLM model)"),D0e.forEach(t),Xbo=i($),vp=n($,"LI",{});var G0e=s(vp);fse=n(G0e,"STRONG",{});var kUr=s(fse);zbo=r(kUr,"xglm"),kUr.forEach(t),Qbo=r(G0e," \u2014 "),lq=n(G0e,"A",{href:!0});var SUr=s(lq);Wbo=r(SUr,"XGLMModel"),SUr.forEach(t),Hbo=r(G0e," (XGLM model)"),G0e.forEach(t),Ubo=i($),Tp=n($,"LI",{});var O0e=s(Tp);gse=n(O0e,"STRONG",{});var RUr=s(gse);Jbo=r(RUr,"xlm"),RUr.forEach(t),Ybo=r(O0e," \u2014 "),iq=n(O0e,"A",{href:!0});var BUr=s(iq);Kbo=r(BUr,"XLMModel"),BUr.forEach(t),Zbo=r(O0e," (XLM model)"),O0e.forEach(t),e2o=i($),Mp=n($,"LI",{});var V0e=s(Mp);hse=n(V0e,"STRONG",{});var PUr=s(hse);o2o=r(PUr,"xlm-prophetnet"),PUr.forEach(t),r2o=r(V0e," \u2014 "),dq=n(V0e,"A",{href:!0});var IUr=s(dq);t2o=r(IUr,"XLMProphetNetModel"),IUr.forEach(t),a2o=r(V0e," (XLMProphetNet model)"),V0e.forEach(t),n2o=i($),Ep=n($,"LI",{});var X0e=s(Ep);use=n(X0e,"STRONG",{});var qUr=s(use);s2o=r(qUr,"xlm-roberta"),qUr.forEach(t),l2o=r(X0e," \u2014 "),cq=n(X0e,"A",{href:!0});var NUr=s(cq);i2o=r(NUr,"XLMRobertaModel"),NUr.forEach(t),d2o=r(X0e," (XLM-RoBERTa model)"),X0e.forEach(t),c2o=i($),Cp=n($,"LI",{});var z0e=s(Cp);pse=n(z0e,"STRONG",{});var jUr=s(pse);m2o=r(jUr,"xlm-roberta-xl"),jUr.forEach(t),f2o=r(z0e," \u2014 "),mq=n(z0e,"A",{href:!0});var DUr=s(mq);g2o=r(DUr,"XLMRobertaXLModel"),DUr.forEach(t),h2o=r(z0e," (XLM-RoBERTa-XL model)"),z0e.forEach(t),u2o=i($),wp=n($,"LI",{});var Q0e=s(wp);_se=n(Q0e,"STRONG",{});var GUr=s(_se);p2o=r(GUr,"xlnet"),GUr.forEach(t),_2o=r(Q0e," \u2014 "),fq=n(Q0e,"A",{href:!0});var OUr=s(fq);b2o=r(OUr,"XLNetModel"),OUr.forEach(t),F2o=r(Q0e," (XLNet model)"),Q0e.forEach(t),v2o=i($),Ap=n($,"LI",{});var W0e=s(Ap);bse=n(W0e,"STRONG",{});var VUr=s(bse);T2o=r(VUr,"yolos"),VUr.forEach(t),M2o=r(W0e," \u2014 "),gq=n(W0e,"A",{href:!0});var XUr=s(gq);E2o=r(XUr,"YolosModel"),XUr.forEach(t),C2o=r(W0e," (YOLOS model)"),W0e.forEach(t),w2o=i($),yp=n($,"LI",{});var H0e=s(yp);Fse=n(H0e,"STRONG",{});var zUr=s(Fse);A2o=r(zUr,"yoso"),zUr.forEach(t),y2o=r(H0e," \u2014 "),hq=n(H0e,"A",{href:!0});var QUr=s(hq);L2o=r(QUr,"YosoModel"),QUr.forEach(t),x2o=r(H0e," (YOSO model)"),H0e.forEach(t),$.forEach(t),$2o=i(Zt),Lp=n(Zt,"P",{});var U0e=s(Lp);k2o=r(U0e,"The model is set in evaluation mode by default using "),vse=n(U0e,"CODE",{});var WUr=s(vse);S2o=r(WUr,"model.eval()"),WUr.forEach(t),R2o=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=n(U0e,"CODE",{});var HUr=s(Tse);B2o=r(HUr,"model.train()"),HUr.forEach(t),U0e.forEach(t),P2o=i(Zt),T(xp.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),bPe=i(m),Ci=n(m,"H2",{class:!0});var Mqe=s(Ci);$p=n(Mqe,"A",{id:!0,class:!0,href:!0});var UUr=s($p);Mse=n(UUr,"SPAN",{});var JUr=s(Mse);T(by.$$.fragment,JUr),JUr.forEach(t),UUr.forEach(t),I2o=i(Mqe),Ese=n(Mqe,"SPAN",{});var YUr=s(Ese);q2o=r(YUr,"AutoModelForPreTraining"),YUr.forEach(t),Mqe.forEach(t),FPe=i(m),xo=n(m,"DIV",{class:!0});var Ds=s(xo);T(Fy.$$.fragment,Ds),N2o=i(Ds),wi=n(Ds,"P",{});var zY=s(wi);j2o=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=n(zY,"A",{href:!0});var KUr=s(uq);D2o=r(KUr,"from_pretrained()"),KUr.forEach(t),G2o=r(zY," class method or the "),pq=n(zY,"A",{href:!0});var ZUr=s(pq);O2o=r(ZUr,"from_config()"),ZUr.forEach(t),V2o=r(zY,` class
method.`),zY.forEach(t),X2o=i(Ds),vy=n(Ds,"P",{});var Eqe=s(vy);z2o=r(Eqe,"This class cannot be instantiated directly using "),Cse=n(Eqe,"CODE",{});var eJr=s(Cse);Q2o=r(eJr,"__init__()"),eJr.forEach(t),W2o=r(Eqe," (throws an error)."),Eqe.forEach(t),H2o=i(Ds),rt=n(Ds,"DIV",{class:!0});var QA=s(rt);T(Ty.$$.fragment,QA),U2o=i(QA),wse=n(QA,"P",{});var oJr=s(wse);J2o=r(oJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oJr.forEach(t),Y2o=i(QA),Ai=n(QA,"P",{});var QY=s(Ai);K2o=r(QY,`Note:
Loading a model from its configuration file does `),Ase=n(QY,"STRONG",{});var rJr=s(Ase);Z2o=r(rJr,"not"),rJr.forEach(t),eFo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_q=n(QY,"A",{href:!0});var tJr=s(_q);oFo=r(tJr,"from_pretrained()"),tJr.forEach(t),rFo=r(QY," to load the model weights."),QY.forEach(t),tFo=i(QA),T(kp.$$.fragment,QA),QA.forEach(t),aFo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(My.$$.fragment,ea),nFo=i(ea),yse=n(ea,"P",{});var aJr=s(yse);sFo=r(aJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aJr.forEach(t),lFo=i(ea),ya=n(ea,"P",{});var WA=s(ya);iFo=r(WA,"The model class to instantiate is selected based on the "),Lse=n(WA,"CODE",{});var nJr=s(Lse);dFo=r(nJr,"model_type"),nJr.forEach(t),cFo=r(WA,` property of the config object (either
passed as an argument or loaded from `),xse=n(WA,"CODE",{});var sJr=s(xse);mFo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),fFo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(WA,"CODE",{});var lJr=s($se);gFo=r(lJr,"pretrained_model_name_or_path"),lJr.forEach(t),hFo=r(WA,":"),WA.forEach(t),uFo=i(ea),G=n(ea,"UL",{});var V=s(G);Sp=n(V,"LI",{});var J0e=s(Sp);kse=n(J0e,"STRONG",{});var iJr=s(kse);pFo=r(iJr,"albert"),iJr.forEach(t),_Fo=r(J0e," \u2014 "),bq=n(J0e,"A",{href:!0});var dJr=s(bq);bFo=r(dJr,"AlbertForPreTraining"),dJr.forEach(t),FFo=r(J0e," (ALBERT model)"),J0e.forEach(t),vFo=i(V),Rp=n(V,"LI",{});var Y0e=s(Rp);Sse=n(Y0e,"STRONG",{});var cJr=s(Sse);TFo=r(cJr,"bart"),cJr.forEach(t),MFo=r(Y0e," \u2014 "),Fq=n(Y0e,"A",{href:!0});var mJr=s(Fq);EFo=r(mJr,"BartForConditionalGeneration"),mJr.forEach(t),CFo=r(Y0e," (BART model)"),Y0e.forEach(t),wFo=i(V),Bp=n(V,"LI",{});var K0e=s(Bp);Rse=n(K0e,"STRONG",{});var fJr=s(Rse);AFo=r(fJr,"bert"),fJr.forEach(t),yFo=r(K0e," \u2014 "),vq=n(K0e,"A",{href:!0});var gJr=s(vq);LFo=r(gJr,"BertForPreTraining"),gJr.forEach(t),xFo=r(K0e," (BERT model)"),K0e.forEach(t),$Fo=i(V),Pp=n(V,"LI",{});var Z0e=s(Pp);Bse=n(Z0e,"STRONG",{});var hJr=s(Bse);kFo=r(hJr,"big_bird"),hJr.forEach(t),SFo=r(Z0e," \u2014 "),Tq=n(Z0e,"A",{href:!0});var uJr=s(Tq);RFo=r(uJr,"BigBirdForPreTraining"),uJr.forEach(t),BFo=r(Z0e," (BigBird model)"),Z0e.forEach(t),PFo=i(V),Ip=n(V,"LI",{});var e6e=s(Ip);Pse=n(e6e,"STRONG",{});var pJr=s(Pse);IFo=r(pJr,"camembert"),pJr.forEach(t),qFo=r(e6e," \u2014 "),Mq=n(e6e,"A",{href:!0});var _Jr=s(Mq);NFo=r(_Jr,"CamembertForMaskedLM"),_Jr.forEach(t),jFo=r(e6e," (CamemBERT model)"),e6e.forEach(t),DFo=i(V),qp=n(V,"LI",{});var o6e=s(qp);Ise=n(o6e,"STRONG",{});var bJr=s(Ise);GFo=r(bJr,"ctrl"),bJr.forEach(t),OFo=r(o6e," \u2014 "),Eq=n(o6e,"A",{href:!0});var FJr=s(Eq);VFo=r(FJr,"CTRLLMHeadModel"),FJr.forEach(t),XFo=r(o6e," (CTRL model)"),o6e.forEach(t),zFo=i(V),Np=n(V,"LI",{});var r6e=s(Np);qse=n(r6e,"STRONG",{});var vJr=s(qse);QFo=r(vJr,"data2vec-text"),vJr.forEach(t),WFo=r(r6e," \u2014 "),Cq=n(r6e,"A",{href:!0});var TJr=s(Cq);HFo=r(TJr,"Data2VecTextForMaskedLM"),TJr.forEach(t),UFo=r(r6e," (Data2VecText model)"),r6e.forEach(t),JFo=i(V),jp=n(V,"LI",{});var t6e=s(jp);Nse=n(t6e,"STRONG",{});var MJr=s(Nse);YFo=r(MJr,"deberta"),MJr.forEach(t),KFo=r(t6e," \u2014 "),wq=n(t6e,"A",{href:!0});var EJr=s(wq);ZFo=r(EJr,"DebertaForMaskedLM"),EJr.forEach(t),evo=r(t6e," (DeBERTa model)"),t6e.forEach(t),ovo=i(V),Dp=n(V,"LI",{});var a6e=s(Dp);jse=n(a6e,"STRONG",{});var CJr=s(jse);rvo=r(CJr,"deberta-v2"),CJr.forEach(t),tvo=r(a6e," \u2014 "),Aq=n(a6e,"A",{href:!0});var wJr=s(Aq);avo=r(wJr,"DebertaV2ForMaskedLM"),wJr.forEach(t),nvo=r(a6e," (DeBERTa-v2 model)"),a6e.forEach(t),svo=i(V),Gp=n(V,"LI",{});var n6e=s(Gp);Dse=n(n6e,"STRONG",{});var AJr=s(Dse);lvo=r(AJr,"distilbert"),AJr.forEach(t),ivo=r(n6e," \u2014 "),yq=n(n6e,"A",{href:!0});var yJr=s(yq);dvo=r(yJr,"DistilBertForMaskedLM"),yJr.forEach(t),cvo=r(n6e," (DistilBERT model)"),n6e.forEach(t),mvo=i(V),Op=n(V,"LI",{});var s6e=s(Op);Gse=n(s6e,"STRONG",{});var LJr=s(Gse);fvo=r(LJr,"electra"),LJr.forEach(t),gvo=r(s6e," \u2014 "),Lq=n(s6e,"A",{href:!0});var xJr=s(Lq);hvo=r(xJr,"ElectraForPreTraining"),xJr.forEach(t),uvo=r(s6e," (ELECTRA model)"),s6e.forEach(t),pvo=i(V),Vp=n(V,"LI",{});var l6e=s(Vp);Ose=n(l6e,"STRONG",{});var $Jr=s(Ose);_vo=r($Jr,"flaubert"),$Jr.forEach(t),bvo=r(l6e," \u2014 "),xq=n(l6e,"A",{href:!0});var kJr=s(xq);Fvo=r(kJr,"FlaubertWithLMHeadModel"),kJr.forEach(t),vvo=r(l6e," (FlauBERT model)"),l6e.forEach(t),Tvo=i(V),Xp=n(V,"LI",{});var i6e=s(Xp);Vse=n(i6e,"STRONG",{});var SJr=s(Vse);Mvo=r(SJr,"fnet"),SJr.forEach(t),Evo=r(i6e," \u2014 "),$q=n(i6e,"A",{href:!0});var RJr=s($q);Cvo=r(RJr,"FNetForPreTraining"),RJr.forEach(t),wvo=r(i6e," (FNet model)"),i6e.forEach(t),Avo=i(V),zp=n(V,"LI",{});var d6e=s(zp);Xse=n(d6e,"STRONG",{});var BJr=s(Xse);yvo=r(BJr,"fsmt"),BJr.forEach(t),Lvo=r(d6e," \u2014 "),kq=n(d6e,"A",{href:!0});var PJr=s(kq);xvo=r(PJr,"FSMTForConditionalGeneration"),PJr.forEach(t),$vo=r(d6e," (FairSeq Machine-Translation model)"),d6e.forEach(t),kvo=i(V),Qp=n(V,"LI",{});var c6e=s(Qp);zse=n(c6e,"STRONG",{});var IJr=s(zse);Svo=r(IJr,"funnel"),IJr.forEach(t),Rvo=r(c6e," \u2014 "),Sq=n(c6e,"A",{href:!0});var qJr=s(Sq);Bvo=r(qJr,"FunnelForPreTraining"),qJr.forEach(t),Pvo=r(c6e," (Funnel Transformer model)"),c6e.forEach(t),Ivo=i(V),Wp=n(V,"LI",{});var m6e=s(Wp);Qse=n(m6e,"STRONG",{});var NJr=s(Qse);qvo=r(NJr,"gpt2"),NJr.forEach(t),Nvo=r(m6e," \u2014 "),Rq=n(m6e,"A",{href:!0});var jJr=s(Rq);jvo=r(jJr,"GPT2LMHeadModel"),jJr.forEach(t),Dvo=r(m6e," (OpenAI GPT-2 model)"),m6e.forEach(t),Gvo=i(V),Hp=n(V,"LI",{});var f6e=s(Hp);Wse=n(f6e,"STRONG",{});var DJr=s(Wse);Ovo=r(DJr,"ibert"),DJr.forEach(t),Vvo=r(f6e," \u2014 "),Bq=n(f6e,"A",{href:!0});var GJr=s(Bq);Xvo=r(GJr,"IBertForMaskedLM"),GJr.forEach(t),zvo=r(f6e," (I-BERT model)"),f6e.forEach(t),Qvo=i(V),Up=n(V,"LI",{});var g6e=s(Up);Hse=n(g6e,"STRONG",{});var OJr=s(Hse);Wvo=r(OJr,"layoutlm"),OJr.forEach(t),Hvo=r(g6e," \u2014 "),Pq=n(g6e,"A",{href:!0});var VJr=s(Pq);Uvo=r(VJr,"LayoutLMForMaskedLM"),VJr.forEach(t),Jvo=r(g6e," (LayoutLM model)"),g6e.forEach(t),Yvo=i(V),Jp=n(V,"LI",{});var h6e=s(Jp);Use=n(h6e,"STRONG",{});var XJr=s(Use);Kvo=r(XJr,"longformer"),XJr.forEach(t),Zvo=r(h6e," \u2014 "),Iq=n(h6e,"A",{href:!0});var zJr=s(Iq);e1o=r(zJr,"LongformerForMaskedLM"),zJr.forEach(t),o1o=r(h6e," (Longformer model)"),h6e.forEach(t),r1o=i(V),Yp=n(V,"LI",{});var u6e=s(Yp);Jse=n(u6e,"STRONG",{});var QJr=s(Jse);t1o=r(QJr,"lxmert"),QJr.forEach(t),a1o=r(u6e," \u2014 "),qq=n(u6e,"A",{href:!0});var WJr=s(qq);n1o=r(WJr,"LxmertForPreTraining"),WJr.forEach(t),s1o=r(u6e," (LXMERT model)"),u6e.forEach(t),l1o=i(V),Kp=n(V,"LI",{});var p6e=s(Kp);Yse=n(p6e,"STRONG",{});var HJr=s(Yse);i1o=r(HJr,"megatron-bert"),HJr.forEach(t),d1o=r(p6e," \u2014 "),Nq=n(p6e,"A",{href:!0});var UJr=s(Nq);c1o=r(UJr,"MegatronBertForPreTraining"),UJr.forEach(t),m1o=r(p6e," (MegatronBert model)"),p6e.forEach(t),f1o=i(V),Zp=n(V,"LI",{});var _6e=s(Zp);Kse=n(_6e,"STRONG",{});var JJr=s(Kse);g1o=r(JJr,"mobilebert"),JJr.forEach(t),h1o=r(_6e," \u2014 "),jq=n(_6e,"A",{href:!0});var YJr=s(jq);u1o=r(YJr,"MobileBertForPreTraining"),YJr.forEach(t),p1o=r(_6e," (MobileBERT model)"),_6e.forEach(t),_1o=i(V),e_=n(V,"LI",{});var b6e=s(e_);Zse=n(b6e,"STRONG",{});var KJr=s(Zse);b1o=r(KJr,"mpnet"),KJr.forEach(t),F1o=r(b6e," \u2014 "),Dq=n(b6e,"A",{href:!0});var ZJr=s(Dq);v1o=r(ZJr,"MPNetForMaskedLM"),ZJr.forEach(t),T1o=r(b6e," (MPNet model)"),b6e.forEach(t),M1o=i(V),o_=n(V,"LI",{});var F6e=s(o_);ele=n(F6e,"STRONG",{});var eYr=s(ele);E1o=r(eYr,"openai-gpt"),eYr.forEach(t),C1o=r(F6e," \u2014 "),Gq=n(F6e,"A",{href:!0});var oYr=s(Gq);w1o=r(oYr,"OpenAIGPTLMHeadModel"),oYr.forEach(t),A1o=r(F6e," (OpenAI GPT model)"),F6e.forEach(t),y1o=i(V),r_=n(V,"LI",{});var v6e=s(r_);ole=n(v6e,"STRONG",{});var rYr=s(ole);L1o=r(rYr,"retribert"),rYr.forEach(t),x1o=r(v6e," \u2014 "),Oq=n(v6e,"A",{href:!0});var tYr=s(Oq);$1o=r(tYr,"RetriBertModel"),tYr.forEach(t),k1o=r(v6e," (RetriBERT model)"),v6e.forEach(t),S1o=i(V),t_=n(V,"LI",{});var T6e=s(t_);rle=n(T6e,"STRONG",{});var aYr=s(rle);R1o=r(aYr,"roberta"),aYr.forEach(t),B1o=r(T6e," \u2014 "),Vq=n(T6e,"A",{href:!0});var nYr=s(Vq);P1o=r(nYr,"RobertaForMaskedLM"),nYr.forEach(t),I1o=r(T6e," (RoBERTa model)"),T6e.forEach(t),q1o=i(V),a_=n(V,"LI",{});var M6e=s(a_);tle=n(M6e,"STRONG",{});var sYr=s(tle);N1o=r(sYr,"squeezebert"),sYr.forEach(t),j1o=r(M6e," \u2014 "),Xq=n(M6e,"A",{href:!0});var lYr=s(Xq);D1o=r(lYr,"SqueezeBertForMaskedLM"),lYr.forEach(t),G1o=r(M6e," (SqueezeBERT model)"),M6e.forEach(t),O1o=i(V),n_=n(V,"LI",{});var E6e=s(n_);ale=n(E6e,"STRONG",{});var iYr=s(ale);V1o=r(iYr,"t5"),iYr.forEach(t),X1o=r(E6e," \u2014 "),zq=n(E6e,"A",{href:!0});var dYr=s(zq);z1o=r(dYr,"T5ForConditionalGeneration"),dYr.forEach(t),Q1o=r(E6e," (T5 model)"),E6e.forEach(t),W1o=i(V),s_=n(V,"LI",{});var C6e=s(s_);nle=n(C6e,"STRONG",{});var cYr=s(nle);H1o=r(cYr,"tapas"),cYr.forEach(t),U1o=r(C6e," \u2014 "),Qq=n(C6e,"A",{href:!0});var mYr=s(Qq);J1o=r(mYr,"TapasForMaskedLM"),mYr.forEach(t),Y1o=r(C6e," (TAPAS model)"),C6e.forEach(t),K1o=i(V),l_=n(V,"LI",{});var w6e=s(l_);sle=n(w6e,"STRONG",{});var fYr=s(sle);Z1o=r(fYr,"transfo-xl"),fYr.forEach(t),eTo=r(w6e," \u2014 "),Wq=n(w6e,"A",{href:!0});var gYr=s(Wq);oTo=r(gYr,"TransfoXLLMHeadModel"),gYr.forEach(t),rTo=r(w6e," (Transformer-XL model)"),w6e.forEach(t),tTo=i(V),i_=n(V,"LI",{});var A6e=s(i_);lle=n(A6e,"STRONG",{});var hYr=s(lle);aTo=r(hYr,"unispeech"),hYr.forEach(t),nTo=r(A6e," \u2014 "),Hq=n(A6e,"A",{href:!0});var uYr=s(Hq);sTo=r(uYr,"UniSpeechForPreTraining"),uYr.forEach(t),lTo=r(A6e," (UniSpeech model)"),A6e.forEach(t),iTo=i(V),d_=n(V,"LI",{});var y6e=s(d_);ile=n(y6e,"STRONG",{});var pYr=s(ile);dTo=r(pYr,"unispeech-sat"),pYr.forEach(t),cTo=r(y6e," \u2014 "),Uq=n(y6e,"A",{href:!0});var _Yr=s(Uq);mTo=r(_Yr,"UniSpeechSatForPreTraining"),_Yr.forEach(t),fTo=r(y6e," (UniSpeechSat model)"),y6e.forEach(t),gTo=i(V),c_=n(V,"LI",{});var L6e=s(c_);dle=n(L6e,"STRONG",{});var bYr=s(dle);hTo=r(bYr,"visual_bert"),bYr.forEach(t),uTo=r(L6e," \u2014 "),Jq=n(L6e,"A",{href:!0});var FYr=s(Jq);pTo=r(FYr,"VisualBertForPreTraining"),FYr.forEach(t),_To=r(L6e," (VisualBert model)"),L6e.forEach(t),bTo=i(V),m_=n(V,"LI",{});var x6e=s(m_);cle=n(x6e,"STRONG",{});var vYr=s(cle);FTo=r(vYr,"vit_mae"),vYr.forEach(t),vTo=r(x6e," \u2014 "),Yq=n(x6e,"A",{href:!0});var TYr=s(Yq);TTo=r(TYr,"ViTMAEForPreTraining"),TYr.forEach(t),MTo=r(x6e," (ViTMAE model)"),x6e.forEach(t),ETo=i(V),f_=n(V,"LI",{});var $6e=s(f_);mle=n($6e,"STRONG",{});var MYr=s(mle);CTo=r(MYr,"wav2vec2"),MYr.forEach(t),wTo=r($6e," \u2014 "),Kq=n($6e,"A",{href:!0});var EYr=s(Kq);ATo=r(EYr,"Wav2Vec2ForPreTraining"),EYr.forEach(t),yTo=r($6e," (Wav2Vec2 model)"),$6e.forEach(t),LTo=i(V),g_=n(V,"LI",{});var k6e=s(g_);fle=n(k6e,"STRONG",{});var CYr=s(fle);xTo=r(CYr,"xlm"),CYr.forEach(t),$To=r(k6e," \u2014 "),Zq=n(k6e,"A",{href:!0});var wYr=s(Zq);kTo=r(wYr,"XLMWithLMHeadModel"),wYr.forEach(t),STo=r(k6e," (XLM model)"),k6e.forEach(t),RTo=i(V),h_=n(V,"LI",{});var S6e=s(h_);gle=n(S6e,"STRONG",{});var AYr=s(gle);BTo=r(AYr,"xlm-roberta"),AYr.forEach(t),PTo=r(S6e," \u2014 "),eN=n(S6e,"A",{href:!0});var yYr=s(eN);ITo=r(yYr,"XLMRobertaForMaskedLM"),yYr.forEach(t),qTo=r(S6e," (XLM-RoBERTa model)"),S6e.forEach(t),NTo=i(V),u_=n(V,"LI",{});var R6e=s(u_);hle=n(R6e,"STRONG",{});var LYr=s(hle);jTo=r(LYr,"xlm-roberta-xl"),LYr.forEach(t),DTo=r(R6e," \u2014 "),oN=n(R6e,"A",{href:!0});var xYr=s(oN);GTo=r(xYr,"XLMRobertaXLForMaskedLM"),xYr.forEach(t),OTo=r(R6e," (XLM-RoBERTa-XL model)"),R6e.forEach(t),VTo=i(V),p_=n(V,"LI",{});var B6e=s(p_);ule=n(B6e,"STRONG",{});var $Yr=s(ule);XTo=r($Yr,"xlnet"),$Yr.forEach(t),zTo=r(B6e," \u2014 "),rN=n(B6e,"A",{href:!0});var kYr=s(rN);QTo=r(kYr,"XLNetLMHeadModel"),kYr.forEach(t),WTo=r(B6e," (XLNet model)"),B6e.forEach(t),V.forEach(t),HTo=i(ea),__=n(ea,"P",{});var P6e=s(__);UTo=r(P6e,"The model is set in evaluation mode by default using "),ple=n(P6e,"CODE",{});var SYr=s(ple);JTo=r(SYr,"model.eval()"),SYr.forEach(t),YTo=r(P6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_le=n(P6e,"CODE",{});var RYr=s(_le);KTo=r(RYr,"model.train()"),RYr.forEach(t),P6e.forEach(t),ZTo=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),vPe=i(m),yi=n(m,"H2",{class:!0});var Cqe=s(yi);F_=n(Cqe,"A",{id:!0,class:!0,href:!0});var BYr=s(F_);ble=n(BYr,"SPAN",{});var PYr=s(ble);T(Ey.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),eMo=i(Cqe),Fle=n(Cqe,"SPAN",{});var IYr=s(Fle);oMo=r(IYr,"AutoModelForCausalLM"),IYr.forEach(t),Cqe.forEach(t),TPe=i(m),$o=n(m,"DIV",{class:!0});var Gs=s($o);T(Cy.$$.fragment,Gs),rMo=i(Gs),Li=n(Gs,"P",{});var WY=s(Li);tMo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tN=n(WY,"A",{href:!0});var qYr=s(tN);aMo=r(qYr,"from_pretrained()"),qYr.forEach(t),nMo=r(WY," class method or the "),aN=n(WY,"A",{href:!0});var NYr=s(aN);sMo=r(NYr,"from_config()"),NYr.forEach(t),lMo=r(WY,` class
method.`),WY.forEach(t),iMo=i(Gs),wy=n(Gs,"P",{});var wqe=s(wy);dMo=r(wqe,"This class cannot be instantiated directly using "),vle=n(wqe,"CODE",{});var jYr=s(vle);cMo=r(jYr,"__init__()"),jYr.forEach(t),mMo=r(wqe," (throws an error)."),wqe.forEach(t),fMo=i(Gs),tt=n(Gs,"DIV",{class:!0});var HA=s(tt);T(Ay.$$.fragment,HA),gMo=i(HA),Tle=n(HA,"P",{});var DYr=s(Tle);hMo=r(DYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DYr.forEach(t),uMo=i(HA),xi=n(HA,"P",{});var HY=s(xi);pMo=r(HY,`Note:
Loading a model from its configuration file does `),Mle=n(HY,"STRONG",{});var GYr=s(Mle);_Mo=r(GYr,"not"),GYr.forEach(t),bMo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(HY,"A",{href:!0});var OYr=s(nN);FMo=r(OYr,"from_pretrained()"),OYr.forEach(t),vMo=r(HY," to load the model weights."),HY.forEach(t),TMo=i(HA),T(v_.$$.fragment,HA),HA.forEach(t),MMo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(yy.$$.fragment,oa),EMo=i(oa),Ele=n(oa,"P",{});var VYr=s(Ele);CMo=r(VYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VYr.forEach(t),wMo=i(oa),La=n(oa,"P",{});var UA=s(La);AMo=r(UA,"The model class to instantiate is selected based on the "),Cle=n(UA,"CODE",{});var XYr=s(Cle);yMo=r(XYr,"model_type"),XYr.forEach(t),LMo=r(UA,` property of the config object (either
passed as an argument or loaded from `),wle=n(UA,"CODE",{});var zYr=s(wle);xMo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),$Mo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=n(UA,"CODE",{});var QYr=s(Ale);kMo=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),SMo=r(UA,":"),UA.forEach(t),RMo=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var I6e=s(T_);yle=n(I6e,"STRONG",{});var WYr=s(yle);BMo=r(WYr,"bart"),WYr.forEach(t),PMo=r(I6e," \u2014 "),sN=n(I6e,"A",{href:!0});var HYr=s(sN);IMo=r(HYr,"BartForCausalLM"),HYr.forEach(t),qMo=r(I6e," (BART model)"),I6e.forEach(t),NMo=i(W),M_=n(W,"LI",{});var q6e=s(M_);Lle=n(q6e,"STRONG",{});var UYr=s(Lle);jMo=r(UYr,"bert"),UYr.forEach(t),DMo=r(q6e," \u2014 "),lN=n(q6e,"A",{href:!0});var JYr=s(lN);GMo=r(JYr,"BertLMHeadModel"),JYr.forEach(t),OMo=r(q6e," (BERT model)"),q6e.forEach(t),VMo=i(W),E_=n(W,"LI",{});var N6e=s(E_);xle=n(N6e,"STRONG",{});var YYr=s(xle);XMo=r(YYr,"bert-generation"),YYr.forEach(t),zMo=r(N6e," \u2014 "),iN=n(N6e,"A",{href:!0});var KYr=s(iN);QMo=r(KYr,"BertGenerationDecoder"),KYr.forEach(t),WMo=r(N6e," (Bert Generation model)"),N6e.forEach(t),HMo=i(W),C_=n(W,"LI",{});var j6e=s(C_);$le=n(j6e,"STRONG",{});var ZYr=s($le);UMo=r(ZYr,"big_bird"),ZYr.forEach(t),JMo=r(j6e," \u2014 "),dN=n(j6e,"A",{href:!0});var eKr=s(dN);YMo=r(eKr,"BigBirdForCausalLM"),eKr.forEach(t),KMo=r(j6e," (BigBird model)"),j6e.forEach(t),ZMo=i(W),w_=n(W,"LI",{});var D6e=s(w_);kle=n(D6e,"STRONG",{});var oKr=s(kle);e4o=r(oKr,"bigbird_pegasus"),oKr.forEach(t),o4o=r(D6e," \u2014 "),cN=n(D6e,"A",{href:!0});var rKr=s(cN);r4o=r(rKr,"BigBirdPegasusForCausalLM"),rKr.forEach(t),t4o=r(D6e," (BigBirdPegasus model)"),D6e.forEach(t),a4o=i(W),A_=n(W,"LI",{});var G6e=s(A_);Sle=n(G6e,"STRONG",{});var tKr=s(Sle);n4o=r(tKr,"blenderbot"),tKr.forEach(t),s4o=r(G6e," \u2014 "),mN=n(G6e,"A",{href:!0});var aKr=s(mN);l4o=r(aKr,"BlenderbotForCausalLM"),aKr.forEach(t),i4o=r(G6e," (Blenderbot model)"),G6e.forEach(t),d4o=i(W),y_=n(W,"LI",{});var O6e=s(y_);Rle=n(O6e,"STRONG",{});var nKr=s(Rle);c4o=r(nKr,"blenderbot-small"),nKr.forEach(t),m4o=r(O6e," \u2014 "),fN=n(O6e,"A",{href:!0});var sKr=s(fN);f4o=r(sKr,"BlenderbotSmallForCausalLM"),sKr.forEach(t),g4o=r(O6e," (BlenderbotSmall model)"),O6e.forEach(t),h4o=i(W),L_=n(W,"LI",{});var V6e=s(L_);Ble=n(V6e,"STRONG",{});var lKr=s(Ble);u4o=r(lKr,"camembert"),lKr.forEach(t),p4o=r(V6e," \u2014 "),gN=n(V6e,"A",{href:!0});var iKr=s(gN);_4o=r(iKr,"CamembertForCausalLM"),iKr.forEach(t),b4o=r(V6e," (CamemBERT model)"),V6e.forEach(t),F4o=i(W),x_=n(W,"LI",{});var X6e=s(x_);Ple=n(X6e,"STRONG",{});var dKr=s(Ple);v4o=r(dKr,"ctrl"),dKr.forEach(t),T4o=r(X6e," \u2014 "),hN=n(X6e,"A",{href:!0});var cKr=s(hN);M4o=r(cKr,"CTRLLMHeadModel"),cKr.forEach(t),E4o=r(X6e," (CTRL model)"),X6e.forEach(t),C4o=i(W),$_=n(W,"LI",{});var z6e=s($_);Ile=n(z6e,"STRONG",{});var mKr=s(Ile);w4o=r(mKr,"data2vec-text"),mKr.forEach(t),A4o=r(z6e," \u2014 "),uN=n(z6e,"A",{href:!0});var fKr=s(uN);y4o=r(fKr,"Data2VecTextForCausalLM"),fKr.forEach(t),L4o=r(z6e," (Data2VecText model)"),z6e.forEach(t),x4o=i(W),k_=n(W,"LI",{});var Q6e=s(k_);qle=n(Q6e,"STRONG",{});var gKr=s(qle);$4o=r(gKr,"electra"),gKr.forEach(t),k4o=r(Q6e," \u2014 "),pN=n(Q6e,"A",{href:!0});var hKr=s(pN);S4o=r(hKr,"ElectraForCausalLM"),hKr.forEach(t),R4o=r(Q6e," (ELECTRA model)"),Q6e.forEach(t),B4o=i(W),S_=n(W,"LI",{});var W6e=s(S_);Nle=n(W6e,"STRONG",{});var uKr=s(Nle);P4o=r(uKr,"gpt2"),uKr.forEach(t),I4o=r(W6e," \u2014 "),_N=n(W6e,"A",{href:!0});var pKr=s(_N);q4o=r(pKr,"GPT2LMHeadModel"),pKr.forEach(t),N4o=r(W6e," (OpenAI GPT-2 model)"),W6e.forEach(t),j4o=i(W),R_=n(W,"LI",{});var H6e=s(R_);jle=n(H6e,"STRONG",{});var _Kr=s(jle);D4o=r(_Kr,"gpt_neo"),_Kr.forEach(t),G4o=r(H6e," \u2014 "),bN=n(H6e,"A",{href:!0});var bKr=s(bN);O4o=r(bKr,"GPTNeoForCausalLM"),bKr.forEach(t),V4o=r(H6e," (GPT Neo model)"),H6e.forEach(t),X4o=i(W),B_=n(W,"LI",{});var U6e=s(B_);Dle=n(U6e,"STRONG",{});var FKr=s(Dle);z4o=r(FKr,"gptj"),FKr.forEach(t),Q4o=r(U6e," \u2014 "),FN=n(U6e,"A",{href:!0});var vKr=s(FN);W4o=r(vKr,"GPTJForCausalLM"),vKr.forEach(t),H4o=r(U6e," (GPT-J model)"),U6e.forEach(t),U4o=i(W),P_=n(W,"LI",{});var J6e=s(P_);Gle=n(J6e,"STRONG",{});var TKr=s(Gle);J4o=r(TKr,"marian"),TKr.forEach(t),Y4o=r(J6e," \u2014 "),vN=n(J6e,"A",{href:!0});var MKr=s(vN);K4o=r(MKr,"MarianForCausalLM"),MKr.forEach(t),Z4o=r(J6e," (Marian model)"),J6e.forEach(t),eEo=i(W),I_=n(W,"LI",{});var Y6e=s(I_);Ole=n(Y6e,"STRONG",{});var EKr=s(Ole);oEo=r(EKr,"mbart"),EKr.forEach(t),rEo=r(Y6e," \u2014 "),TN=n(Y6e,"A",{href:!0});var CKr=s(TN);tEo=r(CKr,"MBartForCausalLM"),CKr.forEach(t),aEo=r(Y6e," (mBART model)"),Y6e.forEach(t),nEo=i(W),q_=n(W,"LI",{});var K6e=s(q_);Vle=n(K6e,"STRONG",{});var wKr=s(Vle);sEo=r(wKr,"megatron-bert"),wKr.forEach(t),lEo=r(K6e," \u2014 "),MN=n(K6e,"A",{href:!0});var AKr=s(MN);iEo=r(AKr,"MegatronBertForCausalLM"),AKr.forEach(t),dEo=r(K6e," (MegatronBert model)"),K6e.forEach(t),cEo=i(W),N_=n(W,"LI",{});var Z6e=s(N_);Xle=n(Z6e,"STRONG",{});var yKr=s(Xle);mEo=r(yKr,"openai-gpt"),yKr.forEach(t),fEo=r(Z6e," \u2014 "),EN=n(Z6e,"A",{href:!0});var LKr=s(EN);gEo=r(LKr,"OpenAIGPTLMHeadModel"),LKr.forEach(t),hEo=r(Z6e," (OpenAI GPT model)"),Z6e.forEach(t),uEo=i(W),j_=n(W,"LI",{});var eye=s(j_);zle=n(eye,"STRONG",{});var xKr=s(zle);pEo=r(xKr,"pegasus"),xKr.forEach(t),_Eo=r(eye," \u2014 "),CN=n(eye,"A",{href:!0});var $Kr=s(CN);bEo=r($Kr,"PegasusForCausalLM"),$Kr.forEach(t),FEo=r(eye," (Pegasus model)"),eye.forEach(t),vEo=i(W),D_=n(W,"LI",{});var oye=s(D_);Qle=n(oye,"STRONG",{});var kKr=s(Qle);TEo=r(kKr,"plbart"),kKr.forEach(t),MEo=r(oye," \u2014 "),wN=n(oye,"A",{href:!0});var SKr=s(wN);EEo=r(SKr,"PLBartForCausalLM"),SKr.forEach(t),CEo=r(oye," (PLBart model)"),oye.forEach(t),wEo=i(W),G_=n(W,"LI",{});var rye=s(G_);Wle=n(rye,"STRONG",{});var RKr=s(Wle);AEo=r(RKr,"prophetnet"),RKr.forEach(t),yEo=r(rye," \u2014 "),AN=n(rye,"A",{href:!0});var BKr=s(AN);LEo=r(BKr,"ProphetNetForCausalLM"),BKr.forEach(t),xEo=r(rye," (ProphetNet model)"),rye.forEach(t),$Eo=i(W),O_=n(W,"LI",{});var tye=s(O_);Hle=n(tye,"STRONG",{});var PKr=s(Hle);kEo=r(PKr,"qdqbert"),PKr.forEach(t),SEo=r(tye," \u2014 "),yN=n(tye,"A",{href:!0});var IKr=s(yN);REo=r(IKr,"QDQBertLMHeadModel"),IKr.forEach(t),BEo=r(tye," (QDQBert model)"),tye.forEach(t),PEo=i(W),V_=n(W,"LI",{});var aye=s(V_);Ule=n(aye,"STRONG",{});var qKr=s(Ule);IEo=r(qKr,"reformer"),qKr.forEach(t),qEo=r(aye," \u2014 "),LN=n(aye,"A",{href:!0});var NKr=s(LN);NEo=r(NKr,"ReformerModelWithLMHead"),NKr.forEach(t),jEo=r(aye," (Reformer model)"),aye.forEach(t),DEo=i(W),X_=n(W,"LI",{});var nye=s(X_);Jle=n(nye,"STRONG",{});var jKr=s(Jle);GEo=r(jKr,"rembert"),jKr.forEach(t),OEo=r(nye," \u2014 "),xN=n(nye,"A",{href:!0});var DKr=s(xN);VEo=r(DKr,"RemBertForCausalLM"),DKr.forEach(t),XEo=r(nye," (RemBERT model)"),nye.forEach(t),zEo=i(W),z_=n(W,"LI",{});var sye=s(z_);Yle=n(sye,"STRONG",{});var GKr=s(Yle);QEo=r(GKr,"roberta"),GKr.forEach(t),WEo=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var OKr=s($N);HEo=r(OKr,"RobertaForCausalLM"),OKr.forEach(t),UEo=r(sye," (RoBERTa model)"),sye.forEach(t),JEo=i(W),Q_=n(W,"LI",{});var lye=s(Q_);Kle=n(lye,"STRONG",{});var VKr=s(Kle);YEo=r(VKr,"roformer"),VKr.forEach(t),KEo=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var XKr=s(kN);ZEo=r(XKr,"RoFormerForCausalLM"),XKr.forEach(t),e5o=r(lye," (RoFormer model)"),lye.forEach(t),o5o=i(W),W_=n(W,"LI",{});var iye=s(W_);Zle=n(iye,"STRONG",{});var zKr=s(Zle);r5o=r(zKr,"speech_to_text_2"),zKr.forEach(t),t5o=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var QKr=s(SN);a5o=r(QKr,"Speech2Text2ForCausalLM"),QKr.forEach(t),n5o=r(iye," (Speech2Text2 model)"),iye.forEach(t),s5o=i(W),H_=n(W,"LI",{});var dye=s(H_);eie=n(dye,"STRONG",{});var WKr=s(eie);l5o=r(WKr,"transfo-xl"),WKr.forEach(t),i5o=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var HKr=s(RN);d5o=r(HKr,"TransfoXLLMHeadModel"),HKr.forEach(t),c5o=r(dye," (Transformer-XL model)"),dye.forEach(t),m5o=i(W),U_=n(W,"LI",{});var cye=s(U_);oie=n(cye,"STRONG",{});var UKr=s(oie);f5o=r(UKr,"trocr"),UKr.forEach(t),g5o=r(cye," \u2014 "),BN=n(cye,"A",{href:!0});var JKr=s(BN);h5o=r(JKr,"TrOCRForCausalLM"),JKr.forEach(t),u5o=r(cye," (TrOCR model)"),cye.forEach(t),p5o=i(W),J_=n(W,"LI",{});var mye=s(J_);rie=n(mye,"STRONG",{});var YKr=s(rie);_5o=r(YKr,"xglm"),YKr.forEach(t),b5o=r(mye," \u2014 "),PN=n(mye,"A",{href:!0});var KKr=s(PN);F5o=r(KKr,"XGLMForCausalLM"),KKr.forEach(t),v5o=r(mye," (XGLM model)"),mye.forEach(t),T5o=i(W),Y_=n(W,"LI",{});var fye=s(Y_);tie=n(fye,"STRONG",{});var ZKr=s(tie);M5o=r(ZKr,"xlm"),ZKr.forEach(t),E5o=r(fye," \u2014 "),IN=n(fye,"A",{href:!0});var eZr=s(IN);C5o=r(eZr,"XLMWithLMHeadModel"),eZr.forEach(t),w5o=r(fye," (XLM model)"),fye.forEach(t),A5o=i(W),K_=n(W,"LI",{});var gye=s(K_);aie=n(gye,"STRONG",{});var oZr=s(aie);y5o=r(oZr,"xlm-prophetnet"),oZr.forEach(t),L5o=r(gye," \u2014 "),qN=n(gye,"A",{href:!0});var rZr=s(qN);x5o=r(rZr,"XLMProphetNetForCausalLM"),rZr.forEach(t),$5o=r(gye," (XLMProphetNet model)"),gye.forEach(t),k5o=i(W),Z_=n(W,"LI",{});var hye=s(Z_);nie=n(hye,"STRONG",{});var tZr=s(nie);S5o=r(tZr,"xlm-roberta"),tZr.forEach(t),R5o=r(hye," \u2014 "),NN=n(hye,"A",{href:!0});var aZr=s(NN);B5o=r(aZr,"XLMRobertaForCausalLM"),aZr.forEach(t),P5o=r(hye," (XLM-RoBERTa model)"),hye.forEach(t),I5o=i(W),eb=n(W,"LI",{});var uye=s(eb);sie=n(uye,"STRONG",{});var nZr=s(sie);q5o=r(nZr,"xlm-roberta-xl"),nZr.forEach(t),N5o=r(uye," \u2014 "),jN=n(uye,"A",{href:!0});var sZr=s(jN);j5o=r(sZr,"XLMRobertaXLForCausalLM"),sZr.forEach(t),D5o=r(uye," (XLM-RoBERTa-XL model)"),uye.forEach(t),G5o=i(W),ob=n(W,"LI",{});var pye=s(ob);lie=n(pye,"STRONG",{});var lZr=s(lie);O5o=r(lZr,"xlnet"),lZr.forEach(t),V5o=r(pye," \u2014 "),DN=n(pye,"A",{href:!0});var iZr=s(DN);X5o=r(iZr,"XLNetLMHeadModel"),iZr.forEach(t),z5o=r(pye," (XLNet model)"),pye.forEach(t),W.forEach(t),Q5o=i(oa),rb=n(oa,"P",{});var _ye=s(rb);W5o=r(_ye,"The model is set in evaluation mode by default using "),iie=n(_ye,"CODE",{});var dZr=s(iie);H5o=r(dZr,"model.eval()"),dZr.forEach(t),U5o=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=n(_ye,"CODE",{});var cZr=s(die);J5o=r(cZr,"model.train()"),cZr.forEach(t),_ye.forEach(t),Y5o=i(oa),T(tb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),MPe=i(m),$i=n(m,"H2",{class:!0});var Aqe=s($i);ab=n(Aqe,"A",{id:!0,class:!0,href:!0});var mZr=s(ab);cie=n(mZr,"SPAN",{});var fZr=s(cie);T(Ly.$$.fragment,fZr),fZr.forEach(t),mZr.forEach(t),K5o=i(Aqe),mie=n(Aqe,"SPAN",{});var gZr=s(mie);Z5o=r(gZr,"AutoModelForMaskedLM"),gZr.forEach(t),Aqe.forEach(t),EPe=i(m),ko=n(m,"DIV",{class:!0});var Os=s(ko);T(xy.$$.fragment,Os),eCo=i(Os),ki=n(Os,"P",{});var UY=s(ki);oCo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GN=n(UY,"A",{href:!0});var hZr=s(GN);rCo=r(hZr,"from_pretrained()"),hZr.forEach(t),tCo=r(UY," class method or the "),ON=n(UY,"A",{href:!0});var uZr=s(ON);aCo=r(uZr,"from_config()"),uZr.forEach(t),nCo=r(UY,` class
method.`),UY.forEach(t),sCo=i(Os),$y=n(Os,"P",{});var yqe=s($y);lCo=r(yqe,"This class cannot be instantiated directly using "),fie=n(yqe,"CODE",{});var pZr=s(fie);iCo=r(pZr,"__init__()"),pZr.forEach(t),dCo=r(yqe," (throws an error)."),yqe.forEach(t),cCo=i(Os),at=n(Os,"DIV",{class:!0});var JA=s(at);T(ky.$$.fragment,JA),mCo=i(JA),gie=n(JA,"P",{});var _Zr=s(gie);fCo=r(_Zr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Zr.forEach(t),gCo=i(JA),Si=n(JA,"P",{});var JY=s(Si);hCo=r(JY,`Note:
Loading a model from its configuration file does `),hie=n(JY,"STRONG",{});var bZr=s(hie);uCo=r(bZr,"not"),bZr.forEach(t),pCo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(JY,"A",{href:!0});var FZr=s(VN);_Co=r(FZr,"from_pretrained()"),FZr.forEach(t),bCo=r(JY," to load the model weights."),JY.forEach(t),FCo=i(JA),T(nb.$$.fragment,JA),JA.forEach(t),vCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(Sy.$$.fragment,ra),TCo=i(ra),uie=n(ra,"P",{});var vZr=s(uie);MCo=r(vZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vZr.forEach(t),ECo=i(ra),xa=n(ra,"P",{});var YA=s(xa);CCo=r(YA,"The model class to instantiate is selected based on the "),pie=n(YA,"CODE",{});var TZr=s(pie);wCo=r(TZr,"model_type"),TZr.forEach(t),ACo=r(YA,` property of the config object (either
passed as an argument or loaded from `),_ie=n(YA,"CODE",{});var MZr=s(_ie);yCo=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),LCo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(YA,"CODE",{});var EZr=s(bie);xCo=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),$Co=r(YA,":"),YA.forEach(t),kCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);sb=n(H,"LI",{});var bye=s(sb);Fie=n(bye,"STRONG",{});var CZr=s(Fie);SCo=r(CZr,"albert"),CZr.forEach(t),RCo=r(bye," \u2014 "),XN=n(bye,"A",{href:!0});var wZr=s(XN);BCo=r(wZr,"AlbertForMaskedLM"),wZr.forEach(t),PCo=r(bye," (ALBERT model)"),bye.forEach(t),ICo=i(H),lb=n(H,"LI",{});var Fye=s(lb);vie=n(Fye,"STRONG",{});var AZr=s(vie);qCo=r(AZr,"bart"),AZr.forEach(t),NCo=r(Fye," \u2014 "),zN=n(Fye,"A",{href:!0});var yZr=s(zN);jCo=r(yZr,"BartForConditionalGeneration"),yZr.forEach(t),DCo=r(Fye," (BART model)"),Fye.forEach(t),GCo=i(H),ib=n(H,"LI",{});var vye=s(ib);Tie=n(vye,"STRONG",{});var LZr=s(Tie);OCo=r(LZr,"bert"),LZr.forEach(t),VCo=r(vye," \u2014 "),QN=n(vye,"A",{href:!0});var xZr=s(QN);XCo=r(xZr,"BertForMaskedLM"),xZr.forEach(t),zCo=r(vye," (BERT model)"),vye.forEach(t),QCo=i(H),db=n(H,"LI",{});var Tye=s(db);Mie=n(Tye,"STRONG",{});var $Zr=s(Mie);WCo=r($Zr,"big_bird"),$Zr.forEach(t),HCo=r(Tye," \u2014 "),WN=n(Tye,"A",{href:!0});var kZr=s(WN);UCo=r(kZr,"BigBirdForMaskedLM"),kZr.forEach(t),JCo=r(Tye," (BigBird model)"),Tye.forEach(t),YCo=i(H),cb=n(H,"LI",{});var Mye=s(cb);Eie=n(Mye,"STRONG",{});var SZr=s(Eie);KCo=r(SZr,"camembert"),SZr.forEach(t),ZCo=r(Mye," \u2014 "),HN=n(Mye,"A",{href:!0});var RZr=s(HN);e3o=r(RZr,"CamembertForMaskedLM"),RZr.forEach(t),o3o=r(Mye," (CamemBERT model)"),Mye.forEach(t),r3o=i(H),mb=n(H,"LI",{});var Eye=s(mb);Cie=n(Eye,"STRONG",{});var BZr=s(Cie);t3o=r(BZr,"convbert"),BZr.forEach(t),a3o=r(Eye," \u2014 "),UN=n(Eye,"A",{href:!0});var PZr=s(UN);n3o=r(PZr,"ConvBertForMaskedLM"),PZr.forEach(t),s3o=r(Eye," (ConvBERT model)"),Eye.forEach(t),l3o=i(H),fb=n(H,"LI",{});var Cye=s(fb);wie=n(Cye,"STRONG",{});var IZr=s(wie);i3o=r(IZr,"data2vec-text"),IZr.forEach(t),d3o=r(Cye," \u2014 "),JN=n(Cye,"A",{href:!0});var qZr=s(JN);c3o=r(qZr,"Data2VecTextForMaskedLM"),qZr.forEach(t),m3o=r(Cye," (Data2VecText model)"),Cye.forEach(t),f3o=i(H),gb=n(H,"LI",{});var wye=s(gb);Aie=n(wye,"STRONG",{});var NZr=s(Aie);g3o=r(NZr,"deberta"),NZr.forEach(t),h3o=r(wye," \u2014 "),YN=n(wye,"A",{href:!0});var jZr=s(YN);u3o=r(jZr,"DebertaForMaskedLM"),jZr.forEach(t),p3o=r(wye," (DeBERTa model)"),wye.forEach(t),_3o=i(H),hb=n(H,"LI",{});var Aye=s(hb);yie=n(Aye,"STRONG",{});var DZr=s(yie);b3o=r(DZr,"deberta-v2"),DZr.forEach(t),F3o=r(Aye," \u2014 "),KN=n(Aye,"A",{href:!0});var GZr=s(KN);v3o=r(GZr,"DebertaV2ForMaskedLM"),GZr.forEach(t),T3o=r(Aye," (DeBERTa-v2 model)"),Aye.forEach(t),M3o=i(H),ub=n(H,"LI",{});var yye=s(ub);Lie=n(yye,"STRONG",{});var OZr=s(Lie);E3o=r(OZr,"distilbert"),OZr.forEach(t),C3o=r(yye," \u2014 "),ZN=n(yye,"A",{href:!0});var VZr=s(ZN);w3o=r(VZr,"DistilBertForMaskedLM"),VZr.forEach(t),A3o=r(yye," (DistilBERT model)"),yye.forEach(t),y3o=i(H),pb=n(H,"LI",{});var Lye=s(pb);xie=n(Lye,"STRONG",{});var XZr=s(xie);L3o=r(XZr,"electra"),XZr.forEach(t),x3o=r(Lye," \u2014 "),ej=n(Lye,"A",{href:!0});var zZr=s(ej);$3o=r(zZr,"ElectraForMaskedLM"),zZr.forEach(t),k3o=r(Lye," (ELECTRA model)"),Lye.forEach(t),S3o=i(H),_b=n(H,"LI",{});var xye=s(_b);$ie=n(xye,"STRONG",{});var QZr=s($ie);R3o=r(QZr,"flaubert"),QZr.forEach(t),B3o=r(xye," \u2014 "),oj=n(xye,"A",{href:!0});var WZr=s(oj);P3o=r(WZr,"FlaubertWithLMHeadModel"),WZr.forEach(t),I3o=r(xye," (FlauBERT model)"),xye.forEach(t),q3o=i(H),bb=n(H,"LI",{});var $ye=s(bb);kie=n($ye,"STRONG",{});var HZr=s(kie);N3o=r(HZr,"fnet"),HZr.forEach(t),j3o=r($ye," \u2014 "),rj=n($ye,"A",{href:!0});var UZr=s(rj);D3o=r(UZr,"FNetForMaskedLM"),UZr.forEach(t),G3o=r($ye," (FNet model)"),$ye.forEach(t),O3o=i(H),Fb=n(H,"LI",{});var kye=s(Fb);Sie=n(kye,"STRONG",{});var JZr=s(Sie);V3o=r(JZr,"funnel"),JZr.forEach(t),X3o=r(kye," \u2014 "),tj=n(kye,"A",{href:!0});var YZr=s(tj);z3o=r(YZr,"FunnelForMaskedLM"),YZr.forEach(t),Q3o=r(kye," (Funnel Transformer model)"),kye.forEach(t),W3o=i(H),vb=n(H,"LI",{});var Sye=s(vb);Rie=n(Sye,"STRONG",{});var KZr=s(Rie);H3o=r(KZr,"ibert"),KZr.forEach(t),U3o=r(Sye," \u2014 "),aj=n(Sye,"A",{href:!0});var ZZr=s(aj);J3o=r(ZZr,"IBertForMaskedLM"),ZZr.forEach(t),Y3o=r(Sye," (I-BERT model)"),Sye.forEach(t),K3o=i(H),Tb=n(H,"LI",{});var Rye=s(Tb);Bie=n(Rye,"STRONG",{});var eet=s(Bie);Z3o=r(eet,"layoutlm"),eet.forEach(t),ewo=r(Rye," \u2014 "),nj=n(Rye,"A",{href:!0});var oet=s(nj);owo=r(oet,"LayoutLMForMaskedLM"),oet.forEach(t),rwo=r(Rye," (LayoutLM model)"),Rye.forEach(t),two=i(H),Mb=n(H,"LI",{});var Bye=s(Mb);Pie=n(Bye,"STRONG",{});var ret=s(Pie);awo=r(ret,"longformer"),ret.forEach(t),nwo=r(Bye," \u2014 "),sj=n(Bye,"A",{href:!0});var tet=s(sj);swo=r(tet,"LongformerForMaskedLM"),tet.forEach(t),lwo=r(Bye," (Longformer model)"),Bye.forEach(t),iwo=i(H),Eb=n(H,"LI",{});var Pye=s(Eb);Iie=n(Pye,"STRONG",{});var aet=s(Iie);dwo=r(aet,"mbart"),aet.forEach(t),cwo=r(Pye," \u2014 "),lj=n(Pye,"A",{href:!0});var net=s(lj);mwo=r(net,"MBartForConditionalGeneration"),net.forEach(t),fwo=r(Pye," (mBART model)"),Pye.forEach(t),gwo=i(H),Cb=n(H,"LI",{});var Iye=s(Cb);qie=n(Iye,"STRONG",{});var set=s(qie);hwo=r(set,"megatron-bert"),set.forEach(t),uwo=r(Iye," \u2014 "),ij=n(Iye,"A",{href:!0});var iet=s(ij);pwo=r(iet,"MegatronBertForMaskedLM"),iet.forEach(t),_wo=r(Iye," (MegatronBert model)"),Iye.forEach(t),bwo=i(H),wb=n(H,"LI",{});var qye=s(wb);Nie=n(qye,"STRONG",{});var det=s(Nie);Fwo=r(det,"mobilebert"),det.forEach(t),vwo=r(qye," \u2014 "),dj=n(qye,"A",{href:!0});var cet=s(dj);Two=r(cet,"MobileBertForMaskedLM"),cet.forEach(t),Mwo=r(qye," (MobileBERT model)"),qye.forEach(t),Ewo=i(H),Ab=n(H,"LI",{});var Nye=s(Ab);jie=n(Nye,"STRONG",{});var met=s(jie);Cwo=r(met,"mpnet"),met.forEach(t),wwo=r(Nye," \u2014 "),cj=n(Nye,"A",{href:!0});var fet=s(cj);Awo=r(fet,"MPNetForMaskedLM"),fet.forEach(t),ywo=r(Nye," (MPNet model)"),Nye.forEach(t),Lwo=i(H),yb=n(H,"LI",{});var jye=s(yb);Die=n(jye,"STRONG",{});var get=s(Die);xwo=r(get,"nystromformer"),get.forEach(t),$wo=r(jye," \u2014 "),mj=n(jye,"A",{href:!0});var het=s(mj);kwo=r(het,"NystromformerForMaskedLM"),het.forEach(t),Swo=r(jye," (Nystromformer model)"),jye.forEach(t),Rwo=i(H),Lb=n(H,"LI",{});var Dye=s(Lb);Gie=n(Dye,"STRONG",{});var uet=s(Gie);Bwo=r(uet,"perceiver"),uet.forEach(t),Pwo=r(Dye," \u2014 "),fj=n(Dye,"A",{href:!0});var pet=s(fj);Iwo=r(pet,"PerceiverForMaskedLM"),pet.forEach(t),qwo=r(Dye," (Perceiver model)"),Dye.forEach(t),Nwo=i(H),xb=n(H,"LI",{});var Gye=s(xb);Oie=n(Gye,"STRONG",{});var _et=s(Oie);jwo=r(_et,"qdqbert"),_et.forEach(t),Dwo=r(Gye," \u2014 "),gj=n(Gye,"A",{href:!0});var bet=s(gj);Gwo=r(bet,"QDQBertForMaskedLM"),bet.forEach(t),Owo=r(Gye," (QDQBert model)"),Gye.forEach(t),Vwo=i(H),$b=n(H,"LI",{});var Oye=s($b);Vie=n(Oye,"STRONG",{});var Fet=s(Vie);Xwo=r(Fet,"reformer"),Fet.forEach(t),zwo=r(Oye," \u2014 "),hj=n(Oye,"A",{href:!0});var vet=s(hj);Qwo=r(vet,"ReformerForMaskedLM"),vet.forEach(t),Wwo=r(Oye," (Reformer model)"),Oye.forEach(t),Hwo=i(H),kb=n(H,"LI",{});var Vye=s(kb);Xie=n(Vye,"STRONG",{});var Tet=s(Xie);Uwo=r(Tet,"rembert"),Tet.forEach(t),Jwo=r(Vye," \u2014 "),uj=n(Vye,"A",{href:!0});var Met=s(uj);Ywo=r(Met,"RemBertForMaskedLM"),Met.forEach(t),Kwo=r(Vye," (RemBERT model)"),Vye.forEach(t),Zwo=i(H),Sb=n(H,"LI",{});var Xye=s(Sb);zie=n(Xye,"STRONG",{});var Eet=s(zie);eAo=r(Eet,"roberta"),Eet.forEach(t),oAo=r(Xye," \u2014 "),pj=n(Xye,"A",{href:!0});var Cet=s(pj);rAo=r(Cet,"RobertaForMaskedLM"),Cet.forEach(t),tAo=r(Xye," (RoBERTa model)"),Xye.forEach(t),aAo=i(H),Rb=n(H,"LI",{});var zye=s(Rb);Qie=n(zye,"STRONG",{});var wet=s(Qie);nAo=r(wet,"roformer"),wet.forEach(t),sAo=r(zye," \u2014 "),_j=n(zye,"A",{href:!0});var Aet=s(_j);lAo=r(Aet,"RoFormerForMaskedLM"),Aet.forEach(t),iAo=r(zye," (RoFormer model)"),zye.forEach(t),dAo=i(H),Bb=n(H,"LI",{});var Qye=s(Bb);Wie=n(Qye,"STRONG",{});var yet=s(Wie);cAo=r(yet,"squeezebert"),yet.forEach(t),mAo=r(Qye," \u2014 "),bj=n(Qye,"A",{href:!0});var Let=s(bj);fAo=r(Let,"SqueezeBertForMaskedLM"),Let.forEach(t),gAo=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),hAo=i(H),Pb=n(H,"LI",{});var Wye=s(Pb);Hie=n(Wye,"STRONG",{});var xet=s(Hie);uAo=r(xet,"tapas"),xet.forEach(t),pAo=r(Wye," \u2014 "),Fj=n(Wye,"A",{href:!0});var $et=s(Fj);_Ao=r($et,"TapasForMaskedLM"),$et.forEach(t),bAo=r(Wye," (TAPAS model)"),Wye.forEach(t),FAo=i(H),Ib=n(H,"LI",{});var Hye=s(Ib);Uie=n(Hye,"STRONG",{});var ket=s(Uie);vAo=r(ket,"wav2vec2"),ket.forEach(t),TAo=r(Hye," \u2014 "),Jie=n(Hye,"CODE",{});var Set=s(Jie);MAo=r(Set,"Wav2Vec2ForMaskedLM"),Set.forEach(t),EAo=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),CAo=i(H),qb=n(H,"LI",{});var Uye=s(qb);Yie=n(Uye,"STRONG",{});var Ret=s(Yie);wAo=r(Ret,"xlm"),Ret.forEach(t),AAo=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var Bet=s(vj);yAo=r(Bet,"XLMWithLMHeadModel"),Bet.forEach(t),LAo=r(Uye," (XLM model)"),Uye.forEach(t),xAo=i(H),Nb=n(H,"LI",{});var Jye=s(Nb);Kie=n(Jye,"STRONG",{});var Pet=s(Kie);$Ao=r(Pet,"xlm-roberta"),Pet.forEach(t),kAo=r(Jye," \u2014 "),Tj=n(Jye,"A",{href:!0});var Iet=s(Tj);SAo=r(Iet,"XLMRobertaForMaskedLM"),Iet.forEach(t),RAo=r(Jye," (XLM-RoBERTa model)"),Jye.forEach(t),BAo=i(H),jb=n(H,"LI",{});var Yye=s(jb);Zie=n(Yye,"STRONG",{});var qet=s(Zie);PAo=r(qet,"xlm-roberta-xl"),qet.forEach(t),IAo=r(Yye," \u2014 "),Mj=n(Yye,"A",{href:!0});var Net=s(Mj);qAo=r(Net,"XLMRobertaXLForMaskedLM"),Net.forEach(t),NAo=r(Yye," (XLM-RoBERTa-XL model)"),Yye.forEach(t),jAo=i(H),Db=n(H,"LI",{});var Kye=s(Db);ede=n(Kye,"STRONG",{});var jet=s(ede);DAo=r(jet,"yoso"),jet.forEach(t),GAo=r(Kye," \u2014 "),Ej=n(Kye,"A",{href:!0});var Det=s(Ej);OAo=r(Det,"YosoForMaskedLM"),Det.forEach(t),VAo=r(Kye," (YOSO model)"),Kye.forEach(t),H.forEach(t),XAo=i(ra),Gb=n(ra,"P",{});var Zye=s(Gb);zAo=r(Zye,"The model is set in evaluation mode by default using "),ode=n(Zye,"CODE",{});var Get=s(ode);QAo=r(Get,"model.eval()"),Get.forEach(t),WAo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(Zye,"CODE",{});var Oet=s(rde);HAo=r(Oet,"model.train()"),Oet.forEach(t),Zye.forEach(t),UAo=i(ra),T(Ob.$$.fragment,ra),ra.forEach(t),Os.forEach(t),CPe=i(m),Ri=n(m,"H2",{class:!0});var Lqe=s(Ri);Vb=n(Lqe,"A",{id:!0,class:!0,href:!0});var Vet=s(Vb);tde=n(Vet,"SPAN",{});var Xet=s(tde);T(Ry.$$.fragment,Xet),Xet.forEach(t),Vet.forEach(t),JAo=i(Lqe),ade=n(Lqe,"SPAN",{});var zet=s(ade);YAo=r(zet,"AutoModelForSeq2SeqLM"),zet.forEach(t),Lqe.forEach(t),wPe=i(m),So=n(m,"DIV",{class:!0});var Vs=s(So);T(By.$$.fragment,Vs),KAo=i(Vs),Bi=n(Vs,"P",{});var YY=s(Bi);ZAo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cj=n(YY,"A",{href:!0});var Qet=s(Cj);e0o=r(Qet,"from_pretrained()"),Qet.forEach(t),o0o=r(YY," class method or the "),wj=n(YY,"A",{href:!0});var Wet=s(wj);r0o=r(Wet,"from_config()"),Wet.forEach(t),t0o=r(YY,` class
method.`),YY.forEach(t),a0o=i(Vs),Py=n(Vs,"P",{});var xqe=s(Py);n0o=r(xqe,"This class cannot be instantiated directly using "),nde=n(xqe,"CODE",{});var Het=s(nde);s0o=r(Het,"__init__()"),Het.forEach(t),l0o=r(xqe," (throws an error)."),xqe.forEach(t),i0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var KA=s(nt);T(Iy.$$.fragment,KA),d0o=i(KA),sde=n(KA,"P",{});var Uet=s(sde);c0o=r(Uet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uet.forEach(t),m0o=i(KA),Pi=n(KA,"P",{});var KY=s(Pi);f0o=r(KY,`Note:
Loading a model from its configuration file does `),lde=n(KY,"STRONG",{});var Jet=s(lde);g0o=r(Jet,"not"),Jet.forEach(t),h0o=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=n(KY,"A",{href:!0});var Yet=s(Aj);u0o=r(Yet,"from_pretrained()"),Yet.forEach(t),p0o=r(KY," to load the model weights."),KY.forEach(t),_0o=i(KA),T(Xb.$$.fragment,KA),KA.forEach(t),b0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(qy.$$.fragment,ta),F0o=i(ta),ide=n(ta,"P",{});var Ket=s(ide);v0o=r(Ket,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ket.forEach(t),T0o=i(ta),$a=n(ta,"P",{});var ZA=s($a);M0o=r(ZA,"The model class to instantiate is selected based on the "),dde=n(ZA,"CODE",{});var Zet=s(dde);E0o=r(Zet,"model_type"),Zet.forEach(t),C0o=r(ZA,` property of the config object (either
passed as an argument or loaded from `),cde=n(ZA,"CODE",{});var eot=s(cde);w0o=r(eot,"pretrained_model_name_or_path"),eot.forEach(t),A0o=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n(ZA,"CODE",{});var oot=s(mde);y0o=r(oot,"pretrained_model_name_or_path"),oot.forEach(t),L0o=r(ZA,":"),ZA.forEach(t),x0o=i(ta),he=n(ta,"UL",{});var pe=s(he);zb=n(pe,"LI",{});var eLe=s(zb);fde=n(eLe,"STRONG",{});var rot=s(fde);$0o=r(rot,"bart"),rot.forEach(t),k0o=r(eLe," \u2014 "),yj=n(eLe,"A",{href:!0});var tot=s(yj);S0o=r(tot,"BartForConditionalGeneration"),tot.forEach(t),R0o=r(eLe," (BART model)"),eLe.forEach(t),B0o=i(pe),Qb=n(pe,"LI",{});var oLe=s(Qb);gde=n(oLe,"STRONG",{});var aot=s(gde);P0o=r(aot,"bigbird_pegasus"),aot.forEach(t),I0o=r(oLe," \u2014 "),Lj=n(oLe,"A",{href:!0});var not=s(Lj);q0o=r(not,"BigBirdPegasusForConditionalGeneration"),not.forEach(t),N0o=r(oLe," (BigBirdPegasus model)"),oLe.forEach(t),j0o=i(pe),Wb=n(pe,"LI",{});var rLe=s(Wb);hde=n(rLe,"STRONG",{});var sot=s(hde);D0o=r(sot,"blenderbot"),sot.forEach(t),G0o=r(rLe," \u2014 "),xj=n(rLe,"A",{href:!0});var lot=s(xj);O0o=r(lot,"BlenderbotForConditionalGeneration"),lot.forEach(t),V0o=r(rLe," (Blenderbot model)"),rLe.forEach(t),X0o=i(pe),Hb=n(pe,"LI",{});var tLe=s(Hb);ude=n(tLe,"STRONG",{});var iot=s(ude);z0o=r(iot,"blenderbot-small"),iot.forEach(t),Q0o=r(tLe," \u2014 "),$j=n(tLe,"A",{href:!0});var dot=s($j);W0o=r(dot,"BlenderbotSmallForConditionalGeneration"),dot.forEach(t),H0o=r(tLe," (BlenderbotSmall model)"),tLe.forEach(t),U0o=i(pe),Ub=n(pe,"LI",{});var aLe=s(Ub);pde=n(aLe,"STRONG",{});var cot=s(pde);J0o=r(cot,"encoder-decoder"),cot.forEach(t),Y0o=r(aLe," \u2014 "),kj=n(aLe,"A",{href:!0});var mot=s(kj);K0o=r(mot,"EncoderDecoderModel"),mot.forEach(t),Z0o=r(aLe," (Encoder decoder model)"),aLe.forEach(t),e6o=i(pe),Jb=n(pe,"LI",{});var nLe=s(Jb);_de=n(nLe,"STRONG",{});var fot=s(_de);o6o=r(fot,"fsmt"),fot.forEach(t),r6o=r(nLe," \u2014 "),Sj=n(nLe,"A",{href:!0});var got=s(Sj);t6o=r(got,"FSMTForConditionalGeneration"),got.forEach(t),a6o=r(nLe," (FairSeq Machine-Translation model)"),nLe.forEach(t),n6o=i(pe),Yb=n(pe,"LI",{});var sLe=s(Yb);bde=n(sLe,"STRONG",{});var hot=s(bde);s6o=r(hot,"led"),hot.forEach(t),l6o=r(sLe," \u2014 "),Rj=n(sLe,"A",{href:!0});var uot=s(Rj);i6o=r(uot,"LEDForConditionalGeneration"),uot.forEach(t),d6o=r(sLe," (LED model)"),sLe.forEach(t),c6o=i(pe),Kb=n(pe,"LI",{});var lLe=s(Kb);Fde=n(lLe,"STRONG",{});var pot=s(Fde);m6o=r(pot,"m2m_100"),pot.forEach(t),f6o=r(lLe," \u2014 "),Bj=n(lLe,"A",{href:!0});var _ot=s(Bj);g6o=r(_ot,"M2M100ForConditionalGeneration"),_ot.forEach(t),h6o=r(lLe," (M2M100 model)"),lLe.forEach(t),u6o=i(pe),Zb=n(pe,"LI",{});var iLe=s(Zb);vde=n(iLe,"STRONG",{});var bot=s(vde);p6o=r(bot,"marian"),bot.forEach(t),_6o=r(iLe," \u2014 "),Pj=n(iLe,"A",{href:!0});var Fot=s(Pj);b6o=r(Fot,"MarianMTModel"),Fot.forEach(t),F6o=r(iLe," (Marian model)"),iLe.forEach(t),v6o=i(pe),e2=n(pe,"LI",{});var dLe=s(e2);Tde=n(dLe,"STRONG",{});var vot=s(Tde);T6o=r(vot,"mbart"),vot.forEach(t),M6o=r(dLe," \u2014 "),Ij=n(dLe,"A",{href:!0});var Tot=s(Ij);E6o=r(Tot,"MBartForConditionalGeneration"),Tot.forEach(t),C6o=r(dLe," (mBART model)"),dLe.forEach(t),w6o=i(pe),o2=n(pe,"LI",{});var cLe=s(o2);Mde=n(cLe,"STRONG",{});var Mot=s(Mde);A6o=r(Mot,"mt5"),Mot.forEach(t),y6o=r(cLe," \u2014 "),qj=n(cLe,"A",{href:!0});var Eot=s(qj);L6o=r(Eot,"MT5ForConditionalGeneration"),Eot.forEach(t),x6o=r(cLe," (mT5 model)"),cLe.forEach(t),$6o=i(pe),r2=n(pe,"LI",{});var mLe=s(r2);Ede=n(mLe,"STRONG",{});var Cot=s(Ede);k6o=r(Cot,"pegasus"),Cot.forEach(t),S6o=r(mLe," \u2014 "),Nj=n(mLe,"A",{href:!0});var wot=s(Nj);R6o=r(wot,"PegasusForConditionalGeneration"),wot.forEach(t),B6o=r(mLe," (Pegasus model)"),mLe.forEach(t),P6o=i(pe),t2=n(pe,"LI",{});var fLe=s(t2);Cde=n(fLe,"STRONG",{});var Aot=s(Cde);I6o=r(Aot,"plbart"),Aot.forEach(t),q6o=r(fLe," \u2014 "),jj=n(fLe,"A",{href:!0});var yot=s(jj);N6o=r(yot,"PLBartForConditionalGeneration"),yot.forEach(t),j6o=r(fLe," (PLBart model)"),fLe.forEach(t),D6o=i(pe),a2=n(pe,"LI",{});var gLe=s(a2);wde=n(gLe,"STRONG",{});var Lot=s(wde);G6o=r(Lot,"prophetnet"),Lot.forEach(t),O6o=r(gLe," \u2014 "),Dj=n(gLe,"A",{href:!0});var xot=s(Dj);V6o=r(xot,"ProphetNetForConditionalGeneration"),xot.forEach(t),X6o=r(gLe," (ProphetNet model)"),gLe.forEach(t),z6o=i(pe),n2=n(pe,"LI",{});var hLe=s(n2);Ade=n(hLe,"STRONG",{});var $ot=s(Ade);Q6o=r($ot,"t5"),$ot.forEach(t),W6o=r(hLe," \u2014 "),Gj=n(hLe,"A",{href:!0});var kot=s(Gj);H6o=r(kot,"T5ForConditionalGeneration"),kot.forEach(t),U6o=r(hLe," (T5 model)"),hLe.forEach(t),J6o=i(pe),s2=n(pe,"LI",{});var uLe=s(s2);yde=n(uLe,"STRONG",{});var Sot=s(yde);Y6o=r(Sot,"tapex"),Sot.forEach(t),K6o=r(uLe," \u2014 "),Oj=n(uLe,"A",{href:!0});var Rot=s(Oj);Z6o=r(Rot,"BartForConditionalGeneration"),Rot.forEach(t),eyo=r(uLe," (TAPEX model)"),uLe.forEach(t),oyo=i(pe),l2=n(pe,"LI",{});var pLe=s(l2);Lde=n(pLe,"STRONG",{});var Bot=s(Lde);ryo=r(Bot,"xlm-prophetnet"),Bot.forEach(t),tyo=r(pLe," \u2014 "),Vj=n(pLe,"A",{href:!0});var Pot=s(Vj);ayo=r(Pot,"XLMProphetNetForConditionalGeneration"),Pot.forEach(t),nyo=r(pLe," (XLMProphetNet model)"),pLe.forEach(t),pe.forEach(t),syo=i(ta),i2=n(ta,"P",{});var _Le=s(i2);lyo=r(_Le,"The model is set in evaluation mode by default using "),xde=n(_Le,"CODE",{});var Iot=s(xde);iyo=r(Iot,"model.eval()"),Iot.forEach(t),dyo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(_Le,"CODE",{});var qot=s($de);cyo=r(qot,"model.train()"),qot.forEach(t),_Le.forEach(t),myo=i(ta),T(d2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),APe=i(m),Ii=n(m,"H2",{class:!0});var $qe=s(Ii);c2=n($qe,"A",{id:!0,class:!0,href:!0});var Not=s(c2);kde=n(Not,"SPAN",{});var jot=s(kde);T(Ny.$$.fragment,jot),jot.forEach(t),Not.forEach(t),fyo=i($qe),Sde=n($qe,"SPAN",{});var Dot=s(Sde);gyo=r(Dot,"AutoModelForSequenceClassification"),Dot.forEach(t),$qe.forEach(t),yPe=i(m),Ro=n(m,"DIV",{class:!0});var Xs=s(Ro);T(jy.$$.fragment,Xs),hyo=i(Xs),qi=n(Xs,"P",{});var ZY=s(qi);uyo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xj=n(ZY,"A",{href:!0});var Got=s(Xj);pyo=r(Got,"from_pretrained()"),Got.forEach(t),_yo=r(ZY," class method or the "),zj=n(ZY,"A",{href:!0});var Oot=s(zj);byo=r(Oot,"from_config()"),Oot.forEach(t),Fyo=r(ZY,` class
method.`),ZY.forEach(t),vyo=i(Xs),Dy=n(Xs,"P",{});var kqe=s(Dy);Tyo=r(kqe,"This class cannot be instantiated directly using "),Rde=n(kqe,"CODE",{});var Vot=s(Rde);Myo=r(Vot,"__init__()"),Vot.forEach(t),Eyo=r(kqe," (throws an error)."),kqe.forEach(t),Cyo=i(Xs),st=n(Xs,"DIV",{class:!0});var e0=s(st);T(Gy.$$.fragment,e0),wyo=i(e0),Bde=n(e0,"P",{});var Xot=s(Bde);Ayo=r(Xot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xot.forEach(t),yyo=i(e0),Ni=n(e0,"P",{});var eK=s(Ni);Lyo=r(eK,`Note:
Loading a model from its configuration file does `),Pde=n(eK,"STRONG",{});var zot=s(Pde);xyo=r(zot,"not"),zot.forEach(t),$yo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n(eK,"A",{href:!0});var Qot=s(Qj);kyo=r(Qot,"from_pretrained()"),Qot.forEach(t),Syo=r(eK," to load the model weights."),eK.forEach(t),Ryo=i(e0),T(m2.$$.fragment,e0),e0.forEach(t),Byo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Oy.$$.fragment,aa),Pyo=i(aa),Ide=n(aa,"P",{});var Wot=s(Ide);Iyo=r(Wot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wot.forEach(t),qyo=i(aa),ka=n(aa,"P",{});var o0=s(ka);Nyo=r(o0,"The model class to instantiate is selected based on the "),qde=n(o0,"CODE",{});var Hot=s(qde);jyo=r(Hot,"model_type"),Hot.forEach(t),Dyo=r(o0,` property of the config object (either
passed as an argument or loaded from `),Nde=n(o0,"CODE",{});var Uot=s(Nde);Gyo=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),Oyo=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(o0,"CODE",{});var Jot=s(jde);Vyo=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),Xyo=r(o0,":"),o0.forEach(t),zyo=i(aa),q=n(aa,"UL",{});var N=s(q);f2=n(N,"LI",{});var bLe=s(f2);Dde=n(bLe,"STRONG",{});var Yot=s(Dde);Qyo=r(Yot,"albert"),Yot.forEach(t),Wyo=r(bLe," \u2014 "),Wj=n(bLe,"A",{href:!0});var Kot=s(Wj);Hyo=r(Kot,"AlbertForSequenceClassification"),Kot.forEach(t),Uyo=r(bLe," (ALBERT model)"),bLe.forEach(t),Jyo=i(N),g2=n(N,"LI",{});var FLe=s(g2);Gde=n(FLe,"STRONG",{});var Zot=s(Gde);Yyo=r(Zot,"bart"),Zot.forEach(t),Kyo=r(FLe," \u2014 "),Hj=n(FLe,"A",{href:!0});var ert=s(Hj);Zyo=r(ert,"BartForSequenceClassification"),ert.forEach(t),eLo=r(FLe," (BART model)"),FLe.forEach(t),oLo=i(N),h2=n(N,"LI",{});var vLe=s(h2);Ode=n(vLe,"STRONG",{});var ort=s(Ode);rLo=r(ort,"bert"),ort.forEach(t),tLo=r(vLe," \u2014 "),Uj=n(vLe,"A",{href:!0});var rrt=s(Uj);aLo=r(rrt,"BertForSequenceClassification"),rrt.forEach(t),nLo=r(vLe," (BERT model)"),vLe.forEach(t),sLo=i(N),u2=n(N,"LI",{});var TLe=s(u2);Vde=n(TLe,"STRONG",{});var trt=s(Vde);lLo=r(trt,"big_bird"),trt.forEach(t),iLo=r(TLe," \u2014 "),Jj=n(TLe,"A",{href:!0});var art=s(Jj);dLo=r(art,"BigBirdForSequenceClassification"),art.forEach(t),cLo=r(TLe," (BigBird model)"),TLe.forEach(t),mLo=i(N),p2=n(N,"LI",{});var MLe=s(p2);Xde=n(MLe,"STRONG",{});var nrt=s(Xde);fLo=r(nrt,"bigbird_pegasus"),nrt.forEach(t),gLo=r(MLe," \u2014 "),Yj=n(MLe,"A",{href:!0});var srt=s(Yj);hLo=r(srt,"BigBirdPegasusForSequenceClassification"),srt.forEach(t),uLo=r(MLe," (BigBirdPegasus model)"),MLe.forEach(t),pLo=i(N),_2=n(N,"LI",{});var ELe=s(_2);zde=n(ELe,"STRONG",{});var lrt=s(zde);_Lo=r(lrt,"camembert"),lrt.forEach(t),bLo=r(ELe," \u2014 "),Kj=n(ELe,"A",{href:!0});var irt=s(Kj);FLo=r(irt,"CamembertForSequenceClassification"),irt.forEach(t),vLo=r(ELe," (CamemBERT model)"),ELe.forEach(t),TLo=i(N),b2=n(N,"LI",{});var CLe=s(b2);Qde=n(CLe,"STRONG",{});var drt=s(Qde);MLo=r(drt,"canine"),drt.forEach(t),ELo=r(CLe," \u2014 "),Zj=n(CLe,"A",{href:!0});var crt=s(Zj);CLo=r(crt,"CanineForSequenceClassification"),crt.forEach(t),wLo=r(CLe," (Canine model)"),CLe.forEach(t),ALo=i(N),F2=n(N,"LI",{});var wLe=s(F2);Wde=n(wLe,"STRONG",{});var mrt=s(Wde);yLo=r(mrt,"convbert"),mrt.forEach(t),LLo=r(wLe," \u2014 "),eD=n(wLe,"A",{href:!0});var frt=s(eD);xLo=r(frt,"ConvBertForSequenceClassification"),frt.forEach(t),$Lo=r(wLe," (ConvBERT model)"),wLe.forEach(t),kLo=i(N),v2=n(N,"LI",{});var ALe=s(v2);Hde=n(ALe,"STRONG",{});var grt=s(Hde);SLo=r(grt,"ctrl"),grt.forEach(t),RLo=r(ALe," \u2014 "),oD=n(ALe,"A",{href:!0});var hrt=s(oD);BLo=r(hrt,"CTRLForSequenceClassification"),hrt.forEach(t),PLo=r(ALe," (CTRL model)"),ALe.forEach(t),ILo=i(N),T2=n(N,"LI",{});var yLe=s(T2);Ude=n(yLe,"STRONG",{});var urt=s(Ude);qLo=r(urt,"data2vec-text"),urt.forEach(t),NLo=r(yLe," \u2014 "),rD=n(yLe,"A",{href:!0});var prt=s(rD);jLo=r(prt,"Data2VecTextForSequenceClassification"),prt.forEach(t),DLo=r(yLe," (Data2VecText model)"),yLe.forEach(t),GLo=i(N),M2=n(N,"LI",{});var LLe=s(M2);Jde=n(LLe,"STRONG",{});var _rt=s(Jde);OLo=r(_rt,"deberta"),_rt.forEach(t),VLo=r(LLe," \u2014 "),tD=n(LLe,"A",{href:!0});var brt=s(tD);XLo=r(brt,"DebertaForSequenceClassification"),brt.forEach(t),zLo=r(LLe," (DeBERTa model)"),LLe.forEach(t),QLo=i(N),E2=n(N,"LI",{});var xLe=s(E2);Yde=n(xLe,"STRONG",{});var Frt=s(Yde);WLo=r(Frt,"deberta-v2"),Frt.forEach(t),HLo=r(xLe," \u2014 "),aD=n(xLe,"A",{href:!0});var vrt=s(aD);ULo=r(vrt,"DebertaV2ForSequenceClassification"),vrt.forEach(t),JLo=r(xLe," (DeBERTa-v2 model)"),xLe.forEach(t),YLo=i(N),C2=n(N,"LI",{});var $Le=s(C2);Kde=n($Le,"STRONG",{});var Trt=s(Kde);KLo=r(Trt,"distilbert"),Trt.forEach(t),ZLo=r($Le," \u2014 "),nD=n($Le,"A",{href:!0});var Mrt=s(nD);e8o=r(Mrt,"DistilBertForSequenceClassification"),Mrt.forEach(t),o8o=r($Le," (DistilBERT model)"),$Le.forEach(t),r8o=i(N),w2=n(N,"LI",{});var kLe=s(w2);Zde=n(kLe,"STRONG",{});var Ert=s(Zde);t8o=r(Ert,"electra"),Ert.forEach(t),a8o=r(kLe," \u2014 "),sD=n(kLe,"A",{href:!0});var Crt=s(sD);n8o=r(Crt,"ElectraForSequenceClassification"),Crt.forEach(t),s8o=r(kLe," (ELECTRA model)"),kLe.forEach(t),l8o=i(N),A2=n(N,"LI",{});var SLe=s(A2);ece=n(SLe,"STRONG",{});var wrt=s(ece);i8o=r(wrt,"flaubert"),wrt.forEach(t),d8o=r(SLe," \u2014 "),lD=n(SLe,"A",{href:!0});var Art=s(lD);c8o=r(Art,"FlaubertForSequenceClassification"),Art.forEach(t),m8o=r(SLe," (FlauBERT model)"),SLe.forEach(t),f8o=i(N),y2=n(N,"LI",{});var RLe=s(y2);oce=n(RLe,"STRONG",{});var yrt=s(oce);g8o=r(yrt,"fnet"),yrt.forEach(t),h8o=r(RLe," \u2014 "),iD=n(RLe,"A",{href:!0});var Lrt=s(iD);u8o=r(Lrt,"FNetForSequenceClassification"),Lrt.forEach(t),p8o=r(RLe," (FNet model)"),RLe.forEach(t),_8o=i(N),L2=n(N,"LI",{});var BLe=s(L2);rce=n(BLe,"STRONG",{});var xrt=s(rce);b8o=r(xrt,"funnel"),xrt.forEach(t),F8o=r(BLe," \u2014 "),dD=n(BLe,"A",{href:!0});var $rt=s(dD);v8o=r($rt,"FunnelForSequenceClassification"),$rt.forEach(t),T8o=r(BLe," (Funnel Transformer model)"),BLe.forEach(t),M8o=i(N),x2=n(N,"LI",{});var PLe=s(x2);tce=n(PLe,"STRONG",{});var krt=s(tce);E8o=r(krt,"gpt2"),krt.forEach(t),C8o=r(PLe," \u2014 "),cD=n(PLe,"A",{href:!0});var Srt=s(cD);w8o=r(Srt,"GPT2ForSequenceClassification"),Srt.forEach(t),A8o=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),y8o=i(N),$2=n(N,"LI",{});var ILe=s($2);ace=n(ILe,"STRONG",{});var Rrt=s(ace);L8o=r(Rrt,"gpt_neo"),Rrt.forEach(t),x8o=r(ILe," \u2014 "),mD=n(ILe,"A",{href:!0});var Brt=s(mD);$8o=r(Brt,"GPTNeoForSequenceClassification"),Brt.forEach(t),k8o=r(ILe," (GPT Neo model)"),ILe.forEach(t),S8o=i(N),k2=n(N,"LI",{});var qLe=s(k2);nce=n(qLe,"STRONG",{});var Prt=s(nce);R8o=r(Prt,"gptj"),Prt.forEach(t),B8o=r(qLe," \u2014 "),fD=n(qLe,"A",{href:!0});var Irt=s(fD);P8o=r(Irt,"GPTJForSequenceClassification"),Irt.forEach(t),I8o=r(qLe," (GPT-J model)"),qLe.forEach(t),q8o=i(N),S2=n(N,"LI",{});var NLe=s(S2);sce=n(NLe,"STRONG",{});var qrt=s(sce);N8o=r(qrt,"ibert"),qrt.forEach(t),j8o=r(NLe," \u2014 "),gD=n(NLe,"A",{href:!0});var Nrt=s(gD);D8o=r(Nrt,"IBertForSequenceClassification"),Nrt.forEach(t),G8o=r(NLe," (I-BERT model)"),NLe.forEach(t),O8o=i(N),R2=n(N,"LI",{});var jLe=s(R2);lce=n(jLe,"STRONG",{});var jrt=s(lce);V8o=r(jrt,"layoutlm"),jrt.forEach(t),X8o=r(jLe," \u2014 "),hD=n(jLe,"A",{href:!0});var Drt=s(hD);z8o=r(Drt,"LayoutLMForSequenceClassification"),Drt.forEach(t),Q8o=r(jLe," (LayoutLM model)"),jLe.forEach(t),W8o=i(N),B2=n(N,"LI",{});var DLe=s(B2);ice=n(DLe,"STRONG",{});var Grt=s(ice);H8o=r(Grt,"layoutlmv2"),Grt.forEach(t),U8o=r(DLe," \u2014 "),uD=n(DLe,"A",{href:!0});var Ort=s(uD);J8o=r(Ort,"LayoutLMv2ForSequenceClassification"),Ort.forEach(t),Y8o=r(DLe," (LayoutLMv2 model)"),DLe.forEach(t),K8o=i(N),P2=n(N,"LI",{});var GLe=s(P2);dce=n(GLe,"STRONG",{});var Vrt=s(dce);Z8o=r(Vrt,"led"),Vrt.forEach(t),exo=r(GLe," \u2014 "),pD=n(GLe,"A",{href:!0});var Xrt=s(pD);oxo=r(Xrt,"LEDForSequenceClassification"),Xrt.forEach(t),rxo=r(GLe," (LED model)"),GLe.forEach(t),txo=i(N),I2=n(N,"LI",{});var OLe=s(I2);cce=n(OLe,"STRONG",{});var zrt=s(cce);axo=r(zrt,"longformer"),zrt.forEach(t),nxo=r(OLe," \u2014 "),_D=n(OLe,"A",{href:!0});var Qrt=s(_D);sxo=r(Qrt,"LongformerForSequenceClassification"),Qrt.forEach(t),lxo=r(OLe," (Longformer model)"),OLe.forEach(t),ixo=i(N),q2=n(N,"LI",{});var VLe=s(q2);mce=n(VLe,"STRONG",{});var Wrt=s(mce);dxo=r(Wrt,"mbart"),Wrt.forEach(t),cxo=r(VLe," \u2014 "),bD=n(VLe,"A",{href:!0});var Hrt=s(bD);mxo=r(Hrt,"MBartForSequenceClassification"),Hrt.forEach(t),fxo=r(VLe," (mBART model)"),VLe.forEach(t),gxo=i(N),N2=n(N,"LI",{});var XLe=s(N2);fce=n(XLe,"STRONG",{});var Urt=s(fce);hxo=r(Urt,"megatron-bert"),Urt.forEach(t),uxo=r(XLe," \u2014 "),FD=n(XLe,"A",{href:!0});var Jrt=s(FD);pxo=r(Jrt,"MegatronBertForSequenceClassification"),Jrt.forEach(t),_xo=r(XLe," (MegatronBert model)"),XLe.forEach(t),bxo=i(N),j2=n(N,"LI",{});var zLe=s(j2);gce=n(zLe,"STRONG",{});var Yrt=s(gce);Fxo=r(Yrt,"mobilebert"),Yrt.forEach(t),vxo=r(zLe," \u2014 "),vD=n(zLe,"A",{href:!0});var Krt=s(vD);Txo=r(Krt,"MobileBertForSequenceClassification"),Krt.forEach(t),Mxo=r(zLe," (MobileBERT model)"),zLe.forEach(t),Exo=i(N),D2=n(N,"LI",{});var QLe=s(D2);hce=n(QLe,"STRONG",{});var Zrt=s(hce);Cxo=r(Zrt,"mpnet"),Zrt.forEach(t),wxo=r(QLe," \u2014 "),TD=n(QLe,"A",{href:!0});var ett=s(TD);Axo=r(ett,"MPNetForSequenceClassification"),ett.forEach(t),yxo=r(QLe," (MPNet model)"),QLe.forEach(t),Lxo=i(N),G2=n(N,"LI",{});var WLe=s(G2);uce=n(WLe,"STRONG",{});var ott=s(uce);xxo=r(ott,"nystromformer"),ott.forEach(t),$xo=r(WLe," \u2014 "),MD=n(WLe,"A",{href:!0});var rtt=s(MD);kxo=r(rtt,"NystromformerForSequenceClassification"),rtt.forEach(t),Sxo=r(WLe," (Nystromformer model)"),WLe.forEach(t),Rxo=i(N),O2=n(N,"LI",{});var HLe=s(O2);pce=n(HLe,"STRONG",{});var ttt=s(pce);Bxo=r(ttt,"openai-gpt"),ttt.forEach(t),Pxo=r(HLe," \u2014 "),ED=n(HLe,"A",{href:!0});var att=s(ED);Ixo=r(att,"OpenAIGPTForSequenceClassification"),att.forEach(t),qxo=r(HLe," (OpenAI GPT model)"),HLe.forEach(t),Nxo=i(N),V2=n(N,"LI",{});var ULe=s(V2);_ce=n(ULe,"STRONG",{});var ntt=s(_ce);jxo=r(ntt,"perceiver"),ntt.forEach(t),Dxo=r(ULe," \u2014 "),CD=n(ULe,"A",{href:!0});var stt=s(CD);Gxo=r(stt,"PerceiverForSequenceClassification"),stt.forEach(t),Oxo=r(ULe," (Perceiver model)"),ULe.forEach(t),Vxo=i(N),X2=n(N,"LI",{});var JLe=s(X2);bce=n(JLe,"STRONG",{});var ltt=s(bce);Xxo=r(ltt,"plbart"),ltt.forEach(t),zxo=r(JLe," \u2014 "),wD=n(JLe,"A",{href:!0});var itt=s(wD);Qxo=r(itt,"PLBartForSequenceClassification"),itt.forEach(t),Wxo=r(JLe," (PLBart model)"),JLe.forEach(t),Hxo=i(N),z2=n(N,"LI",{});var YLe=s(z2);Fce=n(YLe,"STRONG",{});var dtt=s(Fce);Uxo=r(dtt,"qdqbert"),dtt.forEach(t),Jxo=r(YLe," \u2014 "),AD=n(YLe,"A",{href:!0});var ctt=s(AD);Yxo=r(ctt,"QDQBertForSequenceClassification"),ctt.forEach(t),Kxo=r(YLe," (QDQBert model)"),YLe.forEach(t),Zxo=i(N),Q2=n(N,"LI",{});var KLe=s(Q2);vce=n(KLe,"STRONG",{});var mtt=s(vce);e7o=r(mtt,"reformer"),mtt.forEach(t),o7o=r(KLe," \u2014 "),yD=n(KLe,"A",{href:!0});var ftt=s(yD);r7o=r(ftt,"ReformerForSequenceClassification"),ftt.forEach(t),t7o=r(KLe," (Reformer model)"),KLe.forEach(t),a7o=i(N),W2=n(N,"LI",{});var ZLe=s(W2);Tce=n(ZLe,"STRONG",{});var gtt=s(Tce);n7o=r(gtt,"rembert"),gtt.forEach(t),s7o=r(ZLe," \u2014 "),LD=n(ZLe,"A",{href:!0});var htt=s(LD);l7o=r(htt,"RemBertForSequenceClassification"),htt.forEach(t),i7o=r(ZLe," (RemBERT model)"),ZLe.forEach(t),d7o=i(N),H2=n(N,"LI",{});var e8e=s(H2);Mce=n(e8e,"STRONG",{});var utt=s(Mce);c7o=r(utt,"roberta"),utt.forEach(t),m7o=r(e8e," \u2014 "),xD=n(e8e,"A",{href:!0});var ptt=s(xD);f7o=r(ptt,"RobertaForSequenceClassification"),ptt.forEach(t),g7o=r(e8e," (RoBERTa model)"),e8e.forEach(t),h7o=i(N),U2=n(N,"LI",{});var o8e=s(U2);Ece=n(o8e,"STRONG",{});var _tt=s(Ece);u7o=r(_tt,"roformer"),_tt.forEach(t),p7o=r(o8e," \u2014 "),$D=n(o8e,"A",{href:!0});var btt=s($D);_7o=r(btt,"RoFormerForSequenceClassification"),btt.forEach(t),b7o=r(o8e," (RoFormer model)"),o8e.forEach(t),F7o=i(N),J2=n(N,"LI",{});var r8e=s(J2);Cce=n(r8e,"STRONG",{});var Ftt=s(Cce);v7o=r(Ftt,"squeezebert"),Ftt.forEach(t),T7o=r(r8e," \u2014 "),kD=n(r8e,"A",{href:!0});var vtt=s(kD);M7o=r(vtt,"SqueezeBertForSequenceClassification"),vtt.forEach(t),E7o=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),C7o=i(N),Y2=n(N,"LI",{});var t8e=s(Y2);wce=n(t8e,"STRONG",{});var Ttt=s(wce);w7o=r(Ttt,"tapas"),Ttt.forEach(t),A7o=r(t8e," \u2014 "),SD=n(t8e,"A",{href:!0});var Mtt=s(SD);y7o=r(Mtt,"TapasForSequenceClassification"),Mtt.forEach(t),L7o=r(t8e," (TAPAS model)"),t8e.forEach(t),x7o=i(N),K2=n(N,"LI",{});var a8e=s(K2);Ace=n(a8e,"STRONG",{});var Ett=s(Ace);$7o=r(Ett,"tapex"),Ett.forEach(t),k7o=r(a8e," \u2014 "),RD=n(a8e,"A",{href:!0});var Ctt=s(RD);S7o=r(Ctt,"BartForSequenceClassification"),Ctt.forEach(t),R7o=r(a8e," (TAPEX model)"),a8e.forEach(t),B7o=i(N),Z2=n(N,"LI",{});var n8e=s(Z2);yce=n(n8e,"STRONG",{});var wtt=s(yce);P7o=r(wtt,"transfo-xl"),wtt.forEach(t),I7o=r(n8e," \u2014 "),BD=n(n8e,"A",{href:!0});var Att=s(BD);q7o=r(Att,"TransfoXLForSequenceClassification"),Att.forEach(t),N7o=r(n8e," (Transformer-XL model)"),n8e.forEach(t),j7o=i(N),eF=n(N,"LI",{});var s8e=s(eF);Lce=n(s8e,"STRONG",{});var ytt=s(Lce);D7o=r(ytt,"xlm"),ytt.forEach(t),G7o=r(s8e," \u2014 "),PD=n(s8e,"A",{href:!0});var Ltt=s(PD);O7o=r(Ltt,"XLMForSequenceClassification"),Ltt.forEach(t),V7o=r(s8e," (XLM model)"),s8e.forEach(t),X7o=i(N),oF=n(N,"LI",{});var l8e=s(oF);xce=n(l8e,"STRONG",{});var xtt=s(xce);z7o=r(xtt,"xlm-roberta"),xtt.forEach(t),Q7o=r(l8e," \u2014 "),ID=n(l8e,"A",{href:!0});var $tt=s(ID);W7o=r($tt,"XLMRobertaForSequenceClassification"),$tt.forEach(t),H7o=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),U7o=i(N),rF=n(N,"LI",{});var i8e=s(rF);$ce=n(i8e,"STRONG",{});var ktt=s($ce);J7o=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),Y7o=r(i8e," \u2014 "),qD=n(i8e,"A",{href:!0});var Stt=s(qD);K7o=r(Stt,"XLMRobertaXLForSequenceClassification"),Stt.forEach(t),Z7o=r(i8e," (XLM-RoBERTa-XL model)"),i8e.forEach(t),e9o=i(N),tF=n(N,"LI",{});var d8e=s(tF);kce=n(d8e,"STRONG",{});var Rtt=s(kce);o9o=r(Rtt,"xlnet"),Rtt.forEach(t),r9o=r(d8e," \u2014 "),ND=n(d8e,"A",{href:!0});var Btt=s(ND);t9o=r(Btt,"XLNetForSequenceClassification"),Btt.forEach(t),a9o=r(d8e," (XLNet model)"),d8e.forEach(t),n9o=i(N),aF=n(N,"LI",{});var c8e=s(aF);Sce=n(c8e,"STRONG",{});var Ptt=s(Sce);s9o=r(Ptt,"yoso"),Ptt.forEach(t),l9o=r(c8e," \u2014 "),jD=n(c8e,"A",{href:!0});var Itt=s(jD);i9o=r(Itt,"YosoForSequenceClassification"),Itt.forEach(t),d9o=r(c8e," (YOSO model)"),c8e.forEach(t),N.forEach(t),c9o=i(aa),nF=n(aa,"P",{});var m8e=s(nF);m9o=r(m8e,"The model is set in evaluation mode by default using "),Rce=n(m8e,"CODE",{});var qtt=s(Rce);f9o=r(qtt,"model.eval()"),qtt.forEach(t),g9o=r(m8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=n(m8e,"CODE",{});var Ntt=s(Bce);h9o=r(Ntt,"model.train()"),Ntt.forEach(t),m8e.forEach(t),u9o=i(aa),T(sF.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),LPe=i(m),ji=n(m,"H2",{class:!0});var Sqe=s(ji);lF=n(Sqe,"A",{id:!0,class:!0,href:!0});var jtt=s(lF);Pce=n(jtt,"SPAN",{});var Dtt=s(Pce);T(Vy.$$.fragment,Dtt),Dtt.forEach(t),jtt.forEach(t),p9o=i(Sqe),Ice=n(Sqe,"SPAN",{});var Gtt=s(Ice);_9o=r(Gtt,"AutoModelForMultipleChoice"),Gtt.forEach(t),Sqe.forEach(t),xPe=i(m),Bo=n(m,"DIV",{class:!0});var zs=s(Bo);T(Xy.$$.fragment,zs),b9o=i(zs),Di=n(zs,"P",{});var oK=s(Di);F9o=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DD=n(oK,"A",{href:!0});var Ott=s(DD);v9o=r(Ott,"from_pretrained()"),Ott.forEach(t),T9o=r(oK," class method or the "),GD=n(oK,"A",{href:!0});var Vtt=s(GD);M9o=r(Vtt,"from_config()"),Vtt.forEach(t),E9o=r(oK,` class
method.`),oK.forEach(t),C9o=i(zs),zy=n(zs,"P",{});var Rqe=s(zy);w9o=r(Rqe,"This class cannot be instantiated directly using "),qce=n(Rqe,"CODE",{});var Xtt=s(qce);A9o=r(Xtt,"__init__()"),Xtt.forEach(t),y9o=r(Rqe," (throws an error)."),Rqe.forEach(t),L9o=i(zs),lt=n(zs,"DIV",{class:!0});var r0=s(lt);T(Qy.$$.fragment,r0),x9o=i(r0),Nce=n(r0,"P",{});var ztt=s(Nce);$9o=r(ztt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ztt.forEach(t),k9o=i(r0),Gi=n(r0,"P",{});var rK=s(Gi);S9o=r(rK,`Note:
Loading a model from its configuration file does `),jce=n(rK,"STRONG",{});var Qtt=s(jce);R9o=r(Qtt,"not"),Qtt.forEach(t),B9o=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(rK,"A",{href:!0});var Wtt=s(OD);P9o=r(Wtt,"from_pretrained()"),Wtt.forEach(t),I9o=r(rK," to load the model weights."),rK.forEach(t),q9o=i(r0),T(iF.$$.fragment,r0),r0.forEach(t),N9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Wy.$$.fragment,na),j9o=i(na),Dce=n(na,"P",{});var Htt=s(Dce);D9o=r(Htt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Htt.forEach(t),G9o=i(na),Sa=n(na,"P",{});var t0=s(Sa);O9o=r(t0,"The model class to instantiate is selected based on the "),Gce=n(t0,"CODE",{});var Utt=s(Gce);V9o=r(Utt,"model_type"),Utt.forEach(t),X9o=r(t0,` property of the config object (either
passed as an argument or loaded from `),Oce=n(t0,"CODE",{});var Jtt=s(Oce);z9o=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),Q9o=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(t0,"CODE",{});var Ytt=s(Vce);W9o=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),H9o=r(t0,":"),t0.forEach(t),U9o=i(na),Y=n(na,"UL",{});var K=s(Y);dF=n(K,"LI",{});var f8e=s(dF);Xce=n(f8e,"STRONG",{});var Ktt=s(Xce);J9o=r(Ktt,"albert"),Ktt.forEach(t),Y9o=r(f8e," \u2014 "),VD=n(f8e,"A",{href:!0});var Ztt=s(VD);K9o=r(Ztt,"AlbertForMultipleChoice"),Ztt.forEach(t),Z9o=r(f8e," (ALBERT model)"),f8e.forEach(t),e$o=i(K),cF=n(K,"LI",{});var g8e=s(cF);zce=n(g8e,"STRONG",{});var eat=s(zce);o$o=r(eat,"bert"),eat.forEach(t),r$o=r(g8e," \u2014 "),XD=n(g8e,"A",{href:!0});var oat=s(XD);t$o=r(oat,"BertForMultipleChoice"),oat.forEach(t),a$o=r(g8e," (BERT model)"),g8e.forEach(t),n$o=i(K),mF=n(K,"LI",{});var h8e=s(mF);Qce=n(h8e,"STRONG",{});var rat=s(Qce);s$o=r(rat,"big_bird"),rat.forEach(t),l$o=r(h8e," \u2014 "),zD=n(h8e,"A",{href:!0});var tat=s(zD);i$o=r(tat,"BigBirdForMultipleChoice"),tat.forEach(t),d$o=r(h8e," (BigBird model)"),h8e.forEach(t),c$o=i(K),fF=n(K,"LI",{});var u8e=s(fF);Wce=n(u8e,"STRONG",{});var aat=s(Wce);m$o=r(aat,"camembert"),aat.forEach(t),f$o=r(u8e," \u2014 "),QD=n(u8e,"A",{href:!0});var nat=s(QD);g$o=r(nat,"CamembertForMultipleChoice"),nat.forEach(t),h$o=r(u8e," (CamemBERT model)"),u8e.forEach(t),u$o=i(K),gF=n(K,"LI",{});var p8e=s(gF);Hce=n(p8e,"STRONG",{});var sat=s(Hce);p$o=r(sat,"canine"),sat.forEach(t),_$o=r(p8e," \u2014 "),WD=n(p8e,"A",{href:!0});var lat=s(WD);b$o=r(lat,"CanineForMultipleChoice"),lat.forEach(t),F$o=r(p8e," (Canine model)"),p8e.forEach(t),v$o=i(K),hF=n(K,"LI",{});var _8e=s(hF);Uce=n(_8e,"STRONG",{});var iat=s(Uce);T$o=r(iat,"convbert"),iat.forEach(t),M$o=r(_8e," \u2014 "),HD=n(_8e,"A",{href:!0});var dat=s(HD);E$o=r(dat,"ConvBertForMultipleChoice"),dat.forEach(t),C$o=r(_8e," (ConvBERT model)"),_8e.forEach(t),w$o=i(K),uF=n(K,"LI",{});var b8e=s(uF);Jce=n(b8e,"STRONG",{});var cat=s(Jce);A$o=r(cat,"data2vec-text"),cat.forEach(t),y$o=r(b8e," \u2014 "),UD=n(b8e,"A",{href:!0});var mat=s(UD);L$o=r(mat,"Data2VecTextForMultipleChoice"),mat.forEach(t),x$o=r(b8e," (Data2VecText model)"),b8e.forEach(t),$$o=i(K),pF=n(K,"LI",{});var F8e=s(pF);Yce=n(F8e,"STRONG",{});var fat=s(Yce);k$o=r(fat,"distilbert"),fat.forEach(t),S$o=r(F8e," \u2014 "),JD=n(F8e,"A",{href:!0});var gat=s(JD);R$o=r(gat,"DistilBertForMultipleChoice"),gat.forEach(t),B$o=r(F8e," (DistilBERT model)"),F8e.forEach(t),P$o=i(K),_F=n(K,"LI",{});var v8e=s(_F);Kce=n(v8e,"STRONG",{});var hat=s(Kce);I$o=r(hat,"electra"),hat.forEach(t),q$o=r(v8e," \u2014 "),YD=n(v8e,"A",{href:!0});var uat=s(YD);N$o=r(uat,"ElectraForMultipleChoice"),uat.forEach(t),j$o=r(v8e," (ELECTRA model)"),v8e.forEach(t),D$o=i(K),bF=n(K,"LI",{});var T8e=s(bF);Zce=n(T8e,"STRONG",{});var pat=s(Zce);G$o=r(pat,"flaubert"),pat.forEach(t),O$o=r(T8e," \u2014 "),KD=n(T8e,"A",{href:!0});var _at=s(KD);V$o=r(_at,"FlaubertForMultipleChoice"),_at.forEach(t),X$o=r(T8e," (FlauBERT model)"),T8e.forEach(t),z$o=i(K),FF=n(K,"LI",{});var M8e=s(FF);eme=n(M8e,"STRONG",{});var bat=s(eme);Q$o=r(bat,"fnet"),bat.forEach(t),W$o=r(M8e," \u2014 "),ZD=n(M8e,"A",{href:!0});var Fat=s(ZD);H$o=r(Fat,"FNetForMultipleChoice"),Fat.forEach(t),U$o=r(M8e," (FNet model)"),M8e.forEach(t),J$o=i(K),vF=n(K,"LI",{});var E8e=s(vF);ome=n(E8e,"STRONG",{});var vat=s(ome);Y$o=r(vat,"funnel"),vat.forEach(t),K$o=r(E8e," \u2014 "),eG=n(E8e,"A",{href:!0});var Tat=s(eG);Z$o=r(Tat,"FunnelForMultipleChoice"),Tat.forEach(t),eko=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),oko=i(K),TF=n(K,"LI",{});var C8e=s(TF);rme=n(C8e,"STRONG",{});var Mat=s(rme);rko=r(Mat,"ibert"),Mat.forEach(t),tko=r(C8e," \u2014 "),oG=n(C8e,"A",{href:!0});var Eat=s(oG);ako=r(Eat,"IBertForMultipleChoice"),Eat.forEach(t),nko=r(C8e," (I-BERT model)"),C8e.forEach(t),sko=i(K),MF=n(K,"LI",{});var w8e=s(MF);tme=n(w8e,"STRONG",{});var Cat=s(tme);lko=r(Cat,"longformer"),Cat.forEach(t),iko=r(w8e," \u2014 "),rG=n(w8e,"A",{href:!0});var wat=s(rG);dko=r(wat,"LongformerForMultipleChoice"),wat.forEach(t),cko=r(w8e," (Longformer model)"),w8e.forEach(t),mko=i(K),EF=n(K,"LI",{});var A8e=s(EF);ame=n(A8e,"STRONG",{});var Aat=s(ame);fko=r(Aat,"megatron-bert"),Aat.forEach(t),gko=r(A8e," \u2014 "),tG=n(A8e,"A",{href:!0});var yat=s(tG);hko=r(yat,"MegatronBertForMultipleChoice"),yat.forEach(t),uko=r(A8e," (MegatronBert model)"),A8e.forEach(t),pko=i(K),CF=n(K,"LI",{});var y8e=s(CF);nme=n(y8e,"STRONG",{});var Lat=s(nme);_ko=r(Lat,"mobilebert"),Lat.forEach(t),bko=r(y8e," \u2014 "),aG=n(y8e,"A",{href:!0});var xat=s(aG);Fko=r(xat,"MobileBertForMultipleChoice"),xat.forEach(t),vko=r(y8e," (MobileBERT model)"),y8e.forEach(t),Tko=i(K),wF=n(K,"LI",{});var L8e=s(wF);sme=n(L8e,"STRONG",{});var $at=s(sme);Mko=r($at,"mpnet"),$at.forEach(t),Eko=r(L8e," \u2014 "),nG=n(L8e,"A",{href:!0});var kat=s(nG);Cko=r(kat,"MPNetForMultipleChoice"),kat.forEach(t),wko=r(L8e," (MPNet model)"),L8e.forEach(t),Ako=i(K),AF=n(K,"LI",{});var x8e=s(AF);lme=n(x8e,"STRONG",{});var Sat=s(lme);yko=r(Sat,"nystromformer"),Sat.forEach(t),Lko=r(x8e," \u2014 "),sG=n(x8e,"A",{href:!0});var Rat=s(sG);xko=r(Rat,"NystromformerForMultipleChoice"),Rat.forEach(t),$ko=r(x8e," (Nystromformer model)"),x8e.forEach(t),kko=i(K),yF=n(K,"LI",{});var $8e=s(yF);ime=n($8e,"STRONG",{});var Bat=s(ime);Sko=r(Bat,"qdqbert"),Bat.forEach(t),Rko=r($8e," \u2014 "),lG=n($8e,"A",{href:!0});var Pat=s(lG);Bko=r(Pat,"QDQBertForMultipleChoice"),Pat.forEach(t),Pko=r($8e," (QDQBert model)"),$8e.forEach(t),Iko=i(K),LF=n(K,"LI",{});var k8e=s(LF);dme=n(k8e,"STRONG",{});var Iat=s(dme);qko=r(Iat,"rembert"),Iat.forEach(t),Nko=r(k8e," \u2014 "),iG=n(k8e,"A",{href:!0});var qat=s(iG);jko=r(qat,"RemBertForMultipleChoice"),qat.forEach(t),Dko=r(k8e," (RemBERT model)"),k8e.forEach(t),Gko=i(K),xF=n(K,"LI",{});var S8e=s(xF);cme=n(S8e,"STRONG",{});var Nat=s(cme);Oko=r(Nat,"roberta"),Nat.forEach(t),Vko=r(S8e," \u2014 "),dG=n(S8e,"A",{href:!0});var jat=s(dG);Xko=r(jat,"RobertaForMultipleChoice"),jat.forEach(t),zko=r(S8e," (RoBERTa model)"),S8e.forEach(t),Qko=i(K),$F=n(K,"LI",{});var R8e=s($F);mme=n(R8e,"STRONG",{});var Dat=s(mme);Wko=r(Dat,"roformer"),Dat.forEach(t),Hko=r(R8e," \u2014 "),cG=n(R8e,"A",{href:!0});var Gat=s(cG);Uko=r(Gat,"RoFormerForMultipleChoice"),Gat.forEach(t),Jko=r(R8e," (RoFormer model)"),R8e.forEach(t),Yko=i(K),kF=n(K,"LI",{});var B8e=s(kF);fme=n(B8e,"STRONG",{});var Oat=s(fme);Kko=r(Oat,"squeezebert"),Oat.forEach(t),Zko=r(B8e," \u2014 "),mG=n(B8e,"A",{href:!0});var Vat=s(mG);eSo=r(Vat,"SqueezeBertForMultipleChoice"),Vat.forEach(t),oSo=r(B8e," (SqueezeBERT model)"),B8e.forEach(t),rSo=i(K),SF=n(K,"LI",{});var P8e=s(SF);gme=n(P8e,"STRONG",{});var Xat=s(gme);tSo=r(Xat,"xlm"),Xat.forEach(t),aSo=r(P8e," \u2014 "),fG=n(P8e,"A",{href:!0});var zat=s(fG);nSo=r(zat,"XLMForMultipleChoice"),zat.forEach(t),sSo=r(P8e," (XLM model)"),P8e.forEach(t),lSo=i(K),RF=n(K,"LI",{});var I8e=s(RF);hme=n(I8e,"STRONG",{});var Qat=s(hme);iSo=r(Qat,"xlm-roberta"),Qat.forEach(t),dSo=r(I8e," \u2014 "),gG=n(I8e,"A",{href:!0});var Wat=s(gG);cSo=r(Wat,"XLMRobertaForMultipleChoice"),Wat.forEach(t),mSo=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),fSo=i(K),BF=n(K,"LI",{});var q8e=s(BF);ume=n(q8e,"STRONG",{});var Hat=s(ume);gSo=r(Hat,"xlm-roberta-xl"),Hat.forEach(t),hSo=r(q8e," \u2014 "),hG=n(q8e,"A",{href:!0});var Uat=s(hG);uSo=r(Uat,"XLMRobertaXLForMultipleChoice"),Uat.forEach(t),pSo=r(q8e," (XLM-RoBERTa-XL model)"),q8e.forEach(t),_So=i(K),PF=n(K,"LI",{});var N8e=s(PF);pme=n(N8e,"STRONG",{});var Jat=s(pme);bSo=r(Jat,"xlnet"),Jat.forEach(t),FSo=r(N8e," \u2014 "),uG=n(N8e,"A",{href:!0});var Yat=s(uG);vSo=r(Yat,"XLNetForMultipleChoice"),Yat.forEach(t),TSo=r(N8e," (XLNet model)"),N8e.forEach(t),MSo=i(K),IF=n(K,"LI",{});var j8e=s(IF);_me=n(j8e,"STRONG",{});var Kat=s(_me);ESo=r(Kat,"yoso"),Kat.forEach(t),CSo=r(j8e," \u2014 "),pG=n(j8e,"A",{href:!0});var Zat=s(pG);wSo=r(Zat,"YosoForMultipleChoice"),Zat.forEach(t),ASo=r(j8e," (YOSO model)"),j8e.forEach(t),K.forEach(t),ySo=i(na),qF=n(na,"P",{});var D8e=s(qF);LSo=r(D8e,"The model is set in evaluation mode by default using "),bme=n(D8e,"CODE",{});var ent=s(bme);xSo=r(ent,"model.eval()"),ent.forEach(t),$So=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(D8e,"CODE",{});var ont=s(Fme);kSo=r(ont,"model.train()"),ont.forEach(t),D8e.forEach(t),SSo=i(na),T(NF.$$.fragment,na),na.forEach(t),zs.forEach(t),$Pe=i(m),Oi=n(m,"H2",{class:!0});var Bqe=s(Oi);jF=n(Bqe,"A",{id:!0,class:!0,href:!0});var rnt=s(jF);vme=n(rnt,"SPAN",{});var tnt=s(vme);T(Hy.$$.fragment,tnt),tnt.forEach(t),rnt.forEach(t),RSo=i(Bqe),Tme=n(Bqe,"SPAN",{});var ant=s(Tme);BSo=r(ant,"AutoModelForNextSentencePrediction"),ant.forEach(t),Bqe.forEach(t),kPe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(Uy.$$.fragment,Qs),PSo=i(Qs),Vi=n(Qs,"P",{});var tK=s(Vi);ISo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_G=n(tK,"A",{href:!0});var nnt=s(_G);qSo=r(nnt,"from_pretrained()"),nnt.forEach(t),NSo=r(tK," class method or the "),bG=n(tK,"A",{href:!0});var snt=s(bG);jSo=r(snt,"from_config()"),snt.forEach(t),DSo=r(tK,` class
method.`),tK.forEach(t),GSo=i(Qs),Jy=n(Qs,"P",{});var Pqe=s(Jy);OSo=r(Pqe,"This class cannot be instantiated directly using "),Mme=n(Pqe,"CODE",{});var lnt=s(Mme);VSo=r(lnt,"__init__()"),lnt.forEach(t),XSo=r(Pqe," (throws an error)."),Pqe.forEach(t),zSo=i(Qs),it=n(Qs,"DIV",{class:!0});var a0=s(it);T(Yy.$$.fragment,a0),QSo=i(a0),Eme=n(a0,"P",{});var int=s(Eme);WSo=r(int,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),int.forEach(t),HSo=i(a0),Xi=n(a0,"P",{});var aK=s(Xi);USo=r(aK,`Note:
Loading a model from its configuration file does `),Cme=n(aK,"STRONG",{});var dnt=s(Cme);JSo=r(dnt,"not"),dnt.forEach(t),YSo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(aK,"A",{href:!0});var cnt=s(FG);KSo=r(cnt,"from_pretrained()"),cnt.forEach(t),ZSo=r(aK," to load the model weights."),aK.forEach(t),eRo=i(a0),T(DF.$$.fragment,a0),a0.forEach(t),oRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Ky.$$.fragment,sa),rRo=i(sa),wme=n(sa,"P",{});var mnt=s(wme);tRo=r(mnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mnt.forEach(t),aRo=i(sa),Ra=n(sa,"P",{});var n0=s(Ra);nRo=r(n0,"The model class to instantiate is selected based on the "),Ame=n(n0,"CODE",{});var fnt=s(Ame);sRo=r(fnt,"model_type"),fnt.forEach(t),lRo=r(n0,` property of the config object (either
passed as an argument or loaded from `),yme=n(n0,"CODE",{});var gnt=s(yme);iRo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),dRo=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n(n0,"CODE",{});var hnt=s(Lme);cRo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),mRo=r(n0,":"),n0.forEach(t),fRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);GF=n(Ws,"LI",{});var G8e=s(GF);xme=n(G8e,"STRONG",{});var unt=s(xme);gRo=r(unt,"bert"),unt.forEach(t),hRo=r(G8e," \u2014 "),vG=n(G8e,"A",{href:!0});var pnt=s(vG);uRo=r(pnt,"BertForNextSentencePrediction"),pnt.forEach(t),pRo=r(G8e," (BERT model)"),G8e.forEach(t),_Ro=i(Ws),OF=n(Ws,"LI",{});var O8e=s(OF);$me=n(O8e,"STRONG",{});var _nt=s($me);bRo=r(_nt,"fnet"),_nt.forEach(t),FRo=r(O8e," \u2014 "),TG=n(O8e,"A",{href:!0});var bnt=s(TG);vRo=r(bnt,"FNetForNextSentencePrediction"),bnt.forEach(t),TRo=r(O8e," (FNet model)"),O8e.forEach(t),MRo=i(Ws),VF=n(Ws,"LI",{});var V8e=s(VF);kme=n(V8e,"STRONG",{});var Fnt=s(kme);ERo=r(Fnt,"megatron-bert"),Fnt.forEach(t),CRo=r(V8e," \u2014 "),MG=n(V8e,"A",{href:!0});var vnt=s(MG);wRo=r(vnt,"MegatronBertForNextSentencePrediction"),vnt.forEach(t),ARo=r(V8e," (MegatronBert model)"),V8e.forEach(t),yRo=i(Ws),XF=n(Ws,"LI",{});var X8e=s(XF);Sme=n(X8e,"STRONG",{});var Tnt=s(Sme);LRo=r(Tnt,"mobilebert"),Tnt.forEach(t),xRo=r(X8e," \u2014 "),EG=n(X8e,"A",{href:!0});var Mnt=s(EG);$Ro=r(Mnt,"MobileBertForNextSentencePrediction"),Mnt.forEach(t),kRo=r(X8e," (MobileBERT model)"),X8e.forEach(t),SRo=i(Ws),zF=n(Ws,"LI",{});var z8e=s(zF);Rme=n(z8e,"STRONG",{});var Ent=s(Rme);RRo=r(Ent,"qdqbert"),Ent.forEach(t),BRo=r(z8e," \u2014 "),CG=n(z8e,"A",{href:!0});var Cnt=s(CG);PRo=r(Cnt,"QDQBertForNextSentencePrediction"),Cnt.forEach(t),IRo=r(z8e," (QDQBert model)"),z8e.forEach(t),Ws.forEach(t),qRo=i(sa),QF=n(sa,"P",{});var Q8e=s(QF);NRo=r(Q8e,"The model is set in evaluation mode by default using "),Bme=n(Q8e,"CODE",{});var wnt=s(Bme);jRo=r(wnt,"model.eval()"),wnt.forEach(t),DRo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(Q8e,"CODE",{});var Ant=s(Pme);GRo=r(Ant,"model.train()"),Ant.forEach(t),Q8e.forEach(t),ORo=i(sa),T(WF.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),SPe=i(m),zi=n(m,"H2",{class:!0});var Iqe=s(zi);HF=n(Iqe,"A",{id:!0,class:!0,href:!0});var ynt=s(HF);Ime=n(ynt,"SPAN",{});var Lnt=s(Ime);T(Zy.$$.fragment,Lnt),Lnt.forEach(t),ynt.forEach(t),VRo=i(Iqe),qme=n(Iqe,"SPAN",{});var xnt=s(qme);XRo=r(xnt,"AutoModelForTokenClassification"),xnt.forEach(t),Iqe.forEach(t),RPe=i(m),Io=n(m,"DIV",{class:!0});var Hs=s(Io);T(eL.$$.fragment,Hs),zRo=i(Hs),Qi=n(Hs,"P",{});var nK=s(Qi);QRo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wG=n(nK,"A",{href:!0});var $nt=s(wG);WRo=r($nt,"from_pretrained()"),$nt.forEach(t),HRo=r(nK," class method or the "),AG=n(nK,"A",{href:!0});var knt=s(AG);URo=r(knt,"from_config()"),knt.forEach(t),JRo=r(nK,` class
method.`),nK.forEach(t),YRo=i(Hs),oL=n(Hs,"P",{});var qqe=s(oL);KRo=r(qqe,"This class cannot be instantiated directly using "),Nme=n(qqe,"CODE",{});var Snt=s(Nme);ZRo=r(Snt,"__init__()"),Snt.forEach(t),eBo=r(qqe," (throws an error)."),qqe.forEach(t),oBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var s0=s(dt);T(rL.$$.fragment,s0),rBo=i(s0),jme=n(s0,"P",{});var Rnt=s(jme);tBo=r(Rnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rnt.forEach(t),aBo=i(s0),Wi=n(s0,"P",{});var sK=s(Wi);nBo=r(sK,`Note:
Loading a model from its configuration file does `),Dme=n(sK,"STRONG",{});var Bnt=s(Dme);sBo=r(Bnt,"not"),Bnt.forEach(t),lBo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(sK,"A",{href:!0});var Pnt=s(yG);iBo=r(Pnt,"from_pretrained()"),Pnt.forEach(t),dBo=r(sK," to load the model weights."),sK.forEach(t),cBo=i(s0),T(UF.$$.fragment,s0),s0.forEach(t),mBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(tL.$$.fragment,la),fBo=i(la),Gme=n(la,"P",{});var Int=s(Gme);gBo=r(Int,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Int.forEach(t),hBo=i(la),Ba=n(la,"P",{});var l0=s(Ba);uBo=r(l0,"The model class to instantiate is selected based on the "),Ome=n(l0,"CODE",{});var qnt=s(Ome);pBo=r(qnt,"model_type"),qnt.forEach(t),_Bo=r(l0,` property of the config object (either
passed as an argument or loaded from `),Vme=n(l0,"CODE",{});var Nnt=s(Vme);bBo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),FBo=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(l0,"CODE",{});var jnt=s(Xme);vBo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),TBo=r(l0,":"),l0.forEach(t),MBo=i(la),U=n(la,"UL",{});var J=s(U);JF=n(J,"LI",{});var W8e=s(JF);zme=n(W8e,"STRONG",{});var Dnt=s(zme);EBo=r(Dnt,"albert"),Dnt.forEach(t),CBo=r(W8e," \u2014 "),LG=n(W8e,"A",{href:!0});var Gnt=s(LG);wBo=r(Gnt,"AlbertForTokenClassification"),Gnt.forEach(t),ABo=r(W8e," (ALBERT model)"),W8e.forEach(t),yBo=i(J),YF=n(J,"LI",{});var H8e=s(YF);Qme=n(H8e,"STRONG",{});var Ont=s(Qme);LBo=r(Ont,"bert"),Ont.forEach(t),xBo=r(H8e," \u2014 "),xG=n(H8e,"A",{href:!0});var Vnt=s(xG);$Bo=r(Vnt,"BertForTokenClassification"),Vnt.forEach(t),kBo=r(H8e," (BERT model)"),H8e.forEach(t),SBo=i(J),KF=n(J,"LI",{});var U8e=s(KF);Wme=n(U8e,"STRONG",{});var Xnt=s(Wme);RBo=r(Xnt,"big_bird"),Xnt.forEach(t),BBo=r(U8e," \u2014 "),$G=n(U8e,"A",{href:!0});var znt=s($G);PBo=r(znt,"BigBirdForTokenClassification"),znt.forEach(t),IBo=r(U8e," (BigBird model)"),U8e.forEach(t),qBo=i(J),ZF=n(J,"LI",{});var J8e=s(ZF);Hme=n(J8e,"STRONG",{});var Qnt=s(Hme);NBo=r(Qnt,"camembert"),Qnt.forEach(t),jBo=r(J8e," \u2014 "),kG=n(J8e,"A",{href:!0});var Wnt=s(kG);DBo=r(Wnt,"CamembertForTokenClassification"),Wnt.forEach(t),GBo=r(J8e," (CamemBERT model)"),J8e.forEach(t),OBo=i(J),ev=n(J,"LI",{});var Y8e=s(ev);Ume=n(Y8e,"STRONG",{});var Hnt=s(Ume);VBo=r(Hnt,"canine"),Hnt.forEach(t),XBo=r(Y8e," \u2014 "),SG=n(Y8e,"A",{href:!0});var Unt=s(SG);zBo=r(Unt,"CanineForTokenClassification"),Unt.forEach(t),QBo=r(Y8e," (Canine model)"),Y8e.forEach(t),WBo=i(J),ov=n(J,"LI",{});var K8e=s(ov);Jme=n(K8e,"STRONG",{});var Jnt=s(Jme);HBo=r(Jnt,"convbert"),Jnt.forEach(t),UBo=r(K8e," \u2014 "),RG=n(K8e,"A",{href:!0});var Ynt=s(RG);JBo=r(Ynt,"ConvBertForTokenClassification"),Ynt.forEach(t),YBo=r(K8e," (ConvBERT model)"),K8e.forEach(t),KBo=i(J),rv=n(J,"LI",{});var Z8e=s(rv);Yme=n(Z8e,"STRONG",{});var Knt=s(Yme);ZBo=r(Knt,"data2vec-text"),Knt.forEach(t),ePo=r(Z8e," \u2014 "),BG=n(Z8e,"A",{href:!0});var Znt=s(BG);oPo=r(Znt,"Data2VecTextForTokenClassification"),Znt.forEach(t),rPo=r(Z8e," (Data2VecText model)"),Z8e.forEach(t),tPo=i(J),tv=n(J,"LI",{});var exe=s(tv);Kme=n(exe,"STRONG",{});var est=s(Kme);aPo=r(est,"deberta"),est.forEach(t),nPo=r(exe," \u2014 "),PG=n(exe,"A",{href:!0});var ost=s(PG);sPo=r(ost,"DebertaForTokenClassification"),ost.forEach(t),lPo=r(exe," (DeBERTa model)"),exe.forEach(t),iPo=i(J),av=n(J,"LI",{});var oxe=s(av);Zme=n(oxe,"STRONG",{});var rst=s(Zme);dPo=r(rst,"deberta-v2"),rst.forEach(t),cPo=r(oxe," \u2014 "),IG=n(oxe,"A",{href:!0});var tst=s(IG);mPo=r(tst,"DebertaV2ForTokenClassification"),tst.forEach(t),fPo=r(oxe," (DeBERTa-v2 model)"),oxe.forEach(t),gPo=i(J),nv=n(J,"LI",{});var rxe=s(nv);efe=n(rxe,"STRONG",{});var ast=s(efe);hPo=r(ast,"distilbert"),ast.forEach(t),uPo=r(rxe," \u2014 "),qG=n(rxe,"A",{href:!0});var nst=s(qG);pPo=r(nst,"DistilBertForTokenClassification"),nst.forEach(t),_Po=r(rxe," (DistilBERT model)"),rxe.forEach(t),bPo=i(J),sv=n(J,"LI",{});var txe=s(sv);ofe=n(txe,"STRONG",{});var sst=s(ofe);FPo=r(sst,"electra"),sst.forEach(t),vPo=r(txe," \u2014 "),NG=n(txe,"A",{href:!0});var lst=s(NG);TPo=r(lst,"ElectraForTokenClassification"),lst.forEach(t),MPo=r(txe," (ELECTRA model)"),txe.forEach(t),EPo=i(J),lv=n(J,"LI",{});var axe=s(lv);rfe=n(axe,"STRONG",{});var ist=s(rfe);CPo=r(ist,"flaubert"),ist.forEach(t),wPo=r(axe," \u2014 "),jG=n(axe,"A",{href:!0});var dst=s(jG);APo=r(dst,"FlaubertForTokenClassification"),dst.forEach(t),yPo=r(axe," (FlauBERT model)"),axe.forEach(t),LPo=i(J),iv=n(J,"LI",{});var nxe=s(iv);tfe=n(nxe,"STRONG",{});var cst=s(tfe);xPo=r(cst,"fnet"),cst.forEach(t),$Po=r(nxe," \u2014 "),DG=n(nxe,"A",{href:!0});var mst=s(DG);kPo=r(mst,"FNetForTokenClassification"),mst.forEach(t),SPo=r(nxe," (FNet model)"),nxe.forEach(t),RPo=i(J),dv=n(J,"LI",{});var sxe=s(dv);afe=n(sxe,"STRONG",{});var fst=s(afe);BPo=r(fst,"funnel"),fst.forEach(t),PPo=r(sxe," \u2014 "),GG=n(sxe,"A",{href:!0});var gst=s(GG);IPo=r(gst,"FunnelForTokenClassification"),gst.forEach(t),qPo=r(sxe," (Funnel Transformer model)"),sxe.forEach(t),NPo=i(J),cv=n(J,"LI",{});var lxe=s(cv);nfe=n(lxe,"STRONG",{});var hst=s(nfe);jPo=r(hst,"gpt2"),hst.forEach(t),DPo=r(lxe," \u2014 "),OG=n(lxe,"A",{href:!0});var ust=s(OG);GPo=r(ust,"GPT2ForTokenClassification"),ust.forEach(t),OPo=r(lxe," (OpenAI GPT-2 model)"),lxe.forEach(t),VPo=i(J),mv=n(J,"LI",{});var ixe=s(mv);sfe=n(ixe,"STRONG",{});var pst=s(sfe);XPo=r(pst,"ibert"),pst.forEach(t),zPo=r(ixe," \u2014 "),VG=n(ixe,"A",{href:!0});var _st=s(VG);QPo=r(_st,"IBertForTokenClassification"),_st.forEach(t),WPo=r(ixe," (I-BERT model)"),ixe.forEach(t),HPo=i(J),fv=n(J,"LI",{});var dxe=s(fv);lfe=n(dxe,"STRONG",{});var bst=s(lfe);UPo=r(bst,"layoutlm"),bst.forEach(t),JPo=r(dxe," \u2014 "),XG=n(dxe,"A",{href:!0});var Fst=s(XG);YPo=r(Fst,"LayoutLMForTokenClassification"),Fst.forEach(t),KPo=r(dxe," (LayoutLM model)"),dxe.forEach(t),ZPo=i(J),gv=n(J,"LI",{});var cxe=s(gv);ife=n(cxe,"STRONG",{});var vst=s(ife);eIo=r(vst,"layoutlmv2"),vst.forEach(t),oIo=r(cxe," \u2014 "),zG=n(cxe,"A",{href:!0});var Tst=s(zG);rIo=r(Tst,"LayoutLMv2ForTokenClassification"),Tst.forEach(t),tIo=r(cxe," (LayoutLMv2 model)"),cxe.forEach(t),aIo=i(J),hv=n(J,"LI",{});var mxe=s(hv);dfe=n(mxe,"STRONG",{});var Mst=s(dfe);nIo=r(Mst,"longformer"),Mst.forEach(t),sIo=r(mxe," \u2014 "),QG=n(mxe,"A",{href:!0});var Est=s(QG);lIo=r(Est,"LongformerForTokenClassification"),Est.forEach(t),iIo=r(mxe," (Longformer model)"),mxe.forEach(t),dIo=i(J),uv=n(J,"LI",{});var fxe=s(uv);cfe=n(fxe,"STRONG",{});var Cst=s(cfe);cIo=r(Cst,"megatron-bert"),Cst.forEach(t),mIo=r(fxe," \u2014 "),WG=n(fxe,"A",{href:!0});var wst=s(WG);fIo=r(wst,"MegatronBertForTokenClassification"),wst.forEach(t),gIo=r(fxe," (MegatronBert model)"),fxe.forEach(t),hIo=i(J),pv=n(J,"LI",{});var gxe=s(pv);mfe=n(gxe,"STRONG",{});var Ast=s(mfe);uIo=r(Ast,"mobilebert"),Ast.forEach(t),pIo=r(gxe," \u2014 "),HG=n(gxe,"A",{href:!0});var yst=s(HG);_Io=r(yst,"MobileBertForTokenClassification"),yst.forEach(t),bIo=r(gxe," (MobileBERT model)"),gxe.forEach(t),FIo=i(J),_v=n(J,"LI",{});var hxe=s(_v);ffe=n(hxe,"STRONG",{});var Lst=s(ffe);vIo=r(Lst,"mpnet"),Lst.forEach(t),TIo=r(hxe," \u2014 "),UG=n(hxe,"A",{href:!0});var xst=s(UG);MIo=r(xst,"MPNetForTokenClassification"),xst.forEach(t),EIo=r(hxe," (MPNet model)"),hxe.forEach(t),CIo=i(J),bv=n(J,"LI",{});var uxe=s(bv);gfe=n(uxe,"STRONG",{});var $st=s(gfe);wIo=r($st,"nystromformer"),$st.forEach(t),AIo=r(uxe," \u2014 "),JG=n(uxe,"A",{href:!0});var kst=s(JG);yIo=r(kst,"NystromformerForTokenClassification"),kst.forEach(t),LIo=r(uxe," (Nystromformer model)"),uxe.forEach(t),xIo=i(J),Fv=n(J,"LI",{});var pxe=s(Fv);hfe=n(pxe,"STRONG",{});var Sst=s(hfe);$Io=r(Sst,"qdqbert"),Sst.forEach(t),kIo=r(pxe," \u2014 "),YG=n(pxe,"A",{href:!0});var Rst=s(YG);SIo=r(Rst,"QDQBertForTokenClassification"),Rst.forEach(t),RIo=r(pxe," (QDQBert model)"),pxe.forEach(t),BIo=i(J),vv=n(J,"LI",{});var _xe=s(vv);ufe=n(_xe,"STRONG",{});var Bst=s(ufe);PIo=r(Bst,"rembert"),Bst.forEach(t),IIo=r(_xe," \u2014 "),KG=n(_xe,"A",{href:!0});var Pst=s(KG);qIo=r(Pst,"RemBertForTokenClassification"),Pst.forEach(t),NIo=r(_xe," (RemBERT model)"),_xe.forEach(t),jIo=i(J),Tv=n(J,"LI",{});var bxe=s(Tv);pfe=n(bxe,"STRONG",{});var Ist=s(pfe);DIo=r(Ist,"roberta"),Ist.forEach(t),GIo=r(bxe," \u2014 "),ZG=n(bxe,"A",{href:!0});var qst=s(ZG);OIo=r(qst,"RobertaForTokenClassification"),qst.forEach(t),VIo=r(bxe," (RoBERTa model)"),bxe.forEach(t),XIo=i(J),Mv=n(J,"LI",{});var Fxe=s(Mv);_fe=n(Fxe,"STRONG",{});var Nst=s(_fe);zIo=r(Nst,"roformer"),Nst.forEach(t),QIo=r(Fxe," \u2014 "),eO=n(Fxe,"A",{href:!0});var jst=s(eO);WIo=r(jst,"RoFormerForTokenClassification"),jst.forEach(t),HIo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),UIo=i(J),Ev=n(J,"LI",{});var vxe=s(Ev);bfe=n(vxe,"STRONG",{});var Dst=s(bfe);JIo=r(Dst,"squeezebert"),Dst.forEach(t),YIo=r(vxe," \u2014 "),oO=n(vxe,"A",{href:!0});var Gst=s(oO);KIo=r(Gst,"SqueezeBertForTokenClassification"),Gst.forEach(t),ZIo=r(vxe," (SqueezeBERT model)"),vxe.forEach(t),eqo=i(J),Cv=n(J,"LI",{});var Txe=s(Cv);Ffe=n(Txe,"STRONG",{});var Ost=s(Ffe);oqo=r(Ost,"xlm"),Ost.forEach(t),rqo=r(Txe," \u2014 "),rO=n(Txe,"A",{href:!0});var Vst=s(rO);tqo=r(Vst,"XLMForTokenClassification"),Vst.forEach(t),aqo=r(Txe," (XLM model)"),Txe.forEach(t),nqo=i(J),wv=n(J,"LI",{});var Mxe=s(wv);vfe=n(Mxe,"STRONG",{});var Xst=s(vfe);sqo=r(Xst,"xlm-roberta"),Xst.forEach(t),lqo=r(Mxe," \u2014 "),tO=n(Mxe,"A",{href:!0});var zst=s(tO);iqo=r(zst,"XLMRobertaForTokenClassification"),zst.forEach(t),dqo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),cqo=i(J),Av=n(J,"LI",{});var Exe=s(Av);Tfe=n(Exe,"STRONG",{});var Qst=s(Tfe);mqo=r(Qst,"xlm-roberta-xl"),Qst.forEach(t),fqo=r(Exe," \u2014 "),aO=n(Exe,"A",{href:!0});var Wst=s(aO);gqo=r(Wst,"XLMRobertaXLForTokenClassification"),Wst.forEach(t),hqo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),uqo=i(J),yv=n(J,"LI",{});var Cxe=s(yv);Mfe=n(Cxe,"STRONG",{});var Hst=s(Mfe);pqo=r(Hst,"xlnet"),Hst.forEach(t),_qo=r(Cxe," \u2014 "),nO=n(Cxe,"A",{href:!0});var Ust=s(nO);bqo=r(Ust,"XLNetForTokenClassification"),Ust.forEach(t),Fqo=r(Cxe," (XLNet model)"),Cxe.forEach(t),vqo=i(J),Lv=n(J,"LI",{});var wxe=s(Lv);Efe=n(wxe,"STRONG",{});var Jst=s(Efe);Tqo=r(Jst,"yoso"),Jst.forEach(t),Mqo=r(wxe," \u2014 "),sO=n(wxe,"A",{href:!0});var Yst=s(sO);Eqo=r(Yst,"YosoForTokenClassification"),Yst.forEach(t),Cqo=r(wxe," (YOSO model)"),wxe.forEach(t),J.forEach(t),wqo=i(la),xv=n(la,"P",{});var Axe=s(xv);Aqo=r(Axe,"The model is set in evaluation mode by default using "),Cfe=n(Axe,"CODE",{});var Kst=s(Cfe);yqo=r(Kst,"model.eval()"),Kst.forEach(t),Lqo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(Axe,"CODE",{});var Zst=s(wfe);xqo=r(Zst,"model.train()"),Zst.forEach(t),Axe.forEach(t),$qo=i(la),T($v.$$.fragment,la),la.forEach(t),Hs.forEach(t),BPe=i(m),Hi=n(m,"H2",{class:!0});var Nqe=s(Hi);kv=n(Nqe,"A",{id:!0,class:!0,href:!0});var elt=s(kv);Afe=n(elt,"SPAN",{});var olt=s(Afe);T(aL.$$.fragment,olt),olt.forEach(t),elt.forEach(t),kqo=i(Nqe),yfe=n(Nqe,"SPAN",{});var rlt=s(yfe);Sqo=r(rlt,"AutoModelForQuestionAnswering"),rlt.forEach(t),Nqe.forEach(t),PPe=i(m),qo=n(m,"DIV",{class:!0});var Us=s(qo);T(nL.$$.fragment,Us),Rqo=i(Us),Ui=n(Us,"P",{});var lK=s(Ui);Bqo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lO=n(lK,"A",{href:!0});var tlt=s(lO);Pqo=r(tlt,"from_pretrained()"),tlt.forEach(t),Iqo=r(lK," class method or the "),iO=n(lK,"A",{href:!0});var alt=s(iO);qqo=r(alt,"from_config()"),alt.forEach(t),Nqo=r(lK,` class
method.`),lK.forEach(t),jqo=i(Us),sL=n(Us,"P",{});var jqe=s(sL);Dqo=r(jqe,"This class cannot be instantiated directly using "),Lfe=n(jqe,"CODE",{});var nlt=s(Lfe);Gqo=r(nlt,"__init__()"),nlt.forEach(t),Oqo=r(jqe," (throws an error)."),jqe.forEach(t),Vqo=i(Us),ct=n(Us,"DIV",{class:!0});var i0=s(ct);T(lL.$$.fragment,i0),Xqo=i(i0),xfe=n(i0,"P",{});var slt=s(xfe);zqo=r(slt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),slt.forEach(t),Qqo=i(i0),Ji=n(i0,"P",{});var iK=s(Ji);Wqo=r(iK,`Note:
Loading a model from its configuration file does `),$fe=n(iK,"STRONG",{});var llt=s($fe);Hqo=r(llt,"not"),llt.forEach(t),Uqo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=n(iK,"A",{href:!0});var ilt=s(dO);Jqo=r(ilt,"from_pretrained()"),ilt.forEach(t),Yqo=r(iK," to load the model weights."),iK.forEach(t),Kqo=i(i0),T(Sv.$$.fragment,i0),i0.forEach(t),Zqo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(iL.$$.fragment,ia),eNo=i(ia),kfe=n(ia,"P",{});var dlt=s(kfe);oNo=r(dlt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dlt.forEach(t),rNo=i(ia),Pa=n(ia,"P",{});var d0=s(Pa);tNo=r(d0,"The model class to instantiate is selected based on the "),Sfe=n(d0,"CODE",{});var clt=s(Sfe);aNo=r(clt,"model_type"),clt.forEach(t),nNo=r(d0,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(d0,"CODE",{});var mlt=s(Rfe);sNo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),lNo=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(d0,"CODE",{});var flt=s(Bfe);iNo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),dNo=r(d0,":"),d0.forEach(t),cNo=i(ia),O=n(ia,"UL",{});var X=s(O);Rv=n(X,"LI",{});var yxe=s(Rv);Pfe=n(yxe,"STRONG",{});var glt=s(Pfe);mNo=r(glt,"albert"),glt.forEach(t),fNo=r(yxe," \u2014 "),cO=n(yxe,"A",{href:!0});var hlt=s(cO);gNo=r(hlt,"AlbertForQuestionAnswering"),hlt.forEach(t),hNo=r(yxe," (ALBERT model)"),yxe.forEach(t),uNo=i(X),Bv=n(X,"LI",{});var Lxe=s(Bv);Ife=n(Lxe,"STRONG",{});var ult=s(Ife);pNo=r(ult,"bart"),ult.forEach(t),_No=r(Lxe," \u2014 "),mO=n(Lxe,"A",{href:!0});var plt=s(mO);bNo=r(plt,"BartForQuestionAnswering"),plt.forEach(t),FNo=r(Lxe," (BART model)"),Lxe.forEach(t),vNo=i(X),Pv=n(X,"LI",{});var xxe=s(Pv);qfe=n(xxe,"STRONG",{});var _lt=s(qfe);TNo=r(_lt,"bert"),_lt.forEach(t),MNo=r(xxe," \u2014 "),fO=n(xxe,"A",{href:!0});var blt=s(fO);ENo=r(blt,"BertForQuestionAnswering"),blt.forEach(t),CNo=r(xxe," (BERT model)"),xxe.forEach(t),wNo=i(X),Iv=n(X,"LI",{});var $xe=s(Iv);Nfe=n($xe,"STRONG",{});var Flt=s(Nfe);ANo=r(Flt,"big_bird"),Flt.forEach(t),yNo=r($xe," \u2014 "),gO=n($xe,"A",{href:!0});var vlt=s(gO);LNo=r(vlt,"BigBirdForQuestionAnswering"),vlt.forEach(t),xNo=r($xe," (BigBird model)"),$xe.forEach(t),$No=i(X),qv=n(X,"LI",{});var kxe=s(qv);jfe=n(kxe,"STRONG",{});var Tlt=s(jfe);kNo=r(Tlt,"bigbird_pegasus"),Tlt.forEach(t),SNo=r(kxe," \u2014 "),hO=n(kxe,"A",{href:!0});var Mlt=s(hO);RNo=r(Mlt,"BigBirdPegasusForQuestionAnswering"),Mlt.forEach(t),BNo=r(kxe," (BigBirdPegasus model)"),kxe.forEach(t),PNo=i(X),Nv=n(X,"LI",{});var Sxe=s(Nv);Dfe=n(Sxe,"STRONG",{});var Elt=s(Dfe);INo=r(Elt,"camembert"),Elt.forEach(t),qNo=r(Sxe," \u2014 "),uO=n(Sxe,"A",{href:!0});var Clt=s(uO);NNo=r(Clt,"CamembertForQuestionAnswering"),Clt.forEach(t),jNo=r(Sxe," (CamemBERT model)"),Sxe.forEach(t),DNo=i(X),jv=n(X,"LI",{});var Rxe=s(jv);Gfe=n(Rxe,"STRONG",{});var wlt=s(Gfe);GNo=r(wlt,"canine"),wlt.forEach(t),ONo=r(Rxe," \u2014 "),pO=n(Rxe,"A",{href:!0});var Alt=s(pO);VNo=r(Alt,"CanineForQuestionAnswering"),Alt.forEach(t),XNo=r(Rxe," (Canine model)"),Rxe.forEach(t),zNo=i(X),Dv=n(X,"LI",{});var Bxe=s(Dv);Ofe=n(Bxe,"STRONG",{});var ylt=s(Ofe);QNo=r(ylt,"convbert"),ylt.forEach(t),WNo=r(Bxe," \u2014 "),_O=n(Bxe,"A",{href:!0});var Llt=s(_O);HNo=r(Llt,"ConvBertForQuestionAnswering"),Llt.forEach(t),UNo=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),JNo=i(X),Gv=n(X,"LI",{});var Pxe=s(Gv);Vfe=n(Pxe,"STRONG",{});var xlt=s(Vfe);YNo=r(xlt,"data2vec-text"),xlt.forEach(t),KNo=r(Pxe," \u2014 "),bO=n(Pxe,"A",{href:!0});var $lt=s(bO);ZNo=r($lt,"Data2VecTextForQuestionAnswering"),$lt.forEach(t),ejo=r(Pxe," (Data2VecText model)"),Pxe.forEach(t),ojo=i(X),Ov=n(X,"LI",{});var Ixe=s(Ov);Xfe=n(Ixe,"STRONG",{});var klt=s(Xfe);rjo=r(klt,"deberta"),klt.forEach(t),tjo=r(Ixe," \u2014 "),FO=n(Ixe,"A",{href:!0});var Slt=s(FO);ajo=r(Slt,"DebertaForQuestionAnswering"),Slt.forEach(t),njo=r(Ixe," (DeBERTa model)"),Ixe.forEach(t),sjo=i(X),Vv=n(X,"LI",{});var qxe=s(Vv);zfe=n(qxe,"STRONG",{});var Rlt=s(zfe);ljo=r(Rlt,"deberta-v2"),Rlt.forEach(t),ijo=r(qxe," \u2014 "),vO=n(qxe,"A",{href:!0});var Blt=s(vO);djo=r(Blt,"DebertaV2ForQuestionAnswering"),Blt.forEach(t),cjo=r(qxe," (DeBERTa-v2 model)"),qxe.forEach(t),mjo=i(X),Xv=n(X,"LI",{});var Nxe=s(Xv);Qfe=n(Nxe,"STRONG",{});var Plt=s(Qfe);fjo=r(Plt,"distilbert"),Plt.forEach(t),gjo=r(Nxe," \u2014 "),TO=n(Nxe,"A",{href:!0});var Ilt=s(TO);hjo=r(Ilt,"DistilBertForQuestionAnswering"),Ilt.forEach(t),ujo=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),pjo=i(X),zv=n(X,"LI",{});var jxe=s(zv);Wfe=n(jxe,"STRONG",{});var qlt=s(Wfe);_jo=r(qlt,"electra"),qlt.forEach(t),bjo=r(jxe," \u2014 "),MO=n(jxe,"A",{href:!0});var Nlt=s(MO);Fjo=r(Nlt,"ElectraForQuestionAnswering"),Nlt.forEach(t),vjo=r(jxe," (ELECTRA model)"),jxe.forEach(t),Tjo=i(X),Qv=n(X,"LI",{});var Dxe=s(Qv);Hfe=n(Dxe,"STRONG",{});var jlt=s(Hfe);Mjo=r(jlt,"flaubert"),jlt.forEach(t),Ejo=r(Dxe," \u2014 "),EO=n(Dxe,"A",{href:!0});var Dlt=s(EO);Cjo=r(Dlt,"FlaubertForQuestionAnsweringSimple"),Dlt.forEach(t),wjo=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),Ajo=i(X),Wv=n(X,"LI",{});var Gxe=s(Wv);Ufe=n(Gxe,"STRONG",{});var Glt=s(Ufe);yjo=r(Glt,"fnet"),Glt.forEach(t),Ljo=r(Gxe," \u2014 "),CO=n(Gxe,"A",{href:!0});var Olt=s(CO);xjo=r(Olt,"FNetForQuestionAnswering"),Olt.forEach(t),$jo=r(Gxe," (FNet model)"),Gxe.forEach(t),kjo=i(X),Hv=n(X,"LI",{});var Oxe=s(Hv);Jfe=n(Oxe,"STRONG",{});var Vlt=s(Jfe);Sjo=r(Vlt,"funnel"),Vlt.forEach(t),Rjo=r(Oxe," \u2014 "),wO=n(Oxe,"A",{href:!0});var Xlt=s(wO);Bjo=r(Xlt,"FunnelForQuestionAnswering"),Xlt.forEach(t),Pjo=r(Oxe," (Funnel Transformer model)"),Oxe.forEach(t),Ijo=i(X),Uv=n(X,"LI",{});var Vxe=s(Uv);Yfe=n(Vxe,"STRONG",{});var zlt=s(Yfe);qjo=r(zlt,"gptj"),zlt.forEach(t),Njo=r(Vxe," \u2014 "),AO=n(Vxe,"A",{href:!0});var Qlt=s(AO);jjo=r(Qlt,"GPTJForQuestionAnswering"),Qlt.forEach(t),Djo=r(Vxe," (GPT-J model)"),Vxe.forEach(t),Gjo=i(X),Jv=n(X,"LI",{});var Xxe=s(Jv);Kfe=n(Xxe,"STRONG",{});var Wlt=s(Kfe);Ojo=r(Wlt,"ibert"),Wlt.forEach(t),Vjo=r(Xxe," \u2014 "),yO=n(Xxe,"A",{href:!0});var Hlt=s(yO);Xjo=r(Hlt,"IBertForQuestionAnswering"),Hlt.forEach(t),zjo=r(Xxe," (I-BERT model)"),Xxe.forEach(t),Qjo=i(X),Yv=n(X,"LI",{});var zxe=s(Yv);Zfe=n(zxe,"STRONG",{});var Ult=s(Zfe);Wjo=r(Ult,"layoutlmv2"),Ult.forEach(t),Hjo=r(zxe," \u2014 "),LO=n(zxe,"A",{href:!0});var Jlt=s(LO);Ujo=r(Jlt,"LayoutLMv2ForQuestionAnswering"),Jlt.forEach(t),Jjo=r(zxe," (LayoutLMv2 model)"),zxe.forEach(t),Yjo=i(X),Kv=n(X,"LI",{});var Qxe=s(Kv);ege=n(Qxe,"STRONG",{});var Ylt=s(ege);Kjo=r(Ylt,"led"),Ylt.forEach(t),Zjo=r(Qxe," \u2014 "),xO=n(Qxe,"A",{href:!0});var Klt=s(xO);eDo=r(Klt,"LEDForQuestionAnswering"),Klt.forEach(t),oDo=r(Qxe," (LED model)"),Qxe.forEach(t),rDo=i(X),Zv=n(X,"LI",{});var Wxe=s(Zv);oge=n(Wxe,"STRONG",{});var Zlt=s(oge);tDo=r(Zlt,"longformer"),Zlt.forEach(t),aDo=r(Wxe," \u2014 "),$O=n(Wxe,"A",{href:!0});var eit=s($O);nDo=r(eit,"LongformerForQuestionAnswering"),eit.forEach(t),sDo=r(Wxe," (Longformer model)"),Wxe.forEach(t),lDo=i(X),e1=n(X,"LI",{});var Hxe=s(e1);rge=n(Hxe,"STRONG",{});var oit=s(rge);iDo=r(oit,"lxmert"),oit.forEach(t),dDo=r(Hxe," \u2014 "),kO=n(Hxe,"A",{href:!0});var rit=s(kO);cDo=r(rit,"LxmertForQuestionAnswering"),rit.forEach(t),mDo=r(Hxe," (LXMERT model)"),Hxe.forEach(t),fDo=i(X),o1=n(X,"LI",{});var Uxe=s(o1);tge=n(Uxe,"STRONG",{});var tit=s(tge);gDo=r(tit,"mbart"),tit.forEach(t),hDo=r(Uxe," \u2014 "),SO=n(Uxe,"A",{href:!0});var ait=s(SO);uDo=r(ait,"MBartForQuestionAnswering"),ait.forEach(t),pDo=r(Uxe," (mBART model)"),Uxe.forEach(t),_Do=i(X),r1=n(X,"LI",{});var Jxe=s(r1);age=n(Jxe,"STRONG",{});var nit=s(age);bDo=r(nit,"megatron-bert"),nit.forEach(t),FDo=r(Jxe," \u2014 "),RO=n(Jxe,"A",{href:!0});var sit=s(RO);vDo=r(sit,"MegatronBertForQuestionAnswering"),sit.forEach(t),TDo=r(Jxe," (MegatronBert model)"),Jxe.forEach(t),MDo=i(X),t1=n(X,"LI",{});var Yxe=s(t1);nge=n(Yxe,"STRONG",{});var lit=s(nge);EDo=r(lit,"mobilebert"),lit.forEach(t),CDo=r(Yxe," \u2014 "),BO=n(Yxe,"A",{href:!0});var iit=s(BO);wDo=r(iit,"MobileBertForQuestionAnswering"),iit.forEach(t),ADo=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),yDo=i(X),a1=n(X,"LI",{});var Kxe=s(a1);sge=n(Kxe,"STRONG",{});var dit=s(sge);LDo=r(dit,"mpnet"),dit.forEach(t),xDo=r(Kxe," \u2014 "),PO=n(Kxe,"A",{href:!0});var cit=s(PO);$Do=r(cit,"MPNetForQuestionAnswering"),cit.forEach(t),kDo=r(Kxe," (MPNet model)"),Kxe.forEach(t),SDo=i(X),n1=n(X,"LI",{});var Zxe=s(n1);lge=n(Zxe,"STRONG",{});var mit=s(lge);RDo=r(mit,"nystromformer"),mit.forEach(t),BDo=r(Zxe," \u2014 "),IO=n(Zxe,"A",{href:!0});var fit=s(IO);PDo=r(fit,"NystromformerForQuestionAnswering"),fit.forEach(t),IDo=r(Zxe," (Nystromformer model)"),Zxe.forEach(t),qDo=i(X),s1=n(X,"LI",{});var e7e=s(s1);ige=n(e7e,"STRONG",{});var git=s(ige);NDo=r(git,"qdqbert"),git.forEach(t),jDo=r(e7e," \u2014 "),qO=n(e7e,"A",{href:!0});var hit=s(qO);DDo=r(hit,"QDQBertForQuestionAnswering"),hit.forEach(t),GDo=r(e7e," (QDQBert model)"),e7e.forEach(t),ODo=i(X),l1=n(X,"LI",{});var o7e=s(l1);dge=n(o7e,"STRONG",{});var uit=s(dge);VDo=r(uit,"reformer"),uit.forEach(t),XDo=r(o7e," \u2014 "),NO=n(o7e,"A",{href:!0});var pit=s(NO);zDo=r(pit,"ReformerForQuestionAnswering"),pit.forEach(t),QDo=r(o7e," (Reformer model)"),o7e.forEach(t),WDo=i(X),i1=n(X,"LI",{});var r7e=s(i1);cge=n(r7e,"STRONG",{});var _it=s(cge);HDo=r(_it,"rembert"),_it.forEach(t),UDo=r(r7e," \u2014 "),jO=n(r7e,"A",{href:!0});var bit=s(jO);JDo=r(bit,"RemBertForQuestionAnswering"),bit.forEach(t),YDo=r(r7e," (RemBERT model)"),r7e.forEach(t),KDo=i(X),d1=n(X,"LI",{});var t7e=s(d1);mge=n(t7e,"STRONG",{});var Fit=s(mge);ZDo=r(Fit,"roberta"),Fit.forEach(t),eGo=r(t7e," \u2014 "),DO=n(t7e,"A",{href:!0});var vit=s(DO);oGo=r(vit,"RobertaForQuestionAnswering"),vit.forEach(t),rGo=r(t7e," (RoBERTa model)"),t7e.forEach(t),tGo=i(X),c1=n(X,"LI",{});var a7e=s(c1);fge=n(a7e,"STRONG",{});var Tit=s(fge);aGo=r(Tit,"roformer"),Tit.forEach(t),nGo=r(a7e," \u2014 "),GO=n(a7e,"A",{href:!0});var Mit=s(GO);sGo=r(Mit,"RoFormerForQuestionAnswering"),Mit.forEach(t),lGo=r(a7e," (RoFormer model)"),a7e.forEach(t),iGo=i(X),m1=n(X,"LI",{});var n7e=s(m1);gge=n(n7e,"STRONG",{});var Eit=s(gge);dGo=r(Eit,"splinter"),Eit.forEach(t),cGo=r(n7e," \u2014 "),OO=n(n7e,"A",{href:!0});var Cit=s(OO);mGo=r(Cit,"SplinterForQuestionAnswering"),Cit.forEach(t),fGo=r(n7e," (Splinter model)"),n7e.forEach(t),gGo=i(X),f1=n(X,"LI",{});var s7e=s(f1);hge=n(s7e,"STRONG",{});var wit=s(hge);hGo=r(wit,"squeezebert"),wit.forEach(t),uGo=r(s7e," \u2014 "),VO=n(s7e,"A",{href:!0});var Ait=s(VO);pGo=r(Ait,"SqueezeBertForQuestionAnswering"),Ait.forEach(t),_Go=r(s7e," (SqueezeBERT model)"),s7e.forEach(t),bGo=i(X),g1=n(X,"LI",{});var l7e=s(g1);uge=n(l7e,"STRONG",{});var yit=s(uge);FGo=r(yit,"xlm"),yit.forEach(t),vGo=r(l7e," \u2014 "),XO=n(l7e,"A",{href:!0});var Lit=s(XO);TGo=r(Lit,"XLMForQuestionAnsweringSimple"),Lit.forEach(t),MGo=r(l7e," (XLM model)"),l7e.forEach(t),EGo=i(X),h1=n(X,"LI",{});var i7e=s(h1);pge=n(i7e,"STRONG",{});var xit=s(pge);CGo=r(xit,"xlm-roberta"),xit.forEach(t),wGo=r(i7e," \u2014 "),zO=n(i7e,"A",{href:!0});var $it=s(zO);AGo=r($it,"XLMRobertaForQuestionAnswering"),$it.forEach(t),yGo=r(i7e," (XLM-RoBERTa model)"),i7e.forEach(t),LGo=i(X),u1=n(X,"LI",{});var d7e=s(u1);_ge=n(d7e,"STRONG",{});var kit=s(_ge);xGo=r(kit,"xlm-roberta-xl"),kit.forEach(t),$Go=r(d7e," \u2014 "),QO=n(d7e,"A",{href:!0});var Sit=s(QO);kGo=r(Sit,"XLMRobertaXLForQuestionAnswering"),Sit.forEach(t),SGo=r(d7e," (XLM-RoBERTa-XL model)"),d7e.forEach(t),RGo=i(X),p1=n(X,"LI",{});var c7e=s(p1);bge=n(c7e,"STRONG",{});var Rit=s(bge);BGo=r(Rit,"xlnet"),Rit.forEach(t),PGo=r(c7e," \u2014 "),WO=n(c7e,"A",{href:!0});var Bit=s(WO);IGo=r(Bit,"XLNetForQuestionAnsweringSimple"),Bit.forEach(t),qGo=r(c7e," (XLNet model)"),c7e.forEach(t),NGo=i(X),_1=n(X,"LI",{});var m7e=s(_1);Fge=n(m7e,"STRONG",{});var Pit=s(Fge);jGo=r(Pit,"yoso"),Pit.forEach(t),DGo=r(m7e," \u2014 "),HO=n(m7e,"A",{href:!0});var Iit=s(HO);GGo=r(Iit,"YosoForQuestionAnswering"),Iit.forEach(t),OGo=r(m7e," (YOSO model)"),m7e.forEach(t),X.forEach(t),VGo=i(ia),b1=n(ia,"P",{});var f7e=s(b1);XGo=r(f7e,"The model is set in evaluation mode by default using "),vge=n(f7e,"CODE",{});var qit=s(vge);zGo=r(qit,"model.eval()"),qit.forEach(t),QGo=r(f7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(f7e,"CODE",{});var Nit=s(Tge);WGo=r(Nit,"model.train()"),Nit.forEach(t),f7e.forEach(t),HGo=i(ia),T(F1.$$.fragment,ia),ia.forEach(t),Us.forEach(t),IPe=i(m),Yi=n(m,"H2",{class:!0});var Dqe=s(Yi);v1=n(Dqe,"A",{id:!0,class:!0,href:!0});var jit=s(v1);Mge=n(jit,"SPAN",{});var Dit=s(Mge);T(dL.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),UGo=i(Dqe),Ege=n(Dqe,"SPAN",{});var Git=s(Ege);JGo=r(Git,"AutoModelForTableQuestionAnswering"),Git.forEach(t),Dqe.forEach(t),qPe=i(m),No=n(m,"DIV",{class:!0});var Js=s(No);T(cL.$$.fragment,Js),YGo=i(Js),Ki=n(Js,"P",{});var dK=s(Ki);KGo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UO=n(dK,"A",{href:!0});var Oit=s(UO);ZGo=r(Oit,"from_pretrained()"),Oit.forEach(t),eOo=r(dK," class method or the "),JO=n(dK,"A",{href:!0});var Vit=s(JO);oOo=r(Vit,"from_config()"),Vit.forEach(t),rOo=r(dK,` class
method.`),dK.forEach(t),tOo=i(Js),mL=n(Js,"P",{});var Gqe=s(mL);aOo=r(Gqe,"This class cannot be instantiated directly using "),Cge=n(Gqe,"CODE",{});var Xit=s(Cge);nOo=r(Xit,"__init__()"),Xit.forEach(t),sOo=r(Gqe," (throws an error)."),Gqe.forEach(t),lOo=i(Js),mt=n(Js,"DIV",{class:!0});var c0=s(mt);T(fL.$$.fragment,c0),iOo=i(c0),wge=n(c0,"P",{});var zit=s(wge);dOo=r(zit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zit.forEach(t),cOo=i(c0),Zi=n(c0,"P",{});var cK=s(Zi);mOo=r(cK,`Note:
Loading a model from its configuration file does `),Age=n(cK,"STRONG",{});var Qit=s(Age);fOo=r(Qit,"not"),Qit.forEach(t),gOo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(cK,"A",{href:!0});var Wit=s(YO);hOo=r(Wit,"from_pretrained()"),Wit.forEach(t),uOo=r(cK," to load the model weights."),cK.forEach(t),pOo=i(c0),T(T1.$$.fragment,c0),c0.forEach(t),_Oo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(gL.$$.fragment,da),bOo=i(da),yge=n(da,"P",{});var Hit=s(yge);FOo=r(Hit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hit.forEach(t),vOo=i(da),Ia=n(da,"P",{});var m0=s(Ia);TOo=r(m0,"The model class to instantiate is selected based on the "),Lge=n(m0,"CODE",{});var Uit=s(Lge);MOo=r(Uit,"model_type"),Uit.forEach(t),EOo=r(m0,` property of the config object (either
passed as an argument or loaded from `),xge=n(m0,"CODE",{});var Jit=s(xge);COo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),wOo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(m0,"CODE",{});var Yit=s($ge);AOo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),yOo=r(m0,":"),m0.forEach(t),LOo=i(da),kge=n(da,"UL",{});var Kit=s(kge);M1=n(Kit,"LI",{});var g7e=s(M1);Sge=n(g7e,"STRONG",{});var Zit=s(Sge);xOo=r(Zit,"tapas"),Zit.forEach(t),$Oo=r(g7e," \u2014 "),KO=n(g7e,"A",{href:!0});var edt=s(KO);kOo=r(edt,"TapasForQuestionAnswering"),edt.forEach(t),SOo=r(g7e," (TAPAS model)"),g7e.forEach(t),Kit.forEach(t),ROo=i(da),E1=n(da,"P",{});var h7e=s(E1);BOo=r(h7e,"The model is set in evaluation mode by default using "),Rge=n(h7e,"CODE",{});var odt=s(Rge);POo=r(odt,"model.eval()"),odt.forEach(t),IOo=r(h7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(h7e,"CODE",{});var rdt=s(Bge);qOo=r(rdt,"model.train()"),rdt.forEach(t),h7e.forEach(t),NOo=i(da),T(C1.$$.fragment,da),da.forEach(t),Js.forEach(t),NPe=i(m),ed=n(m,"H2",{class:!0});var Oqe=s(ed);w1=n(Oqe,"A",{id:!0,class:!0,href:!0});var tdt=s(w1);Pge=n(tdt,"SPAN",{});var adt=s(Pge);T(hL.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),jOo=i(Oqe),Ige=n(Oqe,"SPAN",{});var ndt=s(Ige);DOo=r(ndt,"AutoModelForImageClassification"),ndt.forEach(t),Oqe.forEach(t),jPe=i(m),jo=n(m,"DIV",{class:!0});var Ys=s(jo);T(uL.$$.fragment,Ys),GOo=i(Ys),od=n(Ys,"P",{});var mK=s(od);OOo=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZO=n(mK,"A",{href:!0});var sdt=s(ZO);VOo=r(sdt,"from_pretrained()"),sdt.forEach(t),XOo=r(mK," class method or the "),eV=n(mK,"A",{href:!0});var ldt=s(eV);zOo=r(ldt,"from_config()"),ldt.forEach(t),QOo=r(mK,` class
method.`),mK.forEach(t),WOo=i(Ys),pL=n(Ys,"P",{});var Vqe=s(pL);HOo=r(Vqe,"This class cannot be instantiated directly using "),qge=n(Vqe,"CODE",{});var idt=s(qge);UOo=r(idt,"__init__()"),idt.forEach(t),JOo=r(Vqe," (throws an error)."),Vqe.forEach(t),YOo=i(Ys),ft=n(Ys,"DIV",{class:!0});var f0=s(ft);T(_L.$$.fragment,f0),KOo=i(f0),Nge=n(f0,"P",{});var ddt=s(Nge);ZOo=r(ddt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddt.forEach(t),eVo=i(f0),rd=n(f0,"P",{});var fK=s(rd);oVo=r(fK,`Note:
Loading a model from its configuration file does `),jge=n(fK,"STRONG",{});var cdt=s(jge);rVo=r(cdt,"not"),cdt.forEach(t),tVo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n(fK,"A",{href:!0});var mdt=s(oV);aVo=r(mdt,"from_pretrained()"),mdt.forEach(t),nVo=r(fK," to load the model weights."),fK.forEach(t),sVo=i(f0),T(A1.$$.fragment,f0),f0.forEach(t),lVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(bL.$$.fragment,ca),iVo=i(ca),Dge=n(ca,"P",{});var fdt=s(Dge);dVo=r(fdt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fdt.forEach(t),cVo=i(ca),qa=n(ca,"P",{});var g0=s(qa);mVo=r(g0,"The model class to instantiate is selected based on the "),Gge=n(g0,"CODE",{});var gdt=s(Gge);fVo=r(gdt,"model_type"),gdt.forEach(t),gVo=r(g0,` property of the config object (either
passed as an argument or loaded from `),Oge=n(g0,"CODE",{});var hdt=s(Oge);hVo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),uVo=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(g0,"CODE",{});var udt=s(Vge);pVo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),_Vo=r(g0,":"),g0.forEach(t),bVo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);y1=n(Ee,"LI",{});var u7e=s(y1);Xge=n(u7e,"STRONG",{});var pdt=s(Xge);FVo=r(pdt,"beit"),pdt.forEach(t),vVo=r(u7e," \u2014 "),rV=n(u7e,"A",{href:!0});var _dt=s(rV);TVo=r(_dt,"BeitForImageClassification"),_dt.forEach(t),MVo=r(u7e," (BEiT model)"),u7e.forEach(t),EVo=i(Ee),L1=n(Ee,"LI",{});var p7e=s(L1);zge=n(p7e,"STRONG",{});var bdt=s(zge);CVo=r(bdt,"convnext"),bdt.forEach(t),wVo=r(p7e," \u2014 "),tV=n(p7e,"A",{href:!0});var Fdt=s(tV);AVo=r(Fdt,"ConvNextForImageClassification"),Fdt.forEach(t),yVo=r(p7e," (ConvNext model)"),p7e.forEach(t),LVo=i(Ee),x1=n(Ee,"LI",{});var _7e=s(x1);Qge=n(_7e,"STRONG",{});var vdt=s(Qge);xVo=r(vdt,"data2vec-vision"),vdt.forEach(t),$Vo=r(_7e," \u2014 "),aV=n(_7e,"A",{href:!0});var Tdt=s(aV);kVo=r(Tdt,"Data2VecVisionForImageClassification"),Tdt.forEach(t),SVo=r(_7e," (Data2VecVision model)"),_7e.forEach(t),RVo=i(Ee),Rs=n(Ee,"LI",{});var r$=s(Rs);Wge=n(r$,"STRONG",{});var Mdt=s(Wge);BVo=r(Mdt,"deit"),Mdt.forEach(t),PVo=r(r$," \u2014 "),nV=n(r$,"A",{href:!0});var Edt=s(nV);IVo=r(Edt,"DeiTForImageClassification"),Edt.forEach(t),qVo=r(r$," or "),sV=n(r$,"A",{href:!0});var Cdt=s(sV);NVo=r(Cdt,"DeiTForImageClassificationWithTeacher"),Cdt.forEach(t),jVo=r(r$," (DeiT model)"),r$.forEach(t),DVo=i(Ee),$1=n(Ee,"LI",{});var b7e=s($1);Hge=n(b7e,"STRONG",{});var wdt=s(Hge);GVo=r(wdt,"imagegpt"),wdt.forEach(t),OVo=r(b7e," \u2014 "),lV=n(b7e,"A",{href:!0});var Adt=s(lV);VVo=r(Adt,"ImageGPTForImageClassification"),Adt.forEach(t),XVo=r(b7e," (ImageGPT model)"),b7e.forEach(t),zVo=i(Ee),gt=n(Ee,"LI",{});var cm=s(gt);Uge=n(cm,"STRONG",{});var ydt=s(Uge);QVo=r(ydt,"perceiver"),ydt.forEach(t),WVo=r(cm," \u2014 "),iV=n(cm,"A",{href:!0});var Ldt=s(iV);HVo=r(Ldt,"PerceiverForImageClassificationLearned"),Ldt.forEach(t),UVo=r(cm," or "),dV=n(cm,"A",{href:!0});var xdt=s(dV);JVo=r(xdt,"PerceiverForImageClassificationFourier"),xdt.forEach(t),YVo=r(cm," or "),cV=n(cm,"A",{href:!0});var $dt=s(cV);KVo=r($dt,"PerceiverForImageClassificationConvProcessing"),$dt.forEach(t),ZVo=r(cm," (Perceiver model)"),cm.forEach(t),eXo=i(Ee),k1=n(Ee,"LI",{});var F7e=s(k1);Jge=n(F7e,"STRONG",{});var kdt=s(Jge);oXo=r(kdt,"poolformer"),kdt.forEach(t),rXo=r(F7e," \u2014 "),mV=n(F7e,"A",{href:!0});var Sdt=s(mV);tXo=r(Sdt,"PoolFormerForImageClassification"),Sdt.forEach(t),aXo=r(F7e," (PoolFormer model)"),F7e.forEach(t),nXo=i(Ee),S1=n(Ee,"LI",{});var v7e=s(S1);Yge=n(v7e,"STRONG",{});var Rdt=s(Yge);sXo=r(Rdt,"regnet"),Rdt.forEach(t),lXo=r(v7e," \u2014 "),fV=n(v7e,"A",{href:!0});var Bdt=s(fV);iXo=r(Bdt,"RegNetForImageClassification"),Bdt.forEach(t),dXo=r(v7e," (RegNet model)"),v7e.forEach(t),cXo=i(Ee),R1=n(Ee,"LI",{});var T7e=s(R1);Kge=n(T7e,"STRONG",{});var Pdt=s(Kge);mXo=r(Pdt,"resnet"),Pdt.forEach(t),fXo=r(T7e," \u2014 "),gV=n(T7e,"A",{href:!0});var Idt=s(gV);gXo=r(Idt,"ResNetForImageClassification"),Idt.forEach(t),hXo=r(T7e," (ResNet model)"),T7e.forEach(t),uXo=i(Ee),B1=n(Ee,"LI",{});var M7e=s(B1);Zge=n(M7e,"STRONG",{});var qdt=s(Zge);pXo=r(qdt,"segformer"),qdt.forEach(t),_Xo=r(M7e," \u2014 "),hV=n(M7e,"A",{href:!0});var Ndt=s(hV);bXo=r(Ndt,"SegformerForImageClassification"),Ndt.forEach(t),FXo=r(M7e," (SegFormer model)"),M7e.forEach(t),vXo=i(Ee),P1=n(Ee,"LI",{});var E7e=s(P1);ehe=n(E7e,"STRONG",{});var jdt=s(ehe);TXo=r(jdt,"swin"),jdt.forEach(t),MXo=r(E7e," \u2014 "),uV=n(E7e,"A",{href:!0});var Ddt=s(uV);EXo=r(Ddt,"SwinForImageClassification"),Ddt.forEach(t),CXo=r(E7e," (Swin model)"),E7e.forEach(t),wXo=i(Ee),I1=n(Ee,"LI",{});var C7e=s(I1);ohe=n(C7e,"STRONG",{});var Gdt=s(ohe);AXo=r(Gdt,"van"),Gdt.forEach(t),yXo=r(C7e," \u2014 "),pV=n(C7e,"A",{href:!0});var Odt=s(pV);LXo=r(Odt,"VanForImageClassification"),Odt.forEach(t),xXo=r(C7e," (VAN model)"),C7e.forEach(t),$Xo=i(Ee),q1=n(Ee,"LI",{});var w7e=s(q1);rhe=n(w7e,"STRONG",{});var Vdt=s(rhe);kXo=r(Vdt,"vit"),Vdt.forEach(t),SXo=r(w7e," \u2014 "),_V=n(w7e,"A",{href:!0});var Xdt=s(_V);RXo=r(Xdt,"ViTForImageClassification"),Xdt.forEach(t),BXo=r(w7e," (ViT model)"),w7e.forEach(t),Ee.forEach(t),PXo=i(ca),N1=n(ca,"P",{});var A7e=s(N1);IXo=r(A7e,"The model is set in evaluation mode by default using "),the=n(A7e,"CODE",{});var zdt=s(the);qXo=r(zdt,"model.eval()"),zdt.forEach(t),NXo=r(A7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(A7e,"CODE",{});var Qdt=s(ahe);jXo=r(Qdt,"model.train()"),Qdt.forEach(t),A7e.forEach(t),DXo=i(ca),T(j1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),DPe=i(m),td=n(m,"H2",{class:!0});var Xqe=s(td);D1=n(Xqe,"A",{id:!0,class:!0,href:!0});var Wdt=s(D1);nhe=n(Wdt,"SPAN",{});var Hdt=s(nhe);T(FL.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),GXo=i(Xqe),she=n(Xqe,"SPAN",{});var Udt=s(she);OXo=r(Udt,"AutoModelForVision2Seq"),Udt.forEach(t),Xqe.forEach(t),GPe=i(m),Do=n(m,"DIV",{class:!0});var Ks=s(Do);T(vL.$$.fragment,Ks),VXo=i(Ks),ad=n(Ks,"P",{});var gK=s(ad);XXo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bV=n(gK,"A",{href:!0});var Jdt=s(bV);zXo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),QXo=r(gK," class method or the "),FV=n(gK,"A",{href:!0});var Ydt=s(FV);WXo=r(Ydt,"from_config()"),Ydt.forEach(t),HXo=r(gK,` class
method.`),gK.forEach(t),UXo=i(Ks),TL=n(Ks,"P",{});var zqe=s(TL);JXo=r(zqe,"This class cannot be instantiated directly using "),lhe=n(zqe,"CODE",{});var Kdt=s(lhe);YXo=r(Kdt,"__init__()"),Kdt.forEach(t),KXo=r(zqe," (throws an error)."),zqe.forEach(t),ZXo=i(Ks),ht=n(Ks,"DIV",{class:!0});var h0=s(ht);T(ML.$$.fragment,h0),ezo=i(h0),ihe=n(h0,"P",{});var Zdt=s(ihe);ozo=r(Zdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zdt.forEach(t),rzo=i(h0),nd=n(h0,"P",{});var hK=s(nd);tzo=r(hK,`Note:
Loading a model from its configuration file does `),dhe=n(hK,"STRONG",{});var ect=s(dhe);azo=r(ect,"not"),ect.forEach(t),nzo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(hK,"A",{href:!0});var oct=s(vV);szo=r(oct,"from_pretrained()"),oct.forEach(t),lzo=r(hK," to load the model weights."),hK.forEach(t),izo=i(h0),T(G1.$$.fragment,h0),h0.forEach(t),dzo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(EL.$$.fragment,ma),czo=i(ma),che=n(ma,"P",{});var rct=s(che);mzo=r(rct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rct.forEach(t),fzo=i(ma),Na=n(ma,"P",{});var u0=s(Na);gzo=r(u0,"The model class to instantiate is selected based on the "),mhe=n(u0,"CODE",{});var tct=s(mhe);hzo=r(tct,"model_type"),tct.forEach(t),uzo=r(u0,` property of the config object (either
passed as an argument or loaded from `),fhe=n(u0,"CODE",{});var act=s(fhe);pzo=r(act,"pretrained_model_name_or_path"),act.forEach(t),_zo=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(u0,"CODE",{});var nct=s(ghe);bzo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),Fzo=r(u0,":"),u0.forEach(t),vzo=i(ma),hhe=n(ma,"UL",{});var sct=s(hhe);O1=n(sct,"LI",{});var y7e=s(O1);uhe=n(y7e,"STRONG",{});var lct=s(uhe);Tzo=r(lct,"vision-encoder-decoder"),lct.forEach(t),Mzo=r(y7e," \u2014 "),TV=n(y7e,"A",{href:!0});var ict=s(TV);Ezo=r(ict,"VisionEncoderDecoderModel"),ict.forEach(t),Czo=r(y7e," (Vision Encoder decoder model)"),y7e.forEach(t),sct.forEach(t),wzo=i(ma),V1=n(ma,"P",{});var L7e=s(V1);Azo=r(L7e,"The model is set in evaluation mode by default using "),phe=n(L7e,"CODE",{});var dct=s(phe);yzo=r(dct,"model.eval()"),dct.forEach(t),Lzo=r(L7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(L7e,"CODE",{});var cct=s(_he);xzo=r(cct,"model.train()"),cct.forEach(t),L7e.forEach(t),$zo=i(ma),T(X1.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),OPe=i(m),sd=n(m,"H2",{class:!0});var Qqe=s(sd);z1=n(Qqe,"A",{id:!0,class:!0,href:!0});var mct=s(z1);bhe=n(mct,"SPAN",{});var fct=s(bhe);T(CL.$$.fragment,fct),fct.forEach(t),mct.forEach(t),kzo=i(Qqe),Fhe=n(Qqe,"SPAN",{});var gct=s(Fhe);Szo=r(gct,"AutoModelForAudioClassification"),gct.forEach(t),Qqe.forEach(t),VPe=i(m),Go=n(m,"DIV",{class:!0});var Zs=s(Go);T(wL.$$.fragment,Zs),Rzo=i(Zs),ld=n(Zs,"P",{});var uK=s(ld);Bzo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),MV=n(uK,"A",{href:!0});var hct=s(MV);Pzo=r(hct,"from_pretrained()"),hct.forEach(t),Izo=r(uK," class method or the "),EV=n(uK,"A",{href:!0});var uct=s(EV);qzo=r(uct,"from_config()"),uct.forEach(t),Nzo=r(uK,` class
method.`),uK.forEach(t),jzo=i(Zs),AL=n(Zs,"P",{});var Wqe=s(AL);Dzo=r(Wqe,"This class cannot be instantiated directly using "),vhe=n(Wqe,"CODE",{});var pct=s(vhe);Gzo=r(pct,"__init__()"),pct.forEach(t),Ozo=r(Wqe," (throws an error)."),Wqe.forEach(t),Vzo=i(Zs),ut=n(Zs,"DIV",{class:!0});var p0=s(ut);T(yL.$$.fragment,p0),Xzo=i(p0),The=n(p0,"P",{});var _ct=s(The);zzo=r(_ct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_ct.forEach(t),Qzo=i(p0),id=n(p0,"P",{});var pK=s(id);Wzo=r(pK,`Note:
Loading a model from its configuration file does `),Mhe=n(pK,"STRONG",{});var bct=s(Mhe);Hzo=r(bct,"not"),bct.forEach(t),Uzo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(pK,"A",{href:!0});var Fct=s(CV);Jzo=r(Fct,"from_pretrained()"),Fct.forEach(t),Yzo=r(pK," to load the model weights."),pK.forEach(t),Kzo=i(p0),T(Q1.$$.fragment,p0),p0.forEach(t),Zzo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(LL.$$.fragment,fa),eQo=i(fa),Ehe=n(fa,"P",{});var vct=s(Ehe);oQo=r(vct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vct.forEach(t),rQo=i(fa),ja=n(fa,"P",{});var _0=s(ja);tQo=r(_0,"The model class to instantiate is selected based on the "),Che=n(_0,"CODE",{});var Tct=s(Che);aQo=r(Tct,"model_type"),Tct.forEach(t),nQo=r(_0,` property of the config object (either
passed as an argument or loaded from `),whe=n(_0,"CODE",{});var Mct=s(whe);sQo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),lQo=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(_0,"CODE",{});var Ect=s(Ahe);iQo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),dQo=r(_0,":"),_0.forEach(t),cQo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);W1=n(bo,"LI",{});var x7e=s(W1);yhe=n(x7e,"STRONG",{});var Cct=s(yhe);mQo=r(Cct,"data2vec-audio"),Cct.forEach(t),fQo=r(x7e," \u2014 "),wV=n(x7e,"A",{href:!0});var wct=s(wV);gQo=r(wct,"Data2VecAudioForSequenceClassification"),wct.forEach(t),hQo=r(x7e," (Data2VecAudio model)"),x7e.forEach(t),uQo=i(bo),H1=n(bo,"LI",{});var $7e=s(H1);Lhe=n($7e,"STRONG",{});var Act=s(Lhe);pQo=r(Act,"hubert"),Act.forEach(t),_Qo=r($7e," \u2014 "),AV=n($7e,"A",{href:!0});var yct=s(AV);bQo=r(yct,"HubertForSequenceClassification"),yct.forEach(t),FQo=r($7e," (Hubert model)"),$7e.forEach(t),vQo=i(bo),U1=n(bo,"LI",{});var k7e=s(U1);xhe=n(k7e,"STRONG",{});var Lct=s(xhe);TQo=r(Lct,"sew"),Lct.forEach(t),MQo=r(k7e," \u2014 "),yV=n(k7e,"A",{href:!0});var xct=s(yV);EQo=r(xct,"SEWForSequenceClassification"),xct.forEach(t),CQo=r(k7e," (SEW model)"),k7e.forEach(t),wQo=i(bo),J1=n(bo,"LI",{});var S7e=s(J1);$he=n(S7e,"STRONG",{});var $ct=s($he);AQo=r($ct,"sew-d"),$ct.forEach(t),yQo=r(S7e," \u2014 "),LV=n(S7e,"A",{href:!0});var kct=s(LV);LQo=r(kct,"SEWDForSequenceClassification"),kct.forEach(t),xQo=r(S7e," (SEW-D model)"),S7e.forEach(t),$Qo=i(bo),Y1=n(bo,"LI",{});var R7e=s(Y1);khe=n(R7e,"STRONG",{});var Sct=s(khe);kQo=r(Sct,"unispeech"),Sct.forEach(t),SQo=r(R7e," \u2014 "),xV=n(R7e,"A",{href:!0});var Rct=s(xV);RQo=r(Rct,"UniSpeechForSequenceClassification"),Rct.forEach(t),BQo=r(R7e," (UniSpeech model)"),R7e.forEach(t),PQo=i(bo),K1=n(bo,"LI",{});var B7e=s(K1);She=n(B7e,"STRONG",{});var Bct=s(She);IQo=r(Bct,"unispeech-sat"),Bct.forEach(t),qQo=r(B7e," \u2014 "),$V=n(B7e,"A",{href:!0});var Pct=s($V);NQo=r(Pct,"UniSpeechSatForSequenceClassification"),Pct.forEach(t),jQo=r(B7e," (UniSpeechSat model)"),B7e.forEach(t),DQo=i(bo),Z1=n(bo,"LI",{});var P7e=s(Z1);Rhe=n(P7e,"STRONG",{});var Ict=s(Rhe);GQo=r(Ict,"wav2vec2"),Ict.forEach(t),OQo=r(P7e," \u2014 "),kV=n(P7e,"A",{href:!0});var qct=s(kV);VQo=r(qct,"Wav2Vec2ForSequenceClassification"),qct.forEach(t),XQo=r(P7e," (Wav2Vec2 model)"),P7e.forEach(t),zQo=i(bo),eT=n(bo,"LI",{});var I7e=s(eT);Bhe=n(I7e,"STRONG",{});var Nct=s(Bhe);QQo=r(Nct,"wavlm"),Nct.forEach(t),WQo=r(I7e," \u2014 "),SV=n(I7e,"A",{href:!0});var jct=s(SV);HQo=r(jct,"WavLMForSequenceClassification"),jct.forEach(t),UQo=r(I7e," (WavLM model)"),I7e.forEach(t),bo.forEach(t),JQo=i(fa),oT=n(fa,"P",{});var q7e=s(oT);YQo=r(q7e,"The model is set in evaluation mode by default using "),Phe=n(q7e,"CODE",{});var Dct=s(Phe);KQo=r(Dct,"model.eval()"),Dct.forEach(t),ZQo=r(q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(q7e,"CODE",{});var Gct=s(Ihe);eWo=r(Gct,"model.train()"),Gct.forEach(t),q7e.forEach(t),oWo=i(fa),T(rT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),XPe=i(m),dd=n(m,"H2",{class:!0});var Hqe=s(dd);tT=n(Hqe,"A",{id:!0,class:!0,href:!0});var Oct=s(tT);qhe=n(Oct,"SPAN",{});var Vct=s(qhe);T(xL.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),rWo=i(Hqe),Nhe=n(Hqe,"SPAN",{});var Xct=s(Nhe);tWo=r(Xct,"AutoModelForAudioFrameClassification"),Xct.forEach(t),Hqe.forEach(t),zPe=i(m),Oo=n(m,"DIV",{class:!0});var el=s(Oo);T($L.$$.fragment,el),aWo=i(el),cd=n(el,"P",{});var _K=s(cd);nWo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RV=n(_K,"A",{href:!0});var zct=s(RV);sWo=r(zct,"from_pretrained()"),zct.forEach(t),lWo=r(_K," class method or the "),BV=n(_K,"A",{href:!0});var Qct=s(BV);iWo=r(Qct,"from_config()"),Qct.forEach(t),dWo=r(_K,` class
method.`),_K.forEach(t),cWo=i(el),kL=n(el,"P",{});var Uqe=s(kL);mWo=r(Uqe,"This class cannot be instantiated directly using "),jhe=n(Uqe,"CODE",{});var Wct=s(jhe);fWo=r(Wct,"__init__()"),Wct.forEach(t),gWo=r(Uqe," (throws an error)."),Uqe.forEach(t),hWo=i(el),pt=n(el,"DIV",{class:!0});var b0=s(pt);T(SL.$$.fragment,b0),uWo=i(b0),Dhe=n(b0,"P",{});var Hct=s(Dhe);pWo=r(Hct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hct.forEach(t),_Wo=i(b0),md=n(b0,"P",{});var bK=s(md);bWo=r(bK,`Note:
Loading a model from its configuration file does `),Ghe=n(bK,"STRONG",{});var Uct=s(Ghe);FWo=r(Uct,"not"),Uct.forEach(t),vWo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(bK,"A",{href:!0});var Jct=s(PV);TWo=r(Jct,"from_pretrained()"),Jct.forEach(t),MWo=r(bK," to load the model weights."),bK.forEach(t),EWo=i(b0),T(aT.$$.fragment,b0),b0.forEach(t),CWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(RL.$$.fragment,ga),wWo=i(ga),Ohe=n(ga,"P",{});var Yct=s(Ohe);AWo=r(Yct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yct.forEach(t),yWo=i(ga),Da=n(ga,"P",{});var F0=s(Da);LWo=r(F0,"The model class to instantiate is selected based on the "),Vhe=n(F0,"CODE",{});var Kct=s(Vhe);xWo=r(Kct,"model_type"),Kct.forEach(t),$Wo=r(F0,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(F0,"CODE",{});var Zct=s(Xhe);kWo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),SWo=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(F0,"CODE",{});var emt=s(zhe);RWo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),BWo=r(F0,":"),F0.forEach(t),PWo=i(ga),Ga=n(ga,"UL",{});var v0=s(Ga);nT=n(v0,"LI",{});var N7e=s(nT);Qhe=n(N7e,"STRONG",{});var omt=s(Qhe);IWo=r(omt,"data2vec-audio"),omt.forEach(t),qWo=r(N7e," \u2014 "),IV=n(N7e,"A",{href:!0});var rmt=s(IV);NWo=r(rmt,"Data2VecAudioForAudioFrameClassification"),rmt.forEach(t),jWo=r(N7e," (Data2VecAudio model)"),N7e.forEach(t),DWo=i(v0),sT=n(v0,"LI",{});var j7e=s(sT);Whe=n(j7e,"STRONG",{});var tmt=s(Whe);GWo=r(tmt,"unispeech-sat"),tmt.forEach(t),OWo=r(j7e," \u2014 "),qV=n(j7e,"A",{href:!0});var amt=s(qV);VWo=r(amt,"UniSpeechSatForAudioFrameClassification"),amt.forEach(t),XWo=r(j7e," (UniSpeechSat model)"),j7e.forEach(t),zWo=i(v0),lT=n(v0,"LI",{});var D7e=s(lT);Hhe=n(D7e,"STRONG",{});var nmt=s(Hhe);QWo=r(nmt,"wav2vec2"),nmt.forEach(t),WWo=r(D7e," \u2014 "),NV=n(D7e,"A",{href:!0});var smt=s(NV);HWo=r(smt,"Wav2Vec2ForAudioFrameClassification"),smt.forEach(t),UWo=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),JWo=i(v0),iT=n(v0,"LI",{});var G7e=s(iT);Uhe=n(G7e,"STRONG",{});var lmt=s(Uhe);YWo=r(lmt,"wavlm"),lmt.forEach(t),KWo=r(G7e," \u2014 "),jV=n(G7e,"A",{href:!0});var imt=s(jV);ZWo=r(imt,"WavLMForAudioFrameClassification"),imt.forEach(t),eHo=r(G7e," (WavLM model)"),G7e.forEach(t),v0.forEach(t),oHo=i(ga),dT=n(ga,"P",{});var O7e=s(dT);rHo=r(O7e,"The model is set in evaluation mode by default using "),Jhe=n(O7e,"CODE",{});var dmt=s(Jhe);tHo=r(dmt,"model.eval()"),dmt.forEach(t),aHo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(O7e,"CODE",{});var cmt=s(Yhe);nHo=r(cmt,"model.train()"),cmt.forEach(t),O7e.forEach(t),sHo=i(ga),T(cT.$$.fragment,ga),ga.forEach(t),el.forEach(t),QPe=i(m),fd=n(m,"H2",{class:!0});var Jqe=s(fd);mT=n(Jqe,"A",{id:!0,class:!0,href:!0});var mmt=s(mT);Khe=n(mmt,"SPAN",{});var fmt=s(Khe);T(BL.$$.fragment,fmt),fmt.forEach(t),mmt.forEach(t),lHo=i(Jqe),Zhe=n(Jqe,"SPAN",{});var gmt=s(Zhe);iHo=r(gmt,"AutoModelForCTC"),gmt.forEach(t),Jqe.forEach(t),WPe=i(m),Vo=n(m,"DIV",{class:!0});var ol=s(Vo);T(PL.$$.fragment,ol),dHo=i(ol),gd=n(ol,"P",{});var FK=s(gd);cHo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DV=n(FK,"A",{href:!0});var hmt=s(DV);mHo=r(hmt,"from_pretrained()"),hmt.forEach(t),fHo=r(FK," class method or the "),GV=n(FK,"A",{href:!0});var umt=s(GV);gHo=r(umt,"from_config()"),umt.forEach(t),hHo=r(FK,` class
method.`),FK.forEach(t),uHo=i(ol),IL=n(ol,"P",{});var Yqe=s(IL);pHo=r(Yqe,"This class cannot be instantiated directly using "),eue=n(Yqe,"CODE",{});var pmt=s(eue);_Ho=r(pmt,"__init__()"),pmt.forEach(t),bHo=r(Yqe," (throws an error)."),Yqe.forEach(t),FHo=i(ol),_t=n(ol,"DIV",{class:!0});var T0=s(_t);T(qL.$$.fragment,T0),vHo=i(T0),oue=n(T0,"P",{});var _mt=s(oue);THo=r(_mt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_mt.forEach(t),MHo=i(T0),hd=n(T0,"P",{});var vK=s(hd);EHo=r(vK,`Note:
Loading a model from its configuration file does `),rue=n(vK,"STRONG",{});var bmt=s(rue);CHo=r(bmt,"not"),bmt.forEach(t),wHo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(vK,"A",{href:!0});var Fmt=s(OV);AHo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),yHo=r(vK," to load the model weights."),vK.forEach(t),LHo=i(T0),T(fT.$$.fragment,T0),T0.forEach(t),xHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(NL.$$.fragment,ha),$Ho=i(ha),tue=n(ha,"P",{});var vmt=s(tue);kHo=r(vmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vmt.forEach(t),SHo=i(ha),Oa=n(ha,"P",{});var M0=s(Oa);RHo=r(M0,"The model class to instantiate is selected based on the "),aue=n(M0,"CODE",{});var Tmt=s(aue);BHo=r(Tmt,"model_type"),Tmt.forEach(t),PHo=r(M0,` property of the config object (either
passed as an argument or loaded from `),nue=n(M0,"CODE",{});var Mmt=s(nue);IHo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),qHo=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(M0,"CODE",{});var Emt=s(sue);NHo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),jHo=r(M0,":"),M0.forEach(t),DHo=i(ha),je=n(ha,"UL",{});var Fo=s(je);gT=n(Fo,"LI",{});var V7e=s(gT);lue=n(V7e,"STRONG",{});var Cmt=s(lue);GHo=r(Cmt,"data2vec-audio"),Cmt.forEach(t),OHo=r(V7e," \u2014 "),VV=n(V7e,"A",{href:!0});var wmt=s(VV);VHo=r(wmt,"Data2VecAudioForCTC"),wmt.forEach(t),XHo=r(V7e," (Data2VecAudio model)"),V7e.forEach(t),zHo=i(Fo),hT=n(Fo,"LI",{});var X7e=s(hT);iue=n(X7e,"STRONG",{});var Amt=s(iue);QHo=r(Amt,"hubert"),Amt.forEach(t),WHo=r(X7e," \u2014 "),XV=n(X7e,"A",{href:!0});var ymt=s(XV);HHo=r(ymt,"HubertForCTC"),ymt.forEach(t),UHo=r(X7e," (Hubert model)"),X7e.forEach(t),JHo=i(Fo),uT=n(Fo,"LI",{});var z7e=s(uT);due=n(z7e,"STRONG",{});var Lmt=s(due);YHo=r(Lmt,"sew"),Lmt.forEach(t),KHo=r(z7e," \u2014 "),zV=n(z7e,"A",{href:!0});var xmt=s(zV);ZHo=r(xmt,"SEWForCTC"),xmt.forEach(t),eUo=r(z7e," (SEW model)"),z7e.forEach(t),oUo=i(Fo),pT=n(Fo,"LI",{});var Q7e=s(pT);cue=n(Q7e,"STRONG",{});var $mt=s(cue);rUo=r($mt,"sew-d"),$mt.forEach(t),tUo=r(Q7e," \u2014 "),QV=n(Q7e,"A",{href:!0});var kmt=s(QV);aUo=r(kmt,"SEWDForCTC"),kmt.forEach(t),nUo=r(Q7e," (SEW-D model)"),Q7e.forEach(t),sUo=i(Fo),_T=n(Fo,"LI",{});var W7e=s(_T);mue=n(W7e,"STRONG",{});var Smt=s(mue);lUo=r(Smt,"unispeech"),Smt.forEach(t),iUo=r(W7e," \u2014 "),WV=n(W7e,"A",{href:!0});var Rmt=s(WV);dUo=r(Rmt,"UniSpeechForCTC"),Rmt.forEach(t),cUo=r(W7e," (UniSpeech model)"),W7e.forEach(t),mUo=i(Fo),bT=n(Fo,"LI",{});var H7e=s(bT);fue=n(H7e,"STRONG",{});var Bmt=s(fue);fUo=r(Bmt,"unispeech-sat"),Bmt.forEach(t),gUo=r(H7e," \u2014 "),HV=n(H7e,"A",{href:!0});var Pmt=s(HV);hUo=r(Pmt,"UniSpeechSatForCTC"),Pmt.forEach(t),uUo=r(H7e," (UniSpeechSat model)"),H7e.forEach(t),pUo=i(Fo),FT=n(Fo,"LI",{});var U7e=s(FT);gue=n(U7e,"STRONG",{});var Imt=s(gue);_Uo=r(Imt,"wav2vec2"),Imt.forEach(t),bUo=r(U7e," \u2014 "),UV=n(U7e,"A",{href:!0});var qmt=s(UV);FUo=r(qmt,"Wav2Vec2ForCTC"),qmt.forEach(t),vUo=r(U7e," (Wav2Vec2 model)"),U7e.forEach(t),TUo=i(Fo),vT=n(Fo,"LI",{});var J7e=s(vT);hue=n(J7e,"STRONG",{});var Nmt=s(hue);MUo=r(Nmt,"wavlm"),Nmt.forEach(t),EUo=r(J7e," \u2014 "),JV=n(J7e,"A",{href:!0});var jmt=s(JV);CUo=r(jmt,"WavLMForCTC"),jmt.forEach(t),wUo=r(J7e," (WavLM model)"),J7e.forEach(t),Fo.forEach(t),AUo=i(ha),TT=n(ha,"P",{});var Y7e=s(TT);yUo=r(Y7e,"The model is set in evaluation mode by default using "),uue=n(Y7e,"CODE",{});var Dmt=s(uue);LUo=r(Dmt,"model.eval()"),Dmt.forEach(t),xUo=r(Y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(Y7e,"CODE",{});var Gmt=s(pue);$Uo=r(Gmt,"model.train()"),Gmt.forEach(t),Y7e.forEach(t),kUo=i(ha),T(MT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),HPe=i(m),ud=n(m,"H2",{class:!0});var Kqe=s(ud);ET=n(Kqe,"A",{id:!0,class:!0,href:!0});var Omt=s(ET);_ue=n(Omt,"SPAN",{});var Vmt=s(_ue);T(jL.$$.fragment,Vmt),Vmt.forEach(t),Omt.forEach(t),SUo=i(Kqe),bue=n(Kqe,"SPAN",{});var Xmt=s(bue);RUo=r(Xmt,"AutoModelForSpeechSeq2Seq"),Xmt.forEach(t),Kqe.forEach(t),UPe=i(m),Xo=n(m,"DIV",{class:!0});var rl=s(Xo);T(DL.$$.fragment,rl),BUo=i(rl),pd=n(rl,"P",{});var TK=s(pd);PUo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YV=n(TK,"A",{href:!0});var zmt=s(YV);IUo=r(zmt,"from_pretrained()"),zmt.forEach(t),qUo=r(TK," class method or the "),KV=n(TK,"A",{href:!0});var Qmt=s(KV);NUo=r(Qmt,"from_config()"),Qmt.forEach(t),jUo=r(TK,` class
method.`),TK.forEach(t),DUo=i(rl),GL=n(rl,"P",{});var Zqe=s(GL);GUo=r(Zqe,"This class cannot be instantiated directly using "),Fue=n(Zqe,"CODE",{});var Wmt=s(Fue);OUo=r(Wmt,"__init__()"),Wmt.forEach(t),VUo=r(Zqe," (throws an error)."),Zqe.forEach(t),XUo=i(rl),bt=n(rl,"DIV",{class:!0});var E0=s(bt);T(OL.$$.fragment,E0),zUo=i(E0),vue=n(E0,"P",{});var Hmt=s(vue);QUo=r(Hmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hmt.forEach(t),WUo=i(E0),_d=n(E0,"P",{});var MK=s(_d);HUo=r(MK,`Note:
Loading a model from its configuration file does `),Tue=n(MK,"STRONG",{});var Umt=s(Tue);UUo=r(Umt,"not"),Umt.forEach(t),JUo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(MK,"A",{href:!0});var Jmt=s(ZV);YUo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),KUo=r(MK," to load the model weights."),MK.forEach(t),ZUo=i(E0),T(CT.$$.fragment,E0),E0.forEach(t),eJo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(VL.$$.fragment,ua),oJo=i(ua),Mue=n(ua,"P",{});var Ymt=s(Mue);rJo=r(Ymt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ymt.forEach(t),tJo=i(ua),Va=n(ua,"P",{});var C0=s(Va);aJo=r(C0,"The model class to instantiate is selected based on the "),Eue=n(C0,"CODE",{});var Kmt=s(Eue);nJo=r(Kmt,"model_type"),Kmt.forEach(t),sJo=r(C0,` property of the config object (either
passed as an argument or loaded from `),Cue=n(C0,"CODE",{});var Zmt=s(Cue);lJo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),iJo=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(C0,"CODE",{});var eft=s(wue);dJo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),cJo=r(C0,":"),C0.forEach(t),mJo=i(ua),XL=n(ua,"UL",{});var eNe=s(XL);wT=n(eNe,"LI",{});var K7e=s(wT);Aue=n(K7e,"STRONG",{});var oft=s(Aue);fJo=r(oft,"speech-encoder-decoder"),oft.forEach(t),gJo=r(K7e," \u2014 "),eX=n(K7e,"A",{href:!0});var rft=s(eX);hJo=r(rft,"SpeechEncoderDecoderModel"),rft.forEach(t),uJo=r(K7e," (Speech Encoder decoder model)"),K7e.forEach(t),pJo=i(eNe),AT=n(eNe,"LI",{});var Z7e=s(AT);yue=n(Z7e,"STRONG",{});var tft=s(yue);_Jo=r(tft,"speech_to_text"),tft.forEach(t),bJo=r(Z7e," \u2014 "),oX=n(Z7e,"A",{href:!0});var aft=s(oX);FJo=r(aft,"Speech2TextForConditionalGeneration"),aft.forEach(t),vJo=r(Z7e," (Speech2Text model)"),Z7e.forEach(t),eNe.forEach(t),TJo=i(ua),yT=n(ua,"P",{});var e9e=s(yT);MJo=r(e9e,"The model is set in evaluation mode by default using "),Lue=n(e9e,"CODE",{});var nft=s(Lue);EJo=r(nft,"model.eval()"),nft.forEach(t),CJo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(e9e,"CODE",{});var sft=s(xue);wJo=r(sft,"model.train()"),sft.forEach(t),e9e.forEach(t),AJo=i(ua),T(LT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),JPe=i(m),bd=n(m,"H2",{class:!0});var oNe=s(bd);xT=n(oNe,"A",{id:!0,class:!0,href:!0});var lft=s(xT);$ue=n(lft,"SPAN",{});var ift=s($ue);T(zL.$$.fragment,ift),ift.forEach(t),lft.forEach(t),yJo=i(oNe),kue=n(oNe,"SPAN",{});var dft=s(kue);LJo=r(dft,"AutoModelForAudioXVector"),dft.forEach(t),oNe.forEach(t),YPe=i(m),zo=n(m,"DIV",{class:!0});var tl=s(zo);T(QL.$$.fragment,tl),xJo=i(tl),Fd=n(tl,"P",{});var EK=s(Fd);$Jo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rX=n(EK,"A",{href:!0});var cft=s(rX);kJo=r(cft,"from_pretrained()"),cft.forEach(t),SJo=r(EK," class method or the "),tX=n(EK,"A",{href:!0});var mft=s(tX);RJo=r(mft,"from_config()"),mft.forEach(t),BJo=r(EK,` class
method.`),EK.forEach(t),PJo=i(tl),WL=n(tl,"P",{});var rNe=s(WL);IJo=r(rNe,"This class cannot be instantiated directly using "),Sue=n(rNe,"CODE",{});var fft=s(Sue);qJo=r(fft,"__init__()"),fft.forEach(t),NJo=r(rNe," (throws an error)."),rNe.forEach(t),jJo=i(tl),Ft=n(tl,"DIV",{class:!0});var w0=s(Ft);T(HL.$$.fragment,w0),DJo=i(w0),Rue=n(w0,"P",{});var gft=s(Rue);GJo=r(gft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gft.forEach(t),OJo=i(w0),vd=n(w0,"P",{});var CK=s(vd);VJo=r(CK,`Note:
Loading a model from its configuration file does `),Bue=n(CK,"STRONG",{});var hft=s(Bue);XJo=r(hft,"not"),hft.forEach(t),zJo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(CK,"A",{href:!0});var uft=s(aX);QJo=r(uft,"from_pretrained()"),uft.forEach(t),WJo=r(CK," to load the model weights."),CK.forEach(t),HJo=i(w0),T($T.$$.fragment,w0),w0.forEach(t),UJo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(UL.$$.fragment,pa),JJo=i(pa),Pue=n(pa,"P",{});var pft=s(Pue);YJo=r(pft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pft.forEach(t),KJo=i(pa),Xa=n(pa,"P",{});var A0=s(Xa);ZJo=r(A0,"The model class to instantiate is selected based on the "),Iue=n(A0,"CODE",{});var _ft=s(Iue);eYo=r(_ft,"model_type"),_ft.forEach(t),oYo=r(A0,` property of the config object (either
passed as an argument or loaded from `),que=n(A0,"CODE",{});var bft=s(que);rYo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),tYo=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(A0,"CODE",{});var Fft=s(Nue);aYo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),nYo=r(A0,":"),A0.forEach(t),sYo=i(pa),za=n(pa,"UL",{});var y0=s(za);kT=n(y0,"LI",{});var o9e=s(kT);jue=n(o9e,"STRONG",{});var vft=s(jue);lYo=r(vft,"data2vec-audio"),vft.forEach(t),iYo=r(o9e," \u2014 "),nX=n(o9e,"A",{href:!0});var Tft=s(nX);dYo=r(Tft,"Data2VecAudioForXVector"),Tft.forEach(t),cYo=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),mYo=i(y0),ST=n(y0,"LI",{});var r9e=s(ST);Due=n(r9e,"STRONG",{});var Mft=s(Due);fYo=r(Mft,"unispeech-sat"),Mft.forEach(t),gYo=r(r9e," \u2014 "),sX=n(r9e,"A",{href:!0});var Eft=s(sX);hYo=r(Eft,"UniSpeechSatForXVector"),Eft.forEach(t),uYo=r(r9e," (UniSpeechSat model)"),r9e.forEach(t),pYo=i(y0),RT=n(y0,"LI",{});var t9e=s(RT);Gue=n(t9e,"STRONG",{});var Cft=s(Gue);_Yo=r(Cft,"wav2vec2"),Cft.forEach(t),bYo=r(t9e," \u2014 "),lX=n(t9e,"A",{href:!0});var wft=s(lX);FYo=r(wft,"Wav2Vec2ForXVector"),wft.forEach(t),vYo=r(t9e," (Wav2Vec2 model)"),t9e.forEach(t),TYo=i(y0),BT=n(y0,"LI",{});var a9e=s(BT);Oue=n(a9e,"STRONG",{});var Aft=s(Oue);MYo=r(Aft,"wavlm"),Aft.forEach(t),EYo=r(a9e," \u2014 "),iX=n(a9e,"A",{href:!0});var yft=s(iX);CYo=r(yft,"WavLMForXVector"),yft.forEach(t),wYo=r(a9e," (WavLM model)"),a9e.forEach(t),y0.forEach(t),AYo=i(pa),PT=n(pa,"P",{});var n9e=s(PT);yYo=r(n9e,"The model is set in evaluation mode by default using "),Vue=n(n9e,"CODE",{});var Lft=s(Vue);LYo=r(Lft,"model.eval()"),Lft.forEach(t),xYo=r(n9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(n9e,"CODE",{});var xft=s(Xue);$Yo=r(xft,"model.train()"),xft.forEach(t),n9e.forEach(t),kYo=i(pa),T(IT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),KPe=i(m),Td=n(m,"H2",{class:!0});var tNe=s(Td);qT=n(tNe,"A",{id:!0,class:!0,href:!0});var $ft=s(qT);zue=n($ft,"SPAN",{});var kft=s(zue);T(JL.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),SYo=i(tNe),Que=n(tNe,"SPAN",{});var Sft=s(Que);RYo=r(Sft,"AutoModelForMaskedImageModeling"),Sft.forEach(t),tNe.forEach(t),ZPe=i(m),Qo=n(m,"DIV",{class:!0});var al=s(Qo);T(YL.$$.fragment,al),BYo=i(al),Md=n(al,"P",{});var wK=s(Md);PYo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dX=n(wK,"A",{href:!0});var Rft=s(dX);IYo=r(Rft,"from_pretrained()"),Rft.forEach(t),qYo=r(wK," class method or the "),cX=n(wK,"A",{href:!0});var Bft=s(cX);NYo=r(Bft,"from_config()"),Bft.forEach(t),jYo=r(wK,` class
method.`),wK.forEach(t),DYo=i(al),KL=n(al,"P",{});var aNe=s(KL);GYo=r(aNe,"This class cannot be instantiated directly using "),Wue=n(aNe,"CODE",{});var Pft=s(Wue);OYo=r(Pft,"__init__()"),Pft.forEach(t),VYo=r(aNe," (throws an error)."),aNe.forEach(t),XYo=i(al),vt=n(al,"DIV",{class:!0});var L0=s(vt);T(ZL.$$.fragment,L0),zYo=i(L0),Hue=n(L0,"P",{});var Ift=s(Hue);QYo=r(Ift,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ift.forEach(t),WYo=i(L0),Ed=n(L0,"P",{});var AK=s(Ed);HYo=r(AK,`Note:
Loading a model from its configuration file does `),Uue=n(AK,"STRONG",{});var qft=s(Uue);UYo=r(qft,"not"),qft.forEach(t),JYo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(AK,"A",{href:!0});var Nft=s(mX);YYo=r(Nft,"from_pretrained()"),Nft.forEach(t),KYo=r(AK," to load the model weights."),AK.forEach(t),ZYo=i(L0),T(NT.$$.fragment,L0),L0.forEach(t),eKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(e8.$$.fragment,_a),oKo=i(_a),Jue=n(_a,"P",{});var jft=s(Jue);rKo=r(jft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jft.forEach(t),tKo=i(_a),Qa=n(_a,"P",{});var x0=s(Qa);aKo=r(x0,"The model class to instantiate is selected based on the "),Yue=n(x0,"CODE",{});var Dft=s(Yue);nKo=r(Dft,"model_type"),Dft.forEach(t),sKo=r(x0,` property of the config object (either
passed as an argument or loaded from `),Kue=n(x0,"CODE",{});var Gft=s(Kue);lKo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),iKo=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(x0,"CODE",{});var Oft=s(Zue);dKo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),cKo=r(x0,":"),x0.forEach(t),mKo=i(_a),Cd=n(_a,"UL",{});var yK=s(Cd);jT=n(yK,"LI",{});var s9e=s(jT);epe=n(s9e,"STRONG",{});var Vft=s(epe);fKo=r(Vft,"deit"),Vft.forEach(t),gKo=r(s9e," \u2014 "),fX=n(s9e,"A",{href:!0});var Xft=s(fX);hKo=r(Xft,"DeiTForMaskedImageModeling"),Xft.forEach(t),uKo=r(s9e," (DeiT model)"),s9e.forEach(t),pKo=i(yK),DT=n(yK,"LI",{});var l9e=s(DT);ope=n(l9e,"STRONG",{});var zft=s(ope);_Ko=r(zft,"swin"),zft.forEach(t),bKo=r(l9e," \u2014 "),gX=n(l9e,"A",{href:!0});var Qft=s(gX);FKo=r(Qft,"SwinForMaskedImageModeling"),Qft.forEach(t),vKo=r(l9e," (Swin model)"),l9e.forEach(t),TKo=i(yK),GT=n(yK,"LI",{});var i9e=s(GT);rpe=n(i9e,"STRONG",{});var Wft=s(rpe);MKo=r(Wft,"vit"),Wft.forEach(t),EKo=r(i9e," \u2014 "),hX=n(i9e,"A",{href:!0});var Hft=s(hX);CKo=r(Hft,"ViTForMaskedImageModeling"),Hft.forEach(t),wKo=r(i9e," (ViT model)"),i9e.forEach(t),yK.forEach(t),AKo=i(_a),OT=n(_a,"P",{});var d9e=s(OT);yKo=r(d9e,"The model is set in evaluation mode by default using "),tpe=n(d9e,"CODE",{});var Uft=s(tpe);LKo=r(Uft,"model.eval()"),Uft.forEach(t),xKo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(d9e,"CODE",{});var Jft=s(ape);$Ko=r(Jft,"model.train()"),Jft.forEach(t),d9e.forEach(t),kKo=i(_a),T(VT.$$.fragment,_a),_a.forEach(t),al.forEach(t),eIe=i(m),wd=n(m,"H2",{class:!0});var nNe=s(wd);XT=n(nNe,"A",{id:!0,class:!0,href:!0});var Yft=s(XT);npe=n(Yft,"SPAN",{});var Kft=s(npe);T(o8.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),SKo=i(nNe),spe=n(nNe,"SPAN",{});var Zft=s(spe);RKo=r(Zft,"AutoModelForObjectDetection"),Zft.forEach(t),nNe.forEach(t),oIe=i(m),Wo=n(m,"DIV",{class:!0});var nl=s(Wo);T(r8.$$.fragment,nl),BKo=i(nl),Ad=n(nl,"P",{});var LK=s(Ad);PKo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uX=n(LK,"A",{href:!0});var egt=s(uX);IKo=r(egt,"from_pretrained()"),egt.forEach(t),qKo=r(LK," class method or the "),pX=n(LK,"A",{href:!0});var ogt=s(pX);NKo=r(ogt,"from_config()"),ogt.forEach(t),jKo=r(LK,` class
method.`),LK.forEach(t),DKo=i(nl),t8=n(nl,"P",{});var sNe=s(t8);GKo=r(sNe,"This class cannot be instantiated directly using "),lpe=n(sNe,"CODE",{});var rgt=s(lpe);OKo=r(rgt,"__init__()"),rgt.forEach(t),VKo=r(sNe," (throws an error)."),sNe.forEach(t),XKo=i(nl),Tt=n(nl,"DIV",{class:!0});var $0=s(Tt);T(a8.$$.fragment,$0),zKo=i($0),ipe=n($0,"P",{});var tgt=s(ipe);QKo=r(tgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tgt.forEach(t),WKo=i($0),yd=n($0,"P",{});var xK=s(yd);HKo=r(xK,`Note:
Loading a model from its configuration file does `),dpe=n(xK,"STRONG",{});var agt=s(dpe);UKo=r(agt,"not"),agt.forEach(t),JKo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(xK,"A",{href:!0});var ngt=s(_X);YKo=r(ngt,"from_pretrained()"),ngt.forEach(t),KKo=r(xK," to load the model weights."),xK.forEach(t),ZKo=i($0),T(zT.$$.fragment,$0),$0.forEach(t),eZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(n8.$$.fragment,ba),oZo=i(ba),cpe=n(ba,"P",{});var sgt=s(cpe);rZo=r(sgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sgt.forEach(t),tZo=i(ba),Wa=n(ba,"P",{});var k0=s(Wa);aZo=r(k0,"The model class to instantiate is selected based on the "),mpe=n(k0,"CODE",{});var lgt=s(mpe);nZo=r(lgt,"model_type"),lgt.forEach(t),sZo=r(k0,` property of the config object (either
passed as an argument or loaded from `),fpe=n(k0,"CODE",{});var igt=s(fpe);lZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),iZo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(k0,"CODE",{});var dgt=s(gpe);dZo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),cZo=r(k0,":"),k0.forEach(t),mZo=i(ba),s8=n(ba,"UL",{});var lNe=s(s8);QT=n(lNe,"LI",{});var c9e=s(QT);hpe=n(c9e,"STRONG",{});var cgt=s(hpe);fZo=r(cgt,"detr"),cgt.forEach(t),gZo=r(c9e," \u2014 "),bX=n(c9e,"A",{href:!0});var mgt=s(bX);hZo=r(mgt,"DetrForObjectDetection"),mgt.forEach(t),uZo=r(c9e," (DETR model)"),c9e.forEach(t),pZo=i(lNe),WT=n(lNe,"LI",{});var m9e=s(WT);upe=n(m9e,"STRONG",{});var fgt=s(upe);_Zo=r(fgt,"yolos"),fgt.forEach(t),bZo=r(m9e," \u2014 "),FX=n(m9e,"A",{href:!0});var ggt=s(FX);FZo=r(ggt,"YolosForObjectDetection"),ggt.forEach(t),vZo=r(m9e," (YOLOS model)"),m9e.forEach(t),lNe.forEach(t),TZo=i(ba),HT=n(ba,"P",{});var f9e=s(HT);MZo=r(f9e,"The model is set in evaluation mode by default using "),ppe=n(f9e,"CODE",{});var hgt=s(ppe);EZo=r(hgt,"model.eval()"),hgt.forEach(t),CZo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(f9e,"CODE",{});var ugt=s(_pe);wZo=r(ugt,"model.train()"),ugt.forEach(t),f9e.forEach(t),AZo=i(ba),T(UT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),rIe=i(m),Ld=n(m,"H2",{class:!0});var iNe=s(Ld);JT=n(iNe,"A",{id:!0,class:!0,href:!0});var pgt=s(JT);bpe=n(pgt,"SPAN",{});var _gt=s(bpe);T(l8.$$.fragment,_gt),_gt.forEach(t),pgt.forEach(t),yZo=i(iNe),Fpe=n(iNe,"SPAN",{});var bgt=s(Fpe);LZo=r(bgt,"AutoModelForImageSegmentation"),bgt.forEach(t),iNe.forEach(t),tIe=i(m),Ho=n(m,"DIV",{class:!0});var sl=s(Ho);T(i8.$$.fragment,sl),xZo=i(sl),xd=n(sl,"P",{});var $K=s(xd);$Zo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vX=n($K,"A",{href:!0});var Fgt=s(vX);kZo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),SZo=r($K," class method or the "),TX=n($K,"A",{href:!0});var vgt=s(TX);RZo=r(vgt,"from_config()"),vgt.forEach(t),BZo=r($K,` class
method.`),$K.forEach(t),PZo=i(sl),d8=n(sl,"P",{});var dNe=s(d8);IZo=r(dNe,"This class cannot be instantiated directly using "),vpe=n(dNe,"CODE",{});var Tgt=s(vpe);qZo=r(Tgt,"__init__()"),Tgt.forEach(t),NZo=r(dNe," (throws an error)."),dNe.forEach(t),jZo=i(sl),Mt=n(sl,"DIV",{class:!0});var S0=s(Mt);T(c8.$$.fragment,S0),DZo=i(S0),Tpe=n(S0,"P",{});var Mgt=s(Tpe);GZo=r(Mgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mgt.forEach(t),OZo=i(S0),$d=n(S0,"P",{});var kK=s($d);VZo=r(kK,`Note:
Loading a model from its configuration file does `),Mpe=n(kK,"STRONG",{});var Egt=s(Mpe);XZo=r(Egt,"not"),Egt.forEach(t),zZo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(kK,"A",{href:!0});var Cgt=s(MX);QZo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),WZo=r(kK," to load the model weights."),kK.forEach(t),HZo=i(S0),T(YT.$$.fragment,S0),S0.forEach(t),UZo=i(sl),uo=n(sl,"DIV",{class:!0});var Fa=s(uo);T(m8.$$.fragment,Fa),JZo=i(Fa),Epe=n(Fa,"P",{});var wgt=s(Epe);YZo=r(wgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wgt.forEach(t),KZo=i(Fa),Ha=n(Fa,"P",{});var R0=s(Ha);ZZo=r(R0,"The model class to instantiate is selected based on the "),Cpe=n(R0,"CODE",{});var Agt=s(Cpe);eer=r(Agt,"model_type"),Agt.forEach(t),oer=r(R0,` property of the config object (either
passed as an argument or loaded from `),wpe=n(R0,"CODE",{});var ygt=s(wpe);rer=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ter=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(R0,"CODE",{});var Lgt=s(Ape);aer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),ner=r(R0,":"),R0.forEach(t),ser=i(Fa),ype=n(Fa,"UL",{});var xgt=s(ype);KT=n(xgt,"LI",{});var g9e=s(KT);Lpe=n(g9e,"STRONG",{});var $gt=s(Lpe);ler=r($gt,"detr"),$gt.forEach(t),ier=r(g9e," \u2014 "),EX=n(g9e,"A",{href:!0});var kgt=s(EX);der=r(kgt,"DetrForSegmentation"),kgt.forEach(t),cer=r(g9e," (DETR model)"),g9e.forEach(t),xgt.forEach(t),mer=i(Fa),ZT=n(Fa,"P",{});var h9e=s(ZT);fer=r(h9e,"The model is set in evaluation mode by default using "),xpe=n(h9e,"CODE",{});var Sgt=s(xpe);ger=r(Sgt,"model.eval()"),Sgt.forEach(t),her=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(h9e,"CODE",{});var Rgt=s($pe);uer=r(Rgt,"model.train()"),Rgt.forEach(t),h9e.forEach(t),per=i(Fa),T(eM.$$.fragment,Fa),Fa.forEach(t),sl.forEach(t),aIe=i(m),kd=n(m,"H2",{class:!0});var cNe=s(kd);oM=n(cNe,"A",{id:!0,class:!0,href:!0});var Bgt=s(oM);kpe=n(Bgt,"SPAN",{});var Pgt=s(kpe);T(f8.$$.fragment,Pgt),Pgt.forEach(t),Bgt.forEach(t),_er=i(cNe),Spe=n(cNe,"SPAN",{});var Igt=s(Spe);ber=r(Igt,"AutoModelForSemanticSegmentation"),Igt.forEach(t),cNe.forEach(t),nIe=i(m),Uo=n(m,"DIV",{class:!0});var ll=s(Uo);T(g8.$$.fragment,ll),Fer=i(ll),Sd=n(ll,"P",{});var SK=s(Sd);ver=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CX=n(SK,"A",{href:!0});var qgt=s(CX);Ter=r(qgt,"from_pretrained()"),qgt.forEach(t),Mer=r(SK," class method or the "),wX=n(SK,"A",{href:!0});var Ngt=s(wX);Eer=r(Ngt,"from_config()"),Ngt.forEach(t),Cer=r(SK,` class
method.`),SK.forEach(t),wer=i(ll),h8=n(ll,"P",{});var mNe=s(h8);Aer=r(mNe,"This class cannot be instantiated directly using "),Rpe=n(mNe,"CODE",{});var jgt=s(Rpe);yer=r(jgt,"__init__()"),jgt.forEach(t),Ler=r(mNe," (throws an error)."),mNe.forEach(t),xer=i(ll),Et=n(ll,"DIV",{class:!0});var B0=s(Et);T(u8.$$.fragment,B0),$er=i(B0),Bpe=n(B0,"P",{});var Dgt=s(Bpe);ker=r(Dgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dgt.forEach(t),Ser=i(B0),Rd=n(B0,"P",{});var RK=s(Rd);Rer=r(RK,`Note:
Loading a model from its configuration file does `),Ppe=n(RK,"STRONG",{});var Ggt=s(Ppe);Ber=r(Ggt,"not"),Ggt.forEach(t),Per=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(RK,"A",{href:!0});var Ogt=s(AX);Ier=r(Ogt,"from_pretrained()"),Ogt.forEach(t),qer=r(RK," to load the model weights."),RK.forEach(t),Ner=i(B0),T(rM.$$.fragment,B0),B0.forEach(t),jer=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(p8.$$.fragment,va),Der=i(va),Ipe=n(va,"P",{});var Vgt=s(Ipe);Ger=r(Vgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vgt.forEach(t),Oer=i(va),Ua=n(va,"P",{});var P0=s(Ua);Ver=r(P0,"The model class to instantiate is selected based on the "),qpe=n(P0,"CODE",{});var Xgt=s(qpe);Xer=r(Xgt,"model_type"),Xgt.forEach(t),zer=r(P0,` property of the config object (either
passed as an argument or loaded from `),Npe=n(P0,"CODE",{});var zgt=s(Npe);Qer=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),Wer=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(P0,"CODE",{});var Qgt=s(jpe);Her=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),Uer=r(P0,":"),P0.forEach(t),Jer=i(va),Ja=n(va,"UL",{});var I0=s(Ja);tM=n(I0,"LI",{});var u9e=s(tM);Dpe=n(u9e,"STRONG",{});var Wgt=s(Dpe);Yer=r(Wgt,"beit"),Wgt.forEach(t),Ker=r(u9e," \u2014 "),yX=n(u9e,"A",{href:!0});var Hgt=s(yX);Zer=r(Hgt,"BeitForSemanticSegmentation"),Hgt.forEach(t),eor=r(u9e," (BEiT model)"),u9e.forEach(t),oor=i(I0),aM=n(I0,"LI",{});var p9e=s(aM);Gpe=n(p9e,"STRONG",{});var Ugt=s(Gpe);ror=r(Ugt,"data2vec-vision"),Ugt.forEach(t),tor=r(p9e," \u2014 "),LX=n(p9e,"A",{href:!0});var Jgt=s(LX);aor=r(Jgt,"Data2VecVisionForSemanticSegmentation"),Jgt.forEach(t),nor=r(p9e," (Data2VecVision model)"),p9e.forEach(t),sor=i(I0),nM=n(I0,"LI",{});var _9e=s(nM);Ope=n(_9e,"STRONG",{});var Ygt=s(Ope);lor=r(Ygt,"dpt"),Ygt.forEach(t),ior=r(_9e," \u2014 "),xX=n(_9e,"A",{href:!0});var Kgt=s(xX);dor=r(Kgt,"DPTForSemanticSegmentation"),Kgt.forEach(t),cor=r(_9e," (DPT model)"),_9e.forEach(t),mor=i(I0),sM=n(I0,"LI",{});var b9e=s(sM);Vpe=n(b9e,"STRONG",{});var Zgt=s(Vpe);gor=r(Zgt,"segformer"),Zgt.forEach(t),hor=r(b9e," \u2014 "),$X=n(b9e,"A",{href:!0});var eht=s($X);uor=r(eht,"SegformerForSemanticSegmentation"),eht.forEach(t),por=r(b9e," (SegFormer model)"),b9e.forEach(t),I0.forEach(t),_or=i(va),lM=n(va,"P",{});var F9e=s(lM);bor=r(F9e,"The model is set in evaluation mode by default using "),Xpe=n(F9e,"CODE",{});var oht=s(Xpe);For=r(oht,"model.eval()"),oht.forEach(t),vor=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(F9e,"CODE",{});var rht=s(zpe);Tor=r(rht,"model.train()"),rht.forEach(t),F9e.forEach(t),Mor=i(va),T(iM.$$.fragment,va),va.forEach(t),ll.forEach(t),sIe=i(m),Bd=n(m,"H2",{class:!0});var fNe=s(Bd);dM=n(fNe,"A",{id:!0,class:!0,href:!0});var tht=s(dM);Qpe=n(tht,"SPAN",{});var aht=s(Qpe);T(_8.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Eor=i(fNe),Wpe=n(fNe,"SPAN",{});var nht=s(Wpe);Cor=r(nht,"AutoModelForInstanceSegmentation"),nht.forEach(t),fNe.forEach(t),lIe=i(m),Jo=n(m,"DIV",{class:!0});var il=s(Jo);T(b8.$$.fragment,il),wor=i(il),Pd=n(il,"P",{});var BK=s(Pd);Aor=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kX=n(BK,"A",{href:!0});var sht=s(kX);yor=r(sht,"from_pretrained()"),sht.forEach(t),Lor=r(BK," class method or the "),SX=n(BK,"A",{href:!0});var lht=s(SX);xor=r(lht,"from_config()"),lht.forEach(t),$or=r(BK,` class
method.`),BK.forEach(t),kor=i(il),F8=n(il,"P",{});var gNe=s(F8);Sor=r(gNe,"This class cannot be instantiated directly using "),Hpe=n(gNe,"CODE",{});var iht=s(Hpe);Ror=r(iht,"__init__()"),iht.forEach(t),Bor=r(gNe," (throws an error)."),gNe.forEach(t),Por=i(il),Ct=n(il,"DIV",{class:!0});var q0=s(Ct);T(v8.$$.fragment,q0),Ior=i(q0),Upe=n(q0,"P",{});var dht=s(Upe);qor=r(dht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dht.forEach(t),Nor=i(q0),Id=n(q0,"P",{});var PK=s(Id);jor=r(PK,`Note:
Loading a model from its configuration file does `),Jpe=n(PK,"STRONG",{});var cht=s(Jpe);Dor=r(cht,"not"),cht.forEach(t),Gor=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(PK,"A",{href:!0});var mht=s(RX);Oor=r(mht,"from_pretrained()"),mht.forEach(t),Vor=r(PK," to load the model weights."),PK.forEach(t),Xor=i(q0),T(cM.$$.fragment,q0),q0.forEach(t),zor=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(T8.$$.fragment,Ta),Qor=i(Ta),Ype=n(Ta,"P",{});var fht=s(Ype);Wor=r(fht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fht.forEach(t),Hor=i(Ta),Ya=n(Ta,"P",{});var N0=s(Ya);Uor=r(N0,"The model class to instantiate is selected based on the "),Kpe=n(N0,"CODE",{});var ght=s(Kpe);Jor=r(ght,"model_type"),ght.forEach(t),Yor=r(N0,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(N0,"CODE",{});var hht=s(Zpe);Kor=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),Zor=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(N0,"CODE",{});var uht=s(e_e);err=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),orr=r(N0,":"),N0.forEach(t),rrr=i(Ta),o_e=n(Ta,"UL",{});var pht=s(o_e);mM=n(pht,"LI",{});var v9e=s(mM);r_e=n(v9e,"STRONG",{});var _ht=s(r_e);trr=r(_ht,"maskformer"),_ht.forEach(t),arr=r(v9e," \u2014 "),BX=n(v9e,"A",{href:!0});var bht=s(BX);nrr=r(bht,"MaskFormerForInstanceSegmentation"),bht.forEach(t),srr=r(v9e," (MaskFormer model)"),v9e.forEach(t),pht.forEach(t),lrr=i(Ta),fM=n(Ta,"P",{});var T9e=s(fM);irr=r(T9e,"The model is set in evaluation mode by default using "),t_e=n(T9e,"CODE",{});var Fht=s(t_e);drr=r(Fht,"model.eval()"),Fht.forEach(t),crr=r(T9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(T9e,"CODE",{});var vht=s(a_e);mrr=r(vht,"model.train()"),vht.forEach(t),T9e.forEach(t),frr=i(Ta),T(gM.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),iIe=i(m),qd=n(m,"H2",{class:!0});var hNe=s(qd);hM=n(hNe,"A",{id:!0,class:!0,href:!0});var Tht=s(hM);n_e=n(Tht,"SPAN",{});var Mht=s(n_e);T(M8.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),grr=i(hNe),s_e=n(hNe,"SPAN",{});var Eht=s(s_e);hrr=r(Eht,"TFAutoModel"),Eht.forEach(t),hNe.forEach(t),dIe=i(m),Yo=n(m,"DIV",{class:!0});var dl=s(Yo);T(E8.$$.fragment,dl),urr=i(dl),Nd=n(dl,"P",{});var IK=s(Nd);prr=r(IK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PX=n(IK,"A",{href:!0});var Cht=s(PX);_rr=r(Cht,"from_pretrained()"),Cht.forEach(t),brr=r(IK," class method or the "),IX=n(IK,"A",{href:!0});var wht=s(IX);Frr=r(wht,"from_config()"),wht.forEach(t),vrr=r(IK,` class
method.`),IK.forEach(t),Trr=i(dl),C8=n(dl,"P",{});var uNe=s(C8);Mrr=r(uNe,"This class cannot be instantiated directly using "),l_e=n(uNe,"CODE",{});var Aht=s(l_e);Err=r(Aht,"__init__()"),Aht.forEach(t),Crr=r(uNe," (throws an error)."),uNe.forEach(t),wrr=i(dl),wt=n(dl,"DIV",{class:!0});var j0=s(wt);T(w8.$$.fragment,j0),Arr=i(j0),i_e=n(j0,"P",{});var yht=s(i_e);yrr=r(yht,"Instantiates one of the base model classes of the library from a configuration."),yht.forEach(t),Lrr=i(j0),jd=n(j0,"P",{});var qK=s(jd);xrr=r(qK,`Note:
Loading a model from its configuration file does `),d_e=n(qK,"STRONG",{});var Lht=s(d_e);$rr=r(Lht,"not"),Lht.forEach(t),krr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(qK,"A",{href:!0});var xht=s(qX);Srr=r(xht,"from_pretrained()"),xht.forEach(t),Rrr=r(qK," to load the model weights."),qK.forEach(t),Brr=i(j0),T(uM.$$.fragment,j0),j0.forEach(t),Prr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(A8.$$.fragment,cl),Irr=i(cl),c_e=n(cl,"P",{});var $ht=s(c_e);qrr=r($ht,"Instantiate one of the base model classes of the library from a pretrained model."),$ht.forEach(t),Nrr=i(cl),Ka=n(cl,"P",{});var D0=s(Ka);jrr=r(D0,"The model class to instantiate is selected based on the "),m_e=n(D0,"CODE",{});var kht=s(m_e);Drr=r(kht,"model_type"),kht.forEach(t),Grr=r(D0,` property of the config object (either
passed as an argument or loaded from `),f_e=n(D0,"CODE",{});var Sht=s(f_e);Orr=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),Vrr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(D0,"CODE",{});var Rht=s(g_e);Xrr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),zrr=r(D0,":"),D0.forEach(t),Qrr=i(cl),j=n(cl,"UL",{});var D=s(j);pM=n(D,"LI",{});var M9e=s(pM);h_e=n(M9e,"STRONG",{});var Bht=s(h_e);Wrr=r(Bht,"albert"),Bht.forEach(t),Hrr=r(M9e," \u2014 "),NX=n(M9e,"A",{href:!0});var Pht=s(NX);Urr=r(Pht,"TFAlbertModel"),Pht.forEach(t),Jrr=r(M9e," (ALBERT model)"),M9e.forEach(t),Yrr=i(D),_M=n(D,"LI",{});var E9e=s(_M);u_e=n(E9e,"STRONG",{});var Iht=s(u_e);Krr=r(Iht,"bart"),Iht.forEach(t),Zrr=r(E9e," \u2014 "),jX=n(E9e,"A",{href:!0});var qht=s(jX);etr=r(qht,"TFBartModel"),qht.forEach(t),otr=r(E9e," (BART model)"),E9e.forEach(t),rtr=i(D),bM=n(D,"LI",{});var C9e=s(bM);p_e=n(C9e,"STRONG",{});var Nht=s(p_e);ttr=r(Nht,"bert"),Nht.forEach(t),atr=r(C9e," \u2014 "),DX=n(C9e,"A",{href:!0});var jht=s(DX);ntr=r(jht,"TFBertModel"),jht.forEach(t),str=r(C9e," (BERT model)"),C9e.forEach(t),ltr=i(D),FM=n(D,"LI",{});var w9e=s(FM);__e=n(w9e,"STRONG",{});var Dht=s(__e);itr=r(Dht,"blenderbot"),Dht.forEach(t),dtr=r(w9e," \u2014 "),GX=n(w9e,"A",{href:!0});var Ght=s(GX);ctr=r(Ght,"TFBlenderbotModel"),Ght.forEach(t),mtr=r(w9e," (Blenderbot model)"),w9e.forEach(t),ftr=i(D),vM=n(D,"LI",{});var A9e=s(vM);b_e=n(A9e,"STRONG",{});var Oht=s(b_e);gtr=r(Oht,"blenderbot-small"),Oht.forEach(t),htr=r(A9e," \u2014 "),OX=n(A9e,"A",{href:!0});var Vht=s(OX);utr=r(Vht,"TFBlenderbotSmallModel"),Vht.forEach(t),ptr=r(A9e," (BlenderbotSmall model)"),A9e.forEach(t),_tr=i(D),TM=n(D,"LI",{});var y9e=s(TM);F_e=n(y9e,"STRONG",{});var Xht=s(F_e);btr=r(Xht,"camembert"),Xht.forEach(t),Ftr=r(y9e," \u2014 "),VX=n(y9e,"A",{href:!0});var zht=s(VX);vtr=r(zht,"TFCamembertModel"),zht.forEach(t),Ttr=r(y9e," (CamemBERT model)"),y9e.forEach(t),Mtr=i(D),MM=n(D,"LI",{});var L9e=s(MM);v_e=n(L9e,"STRONG",{});var Qht=s(v_e);Etr=r(Qht,"clip"),Qht.forEach(t),Ctr=r(L9e," \u2014 "),XX=n(L9e,"A",{href:!0});var Wht=s(XX);wtr=r(Wht,"TFCLIPModel"),Wht.forEach(t),Atr=r(L9e," (CLIP model)"),L9e.forEach(t),ytr=i(D),EM=n(D,"LI",{});var x9e=s(EM);T_e=n(x9e,"STRONG",{});var Hht=s(T_e);Ltr=r(Hht,"convbert"),Hht.forEach(t),xtr=r(x9e," \u2014 "),zX=n(x9e,"A",{href:!0});var Uht=s(zX);$tr=r(Uht,"TFConvBertModel"),Uht.forEach(t),ktr=r(x9e," (ConvBERT model)"),x9e.forEach(t),Str=i(D),CM=n(D,"LI",{});var $9e=s(CM);M_e=n($9e,"STRONG",{});var Jht=s(M_e);Rtr=r(Jht,"convnext"),Jht.forEach(t),Btr=r($9e," \u2014 "),QX=n($9e,"A",{href:!0});var Yht=s(QX);Ptr=r(Yht,"TFConvNextModel"),Yht.forEach(t),Itr=r($9e," (ConvNext model)"),$9e.forEach(t),qtr=i(D),wM=n(D,"LI",{});var k9e=s(wM);E_e=n(k9e,"STRONG",{});var Kht=s(E_e);Ntr=r(Kht,"ctrl"),Kht.forEach(t),jtr=r(k9e," \u2014 "),WX=n(k9e,"A",{href:!0});var Zht=s(WX);Dtr=r(Zht,"TFCTRLModel"),Zht.forEach(t),Gtr=r(k9e," (CTRL model)"),k9e.forEach(t),Otr=i(D),AM=n(D,"LI",{});var S9e=s(AM);C_e=n(S9e,"STRONG",{});var eut=s(C_e);Vtr=r(eut,"data2vec-vision"),eut.forEach(t),Xtr=r(S9e," \u2014 "),HX=n(S9e,"A",{href:!0});var out=s(HX);ztr=r(out,"TFData2VecVisionModel"),out.forEach(t),Qtr=r(S9e," (Data2VecVision model)"),S9e.forEach(t),Wtr=i(D),yM=n(D,"LI",{});var R9e=s(yM);w_e=n(R9e,"STRONG",{});var rut=s(w_e);Htr=r(rut,"deberta"),rut.forEach(t),Utr=r(R9e," \u2014 "),UX=n(R9e,"A",{href:!0});var tut=s(UX);Jtr=r(tut,"TFDebertaModel"),tut.forEach(t),Ytr=r(R9e," (DeBERTa model)"),R9e.forEach(t),Ktr=i(D),LM=n(D,"LI",{});var B9e=s(LM);A_e=n(B9e,"STRONG",{});var aut=s(A_e);Ztr=r(aut,"deberta-v2"),aut.forEach(t),ear=r(B9e," \u2014 "),JX=n(B9e,"A",{href:!0});var nut=s(JX);oar=r(nut,"TFDebertaV2Model"),nut.forEach(t),rar=r(B9e," (DeBERTa-v2 model)"),B9e.forEach(t),tar=i(D),xM=n(D,"LI",{});var P9e=s(xM);y_e=n(P9e,"STRONG",{});var sut=s(y_e);aar=r(sut,"distilbert"),sut.forEach(t),nar=r(P9e," \u2014 "),YX=n(P9e,"A",{href:!0});var lut=s(YX);sar=r(lut,"TFDistilBertModel"),lut.forEach(t),lar=r(P9e," (DistilBERT model)"),P9e.forEach(t),iar=i(D),$M=n(D,"LI",{});var I9e=s($M);L_e=n(I9e,"STRONG",{});var iut=s(L_e);dar=r(iut,"dpr"),iut.forEach(t),car=r(I9e," \u2014 "),KX=n(I9e,"A",{href:!0});var dut=s(KX);mar=r(dut,"TFDPRQuestionEncoder"),dut.forEach(t),far=r(I9e," (DPR model)"),I9e.forEach(t),gar=i(D),kM=n(D,"LI",{});var q9e=s(kM);x_e=n(q9e,"STRONG",{});var cut=s(x_e);har=r(cut,"electra"),cut.forEach(t),uar=r(q9e," \u2014 "),ZX=n(q9e,"A",{href:!0});var mut=s(ZX);par=r(mut,"TFElectraModel"),mut.forEach(t),_ar=r(q9e," (ELECTRA model)"),q9e.forEach(t),bar=i(D),SM=n(D,"LI",{});var N9e=s(SM);$_e=n(N9e,"STRONG",{});var fut=s($_e);Far=r(fut,"flaubert"),fut.forEach(t),Tar=r(N9e," \u2014 "),ez=n(N9e,"A",{href:!0});var gut=s(ez);Mar=r(gut,"TFFlaubertModel"),gut.forEach(t),Ear=r(N9e," (FlauBERT model)"),N9e.forEach(t),Car=i(D),Bs=n(D,"LI",{});var t$=s(Bs);k_e=n(t$,"STRONG",{});var hut=s(k_e);war=r(hut,"funnel"),hut.forEach(t),Aar=r(t$," \u2014 "),oz=n(t$,"A",{href:!0});var uut=s(oz);yar=r(uut,"TFFunnelModel"),uut.forEach(t),Lar=r(t$," or "),rz=n(t$,"A",{href:!0});var put=s(rz);xar=r(put,"TFFunnelBaseModel"),put.forEach(t),$ar=r(t$," (Funnel Transformer model)"),t$.forEach(t),kar=i(D),RM=n(D,"LI",{});var j9e=s(RM);S_e=n(j9e,"STRONG",{});var _ut=s(S_e);Sar=r(_ut,"gpt2"),_ut.forEach(t),Rar=r(j9e," \u2014 "),tz=n(j9e,"A",{href:!0});var but=s(tz);Bar=r(but,"TFGPT2Model"),but.forEach(t),Par=r(j9e," (OpenAI GPT-2 model)"),j9e.forEach(t),Iar=i(D),BM=n(D,"LI",{});var D9e=s(BM);R_e=n(D9e,"STRONG",{});var Fut=s(R_e);qar=r(Fut,"gptj"),Fut.forEach(t),Nar=r(D9e," \u2014 "),az=n(D9e,"A",{href:!0});var vut=s(az);jar=r(vut,"TFGPTJModel"),vut.forEach(t),Dar=r(D9e," (GPT-J model)"),D9e.forEach(t),Gar=i(D),PM=n(D,"LI",{});var G9e=s(PM);B_e=n(G9e,"STRONG",{});var Tut=s(B_e);Oar=r(Tut,"hubert"),Tut.forEach(t),Var=r(G9e," \u2014 "),nz=n(G9e,"A",{href:!0});var Mut=s(nz);Xar=r(Mut,"TFHubertModel"),Mut.forEach(t),zar=r(G9e," (Hubert model)"),G9e.forEach(t),Qar=i(D),IM=n(D,"LI",{});var O9e=s(IM);P_e=n(O9e,"STRONG",{});var Eut=s(P_e);War=r(Eut,"layoutlm"),Eut.forEach(t),Har=r(O9e," \u2014 "),sz=n(O9e,"A",{href:!0});var Cut=s(sz);Uar=r(Cut,"TFLayoutLMModel"),Cut.forEach(t),Jar=r(O9e," (LayoutLM model)"),O9e.forEach(t),Yar=i(D),qM=n(D,"LI",{});var V9e=s(qM);I_e=n(V9e,"STRONG",{});var wut=s(I_e);Kar=r(wut,"led"),wut.forEach(t),Zar=r(V9e," \u2014 "),lz=n(V9e,"A",{href:!0});var Aut=s(lz);enr=r(Aut,"TFLEDModel"),Aut.forEach(t),onr=r(V9e," (LED model)"),V9e.forEach(t),rnr=i(D),NM=n(D,"LI",{});var X9e=s(NM);q_e=n(X9e,"STRONG",{});var yut=s(q_e);tnr=r(yut,"longformer"),yut.forEach(t),anr=r(X9e," \u2014 "),iz=n(X9e,"A",{href:!0});var Lut=s(iz);nnr=r(Lut,"TFLongformerModel"),Lut.forEach(t),snr=r(X9e," (Longformer model)"),X9e.forEach(t),lnr=i(D),jM=n(D,"LI",{});var z9e=s(jM);N_e=n(z9e,"STRONG",{});var xut=s(N_e);inr=r(xut,"lxmert"),xut.forEach(t),dnr=r(z9e," \u2014 "),dz=n(z9e,"A",{href:!0});var $ut=s(dz);cnr=r($ut,"TFLxmertModel"),$ut.forEach(t),mnr=r(z9e," (LXMERT model)"),z9e.forEach(t),fnr=i(D),DM=n(D,"LI",{});var Q9e=s(DM);j_e=n(Q9e,"STRONG",{});var kut=s(j_e);gnr=r(kut,"marian"),kut.forEach(t),hnr=r(Q9e," \u2014 "),cz=n(Q9e,"A",{href:!0});var Sut=s(cz);unr=r(Sut,"TFMarianModel"),Sut.forEach(t),pnr=r(Q9e," (Marian model)"),Q9e.forEach(t),_nr=i(D),GM=n(D,"LI",{});var W9e=s(GM);D_e=n(W9e,"STRONG",{});var Rut=s(D_e);bnr=r(Rut,"mbart"),Rut.forEach(t),Fnr=r(W9e," \u2014 "),mz=n(W9e,"A",{href:!0});var But=s(mz);vnr=r(But,"TFMBartModel"),But.forEach(t),Tnr=r(W9e," (mBART model)"),W9e.forEach(t),Mnr=i(D),OM=n(D,"LI",{});var H9e=s(OM);G_e=n(H9e,"STRONG",{});var Put=s(G_e);Enr=r(Put,"mobilebert"),Put.forEach(t),Cnr=r(H9e," \u2014 "),fz=n(H9e,"A",{href:!0});var Iut=s(fz);wnr=r(Iut,"TFMobileBertModel"),Iut.forEach(t),Anr=r(H9e," (MobileBERT model)"),H9e.forEach(t),ynr=i(D),VM=n(D,"LI",{});var U9e=s(VM);O_e=n(U9e,"STRONG",{});var qut=s(O_e);Lnr=r(qut,"mpnet"),qut.forEach(t),xnr=r(U9e," \u2014 "),gz=n(U9e,"A",{href:!0});var Nut=s(gz);$nr=r(Nut,"TFMPNetModel"),Nut.forEach(t),knr=r(U9e," (MPNet model)"),U9e.forEach(t),Snr=i(D),XM=n(D,"LI",{});var J9e=s(XM);V_e=n(J9e,"STRONG",{});var jut=s(V_e);Rnr=r(jut,"mt5"),jut.forEach(t),Bnr=r(J9e," \u2014 "),hz=n(J9e,"A",{href:!0});var Dut=s(hz);Pnr=r(Dut,"TFMT5Model"),Dut.forEach(t),Inr=r(J9e," (mT5 model)"),J9e.forEach(t),qnr=i(D),zM=n(D,"LI",{});var Y9e=s(zM);X_e=n(Y9e,"STRONG",{});var Gut=s(X_e);Nnr=r(Gut,"openai-gpt"),Gut.forEach(t),jnr=r(Y9e," \u2014 "),uz=n(Y9e,"A",{href:!0});var Out=s(uz);Dnr=r(Out,"TFOpenAIGPTModel"),Out.forEach(t),Gnr=r(Y9e," (OpenAI GPT model)"),Y9e.forEach(t),Onr=i(D),QM=n(D,"LI",{});var K9e=s(QM);z_e=n(K9e,"STRONG",{});var Vut=s(z_e);Vnr=r(Vut,"pegasus"),Vut.forEach(t),Xnr=r(K9e," \u2014 "),pz=n(K9e,"A",{href:!0});var Xut=s(pz);znr=r(Xut,"TFPegasusModel"),Xut.forEach(t),Qnr=r(K9e," (Pegasus model)"),K9e.forEach(t),Wnr=i(D),WM=n(D,"LI",{});var Z9e=s(WM);Q_e=n(Z9e,"STRONG",{});var zut=s(Q_e);Hnr=r(zut,"rembert"),zut.forEach(t),Unr=r(Z9e," \u2014 "),_z=n(Z9e,"A",{href:!0});var Qut=s(_z);Jnr=r(Qut,"TFRemBertModel"),Qut.forEach(t),Ynr=r(Z9e," (RemBERT model)"),Z9e.forEach(t),Knr=i(D),HM=n(D,"LI",{});var e$e=s(HM);W_e=n(e$e,"STRONG",{});var Wut=s(W_e);Znr=r(Wut,"roberta"),Wut.forEach(t),esr=r(e$e," \u2014 "),bz=n(e$e,"A",{href:!0});var Hut=s(bz);osr=r(Hut,"TFRobertaModel"),Hut.forEach(t),rsr=r(e$e," (RoBERTa model)"),e$e.forEach(t),tsr=i(D),UM=n(D,"LI",{});var o$e=s(UM);H_e=n(o$e,"STRONG",{});var Uut=s(H_e);asr=r(Uut,"roformer"),Uut.forEach(t),nsr=r(o$e," \u2014 "),Fz=n(o$e,"A",{href:!0});var Jut=s(Fz);ssr=r(Jut,"TFRoFormerModel"),Jut.forEach(t),lsr=r(o$e," (RoFormer model)"),o$e.forEach(t),isr=i(D),JM=n(D,"LI",{});var r$e=s(JM);U_e=n(r$e,"STRONG",{});var Yut=s(U_e);dsr=r(Yut,"speech_to_text"),Yut.forEach(t),csr=r(r$e," \u2014 "),vz=n(r$e,"A",{href:!0});var Kut=s(vz);msr=r(Kut,"TFSpeech2TextModel"),Kut.forEach(t),fsr=r(r$e," (Speech2Text model)"),r$e.forEach(t),gsr=i(D),YM=n(D,"LI",{});var t$e=s(YM);J_e=n(t$e,"STRONG",{});var Zut=s(J_e);hsr=r(Zut,"t5"),Zut.forEach(t),usr=r(t$e," \u2014 "),Tz=n(t$e,"A",{href:!0});var ept=s(Tz);psr=r(ept,"TFT5Model"),ept.forEach(t),_sr=r(t$e," (T5 model)"),t$e.forEach(t),bsr=i(D),KM=n(D,"LI",{});var a$e=s(KM);Y_e=n(a$e,"STRONG",{});var opt=s(Y_e);Fsr=r(opt,"tapas"),opt.forEach(t),vsr=r(a$e," \u2014 "),Mz=n(a$e,"A",{href:!0});var rpt=s(Mz);Tsr=r(rpt,"TFTapasModel"),rpt.forEach(t),Msr=r(a$e," (TAPAS model)"),a$e.forEach(t),Esr=i(D),ZM=n(D,"LI",{});var n$e=s(ZM);K_e=n(n$e,"STRONG",{});var tpt=s(K_e);Csr=r(tpt,"transfo-xl"),tpt.forEach(t),wsr=r(n$e," \u2014 "),Ez=n(n$e,"A",{href:!0});var apt=s(Ez);Asr=r(apt,"TFTransfoXLModel"),apt.forEach(t),ysr=r(n$e," (Transformer-XL model)"),n$e.forEach(t),Lsr=i(D),e4=n(D,"LI",{});var s$e=s(e4);Z_e=n(s$e,"STRONG",{});var npt=s(Z_e);xsr=r(npt,"vit"),npt.forEach(t),$sr=r(s$e," \u2014 "),Cz=n(s$e,"A",{href:!0});var spt=s(Cz);ksr=r(spt,"TFViTModel"),spt.forEach(t),Ssr=r(s$e," (ViT model)"),s$e.forEach(t),Rsr=i(D),o4=n(D,"LI",{});var l$e=s(o4);ebe=n(l$e,"STRONG",{});var lpt=s(ebe);Bsr=r(lpt,"vit_mae"),lpt.forEach(t),Psr=r(l$e," \u2014 "),wz=n(l$e,"A",{href:!0});var ipt=s(wz);Isr=r(ipt,"TFViTMAEModel"),ipt.forEach(t),qsr=r(l$e," (ViTMAE model)"),l$e.forEach(t),Nsr=i(D),r4=n(D,"LI",{});var i$e=s(r4);obe=n(i$e,"STRONG",{});var dpt=s(obe);jsr=r(dpt,"wav2vec2"),dpt.forEach(t),Dsr=r(i$e," \u2014 "),Az=n(i$e,"A",{href:!0});var cpt=s(Az);Gsr=r(cpt,"TFWav2Vec2Model"),cpt.forEach(t),Osr=r(i$e," (Wav2Vec2 model)"),i$e.forEach(t),Vsr=i(D),t4=n(D,"LI",{});var d$e=s(t4);rbe=n(d$e,"STRONG",{});var mpt=s(rbe);Xsr=r(mpt,"xlm"),mpt.forEach(t),zsr=r(d$e," \u2014 "),yz=n(d$e,"A",{href:!0});var fpt=s(yz);Qsr=r(fpt,"TFXLMModel"),fpt.forEach(t),Wsr=r(d$e," (XLM model)"),d$e.forEach(t),Hsr=i(D),a4=n(D,"LI",{});var c$e=s(a4);tbe=n(c$e,"STRONG",{});var gpt=s(tbe);Usr=r(gpt,"xlm-roberta"),gpt.forEach(t),Jsr=r(c$e," \u2014 "),Lz=n(c$e,"A",{href:!0});var hpt=s(Lz);Ysr=r(hpt,"TFXLMRobertaModel"),hpt.forEach(t),Ksr=r(c$e," (XLM-RoBERTa model)"),c$e.forEach(t),Zsr=i(D),n4=n(D,"LI",{});var m$e=s(n4);abe=n(m$e,"STRONG",{});var upt=s(abe);elr=r(upt,"xlnet"),upt.forEach(t),olr=r(m$e," \u2014 "),xz=n(m$e,"A",{href:!0});var ppt=s(xz);rlr=r(ppt,"TFXLNetModel"),ppt.forEach(t),tlr=r(m$e," (XLNet model)"),m$e.forEach(t),D.forEach(t),alr=i(cl),T(s4.$$.fragment,cl),cl.forEach(t),dl.forEach(t),cIe=i(m),Dd=n(m,"H2",{class:!0});var pNe=s(Dd);l4=n(pNe,"A",{id:!0,class:!0,href:!0});var _pt=s(l4);nbe=n(_pt,"SPAN",{});var bpt=s(nbe);T(y8.$$.fragment,bpt),bpt.forEach(t),_pt.forEach(t),nlr=i(pNe),sbe=n(pNe,"SPAN",{});var Fpt=s(sbe);slr=r(Fpt,"TFAutoModelForPreTraining"),Fpt.forEach(t),pNe.forEach(t),mIe=i(m),Ko=n(m,"DIV",{class:!0});var ml=s(Ko);T(L8.$$.fragment,ml),llr=i(ml),Gd=n(ml,"P",{});var NK=s(Gd);ilr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$z=n(NK,"A",{href:!0});var vpt=s($z);dlr=r(vpt,"from_pretrained()"),vpt.forEach(t),clr=r(NK," class method or the "),kz=n(NK,"A",{href:!0});var Tpt=s(kz);mlr=r(Tpt,"from_config()"),Tpt.forEach(t),flr=r(NK,` class
method.`),NK.forEach(t),glr=i(ml),x8=n(ml,"P",{});var _Ne=s(x8);hlr=r(_Ne,"This class cannot be instantiated directly using "),lbe=n(_Ne,"CODE",{});var Mpt=s(lbe);ulr=r(Mpt,"__init__()"),Mpt.forEach(t),plr=r(_Ne," (throws an error)."),_Ne.forEach(t),_lr=i(ml),At=n(ml,"DIV",{class:!0});var G0=s(At);T($8.$$.fragment,G0),blr=i(G0),ibe=n(G0,"P",{});var Ept=s(ibe);Flr=r(Ept,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ept.forEach(t),vlr=i(G0),Od=n(G0,"P",{});var jK=s(Od);Tlr=r(jK,`Note:
Loading a model from its configuration file does `),dbe=n(jK,"STRONG",{});var Cpt=s(dbe);Mlr=r(Cpt,"not"),Cpt.forEach(t),Elr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(jK,"A",{href:!0});var wpt=s(Sz);Clr=r(wpt,"from_pretrained()"),wpt.forEach(t),wlr=r(jK," to load the model weights."),jK.forEach(t),Alr=i(G0),T(i4.$$.fragment,G0),G0.forEach(t),ylr=i(ml),Ar=n(ml,"DIV",{class:!0});var fl=s(Ar);T(k8.$$.fragment,fl),Llr=i(fl),cbe=n(fl,"P",{});var Apt=s(cbe);xlr=r(Apt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Apt.forEach(t),$lr=i(fl),Za=n(fl,"P",{});var O0=s(Za);klr=r(O0,"The model class to instantiate is selected based on the "),mbe=n(O0,"CODE",{});var ypt=s(mbe);Slr=r(ypt,"model_type"),ypt.forEach(t),Rlr=r(O0,` property of the config object (either
passed as an argument or loaded from `),fbe=n(O0,"CODE",{});var Lpt=s(fbe);Blr=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),Plr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(O0,"CODE",{});var xpt=s(gbe);Ilr=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),qlr=r(O0,":"),O0.forEach(t),Nlr=i(fl),ne=n(fl,"UL",{});var le=s(ne);d4=n(le,"LI",{});var f$e=s(d4);hbe=n(f$e,"STRONG",{});var $pt=s(hbe);jlr=r($pt,"albert"),$pt.forEach(t),Dlr=r(f$e," \u2014 "),Rz=n(f$e,"A",{href:!0});var kpt=s(Rz);Glr=r(kpt,"TFAlbertForPreTraining"),kpt.forEach(t),Olr=r(f$e," (ALBERT model)"),f$e.forEach(t),Vlr=i(le),c4=n(le,"LI",{});var g$e=s(c4);ube=n(g$e,"STRONG",{});var Spt=s(ube);Xlr=r(Spt,"bart"),Spt.forEach(t),zlr=r(g$e," \u2014 "),Bz=n(g$e,"A",{href:!0});var Rpt=s(Bz);Qlr=r(Rpt,"TFBartForConditionalGeneration"),Rpt.forEach(t),Wlr=r(g$e," (BART model)"),g$e.forEach(t),Hlr=i(le),m4=n(le,"LI",{});var h$e=s(m4);pbe=n(h$e,"STRONG",{});var Bpt=s(pbe);Ulr=r(Bpt,"bert"),Bpt.forEach(t),Jlr=r(h$e," \u2014 "),Pz=n(h$e,"A",{href:!0});var Ppt=s(Pz);Ylr=r(Ppt,"TFBertForPreTraining"),Ppt.forEach(t),Klr=r(h$e," (BERT model)"),h$e.forEach(t),Zlr=i(le),f4=n(le,"LI",{});var u$e=s(f4);_be=n(u$e,"STRONG",{});var Ipt=s(_be);eir=r(Ipt,"camembert"),Ipt.forEach(t),oir=r(u$e," \u2014 "),Iz=n(u$e,"A",{href:!0});var qpt=s(Iz);rir=r(qpt,"TFCamembertForMaskedLM"),qpt.forEach(t),tir=r(u$e," (CamemBERT model)"),u$e.forEach(t),air=i(le),g4=n(le,"LI",{});var p$e=s(g4);bbe=n(p$e,"STRONG",{});var Npt=s(bbe);nir=r(Npt,"ctrl"),Npt.forEach(t),sir=r(p$e," \u2014 "),qz=n(p$e,"A",{href:!0});var jpt=s(qz);lir=r(jpt,"TFCTRLLMHeadModel"),jpt.forEach(t),iir=r(p$e," (CTRL model)"),p$e.forEach(t),dir=i(le),h4=n(le,"LI",{});var _$e=s(h4);Fbe=n(_$e,"STRONG",{});var Dpt=s(Fbe);cir=r(Dpt,"distilbert"),Dpt.forEach(t),mir=r(_$e," \u2014 "),Nz=n(_$e,"A",{href:!0});var Gpt=s(Nz);fir=r(Gpt,"TFDistilBertForMaskedLM"),Gpt.forEach(t),gir=r(_$e," (DistilBERT model)"),_$e.forEach(t),hir=i(le),u4=n(le,"LI",{});var b$e=s(u4);vbe=n(b$e,"STRONG",{});var Opt=s(vbe);uir=r(Opt,"electra"),Opt.forEach(t),pir=r(b$e," \u2014 "),jz=n(b$e,"A",{href:!0});var Vpt=s(jz);_ir=r(Vpt,"TFElectraForPreTraining"),Vpt.forEach(t),bir=r(b$e," (ELECTRA model)"),b$e.forEach(t),Fir=i(le),p4=n(le,"LI",{});var F$e=s(p4);Tbe=n(F$e,"STRONG",{});var Xpt=s(Tbe);vir=r(Xpt,"flaubert"),Xpt.forEach(t),Tir=r(F$e," \u2014 "),Dz=n(F$e,"A",{href:!0});var zpt=s(Dz);Mir=r(zpt,"TFFlaubertWithLMHeadModel"),zpt.forEach(t),Eir=r(F$e," (FlauBERT model)"),F$e.forEach(t),Cir=i(le),_4=n(le,"LI",{});var v$e=s(_4);Mbe=n(v$e,"STRONG",{});var Qpt=s(Mbe);wir=r(Qpt,"funnel"),Qpt.forEach(t),Air=r(v$e," \u2014 "),Gz=n(v$e,"A",{href:!0});var Wpt=s(Gz);yir=r(Wpt,"TFFunnelForPreTraining"),Wpt.forEach(t),Lir=r(v$e," (Funnel Transformer model)"),v$e.forEach(t),xir=i(le),b4=n(le,"LI",{});var T$e=s(b4);Ebe=n(T$e,"STRONG",{});var Hpt=s(Ebe);$ir=r(Hpt,"gpt2"),Hpt.forEach(t),kir=r(T$e," \u2014 "),Oz=n(T$e,"A",{href:!0});var Upt=s(Oz);Sir=r(Upt,"TFGPT2LMHeadModel"),Upt.forEach(t),Rir=r(T$e," (OpenAI GPT-2 model)"),T$e.forEach(t),Bir=i(le),F4=n(le,"LI",{});var M$e=s(F4);Cbe=n(M$e,"STRONG",{});var Jpt=s(Cbe);Pir=r(Jpt,"layoutlm"),Jpt.forEach(t),Iir=r(M$e," \u2014 "),Vz=n(M$e,"A",{href:!0});var Ypt=s(Vz);qir=r(Ypt,"TFLayoutLMForMaskedLM"),Ypt.forEach(t),Nir=r(M$e," (LayoutLM model)"),M$e.forEach(t),jir=i(le),v4=n(le,"LI",{});var E$e=s(v4);wbe=n(E$e,"STRONG",{});var Kpt=s(wbe);Dir=r(Kpt,"lxmert"),Kpt.forEach(t),Gir=r(E$e," \u2014 "),Xz=n(E$e,"A",{href:!0});var Zpt=s(Xz);Oir=r(Zpt,"TFLxmertForPreTraining"),Zpt.forEach(t),Vir=r(E$e," (LXMERT model)"),E$e.forEach(t),Xir=i(le),T4=n(le,"LI",{});var C$e=s(T4);Abe=n(C$e,"STRONG",{});var e_t=s(Abe);zir=r(e_t,"mobilebert"),e_t.forEach(t),Qir=r(C$e," \u2014 "),zz=n(C$e,"A",{href:!0});var o_t=s(zz);Wir=r(o_t,"TFMobileBertForPreTraining"),o_t.forEach(t),Hir=r(C$e," (MobileBERT model)"),C$e.forEach(t),Uir=i(le),M4=n(le,"LI",{});var w$e=s(M4);ybe=n(w$e,"STRONG",{});var r_t=s(ybe);Jir=r(r_t,"mpnet"),r_t.forEach(t),Yir=r(w$e," \u2014 "),Qz=n(w$e,"A",{href:!0});var t_t=s(Qz);Kir=r(t_t,"TFMPNetForMaskedLM"),t_t.forEach(t),Zir=r(w$e," (MPNet model)"),w$e.forEach(t),edr=i(le),E4=n(le,"LI",{});var A$e=s(E4);Lbe=n(A$e,"STRONG",{});var a_t=s(Lbe);odr=r(a_t,"openai-gpt"),a_t.forEach(t),rdr=r(A$e," \u2014 "),Wz=n(A$e,"A",{href:!0});var n_t=s(Wz);tdr=r(n_t,"TFOpenAIGPTLMHeadModel"),n_t.forEach(t),adr=r(A$e," (OpenAI GPT model)"),A$e.forEach(t),ndr=i(le),C4=n(le,"LI",{});var y$e=s(C4);xbe=n(y$e,"STRONG",{});var s_t=s(xbe);sdr=r(s_t,"roberta"),s_t.forEach(t),ldr=r(y$e," \u2014 "),Hz=n(y$e,"A",{href:!0});var l_t=s(Hz);idr=r(l_t,"TFRobertaForMaskedLM"),l_t.forEach(t),ddr=r(y$e," (RoBERTa model)"),y$e.forEach(t),cdr=i(le),w4=n(le,"LI",{});var L$e=s(w4);$be=n(L$e,"STRONG",{});var i_t=s($be);mdr=r(i_t,"t5"),i_t.forEach(t),fdr=r(L$e," \u2014 "),Uz=n(L$e,"A",{href:!0});var d_t=s(Uz);gdr=r(d_t,"TFT5ForConditionalGeneration"),d_t.forEach(t),hdr=r(L$e," (T5 model)"),L$e.forEach(t),udr=i(le),A4=n(le,"LI",{});var x$e=s(A4);kbe=n(x$e,"STRONG",{});var c_t=s(kbe);pdr=r(c_t,"tapas"),c_t.forEach(t),_dr=r(x$e," \u2014 "),Jz=n(x$e,"A",{href:!0});var m_t=s(Jz);bdr=r(m_t,"TFTapasForMaskedLM"),m_t.forEach(t),Fdr=r(x$e," (TAPAS model)"),x$e.forEach(t),vdr=i(le),y4=n(le,"LI",{});var $$e=s(y4);Sbe=n($$e,"STRONG",{});var f_t=s(Sbe);Tdr=r(f_t,"transfo-xl"),f_t.forEach(t),Mdr=r($$e," \u2014 "),Yz=n($$e,"A",{href:!0});var g_t=s(Yz);Edr=r(g_t,"TFTransfoXLLMHeadModel"),g_t.forEach(t),Cdr=r($$e," (Transformer-XL model)"),$$e.forEach(t),wdr=i(le),L4=n(le,"LI",{});var k$e=s(L4);Rbe=n(k$e,"STRONG",{});var h_t=s(Rbe);Adr=r(h_t,"vit_mae"),h_t.forEach(t),ydr=r(k$e," \u2014 "),Kz=n(k$e,"A",{href:!0});var u_t=s(Kz);Ldr=r(u_t,"TFViTMAEForPreTraining"),u_t.forEach(t),xdr=r(k$e," (ViTMAE model)"),k$e.forEach(t),$dr=i(le),x4=n(le,"LI",{});var S$e=s(x4);Bbe=n(S$e,"STRONG",{});var p_t=s(Bbe);kdr=r(p_t,"xlm"),p_t.forEach(t),Sdr=r(S$e," \u2014 "),Zz=n(S$e,"A",{href:!0});var __t=s(Zz);Rdr=r(__t,"TFXLMWithLMHeadModel"),__t.forEach(t),Bdr=r(S$e," (XLM model)"),S$e.forEach(t),Pdr=i(le),$4=n(le,"LI",{});var R$e=s($4);Pbe=n(R$e,"STRONG",{});var b_t=s(Pbe);Idr=r(b_t,"xlm-roberta"),b_t.forEach(t),qdr=r(R$e," \u2014 "),eQ=n(R$e,"A",{href:!0});var F_t=s(eQ);Ndr=r(F_t,"TFXLMRobertaForMaskedLM"),F_t.forEach(t),jdr=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),Ddr=i(le),k4=n(le,"LI",{});var B$e=s(k4);Ibe=n(B$e,"STRONG",{});var v_t=s(Ibe);Gdr=r(v_t,"xlnet"),v_t.forEach(t),Odr=r(B$e," \u2014 "),oQ=n(B$e,"A",{href:!0});var T_t=s(oQ);Vdr=r(T_t,"TFXLNetLMHeadModel"),T_t.forEach(t),Xdr=r(B$e," (XLNet model)"),B$e.forEach(t),le.forEach(t),zdr=i(fl),T(S4.$$.fragment,fl),fl.forEach(t),ml.forEach(t),fIe=i(m),Vd=n(m,"H2",{class:!0});var bNe=s(Vd);R4=n(bNe,"A",{id:!0,class:!0,href:!0});var M_t=s(R4);qbe=n(M_t,"SPAN",{});var E_t=s(qbe);T(S8.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Qdr=i(bNe),Nbe=n(bNe,"SPAN",{});var C_t=s(Nbe);Wdr=r(C_t,"TFAutoModelForCausalLM"),C_t.forEach(t),bNe.forEach(t),gIe=i(m),Zo=n(m,"DIV",{class:!0});var gl=s(Zo);T(R8.$$.fragment,gl),Hdr=i(gl),Xd=n(gl,"P",{});var DK=s(Xd);Udr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rQ=n(DK,"A",{href:!0});var w_t=s(rQ);Jdr=r(w_t,"from_pretrained()"),w_t.forEach(t),Ydr=r(DK," class method or the "),tQ=n(DK,"A",{href:!0});var A_t=s(tQ);Kdr=r(A_t,"from_config()"),A_t.forEach(t),Zdr=r(DK,` class
method.`),DK.forEach(t),ecr=i(gl),B8=n(gl,"P",{});var FNe=s(B8);ocr=r(FNe,"This class cannot be instantiated directly using "),jbe=n(FNe,"CODE",{});var y_t=s(jbe);rcr=r(y_t,"__init__()"),y_t.forEach(t),tcr=r(FNe," (throws an error)."),FNe.forEach(t),acr=i(gl),yt=n(gl,"DIV",{class:!0});var V0=s(yt);T(P8.$$.fragment,V0),ncr=i(V0),Dbe=n(V0,"P",{});var L_t=s(Dbe);scr=r(L_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L_t.forEach(t),lcr=i(V0),zd=n(V0,"P",{});var GK=s(zd);icr=r(GK,`Note:
Loading a model from its configuration file does `),Gbe=n(GK,"STRONG",{});var x_t=s(Gbe);dcr=r(x_t,"not"),x_t.forEach(t),ccr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(GK,"A",{href:!0});var $_t=s(aQ);mcr=r($_t,"from_pretrained()"),$_t.forEach(t),fcr=r(GK," to load the model weights."),GK.forEach(t),gcr=i(V0),T(B4.$$.fragment,V0),V0.forEach(t),hcr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(I8.$$.fragment,hl),ucr=i(hl),Obe=n(hl,"P",{});var k_t=s(Obe);pcr=r(k_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k_t.forEach(t),_cr=i(hl),en=n(hl,"P",{});var X0=s(en);bcr=r(X0,"The model class to instantiate is selected based on the "),Vbe=n(X0,"CODE",{});var S_t=s(Vbe);Fcr=r(S_t,"model_type"),S_t.forEach(t),vcr=r(X0,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(X0,"CODE",{});var R_t=s(Xbe);Tcr=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),Mcr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(X0,"CODE",{});var B_t=s(zbe);Ecr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Ccr=r(X0,":"),X0.forEach(t),wcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);P4=n(Ce,"LI",{});var P$e=s(P4);Qbe=n(P$e,"STRONG",{});var P_t=s(Qbe);Acr=r(P_t,"bert"),P_t.forEach(t),ycr=r(P$e," \u2014 "),nQ=n(P$e,"A",{href:!0});var I_t=s(nQ);Lcr=r(I_t,"TFBertLMHeadModel"),I_t.forEach(t),xcr=r(P$e," (BERT model)"),P$e.forEach(t),$cr=i(Ce),I4=n(Ce,"LI",{});var I$e=s(I4);Wbe=n(I$e,"STRONG",{});var q_t=s(Wbe);kcr=r(q_t,"camembert"),q_t.forEach(t),Scr=r(I$e," \u2014 "),sQ=n(I$e,"A",{href:!0});var N_t=s(sQ);Rcr=r(N_t,"TFCamembertForCausalLM"),N_t.forEach(t),Bcr=r(I$e," (CamemBERT model)"),I$e.forEach(t),Pcr=i(Ce),q4=n(Ce,"LI",{});var q$e=s(q4);Hbe=n(q$e,"STRONG",{});var j_t=s(Hbe);Icr=r(j_t,"ctrl"),j_t.forEach(t),qcr=r(q$e," \u2014 "),lQ=n(q$e,"A",{href:!0});var D_t=s(lQ);Ncr=r(D_t,"TFCTRLLMHeadModel"),D_t.forEach(t),jcr=r(q$e," (CTRL model)"),q$e.forEach(t),Dcr=i(Ce),N4=n(Ce,"LI",{});var N$e=s(N4);Ube=n(N$e,"STRONG",{});var G_t=s(Ube);Gcr=r(G_t,"gpt2"),G_t.forEach(t),Ocr=r(N$e," \u2014 "),iQ=n(N$e,"A",{href:!0});var O_t=s(iQ);Vcr=r(O_t,"TFGPT2LMHeadModel"),O_t.forEach(t),Xcr=r(N$e," (OpenAI GPT-2 model)"),N$e.forEach(t),zcr=i(Ce),j4=n(Ce,"LI",{});var j$e=s(j4);Jbe=n(j$e,"STRONG",{});var V_t=s(Jbe);Qcr=r(V_t,"gptj"),V_t.forEach(t),Wcr=r(j$e," \u2014 "),dQ=n(j$e,"A",{href:!0});var X_t=s(dQ);Hcr=r(X_t,"TFGPTJForCausalLM"),X_t.forEach(t),Ucr=r(j$e," (GPT-J model)"),j$e.forEach(t),Jcr=i(Ce),D4=n(Ce,"LI",{});var D$e=s(D4);Ybe=n(D$e,"STRONG",{});var z_t=s(Ybe);Ycr=r(z_t,"openai-gpt"),z_t.forEach(t),Kcr=r(D$e," \u2014 "),cQ=n(D$e,"A",{href:!0});var Q_t=s(cQ);Zcr=r(Q_t,"TFOpenAIGPTLMHeadModel"),Q_t.forEach(t),emr=r(D$e," (OpenAI GPT model)"),D$e.forEach(t),omr=i(Ce),G4=n(Ce,"LI",{});var G$e=s(G4);Kbe=n(G$e,"STRONG",{});var W_t=s(Kbe);rmr=r(W_t,"rembert"),W_t.forEach(t),tmr=r(G$e," \u2014 "),mQ=n(G$e,"A",{href:!0});var H_t=s(mQ);amr=r(H_t,"TFRemBertForCausalLM"),H_t.forEach(t),nmr=r(G$e," (RemBERT model)"),G$e.forEach(t),smr=i(Ce),O4=n(Ce,"LI",{});var O$e=s(O4);Zbe=n(O$e,"STRONG",{});var U_t=s(Zbe);lmr=r(U_t,"roberta"),U_t.forEach(t),imr=r(O$e," \u2014 "),fQ=n(O$e,"A",{href:!0});var J_t=s(fQ);dmr=r(J_t,"TFRobertaForCausalLM"),J_t.forEach(t),cmr=r(O$e," (RoBERTa model)"),O$e.forEach(t),mmr=i(Ce),V4=n(Ce,"LI",{});var V$e=s(V4);e2e=n(V$e,"STRONG",{});var Y_t=s(e2e);fmr=r(Y_t,"roformer"),Y_t.forEach(t),gmr=r(V$e," \u2014 "),gQ=n(V$e,"A",{href:!0});var K_t=s(gQ);hmr=r(K_t,"TFRoFormerForCausalLM"),K_t.forEach(t),umr=r(V$e," (RoFormer model)"),V$e.forEach(t),pmr=i(Ce),X4=n(Ce,"LI",{});var X$e=s(X4);o2e=n(X$e,"STRONG",{});var Z_t=s(o2e);_mr=r(Z_t,"transfo-xl"),Z_t.forEach(t),bmr=r(X$e," \u2014 "),hQ=n(X$e,"A",{href:!0});var ebt=s(hQ);Fmr=r(ebt,"TFTransfoXLLMHeadModel"),ebt.forEach(t),vmr=r(X$e," (Transformer-XL model)"),X$e.forEach(t),Tmr=i(Ce),z4=n(Ce,"LI",{});var z$e=s(z4);r2e=n(z$e,"STRONG",{});var obt=s(r2e);Mmr=r(obt,"xlm"),obt.forEach(t),Emr=r(z$e," \u2014 "),uQ=n(z$e,"A",{href:!0});var rbt=s(uQ);Cmr=r(rbt,"TFXLMWithLMHeadModel"),rbt.forEach(t),wmr=r(z$e," (XLM model)"),z$e.forEach(t),Amr=i(Ce),Q4=n(Ce,"LI",{});var Q$e=s(Q4);t2e=n(Q$e,"STRONG",{});var tbt=s(t2e);ymr=r(tbt,"xlnet"),tbt.forEach(t),Lmr=r(Q$e," \u2014 "),pQ=n(Q$e,"A",{href:!0});var abt=s(pQ);xmr=r(abt,"TFXLNetLMHeadModel"),abt.forEach(t),$mr=r(Q$e," (XLNet model)"),Q$e.forEach(t),Ce.forEach(t),kmr=i(hl),T(W4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),hIe=i(m),Qd=n(m,"H2",{class:!0});var vNe=s(Qd);H4=n(vNe,"A",{id:!0,class:!0,href:!0});var nbt=s(H4);a2e=n(nbt,"SPAN",{});var sbt=s(a2e);T(q8.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),Smr=i(vNe),n2e=n(vNe,"SPAN",{});var lbt=s(n2e);Rmr=r(lbt,"TFAutoModelForImageClassification"),lbt.forEach(t),vNe.forEach(t),uIe=i(m),er=n(m,"DIV",{class:!0});var ul=s(er);T(N8.$$.fragment,ul),Bmr=i(ul),Wd=n(ul,"P",{});var OK=s(Wd);Pmr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=n(OK,"A",{href:!0});var ibt=s(_Q);Imr=r(ibt,"from_pretrained()"),ibt.forEach(t),qmr=r(OK," class method or the "),bQ=n(OK,"A",{href:!0});var dbt=s(bQ);Nmr=r(dbt,"from_config()"),dbt.forEach(t),jmr=r(OK,` class
method.`),OK.forEach(t),Dmr=i(ul),j8=n(ul,"P",{});var TNe=s(j8);Gmr=r(TNe,"This class cannot be instantiated directly using "),s2e=n(TNe,"CODE",{});var cbt=s(s2e);Omr=r(cbt,"__init__()"),cbt.forEach(t),Vmr=r(TNe," (throws an error)."),TNe.forEach(t),Xmr=i(ul),Lt=n(ul,"DIV",{class:!0});var z0=s(Lt);T(D8.$$.fragment,z0),zmr=i(z0),l2e=n(z0,"P",{});var mbt=s(l2e);Qmr=r(mbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mbt.forEach(t),Wmr=i(z0),Hd=n(z0,"P",{});var VK=s(Hd);Hmr=r(VK,`Note:
Loading a model from its configuration file does `),i2e=n(VK,"STRONG",{});var fbt=s(i2e);Umr=r(fbt,"not"),fbt.forEach(t),Jmr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(VK,"A",{href:!0});var gbt=s(FQ);Ymr=r(gbt,"from_pretrained()"),gbt.forEach(t),Kmr=r(VK," to load the model weights."),VK.forEach(t),Zmr=i(z0),T(U4.$$.fragment,z0),z0.forEach(t),efr=i(ul),Lr=n(ul,"DIV",{class:!0});var pl=s(Lr);T(G8.$$.fragment,pl),ofr=i(pl),d2e=n(pl,"P",{});var hbt=s(d2e);rfr=r(hbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hbt.forEach(t),tfr=i(pl),on=n(pl,"P",{});var Q0=s(on);afr=r(Q0,"The model class to instantiate is selected based on the "),c2e=n(Q0,"CODE",{});var ubt=s(c2e);nfr=r(ubt,"model_type"),ubt.forEach(t),sfr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),m2e=n(Q0,"CODE",{});var pbt=s(m2e);lfr=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),ifr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(Q0,"CODE",{});var _bt=s(f2e);dfr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),cfr=r(Q0,":"),Q0.forEach(t),mfr=i(pl),Ud=n(pl,"UL",{});var XK=s(Ud);J4=n(XK,"LI",{});var W$e=s(J4);g2e=n(W$e,"STRONG",{});var bbt=s(g2e);ffr=r(bbt,"convnext"),bbt.forEach(t),gfr=r(W$e," \u2014 "),vQ=n(W$e,"A",{href:!0});var Fbt=s(vQ);hfr=r(Fbt,"TFConvNextForImageClassification"),Fbt.forEach(t),ufr=r(W$e," (ConvNext model)"),W$e.forEach(t),pfr=i(XK),Y4=n(XK,"LI",{});var H$e=s(Y4);h2e=n(H$e,"STRONG",{});var vbt=s(h2e);_fr=r(vbt,"data2vec-vision"),vbt.forEach(t),bfr=r(H$e," \u2014 "),TQ=n(H$e,"A",{href:!0});var Tbt=s(TQ);Ffr=r(Tbt,"TFData2VecVisionForImageClassification"),Tbt.forEach(t),vfr=r(H$e," (Data2VecVision model)"),H$e.forEach(t),Tfr=i(XK),K4=n(XK,"LI",{});var U$e=s(K4);u2e=n(U$e,"STRONG",{});var Mbt=s(u2e);Mfr=r(Mbt,"vit"),Mbt.forEach(t),Efr=r(U$e," \u2014 "),MQ=n(U$e,"A",{href:!0});var Ebt=s(MQ);Cfr=r(Ebt,"TFViTForImageClassification"),Ebt.forEach(t),wfr=r(U$e," (ViT model)"),U$e.forEach(t),XK.forEach(t),Afr=i(pl),T(Z4.$$.fragment,pl),pl.forEach(t),ul.forEach(t),pIe=i(m),Jd=n(m,"H2",{class:!0});var MNe=s(Jd);eE=n(MNe,"A",{id:!0,class:!0,href:!0});var Cbt=s(eE);p2e=n(Cbt,"SPAN",{});var wbt=s(p2e);T(O8.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),yfr=i(MNe),_2e=n(MNe,"SPAN",{});var Abt=s(_2e);Lfr=r(Abt,"TFAutoModelForMaskedLM"),Abt.forEach(t),MNe.forEach(t),_Ie=i(m),or=n(m,"DIV",{class:!0});var _l=s(or);T(V8.$$.fragment,_l),xfr=i(_l),Yd=n(_l,"P",{});var zK=s(Yd);$fr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(zK,"A",{href:!0});var ybt=s(EQ);kfr=r(ybt,"from_pretrained()"),ybt.forEach(t),Sfr=r(zK," class method or the "),CQ=n(zK,"A",{href:!0});var Lbt=s(CQ);Rfr=r(Lbt,"from_config()"),Lbt.forEach(t),Bfr=r(zK,` class
method.`),zK.forEach(t),Pfr=i(_l),X8=n(_l,"P",{});var ENe=s(X8);Ifr=r(ENe,"This class cannot be instantiated directly using "),b2e=n(ENe,"CODE",{});var xbt=s(b2e);qfr=r(xbt,"__init__()"),xbt.forEach(t),Nfr=r(ENe," (throws an error)."),ENe.forEach(t),jfr=i(_l),xt=n(_l,"DIV",{class:!0});var W0=s(xt);T(z8.$$.fragment,W0),Dfr=i(W0),F2e=n(W0,"P",{});var $bt=s(F2e);Gfr=r($bt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$bt.forEach(t),Ofr=i(W0),Kd=n(W0,"P",{});var QK=s(Kd);Vfr=r(QK,`Note:
Loading a model from its configuration file does `),v2e=n(QK,"STRONG",{});var kbt=s(v2e);Xfr=r(kbt,"not"),kbt.forEach(t),zfr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(QK,"A",{href:!0});var Sbt=s(wQ);Qfr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),Wfr=r(QK," to load the model weights."),QK.forEach(t),Hfr=i(W0),T(oE.$$.fragment,W0),W0.forEach(t),Ufr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Q8.$$.fragment,bl),Jfr=i(bl),T2e=n(bl,"P",{});var Rbt=s(T2e);Yfr=r(Rbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rbt.forEach(t),Kfr=i(bl),rn=n(bl,"P",{});var H0=s(rn);Zfr=r(H0,"The model class to instantiate is selected based on the "),M2e=n(H0,"CODE",{});var Bbt=s(M2e);egr=r(Bbt,"model_type"),Bbt.forEach(t),ogr=r(H0,` property of the config object (either
passed as an argument or loaded from `),E2e=n(H0,"CODE",{});var Pbt=s(E2e);rgr=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),tgr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(H0,"CODE",{});var Ibt=s(C2e);agr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),ngr=r(H0,":"),H0.forEach(t),sgr=i(bl),ie=n(bl,"UL",{});var me=s(ie);rE=n(me,"LI",{});var J$e=s(rE);w2e=n(J$e,"STRONG",{});var qbt=s(w2e);lgr=r(qbt,"albert"),qbt.forEach(t),igr=r(J$e," \u2014 "),AQ=n(J$e,"A",{href:!0});var Nbt=s(AQ);dgr=r(Nbt,"TFAlbertForMaskedLM"),Nbt.forEach(t),cgr=r(J$e," (ALBERT model)"),J$e.forEach(t),mgr=i(me),tE=n(me,"LI",{});var Y$e=s(tE);A2e=n(Y$e,"STRONG",{});var jbt=s(A2e);fgr=r(jbt,"bert"),jbt.forEach(t),ggr=r(Y$e," \u2014 "),yQ=n(Y$e,"A",{href:!0});var Dbt=s(yQ);hgr=r(Dbt,"TFBertForMaskedLM"),Dbt.forEach(t),ugr=r(Y$e," (BERT model)"),Y$e.forEach(t),pgr=i(me),aE=n(me,"LI",{});var K$e=s(aE);y2e=n(K$e,"STRONG",{});var Gbt=s(y2e);_gr=r(Gbt,"camembert"),Gbt.forEach(t),bgr=r(K$e," \u2014 "),LQ=n(K$e,"A",{href:!0});var Obt=s(LQ);Fgr=r(Obt,"TFCamembertForMaskedLM"),Obt.forEach(t),vgr=r(K$e," (CamemBERT model)"),K$e.forEach(t),Tgr=i(me),nE=n(me,"LI",{});var Z$e=s(nE);L2e=n(Z$e,"STRONG",{});var Vbt=s(L2e);Mgr=r(Vbt,"convbert"),Vbt.forEach(t),Egr=r(Z$e," \u2014 "),xQ=n(Z$e,"A",{href:!0});var Xbt=s(xQ);Cgr=r(Xbt,"TFConvBertForMaskedLM"),Xbt.forEach(t),wgr=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Agr=i(me),sE=n(me,"LI",{});var eke=s(sE);x2e=n(eke,"STRONG",{});var zbt=s(x2e);ygr=r(zbt,"deberta"),zbt.forEach(t),Lgr=r(eke," \u2014 "),$Q=n(eke,"A",{href:!0});var Qbt=s($Q);xgr=r(Qbt,"TFDebertaForMaskedLM"),Qbt.forEach(t),$gr=r(eke," (DeBERTa model)"),eke.forEach(t),kgr=i(me),lE=n(me,"LI",{});var oke=s(lE);$2e=n(oke,"STRONG",{});var Wbt=s($2e);Sgr=r(Wbt,"deberta-v2"),Wbt.forEach(t),Rgr=r(oke," \u2014 "),kQ=n(oke,"A",{href:!0});var Hbt=s(kQ);Bgr=r(Hbt,"TFDebertaV2ForMaskedLM"),Hbt.forEach(t),Pgr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),Igr=i(me),iE=n(me,"LI",{});var rke=s(iE);k2e=n(rke,"STRONG",{});var Ubt=s(k2e);qgr=r(Ubt,"distilbert"),Ubt.forEach(t),Ngr=r(rke," \u2014 "),SQ=n(rke,"A",{href:!0});var Jbt=s(SQ);jgr=r(Jbt,"TFDistilBertForMaskedLM"),Jbt.forEach(t),Dgr=r(rke," (DistilBERT model)"),rke.forEach(t),Ggr=i(me),dE=n(me,"LI",{});var tke=s(dE);S2e=n(tke,"STRONG",{});var Ybt=s(S2e);Ogr=r(Ybt,"electra"),Ybt.forEach(t),Vgr=r(tke," \u2014 "),RQ=n(tke,"A",{href:!0});var Kbt=s(RQ);Xgr=r(Kbt,"TFElectraForMaskedLM"),Kbt.forEach(t),zgr=r(tke," (ELECTRA model)"),tke.forEach(t),Qgr=i(me),cE=n(me,"LI",{});var ake=s(cE);R2e=n(ake,"STRONG",{});var Zbt=s(R2e);Wgr=r(Zbt,"flaubert"),Zbt.forEach(t),Hgr=r(ake," \u2014 "),BQ=n(ake,"A",{href:!0});var e2t=s(BQ);Ugr=r(e2t,"TFFlaubertWithLMHeadModel"),e2t.forEach(t),Jgr=r(ake," (FlauBERT model)"),ake.forEach(t),Ygr=i(me),mE=n(me,"LI",{});var nke=s(mE);B2e=n(nke,"STRONG",{});var o2t=s(B2e);Kgr=r(o2t,"funnel"),o2t.forEach(t),Zgr=r(nke," \u2014 "),PQ=n(nke,"A",{href:!0});var r2t=s(PQ);ehr=r(r2t,"TFFunnelForMaskedLM"),r2t.forEach(t),ohr=r(nke," (Funnel Transformer model)"),nke.forEach(t),rhr=i(me),fE=n(me,"LI",{});var ske=s(fE);P2e=n(ske,"STRONG",{});var t2t=s(P2e);thr=r(t2t,"layoutlm"),t2t.forEach(t),ahr=r(ske," \u2014 "),IQ=n(ske,"A",{href:!0});var a2t=s(IQ);nhr=r(a2t,"TFLayoutLMForMaskedLM"),a2t.forEach(t),shr=r(ske," (LayoutLM model)"),ske.forEach(t),lhr=i(me),gE=n(me,"LI",{});var lke=s(gE);I2e=n(lke,"STRONG",{});var n2t=s(I2e);ihr=r(n2t,"longformer"),n2t.forEach(t),dhr=r(lke," \u2014 "),qQ=n(lke,"A",{href:!0});var s2t=s(qQ);chr=r(s2t,"TFLongformerForMaskedLM"),s2t.forEach(t),mhr=r(lke," (Longformer model)"),lke.forEach(t),fhr=i(me),hE=n(me,"LI",{});var ike=s(hE);q2e=n(ike,"STRONG",{});var l2t=s(q2e);ghr=r(l2t,"mobilebert"),l2t.forEach(t),hhr=r(ike," \u2014 "),NQ=n(ike,"A",{href:!0});var i2t=s(NQ);uhr=r(i2t,"TFMobileBertForMaskedLM"),i2t.forEach(t),phr=r(ike," (MobileBERT model)"),ike.forEach(t),_hr=i(me),uE=n(me,"LI",{});var dke=s(uE);N2e=n(dke,"STRONG",{});var d2t=s(N2e);bhr=r(d2t,"mpnet"),d2t.forEach(t),Fhr=r(dke," \u2014 "),jQ=n(dke,"A",{href:!0});var c2t=s(jQ);vhr=r(c2t,"TFMPNetForMaskedLM"),c2t.forEach(t),Thr=r(dke," (MPNet model)"),dke.forEach(t),Mhr=i(me),pE=n(me,"LI",{});var cke=s(pE);j2e=n(cke,"STRONG",{});var m2t=s(j2e);Ehr=r(m2t,"rembert"),m2t.forEach(t),Chr=r(cke," \u2014 "),DQ=n(cke,"A",{href:!0});var f2t=s(DQ);whr=r(f2t,"TFRemBertForMaskedLM"),f2t.forEach(t),Ahr=r(cke," (RemBERT model)"),cke.forEach(t),yhr=i(me),_E=n(me,"LI",{});var mke=s(_E);D2e=n(mke,"STRONG",{});var g2t=s(D2e);Lhr=r(g2t,"roberta"),g2t.forEach(t),xhr=r(mke," \u2014 "),GQ=n(mke,"A",{href:!0});var h2t=s(GQ);$hr=r(h2t,"TFRobertaForMaskedLM"),h2t.forEach(t),khr=r(mke," (RoBERTa model)"),mke.forEach(t),Shr=i(me),bE=n(me,"LI",{});var fke=s(bE);G2e=n(fke,"STRONG",{});var u2t=s(G2e);Rhr=r(u2t,"roformer"),u2t.forEach(t),Bhr=r(fke," \u2014 "),OQ=n(fke,"A",{href:!0});var p2t=s(OQ);Phr=r(p2t,"TFRoFormerForMaskedLM"),p2t.forEach(t),Ihr=r(fke," (RoFormer model)"),fke.forEach(t),qhr=i(me),FE=n(me,"LI",{});var gke=s(FE);O2e=n(gke,"STRONG",{});var _2t=s(O2e);Nhr=r(_2t,"tapas"),_2t.forEach(t),jhr=r(gke," \u2014 "),VQ=n(gke,"A",{href:!0});var b2t=s(VQ);Dhr=r(b2t,"TFTapasForMaskedLM"),b2t.forEach(t),Ghr=r(gke," (TAPAS model)"),gke.forEach(t),Ohr=i(me),vE=n(me,"LI",{});var hke=s(vE);V2e=n(hke,"STRONG",{});var F2t=s(V2e);Vhr=r(F2t,"xlm"),F2t.forEach(t),Xhr=r(hke," \u2014 "),XQ=n(hke,"A",{href:!0});var v2t=s(XQ);zhr=r(v2t,"TFXLMWithLMHeadModel"),v2t.forEach(t),Qhr=r(hke," (XLM model)"),hke.forEach(t),Whr=i(me),TE=n(me,"LI",{});var uke=s(TE);X2e=n(uke,"STRONG",{});var T2t=s(X2e);Hhr=r(T2t,"xlm-roberta"),T2t.forEach(t),Uhr=r(uke," \u2014 "),zQ=n(uke,"A",{href:!0});var M2t=s(zQ);Jhr=r(M2t,"TFXLMRobertaForMaskedLM"),M2t.forEach(t),Yhr=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),me.forEach(t),Khr=i(bl),T(ME.$$.fragment,bl),bl.forEach(t),_l.forEach(t),bIe=i(m),Zd=n(m,"H2",{class:!0});var CNe=s(Zd);EE=n(CNe,"A",{id:!0,class:!0,href:!0});var E2t=s(EE);z2e=n(E2t,"SPAN",{});var C2t=s(z2e);T(W8.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),Zhr=i(CNe),Q2e=n(CNe,"SPAN",{});var w2t=s(Q2e);eur=r(w2t,"TFAutoModelForSeq2SeqLM"),w2t.forEach(t),CNe.forEach(t),FIe=i(m),rr=n(m,"DIV",{class:!0});var Fl=s(rr);T(H8.$$.fragment,Fl),our=i(Fl),ec=n(Fl,"P",{});var WK=s(ec);rur=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QQ=n(WK,"A",{href:!0});var A2t=s(QQ);tur=r(A2t,"from_pretrained()"),A2t.forEach(t),aur=r(WK," class method or the "),WQ=n(WK,"A",{href:!0});var y2t=s(WQ);nur=r(y2t,"from_config()"),y2t.forEach(t),sur=r(WK,` class
method.`),WK.forEach(t),lur=i(Fl),U8=n(Fl,"P",{});var wNe=s(U8);iur=r(wNe,"This class cannot be instantiated directly using "),W2e=n(wNe,"CODE",{});var L2t=s(W2e);dur=r(L2t,"__init__()"),L2t.forEach(t),cur=r(wNe," (throws an error)."),wNe.forEach(t),mur=i(Fl),$t=n(Fl,"DIV",{class:!0});var U0=s($t);T(J8.$$.fragment,U0),fur=i(U0),H2e=n(U0,"P",{});var x2t=s(H2e);gur=r(x2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x2t.forEach(t),hur=i(U0),oc=n(U0,"P",{});var HK=s(oc);uur=r(HK,`Note:
Loading a model from its configuration file does `),U2e=n(HK,"STRONG",{});var $2t=s(U2e);pur=r($2t,"not"),$2t.forEach(t),_ur=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(HK,"A",{href:!0});var k2t=s(HQ);bur=r(k2t,"from_pretrained()"),k2t.forEach(t),Fur=r(HK," to load the model weights."),HK.forEach(t),vur=i(U0),T(CE.$$.fragment,U0),U0.forEach(t),Tur=i(Fl),$r=n(Fl,"DIV",{class:!0});var vl=s($r);T(Y8.$$.fragment,vl),Mur=i(vl),J2e=n(vl,"P",{});var S2t=s(J2e);Eur=r(S2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S2t.forEach(t),Cur=i(vl),tn=n(vl,"P",{});var J0=s(tn);wur=r(J0,"The model class to instantiate is selected based on the "),Y2e=n(J0,"CODE",{});var R2t=s(Y2e);Aur=r(R2t,"model_type"),R2t.forEach(t),yur=r(J0,` property of the config object (either
passed as an argument or loaded from `),K2e=n(J0,"CODE",{});var B2t=s(K2e);Lur=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),xur=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(J0,"CODE",{});var P2t=s(Z2e);$ur=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),kur=r(J0,":"),J0.forEach(t),Sur=i(vl),ye=n(vl,"UL",{});var Re=s(ye);wE=n(Re,"LI",{});var pke=s(wE);eFe=n(pke,"STRONG",{});var I2t=s(eFe);Rur=r(I2t,"bart"),I2t.forEach(t),Bur=r(pke," \u2014 "),UQ=n(pke,"A",{href:!0});var q2t=s(UQ);Pur=r(q2t,"TFBartForConditionalGeneration"),q2t.forEach(t),Iur=r(pke," (BART model)"),pke.forEach(t),qur=i(Re),AE=n(Re,"LI",{});var _ke=s(AE);oFe=n(_ke,"STRONG",{});var N2t=s(oFe);Nur=r(N2t,"blenderbot"),N2t.forEach(t),jur=r(_ke," \u2014 "),JQ=n(_ke,"A",{href:!0});var j2t=s(JQ);Dur=r(j2t,"TFBlenderbotForConditionalGeneration"),j2t.forEach(t),Gur=r(_ke," (Blenderbot model)"),_ke.forEach(t),Our=i(Re),yE=n(Re,"LI",{});var bke=s(yE);rFe=n(bke,"STRONG",{});var D2t=s(rFe);Vur=r(D2t,"blenderbot-small"),D2t.forEach(t),Xur=r(bke," \u2014 "),YQ=n(bke,"A",{href:!0});var G2t=s(YQ);zur=r(G2t,"TFBlenderbotSmallForConditionalGeneration"),G2t.forEach(t),Qur=r(bke," (BlenderbotSmall model)"),bke.forEach(t),Wur=i(Re),LE=n(Re,"LI",{});var Fke=s(LE);tFe=n(Fke,"STRONG",{});var O2t=s(tFe);Hur=r(O2t,"encoder-decoder"),O2t.forEach(t),Uur=r(Fke," \u2014 "),KQ=n(Fke,"A",{href:!0});var V2t=s(KQ);Jur=r(V2t,"TFEncoderDecoderModel"),V2t.forEach(t),Yur=r(Fke," (Encoder decoder model)"),Fke.forEach(t),Kur=i(Re),xE=n(Re,"LI",{});var vke=s(xE);aFe=n(vke,"STRONG",{});var X2t=s(aFe);Zur=r(X2t,"led"),X2t.forEach(t),epr=r(vke," \u2014 "),ZQ=n(vke,"A",{href:!0});var z2t=s(ZQ);opr=r(z2t,"TFLEDForConditionalGeneration"),z2t.forEach(t),rpr=r(vke," (LED model)"),vke.forEach(t),tpr=i(Re),$E=n(Re,"LI",{});var Tke=s($E);nFe=n(Tke,"STRONG",{});var Q2t=s(nFe);apr=r(Q2t,"marian"),Q2t.forEach(t),npr=r(Tke," \u2014 "),eW=n(Tke,"A",{href:!0});var W2t=s(eW);spr=r(W2t,"TFMarianMTModel"),W2t.forEach(t),lpr=r(Tke," (Marian model)"),Tke.forEach(t),ipr=i(Re),kE=n(Re,"LI",{});var Mke=s(kE);sFe=n(Mke,"STRONG",{});var H2t=s(sFe);dpr=r(H2t,"mbart"),H2t.forEach(t),cpr=r(Mke," \u2014 "),oW=n(Mke,"A",{href:!0});var U2t=s(oW);mpr=r(U2t,"TFMBartForConditionalGeneration"),U2t.forEach(t),fpr=r(Mke," (mBART model)"),Mke.forEach(t),gpr=i(Re),SE=n(Re,"LI",{});var Eke=s(SE);lFe=n(Eke,"STRONG",{});var J2t=s(lFe);hpr=r(J2t,"mt5"),J2t.forEach(t),upr=r(Eke," \u2014 "),rW=n(Eke,"A",{href:!0});var Y2t=s(rW);ppr=r(Y2t,"TFMT5ForConditionalGeneration"),Y2t.forEach(t),_pr=r(Eke," (mT5 model)"),Eke.forEach(t),bpr=i(Re),RE=n(Re,"LI",{});var Cke=s(RE);iFe=n(Cke,"STRONG",{});var K2t=s(iFe);Fpr=r(K2t,"pegasus"),K2t.forEach(t),vpr=r(Cke," \u2014 "),tW=n(Cke,"A",{href:!0});var Z2t=s(tW);Tpr=r(Z2t,"TFPegasusForConditionalGeneration"),Z2t.forEach(t),Mpr=r(Cke," (Pegasus model)"),Cke.forEach(t),Epr=i(Re),BE=n(Re,"LI",{});var wke=s(BE);dFe=n(wke,"STRONG",{});var eFt=s(dFe);Cpr=r(eFt,"t5"),eFt.forEach(t),wpr=r(wke," \u2014 "),aW=n(wke,"A",{href:!0});var oFt=s(aW);Apr=r(oFt,"TFT5ForConditionalGeneration"),oFt.forEach(t),ypr=r(wke," (T5 model)"),wke.forEach(t),Re.forEach(t),Lpr=i(vl),T(PE.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),vIe=i(m),rc=n(m,"H2",{class:!0});var ANe=s(rc);IE=n(ANe,"A",{id:!0,class:!0,href:!0});var rFt=s(IE);cFe=n(rFt,"SPAN",{});var tFt=s(cFe);T(K8.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),xpr=i(ANe),mFe=n(ANe,"SPAN",{});var aFt=s(mFe);$pr=r(aFt,"TFAutoModelForSequenceClassification"),aFt.forEach(t),ANe.forEach(t),TIe=i(m),tr=n(m,"DIV",{class:!0});var Tl=s(tr);T(Z8.$$.fragment,Tl),kpr=i(Tl),tc=n(Tl,"P",{});var UK=s(tc);Spr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nW=n(UK,"A",{href:!0});var nFt=s(nW);Rpr=r(nFt,"from_pretrained()"),nFt.forEach(t),Bpr=r(UK," class method or the "),sW=n(UK,"A",{href:!0});var sFt=s(sW);Ppr=r(sFt,"from_config()"),sFt.forEach(t),Ipr=r(UK,` class
method.`),UK.forEach(t),qpr=i(Tl),ex=n(Tl,"P",{});var yNe=s(ex);Npr=r(yNe,"This class cannot be instantiated directly using "),fFe=n(yNe,"CODE",{});var lFt=s(fFe);jpr=r(lFt,"__init__()"),lFt.forEach(t),Dpr=r(yNe," (throws an error)."),yNe.forEach(t),Gpr=i(Tl),kt=n(Tl,"DIV",{class:!0});var Y0=s(kt);T(ox.$$.fragment,Y0),Opr=i(Y0),gFe=n(Y0,"P",{});var iFt=s(gFe);Vpr=r(iFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iFt.forEach(t),Xpr=i(Y0),ac=n(Y0,"P",{});var JK=s(ac);zpr=r(JK,`Note:
Loading a model from its configuration file does `),hFe=n(JK,"STRONG",{});var dFt=s(hFe);Qpr=r(dFt,"not"),dFt.forEach(t),Wpr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(JK,"A",{href:!0});var cFt=s(lW);Hpr=r(cFt,"from_pretrained()"),cFt.forEach(t),Upr=r(JK," to load the model weights."),JK.forEach(t),Jpr=i(Y0),T(qE.$$.fragment,Y0),Y0.forEach(t),Ypr=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(rx.$$.fragment,Ml),Kpr=i(Ml),uFe=n(Ml,"P",{});var mFt=s(uFe);Zpr=r(mFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mFt.forEach(t),e_r=i(Ml),an=n(Ml,"P",{});var K0=s(an);o_r=r(K0,"The model class to instantiate is selected based on the "),pFe=n(K0,"CODE",{});var fFt=s(pFe);r_r=r(fFt,"model_type"),fFt.forEach(t),t_r=r(K0,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(K0,"CODE",{});var gFt=s(_Fe);a_r=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),n_r=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(K0,"CODE",{});var hFt=s(bFe);s_r=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),l_r=r(K0,":"),K0.forEach(t),i_r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);NE=n(re,"LI",{});var Ake=s(NE);FFe=n(Ake,"STRONG",{});var uFt=s(FFe);d_r=r(uFt,"albert"),uFt.forEach(t),c_r=r(Ake," \u2014 "),iW=n(Ake,"A",{href:!0});var pFt=s(iW);m_r=r(pFt,"TFAlbertForSequenceClassification"),pFt.forEach(t),f_r=r(Ake," (ALBERT model)"),Ake.forEach(t),g_r=i(re),jE=n(re,"LI",{});var yke=s(jE);vFe=n(yke,"STRONG",{});var _Ft=s(vFe);h_r=r(_Ft,"bert"),_Ft.forEach(t),u_r=r(yke," \u2014 "),dW=n(yke,"A",{href:!0});var bFt=s(dW);p_r=r(bFt,"TFBertForSequenceClassification"),bFt.forEach(t),__r=r(yke," (BERT model)"),yke.forEach(t),b_r=i(re),DE=n(re,"LI",{});var Lke=s(DE);TFe=n(Lke,"STRONG",{});var FFt=s(TFe);F_r=r(FFt,"camembert"),FFt.forEach(t),v_r=r(Lke," \u2014 "),cW=n(Lke,"A",{href:!0});var vFt=s(cW);T_r=r(vFt,"TFCamembertForSequenceClassification"),vFt.forEach(t),M_r=r(Lke," (CamemBERT model)"),Lke.forEach(t),E_r=i(re),GE=n(re,"LI",{});var xke=s(GE);MFe=n(xke,"STRONG",{});var TFt=s(MFe);C_r=r(TFt,"convbert"),TFt.forEach(t),w_r=r(xke," \u2014 "),mW=n(xke,"A",{href:!0});var MFt=s(mW);A_r=r(MFt,"TFConvBertForSequenceClassification"),MFt.forEach(t),y_r=r(xke," (ConvBERT model)"),xke.forEach(t),L_r=i(re),OE=n(re,"LI",{});var $ke=s(OE);EFe=n($ke,"STRONG",{});var EFt=s(EFe);x_r=r(EFt,"ctrl"),EFt.forEach(t),$_r=r($ke," \u2014 "),fW=n($ke,"A",{href:!0});var CFt=s(fW);k_r=r(CFt,"TFCTRLForSequenceClassification"),CFt.forEach(t),S_r=r($ke," (CTRL model)"),$ke.forEach(t),R_r=i(re),VE=n(re,"LI",{});var kke=s(VE);CFe=n(kke,"STRONG",{});var wFt=s(CFe);B_r=r(wFt,"deberta"),wFt.forEach(t),P_r=r(kke," \u2014 "),gW=n(kke,"A",{href:!0});var AFt=s(gW);I_r=r(AFt,"TFDebertaForSequenceClassification"),AFt.forEach(t),q_r=r(kke," (DeBERTa model)"),kke.forEach(t),N_r=i(re),XE=n(re,"LI",{});var Ske=s(XE);wFe=n(Ske,"STRONG",{});var yFt=s(wFe);j_r=r(yFt,"deberta-v2"),yFt.forEach(t),D_r=r(Ske," \u2014 "),hW=n(Ske,"A",{href:!0});var LFt=s(hW);G_r=r(LFt,"TFDebertaV2ForSequenceClassification"),LFt.forEach(t),O_r=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),V_r=i(re),zE=n(re,"LI",{});var Rke=s(zE);AFe=n(Rke,"STRONG",{});var xFt=s(AFe);X_r=r(xFt,"distilbert"),xFt.forEach(t),z_r=r(Rke," \u2014 "),uW=n(Rke,"A",{href:!0});var $Ft=s(uW);Q_r=r($Ft,"TFDistilBertForSequenceClassification"),$Ft.forEach(t),W_r=r(Rke," (DistilBERT model)"),Rke.forEach(t),H_r=i(re),QE=n(re,"LI",{});var Bke=s(QE);yFe=n(Bke,"STRONG",{});var kFt=s(yFe);U_r=r(kFt,"electra"),kFt.forEach(t),J_r=r(Bke," \u2014 "),pW=n(Bke,"A",{href:!0});var SFt=s(pW);Y_r=r(SFt,"TFElectraForSequenceClassification"),SFt.forEach(t),K_r=r(Bke," (ELECTRA model)"),Bke.forEach(t),Z_r=i(re),WE=n(re,"LI",{});var Pke=s(WE);LFe=n(Pke,"STRONG",{});var RFt=s(LFe);ebr=r(RFt,"flaubert"),RFt.forEach(t),obr=r(Pke," \u2014 "),_W=n(Pke,"A",{href:!0});var BFt=s(_W);rbr=r(BFt,"TFFlaubertForSequenceClassification"),BFt.forEach(t),tbr=r(Pke," (FlauBERT model)"),Pke.forEach(t),abr=i(re),HE=n(re,"LI",{});var Ike=s(HE);xFe=n(Ike,"STRONG",{});var PFt=s(xFe);nbr=r(PFt,"funnel"),PFt.forEach(t),sbr=r(Ike," \u2014 "),bW=n(Ike,"A",{href:!0});var IFt=s(bW);lbr=r(IFt,"TFFunnelForSequenceClassification"),IFt.forEach(t),ibr=r(Ike," (Funnel Transformer model)"),Ike.forEach(t),dbr=i(re),UE=n(re,"LI",{});var qke=s(UE);$Fe=n(qke,"STRONG",{});var qFt=s($Fe);cbr=r(qFt,"gpt2"),qFt.forEach(t),mbr=r(qke," \u2014 "),FW=n(qke,"A",{href:!0});var NFt=s(FW);fbr=r(NFt,"TFGPT2ForSequenceClassification"),NFt.forEach(t),gbr=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),hbr=i(re),JE=n(re,"LI",{});var Nke=s(JE);kFe=n(Nke,"STRONG",{});var jFt=s(kFe);ubr=r(jFt,"gptj"),jFt.forEach(t),pbr=r(Nke," \u2014 "),vW=n(Nke,"A",{href:!0});var DFt=s(vW);_br=r(DFt,"TFGPTJForSequenceClassification"),DFt.forEach(t),bbr=r(Nke," (GPT-J model)"),Nke.forEach(t),Fbr=i(re),YE=n(re,"LI",{});var jke=s(YE);SFe=n(jke,"STRONG",{});var GFt=s(SFe);vbr=r(GFt,"layoutlm"),GFt.forEach(t),Tbr=r(jke," \u2014 "),TW=n(jke,"A",{href:!0});var OFt=s(TW);Mbr=r(OFt,"TFLayoutLMForSequenceClassification"),OFt.forEach(t),Ebr=r(jke," (LayoutLM model)"),jke.forEach(t),Cbr=i(re),KE=n(re,"LI",{});var Dke=s(KE);RFe=n(Dke,"STRONG",{});var VFt=s(RFe);wbr=r(VFt,"longformer"),VFt.forEach(t),Abr=r(Dke," \u2014 "),MW=n(Dke,"A",{href:!0});var XFt=s(MW);ybr=r(XFt,"TFLongformerForSequenceClassification"),XFt.forEach(t),Lbr=r(Dke," (Longformer model)"),Dke.forEach(t),xbr=i(re),ZE=n(re,"LI",{});var Gke=s(ZE);BFe=n(Gke,"STRONG",{});var zFt=s(BFe);$br=r(zFt,"mobilebert"),zFt.forEach(t),kbr=r(Gke," \u2014 "),EW=n(Gke,"A",{href:!0});var QFt=s(EW);Sbr=r(QFt,"TFMobileBertForSequenceClassification"),QFt.forEach(t),Rbr=r(Gke," (MobileBERT model)"),Gke.forEach(t),Bbr=i(re),e5=n(re,"LI",{});var Oke=s(e5);PFe=n(Oke,"STRONG",{});var WFt=s(PFe);Pbr=r(WFt,"mpnet"),WFt.forEach(t),Ibr=r(Oke," \u2014 "),CW=n(Oke,"A",{href:!0});var HFt=s(CW);qbr=r(HFt,"TFMPNetForSequenceClassification"),HFt.forEach(t),Nbr=r(Oke," (MPNet model)"),Oke.forEach(t),jbr=i(re),o5=n(re,"LI",{});var Vke=s(o5);IFe=n(Vke,"STRONG",{});var UFt=s(IFe);Dbr=r(UFt,"openai-gpt"),UFt.forEach(t),Gbr=r(Vke," \u2014 "),wW=n(Vke,"A",{href:!0});var JFt=s(wW);Obr=r(JFt,"TFOpenAIGPTForSequenceClassification"),JFt.forEach(t),Vbr=r(Vke," (OpenAI GPT model)"),Vke.forEach(t),Xbr=i(re),r5=n(re,"LI",{});var Xke=s(r5);qFe=n(Xke,"STRONG",{});var YFt=s(qFe);zbr=r(YFt,"rembert"),YFt.forEach(t),Qbr=r(Xke," \u2014 "),AW=n(Xke,"A",{href:!0});var KFt=s(AW);Wbr=r(KFt,"TFRemBertForSequenceClassification"),KFt.forEach(t),Hbr=r(Xke," (RemBERT model)"),Xke.forEach(t),Ubr=i(re),t5=n(re,"LI",{});var zke=s(t5);NFe=n(zke,"STRONG",{});var ZFt=s(NFe);Jbr=r(ZFt,"roberta"),ZFt.forEach(t),Ybr=r(zke," \u2014 "),yW=n(zke,"A",{href:!0});var evt=s(yW);Kbr=r(evt,"TFRobertaForSequenceClassification"),evt.forEach(t),Zbr=r(zke," (RoBERTa model)"),zke.forEach(t),e2r=i(re),a5=n(re,"LI",{});var Qke=s(a5);jFe=n(Qke,"STRONG",{});var ovt=s(jFe);o2r=r(ovt,"roformer"),ovt.forEach(t),r2r=r(Qke," \u2014 "),LW=n(Qke,"A",{href:!0});var rvt=s(LW);t2r=r(rvt,"TFRoFormerForSequenceClassification"),rvt.forEach(t),a2r=r(Qke," (RoFormer model)"),Qke.forEach(t),n2r=i(re),n5=n(re,"LI",{});var Wke=s(n5);DFe=n(Wke,"STRONG",{});var tvt=s(DFe);s2r=r(tvt,"tapas"),tvt.forEach(t),l2r=r(Wke," \u2014 "),xW=n(Wke,"A",{href:!0});var avt=s(xW);i2r=r(avt,"TFTapasForSequenceClassification"),avt.forEach(t),d2r=r(Wke," (TAPAS model)"),Wke.forEach(t),c2r=i(re),s5=n(re,"LI",{});var Hke=s(s5);GFe=n(Hke,"STRONG",{});var nvt=s(GFe);m2r=r(nvt,"transfo-xl"),nvt.forEach(t),f2r=r(Hke," \u2014 "),$W=n(Hke,"A",{href:!0});var svt=s($W);g2r=r(svt,"TFTransfoXLForSequenceClassification"),svt.forEach(t),h2r=r(Hke," (Transformer-XL model)"),Hke.forEach(t),u2r=i(re),l5=n(re,"LI",{});var Uke=s(l5);OFe=n(Uke,"STRONG",{});var lvt=s(OFe);p2r=r(lvt,"xlm"),lvt.forEach(t),_2r=r(Uke," \u2014 "),kW=n(Uke,"A",{href:!0});var ivt=s(kW);b2r=r(ivt,"TFXLMForSequenceClassification"),ivt.forEach(t),F2r=r(Uke," (XLM model)"),Uke.forEach(t),v2r=i(re),i5=n(re,"LI",{});var Jke=s(i5);VFe=n(Jke,"STRONG",{});var dvt=s(VFe);T2r=r(dvt,"xlm-roberta"),dvt.forEach(t),M2r=r(Jke," \u2014 "),SW=n(Jke,"A",{href:!0});var cvt=s(SW);E2r=r(cvt,"TFXLMRobertaForSequenceClassification"),cvt.forEach(t),C2r=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),w2r=i(re),d5=n(re,"LI",{});var Yke=s(d5);XFe=n(Yke,"STRONG",{});var mvt=s(XFe);A2r=r(mvt,"xlnet"),mvt.forEach(t),y2r=r(Yke," \u2014 "),RW=n(Yke,"A",{href:!0});var fvt=s(RW);L2r=r(fvt,"TFXLNetForSequenceClassification"),fvt.forEach(t),x2r=r(Yke," (XLNet model)"),Yke.forEach(t),re.forEach(t),$2r=i(Ml),T(c5.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),MIe=i(m),nc=n(m,"H2",{class:!0});var LNe=s(nc);m5=n(LNe,"A",{id:!0,class:!0,href:!0});var gvt=s(m5);zFe=n(gvt,"SPAN",{});var hvt=s(zFe);T(tx.$$.fragment,hvt),hvt.forEach(t),gvt.forEach(t),k2r=i(LNe),QFe=n(LNe,"SPAN",{});var uvt=s(QFe);S2r=r(uvt,"TFAutoModelForMultipleChoice"),uvt.forEach(t),LNe.forEach(t),EIe=i(m),ar=n(m,"DIV",{class:!0});var El=s(ar);T(ax.$$.fragment,El),R2r=i(El),sc=n(El,"P",{});var YK=s(sc);B2r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BW=n(YK,"A",{href:!0});var pvt=s(BW);P2r=r(pvt,"from_pretrained()"),pvt.forEach(t),I2r=r(YK," class method or the "),PW=n(YK,"A",{href:!0});var _vt=s(PW);q2r=r(_vt,"from_config()"),_vt.forEach(t),N2r=r(YK,` class
method.`),YK.forEach(t),j2r=i(El),nx=n(El,"P",{});var xNe=s(nx);D2r=r(xNe,"This class cannot be instantiated directly using "),WFe=n(xNe,"CODE",{});var bvt=s(WFe);G2r=r(bvt,"__init__()"),bvt.forEach(t),O2r=r(xNe," (throws an error)."),xNe.forEach(t),V2r=i(El),St=n(El,"DIV",{class:!0});var Z0=s(St);T(sx.$$.fragment,Z0),X2r=i(Z0),HFe=n(Z0,"P",{});var Fvt=s(HFe);z2r=r(Fvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fvt.forEach(t),Q2r=i(Z0),lc=n(Z0,"P",{});var KK=s(lc);W2r=r(KK,`Note:
Loading a model from its configuration file does `),UFe=n(KK,"STRONG",{});var vvt=s(UFe);H2r=r(vvt,"not"),vvt.forEach(t),U2r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(KK,"A",{href:!0});var Tvt=s(IW);J2r=r(Tvt,"from_pretrained()"),Tvt.forEach(t),Y2r=r(KK," to load the model weights."),KK.forEach(t),K2r=i(Z0),T(f5.$$.fragment,Z0),Z0.forEach(t),Z2r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(lx.$$.fragment,Cl),eFr=i(Cl),JFe=n(Cl,"P",{});var Mvt=s(JFe);oFr=r(Mvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mvt.forEach(t),rFr=i(Cl),nn=n(Cl,"P",{});var e6=s(nn);tFr=r(e6,"The model class to instantiate is selected based on the "),YFe=n(e6,"CODE",{});var Evt=s(YFe);aFr=r(Evt,"model_type"),Evt.forEach(t),nFr=r(e6,` property of the config object (either
passed as an argument or loaded from `),KFe=n(e6,"CODE",{});var Cvt=s(KFe);sFr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),lFr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(e6,"CODE",{});var wvt=s(ZFe);iFr=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),dFr=r(e6,":"),e6.forEach(t),cFr=i(Cl),ue=n(Cl,"UL",{});var _e=s(ue);g5=n(_e,"LI",{});var Kke=s(g5);eve=n(Kke,"STRONG",{});var Avt=s(eve);mFr=r(Avt,"albert"),Avt.forEach(t),fFr=r(Kke," \u2014 "),qW=n(Kke,"A",{href:!0});var yvt=s(qW);gFr=r(yvt,"TFAlbertForMultipleChoice"),yvt.forEach(t),hFr=r(Kke," (ALBERT model)"),Kke.forEach(t),uFr=i(_e),h5=n(_e,"LI",{});var Zke=s(h5);ove=n(Zke,"STRONG",{});var Lvt=s(ove);pFr=r(Lvt,"bert"),Lvt.forEach(t),_Fr=r(Zke," \u2014 "),NW=n(Zke,"A",{href:!0});var xvt=s(NW);bFr=r(xvt,"TFBertForMultipleChoice"),xvt.forEach(t),FFr=r(Zke," (BERT model)"),Zke.forEach(t),vFr=i(_e),u5=n(_e,"LI",{});var eSe=s(u5);rve=n(eSe,"STRONG",{});var $vt=s(rve);TFr=r($vt,"camembert"),$vt.forEach(t),MFr=r(eSe," \u2014 "),jW=n(eSe,"A",{href:!0});var kvt=s(jW);EFr=r(kvt,"TFCamembertForMultipleChoice"),kvt.forEach(t),CFr=r(eSe," (CamemBERT model)"),eSe.forEach(t),wFr=i(_e),p5=n(_e,"LI",{});var oSe=s(p5);tve=n(oSe,"STRONG",{});var Svt=s(tve);AFr=r(Svt,"convbert"),Svt.forEach(t),yFr=r(oSe," \u2014 "),DW=n(oSe,"A",{href:!0});var Rvt=s(DW);LFr=r(Rvt,"TFConvBertForMultipleChoice"),Rvt.forEach(t),xFr=r(oSe," (ConvBERT model)"),oSe.forEach(t),$Fr=i(_e),_5=n(_e,"LI",{});var rSe=s(_5);ave=n(rSe,"STRONG",{});var Bvt=s(ave);kFr=r(Bvt,"distilbert"),Bvt.forEach(t),SFr=r(rSe," \u2014 "),GW=n(rSe,"A",{href:!0});var Pvt=s(GW);RFr=r(Pvt,"TFDistilBertForMultipleChoice"),Pvt.forEach(t),BFr=r(rSe," (DistilBERT model)"),rSe.forEach(t),PFr=i(_e),b5=n(_e,"LI",{});var tSe=s(b5);nve=n(tSe,"STRONG",{});var Ivt=s(nve);IFr=r(Ivt,"electra"),Ivt.forEach(t),qFr=r(tSe," \u2014 "),OW=n(tSe,"A",{href:!0});var qvt=s(OW);NFr=r(qvt,"TFElectraForMultipleChoice"),qvt.forEach(t),jFr=r(tSe," (ELECTRA model)"),tSe.forEach(t),DFr=i(_e),F5=n(_e,"LI",{});var aSe=s(F5);sve=n(aSe,"STRONG",{});var Nvt=s(sve);GFr=r(Nvt,"flaubert"),Nvt.forEach(t),OFr=r(aSe," \u2014 "),VW=n(aSe,"A",{href:!0});var jvt=s(VW);VFr=r(jvt,"TFFlaubertForMultipleChoice"),jvt.forEach(t),XFr=r(aSe," (FlauBERT model)"),aSe.forEach(t),zFr=i(_e),v5=n(_e,"LI",{});var nSe=s(v5);lve=n(nSe,"STRONG",{});var Dvt=s(lve);QFr=r(Dvt,"funnel"),Dvt.forEach(t),WFr=r(nSe," \u2014 "),XW=n(nSe,"A",{href:!0});var Gvt=s(XW);HFr=r(Gvt,"TFFunnelForMultipleChoice"),Gvt.forEach(t),UFr=r(nSe," (Funnel Transformer model)"),nSe.forEach(t),JFr=i(_e),T5=n(_e,"LI",{});var sSe=s(T5);ive=n(sSe,"STRONG",{});var Ovt=s(ive);YFr=r(Ovt,"longformer"),Ovt.forEach(t),KFr=r(sSe," \u2014 "),zW=n(sSe,"A",{href:!0});var Vvt=s(zW);ZFr=r(Vvt,"TFLongformerForMultipleChoice"),Vvt.forEach(t),evr=r(sSe," (Longformer model)"),sSe.forEach(t),ovr=i(_e),M5=n(_e,"LI",{});var lSe=s(M5);dve=n(lSe,"STRONG",{});var Xvt=s(dve);rvr=r(Xvt,"mobilebert"),Xvt.forEach(t),tvr=r(lSe," \u2014 "),QW=n(lSe,"A",{href:!0});var zvt=s(QW);avr=r(zvt,"TFMobileBertForMultipleChoice"),zvt.forEach(t),nvr=r(lSe," (MobileBERT model)"),lSe.forEach(t),svr=i(_e),E5=n(_e,"LI",{});var iSe=s(E5);cve=n(iSe,"STRONG",{});var Qvt=s(cve);lvr=r(Qvt,"mpnet"),Qvt.forEach(t),ivr=r(iSe," \u2014 "),WW=n(iSe,"A",{href:!0});var Wvt=s(WW);dvr=r(Wvt,"TFMPNetForMultipleChoice"),Wvt.forEach(t),cvr=r(iSe," (MPNet model)"),iSe.forEach(t),mvr=i(_e),C5=n(_e,"LI",{});var dSe=s(C5);mve=n(dSe,"STRONG",{});var Hvt=s(mve);fvr=r(Hvt,"rembert"),Hvt.forEach(t),gvr=r(dSe," \u2014 "),HW=n(dSe,"A",{href:!0});var Uvt=s(HW);hvr=r(Uvt,"TFRemBertForMultipleChoice"),Uvt.forEach(t),uvr=r(dSe," (RemBERT model)"),dSe.forEach(t),pvr=i(_e),w5=n(_e,"LI",{});var cSe=s(w5);fve=n(cSe,"STRONG",{});var Jvt=s(fve);_vr=r(Jvt,"roberta"),Jvt.forEach(t),bvr=r(cSe," \u2014 "),UW=n(cSe,"A",{href:!0});var Yvt=s(UW);Fvr=r(Yvt,"TFRobertaForMultipleChoice"),Yvt.forEach(t),vvr=r(cSe," (RoBERTa model)"),cSe.forEach(t),Tvr=i(_e),A5=n(_e,"LI",{});var mSe=s(A5);gve=n(mSe,"STRONG",{});var Kvt=s(gve);Mvr=r(Kvt,"roformer"),Kvt.forEach(t),Evr=r(mSe," \u2014 "),JW=n(mSe,"A",{href:!0});var Zvt=s(JW);Cvr=r(Zvt,"TFRoFormerForMultipleChoice"),Zvt.forEach(t),wvr=r(mSe," (RoFormer model)"),mSe.forEach(t),Avr=i(_e),y5=n(_e,"LI",{});var fSe=s(y5);hve=n(fSe,"STRONG",{});var e1t=s(hve);yvr=r(e1t,"xlm"),e1t.forEach(t),Lvr=r(fSe," \u2014 "),YW=n(fSe,"A",{href:!0});var o1t=s(YW);xvr=r(o1t,"TFXLMForMultipleChoice"),o1t.forEach(t),$vr=r(fSe," (XLM model)"),fSe.forEach(t),kvr=i(_e),L5=n(_e,"LI",{});var gSe=s(L5);uve=n(gSe,"STRONG",{});var r1t=s(uve);Svr=r(r1t,"xlm-roberta"),r1t.forEach(t),Rvr=r(gSe," \u2014 "),KW=n(gSe,"A",{href:!0});var t1t=s(KW);Bvr=r(t1t,"TFXLMRobertaForMultipleChoice"),t1t.forEach(t),Pvr=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),Ivr=i(_e),x5=n(_e,"LI",{});var hSe=s(x5);pve=n(hSe,"STRONG",{});var a1t=s(pve);qvr=r(a1t,"xlnet"),a1t.forEach(t),Nvr=r(hSe," \u2014 "),ZW=n(hSe,"A",{href:!0});var n1t=s(ZW);jvr=r(n1t,"TFXLNetForMultipleChoice"),n1t.forEach(t),Dvr=r(hSe," (XLNet model)"),hSe.forEach(t),_e.forEach(t),Gvr=i(Cl),T($5.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),CIe=i(m),ic=n(m,"H2",{class:!0});var $Ne=s(ic);k5=n($Ne,"A",{id:!0,class:!0,href:!0});var s1t=s(k5);_ve=n(s1t,"SPAN",{});var l1t=s(_ve);T(ix.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),Ovr=i($Ne),bve=n($Ne,"SPAN",{});var i1t=s(bve);Vvr=r(i1t,"TFAutoModelForNextSentencePrediction"),i1t.forEach(t),$Ne.forEach(t),wIe=i(m),nr=n(m,"DIV",{class:!0});var wl=s(nr);T(dx.$$.fragment,wl),Xvr=i(wl),dc=n(wl,"P",{});var ZK=s(dc);zvr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eH=n(ZK,"A",{href:!0});var d1t=s(eH);Qvr=r(d1t,"from_pretrained()"),d1t.forEach(t),Wvr=r(ZK," class method or the "),oH=n(ZK,"A",{href:!0});var c1t=s(oH);Hvr=r(c1t,"from_config()"),c1t.forEach(t),Uvr=r(ZK,` class
method.`),ZK.forEach(t),Jvr=i(wl),cx=n(wl,"P",{});var kNe=s(cx);Yvr=r(kNe,"This class cannot be instantiated directly using "),Fve=n(kNe,"CODE",{});var m1t=s(Fve);Kvr=r(m1t,"__init__()"),m1t.forEach(t),Zvr=r(kNe," (throws an error)."),kNe.forEach(t),e1r=i(wl),Rt=n(wl,"DIV",{class:!0});var o6=s(Rt);T(mx.$$.fragment,o6),o1r=i(o6),vve=n(o6,"P",{});var f1t=s(vve);r1r=r(f1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f1t.forEach(t),t1r=i(o6),cc=n(o6,"P",{});var eZ=s(cc);a1r=r(eZ,`Note:
Loading a model from its configuration file does `),Tve=n(eZ,"STRONG",{});var g1t=s(Tve);n1r=r(g1t,"not"),g1t.forEach(t),s1r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(eZ,"A",{href:!0});var h1t=s(rH);l1r=r(h1t,"from_pretrained()"),h1t.forEach(t),i1r=r(eZ," to load the model weights."),eZ.forEach(t),d1r=i(o6),T(S5.$$.fragment,o6),o6.forEach(t),c1r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(fx.$$.fragment,Al),m1r=i(Al),Mve=n(Al,"P",{});var u1t=s(Mve);f1r=r(u1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u1t.forEach(t),g1r=i(Al),sn=n(Al,"P",{});var r6=s(sn);h1r=r(r6,"The model class to instantiate is selected based on the "),Eve=n(r6,"CODE",{});var p1t=s(Eve);u1r=r(p1t,"model_type"),p1t.forEach(t),p1r=r(r6,` property of the config object (either
passed as an argument or loaded from `),Cve=n(r6,"CODE",{});var _1t=s(Cve);_1r=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),b1r=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(r6,"CODE",{});var b1t=s(wve);F1r=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),v1r=r(r6,":"),r6.forEach(t),T1r=i(Al),gx=n(Al,"UL",{});var SNe=s(gx);R5=n(SNe,"LI",{});var uSe=s(R5);Ave=n(uSe,"STRONG",{});var F1t=s(Ave);M1r=r(F1t,"bert"),F1t.forEach(t),E1r=r(uSe," \u2014 "),tH=n(uSe,"A",{href:!0});var v1t=s(tH);C1r=r(v1t,"TFBertForNextSentencePrediction"),v1t.forEach(t),w1r=r(uSe," (BERT model)"),uSe.forEach(t),A1r=i(SNe),B5=n(SNe,"LI",{});var pSe=s(B5);yve=n(pSe,"STRONG",{});var T1t=s(yve);y1r=r(T1t,"mobilebert"),T1t.forEach(t),L1r=r(pSe," \u2014 "),aH=n(pSe,"A",{href:!0});var M1t=s(aH);x1r=r(M1t,"TFMobileBertForNextSentencePrediction"),M1t.forEach(t),$1r=r(pSe," (MobileBERT model)"),pSe.forEach(t),SNe.forEach(t),k1r=i(Al),T(P5.$$.fragment,Al),Al.forEach(t),wl.forEach(t),AIe=i(m),mc=n(m,"H2",{class:!0});var RNe=s(mc);I5=n(RNe,"A",{id:!0,class:!0,href:!0});var E1t=s(I5);Lve=n(E1t,"SPAN",{});var C1t=s(Lve);T(hx.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),S1r=i(RNe),xve=n(RNe,"SPAN",{});var w1t=s(xve);R1r=r(w1t,"TFAutoModelForTableQuestionAnswering"),w1t.forEach(t),RNe.forEach(t),yIe=i(m),sr=n(m,"DIV",{class:!0});var yl=s(sr);T(ux.$$.fragment,yl),B1r=i(yl),fc=n(yl,"P",{});var oZ=s(fc);P1r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=n(oZ,"A",{href:!0});var A1t=s(nH);I1r=r(A1t,"from_pretrained()"),A1t.forEach(t),q1r=r(oZ," class method or the "),sH=n(oZ,"A",{href:!0});var y1t=s(sH);N1r=r(y1t,"from_config()"),y1t.forEach(t),j1r=r(oZ,` class
method.`),oZ.forEach(t),D1r=i(yl),px=n(yl,"P",{});var BNe=s(px);G1r=r(BNe,"This class cannot be instantiated directly using "),$ve=n(BNe,"CODE",{});var L1t=s($ve);O1r=r(L1t,"__init__()"),L1t.forEach(t),V1r=r(BNe," (throws an error)."),BNe.forEach(t),X1r=i(yl),Bt=n(yl,"DIV",{class:!0});var t6=s(Bt);T(_x.$$.fragment,t6),z1r=i(t6),kve=n(t6,"P",{});var x1t=s(kve);Q1r=r(x1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x1t.forEach(t),W1r=i(t6),gc=n(t6,"P",{});var rZ=s(gc);H1r=r(rZ,`Note:
Loading a model from its configuration file does `),Sve=n(rZ,"STRONG",{});var $1t=s(Sve);U1r=r($1t,"not"),$1t.forEach(t),J1r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(rZ,"A",{href:!0});var k1t=s(lH);Y1r=r(k1t,"from_pretrained()"),k1t.forEach(t),K1r=r(rZ," to load the model weights."),rZ.forEach(t),Z1r=i(t6),T(q5.$$.fragment,t6),t6.forEach(t),eTr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(bx.$$.fragment,Ll),oTr=i(Ll),Rve=n(Ll,"P",{});var S1t=s(Rve);rTr=r(S1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S1t.forEach(t),tTr=i(Ll),ln=n(Ll,"P",{});var a6=s(ln);aTr=r(a6,"The model class to instantiate is selected based on the "),Bve=n(a6,"CODE",{});var R1t=s(Bve);nTr=r(R1t,"model_type"),R1t.forEach(t),sTr=r(a6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(a6,"CODE",{});var B1t=s(Pve);lTr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),iTr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(a6,"CODE",{});var P1t=s(Ive);dTr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),cTr=r(a6,":"),a6.forEach(t),mTr=i(Ll),qve=n(Ll,"UL",{});var I1t=s(qve);N5=n(I1t,"LI",{});var _Se=s(N5);Nve=n(_Se,"STRONG",{});var q1t=s(Nve);fTr=r(q1t,"tapas"),q1t.forEach(t),gTr=r(_Se," \u2014 "),iH=n(_Se,"A",{href:!0});var N1t=s(iH);hTr=r(N1t,"TFTapasForQuestionAnswering"),N1t.forEach(t),uTr=r(_Se," (TAPAS model)"),_Se.forEach(t),I1t.forEach(t),pTr=i(Ll),T(j5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),LIe=i(m),hc=n(m,"H2",{class:!0});var PNe=s(hc);D5=n(PNe,"A",{id:!0,class:!0,href:!0});var j1t=s(D5);jve=n(j1t,"SPAN",{});var D1t=s(jve);T(Fx.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),_Tr=i(PNe),Dve=n(PNe,"SPAN",{});var G1t=s(Dve);bTr=r(G1t,"TFAutoModelForTokenClassification"),G1t.forEach(t),PNe.forEach(t),xIe=i(m),lr=n(m,"DIV",{class:!0});var xl=s(lr);T(vx.$$.fragment,xl),FTr=i(xl),uc=n(xl,"P",{});var tZ=s(uc);vTr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=n(tZ,"A",{href:!0});var O1t=s(dH);TTr=r(O1t,"from_pretrained()"),O1t.forEach(t),MTr=r(tZ," class method or the "),cH=n(tZ,"A",{href:!0});var V1t=s(cH);ETr=r(V1t,"from_config()"),V1t.forEach(t),CTr=r(tZ,` class
method.`),tZ.forEach(t),wTr=i(xl),Tx=n(xl,"P",{});var INe=s(Tx);ATr=r(INe,"This class cannot be instantiated directly using "),Gve=n(INe,"CODE",{});var X1t=s(Gve);yTr=r(X1t,"__init__()"),X1t.forEach(t),LTr=r(INe," (throws an error)."),INe.forEach(t),xTr=i(xl),Pt=n(xl,"DIV",{class:!0});var n6=s(Pt);T(Mx.$$.fragment,n6),$Tr=i(n6),Ove=n(n6,"P",{});var z1t=s(Ove);kTr=r(z1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z1t.forEach(t),STr=i(n6),pc=n(n6,"P",{});var aZ=s(pc);RTr=r(aZ,`Note:
Loading a model from its configuration file does `),Vve=n(aZ,"STRONG",{});var Q1t=s(Vve);BTr=r(Q1t,"not"),Q1t.forEach(t),PTr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(aZ,"A",{href:!0});var W1t=s(mH);ITr=r(W1t,"from_pretrained()"),W1t.forEach(t),qTr=r(aZ," to load the model weights."),aZ.forEach(t),NTr=i(n6),T(G5.$$.fragment,n6),n6.forEach(t),jTr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(Ex.$$.fragment,$l),DTr=i($l),Xve=n($l,"P",{});var H1t=s(Xve);GTr=r(H1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H1t.forEach(t),OTr=i($l),dn=n($l,"P",{});var s6=s(dn);VTr=r(s6,"The model class to instantiate is selected based on the "),zve=n(s6,"CODE",{});var U1t=s(zve);XTr=r(U1t,"model_type"),U1t.forEach(t),zTr=r(s6,` property of the config object (either
passed as an argument or loaded from `),Qve=n(s6,"CODE",{});var J1t=s(Qve);QTr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),WTr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(s6,"CODE",{});var Y1t=s(Wve);HTr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),UTr=r(s6,":"),s6.forEach(t),JTr=i($l),de=n($l,"UL",{});var fe=s(de);O5=n(fe,"LI",{});var bSe=s(O5);Hve=n(bSe,"STRONG",{});var K1t=s(Hve);YTr=r(K1t,"albert"),K1t.forEach(t),KTr=r(bSe," \u2014 "),fH=n(bSe,"A",{href:!0});var Z1t=s(fH);ZTr=r(Z1t,"TFAlbertForTokenClassification"),Z1t.forEach(t),eMr=r(bSe," (ALBERT model)"),bSe.forEach(t),oMr=i(fe),V5=n(fe,"LI",{});var FSe=s(V5);Uve=n(FSe,"STRONG",{});var eTt=s(Uve);rMr=r(eTt,"bert"),eTt.forEach(t),tMr=r(FSe," \u2014 "),gH=n(FSe,"A",{href:!0});var oTt=s(gH);aMr=r(oTt,"TFBertForTokenClassification"),oTt.forEach(t),nMr=r(FSe," (BERT model)"),FSe.forEach(t),sMr=i(fe),X5=n(fe,"LI",{});var vSe=s(X5);Jve=n(vSe,"STRONG",{});var rTt=s(Jve);lMr=r(rTt,"camembert"),rTt.forEach(t),iMr=r(vSe," \u2014 "),hH=n(vSe,"A",{href:!0});var tTt=s(hH);dMr=r(tTt,"TFCamembertForTokenClassification"),tTt.forEach(t),cMr=r(vSe," (CamemBERT model)"),vSe.forEach(t),mMr=i(fe),z5=n(fe,"LI",{});var TSe=s(z5);Yve=n(TSe,"STRONG",{});var aTt=s(Yve);fMr=r(aTt,"convbert"),aTt.forEach(t),gMr=r(TSe," \u2014 "),uH=n(TSe,"A",{href:!0});var nTt=s(uH);hMr=r(nTt,"TFConvBertForTokenClassification"),nTt.forEach(t),uMr=r(TSe," (ConvBERT model)"),TSe.forEach(t),pMr=i(fe),Q5=n(fe,"LI",{});var MSe=s(Q5);Kve=n(MSe,"STRONG",{});var sTt=s(Kve);_Mr=r(sTt,"deberta"),sTt.forEach(t),bMr=r(MSe," \u2014 "),pH=n(MSe,"A",{href:!0});var lTt=s(pH);FMr=r(lTt,"TFDebertaForTokenClassification"),lTt.forEach(t),vMr=r(MSe," (DeBERTa model)"),MSe.forEach(t),TMr=i(fe),W5=n(fe,"LI",{});var ESe=s(W5);Zve=n(ESe,"STRONG",{});var iTt=s(Zve);MMr=r(iTt,"deberta-v2"),iTt.forEach(t),EMr=r(ESe," \u2014 "),_H=n(ESe,"A",{href:!0});var dTt=s(_H);CMr=r(dTt,"TFDebertaV2ForTokenClassification"),dTt.forEach(t),wMr=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),AMr=i(fe),H5=n(fe,"LI",{});var CSe=s(H5);e1e=n(CSe,"STRONG",{});var cTt=s(e1e);yMr=r(cTt,"distilbert"),cTt.forEach(t),LMr=r(CSe," \u2014 "),bH=n(CSe,"A",{href:!0});var mTt=s(bH);xMr=r(mTt,"TFDistilBertForTokenClassification"),mTt.forEach(t),$Mr=r(CSe," (DistilBERT model)"),CSe.forEach(t),kMr=i(fe),U5=n(fe,"LI",{});var wSe=s(U5);o1e=n(wSe,"STRONG",{});var fTt=s(o1e);SMr=r(fTt,"electra"),fTt.forEach(t),RMr=r(wSe," \u2014 "),FH=n(wSe,"A",{href:!0});var gTt=s(FH);BMr=r(gTt,"TFElectraForTokenClassification"),gTt.forEach(t),PMr=r(wSe," (ELECTRA model)"),wSe.forEach(t),IMr=i(fe),J5=n(fe,"LI",{});var ASe=s(J5);r1e=n(ASe,"STRONG",{});var hTt=s(r1e);qMr=r(hTt,"flaubert"),hTt.forEach(t),NMr=r(ASe," \u2014 "),vH=n(ASe,"A",{href:!0});var uTt=s(vH);jMr=r(uTt,"TFFlaubertForTokenClassification"),uTt.forEach(t),DMr=r(ASe," (FlauBERT model)"),ASe.forEach(t),GMr=i(fe),Y5=n(fe,"LI",{});var ySe=s(Y5);t1e=n(ySe,"STRONG",{});var pTt=s(t1e);OMr=r(pTt,"funnel"),pTt.forEach(t),VMr=r(ySe," \u2014 "),TH=n(ySe,"A",{href:!0});var _Tt=s(TH);XMr=r(_Tt,"TFFunnelForTokenClassification"),_Tt.forEach(t),zMr=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),QMr=i(fe),K5=n(fe,"LI",{});var LSe=s(K5);a1e=n(LSe,"STRONG",{});var bTt=s(a1e);WMr=r(bTt,"layoutlm"),bTt.forEach(t),HMr=r(LSe," \u2014 "),MH=n(LSe,"A",{href:!0});var FTt=s(MH);UMr=r(FTt,"TFLayoutLMForTokenClassification"),FTt.forEach(t),JMr=r(LSe," (LayoutLM model)"),LSe.forEach(t),YMr=i(fe),Z5=n(fe,"LI",{});var xSe=s(Z5);n1e=n(xSe,"STRONG",{});var vTt=s(n1e);KMr=r(vTt,"longformer"),vTt.forEach(t),ZMr=r(xSe," \u2014 "),EH=n(xSe,"A",{href:!0});var TTt=s(EH);e4r=r(TTt,"TFLongformerForTokenClassification"),TTt.forEach(t),o4r=r(xSe," (Longformer model)"),xSe.forEach(t),r4r=i(fe),eC=n(fe,"LI",{});var $Se=s(eC);s1e=n($Se,"STRONG",{});var MTt=s(s1e);t4r=r(MTt,"mobilebert"),MTt.forEach(t),a4r=r($Se," \u2014 "),CH=n($Se,"A",{href:!0});var ETt=s(CH);n4r=r(ETt,"TFMobileBertForTokenClassification"),ETt.forEach(t),s4r=r($Se," (MobileBERT model)"),$Se.forEach(t),l4r=i(fe),oC=n(fe,"LI",{});var kSe=s(oC);l1e=n(kSe,"STRONG",{});var CTt=s(l1e);i4r=r(CTt,"mpnet"),CTt.forEach(t),d4r=r(kSe," \u2014 "),wH=n(kSe,"A",{href:!0});var wTt=s(wH);c4r=r(wTt,"TFMPNetForTokenClassification"),wTt.forEach(t),m4r=r(kSe," (MPNet model)"),kSe.forEach(t),f4r=i(fe),rC=n(fe,"LI",{});var SSe=s(rC);i1e=n(SSe,"STRONG",{});var ATt=s(i1e);g4r=r(ATt,"rembert"),ATt.forEach(t),h4r=r(SSe," \u2014 "),AH=n(SSe,"A",{href:!0});var yTt=s(AH);u4r=r(yTt,"TFRemBertForTokenClassification"),yTt.forEach(t),p4r=r(SSe," (RemBERT model)"),SSe.forEach(t),_4r=i(fe),tC=n(fe,"LI",{});var RSe=s(tC);d1e=n(RSe,"STRONG",{});var LTt=s(d1e);b4r=r(LTt,"roberta"),LTt.forEach(t),F4r=r(RSe," \u2014 "),yH=n(RSe,"A",{href:!0});var xTt=s(yH);v4r=r(xTt,"TFRobertaForTokenClassification"),xTt.forEach(t),T4r=r(RSe," (RoBERTa model)"),RSe.forEach(t),M4r=i(fe),aC=n(fe,"LI",{});var BSe=s(aC);c1e=n(BSe,"STRONG",{});var $Tt=s(c1e);E4r=r($Tt,"roformer"),$Tt.forEach(t),C4r=r(BSe," \u2014 "),LH=n(BSe,"A",{href:!0});var kTt=s(LH);w4r=r(kTt,"TFRoFormerForTokenClassification"),kTt.forEach(t),A4r=r(BSe," (RoFormer model)"),BSe.forEach(t),y4r=i(fe),nC=n(fe,"LI",{});var PSe=s(nC);m1e=n(PSe,"STRONG",{});var STt=s(m1e);L4r=r(STt,"xlm"),STt.forEach(t),x4r=r(PSe," \u2014 "),xH=n(PSe,"A",{href:!0});var RTt=s(xH);$4r=r(RTt,"TFXLMForTokenClassification"),RTt.forEach(t),k4r=r(PSe," (XLM model)"),PSe.forEach(t),S4r=i(fe),sC=n(fe,"LI",{});var ISe=s(sC);f1e=n(ISe,"STRONG",{});var BTt=s(f1e);R4r=r(BTt,"xlm-roberta"),BTt.forEach(t),B4r=r(ISe," \u2014 "),$H=n(ISe,"A",{href:!0});var PTt=s($H);P4r=r(PTt,"TFXLMRobertaForTokenClassification"),PTt.forEach(t),I4r=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),q4r=i(fe),lC=n(fe,"LI",{});var qSe=s(lC);g1e=n(qSe,"STRONG",{});var ITt=s(g1e);N4r=r(ITt,"xlnet"),ITt.forEach(t),j4r=r(qSe," \u2014 "),kH=n(qSe,"A",{href:!0});var qTt=s(kH);D4r=r(qTt,"TFXLNetForTokenClassification"),qTt.forEach(t),G4r=r(qSe," (XLNet model)"),qSe.forEach(t),fe.forEach(t),O4r=i($l),T(iC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),$Ie=i(m),_c=n(m,"H2",{class:!0});var qNe=s(_c);dC=n(qNe,"A",{id:!0,class:!0,href:!0});var NTt=s(dC);h1e=n(NTt,"SPAN",{});var jTt=s(h1e);T(Cx.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),V4r=i(qNe),u1e=n(qNe,"SPAN",{});var DTt=s(u1e);X4r=r(DTt,"TFAutoModelForQuestionAnswering"),DTt.forEach(t),qNe.forEach(t),kIe=i(m),ir=n(m,"DIV",{class:!0});var kl=s(ir);T(wx.$$.fragment,kl),z4r=i(kl),bc=n(kl,"P",{});var nZ=s(bc);Q4r=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=n(nZ,"A",{href:!0});var GTt=s(SH);W4r=r(GTt,"from_pretrained()"),GTt.forEach(t),H4r=r(nZ," class method or the "),RH=n(nZ,"A",{href:!0});var OTt=s(RH);U4r=r(OTt,"from_config()"),OTt.forEach(t),J4r=r(nZ,` class
method.`),nZ.forEach(t),Y4r=i(kl),Ax=n(kl,"P",{});var NNe=s(Ax);K4r=r(NNe,"This class cannot be instantiated directly using "),p1e=n(NNe,"CODE",{});var VTt=s(p1e);Z4r=r(VTt,"__init__()"),VTt.forEach(t),eEr=r(NNe," (throws an error)."),NNe.forEach(t),oEr=i(kl),It=n(kl,"DIV",{class:!0});var l6=s(It);T(yx.$$.fragment,l6),rEr=i(l6),_1e=n(l6,"P",{});var XTt=s(_1e);tEr=r(XTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XTt.forEach(t),aEr=i(l6),Fc=n(l6,"P",{});var sZ=s(Fc);nEr=r(sZ,`Note:
Loading a model from its configuration file does `),b1e=n(sZ,"STRONG",{});var zTt=s(b1e);sEr=r(zTt,"not"),zTt.forEach(t),lEr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(sZ,"A",{href:!0});var QTt=s(BH);iEr=r(QTt,"from_pretrained()"),QTt.forEach(t),dEr=r(sZ," to load the model weights."),sZ.forEach(t),cEr=i(l6),T(cC.$$.fragment,l6),l6.forEach(t),mEr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(Lx.$$.fragment,Sl),fEr=i(Sl),F1e=n(Sl,"P",{});var WTt=s(F1e);gEr=r(WTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WTt.forEach(t),hEr=i(Sl),cn=n(Sl,"P",{});var i6=s(cn);uEr=r(i6,"The model class to instantiate is selected based on the "),v1e=n(i6,"CODE",{});var HTt=s(v1e);pEr=r(HTt,"model_type"),HTt.forEach(t),_Er=r(i6,` property of the config object (either
passed as an argument or loaded from `),T1e=n(i6,"CODE",{});var UTt=s(T1e);bEr=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),FEr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(i6,"CODE",{});var JTt=s(M1e);vEr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),TEr=r(i6,":"),i6.forEach(t),MEr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);mC=n(ge,"LI",{});var NSe=s(mC);E1e=n(NSe,"STRONG",{});var YTt=s(E1e);EEr=r(YTt,"albert"),YTt.forEach(t),CEr=r(NSe," \u2014 "),PH=n(NSe,"A",{href:!0});var KTt=s(PH);wEr=r(KTt,"TFAlbertForQuestionAnswering"),KTt.forEach(t),AEr=r(NSe," (ALBERT model)"),NSe.forEach(t),yEr=i(ge),fC=n(ge,"LI",{});var jSe=s(fC);C1e=n(jSe,"STRONG",{});var ZTt=s(C1e);LEr=r(ZTt,"bert"),ZTt.forEach(t),xEr=r(jSe," \u2014 "),IH=n(jSe,"A",{href:!0});var eMt=s(IH);$Er=r(eMt,"TFBertForQuestionAnswering"),eMt.forEach(t),kEr=r(jSe," (BERT model)"),jSe.forEach(t),SEr=i(ge),gC=n(ge,"LI",{});var DSe=s(gC);w1e=n(DSe,"STRONG",{});var oMt=s(w1e);REr=r(oMt,"camembert"),oMt.forEach(t),BEr=r(DSe," \u2014 "),qH=n(DSe,"A",{href:!0});var rMt=s(qH);PEr=r(rMt,"TFCamembertForQuestionAnswering"),rMt.forEach(t),IEr=r(DSe," (CamemBERT model)"),DSe.forEach(t),qEr=i(ge),hC=n(ge,"LI",{});var GSe=s(hC);A1e=n(GSe,"STRONG",{});var tMt=s(A1e);NEr=r(tMt,"convbert"),tMt.forEach(t),jEr=r(GSe," \u2014 "),NH=n(GSe,"A",{href:!0});var aMt=s(NH);DEr=r(aMt,"TFConvBertForQuestionAnswering"),aMt.forEach(t),GEr=r(GSe," (ConvBERT model)"),GSe.forEach(t),OEr=i(ge),uC=n(ge,"LI",{});var OSe=s(uC);y1e=n(OSe,"STRONG",{});var nMt=s(y1e);VEr=r(nMt,"deberta"),nMt.forEach(t),XEr=r(OSe," \u2014 "),jH=n(OSe,"A",{href:!0});var sMt=s(jH);zEr=r(sMt,"TFDebertaForQuestionAnswering"),sMt.forEach(t),QEr=r(OSe," (DeBERTa model)"),OSe.forEach(t),WEr=i(ge),pC=n(ge,"LI",{});var VSe=s(pC);L1e=n(VSe,"STRONG",{});var lMt=s(L1e);HEr=r(lMt,"deberta-v2"),lMt.forEach(t),UEr=r(VSe," \u2014 "),DH=n(VSe,"A",{href:!0});var iMt=s(DH);JEr=r(iMt,"TFDebertaV2ForQuestionAnswering"),iMt.forEach(t),YEr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),KEr=i(ge),_C=n(ge,"LI",{});var XSe=s(_C);x1e=n(XSe,"STRONG",{});var dMt=s(x1e);ZEr=r(dMt,"distilbert"),dMt.forEach(t),e5r=r(XSe," \u2014 "),GH=n(XSe,"A",{href:!0});var cMt=s(GH);o5r=r(cMt,"TFDistilBertForQuestionAnswering"),cMt.forEach(t),r5r=r(XSe," (DistilBERT model)"),XSe.forEach(t),t5r=i(ge),bC=n(ge,"LI",{});var zSe=s(bC);$1e=n(zSe,"STRONG",{});var mMt=s($1e);a5r=r(mMt,"electra"),mMt.forEach(t),n5r=r(zSe," \u2014 "),OH=n(zSe,"A",{href:!0});var fMt=s(OH);s5r=r(fMt,"TFElectraForQuestionAnswering"),fMt.forEach(t),l5r=r(zSe," (ELECTRA model)"),zSe.forEach(t),i5r=i(ge),FC=n(ge,"LI",{});var QSe=s(FC);k1e=n(QSe,"STRONG",{});var gMt=s(k1e);d5r=r(gMt,"flaubert"),gMt.forEach(t),c5r=r(QSe," \u2014 "),VH=n(QSe,"A",{href:!0});var hMt=s(VH);m5r=r(hMt,"TFFlaubertForQuestionAnsweringSimple"),hMt.forEach(t),f5r=r(QSe," (FlauBERT model)"),QSe.forEach(t),g5r=i(ge),vC=n(ge,"LI",{});var WSe=s(vC);S1e=n(WSe,"STRONG",{});var uMt=s(S1e);h5r=r(uMt,"funnel"),uMt.forEach(t),u5r=r(WSe," \u2014 "),XH=n(WSe,"A",{href:!0});var pMt=s(XH);p5r=r(pMt,"TFFunnelForQuestionAnswering"),pMt.forEach(t),_5r=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),b5r=i(ge),TC=n(ge,"LI",{});var HSe=s(TC);R1e=n(HSe,"STRONG",{});var _Mt=s(R1e);F5r=r(_Mt,"gptj"),_Mt.forEach(t),v5r=r(HSe," \u2014 "),zH=n(HSe,"A",{href:!0});var bMt=s(zH);T5r=r(bMt,"TFGPTJForQuestionAnswering"),bMt.forEach(t),M5r=r(HSe," (GPT-J model)"),HSe.forEach(t),E5r=i(ge),MC=n(ge,"LI",{});var USe=s(MC);B1e=n(USe,"STRONG",{});var FMt=s(B1e);C5r=r(FMt,"longformer"),FMt.forEach(t),w5r=r(USe," \u2014 "),QH=n(USe,"A",{href:!0});var vMt=s(QH);A5r=r(vMt,"TFLongformerForQuestionAnswering"),vMt.forEach(t),y5r=r(USe," (Longformer model)"),USe.forEach(t),L5r=i(ge),EC=n(ge,"LI",{});var JSe=s(EC);P1e=n(JSe,"STRONG",{});var TMt=s(P1e);x5r=r(TMt,"mobilebert"),TMt.forEach(t),$5r=r(JSe," \u2014 "),WH=n(JSe,"A",{href:!0});var MMt=s(WH);k5r=r(MMt,"TFMobileBertForQuestionAnswering"),MMt.forEach(t),S5r=r(JSe," (MobileBERT model)"),JSe.forEach(t),R5r=i(ge),CC=n(ge,"LI",{});var YSe=s(CC);I1e=n(YSe,"STRONG",{});var EMt=s(I1e);B5r=r(EMt,"mpnet"),EMt.forEach(t),P5r=r(YSe," \u2014 "),HH=n(YSe,"A",{href:!0});var CMt=s(HH);I5r=r(CMt,"TFMPNetForQuestionAnswering"),CMt.forEach(t),q5r=r(YSe," (MPNet model)"),YSe.forEach(t),N5r=i(ge),wC=n(ge,"LI",{});var KSe=s(wC);q1e=n(KSe,"STRONG",{});var wMt=s(q1e);j5r=r(wMt,"rembert"),wMt.forEach(t),D5r=r(KSe," \u2014 "),UH=n(KSe,"A",{href:!0});var AMt=s(UH);G5r=r(AMt,"TFRemBertForQuestionAnswering"),AMt.forEach(t),O5r=r(KSe," (RemBERT model)"),KSe.forEach(t),V5r=i(ge),AC=n(ge,"LI",{});var ZSe=s(AC);N1e=n(ZSe,"STRONG",{});var yMt=s(N1e);X5r=r(yMt,"roberta"),yMt.forEach(t),z5r=r(ZSe," \u2014 "),JH=n(ZSe,"A",{href:!0});var LMt=s(JH);Q5r=r(LMt,"TFRobertaForQuestionAnswering"),LMt.forEach(t),W5r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),H5r=i(ge),yC=n(ge,"LI",{});var eRe=s(yC);j1e=n(eRe,"STRONG",{});var xMt=s(j1e);U5r=r(xMt,"roformer"),xMt.forEach(t),J5r=r(eRe," \u2014 "),YH=n(eRe,"A",{href:!0});var $Mt=s(YH);Y5r=r($Mt,"TFRoFormerForQuestionAnswering"),$Mt.forEach(t),K5r=r(eRe," (RoFormer model)"),eRe.forEach(t),Z5r=i(ge),LC=n(ge,"LI",{});var oRe=s(LC);D1e=n(oRe,"STRONG",{});var kMt=s(D1e);eCr=r(kMt,"xlm"),kMt.forEach(t),oCr=r(oRe," \u2014 "),KH=n(oRe,"A",{href:!0});var SMt=s(KH);rCr=r(SMt,"TFXLMForQuestionAnsweringSimple"),SMt.forEach(t),tCr=r(oRe," (XLM model)"),oRe.forEach(t),aCr=i(ge),xC=n(ge,"LI",{});var rRe=s(xC);G1e=n(rRe,"STRONG",{});var RMt=s(G1e);nCr=r(RMt,"xlm-roberta"),RMt.forEach(t),sCr=r(rRe," \u2014 "),ZH=n(rRe,"A",{href:!0});var BMt=s(ZH);lCr=r(BMt,"TFXLMRobertaForQuestionAnswering"),BMt.forEach(t),iCr=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),dCr=i(ge),$C=n(ge,"LI",{});var tRe=s($C);O1e=n(tRe,"STRONG",{});var PMt=s(O1e);cCr=r(PMt,"xlnet"),PMt.forEach(t),mCr=r(tRe," \u2014 "),eU=n(tRe,"A",{href:!0});var IMt=s(eU);fCr=r(IMt,"TFXLNetForQuestionAnsweringSimple"),IMt.forEach(t),gCr=r(tRe," (XLNet model)"),tRe.forEach(t),ge.forEach(t),hCr=i(Sl),T(kC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),SIe=i(m),vc=n(m,"H2",{class:!0});var jNe=s(vc);SC=n(jNe,"A",{id:!0,class:!0,href:!0});var qMt=s(SC);V1e=n(qMt,"SPAN",{});var NMt=s(V1e);T(xx.$$.fragment,NMt),NMt.forEach(t),qMt.forEach(t),uCr=i(jNe),X1e=n(jNe,"SPAN",{});var jMt=s(X1e);pCr=r(jMt,"TFAutoModelForVision2Seq"),jMt.forEach(t),jNe.forEach(t),RIe=i(m),dr=n(m,"DIV",{class:!0});var Rl=s(dr);T($x.$$.fragment,Rl),_Cr=i(Rl),Tc=n(Rl,"P",{});var lZ=s(Tc);bCr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oU=n(lZ,"A",{href:!0});var DMt=s(oU);FCr=r(DMt,"from_pretrained()"),DMt.forEach(t),vCr=r(lZ," class method or the "),rU=n(lZ,"A",{href:!0});var GMt=s(rU);TCr=r(GMt,"from_config()"),GMt.forEach(t),MCr=r(lZ,` class
method.`),lZ.forEach(t),ECr=i(Rl),kx=n(Rl,"P",{});var DNe=s(kx);CCr=r(DNe,"This class cannot be instantiated directly using "),z1e=n(DNe,"CODE",{});var OMt=s(z1e);wCr=r(OMt,"__init__()"),OMt.forEach(t),ACr=r(DNe," (throws an error)."),DNe.forEach(t),yCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var d6=s(qt);T(Sx.$$.fragment,d6),LCr=i(d6),Q1e=n(d6,"P",{});var VMt=s(Q1e);xCr=r(VMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VMt.forEach(t),$Cr=i(d6),Mc=n(d6,"P",{});var iZ=s(Mc);kCr=r(iZ,`Note:
Loading a model from its configuration file does `),W1e=n(iZ,"STRONG",{});var XMt=s(W1e);SCr=r(XMt,"not"),XMt.forEach(t),RCr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(iZ,"A",{href:!0});var zMt=s(tU);BCr=r(zMt,"from_pretrained()"),zMt.forEach(t),PCr=r(iZ," to load the model weights."),iZ.forEach(t),ICr=i(d6),T(RC.$$.fragment,d6),d6.forEach(t),qCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Rx.$$.fragment,Bl),NCr=i(Bl),H1e=n(Bl,"P",{});var QMt=s(H1e);jCr=r(QMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QMt.forEach(t),DCr=i(Bl),mn=n(Bl,"P",{});var c6=s(mn);GCr=r(c6,"The model class to instantiate is selected based on the "),U1e=n(c6,"CODE",{});var WMt=s(U1e);OCr=r(WMt,"model_type"),WMt.forEach(t),VCr=r(c6,` property of the config object (either
passed as an argument or loaded from `),J1e=n(c6,"CODE",{});var HMt=s(J1e);XCr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),zCr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(c6,"CODE",{});var UMt=s(Y1e);QCr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),WCr=r(c6,":"),c6.forEach(t),HCr=i(Bl),K1e=n(Bl,"UL",{});var JMt=s(K1e);BC=n(JMt,"LI",{});var aRe=s(BC);Z1e=n(aRe,"STRONG",{});var YMt=s(Z1e);UCr=r(YMt,"vision-encoder-decoder"),YMt.forEach(t),JCr=r(aRe," \u2014 "),aU=n(aRe,"A",{href:!0});var KMt=s(aU);YCr=r(KMt,"TFVisionEncoderDecoderModel"),KMt.forEach(t),KCr=r(aRe," (Vision Encoder decoder model)"),aRe.forEach(t),JMt.forEach(t),ZCr=i(Bl),T(PC.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),BIe=i(m),Ec=n(m,"H2",{class:!0});var GNe=s(Ec);IC=n(GNe,"A",{id:!0,class:!0,href:!0});var ZMt=s(IC);eTe=n(ZMt,"SPAN",{});var e4t=s(eTe);T(Bx.$$.fragment,e4t),e4t.forEach(t),ZMt.forEach(t),e3r=i(GNe),oTe=n(GNe,"SPAN",{});var o4t=s(oTe);o3r=r(o4t,"TFAutoModelForSpeechSeq2Seq"),o4t.forEach(t),GNe.forEach(t),PIe=i(m),cr=n(m,"DIV",{class:!0});var Pl=s(cr);T(Px.$$.fragment,Pl),r3r=i(Pl),Cc=n(Pl,"P",{});var dZ=s(Cc);t3r=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nU=n(dZ,"A",{href:!0});var r4t=s(nU);a3r=r(r4t,"from_pretrained()"),r4t.forEach(t),n3r=r(dZ," class method or the "),sU=n(dZ,"A",{href:!0});var t4t=s(sU);s3r=r(t4t,"from_config()"),t4t.forEach(t),l3r=r(dZ,` class
method.`),dZ.forEach(t),i3r=i(Pl),Ix=n(Pl,"P",{});var ONe=s(Ix);d3r=r(ONe,"This class cannot be instantiated directly using "),rTe=n(ONe,"CODE",{});var a4t=s(rTe);c3r=r(a4t,"__init__()"),a4t.forEach(t),m3r=r(ONe," (throws an error)."),ONe.forEach(t),f3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var m6=s(Nt);T(qx.$$.fragment,m6),g3r=i(m6),tTe=n(m6,"P",{});var n4t=s(tTe);h3r=r(n4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n4t.forEach(t),u3r=i(m6),wc=n(m6,"P",{});var cZ=s(wc);p3r=r(cZ,`Note:
Loading a model from its configuration file does `),aTe=n(cZ,"STRONG",{});var s4t=s(aTe);_3r=r(s4t,"not"),s4t.forEach(t),b3r=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(cZ,"A",{href:!0});var l4t=s(lU);F3r=r(l4t,"from_pretrained()"),l4t.forEach(t),v3r=r(cZ," to load the model weights."),cZ.forEach(t),T3r=i(m6),T(qC.$$.fragment,m6),m6.forEach(t),M3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Nx.$$.fragment,Il),E3r=i(Il),nTe=n(Il,"P",{});var i4t=s(nTe);C3r=r(i4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),i4t.forEach(t),w3r=i(Il),fn=n(Il,"P",{});var f6=s(fn);A3r=r(f6,"The model class to instantiate is selected based on the "),sTe=n(f6,"CODE",{});var d4t=s(sTe);y3r=r(d4t,"model_type"),d4t.forEach(t),L3r=r(f6,` property of the config object (either
passed as an argument or loaded from `),lTe=n(f6,"CODE",{});var c4t=s(lTe);x3r=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),$3r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(f6,"CODE",{});var m4t=s(iTe);k3r=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),S3r=r(f6,":"),f6.forEach(t),R3r=i(Il),dTe=n(Il,"UL",{});var f4t=s(dTe);NC=n(f4t,"LI",{});var nRe=s(NC);cTe=n(nRe,"STRONG",{});var g4t=s(cTe);B3r=r(g4t,"speech_to_text"),g4t.forEach(t),P3r=r(nRe," \u2014 "),iU=n(nRe,"A",{href:!0});var h4t=s(iU);I3r=r(h4t,"TFSpeech2TextForConditionalGeneration"),h4t.forEach(t),q3r=r(nRe," (Speech2Text model)"),nRe.forEach(t),f4t.forEach(t),N3r=i(Il),T(jC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),IIe=i(m),Ac=n(m,"H2",{class:!0});var VNe=s(Ac);DC=n(VNe,"A",{id:!0,class:!0,href:!0});var u4t=s(DC);mTe=n(u4t,"SPAN",{});var p4t=s(mTe);T(jx.$$.fragment,p4t),p4t.forEach(t),u4t.forEach(t),j3r=i(VNe),fTe=n(VNe,"SPAN",{});var _4t=s(fTe);D3r=r(_4t,"FlaxAutoModel"),_4t.forEach(t),VNe.forEach(t),qIe=i(m),mr=n(m,"DIV",{class:!0});var ql=s(mr);T(Dx.$$.fragment,ql),G3r=i(ql),yc=n(ql,"P",{});var mZ=s(yc);O3r=r(mZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=n(mZ,"A",{href:!0});var b4t=s(dU);V3r=r(b4t,"from_pretrained()"),b4t.forEach(t),X3r=r(mZ," class method or the "),cU=n(mZ,"A",{href:!0});var F4t=s(cU);z3r=r(F4t,"from_config()"),F4t.forEach(t),Q3r=r(mZ,` class
method.`),mZ.forEach(t),W3r=i(ql),Gx=n(ql,"P",{});var XNe=s(Gx);H3r=r(XNe,"This class cannot be instantiated directly using "),gTe=n(XNe,"CODE",{});var v4t=s(gTe);U3r=r(v4t,"__init__()"),v4t.forEach(t),J3r=r(XNe," (throws an error)."),XNe.forEach(t),Y3r=i(ql),jt=n(ql,"DIV",{class:!0});var g6=s(jt);T(Ox.$$.fragment,g6),K3r=i(g6),hTe=n(g6,"P",{});var T4t=s(hTe);Z3r=r(T4t,"Instantiates one of the base model classes of the library from a configuration."),T4t.forEach(t),ewr=i(g6),Lc=n(g6,"P",{});var fZ=s(Lc);owr=r(fZ,`Note:
Loading a model from its configuration file does `),uTe=n(fZ,"STRONG",{});var M4t=s(uTe);rwr=r(M4t,"not"),M4t.forEach(t),twr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(fZ,"A",{href:!0});var E4t=s(mU);awr=r(E4t,"from_pretrained()"),E4t.forEach(t),nwr=r(fZ," to load the model weights."),fZ.forEach(t),swr=i(g6),T(GC.$$.fragment,g6),g6.forEach(t),lwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Vx.$$.fragment,Nl),iwr=i(Nl),pTe=n(Nl,"P",{});var C4t=s(pTe);dwr=r(C4t,"Instantiate one of the base model classes of the library from a pretrained model."),C4t.forEach(t),cwr=i(Nl),gn=n(Nl,"P",{});var h6=s(gn);mwr=r(h6,"The model class to instantiate is selected based on the "),_Te=n(h6,"CODE",{});var w4t=s(_Te);fwr=r(w4t,"model_type"),w4t.forEach(t),gwr=r(h6,` property of the config object (either
passed as an argument or loaded from `),bTe=n(h6,"CODE",{});var A4t=s(bTe);hwr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),uwr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(h6,"CODE",{});var y4t=s(FTe);pwr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),_wr=r(h6,":"),h6.forEach(t),bwr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);OC=n(ae,"LI",{});var sRe=s(OC);vTe=n(sRe,"STRONG",{});var L4t=s(vTe);Fwr=r(L4t,"albert"),L4t.forEach(t),vwr=r(sRe," \u2014 "),fU=n(sRe,"A",{href:!0});var x4t=s(fU);Twr=r(x4t,"FlaxAlbertModel"),x4t.forEach(t),Mwr=r(sRe," (ALBERT model)"),sRe.forEach(t),Ewr=i(ae),VC=n(ae,"LI",{});var lRe=s(VC);TTe=n(lRe,"STRONG",{});var $4t=s(TTe);Cwr=r($4t,"bart"),$4t.forEach(t),wwr=r(lRe," \u2014 "),gU=n(lRe,"A",{href:!0});var k4t=s(gU);Awr=r(k4t,"FlaxBartModel"),k4t.forEach(t),ywr=r(lRe," (BART model)"),lRe.forEach(t),Lwr=i(ae),XC=n(ae,"LI",{});var iRe=s(XC);MTe=n(iRe,"STRONG",{});var S4t=s(MTe);xwr=r(S4t,"beit"),S4t.forEach(t),$wr=r(iRe," \u2014 "),hU=n(iRe,"A",{href:!0});var R4t=s(hU);kwr=r(R4t,"FlaxBeitModel"),R4t.forEach(t),Swr=r(iRe," (BEiT model)"),iRe.forEach(t),Rwr=i(ae),zC=n(ae,"LI",{});var dRe=s(zC);ETe=n(dRe,"STRONG",{});var B4t=s(ETe);Bwr=r(B4t,"bert"),B4t.forEach(t),Pwr=r(dRe," \u2014 "),uU=n(dRe,"A",{href:!0});var P4t=s(uU);Iwr=r(P4t,"FlaxBertModel"),P4t.forEach(t),qwr=r(dRe," (BERT model)"),dRe.forEach(t),Nwr=i(ae),QC=n(ae,"LI",{});var cRe=s(QC);CTe=n(cRe,"STRONG",{});var I4t=s(CTe);jwr=r(I4t,"big_bird"),I4t.forEach(t),Dwr=r(cRe," \u2014 "),pU=n(cRe,"A",{href:!0});var q4t=s(pU);Gwr=r(q4t,"FlaxBigBirdModel"),q4t.forEach(t),Owr=r(cRe," (BigBird model)"),cRe.forEach(t),Vwr=i(ae),WC=n(ae,"LI",{});var mRe=s(WC);wTe=n(mRe,"STRONG",{});var N4t=s(wTe);Xwr=r(N4t,"blenderbot"),N4t.forEach(t),zwr=r(mRe," \u2014 "),_U=n(mRe,"A",{href:!0});var j4t=s(_U);Qwr=r(j4t,"FlaxBlenderbotModel"),j4t.forEach(t),Wwr=r(mRe," (Blenderbot model)"),mRe.forEach(t),Hwr=i(ae),HC=n(ae,"LI",{});var fRe=s(HC);ATe=n(fRe,"STRONG",{});var D4t=s(ATe);Uwr=r(D4t,"blenderbot-small"),D4t.forEach(t),Jwr=r(fRe," \u2014 "),bU=n(fRe,"A",{href:!0});var G4t=s(bU);Ywr=r(G4t,"FlaxBlenderbotSmallModel"),G4t.forEach(t),Kwr=r(fRe," (BlenderbotSmall model)"),fRe.forEach(t),Zwr=i(ae),UC=n(ae,"LI",{});var gRe=s(UC);yTe=n(gRe,"STRONG",{});var O4t=s(yTe);eAr=r(O4t,"clip"),O4t.forEach(t),oAr=r(gRe," \u2014 "),FU=n(gRe,"A",{href:!0});var V4t=s(FU);rAr=r(V4t,"FlaxCLIPModel"),V4t.forEach(t),tAr=r(gRe," (CLIP model)"),gRe.forEach(t),aAr=i(ae),JC=n(ae,"LI",{});var hRe=s(JC);LTe=n(hRe,"STRONG",{});var X4t=s(LTe);nAr=r(X4t,"distilbert"),X4t.forEach(t),sAr=r(hRe," \u2014 "),vU=n(hRe,"A",{href:!0});var z4t=s(vU);lAr=r(z4t,"FlaxDistilBertModel"),z4t.forEach(t),iAr=r(hRe," (DistilBERT model)"),hRe.forEach(t),dAr=i(ae),YC=n(ae,"LI",{});var uRe=s(YC);xTe=n(uRe,"STRONG",{});var Q4t=s(xTe);cAr=r(Q4t,"electra"),Q4t.forEach(t),mAr=r(uRe," \u2014 "),TU=n(uRe,"A",{href:!0});var W4t=s(TU);fAr=r(W4t,"FlaxElectraModel"),W4t.forEach(t),gAr=r(uRe," (ELECTRA model)"),uRe.forEach(t),hAr=i(ae),KC=n(ae,"LI",{});var pRe=s(KC);$Te=n(pRe,"STRONG",{});var H4t=s($Te);uAr=r(H4t,"gpt2"),H4t.forEach(t),pAr=r(pRe," \u2014 "),MU=n(pRe,"A",{href:!0});var U4t=s(MU);_Ar=r(U4t,"FlaxGPT2Model"),U4t.forEach(t),bAr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),FAr=i(ae),ZC=n(ae,"LI",{});var _Re=s(ZC);kTe=n(_Re,"STRONG",{});var J4t=s(kTe);vAr=r(J4t,"gpt_neo"),J4t.forEach(t),TAr=r(_Re," \u2014 "),EU=n(_Re,"A",{href:!0});var Y4t=s(EU);MAr=r(Y4t,"FlaxGPTNeoModel"),Y4t.forEach(t),EAr=r(_Re," (GPT Neo model)"),_Re.forEach(t),CAr=i(ae),e3=n(ae,"LI",{});var bRe=s(e3);STe=n(bRe,"STRONG",{});var K4t=s(STe);wAr=r(K4t,"gptj"),K4t.forEach(t),AAr=r(bRe," \u2014 "),CU=n(bRe,"A",{href:!0});var Z4t=s(CU);yAr=r(Z4t,"FlaxGPTJModel"),Z4t.forEach(t),LAr=r(bRe," (GPT-J model)"),bRe.forEach(t),xAr=i(ae),o3=n(ae,"LI",{});var FRe=s(o3);RTe=n(FRe,"STRONG",{});var eEt=s(RTe);$Ar=r(eEt,"marian"),eEt.forEach(t),kAr=r(FRe," \u2014 "),wU=n(FRe,"A",{href:!0});var oEt=s(wU);SAr=r(oEt,"FlaxMarianModel"),oEt.forEach(t),RAr=r(FRe," (Marian model)"),FRe.forEach(t),BAr=i(ae),r3=n(ae,"LI",{});var vRe=s(r3);BTe=n(vRe,"STRONG",{});var rEt=s(BTe);PAr=r(rEt,"mbart"),rEt.forEach(t),IAr=r(vRe," \u2014 "),AU=n(vRe,"A",{href:!0});var tEt=s(AU);qAr=r(tEt,"FlaxMBartModel"),tEt.forEach(t),NAr=r(vRe," (mBART model)"),vRe.forEach(t),jAr=i(ae),t3=n(ae,"LI",{});var TRe=s(t3);PTe=n(TRe,"STRONG",{});var aEt=s(PTe);DAr=r(aEt,"mt5"),aEt.forEach(t),GAr=r(TRe," \u2014 "),yU=n(TRe,"A",{href:!0});var nEt=s(yU);OAr=r(nEt,"FlaxMT5Model"),nEt.forEach(t),VAr=r(TRe," (mT5 model)"),TRe.forEach(t),XAr=i(ae),a3=n(ae,"LI",{});var MRe=s(a3);ITe=n(MRe,"STRONG",{});var sEt=s(ITe);zAr=r(sEt,"pegasus"),sEt.forEach(t),QAr=r(MRe," \u2014 "),LU=n(MRe,"A",{href:!0});var lEt=s(LU);WAr=r(lEt,"FlaxPegasusModel"),lEt.forEach(t),HAr=r(MRe," (Pegasus model)"),MRe.forEach(t),UAr=i(ae),n3=n(ae,"LI",{});var ERe=s(n3);qTe=n(ERe,"STRONG",{});var iEt=s(qTe);JAr=r(iEt,"roberta"),iEt.forEach(t),YAr=r(ERe," \u2014 "),xU=n(ERe,"A",{href:!0});var dEt=s(xU);KAr=r(dEt,"FlaxRobertaModel"),dEt.forEach(t),ZAr=r(ERe," (RoBERTa model)"),ERe.forEach(t),e0r=i(ae),s3=n(ae,"LI",{});var CRe=s(s3);NTe=n(CRe,"STRONG",{});var cEt=s(NTe);o0r=r(cEt,"roformer"),cEt.forEach(t),r0r=r(CRe," \u2014 "),$U=n(CRe,"A",{href:!0});var mEt=s($U);t0r=r(mEt,"FlaxRoFormerModel"),mEt.forEach(t),a0r=r(CRe," (RoFormer model)"),CRe.forEach(t),n0r=i(ae),l3=n(ae,"LI",{});var wRe=s(l3);jTe=n(wRe,"STRONG",{});var fEt=s(jTe);s0r=r(fEt,"t5"),fEt.forEach(t),l0r=r(wRe," \u2014 "),kU=n(wRe,"A",{href:!0});var gEt=s(kU);i0r=r(gEt,"FlaxT5Model"),gEt.forEach(t),d0r=r(wRe," (T5 model)"),wRe.forEach(t),c0r=i(ae),i3=n(ae,"LI",{});var ARe=s(i3);DTe=n(ARe,"STRONG",{});var hEt=s(DTe);m0r=r(hEt,"vision-text-dual-encoder"),hEt.forEach(t),f0r=r(ARe," \u2014 "),SU=n(ARe,"A",{href:!0});var uEt=s(SU);g0r=r(uEt,"FlaxVisionTextDualEncoderModel"),uEt.forEach(t),h0r=r(ARe," (VisionTextDualEncoder model)"),ARe.forEach(t),u0r=i(ae),d3=n(ae,"LI",{});var yRe=s(d3);GTe=n(yRe,"STRONG",{});var pEt=s(GTe);p0r=r(pEt,"vit"),pEt.forEach(t),_0r=r(yRe," \u2014 "),RU=n(yRe,"A",{href:!0});var _Et=s(RU);b0r=r(_Et,"FlaxViTModel"),_Et.forEach(t),F0r=r(yRe," (ViT model)"),yRe.forEach(t),v0r=i(ae),c3=n(ae,"LI",{});var LRe=s(c3);OTe=n(LRe,"STRONG",{});var bEt=s(OTe);T0r=r(bEt,"wav2vec2"),bEt.forEach(t),M0r=r(LRe," \u2014 "),BU=n(LRe,"A",{href:!0});var FEt=s(BU);E0r=r(FEt,"FlaxWav2Vec2Model"),FEt.forEach(t),C0r=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),w0r=i(ae),m3=n(ae,"LI",{});var xRe=s(m3);VTe=n(xRe,"STRONG",{});var vEt=s(VTe);A0r=r(vEt,"xglm"),vEt.forEach(t),y0r=r(xRe," \u2014 "),PU=n(xRe,"A",{href:!0});var TEt=s(PU);L0r=r(TEt,"FlaxXGLMModel"),TEt.forEach(t),x0r=r(xRe," (XGLM model)"),xRe.forEach(t),$0r=i(ae),f3=n(ae,"LI",{});var $Re=s(f3);XTe=n($Re,"STRONG",{});var MEt=s(XTe);k0r=r(MEt,"xlm-roberta"),MEt.forEach(t),S0r=r($Re," \u2014 "),IU=n($Re,"A",{href:!0});var EEt=s(IU);R0r=r(EEt,"FlaxXLMRobertaModel"),EEt.forEach(t),B0r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),ae.forEach(t),P0r=i(Nl),T(g3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),NIe=i(m),xc=n(m,"H2",{class:!0});var zNe=s(xc);h3=n(zNe,"A",{id:!0,class:!0,href:!0});var CEt=s(h3);zTe=n(CEt,"SPAN",{});var wEt=s(zTe);T(Xx.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),I0r=i(zNe),QTe=n(zNe,"SPAN",{});var AEt=s(QTe);q0r=r(AEt,"FlaxAutoModelForCausalLM"),AEt.forEach(t),zNe.forEach(t),jIe=i(m),fr=n(m,"DIV",{class:!0});var jl=s(fr);T(zx.$$.fragment,jl),N0r=i(jl),$c=n(jl,"P",{});var gZ=s($c);j0r=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=n(gZ,"A",{href:!0});var yEt=s(qU);D0r=r(yEt,"from_pretrained()"),yEt.forEach(t),G0r=r(gZ," class method or the "),NU=n(gZ,"A",{href:!0});var LEt=s(NU);O0r=r(LEt,"from_config()"),LEt.forEach(t),V0r=r(gZ,` class
method.`),gZ.forEach(t),X0r=i(jl),Qx=n(jl,"P",{});var QNe=s(Qx);z0r=r(QNe,"This class cannot be instantiated directly using "),WTe=n(QNe,"CODE",{});var xEt=s(WTe);Q0r=r(xEt,"__init__()"),xEt.forEach(t),W0r=r(QNe," (throws an error)."),QNe.forEach(t),H0r=i(jl),Dt=n(jl,"DIV",{class:!0});var u6=s(Dt);T(Wx.$$.fragment,u6),U0r=i(u6),HTe=n(u6,"P",{});var $Et=s(HTe);J0r=r($Et,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Et.forEach(t),Y0r=i(u6),kc=n(u6,"P",{});var hZ=s(kc);K0r=r(hZ,`Note:
Loading a model from its configuration file does `),UTe=n(hZ,"STRONG",{});var kEt=s(UTe);Z0r=r(kEt,"not"),kEt.forEach(t),e6r=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(hZ,"A",{href:!0});var SEt=s(jU);o6r=r(SEt,"from_pretrained()"),SEt.forEach(t),r6r=r(hZ," to load the model weights."),hZ.forEach(t),t6r=i(u6),T(u3.$$.fragment,u6),u6.forEach(t),a6r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(Hx.$$.fragment,Dl),n6r=i(Dl),JTe=n(Dl,"P",{});var REt=s(JTe);s6r=r(REt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),REt.forEach(t),l6r=i(Dl),hn=n(Dl,"P",{});var p6=s(hn);i6r=r(p6,"The model class to instantiate is selected based on the "),YTe=n(p6,"CODE",{});var BEt=s(YTe);d6r=r(BEt,"model_type"),BEt.forEach(t),c6r=r(p6,` property of the config object (either
passed as an argument or loaded from `),KTe=n(p6,"CODE",{});var PEt=s(KTe);m6r=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),f6r=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(p6,"CODE",{});var IEt=s(ZTe);g6r=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),h6r=r(p6,":"),p6.forEach(t),u6r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);p3=n(Oe,"LI",{});var kRe=s(p3);eMe=n(kRe,"STRONG",{});var qEt=s(eMe);p6r=r(qEt,"bart"),qEt.forEach(t),_6r=r(kRe," \u2014 "),DU=n(kRe,"A",{href:!0});var NEt=s(DU);b6r=r(NEt,"FlaxBartForCausalLM"),NEt.forEach(t),F6r=r(kRe," (BART model)"),kRe.forEach(t),v6r=i(Oe),_3=n(Oe,"LI",{});var SRe=s(_3);oMe=n(SRe,"STRONG",{});var jEt=s(oMe);T6r=r(jEt,"bert"),jEt.forEach(t),M6r=r(SRe," \u2014 "),GU=n(SRe,"A",{href:!0});var DEt=s(GU);E6r=r(DEt,"FlaxBertForCausalLM"),DEt.forEach(t),C6r=r(SRe," (BERT model)"),SRe.forEach(t),w6r=i(Oe),b3=n(Oe,"LI",{});var RRe=s(b3);rMe=n(RRe,"STRONG",{});var GEt=s(rMe);A6r=r(GEt,"big_bird"),GEt.forEach(t),y6r=r(RRe," \u2014 "),OU=n(RRe,"A",{href:!0});var OEt=s(OU);L6r=r(OEt,"FlaxBigBirdForCausalLM"),OEt.forEach(t),x6r=r(RRe," (BigBird model)"),RRe.forEach(t),$6r=i(Oe),F3=n(Oe,"LI",{});var BRe=s(F3);tMe=n(BRe,"STRONG",{});var VEt=s(tMe);k6r=r(VEt,"electra"),VEt.forEach(t),S6r=r(BRe," \u2014 "),VU=n(BRe,"A",{href:!0});var XEt=s(VU);R6r=r(XEt,"FlaxElectraForCausalLM"),XEt.forEach(t),B6r=r(BRe," (ELECTRA model)"),BRe.forEach(t),P6r=i(Oe),v3=n(Oe,"LI",{});var PRe=s(v3);aMe=n(PRe,"STRONG",{});var zEt=s(aMe);I6r=r(zEt,"gpt2"),zEt.forEach(t),q6r=r(PRe," \u2014 "),XU=n(PRe,"A",{href:!0});var QEt=s(XU);N6r=r(QEt,"FlaxGPT2LMHeadModel"),QEt.forEach(t),j6r=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),D6r=i(Oe),T3=n(Oe,"LI",{});var IRe=s(T3);nMe=n(IRe,"STRONG",{});var WEt=s(nMe);G6r=r(WEt,"gpt_neo"),WEt.forEach(t),O6r=r(IRe," \u2014 "),zU=n(IRe,"A",{href:!0});var HEt=s(zU);V6r=r(HEt,"FlaxGPTNeoForCausalLM"),HEt.forEach(t),X6r=r(IRe," (GPT Neo model)"),IRe.forEach(t),z6r=i(Oe),M3=n(Oe,"LI",{});var qRe=s(M3);sMe=n(qRe,"STRONG",{});var UEt=s(sMe);Q6r=r(UEt,"gptj"),UEt.forEach(t),W6r=r(qRe," \u2014 "),QU=n(qRe,"A",{href:!0});var JEt=s(QU);H6r=r(JEt,"FlaxGPTJForCausalLM"),JEt.forEach(t),U6r=r(qRe," (GPT-J model)"),qRe.forEach(t),J6r=i(Oe),E3=n(Oe,"LI",{});var NRe=s(E3);lMe=n(NRe,"STRONG",{});var YEt=s(lMe);Y6r=r(YEt,"roberta"),YEt.forEach(t),K6r=r(NRe," \u2014 "),WU=n(NRe,"A",{href:!0});var KEt=s(WU);Z6r=r(KEt,"FlaxRobertaForCausalLM"),KEt.forEach(t),eyr=r(NRe," (RoBERTa model)"),NRe.forEach(t),oyr=i(Oe),C3=n(Oe,"LI",{});var jRe=s(C3);iMe=n(jRe,"STRONG",{});var ZEt=s(iMe);ryr=r(ZEt,"xglm"),ZEt.forEach(t),tyr=r(jRe," \u2014 "),HU=n(jRe,"A",{href:!0});var e5t=s(HU);ayr=r(e5t,"FlaxXGLMForCausalLM"),e5t.forEach(t),nyr=r(jRe," (XGLM model)"),jRe.forEach(t),Oe.forEach(t),syr=i(Dl),T(w3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),DIe=i(m),Sc=n(m,"H2",{class:!0});var WNe=s(Sc);A3=n(WNe,"A",{id:!0,class:!0,href:!0});var o5t=s(A3);dMe=n(o5t,"SPAN",{});var r5t=s(dMe);T(Ux.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),lyr=i(WNe),cMe=n(WNe,"SPAN",{});var t5t=s(cMe);iyr=r(t5t,"FlaxAutoModelForPreTraining"),t5t.forEach(t),WNe.forEach(t),GIe=i(m),gr=n(m,"DIV",{class:!0});var Gl=s(gr);T(Jx.$$.fragment,Gl),dyr=i(Gl),Rc=n(Gl,"P",{});var uZ=s(Rc);cyr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UU=n(uZ,"A",{href:!0});var a5t=s(UU);myr=r(a5t,"from_pretrained()"),a5t.forEach(t),fyr=r(uZ," class method or the "),JU=n(uZ,"A",{href:!0});var n5t=s(JU);gyr=r(n5t,"from_config()"),n5t.forEach(t),hyr=r(uZ,` class
method.`),uZ.forEach(t),uyr=i(Gl),Yx=n(Gl,"P",{});var HNe=s(Yx);pyr=r(HNe,"This class cannot be instantiated directly using "),mMe=n(HNe,"CODE",{});var s5t=s(mMe);_yr=r(s5t,"__init__()"),s5t.forEach(t),byr=r(HNe," (throws an error)."),HNe.forEach(t),Fyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var _6=s(Gt);T(Kx.$$.fragment,_6),vyr=i(_6),fMe=n(_6,"P",{});var l5t=s(fMe);Tyr=r(l5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l5t.forEach(t),Myr=i(_6),Bc=n(_6,"P",{});var pZ=s(Bc);Eyr=r(pZ,`Note:
Loading a model from its configuration file does `),gMe=n(pZ,"STRONG",{});var i5t=s(gMe);Cyr=r(i5t,"not"),i5t.forEach(t),wyr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(pZ,"A",{href:!0});var d5t=s(YU);Ayr=r(d5t,"from_pretrained()"),d5t.forEach(t),yyr=r(pZ," to load the model weights."),pZ.forEach(t),Lyr=i(_6),T(y3.$$.fragment,_6),_6.forEach(t),xyr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(Zx.$$.fragment,Ol),$yr=i(Ol),hMe=n(Ol,"P",{});var c5t=s(hMe);kyr=r(c5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c5t.forEach(t),Syr=i(Ol),un=n(Ol,"P",{});var b6=s(un);Ryr=r(b6,"The model class to instantiate is selected based on the "),uMe=n(b6,"CODE",{});var m5t=s(uMe);Byr=r(m5t,"model_type"),m5t.forEach(t),Pyr=r(b6,` property of the config object (either
passed as an argument or loaded from `),pMe=n(b6,"CODE",{});var f5t=s(pMe);Iyr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),qyr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(b6,"CODE",{});var g5t=s(_Me);Nyr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),jyr=r(b6,":"),b6.forEach(t),Dyr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);L3=n(we,"LI",{});var DRe=s(L3);bMe=n(DRe,"STRONG",{});var h5t=s(bMe);Gyr=r(h5t,"albert"),h5t.forEach(t),Oyr=r(DRe," \u2014 "),KU=n(DRe,"A",{href:!0});var u5t=s(KU);Vyr=r(u5t,"FlaxAlbertForPreTraining"),u5t.forEach(t),Xyr=r(DRe," (ALBERT model)"),DRe.forEach(t),zyr=i(we),x3=n(we,"LI",{});var GRe=s(x3);FMe=n(GRe,"STRONG",{});var p5t=s(FMe);Qyr=r(p5t,"bart"),p5t.forEach(t),Wyr=r(GRe," \u2014 "),ZU=n(GRe,"A",{href:!0});var _5t=s(ZU);Hyr=r(_5t,"FlaxBartForConditionalGeneration"),_5t.forEach(t),Uyr=r(GRe," (BART model)"),GRe.forEach(t),Jyr=i(we),$3=n(we,"LI",{});var ORe=s($3);vMe=n(ORe,"STRONG",{});var b5t=s(vMe);Yyr=r(b5t,"bert"),b5t.forEach(t),Kyr=r(ORe," \u2014 "),eJ=n(ORe,"A",{href:!0});var F5t=s(eJ);Zyr=r(F5t,"FlaxBertForPreTraining"),F5t.forEach(t),eLr=r(ORe," (BERT model)"),ORe.forEach(t),oLr=i(we),k3=n(we,"LI",{});var VRe=s(k3);TMe=n(VRe,"STRONG",{});var v5t=s(TMe);rLr=r(v5t,"big_bird"),v5t.forEach(t),tLr=r(VRe," \u2014 "),oJ=n(VRe,"A",{href:!0});var T5t=s(oJ);aLr=r(T5t,"FlaxBigBirdForPreTraining"),T5t.forEach(t),nLr=r(VRe," (BigBird model)"),VRe.forEach(t),sLr=i(we),S3=n(we,"LI",{});var XRe=s(S3);MMe=n(XRe,"STRONG",{});var M5t=s(MMe);lLr=r(M5t,"electra"),M5t.forEach(t),iLr=r(XRe," \u2014 "),rJ=n(XRe,"A",{href:!0});var E5t=s(rJ);dLr=r(E5t,"FlaxElectraForPreTraining"),E5t.forEach(t),cLr=r(XRe," (ELECTRA model)"),XRe.forEach(t),mLr=i(we),R3=n(we,"LI",{});var zRe=s(R3);EMe=n(zRe,"STRONG",{});var C5t=s(EMe);fLr=r(C5t,"mbart"),C5t.forEach(t),gLr=r(zRe," \u2014 "),tJ=n(zRe,"A",{href:!0});var w5t=s(tJ);hLr=r(w5t,"FlaxMBartForConditionalGeneration"),w5t.forEach(t),uLr=r(zRe," (mBART model)"),zRe.forEach(t),pLr=i(we),B3=n(we,"LI",{});var QRe=s(B3);CMe=n(QRe,"STRONG",{});var A5t=s(CMe);_Lr=r(A5t,"mt5"),A5t.forEach(t),bLr=r(QRe," \u2014 "),aJ=n(QRe,"A",{href:!0});var y5t=s(aJ);FLr=r(y5t,"FlaxMT5ForConditionalGeneration"),y5t.forEach(t),vLr=r(QRe," (mT5 model)"),QRe.forEach(t),TLr=i(we),P3=n(we,"LI",{});var WRe=s(P3);wMe=n(WRe,"STRONG",{});var L5t=s(wMe);MLr=r(L5t,"roberta"),L5t.forEach(t),ELr=r(WRe," \u2014 "),nJ=n(WRe,"A",{href:!0});var x5t=s(nJ);CLr=r(x5t,"FlaxRobertaForMaskedLM"),x5t.forEach(t),wLr=r(WRe," (RoBERTa model)"),WRe.forEach(t),ALr=i(we),I3=n(we,"LI",{});var HRe=s(I3);AMe=n(HRe,"STRONG",{});var $5t=s(AMe);yLr=r($5t,"roformer"),$5t.forEach(t),LLr=r(HRe," \u2014 "),sJ=n(HRe,"A",{href:!0});var k5t=s(sJ);xLr=r(k5t,"FlaxRoFormerForMaskedLM"),k5t.forEach(t),$Lr=r(HRe," (RoFormer model)"),HRe.forEach(t),kLr=i(we),q3=n(we,"LI",{});var URe=s(q3);yMe=n(URe,"STRONG",{});var S5t=s(yMe);SLr=r(S5t,"t5"),S5t.forEach(t),RLr=r(URe," \u2014 "),lJ=n(URe,"A",{href:!0});var R5t=s(lJ);BLr=r(R5t,"FlaxT5ForConditionalGeneration"),R5t.forEach(t),PLr=r(URe," (T5 model)"),URe.forEach(t),ILr=i(we),N3=n(we,"LI",{});var JRe=s(N3);LMe=n(JRe,"STRONG",{});var B5t=s(LMe);qLr=r(B5t,"wav2vec2"),B5t.forEach(t),NLr=r(JRe," \u2014 "),iJ=n(JRe,"A",{href:!0});var P5t=s(iJ);jLr=r(P5t,"FlaxWav2Vec2ForPreTraining"),P5t.forEach(t),DLr=r(JRe," (Wav2Vec2 model)"),JRe.forEach(t),GLr=i(we),j3=n(we,"LI",{});var YRe=s(j3);xMe=n(YRe,"STRONG",{});var I5t=s(xMe);OLr=r(I5t,"xlm-roberta"),I5t.forEach(t),VLr=r(YRe," \u2014 "),dJ=n(YRe,"A",{href:!0});var q5t=s(dJ);XLr=r(q5t,"FlaxXLMRobertaForMaskedLM"),q5t.forEach(t),zLr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),we.forEach(t),QLr=i(Ol),T(D3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),OIe=i(m),Pc=n(m,"H2",{class:!0});var UNe=s(Pc);G3=n(UNe,"A",{id:!0,class:!0,href:!0});var N5t=s(G3);$Me=n(N5t,"SPAN",{});var j5t=s($Me);T(e7.$$.fragment,j5t),j5t.forEach(t),N5t.forEach(t),WLr=i(UNe),kMe=n(UNe,"SPAN",{});var D5t=s(kMe);HLr=r(D5t,"FlaxAutoModelForMaskedLM"),D5t.forEach(t),UNe.forEach(t),VIe=i(m),hr=n(m,"DIV",{class:!0});var Vl=s(hr);T(o7.$$.fragment,Vl),ULr=i(Vl),Ic=n(Vl,"P",{});var _Z=s(Ic);JLr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=n(_Z,"A",{href:!0});var G5t=s(cJ);YLr=r(G5t,"from_pretrained()"),G5t.forEach(t),KLr=r(_Z," class method or the "),mJ=n(_Z,"A",{href:!0});var O5t=s(mJ);ZLr=r(O5t,"from_config()"),O5t.forEach(t),e8r=r(_Z,` class
method.`),_Z.forEach(t),o8r=i(Vl),r7=n(Vl,"P",{});var JNe=s(r7);r8r=r(JNe,"This class cannot be instantiated directly using "),SMe=n(JNe,"CODE",{});var V5t=s(SMe);t8r=r(V5t,"__init__()"),V5t.forEach(t),a8r=r(JNe," (throws an error)."),JNe.forEach(t),n8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var F6=s(Ot);T(t7.$$.fragment,F6),s8r=i(F6),RMe=n(F6,"P",{});var X5t=s(RMe);l8r=r(X5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X5t.forEach(t),i8r=i(F6),qc=n(F6,"P",{});var bZ=s(qc);d8r=r(bZ,`Note:
Loading a model from its configuration file does `),BMe=n(bZ,"STRONG",{});var z5t=s(BMe);c8r=r(z5t,"not"),z5t.forEach(t),m8r=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(bZ,"A",{href:!0});var Q5t=s(fJ);f8r=r(Q5t,"from_pretrained()"),Q5t.forEach(t),g8r=r(bZ," to load the model weights."),bZ.forEach(t),h8r=i(F6),T(O3.$$.fragment,F6),F6.forEach(t),u8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(a7.$$.fragment,Xl),p8r=i(Xl),PMe=n(Xl,"P",{});var W5t=s(PMe);_8r=r(W5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W5t.forEach(t),b8r=i(Xl),pn=n(Xl,"P",{});var v6=s(pn);F8r=r(v6,"The model class to instantiate is selected based on the "),IMe=n(v6,"CODE",{});var H5t=s(IMe);v8r=r(H5t,"model_type"),H5t.forEach(t),T8r=r(v6,` property of the config object (either
passed as an argument or loaded from `),qMe=n(v6,"CODE",{});var U5t=s(qMe);M8r=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),E8r=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(v6,"CODE",{});var J5t=s(NMe);C8r=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),w8r=r(v6,":"),v6.forEach(t),A8r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);V3=n(Be,"LI",{});var KRe=s(V3);jMe=n(KRe,"STRONG",{});var Y5t=s(jMe);y8r=r(Y5t,"albert"),Y5t.forEach(t),L8r=r(KRe," \u2014 "),gJ=n(KRe,"A",{href:!0});var K5t=s(gJ);x8r=r(K5t,"FlaxAlbertForMaskedLM"),K5t.forEach(t),$8r=r(KRe," (ALBERT model)"),KRe.forEach(t),k8r=i(Be),X3=n(Be,"LI",{});var ZRe=s(X3);DMe=n(ZRe,"STRONG",{});var Z5t=s(DMe);S8r=r(Z5t,"bart"),Z5t.forEach(t),R8r=r(ZRe," \u2014 "),hJ=n(ZRe,"A",{href:!0});var eCt=s(hJ);B8r=r(eCt,"FlaxBartForConditionalGeneration"),eCt.forEach(t),P8r=r(ZRe," (BART model)"),ZRe.forEach(t),I8r=i(Be),z3=n(Be,"LI",{});var eBe=s(z3);GMe=n(eBe,"STRONG",{});var oCt=s(GMe);q8r=r(oCt,"bert"),oCt.forEach(t),N8r=r(eBe," \u2014 "),uJ=n(eBe,"A",{href:!0});var rCt=s(uJ);j8r=r(rCt,"FlaxBertForMaskedLM"),rCt.forEach(t),D8r=r(eBe," (BERT model)"),eBe.forEach(t),G8r=i(Be),Q3=n(Be,"LI",{});var oBe=s(Q3);OMe=n(oBe,"STRONG",{});var tCt=s(OMe);O8r=r(tCt,"big_bird"),tCt.forEach(t),V8r=r(oBe," \u2014 "),pJ=n(oBe,"A",{href:!0});var aCt=s(pJ);X8r=r(aCt,"FlaxBigBirdForMaskedLM"),aCt.forEach(t),z8r=r(oBe," (BigBird model)"),oBe.forEach(t),Q8r=i(Be),W3=n(Be,"LI",{});var rBe=s(W3);VMe=n(rBe,"STRONG",{});var nCt=s(VMe);W8r=r(nCt,"distilbert"),nCt.forEach(t),H8r=r(rBe," \u2014 "),_J=n(rBe,"A",{href:!0});var sCt=s(_J);U8r=r(sCt,"FlaxDistilBertForMaskedLM"),sCt.forEach(t),J8r=r(rBe," (DistilBERT model)"),rBe.forEach(t),Y8r=i(Be),H3=n(Be,"LI",{});var tBe=s(H3);XMe=n(tBe,"STRONG",{});var lCt=s(XMe);K8r=r(lCt,"electra"),lCt.forEach(t),Z8r=r(tBe," \u2014 "),bJ=n(tBe,"A",{href:!0});var iCt=s(bJ);exr=r(iCt,"FlaxElectraForMaskedLM"),iCt.forEach(t),oxr=r(tBe," (ELECTRA model)"),tBe.forEach(t),rxr=i(Be),U3=n(Be,"LI",{});var aBe=s(U3);zMe=n(aBe,"STRONG",{});var dCt=s(zMe);txr=r(dCt,"mbart"),dCt.forEach(t),axr=r(aBe," \u2014 "),FJ=n(aBe,"A",{href:!0});var cCt=s(FJ);nxr=r(cCt,"FlaxMBartForConditionalGeneration"),cCt.forEach(t),sxr=r(aBe," (mBART model)"),aBe.forEach(t),lxr=i(Be),J3=n(Be,"LI",{});var nBe=s(J3);QMe=n(nBe,"STRONG",{});var mCt=s(QMe);ixr=r(mCt,"roberta"),mCt.forEach(t),dxr=r(nBe," \u2014 "),vJ=n(nBe,"A",{href:!0});var fCt=s(vJ);cxr=r(fCt,"FlaxRobertaForMaskedLM"),fCt.forEach(t),mxr=r(nBe," (RoBERTa model)"),nBe.forEach(t),fxr=i(Be),Y3=n(Be,"LI",{});var sBe=s(Y3);WMe=n(sBe,"STRONG",{});var gCt=s(WMe);gxr=r(gCt,"roformer"),gCt.forEach(t),hxr=r(sBe," \u2014 "),TJ=n(sBe,"A",{href:!0});var hCt=s(TJ);uxr=r(hCt,"FlaxRoFormerForMaskedLM"),hCt.forEach(t),pxr=r(sBe," (RoFormer model)"),sBe.forEach(t),_xr=i(Be),K3=n(Be,"LI",{});var lBe=s(K3);HMe=n(lBe,"STRONG",{});var uCt=s(HMe);bxr=r(uCt,"xlm-roberta"),uCt.forEach(t),Fxr=r(lBe," \u2014 "),MJ=n(lBe,"A",{href:!0});var pCt=s(MJ);vxr=r(pCt,"FlaxXLMRobertaForMaskedLM"),pCt.forEach(t),Txr=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),Be.forEach(t),Mxr=i(Xl),T(Z3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),XIe=i(m),Nc=n(m,"H2",{class:!0});var YNe=s(Nc);ew=n(YNe,"A",{id:!0,class:!0,href:!0});var _Ct=s(ew);UMe=n(_Ct,"SPAN",{});var bCt=s(UMe);T(n7.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),Exr=i(YNe),JMe=n(YNe,"SPAN",{});var FCt=s(JMe);Cxr=r(FCt,"FlaxAutoModelForSeq2SeqLM"),FCt.forEach(t),YNe.forEach(t),zIe=i(m),ur=n(m,"DIV",{class:!0});var zl=s(ur);T(s7.$$.fragment,zl),wxr=i(zl),jc=n(zl,"P",{});var FZ=s(jc);Axr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=n(FZ,"A",{href:!0});var vCt=s(EJ);yxr=r(vCt,"from_pretrained()"),vCt.forEach(t),Lxr=r(FZ," class method or the "),CJ=n(FZ,"A",{href:!0});var TCt=s(CJ);xxr=r(TCt,"from_config()"),TCt.forEach(t),$xr=r(FZ,` class
method.`),FZ.forEach(t),kxr=i(zl),l7=n(zl,"P",{});var KNe=s(l7);Sxr=r(KNe,"This class cannot be instantiated directly using "),YMe=n(KNe,"CODE",{});var MCt=s(YMe);Rxr=r(MCt,"__init__()"),MCt.forEach(t),Bxr=r(KNe," (throws an error)."),KNe.forEach(t),Pxr=i(zl),Vt=n(zl,"DIV",{class:!0});var T6=s(Vt);T(i7.$$.fragment,T6),Ixr=i(T6),KMe=n(T6,"P",{});var ECt=s(KMe);qxr=r(ECt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ECt.forEach(t),Nxr=i(T6),Dc=n(T6,"P",{});var vZ=s(Dc);jxr=r(vZ,`Note:
Loading a model from its configuration file does `),ZMe=n(vZ,"STRONG",{});var CCt=s(ZMe);Dxr=r(CCt,"not"),CCt.forEach(t),Gxr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(vZ,"A",{href:!0});var wCt=s(wJ);Oxr=r(wCt,"from_pretrained()"),wCt.forEach(t),Vxr=r(vZ," to load the model weights."),vZ.forEach(t),Xxr=i(T6),T(ow.$$.fragment,T6),T6.forEach(t),zxr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(d7.$$.fragment,Ql),Qxr=i(Ql),e4e=n(Ql,"P",{});var ACt=s(e4e);Wxr=r(ACt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ACt.forEach(t),Hxr=i(Ql),_n=n(Ql,"P",{});var M6=s(_n);Uxr=r(M6,"The model class to instantiate is selected based on the "),o4e=n(M6,"CODE",{});var yCt=s(o4e);Jxr=r(yCt,"model_type"),yCt.forEach(t),Yxr=r(M6,` property of the config object (either
passed as an argument or loaded from `),r4e=n(M6,"CODE",{});var LCt=s(r4e);Kxr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),Zxr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(M6,"CODE",{});var xCt=s(t4e);e7r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),o7r=r(M6,":"),M6.forEach(t),r7r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);rw=n(Ve,"LI",{});var iBe=s(rw);a4e=n(iBe,"STRONG",{});var $Ct=s(a4e);t7r=r($Ct,"bart"),$Ct.forEach(t),a7r=r(iBe," \u2014 "),AJ=n(iBe,"A",{href:!0});var kCt=s(AJ);n7r=r(kCt,"FlaxBartForConditionalGeneration"),kCt.forEach(t),s7r=r(iBe," (BART model)"),iBe.forEach(t),l7r=i(Ve),tw=n(Ve,"LI",{});var dBe=s(tw);n4e=n(dBe,"STRONG",{});var SCt=s(n4e);i7r=r(SCt,"blenderbot"),SCt.forEach(t),d7r=r(dBe," \u2014 "),yJ=n(dBe,"A",{href:!0});var RCt=s(yJ);c7r=r(RCt,"FlaxBlenderbotForConditionalGeneration"),RCt.forEach(t),m7r=r(dBe," (Blenderbot model)"),dBe.forEach(t),f7r=i(Ve),aw=n(Ve,"LI",{});var cBe=s(aw);s4e=n(cBe,"STRONG",{});var BCt=s(s4e);g7r=r(BCt,"blenderbot-small"),BCt.forEach(t),h7r=r(cBe," \u2014 "),LJ=n(cBe,"A",{href:!0});var PCt=s(LJ);u7r=r(PCt,"FlaxBlenderbotSmallForConditionalGeneration"),PCt.forEach(t),p7r=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),_7r=i(Ve),nw=n(Ve,"LI",{});var mBe=s(nw);l4e=n(mBe,"STRONG",{});var ICt=s(l4e);b7r=r(ICt,"encoder-decoder"),ICt.forEach(t),F7r=r(mBe," \u2014 "),xJ=n(mBe,"A",{href:!0});var qCt=s(xJ);v7r=r(qCt,"FlaxEncoderDecoderModel"),qCt.forEach(t),T7r=r(mBe," (Encoder decoder model)"),mBe.forEach(t),M7r=i(Ve),sw=n(Ve,"LI",{});var fBe=s(sw);i4e=n(fBe,"STRONG",{});var NCt=s(i4e);E7r=r(NCt,"marian"),NCt.forEach(t),C7r=r(fBe," \u2014 "),$J=n(fBe,"A",{href:!0});var jCt=s($J);w7r=r(jCt,"FlaxMarianMTModel"),jCt.forEach(t),A7r=r(fBe," (Marian model)"),fBe.forEach(t),y7r=i(Ve),lw=n(Ve,"LI",{});var gBe=s(lw);d4e=n(gBe,"STRONG",{});var DCt=s(d4e);L7r=r(DCt,"mbart"),DCt.forEach(t),x7r=r(gBe," \u2014 "),kJ=n(gBe,"A",{href:!0});var GCt=s(kJ);$7r=r(GCt,"FlaxMBartForConditionalGeneration"),GCt.forEach(t),k7r=r(gBe," (mBART model)"),gBe.forEach(t),S7r=i(Ve),iw=n(Ve,"LI",{});var hBe=s(iw);c4e=n(hBe,"STRONG",{});var OCt=s(c4e);R7r=r(OCt,"mt5"),OCt.forEach(t),B7r=r(hBe," \u2014 "),SJ=n(hBe,"A",{href:!0});var VCt=s(SJ);P7r=r(VCt,"FlaxMT5ForConditionalGeneration"),VCt.forEach(t),I7r=r(hBe," (mT5 model)"),hBe.forEach(t),q7r=i(Ve),dw=n(Ve,"LI",{});var uBe=s(dw);m4e=n(uBe,"STRONG",{});var XCt=s(m4e);N7r=r(XCt,"pegasus"),XCt.forEach(t),j7r=r(uBe," \u2014 "),RJ=n(uBe,"A",{href:!0});var zCt=s(RJ);D7r=r(zCt,"FlaxPegasusForConditionalGeneration"),zCt.forEach(t),G7r=r(uBe," (Pegasus model)"),uBe.forEach(t),O7r=i(Ve),cw=n(Ve,"LI",{});var pBe=s(cw);f4e=n(pBe,"STRONG",{});var QCt=s(f4e);V7r=r(QCt,"t5"),QCt.forEach(t),X7r=r(pBe," \u2014 "),BJ=n(pBe,"A",{href:!0});var WCt=s(BJ);z7r=r(WCt,"FlaxT5ForConditionalGeneration"),WCt.forEach(t),Q7r=r(pBe," (T5 model)"),pBe.forEach(t),Ve.forEach(t),W7r=i(Ql),T(mw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),QIe=i(m),Gc=n(m,"H2",{class:!0});var ZNe=s(Gc);fw=n(ZNe,"A",{id:!0,class:!0,href:!0});var HCt=s(fw);g4e=n(HCt,"SPAN",{});var UCt=s(g4e);T(c7.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),H7r=i(ZNe),h4e=n(ZNe,"SPAN",{});var JCt=s(h4e);U7r=r(JCt,"FlaxAutoModelForSequenceClassification"),JCt.forEach(t),ZNe.forEach(t),WIe=i(m),pr=n(m,"DIV",{class:!0});var Wl=s(pr);T(m7.$$.fragment,Wl),J7r=i(Wl),Oc=n(Wl,"P",{});var TZ=s(Oc);Y7r=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PJ=n(TZ,"A",{href:!0});var YCt=s(PJ);K7r=r(YCt,"from_pretrained()"),YCt.forEach(t),Z7r=r(TZ," class method or the "),IJ=n(TZ,"A",{href:!0});var KCt=s(IJ);e9r=r(KCt,"from_config()"),KCt.forEach(t),o9r=r(TZ,` class
method.`),TZ.forEach(t),r9r=i(Wl),f7=n(Wl,"P",{});var eje=s(f7);t9r=r(eje,"This class cannot be instantiated directly using "),u4e=n(eje,"CODE",{});var ZCt=s(u4e);a9r=r(ZCt,"__init__()"),ZCt.forEach(t),n9r=r(eje," (throws an error)."),eje.forEach(t),s9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var E6=s(Xt);T(g7.$$.fragment,E6),l9r=i(E6),p4e=n(E6,"P",{});var e3t=s(p4e);i9r=r(e3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e3t.forEach(t),d9r=i(E6),Vc=n(E6,"P",{});var MZ=s(Vc);c9r=r(MZ,`Note:
Loading a model from its configuration file does `),_4e=n(MZ,"STRONG",{});var o3t=s(_4e);m9r=r(o3t,"not"),o3t.forEach(t),f9r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(MZ,"A",{href:!0});var r3t=s(qJ);g9r=r(r3t,"from_pretrained()"),r3t.forEach(t),h9r=r(MZ," to load the model weights."),MZ.forEach(t),u9r=i(E6),T(gw.$$.fragment,E6),E6.forEach(t),p9r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(h7.$$.fragment,Hl),_9r=i(Hl),b4e=n(Hl,"P",{});var t3t=s(b4e);b9r=r(t3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t3t.forEach(t),F9r=i(Hl),bn=n(Hl,"P",{});var C6=s(bn);v9r=r(C6,"The model class to instantiate is selected based on the "),F4e=n(C6,"CODE",{});var a3t=s(F4e);T9r=r(a3t,"model_type"),a3t.forEach(t),M9r=r(C6,` property of the config object (either
passed as an argument or loaded from `),v4e=n(C6,"CODE",{});var n3t=s(v4e);E9r=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),C9r=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(C6,"CODE",{});var s3t=s(T4e);w9r=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),A9r=r(C6,":"),C6.forEach(t),y9r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);hw=n(Pe,"LI",{});var _Be=s(hw);M4e=n(_Be,"STRONG",{});var l3t=s(M4e);L9r=r(l3t,"albert"),l3t.forEach(t),x9r=r(_Be," \u2014 "),NJ=n(_Be,"A",{href:!0});var i3t=s(NJ);$9r=r(i3t,"FlaxAlbertForSequenceClassification"),i3t.forEach(t),k9r=r(_Be," (ALBERT model)"),_Be.forEach(t),S9r=i(Pe),uw=n(Pe,"LI",{});var bBe=s(uw);E4e=n(bBe,"STRONG",{});var d3t=s(E4e);R9r=r(d3t,"bart"),d3t.forEach(t),B9r=r(bBe," \u2014 "),jJ=n(bBe,"A",{href:!0});var c3t=s(jJ);P9r=r(c3t,"FlaxBartForSequenceClassification"),c3t.forEach(t),I9r=r(bBe," (BART model)"),bBe.forEach(t),q9r=i(Pe),pw=n(Pe,"LI",{});var FBe=s(pw);C4e=n(FBe,"STRONG",{});var m3t=s(C4e);N9r=r(m3t,"bert"),m3t.forEach(t),j9r=r(FBe," \u2014 "),DJ=n(FBe,"A",{href:!0});var f3t=s(DJ);D9r=r(f3t,"FlaxBertForSequenceClassification"),f3t.forEach(t),G9r=r(FBe," (BERT model)"),FBe.forEach(t),O9r=i(Pe),_w=n(Pe,"LI",{});var vBe=s(_w);w4e=n(vBe,"STRONG",{});var g3t=s(w4e);V9r=r(g3t,"big_bird"),g3t.forEach(t),X9r=r(vBe," \u2014 "),GJ=n(vBe,"A",{href:!0});var h3t=s(GJ);z9r=r(h3t,"FlaxBigBirdForSequenceClassification"),h3t.forEach(t),Q9r=r(vBe," (BigBird model)"),vBe.forEach(t),W9r=i(Pe),bw=n(Pe,"LI",{});var TBe=s(bw);A4e=n(TBe,"STRONG",{});var u3t=s(A4e);H9r=r(u3t,"distilbert"),u3t.forEach(t),U9r=r(TBe," \u2014 "),OJ=n(TBe,"A",{href:!0});var p3t=s(OJ);J9r=r(p3t,"FlaxDistilBertForSequenceClassification"),p3t.forEach(t),Y9r=r(TBe," (DistilBERT model)"),TBe.forEach(t),K9r=i(Pe),Fw=n(Pe,"LI",{});var MBe=s(Fw);y4e=n(MBe,"STRONG",{});var _3t=s(y4e);Z9r=r(_3t,"electra"),_3t.forEach(t),e$r=r(MBe," \u2014 "),VJ=n(MBe,"A",{href:!0});var b3t=s(VJ);o$r=r(b3t,"FlaxElectraForSequenceClassification"),b3t.forEach(t),r$r=r(MBe," (ELECTRA model)"),MBe.forEach(t),t$r=i(Pe),vw=n(Pe,"LI",{});var EBe=s(vw);L4e=n(EBe,"STRONG",{});var F3t=s(L4e);a$r=r(F3t,"mbart"),F3t.forEach(t),n$r=r(EBe," \u2014 "),XJ=n(EBe,"A",{href:!0});var v3t=s(XJ);s$r=r(v3t,"FlaxMBartForSequenceClassification"),v3t.forEach(t),l$r=r(EBe," (mBART model)"),EBe.forEach(t),i$r=i(Pe),Tw=n(Pe,"LI",{});var CBe=s(Tw);x4e=n(CBe,"STRONG",{});var T3t=s(x4e);d$r=r(T3t,"roberta"),T3t.forEach(t),c$r=r(CBe," \u2014 "),zJ=n(CBe,"A",{href:!0});var M3t=s(zJ);m$r=r(M3t,"FlaxRobertaForSequenceClassification"),M3t.forEach(t),f$r=r(CBe," (RoBERTa model)"),CBe.forEach(t),g$r=i(Pe),Mw=n(Pe,"LI",{});var wBe=s(Mw);$4e=n(wBe,"STRONG",{});var E3t=s($4e);h$r=r(E3t,"roformer"),E3t.forEach(t),u$r=r(wBe," \u2014 "),QJ=n(wBe,"A",{href:!0});var C3t=s(QJ);p$r=r(C3t,"FlaxRoFormerForSequenceClassification"),C3t.forEach(t),_$r=r(wBe," (RoFormer model)"),wBe.forEach(t),b$r=i(Pe),Ew=n(Pe,"LI",{});var ABe=s(Ew);k4e=n(ABe,"STRONG",{});var w3t=s(k4e);F$r=r(w3t,"xlm-roberta"),w3t.forEach(t),v$r=r(ABe," \u2014 "),WJ=n(ABe,"A",{href:!0});var A3t=s(WJ);T$r=r(A3t,"FlaxXLMRobertaForSequenceClassification"),A3t.forEach(t),M$r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Pe.forEach(t),E$r=i(Hl),T(Cw.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),HIe=i(m),Xc=n(m,"H2",{class:!0});var oje=s(Xc);ww=n(oje,"A",{id:!0,class:!0,href:!0});var y3t=s(ww);S4e=n(y3t,"SPAN",{});var L3t=s(S4e);T(u7.$$.fragment,L3t),L3t.forEach(t),y3t.forEach(t),C$r=i(oje),R4e=n(oje,"SPAN",{});var x3t=s(R4e);w$r=r(x3t,"FlaxAutoModelForQuestionAnswering"),x3t.forEach(t),oje.forEach(t),UIe=i(m),_r=n(m,"DIV",{class:!0});var Ul=s(_r);T(p7.$$.fragment,Ul),A$r=i(Ul),zc=n(Ul,"P",{});var EZ=s(zc);y$r=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HJ=n(EZ,"A",{href:!0});var $3t=s(HJ);L$r=r($3t,"from_pretrained()"),$3t.forEach(t),x$r=r(EZ," class method or the "),UJ=n(EZ,"A",{href:!0});var k3t=s(UJ);$$r=r(k3t,"from_config()"),k3t.forEach(t),k$r=r(EZ,` class
method.`),EZ.forEach(t),S$r=i(Ul),_7=n(Ul,"P",{});var rje=s(_7);R$r=r(rje,"This class cannot be instantiated directly using "),B4e=n(rje,"CODE",{});var S3t=s(B4e);B$r=r(S3t,"__init__()"),S3t.forEach(t),P$r=r(rje," (throws an error)."),rje.forEach(t),I$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var w6=s(zt);T(b7.$$.fragment,w6),q$r=i(w6),P4e=n(w6,"P",{});var R3t=s(P4e);N$r=r(R3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R3t.forEach(t),j$r=i(w6),Qc=n(w6,"P",{});var CZ=s(Qc);D$r=r(CZ,`Note:
Loading a model from its configuration file does `),I4e=n(CZ,"STRONG",{});var B3t=s(I4e);G$r=r(B3t,"not"),B3t.forEach(t),O$r=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(CZ,"A",{href:!0});var P3t=s(JJ);V$r=r(P3t,"from_pretrained()"),P3t.forEach(t),X$r=r(CZ," to load the model weights."),CZ.forEach(t),z$r=i(w6),T(Aw.$$.fragment,w6),w6.forEach(t),Q$r=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(F7.$$.fragment,Jl),W$r=i(Jl),q4e=n(Jl,"P",{});var I3t=s(q4e);H$r=r(I3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I3t.forEach(t),U$r=i(Jl),Fn=n(Jl,"P",{});var A6=s(Fn);J$r=r(A6,"The model class to instantiate is selected based on the "),N4e=n(A6,"CODE",{});var q3t=s(N4e);Y$r=r(q3t,"model_type"),q3t.forEach(t),K$r=r(A6,` property of the config object (either
passed as an argument or loaded from `),j4e=n(A6,"CODE",{});var N3t=s(j4e);Z$r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),ekr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(A6,"CODE",{});var j3t=s(D4e);okr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),rkr=r(A6,":"),A6.forEach(t),tkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);yw=n(Ie,"LI",{});var yBe=s(yw);G4e=n(yBe,"STRONG",{});var D3t=s(G4e);akr=r(D3t,"albert"),D3t.forEach(t),nkr=r(yBe," \u2014 "),YJ=n(yBe,"A",{href:!0});var G3t=s(YJ);skr=r(G3t,"FlaxAlbertForQuestionAnswering"),G3t.forEach(t),lkr=r(yBe," (ALBERT model)"),yBe.forEach(t),ikr=i(Ie),Lw=n(Ie,"LI",{});var LBe=s(Lw);O4e=n(LBe,"STRONG",{});var O3t=s(O4e);dkr=r(O3t,"bart"),O3t.forEach(t),ckr=r(LBe," \u2014 "),KJ=n(LBe,"A",{href:!0});var V3t=s(KJ);mkr=r(V3t,"FlaxBartForQuestionAnswering"),V3t.forEach(t),fkr=r(LBe," (BART model)"),LBe.forEach(t),gkr=i(Ie),xw=n(Ie,"LI",{});var xBe=s(xw);V4e=n(xBe,"STRONG",{});var X3t=s(V4e);hkr=r(X3t,"bert"),X3t.forEach(t),ukr=r(xBe," \u2014 "),ZJ=n(xBe,"A",{href:!0});var z3t=s(ZJ);pkr=r(z3t,"FlaxBertForQuestionAnswering"),z3t.forEach(t),_kr=r(xBe," (BERT model)"),xBe.forEach(t),bkr=i(Ie),$w=n(Ie,"LI",{});var $Be=s($w);X4e=n($Be,"STRONG",{});var Q3t=s(X4e);Fkr=r(Q3t,"big_bird"),Q3t.forEach(t),vkr=r($Be," \u2014 "),eY=n($Be,"A",{href:!0});var W3t=s(eY);Tkr=r(W3t,"FlaxBigBirdForQuestionAnswering"),W3t.forEach(t),Mkr=r($Be," (BigBird model)"),$Be.forEach(t),Ekr=i(Ie),kw=n(Ie,"LI",{});var kBe=s(kw);z4e=n(kBe,"STRONG",{});var H3t=s(z4e);Ckr=r(H3t,"distilbert"),H3t.forEach(t),wkr=r(kBe," \u2014 "),oY=n(kBe,"A",{href:!0});var U3t=s(oY);Akr=r(U3t,"FlaxDistilBertForQuestionAnswering"),U3t.forEach(t),ykr=r(kBe," (DistilBERT model)"),kBe.forEach(t),Lkr=i(Ie),Sw=n(Ie,"LI",{});var SBe=s(Sw);Q4e=n(SBe,"STRONG",{});var J3t=s(Q4e);xkr=r(J3t,"electra"),J3t.forEach(t),$kr=r(SBe," \u2014 "),rY=n(SBe,"A",{href:!0});var Y3t=s(rY);kkr=r(Y3t,"FlaxElectraForQuestionAnswering"),Y3t.forEach(t),Skr=r(SBe," (ELECTRA model)"),SBe.forEach(t),Rkr=i(Ie),Rw=n(Ie,"LI",{});var RBe=s(Rw);W4e=n(RBe,"STRONG",{});var K3t=s(W4e);Bkr=r(K3t,"mbart"),K3t.forEach(t),Pkr=r(RBe," \u2014 "),tY=n(RBe,"A",{href:!0});var Z3t=s(tY);Ikr=r(Z3t,"FlaxMBartForQuestionAnswering"),Z3t.forEach(t),qkr=r(RBe," (mBART model)"),RBe.forEach(t),Nkr=i(Ie),Bw=n(Ie,"LI",{});var BBe=s(Bw);H4e=n(BBe,"STRONG",{});var ewt=s(H4e);jkr=r(ewt,"roberta"),ewt.forEach(t),Dkr=r(BBe," \u2014 "),aY=n(BBe,"A",{href:!0});var owt=s(aY);Gkr=r(owt,"FlaxRobertaForQuestionAnswering"),owt.forEach(t),Okr=r(BBe," (RoBERTa model)"),BBe.forEach(t),Vkr=i(Ie),Pw=n(Ie,"LI",{});var PBe=s(Pw);U4e=n(PBe,"STRONG",{});var rwt=s(U4e);Xkr=r(rwt,"roformer"),rwt.forEach(t),zkr=r(PBe," \u2014 "),nY=n(PBe,"A",{href:!0});var twt=s(nY);Qkr=r(twt,"FlaxRoFormerForQuestionAnswering"),twt.forEach(t),Wkr=r(PBe," (RoFormer model)"),PBe.forEach(t),Hkr=i(Ie),Iw=n(Ie,"LI",{});var IBe=s(Iw);J4e=n(IBe,"STRONG",{});var awt=s(J4e);Ukr=r(awt,"xlm-roberta"),awt.forEach(t),Jkr=r(IBe," \u2014 "),sY=n(IBe,"A",{href:!0});var nwt=s(sY);Ykr=r(nwt,"FlaxXLMRobertaForQuestionAnswering"),nwt.forEach(t),Kkr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),Ie.forEach(t),Zkr=i(Jl),T(qw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),JIe=i(m),Wc=n(m,"H2",{class:!0});var tje=s(Wc);Nw=n(tje,"A",{id:!0,class:!0,href:!0});var swt=s(Nw);Y4e=n(swt,"SPAN",{});var lwt=s(Y4e);T(v7.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),eSr=i(tje),K4e=n(tje,"SPAN",{});var iwt=s(K4e);oSr=r(iwt,"FlaxAutoModelForTokenClassification"),iwt.forEach(t),tje.forEach(t),YIe=i(m),br=n(m,"DIV",{class:!0});var Yl=s(br);T(T7.$$.fragment,Yl),rSr=i(Yl),Hc=n(Yl,"P",{});var wZ=s(Hc);tSr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=n(wZ,"A",{href:!0});var dwt=s(lY);aSr=r(dwt,"from_pretrained()"),dwt.forEach(t),nSr=r(wZ," class method or the "),iY=n(wZ,"A",{href:!0});var cwt=s(iY);sSr=r(cwt,"from_config()"),cwt.forEach(t),lSr=r(wZ,` class
method.`),wZ.forEach(t),iSr=i(Yl),M7=n(Yl,"P",{});var aje=s(M7);dSr=r(aje,"This class cannot be instantiated directly using "),Z4e=n(aje,"CODE",{});var mwt=s(Z4e);cSr=r(mwt,"__init__()"),mwt.forEach(t),mSr=r(aje," (throws an error)."),aje.forEach(t),fSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var y6=s(Qt);T(E7.$$.fragment,y6),gSr=i(y6),eEe=n(y6,"P",{});var fwt=s(eEe);hSr=r(fwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fwt.forEach(t),uSr=i(y6),Uc=n(y6,"P",{});var AZ=s(Uc);pSr=r(AZ,`Note:
Loading a model from its configuration file does `),oEe=n(AZ,"STRONG",{});var gwt=s(oEe);_Sr=r(gwt,"not"),gwt.forEach(t),bSr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(AZ,"A",{href:!0});var hwt=s(dY);FSr=r(hwt,"from_pretrained()"),hwt.forEach(t),vSr=r(AZ," to load the model weights."),AZ.forEach(t),TSr=i(y6),T(jw.$$.fragment,y6),y6.forEach(t),MSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(C7.$$.fragment,Kl),ESr=i(Kl),rEe=n(Kl,"P",{});var uwt=s(rEe);CSr=r(uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uwt.forEach(t),wSr=i(Kl),vn=n(Kl,"P",{});var L6=s(vn);ASr=r(L6,"The model class to instantiate is selected based on the "),tEe=n(L6,"CODE",{});var pwt=s(tEe);ySr=r(pwt,"model_type"),pwt.forEach(t),LSr=r(L6,` property of the config object (either
passed as an argument or loaded from `),aEe=n(L6,"CODE",{});var _wt=s(aEe);xSr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),$Sr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n(L6,"CODE",{});var bwt=s(nEe);kSr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),SSr=r(L6,":"),L6.forEach(t),RSr=i(Kl),De=n(Kl,"UL",{});var vo=s(De);Dw=n(vo,"LI",{});var qBe=s(Dw);sEe=n(qBe,"STRONG",{});var Fwt=s(sEe);BSr=r(Fwt,"albert"),Fwt.forEach(t),PSr=r(qBe," \u2014 "),cY=n(qBe,"A",{href:!0});var vwt=s(cY);ISr=r(vwt,"FlaxAlbertForTokenClassification"),vwt.forEach(t),qSr=r(qBe," (ALBERT model)"),qBe.forEach(t),NSr=i(vo),Gw=n(vo,"LI",{});var NBe=s(Gw);lEe=n(NBe,"STRONG",{});var Twt=s(lEe);jSr=r(Twt,"bert"),Twt.forEach(t),DSr=r(NBe," \u2014 "),mY=n(NBe,"A",{href:!0});var Mwt=s(mY);GSr=r(Mwt,"FlaxBertForTokenClassification"),Mwt.forEach(t),OSr=r(NBe," (BERT model)"),NBe.forEach(t),VSr=i(vo),Ow=n(vo,"LI",{});var jBe=s(Ow);iEe=n(jBe,"STRONG",{});var Ewt=s(iEe);XSr=r(Ewt,"big_bird"),Ewt.forEach(t),zSr=r(jBe," \u2014 "),fY=n(jBe,"A",{href:!0});var Cwt=s(fY);QSr=r(Cwt,"FlaxBigBirdForTokenClassification"),Cwt.forEach(t),WSr=r(jBe," (BigBird model)"),jBe.forEach(t),HSr=i(vo),Vw=n(vo,"LI",{});var DBe=s(Vw);dEe=n(DBe,"STRONG",{});var wwt=s(dEe);USr=r(wwt,"distilbert"),wwt.forEach(t),JSr=r(DBe," \u2014 "),gY=n(DBe,"A",{href:!0});var Awt=s(gY);YSr=r(Awt,"FlaxDistilBertForTokenClassification"),Awt.forEach(t),KSr=r(DBe," (DistilBERT model)"),DBe.forEach(t),ZSr=i(vo),Xw=n(vo,"LI",{});var GBe=s(Xw);cEe=n(GBe,"STRONG",{});var ywt=s(cEe);eRr=r(ywt,"electra"),ywt.forEach(t),oRr=r(GBe," \u2014 "),hY=n(GBe,"A",{href:!0});var Lwt=s(hY);rRr=r(Lwt,"FlaxElectraForTokenClassification"),Lwt.forEach(t),tRr=r(GBe," (ELECTRA model)"),GBe.forEach(t),aRr=i(vo),zw=n(vo,"LI",{});var OBe=s(zw);mEe=n(OBe,"STRONG",{});var xwt=s(mEe);nRr=r(xwt,"roberta"),xwt.forEach(t),sRr=r(OBe," \u2014 "),uY=n(OBe,"A",{href:!0});var $wt=s(uY);lRr=r($wt,"FlaxRobertaForTokenClassification"),$wt.forEach(t),iRr=r(OBe," (RoBERTa model)"),OBe.forEach(t),dRr=i(vo),Qw=n(vo,"LI",{});var VBe=s(Qw);fEe=n(VBe,"STRONG",{});var kwt=s(fEe);cRr=r(kwt,"roformer"),kwt.forEach(t),mRr=r(VBe," \u2014 "),pY=n(VBe,"A",{href:!0});var Swt=s(pY);fRr=r(Swt,"FlaxRoFormerForTokenClassification"),Swt.forEach(t),gRr=r(VBe," (RoFormer model)"),VBe.forEach(t),hRr=i(vo),Ww=n(vo,"LI",{});var XBe=s(Ww);gEe=n(XBe,"STRONG",{});var Rwt=s(gEe);uRr=r(Rwt,"xlm-roberta"),Rwt.forEach(t),pRr=r(XBe," \u2014 "),_Y=n(XBe,"A",{href:!0});var Bwt=s(_Y);_Rr=r(Bwt,"FlaxXLMRobertaForTokenClassification"),Bwt.forEach(t),bRr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),vo.forEach(t),FRr=i(Kl),T(Hw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),KIe=i(m),Jc=n(m,"H2",{class:!0});var nje=s(Jc);Uw=n(nje,"A",{id:!0,class:!0,href:!0});var Pwt=s(Uw);hEe=n(Pwt,"SPAN",{});var Iwt=s(hEe);T(w7.$$.fragment,Iwt),Iwt.forEach(t),Pwt.forEach(t),vRr=i(nje),uEe=n(nje,"SPAN",{});var qwt=s(uEe);TRr=r(qwt,"FlaxAutoModelForMultipleChoice"),qwt.forEach(t),nje.forEach(t),ZIe=i(m),Fr=n(m,"DIV",{class:!0});var Zl=s(Fr);T(A7.$$.fragment,Zl),MRr=i(Zl),Yc=n(Zl,"P",{});var yZ=s(Yc);ERr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bY=n(yZ,"A",{href:!0});var Nwt=s(bY);CRr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),wRr=r(yZ," class method or the "),FY=n(yZ,"A",{href:!0});var jwt=s(FY);ARr=r(jwt,"from_config()"),jwt.forEach(t),yRr=r(yZ,` class
method.`),yZ.forEach(t),LRr=i(Zl),y7=n(Zl,"P",{});var sje=s(y7);xRr=r(sje,"This class cannot be instantiated directly using "),pEe=n(sje,"CODE",{});var Dwt=s(pEe);$Rr=r(Dwt,"__init__()"),Dwt.forEach(t),kRr=r(sje," (throws an error)."),sje.forEach(t),SRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var x6=s(Wt);T(L7.$$.fragment,x6),RRr=i(x6),_Ee=n(x6,"P",{});var Gwt=s(_Ee);BRr=r(Gwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Gwt.forEach(t),PRr=i(x6),Kc=n(x6,"P",{});var LZ=s(Kc);IRr=r(LZ,`Note:
Loading a model from its configuration file does `),bEe=n(LZ,"STRONG",{});var Owt=s(bEe);qRr=r(Owt,"not"),Owt.forEach(t),NRr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(LZ,"A",{href:!0});var Vwt=s(vY);jRr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),DRr=r(LZ," to load the model weights."),LZ.forEach(t),GRr=i(x6),T(Jw.$$.fragment,x6),x6.forEach(t),ORr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(x7.$$.fragment,ei),VRr=i(ei),FEe=n(ei,"P",{});var Xwt=s(FEe);XRr=r(Xwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xwt.forEach(t),zRr=i(ei),Tn=n(ei,"P",{});var $6=s(Tn);QRr=r($6,"The model class to instantiate is selected based on the "),vEe=n($6,"CODE",{});var zwt=s(vEe);WRr=r(zwt,"model_type"),zwt.forEach(t),HRr=r($6,` property of the config object (either
passed as an argument or loaded from `),TEe=n($6,"CODE",{});var Qwt=s(TEe);URr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),JRr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n($6,"CODE",{});var Wwt=s(MEe);YRr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),KRr=r($6,":"),$6.forEach(t),ZRr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);Yw=n(To,"LI",{});var zBe=s(Yw);EEe=n(zBe,"STRONG",{});var Hwt=s(EEe);eBr=r(Hwt,"albert"),Hwt.forEach(t),oBr=r(zBe," \u2014 "),TY=n(zBe,"A",{href:!0});var Uwt=s(TY);rBr=r(Uwt,"FlaxAlbertForMultipleChoice"),Uwt.forEach(t),tBr=r(zBe," (ALBERT model)"),zBe.forEach(t),aBr=i(To),Kw=n(To,"LI",{});var QBe=s(Kw);CEe=n(QBe,"STRONG",{});var Jwt=s(CEe);nBr=r(Jwt,"bert"),Jwt.forEach(t),sBr=r(QBe," \u2014 "),MY=n(QBe,"A",{href:!0});var Ywt=s(MY);lBr=r(Ywt,"FlaxBertForMultipleChoice"),Ywt.forEach(t),iBr=r(QBe," (BERT model)"),QBe.forEach(t),dBr=i(To),Zw=n(To,"LI",{});var WBe=s(Zw);wEe=n(WBe,"STRONG",{});var Kwt=s(wEe);cBr=r(Kwt,"big_bird"),Kwt.forEach(t),mBr=r(WBe," \u2014 "),EY=n(WBe,"A",{href:!0});var Zwt=s(EY);fBr=r(Zwt,"FlaxBigBirdForMultipleChoice"),Zwt.forEach(t),gBr=r(WBe," (BigBird model)"),WBe.forEach(t),hBr=i(To),eA=n(To,"LI",{});var HBe=s(eA);AEe=n(HBe,"STRONG",{});var eAt=s(AEe);uBr=r(eAt,"distilbert"),eAt.forEach(t),pBr=r(HBe," \u2014 "),CY=n(HBe,"A",{href:!0});var oAt=s(CY);_Br=r(oAt,"FlaxDistilBertForMultipleChoice"),oAt.forEach(t),bBr=r(HBe," (DistilBERT model)"),HBe.forEach(t),FBr=i(To),oA=n(To,"LI",{});var UBe=s(oA);yEe=n(UBe,"STRONG",{});var rAt=s(yEe);vBr=r(rAt,"electra"),rAt.forEach(t),TBr=r(UBe," \u2014 "),wY=n(UBe,"A",{href:!0});var tAt=s(wY);MBr=r(tAt,"FlaxElectraForMultipleChoice"),tAt.forEach(t),EBr=r(UBe," (ELECTRA model)"),UBe.forEach(t),CBr=i(To),rA=n(To,"LI",{});var JBe=s(rA);LEe=n(JBe,"STRONG",{});var aAt=s(LEe);wBr=r(aAt,"roberta"),aAt.forEach(t),ABr=r(JBe," \u2014 "),AY=n(JBe,"A",{href:!0});var nAt=s(AY);yBr=r(nAt,"FlaxRobertaForMultipleChoice"),nAt.forEach(t),LBr=r(JBe," (RoBERTa model)"),JBe.forEach(t),xBr=i(To),tA=n(To,"LI",{});var YBe=s(tA);xEe=n(YBe,"STRONG",{});var sAt=s(xEe);$Br=r(sAt,"roformer"),sAt.forEach(t),kBr=r(YBe," \u2014 "),yY=n(YBe,"A",{href:!0});var lAt=s(yY);SBr=r(lAt,"FlaxRoFormerForMultipleChoice"),lAt.forEach(t),RBr=r(YBe," (RoFormer model)"),YBe.forEach(t),BBr=i(To),aA=n(To,"LI",{});var KBe=s(aA);$Ee=n(KBe,"STRONG",{});var iAt=s($Ee);PBr=r(iAt,"xlm-roberta"),iAt.forEach(t),IBr=r(KBe," \u2014 "),LY=n(KBe,"A",{href:!0});var dAt=s(LY);qBr=r(dAt,"FlaxXLMRobertaForMultipleChoice"),dAt.forEach(t),NBr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),To.forEach(t),jBr=i(ei),T(nA.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),eqe=i(m),Zc=n(m,"H2",{class:!0});var lje=s(Zc);sA=n(lje,"A",{id:!0,class:!0,href:!0});var cAt=s(sA);kEe=n(cAt,"SPAN",{});var mAt=s(kEe);T($7.$$.fragment,mAt),mAt.forEach(t),cAt.forEach(t),DBr=i(lje),SEe=n(lje,"SPAN",{});var fAt=s(SEe);GBr=r(fAt,"FlaxAutoModelForNextSentencePrediction"),fAt.forEach(t),lje.forEach(t),oqe=i(m),vr=n(m,"DIV",{class:!0});var oi=s(vr);T(k7.$$.fragment,oi),OBr=i(oi),em=n(oi,"P",{});var xZ=s(em);VBr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xY=n(xZ,"A",{href:!0});var gAt=s(xY);XBr=r(gAt,"from_pretrained()"),gAt.forEach(t),zBr=r(xZ," class method or the "),$Y=n(xZ,"A",{href:!0});var hAt=s($Y);QBr=r(hAt,"from_config()"),hAt.forEach(t),WBr=r(xZ,` class
method.`),xZ.forEach(t),HBr=i(oi),S7=n(oi,"P",{});var ije=s(S7);UBr=r(ije,"This class cannot be instantiated directly using "),REe=n(ije,"CODE",{});var uAt=s(REe);JBr=r(uAt,"__init__()"),uAt.forEach(t),YBr=r(ije," (throws an error)."),ije.forEach(t),KBr=i(oi),Ht=n(oi,"DIV",{class:!0});var k6=s(Ht);T(R7.$$.fragment,k6),ZBr=i(k6),BEe=n(k6,"P",{});var pAt=s(BEe);ePr=r(pAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pAt.forEach(t),oPr=i(k6),om=n(k6,"P",{});var $Z=s(om);rPr=r($Z,`Note:
Loading a model from its configuration file does `),PEe=n($Z,"STRONG",{});var _At=s(PEe);tPr=r(_At,"not"),_At.forEach(t),aPr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n($Z,"A",{href:!0});var bAt=s(kY);nPr=r(bAt,"from_pretrained()"),bAt.forEach(t),sPr=r($Z," to load the model weights."),$Z.forEach(t),lPr=i(k6),T(lA.$$.fragment,k6),k6.forEach(t),iPr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(B7.$$.fragment,ri),dPr=i(ri),IEe=n(ri,"P",{});var FAt=s(IEe);cPr=r(FAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FAt.forEach(t),mPr=i(ri),Mn=n(ri,"P",{});var S6=s(Mn);fPr=r(S6,"The model class to instantiate is selected based on the "),qEe=n(S6,"CODE",{});var vAt=s(qEe);gPr=r(vAt,"model_type"),vAt.forEach(t),hPr=r(S6,` property of the config object (either
passed as an argument or loaded from `),NEe=n(S6,"CODE",{});var TAt=s(NEe);uPr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),pPr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n(S6,"CODE",{});var MAt=s(jEe);_Pr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),bPr=r(S6,":"),S6.forEach(t),FPr=i(ri),DEe=n(ri,"UL",{});var EAt=s(DEe);iA=n(EAt,"LI",{});var ZBe=s(iA);GEe=n(ZBe,"STRONG",{});var CAt=s(GEe);vPr=r(CAt,"bert"),CAt.forEach(t),TPr=r(ZBe," \u2014 "),SY=n(ZBe,"A",{href:!0});var wAt=s(SY);MPr=r(wAt,"FlaxBertForNextSentencePrediction"),wAt.forEach(t),EPr=r(ZBe," (BERT model)"),ZBe.forEach(t),EAt.forEach(t),CPr=i(ri),T(dA.$$.fragment,ri),ri.forEach(t),oi.forEach(t),rqe=i(m),rm=n(m,"H2",{class:!0});var dje=s(rm);cA=n(dje,"A",{id:!0,class:!0,href:!0});var AAt=s(cA);OEe=n(AAt,"SPAN",{});var yAt=s(OEe);T(P7.$$.fragment,yAt),yAt.forEach(t),AAt.forEach(t),wPr=i(dje),VEe=n(dje,"SPAN",{});var LAt=s(VEe);APr=r(LAt,"FlaxAutoModelForImageClassification"),LAt.forEach(t),dje.forEach(t),tqe=i(m),Tr=n(m,"DIV",{class:!0});var ti=s(Tr);T(I7.$$.fragment,ti),yPr=i(ti),tm=n(ti,"P",{});var kZ=s(tm);LPr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RY=n(kZ,"A",{href:!0});var xAt=s(RY);xPr=r(xAt,"from_pretrained()"),xAt.forEach(t),$Pr=r(kZ," class method or the "),BY=n(kZ,"A",{href:!0});var $At=s(BY);kPr=r($At,"from_config()"),$At.forEach(t),SPr=r(kZ,` class
method.`),kZ.forEach(t),RPr=i(ti),q7=n(ti,"P",{});var cje=s(q7);BPr=r(cje,"This class cannot be instantiated directly using "),XEe=n(cje,"CODE",{});var kAt=s(XEe);PPr=r(kAt,"__init__()"),kAt.forEach(t),IPr=r(cje," (throws an error)."),cje.forEach(t),qPr=i(ti),Ut=n(ti,"DIV",{class:!0});var R6=s(Ut);T(N7.$$.fragment,R6),NPr=i(R6),zEe=n(R6,"P",{});var SAt=s(zEe);jPr=r(SAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SAt.forEach(t),DPr=i(R6),am=n(R6,"P",{});var SZ=s(am);GPr=r(SZ,`Note:
Loading a model from its configuration file does `),QEe=n(SZ,"STRONG",{});var RAt=s(QEe);OPr=r(RAt,"not"),RAt.forEach(t),VPr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(SZ,"A",{href:!0});var BAt=s(PY);XPr=r(BAt,"from_pretrained()"),BAt.forEach(t),zPr=r(SZ," to load the model weights."),SZ.forEach(t),QPr=i(R6),T(mA.$$.fragment,R6),R6.forEach(t),WPr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(j7.$$.fragment,ai),HPr=i(ai),WEe=n(ai,"P",{});var PAt=s(WEe);UPr=r(PAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PAt.forEach(t),JPr=i(ai),En=n(ai,"P",{});var B6=s(En);YPr=r(B6,"The model class to instantiate is selected based on the "),HEe=n(B6,"CODE",{});var IAt=s(HEe);KPr=r(IAt,"model_type"),IAt.forEach(t),ZPr=r(B6,` property of the config object (either
passed as an argument or loaded from `),UEe=n(B6,"CODE",{});var qAt=s(UEe);eIr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),oIr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(B6,"CODE",{});var NAt=s(JEe);rIr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),tIr=r(B6,":"),B6.forEach(t),aIr=i(ai),D7=n(ai,"UL",{});var mje=s(D7);fA=n(mje,"LI",{});var ePe=s(fA);YEe=n(ePe,"STRONG",{});var jAt=s(YEe);nIr=r(jAt,"beit"),jAt.forEach(t),sIr=r(ePe," \u2014 "),IY=n(ePe,"A",{href:!0});var DAt=s(IY);lIr=r(DAt,"FlaxBeitForImageClassification"),DAt.forEach(t),iIr=r(ePe," (BEiT model)"),ePe.forEach(t),dIr=i(mje),gA=n(mje,"LI",{});var oPe=s(gA);KEe=n(oPe,"STRONG",{});var GAt=s(KEe);cIr=r(GAt,"vit"),GAt.forEach(t),mIr=r(oPe," \u2014 "),qY=n(oPe,"A",{href:!0});var OAt=s(qY);fIr=r(OAt,"FlaxViTForImageClassification"),OAt.forEach(t),gIr=r(oPe," (ViT model)"),oPe.forEach(t),mje.forEach(t),hIr=i(ai),T(hA.$$.fragment,ai),ai.forEach(t),ti.forEach(t),aqe=i(m),nm=n(m,"H2",{class:!0});var fje=s(nm);uA=n(fje,"A",{id:!0,class:!0,href:!0});var VAt=s(uA);ZEe=n(VAt,"SPAN",{});var XAt=s(ZEe);T(G7.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),uIr=i(fje),e5e=n(fje,"SPAN",{});var zAt=s(e5e);pIr=r(zAt,"FlaxAutoModelForVision2Seq"),zAt.forEach(t),fje.forEach(t),nqe=i(m),Mr=n(m,"DIV",{class:!0});var ni=s(Mr);T(O7.$$.fragment,ni),_Ir=i(ni),sm=n(ni,"P",{});var RZ=s(sm);bIr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NY=n(RZ,"A",{href:!0});var QAt=s(NY);FIr=r(QAt,"from_pretrained()"),QAt.forEach(t),vIr=r(RZ," class method or the "),jY=n(RZ,"A",{href:!0});var WAt=s(jY);TIr=r(WAt,"from_config()"),WAt.forEach(t),MIr=r(RZ,` class
method.`),RZ.forEach(t),EIr=i(ni),V7=n(ni,"P",{});var gje=s(V7);CIr=r(gje,"This class cannot be instantiated directly using "),o5e=n(gje,"CODE",{});var HAt=s(o5e);wIr=r(HAt,"__init__()"),HAt.forEach(t),AIr=r(gje," (throws an error)."),gje.forEach(t),yIr=i(ni),Jt=n(ni,"DIV",{class:!0});var P6=s(Jt);T(X7.$$.fragment,P6),LIr=i(P6),r5e=n(P6,"P",{});var UAt=s(r5e);xIr=r(UAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UAt.forEach(t),$Ir=i(P6),lm=n(P6,"P",{});var BZ=s(lm);kIr=r(BZ,`Note:
Loading a model from its configuration file does `),t5e=n(BZ,"STRONG",{});var JAt=s(t5e);SIr=r(JAt,"not"),JAt.forEach(t),RIr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(BZ,"A",{href:!0});var YAt=s(DY);BIr=r(YAt,"from_pretrained()"),YAt.forEach(t),PIr=r(BZ," to load the model weights."),BZ.forEach(t),IIr=i(P6),T(pA.$$.fragment,P6),P6.forEach(t),qIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(z7.$$.fragment,si),NIr=i(si),a5e=n(si,"P",{});var KAt=s(a5e);jIr=r(KAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KAt.forEach(t),DIr=i(si),Cn=n(si,"P",{});var I6=s(Cn);GIr=r(I6,"The model class to instantiate is selected based on the "),n5e=n(I6,"CODE",{});var ZAt=s(n5e);OIr=r(ZAt,"model_type"),ZAt.forEach(t),VIr=r(I6,` property of the config object (either
passed as an argument or loaded from `),s5e=n(I6,"CODE",{});var e0t=s(s5e);XIr=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),zIr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(I6,"CODE",{});var o0t=s(l5e);QIr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),WIr=r(I6,":"),I6.forEach(t),HIr=i(si),i5e=n(si,"UL",{});var r0t=s(i5e);_A=n(r0t,"LI",{});var rPe=s(_A);d5e=n(rPe,"STRONG",{});var t0t=s(d5e);UIr=r(t0t,"vision-encoder-decoder"),t0t.forEach(t),JIr=r(rPe," \u2014 "),GY=n(rPe,"A",{href:!0});var a0t=s(GY);YIr=r(a0t,"FlaxVisionEncoderDecoderModel"),a0t.forEach(t),KIr=r(rPe," (Vision Encoder decoder model)"),rPe.forEach(t),r0t.forEach(t),ZIr=i(si),T(bA.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(iyt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(An,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(um,"id","extending-the-auto-classes"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(_m,"id","transformers.AutoConfig"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(c$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(m$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(f$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(g$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(h$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(u$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(p$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(b$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(F$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(v$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(T$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c($$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(k$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(z$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(K$,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(tk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(ck,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c($k,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Rk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(qk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Yk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(sS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(iS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(cS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(mS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(uS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(pS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_S,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ES,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c($S,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(US,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(IB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(NB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(jB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(dP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(mP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(fP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(pP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_P,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(TP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(MP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(CP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(LP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(xP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c($P,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(kP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(SP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(RP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(BP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(IP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(qP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(NP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(jP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(DP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(GP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(OP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(VP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(XP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(zP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(QP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(WP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(HP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(UP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(JP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(YP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(KP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(eI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(oI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(rI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(tI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(aI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(nI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(sI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(lI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(iI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(dI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(cI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(fI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(gI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(hI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(uI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(pI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(_I,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(bI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(FI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(vI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(TI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(MI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(EI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(CI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(wI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(AI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(yI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(LI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(xI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c($I,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(kI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(SI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(RI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(BI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(PI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(II,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(qI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(NI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(DI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(GI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(OI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(VI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(XI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(zI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(QI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(WI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(HI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(UI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(JI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(YI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(KI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(eq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(oq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(rq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(tq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(aq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(sq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(lq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(iq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(dq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(cq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(fq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(gq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(hq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModelForPreTraining"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(uq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Fq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Tq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Mq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Eq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Aq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Lq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($q,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Sq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Rq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Pq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Iq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Nq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Dq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Xq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(zq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Qq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Wq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Uq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Jq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Yq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Kq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Zq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F_,"id","transformers.AutoModelForCausalLM"),c(F_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(tN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(lN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(iN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(mN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(fN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_N,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(vN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(TN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(MN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(EN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(LN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(PN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(IN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(NN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForMaskedLM"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(GN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(WN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ij,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(pj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForSeq2SeqLM"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($j,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Bj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Pj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Nj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Dj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Gj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Oj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Vj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c2,"id","transformers.AutoModelForSequenceClassification"),c(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c2,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Xj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Hj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Uj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Jj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Yj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Kj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Zj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(eD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(oD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(rD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(tD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(aD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(nD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(sD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(lD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(iD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(dD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(uD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(pD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_D,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(bD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(vD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ED,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(CD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(wD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForMultipleChoice"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(DD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(YD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(KD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ZD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(eG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(oG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(rG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(tG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(aG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(nG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(sG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(lG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(iG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(dG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(cG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(mG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(gG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForNextSentencePrediction"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(_G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(TG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(CG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForTokenClassification"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(wG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c($G,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForQuestionAnswering"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(mO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(fO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(gO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(hO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(uO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(pO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(_O,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(bO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(FO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(vO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(TO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(MO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(EO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(CO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(wO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(AO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(yO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(LO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(xO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c($O,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(kO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(SO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(RO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(BO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(PO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(IO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(qO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(NO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(OO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(zO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(HO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v1,"id","transformers.AutoModelForTableQuestionAnswering"),c(v1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForImageClassification"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(dV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(cV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForVision2Seq"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(bV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForAudioClassification"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c($V,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForAudioFrameClassification"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForCTC"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForCTC"),c(fd,"class","relative group"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(zV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(QV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(WV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(UV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(JV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(oX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForAudioXVector"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(sX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(lX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(iX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForMaskedImageModeling"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForObjectDetection"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(FX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForImageSegmentation"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.AutoModelForSemanticSegmentation"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(LX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($X,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForInstanceSegmentation"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModel"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(jX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(DX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(GX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(OX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(VX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(XX,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(zX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(QX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(WX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(HX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(UX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(JX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(YX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(KX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(ZX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(ez,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(rz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(az,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(nz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(sz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(lz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(iz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(dz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(mz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(fz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(hz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(uz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(pz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_z,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(bz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(vz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Mz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(wz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Az,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(xz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForPreTraining"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Bz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Pz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(jz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Dz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Oz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Xz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(zz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Qz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Wz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Jz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Zz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModelForCausalLM"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForImageClassification"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForMaskedLM"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(oW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForSequenceClassification"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForMultipleChoice"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(BW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(QW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(WW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.TFAutoModelForTokenClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.TFAutoModelForQuestionAnswering"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(QH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(WH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.TFAutoModelForVision2Seq"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModel"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(hU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(uU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(pU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_U,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(FU,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(MU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(AU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($U,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(SU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(BU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForCausalLM"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(qU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(WU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.FlaxAutoModelForPreTraining"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForMaskedLM"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(pJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_J,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($J,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(BJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(QJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(WJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(xY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cA,"id","transformers.FlaxAutoModelForImageClassification"),c(cA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cA,"href","#transformers.FlaxAutoModelForImageClassification"),c(rm,"class","relative group"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForVision2Seq"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nm,"class","relative group"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,li),b(m,mm,_),b(m,et,_),e(et,ii),e(et,di),e(di,q6),e(et,fm),b(m,qe,_),b(m,Xe,_),e(Xe,ci),e(Xe,An),e(An,N6),e(Xe,yn),e(Xe,Ln),e(Ln,j6),e(Xe,mi),e(Xe,xn),e(xn,D6),e(Xe,fi),b(m,gm,_),M(Ma,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,a$),e(Ae,gi),e(gi,n$),e(Ae,s$),b(m,Eo,_),b(m,Ea,_),e(Ea,l$),e(Ea,hm),e(hm,i$),e(Ea,hje),b(m,tPe,_),b(m,hi,_),e(hi,um),e(um,PZ),M(G6,PZ,null),e(hi,uje),e(hi,IZ),e(IZ,pje),b(m,aPe,_),b(m,$n,_),e($n,_je),e($n,qZ),e(qZ,bje),e($n,Fje),e($n,NZ),e(NZ,vje),e($n,Tje),b(m,nPe,_),M(O6,m,_),b(m,sPe,_),b(m,d$,_),e(d$,Mje),b(m,lPe,_),M(pm,m,_),b(m,iPe,_),b(m,ui,_),e(ui,_m),e(_m,jZ),M(V6,jZ,null),e(ui,Eje),e(ui,DZ),e(DZ,Cje),b(m,dPe,_),b(m,Co,_),M(X6,Co,null),e(Co,wje),e(Co,z6),e(z6,Aje),e(z6,c$),e(c$,yje),e(z6,Lje),e(Co,xje),e(Co,Q6),e(Q6,$je),e(Q6,GZ),e(GZ,kje),e(Q6,Sje),e(Co,Rje),e(Co,Er),M(W6,Er,null),e(Er,Bje),e(Er,OZ),e(OZ,Pje),e(Er,Ije),e(Er,pi),e(pi,qje),e(pi,VZ),e(VZ,Nje),e(pi,jje),e(pi,XZ),e(XZ,Dje),e(pi,Gje),e(Er,Oje),e(Er,y),e(y,bm),e(bm,zZ),e(zZ,Vje),e(bm,Xje),e(bm,m$),e(m$,zje),e(bm,Qje),e(y,Wje),e(y,Fm),e(Fm,QZ),e(QZ,Hje),e(Fm,Uje),e(Fm,f$),e(f$,Jje),e(Fm,Yje),e(y,Kje),e(y,vm),e(vm,WZ),e(WZ,Zje),e(vm,eDe),e(vm,g$),e(g$,oDe),e(vm,rDe),e(y,tDe),e(y,Tm),e(Tm,HZ),e(HZ,aDe),e(Tm,nDe),e(Tm,h$),e(h$,sDe),e(Tm,lDe),e(y,iDe),e(y,Mm),e(Mm,UZ),e(UZ,dDe),e(Mm,cDe),e(Mm,u$),e(u$,mDe),e(Mm,fDe),e(y,gDe),e(y,Em),e(Em,JZ),e(JZ,hDe),e(Em,uDe),e(Em,p$),e(p$,pDe),e(Em,_De),e(y,bDe),e(y,Cm),e(Cm,YZ),e(YZ,FDe),e(Cm,vDe),e(Cm,_$),e(_$,TDe),e(Cm,MDe),e(y,EDe),e(y,wm),e(wm,KZ),e(KZ,CDe),e(wm,wDe),e(wm,b$),e(b$,ADe),e(wm,yDe),e(y,LDe),e(y,Am),e(Am,ZZ),e(ZZ,xDe),e(Am,$De),e(Am,F$),e(F$,kDe),e(Am,SDe),e(y,RDe),e(y,ym),e(ym,eee),e(eee,BDe),e(ym,PDe),e(ym,v$),e(v$,IDe),e(ym,qDe),e(y,NDe),e(y,Lm),e(Lm,oee),e(oee,jDe),e(Lm,DDe),e(Lm,T$),e(T$,GDe),e(Lm,ODe),e(y,VDe),e(y,xm),e(xm,ree),e(ree,XDe),e(xm,zDe),e(xm,M$),e(M$,QDe),e(xm,WDe),e(y,HDe),e(y,$m),e($m,tee),e(tee,UDe),e($m,JDe),e($m,E$),e(E$,YDe),e($m,KDe),e(y,ZDe),e(y,km),e(km,aee),e(aee,eGe),e(km,oGe),e(km,C$),e(C$,rGe),e(km,tGe),e(y,aGe),e(y,Sm),e(Sm,nee),e(nee,nGe),e(Sm,sGe),e(Sm,w$),e(w$,lGe),e(Sm,iGe),e(y,dGe),e(y,Rm),e(Rm,see),e(see,cGe),e(Rm,mGe),e(Rm,A$),e(A$,fGe),e(Rm,gGe),e(y,hGe),e(y,Bm),e(Bm,lee),e(lee,uGe),e(Bm,pGe),e(Bm,y$),e(y$,_Ge),e(Bm,bGe),e(y,FGe),e(y,Pm),e(Pm,iee),e(iee,vGe),e(Pm,TGe),e(Pm,L$),e(L$,MGe),e(Pm,EGe),e(y,CGe),e(y,Im),e(Im,dee),e(dee,wGe),e(Im,AGe),e(Im,x$),e(x$,yGe),e(Im,LGe),e(y,xGe),e(y,qm),e(qm,cee),e(cee,$Ge),e(qm,kGe),e(qm,$$),e($$,SGe),e(qm,RGe),e(y,BGe),e(y,Nm),e(Nm,mee),e(mee,PGe),e(Nm,IGe),e(Nm,k$),e(k$,qGe),e(Nm,NGe),e(y,jGe),e(y,jm),e(jm,fee),e(fee,DGe),e(jm,GGe),e(jm,S$),e(S$,OGe),e(jm,VGe),e(y,XGe),e(y,Dm),e(Dm,gee),e(gee,zGe),e(Dm,QGe),e(Dm,R$),e(R$,WGe),e(Dm,HGe),e(y,UGe),e(y,Gm),e(Gm,hee),e(hee,JGe),e(Gm,YGe),e(Gm,B$),e(B$,KGe),e(Gm,ZGe),e(y,eOe),e(y,Om),e(Om,uee),e(uee,oOe),e(Om,rOe),e(Om,P$),e(P$,tOe),e(Om,aOe),e(y,nOe),e(y,Vm),e(Vm,pee),e(pee,sOe),e(Vm,lOe),e(Vm,I$),e(I$,iOe),e(Vm,dOe),e(y,cOe),e(y,Xm),e(Xm,_ee),e(_ee,mOe),e(Xm,fOe),e(Xm,q$),e(q$,gOe),e(Xm,hOe),e(y,uOe),e(y,zm),e(zm,bee),e(bee,pOe),e(zm,_Oe),e(zm,N$),e(N$,bOe),e(zm,FOe),e(y,vOe),e(y,Qm),e(Qm,Fee),e(Fee,TOe),e(Qm,MOe),e(Qm,j$),e(j$,EOe),e(Qm,COe),e(y,wOe),e(y,Wm),e(Wm,vee),e(vee,AOe),e(Wm,yOe),e(Wm,D$),e(D$,LOe),e(Wm,xOe),e(y,$Oe),e(y,Hm),e(Hm,Tee),e(Tee,kOe),e(Hm,SOe),e(Hm,G$),e(G$,ROe),e(Hm,BOe),e(y,POe),e(y,Um),e(Um,Mee),e(Mee,IOe),e(Um,qOe),e(Um,O$),e(O$,NOe),e(Um,jOe),e(y,DOe),e(y,Jm),e(Jm,Eee),e(Eee,GOe),e(Jm,OOe),e(Jm,V$),e(V$,VOe),e(Jm,XOe),e(y,zOe),e(y,Ym),e(Ym,Cee),e(Cee,QOe),e(Ym,WOe),e(Ym,X$),e(X$,HOe),e(Ym,UOe),e(y,JOe),e(y,Km),e(Km,wee),e(wee,YOe),e(Km,KOe),e(Km,z$),e(z$,ZOe),e(Km,eVe),e(y,oVe),e(y,Zm),e(Zm,Aee),e(Aee,rVe),e(Zm,tVe),e(Zm,Q$),e(Q$,aVe),e(Zm,nVe),e(y,sVe),e(y,ef),e(ef,yee),e(yee,lVe),e(ef,iVe),e(ef,W$),e(W$,dVe),e(ef,cVe),e(y,mVe),e(y,of),e(of,Lee),e(Lee,fVe),e(of,gVe),e(of,H$),e(H$,hVe),e(of,uVe),e(y,pVe),e(y,rf),e(rf,xee),e(xee,_Ve),e(rf,bVe),e(rf,U$),e(U$,FVe),e(rf,vVe),e(y,TVe),e(y,tf),e(tf,$ee),e($ee,MVe),e(tf,EVe),e(tf,J$),e(J$,CVe),e(tf,wVe),e(y,AVe),e(y,af),e(af,kee),e(kee,yVe),e(af,LVe),e(af,Y$),e(Y$,xVe),e(af,$Ve),e(y,kVe),e(y,nf),e(nf,See),e(See,SVe),e(nf,RVe),e(nf,K$),e(K$,BVe),e(nf,PVe),e(y,IVe),e(y,sf),e(sf,Ree),e(Ree,qVe),e(sf,NVe),e(sf,Z$),e(Z$,jVe),e(sf,DVe),e(y,GVe),e(y,lf),e(lf,Bee),e(Bee,OVe),e(lf,VVe),e(lf,ek),e(ek,XVe),e(lf,zVe),e(y,QVe),e(y,df),e(df,Pee),e(Pee,WVe),e(df,HVe),e(df,ok),e(ok,UVe),e(df,JVe),e(y,YVe),e(y,cf),e(cf,Iee),e(Iee,KVe),e(cf,ZVe),e(cf,rk),e(rk,eXe),e(cf,oXe),e(y,rXe),e(y,mf),e(mf,qee),e(qee,tXe),e(mf,aXe),e(mf,tk),e(tk,nXe),e(mf,sXe),e(y,lXe),e(y,ff),e(ff,Nee),e(Nee,iXe),e(ff,dXe),e(ff,ak),e(ak,cXe),e(ff,mXe),e(y,fXe),e(y,gf),e(gf,jee),e(jee,gXe),e(gf,hXe),e(gf,nk),e(nk,uXe),e(gf,pXe),e(y,_Xe),e(y,hf),e(hf,Dee),e(Dee,bXe),e(hf,FXe),e(hf,sk),e(sk,vXe),e(hf,TXe),e(y,MXe),e(y,uf),e(uf,Gee),e(Gee,EXe),e(uf,CXe),e(uf,lk),e(lk,wXe),e(uf,AXe),e(y,yXe),e(y,pf),e(pf,Oee),e(Oee,LXe),e(pf,xXe),e(pf,ik),e(ik,$Xe),e(pf,kXe),e(y,SXe),e(y,_f),e(_f,Vee),e(Vee,RXe),e(_f,BXe),e(_f,dk),e(dk,PXe),e(_f,IXe),e(y,qXe),e(y,bf),e(bf,Xee),e(Xee,NXe),e(bf,jXe),e(bf,ck),e(ck,DXe),e(bf,GXe),e(y,OXe),e(y,Ff),e(Ff,zee),e(zee,VXe),e(Ff,XXe),e(Ff,mk),e(mk,zXe),e(Ff,QXe),e(y,WXe),e(y,vf),e(vf,Qee),e(Qee,HXe),e(vf,UXe),e(vf,fk),e(fk,JXe),e(vf,YXe),e(y,KXe),e(y,Tf),e(Tf,Wee),e(Wee,ZXe),e(Tf,eze),e(Tf,gk),e(gk,oze),e(Tf,rze),e(y,tze),e(y,Mf),e(Mf,Hee),e(Hee,aze),e(Mf,nze),e(Mf,hk),e(hk,sze),e(Mf,lze),e(y,ize),e(y,Ef),e(Ef,Uee),e(Uee,dze),e(Ef,cze),e(Ef,uk),e(uk,mze),e(Ef,fze),e(y,gze),e(y,Cf),e(Cf,Jee),e(Jee,hze),e(Cf,uze),e(Cf,pk),e(pk,pze),e(Cf,_ze),e(y,bze),e(y,wf),e(wf,Yee),e(Yee,Fze),e(wf,vze),e(wf,_k),e(_k,Tze),e(wf,Mze),e(y,Eze),e(y,Af),e(Af,Kee),e(Kee,Cze),e(Af,wze),e(Af,bk),e(bk,Aze),e(Af,yze),e(y,Lze),e(y,yf),e(yf,Zee),e(Zee,xze),e(yf,$ze),e(yf,Fk),e(Fk,kze),e(yf,Sze),e(y,Rze),e(y,Lf),e(Lf,eoe),e(eoe,Bze),e(Lf,Pze),e(Lf,vk),e(vk,Ize),e(Lf,qze),e(y,Nze),e(y,xf),e(xf,ooe),e(ooe,jze),e(xf,Dze),e(xf,Tk),e(Tk,Gze),e(xf,Oze),e(y,Vze),e(y,$f),e($f,roe),e(roe,Xze),e($f,zze),e($f,Mk),e(Mk,Qze),e($f,Wze),e(y,Hze),e(y,kf),e(kf,toe),e(toe,Uze),e(kf,Jze),e(kf,Ek),e(Ek,Yze),e(kf,Kze),e(y,Zze),e(y,Sf),e(Sf,aoe),e(aoe,eQe),e(Sf,oQe),e(Sf,Ck),e(Ck,rQe),e(Sf,tQe),e(y,aQe),e(y,Rf),e(Rf,noe),e(noe,nQe),e(Rf,sQe),e(Rf,wk),e(wk,lQe),e(Rf,iQe),e(y,dQe),e(y,Bf),e(Bf,soe),e(soe,cQe),e(Bf,mQe),e(Bf,Ak),e(Ak,fQe),e(Bf,gQe),e(y,hQe),e(y,Pf),e(Pf,loe),e(loe,uQe),e(Pf,pQe),e(Pf,yk),e(yk,_Qe),e(Pf,bQe),e(y,FQe),e(y,If),e(If,ioe),e(ioe,vQe),e(If,TQe),e(If,Lk),e(Lk,MQe),e(If,EQe),e(y,CQe),e(y,qf),e(qf,doe),e(doe,wQe),e(qf,AQe),e(qf,xk),e(xk,yQe),e(qf,LQe),e(y,xQe),e(y,Nf),e(Nf,coe),e(coe,$Qe),e(Nf,kQe),e(Nf,$k),e($k,SQe),e(Nf,RQe),e(y,BQe),e(y,jf),e(jf,moe),e(moe,PQe),e(jf,IQe),e(jf,kk),e(kk,qQe),e(jf,NQe),e(y,jQe),e(y,Df),e(Df,foe),e(foe,DQe),e(Df,GQe),e(Df,Sk),e(Sk,OQe),e(Df,VQe),e(y,XQe),e(y,Gf),e(Gf,goe),e(goe,zQe),e(Gf,QQe),e(Gf,Rk),e(Rk,WQe),e(Gf,HQe),e(y,UQe),e(y,Of),e(Of,hoe),e(hoe,JQe),e(Of,YQe),e(Of,Bk),e(Bk,KQe),e(Of,ZQe),e(y,eWe),e(y,Vf),e(Vf,uoe),e(uoe,oWe),e(Vf,rWe),e(Vf,Pk),e(Pk,tWe),e(Vf,aWe),e(y,nWe),e(y,Xf),e(Xf,poe),e(poe,sWe),e(Xf,lWe),e(Xf,Ik),e(Ik,iWe),e(Xf,dWe),e(y,cWe),e(y,zf),e(zf,_oe),e(_oe,mWe),e(zf,fWe),e(zf,qk),e(qk,gWe),e(zf,hWe),e(y,uWe),e(y,Qf),e(Qf,boe),e(boe,pWe),e(Qf,_We),e(Qf,Nk),e(Nk,bWe),e(Qf,FWe),e(y,vWe),e(y,Wf),e(Wf,Foe),e(Foe,TWe),e(Wf,MWe),e(Wf,jk),e(jk,EWe),e(Wf,CWe),e(y,wWe),e(y,Hf),e(Hf,voe),e(voe,AWe),e(Hf,yWe),e(Hf,Dk),e(Dk,LWe),e(Hf,xWe),e(y,$We),e(y,Uf),e(Uf,Toe),e(Toe,kWe),e(Uf,SWe),e(Uf,Gk),e(Gk,RWe),e(Uf,BWe),e(y,PWe),e(y,Jf),e(Jf,Moe),e(Moe,IWe),e(Jf,qWe),e(Jf,Ok),e(Ok,NWe),e(Jf,jWe),e(y,DWe),e(y,Yf),e(Yf,Eoe),e(Eoe,GWe),e(Yf,OWe),e(Yf,Vk),e(Vk,VWe),e(Yf,XWe),e(y,zWe),e(y,Kf),e(Kf,Coe),e(Coe,QWe),e(Kf,WWe),e(Kf,Xk),e(Xk,HWe),e(Kf,UWe),e(y,JWe),e(y,Zf),e(Zf,woe),e(woe,YWe),e(Zf,KWe),e(Zf,zk),e(zk,ZWe),e(Zf,eHe),e(y,oHe),e(y,eg),e(eg,Aoe),e(Aoe,rHe),e(eg,tHe),e(eg,Qk),e(Qk,aHe),e(eg,nHe),e(y,sHe),e(y,og),e(og,yoe),e(yoe,lHe),e(og,iHe),e(og,Wk),e(Wk,dHe),e(og,cHe),e(y,mHe),e(y,rg),e(rg,Loe),e(Loe,fHe),e(rg,gHe),e(rg,Hk),e(Hk,hHe),e(rg,uHe),e(y,pHe),e(y,tg),e(tg,xoe),e(xoe,_He),e(tg,bHe),e(tg,Uk),e(Uk,FHe),e(tg,vHe),e(y,THe),e(y,ag),e(ag,$oe),e($oe,MHe),e(ag,EHe),e(ag,Jk),e(Jk,CHe),e(ag,wHe),e(y,AHe),e(y,ng),e(ng,koe),e(koe,yHe),e(ng,LHe),e(ng,Yk),e(Yk,xHe),e(ng,$He),e(y,kHe),e(y,sg),e(sg,Soe),e(Soe,SHe),e(sg,RHe),e(sg,Kk),e(Kk,BHe),e(sg,PHe),e(y,IHe),e(y,lg),e(lg,Roe),e(Roe,qHe),e(lg,NHe),e(lg,Zk),e(Zk,jHe),e(lg,DHe),e(y,GHe),e(y,ig),e(ig,Boe),e(Boe,OHe),e(ig,VHe),e(ig,eS),e(eS,XHe),e(ig,zHe),e(y,QHe),e(y,dg),e(dg,Poe),e(Poe,WHe),e(dg,HHe),e(dg,oS),e(oS,UHe),e(dg,JHe),e(y,YHe),e(y,cg),e(cg,Ioe),e(Ioe,KHe),e(cg,ZHe),e(cg,rS),e(rS,eUe),e(cg,oUe),e(y,rUe),e(y,mg),e(mg,qoe),e(qoe,tUe),e(mg,aUe),e(mg,tS),e(tS,nUe),e(mg,sUe),e(y,lUe),e(y,fg),e(fg,Noe),e(Noe,iUe),e(fg,dUe),e(fg,aS),e(aS,cUe),e(fg,mUe),e(y,fUe),e(y,gg),e(gg,joe),e(joe,gUe),e(gg,hUe),e(gg,nS),e(nS,uUe),e(gg,pUe),e(Er,_Ue),M(hg,Er,null),e(Co,bUe),e(Co,ug),M(H6,ug,null),e(ug,FUe),e(ug,Doe),e(Doe,vUe),b(m,cPe,_),b(m,_i,_),e(_i,pg),e(pg,Goe),M(U6,Goe,null),e(_i,TUe),e(_i,Ooe),e(Ooe,MUe),b(m,mPe,_),b(m,wo,_),M(J6,wo,null),e(wo,EUe),e(wo,Y6),e(Y6,CUe),e(Y6,sS),e(sS,wUe),e(Y6,AUe),e(wo,yUe),e(wo,K6),e(K6,LUe),e(K6,Voe),e(Voe,xUe),e(K6,$Ue),e(wo,kUe),e(wo,Cr),M(Z6,Cr,null),e(Cr,SUe),e(Cr,Xoe),e(Xoe,RUe),e(Cr,BUe),e(Cr,Ca),e(Ca,PUe),e(Ca,zoe),e(zoe,IUe),e(Ca,qUe),e(Ca,Qoe),e(Qoe,NUe),e(Ca,jUe),e(Ca,Woe),e(Woe,DUe),e(Ca,GUe),e(Cr,OUe),e(Cr,k),e(k,kn),e(kn,Hoe),e(Hoe,VUe),e(kn,XUe),e(kn,lS),e(lS,zUe),e(kn,QUe),e(kn,iS),e(iS,WUe),e(kn,HUe),e(k,UUe),e(k,Sn),e(Sn,Uoe),e(Uoe,JUe),e(Sn,YUe),e(Sn,dS),e(dS,KUe),e(Sn,ZUe),e(Sn,cS),e(cS,eJe),e(Sn,oJe),e(k,rJe),e(k,Rn),e(Rn,Joe),e(Joe,tJe),e(Rn,aJe),e(Rn,mS),e(mS,nJe),e(Rn,sJe),e(Rn,fS),e(fS,lJe),e(Rn,iJe),e(k,dJe),e(k,_g),e(_g,Yoe),e(Yoe,cJe),e(_g,mJe),e(_g,gS),e(gS,fJe),e(_g,gJe),e(k,hJe),e(k,Bn),e(Bn,Koe),e(Koe,uJe),e(Bn,pJe),e(Bn,hS),e(hS,_Je),e(Bn,bJe),e(Bn,uS),e(uS,FJe),e(Bn,vJe),e(k,TJe),e(k,bg),e(bg,Zoe),e(Zoe,MJe),e(bg,EJe),e(bg,pS),e(pS,CJe),e(bg,wJe),e(k,AJe),e(k,Fg),e(Fg,ere),e(ere,yJe),e(Fg,LJe),e(Fg,_S),e(_S,xJe),e(Fg,$Je),e(k,kJe),e(k,vg),e(vg,ore),e(ore,SJe),e(vg,RJe),e(vg,bS),e(bS,BJe),e(vg,PJe),e(k,IJe),e(k,Pn),e(Pn,rre),e(rre,qJe),e(Pn,NJe),e(Pn,FS),e(FS,jJe),e(Pn,DJe),e(Pn,vS),e(vS,GJe),e(Pn,OJe),e(k,VJe),e(k,In),e(In,tre),e(tre,XJe),e(In,zJe),e(In,TS),e(TS,QJe),e(In,WJe),e(In,MS),e(MS,HJe),e(In,UJe),e(k,JJe),e(k,qn),e(qn,are),e(are,YJe),e(qn,KJe),e(qn,ES),e(ES,ZJe),e(qn,eYe),e(qn,CS),e(CS,oYe),e(qn,rYe),e(k,tYe),e(k,Tg),e(Tg,nre),e(nre,aYe),e(Tg,nYe),e(Tg,wS),e(wS,sYe),e(Tg,lYe),e(k,iYe),e(k,Mg),e(Mg,sre),e(sre,dYe),e(Mg,cYe),e(Mg,AS),e(AS,mYe),e(Mg,fYe),e(k,gYe),e(k,Nn),e(Nn,lre),e(lre,hYe),e(Nn,uYe),e(Nn,yS),e(yS,pYe),e(Nn,_Ye),e(Nn,LS),e(LS,bYe),e(Nn,FYe),e(k,vYe),e(k,Eg),e(Eg,ire),e(ire,TYe),e(Eg,MYe),e(Eg,xS),e(xS,EYe),e(Eg,CYe),e(k,wYe),e(k,jn),e(jn,dre),e(dre,AYe),e(jn,yYe),e(jn,$S),e($S,LYe),e(jn,xYe),e(jn,kS),e(kS,$Ye),e(jn,kYe),e(k,SYe),e(k,Dn),e(Dn,cre),e(cre,RYe),e(Dn,BYe),e(Dn,SS),e(SS,PYe),e(Dn,IYe),e(Dn,RS),e(RS,qYe),e(Dn,NYe),e(k,jYe),e(k,Gn),e(Gn,mre),e(mre,DYe),e(Gn,GYe),e(Gn,BS),e(BS,OYe),e(Gn,VYe),e(Gn,PS),e(PS,XYe),e(Gn,zYe),e(k,QYe),e(k,Cg),e(Cg,fre),e(fre,WYe),e(Cg,HYe),e(Cg,IS),e(IS,UYe),e(Cg,JYe),e(k,YYe),e(k,On),e(On,gre),e(gre,KYe),e(On,ZYe),e(On,qS),e(qS,eKe),e(On,oKe),e(On,NS),e(NS,rKe),e(On,tKe),e(k,aKe),e(k,Vn),e(Vn,hre),e(hre,nKe),e(Vn,sKe),e(Vn,jS),e(jS,lKe),e(Vn,iKe),e(Vn,DS),e(DS,dKe),e(Vn,cKe),e(k,mKe),e(k,Xn),e(Xn,ure),e(ure,fKe),e(Xn,gKe),e(Xn,GS),e(GS,hKe),e(Xn,uKe),e(Xn,OS),e(OS,pKe),e(Xn,_Ke),e(k,bKe),e(k,zn),e(zn,pre),e(pre,FKe),e(zn,vKe),e(zn,VS),e(VS,TKe),e(zn,MKe),e(zn,XS),e(XS,EKe),e(zn,CKe),e(k,wKe),e(k,Qn),e(Qn,_re),e(_re,AKe),e(Qn,yKe),e(Qn,zS),e(zS,LKe),e(Qn,xKe),e(Qn,QS),e(QS,$Ke),e(Qn,kKe),e(k,SKe),e(k,Wn),e(Wn,bre),e(bre,RKe),e(Wn,BKe),e(Wn,WS),e(WS,PKe),e(Wn,IKe),e(Wn,HS),e(HS,qKe),e(Wn,NKe),e(k,jKe),e(k,wg),e(wg,Fre),e(Fre,DKe),e(wg,GKe),e(wg,US),e(US,OKe),e(wg,VKe),e(k,XKe),e(k,Hn),e(Hn,vre),e(vre,zKe),e(Hn,QKe),e(Hn,JS),e(JS,WKe),e(Hn,HKe),e(Hn,YS),e(YS,UKe),e(Hn,JKe),e(k,YKe),e(k,Ag),e(Ag,Tre),e(Tre,KKe),e(Ag,ZKe),e(Ag,KS),e(KS,eZe),e(Ag,oZe),e(k,rZe),e(k,Un),e(Un,Mre),e(Mre,tZe),e(Un,aZe),e(Un,ZS),e(ZS,nZe),e(Un,sZe),e(Un,eR),e(eR,lZe),e(Un,iZe),e(k,dZe),e(k,Jn),e(Jn,Ere),e(Ere,cZe),e(Jn,mZe),e(Jn,oR),e(oR,fZe),e(Jn,gZe),e(Jn,rR),e(rR,hZe),e(Jn,uZe),e(k,pZe),e(k,Yn),e(Yn,Cre),e(Cre,_Ze),e(Yn,bZe),e(Yn,tR),e(tR,FZe),e(Yn,vZe),e(Yn,aR),e(aR,TZe),e(Yn,MZe),e(k,EZe),e(k,Kn),e(Kn,wre),e(wre,CZe),e(Kn,wZe),e(Kn,nR),e(nR,AZe),e(Kn,yZe),e(Kn,sR),e(sR,LZe),e(Kn,xZe),e(k,$Ze),e(k,Zn),e(Zn,Are),e(Are,kZe),e(Zn,SZe),e(Zn,lR),e(lR,RZe),e(Zn,BZe),e(Zn,iR),e(iR,PZe),e(Zn,IZe),e(k,qZe),e(k,yg),e(yg,yre),e(yre,NZe),e(yg,jZe),e(yg,dR),e(dR,DZe),e(yg,GZe),e(k,OZe),e(k,es),e(es,Lre),e(Lre,VZe),e(es,XZe),e(es,cR),e(cR,zZe),e(es,QZe),e(es,mR),e(mR,WZe),e(es,HZe),e(k,UZe),e(k,os),e(os,xre),e(xre,JZe),e(os,YZe),e(os,fR),e(fR,KZe),e(os,ZZe),e(os,gR),e(gR,eeo),e(os,oeo),e(k,reo),e(k,rs),e(rs,$re),e($re,teo),e(rs,aeo),e(rs,hR),e(hR,neo),e(rs,seo),e(rs,uR),e(uR,leo),e(rs,ieo),e(k,deo),e(k,ts),e(ts,kre),e(kre,ceo),e(ts,meo),e(ts,pR),e(pR,feo),e(ts,geo),e(ts,_R),e(_R,heo),e(ts,ueo),e(k,peo),e(k,as),e(as,Sre),e(Sre,_eo),e(as,beo),e(as,bR),e(bR,Feo),e(as,veo),e(as,FR),e(FR,Teo),e(as,Meo),e(k,Eeo),e(k,ns),e(ns,Rre),e(Rre,Ceo),e(ns,weo),e(ns,vR),e(vR,Aeo),e(ns,yeo),e(ns,TR),e(TR,Leo),e(ns,xeo),e(k,$eo),e(k,Lg),e(Lg,Bre),e(Bre,keo),e(Lg,Seo),e(Lg,MR),e(MR,Reo),e(Lg,Beo),e(k,Peo),e(k,ss),e(ss,Pre),e(Pre,Ieo),e(ss,qeo),e(ss,ER),e(ER,Neo),e(ss,jeo),e(ss,CR),e(CR,Deo),e(ss,Geo),e(k,Oeo),e(k,xg),e(xg,Ire),e(Ire,Veo),e(xg,Xeo),e(xg,wR),e(wR,zeo),e(xg,Qeo),e(k,Weo),e(k,$g),e($g,qre),e(qre,Heo),e($g,Ueo),e($g,AR),e(AR,Jeo),e($g,Yeo),e(k,Keo),e(k,ls),e(ls,Nre),e(Nre,Zeo),e(ls,eoo),e(ls,yR),e(yR,ooo),e(ls,roo),e(ls,LR),e(LR,too),e(ls,aoo),e(k,noo),e(k,is),e(is,jre),e(jre,soo),e(is,loo),e(is,xR),e(xR,ioo),e(is,doo),e(is,$R),e($R,coo),e(is,moo),e(k,foo),e(k,ds),e(ds,Dre),e(Dre,goo),e(ds,hoo),e(ds,kR),e(kR,uoo),e(ds,poo),e(ds,SR),e(SR,_oo),e(ds,boo),e(k,Foo),e(k,kg),e(kg,Gre),e(Gre,voo),e(kg,Too),e(kg,RR),e(RR,Moo),e(kg,Eoo),e(k,Coo),e(k,cs),e(cs,Ore),e(Ore,woo),e(cs,Aoo),e(cs,BR),e(BR,yoo),e(cs,Loo),e(cs,PR),e(PR,xoo),e(cs,$oo),e(k,koo),e(k,ms),e(ms,Vre),e(Vre,Soo),e(ms,Roo),e(ms,IR),e(IR,Boo),e(ms,Poo),e(ms,qR),e(qR,Ioo),e(ms,qoo),e(k,Noo),e(k,fs),e(fs,Xre),e(Xre,joo),e(fs,Doo),e(fs,NR),e(NR,Goo),e(fs,Ooo),e(fs,jR),e(jR,Voo),e(fs,Xoo),e(k,zoo),e(k,gs),e(gs,zre),e(zre,Qoo),e(gs,Woo),e(gs,DR),e(DR,Hoo),e(gs,Uoo),e(gs,GR),e(GR,Joo),e(gs,Yoo),e(k,Koo),e(k,hs),e(hs,Qre),e(Qre,Zoo),e(hs,ero),e(hs,OR),e(OR,oro),e(hs,rro),e(hs,VR),e(VR,tro),e(hs,aro),e(k,nro),e(k,us),e(us,Wre),e(Wre,sro),e(us,lro),e(us,XR),e(XR,iro),e(us,dro),e(us,zR),e(zR,cro),e(us,mro),e(k,fro),e(k,Sg),e(Sg,Hre),e(Hre,gro),e(Sg,hro),e(Sg,QR),e(QR,uro),e(Sg,pro),e(k,_ro),e(k,Rg),e(Rg,Ure),e(Ure,bro),e(Rg,Fro),e(Rg,WR),e(WR,vro),e(Rg,Tro),e(k,Mro),e(k,Bg),e(Bg,Jre),e(Jre,Ero),e(Bg,Cro),e(Bg,HR),e(HR,wro),e(Bg,Aro),e(k,yro),e(k,Pg),e(Pg,Yre),e(Yre,Lro),e(Pg,xro),e(Pg,UR),e(UR,$ro),e(Pg,kro),e(k,Sro),e(k,ps),e(ps,Kre),e(Kre,Rro),e(ps,Bro),e(ps,JR),e(JR,Pro),e(ps,Iro),e(ps,YR),e(YR,qro),e(ps,Nro),e(k,jro),e(k,Ig),e(Ig,Zre),e(Zre,Dro),e(Ig,Gro),e(Ig,KR),e(KR,Oro),e(Ig,Vro),e(k,Xro),e(k,_s),e(_s,ete),e(ete,zro),e(_s,Qro),e(_s,ZR),e(ZR,Wro),e(_s,Hro),e(_s,eB),e(eB,Uro),e(_s,Jro),e(k,Yro),e(k,bs),e(bs,ote),e(ote,Kro),e(bs,Zro),e(bs,oB),e(oB,eto),e(bs,oto),e(bs,rB),e(rB,rto),e(bs,tto),e(k,ato),e(k,Fs),e(Fs,rte),e(rte,nto),e(Fs,sto),e(Fs,tB),e(tB,lto),e(Fs,ito),e(Fs,aB),e(aB,dto),e(Fs,cto),e(k,mto),e(k,vs),e(vs,tte),e(tte,fto),e(vs,gto),e(vs,nB),e(nB,hto),e(vs,uto),e(vs,sB),e(sB,pto),e(vs,_to),e(k,bto),e(k,Ts),e(Ts,ate),e(ate,Fto),e(Ts,vto),e(Ts,lB),e(lB,Tto),e(Ts,Mto),e(Ts,iB),e(iB,Eto),e(Ts,Cto),e(k,wto),e(k,Ms),e(Ms,nte),e(nte,Ato),e(Ms,yto),e(Ms,dB),e(dB,Lto),e(Ms,xto),e(Ms,cB),e(cB,$to),e(Ms,kto),e(k,Sto),e(k,qg),e(qg,ste),e(ste,Rto),e(qg,Bto),e(qg,mB),e(mB,Pto),e(qg,Ito),e(k,qto),e(k,Ng),e(Ng,lte),e(lte,Nto),e(Ng,jto),e(Ng,fB),e(fB,Dto),e(Ng,Gto),e(k,Oto),e(k,Es),e(Es,ite),e(ite,Vto),e(Es,Xto),e(Es,gB),e(gB,zto),e(Es,Qto),e(Es,hB),e(hB,Wto),e(Es,Hto),e(k,Uto),e(k,Cs),e(Cs,dte),e(dte,Jto),e(Cs,Yto),e(Cs,uB),e(uB,Kto),e(Cs,Zto),e(Cs,pB),e(pB,eao),e(Cs,oao),e(k,rao),e(k,ws),e(ws,cte),e(cte,tao),e(ws,aao),e(ws,_B),e(_B,nao),e(ws,sao),e(ws,bB),e(bB,lao),e(ws,iao),e(k,dao),e(k,jg),e(jg,mte),e(mte,cao),e(jg,mao),e(jg,FB),e(FB,fao),e(jg,gao),e(k,hao),e(k,Dg),e(Dg,fte),e(fte,uao),e(Dg,pao),e(Dg,vB),e(vB,_ao),e(Dg,bao),e(k,Fao),e(k,Gg),e(Gg,gte),e(gte,vao),e(Gg,Tao),e(Gg,TB),e(TB,Mao),e(Gg,Eao),e(k,Cao),e(k,As),e(As,hte),e(hte,wao),e(As,Aao),e(As,MB),e(MB,yao),e(As,Lao),e(As,EB),e(EB,xao),e(As,$ao),e(k,kao),e(k,Og),e(Og,ute),e(ute,Sao),e(Og,Rao),e(Og,CB),e(CB,Bao),e(Og,Pao),e(k,Iao),e(k,Vg),e(Vg,pte),e(pte,qao),e(Vg,Nao),e(Vg,wB),e(wB,jao),e(Vg,Dao),e(k,Gao),e(k,ys),e(ys,_te),e(_te,Oao),e(ys,Vao),e(ys,AB),e(AB,Xao),e(ys,zao),e(ys,yB),e(yB,Qao),e(ys,Wao),e(k,Hao),e(k,Xg),e(Xg,bte),e(bte,Uao),e(Xg,Jao),e(Xg,LB),e(LB,Yao),e(Xg,Kao),e(k,Zao),e(k,zg),e(zg,Fte),e(Fte,eno),e(zg,ono),e(zg,xB),e(xB,rno),e(zg,tno),e(k,ano),e(k,Ls),e(Ls,vte),e(vte,nno),e(Ls,sno),e(Ls,$B),e($B,lno),e(Ls,ino),e(Ls,kB),e(kB,dno),e(Ls,cno),e(k,mno),e(k,xs),e(xs,Tte),e(Tte,fno),e(xs,gno),e(xs,SB),e(SB,hno),e(xs,uno),e(xs,RB),e(RB,pno),e(xs,_no),e(k,bno),e(k,$s),e($s,Mte),e(Mte,Fno),e($s,vno),e($s,BB),e(BB,Tno),e($s,Mno),e($s,PB),e(PB,Eno),e($s,Cno),e(k,wno),e(k,ks),e(ks,Ete),e(Ete,Ano),e(ks,yno),e(ks,IB),e(IB,Lno),e(ks,xno),e(ks,qB),e(qB,$no),e(ks,kno),e(Cr,Sno),M(Qg,Cr,null),e(wo,Rno),e(wo,Wg),M(ey,Wg,null),e(Wg,Bno),e(Wg,Cte),e(Cte,Pno),b(m,fPe,_),b(m,bi,_),e(bi,Hg),e(Hg,wte),M(oy,wte,null),e(bi,Ino),e(bi,Ate),e(Ate,qno),b(m,gPe,_),b(m,Ao,_),M(ry,Ao,null),e(Ao,Nno),e(Ao,ty),e(ty,jno),e(ty,NB),e(NB,Dno),e(ty,Gno),e(Ao,Ono),e(Ao,ay),e(ay,Vno),e(ay,yte),e(yte,Xno),e(ay,zno),e(Ao,Qno),e(Ao,Qe),M(ny,Qe,null),e(Qe,Wno),e(Qe,Lte),e(Lte,Hno),e(Qe,Uno),e(Qe,wa),e(wa,Jno),e(wa,xte),e(xte,Yno),e(wa,Kno),e(wa,$te),e($te,Zno),e(wa,eso),e(wa,kte),e(kte,oso),e(wa,rso),e(Qe,tso),e(Qe,te),e(te,Ug),e(Ug,Ste),e(Ste,aso),e(Ug,nso),e(Ug,jB),e(jB,sso),e(Ug,lso),e(te,iso),e(te,Jg),e(Jg,Rte),e(Rte,dso),e(Jg,cso),e(Jg,DB),e(DB,mso),e(Jg,fso),e(te,gso),e(te,Yg),e(Yg,Bte),e(Bte,hso),e(Yg,uso),e(Yg,GB),e(GB,pso),e(Yg,_so),e(te,bso),e(te,Kg),e(Kg,Pte),e(Pte,Fso),e(Kg,vso),e(Kg,OB),e(OB,Tso),e(Kg,Mso),e(te,Eso),e(te,Zg),e(Zg,Ite),e(Ite,Cso),e(Zg,wso),e(Zg,VB),e(VB,Aso),e(Zg,yso),e(te,Lso),e(te,eh),e(eh,qte),e(qte,xso),e(eh,$so),e(eh,XB),e(XB,kso),e(eh,Sso),e(te,Rso),e(te,oh),e(oh,Nte),e(Nte,Bso),e(oh,Pso),e(oh,zB),e(zB,Iso),e(oh,qso),e(te,Nso),e(te,rh),e(rh,jte),e(jte,jso),e(rh,Dso),e(rh,QB),e(QB,Gso),e(rh,Oso),e(te,Vso),e(te,th),e(th,Dte),e(Dte,Xso),e(th,zso),e(th,WB),e(WB,Qso),e(th,Wso),e(te,Hso),e(te,ah),e(ah,Gte),e(Gte,Uso),e(ah,Jso),e(ah,HB),e(HB,Yso),e(ah,Kso),e(te,Zso),e(te,nh),e(nh,Ote),e(Ote,elo),e(nh,olo),e(nh,UB),e(UB,rlo),e(nh,tlo),e(te,alo),e(te,sh),e(sh,Vte),e(Vte,nlo),e(sh,slo),e(sh,JB),e(JB,llo),e(sh,ilo),e(te,dlo),e(te,lh),e(lh,Xte),e(Xte,clo),e(lh,mlo),e(lh,YB),e(YB,flo),e(lh,glo),e(te,hlo),e(te,ih),e(ih,zte),e(zte,ulo),e(ih,plo),e(ih,KB),e(KB,_lo),e(ih,blo),e(te,Flo),e(te,dh),e(dh,Qte),e(Qte,vlo),e(dh,Tlo),e(dh,ZB),e(ZB,Mlo),e(dh,Elo),e(te,Clo),e(te,ch),e(ch,Wte),e(Wte,wlo),e(ch,Alo),e(ch,eP),e(eP,ylo),e(ch,Llo),e(te,xlo),e(te,mh),e(mh,Hte),e(Hte,$lo),e(mh,klo),e(mh,oP),e(oP,Slo),e(mh,Rlo),e(te,Blo),e(te,fh),e(fh,Ute),e(Ute,Plo),e(fh,Ilo),e(fh,rP),e(rP,qlo),e(fh,Nlo),e(te,jlo),e(te,gh),e(gh,Jte),e(Jte,Dlo),e(gh,Glo),e(gh,tP),e(tP,Olo),e(gh,Vlo),e(te,Xlo),e(te,hh),e(hh,Yte),e(Yte,zlo),e(hh,Qlo),e(hh,aP),e(aP,Wlo),e(hh,Hlo),e(te,Ulo),e(te,uh),e(uh,Kte),e(Kte,Jlo),e(uh,Ylo),e(uh,nP),e(nP,Klo),e(uh,Zlo),e(te,eio),e(te,ph),e(ph,Zte),e(Zte,oio),e(ph,rio),e(ph,sP),e(sP,tio),e(ph,aio),e(te,nio),e(te,_h),e(_h,eae),e(eae,sio),e(_h,lio),e(_h,lP),e(lP,iio),e(_h,dio),e(te,cio),e(te,bh),e(bh,oae),e(oae,mio),e(bh,fio),e(bh,iP),e(iP,gio),e(bh,hio),e(Qe,uio),M(Fh,Qe,null),e(Qe,pio),M(vh,Qe,null),e(Ao,_io),e(Ao,Th),M(sy,Th,null),e(Th,bio),e(Th,rae),e(rae,Fio),b(m,hPe,_),b(m,Fi,_),e(Fi,Mh),e(Mh,tae),M(ly,tae,null),e(Fi,vio),e(Fi,aae),e(aae,Tio),b(m,uPe,_),b(m,yo,_),M(iy,yo,null),e(yo,Mio),e(yo,dy),e(dy,Eio),e(dy,dP),e(dP,Cio),e(dy,wio),e(yo,Aio),e(yo,cy),e(cy,yio),e(cy,nae),e(nae,Lio),e(cy,xio),e(yo,$io),e(yo,We),M(my,We,null),e(We,kio),e(We,sae),e(sae,Sio),e(We,Rio),e(We,vi),e(vi,Bio),e(vi,lae),e(lae,Pio),e(vi,Iio),e(vi,iae),e(iae,qio),e(vi,Nio),e(We,jio),e(We,be),e(be,Eh),e(Eh,dae),e(dae,Dio),e(Eh,Gio),e(Eh,cP),e(cP,Oio),e(Eh,Vio),e(be,Xio),e(be,Ch),e(Ch,cae),e(cae,zio),e(Ch,Qio),e(Ch,mP),e(mP,Wio),e(Ch,Hio),e(be,Uio),e(be,wh),e(wh,mae),e(mae,Jio),e(wh,Yio),e(wh,fP),e(fP,Kio),e(wh,Zio),e(be,edo),e(be,Ah),e(Ah,fae),e(fae,odo),e(Ah,rdo),e(Ah,gP),e(gP,tdo),e(Ah,ado),e(be,ndo),e(be,yh),e(yh,gae),e(gae,sdo),e(yh,ldo),e(yh,hP),e(hP,ido),e(yh,ddo),e(be,cdo),e(be,Lh),e(Lh,hae),e(hae,mdo),e(Lh,fdo),e(Lh,uP),e(uP,gdo),e(Lh,hdo),e(be,udo),e(be,xh),e(xh,uae),e(uae,pdo),e(xh,_do),e(xh,pP),e(pP,bdo),e(xh,Fdo),e(be,vdo),e(be,$h),e($h,pae),e(pae,Tdo),e($h,Mdo),e($h,_P),e(_P,Edo),e($h,Cdo),e(be,wdo),e(be,kh),e(kh,_ae),e(_ae,Ado),e(kh,ydo),e(kh,bP),e(bP,Ldo),e(kh,xdo),e(be,$do),e(be,Sh),e(Sh,bae),e(bae,kdo),e(Sh,Sdo),e(Sh,FP),e(FP,Rdo),e(Sh,Bdo),e(be,Pdo),e(be,Rh),e(Rh,Fae),e(Fae,Ido),e(Rh,qdo),e(Rh,vP),e(vP,Ndo),e(Rh,jdo),e(be,Ddo),e(be,Bh),e(Bh,vae),e(vae,Gdo),e(Bh,Odo),e(Bh,TP),e(TP,Vdo),e(Bh,Xdo),e(be,zdo),e(be,Ph),e(Ph,Tae),e(Tae,Qdo),e(Ph,Wdo),e(Ph,MP),e(MP,Hdo),e(Ph,Udo),e(be,Jdo),e(be,Ih),e(Ih,Mae),e(Mae,Ydo),e(Ih,Kdo),e(Ih,EP),e(EP,Zdo),e(Ih,eco),e(We,oco),M(qh,We,null),e(We,rco),M(Nh,We,null),e(yo,tco),e(yo,jh),M(fy,jh,null),e(jh,aco),e(jh,Eae),e(Eae,nco),b(m,pPe,_),b(m,Ti,_),e(Ti,Dh),e(Dh,Cae),M(gy,Cae,null),e(Ti,sco),e(Ti,wae),e(wae,lco),b(m,_Pe,_),b(m,Lo,_),M(hy,Lo,null),e(Lo,ico),e(Lo,Mi),e(Mi,dco),e(Mi,CP),e(CP,cco),e(Mi,mco),e(Mi,wP),e(wP,fco),e(Mi,gco),e(Lo,hco),e(Lo,uy),e(uy,uco),e(uy,Aae),e(Aae,pco),e(uy,_co),e(Lo,bco),e(Lo,ot),M(py,ot,null),e(ot,Fco),e(ot,yae),e(yae,vco),e(ot,Tco),e(ot,Ei),e(Ei,Mco),e(Ei,Lae),e(Lae,Eco),e(Ei,Cco),e(Ei,AP),e(AP,wco),e(Ei,Aco),e(ot,yco),M(Gh,ot,null),e(Lo,Lco),e(Lo,He),M(_y,He,null),e(He,xco),e(He,xae),e(xae,$co),e(He,kco),e(He,Aa),e(Aa,Sco),e(Aa,$ae),e($ae,Rco),e(Aa,Bco),e(Aa,kae),e(kae,Pco),e(Aa,Ico),e(Aa,Sae),e(Sae,qco),e(Aa,Nco),e(He,jco),e(He,x),e(x,Oh),e(Oh,Rae),e(Rae,Dco),e(Oh,Gco),e(Oh,yP),e(yP,Oco),e(Oh,Vco),e(x,Xco),e(x,Vh),e(Vh,Bae),e(Bae,zco),e(Vh,Qco),e(Vh,LP),e(LP,Wco),e(Vh,Hco),e(x,Uco),e(x,Xh),e(Xh,Pae),e(Pae,Jco),e(Xh,Yco),e(Xh,xP),e(xP,Kco),e(Xh,Zco),e(x,emo),e(x,zh),e(zh,Iae),e(Iae,omo),e(zh,rmo),e(zh,$P),e($P,tmo),e(zh,amo),e(x,nmo),e(x,Qh),e(Qh,qae),e(qae,smo),e(Qh,lmo),e(Qh,kP),e(kP,imo),e(Qh,dmo),e(x,cmo),e(x,Wh),e(Wh,Nae),e(Nae,mmo),e(Wh,fmo),e(Wh,SP),e(SP,gmo),e(Wh,hmo),e(x,umo),e(x,Hh),e(Hh,jae),e(jae,pmo),e(Hh,_mo),e(Hh,RP),e(RP,bmo),e(Hh,Fmo),e(x,vmo),e(x,Uh),e(Uh,Dae),e(Dae,Tmo),e(Uh,Mmo),e(Uh,BP),e(BP,Emo),e(Uh,Cmo),e(x,wmo),e(x,Jh),e(Jh,Gae),e(Gae,Amo),e(Jh,ymo),e(Jh,PP),e(PP,Lmo),e(Jh,xmo),e(x,$mo),e(x,Yh),e(Yh,Oae),e(Oae,kmo),e(Yh,Smo),e(Yh,IP),e(IP,Rmo),e(Yh,Bmo),e(x,Pmo),e(x,Kh),e(Kh,Vae),e(Vae,Imo),e(Kh,qmo),e(Kh,qP),e(qP,Nmo),e(Kh,jmo),e(x,Dmo),e(x,Zh),e(Zh,Xae),e(Xae,Gmo),e(Zh,Omo),e(Zh,NP),e(NP,Vmo),e(Zh,Xmo),e(x,zmo),e(x,eu),e(eu,zae),e(zae,Qmo),e(eu,Wmo),e(eu,jP),e(jP,Hmo),e(eu,Umo),e(x,Jmo),e(x,ou),e(ou,Qae),e(Qae,Ymo),e(ou,Kmo),e(ou,DP),e(DP,Zmo),e(ou,efo),e(x,ofo),e(x,ru),e(ru,Wae),e(Wae,rfo),e(ru,tfo),e(ru,GP),e(GP,afo),e(ru,nfo),e(x,sfo),e(x,tu),e(tu,Hae),e(Hae,lfo),e(tu,ifo),e(tu,OP),e(OP,dfo),e(tu,cfo),e(x,mfo),e(x,au),e(au,Uae),e(Uae,ffo),e(au,gfo),e(au,VP),e(VP,hfo),e(au,ufo),e(x,pfo),e(x,nu),e(nu,Jae),e(Jae,_fo),e(nu,bfo),e(nu,XP),e(XP,Ffo),e(nu,vfo),e(x,Tfo),e(x,su),e(su,Yae),e(Yae,Mfo),e(su,Efo),e(su,zP),e(zP,Cfo),e(su,wfo),e(x,Afo),e(x,lu),e(lu,Kae),e(Kae,yfo),e(lu,Lfo),e(lu,QP),e(QP,xfo),e(lu,$fo),e(x,kfo),e(x,iu),e(iu,Zae),e(Zae,Sfo),e(iu,Rfo),e(iu,WP),e(WP,Bfo),e(iu,Pfo),e(x,Ifo),e(x,du),e(du,ene),e(ene,qfo),e(du,Nfo),e(du,HP),e(HP,jfo),e(du,Dfo),e(x,Gfo),e(x,cu),e(cu,one),e(one,Ofo),e(cu,Vfo),e(cu,UP),e(UP,Xfo),e(cu,zfo),e(x,Qfo),e(x,mu),e(mu,rne),e(rne,Wfo),e(mu,Hfo),e(mu,JP),e(JP,Ufo),e(mu,Jfo),e(x,Yfo),e(x,fu),e(fu,tne),e(tne,Kfo),e(fu,Zfo),e(fu,YP),e(YP,ego),e(fu,ogo),e(x,rgo),e(x,gu),e(gu,ane),e(ane,tgo),e(gu,ago),e(gu,KP),e(KP,ngo),e(gu,sgo),e(x,lgo),e(x,hu),e(hu,nne),e(nne,igo),e(hu,dgo),e(hu,ZP),e(ZP,cgo),e(hu,mgo),e(x,fgo),e(x,uu),e(uu,sne),e(sne,ggo),e(uu,hgo),e(uu,eI),e(eI,ugo),e(uu,pgo),e(x,_go),e(x,pu),e(pu,lne),e(lne,bgo),e(pu,Fgo),e(pu,oI),e(oI,vgo),e(pu,Tgo),e(x,Mgo),e(x,_u),e(_u,ine),e(ine,Ego),e(_u,Cgo),e(_u,rI),e(rI,wgo),e(_u,Ago),e(x,ygo),e(x,Ss),e(Ss,dne),e(dne,Lgo),e(Ss,xgo),e(Ss,tI),e(tI,$go),e(Ss,kgo),e(Ss,aI),e(aI,Sgo),e(Ss,Rgo),e(x,Bgo),e(x,bu),e(bu,cne),e(cne,Pgo),e(bu,Igo),e(bu,nI),e(nI,qgo),e(bu,Ngo),e(x,jgo),e(x,Fu),e(Fu,mne),e(mne,Dgo),e(Fu,Ggo),e(Fu,sI),e(sI,Ogo),e(Fu,Vgo),e(x,Xgo),e(x,vu),e(vu,fne),e(fne,zgo),e(vu,Qgo),e(vu,lI),e(lI,Wgo),e(vu,Hgo),e(x,Ugo),e(x,Tu),e(Tu,gne),e(gne,Jgo),e(Tu,Ygo),e(Tu,iI),e(iI,Kgo),e(Tu,Zgo),e(x,eho),e(x,Mu),e(Mu,hne),e(hne,oho),e(Mu,rho),e(Mu,dI),e(dI,tho),e(Mu,aho),e(x,nho),e(x,Eu),e(Eu,une),e(une,sho),e(Eu,lho),e(Eu,cI),e(cI,iho),e(Eu,dho),e(x,cho),e(x,Cu),e(Cu,pne),e(pne,mho),e(Cu,fho),e(Cu,mI),e(mI,gho),e(Cu,hho),e(x,uho),e(x,wu),e(wu,_ne),e(_ne,pho),e(wu,_ho),e(wu,fI),e(fI,bho),e(wu,Fho),e(x,vho),e(x,Au),e(Au,bne),e(bne,Tho),e(Au,Mho),e(Au,gI),e(gI,Eho),e(Au,Cho),e(x,who),e(x,yu),e(yu,Fne),e(Fne,Aho),e(yu,yho),e(yu,hI),e(hI,Lho),e(yu,xho),e(x,$ho),e(x,Lu),e(Lu,vne),e(vne,kho),e(Lu,Sho),e(Lu,uI),e(uI,Rho),e(Lu,Bho),e(x,Pho),e(x,xu),e(xu,Tne),e(Tne,Iho),e(xu,qho),e(xu,pI),e(pI,Nho),e(xu,jho),e(x,Dho),e(x,$u),e($u,Mne),e(Mne,Gho),e($u,Oho),e($u,_I),e(_I,Vho),e($u,Xho),e(x,zho),e(x,ku),e(ku,Ene),e(Ene,Qho),e(ku,Who),e(ku,bI),e(bI,Hho),e(ku,Uho),e(x,Jho),e(x,Su),e(Su,Cne),e(Cne,Yho),e(Su,Kho),e(Su,FI),e(FI,Zho),e(Su,euo),e(x,ouo),e(x,Ru),e(Ru,wne),e(wne,ruo),e(Ru,tuo),e(Ru,vI),e(vI,auo),e(Ru,nuo),e(x,suo),e(x,Bu),e(Bu,Ane),e(Ane,luo),e(Bu,iuo),e(Bu,TI),e(TI,duo),e(Bu,cuo),e(x,muo),e(x,Pu),e(Pu,yne),e(yne,fuo),e(Pu,guo),e(Pu,MI),e(MI,huo),e(Pu,uuo),e(x,puo),e(x,Iu),e(Iu,Lne),e(Lne,_uo),e(Iu,buo),e(Iu,EI),e(EI,Fuo),e(Iu,vuo),e(x,Tuo),e(x,qu),e(qu,xne),e(xne,Muo),e(qu,Euo),e(qu,CI),e(CI,Cuo),e(qu,wuo),e(x,Auo),e(x,Nu),e(Nu,$ne),e($ne,yuo),e(Nu,Luo),e(Nu,wI),e(wI,xuo),e(Nu,$uo),e(x,kuo),e(x,ju),e(ju,kne),e(kne,Suo),e(ju,Ruo),e(ju,AI),e(AI,Buo),e(ju,Puo),e(x,Iuo),e(x,Du),e(Du,Sne),e(Sne,quo),e(Du,Nuo),e(Du,yI),e(yI,juo),e(Du,Duo),e(x,Guo),e(x,Gu),e(Gu,Rne),e(Rne,Ouo),e(Gu,Vuo),e(Gu,LI),e(LI,Xuo),e(Gu,zuo),e(x,Quo),e(x,Ou),e(Ou,Bne),e(Bne,Wuo),e(Ou,Huo),e(Ou,xI),e(xI,Uuo),e(Ou,Juo),e(x,Yuo),e(x,Vu),e(Vu,Pne),e(Pne,Kuo),e(Vu,Zuo),e(Vu,$I),e($I,epo),e(Vu,opo),e(x,rpo),e(x,Xu),e(Xu,Ine),e(Ine,tpo),e(Xu,apo),e(Xu,kI),e(kI,npo),e(Xu,spo),e(x,lpo),e(x,zu),e(zu,qne),e(qne,ipo),e(zu,dpo),e(zu,SI),e(SI,cpo),e(zu,mpo),e(x,fpo),e(x,Qu),e(Qu,Nne),e(Nne,gpo),e(Qu,hpo),e(Qu,RI),e(RI,upo),e(Qu,ppo),e(x,_po),e(x,Wu),e(Wu,jne),e(jne,bpo),e(Wu,Fpo),e(Wu,BI),e(BI,vpo),e(Wu,Tpo),e(x,Mpo),e(x,Hu),e(Hu,Dne),e(Dne,Epo),e(Hu,Cpo),e(Hu,PI),e(PI,wpo),e(Hu,Apo),e(x,ypo),e(x,Uu),e(Uu,Gne),e(Gne,Lpo),e(Uu,xpo),e(Uu,II),e(II,$po),e(Uu,kpo),e(x,Spo),e(x,Ju),e(Ju,One),e(One,Rpo),e(Ju,Bpo),e(Ju,qI),e(qI,Ppo),e(Ju,Ipo),e(x,qpo),e(x,Yu),e(Yu,Vne),e(Vne,Npo),e(Yu,jpo),e(Yu,NI),e(NI,Dpo),e(Yu,Gpo),e(x,Opo),e(x,Ku),e(Ku,Xne),e(Xne,Vpo),e(Ku,Xpo),e(Ku,jI),e(jI,zpo),e(Ku,Qpo),e(x,Wpo),e(x,Zu),e(Zu,zne),e(zne,Hpo),e(Zu,Upo),e(Zu,DI),e(DI,Jpo),e(Zu,Ypo),e(x,Kpo),e(x,ep),e(ep,Qne),e(Qne,Zpo),e(ep,e_o),e(ep,GI),e(GI,o_o),e(ep,r_o),e(x,t_o),e(x,op),e(op,Wne),e(Wne,a_o),e(op,n_o),e(op,OI),e(OI,s_o),e(op,l_o),e(x,i_o),e(x,rp),e(rp,Hne),e(Hne,d_o),e(rp,c_o),e(rp,VI),e(VI,m_o),e(rp,f_o),e(x,g_o),e(x,tp),e(tp,Une),e(Une,h_o),e(tp,u_o),e(tp,XI),e(XI,p_o),e(tp,__o),e(x,b_o),e(x,ap),e(ap,Jne),e(Jne,F_o),e(ap,v_o),e(ap,zI),e(zI,T_o),e(ap,M_o),e(x,E_o),e(x,np),e(np,Yne),e(Yne,C_o),e(np,w_o),e(np,QI),e(QI,A_o),e(np,y_o),e(x,L_o),e(x,sp),e(sp,Kne),e(Kne,x_o),e(sp,$_o),e(sp,WI),e(WI,k_o),e(sp,S_o),e(x,R_o),e(x,lp),e(lp,Zne),e(Zne,B_o),e(lp,P_o),e(lp,HI),e(HI,I_o),e(lp,q_o),e(x,N_o),e(x,ip),e(ip,ese),e(ese,j_o),e(ip,D_o),e(ip,UI),e(UI,G_o),e(ip,O_o),e(x,V_o),e(x,dp),e(dp,ose),e(ose,X_o),e(dp,z_o),e(dp,JI),e(JI,Q_o),e(dp,W_o),e(x,H_o),e(x,cp),e(cp,rse),e(rse,U_o),e(cp,J_o),e(cp,YI),e(YI,Y_o),e(cp,K_o),e(x,Z_o),e(x,mp),e(mp,tse),e(tse,ebo),e(mp,obo),e(mp,KI),e(KI,rbo),e(mp,tbo),e(x,abo),e(x,fp),e(fp,ase),e(ase,nbo),e(fp,sbo),e(fp,ZI),e(ZI,lbo),e(fp,ibo),e(x,dbo),e(x,gp),e(gp,nse),e(nse,cbo),e(gp,mbo),e(gp,eq),e(eq,fbo),e(gp,gbo),e(x,hbo),e(x,hp),e(hp,sse),e(sse,ubo),e(hp,pbo),e(hp,oq),e(oq,_bo),e(hp,bbo),e(x,Fbo),e(x,up),e(up,lse),e(lse,vbo),e(up,Tbo),e(up,rq),e(rq,Mbo),e(up,Ebo),e(x,Cbo),e(x,pp),e(pp,ise),e(ise,wbo),e(pp,Abo),e(pp,tq),e(tq,ybo),e(pp,Lbo),e(x,xbo),e(x,_p),e(_p,dse),e(dse,$bo),e(_p,kbo),e(_p,aq),e(aq,Sbo),e(_p,Rbo),e(x,Bbo),e(x,bp),e(bp,cse),e(cse,Pbo),e(bp,Ibo),e(bp,nq),e(nq,qbo),e(bp,Nbo),e(x,jbo),e(x,Fp),e(Fp,mse),e(mse,Dbo),e(Fp,Gbo),e(Fp,sq),e(sq,Obo),e(Fp,Vbo),e(x,Xbo),e(x,vp),e(vp,fse),e(fse,zbo),e(vp,Qbo),e(vp,lq),e(lq,Wbo),e(vp,Hbo),e(x,Ubo),e(x,Tp),e(Tp,gse),e(gse,Jbo),e(Tp,Ybo),e(Tp,iq),e(iq,Kbo),e(Tp,Zbo),e(x,e2o),e(x,Mp),e(Mp,hse),e(hse,o2o),e(Mp,r2o),e(Mp,dq),e(dq,t2o),e(Mp,a2o),e(x,n2o),e(x,Ep),e(Ep,use),e(use,s2o),e(Ep,l2o),e(Ep,cq),e(cq,i2o),e(Ep,d2o),e(x,c2o),e(x,Cp),e(Cp,pse),e(pse,m2o),e(Cp,f2o),e(Cp,mq),e(mq,g2o),e(Cp,h2o),e(x,u2o),e(x,wp),e(wp,_se),e(_se,p2o),e(wp,_2o),e(wp,fq),e(fq,b2o),e(wp,F2o),e(x,v2o),e(x,Ap),e(Ap,bse),e(bse,T2o),e(Ap,M2o),e(Ap,gq),e(gq,E2o),e(Ap,C2o),e(x,w2o),e(x,yp),e(yp,Fse),e(Fse,A2o),e(yp,y2o),e(yp,hq),e(hq,L2o),e(yp,x2o),e(He,$2o),e(He,Lp),e(Lp,k2o),e(Lp,vse),e(vse,S2o),e(Lp,R2o),e(Lp,Tse),e(Tse,B2o),e(He,P2o),M(xp,He,null),b(m,bPe,_),b(m,Ci,_),e(Ci,$p),e($p,Mse),M(by,Mse,null),e(Ci,I2o),e(Ci,Ese),e(Ese,q2o),b(m,FPe,_),b(m,xo,_),M(Fy,xo,null),e(xo,N2o),e(xo,wi),e(wi,j2o),e(wi,uq),e(uq,D2o),e(wi,G2o),e(wi,pq),e(pq,O2o),e(wi,V2o),e(xo,X2o),e(xo,vy),e(vy,z2o),e(vy,Cse),e(Cse,Q2o),e(vy,W2o),e(xo,H2o),e(xo,rt),M(Ty,rt,null),e(rt,U2o),e(rt,wse),e(wse,J2o),e(rt,Y2o),e(rt,Ai),e(Ai,K2o),e(Ai,Ase),e(Ase,Z2o),e(Ai,eFo),e(Ai,_q),e(_q,oFo),e(Ai,rFo),e(rt,tFo),M(kp,rt,null),e(xo,aFo),e(xo,Ue),M(My,Ue,null),e(Ue,nFo),e(Ue,yse),e(yse,sFo),e(Ue,lFo),e(Ue,ya),e(ya,iFo),e(ya,Lse),e(Lse,dFo),e(ya,cFo),e(ya,xse),e(xse,mFo),e(ya,fFo),e(ya,$se),e($se,gFo),e(ya,hFo),e(Ue,uFo),e(Ue,G),e(G,Sp),e(Sp,kse),e(kse,pFo),e(Sp,_Fo),e(Sp,bq),e(bq,bFo),e(Sp,FFo),e(G,vFo),e(G,Rp),e(Rp,Sse),e(Sse,TFo),e(Rp,MFo),e(Rp,Fq),e(Fq,EFo),e(Rp,CFo),e(G,wFo),e(G,Bp),e(Bp,Rse),e(Rse,AFo),e(Bp,yFo),e(Bp,vq),e(vq,LFo),e(Bp,xFo),e(G,$Fo),e(G,Pp),e(Pp,Bse),e(Bse,kFo),e(Pp,SFo),e(Pp,Tq),e(Tq,RFo),e(Pp,BFo),e(G,PFo),e(G,Ip),e(Ip,Pse),e(Pse,IFo),e(Ip,qFo),e(Ip,Mq),e(Mq,NFo),e(Ip,jFo),e(G,DFo),e(G,qp),e(qp,Ise),e(Ise,GFo),e(qp,OFo),e(qp,Eq),e(Eq,VFo),e(qp,XFo),e(G,zFo),e(G,Np),e(Np,qse),e(qse,QFo),e(Np,WFo),e(Np,Cq),e(Cq,HFo),e(Np,UFo),e(G,JFo),e(G,jp),e(jp,Nse),e(Nse,YFo),e(jp,KFo),e(jp,wq),e(wq,ZFo),e(jp,evo),e(G,ovo),e(G,Dp),e(Dp,jse),e(jse,rvo),e(Dp,tvo),e(Dp,Aq),e(Aq,avo),e(Dp,nvo),e(G,svo),e(G,Gp),e(Gp,Dse),e(Dse,lvo),e(Gp,ivo),e(Gp,yq),e(yq,dvo),e(Gp,cvo),e(G,mvo),e(G,Op),e(Op,Gse),e(Gse,fvo),e(Op,gvo),e(Op,Lq),e(Lq,hvo),e(Op,uvo),e(G,pvo),e(G,Vp),e(Vp,Ose),e(Ose,_vo),e(Vp,bvo),e(Vp,xq),e(xq,Fvo),e(Vp,vvo),e(G,Tvo),e(G,Xp),e(Xp,Vse),e(Vse,Mvo),e(Xp,Evo),e(Xp,$q),e($q,Cvo),e(Xp,wvo),e(G,Avo),e(G,zp),e(zp,Xse),e(Xse,yvo),e(zp,Lvo),e(zp,kq),e(kq,xvo),e(zp,$vo),e(G,kvo),e(G,Qp),e(Qp,zse),e(zse,Svo),e(Qp,Rvo),e(Qp,Sq),e(Sq,Bvo),e(Qp,Pvo),e(G,Ivo),e(G,Wp),e(Wp,Qse),e(Qse,qvo),e(Wp,Nvo),e(Wp,Rq),e(Rq,jvo),e(Wp,Dvo),e(G,Gvo),e(G,Hp),e(Hp,Wse),e(Wse,Ovo),e(Hp,Vvo),e(Hp,Bq),e(Bq,Xvo),e(Hp,zvo),e(G,Qvo),e(G,Up),e(Up,Hse),e(Hse,Wvo),e(Up,Hvo),e(Up,Pq),e(Pq,Uvo),e(Up,Jvo),e(G,Yvo),e(G,Jp),e(Jp,Use),e(Use,Kvo),e(Jp,Zvo),e(Jp,Iq),e(Iq,e1o),e(Jp,o1o),e(G,r1o),e(G,Yp),e(Yp,Jse),e(Jse,t1o),e(Yp,a1o),e(Yp,qq),e(qq,n1o),e(Yp,s1o),e(G,l1o),e(G,Kp),e(Kp,Yse),e(Yse,i1o),e(Kp,d1o),e(Kp,Nq),e(Nq,c1o),e(Kp,m1o),e(G,f1o),e(G,Zp),e(Zp,Kse),e(Kse,g1o),e(Zp,h1o),e(Zp,jq),e(jq,u1o),e(Zp,p1o),e(G,_1o),e(G,e_),e(e_,Zse),e(Zse,b1o),e(e_,F1o),e(e_,Dq),e(Dq,v1o),e(e_,T1o),e(G,M1o),e(G,o_),e(o_,ele),e(ele,E1o),e(o_,C1o),e(o_,Gq),e(Gq,w1o),e(o_,A1o),e(G,y1o),e(G,r_),e(r_,ole),e(ole,L1o),e(r_,x1o),e(r_,Oq),e(Oq,$1o),e(r_,k1o),e(G,S1o),e(G,t_),e(t_,rle),e(rle,R1o),e(t_,B1o),e(t_,Vq),e(Vq,P1o),e(t_,I1o),e(G,q1o),e(G,a_),e(a_,tle),e(tle,N1o),e(a_,j1o),e(a_,Xq),e(Xq,D1o),e(a_,G1o),e(G,O1o),e(G,n_),e(n_,ale),e(ale,V1o),e(n_,X1o),e(n_,zq),e(zq,z1o),e(n_,Q1o),e(G,W1o),e(G,s_),e(s_,nle),e(nle,H1o),e(s_,U1o),e(s_,Qq),e(Qq,J1o),e(s_,Y1o),e(G,K1o),e(G,l_),e(l_,sle),e(sle,Z1o),e(l_,eTo),e(l_,Wq),e(Wq,oTo),e(l_,rTo),e(G,tTo),e(G,i_),e(i_,lle),e(lle,aTo),e(i_,nTo),e(i_,Hq),e(Hq,sTo),e(i_,lTo),e(G,iTo),e(G,d_),e(d_,ile),e(ile,dTo),e(d_,cTo),e(d_,Uq),e(Uq,mTo),e(d_,fTo),e(G,gTo),e(G,c_),e(c_,dle),e(dle,hTo),e(c_,uTo),e(c_,Jq),e(Jq,pTo),e(c_,_To),e(G,bTo),e(G,m_),e(m_,cle),e(cle,FTo),e(m_,vTo),e(m_,Yq),e(Yq,TTo),e(m_,MTo),e(G,ETo),e(G,f_),e(f_,mle),e(mle,CTo),e(f_,wTo),e(f_,Kq),e(Kq,ATo),e(f_,yTo),e(G,LTo),e(G,g_),e(g_,fle),e(fle,xTo),e(g_,$To),e(g_,Zq),e(Zq,kTo),e(g_,STo),e(G,RTo),e(G,h_),e(h_,gle),e(gle,BTo),e(h_,PTo),e(h_,eN),e(eN,ITo),e(h_,qTo),e(G,NTo),e(G,u_),e(u_,hle),e(hle,jTo),e(u_,DTo),e(u_,oN),e(oN,GTo),e(u_,OTo),e(G,VTo),e(G,p_),e(p_,ule),e(ule,XTo),e(p_,zTo),e(p_,rN),e(rN,QTo),e(p_,WTo),e(Ue,HTo),e(Ue,__),e(__,UTo),e(__,ple),e(ple,JTo),e(__,YTo),e(__,_le),e(_le,KTo),e(Ue,ZTo),M(b_,Ue,null),b(m,vPe,_),b(m,yi,_),e(yi,F_),e(F_,ble),M(Ey,ble,null),e(yi,eMo),e(yi,Fle),e(Fle,oMo),b(m,TPe,_),b(m,$o,_),M(Cy,$o,null),e($o,rMo),e($o,Li),e(Li,tMo),e(Li,tN),e(tN,aMo),e(Li,nMo),e(Li,aN),e(aN,sMo),e(Li,lMo),e($o,iMo),e($o,wy),e(wy,dMo),e(wy,vle),e(vle,cMo),e(wy,mMo),e($o,fMo),e($o,tt),M(Ay,tt,null),e(tt,gMo),e(tt,Tle),e(Tle,hMo),e(tt,uMo),e(tt,xi),e(xi,pMo),e(xi,Mle),e(Mle,_Mo),e(xi,bMo),e(xi,nN),e(nN,FMo),e(xi,vMo),e(tt,TMo),M(v_,tt,null),e($o,MMo),e($o,Je),M(yy,Je,null),e(Je,EMo),e(Je,Ele),e(Ele,CMo),e(Je,wMo),e(Je,La),e(La,AMo),e(La,Cle),e(Cle,yMo),e(La,LMo),e(La,wle),e(wle,xMo),e(La,$Mo),e(La,Ale),e(Ale,kMo),e(La,SMo),e(Je,RMo),e(Je,z),e(z,T_),e(T_,yle),e(yle,BMo),e(T_,PMo),e(T_,sN),e(sN,IMo),e(T_,qMo),e(z,NMo),e(z,M_),e(M_,Lle),e(Lle,jMo),e(M_,DMo),e(M_,lN),e(lN,GMo),e(M_,OMo),e(z,VMo),e(z,E_),e(E_,xle),e(xle,XMo),e(E_,zMo),e(E_,iN),e(iN,QMo),e(E_,WMo),e(z,HMo),e(z,C_),e(C_,$le),e($le,UMo),e(C_,JMo),e(C_,dN),e(dN,YMo),e(C_,KMo),e(z,ZMo),e(z,w_),e(w_,kle),e(kle,e4o),e(w_,o4o),e(w_,cN),e(cN,r4o),e(w_,t4o),e(z,a4o),e(z,A_),e(A_,Sle),e(Sle,n4o),e(A_,s4o),e(A_,mN),e(mN,l4o),e(A_,i4o),e(z,d4o),e(z,y_),e(y_,Rle),e(Rle,c4o),e(y_,m4o),e(y_,fN),e(fN,f4o),e(y_,g4o),e(z,h4o),e(z,L_),e(L_,Ble),e(Ble,u4o),e(L_,p4o),e(L_,gN),e(gN,_4o),e(L_,b4o),e(z,F4o),e(z,x_),e(x_,Ple),e(Ple,v4o),e(x_,T4o),e(x_,hN),e(hN,M4o),e(x_,E4o),e(z,C4o),e(z,$_),e($_,Ile),e(Ile,w4o),e($_,A4o),e($_,uN),e(uN,y4o),e($_,L4o),e(z,x4o),e(z,k_),e(k_,qle),e(qle,$4o),e(k_,k4o),e(k_,pN),e(pN,S4o),e(k_,R4o),e(z,B4o),e(z,S_),e(S_,Nle),e(Nle,P4o),e(S_,I4o),e(S_,_N),e(_N,q4o),e(S_,N4o),e(z,j4o),e(z,R_),e(R_,jle),e(jle,D4o),e(R_,G4o),e(R_,bN),e(bN,O4o),e(R_,V4o),e(z,X4o),e(z,B_),e(B_,Dle),e(Dle,z4o),e(B_,Q4o),e(B_,FN),e(FN,W4o),e(B_,H4o),e(z,U4o),e(z,P_),e(P_,Gle),e(Gle,J4o),e(P_,Y4o),e(P_,vN),e(vN,K4o),e(P_,Z4o),e(z,eEo),e(z,I_),e(I_,Ole),e(Ole,oEo),e(I_,rEo),e(I_,TN),e(TN,tEo),e(I_,aEo),e(z,nEo),e(z,q_),e(q_,Vle),e(Vle,sEo),e(q_,lEo),e(q_,MN),e(MN,iEo),e(q_,dEo),e(z,cEo),e(z,N_),e(N_,Xle),e(Xle,mEo),e(N_,fEo),e(N_,EN),e(EN,gEo),e(N_,hEo),e(z,uEo),e(z,j_),e(j_,zle),e(zle,pEo),e(j_,_Eo),e(j_,CN),e(CN,bEo),e(j_,FEo),e(z,vEo),e(z,D_),e(D_,Qle),e(Qle,TEo),e(D_,MEo),e(D_,wN),e(wN,EEo),e(D_,CEo),e(z,wEo),e(z,G_),e(G_,Wle),e(Wle,AEo),e(G_,yEo),e(G_,AN),e(AN,LEo),e(G_,xEo),e(z,$Eo),e(z,O_),e(O_,Hle),e(Hle,kEo),e(O_,SEo),e(O_,yN),e(yN,REo),e(O_,BEo),e(z,PEo),e(z,V_),e(V_,Ule),e(Ule,IEo),e(V_,qEo),e(V_,LN),e(LN,NEo),e(V_,jEo),e(z,DEo),e(z,X_),e(X_,Jle),e(Jle,GEo),e(X_,OEo),e(X_,xN),e(xN,VEo),e(X_,XEo),e(z,zEo),e(z,z_),e(z_,Yle),e(Yle,QEo),e(z_,WEo),e(z_,$N),e($N,HEo),e(z_,UEo),e(z,JEo),e(z,Q_),e(Q_,Kle),e(Kle,YEo),e(Q_,KEo),e(Q_,kN),e(kN,ZEo),e(Q_,e5o),e(z,o5o),e(z,W_),e(W_,Zle),e(Zle,r5o),e(W_,t5o),e(W_,SN),e(SN,a5o),e(W_,n5o),e(z,s5o),e(z,H_),e(H_,eie),e(eie,l5o),e(H_,i5o),e(H_,RN),e(RN,d5o),e(H_,c5o),e(z,m5o),e(z,U_),e(U_,oie),e(oie,f5o),e(U_,g5o),e(U_,BN),e(BN,h5o),e(U_,u5o),e(z,p5o),e(z,J_),e(J_,rie),e(rie,_5o),e(J_,b5o),e(J_,PN),e(PN,F5o),e(J_,v5o),e(z,T5o),e(z,Y_),e(Y_,tie),e(tie,M5o),e(Y_,E5o),e(Y_,IN),e(IN,C5o),e(Y_,w5o),e(z,A5o),e(z,K_),e(K_,aie),e(aie,y5o),e(K_,L5o),e(K_,qN),e(qN,x5o),e(K_,$5o),e(z,k5o),e(z,Z_),e(Z_,nie),e(nie,S5o),e(Z_,R5o),e(Z_,NN),e(NN,B5o),e(Z_,P5o),e(z,I5o),e(z,eb),e(eb,sie),e(sie,q5o),e(eb,N5o),e(eb,jN),e(jN,j5o),e(eb,D5o),e(z,G5o),e(z,ob),e(ob,lie),e(lie,O5o),e(ob,V5o),e(ob,DN),e(DN,X5o),e(ob,z5o),e(Je,Q5o),e(Je,rb),e(rb,W5o),e(rb,iie),e(iie,H5o),e(rb,U5o),e(rb,die),e(die,J5o),e(Je,Y5o),M(tb,Je,null),b(m,MPe,_),b(m,$i,_),e($i,ab),e(ab,cie),M(Ly,cie,null),e($i,K5o),e($i,mie),e(mie,Z5o),b(m,EPe,_),b(m,ko,_),M(xy,ko,null),e(ko,eCo),e(ko,ki),e(ki,oCo),e(ki,GN),e(GN,rCo),e(ki,tCo),e(ki,ON),e(ON,aCo),e(ki,nCo),e(ko,sCo),e(ko,$y),e($y,lCo),e($y,fie),e(fie,iCo),e($y,dCo),e(ko,cCo),e(ko,at),M(ky,at,null),e(at,mCo),e(at,gie),e(gie,fCo),e(at,gCo),e(at,Si),e(Si,hCo),e(Si,hie),e(hie,uCo),e(Si,pCo),e(Si,VN),e(VN,_Co),e(Si,bCo),e(at,FCo),M(nb,at,null),e(ko,vCo),e(ko,Ye),M(Sy,Ye,null),e(Ye,TCo),e(Ye,uie),e(uie,MCo),e(Ye,ECo),e(Ye,xa),e(xa,CCo),e(xa,pie),e(pie,wCo),e(xa,ACo),e(xa,_ie),e(_ie,yCo),e(xa,LCo),e(xa,bie),e(bie,xCo),e(xa,$Co),e(Ye,kCo),e(Ye,Q),e(Q,sb),e(sb,Fie),e(Fie,SCo),e(sb,RCo),e(sb,XN),e(XN,BCo),e(sb,PCo),e(Q,ICo),e(Q,lb),e(lb,vie),e(vie,qCo),e(lb,NCo),e(lb,zN),e(zN,jCo),e(lb,DCo),e(Q,GCo),e(Q,ib),e(ib,Tie),e(Tie,OCo),e(ib,VCo),e(ib,QN),e(QN,XCo),e(ib,zCo),e(Q,QCo),e(Q,db),e(db,Mie),e(Mie,WCo),e(db,HCo),e(db,WN),e(WN,UCo),e(db,JCo),e(Q,YCo),e(Q,cb),e(cb,Eie),e(Eie,KCo),e(cb,ZCo),e(cb,HN),e(HN,e3o),e(cb,o3o),e(Q,r3o),e(Q,mb),e(mb,Cie),e(Cie,t3o),e(mb,a3o),e(mb,UN),e(UN,n3o),e(mb,s3o),e(Q,l3o),e(Q,fb),e(fb,wie),e(wie,i3o),e(fb,d3o),e(fb,JN),e(JN,c3o),e(fb,m3o),e(Q,f3o),e(Q,gb),e(gb,Aie),e(Aie,g3o),e(gb,h3o),e(gb,YN),e(YN,u3o),e(gb,p3o),e(Q,_3o),e(Q,hb),e(hb,yie),e(yie,b3o),e(hb,F3o),e(hb,KN),e(KN,v3o),e(hb,T3o),e(Q,M3o),e(Q,ub),e(ub,Lie),e(Lie,E3o),e(ub,C3o),e(ub,ZN),e(ZN,w3o),e(ub,A3o),e(Q,y3o),e(Q,pb),e(pb,xie),e(xie,L3o),e(pb,x3o),e(pb,ej),e(ej,$3o),e(pb,k3o),e(Q,S3o),e(Q,_b),e(_b,$ie),e($ie,R3o),e(_b,B3o),e(_b,oj),e(oj,P3o),e(_b,I3o),e(Q,q3o),e(Q,bb),e(bb,kie),e(kie,N3o),e(bb,j3o),e(bb,rj),e(rj,D3o),e(bb,G3o),e(Q,O3o),e(Q,Fb),e(Fb,Sie),e(Sie,V3o),e(Fb,X3o),e(Fb,tj),e(tj,z3o),e(Fb,Q3o),e(Q,W3o),e(Q,vb),e(vb,Rie),e(Rie,H3o),e(vb,U3o),e(vb,aj),e(aj,J3o),e(vb,Y3o),e(Q,K3o),e(Q,Tb),e(Tb,Bie),e(Bie,Z3o),e(Tb,ewo),e(Tb,nj),e(nj,owo),e(Tb,rwo),e(Q,two),e(Q,Mb),e(Mb,Pie),e(Pie,awo),e(Mb,nwo),e(Mb,sj),e(sj,swo),e(Mb,lwo),e(Q,iwo),e(Q,Eb),e(Eb,Iie),e(Iie,dwo),e(Eb,cwo),e(Eb,lj),e(lj,mwo),e(Eb,fwo),e(Q,gwo),e(Q,Cb),e(Cb,qie),e(qie,hwo),e(Cb,uwo),e(Cb,ij),e(ij,pwo),e(Cb,_wo),e(Q,bwo),e(Q,wb),e(wb,Nie),e(Nie,Fwo),e(wb,vwo),e(wb,dj),e(dj,Two),e(wb,Mwo),e(Q,Ewo),e(Q,Ab),e(Ab,jie),e(jie,Cwo),e(Ab,wwo),e(Ab,cj),e(cj,Awo),e(Ab,ywo),e(Q,Lwo),e(Q,yb),e(yb,Die),e(Die,xwo),e(yb,$wo),e(yb,mj),e(mj,kwo),e(yb,Swo),e(Q,Rwo),e(Q,Lb),e(Lb,Gie),e(Gie,Bwo),e(Lb,Pwo),e(Lb,fj),e(fj,Iwo),e(Lb,qwo),e(Q,Nwo),e(Q,xb),e(xb,Oie),e(Oie,jwo),e(xb,Dwo),e(xb,gj),e(gj,Gwo),e(xb,Owo),e(Q,Vwo),e(Q,$b),e($b,Vie),e(Vie,Xwo),e($b,zwo),e($b,hj),e(hj,Qwo),e($b,Wwo),e(Q,Hwo),e(Q,kb),e(kb,Xie),e(Xie,Uwo),e(kb,Jwo),e(kb,uj),e(uj,Ywo),e(kb,Kwo),e(Q,Zwo),e(Q,Sb),e(Sb,zie),e(zie,eAo),e(Sb,oAo),e(Sb,pj),e(pj,rAo),e(Sb,tAo),e(Q,aAo),e(Q,Rb),e(Rb,Qie),e(Qie,nAo),e(Rb,sAo),e(Rb,_j),e(_j,lAo),e(Rb,iAo),e(Q,dAo),e(Q,Bb),e(Bb,Wie),e(Wie,cAo),e(Bb,mAo),e(Bb,bj),e(bj,fAo),e(Bb,gAo),e(Q,hAo),e(Q,Pb),e(Pb,Hie),e(Hie,uAo),e(Pb,pAo),e(Pb,Fj),e(Fj,_Ao),e(Pb,bAo),e(Q,FAo),e(Q,Ib),e(Ib,Uie),e(Uie,vAo),e(Ib,TAo),e(Ib,Jie),e(Jie,MAo),e(Ib,EAo),e(Q,CAo),e(Q,qb),e(qb,Yie),e(Yie,wAo),e(qb,AAo),e(qb,vj),e(vj,yAo),e(qb,LAo),e(Q,xAo),e(Q,Nb),e(Nb,Kie),e(Kie,$Ao),e(Nb,kAo),e(Nb,Tj),e(Tj,SAo),e(Nb,RAo),e(Q,BAo),e(Q,jb),e(jb,Zie),e(Zie,PAo),e(jb,IAo),e(jb,Mj),e(Mj,qAo),e(jb,NAo),e(Q,jAo),e(Q,Db),e(Db,ede),e(ede,DAo),e(Db,GAo),e(Db,Ej),e(Ej,OAo),e(Db,VAo),e(Ye,XAo),e(Ye,Gb),e(Gb,zAo),e(Gb,ode),e(ode,QAo),e(Gb,WAo),e(Gb,rde),e(rde,HAo),e(Ye,UAo),M(Ob,Ye,null),b(m,CPe,_),b(m,Ri,_),e(Ri,Vb),e(Vb,tde),M(Ry,tde,null),e(Ri,JAo),e(Ri,ade),e(ade,YAo),b(m,wPe,_),b(m,So,_),M(By,So,null),e(So,KAo),e(So,Bi),e(Bi,ZAo),e(Bi,Cj),e(Cj,e0o),e(Bi,o0o),e(Bi,wj),e(wj,r0o),e(Bi,t0o),e(So,a0o),e(So,Py),e(Py,n0o),e(Py,nde),e(nde,s0o),e(Py,l0o),e(So,i0o),e(So,nt),M(Iy,nt,null),e(nt,d0o),e(nt,sde),e(sde,c0o),e(nt,m0o),e(nt,Pi),e(Pi,f0o),e(Pi,lde),e(lde,g0o),e(Pi,h0o),e(Pi,Aj),e(Aj,u0o),e(Pi,p0o),e(nt,_0o),M(Xb,nt,null),e(So,b0o),e(So,Ke),M(qy,Ke,null),e(Ke,F0o),e(Ke,ide),e(ide,v0o),e(Ke,T0o),e(Ke,$a),e($a,M0o),e($a,dde),e(dde,E0o),e($a,C0o),e($a,cde),e(cde,w0o),e($a,A0o),e($a,mde),e(mde,y0o),e($a,L0o),e(Ke,x0o),e(Ke,he),e(he,zb),e(zb,fde),e(fde,$0o),e(zb,k0o),e(zb,yj),e(yj,S0o),e(zb,R0o),e(he,B0o),e(he,Qb),e(Qb,gde),e(gde,P0o),e(Qb,I0o),e(Qb,Lj),e(Lj,q0o),e(Qb,N0o),e(he,j0o),e(he,Wb),e(Wb,hde),e(hde,D0o),e(Wb,G0o),e(Wb,xj),e(xj,O0o),e(Wb,V0o),e(he,X0o),e(he,Hb),e(Hb,ude),e(ude,z0o),e(Hb,Q0o),e(Hb,$j),e($j,W0o),e(Hb,H0o),e(he,U0o),e(he,Ub),e(Ub,pde),e(pde,J0o),e(Ub,Y0o),e(Ub,kj),e(kj,K0o),e(Ub,Z0o),e(he,e6o),e(he,Jb),e(Jb,_de),e(_de,o6o),e(Jb,r6o),e(Jb,Sj),e(Sj,t6o),e(Jb,a6o),e(he,n6o),e(he,Yb),e(Yb,bde),e(bde,s6o),e(Yb,l6o),e(Yb,Rj),e(Rj,i6o),e(Yb,d6o),e(he,c6o),e(he,Kb),e(Kb,Fde),e(Fde,m6o),e(Kb,f6o),e(Kb,Bj),e(Bj,g6o),e(Kb,h6o),e(he,u6o),e(he,Zb),e(Zb,vde),e(vde,p6o),e(Zb,_6o),e(Zb,Pj),e(Pj,b6o),e(Zb,F6o),e(he,v6o),e(he,e2),e(e2,Tde),e(Tde,T6o),e(e2,M6o),e(e2,Ij),e(Ij,E6o),e(e2,C6o),e(he,w6o),e(he,o2),e(o2,Mde),e(Mde,A6o),e(o2,y6o),e(o2,qj),e(qj,L6o),e(o2,x6o),e(he,$6o),e(he,r2),e(r2,Ede),e(Ede,k6o),e(r2,S6o),e(r2,Nj),e(Nj,R6o),e(r2,B6o),e(he,P6o),e(he,t2),e(t2,Cde),e(Cde,I6o),e(t2,q6o),e(t2,jj),e(jj,N6o),e(t2,j6o),e(he,D6o),e(he,a2),e(a2,wde),e(wde,G6o),e(a2,O6o),e(a2,Dj),e(Dj,V6o),e(a2,X6o),e(he,z6o),e(he,n2),e(n2,Ade),e(Ade,Q6o),e(n2,W6o),e(n2,Gj),e(Gj,H6o),e(n2,U6o),e(he,J6o),e(he,s2),e(s2,yde),e(yde,Y6o),e(s2,K6o),e(s2,Oj),e(Oj,Z6o),e(s2,eyo),e(he,oyo),e(he,l2),e(l2,Lde),e(Lde,ryo),e(l2,tyo),e(l2,Vj),e(Vj,ayo),e(l2,nyo),e(Ke,syo),e(Ke,i2),e(i2,lyo),e(i2,xde),e(xde,iyo),e(i2,dyo),e(i2,$de),e($de,cyo),e(Ke,myo),M(d2,Ke,null),b(m,APe,_),b(m,Ii,_),e(Ii,c2),e(c2,kde),M(Ny,kde,null),e(Ii,fyo),e(Ii,Sde),e(Sde,gyo),b(m,yPe,_),b(m,Ro,_),M(jy,Ro,null),e(Ro,hyo),e(Ro,qi),e(qi,uyo),e(qi,Xj),e(Xj,pyo),e(qi,_yo),e(qi,zj),e(zj,byo),e(qi,Fyo),e(Ro,vyo),e(Ro,Dy),e(Dy,Tyo),e(Dy,Rde),e(Rde,Myo),e(Dy,Eyo),e(Ro,Cyo),e(Ro,st),M(Gy,st,null),e(st,wyo),e(st,Bde),e(Bde,Ayo),e(st,yyo),e(st,Ni),e(Ni,Lyo),e(Ni,Pde),e(Pde,xyo),e(Ni,$yo),e(Ni,Qj),e(Qj,kyo),e(Ni,Syo),e(st,Ryo),M(m2,st,null),e(Ro,Byo),e(Ro,Ze),M(Oy,Ze,null),e(Ze,Pyo),e(Ze,Ide),e(Ide,Iyo),e(Ze,qyo),e(Ze,ka),e(ka,Nyo),e(ka,qde),e(qde,jyo),e(ka,Dyo),e(ka,Nde),e(Nde,Gyo),e(ka,Oyo),e(ka,jde),e(jde,Vyo),e(ka,Xyo),e(Ze,zyo),e(Ze,q),e(q,f2),e(f2,Dde),e(Dde,Qyo),e(f2,Wyo),e(f2,Wj),e(Wj,Hyo),e(f2,Uyo),e(q,Jyo),e(q,g2),e(g2,Gde),e(Gde,Yyo),e(g2,Kyo),e(g2,Hj),e(Hj,Zyo),e(g2,eLo),e(q,oLo),e(q,h2),e(h2,Ode),e(Ode,rLo),e(h2,tLo),e(h2,Uj),e(Uj,aLo),e(h2,nLo),e(q,sLo),e(q,u2),e(u2,Vde),e(Vde,lLo),e(u2,iLo),e(u2,Jj),e(Jj,dLo),e(u2,cLo),e(q,mLo),e(q,p2),e(p2,Xde),e(Xde,fLo),e(p2,gLo),e(p2,Yj),e(Yj,hLo),e(p2,uLo),e(q,pLo),e(q,_2),e(_2,zde),e(zde,_Lo),e(_2,bLo),e(_2,Kj),e(Kj,FLo),e(_2,vLo),e(q,TLo),e(q,b2),e(b2,Qde),e(Qde,MLo),e(b2,ELo),e(b2,Zj),e(Zj,CLo),e(b2,wLo),e(q,ALo),e(q,F2),e(F2,Wde),e(Wde,yLo),e(F2,LLo),e(F2,eD),e(eD,xLo),e(F2,$Lo),e(q,kLo),e(q,v2),e(v2,Hde),e(Hde,SLo),e(v2,RLo),e(v2,oD),e(oD,BLo),e(v2,PLo),e(q,ILo),e(q,T2),e(T2,Ude),e(Ude,qLo),e(T2,NLo),e(T2,rD),e(rD,jLo),e(T2,DLo),e(q,GLo),e(q,M2),e(M2,Jde),e(Jde,OLo),e(M2,VLo),e(M2,tD),e(tD,XLo),e(M2,zLo),e(q,QLo),e(q,E2),e(E2,Yde),e(Yde,WLo),e(E2,HLo),e(E2,aD),e(aD,ULo),e(E2,JLo),e(q,YLo),e(q,C2),e(C2,Kde),e(Kde,KLo),e(C2,ZLo),e(C2,nD),e(nD,e8o),e(C2,o8o),e(q,r8o),e(q,w2),e(w2,Zde),e(Zde,t8o),e(w2,a8o),e(w2,sD),e(sD,n8o),e(w2,s8o),e(q,l8o),e(q,A2),e(A2,ece),e(ece,i8o),e(A2,d8o),e(A2,lD),e(lD,c8o),e(A2,m8o),e(q,f8o),e(q,y2),e(y2,oce),e(oce,g8o),e(y2,h8o),e(y2,iD),e(iD,u8o),e(y2,p8o),e(q,_8o),e(q,L2),e(L2,rce),e(rce,b8o),e(L2,F8o),e(L2,dD),e(dD,v8o),e(L2,T8o),e(q,M8o),e(q,x2),e(x2,tce),e(tce,E8o),e(x2,C8o),e(x2,cD),e(cD,w8o),e(x2,A8o),e(q,y8o),e(q,$2),e($2,ace),e(ace,L8o),e($2,x8o),e($2,mD),e(mD,$8o),e($2,k8o),e(q,S8o),e(q,k2),e(k2,nce),e(nce,R8o),e(k2,B8o),e(k2,fD),e(fD,P8o),e(k2,I8o),e(q,q8o),e(q,S2),e(S2,sce),e(sce,N8o),e(S2,j8o),e(S2,gD),e(gD,D8o),e(S2,G8o),e(q,O8o),e(q,R2),e(R2,lce),e(lce,V8o),e(R2,X8o),e(R2,hD),e(hD,z8o),e(R2,Q8o),e(q,W8o),e(q,B2),e(B2,ice),e(ice,H8o),e(B2,U8o),e(B2,uD),e(uD,J8o),e(B2,Y8o),e(q,K8o),e(q,P2),e(P2,dce),e(dce,Z8o),e(P2,exo),e(P2,pD),e(pD,oxo),e(P2,rxo),e(q,txo),e(q,I2),e(I2,cce),e(cce,axo),e(I2,nxo),e(I2,_D),e(_D,sxo),e(I2,lxo),e(q,ixo),e(q,q2),e(q2,mce),e(mce,dxo),e(q2,cxo),e(q2,bD),e(bD,mxo),e(q2,fxo),e(q,gxo),e(q,N2),e(N2,fce),e(fce,hxo),e(N2,uxo),e(N2,FD),e(FD,pxo),e(N2,_xo),e(q,bxo),e(q,j2),e(j2,gce),e(gce,Fxo),e(j2,vxo),e(j2,vD),e(vD,Txo),e(j2,Mxo),e(q,Exo),e(q,D2),e(D2,hce),e(hce,Cxo),e(D2,wxo),e(D2,TD),e(TD,Axo),e(D2,yxo),e(q,Lxo),e(q,G2),e(G2,uce),e(uce,xxo),e(G2,$xo),e(G2,MD),e(MD,kxo),e(G2,Sxo),e(q,Rxo),e(q,O2),e(O2,pce),e(pce,Bxo),e(O2,Pxo),e(O2,ED),e(ED,Ixo),e(O2,qxo),e(q,Nxo),e(q,V2),e(V2,_ce),e(_ce,jxo),e(V2,Dxo),e(V2,CD),e(CD,Gxo),e(V2,Oxo),e(q,Vxo),e(q,X2),e(X2,bce),e(bce,Xxo),e(X2,zxo),e(X2,wD),e(wD,Qxo),e(X2,Wxo),e(q,Hxo),e(q,z2),e(z2,Fce),e(Fce,Uxo),e(z2,Jxo),e(z2,AD),e(AD,Yxo),e(z2,Kxo),e(q,Zxo),e(q,Q2),e(Q2,vce),e(vce,e7o),e(Q2,o7o),e(Q2,yD),e(yD,r7o),e(Q2,t7o),e(q,a7o),e(q,W2),e(W2,Tce),e(Tce,n7o),e(W2,s7o),e(W2,LD),e(LD,l7o),e(W2,i7o),e(q,d7o),e(q,H2),e(H2,Mce),e(Mce,c7o),e(H2,m7o),e(H2,xD),e(xD,f7o),e(H2,g7o),e(q,h7o),e(q,U2),e(U2,Ece),e(Ece,u7o),e(U2,p7o),e(U2,$D),e($D,_7o),e(U2,b7o),e(q,F7o),e(q,J2),e(J2,Cce),e(Cce,v7o),e(J2,T7o),e(J2,kD),e(kD,M7o),e(J2,E7o),e(q,C7o),e(q,Y2),e(Y2,wce),e(wce,w7o),e(Y2,A7o),e(Y2,SD),e(SD,y7o),e(Y2,L7o),e(q,x7o),e(q,K2),e(K2,Ace),e(Ace,$7o),e(K2,k7o),e(K2,RD),e(RD,S7o),e(K2,R7o),e(q,B7o),e(q,Z2),e(Z2,yce),e(yce,P7o),e(Z2,I7o),e(Z2,BD),e(BD,q7o),e(Z2,N7o),e(q,j7o),e(q,eF),e(eF,Lce),e(Lce,D7o),e(eF,G7o),e(eF,PD),e(PD,O7o),e(eF,V7o),e(q,X7o),e(q,oF),e(oF,xce),e(xce,z7o),e(oF,Q7o),e(oF,ID),e(ID,W7o),e(oF,H7o),e(q,U7o),e(q,rF),e(rF,$ce),e($ce,J7o),e(rF,Y7o),e(rF,qD),e(qD,K7o),e(rF,Z7o),e(q,e9o),e(q,tF),e(tF,kce),e(kce,o9o),e(tF,r9o),e(tF,ND),e(ND,t9o),e(tF,a9o),e(q,n9o),e(q,aF),e(aF,Sce),e(Sce,s9o),e(aF,l9o),e(aF,jD),e(jD,i9o),e(aF,d9o),e(Ze,c9o),e(Ze,nF),e(nF,m9o),e(nF,Rce),e(Rce,f9o),e(nF,g9o),e(nF,Bce),e(Bce,h9o),e(Ze,u9o),M(sF,Ze,null),b(m,LPe,_),b(m,ji,_),e(ji,lF),e(lF,Pce),M(Vy,Pce,null),e(ji,p9o),e(ji,Ice),e(Ice,_9o),b(m,xPe,_),b(m,Bo,_),M(Xy,Bo,null),e(Bo,b9o),e(Bo,Di),e(Di,F9o),e(Di,DD),e(DD,v9o),e(Di,T9o),e(Di,GD),e(GD,M9o),e(Di,E9o),e(Bo,C9o),e(Bo,zy),e(zy,w9o),e(zy,qce),e(qce,A9o),e(zy,y9o),e(Bo,L9o),e(Bo,lt),M(Qy,lt,null),e(lt,x9o),e(lt,Nce),e(Nce,$9o),e(lt,k9o),e(lt,Gi),e(Gi,S9o),e(Gi,jce),e(jce,R9o),e(Gi,B9o),e(Gi,OD),e(OD,P9o),e(Gi,I9o),e(lt,q9o),M(iF,lt,null),e(Bo,N9o),e(Bo,eo),M(Wy,eo,null),e(eo,j9o),e(eo,Dce),e(Dce,D9o),e(eo,G9o),e(eo,Sa),e(Sa,O9o),e(Sa,Gce),e(Gce,V9o),e(Sa,X9o),e(Sa,Oce),e(Oce,z9o),e(Sa,Q9o),e(Sa,Vce),e(Vce,W9o),e(Sa,H9o),e(eo,U9o),e(eo,Y),e(Y,dF),e(dF,Xce),e(Xce,J9o),e(dF,Y9o),e(dF,VD),e(VD,K9o),e(dF,Z9o),e(Y,e$o),e(Y,cF),e(cF,zce),e(zce,o$o),e(cF,r$o),e(cF,XD),e(XD,t$o),e(cF,a$o),e(Y,n$o),e(Y,mF),e(mF,Qce),e(Qce,s$o),e(mF,l$o),e(mF,zD),e(zD,i$o),e(mF,d$o),e(Y,c$o),e(Y,fF),e(fF,Wce),e(Wce,m$o),e(fF,f$o),e(fF,QD),e(QD,g$o),e(fF,h$o),e(Y,u$o),e(Y,gF),e(gF,Hce),e(Hce,p$o),e(gF,_$o),e(gF,WD),e(WD,b$o),e(gF,F$o),e(Y,v$o),e(Y,hF),e(hF,Uce),e(Uce,T$o),e(hF,M$o),e(hF,HD),e(HD,E$o),e(hF,C$o),e(Y,w$o),e(Y,uF),e(uF,Jce),e(Jce,A$o),e(uF,y$o),e(uF,UD),e(UD,L$o),e(uF,x$o),e(Y,$$o),e(Y,pF),e(pF,Yce),e(Yce,k$o),e(pF,S$o),e(pF,JD),e(JD,R$o),e(pF,B$o),e(Y,P$o),e(Y,_F),e(_F,Kce),e(Kce,I$o),e(_F,q$o),e(_F,YD),e(YD,N$o),e(_F,j$o),e(Y,D$o),e(Y,bF),e(bF,Zce),e(Zce,G$o),e(bF,O$o),e(bF,KD),e(KD,V$o),e(bF,X$o),e(Y,z$o),e(Y,FF),e(FF,eme),e(eme,Q$o),e(FF,W$o),e(FF,ZD),e(ZD,H$o),e(FF,U$o),e(Y,J$o),e(Y,vF),e(vF,ome),e(ome,Y$o),e(vF,K$o),e(vF,eG),e(eG,Z$o),e(vF,eko),e(Y,oko),e(Y,TF),e(TF,rme),e(rme,rko),e(TF,tko),e(TF,oG),e(oG,ako),e(TF,nko),e(Y,sko),e(Y,MF),e(MF,tme),e(tme,lko),e(MF,iko),e(MF,rG),e(rG,dko),e(MF,cko),e(Y,mko),e(Y,EF),e(EF,ame),e(ame,fko),e(EF,gko),e(EF,tG),e(tG,hko),e(EF,uko),e(Y,pko),e(Y,CF),e(CF,nme),e(nme,_ko),e(CF,bko),e(CF,aG),e(aG,Fko),e(CF,vko),e(Y,Tko),e(Y,wF),e(wF,sme),e(sme,Mko),e(wF,Eko),e(wF,nG),e(nG,Cko),e(wF,wko),e(Y,Ako),e(Y,AF),e(AF,lme),e(lme,yko),e(AF,Lko),e(AF,sG),e(sG,xko),e(AF,$ko),e(Y,kko),e(Y,yF),e(yF,ime),e(ime,Sko),e(yF,Rko),e(yF,lG),e(lG,Bko),e(yF,Pko),e(Y,Iko),e(Y,LF),e(LF,dme),e(dme,qko),e(LF,Nko),e(LF,iG),e(iG,jko),e(LF,Dko),e(Y,Gko),e(Y,xF),e(xF,cme),e(cme,Oko),e(xF,Vko),e(xF,dG),e(dG,Xko),e(xF,zko),e(Y,Qko),e(Y,$F),e($F,mme),e(mme,Wko),e($F,Hko),e($F,cG),e(cG,Uko),e($F,Jko),e(Y,Yko),e(Y,kF),e(kF,fme),e(fme,Kko),e(kF,Zko),e(kF,mG),e(mG,eSo),e(kF,oSo),e(Y,rSo),e(Y,SF),e(SF,gme),e(gme,tSo),e(SF,aSo),e(SF,fG),e(fG,nSo),e(SF,sSo),e(Y,lSo),e(Y,RF),e(RF,hme),e(hme,iSo),e(RF,dSo),e(RF,gG),e(gG,cSo),e(RF,mSo),e(Y,fSo),e(Y,BF),e(BF,ume),e(ume,gSo),e(BF,hSo),e(BF,hG),e(hG,uSo),e(BF,pSo),e(Y,_So),e(Y,PF),e(PF,pme),e(pme,bSo),e(PF,FSo),e(PF,uG),e(uG,vSo),e(PF,TSo),e(Y,MSo),e(Y,IF),e(IF,_me),e(_me,ESo),e(IF,CSo),e(IF,pG),e(pG,wSo),e(IF,ASo),e(eo,ySo),e(eo,qF),e(qF,LSo),e(qF,bme),e(bme,xSo),e(qF,$So),e(qF,Fme),e(Fme,kSo),e(eo,SSo),M(NF,eo,null),b(m,$Pe,_),b(m,Oi,_),e(Oi,jF),e(jF,vme),M(Hy,vme,null),e(Oi,RSo),e(Oi,Tme),e(Tme,BSo),b(m,kPe,_),b(m,Po,_),M(Uy,Po,null),e(Po,PSo),e(Po,Vi),e(Vi,ISo),e(Vi,_G),e(_G,qSo),e(Vi,NSo),e(Vi,bG),e(bG,jSo),e(Vi,DSo),e(Po,GSo),e(Po,Jy),e(Jy,OSo),e(Jy,Mme),e(Mme,VSo),e(Jy,XSo),e(Po,zSo),e(Po,it),M(Yy,it,null),e(it,QSo),e(it,Eme),e(Eme,WSo),e(it,HSo),e(it,Xi),e(Xi,USo),e(Xi,Cme),e(Cme,JSo),e(Xi,YSo),e(Xi,FG),e(FG,KSo),e(Xi,ZSo),e(it,eRo),M(DF,it,null),e(Po,oRo),e(Po,oo),M(Ky,oo,null),e(oo,rRo),e(oo,wme),e(wme,tRo),e(oo,aRo),e(oo,Ra),e(Ra,nRo),e(Ra,Ame),e(Ame,sRo),e(Ra,lRo),e(Ra,yme),e(yme,iRo),e(Ra,dRo),e(Ra,Lme),e(Lme,cRo),e(Ra,mRo),e(oo,fRo),e(oo,Yr),e(Yr,GF),e(GF,xme),e(xme,gRo),e(GF,hRo),e(GF,vG),e(vG,uRo),e(GF,pRo),e(Yr,_Ro),e(Yr,OF),e(OF,$me),e($me,bRo),e(OF,FRo),e(OF,TG),e(TG,vRo),e(OF,TRo),e(Yr,MRo),e(Yr,VF),e(VF,kme),e(kme,ERo),e(VF,CRo),e(VF,MG),e(MG,wRo),e(VF,ARo),e(Yr,yRo),e(Yr,XF),e(XF,Sme),e(Sme,LRo),e(XF,xRo),e(XF,EG),e(EG,$Ro),e(XF,kRo),e(Yr,SRo),e(Yr,zF),e(zF,Rme),e(Rme,RRo),e(zF,BRo),e(zF,CG),e(CG,PRo),e(zF,IRo),e(oo,qRo),e(oo,QF),e(QF,NRo),e(QF,Bme),e(Bme,jRo),e(QF,DRo),e(QF,Pme),e(Pme,GRo),e(oo,ORo),M(WF,oo,null),b(m,SPe,_),b(m,zi,_),e(zi,HF),e(HF,Ime),M(Zy,Ime,null),e(zi,VRo),e(zi,qme),e(qme,XRo),b(m,RPe,_),b(m,Io,_),M(eL,Io,null),e(Io,zRo),e(Io,Qi),e(Qi,QRo),e(Qi,wG),e(wG,WRo),e(Qi,HRo),e(Qi,AG),e(AG,URo),e(Qi,JRo),e(Io,YRo),e(Io,oL),e(oL,KRo),e(oL,Nme),e(Nme,ZRo),e(oL,eBo),e(Io,oBo),e(Io,dt),M(rL,dt,null),e(dt,rBo),e(dt,jme),e(jme,tBo),e(dt,aBo),e(dt,Wi),e(Wi,nBo),e(Wi,Dme),e(Dme,sBo),e(Wi,lBo),e(Wi,yG),e(yG,iBo),e(Wi,dBo),e(dt,cBo),M(UF,dt,null),e(Io,mBo),e(Io,ro),M(tL,ro,null),e(ro,fBo),e(ro,Gme),e(Gme,gBo),e(ro,hBo),e(ro,Ba),e(Ba,uBo),e(Ba,Ome),e(Ome,pBo),e(Ba,_Bo),e(Ba,Vme),e(Vme,bBo),e(Ba,FBo),e(Ba,Xme),e(Xme,vBo),e(Ba,TBo),e(ro,MBo),e(ro,U),e(U,JF),e(JF,zme),e(zme,EBo),e(JF,CBo),e(JF,LG),e(LG,wBo),e(JF,ABo),e(U,yBo),e(U,YF),e(YF,Qme),e(Qme,LBo),e(YF,xBo),e(YF,xG),e(xG,$Bo),e(YF,kBo),e(U,SBo),e(U,KF),e(KF,Wme),e(Wme,RBo),e(KF,BBo),e(KF,$G),e($G,PBo),e(KF,IBo),e(U,qBo),e(U,ZF),e(ZF,Hme),e(Hme,NBo),e(ZF,jBo),e(ZF,kG),e(kG,DBo),e(ZF,GBo),e(U,OBo),e(U,ev),e(ev,Ume),e(Ume,VBo),e(ev,XBo),e(ev,SG),e(SG,zBo),e(ev,QBo),e(U,WBo),e(U,ov),e(ov,Jme),e(Jme,HBo),e(ov,UBo),e(ov,RG),e(RG,JBo),e(ov,YBo),e(U,KBo),e(U,rv),e(rv,Yme),e(Yme,ZBo),e(rv,ePo),e(rv,BG),e(BG,oPo),e(rv,rPo),e(U,tPo),e(U,tv),e(tv,Kme),e(Kme,aPo),e(tv,nPo),e(tv,PG),e(PG,sPo),e(tv,lPo),e(U,iPo),e(U,av),e(av,Zme),e(Zme,dPo),e(av,cPo),e(av,IG),e(IG,mPo),e(av,fPo),e(U,gPo),e(U,nv),e(nv,efe),e(efe,hPo),e(nv,uPo),e(nv,qG),e(qG,pPo),e(nv,_Po),e(U,bPo),e(U,sv),e(sv,ofe),e(ofe,FPo),e(sv,vPo),e(sv,NG),e(NG,TPo),e(sv,MPo),e(U,EPo),e(U,lv),e(lv,rfe),e(rfe,CPo),e(lv,wPo),e(lv,jG),e(jG,APo),e(lv,yPo),e(U,LPo),e(U,iv),e(iv,tfe),e(tfe,xPo),e(iv,$Po),e(iv,DG),e(DG,kPo),e(iv,SPo),e(U,RPo),e(U,dv),e(dv,afe),e(afe,BPo),e(dv,PPo),e(dv,GG),e(GG,IPo),e(dv,qPo),e(U,NPo),e(U,cv),e(cv,nfe),e(nfe,jPo),e(cv,DPo),e(cv,OG),e(OG,GPo),e(cv,OPo),e(U,VPo),e(U,mv),e(mv,sfe),e(sfe,XPo),e(mv,zPo),e(mv,VG),e(VG,QPo),e(mv,WPo),e(U,HPo),e(U,fv),e(fv,lfe),e(lfe,UPo),e(fv,JPo),e(fv,XG),e(XG,YPo),e(fv,KPo),e(U,ZPo),e(U,gv),e(gv,ife),e(ife,eIo),e(gv,oIo),e(gv,zG),e(zG,rIo),e(gv,tIo),e(U,aIo),e(U,hv),e(hv,dfe),e(dfe,nIo),e(hv,sIo),e(hv,QG),e(QG,lIo),e(hv,iIo),e(U,dIo),e(U,uv),e(uv,cfe),e(cfe,cIo),e(uv,mIo),e(uv,WG),e(WG,fIo),e(uv,gIo),e(U,hIo),e(U,pv),e(pv,mfe),e(mfe,uIo),e(pv,pIo),e(pv,HG),e(HG,_Io),e(pv,bIo),e(U,FIo),e(U,_v),e(_v,ffe),e(ffe,vIo),e(_v,TIo),e(_v,UG),e(UG,MIo),e(_v,EIo),e(U,CIo),e(U,bv),e(bv,gfe),e(gfe,wIo),e(bv,AIo),e(bv,JG),e(JG,yIo),e(bv,LIo),e(U,xIo),e(U,Fv),e(Fv,hfe),e(hfe,$Io),e(Fv,kIo),e(Fv,YG),e(YG,SIo),e(Fv,RIo),e(U,BIo),e(U,vv),e(vv,ufe),e(ufe,PIo),e(vv,IIo),e(vv,KG),e(KG,qIo),e(vv,NIo),e(U,jIo),e(U,Tv),e(Tv,pfe),e(pfe,DIo),e(Tv,GIo),e(Tv,ZG),e(ZG,OIo),e(Tv,VIo),e(U,XIo),e(U,Mv),e(Mv,_fe),e(_fe,zIo),e(Mv,QIo),e(Mv,eO),e(eO,WIo),e(Mv,HIo),e(U,UIo),e(U,Ev),e(Ev,bfe),e(bfe,JIo),e(Ev,YIo),e(Ev,oO),e(oO,KIo),e(Ev,ZIo),e(U,eqo),e(U,Cv),e(Cv,Ffe),e(Ffe,oqo),e(Cv,rqo),e(Cv,rO),e(rO,tqo),e(Cv,aqo),e(U,nqo),e(U,wv),e(wv,vfe),e(vfe,sqo),e(wv,lqo),e(wv,tO),e(tO,iqo),e(wv,dqo),e(U,cqo),e(U,Av),e(Av,Tfe),e(Tfe,mqo),e(Av,fqo),e(Av,aO),e(aO,gqo),e(Av,hqo),e(U,uqo),e(U,yv),e(yv,Mfe),e(Mfe,pqo),e(yv,_qo),e(yv,nO),e(nO,bqo),e(yv,Fqo),e(U,vqo),e(U,Lv),e(Lv,Efe),e(Efe,Tqo),e(Lv,Mqo),e(Lv,sO),e(sO,Eqo),e(Lv,Cqo),e(ro,wqo),e(ro,xv),e(xv,Aqo),e(xv,Cfe),e(Cfe,yqo),e(xv,Lqo),e(xv,wfe),e(wfe,xqo),e(ro,$qo),M($v,ro,null),b(m,BPe,_),b(m,Hi,_),e(Hi,kv),e(kv,Afe),M(aL,Afe,null),e(Hi,kqo),e(Hi,yfe),e(yfe,Sqo),b(m,PPe,_),b(m,qo,_),M(nL,qo,null),e(qo,Rqo),e(qo,Ui),e(Ui,Bqo),e(Ui,lO),e(lO,Pqo),e(Ui,Iqo),e(Ui,iO),e(iO,qqo),e(Ui,Nqo),e(qo,jqo),e(qo,sL),e(sL,Dqo),e(sL,Lfe),e(Lfe,Gqo),e(sL,Oqo),e(qo,Vqo),e(qo,ct),M(lL,ct,null),e(ct,Xqo),e(ct,xfe),e(xfe,zqo),e(ct,Qqo),e(ct,Ji),e(Ji,Wqo),e(Ji,$fe),e($fe,Hqo),e(Ji,Uqo),e(Ji,dO),e(dO,Jqo),e(Ji,Yqo),e(ct,Kqo),M(Sv,ct,null),e(qo,Zqo),e(qo,to),M(iL,to,null),e(to,eNo),e(to,kfe),e(kfe,oNo),e(to,rNo),e(to,Pa),e(Pa,tNo),e(Pa,Sfe),e(Sfe,aNo),e(Pa,nNo),e(Pa,Rfe),e(Rfe,sNo),e(Pa,lNo),e(Pa,Bfe),e(Bfe,iNo),e(Pa,dNo),e(to,cNo),e(to,O),e(O,Rv),e(Rv,Pfe),e(Pfe,mNo),e(Rv,fNo),e(Rv,cO),e(cO,gNo),e(Rv,hNo),e(O,uNo),e(O,Bv),e(Bv,Ife),e(Ife,pNo),e(Bv,_No),e(Bv,mO),e(mO,bNo),e(Bv,FNo),e(O,vNo),e(O,Pv),e(Pv,qfe),e(qfe,TNo),e(Pv,MNo),e(Pv,fO),e(fO,ENo),e(Pv,CNo),e(O,wNo),e(O,Iv),e(Iv,Nfe),e(Nfe,ANo),e(Iv,yNo),e(Iv,gO),e(gO,LNo),e(Iv,xNo),e(O,$No),e(O,qv),e(qv,jfe),e(jfe,kNo),e(qv,SNo),e(qv,hO),e(hO,RNo),e(qv,BNo),e(O,PNo),e(O,Nv),e(Nv,Dfe),e(Dfe,INo),e(Nv,qNo),e(Nv,uO),e(uO,NNo),e(Nv,jNo),e(O,DNo),e(O,jv),e(jv,Gfe),e(Gfe,GNo),e(jv,ONo),e(jv,pO),e(pO,VNo),e(jv,XNo),e(O,zNo),e(O,Dv),e(Dv,Ofe),e(Ofe,QNo),e(Dv,WNo),e(Dv,_O),e(_O,HNo),e(Dv,UNo),e(O,JNo),e(O,Gv),e(Gv,Vfe),e(Vfe,YNo),e(Gv,KNo),e(Gv,bO),e(bO,ZNo),e(Gv,ejo),e(O,ojo),e(O,Ov),e(Ov,Xfe),e(Xfe,rjo),e(Ov,tjo),e(Ov,FO),e(FO,ajo),e(Ov,njo),e(O,sjo),e(O,Vv),e(Vv,zfe),e(zfe,ljo),e(Vv,ijo),e(Vv,vO),e(vO,djo),e(Vv,cjo),e(O,mjo),e(O,Xv),e(Xv,Qfe),e(Qfe,fjo),e(Xv,gjo),e(Xv,TO),e(TO,hjo),e(Xv,ujo),e(O,pjo),e(O,zv),e(zv,Wfe),e(Wfe,_jo),e(zv,bjo),e(zv,MO),e(MO,Fjo),e(zv,vjo),e(O,Tjo),e(O,Qv),e(Qv,Hfe),e(Hfe,Mjo),e(Qv,Ejo),e(Qv,EO),e(EO,Cjo),e(Qv,wjo),e(O,Ajo),e(O,Wv),e(Wv,Ufe),e(Ufe,yjo),e(Wv,Ljo),e(Wv,CO),e(CO,xjo),e(Wv,$jo),e(O,kjo),e(O,Hv),e(Hv,Jfe),e(Jfe,Sjo),e(Hv,Rjo),e(Hv,wO),e(wO,Bjo),e(Hv,Pjo),e(O,Ijo),e(O,Uv),e(Uv,Yfe),e(Yfe,qjo),e(Uv,Njo),e(Uv,AO),e(AO,jjo),e(Uv,Djo),e(O,Gjo),e(O,Jv),e(Jv,Kfe),e(Kfe,Ojo),e(Jv,Vjo),e(Jv,yO),e(yO,Xjo),e(Jv,zjo),e(O,Qjo),e(O,Yv),e(Yv,Zfe),e(Zfe,Wjo),e(Yv,Hjo),e(Yv,LO),e(LO,Ujo),e(Yv,Jjo),e(O,Yjo),e(O,Kv),e(Kv,ege),e(ege,Kjo),e(Kv,Zjo),e(Kv,xO),e(xO,eDo),e(Kv,oDo),e(O,rDo),e(O,Zv),e(Zv,oge),e(oge,tDo),e(Zv,aDo),e(Zv,$O),e($O,nDo),e(Zv,sDo),e(O,lDo),e(O,e1),e(e1,rge),e(rge,iDo),e(e1,dDo),e(e1,kO),e(kO,cDo),e(e1,mDo),e(O,fDo),e(O,o1),e(o1,tge),e(tge,gDo),e(o1,hDo),e(o1,SO),e(SO,uDo),e(o1,pDo),e(O,_Do),e(O,r1),e(r1,age),e(age,bDo),e(r1,FDo),e(r1,RO),e(RO,vDo),e(r1,TDo),e(O,MDo),e(O,t1),e(t1,nge),e(nge,EDo),e(t1,CDo),e(t1,BO),e(BO,wDo),e(t1,ADo),e(O,yDo),e(O,a1),e(a1,sge),e(sge,LDo),e(a1,xDo),e(a1,PO),e(PO,$Do),e(a1,kDo),e(O,SDo),e(O,n1),e(n1,lge),e(lge,RDo),e(n1,BDo),e(n1,IO),e(IO,PDo),e(n1,IDo),e(O,qDo),e(O,s1),e(s1,ige),e(ige,NDo),e(s1,jDo),e(s1,qO),e(qO,DDo),e(s1,GDo),e(O,ODo),e(O,l1),e(l1,dge),e(dge,VDo),e(l1,XDo),e(l1,NO),e(NO,zDo),e(l1,QDo),e(O,WDo),e(O,i1),e(i1,cge),e(cge,HDo),e(i1,UDo),e(i1,jO),e(jO,JDo),e(i1,YDo),e(O,KDo),e(O,d1),e(d1,mge),e(mge,ZDo),e(d1,eGo),e(d1,DO),e(DO,oGo),e(d1,rGo),e(O,tGo),e(O,c1),e(c1,fge),e(fge,aGo),e(c1,nGo),e(c1,GO),e(GO,sGo),e(c1,lGo),e(O,iGo),e(O,m1),e(m1,gge),e(gge,dGo),e(m1,cGo),e(m1,OO),e(OO,mGo),e(m1,fGo),e(O,gGo),e(O,f1),e(f1,hge),e(hge,hGo),e(f1,uGo),e(f1,VO),e(VO,pGo),e(f1,_Go),e(O,bGo),e(O,g1),e(g1,uge),e(uge,FGo),e(g1,vGo),e(g1,XO),e(XO,TGo),e(g1,MGo),e(O,EGo),e(O,h1),e(h1,pge),e(pge,CGo),e(h1,wGo),e(h1,zO),e(zO,AGo),e(h1,yGo),e(O,LGo),e(O,u1),e(u1,_ge),e(_ge,xGo),e(u1,$Go),e(u1,QO),e(QO,kGo),e(u1,SGo),e(O,RGo),e(O,p1),e(p1,bge),e(bge,BGo),e(p1,PGo),e(p1,WO),e(WO,IGo),e(p1,qGo),e(O,NGo),e(O,_1),e(_1,Fge),e(Fge,jGo),e(_1,DGo),e(_1,HO),e(HO,GGo),e(_1,OGo),e(to,VGo),e(to,b1),e(b1,XGo),e(b1,vge),e(vge,zGo),e(b1,QGo),e(b1,Tge),e(Tge,WGo),e(to,HGo),M(F1,to,null),b(m,IPe,_),b(m,Yi,_),e(Yi,v1),e(v1,Mge),M(dL,Mge,null),e(Yi,UGo),e(Yi,Ege),e(Ege,JGo),b(m,qPe,_),b(m,No,_),M(cL,No,null),e(No,YGo),e(No,Ki),e(Ki,KGo),e(Ki,UO),e(UO,ZGo),e(Ki,eOo),e(Ki,JO),e(JO,oOo),e(Ki,rOo),e(No,tOo),e(No,mL),e(mL,aOo),e(mL,Cge),e(Cge,nOo),e(mL,sOo),e(No,lOo),e(No,mt),M(fL,mt,null),e(mt,iOo),e(mt,wge),e(wge,dOo),e(mt,cOo),e(mt,Zi),e(Zi,mOo),e(Zi,Age),e(Age,fOo),e(Zi,gOo),e(Zi,YO),e(YO,hOo),e(Zi,uOo),e(mt,pOo),M(T1,mt,null),e(No,_Oo),e(No,ao),M(gL,ao,null),e(ao,bOo),e(ao,yge),e(yge,FOo),e(ao,vOo),e(ao,Ia),e(Ia,TOo),e(Ia,Lge),e(Lge,MOo),e(Ia,EOo),e(Ia,xge),e(xge,COo),e(Ia,wOo),e(Ia,$ge),e($ge,AOo),e(Ia,yOo),e(ao,LOo),e(ao,kge),e(kge,M1),e(M1,Sge),e(Sge,xOo),e(M1,$Oo),e(M1,KO),e(KO,kOo),e(M1,SOo),e(ao,ROo),e(ao,E1),e(E1,BOo),e(E1,Rge),e(Rge,POo),e(E1,IOo),e(E1,Bge),e(Bge,qOo),e(ao,NOo),M(C1,ao,null),b(m,NPe,_),b(m,ed,_),e(ed,w1),e(w1,Pge),M(hL,Pge,null),e(ed,jOo),e(ed,Ige),e(Ige,DOo),b(m,jPe,_),b(m,jo,_),M(uL,jo,null),e(jo,GOo),e(jo,od),e(od,OOo),e(od,ZO),e(ZO,VOo),e(od,XOo),e(od,eV),e(eV,zOo),e(od,QOo),e(jo,WOo),e(jo,pL),e(pL,HOo),e(pL,qge),e(qge,UOo),e(pL,JOo),e(jo,YOo),e(jo,ft),M(_L,ft,null),e(ft,KOo),e(ft,Nge),e(Nge,ZOo),e(ft,eVo),e(ft,rd),e(rd,oVo),e(rd,jge),e(jge,rVo),e(rd,tVo),e(rd,oV),e(oV,aVo),e(rd,nVo),e(ft,sVo),M(A1,ft,null),e(jo,lVo),e(jo,no),M(bL,no,null),e(no,iVo),e(no,Dge),e(Dge,dVo),e(no,cVo),e(no,qa),e(qa,mVo),e(qa,Gge),e(Gge,fVo),e(qa,gVo),e(qa,Oge),e(Oge,hVo),e(qa,uVo),e(qa,Vge),e(Vge,pVo),e(qa,_Vo),e(no,bVo),e(no,Fe),e(Fe,y1),e(y1,Xge),e(Xge,FVo),e(y1,vVo),e(y1,rV),e(rV,TVo),e(y1,MVo),e(Fe,EVo),e(Fe,L1),e(L1,zge),e(zge,CVo),e(L1,wVo),e(L1,tV),e(tV,AVo),e(L1,yVo),e(Fe,LVo),e(Fe,x1),e(x1,Qge),e(Qge,xVo),e(x1,$Vo),e(x1,aV),e(aV,kVo),e(x1,SVo),e(Fe,RVo),e(Fe,Rs),e(Rs,Wge),e(Wge,BVo),e(Rs,PVo),e(Rs,nV),e(nV,IVo),e(Rs,qVo),e(Rs,sV),e(sV,NVo),e(Rs,jVo),e(Fe,DVo),e(Fe,$1),e($1,Hge),e(Hge,GVo),e($1,OVo),e($1,lV),e(lV,VVo),e($1,XVo),e(Fe,zVo),e(Fe,gt),e(gt,Uge),e(Uge,QVo),e(gt,WVo),e(gt,iV),e(iV,HVo),e(gt,UVo),e(gt,dV),e(dV,JVo),e(gt,YVo),e(gt,cV),e(cV,KVo),e(gt,ZVo),e(Fe,eXo),e(Fe,k1),e(k1,Jge),e(Jge,oXo),e(k1,rXo),e(k1,mV),e(mV,tXo),e(k1,aXo),e(Fe,nXo),e(Fe,S1),e(S1,Yge),e(Yge,sXo),e(S1,lXo),e(S1,fV),e(fV,iXo),e(S1,dXo),e(Fe,cXo),e(Fe,R1),e(R1,Kge),e(Kge,mXo),e(R1,fXo),e(R1,gV),e(gV,gXo),e(R1,hXo),e(Fe,uXo),e(Fe,B1),e(B1,Zge),e(Zge,pXo),e(B1,_Xo),e(B1,hV),e(hV,bXo),e(B1,FXo),e(Fe,vXo),e(Fe,P1),e(P1,ehe),e(ehe,TXo),e(P1,MXo),e(P1,uV),e(uV,EXo),e(P1,CXo),e(Fe,wXo),e(Fe,I1),e(I1,ohe),e(ohe,AXo),e(I1,yXo),e(I1,pV),e(pV,LXo),e(I1,xXo),e(Fe,$Xo),e(Fe,q1),e(q1,rhe),e(rhe,kXo),e(q1,SXo),e(q1,_V),e(_V,RXo),e(q1,BXo),e(no,PXo),e(no,N1),e(N1,IXo),e(N1,the),e(the,qXo),e(N1,NXo),e(N1,ahe),e(ahe,jXo),e(no,DXo),M(j1,no,null),b(m,DPe,_),b(m,td,_),e(td,D1),e(D1,nhe),M(FL,nhe,null),e(td,GXo),e(td,she),e(she,OXo),b(m,GPe,_),b(m,Do,_),M(vL,Do,null),e(Do,VXo),e(Do,ad),e(ad,XXo),e(ad,bV),e(bV,zXo),e(ad,QXo),e(ad,FV),e(FV,WXo),e(ad,HXo),e(Do,UXo),e(Do,TL),e(TL,JXo),e(TL,lhe),e(lhe,YXo),e(TL,KXo),e(Do,ZXo),e(Do,ht),M(ML,ht,null),e(ht,ezo),e(ht,ihe),e(ihe,ozo),e(ht,rzo),e(ht,nd),e(nd,tzo),e(nd,dhe),e(dhe,azo),e(nd,nzo),e(nd,vV),e(vV,szo),e(nd,lzo),e(ht,izo),M(G1,ht,null),e(Do,dzo),e(Do,so),M(EL,so,null),e(so,czo),e(so,che),e(che,mzo),e(so,fzo),e(so,Na),e(Na,gzo),e(Na,mhe),e(mhe,hzo),e(Na,uzo),e(Na,fhe),e(fhe,pzo),e(Na,_zo),e(Na,ghe),e(ghe,bzo),e(Na,Fzo),e(so,vzo),e(so,hhe),e(hhe,O1),e(O1,uhe),e(uhe,Tzo),e(O1,Mzo),e(O1,TV),e(TV,Ezo),e(O1,Czo),e(so,wzo),e(so,V1),e(V1,Azo),e(V1,phe),e(phe,yzo),e(V1,Lzo),e(V1,_he),e(_he,xzo),e(so,$zo),M(X1,so,null),b(m,OPe,_),b(m,sd,_),e(sd,z1),e(z1,bhe),M(CL,bhe,null),e(sd,kzo),e(sd,Fhe),e(Fhe,Szo),b(m,VPe,_),b(m,Go,_),M(wL,Go,null),e(Go,Rzo),e(Go,ld),e(ld,Bzo),e(ld,MV),e(MV,Pzo),e(ld,Izo),e(ld,EV),e(EV,qzo),e(ld,Nzo),e(Go,jzo),e(Go,AL),e(AL,Dzo),e(AL,vhe),e(vhe,Gzo),e(AL,Ozo),e(Go,Vzo),e(Go,ut),M(yL,ut,null),e(ut,Xzo),e(ut,The),e(The,zzo),e(ut,Qzo),e(ut,id),e(id,Wzo),e(id,Mhe),e(Mhe,Hzo),e(id,Uzo),e(id,CV),e(CV,Jzo),e(id,Yzo),e(ut,Kzo),M(Q1,ut,null),e(Go,Zzo),e(Go,lo),M(LL,lo,null),e(lo,eQo),e(lo,Ehe),e(Ehe,oQo),e(lo,rQo),e(lo,ja),e(ja,tQo),e(ja,Che),e(Che,aQo),e(ja,nQo),e(ja,whe),e(whe,sQo),e(ja,lQo),e(ja,Ahe),e(Ahe,iQo),e(ja,dQo),e(lo,cQo),e(lo,Ne),e(Ne,W1),e(W1,yhe),e(yhe,mQo),e(W1,fQo),e(W1,wV),e(wV,gQo),e(W1,hQo),e(Ne,uQo),e(Ne,H1),e(H1,Lhe),e(Lhe,pQo),e(H1,_Qo),e(H1,AV),e(AV,bQo),e(H1,FQo),e(Ne,vQo),e(Ne,U1),e(U1,xhe),e(xhe,TQo),e(U1,MQo),e(U1,yV),e(yV,EQo),e(U1,CQo),e(Ne,wQo),e(Ne,J1),e(J1,$he),e($he,AQo),e(J1,yQo),e(J1,LV),e(LV,LQo),e(J1,xQo),e(Ne,$Qo),e(Ne,Y1),e(Y1,khe),e(khe,kQo),e(Y1,SQo),e(Y1,xV),e(xV,RQo),e(Y1,BQo),e(Ne,PQo),e(Ne,K1),e(K1,She),e(She,IQo),e(K1,qQo),e(K1,$V),e($V,NQo),e(K1,jQo),e(Ne,DQo),e(Ne,Z1),e(Z1,Rhe),e(Rhe,GQo),e(Z1,OQo),e(Z1,kV),e(kV,VQo),e(Z1,XQo),e(Ne,zQo),e(Ne,eT),e(eT,Bhe),e(Bhe,QQo),e(eT,WQo),e(eT,SV),e(SV,HQo),e(eT,UQo),e(lo,JQo),e(lo,oT),e(oT,YQo),e(oT,Phe),e(Phe,KQo),e(oT,ZQo),e(oT,Ihe),e(Ihe,eWo),e(lo,oWo),M(rT,lo,null),b(m,XPe,_),b(m,dd,_),e(dd,tT),e(tT,qhe),M(xL,qhe,null),e(dd,rWo),e(dd,Nhe),e(Nhe,tWo),b(m,zPe,_),b(m,Oo,_),M($L,Oo,null),e(Oo,aWo),e(Oo,cd),e(cd,nWo),e(cd,RV),e(RV,sWo),e(cd,lWo),e(cd,BV),e(BV,iWo),e(cd,dWo),e(Oo,cWo),e(Oo,kL),e(kL,mWo),e(kL,jhe),e(jhe,fWo),e(kL,gWo),e(Oo,hWo),e(Oo,pt),M(SL,pt,null),e(pt,uWo),e(pt,Dhe),e(Dhe,pWo),e(pt,_Wo),e(pt,md),e(md,bWo),e(md,Ghe),e(Ghe,FWo),e(md,vWo),e(md,PV),e(PV,TWo),e(md,MWo),e(pt,EWo),M(aT,pt,null),e(Oo,CWo),e(Oo,io),M(RL,io,null),e(io,wWo),e(io,Ohe),e(Ohe,AWo),e(io,yWo),e(io,Da),e(Da,LWo),e(Da,Vhe),e(Vhe,xWo),e(Da,$Wo),e(Da,Xhe),e(Xhe,kWo),e(Da,SWo),e(Da,zhe),e(zhe,RWo),e(Da,BWo),e(io,PWo),e(io,Ga),e(Ga,nT),e(nT,Qhe),e(Qhe,IWo),e(nT,qWo),e(nT,IV),e(IV,NWo),e(nT,jWo),e(Ga,DWo),e(Ga,sT),e(sT,Whe),e(Whe,GWo),e(sT,OWo),e(sT,qV),e(qV,VWo),e(sT,XWo),e(Ga,zWo),e(Ga,lT),e(lT,Hhe),e(Hhe,QWo),e(lT,WWo),e(lT,NV),e(NV,HWo),e(lT,UWo),e(Ga,JWo),e(Ga,iT),e(iT,Uhe),e(Uhe,YWo),e(iT,KWo),e(iT,jV),e(jV,ZWo),e(iT,eHo),e(io,oHo),e(io,dT),e(dT,rHo),e(dT,Jhe),e(Jhe,tHo),e(dT,aHo),e(dT,Yhe),e(Yhe,nHo),e(io,sHo),M(cT,io,null),b(m,QPe,_),b(m,fd,_),e(fd,mT),e(mT,Khe),M(BL,Khe,null),e(fd,lHo),e(fd,Zhe),e(Zhe,iHo),b(m,WPe,_),b(m,Vo,_),M(PL,Vo,null),e(Vo,dHo),e(Vo,gd),e(gd,cHo),e(gd,DV),e(DV,mHo),e(gd,fHo),e(gd,GV),e(GV,gHo),e(gd,hHo),e(Vo,uHo),e(Vo,IL),e(IL,pHo),e(IL,eue),e(eue,_Ho),e(IL,bHo),e(Vo,FHo),e(Vo,_t),M(qL,_t,null),e(_t,vHo),e(_t,oue),e(oue,THo),e(_t,MHo),e(_t,hd),e(hd,EHo),e(hd,rue),e(rue,CHo),e(hd,wHo),e(hd,OV),e(OV,AHo),e(hd,yHo),e(_t,LHo),M(fT,_t,null),e(Vo,xHo),e(Vo,co),M(NL,co,null),e(co,$Ho),e(co,tue),e(tue,kHo),e(co,SHo),e(co,Oa),e(Oa,RHo),e(Oa,aue),e(aue,BHo),e(Oa,PHo),e(Oa,nue),e(nue,IHo),e(Oa,qHo),e(Oa,sue),e(sue,NHo),e(Oa,jHo),e(co,DHo),e(co,je),e(je,gT),e(gT,lue),e(lue,GHo),e(gT,OHo),e(gT,VV),e(VV,VHo),e(gT,XHo),e(je,zHo),e(je,hT),e(hT,iue),e(iue,QHo),e(hT,WHo),e(hT,XV),e(XV,HHo),e(hT,UHo),e(je,JHo),e(je,uT),e(uT,due),e(due,YHo),e(uT,KHo),e(uT,zV),e(zV,ZHo),e(uT,eUo),e(je,oUo),e(je,pT),e(pT,cue),e(cue,rUo),e(pT,tUo),e(pT,QV),e(QV,aUo),e(pT,nUo),e(je,sUo),e(je,_T),e(_T,mue),e(mue,lUo),e(_T,iUo),e(_T,WV),e(WV,dUo),e(_T,cUo),e(je,mUo),e(je,bT),e(bT,fue),e(fue,fUo),e(bT,gUo),e(bT,HV),e(HV,hUo),e(bT,uUo),e(je,pUo),e(je,FT),e(FT,gue),e(gue,_Uo),e(FT,bUo),e(FT,UV),e(UV,FUo),e(FT,vUo),e(je,TUo),e(je,vT),e(vT,hue),e(hue,MUo),e(vT,EUo),e(vT,JV),e(JV,CUo),e(vT,wUo),e(co,AUo),e(co,TT),e(TT,yUo),e(TT,uue),e(uue,LUo),e(TT,xUo),e(TT,pue),e(pue,$Uo),e(co,kUo),M(MT,co,null),b(m,HPe,_),b(m,ud,_),e(ud,ET),e(ET,_ue),M(jL,_ue,null),e(ud,SUo),e(ud,bue),e(bue,RUo),b(m,UPe,_),b(m,Xo,_),M(DL,Xo,null),e(Xo,BUo),e(Xo,pd),e(pd,PUo),e(pd,YV),e(YV,IUo),e(pd,qUo),e(pd,KV),e(KV,NUo),e(pd,jUo),e(Xo,DUo),e(Xo,GL),e(GL,GUo),e(GL,Fue),e(Fue,OUo),e(GL,VUo),e(Xo,XUo),e(Xo,bt),M(OL,bt,null),e(bt,zUo),e(bt,vue),e(vue,QUo),e(bt,WUo),e(bt,_d),e(_d,HUo),e(_d,Tue),e(Tue,UUo),e(_d,JUo),e(_d,ZV),e(ZV,YUo),e(_d,KUo),e(bt,ZUo),M(CT,bt,null),e(Xo,eJo),e(Xo,mo),M(VL,mo,null),e(mo,oJo),e(mo,Mue),e(Mue,rJo),e(mo,tJo),e(mo,Va),e(Va,aJo),e(Va,Eue),e(Eue,nJo),e(Va,sJo),e(Va,Cue),e(Cue,lJo),e(Va,iJo),e(Va,wue),e(wue,dJo),e(Va,cJo),e(mo,mJo),e(mo,XL),e(XL,wT),e(wT,Aue),e(Aue,fJo),e(wT,gJo),e(wT,eX),e(eX,hJo),e(wT,uJo),e(XL,pJo),e(XL,AT),e(AT,yue),e(yue,_Jo),e(AT,bJo),e(AT,oX),e(oX,FJo),e(AT,vJo),e(mo,TJo),e(mo,yT),e(yT,MJo),e(yT,Lue),e(Lue,EJo),e(yT,CJo),e(yT,xue),e(xue,wJo),e(mo,AJo),M(LT,mo,null),b(m,JPe,_),b(m,bd,_),e(bd,xT),e(xT,$ue),M(zL,$ue,null),e(bd,yJo),e(bd,kue),e(kue,LJo),b(m,YPe,_),b(m,zo,_),M(QL,zo,null),e(zo,xJo),e(zo,Fd),e(Fd,$Jo),e(Fd,rX),e(rX,kJo),e(Fd,SJo),e(Fd,tX),e(tX,RJo),e(Fd,BJo),e(zo,PJo),e(zo,WL),e(WL,IJo),e(WL,Sue),e(Sue,qJo),e(WL,NJo),e(zo,jJo),e(zo,Ft),M(HL,Ft,null),e(Ft,DJo),e(Ft,Rue),e(Rue,GJo),e(Ft,OJo),e(Ft,vd),e(vd,VJo),e(vd,Bue),e(Bue,XJo),e(vd,zJo),e(vd,aX),e(aX,QJo),e(vd,WJo),e(Ft,HJo),M($T,Ft,null),e(zo,UJo),e(zo,fo),M(UL,fo,null),e(fo,JJo),e(fo,Pue),e(Pue,YJo),e(fo,KJo),e(fo,Xa),e(Xa,ZJo),e(Xa,Iue),e(Iue,eYo),e(Xa,oYo),e(Xa,que),e(que,rYo),e(Xa,tYo),e(Xa,Nue),e(Nue,aYo),e(Xa,nYo),e(fo,sYo),e(fo,za),e(za,kT),e(kT,jue),e(jue,lYo),e(kT,iYo),e(kT,nX),e(nX,dYo),e(kT,cYo),e(za,mYo),e(za,ST),e(ST,Due),e(Due,fYo),e(ST,gYo),e(ST,sX),e(sX,hYo),e(ST,uYo),e(za,pYo),e(za,RT),e(RT,Gue),e(Gue,_Yo),e(RT,bYo),e(RT,lX),e(lX,FYo),e(RT,vYo),e(za,TYo),e(za,BT),e(BT,Oue),e(Oue,MYo),e(BT,EYo),e(BT,iX),e(iX,CYo),e(BT,wYo),e(fo,AYo),e(fo,PT),e(PT,yYo),e(PT,Vue),e(Vue,LYo),e(PT,xYo),e(PT,Xue),e(Xue,$Yo),e(fo,kYo),M(IT,fo,null),b(m,KPe,_),b(m,Td,_),e(Td,qT),e(qT,zue),M(JL,zue,null),e(Td,SYo),e(Td,Que),e(Que,RYo),b(m,ZPe,_),b(m,Qo,_),M(YL,Qo,null),e(Qo,BYo),e(Qo,Md),e(Md,PYo),e(Md,dX),e(dX,IYo),e(Md,qYo),e(Md,cX),e(cX,NYo),e(Md,jYo),e(Qo,DYo),e(Qo,KL),e(KL,GYo),e(KL,Wue),e(Wue,OYo),e(KL,VYo),e(Qo,XYo),e(Qo,vt),M(ZL,vt,null),e(vt,zYo),e(vt,Hue),e(Hue,QYo),e(vt,WYo),e(vt,Ed),e(Ed,HYo),e(Ed,Uue),e(Uue,UYo),e(Ed,JYo),e(Ed,mX),e(mX,YYo),e(Ed,KYo),e(vt,ZYo),M(NT,vt,null),e(Qo,eKo),e(Qo,go),M(e8,go,null),e(go,oKo),e(go,Jue),e(Jue,rKo),e(go,tKo),e(go,Qa),e(Qa,aKo),e(Qa,Yue),e(Yue,nKo),e(Qa,sKo),e(Qa,Kue),e(Kue,lKo),e(Qa,iKo),e(Qa,Zue),e(Zue,dKo),e(Qa,cKo),e(go,mKo),e(go,Cd),e(Cd,jT),e(jT,epe),e(epe,fKo),e(jT,gKo),e(jT,fX),e(fX,hKo),e(jT,uKo),e(Cd,pKo),e(Cd,DT),e(DT,ope),e(ope,_Ko),e(DT,bKo),e(DT,gX),e(gX,FKo),e(DT,vKo),e(Cd,TKo),e(Cd,GT),e(GT,rpe),e(rpe,MKo),e(GT,EKo),e(GT,hX),e(hX,CKo),e(GT,wKo),e(go,AKo),e(go,OT),e(OT,yKo),e(OT,tpe),e(tpe,LKo),e(OT,xKo),e(OT,ape),e(ape,$Ko),e(go,kKo),M(VT,go,null),b(m,eIe,_),b(m,wd,_),e(wd,XT),e(XT,npe),M(o8,npe,null),e(wd,SKo),e(wd,spe),e(spe,RKo),b(m,oIe,_),b(m,Wo,_),M(r8,Wo,null),e(Wo,BKo),e(Wo,Ad),e(Ad,PKo),e(Ad,uX),e(uX,IKo),e(Ad,qKo),e(Ad,pX),e(pX,NKo),e(Ad,jKo),e(Wo,DKo),e(Wo,t8),e(t8,GKo),e(t8,lpe),e(lpe,OKo),e(t8,VKo),e(Wo,XKo),e(Wo,Tt),M(a8,Tt,null),e(Tt,zKo),e(Tt,ipe),e(ipe,QKo),e(Tt,WKo),e(Tt,yd),e(yd,HKo),e(yd,dpe),e(dpe,UKo),e(yd,JKo),e(yd,_X),e(_X,YKo),e(yd,KKo),e(Tt,ZKo),M(zT,Tt,null),e(Wo,eZo),e(Wo,ho),M(n8,ho,null),e(ho,oZo),e(ho,cpe),e(cpe,rZo),e(ho,tZo),e(ho,Wa),e(Wa,aZo),e(Wa,mpe),e(mpe,nZo),e(Wa,sZo),e(Wa,fpe),e(fpe,lZo),e(Wa,iZo),e(Wa,gpe),e(gpe,dZo),e(Wa,cZo),e(ho,mZo),e(ho,s8),e(s8,QT),e(QT,hpe),e(hpe,fZo),e(QT,gZo),e(QT,bX),e(bX,hZo),e(QT,uZo),e(s8,pZo),e(s8,WT),e(WT,upe),e(upe,_Zo),e(WT,bZo),e(WT,FX),e(FX,FZo),e(WT,vZo),e(ho,TZo),e(ho,HT),e(HT,MZo),e(HT,ppe),e(ppe,EZo),e(HT,CZo),e(HT,_pe),e(_pe,wZo),e(ho,AZo),M(UT,ho,null),b(m,rIe,_),b(m,Ld,_),e(Ld,JT),e(JT,bpe),M(l8,bpe,null),e(Ld,yZo),e(Ld,Fpe),e(Fpe,LZo),b(m,tIe,_),b(m,Ho,_),M(i8,Ho,null),e(Ho,xZo),e(Ho,xd),e(xd,$Zo),e(xd,vX),e(vX,kZo),e(xd,SZo),e(xd,TX),e(TX,RZo),e(xd,BZo),e(Ho,PZo),e(Ho,d8),e(d8,IZo),e(d8,vpe),e(vpe,qZo),e(d8,NZo),e(Ho,jZo),e(Ho,Mt),M(c8,Mt,null),e(Mt,DZo),e(Mt,Tpe),e(Tpe,GZo),e(Mt,OZo),e(Mt,$d),e($d,VZo),e($d,Mpe),e(Mpe,XZo),e($d,zZo),e($d,MX),e(MX,QZo),e($d,WZo),e(Mt,HZo),M(YT,Mt,null),e(Ho,UZo),e(Ho,uo),M(m8,uo,null),e(uo,JZo),e(uo,Epe),e(Epe,YZo),e(uo,KZo),e(uo,Ha),e(Ha,ZZo),e(Ha,Cpe),e(Cpe,eer),e(Ha,oer),e(Ha,wpe),e(wpe,rer),e(Ha,ter),e(Ha,Ape),e(Ape,aer),e(Ha,ner),e(uo,ser),e(uo,ype),e(ype,KT),e(KT,Lpe),e(Lpe,ler),e(KT,ier),e(KT,EX),e(EX,der),e(KT,cer),e(uo,mer),e(uo,ZT),e(ZT,fer),e(ZT,xpe),e(xpe,ger),e(ZT,her),e(ZT,$pe),e($pe,uer),e(uo,per),M(eM,uo,null),b(m,aIe,_),b(m,kd,_),e(kd,oM),e(oM,kpe),M(f8,kpe,null),e(kd,_er),e(kd,Spe),e(Spe,ber),b(m,nIe,_),b(m,Uo,_),M(g8,Uo,null),e(Uo,Fer),e(Uo,Sd),e(Sd,ver),e(Sd,CX),e(CX,Ter),e(Sd,Mer),e(Sd,wX),e(wX,Eer),e(Sd,Cer),e(Uo,wer),e(Uo,h8),e(h8,Aer),e(h8,Rpe),e(Rpe,yer),e(h8,Ler),e(Uo,xer),e(Uo,Et),M(u8,Et,null),e(Et,$er),e(Et,Bpe),e(Bpe,ker),e(Et,Ser),e(Et,Rd),e(Rd,Rer),e(Rd,Ppe),e(Ppe,Ber),e(Rd,Per),e(Rd,AX),e(AX,Ier),e(Rd,qer),e(Et,Ner),M(rM,Et,null),e(Uo,jer),e(Uo,po),M(p8,po,null),e(po,Der),e(po,Ipe),e(Ipe,Ger),e(po,Oer),e(po,Ua),e(Ua,Ver),e(Ua,qpe),e(qpe,Xer),e(Ua,zer),e(Ua,Npe),e(Npe,Qer),e(Ua,Wer),e(Ua,jpe),e(jpe,Her),e(Ua,Uer),e(po,Jer),e(po,Ja),e(Ja,tM),e(tM,Dpe),e(Dpe,Yer),e(tM,Ker),e(tM,yX),e(yX,Zer),e(tM,eor),e(Ja,oor),e(Ja,aM),e(aM,Gpe),e(Gpe,ror),e(aM,tor),e(aM,LX),e(LX,aor),e(aM,nor),e(Ja,sor),e(Ja,nM),e(nM,Ope),e(Ope,lor),e(nM,ior),e(nM,xX),e(xX,dor),e(nM,cor),e(Ja,mor),e(Ja,sM),e(sM,Vpe),e(Vpe,gor),e(sM,hor),e(sM,$X),e($X,uor),e(sM,por),e(po,_or),e(po,lM),e(lM,bor),e(lM,Xpe),e(Xpe,For),e(lM,vor),e(lM,zpe),e(zpe,Tor),e(po,Mor),M(iM,po,null),b(m,sIe,_),b(m,Bd,_),e(Bd,dM),e(dM,Qpe),M(_8,Qpe,null),e(Bd,Eor),e(Bd,Wpe),e(Wpe,Cor),b(m,lIe,_),b(m,Jo,_),M(b8,Jo,null),e(Jo,wor),e(Jo,Pd),e(Pd,Aor),e(Pd,kX),e(kX,yor),e(Pd,Lor),e(Pd,SX),e(SX,xor),e(Pd,$or),e(Jo,kor),e(Jo,F8),e(F8,Sor),e(F8,Hpe),e(Hpe,Ror),e(F8,Bor),e(Jo,Por),e(Jo,Ct),M(v8,Ct,null),e(Ct,Ior),e(Ct,Upe),e(Upe,qor),e(Ct,Nor),e(Ct,Id),e(Id,jor),e(Id,Jpe),e(Jpe,Dor),e(Id,Gor),e(Id,RX),e(RX,Oor),e(Id,Vor),e(Ct,Xor),M(cM,Ct,null),e(Jo,zor),e(Jo,_o),M(T8,_o,null),e(_o,Qor),e(_o,Ype),e(Ype,Wor),e(_o,Hor),e(_o,Ya),e(Ya,Uor),e(Ya,Kpe),e(Kpe,Jor),e(Ya,Yor),e(Ya,Zpe),e(Zpe,Kor),e(Ya,Zor),e(Ya,e_e),e(e_e,err),e(Ya,orr),e(_o,rrr),e(_o,o_e),e(o_e,mM),e(mM,r_e),e(r_e,trr),e(mM,arr),e(mM,BX),e(BX,nrr),e(mM,srr),e(_o,lrr),e(_o,fM),e(fM,irr),e(fM,t_e),e(t_e,drr),e(fM,crr),e(fM,a_e),e(a_e,mrr),e(_o,frr),M(gM,_o,null),b(m,iIe,_),b(m,qd,_),e(qd,hM),e(hM,n_e),M(M8,n_e,null),e(qd,grr),e(qd,s_e),e(s_e,hrr),b(m,dIe,_),b(m,Yo,_),M(E8,Yo,null),e(Yo,urr),e(Yo,Nd),e(Nd,prr),e(Nd,PX),e(PX,_rr),e(Nd,brr),e(Nd,IX),e(IX,Frr),e(Nd,vrr),e(Yo,Trr),e(Yo,C8),e(C8,Mrr),e(C8,l_e),e(l_e,Err),e(C8,Crr),e(Yo,wrr),e(Yo,wt),M(w8,wt,null),e(wt,Arr),e(wt,i_e),e(i_e,yrr),e(wt,Lrr),e(wt,jd),e(jd,xrr),e(jd,d_e),e(d_e,$rr),e(jd,krr),e(jd,qX),e(qX,Srr),e(jd,Rrr),e(wt,Brr),M(uM,wt,null),e(Yo,Prr),e(Yo,wr),M(A8,wr,null),e(wr,Irr),e(wr,c_e),e(c_e,qrr),e(wr,Nrr),e(wr,Ka),e(Ka,jrr),e(Ka,m_e),e(m_e,Drr),e(Ka,Grr),e(Ka,f_e),e(f_e,Orr),e(Ka,Vrr),e(Ka,g_e),e(g_e,Xrr),e(Ka,zrr),e(wr,Qrr),e(wr,j),e(j,pM),e(pM,h_e),e(h_e,Wrr),e(pM,Hrr),e(pM,NX),e(NX,Urr),e(pM,Jrr),e(j,Yrr),e(j,_M),e(_M,u_e),e(u_e,Krr),e(_M,Zrr),e(_M,jX),e(jX,etr),e(_M,otr),e(j,rtr),e(j,bM),e(bM,p_e),e(p_e,ttr),e(bM,atr),e(bM,DX),e(DX,ntr),e(bM,str),e(j,ltr),e(j,FM),e(FM,__e),e(__e,itr),e(FM,dtr),e(FM,GX),e(GX,ctr),e(FM,mtr),e(j,ftr),e(j,vM),e(vM,b_e),e(b_e,gtr),e(vM,htr),e(vM,OX),e(OX,utr),e(vM,ptr),e(j,_tr),e(j,TM),e(TM,F_e),e(F_e,btr),e(TM,Ftr),e(TM,VX),e(VX,vtr),e(TM,Ttr),e(j,Mtr),e(j,MM),e(MM,v_e),e(v_e,Etr),e(MM,Ctr),e(MM,XX),e(XX,wtr),e(MM,Atr),e(j,ytr),e(j,EM),e(EM,T_e),e(T_e,Ltr),e(EM,xtr),e(EM,zX),e(zX,$tr),e(EM,ktr),e(j,Str),e(j,CM),e(CM,M_e),e(M_e,Rtr),e(CM,Btr),e(CM,QX),e(QX,Ptr),e(CM,Itr),e(j,qtr),e(j,wM),e(wM,E_e),e(E_e,Ntr),e(wM,jtr),e(wM,WX),e(WX,Dtr),e(wM,Gtr),e(j,Otr),e(j,AM),e(AM,C_e),e(C_e,Vtr),e(AM,Xtr),e(AM,HX),e(HX,ztr),e(AM,Qtr),e(j,Wtr),e(j,yM),e(yM,w_e),e(w_e,Htr),e(yM,Utr),e(yM,UX),e(UX,Jtr),e(yM,Ytr),e(j,Ktr),e(j,LM),e(LM,A_e),e(A_e,Ztr),e(LM,ear),e(LM,JX),e(JX,oar),e(LM,rar),e(j,tar),e(j,xM),e(xM,y_e),e(y_e,aar),e(xM,nar),e(xM,YX),e(YX,sar),e(xM,lar),e(j,iar),e(j,$M),e($M,L_e),e(L_e,dar),e($M,car),e($M,KX),e(KX,mar),e($M,far),e(j,gar),e(j,kM),e(kM,x_e),e(x_e,har),e(kM,uar),e(kM,ZX),e(ZX,par),e(kM,_ar),e(j,bar),e(j,SM),e(SM,$_e),e($_e,Far),e(SM,Tar),e(SM,ez),e(ez,Mar),e(SM,Ear),e(j,Car),e(j,Bs),e(Bs,k_e),e(k_e,war),e(Bs,Aar),e(Bs,oz),e(oz,yar),e(Bs,Lar),e(Bs,rz),e(rz,xar),e(Bs,$ar),e(j,kar),e(j,RM),e(RM,S_e),e(S_e,Sar),e(RM,Rar),e(RM,tz),e(tz,Bar),e(RM,Par),e(j,Iar),e(j,BM),e(BM,R_e),e(R_e,qar),e(BM,Nar),e(BM,az),e(az,jar),e(BM,Dar),e(j,Gar),e(j,PM),e(PM,B_e),e(B_e,Oar),e(PM,Var),e(PM,nz),e(nz,Xar),e(PM,zar),e(j,Qar),e(j,IM),e(IM,P_e),e(P_e,War),e(IM,Har),e(IM,sz),e(sz,Uar),e(IM,Jar),e(j,Yar),e(j,qM),e(qM,I_e),e(I_e,Kar),e(qM,Zar),e(qM,lz),e(lz,enr),e(qM,onr),e(j,rnr),e(j,NM),e(NM,q_e),e(q_e,tnr),e(NM,anr),e(NM,iz),e(iz,nnr),e(NM,snr),e(j,lnr),e(j,jM),e(jM,N_e),e(N_e,inr),e(jM,dnr),e(jM,dz),e(dz,cnr),e(jM,mnr),e(j,fnr),e(j,DM),e(DM,j_e),e(j_e,gnr),e(DM,hnr),e(DM,cz),e(cz,unr),e(DM,pnr),e(j,_nr),e(j,GM),e(GM,D_e),e(D_e,bnr),e(GM,Fnr),e(GM,mz),e(mz,vnr),e(GM,Tnr),e(j,Mnr),e(j,OM),e(OM,G_e),e(G_e,Enr),e(OM,Cnr),e(OM,fz),e(fz,wnr),e(OM,Anr),e(j,ynr),e(j,VM),e(VM,O_e),e(O_e,Lnr),e(VM,xnr),e(VM,gz),e(gz,$nr),e(VM,knr),e(j,Snr),e(j,XM),e(XM,V_e),e(V_e,Rnr),e(XM,Bnr),e(XM,hz),e(hz,Pnr),e(XM,Inr),e(j,qnr),e(j,zM),e(zM,X_e),e(X_e,Nnr),e(zM,jnr),e(zM,uz),e(uz,Dnr),e(zM,Gnr),e(j,Onr),e(j,QM),e(QM,z_e),e(z_e,Vnr),e(QM,Xnr),e(QM,pz),e(pz,znr),e(QM,Qnr),e(j,Wnr),e(j,WM),e(WM,Q_e),e(Q_e,Hnr),e(WM,Unr),e(WM,_z),e(_z,Jnr),e(WM,Ynr),e(j,Knr),e(j,HM),e(HM,W_e),e(W_e,Znr),e(HM,esr),e(HM,bz),e(bz,osr),e(HM,rsr),e(j,tsr),e(j,UM),e(UM,H_e),e(H_e,asr),e(UM,nsr),e(UM,Fz),e(Fz,ssr),e(UM,lsr),e(j,isr),e(j,JM),e(JM,U_e),e(U_e,dsr),e(JM,csr),e(JM,vz),e(vz,msr),e(JM,fsr),e(j,gsr),e(j,YM),e(YM,J_e),e(J_e,hsr),e(YM,usr),e(YM,Tz),e(Tz,psr),e(YM,_sr),e(j,bsr),e(j,KM),e(KM,Y_e),e(Y_e,Fsr),e(KM,vsr),e(KM,Mz),e(Mz,Tsr),e(KM,Msr),e(j,Esr),e(j,ZM),e(ZM,K_e),e(K_e,Csr),e(ZM,wsr),e(ZM,Ez),e(Ez,Asr),e(ZM,ysr),e(j,Lsr),e(j,e4),e(e4,Z_e),e(Z_e,xsr),e(e4,$sr),e(e4,Cz),e(Cz,ksr),e(e4,Ssr),e(j,Rsr),e(j,o4),e(o4,ebe),e(ebe,Bsr),e(o4,Psr),e(o4,wz),e(wz,Isr),e(o4,qsr),e(j,Nsr),e(j,r4),e(r4,obe),e(obe,jsr),e(r4,Dsr),e(r4,Az),e(Az,Gsr),e(r4,Osr),e(j,Vsr),e(j,t4),e(t4,rbe),e(rbe,Xsr),e(t4,zsr),e(t4,yz),e(yz,Qsr),e(t4,Wsr),e(j,Hsr),e(j,a4),e(a4,tbe),e(tbe,Usr),e(a4,Jsr),e(a4,Lz),e(Lz,Ysr),e(a4,Ksr),e(j,Zsr),e(j,n4),e(n4,abe),e(abe,elr),e(n4,olr),e(n4,xz),e(xz,rlr),e(n4,tlr),e(wr,alr),M(s4,wr,null),b(m,cIe,_),b(m,Dd,_),e(Dd,l4),e(l4,nbe),M(y8,nbe,null),e(Dd,nlr),e(Dd,sbe),e(sbe,slr),b(m,mIe,_),b(m,Ko,_),M(L8,Ko,null),e(Ko,llr),e(Ko,Gd),e(Gd,ilr),e(Gd,$z),e($z,dlr),e(Gd,clr),e(Gd,kz),e(kz,mlr),e(Gd,flr),e(Ko,glr),e(Ko,x8),e(x8,hlr),e(x8,lbe),e(lbe,ulr),e(x8,plr),e(Ko,_lr),e(Ko,At),M($8,At,null),e(At,blr),e(At,ibe),e(ibe,Flr),e(At,vlr),e(At,Od),e(Od,Tlr),e(Od,dbe),e(dbe,Mlr),e(Od,Elr),e(Od,Sz),e(Sz,Clr),e(Od,wlr),e(At,Alr),M(i4,At,null),e(Ko,ylr),e(Ko,Ar),M(k8,Ar,null),e(Ar,Llr),e(Ar,cbe),e(cbe,xlr),e(Ar,$lr),e(Ar,Za),e(Za,klr),e(Za,mbe),e(mbe,Slr),e(Za,Rlr),e(Za,fbe),e(fbe,Blr),e(Za,Plr),e(Za,gbe),e(gbe,Ilr),e(Za,qlr),e(Ar,Nlr),e(Ar,ne),e(ne,d4),e(d4,hbe),e(hbe,jlr),e(d4,Dlr),e(d4,Rz),e(Rz,Glr),e(d4,Olr),e(ne,Vlr),e(ne,c4),e(c4,ube),e(ube,Xlr),e(c4,zlr),e(c4,Bz),e(Bz,Qlr),e(c4,Wlr),e(ne,Hlr),e(ne,m4),e(m4,pbe),e(pbe,Ulr),e(m4,Jlr),e(m4,Pz),e(Pz,Ylr),e(m4,Klr),e(ne,Zlr),e(ne,f4),e(f4,_be),e(_be,eir),e(f4,oir),e(f4,Iz),e(Iz,rir),e(f4,tir),e(ne,air),e(ne,g4),e(g4,bbe),e(bbe,nir),e(g4,sir),e(g4,qz),e(qz,lir),e(g4,iir),e(ne,dir),e(ne,h4),e(h4,Fbe),e(Fbe,cir),e(h4,mir),e(h4,Nz),e(Nz,fir),e(h4,gir),e(ne,hir),e(ne,u4),e(u4,vbe),e(vbe,uir),e(u4,pir),e(u4,jz),e(jz,_ir),e(u4,bir),e(ne,Fir),e(ne,p4),e(p4,Tbe),e(Tbe,vir),e(p4,Tir),e(p4,Dz),e(Dz,Mir),e(p4,Eir),e(ne,Cir),e(ne,_4),e(_4,Mbe),e(Mbe,wir),e(_4,Air),e(_4,Gz),e(Gz,yir),e(_4,Lir),e(ne,xir),e(ne,b4),e(b4,Ebe),e(Ebe,$ir),e(b4,kir),e(b4,Oz),e(Oz,Sir),e(b4,Rir),e(ne,Bir),e(ne,F4),e(F4,Cbe),e(Cbe,Pir),e(F4,Iir),e(F4,Vz),e(Vz,qir),e(F4,Nir),e(ne,jir),e(ne,v4),e(v4,wbe),e(wbe,Dir),e(v4,Gir),e(v4,Xz),e(Xz,Oir),e(v4,Vir),e(ne,Xir),e(ne,T4),e(T4,Abe),e(Abe,zir),e(T4,Qir),e(T4,zz),e(zz,Wir),e(T4,Hir),e(ne,Uir),e(ne,M4),e(M4,ybe),e(ybe,Jir),e(M4,Yir),e(M4,Qz),e(Qz,Kir),e(M4,Zir),e(ne,edr),e(ne,E4),e(E4,Lbe),e(Lbe,odr),e(E4,rdr),e(E4,Wz),e(Wz,tdr),e(E4,adr),e(ne,ndr),e(ne,C4),e(C4,xbe),e(xbe,sdr),e(C4,ldr),e(C4,Hz),e(Hz,idr),e(C4,ddr),e(ne,cdr),e(ne,w4),e(w4,$be),e($be,mdr),e(w4,fdr),e(w4,Uz),e(Uz,gdr),e(w4,hdr),e(ne,udr),e(ne,A4),e(A4,kbe),e(kbe,pdr),e(A4,_dr),e(A4,Jz),e(Jz,bdr),e(A4,Fdr),e(ne,vdr),e(ne,y4),e(y4,Sbe),e(Sbe,Tdr),e(y4,Mdr),e(y4,Yz),e(Yz,Edr),e(y4,Cdr),e(ne,wdr),e(ne,L4),e(L4,Rbe),e(Rbe,Adr),e(L4,ydr),e(L4,Kz),e(Kz,Ldr),e(L4,xdr),e(ne,$dr),e(ne,x4),e(x4,Bbe),e(Bbe,kdr),e(x4,Sdr),e(x4,Zz),e(Zz,Rdr),e(x4,Bdr),e(ne,Pdr),e(ne,$4),e($4,Pbe),e(Pbe,Idr),e($4,qdr),e($4,eQ),e(eQ,Ndr),e($4,jdr),e(ne,Ddr),e(ne,k4),e(k4,Ibe),e(Ibe,Gdr),e(k4,Odr),e(k4,oQ),e(oQ,Vdr),e(k4,Xdr),e(Ar,zdr),M(S4,Ar,null),b(m,fIe,_),b(m,Vd,_),e(Vd,R4),e(R4,qbe),M(S8,qbe,null),e(Vd,Qdr),e(Vd,Nbe),e(Nbe,Wdr),b(m,gIe,_),b(m,Zo,_),M(R8,Zo,null),e(Zo,Hdr),e(Zo,Xd),e(Xd,Udr),e(Xd,rQ),e(rQ,Jdr),e(Xd,Ydr),e(Xd,tQ),e(tQ,Kdr),e(Xd,Zdr),e(Zo,ecr),e(Zo,B8),e(B8,ocr),e(B8,jbe),e(jbe,rcr),e(B8,tcr),e(Zo,acr),e(Zo,yt),M(P8,yt,null),e(yt,ncr),e(yt,Dbe),e(Dbe,scr),e(yt,lcr),e(yt,zd),e(zd,icr),e(zd,Gbe),e(Gbe,dcr),e(zd,ccr),e(zd,aQ),e(aQ,mcr),e(zd,fcr),e(yt,gcr),M(B4,yt,null),e(Zo,hcr),e(Zo,yr),M(I8,yr,null),e(yr,ucr),e(yr,Obe),e(Obe,pcr),e(yr,_cr),e(yr,en),e(en,bcr),e(en,Vbe),e(Vbe,Fcr),e(en,vcr),e(en,Xbe),e(Xbe,Tcr),e(en,Mcr),e(en,zbe),e(zbe,Ecr),e(en,Ccr),e(yr,wcr),e(yr,Te),e(Te,P4),e(P4,Qbe),e(Qbe,Acr),e(P4,ycr),e(P4,nQ),e(nQ,Lcr),e(P4,xcr),e(Te,$cr),e(Te,I4),e(I4,Wbe),e(Wbe,kcr),e(I4,Scr),e(I4,sQ),e(sQ,Rcr),e(I4,Bcr),e(Te,Pcr),e(Te,q4),e(q4,Hbe),e(Hbe,Icr),e(q4,qcr),e(q4,lQ),e(lQ,Ncr),e(q4,jcr),e(Te,Dcr),e(Te,N4),e(N4,Ube),e(Ube,Gcr),e(N4,Ocr),e(N4,iQ),e(iQ,Vcr),e(N4,Xcr),e(Te,zcr),e(Te,j4),e(j4,Jbe),e(Jbe,Qcr),e(j4,Wcr),e(j4,dQ),e(dQ,Hcr),e(j4,Ucr),e(Te,Jcr),e(Te,D4),e(D4,Ybe),e(Ybe,Ycr),e(D4,Kcr),e(D4,cQ),e(cQ,Zcr),e(D4,emr),e(Te,omr),e(Te,G4),e(G4,Kbe),e(Kbe,rmr),e(G4,tmr),e(G4,mQ),e(mQ,amr),e(G4,nmr),e(Te,smr),e(Te,O4),e(O4,Zbe),e(Zbe,lmr),e(O4,imr),e(O4,fQ),e(fQ,dmr),e(O4,cmr),e(Te,mmr),e(Te,V4),e(V4,e2e),e(e2e,fmr),e(V4,gmr),e(V4,gQ),e(gQ,hmr),e(V4,umr),e(Te,pmr),e(Te,X4),e(X4,o2e),e(o2e,_mr),e(X4,bmr),e(X4,hQ),e(hQ,Fmr),e(X4,vmr),e(Te,Tmr),e(Te,z4),e(z4,r2e),e(r2e,Mmr),e(z4,Emr),e(z4,uQ),e(uQ,Cmr),e(z4,wmr),e(Te,Amr),e(Te,Q4),e(Q4,t2e),e(t2e,ymr),e(Q4,Lmr),e(Q4,pQ),e(pQ,xmr),e(Q4,$mr),e(yr,kmr),M(W4,yr,null),b(m,hIe,_),b(m,Qd,_),e(Qd,H4),e(H4,a2e),M(q8,a2e,null),e(Qd,Smr),e(Qd,n2e),e(n2e,Rmr),b(m,uIe,_),b(m,er,_),M(N8,er,null),e(er,Bmr),e(er,Wd),e(Wd,Pmr),e(Wd,_Q),e(_Q,Imr),e(Wd,qmr),e(Wd,bQ),e(bQ,Nmr),e(Wd,jmr),e(er,Dmr),e(er,j8),e(j8,Gmr),e(j8,s2e),e(s2e,Omr),e(j8,Vmr),e(er,Xmr),e(er,Lt),M(D8,Lt,null),e(Lt,zmr),e(Lt,l2e),e(l2e,Qmr),e(Lt,Wmr),e(Lt,Hd),e(Hd,Hmr),e(Hd,i2e),e(i2e,Umr),e(Hd,Jmr),e(Hd,FQ),e(FQ,Ymr),e(Hd,Kmr),e(Lt,Zmr),M(U4,Lt,null),e(er,efr),e(er,Lr),M(G8,Lr,null),e(Lr,ofr),e(Lr,d2e),e(d2e,rfr),e(Lr,tfr),e(Lr,on),e(on,afr),e(on,c2e),e(c2e,nfr),e(on,sfr),e(on,m2e),e(m2e,lfr),e(on,ifr),e(on,f2e),e(f2e,dfr),e(on,cfr),e(Lr,mfr),e(Lr,Ud),e(Ud,J4),e(J4,g2e),e(g2e,ffr),e(J4,gfr),e(J4,vQ),e(vQ,hfr),e(J4,ufr),e(Ud,pfr),e(Ud,Y4),e(Y4,h2e),e(h2e,_fr),e(Y4,bfr),e(Y4,TQ),e(TQ,Ffr),e(Y4,vfr),e(Ud,Tfr),e(Ud,K4),e(K4,u2e),e(u2e,Mfr),e(K4,Efr),e(K4,MQ),e(MQ,Cfr),e(K4,wfr),e(Lr,Afr),M(Z4,Lr,null),b(m,pIe,_),b(m,Jd,_),e(Jd,eE),e(eE,p2e),M(O8,p2e,null),e(Jd,yfr),e(Jd,_2e),e(_2e,Lfr),b(m,_Ie,_),b(m,or,_),M(V8,or,null),e(or,xfr),e(or,Yd),e(Yd,$fr),e(Yd,EQ),e(EQ,kfr),e(Yd,Sfr),e(Yd,CQ),e(CQ,Rfr),e(Yd,Bfr),e(or,Pfr),e(or,X8),e(X8,Ifr),e(X8,b2e),e(b2e,qfr),e(X8,Nfr),e(or,jfr),e(or,xt),M(z8,xt,null),e(xt,Dfr),e(xt,F2e),e(F2e,Gfr),e(xt,Ofr),e(xt,Kd),e(Kd,Vfr),e(Kd,v2e),e(v2e,Xfr),e(Kd,zfr),e(Kd,wQ),e(wQ,Qfr),e(Kd,Wfr),e(xt,Hfr),M(oE,xt,null),e(or,Ufr),e(or,xr),M(Q8,xr,null),e(xr,Jfr),e(xr,T2e),e(T2e,Yfr),e(xr,Kfr),e(xr,rn),e(rn,Zfr),e(rn,M2e),e(M2e,egr),e(rn,ogr),e(rn,E2e),e(E2e,rgr),e(rn,tgr),e(rn,C2e),e(C2e,agr),e(rn,ngr),e(xr,sgr),e(xr,ie),e(ie,rE),e(rE,w2e),e(w2e,lgr),e(rE,igr),e(rE,AQ),e(AQ,dgr),e(rE,cgr),e(ie,mgr),e(ie,tE),e(tE,A2e),e(A2e,fgr),e(tE,ggr),e(tE,yQ),e(yQ,hgr),e(tE,ugr),e(ie,pgr),e(ie,aE),e(aE,y2e),e(y2e,_gr),e(aE,bgr),e(aE,LQ),e(LQ,Fgr),e(aE,vgr),e(ie,Tgr),e(ie,nE),e(nE,L2e),e(L2e,Mgr),e(nE,Egr),e(nE,xQ),e(xQ,Cgr),e(nE,wgr),e(ie,Agr),e(ie,sE),e(sE,x2e),e(x2e,ygr),e(sE,Lgr),e(sE,$Q),e($Q,xgr),e(sE,$gr),e(ie,kgr),e(ie,lE),e(lE,$2e),e($2e,Sgr),e(lE,Rgr),e(lE,kQ),e(kQ,Bgr),e(lE,Pgr),e(ie,Igr),e(ie,iE),e(iE,k2e),e(k2e,qgr),e(iE,Ngr),e(iE,SQ),e(SQ,jgr),e(iE,Dgr),e(ie,Ggr),e(ie,dE),e(dE,S2e),e(S2e,Ogr),e(dE,Vgr),e(dE,RQ),e(RQ,Xgr),e(dE,zgr),e(ie,Qgr),e(ie,cE),e(cE,R2e),e(R2e,Wgr),e(cE,Hgr),e(cE,BQ),e(BQ,Ugr),e(cE,Jgr),e(ie,Ygr),e(ie,mE),e(mE,B2e),e(B2e,Kgr),e(mE,Zgr),e(mE,PQ),e(PQ,ehr),e(mE,ohr),e(ie,rhr),e(ie,fE),e(fE,P2e),e(P2e,thr),e(fE,ahr),e(fE,IQ),e(IQ,nhr),e(fE,shr),e(ie,lhr),e(ie,gE),e(gE,I2e),e(I2e,ihr),e(gE,dhr),e(gE,qQ),e(qQ,chr),e(gE,mhr),e(ie,fhr),e(ie,hE),e(hE,q2e),e(q2e,ghr),e(hE,hhr),e(hE,NQ),e(NQ,uhr),e(hE,phr),e(ie,_hr),e(ie,uE),e(uE,N2e),e(N2e,bhr),e(uE,Fhr),e(uE,jQ),e(jQ,vhr),e(uE,Thr),e(ie,Mhr),e(ie,pE),e(pE,j2e),e(j2e,Ehr),e(pE,Chr),e(pE,DQ),e(DQ,whr),e(pE,Ahr),e(ie,yhr),e(ie,_E),e(_E,D2e),e(D2e,Lhr),e(_E,xhr),e(_E,GQ),e(GQ,$hr),e(_E,khr),e(ie,Shr),e(ie,bE),e(bE,G2e),e(G2e,Rhr),e(bE,Bhr),e(bE,OQ),e(OQ,Phr),e(bE,Ihr),e(ie,qhr),e(ie,FE),e(FE,O2e),e(O2e,Nhr),e(FE,jhr),e(FE,VQ),e(VQ,Dhr),e(FE,Ghr),e(ie,Ohr),e(ie,vE),e(vE,V2e),e(V2e,Vhr),e(vE,Xhr),e(vE,XQ),e(XQ,zhr),e(vE,Qhr),e(ie,Whr),e(ie,TE),e(TE,X2e),e(X2e,Hhr),e(TE,Uhr),e(TE,zQ),e(zQ,Jhr),e(TE,Yhr),e(xr,Khr),M(ME,xr,null),b(m,bIe,_),b(m,Zd,_),e(Zd,EE),e(EE,z2e),M(W8,z2e,null),e(Zd,Zhr),e(Zd,Q2e),e(Q2e,eur),b(m,FIe,_),b(m,rr,_),M(H8,rr,null),e(rr,our),e(rr,ec),e(ec,rur),e(ec,QQ),e(QQ,tur),e(ec,aur),e(ec,WQ),e(WQ,nur),e(ec,sur),e(rr,lur),e(rr,U8),e(U8,iur),e(U8,W2e),e(W2e,dur),e(U8,cur),e(rr,mur),e(rr,$t),M(J8,$t,null),e($t,fur),e($t,H2e),e(H2e,gur),e($t,hur),e($t,oc),e(oc,uur),e(oc,U2e),e(U2e,pur),e(oc,_ur),e(oc,HQ),e(HQ,bur),e(oc,Fur),e($t,vur),M(CE,$t,null),e(rr,Tur),e(rr,$r),M(Y8,$r,null),e($r,Mur),e($r,J2e),e(J2e,Eur),e($r,Cur),e($r,tn),e(tn,wur),e(tn,Y2e),e(Y2e,Aur),e(tn,yur),e(tn,K2e),e(K2e,Lur),e(tn,xur),e(tn,Z2e),e(Z2e,$ur),e(tn,kur),e($r,Sur),e($r,ye),e(ye,wE),e(wE,eFe),e(eFe,Rur),e(wE,Bur),e(wE,UQ),e(UQ,Pur),e(wE,Iur),e(ye,qur),e(ye,AE),e(AE,oFe),e(oFe,Nur),e(AE,jur),e(AE,JQ),e(JQ,Dur),e(AE,Gur),e(ye,Our),e(ye,yE),e(yE,rFe),e(rFe,Vur),e(yE,Xur),e(yE,YQ),e(YQ,zur),e(yE,Qur),e(ye,Wur),e(ye,LE),e(LE,tFe),e(tFe,Hur),e(LE,Uur),e(LE,KQ),e(KQ,Jur),e(LE,Yur),e(ye,Kur),e(ye,xE),e(xE,aFe),e(aFe,Zur),e(xE,epr),e(xE,ZQ),e(ZQ,opr),e(xE,rpr),e(ye,tpr),e(ye,$E),e($E,nFe),e(nFe,apr),e($E,npr),e($E,eW),e(eW,spr),e($E,lpr),e(ye,ipr),e(ye,kE),e(kE,sFe),e(sFe,dpr),e(kE,cpr),e(kE,oW),e(oW,mpr),e(kE,fpr),e(ye,gpr),e(ye,SE),e(SE,lFe),e(lFe,hpr),e(SE,upr),e(SE,rW),e(rW,ppr),e(SE,_pr),e(ye,bpr),e(ye,RE),e(RE,iFe),e(iFe,Fpr),e(RE,vpr),e(RE,tW),e(tW,Tpr),e(RE,Mpr),e(ye,Epr),e(ye,BE),e(BE,dFe),e(dFe,Cpr),e(BE,wpr),e(BE,aW),e(aW,Apr),e(BE,ypr),e($r,Lpr),M(PE,$r,null),b(m,vIe,_),b(m,rc,_),e(rc,IE),e(IE,cFe),M(K8,cFe,null),e(rc,xpr),e(rc,mFe),e(mFe,$pr),b(m,TIe,_),b(m,tr,_),M(Z8,tr,null),e(tr,kpr),e(tr,tc),e(tc,Spr),e(tc,nW),e(nW,Rpr),e(tc,Bpr),e(tc,sW),e(sW,Ppr),e(tc,Ipr),e(tr,qpr),e(tr,ex),e(ex,Npr),e(ex,fFe),e(fFe,jpr),e(ex,Dpr),e(tr,Gpr),e(tr,kt),M(ox,kt,null),e(kt,Opr),e(kt,gFe),e(gFe,Vpr),e(kt,Xpr),e(kt,ac),e(ac,zpr),e(ac,hFe),e(hFe,Qpr),e(ac,Wpr),e(ac,lW),e(lW,Hpr),e(ac,Upr),e(kt,Jpr),M(qE,kt,null),e(tr,Ypr),e(tr,kr),M(rx,kr,null),e(kr,Kpr),e(kr,uFe),e(uFe,Zpr),e(kr,e_r),e(kr,an),e(an,o_r),e(an,pFe),e(pFe,r_r),e(an,t_r),e(an,_Fe),e(_Fe,a_r),e(an,n_r),e(an,bFe),e(bFe,s_r),e(an,l_r),e(kr,i_r),e(kr,Z),e(Z,NE),e(NE,FFe),e(FFe,d_r),e(NE,c_r),e(NE,iW),e(iW,m_r),e(NE,f_r),e(Z,g_r),e(Z,jE),e(jE,vFe),e(vFe,h_r),e(jE,u_r),e(jE,dW),e(dW,p_r),e(jE,__r),e(Z,b_r),e(Z,DE),e(DE,TFe),e(TFe,F_r),e(DE,v_r),e(DE,cW),e(cW,T_r),e(DE,M_r),e(Z,E_r),e(Z,GE),e(GE,MFe),e(MFe,C_r),e(GE,w_r),e(GE,mW),e(mW,A_r),e(GE,y_r),e(Z,L_r),e(Z,OE),e(OE,EFe),e(EFe,x_r),e(OE,$_r),e(OE,fW),e(fW,k_r),e(OE,S_r),e(Z,R_r),e(Z,VE),e(VE,CFe),e(CFe,B_r),e(VE,P_r),e(VE,gW),e(gW,I_r),e(VE,q_r),e(Z,N_r),e(Z,XE),e(XE,wFe),e(wFe,j_r),e(XE,D_r),e(XE,hW),e(hW,G_r),e(XE,O_r),e(Z,V_r),e(Z,zE),e(zE,AFe),e(AFe,X_r),e(zE,z_r),e(zE,uW),e(uW,Q_r),e(zE,W_r),e(Z,H_r),e(Z,QE),e(QE,yFe),e(yFe,U_r),e(QE,J_r),e(QE,pW),e(pW,Y_r),e(QE,K_r),e(Z,Z_r),e(Z,WE),e(WE,LFe),e(LFe,ebr),e(WE,obr),e(WE,_W),e(_W,rbr),e(WE,tbr),e(Z,abr),e(Z,HE),e(HE,xFe),e(xFe,nbr),e(HE,sbr),e(HE,bW),e(bW,lbr),e(HE,ibr),e(Z,dbr),e(Z,UE),e(UE,$Fe),e($Fe,cbr),e(UE,mbr),e(UE,FW),e(FW,fbr),e(UE,gbr),e(Z,hbr),e(Z,JE),e(JE,kFe),e(kFe,ubr),e(JE,pbr),e(JE,vW),e(vW,_br),e(JE,bbr),e(Z,Fbr),e(Z,YE),e(YE,SFe),e(SFe,vbr),e(YE,Tbr),e(YE,TW),e(TW,Mbr),e(YE,Ebr),e(Z,Cbr),e(Z,KE),e(KE,RFe),e(RFe,wbr),e(KE,Abr),e(KE,MW),e(MW,ybr),e(KE,Lbr),e(Z,xbr),e(Z,ZE),e(ZE,BFe),e(BFe,$br),e(ZE,kbr),e(ZE,EW),e(EW,Sbr),e(ZE,Rbr),e(Z,Bbr),e(Z,e5),e(e5,PFe),e(PFe,Pbr),e(e5,Ibr),e(e5,CW),e(CW,qbr),e(e5,Nbr),e(Z,jbr),e(Z,o5),e(o5,IFe),e(IFe,Dbr),e(o5,Gbr),e(o5,wW),e(wW,Obr),e(o5,Vbr),e(Z,Xbr),e(Z,r5),e(r5,qFe),e(qFe,zbr),e(r5,Qbr),e(r5,AW),e(AW,Wbr),e(r5,Hbr),e(Z,Ubr),e(Z,t5),e(t5,NFe),e(NFe,Jbr),e(t5,Ybr),e(t5,yW),e(yW,Kbr),e(t5,Zbr),e(Z,e2r),e(Z,a5),e(a5,jFe),e(jFe,o2r),e(a5,r2r),e(a5,LW),e(LW,t2r),e(a5,a2r),e(Z,n2r),e(Z,n5),e(n5,DFe),e(DFe,s2r),e(n5,l2r),e(n5,xW),e(xW,i2r),e(n5,d2r),e(Z,c2r),e(Z,s5),e(s5,GFe),e(GFe,m2r),e(s5,f2r),e(s5,$W),e($W,g2r),e(s5,h2r),e(Z,u2r),e(Z,l5),e(l5,OFe),e(OFe,p2r),e(l5,_2r),e(l5,kW),e(kW,b2r),e(l5,F2r),e(Z,v2r),e(Z,i5),e(i5,VFe),e(VFe,T2r),e(i5,M2r),e(i5,SW),e(SW,E2r),e(i5,C2r),e(Z,w2r),e(Z,d5),e(d5,XFe),e(XFe,A2r),e(d5,y2r),e(d5,RW),e(RW,L2r),e(d5,x2r),e(kr,$2r),M(c5,kr,null),b(m,MIe,_),b(m,nc,_),e(nc,m5),e(m5,zFe),M(tx,zFe,null),e(nc,k2r),e(nc,QFe),e(QFe,S2r),b(m,EIe,_),b(m,ar,_),M(ax,ar,null),e(ar,R2r),e(ar,sc),e(sc,B2r),e(sc,BW),e(BW,P2r),e(sc,I2r),e(sc,PW),e(PW,q2r),e(sc,N2r),e(ar,j2r),e(ar,nx),e(nx,D2r),e(nx,WFe),e(WFe,G2r),e(nx,O2r),e(ar,V2r),e(ar,St),M(sx,St,null),e(St,X2r),e(St,HFe),e(HFe,z2r),e(St,Q2r),e(St,lc),e(lc,W2r),e(lc,UFe),e(UFe,H2r),e(lc,U2r),e(lc,IW),e(IW,J2r),e(lc,Y2r),e(St,K2r),M(f5,St,null),e(ar,Z2r),e(ar,Sr),M(lx,Sr,null),e(Sr,eFr),e(Sr,JFe),e(JFe,oFr),e(Sr,rFr),e(Sr,nn),e(nn,tFr),e(nn,YFe),e(YFe,aFr),e(nn,nFr),e(nn,KFe),e(KFe,sFr),e(nn,lFr),e(nn,ZFe),e(ZFe,iFr),e(nn,dFr),e(Sr,cFr),e(Sr,ue),e(ue,g5),e(g5,eve),e(eve,mFr),e(g5,fFr),e(g5,qW),e(qW,gFr),e(g5,hFr),e(ue,uFr),e(ue,h5),e(h5,ove),e(ove,pFr),e(h5,_Fr),e(h5,NW),e(NW,bFr),e(h5,FFr),e(ue,vFr),e(ue,u5),e(u5,rve),e(rve,TFr),e(u5,MFr),e(u5,jW),e(jW,EFr),e(u5,CFr),e(ue,wFr),e(ue,p5),e(p5,tve),e(tve,AFr),e(p5,yFr),e(p5,DW),e(DW,LFr),e(p5,xFr),e(ue,$Fr),e(ue,_5),e(_5,ave),e(ave,kFr),e(_5,SFr),e(_5,GW),e(GW,RFr),e(_5,BFr),e(ue,PFr),e(ue,b5),e(b5,nve),e(nve,IFr),e(b5,qFr),e(b5,OW),e(OW,NFr),e(b5,jFr),e(ue,DFr),e(ue,F5),e(F5,sve),e(sve,GFr),e(F5,OFr),e(F5,VW),e(VW,VFr),e(F5,XFr),e(ue,zFr),e(ue,v5),e(v5,lve),e(lve,QFr),e(v5,WFr),e(v5,XW),e(XW,HFr),e(v5,UFr),e(ue,JFr),e(ue,T5),e(T5,ive),e(ive,YFr),e(T5,KFr),e(T5,zW),e(zW,ZFr),e(T5,evr),e(ue,ovr),e(ue,M5),e(M5,dve),e(dve,rvr),e(M5,tvr),e(M5,QW),e(QW,avr),e(M5,nvr),e(ue,svr),e(ue,E5),e(E5,cve),e(cve,lvr),e(E5,ivr),e(E5,WW),e(WW,dvr),e(E5,cvr),e(ue,mvr),e(ue,C5),e(C5,mve),e(mve,fvr),e(C5,gvr),e(C5,HW),e(HW,hvr),e(C5,uvr),e(ue,pvr),e(ue,w5),e(w5,fve),e(fve,_vr),e(w5,bvr),e(w5,UW),e(UW,Fvr),e(w5,vvr),e(ue,Tvr),e(ue,A5),e(A5,gve),e(gve,Mvr),e(A5,Evr),e(A5,JW),e(JW,Cvr),e(A5,wvr),e(ue,Avr),e(ue,y5),e(y5,hve),e(hve,yvr),e(y5,Lvr),e(y5,YW),e(YW,xvr),e(y5,$vr),e(ue,kvr),e(ue,L5),e(L5,uve),e(uve,Svr),e(L5,Rvr),e(L5,KW),e(KW,Bvr),e(L5,Pvr),e(ue,Ivr),e(ue,x5),e(x5,pve),e(pve,qvr),e(x5,Nvr),e(x5,ZW),e(ZW,jvr),e(x5,Dvr),e(Sr,Gvr),M($5,Sr,null),b(m,CIe,_),b(m,ic,_),e(ic,k5),e(k5,_ve),M(ix,_ve,null),e(ic,Ovr),e(ic,bve),e(bve,Vvr),b(m,wIe,_),b(m,nr,_),M(dx,nr,null),e(nr,Xvr),e(nr,dc),e(dc,zvr),e(dc,eH),e(eH,Qvr),e(dc,Wvr),e(dc,oH),e(oH,Hvr),e(dc,Uvr),e(nr,Jvr),e(nr,cx),e(cx,Yvr),e(cx,Fve),e(Fve,Kvr),e(cx,Zvr),e(nr,e1r),e(nr,Rt),M(mx,Rt,null),e(Rt,o1r),e(Rt,vve),e(vve,r1r),e(Rt,t1r),e(Rt,cc),e(cc,a1r),e(cc,Tve),e(Tve,n1r),e(cc,s1r),e(cc,rH),e(rH,l1r),e(cc,i1r),e(Rt,d1r),M(S5,Rt,null),e(nr,c1r),e(nr,Rr),M(fx,Rr,null),e(Rr,m1r),e(Rr,Mve),e(Mve,f1r),e(Rr,g1r),e(Rr,sn),e(sn,h1r),e(sn,Eve),e(Eve,u1r),e(sn,p1r),e(sn,Cve),e(Cve,_1r),e(sn,b1r),e(sn,wve),e(wve,F1r),e(sn,v1r),e(Rr,T1r),e(Rr,gx),e(gx,R5),e(R5,Ave),e(Ave,M1r),e(R5,E1r),e(R5,tH),e(tH,C1r),e(R5,w1r),e(gx,A1r),e(gx,B5),e(B5,yve),e(yve,y1r),e(B5,L1r),e(B5,aH),e(aH,x1r),e(B5,$1r),e(Rr,k1r),M(P5,Rr,null),b(m,AIe,_),b(m,mc,_),e(mc,I5),e(I5,Lve),M(hx,Lve,null),e(mc,S1r),e(mc,xve),e(xve,R1r),b(m,yIe,_),b(m,sr,_),M(ux,sr,null),e(sr,B1r),e(sr,fc),e(fc,P1r),e(fc,nH),e(nH,I1r),e(fc,q1r),e(fc,sH),e(sH,N1r),e(fc,j1r),e(sr,D1r),e(sr,px),e(px,G1r),e(px,$ve),e($ve,O1r),e(px,V1r),e(sr,X1r),e(sr,Bt),M(_x,Bt,null),e(Bt,z1r),e(Bt,kve),e(kve,Q1r),e(Bt,W1r),e(Bt,gc),e(gc,H1r),e(gc,Sve),e(Sve,U1r),e(gc,J1r),e(gc,lH),e(lH,Y1r),e(gc,K1r),e(Bt,Z1r),M(q5,Bt,null),e(sr,eTr),e(sr,Br),M(bx,Br,null),e(Br,oTr),e(Br,Rve),e(Rve,rTr),e(Br,tTr),e(Br,ln),e(ln,aTr),e(ln,Bve),e(Bve,nTr),e(ln,sTr),e(ln,Pve),e(Pve,lTr),e(ln,iTr),e(ln,Ive),e(Ive,dTr),e(ln,cTr),e(Br,mTr),e(Br,qve),e(qve,N5),e(N5,Nve),e(Nve,fTr),e(N5,gTr),e(N5,iH),e(iH,hTr),e(N5,uTr),e(Br,pTr),M(j5,Br,null),b(m,LIe,_),b(m,hc,_),e(hc,D5),e(D5,jve),M(Fx,jve,null),e(hc,_Tr),e(hc,Dve),e(Dve,bTr),b(m,xIe,_),b(m,lr,_),M(vx,lr,null),e(lr,FTr),e(lr,uc),e(uc,vTr),e(uc,dH),e(dH,TTr),e(uc,MTr),e(uc,cH),e(cH,ETr),e(uc,CTr),e(lr,wTr),e(lr,Tx),e(Tx,ATr),e(Tx,Gve),e(Gve,yTr),e(Tx,LTr),e(lr,xTr),e(lr,Pt),M(Mx,Pt,null),e(Pt,$Tr),e(Pt,Ove),e(Ove,kTr),e(Pt,STr),e(Pt,pc),e(pc,RTr),e(pc,Vve),e(Vve,BTr),e(pc,PTr),e(pc,mH),e(mH,ITr),e(pc,qTr),e(Pt,NTr),M(G5,Pt,null),e(lr,jTr),e(lr,Pr),M(Ex,Pr,null),e(Pr,DTr),e(Pr,Xve),e(Xve,GTr),e(Pr,OTr),e(Pr,dn),e(dn,VTr),e(dn,zve),e(zve,XTr),e(dn,zTr),e(dn,Qve),e(Qve,QTr),e(dn,WTr),e(dn,Wve),e(Wve,HTr),e(dn,UTr),e(Pr,JTr),e(Pr,de),e(de,O5),e(O5,Hve),e(Hve,YTr),e(O5,KTr),e(O5,fH),e(fH,ZTr),e(O5,eMr),e(de,oMr),e(de,V5),e(V5,Uve),e(Uve,rMr),e(V5,tMr),e(V5,gH),e(gH,aMr),e(V5,nMr),e(de,sMr),e(de,X5),e(X5,Jve),e(Jve,lMr),e(X5,iMr),e(X5,hH),e(hH,dMr),e(X5,cMr),e(de,mMr),e(de,z5),e(z5,Yve),e(Yve,fMr),e(z5,gMr),e(z5,uH),e(uH,hMr),e(z5,uMr),e(de,pMr),e(de,Q5),e(Q5,Kve),e(Kve,_Mr),e(Q5,bMr),e(Q5,pH),e(pH,FMr),e(Q5,vMr),e(de,TMr),e(de,W5),e(W5,Zve),e(Zve,MMr),e(W5,EMr),e(W5,_H),e(_H,CMr),e(W5,wMr),e(de,AMr),e(de,H5),e(H5,e1e),e(e1e,yMr),e(H5,LMr),e(H5,bH),e(bH,xMr),e(H5,$Mr),e(de,kMr),e(de,U5),e(U5,o1e),e(o1e,SMr),e(U5,RMr),e(U5,FH),e(FH,BMr),e(U5,PMr),e(de,IMr),e(de,J5),e(J5,r1e),e(r1e,qMr),e(J5,NMr),e(J5,vH),e(vH,jMr),e(J5,DMr),e(de,GMr),e(de,Y5),e(Y5,t1e),e(t1e,OMr),e(Y5,VMr),e(Y5,TH),e(TH,XMr),e(Y5,zMr),e(de,QMr),e(de,K5),e(K5,a1e),e(a1e,WMr),e(K5,HMr),e(K5,MH),e(MH,UMr),e(K5,JMr),e(de,YMr),e(de,Z5),e(Z5,n1e),e(n1e,KMr),e(Z5,ZMr),e(Z5,EH),e(EH,e4r),e(Z5,o4r),e(de,r4r),e(de,eC),e(eC,s1e),e(s1e,t4r),e(eC,a4r),e(eC,CH),e(CH,n4r),e(eC,s4r),e(de,l4r),e(de,oC),e(oC,l1e),e(l1e,i4r),e(oC,d4r),e(oC,wH),e(wH,c4r),e(oC,m4r),e(de,f4r),e(de,rC),e(rC,i1e),e(i1e,g4r),e(rC,h4r),e(rC,AH),e(AH,u4r),e(rC,p4r),e(de,_4r),e(de,tC),e(tC,d1e),e(d1e,b4r),e(tC,F4r),e(tC,yH),e(yH,v4r),e(tC,T4r),e(de,M4r),e(de,aC),e(aC,c1e),e(c1e,E4r),e(aC,C4r),e(aC,LH),e(LH,w4r),e(aC,A4r),e(de,y4r),e(de,nC),e(nC,m1e),e(m1e,L4r),e(nC,x4r),e(nC,xH),e(xH,$4r),e(nC,k4r),e(de,S4r),e(de,sC),e(sC,f1e),e(f1e,R4r),e(sC,B4r),e(sC,$H),e($H,P4r),e(sC,I4r),e(de,q4r),e(de,lC),e(lC,g1e),e(g1e,N4r),e(lC,j4r),e(lC,kH),e(kH,D4r),e(lC,G4r),e(Pr,O4r),M(iC,Pr,null),b(m,$Ie,_),b(m,_c,_),e(_c,dC),e(dC,h1e),M(Cx,h1e,null),e(_c,V4r),e(_c,u1e),e(u1e,X4r),b(m,kIe,_),b(m,ir,_),M(wx,ir,null),e(ir,z4r),e(ir,bc),e(bc,Q4r),e(bc,SH),e(SH,W4r),e(bc,H4r),e(bc,RH),e(RH,U4r),e(bc,J4r),e(ir,Y4r),e(ir,Ax),e(Ax,K4r),e(Ax,p1e),e(p1e,Z4r),e(Ax,eEr),e(ir,oEr),e(ir,It),M(yx,It,null),e(It,rEr),e(It,_1e),e(_1e,tEr),e(It,aEr),e(It,Fc),e(Fc,nEr),e(Fc,b1e),e(b1e,sEr),e(Fc,lEr),e(Fc,BH),e(BH,iEr),e(Fc,dEr),e(It,cEr),M(cC,It,null),e(ir,mEr),e(ir,Ir),M(Lx,Ir,null),e(Ir,fEr),e(Ir,F1e),e(F1e,gEr),e(Ir,hEr),e(Ir,cn),e(cn,uEr),e(cn,v1e),e(v1e,pEr),e(cn,_Er),e(cn,T1e),e(T1e,bEr),e(cn,FEr),e(cn,M1e),e(M1e,vEr),e(cn,TEr),e(Ir,MEr),e(Ir,ce),e(ce,mC),e(mC,E1e),e(E1e,EEr),e(mC,CEr),e(mC,PH),e(PH,wEr),e(mC,AEr),e(ce,yEr),e(ce,fC),e(fC,C1e),e(C1e,LEr),e(fC,xEr),e(fC,IH),e(IH,$Er),e(fC,kEr),e(ce,SEr),e(ce,gC),e(gC,w1e),e(w1e,REr),e(gC,BEr),e(gC,qH),e(qH,PEr),e(gC,IEr),e(ce,qEr),e(ce,hC),e(hC,A1e),e(A1e,NEr),e(hC,jEr),e(hC,NH),e(NH,DEr),e(hC,GEr),e(ce,OEr),e(ce,uC),e(uC,y1e),e(y1e,VEr),e(uC,XEr),e(uC,jH),e(jH,zEr),e(uC,QEr),e(ce,WEr),e(ce,pC),e(pC,L1e),e(L1e,HEr),e(pC,UEr),e(pC,DH),e(DH,JEr),e(pC,YEr),e(ce,KEr),e(ce,_C),e(_C,x1e),e(x1e,ZEr),e(_C,e5r),e(_C,GH),e(GH,o5r),e(_C,r5r),e(ce,t5r),e(ce,bC),e(bC,$1e),e($1e,a5r),e(bC,n5r),e(bC,OH),e(OH,s5r),e(bC,l5r),e(ce,i5r),e(ce,FC),e(FC,k1e),e(k1e,d5r),e(FC,c5r),e(FC,VH),e(VH,m5r),e(FC,f5r),e(ce,g5r),e(ce,vC),e(vC,S1e),e(S1e,h5r),e(vC,u5r),e(vC,XH),e(XH,p5r),e(vC,_5r),e(ce,b5r),e(ce,TC),e(TC,R1e),e(R1e,F5r),e(TC,v5r),e(TC,zH),e(zH,T5r),e(TC,M5r),e(ce,E5r),e(ce,MC),e(MC,B1e),e(B1e,C5r),e(MC,w5r),e(MC,QH),e(QH,A5r),e(MC,y5r),e(ce,L5r),e(ce,EC),e(EC,P1e),e(P1e,x5r),e(EC,$5r),e(EC,WH),e(WH,k5r),e(EC,S5r),e(ce,R5r),e(ce,CC),e(CC,I1e),e(I1e,B5r),e(CC,P5r),e(CC,HH),e(HH,I5r),e(CC,q5r),e(ce,N5r),e(ce,wC),e(wC,q1e),e(q1e,j5r),e(wC,D5r),e(wC,UH),e(UH,G5r),e(wC,O5r),e(ce,V5r),e(ce,AC),e(AC,N1e),e(N1e,X5r),e(AC,z5r),e(AC,JH),e(JH,Q5r),e(AC,W5r),e(ce,H5r),e(ce,yC),e(yC,j1e),e(j1e,U5r),e(yC,J5r),e(yC,YH),e(YH,Y5r),e(yC,K5r),e(ce,Z5r),e(ce,LC),e(LC,D1e),e(D1e,eCr),e(LC,oCr),e(LC,KH),e(KH,rCr),e(LC,tCr),e(ce,aCr),e(ce,xC),e(xC,G1e),e(G1e,nCr),e(xC,sCr),e(xC,ZH),e(ZH,lCr),e(xC,iCr),e(ce,dCr),e(ce,$C),e($C,O1e),e(O1e,cCr),e($C,mCr),e($C,eU),e(eU,fCr),e($C,gCr),e(Ir,hCr),M(kC,Ir,null),b(m,SIe,_),b(m,vc,_),e(vc,SC),e(SC,V1e),M(xx,V1e,null),e(vc,uCr),e(vc,X1e),e(X1e,pCr),b(m,RIe,_),b(m,dr,_),M($x,dr,null),e(dr,_Cr),e(dr,Tc),e(Tc,bCr),e(Tc,oU),e(oU,FCr),e(Tc,vCr),e(Tc,rU),e(rU,TCr),e(Tc,MCr),e(dr,ECr),e(dr,kx),e(kx,CCr),e(kx,z1e),e(z1e,wCr),e(kx,ACr),e(dr,yCr),e(dr,qt),M(Sx,qt,null),e(qt,LCr),e(qt,Q1e),e(Q1e,xCr),e(qt,$Cr),e(qt,Mc),e(Mc,kCr),e(Mc,W1e),e(W1e,SCr),e(Mc,RCr),e(Mc,tU),e(tU,BCr),e(Mc,PCr),e(qt,ICr),M(RC,qt,null),e(dr,qCr),e(dr,qr),M(Rx,qr,null),e(qr,NCr),e(qr,H1e),e(H1e,jCr),e(qr,DCr),e(qr,mn),e(mn,GCr),e(mn,U1e),e(U1e,OCr),e(mn,VCr),e(mn,J1e),e(J1e,XCr),e(mn,zCr),e(mn,Y1e),e(Y1e,QCr),e(mn,WCr),e(qr,HCr),e(qr,K1e),e(K1e,BC),e(BC,Z1e),e(Z1e,UCr),e(BC,JCr),e(BC,aU),e(aU,YCr),e(BC,KCr),e(qr,ZCr),M(PC,qr,null),b(m,BIe,_),b(m,Ec,_),e(Ec,IC),e(IC,eTe),M(Bx,eTe,null),e(Ec,e3r),e(Ec,oTe),e(oTe,o3r),b(m,PIe,_),b(m,cr,_),M(Px,cr,null),e(cr,r3r),e(cr,Cc),e(Cc,t3r),e(Cc,nU),e(nU,a3r),e(Cc,n3r),e(Cc,sU),e(sU,s3r),e(Cc,l3r),e(cr,i3r),e(cr,Ix),e(Ix,d3r),e(Ix,rTe),e(rTe,c3r),e(Ix,m3r),e(cr,f3r),e(cr,Nt),M(qx,Nt,null),e(Nt,g3r),e(Nt,tTe),e(tTe,h3r),e(Nt,u3r),e(Nt,wc),e(wc,p3r),e(wc,aTe),e(aTe,_3r),e(wc,b3r),e(wc,lU),e(lU,F3r),e(wc,v3r),e(Nt,T3r),M(qC,Nt,null),e(cr,M3r),e(cr,Nr),M(Nx,Nr,null),e(Nr,E3r),e(Nr,nTe),e(nTe,C3r),e(Nr,w3r),e(Nr,fn),e(fn,A3r),e(fn,sTe),e(sTe,y3r),e(fn,L3r),e(fn,lTe),e(lTe,x3r),e(fn,$3r),e(fn,iTe),e(iTe,k3r),e(fn,S3r),e(Nr,R3r),e(Nr,dTe),e(dTe,NC),e(NC,cTe),e(cTe,B3r),e(NC,P3r),e(NC,iU),e(iU,I3r),e(NC,q3r),e(Nr,N3r),M(jC,Nr,null),b(m,IIe,_),b(m,Ac,_),e(Ac,DC),e(DC,mTe),M(jx,mTe,null),e(Ac,j3r),e(Ac,fTe),e(fTe,D3r),b(m,qIe,_),b(m,mr,_),M(Dx,mr,null),e(mr,G3r),e(mr,yc),e(yc,O3r),e(yc,dU),e(dU,V3r),e(yc,X3r),e(yc,cU),e(cU,z3r),e(yc,Q3r),e(mr,W3r),e(mr,Gx),e(Gx,H3r),e(Gx,gTe),e(gTe,U3r),e(Gx,J3r),e(mr,Y3r),e(mr,jt),M(Ox,jt,null),e(jt,K3r),e(jt,hTe),e(hTe,Z3r),e(jt,ewr),e(jt,Lc),e(Lc,owr),e(Lc,uTe),e(uTe,rwr),e(Lc,twr),e(Lc,mU),e(mU,awr),e(Lc,nwr),e(jt,swr),M(GC,jt,null),e(mr,lwr),e(mr,jr),M(Vx,jr,null),e(jr,iwr),e(jr,pTe),e(pTe,dwr),e(jr,cwr),e(jr,gn),e(gn,mwr),e(gn,_Te),e(_Te,fwr),e(gn,gwr),e(gn,bTe),e(bTe,hwr),e(gn,uwr),e(gn,FTe),e(FTe,pwr),e(gn,_wr),e(jr,bwr),e(jr,oe),e(oe,OC),e(OC,vTe),e(vTe,Fwr),e(OC,vwr),e(OC,fU),e(fU,Twr),e(OC,Mwr),e(oe,Ewr),e(oe,VC),e(VC,TTe),e(TTe,Cwr),e(VC,wwr),e(VC,gU),e(gU,Awr),e(VC,ywr),e(oe,Lwr),e(oe,XC),e(XC,MTe),e(MTe,xwr),e(XC,$wr),e(XC,hU),e(hU,kwr),e(XC,Swr),e(oe,Rwr),e(oe,zC),e(zC,ETe),e(ETe,Bwr),e(zC,Pwr),e(zC,uU),e(uU,Iwr),e(zC,qwr),e(oe,Nwr),e(oe,QC),e(QC,CTe),e(CTe,jwr),e(QC,Dwr),e(QC,pU),e(pU,Gwr),e(QC,Owr),e(oe,Vwr),e(oe,WC),e(WC,wTe),e(wTe,Xwr),e(WC,zwr),e(WC,_U),e(_U,Qwr),e(WC,Wwr),e(oe,Hwr),e(oe,HC),e(HC,ATe),e(ATe,Uwr),e(HC,Jwr),e(HC,bU),e(bU,Ywr),e(HC,Kwr),e(oe,Zwr),e(oe,UC),e(UC,yTe),e(yTe,eAr),e(UC,oAr),e(UC,FU),e(FU,rAr),e(UC,tAr),e(oe,aAr),e(oe,JC),e(JC,LTe),e(LTe,nAr),e(JC,sAr),e(JC,vU),e(vU,lAr),e(JC,iAr),e(oe,dAr),e(oe,YC),e(YC,xTe),e(xTe,cAr),e(YC,mAr),e(YC,TU),e(TU,fAr),e(YC,gAr),e(oe,hAr),e(oe,KC),e(KC,$Te),e($Te,uAr),e(KC,pAr),e(KC,MU),e(MU,_Ar),e(KC,bAr),e(oe,FAr),e(oe,ZC),e(ZC,kTe),e(kTe,vAr),e(ZC,TAr),e(ZC,EU),e(EU,MAr),e(ZC,EAr),e(oe,CAr),e(oe,e3),e(e3,STe),e(STe,wAr),e(e3,AAr),e(e3,CU),e(CU,yAr),e(e3,LAr),e(oe,xAr),e(oe,o3),e(o3,RTe),e(RTe,$Ar),e(o3,kAr),e(o3,wU),e(wU,SAr),e(o3,RAr),e(oe,BAr),e(oe,r3),e(r3,BTe),e(BTe,PAr),e(r3,IAr),e(r3,AU),e(AU,qAr),e(r3,NAr),e(oe,jAr),e(oe,t3),e(t3,PTe),e(PTe,DAr),e(t3,GAr),e(t3,yU),e(yU,OAr),e(t3,VAr),e(oe,XAr),e(oe,a3),e(a3,ITe),e(ITe,zAr),e(a3,QAr),e(a3,LU),e(LU,WAr),e(a3,HAr),e(oe,UAr),e(oe,n3),e(n3,qTe),e(qTe,JAr),e(n3,YAr),e(n3,xU),e(xU,KAr),e(n3,ZAr),e(oe,e0r),e(oe,s3),e(s3,NTe),e(NTe,o0r),e(s3,r0r),e(s3,$U),e($U,t0r),e(s3,a0r),e(oe,n0r),e(oe,l3),e(l3,jTe),e(jTe,s0r),e(l3,l0r),e(l3,kU),e(kU,i0r),e(l3,d0r),e(oe,c0r),e(oe,i3),e(i3,DTe),e(DTe,m0r),e(i3,f0r),e(i3,SU),e(SU,g0r),e(i3,h0r),e(oe,u0r),e(oe,d3),e(d3,GTe),e(GTe,p0r),e(d3,_0r),e(d3,RU),e(RU,b0r),e(d3,F0r),e(oe,v0r),e(oe,c3),e(c3,OTe),e(OTe,T0r),e(c3,M0r),e(c3,BU),e(BU,E0r),e(c3,C0r),e(oe,w0r),e(oe,m3),e(m3,VTe),e(VTe,A0r),e(m3,y0r),e(m3,PU),e(PU,L0r),e(m3,x0r),e(oe,$0r),e(oe,f3),e(f3,XTe),e(XTe,k0r),e(f3,S0r),e(f3,IU),e(IU,R0r),e(f3,B0r),e(jr,P0r),M(g3,jr,null),b(m,NIe,_),b(m,xc,_),e(xc,h3),e(h3,zTe),M(Xx,zTe,null),e(xc,I0r),e(xc,QTe),e(QTe,q0r),b(m,jIe,_),b(m,fr,_),M(zx,fr,null),e(fr,N0r),e(fr,$c),e($c,j0r),e($c,qU),e(qU,D0r),e($c,G0r),e($c,NU),e(NU,O0r),e($c,V0r),e(fr,X0r),e(fr,Qx),e(Qx,z0r),e(Qx,WTe),e(WTe,Q0r),e(Qx,W0r),e(fr,H0r),e(fr,Dt),M(Wx,Dt,null),e(Dt,U0r),e(Dt,HTe),e(HTe,J0r),e(Dt,Y0r),e(Dt,kc),e(kc,K0r),e(kc,UTe),e(UTe,Z0r),e(kc,e6r),e(kc,jU),e(jU,o6r),e(kc,r6r),e(Dt,t6r),M(u3,Dt,null),e(fr,a6r),e(fr,Dr),M(Hx,Dr,null),e(Dr,n6r),e(Dr,JTe),e(JTe,s6r),e(Dr,l6r),e(Dr,hn),e(hn,i6r),e(hn,YTe),e(YTe,d6r),e(hn,c6r),e(hn,KTe),e(KTe,m6r),e(hn,f6r),e(hn,ZTe),e(ZTe,g6r),e(hn,h6r),e(Dr,u6r),e(Dr,ke),e(ke,p3),e(p3,eMe),e(eMe,p6r),e(p3,_6r),e(p3,DU),e(DU,b6r),e(p3,F6r),e(ke,v6r),e(ke,_3),e(_3,oMe),e(oMe,T6r),e(_3,M6r),e(_3,GU),e(GU,E6r),e(_3,C6r),e(ke,w6r),e(ke,b3),e(b3,rMe),e(rMe,A6r),e(b3,y6r),e(b3,OU),e(OU,L6r),e(b3,x6r),e(ke,$6r),e(ke,F3),e(F3,tMe),e(tMe,k6r),e(F3,S6r),e(F3,VU),e(VU,R6r),e(F3,B6r),e(ke,P6r),e(ke,v3),e(v3,aMe),e(aMe,I6r),e(v3,q6r),e(v3,XU),e(XU,N6r),e(v3,j6r),e(ke,D6r),e(ke,T3),e(T3,nMe),e(nMe,G6r),e(T3,O6r),e(T3,zU),e(zU,V6r),e(T3,X6r),e(ke,z6r),e(ke,M3),e(M3,sMe),e(sMe,Q6r),e(M3,W6r),e(M3,QU),e(QU,H6r),e(M3,U6r),e(ke,J6r),e(ke,E3),e(E3,lMe),e(lMe,Y6r),e(E3,K6r),e(E3,WU),e(WU,Z6r),e(E3,eyr),e(ke,oyr),e(ke,C3),e(C3,iMe),e(iMe,ryr),e(C3,tyr),e(C3,HU),e(HU,ayr),e(C3,nyr),e(Dr,syr),M(w3,Dr,null),b(m,DIe,_),b(m,Sc,_),e(Sc,A3),e(A3,dMe),M(Ux,dMe,null),e(Sc,lyr),e(Sc,cMe),e(cMe,iyr),b(m,GIe,_),b(m,gr,_),M(Jx,gr,null),e(gr,dyr),e(gr,Rc),e(Rc,cyr),e(Rc,UU),e(UU,myr),e(Rc,fyr),e(Rc,JU),e(JU,gyr),e(Rc,hyr),e(gr,uyr),e(gr,Yx),e(Yx,pyr),e(Yx,mMe),e(mMe,_yr),e(Yx,byr),e(gr,Fyr),e(gr,Gt),M(Kx,Gt,null),e(Gt,vyr),e(Gt,fMe),e(fMe,Tyr),e(Gt,Myr),e(Gt,Bc),e(Bc,Eyr),e(Bc,gMe),e(gMe,Cyr),e(Bc,wyr),e(Bc,YU),e(YU,Ayr),e(Bc,yyr),e(Gt,Lyr),M(y3,Gt,null),e(gr,xyr),e(gr,Gr),M(Zx,Gr,null),e(Gr,$yr),e(Gr,hMe),e(hMe,kyr),e(Gr,Syr),e(Gr,un),e(un,Ryr),e(un,uMe),e(uMe,Byr),e(un,Pyr),e(un,pMe),e(pMe,Iyr),e(un,qyr),e(un,_Me),e(_Me,Nyr),e(un,jyr),e(Gr,Dyr),e(Gr,Me),e(Me,L3),e(L3,bMe),e(bMe,Gyr),e(L3,Oyr),e(L3,KU),e(KU,Vyr),e(L3,Xyr),e(Me,zyr),e(Me,x3),e(x3,FMe),e(FMe,Qyr),e(x3,Wyr),e(x3,ZU),e(ZU,Hyr),e(x3,Uyr),e(Me,Jyr),e(Me,$3),e($3,vMe),e(vMe,Yyr),e($3,Kyr),e($3,eJ),e(eJ,Zyr),e($3,eLr),e(Me,oLr),e(Me,k3),e(k3,TMe),e(TMe,rLr),e(k3,tLr),e(k3,oJ),e(oJ,aLr),e(k3,nLr),e(Me,sLr),e(Me,S3),e(S3,MMe),e(MMe,lLr),e(S3,iLr),e(S3,rJ),e(rJ,dLr),e(S3,cLr),e(Me,mLr),e(Me,R3),e(R3,EMe),e(EMe,fLr),e(R3,gLr),e(R3,tJ),e(tJ,hLr),e(R3,uLr),e(Me,pLr),e(Me,B3),e(B3,CMe),e(CMe,_Lr),e(B3,bLr),e(B3,aJ),e(aJ,FLr),e(B3,vLr),e(Me,TLr),e(Me,P3),e(P3,wMe),e(wMe,MLr),e(P3,ELr),e(P3,nJ),e(nJ,CLr),e(P3,wLr),e(Me,ALr),e(Me,I3),e(I3,AMe),e(AMe,yLr),e(I3,LLr),e(I3,sJ),e(sJ,xLr),e(I3,$Lr),e(Me,kLr),e(Me,q3),e(q3,yMe),e(yMe,SLr),e(q3,RLr),e(q3,lJ),e(lJ,BLr),e(q3,PLr),e(Me,ILr),e(Me,N3),e(N3,LMe),e(LMe,qLr),e(N3,NLr),e(N3,iJ),e(iJ,jLr),e(N3,DLr),e(Me,GLr),e(Me,j3),e(j3,xMe),e(xMe,OLr),e(j3,VLr),e(j3,dJ),e(dJ,XLr),e(j3,zLr),e(Gr,QLr),M(D3,Gr,null),b(m,OIe,_),b(m,Pc,_),e(Pc,G3),e(G3,$Me),M(e7,$Me,null),e(Pc,WLr),e(Pc,kMe),e(kMe,HLr),b(m,VIe,_),b(m,hr,_),M(o7,hr,null),e(hr,ULr),e(hr,Ic),e(Ic,JLr),e(Ic,cJ),e(cJ,YLr),e(Ic,KLr),e(Ic,mJ),e(mJ,ZLr),e(Ic,e8r),e(hr,o8r),e(hr,r7),e(r7,r8r),e(r7,SMe),e(SMe,t8r),e(r7,a8r),e(hr,n8r),e(hr,Ot),M(t7,Ot,null),e(Ot,s8r),e(Ot,RMe),e(RMe,l8r),e(Ot,i8r),e(Ot,qc),e(qc,d8r),e(qc,BMe),e(BMe,c8r),e(qc,m8r),e(qc,fJ),e(fJ,f8r),e(qc,g8r),e(Ot,h8r),M(O3,Ot,null),e(hr,u8r),e(hr,Or),M(a7,Or,null),e(Or,p8r),e(Or,PMe),e(PMe,_8r),e(Or,b8r),e(Or,pn),e(pn,F8r),e(pn,IMe),e(IMe,v8r),e(pn,T8r),e(pn,qMe),e(qMe,M8r),e(pn,E8r),e(pn,NMe),e(NMe,C8r),e(pn,w8r),e(Or,A8r),e(Or,Le),e(Le,V3),e(V3,jMe),e(jMe,y8r),e(V3,L8r),e(V3,gJ),e(gJ,x8r),e(V3,$8r),e(Le,k8r),e(Le,X3),e(X3,DMe),e(DMe,S8r),e(X3,R8r),e(X3,hJ),e(hJ,B8r),e(X3,P8r),e(Le,I8r),e(Le,z3),e(z3,GMe),e(GMe,q8r),e(z3,N8r),e(z3,uJ),e(uJ,j8r),e(z3,D8r),e(Le,G8r),e(Le,Q3),e(Q3,OMe),e(OMe,O8r),e(Q3,V8r),e(Q3,pJ),e(pJ,X8r),e(Q3,z8r),e(Le,Q8r),e(Le,W3),e(W3,VMe),e(VMe,W8r),e(W3,H8r),e(W3,_J),e(_J,U8r),e(W3,J8r),e(Le,Y8r),e(Le,H3),e(H3,XMe),e(XMe,K8r),e(H3,Z8r),e(H3,bJ),e(bJ,exr),e(H3,oxr),e(Le,rxr),e(Le,U3),e(U3,zMe),e(zMe,txr),e(U3,axr),e(U3,FJ),e(FJ,nxr),e(U3,sxr),e(Le,lxr),e(Le,J3),e(J3,QMe),e(QMe,ixr),e(J3,dxr),e(J3,vJ),e(vJ,cxr),e(J3,mxr),e(Le,fxr),e(Le,Y3),e(Y3,WMe),e(WMe,gxr),e(Y3,hxr),e(Y3,TJ),e(TJ,uxr),e(Y3,pxr),e(Le,_xr),e(Le,K3),e(K3,HMe),e(HMe,bxr),e(K3,Fxr),e(K3,MJ),e(MJ,vxr),e(K3,Txr),e(Or,Mxr),M(Z3,Or,null),b(m,XIe,_),b(m,Nc,_),e(Nc,ew),e(ew,UMe),M(n7,UMe,null),e(Nc,Exr),e(Nc,JMe),e(JMe,Cxr),b(m,zIe,_),b(m,ur,_),M(s7,ur,null),e(ur,wxr),e(ur,jc),e(jc,Axr),e(jc,EJ),e(EJ,yxr),e(jc,Lxr),e(jc,CJ),e(CJ,xxr),e(jc,$xr),e(ur,kxr),e(ur,l7),e(l7,Sxr),e(l7,YMe),e(YMe,Rxr),e(l7,Bxr),e(ur,Pxr),e(ur,Vt),M(i7,Vt,null),e(Vt,Ixr),e(Vt,KMe),e(KMe,qxr),e(Vt,Nxr),e(Vt,Dc),e(Dc,jxr),e(Dc,ZMe),e(ZMe,Dxr),e(Dc,Gxr),e(Dc,wJ),e(wJ,Oxr),e(Dc,Vxr),e(Vt,Xxr),M(ow,Vt,null),e(ur,zxr),e(ur,Vr),M(d7,Vr,null),e(Vr,Qxr),e(Vr,e4e),e(e4e,Wxr),e(Vr,Hxr),e(Vr,_n),e(_n,Uxr),e(_n,o4e),e(o4e,Jxr),e(_n,Yxr),e(_n,r4e),e(r4e,Kxr),e(_n,Zxr),e(_n,t4e),e(t4e,e7r),e(_n,o7r),e(Vr,r7r),e(Vr,Se),e(Se,rw),e(rw,a4e),e(a4e,t7r),e(rw,a7r),e(rw,AJ),e(AJ,n7r),e(rw,s7r),e(Se,l7r),e(Se,tw),e(tw,n4e),e(n4e,i7r),e(tw,d7r),e(tw,yJ),e(yJ,c7r),e(tw,m7r),e(Se,f7r),e(Se,aw),e(aw,s4e),e(s4e,g7r),e(aw,h7r),e(aw,LJ),e(LJ,u7r),e(aw,p7r),e(Se,_7r),e(Se,nw),e(nw,l4e),e(l4e,b7r),e(nw,F7r),e(nw,xJ),e(xJ,v7r),e(nw,T7r),e(Se,M7r),e(Se,sw),e(sw,i4e),e(i4e,E7r),e(sw,C7r),e(sw,$J),e($J,w7r),e(sw,A7r),e(Se,y7r),e(Se,lw),e(lw,d4e),e(d4e,L7r),e(lw,x7r),e(lw,kJ),e(kJ,$7r),e(lw,k7r),e(Se,S7r),e(Se,iw),e(iw,c4e),e(c4e,R7r),e(iw,B7r),e(iw,SJ),e(SJ,P7r),e(iw,I7r),e(Se,q7r),e(Se,dw),e(dw,m4e),e(m4e,N7r),e(dw,j7r),e(dw,RJ),e(RJ,D7r),e(dw,G7r),e(Se,O7r),e(Se,cw),e(cw,f4e),e(f4e,V7r),e(cw,X7r),e(cw,BJ),e(BJ,z7r),e(cw,Q7r),e(Vr,W7r),M(mw,Vr,null),b(m,QIe,_),b(m,Gc,_),e(Gc,fw),e(fw,g4e),M(c7,g4e,null),e(Gc,H7r),e(Gc,h4e),e(h4e,U7r),b(m,WIe,_),b(m,pr,_),M(m7,pr,null),e(pr,J7r),e(pr,Oc),e(Oc,Y7r),e(Oc,PJ),e(PJ,K7r),e(Oc,Z7r),e(Oc,IJ),e(IJ,e9r),e(Oc,o9r),e(pr,r9r),e(pr,f7),e(f7,t9r),e(f7,u4e),e(u4e,a9r),e(f7,n9r),e(pr,s9r),e(pr,Xt),M(g7,Xt,null),e(Xt,l9r),e(Xt,p4e),e(p4e,i9r),e(Xt,d9r),e(Xt,Vc),e(Vc,c9r),e(Vc,_4e),e(_4e,m9r),e(Vc,f9r),e(Vc,qJ),e(qJ,g9r),e(Vc,h9r),e(Xt,u9r),M(gw,Xt,null),e(pr,p9r),e(pr,Xr),M(h7,Xr,null),e(Xr,_9r),e(Xr,b4e),e(b4e,b9r),e(Xr,F9r),e(Xr,bn),e(bn,v9r),e(bn,F4e),e(F4e,T9r),e(bn,M9r),e(bn,v4e),e(v4e,E9r),e(bn,C9r),e(bn,T4e),e(T4e,w9r),e(bn,A9r),e(Xr,y9r),e(Xr,xe),e(xe,hw),e(hw,M4e),e(M4e,L9r),e(hw,x9r),e(hw,NJ),e(NJ,$9r),e(hw,k9r),e(xe,S9r),e(xe,uw),e(uw,E4e),e(E4e,R9r),e(uw,B9r),e(uw,jJ),e(jJ,P9r),e(uw,I9r),e(xe,q9r),e(xe,pw),e(pw,C4e),e(C4e,N9r),e(pw,j9r),e(pw,DJ),e(DJ,D9r),e(pw,G9r),e(xe,O9r),e(xe,_w),e(_w,w4e),e(w4e,V9r),e(_w,X9r),e(_w,GJ),e(GJ,z9r),e(_w,Q9r),e(xe,W9r),e(xe,bw),e(bw,A4e),e(A4e,H9r),e(bw,U9r),e(bw,OJ),e(OJ,J9r),e(bw,Y9r),e(xe,K9r),e(xe,Fw),e(Fw,y4e),e(y4e,Z9r),e(Fw,e$r),e(Fw,VJ),e(VJ,o$r),e(Fw,r$r),e(xe,t$r),e(xe,vw),e(vw,L4e),e(L4e,a$r),e(vw,n$r),e(vw,XJ),e(XJ,s$r),e(vw,l$r),e(xe,i$r),e(xe,Tw),e(Tw,x4e),e(x4e,d$r),e(Tw,c$r),e(Tw,zJ),e(zJ,m$r),e(Tw,f$r),e(xe,g$r),e(xe,Mw),e(Mw,$4e),e($4e,h$r),e(Mw,u$r),e(Mw,QJ),e(QJ,p$r),e(Mw,_$r),e(xe,b$r),e(xe,Ew),e(Ew,k4e),e(k4e,F$r),e(Ew,v$r),e(Ew,WJ),e(WJ,T$r),e(Ew,M$r),e(Xr,E$r),M(Cw,Xr,null),b(m,HIe,_),b(m,Xc,_),e(Xc,ww),e(ww,S4e),M(u7,S4e,null),e(Xc,C$r),e(Xc,R4e),e(R4e,w$r),b(m,UIe,_),b(m,_r,_),M(p7,_r,null),e(_r,A$r),e(_r,zc),e(zc,y$r),e(zc,HJ),e(HJ,L$r),e(zc,x$r),e(zc,UJ),e(UJ,$$r),e(zc,k$r),e(_r,S$r),e(_r,_7),e(_7,R$r),e(_7,B4e),e(B4e,B$r),e(_7,P$r),e(_r,I$r),e(_r,zt),M(b7,zt,null),e(zt,q$r),e(zt,P4e),e(P4e,N$r),e(zt,j$r),e(zt,Qc),e(Qc,D$r),e(Qc,I4e),e(I4e,G$r),e(Qc,O$r),e(Qc,JJ),e(JJ,V$r),e(Qc,X$r),e(zt,z$r),M(Aw,zt,null),e(_r,Q$r),e(_r,zr),M(F7,zr,null),e(zr,W$r),e(zr,q4e),e(q4e,H$r),e(zr,U$r),e(zr,Fn),e(Fn,J$r),e(Fn,N4e),e(N4e,Y$r),e(Fn,K$r),e(Fn,j4e),e(j4e,Z$r),e(Fn,ekr),e(Fn,D4e),e(D4e,okr),e(Fn,rkr),e(zr,tkr),e(zr,$e),e($e,yw),e(yw,G4e),e(G4e,akr),e(yw,nkr),e(yw,YJ),e(YJ,skr),e(yw,lkr),e($e,ikr),e($e,Lw),e(Lw,O4e),e(O4e,dkr),e(Lw,ckr),e(Lw,KJ),e(KJ,mkr),e(Lw,fkr),e($e,gkr),e($e,xw),e(xw,V4e),e(V4e,hkr),e(xw,ukr),e(xw,ZJ),e(ZJ,pkr),e(xw,_kr),e($e,bkr),e($e,$w),e($w,X4e),e(X4e,Fkr),e($w,vkr),e($w,eY),e(eY,Tkr),e($w,Mkr),e($e,Ekr),e($e,kw),e(kw,z4e),e(z4e,Ckr),e(kw,wkr),e(kw,oY),e(oY,Akr),e(kw,ykr),e($e,Lkr),e($e,Sw),e(Sw,Q4e),e(Q4e,xkr),e(Sw,$kr),e(Sw,rY),e(rY,kkr),e(Sw,Skr),e($e,Rkr),e($e,Rw),e(Rw,W4e),e(W4e,Bkr),e(Rw,Pkr),e(Rw,tY),e(tY,Ikr),e(Rw,qkr),e($e,Nkr),e($e,Bw),e(Bw,H4e),e(H4e,jkr),e(Bw,Dkr),e(Bw,aY),e(aY,Gkr),e(Bw,Okr),e($e,Vkr),e($e,Pw),e(Pw,U4e),e(U4e,Xkr),e(Pw,zkr),e(Pw,nY),e(nY,Qkr),e(Pw,Wkr),e($e,Hkr),e($e,Iw),e(Iw,J4e),e(J4e,Ukr),e(Iw,Jkr),e(Iw,sY),e(sY,Ykr),e(Iw,Kkr),e(zr,Zkr),M(qw,zr,null),b(m,JIe,_),b(m,Wc,_),e(Wc,Nw),e(Nw,Y4e),M(v7,Y4e,null),e(Wc,eSr),e(Wc,K4e),e(K4e,oSr),b(m,YIe,_),b(m,br,_),M(T7,br,null),e(br,rSr),e(br,Hc),e(Hc,tSr),e(Hc,lY),e(lY,aSr),e(Hc,nSr),e(Hc,iY),e(iY,sSr),e(Hc,lSr),e(br,iSr),e(br,M7),e(M7,dSr),e(M7,Z4e),e(Z4e,cSr),e(M7,mSr),e(br,fSr),e(br,Qt),M(E7,Qt,null),e(Qt,gSr),e(Qt,eEe),e(eEe,hSr),e(Qt,uSr),e(Qt,Uc),e(Uc,pSr),e(Uc,oEe),e(oEe,_Sr),e(Uc,bSr),e(Uc,dY),e(dY,FSr),e(Uc,vSr),e(Qt,TSr),M(jw,Qt,null),e(br,MSr),e(br,Qr),M(C7,Qr,null),e(Qr,ESr),e(Qr,rEe),e(rEe,CSr),e(Qr,wSr),e(Qr,vn),e(vn,ASr),e(vn,tEe),e(tEe,ySr),e(vn,LSr),e(vn,aEe),e(aEe,xSr),e(vn,$Sr),e(vn,nEe),e(nEe,kSr),e(vn,SSr),e(Qr,RSr),e(Qr,De),e(De,Dw),e(Dw,sEe),e(sEe,BSr),e(Dw,PSr),e(Dw,cY),e(cY,ISr),e(Dw,qSr),e(De,NSr),e(De,Gw),e(Gw,lEe),e(lEe,jSr),e(Gw,DSr),e(Gw,mY),e(mY,GSr),e(Gw,OSr),e(De,VSr),e(De,Ow),e(Ow,iEe),e(iEe,XSr),e(Ow,zSr),e(Ow,fY),e(fY,QSr),e(Ow,WSr),e(De,HSr),e(De,Vw),e(Vw,dEe),e(dEe,USr),e(Vw,JSr),e(Vw,gY),e(gY,YSr),e(Vw,KSr),e(De,ZSr),e(De,Xw),e(Xw,cEe),e(cEe,eRr),e(Xw,oRr),e(Xw,hY),e(hY,rRr),e(Xw,tRr),e(De,aRr),e(De,zw),e(zw,mEe),e(mEe,nRr),e(zw,sRr),e(zw,uY),e(uY,lRr),e(zw,iRr),e(De,dRr),e(De,Qw),e(Qw,fEe),e(fEe,cRr),e(Qw,mRr),e(Qw,pY),e(pY,fRr),e(Qw,gRr),e(De,hRr),e(De,Ww),e(Ww,gEe),e(gEe,uRr),e(Ww,pRr),e(Ww,_Y),e(_Y,_Rr),e(Ww,bRr),e(Qr,FRr),M(Hw,Qr,null),b(m,KIe,_),b(m,Jc,_),e(Jc,Uw),e(Uw,hEe),M(w7,hEe,null),e(Jc,vRr),e(Jc,uEe),e(uEe,TRr),b(m,ZIe,_),b(m,Fr,_),M(A7,Fr,null),e(Fr,MRr),e(Fr,Yc),e(Yc,ERr),e(Yc,bY),e(bY,CRr),e(Yc,wRr),e(Yc,FY),e(FY,ARr),e(Yc,yRr),e(Fr,LRr),e(Fr,y7),e(y7,xRr),e(y7,pEe),e(pEe,$Rr),e(y7,kRr),e(Fr,SRr),e(Fr,Wt),M(L7,Wt,null),e(Wt,RRr),e(Wt,_Ee),e(_Ee,BRr),e(Wt,PRr),e(Wt,Kc),e(Kc,IRr),e(Kc,bEe),e(bEe,qRr),e(Kc,NRr),e(Kc,vY),e(vY,jRr),e(Kc,DRr),e(Wt,GRr),M(Jw,Wt,null),e(Fr,ORr),e(Fr,Wr),M(x7,Wr,null),e(Wr,VRr),e(Wr,FEe),e(FEe,XRr),e(Wr,zRr),e(Wr,Tn),e(Tn,QRr),e(Tn,vEe),e(vEe,WRr),e(Tn,HRr),e(Tn,TEe),e(TEe,URr),e(Tn,JRr),e(Tn,MEe),e(MEe,YRr),e(Tn,KRr),e(Wr,ZRr),e(Wr,Ge),e(Ge,Yw),e(Yw,EEe),e(EEe,eBr),e(Yw,oBr),e(Yw,TY),e(TY,rBr),e(Yw,tBr),e(Ge,aBr),e(Ge,Kw),e(Kw,CEe),e(CEe,nBr),e(Kw,sBr),e(Kw,MY),e(MY,lBr),e(Kw,iBr),e(Ge,dBr),e(Ge,Zw),e(Zw,wEe),e(wEe,cBr),e(Zw,mBr),e(Zw,EY),e(EY,fBr),e(Zw,gBr),e(Ge,hBr),e(Ge,eA),e(eA,AEe),e(AEe,uBr),e(eA,pBr),e(eA,CY),e(CY,_Br),e(eA,bBr),e(Ge,FBr),e(Ge,oA),e(oA,yEe),e(yEe,vBr),e(oA,TBr),e(oA,wY),e(wY,MBr),e(oA,EBr),e(Ge,CBr),e(Ge,rA),e(rA,LEe),e(LEe,wBr),e(rA,ABr),e(rA,AY),e(AY,yBr),e(rA,LBr),e(Ge,xBr),e(Ge,tA),e(tA,xEe),e(xEe,$Br),e(tA,kBr),e(tA,yY),e(yY,SBr),e(tA,RBr),e(Ge,BBr),e(Ge,aA),e(aA,$Ee),e($Ee,PBr),e(aA,IBr),e(aA,LY),e(LY,qBr),e(aA,NBr),e(Wr,jBr),M(nA,Wr,null),b(m,eqe,_),b(m,Zc,_),e(Zc,sA),e(sA,kEe),M($7,kEe,null),e(Zc,DBr),e(Zc,SEe),e(SEe,GBr),b(m,oqe,_),b(m,vr,_),M(k7,vr,null),e(vr,OBr),e(vr,em),e(em,VBr),e(em,xY),e(xY,XBr),e(em,zBr),e(em,$Y),e($Y,QBr),e(em,WBr),e(vr,HBr),e(vr,S7),e(S7,UBr),e(S7,REe),e(REe,JBr),e(S7,YBr),e(vr,KBr),e(vr,Ht),M(R7,Ht,null),e(Ht,ZBr),e(Ht,BEe),e(BEe,ePr),e(Ht,oPr),e(Ht,om),e(om,rPr),e(om,PEe),e(PEe,tPr),e(om,aPr),e(om,kY),e(kY,nPr),e(om,sPr),e(Ht,lPr),M(lA,Ht,null),e(vr,iPr),e(vr,Hr),M(B7,Hr,null),e(Hr,dPr),e(Hr,IEe),e(IEe,cPr),e(Hr,mPr),e(Hr,Mn),e(Mn,fPr),e(Mn,qEe),e(qEe,gPr),e(Mn,hPr),e(Mn,NEe),e(NEe,uPr),e(Mn,pPr),e(Mn,jEe),e(jEe,_Pr),e(Mn,bPr),e(Hr,FPr),e(Hr,DEe),e(DEe,iA),e(iA,GEe),e(GEe,vPr),e(iA,TPr),e(iA,SY),e(SY,MPr),e(iA,EPr),e(Hr,CPr),M(dA,Hr,null),b(m,rqe,_),b(m,rm,_),e(rm,cA),e(cA,OEe),M(P7,OEe,null),e(rm,wPr),e(rm,VEe),e(VEe,APr),b(m,tqe,_),b(m,Tr,_),M(I7,Tr,null),e(Tr,yPr),e(Tr,tm),e(tm,LPr),e(tm,RY),e(RY,xPr),e(tm,$Pr),e(tm,BY),e(BY,kPr),e(tm,SPr),e(Tr,RPr),e(Tr,q7),e(q7,BPr),e(q7,XEe),e(XEe,PPr),e(q7,IPr),e(Tr,qPr),e(Tr,Ut),M(N7,Ut,null),e(Ut,NPr),e(Ut,zEe),e(zEe,jPr),e(Ut,DPr),e(Ut,am),e(am,GPr),e(am,QEe),e(QEe,OPr),e(am,VPr),e(am,PY),e(PY,XPr),e(am,zPr),e(Ut,QPr),M(mA,Ut,null),e(Tr,WPr),e(Tr,Ur),M(j7,Ur,null),e(Ur,HPr),e(Ur,WEe),e(WEe,UPr),e(Ur,JPr),e(Ur,En),e(En,YPr),e(En,HEe),e(HEe,KPr),e(En,ZPr),e(En,UEe),e(UEe,eIr),e(En,oIr),e(En,JEe),e(JEe,rIr),e(En,tIr),e(Ur,aIr),e(Ur,D7),e(D7,fA),e(fA,YEe),e(YEe,nIr),e(fA,sIr),e(fA,IY),e(IY,lIr),e(fA,iIr),e(D7,dIr),e(D7,gA),e(gA,KEe),e(KEe,cIr),e(gA,mIr),e(gA,qY),e(qY,fIr),e(gA,gIr),e(Ur,hIr),M(hA,Ur,null),b(m,aqe,_),b(m,nm,_),e(nm,uA),e(uA,ZEe),M(G7,ZEe,null),e(nm,uIr),e(nm,e5e),e(e5e,pIr),b(m,nqe,_),b(m,Mr,_),M(O7,Mr,null),e(Mr,_Ir),e(Mr,sm),e(sm,bIr),e(sm,NY),e(NY,FIr),e(sm,vIr),e(sm,jY),e(jY,TIr),e(sm,MIr),e(Mr,EIr),e(Mr,V7),e(V7,CIr),e(V7,o5e),e(o5e,wIr),e(V7,AIr),e(Mr,yIr),e(Mr,Jt),M(X7,Jt,null),e(Jt,LIr),e(Jt,r5e),e(r5e,xIr),e(Jt,$Ir),e(Jt,lm),e(lm,kIr),e(lm,t5e),e(t5e,SIr),e(lm,RIr),e(lm,DY),e(DY,BIr),e(lm,PIr),e(Jt,IIr),M(pA,Jt,null),e(Mr,qIr),e(Mr,Jr),M(z7,Jr,null),e(Jr,NIr),e(Jr,a5e),e(a5e,jIr),e(Jr,DIr),e(Jr,Cn),e(Cn,GIr),e(Cn,n5e),e(n5e,OIr),e(Cn,VIr),e(Cn,s5e),e(s5e,XIr),e(Cn,zIr),e(Cn,l5e),e(l5e,QIr),e(Cn,WIr),e(Jr,HIr),e(Jr,i5e),e(i5e,_A),e(_A,d5e),e(d5e,UIr),e(_A,JIr),e(_A,GY),e(GY,YIr),e(_A,KIr),e(Jr,ZIr),M(bA,Jr,null),sqe=!0},p(m,[_]){const Q7={};_&2&&(Q7.$$scope={dirty:_,ctx:m}),pm.$set(Q7);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:m}),hg.$set(c5e);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:m}),Qg.$set(m5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:m}),Fh.$set(f5e);const W7={};_&2&&(W7.$$scope={dirty:_,ctx:m}),vh.$set(W7);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:m}),qh.$set(g5e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:m}),Nh.$set(wn);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:m}),Gh.$set(h5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:m}),xp.$set(u5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),kp.$set(p5e);const H7={};_&2&&(H7.$$scope={dirty:_,ctx:m}),b_.$set(H7);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:m}),v_.$set(_5e);const U7={};_&2&&(U7.$$scope={dirty:_,ctx:m}),tb.$set(U7);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:m}),nb.$set(b5e);const J7={};_&2&&(J7.$$scope={dirty:_,ctx:m}),Ob.$set(J7);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:m}),Xb.$set(F5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:m}),d2.$set(v5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:m}),m2.$set(T5e);const im={};_&2&&(im.$$scope={dirty:_,ctx:m}),sF.$set(im);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),iF.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),NF.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),DF.$set(C5e);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:m}),WF.$set(Y7);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),UF.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),$v.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),Sv.$set(y5e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:m}),F1.$set(Kr);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),T1.$set(K7);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),C1.$set(L5e);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),A1.$set(Z7);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:m}),j1.$set(x5e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:m}),G1.$set(Zr);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:m}),X1.$set($5e);const dm={};_&2&&(dm.$$scope={dirty:_,ctx:m}),Q1.$set(dm);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),rT.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),aT.$set(S5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),cT.$set(L);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),fT.$set(FA);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),MT.$set(R5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),CT.$set(B5e);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),LT.$set(vA);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),$T.$set(P5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),IT.$set(I5e);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),NT.$set(TA);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),VT.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),zT.$set(N5e);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),UT.$set(MA);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),YT.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),eM.$set(D5e);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),rM.$set(EA);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),iM.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),cM.$set(O5e);const CA={};_&2&&(CA.$$scope={dirty:_,ctx:m}),gM.$set(CA);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),uM.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),s4.$set(X5e);const wA={};_&2&&(wA.$$scope={dirty:_,ctx:m}),i4.$set(wA);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),S4.$set(z5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),B4.$set(Q5e);const AA={};_&2&&(AA.$$scope={dirty:_,ctx:m}),W4.$set(AA);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),U4.$set(W5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),Z4.$set(H5e);const yA={};_&2&&(yA.$$scope={dirty:_,ctx:m}),oE.$set(yA);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),ME.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),CE.$set(J5e);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),PE.$set(LA);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),qE.$set(Y5e);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),c5.$set(K5e);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),f5.$set(xA);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),$5.$set(Z5e);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:m}),S5.$set(eCe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),P5.$set($A);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:m}),q5.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:m}),j5.$set(rCe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),G5.$set(kA);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:m}),iC.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:m}),cC.$set(aCe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),kC.$set(SA);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:m}),RC.$set(nCe);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:m}),PC.$set(sCe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),qC.$set(RA);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:m}),jC.$set(lCe);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:m}),GC.$set(iCe);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),g3.$set(BA);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:m}),u3.$set(dCe);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:m}),w3.$set(cCe);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),y3.$set(PA);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:m}),D3.$set(mCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:m}),O3.$set(fCe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),Z3.$set(IA);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:m}),ow.$set(gCe);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:m}),mw.$set(hCe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),gw.$set(qA);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:m}),Cw.$set(uCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:m}),Aw.$set(pCe);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),qw.$set(NA);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:m}),jw.$set(_Ce);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:m}),Hw.$set(bCe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),Jw.$set(jA);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:m}),nA.$set(FCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:m}),lA.$set(vCe);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),dA.$set(DA);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:m}),mA.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:m}),hA.$set(MCe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),pA.$set(GA);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:m}),bA.$set(ECe)},i(m){sqe||(E(d.$$.fragment,m),E(Ma.$$.fragment,m),E(G6.$$.fragment,m),E(O6.$$.fragment,m),E(pm.$$.fragment,m),E(V6.$$.fragment,m),E(X6.$$.fragment,m),E(W6.$$.fragment,m),E(hg.$$.fragment,m),E(H6.$$.fragment,m),E(U6.$$.fragment,m),E(J6.$$.fragment,m),E(Z6.$$.fragment,m),E(Qg.$$.fragment,m),E(ey.$$.fragment,m),E(oy.$$.fragment,m),E(ry.$$.fragment,m),E(ny.$$.fragment,m),E(Fh.$$.fragment,m),E(vh.$$.fragment,m),E(sy.$$.fragment,m),E(ly.$$.fragment,m),E(iy.$$.fragment,m),E(my.$$.fragment,m),E(qh.$$.fragment,m),E(Nh.$$.fragment,m),E(fy.$$.fragment,m),E(gy.$$.fragment,m),E(hy.$$.fragment,m),E(py.$$.fragment,m),E(Gh.$$.fragment,m),E(_y.$$.fragment,m),E(xp.$$.fragment,m),E(by.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(kp.$$.fragment,m),E(My.$$.fragment,m),E(b_.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ay.$$.fragment,m),E(v_.$$.fragment,m),E(yy.$$.fragment,m),E(tb.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(ky.$$.fragment,m),E(nb.$$.fragment,m),E(Sy.$$.fragment,m),E(Ob.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(Xb.$$.fragment,m),E(qy.$$.fragment,m),E(d2.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(m2.$$.fragment,m),E(Oy.$$.fragment,m),E(sF.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(iF.$$.fragment,m),E(Wy.$$.fragment,m),E(NF.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(DF.$$.fragment,m),E(Ky.$$.fragment,m),E(WF.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(UF.$$.fragment,m),E(tL.$$.fragment,m),E($v.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(Sv.$$.fragment,m),E(iL.$$.fragment,m),E(F1.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(T1.$$.fragment,m),E(gL.$$.fragment,m),E(C1.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(A1.$$.fragment,m),E(bL.$$.fragment,m),E(j1.$$.fragment,m),E(FL.$$.fragment,m),E(vL.$$.fragment,m),E(ML.$$.fragment,m),E(G1.$$.fragment,m),E(EL.$$.fragment,m),E(X1.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(Q1.$$.fragment,m),E(LL.$$.fragment,m),E(rT.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(aT.$$.fragment,m),E(RL.$$.fragment,m),E(cT.$$.fragment,m),E(BL.$$.fragment,m),E(PL.$$.fragment,m),E(qL.$$.fragment,m),E(fT.$$.fragment,m),E(NL.$$.fragment,m),E(MT.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(CT.$$.fragment,m),E(VL.$$.fragment,m),E(LT.$$.fragment,m),E(zL.$$.fragment,m),E(QL.$$.fragment,m),E(HL.$$.fragment,m),E($T.$$.fragment,m),E(UL.$$.fragment,m),E(IT.$$.fragment,m),E(JL.$$.fragment,m),E(YL.$$.fragment,m),E(ZL.$$.fragment,m),E(NT.$$.fragment,m),E(e8.$$.fragment,m),E(VT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(zT.$$.fragment,m),E(n8.$$.fragment,m),E(UT.$$.fragment,m),E(l8.$$.fragment,m),E(i8.$$.fragment,m),E(c8.$$.fragment,m),E(YT.$$.fragment,m),E(m8.$$.fragment,m),E(eM.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(rM.$$.fragment,m),E(p8.$$.fragment,m),E(iM.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(cM.$$.fragment,m),E(T8.$$.fragment,m),E(gM.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(uM.$$.fragment,m),E(A8.$$.fragment,m),E(s4.$$.fragment,m),E(y8.$$.fragment,m),E(L8.$$.fragment,m),E($8.$$.fragment,m),E(i4.$$.fragment,m),E(k8.$$.fragment,m),E(S4.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(B4.$$.fragment,m),E(I8.$$.fragment,m),E(W4.$$.fragment,m),E(q8.$$.fragment,m),E(N8.$$.fragment,m),E(D8.$$.fragment,m),E(U4.$$.fragment,m),E(G8.$$.fragment,m),E(Z4.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(oE.$$.fragment,m),E(Q8.$$.fragment,m),E(ME.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(CE.$$.fragment,m),E(Y8.$$.fragment,m),E(PE.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(ox.$$.fragment,m),E(qE.$$.fragment,m),E(rx.$$.fragment,m),E(c5.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(f5.$$.fragment,m),E(lx.$$.fragment,m),E($5.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(S5.$$.fragment,m),E(fx.$$.fragment,m),E(P5.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(q5.$$.fragment,m),E(bx.$$.fragment,m),E(j5.$$.fragment,m),E(Fx.$$.fragment,m),E(vx.$$.fragment,m),E(Mx.$$.fragment,m),E(G5.$$.fragment,m),E(Ex.$$.fragment,m),E(iC.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(yx.$$.fragment,m),E(cC.$$.fragment,m),E(Lx.$$.fragment,m),E(kC.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(RC.$$.fragment,m),E(Rx.$$.fragment,m),E(PC.$$.fragment,m),E(Bx.$$.fragment,m),E(Px.$$.fragment,m),E(qx.$$.fragment,m),E(qC.$$.fragment,m),E(Nx.$$.fragment,m),E(jC.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(GC.$$.fragment,m),E(Vx.$$.fragment,m),E(g3.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(u3.$$.fragment,m),E(Hx.$$.fragment,m),E(w3.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(y3.$$.fragment,m),E(Zx.$$.fragment,m),E(D3.$$.fragment,m),E(e7.$$.fragment,m),E(o7.$$.fragment,m),E(t7.$$.fragment,m),E(O3.$$.fragment,m),E(a7.$$.fragment,m),E(Z3.$$.fragment,m),E(n7.$$.fragment,m),E(s7.$$.fragment,m),E(i7.$$.fragment,m),E(ow.$$.fragment,m),E(d7.$$.fragment,m),E(mw.$$.fragment,m),E(c7.$$.fragment,m),E(m7.$$.fragment,m),E(g7.$$.fragment,m),E(gw.$$.fragment,m),E(h7.$$.fragment,m),E(Cw.$$.fragment,m),E(u7.$$.fragment,m),E(p7.$$.fragment,m),E(b7.$$.fragment,m),E(Aw.$$.fragment,m),E(F7.$$.fragment,m),E(qw.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(E7.$$.fragment,m),E(jw.$$.fragment,m),E(C7.$$.fragment,m),E(Hw.$$.fragment,m),E(w7.$$.fragment,m),E(A7.$$.fragment,m),E(L7.$$.fragment,m),E(Jw.$$.fragment,m),E(x7.$$.fragment,m),E(nA.$$.fragment,m),E($7.$$.fragment,m),E(k7.$$.fragment,m),E(R7.$$.fragment,m),E(lA.$$.fragment,m),E(B7.$$.fragment,m),E(dA.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(N7.$$.fragment,m),E(mA.$$.fragment,m),E(j7.$$.fragment,m),E(hA.$$.fragment,m),E(G7.$$.fragment,m),E(O7.$$.fragment,m),E(X7.$$.fragment,m),E(pA.$$.fragment,m),E(z7.$$.fragment,m),E(bA.$$.fragment,m),sqe=!0)},o(m){C(d.$$.fragment,m),C(Ma.$$.fragment,m),C(G6.$$.fragment,m),C(O6.$$.fragment,m),C(pm.$$.fragment,m),C(V6.$$.fragment,m),C(X6.$$.fragment,m),C(W6.$$.fragment,m),C(hg.$$.fragment,m),C(H6.$$.fragment,m),C(U6.$$.fragment,m),C(J6.$$.fragment,m),C(Z6.$$.fragment,m),C(Qg.$$.fragment,m),C(ey.$$.fragment,m),C(oy.$$.fragment,m),C(ry.$$.fragment,m),C(ny.$$.fragment,m),C(Fh.$$.fragment,m),C(vh.$$.fragment,m),C(sy.$$.fragment,m),C(ly.$$.fragment,m),C(iy.$$.fragment,m),C(my.$$.fragment,m),C(qh.$$.fragment,m),C(Nh.$$.fragment,m),C(fy.$$.fragment,m),C(gy.$$.fragment,m),C(hy.$$.fragment,m),C(py.$$.fragment,m),C(Gh.$$.fragment,m),C(_y.$$.fragment,m),C(xp.$$.fragment,m),C(by.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(kp.$$.fragment,m),C(My.$$.fragment,m),C(b_.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ay.$$.fragment,m),C(v_.$$.fragment,m),C(yy.$$.fragment,m),C(tb.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(ky.$$.fragment,m),C(nb.$$.fragment,m),C(Sy.$$.fragment,m),C(Ob.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(Xb.$$.fragment,m),C(qy.$$.fragment,m),C(d2.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(m2.$$.fragment,m),C(Oy.$$.fragment,m),C(sF.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(iF.$$.fragment,m),C(Wy.$$.fragment,m),C(NF.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(DF.$$.fragment,m),C(Ky.$$.fragment,m),C(WF.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(UF.$$.fragment,m),C(tL.$$.fragment,m),C($v.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(Sv.$$.fragment,m),C(iL.$$.fragment,m),C(F1.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(T1.$$.fragment,m),C(gL.$$.fragment,m),C(C1.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(A1.$$.fragment,m),C(bL.$$.fragment,m),C(j1.$$.fragment,m),C(FL.$$.fragment,m),C(vL.$$.fragment,m),C(ML.$$.fragment,m),C(G1.$$.fragment,m),C(EL.$$.fragment,m),C(X1.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(Q1.$$.fragment,m),C(LL.$$.fragment,m),C(rT.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(aT.$$.fragment,m),C(RL.$$.fragment,m),C(cT.$$.fragment,m),C(BL.$$.fragment,m),C(PL.$$.fragment,m),C(qL.$$.fragment,m),C(fT.$$.fragment,m),C(NL.$$.fragment,m),C(MT.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(CT.$$.fragment,m),C(VL.$$.fragment,m),C(LT.$$.fragment,m),C(zL.$$.fragment,m),C(QL.$$.fragment,m),C(HL.$$.fragment,m),C($T.$$.fragment,m),C(UL.$$.fragment,m),C(IT.$$.fragment,m),C(JL.$$.fragment,m),C(YL.$$.fragment,m),C(ZL.$$.fragment,m),C(NT.$$.fragment,m),C(e8.$$.fragment,m),C(VT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(zT.$$.fragment,m),C(n8.$$.fragment,m),C(UT.$$.fragment,m),C(l8.$$.fragment,m),C(i8.$$.fragment,m),C(c8.$$.fragment,m),C(YT.$$.fragment,m),C(m8.$$.fragment,m),C(eM.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(rM.$$.fragment,m),C(p8.$$.fragment,m),C(iM.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(cM.$$.fragment,m),C(T8.$$.fragment,m),C(gM.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(uM.$$.fragment,m),C(A8.$$.fragment,m),C(s4.$$.fragment,m),C(y8.$$.fragment,m),C(L8.$$.fragment,m),C($8.$$.fragment,m),C(i4.$$.fragment,m),C(k8.$$.fragment,m),C(S4.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(B4.$$.fragment,m),C(I8.$$.fragment,m),C(W4.$$.fragment,m),C(q8.$$.fragment,m),C(N8.$$.fragment,m),C(D8.$$.fragment,m),C(U4.$$.fragment,m),C(G8.$$.fragment,m),C(Z4.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(oE.$$.fragment,m),C(Q8.$$.fragment,m),C(ME.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(CE.$$.fragment,m),C(Y8.$$.fragment,m),C(PE.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(ox.$$.fragment,m),C(qE.$$.fragment,m),C(rx.$$.fragment,m),C(c5.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(f5.$$.fragment,m),C(lx.$$.fragment,m),C($5.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(S5.$$.fragment,m),C(fx.$$.fragment,m),C(P5.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(q5.$$.fragment,m),C(bx.$$.fragment,m),C(j5.$$.fragment,m),C(Fx.$$.fragment,m),C(vx.$$.fragment,m),C(Mx.$$.fragment,m),C(G5.$$.fragment,m),C(Ex.$$.fragment,m),C(iC.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(yx.$$.fragment,m),C(cC.$$.fragment,m),C(Lx.$$.fragment,m),C(kC.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(RC.$$.fragment,m),C(Rx.$$.fragment,m),C(PC.$$.fragment,m),C(Bx.$$.fragment,m),C(Px.$$.fragment,m),C(qx.$$.fragment,m),C(qC.$$.fragment,m),C(Nx.$$.fragment,m),C(jC.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(GC.$$.fragment,m),C(Vx.$$.fragment,m),C(g3.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(u3.$$.fragment,m),C(Hx.$$.fragment,m),C(w3.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(y3.$$.fragment,m),C(Zx.$$.fragment,m),C(D3.$$.fragment,m),C(e7.$$.fragment,m),C(o7.$$.fragment,m),C(t7.$$.fragment,m),C(O3.$$.fragment,m),C(a7.$$.fragment,m),C(Z3.$$.fragment,m),C(n7.$$.fragment,m),C(s7.$$.fragment,m),C(i7.$$.fragment,m),C(ow.$$.fragment,m),C(d7.$$.fragment,m),C(mw.$$.fragment,m),C(c7.$$.fragment,m),C(m7.$$.fragment,m),C(g7.$$.fragment,m),C(gw.$$.fragment,m),C(h7.$$.fragment,m),C(Cw.$$.fragment,m),C(u7.$$.fragment,m),C(p7.$$.fragment,m),C(b7.$$.fragment,m),C(Aw.$$.fragment,m),C(F7.$$.fragment,m),C(qw.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(E7.$$.fragment,m),C(jw.$$.fragment,m),C(C7.$$.fragment,m),C(Hw.$$.fragment,m),C(w7.$$.fragment,m),C(A7.$$.fragment,m),C(L7.$$.fragment,m),C(Jw.$$.fragment,m),C(x7.$$.fragment,m),C(nA.$$.fragment,m),C($7.$$.fragment,m),C(k7.$$.fragment,m),C(R7.$$.fragment,m),C(lA.$$.fragment,m),C(B7.$$.fragment,m),C(dA.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(N7.$$.fragment,m),C(mA.$$.fragment,m),C(j7.$$.fragment,m),C(hA.$$.fragment,m),C(G7.$$.fragment,m),C(O7.$$.fragment,m),C(X7.$$.fragment,m),C(pA.$$.fragment,m),C(z7.$$.fragment,m),C(bA.$$.fragment,m),sqe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(mm),m&&t(et),m&&t(qe),m&&t(Xe),m&&t(gm),w(Ma,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(Ea),m&&t(tPe),m&&t(hi),w(G6),m&&t(aPe),m&&t($n),m&&t(nPe),w(O6,m),m&&t(sPe),m&&t(d$),m&&t(lPe),w(pm,m),m&&t(iPe),m&&t(ui),w(V6),m&&t(dPe),m&&t(Co),w(X6),w(W6),w(hg),w(H6),m&&t(cPe),m&&t(_i),w(U6),m&&t(mPe),m&&t(wo),w(J6),w(Z6),w(Qg),w(ey),m&&t(fPe),m&&t(bi),w(oy),m&&t(gPe),m&&t(Ao),w(ry),w(ny),w(Fh),w(vh),w(sy),m&&t(hPe),m&&t(Fi),w(ly),m&&t(uPe),m&&t(yo),w(iy),w(my),w(qh),w(Nh),w(fy),m&&t(pPe),m&&t(Ti),w(gy),m&&t(_Pe),m&&t(Lo),w(hy),w(py),w(Gh),w(_y),w(xp),m&&t(bPe),m&&t(Ci),w(by),m&&t(FPe),m&&t(xo),w(Fy),w(Ty),w(kp),w(My),w(b_),m&&t(vPe),m&&t(yi),w(Ey),m&&t(TPe),m&&t($o),w(Cy),w(Ay),w(v_),w(yy),w(tb),m&&t(MPe),m&&t($i),w(Ly),m&&t(EPe),m&&t(ko),w(xy),w(ky),w(nb),w(Sy),w(Ob),m&&t(CPe),m&&t(Ri),w(Ry),m&&t(wPe),m&&t(So),w(By),w(Iy),w(Xb),w(qy),w(d2),m&&t(APe),m&&t(Ii),w(Ny),m&&t(yPe),m&&t(Ro),w(jy),w(Gy),w(m2),w(Oy),w(sF),m&&t(LPe),m&&t(ji),w(Vy),m&&t(xPe),m&&t(Bo),w(Xy),w(Qy),w(iF),w(Wy),w(NF),m&&t($Pe),m&&t(Oi),w(Hy),m&&t(kPe),m&&t(Po),w(Uy),w(Yy),w(DF),w(Ky),w(WF),m&&t(SPe),m&&t(zi),w(Zy),m&&t(RPe),m&&t(Io),w(eL),w(rL),w(UF),w(tL),w($v),m&&t(BPe),m&&t(Hi),w(aL),m&&t(PPe),m&&t(qo),w(nL),w(lL),w(Sv),w(iL),w(F1),m&&t(IPe),m&&t(Yi),w(dL),m&&t(qPe),m&&t(No),w(cL),w(fL),w(T1),w(gL),w(C1),m&&t(NPe),m&&t(ed),w(hL),m&&t(jPe),m&&t(jo),w(uL),w(_L),w(A1),w(bL),w(j1),m&&t(DPe),m&&t(td),w(FL),m&&t(GPe),m&&t(Do),w(vL),w(ML),w(G1),w(EL),w(X1),m&&t(OPe),m&&t(sd),w(CL),m&&t(VPe),m&&t(Go),w(wL),w(yL),w(Q1),w(LL),w(rT),m&&t(XPe),m&&t(dd),w(xL),m&&t(zPe),m&&t(Oo),w($L),w(SL),w(aT),w(RL),w(cT),m&&t(QPe),m&&t(fd),w(BL),m&&t(WPe),m&&t(Vo),w(PL),w(qL),w(fT),w(NL),w(MT),m&&t(HPe),m&&t(ud),w(jL),m&&t(UPe),m&&t(Xo),w(DL),w(OL),w(CT),w(VL),w(LT),m&&t(JPe),m&&t(bd),w(zL),m&&t(YPe),m&&t(zo),w(QL),w(HL),w($T),w(UL),w(IT),m&&t(KPe),m&&t(Td),w(JL),m&&t(ZPe),m&&t(Qo),w(YL),w(ZL),w(NT),w(e8),w(VT),m&&t(eIe),m&&t(wd),w(o8),m&&t(oIe),m&&t(Wo),w(r8),w(a8),w(zT),w(n8),w(UT),m&&t(rIe),m&&t(Ld),w(l8),m&&t(tIe),m&&t(Ho),w(i8),w(c8),w(YT),w(m8),w(eM),m&&t(aIe),m&&t(kd),w(f8),m&&t(nIe),m&&t(Uo),w(g8),w(u8),w(rM),w(p8),w(iM),m&&t(sIe),m&&t(Bd),w(_8),m&&t(lIe),m&&t(Jo),w(b8),w(v8),w(cM),w(T8),w(gM),m&&t(iIe),m&&t(qd),w(M8),m&&t(dIe),m&&t(Yo),w(E8),w(w8),w(uM),w(A8),w(s4),m&&t(cIe),m&&t(Dd),w(y8),m&&t(mIe),m&&t(Ko),w(L8),w($8),w(i4),w(k8),w(S4),m&&t(fIe),m&&t(Vd),w(S8),m&&t(gIe),m&&t(Zo),w(R8),w(P8),w(B4),w(I8),w(W4),m&&t(hIe),m&&t(Qd),w(q8),m&&t(uIe),m&&t(er),w(N8),w(D8),w(U4),w(G8),w(Z4),m&&t(pIe),m&&t(Jd),w(O8),m&&t(_Ie),m&&t(or),w(V8),w(z8),w(oE),w(Q8),w(ME),m&&t(bIe),m&&t(Zd),w(W8),m&&t(FIe),m&&t(rr),w(H8),w(J8),w(CE),w(Y8),w(PE),m&&t(vIe),m&&t(rc),w(K8),m&&t(TIe),m&&t(tr),w(Z8),w(ox),w(qE),w(rx),w(c5),m&&t(MIe),m&&t(nc),w(tx),m&&t(EIe),m&&t(ar),w(ax),w(sx),w(f5),w(lx),w($5),m&&t(CIe),m&&t(ic),w(ix),m&&t(wIe),m&&t(nr),w(dx),w(mx),w(S5),w(fx),w(P5),m&&t(AIe),m&&t(mc),w(hx),m&&t(yIe),m&&t(sr),w(ux),w(_x),w(q5),w(bx),w(j5),m&&t(LIe),m&&t(hc),w(Fx),m&&t(xIe),m&&t(lr),w(vx),w(Mx),w(G5),w(Ex),w(iC),m&&t($Ie),m&&t(_c),w(Cx),m&&t(kIe),m&&t(ir),w(wx),w(yx),w(cC),w(Lx),w(kC),m&&t(SIe),m&&t(vc),w(xx),m&&t(RIe),m&&t(dr),w($x),w(Sx),w(RC),w(Rx),w(PC),m&&t(BIe),m&&t(Ec),w(Bx),m&&t(PIe),m&&t(cr),w(Px),w(qx),w(qC),w(Nx),w(jC),m&&t(IIe),m&&t(Ac),w(jx),m&&t(qIe),m&&t(mr),w(Dx),w(Ox),w(GC),w(Vx),w(g3),m&&t(NIe),m&&t(xc),w(Xx),m&&t(jIe),m&&t(fr),w(zx),w(Wx),w(u3),w(Hx),w(w3),m&&t(DIe),m&&t(Sc),w(Ux),m&&t(GIe),m&&t(gr),w(Jx),w(Kx),w(y3),w(Zx),w(D3),m&&t(OIe),m&&t(Pc),w(e7),m&&t(VIe),m&&t(hr),w(o7),w(t7),w(O3),w(a7),w(Z3),m&&t(XIe),m&&t(Nc),w(n7),m&&t(zIe),m&&t(ur),w(s7),w(i7),w(ow),w(d7),w(mw),m&&t(QIe),m&&t(Gc),w(c7),m&&t(WIe),m&&t(pr),w(m7),w(g7),w(gw),w(h7),w(Cw),m&&t(HIe),m&&t(Xc),w(u7),m&&t(UIe),m&&t(_r),w(p7),w(b7),w(Aw),w(F7),w(qw),m&&t(JIe),m&&t(Wc),w(v7),m&&t(YIe),m&&t(br),w(T7),w(E7),w(jw),w(C7),w(Hw),m&&t(KIe),m&&t(Jc),w(w7),m&&t(ZIe),m&&t(Fr),w(A7),w(L7),w(Jw),w(x7),w(nA),m&&t(eqe),m&&t(Zc),w($7),m&&t(oqe),m&&t(vr),w(k7),w(R7),w(lA),w(B7),w(dA),m&&t(rqe),m&&t(rm),w(P7),m&&t(tqe),m&&t(Tr),w(I7),w(N7),w(mA),w(j7),w(hA),m&&t(aqe),m&&t(nm),w(G7),m&&t(nqe),m&&t(Mr),w(O7),w(X7),w(pA),w(z7),w(bA)}}}const iyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dyt(A){return d0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pyt extends n0t{constructor(g){super();s0t(this,g,dyt,lyt,l0t,{})}}export{pyt as default,iyt as metadata};
