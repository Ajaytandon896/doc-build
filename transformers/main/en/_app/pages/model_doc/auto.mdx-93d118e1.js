import{S as k8t,i as S8t,s as R8t,e as a,k as l,w as F,t as o,M as P8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as B8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as IDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function I8t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,sy,hm,je,We,gi,yn,ly,Ln,xn,iy,hi,$n,dy,ui,um,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),gm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),fi=o('"new-model"'),sy=o(")."),hm=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),ly=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),iy=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),dy=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),um=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var y$=s(u);f=r(y$,"NewModelConfig"),y$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var L$=s(ci);gm=r(L$,"model_type"),L$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var x$=s(mi);fi=r(x$,'"new-model"'),x$.forEach(t),sy=r(Ae,")."),Ae.forEach(t),hm=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),ly=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var $$=s(Ln);xn=r($$,"PreTrainedModel"),$$.forEach(t),iy=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var pm=s(hi);$n=r(pm,"config_class"),pm.forEach(t),dy=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var k$=s(ui);um=r(k$,"NewModelConfig"),k$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,gm),e(g,rt),e(g,mi),e(mi,fi),e(g,sy),b(Qe,hm,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,ly),e(je,Ln),e(Ln,xn),e(je,iy),e(je,hi),e(hi,$n),e(je,dy),e(je,ui),e(ui,um),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(hm),Qe&&t(je)}}}function q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function D8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function O8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rxt(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,sy,hm,je,We,gi,yn,ly,Ln,xn,iy,hi,$n,dy,ui,um,Ca,Qe,Ae,y$,pi,L$,x$,Eo,wa,$$,pm,k$,HDe,qIe,_i,_m,Cee,cy,UDe,wee,JDe,NIe,kn,YDe,Aee,KDe,ZDe,yee,eGe,oGe,jIe,my,DIe,S$,rGe,GIe,bm,OIe,bi,vm,Lee,fy,tGe,xee,aGe,VIe,Co,gy,nGe,hy,sGe,R$,lGe,iGe,dGe,uy,cGe,$ee,mGe,fGe,gGe,Er,py,hGe,kee,uGe,pGe,vi,_Ge,See,bGe,vGe,Ree,FGe,TGe,MGe,A,Fm,Pee,EGe,CGe,P$,wGe,AGe,yGe,Tm,Bee,LGe,xGe,B$,$Ge,kGe,SGe,Mm,Iee,RGe,PGe,I$,BGe,IGe,qGe,Em,qee,NGe,jGe,q$,DGe,GGe,OGe,Cm,Nee,VGe,XGe,N$,zGe,WGe,QGe,wm,jee,HGe,UGe,j$,JGe,YGe,KGe,Am,Dee,ZGe,eOe,D$,oOe,rOe,tOe,ym,Gee,aOe,nOe,G$,sOe,lOe,iOe,Lm,Oee,dOe,cOe,O$,mOe,fOe,gOe,xm,Vee,hOe,uOe,V$,pOe,_Oe,bOe,$m,Xee,vOe,FOe,X$,TOe,MOe,EOe,km,zee,COe,wOe,z$,AOe,yOe,LOe,Sm,Wee,xOe,$Oe,W$,kOe,SOe,ROe,Rm,Qee,POe,BOe,Q$,IOe,qOe,NOe,Pm,Hee,jOe,DOe,H$,GOe,OOe,VOe,Bm,Uee,XOe,zOe,U$,WOe,QOe,HOe,Im,Jee,UOe,JOe,J$,YOe,KOe,ZOe,qm,Yee,eVe,oVe,Y$,rVe,tVe,aVe,Nm,Kee,nVe,sVe,K$,lVe,iVe,dVe,jm,Zee,cVe,mVe,Z$,fVe,gVe,hVe,Dm,eoe,uVe,pVe,ek,_Ve,bVe,vVe,Gm,ooe,FVe,TVe,ok,MVe,EVe,CVe,Om,roe,wVe,AVe,rk,yVe,LVe,xVe,Vm,toe,$Ve,kVe,tk,SVe,RVe,PVe,Xm,aoe,BVe,IVe,ak,qVe,NVe,jVe,zm,noe,DVe,GVe,nk,OVe,VVe,XVe,Wm,soe,zVe,WVe,sk,QVe,HVe,UVe,Qm,loe,JVe,YVe,lk,KVe,ZVe,eXe,Hm,ioe,oXe,rXe,ik,tXe,aXe,nXe,Um,doe,sXe,lXe,dk,iXe,dXe,cXe,Jm,coe,mXe,fXe,ck,gXe,hXe,uXe,Ym,moe,pXe,_Xe,mk,bXe,vXe,FXe,Km,foe,TXe,MXe,fk,EXe,CXe,wXe,Zm,goe,AXe,yXe,gk,LXe,xXe,$Xe,ef,hoe,kXe,SXe,hk,RXe,PXe,BXe,of,uoe,IXe,qXe,uk,NXe,jXe,DXe,rf,poe,GXe,OXe,pk,VXe,XXe,zXe,tf,_oe,WXe,QXe,_k,HXe,UXe,JXe,af,boe,YXe,KXe,bk,ZXe,eze,oze,nf,voe,rze,tze,vk,aze,nze,sze,sf,Foe,lze,ize,Fk,dze,cze,mze,lf,Toe,fze,gze,Tk,hze,uze,pze,df,Moe,_ze,bze,Mk,vze,Fze,Tze,cf,Eoe,Mze,Eze,Ek,Cze,wze,Aze,mf,Coe,yze,Lze,Ck,xze,$ze,kze,ff,woe,Sze,Rze,wk,Pze,Bze,Ize,gf,Aoe,qze,Nze,Ak,jze,Dze,Gze,hf,yoe,Oze,Vze,yk,Xze,zze,Wze,uf,Loe,Qze,Hze,Lk,Uze,Jze,Yze,pf,xoe,Kze,Zze,xk,eWe,oWe,rWe,_f,$oe,tWe,aWe,$k,nWe,sWe,lWe,bf,koe,iWe,dWe,kk,cWe,mWe,fWe,vf,Soe,gWe,hWe,Sk,uWe,pWe,_We,Ff,Roe,bWe,vWe,Rk,FWe,TWe,MWe,Tf,Poe,EWe,CWe,Pk,wWe,AWe,yWe,Mf,Boe,LWe,xWe,Bk,$We,kWe,SWe,Ef,Ioe,RWe,PWe,Ik,BWe,IWe,qWe,Cf,qoe,NWe,jWe,qk,DWe,GWe,OWe,wf,Noe,VWe,XWe,Nk,zWe,WWe,QWe,Af,joe,HWe,UWe,jk,JWe,YWe,KWe,yf,Doe,ZWe,eQe,Dk,oQe,rQe,tQe,Lf,Goe,aQe,nQe,Gk,sQe,lQe,iQe,xf,Ooe,dQe,cQe,Ok,mQe,fQe,gQe,$f,Voe,hQe,uQe,Vk,pQe,_Qe,bQe,kf,Xoe,vQe,FQe,Xk,TQe,MQe,EQe,Sf,zoe,CQe,wQe,zk,AQe,yQe,LQe,Rf,Woe,xQe,$Qe,Wk,kQe,SQe,RQe,Pf,Qoe,PQe,BQe,Qk,IQe,qQe,NQe,Bf,Hoe,jQe,DQe,Hk,GQe,OQe,VQe,If,Uoe,XQe,zQe,Uk,WQe,QQe,HQe,qf,Joe,UQe,JQe,Jk,YQe,KQe,ZQe,Nf,Yoe,eHe,oHe,Yk,rHe,tHe,aHe,jf,Koe,nHe,sHe,Kk,lHe,iHe,dHe,Df,Zoe,cHe,mHe,Zk,fHe,gHe,hHe,Gf,ere,uHe,pHe,eS,_He,bHe,vHe,Of,ore,FHe,THe,oS,MHe,EHe,CHe,Vf,rre,wHe,AHe,rS,yHe,LHe,xHe,Xf,tre,$He,kHe,tS,SHe,RHe,PHe,zf,are,BHe,IHe,aS,qHe,NHe,jHe,Wf,nre,DHe,GHe,nS,OHe,VHe,XHe,Qf,sre,zHe,WHe,sS,QHe,HHe,UHe,Hf,lre,JHe,YHe,lS,KHe,ZHe,eUe,Uf,ire,oUe,rUe,iS,tUe,aUe,nUe,Jf,dre,sUe,lUe,dS,iUe,dUe,cUe,Yf,cre,mUe,fUe,cS,gUe,hUe,uUe,Kf,mre,pUe,_Ue,mS,bUe,vUe,FUe,Zf,fre,TUe,MUe,fS,EUe,CUe,wUe,eg,gre,AUe,yUe,gS,LUe,xUe,$Ue,og,hre,kUe,SUe,hS,RUe,PUe,BUe,rg,ure,IUe,qUe,uS,NUe,jUe,DUe,tg,pre,GUe,OUe,pS,VUe,XUe,zUe,ag,_re,WUe,QUe,_S,HUe,UUe,JUe,ng,bre,YUe,KUe,bS,ZUe,eJe,oJe,sg,vre,rJe,tJe,vS,aJe,nJe,sJe,lg,Fre,lJe,iJe,FS,dJe,cJe,mJe,ig,Tre,fJe,gJe,TS,hJe,uJe,pJe,dg,Mre,_Je,bJe,MS,vJe,FJe,TJe,cg,Ere,MJe,EJe,ES,CJe,wJe,AJe,mg,Cre,yJe,LJe,CS,xJe,$Je,kJe,fg,wre,SJe,RJe,wS,PJe,BJe,IJe,gg,Are,qJe,NJe,AS,jJe,DJe,GJe,hg,yre,OJe,VJe,yS,XJe,zJe,WJe,ug,Lre,QJe,HJe,LS,UJe,JJe,YJe,pg,xre,KJe,ZJe,xS,eYe,oYe,rYe,_g,$re,tYe,aYe,$S,nYe,sYe,lYe,bg,kre,iYe,dYe,kS,cYe,mYe,fYe,vg,gYe,Fg,_y,hYe,Sre,uYe,XIe,Fi,Tg,Rre,by,pYe,Pre,_Ye,zIe,wo,vy,bYe,Fy,vYe,SS,FYe,TYe,MYe,Ty,EYe,Bre,CYe,wYe,AYe,Cr,My,yYe,Ire,LYe,xYe,Aa,$Ye,qre,kYe,SYe,Nre,RYe,PYe,jre,BYe,IYe,qYe,k,Sn,Dre,NYe,jYe,RS,DYe,GYe,PS,OYe,VYe,XYe,Rn,Gre,zYe,WYe,BS,QYe,HYe,IS,UYe,JYe,YYe,Pn,Ore,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,Mg,Vre,nKe,sKe,jS,lKe,iKe,dKe,Bn,Xre,cKe,mKe,DS,fKe,gKe,GS,hKe,uKe,pKe,Eg,zre,_Ke,bKe,OS,vKe,FKe,TKe,Cg,Wre,MKe,EKe,VS,CKe,wKe,AKe,wg,Qre,yKe,LKe,XS,xKe,$Ke,kKe,In,Hre,SKe,RKe,zS,PKe,BKe,WS,IKe,qKe,NKe,qn,Ure,jKe,DKe,QS,GKe,OKe,HS,VKe,XKe,zKe,Nn,Jre,WKe,QKe,US,HKe,UKe,JS,JKe,YKe,KKe,Ag,Yre,ZKe,eZe,YS,oZe,rZe,tZe,yg,Kre,aZe,nZe,KS,sZe,lZe,iZe,jn,Zre,dZe,cZe,ZS,mZe,fZe,eR,gZe,hZe,uZe,Lg,ete,pZe,_Ze,oR,bZe,vZe,FZe,Dn,ote,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Gn,rte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,On,tte,BZe,IZe,sR,qZe,NZe,lR,jZe,DZe,GZe,xg,ate,OZe,VZe,iR,XZe,zZe,WZe,Vn,nte,QZe,HZe,dR,UZe,JZe,cR,YZe,KZe,ZZe,Xn,ste,eeo,oeo,mR,reo,teo,fR,aeo,neo,seo,zn,lte,leo,ieo,gR,deo,ceo,hR,meo,feo,geo,Wn,ite,heo,ueo,uR,peo,_eo,pR,beo,veo,Feo,Qn,dte,Teo,Meo,_R,Eeo,Ceo,bR,weo,Aeo,yeo,Hn,cte,Leo,xeo,vR,$eo,keo,FR,Seo,Reo,Peo,$g,mte,Beo,Ieo,TR,qeo,Neo,jeo,Un,fte,Deo,Geo,MR,Oeo,Veo,ER,Xeo,zeo,Weo,kg,gte,Qeo,Heo,CR,Ueo,Jeo,Yeo,Jn,hte,Keo,Zeo,wR,eoo,ooo,AR,roo,too,aoo,Yn,ute,noo,soo,yR,loo,ioo,LR,doo,coo,moo,Kn,pte,foo,goo,xR,hoo,uoo,$R,poo,_oo,boo,Zn,_te,voo,Foo,kR,Too,Moo,SR,Eoo,Coo,woo,es,bte,Aoo,yoo,RR,Loo,xoo,PR,$oo,koo,Soo,Sg,vte,Roo,Poo,BR,Boo,Ioo,qoo,os,Fte,Noo,joo,IR,Doo,Goo,qR,Ooo,Voo,Xoo,rs,Tte,zoo,Woo,NR,Qoo,Hoo,jR,Uoo,Joo,Yoo,ts,Mte,Koo,Zoo,DR,ero,oro,GR,rro,tro,aro,as,Ete,nro,sro,OR,lro,iro,VR,dro,cro,mro,ns,Cte,fro,gro,XR,hro,uro,zR,pro,_ro,bro,ss,wte,vro,Fro,WR,Tro,Mro,QR,Ero,Cro,wro,Rg,Ate,Aro,yro,HR,Lro,xro,$ro,ls,yte,kro,Sro,UR,Rro,Pro,JR,Bro,Iro,qro,Pg,Lte,Nro,jro,YR,Dro,Gro,Oro,Bg,xte,Vro,Xro,KR,zro,Wro,Qro,is,$te,Hro,Uro,ZR,Jro,Yro,eP,Kro,Zro,eto,ds,kte,oto,rto,oP,tto,ato,rP,nto,sto,lto,cs,Ste,ito,dto,tP,cto,mto,aP,fto,gto,hto,Ig,Rte,uto,pto,nP,_to,bto,vto,ms,Pte,Fto,Tto,sP,Mto,Eto,lP,Cto,wto,Ato,fs,Bte,yto,Lto,iP,xto,$to,dP,kto,Sto,Rto,gs,Ite,Pto,Bto,cP,Ito,qto,mP,Nto,jto,Dto,hs,qte,Gto,Oto,fP,Vto,Xto,gP,zto,Wto,Qto,us,Nte,Hto,Uto,hP,Jto,Yto,uP,Kto,Zto,eao,qg,jte,oao,rao,pP,tao,aao,nao,ps,Dte,sao,lao,_P,iao,dao,bP,cao,mao,fao,Ng,Gte,gao,hao,vP,uao,pao,_ao,jg,Ote,bao,vao,FP,Fao,Tao,Mao,Dg,Vte,Eao,Cao,TP,wao,Aao,yao,Gg,Xte,Lao,xao,MP,$ao,kao,Sao,_s,zte,Rao,Pao,EP,Bao,Iao,CP,qao,Nao,jao,Og,Wte,Dao,Gao,wP,Oao,Vao,Xao,bs,Qte,zao,Wao,AP,Qao,Hao,yP,Uao,Jao,Yao,vs,Hte,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Fs,Ute,nno,sno,$P,lno,ino,kP,dno,cno,mno,Ts,Jte,fno,gno,SP,hno,uno,RP,pno,_no,bno,Ms,Yte,vno,Fno,PP,Tno,Mno,BP,Eno,Cno,wno,Es,Kte,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,Vg,Zte,Rno,Pno,NP,Bno,Ino,qno,Xg,eae,Nno,jno,jP,Dno,Gno,Ono,Cs,oae,Vno,Xno,DP,zno,Wno,GP,Qno,Hno,Uno,ws,rae,Jno,Yno,OP,Kno,Zno,VP,eso,oso,rso,As,tae,tso,aso,XP,nso,sso,zP,lso,iso,dso,zg,aae,cso,mso,WP,fso,gso,hso,Wg,nae,uso,pso,QP,_so,bso,vso,Qg,sae,Fso,Tso,HP,Mso,Eso,Cso,ys,lae,wso,Aso,UP,yso,Lso,JP,xso,$so,kso,Hg,iae,Sso,Rso,YP,Pso,Bso,Iso,Ug,dae,qso,Nso,KP,jso,Dso,Gso,Jg,cae,Oso,Vso,ZP,Xso,zso,Wso,Ls,mae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Yg,fae,elo,olo,rB,rlo,tlo,alo,Kg,gae,nlo,slo,tB,llo,ilo,dlo,xs,hae,clo,mlo,aB,flo,glo,nB,hlo,ulo,plo,$s,uae,_lo,blo,sB,vlo,Flo,lB,Tlo,Mlo,Elo,ks,pae,Clo,wlo,iB,Alo,ylo,dB,Llo,xlo,$lo,Ss,_ae,klo,Slo,cB,Rlo,Plo,mB,Blo,Ilo,qlo,Zg,Nlo,eh,Ey,jlo,bae,Dlo,WIe,Ti,oh,vae,Cy,Glo,Fae,Olo,QIe,Ao,wy,Vlo,Ay,Xlo,fB,zlo,Wlo,Qlo,yy,Hlo,Tae,Ulo,Jlo,Ylo,He,Ly,Klo,Mae,Zlo,eio,ya,oio,Eae,rio,tio,Cae,aio,nio,wae,sio,lio,iio,Z,rh,Aae,dio,cio,gB,mio,fio,gio,th,yae,hio,uio,hB,pio,_io,bio,ah,Lae,vio,Fio,uB,Tio,Mio,Eio,nh,xae,Cio,wio,pB,Aio,yio,Lio,sh,$ae,xio,$io,_B,kio,Sio,Rio,lh,kae,Pio,Bio,bB,Iio,qio,Nio,ih,Sae,jio,Dio,vB,Gio,Oio,Vio,dh,Rae,Xio,zio,FB,Wio,Qio,Hio,ch,Pae,Uio,Jio,TB,Yio,Kio,Zio,mh,Bae,edo,odo,MB,rdo,tdo,ado,fh,Iae,ndo,sdo,EB,ldo,ido,ddo,gh,qae,cdo,mdo,CB,fdo,gdo,hdo,hh,Nae,udo,pdo,wB,_do,bdo,vdo,uh,jae,Fdo,Tdo,AB,Mdo,Edo,Cdo,ph,Dae,wdo,Ado,yB,ydo,Ldo,xdo,_h,Gae,$do,kdo,LB,Sdo,Rdo,Pdo,bh,Oae,Bdo,Ido,xB,qdo,Ndo,jdo,vh,Vae,Ddo,Gdo,$B,Odo,Vdo,Xdo,Fh,Xae,zdo,Wdo,kB,Qdo,Hdo,Udo,Th,zae,Jdo,Ydo,SB,Kdo,Zdo,eco,Mh,Wae,oco,rco,RB,tco,aco,nco,Eh,Qae,sco,lco,PB,ico,dco,cco,Ch,Hae,mco,fco,BB,gco,hco,uco,wh,Uae,pco,_co,IB,bco,vco,Fco,Ah,Jae,Tco,Mco,qB,Eco,Cco,wco,yh,Yae,Aco,yco,NB,Lco,xco,$co,Lh,kco,xh,Sco,$h,xy,Rco,Kae,Pco,HIe,Mi,kh,Zae,$y,Bco,ene,Ico,UIe,yo,ky,qco,Sy,Nco,jB,jco,Dco,Gco,Ry,Oco,one,Vco,Xco,zco,Ue,Py,Wco,rne,Qco,Hco,Ei,Uco,tne,Jco,Yco,ane,Kco,Zco,emo,ue,Sh,nne,omo,rmo,DB,tmo,amo,nmo,Rh,sne,smo,lmo,lne,imo,dmo,cmo,Ph,ine,mmo,fmo,GB,gmo,hmo,umo,Bh,dne,pmo,_mo,OB,bmo,vmo,Fmo,Ih,cne,Tmo,Mmo,VB,Emo,Cmo,wmo,qh,mne,Amo,ymo,XB,Lmo,xmo,$mo,Nh,fne,kmo,Smo,zB,Rmo,Pmo,Bmo,jh,gne,Imo,qmo,WB,Nmo,jmo,Dmo,Dh,hne,Gmo,Omo,QB,Vmo,Xmo,zmo,Gh,une,Wmo,Qmo,HB,Hmo,Umo,Jmo,Oh,pne,Ymo,Kmo,UB,Zmo,efo,ofo,Vh,_ne,rfo,tfo,JB,afo,nfo,sfo,Xh,bne,lfo,ifo,YB,dfo,cfo,mfo,zh,vne,ffo,gfo,KB,hfo,ufo,pfo,Wh,Fne,_fo,bfo,ZB,vfo,Ffo,Tfo,Qh,Tne,Mfo,Efo,eI,Cfo,wfo,Afo,Hh,yfo,Uh,Lfo,Jh,By,xfo,Mne,$fo,JIe,Ci,Yh,Ene,Iy,kfo,Cne,Sfo,YIe,Lo,qy,Rfo,wi,Pfo,oI,Bfo,Ifo,rI,qfo,Nfo,jfo,Ny,Dfo,wne,Gfo,Ofo,Vfo,tt,jy,Xfo,Ane,zfo,Wfo,Ai,Qfo,yne,Hfo,Ufo,tI,Jfo,Yfo,Kfo,Kh,Zfo,Je,Dy,ego,Lne,ogo,rgo,La,tgo,xne,ago,ngo,$ne,sgo,lgo,kne,igo,dgo,cgo,x,Zh,Sne,mgo,fgo,aI,ggo,hgo,ugo,eu,Rne,pgo,_go,nI,bgo,vgo,Fgo,ou,Pne,Tgo,Mgo,sI,Ego,Cgo,wgo,ru,Bne,Ago,ygo,lI,Lgo,xgo,$go,tu,Ine,kgo,Sgo,iI,Rgo,Pgo,Bgo,au,qne,Igo,qgo,dI,Ngo,jgo,Dgo,nu,Nne,Ggo,Ogo,cI,Vgo,Xgo,zgo,su,jne,Wgo,Qgo,mI,Hgo,Ugo,Jgo,lu,Dne,Ygo,Kgo,fI,Zgo,eho,oho,iu,Gne,rho,tho,gI,aho,nho,sho,du,One,lho,iho,hI,dho,cho,mho,cu,Vne,fho,gho,uI,hho,uho,pho,mu,Xne,_ho,bho,pI,vho,Fho,Tho,fu,zne,Mho,Eho,_I,Cho,who,Aho,gu,Wne,yho,Lho,bI,xho,$ho,kho,hu,Qne,Sho,Rho,vI,Pho,Bho,Iho,uu,Hne,qho,Nho,FI,jho,Dho,Gho,pu,Une,Oho,Vho,TI,Xho,zho,Who,_u,Jne,Qho,Hho,MI,Uho,Jho,Yho,bu,Yne,Kho,Zho,EI,euo,ouo,ruo,vu,Kne,tuo,auo,CI,nuo,suo,luo,Fu,Zne,iuo,duo,wI,cuo,muo,fuo,Tu,ese,guo,huo,AI,uuo,puo,_uo,Mu,ose,buo,vuo,yI,Fuo,Tuo,Muo,Eu,rse,Euo,Cuo,LI,wuo,Auo,yuo,Cu,tse,Luo,xuo,xI,$uo,kuo,Suo,wu,ase,Ruo,Puo,$I,Buo,Iuo,quo,Au,nse,Nuo,juo,kI,Duo,Guo,Ouo,yu,sse,Vuo,Xuo,SI,zuo,Wuo,Quo,Lu,lse,Huo,Uuo,RI,Juo,Yuo,Kuo,xu,ise,Zuo,epo,PI,opo,rpo,tpo,Rs,dse,apo,npo,BI,spo,lpo,II,ipo,dpo,cpo,$u,cse,mpo,fpo,qI,gpo,hpo,upo,ku,mse,ppo,_po,NI,bpo,vpo,Fpo,Su,fse,Tpo,Mpo,jI,Epo,Cpo,wpo,Ru,gse,Apo,ypo,DI,Lpo,xpo,$po,Pu,hse,kpo,Spo,GI,Rpo,Ppo,Bpo,Bu,use,Ipo,qpo,OI,Npo,jpo,Dpo,Iu,pse,Gpo,Opo,VI,Vpo,Xpo,zpo,qu,_se,Wpo,Qpo,XI,Hpo,Upo,Jpo,Nu,bse,Ypo,Kpo,zI,Zpo,e_o,o_o,ju,vse,r_o,t_o,WI,a_o,n_o,s_o,Du,Fse,l_o,i_o,QI,d_o,c_o,m_o,Gu,Tse,f_o,g_o,HI,h_o,u_o,p_o,Ou,Mse,__o,b_o,UI,v_o,F_o,T_o,Vu,Ese,M_o,E_o,JI,C_o,w_o,A_o,Xu,Cse,y_o,L_o,YI,x_o,$_o,k_o,zu,wse,S_o,R_o,KI,P_o,B_o,I_o,Wu,Ase,q_o,N_o,ZI,j_o,D_o,G_o,Qu,yse,O_o,V_o,eq,X_o,z_o,W_o,Hu,Lse,Q_o,H_o,oq,U_o,J_o,Y_o,Uu,xse,K_o,Z_o,rq,ebo,obo,rbo,Ju,$se,tbo,abo,tq,nbo,sbo,lbo,Yu,kse,ibo,dbo,aq,cbo,mbo,fbo,Ku,Sse,gbo,hbo,nq,ubo,pbo,_bo,Zu,Rse,bbo,vbo,sq,Fbo,Tbo,Mbo,ep,Pse,Ebo,Cbo,lq,wbo,Abo,ybo,op,Bse,Lbo,xbo,iq,$bo,kbo,Sbo,rp,Ise,Rbo,Pbo,dq,Bbo,Ibo,qbo,tp,qse,Nbo,jbo,cq,Dbo,Gbo,Obo,ap,Nse,Vbo,Xbo,mq,zbo,Wbo,Qbo,np,jse,Hbo,Ubo,fq,Jbo,Ybo,Kbo,sp,Dse,Zbo,e2o,gq,o2o,r2o,t2o,lp,Gse,a2o,n2o,hq,s2o,l2o,i2o,ip,Ose,d2o,c2o,uq,m2o,f2o,g2o,dp,Vse,h2o,u2o,pq,p2o,_2o,b2o,cp,Xse,v2o,F2o,_q,T2o,M2o,E2o,mp,zse,C2o,w2o,bq,A2o,y2o,L2o,fp,Wse,x2o,$2o,vq,k2o,S2o,R2o,gp,Qse,P2o,B2o,Fq,I2o,q2o,N2o,hp,Hse,j2o,D2o,Tq,G2o,O2o,V2o,up,Use,X2o,z2o,Mq,W2o,Q2o,H2o,pp,Jse,U2o,J2o,Eq,Y2o,K2o,Z2o,_p,Yse,evo,ovo,Cq,rvo,tvo,avo,bp,Kse,nvo,svo,wq,lvo,ivo,dvo,vp,Zse,cvo,mvo,Aq,fvo,gvo,hvo,Fp,ele,uvo,pvo,yq,_vo,bvo,vvo,Tp,ole,Fvo,Tvo,Lq,Mvo,Evo,Cvo,Mp,rle,wvo,Avo,xq,yvo,Lvo,xvo,Ep,tle,$vo,kvo,$q,Svo,Rvo,Pvo,Cp,ale,Bvo,Ivo,kq,qvo,Nvo,jvo,wp,nle,Dvo,Gvo,Sq,Ovo,Vvo,Xvo,Ap,sle,zvo,Wvo,Rq,Qvo,Hvo,Uvo,yp,lle,Jvo,Yvo,Pq,Kvo,Zvo,eFo,Lp,ile,oFo,rFo,Bq,tFo,aFo,nFo,xp,dle,sFo,lFo,Iq,iFo,dFo,cFo,$p,cle,mFo,fFo,qq,gFo,hFo,uFo,kp,mle,pFo,_Fo,Nq,bFo,vFo,FFo,Sp,fle,TFo,MFo,jq,EFo,CFo,wFo,Rp,gle,AFo,yFo,Dq,LFo,xFo,$Fo,Pp,hle,kFo,SFo,Gq,RFo,PFo,BFo,Bp,ule,IFo,qFo,Oq,NFo,jFo,DFo,Ip,ple,GFo,OFo,Vq,VFo,XFo,zFo,qp,_le,WFo,QFo,Xq,HFo,UFo,JFo,Np,ble,YFo,KFo,zq,ZFo,e1o,o1o,jp,vle,r1o,t1o,Wq,a1o,n1o,s1o,Dp,Fle,l1o,i1o,Qq,d1o,c1o,m1o,Gp,Tle,f1o,g1o,Hq,h1o,u1o,p1o,Op,Mle,_1o,b1o,Uq,v1o,F1o,T1o,Vp,M1o,Ele,E1o,C1o,Cle,w1o,A1o,Xp,KIe,yi,zp,wle,Gy,y1o,Ale,L1o,ZIe,xo,Oy,x1o,Li,$1o,Jq,k1o,S1o,Yq,R1o,P1o,B1o,Vy,I1o,yle,q1o,N1o,j1o,at,Xy,D1o,Lle,G1o,O1o,xi,V1o,xle,X1o,z1o,Kq,W1o,Q1o,H1o,Wp,U1o,Ye,zy,J1o,$le,Y1o,K1o,xa,Z1o,kle,eTo,oTo,Sle,rTo,tTo,Rle,aTo,nTo,sTo,G,Qp,Ple,lTo,iTo,Zq,dTo,cTo,mTo,Hp,Ble,fTo,gTo,eN,hTo,uTo,pTo,Up,Ile,_To,bTo,oN,vTo,FTo,TTo,Jp,qle,MTo,ETo,rN,CTo,wTo,ATo,Yp,Nle,yTo,LTo,tN,xTo,$To,kTo,Kp,jle,STo,RTo,aN,PTo,BTo,ITo,Zp,Dle,qTo,NTo,nN,jTo,DTo,GTo,e_,Gle,OTo,VTo,sN,XTo,zTo,WTo,o_,Ole,QTo,HTo,lN,UTo,JTo,YTo,r_,Vle,KTo,ZTo,iN,eMo,oMo,rMo,t_,Xle,tMo,aMo,dN,nMo,sMo,lMo,a_,zle,iMo,dMo,cN,cMo,mMo,fMo,n_,Wle,gMo,hMo,mN,uMo,pMo,_Mo,s_,Qle,bMo,vMo,fN,FMo,TMo,MMo,l_,Hle,EMo,CMo,gN,wMo,AMo,yMo,i_,Ule,LMo,xMo,hN,$Mo,kMo,SMo,d_,Jle,RMo,PMo,uN,BMo,IMo,qMo,c_,Yle,NMo,jMo,pN,DMo,GMo,OMo,m_,Kle,VMo,XMo,_N,zMo,WMo,QMo,f_,Zle,HMo,UMo,bN,JMo,YMo,KMo,g_,eie,ZMo,e4o,vN,o4o,r4o,t4o,h_,oie,a4o,n4o,FN,s4o,l4o,i4o,u_,rie,d4o,c4o,TN,m4o,f4o,g4o,p_,tie,h4o,u4o,MN,p4o,_4o,b4o,__,aie,v4o,F4o,EN,T4o,M4o,E4o,b_,nie,C4o,w4o,CN,A4o,y4o,L4o,v_,sie,x4o,$4o,wN,k4o,S4o,R4o,F_,lie,P4o,B4o,AN,I4o,q4o,N4o,T_,iie,j4o,D4o,yN,G4o,O4o,V4o,M_,die,X4o,z4o,LN,W4o,Q4o,H4o,E_,cie,U4o,J4o,xN,Y4o,K4o,Z4o,C_,mie,eEo,oEo,$N,rEo,tEo,aEo,w_,fie,nEo,sEo,kN,lEo,iEo,dEo,A_,gie,cEo,mEo,SN,fEo,gEo,hEo,y_,hie,uEo,pEo,RN,_Eo,bEo,vEo,L_,uie,FEo,TEo,PN,MEo,EEo,CEo,x_,pie,wEo,AEo,BN,yEo,LEo,xEo,$_,_ie,$Eo,kEo,IN,SEo,REo,PEo,k_,bie,BEo,IEo,qN,qEo,NEo,jEo,S_,vie,DEo,GEo,NN,OEo,VEo,XEo,R_,Fie,zEo,WEo,jN,QEo,HEo,UEo,P_,Tie,JEo,YEo,DN,KEo,ZEo,eCo,B_,oCo,Mie,rCo,tCo,Eie,aCo,nCo,I_,eqe,$i,q_,Cie,Wy,sCo,wie,lCo,oqe,$o,Qy,iCo,ki,dCo,GN,cCo,mCo,ON,fCo,gCo,hCo,Hy,uCo,Aie,pCo,_Co,bCo,nt,Uy,vCo,yie,FCo,TCo,Si,MCo,Lie,ECo,CCo,VN,wCo,ACo,yCo,N_,LCo,Ke,Jy,xCo,xie,$Co,kCo,$a,SCo,$ie,RCo,PCo,kie,BCo,ICo,Sie,qCo,NCo,jCo,z,j_,Rie,DCo,GCo,XN,OCo,VCo,XCo,D_,Pie,zCo,WCo,zN,QCo,HCo,UCo,G_,Bie,JCo,YCo,WN,KCo,ZCo,e5o,O_,Iie,o5o,r5o,QN,t5o,a5o,n5o,V_,qie,s5o,l5o,HN,i5o,d5o,c5o,X_,Nie,m5o,f5o,UN,g5o,h5o,u5o,z_,jie,p5o,_5o,JN,b5o,v5o,F5o,W_,Die,T5o,M5o,YN,E5o,C5o,w5o,Q_,Gie,A5o,y5o,KN,L5o,x5o,$5o,H_,Oie,k5o,S5o,ZN,R5o,P5o,B5o,U_,Vie,I5o,q5o,ej,N5o,j5o,D5o,J_,Xie,G5o,O5o,oj,V5o,X5o,z5o,Y_,zie,W5o,Q5o,rj,H5o,U5o,J5o,K_,Wie,Y5o,K5o,tj,Z5o,e3o,o3o,Z_,Qie,r3o,t3o,aj,a3o,n3o,s3o,eb,Hie,l3o,i3o,nj,d3o,c3o,m3o,ob,Uie,f3o,g3o,sj,h3o,u3o,p3o,rb,Jie,_3o,b3o,lj,v3o,F3o,T3o,tb,Yie,M3o,E3o,ij,C3o,w3o,A3o,ab,Kie,y3o,L3o,dj,x3o,$3o,k3o,nb,Zie,S3o,R3o,cj,P3o,B3o,I3o,sb,ede,q3o,N3o,mj,j3o,D3o,G3o,lb,ode,O3o,V3o,fj,X3o,z3o,W3o,ib,rde,Q3o,H3o,gj,U3o,J3o,Y3o,db,tde,K3o,Z3o,hj,ewo,owo,rwo,cb,ade,two,awo,uj,nwo,swo,lwo,mb,nde,iwo,dwo,pj,cwo,mwo,fwo,fb,sde,gwo,hwo,_j,uwo,pwo,_wo,gb,lde,bwo,vwo,bj,Fwo,Two,Mwo,hb,ide,Ewo,Cwo,vj,wwo,Awo,ywo,ub,dde,Lwo,xwo,Fj,$wo,kwo,Swo,pb,cde,Rwo,Pwo,Tj,Bwo,Iwo,qwo,_b,mde,Nwo,jwo,Mj,Dwo,Gwo,Owo,bb,fde,Vwo,Xwo,Ej,zwo,Wwo,Qwo,vb,gde,Hwo,Uwo,Cj,Jwo,Ywo,Kwo,Fb,hde,Zwo,eAo,wj,oAo,rAo,tAo,Tb,aAo,ude,nAo,sAo,pde,lAo,iAo,Mb,rqe,Ri,Eb,_de,Yy,dAo,bde,cAo,tqe,ko,Ky,mAo,Pi,fAo,Aj,gAo,hAo,yj,uAo,pAo,_Ao,Zy,bAo,vde,vAo,FAo,TAo,st,eL,MAo,Fde,EAo,CAo,Bi,wAo,Tde,AAo,yAo,Lj,LAo,xAo,$Ao,Cb,kAo,Ze,oL,SAo,Mde,RAo,PAo,ka,BAo,Ede,IAo,qAo,Cde,NAo,jAo,wde,DAo,GAo,OAo,W,wb,Ade,VAo,XAo,xj,zAo,WAo,QAo,Ab,yde,HAo,UAo,$j,JAo,YAo,KAo,yb,Lde,ZAo,e0o,kj,o0o,r0o,t0o,Lb,xde,a0o,n0o,Sj,s0o,l0o,i0o,xb,$de,d0o,c0o,Rj,m0o,f0o,g0o,$b,kde,h0o,u0o,Pj,p0o,_0o,b0o,kb,Sde,v0o,F0o,Bj,T0o,M0o,E0o,Sb,Rde,C0o,w0o,Ij,A0o,y0o,L0o,Rb,Pde,x0o,$0o,qj,k0o,S0o,R0o,Pb,Bde,P0o,B0o,Nj,I0o,q0o,N0o,Bb,Ide,j0o,D0o,jj,G0o,O0o,V0o,Ib,qde,X0o,z0o,Dj,W0o,Q0o,H0o,qb,Nde,U0o,J0o,Gj,Y0o,K0o,Z0o,Nb,jde,e6o,o6o,Oj,r6o,t6o,a6o,jb,Dde,n6o,s6o,Vj,l6o,i6o,d6o,Db,Gde,c6o,m6o,Xj,f6o,g6o,h6o,Gb,Ode,u6o,p6o,zj,_6o,b6o,v6o,Ob,Vde,F6o,T6o,Wj,M6o,E6o,C6o,Vb,Xde,w6o,A6o,Qj,y6o,L6o,x6o,Xb,zde,$6o,k6o,Hj,S6o,R6o,P6o,zb,Wde,B6o,I6o,Uj,q6o,N6o,j6o,Wb,Qde,D6o,G6o,Jj,O6o,V6o,X6o,Qb,Hde,z6o,W6o,Yj,Q6o,H6o,U6o,Hb,Ude,J6o,Y6o,Kj,K6o,Z6o,eyo,Ub,Jde,oyo,ryo,Zj,tyo,ayo,nyo,Jb,Yde,syo,lyo,eD,iyo,dyo,cyo,Yb,Kde,myo,fyo,oD,gyo,hyo,uyo,Kb,Zde,pyo,_yo,rD,byo,vyo,Fyo,Zb,ece,Tyo,Myo,tD,Eyo,Cyo,wyo,e2,oce,Ayo,yyo,aD,Lyo,xyo,$yo,o2,rce,kyo,Syo,tce,Ryo,Pyo,Byo,r2,ace,Iyo,qyo,nD,Nyo,jyo,Dyo,t2,nce,Gyo,Oyo,sD,Vyo,Xyo,zyo,a2,sce,Wyo,Qyo,lD,Hyo,Uyo,Jyo,n2,lce,Yyo,Kyo,iD,Zyo,eLo,oLo,s2,rLo,ice,tLo,aLo,dce,nLo,sLo,l2,aqe,Ii,i2,cce,rL,lLo,mce,iLo,nqe,So,tL,dLo,qi,cLo,dD,mLo,fLo,cD,gLo,hLo,uLo,aL,pLo,fce,_Lo,bLo,vLo,lt,nL,FLo,gce,TLo,MLo,Ni,ELo,hce,CLo,wLo,mD,ALo,yLo,LLo,d2,xLo,eo,sL,$Lo,uce,kLo,SLo,Sa,RLo,pce,PLo,BLo,_ce,ILo,qLo,bce,NLo,jLo,DLo,pe,c2,vce,GLo,OLo,fD,VLo,XLo,zLo,m2,Fce,WLo,QLo,gD,HLo,ULo,JLo,f2,Tce,YLo,KLo,hD,ZLo,e8o,o8o,g2,Mce,r8o,t8o,uD,a8o,n8o,s8o,h2,Ece,l8o,i8o,pD,d8o,c8o,m8o,u2,Cce,f8o,g8o,_D,h8o,u8o,p8o,p2,wce,_8o,b8o,bD,v8o,F8o,T8o,_2,Ace,M8o,E8o,vD,C8o,w8o,A8o,b2,yce,y8o,L8o,FD,x8o,$8o,k8o,v2,Lce,S8o,R8o,TD,P8o,B8o,I8o,F2,xce,q8o,N8o,MD,j8o,D8o,G8o,T2,$ce,O8o,V8o,ED,X8o,z8o,W8o,M2,kce,Q8o,H8o,CD,U8o,J8o,Y8o,E2,Sce,K8o,Z8o,wD,e7o,o7o,r7o,C2,Rce,t7o,a7o,AD,n7o,s7o,l7o,w2,Pce,i7o,d7o,yD,c7o,m7o,f7o,A2,g7o,Bce,h7o,u7o,Ice,p7o,_7o,y2,sqe,ji,L2,qce,lL,b7o,Nce,v7o,lqe,Ro,iL,F7o,Di,T7o,LD,M7o,E7o,xD,C7o,w7o,A7o,dL,y7o,jce,L7o,x7o,$7o,it,cL,k7o,Dce,S7o,R7o,Gi,P7o,Gce,B7o,I7o,$D,q7o,N7o,j7o,x2,D7o,oo,mL,G7o,Oce,O7o,V7o,Ra,X7o,Vce,z7o,W7o,Xce,Q7o,H7o,zce,U7o,J7o,Y7o,q,$2,Wce,K7o,Z7o,kD,exo,oxo,rxo,k2,Qce,txo,axo,SD,nxo,sxo,lxo,S2,Hce,ixo,dxo,RD,cxo,mxo,fxo,R2,Uce,gxo,hxo,PD,uxo,pxo,_xo,P2,Jce,bxo,vxo,BD,Fxo,Txo,Mxo,B2,Yce,Exo,Cxo,ID,wxo,Axo,yxo,I2,Kce,Lxo,xxo,qD,$xo,kxo,Sxo,q2,Zce,Rxo,Pxo,ND,Bxo,Ixo,qxo,N2,eme,Nxo,jxo,jD,Dxo,Gxo,Oxo,j2,ome,Vxo,Xxo,DD,zxo,Wxo,Qxo,D2,rme,Hxo,Uxo,GD,Jxo,Yxo,Kxo,G2,tme,Zxo,e9o,OD,o9o,r9o,t9o,O2,ame,a9o,n9o,VD,s9o,l9o,i9o,V2,nme,d9o,c9o,XD,m9o,f9o,g9o,X2,sme,h9o,u9o,zD,p9o,_9o,b9o,z2,lme,v9o,F9o,WD,T9o,M9o,E9o,W2,ime,C9o,w9o,QD,A9o,y9o,L9o,Q2,dme,x9o,$9o,HD,k9o,S9o,R9o,H2,cme,P9o,B9o,UD,I9o,q9o,N9o,U2,mme,j9o,D9o,JD,G9o,O9o,V9o,J2,fme,X9o,z9o,YD,W9o,Q9o,H9o,Y2,gme,U9o,J9o,KD,Y9o,K9o,Z9o,K2,hme,e$o,o$o,ZD,r$o,t$o,a$o,Z2,ume,n$o,s$o,eG,l$o,i$o,d$o,ev,pme,c$o,m$o,oG,f$o,g$o,h$o,ov,_me,u$o,p$o,rG,_$o,b$o,v$o,rv,bme,F$o,T$o,tG,M$o,E$o,C$o,tv,vme,w$o,A$o,aG,y$o,L$o,x$o,av,Fme,$$o,k$o,nG,S$o,R$o,P$o,nv,Tme,B$o,I$o,sG,q$o,N$o,j$o,sv,Mme,D$o,G$o,lG,O$o,V$o,X$o,lv,Eme,z$o,W$o,iG,Q$o,H$o,U$o,iv,Cme,J$o,Y$o,dG,K$o,Z$o,eko,dv,wme,oko,rko,cG,tko,ako,nko,cv,Ame,sko,lko,mG,iko,dko,cko,mv,yme,mko,fko,fG,gko,hko,uko,fv,Lme,pko,_ko,gG,bko,vko,Fko,gv,xme,Tko,Mko,hG,Eko,Cko,wko,hv,$me,Ako,yko,uG,Lko,xko,$ko,uv,kme,kko,Sko,pG,Rko,Pko,Bko,pv,Sme,Iko,qko,_G,Nko,jko,Dko,_v,Rme,Gko,Oko,bG,Vko,Xko,zko,bv,Pme,Wko,Qko,vG,Hko,Uko,Jko,vv,Bme,Yko,Kko,FG,Zko,eSo,oSo,Fv,Ime,rSo,tSo,TG,aSo,nSo,sSo,Tv,qme,lSo,iSo,MG,dSo,cSo,mSo,Mv,fSo,Nme,gSo,hSo,jme,uSo,pSo,Ev,iqe,Oi,Cv,Dme,fL,_So,Gme,bSo,dqe,Po,gL,vSo,Vi,FSo,EG,TSo,MSo,CG,ESo,CSo,wSo,hL,ASo,Ome,ySo,LSo,xSo,dt,uL,$So,Vme,kSo,SSo,Xi,RSo,Xme,PSo,BSo,wG,ISo,qSo,NSo,wv,jSo,ro,pL,DSo,zme,GSo,OSo,Pa,VSo,Wme,XSo,zSo,Qme,WSo,QSo,Hme,HSo,USo,JSo,Y,Av,Ume,YSo,KSo,AG,ZSo,eRo,oRo,yv,Jme,rRo,tRo,yG,aRo,nRo,sRo,Lv,Yme,lRo,iRo,LG,dRo,cRo,mRo,xv,Kme,fRo,gRo,xG,hRo,uRo,pRo,$v,Zme,_Ro,bRo,$G,vRo,FRo,TRo,kv,efe,MRo,ERo,kG,CRo,wRo,ARo,Sv,ofe,yRo,LRo,SG,xRo,$Ro,kRo,Rv,rfe,SRo,RRo,RG,PRo,BRo,IRo,Pv,tfe,qRo,NRo,PG,jRo,DRo,GRo,Bv,afe,ORo,VRo,BG,XRo,zRo,WRo,Iv,nfe,QRo,HRo,IG,URo,JRo,YRo,qv,sfe,KRo,ZRo,qG,ePo,oPo,rPo,Nv,lfe,tPo,aPo,NG,nPo,sPo,lPo,jv,ife,iPo,dPo,jG,cPo,mPo,fPo,Dv,dfe,gPo,hPo,DG,uPo,pPo,_Po,Gv,cfe,bPo,vPo,GG,FPo,TPo,MPo,Ov,mfe,EPo,CPo,OG,wPo,APo,yPo,Vv,ffe,LPo,xPo,VG,$Po,kPo,SPo,Xv,gfe,RPo,PPo,XG,BPo,IPo,qPo,zv,hfe,NPo,jPo,zG,DPo,GPo,OPo,Wv,ufe,VPo,XPo,WG,zPo,WPo,QPo,Qv,pfe,HPo,UPo,QG,JPo,YPo,KPo,Hv,_fe,ZPo,eBo,HG,oBo,rBo,tBo,Uv,bfe,aBo,nBo,UG,sBo,lBo,iBo,Jv,vfe,dBo,cBo,JG,mBo,fBo,gBo,Yv,Ffe,hBo,uBo,YG,pBo,_Bo,bBo,Kv,Tfe,vBo,FBo,KG,TBo,MBo,EBo,Zv,Mfe,CBo,wBo,ZG,ABo,yBo,LBo,eF,Efe,xBo,$Bo,eO,kBo,SBo,RBo,oF,PBo,Cfe,BBo,IBo,wfe,qBo,NBo,rF,cqe,zi,tF,Afe,_L,jBo,yfe,DBo,mqe,Bo,bL,GBo,Wi,OBo,oO,VBo,XBo,rO,zBo,WBo,QBo,vL,HBo,Lfe,UBo,JBo,YBo,ct,FL,KBo,xfe,ZBo,eIo,Qi,oIo,$fe,rIo,tIo,tO,aIo,nIo,sIo,aF,lIo,to,TL,iIo,kfe,dIo,cIo,Ba,mIo,Sfe,fIo,gIo,Rfe,hIo,uIo,Pfe,pIo,_Io,bIo,Yr,nF,Bfe,vIo,FIo,aO,TIo,MIo,EIo,sF,Ife,CIo,wIo,nO,AIo,yIo,LIo,lF,qfe,xIo,$Io,sO,kIo,SIo,RIo,iF,Nfe,PIo,BIo,lO,IIo,qIo,NIo,dF,jfe,jIo,DIo,iO,GIo,OIo,VIo,cF,XIo,Dfe,zIo,WIo,Gfe,QIo,HIo,mF,fqe,Hi,fF,Ofe,ML,UIo,Vfe,JIo,gqe,Io,EL,YIo,Ui,KIo,dO,ZIo,eqo,cO,oqo,rqo,tqo,CL,aqo,Xfe,nqo,sqo,lqo,mt,wL,iqo,zfe,dqo,cqo,Ji,mqo,Wfe,fqo,gqo,mO,hqo,uqo,pqo,gF,_qo,ao,AL,bqo,Qfe,vqo,Fqo,Ia,Tqo,Hfe,Mqo,Eqo,Ufe,Cqo,wqo,Jfe,Aqo,yqo,Lqo,U,hF,Yfe,xqo,$qo,fO,kqo,Sqo,Rqo,uF,Kfe,Pqo,Bqo,gO,Iqo,qqo,Nqo,pF,Zfe,jqo,Dqo,hO,Gqo,Oqo,Vqo,_F,ege,Xqo,zqo,uO,Wqo,Qqo,Hqo,bF,oge,Uqo,Jqo,pO,Yqo,Kqo,Zqo,vF,rge,eNo,oNo,_O,rNo,tNo,aNo,FF,tge,nNo,sNo,bO,lNo,iNo,dNo,TF,age,cNo,mNo,vO,fNo,gNo,hNo,MF,nge,uNo,pNo,FO,_No,bNo,vNo,EF,sge,FNo,TNo,TO,MNo,ENo,CNo,CF,lge,wNo,ANo,MO,yNo,LNo,xNo,wF,ige,$No,kNo,EO,SNo,RNo,PNo,AF,dge,BNo,INo,CO,qNo,NNo,jNo,yF,cge,DNo,GNo,wO,ONo,VNo,XNo,LF,mge,zNo,WNo,AO,QNo,HNo,UNo,xF,fge,JNo,YNo,yO,KNo,ZNo,ejo,$F,gge,ojo,rjo,LO,tjo,ajo,njo,kF,hge,sjo,ljo,xO,ijo,djo,cjo,SF,uge,mjo,fjo,$O,gjo,hjo,ujo,RF,pge,pjo,_jo,kO,bjo,vjo,Fjo,PF,_ge,Tjo,Mjo,SO,Ejo,Cjo,wjo,BF,bge,Ajo,yjo,RO,Ljo,xjo,$jo,IF,vge,kjo,Sjo,PO,Rjo,Pjo,Bjo,qF,Fge,Ijo,qjo,BO,Njo,jjo,Djo,NF,Tge,Gjo,Ojo,IO,Vjo,Xjo,zjo,jF,Mge,Wjo,Qjo,qO,Hjo,Ujo,Jjo,DF,Ege,Yjo,Kjo,NO,Zjo,eDo,oDo,GF,Cge,rDo,tDo,jO,aDo,nDo,sDo,OF,wge,lDo,iDo,DO,dDo,cDo,mDo,VF,Age,fDo,gDo,GO,hDo,uDo,pDo,XF,yge,_Do,bDo,OO,vDo,FDo,TDo,zF,Lge,MDo,EDo,VO,CDo,wDo,ADo,WF,xge,yDo,LDo,XO,xDo,$Do,kDo,QF,SDo,$ge,RDo,PDo,kge,BDo,IDo,HF,hqe,Yi,UF,Sge,yL,qDo,Rge,NDo,uqe,qo,LL,jDo,Ki,DDo,zO,GDo,ODo,WO,VDo,XDo,zDo,xL,WDo,Pge,QDo,HDo,UDo,ft,$L,JDo,Bge,YDo,KDo,Zi,ZDo,Ige,eGo,oGo,QO,rGo,tGo,aGo,JF,nGo,no,kL,sGo,qge,lGo,iGo,qa,dGo,Nge,cGo,mGo,jge,fGo,gGo,Dge,hGo,uGo,pGo,V,YF,Gge,_Go,bGo,HO,vGo,FGo,TGo,KF,Oge,MGo,EGo,UO,CGo,wGo,AGo,ZF,Vge,yGo,LGo,JO,xGo,$Go,kGo,e1,Xge,SGo,RGo,YO,PGo,BGo,IGo,o1,zge,qGo,NGo,KO,jGo,DGo,GGo,r1,Wge,OGo,VGo,ZO,XGo,zGo,WGo,t1,Qge,QGo,HGo,eV,UGo,JGo,YGo,a1,Hge,KGo,ZGo,oV,eOo,oOo,rOo,n1,Uge,tOo,aOo,rV,nOo,sOo,lOo,s1,Jge,iOo,dOo,tV,cOo,mOo,fOo,l1,Yge,gOo,hOo,aV,uOo,pOo,_Oo,i1,Kge,bOo,vOo,nV,FOo,TOo,MOo,d1,Zge,EOo,COo,sV,wOo,AOo,yOo,c1,ehe,LOo,xOo,lV,$Oo,kOo,SOo,m1,ohe,ROo,POo,iV,BOo,IOo,qOo,f1,rhe,NOo,jOo,dV,DOo,GOo,OOo,g1,the,VOo,XOo,cV,zOo,WOo,QOo,h1,ahe,HOo,UOo,mV,JOo,YOo,KOo,u1,nhe,ZOo,eVo,fV,oVo,rVo,tVo,p1,she,aVo,nVo,gV,sVo,lVo,iVo,_1,lhe,dVo,cVo,hV,mVo,fVo,gVo,b1,ihe,hVo,uVo,uV,pVo,_Vo,bVo,v1,dhe,vVo,FVo,pV,TVo,MVo,EVo,F1,che,CVo,wVo,_V,AVo,yVo,LVo,T1,mhe,xVo,$Vo,bV,kVo,SVo,RVo,M1,fhe,PVo,BVo,vV,IVo,qVo,NVo,E1,ghe,jVo,DVo,FV,GVo,OVo,VVo,C1,hhe,XVo,zVo,TV,WVo,QVo,HVo,w1,uhe,UVo,JVo,MV,YVo,KVo,ZVo,A1,phe,eXo,oXo,EV,rXo,tXo,aXo,y1,_he,nXo,sXo,CV,lXo,iXo,dXo,L1,bhe,cXo,mXo,wV,fXo,gXo,hXo,x1,vhe,uXo,pXo,AV,_Xo,bXo,vXo,$1,Fhe,FXo,TXo,yV,MXo,EXo,CXo,k1,The,wXo,AXo,LV,yXo,LXo,xXo,S1,Mhe,$Xo,kXo,xV,SXo,RXo,PXo,R1,Ehe,BXo,IXo,$V,qXo,NXo,jXo,P1,Che,DXo,GXo,kV,OXo,VXo,XXo,B1,whe,zXo,WXo,SV,QXo,HXo,UXo,I1,JXo,Ahe,YXo,KXo,yhe,ZXo,ezo,q1,pqe,ed,N1,Lhe,SL,ozo,xhe,rzo,_qe,No,RL,tzo,od,azo,RV,nzo,szo,PV,lzo,izo,dzo,PL,czo,$he,mzo,fzo,gzo,gt,BL,hzo,khe,uzo,pzo,rd,_zo,She,bzo,vzo,BV,Fzo,Tzo,Mzo,j1,Ezo,so,IL,Czo,Rhe,wzo,Azo,Na,yzo,Phe,Lzo,xzo,Bhe,$zo,kzo,Ihe,Szo,Rzo,Pzo,qhe,D1,Nhe,Bzo,Izo,IV,qzo,Nzo,jzo,G1,Dzo,jhe,Gzo,Ozo,Dhe,Vzo,Xzo,O1,bqe,td,V1,Ghe,qL,zzo,Ohe,Wzo,vqe,jo,NL,Qzo,ad,Hzo,qV,Uzo,Jzo,NV,Yzo,Kzo,Zzo,jL,eWo,Vhe,oWo,rWo,tWo,ht,DL,aWo,Xhe,nWo,sWo,nd,lWo,zhe,iWo,dWo,jV,cWo,mWo,fWo,X1,gWo,lo,GL,hWo,Whe,uWo,pWo,ja,_Wo,Qhe,bWo,vWo,Hhe,FWo,TWo,Uhe,MWo,EWo,CWo,Fe,z1,Jhe,wWo,AWo,DV,yWo,LWo,xWo,W1,Yhe,$Wo,kWo,GV,SWo,RWo,PWo,Q1,Khe,BWo,IWo,OV,qWo,NWo,jWo,Ps,Zhe,DWo,GWo,VV,OWo,VWo,XV,XWo,zWo,WWo,H1,eue,QWo,HWo,zV,UWo,JWo,YWo,ut,oue,KWo,ZWo,WV,eQo,oQo,QV,rQo,tQo,HV,aQo,nQo,sQo,U1,rue,lQo,iQo,UV,dQo,cQo,mQo,J1,tue,fQo,gQo,JV,hQo,uQo,pQo,Y1,aue,_Qo,bQo,YV,vQo,FQo,TQo,K1,nue,MQo,EQo,KV,CQo,wQo,AQo,Z1,sue,yQo,LQo,ZV,xQo,$Qo,kQo,eT,lue,SQo,RQo,eX,PQo,BQo,IQo,oT,iue,qQo,NQo,oX,jQo,DQo,GQo,rT,OQo,due,VQo,XQo,cue,zQo,WQo,tT,Fqe,sd,aT,mue,OL,QQo,fue,HQo,Tqe,Do,VL,UQo,ld,JQo,rX,YQo,KQo,tX,ZQo,eHo,oHo,XL,rHo,gue,tHo,aHo,nHo,pt,zL,sHo,hue,lHo,iHo,id,dHo,uue,cHo,mHo,aX,fHo,gHo,hHo,nT,uHo,io,WL,pHo,pue,_Ho,bHo,Da,vHo,_ue,FHo,THo,bue,MHo,EHo,vue,CHo,wHo,AHo,Fue,sT,Tue,yHo,LHo,nX,xHo,$Ho,kHo,lT,SHo,Mue,RHo,PHo,Eue,BHo,IHo,iT,Mqe,dd,dT,Cue,QL,qHo,wue,NHo,Eqe,Go,HL,jHo,cd,DHo,sX,GHo,OHo,lX,VHo,XHo,zHo,UL,WHo,Aue,QHo,HHo,UHo,_t,JL,JHo,yue,YHo,KHo,md,ZHo,Lue,eUo,oUo,iX,rUo,tUo,aUo,cT,nUo,co,YL,sUo,xue,lUo,iUo,Ga,dUo,$ue,cUo,mUo,kue,fUo,gUo,Sue,hUo,uUo,pUo,ke,mT,Rue,_Uo,bUo,dX,vUo,FUo,TUo,fT,Pue,MUo,EUo,cX,CUo,wUo,AUo,gT,Bue,yUo,LUo,mX,xUo,$Uo,kUo,hT,Iue,SUo,RUo,fX,PUo,BUo,IUo,uT,que,qUo,NUo,gX,jUo,DUo,GUo,pT,Nue,OUo,VUo,hX,XUo,zUo,WUo,_T,jue,QUo,HUo,uX,UUo,JUo,YUo,bT,Due,KUo,ZUo,pX,eJo,oJo,rJo,vT,Gue,tJo,aJo,_X,nJo,sJo,lJo,FT,iJo,Oue,dJo,cJo,Vue,mJo,fJo,TT,Cqe,fd,MT,Xue,KL,gJo,zue,hJo,wqe,Oo,ZL,uJo,gd,pJo,bX,_Jo,bJo,vX,vJo,FJo,TJo,e8,MJo,Wue,EJo,CJo,wJo,bt,o8,AJo,Que,yJo,LJo,hd,xJo,Hue,$Jo,kJo,FX,SJo,RJo,PJo,ET,BJo,mo,r8,IJo,Uue,qJo,NJo,Oa,jJo,Jue,DJo,GJo,Yue,OJo,VJo,Kue,XJo,zJo,WJo,Kr,CT,Zue,QJo,HJo,TX,UJo,JJo,YJo,wT,epe,KJo,ZJo,MX,eYo,oYo,rYo,AT,ope,tYo,aYo,EX,nYo,sYo,lYo,yT,rpe,iYo,dYo,CX,cYo,mYo,fYo,LT,tpe,gYo,hYo,wX,uYo,pYo,_Yo,xT,bYo,ape,vYo,FYo,npe,TYo,MYo,$T,Aqe,ud,kT,spe,t8,EYo,lpe,CYo,yqe,Vo,a8,wYo,pd,AYo,AX,yYo,LYo,yX,xYo,$Yo,kYo,n8,SYo,ipe,RYo,PYo,BYo,vt,s8,IYo,dpe,qYo,NYo,_d,jYo,cpe,DYo,GYo,LX,OYo,VYo,XYo,ST,zYo,fo,l8,WYo,mpe,QYo,HYo,Va,UYo,fpe,JYo,YYo,gpe,KYo,ZYo,hpe,eKo,oKo,rKo,Se,RT,upe,tKo,aKo,xX,nKo,sKo,lKo,PT,ppe,iKo,dKo,$X,cKo,mKo,fKo,BT,_pe,gKo,hKo,kX,uKo,pKo,_Ko,IT,bpe,bKo,vKo,SX,FKo,TKo,MKo,qT,vpe,EKo,CKo,RX,wKo,AKo,yKo,NT,Fpe,LKo,xKo,PX,$Ko,kKo,SKo,jT,Tpe,RKo,PKo,BX,BKo,IKo,qKo,DT,Mpe,NKo,jKo,IX,DKo,GKo,OKo,GT,Epe,VKo,XKo,qX,zKo,WKo,QKo,OT,HKo,Cpe,UKo,JKo,wpe,YKo,KKo,VT,Lqe,bd,XT,Ape,i8,ZKo,ype,eZo,xqe,Xo,d8,oZo,vd,rZo,NX,tZo,aZo,jX,nZo,sZo,lZo,c8,iZo,Lpe,dZo,cZo,mZo,Ft,m8,fZo,xpe,gZo,hZo,Fd,uZo,$pe,pZo,_Zo,DX,bZo,vZo,FZo,zT,TZo,go,f8,MZo,kpe,EZo,CZo,Xa,wZo,Spe,AZo,yZo,Rpe,LZo,xZo,Ppe,$Zo,kZo,SZo,g8,WT,Bpe,RZo,PZo,GX,BZo,IZo,qZo,QT,Ipe,NZo,jZo,OX,DZo,GZo,OZo,HT,VZo,qpe,XZo,zZo,Npe,WZo,QZo,UT,$qe,Td,JT,jpe,h8,HZo,Dpe,UZo,kqe,zo,u8,JZo,Md,YZo,VX,KZo,ZZo,XX,eer,oer,rer,p8,ter,Gpe,aer,ner,ser,Tt,_8,ler,Ope,ier,der,Ed,cer,Vpe,mer,fer,zX,ger,her,uer,YT,per,ho,b8,_er,Xpe,ber,ver,za,Fer,zpe,Ter,Mer,Wpe,Eer,Cer,Qpe,wer,Aer,yer,Zr,KT,Hpe,Ler,xer,WX,$er,ker,Ser,ZT,Upe,Rer,Per,QX,Ber,Ier,qer,eM,Jpe,Ner,jer,HX,Der,Ger,Oer,oM,Ype,Ver,Xer,UX,zer,Wer,Qer,rM,Kpe,Her,Uer,JX,Jer,Yer,Ker,tM,Zer,Zpe,eor,oor,e_e,ror,tor,aM,Sqe,Cd,nM,o_e,v8,aor,r_e,nor,Rqe,Wo,F8,sor,wd,lor,YX,ior,dor,KX,cor,mor,gor,T8,hor,t_e,uor,por,_or,Mt,M8,bor,a_e,vor,For,Ad,Tor,n_e,Mor,Eor,ZX,Cor,wor,Aor,sM,yor,uo,E8,Lor,s_e,xor,$or,Wa,kor,l_e,Sor,Ror,i_e,Por,Bor,d_e,Ior,qor,Nor,yd,lM,c_e,jor,Dor,ez,Gor,Oor,Vor,iM,m_e,Xor,zor,oz,Wor,Qor,Hor,dM,f_e,Uor,Jor,rz,Yor,Kor,Zor,cM,err,g_e,orr,rrr,h_e,trr,arr,mM,Pqe,Ld,fM,u_e,C8,nrr,p_e,srr,Bqe,Qo,w8,lrr,xd,irr,tz,drr,crr,az,mrr,frr,grr,A8,hrr,__e,urr,prr,_rr,Et,y8,brr,b_e,vrr,Frr,$d,Trr,v_e,Mrr,Err,nz,Crr,wrr,Arr,gM,yrr,po,L8,Lrr,F_e,xrr,$rr,Qa,krr,T_e,Srr,Rrr,M_e,Prr,Brr,E_e,Irr,qrr,Nrr,x8,hM,C_e,jrr,Drr,sz,Grr,Orr,Vrr,uM,w_e,Xrr,zrr,lz,Wrr,Qrr,Hrr,pM,Urr,A_e,Jrr,Yrr,y_e,Krr,Zrr,_M,Iqe,kd,bM,L_e,$8,etr,x_e,otr,qqe,Ho,k8,rtr,Sd,ttr,iz,atr,ntr,dz,str,ltr,itr,S8,dtr,$_e,ctr,mtr,ftr,Ct,R8,gtr,k_e,htr,utr,Rd,ptr,S_e,_tr,btr,cz,vtr,Ftr,Ttr,vM,Mtr,_o,P8,Etr,R_e,Ctr,wtr,Ha,Atr,P_e,ytr,Ltr,B_e,xtr,$tr,I_e,ktr,Str,Rtr,q_e,FM,N_e,Ptr,Btr,mz,Itr,qtr,Ntr,TM,jtr,j_e,Dtr,Gtr,D_e,Otr,Vtr,MM,Nqe,Pd,EM,G_e,B8,Xtr,O_e,ztr,jqe,Uo,I8,Wtr,Bd,Qtr,fz,Htr,Utr,gz,Jtr,Ytr,Ktr,q8,Ztr,V_e,ear,oar,rar,wt,N8,tar,X_e,aar,nar,Id,sar,z_e,lar,iar,hz,dar,car,mar,CM,far,bo,j8,gar,W_e,har,uar,Ua,par,Q_e,_ar,bar,H_e,Far,Tar,U_e,Mar,Ear,Car,Ja,wM,J_e,war,Aar,uz,yar,Lar,xar,AM,Y_e,$ar,kar,pz,Sar,Rar,Par,yM,K_e,Bar,Iar,_z,qar,Nar,jar,LM,Z_e,Dar,Gar,bz,Oar,Var,Xar,xM,zar,ebe,War,Qar,obe,Har,Uar,$M,Dqe,qd,kM,rbe,D8,Jar,tbe,Yar,Gqe,Jo,G8,Kar,Nd,Zar,vz,enr,onr,Fz,rnr,tnr,anr,O8,nnr,abe,snr,lnr,inr,At,V8,dnr,nbe,cnr,mnr,jd,fnr,sbe,gnr,hnr,Tz,unr,pnr,_nr,SM,bnr,vo,X8,vnr,lbe,Fnr,Tnr,Ya,Mnr,ibe,Enr,Cnr,dbe,wnr,Anr,cbe,ynr,Lnr,xnr,mbe,RM,fbe,$nr,knr,Mz,Snr,Rnr,Pnr,PM,Bnr,gbe,Inr,qnr,hbe,Nnr,jnr,BM,Oqe,Dd,IM,ube,z8,Dnr,pbe,Gnr,Vqe,Yo,W8,Onr,Gd,Vnr,Ez,Xnr,znr,Cz,Wnr,Qnr,Hnr,Q8,Unr,_be,Jnr,Ynr,Knr,yt,H8,Znr,bbe,esr,osr,Od,rsr,vbe,tsr,asr,wz,nsr,ssr,lsr,qM,isr,wr,U8,dsr,Fbe,csr,msr,Ka,fsr,Tbe,gsr,hsr,Mbe,usr,psr,Ebe,_sr,bsr,vsr,N,NM,Cbe,Fsr,Tsr,Az,Msr,Esr,Csr,jM,wbe,wsr,Asr,yz,ysr,Lsr,xsr,DM,Abe,$sr,ksr,Lz,Ssr,Rsr,Psr,GM,ybe,Bsr,Isr,xz,qsr,Nsr,jsr,OM,Lbe,Dsr,Gsr,$z,Osr,Vsr,Xsr,VM,xbe,zsr,Wsr,kz,Qsr,Hsr,Usr,XM,$be,Jsr,Ysr,Sz,Ksr,Zsr,elr,zM,kbe,olr,rlr,Rz,tlr,alr,nlr,WM,Sbe,slr,llr,Pz,ilr,dlr,clr,QM,Rbe,mlr,flr,Bz,glr,hlr,ulr,HM,Pbe,plr,_lr,Iz,blr,vlr,Flr,UM,Bbe,Tlr,Mlr,qz,Elr,Clr,wlr,JM,Ibe,Alr,ylr,Nz,Llr,xlr,$lr,YM,qbe,klr,Slr,jz,Rlr,Plr,Blr,KM,Nbe,Ilr,qlr,Dz,Nlr,jlr,Dlr,ZM,jbe,Glr,Olr,Gz,Vlr,Xlr,zlr,e4,Dbe,Wlr,Qlr,Oz,Hlr,Ulr,Jlr,Bs,Gbe,Ylr,Klr,Vz,Zlr,eir,Xz,oir,rir,tir,o4,Obe,air,nir,zz,sir,lir,iir,r4,Vbe,dir,cir,Wz,mir,fir,gir,t4,Xbe,hir,uir,Qz,pir,_ir,bir,a4,zbe,vir,Fir,Hz,Tir,Mir,Eir,n4,Wbe,Cir,wir,Uz,Air,yir,Lir,s4,Qbe,xir,$ir,Jz,kir,Sir,Rir,l4,Hbe,Pir,Bir,Yz,Iir,qir,Nir,i4,Ube,jir,Dir,Kz,Gir,Oir,Vir,d4,Jbe,Xir,zir,Zz,Wir,Qir,Hir,c4,Ybe,Uir,Jir,eW,Yir,Kir,Zir,m4,Kbe,edr,odr,oW,rdr,tdr,adr,f4,Zbe,ndr,sdr,rW,ldr,idr,ddr,g4,e2e,cdr,mdr,tW,fdr,gdr,hdr,h4,o2e,udr,pdr,aW,_dr,bdr,vdr,u4,r2e,Fdr,Tdr,nW,Mdr,Edr,Cdr,p4,t2e,wdr,Adr,sW,ydr,Ldr,xdr,_4,a2e,$dr,kdr,lW,Sdr,Rdr,Pdr,b4,n2e,Bdr,Idr,iW,qdr,Ndr,jdr,v4,s2e,Ddr,Gdr,dW,Odr,Vdr,Xdr,F4,l2e,zdr,Wdr,cW,Qdr,Hdr,Udr,T4,i2e,Jdr,Ydr,mW,Kdr,Zdr,ecr,M4,d2e,ocr,rcr,fW,tcr,acr,ncr,E4,c2e,scr,lcr,gW,icr,dcr,ccr,C4,m2e,mcr,fcr,hW,gcr,hcr,ucr,w4,f2e,pcr,_cr,uW,bcr,vcr,Fcr,A4,g2e,Tcr,Mcr,pW,Ecr,Ccr,wcr,y4,h2e,Acr,ycr,_W,Lcr,xcr,$cr,L4,u2e,kcr,Scr,bW,Rcr,Pcr,Bcr,x4,Xqe,Vd,$4,p2e,J8,Icr,_2e,qcr,zqe,Ko,Y8,Ncr,Xd,jcr,vW,Dcr,Gcr,FW,Ocr,Vcr,Xcr,K8,zcr,b2e,Wcr,Qcr,Hcr,Lt,Z8,Ucr,v2e,Jcr,Ycr,zd,Kcr,F2e,Zcr,emr,TW,omr,rmr,tmr,k4,amr,Ar,e7,nmr,T2e,smr,lmr,Za,imr,M2e,dmr,cmr,E2e,mmr,fmr,C2e,gmr,hmr,umr,se,S4,w2e,pmr,_mr,MW,bmr,vmr,Fmr,R4,A2e,Tmr,Mmr,EW,Emr,Cmr,wmr,P4,y2e,Amr,ymr,CW,Lmr,xmr,$mr,B4,L2e,kmr,Smr,wW,Rmr,Pmr,Bmr,I4,x2e,Imr,qmr,AW,Nmr,jmr,Dmr,q4,$2e,Gmr,Omr,yW,Vmr,Xmr,zmr,N4,k2e,Wmr,Qmr,LW,Hmr,Umr,Jmr,j4,S2e,Ymr,Kmr,xW,Zmr,efr,ofr,D4,R2e,rfr,tfr,$W,afr,nfr,sfr,G4,P2e,lfr,ifr,kW,dfr,cfr,mfr,O4,B2e,ffr,gfr,SW,hfr,ufr,pfr,V4,I2e,_fr,bfr,RW,vfr,Ffr,Tfr,X4,q2e,Mfr,Efr,PW,Cfr,wfr,Afr,z4,N2e,yfr,Lfr,BW,xfr,$fr,kfr,W4,j2e,Sfr,Rfr,IW,Pfr,Bfr,Ifr,Q4,D2e,qfr,Nfr,qW,jfr,Dfr,Gfr,H4,G2e,Ofr,Vfr,NW,Xfr,zfr,Wfr,U4,O2e,Qfr,Hfr,jW,Ufr,Jfr,Yfr,J4,V2e,Kfr,Zfr,DW,egr,ogr,rgr,Y4,X2e,tgr,agr,GW,ngr,sgr,lgr,K4,z2e,igr,dgr,OW,cgr,mgr,fgr,Z4,W2e,ggr,hgr,VW,ugr,pgr,_gr,eE,Q2e,bgr,vgr,XW,Fgr,Tgr,Mgr,oE,Wqe,Wd,rE,H2e,o7,Egr,U2e,Cgr,Qqe,Zo,r7,wgr,Qd,Agr,zW,ygr,Lgr,WW,xgr,$gr,kgr,t7,Sgr,J2e,Rgr,Pgr,Bgr,xt,a7,Igr,Y2e,qgr,Ngr,Hd,jgr,K2e,Dgr,Ggr,QW,Ogr,Vgr,Xgr,tE,zgr,yr,n7,Wgr,Z2e,Qgr,Hgr,en,Ugr,eve,Jgr,Ygr,ove,Kgr,Zgr,rve,ehr,ohr,rhr,Te,aE,tve,thr,ahr,HW,nhr,shr,lhr,nE,ave,ihr,dhr,UW,chr,mhr,fhr,sE,nve,ghr,hhr,JW,uhr,phr,_hr,lE,sve,bhr,vhr,YW,Fhr,Thr,Mhr,iE,lve,Ehr,Chr,KW,whr,Ahr,yhr,dE,ive,Lhr,xhr,ZW,$hr,khr,Shr,cE,dve,Rhr,Phr,eQ,Bhr,Ihr,qhr,mE,cve,Nhr,jhr,oQ,Dhr,Ghr,Ohr,fE,mve,Vhr,Xhr,rQ,zhr,Whr,Qhr,gE,fve,Hhr,Uhr,tQ,Jhr,Yhr,Khr,hE,gve,Zhr,eur,aQ,our,rur,tur,uE,hve,aur,nur,nQ,sur,lur,iur,pE,Hqe,Ud,_E,uve,s7,dur,pve,cur,Uqe,er,l7,mur,Jd,fur,sQ,gur,hur,lQ,uur,pur,_ur,i7,bur,_ve,vur,Fur,Tur,$t,d7,Mur,bve,Eur,Cur,Yd,wur,vve,Aur,yur,iQ,Lur,xur,$ur,bE,kur,Lr,c7,Sur,Fve,Rur,Pur,on,Bur,Tve,Iur,qur,Mve,Nur,jur,Eve,Dur,Gur,Our,rn,vE,Cve,Vur,Xur,dQ,zur,Wur,Qur,FE,wve,Hur,Uur,cQ,Jur,Yur,Kur,TE,Ave,Zur,epr,mQ,opr,rpr,tpr,ME,yve,apr,npr,fQ,spr,lpr,ipr,EE,Jqe,Kd,CE,Lve,m7,dpr,xve,cpr,Yqe,or,f7,mpr,Zd,fpr,gQ,gpr,hpr,hQ,upr,ppr,_pr,g7,bpr,$ve,vpr,Fpr,Tpr,kt,h7,Mpr,kve,Epr,Cpr,ec,wpr,Sve,Apr,ypr,uQ,Lpr,xpr,$pr,wE,kpr,xr,u7,Spr,Rve,Rpr,Ppr,tn,Bpr,Pve,Ipr,qpr,Bve,Npr,jpr,Ive,Dpr,Gpr,Opr,ie,AE,qve,Vpr,Xpr,pQ,zpr,Wpr,Qpr,yE,Nve,Hpr,Upr,_Q,Jpr,Ypr,Kpr,LE,jve,Zpr,e_r,bQ,o_r,r_r,t_r,xE,Dve,a_r,n_r,vQ,s_r,l_r,i_r,$E,Gve,d_r,c_r,FQ,m_r,f_r,g_r,kE,Ove,h_r,u_r,TQ,p_r,__r,b_r,SE,Vve,v_r,F_r,MQ,T_r,M_r,E_r,RE,Xve,C_r,w_r,EQ,A_r,y_r,L_r,PE,zve,x_r,$_r,CQ,k_r,S_r,R_r,BE,Wve,P_r,B_r,wQ,I_r,q_r,N_r,IE,Qve,j_r,D_r,AQ,G_r,O_r,V_r,qE,Hve,X_r,z_r,yQ,W_r,Q_r,H_r,NE,Uve,U_r,J_r,LQ,Y_r,K_r,Z_r,jE,Jve,ebr,obr,xQ,rbr,tbr,abr,DE,Yve,nbr,sbr,$Q,lbr,ibr,dbr,GE,Kve,cbr,mbr,kQ,fbr,gbr,hbr,OE,Zve,ubr,pbr,SQ,_br,bbr,vbr,VE,eFe,Fbr,Tbr,RQ,Mbr,Ebr,Cbr,XE,oFe,wbr,Abr,PQ,ybr,Lbr,xbr,zE,rFe,$br,kbr,BQ,Sbr,Rbr,Pbr,WE,Kqe,oc,QE,tFe,p7,Bbr,aFe,Ibr,Zqe,rr,_7,qbr,rc,Nbr,IQ,jbr,Dbr,qQ,Gbr,Obr,Vbr,b7,Xbr,nFe,zbr,Wbr,Qbr,St,v7,Hbr,sFe,Ubr,Jbr,tc,Ybr,lFe,Kbr,Zbr,NQ,e2r,o2r,r2r,HE,t2r,$r,F7,a2r,iFe,n2r,s2r,an,l2r,dFe,i2r,d2r,cFe,c2r,m2r,mFe,f2r,g2r,h2r,ye,UE,fFe,u2r,p2r,jQ,_2r,b2r,v2r,JE,gFe,F2r,T2r,DQ,M2r,E2r,C2r,YE,hFe,w2r,A2r,GQ,y2r,L2r,x2r,KE,uFe,$2r,k2r,OQ,S2r,R2r,P2r,ZE,pFe,B2r,I2r,VQ,q2r,N2r,j2r,eC,_Fe,D2r,G2r,XQ,O2r,V2r,X2r,oC,bFe,z2r,W2r,zQ,Q2r,H2r,U2r,rC,vFe,J2r,Y2r,WQ,K2r,Z2r,evr,tC,FFe,ovr,rvr,QQ,tvr,avr,nvr,aC,TFe,svr,lvr,HQ,ivr,dvr,cvr,nC,eNe,ac,sC,MFe,T7,mvr,EFe,fvr,oNe,tr,M7,gvr,nc,hvr,UQ,uvr,pvr,JQ,_vr,bvr,vvr,E7,Fvr,CFe,Tvr,Mvr,Evr,Rt,C7,Cvr,wFe,wvr,Avr,sc,yvr,AFe,Lvr,xvr,YQ,$vr,kvr,Svr,lC,Rvr,kr,w7,Pvr,yFe,Bvr,Ivr,nn,qvr,LFe,Nvr,jvr,xFe,Dvr,Gvr,$Fe,Ovr,Vvr,Xvr,ee,iC,kFe,zvr,Wvr,KQ,Qvr,Hvr,Uvr,dC,SFe,Jvr,Yvr,ZQ,Kvr,Zvr,eFr,cC,RFe,oFr,rFr,eH,tFr,aFr,nFr,mC,PFe,sFr,lFr,oH,iFr,dFr,cFr,fC,BFe,mFr,fFr,rH,gFr,hFr,uFr,gC,IFe,pFr,_Fr,tH,bFr,vFr,FFr,hC,qFe,TFr,MFr,aH,EFr,CFr,wFr,uC,NFe,AFr,yFr,nH,LFr,xFr,$Fr,pC,jFe,kFr,SFr,sH,RFr,PFr,BFr,_C,DFe,IFr,qFr,lH,NFr,jFr,DFr,bC,GFe,GFr,OFr,iH,VFr,XFr,zFr,vC,OFe,WFr,QFr,dH,HFr,UFr,JFr,FC,VFe,YFr,KFr,cH,ZFr,e1r,o1r,TC,XFe,r1r,t1r,mH,a1r,n1r,s1r,MC,zFe,l1r,i1r,fH,d1r,c1r,m1r,EC,WFe,f1r,g1r,gH,h1r,u1r,p1r,CC,QFe,_1r,b1r,hH,v1r,F1r,T1r,wC,HFe,M1r,E1r,uH,C1r,w1r,A1r,AC,UFe,y1r,L1r,pH,x1r,$1r,k1r,yC,JFe,S1r,R1r,_H,P1r,B1r,I1r,LC,YFe,q1r,N1r,bH,j1r,D1r,G1r,xC,KFe,O1r,V1r,vH,X1r,z1r,W1r,$C,ZFe,Q1r,H1r,FH,U1r,J1r,Y1r,kC,e1e,K1r,Z1r,TH,eTr,oTr,rTr,SC,o1e,tTr,aTr,MH,nTr,sTr,lTr,RC,r1e,iTr,dTr,EH,cTr,mTr,fTr,PC,rNe,lc,BC,t1e,A7,gTr,a1e,hTr,tNe,ar,y7,uTr,ic,pTr,CH,_Tr,bTr,wH,vTr,FTr,TTr,L7,MTr,n1e,ETr,CTr,wTr,Pt,x7,ATr,s1e,yTr,LTr,dc,xTr,l1e,$Tr,kTr,AH,STr,RTr,PTr,IC,BTr,Sr,$7,ITr,i1e,qTr,NTr,sn,jTr,d1e,DTr,GTr,c1e,OTr,VTr,m1e,XTr,zTr,WTr,he,qC,f1e,QTr,HTr,yH,UTr,JTr,YTr,NC,g1e,KTr,ZTr,LH,eMr,oMr,rMr,jC,h1e,tMr,aMr,xH,nMr,sMr,lMr,DC,u1e,iMr,dMr,$H,cMr,mMr,fMr,GC,p1e,gMr,hMr,kH,uMr,pMr,_Mr,OC,_1e,bMr,vMr,SH,FMr,TMr,MMr,VC,b1e,EMr,CMr,RH,wMr,AMr,yMr,XC,v1e,LMr,xMr,PH,$Mr,kMr,SMr,zC,F1e,RMr,PMr,BH,BMr,IMr,qMr,WC,T1e,NMr,jMr,IH,DMr,GMr,OMr,QC,M1e,VMr,XMr,qH,zMr,WMr,QMr,HC,E1e,HMr,UMr,NH,JMr,YMr,KMr,UC,C1e,ZMr,e4r,jH,o4r,r4r,t4r,JC,w1e,a4r,n4r,DH,s4r,l4r,i4r,YC,A1e,d4r,c4r,GH,m4r,f4r,g4r,KC,y1e,h4r,u4r,OH,p4r,_4r,b4r,ZC,L1e,v4r,F4r,VH,T4r,M4r,E4r,e5,aNe,cc,o5,x1e,k7,C4r,$1e,w4r,nNe,nr,S7,A4r,mc,y4r,XH,L4r,x4r,zH,$4r,k4r,S4r,R7,R4r,k1e,P4r,B4r,I4r,Bt,P7,q4r,S1e,N4r,j4r,fc,D4r,R1e,G4r,O4r,WH,V4r,X4r,z4r,r5,W4r,Rr,B7,Q4r,P1e,H4r,U4r,ln,J4r,B1e,Y4r,K4r,I1e,Z4r,eEr,q1e,oEr,rEr,tEr,I7,t5,N1e,aEr,nEr,QH,sEr,lEr,iEr,a5,j1e,dEr,cEr,HH,mEr,fEr,gEr,n5,sNe,gc,s5,D1e,q7,hEr,G1e,uEr,lNe,sr,N7,pEr,hc,_Er,UH,bEr,vEr,JH,FEr,TEr,MEr,j7,EEr,O1e,CEr,wEr,AEr,It,D7,yEr,V1e,LEr,xEr,uc,$Er,X1e,kEr,SEr,YH,REr,PEr,BEr,l5,IEr,Pr,G7,qEr,z1e,NEr,jEr,dn,DEr,W1e,GEr,OEr,Q1e,VEr,XEr,H1e,zEr,WEr,QEr,U1e,i5,J1e,HEr,UEr,KH,JEr,YEr,KEr,d5,iNe,pc,c5,Y1e,O7,ZEr,K1e,eCr,dNe,lr,V7,oCr,_c,rCr,ZH,tCr,aCr,eU,nCr,sCr,lCr,X7,iCr,Z1e,dCr,cCr,mCr,qt,z7,fCr,eTe,gCr,hCr,bc,uCr,oTe,pCr,_Cr,oU,bCr,vCr,FCr,m5,TCr,Br,W7,MCr,rTe,ECr,CCr,cn,wCr,tTe,ACr,yCr,aTe,LCr,xCr,nTe,$Cr,kCr,SCr,de,f5,sTe,RCr,PCr,rU,BCr,ICr,qCr,g5,lTe,NCr,jCr,tU,DCr,GCr,OCr,h5,iTe,VCr,XCr,aU,zCr,WCr,QCr,u5,dTe,HCr,UCr,nU,JCr,YCr,KCr,p5,cTe,ZCr,e5r,sU,o5r,r5r,t5r,_5,mTe,a5r,n5r,lU,s5r,l5r,i5r,b5,fTe,d5r,c5r,iU,m5r,f5r,g5r,v5,gTe,h5r,u5r,dU,p5r,_5r,b5r,F5,hTe,v5r,F5r,cU,T5r,M5r,E5r,T5,uTe,C5r,w5r,mU,A5r,y5r,L5r,M5,pTe,x5r,$5r,fU,k5r,S5r,R5r,E5,_Te,P5r,B5r,gU,I5r,q5r,N5r,C5,bTe,j5r,D5r,hU,G5r,O5r,V5r,w5,vTe,X5r,z5r,uU,W5r,Q5r,H5r,A5,FTe,U5r,J5r,pU,Y5r,K5r,Z5r,y5,TTe,e3r,o3r,_U,r3r,t3r,a3r,L5,MTe,n3r,s3r,bU,l3r,i3r,d3r,x5,ETe,c3r,m3r,vU,f3r,g3r,h3r,$5,CTe,u3r,p3r,FU,_3r,b3r,v3r,k5,wTe,F3r,T3r,TU,M3r,E3r,C3r,S5,cNe,vc,R5,ATe,Q7,w3r,yTe,A3r,mNe,ir,H7,y3r,Fc,L3r,MU,x3r,$3r,EU,k3r,S3r,R3r,U7,P3r,LTe,B3r,I3r,q3r,Nt,J7,N3r,xTe,j3r,D3r,Tc,G3r,$Te,O3r,V3r,CU,X3r,z3r,W3r,P5,Q3r,Ir,Y7,H3r,kTe,U3r,J3r,mn,Y3r,STe,K3r,Z3r,RTe,ewr,owr,PTe,rwr,twr,awr,ce,B5,BTe,nwr,swr,wU,lwr,iwr,dwr,I5,ITe,cwr,mwr,AU,fwr,gwr,hwr,q5,qTe,uwr,pwr,yU,_wr,bwr,vwr,N5,NTe,Fwr,Twr,LU,Mwr,Ewr,Cwr,j5,jTe,wwr,Awr,xU,ywr,Lwr,xwr,D5,DTe,$wr,kwr,$U,Swr,Rwr,Pwr,G5,GTe,Bwr,Iwr,kU,qwr,Nwr,jwr,O5,OTe,Dwr,Gwr,SU,Owr,Vwr,Xwr,V5,VTe,zwr,Wwr,RU,Qwr,Hwr,Uwr,X5,XTe,Jwr,Ywr,PU,Kwr,Zwr,eAr,z5,zTe,oAr,rAr,BU,tAr,aAr,nAr,W5,WTe,sAr,lAr,IU,iAr,dAr,cAr,Q5,QTe,mAr,fAr,qU,gAr,hAr,uAr,H5,HTe,pAr,_Ar,NU,bAr,vAr,FAr,U5,UTe,TAr,MAr,jU,EAr,CAr,wAr,J5,JTe,AAr,yAr,DU,LAr,xAr,$Ar,Y5,YTe,kAr,SAr,GU,RAr,PAr,BAr,K5,KTe,IAr,qAr,OU,NAr,jAr,DAr,Z5,ZTe,GAr,OAr,VU,VAr,XAr,zAr,e3,eMe,WAr,QAr,XU,HAr,UAr,JAr,o3,fNe,Mc,r3,oMe,K7,YAr,rMe,KAr,gNe,dr,Z7,ZAr,Ec,e0r,zU,o0r,r0r,WU,t0r,a0r,n0r,ex,s0r,tMe,l0r,i0r,d0r,jt,ox,c0r,aMe,m0r,f0r,Cc,g0r,nMe,h0r,u0r,QU,p0r,_0r,b0r,t3,v0r,qr,rx,F0r,sMe,T0r,M0r,fn,E0r,lMe,C0r,w0r,iMe,A0r,y0r,dMe,L0r,x0r,$0r,cMe,a3,mMe,k0r,S0r,HU,R0r,P0r,B0r,n3,hNe,wc,s3,fMe,tx,I0r,gMe,q0r,uNe,cr,ax,N0r,Ac,j0r,UU,D0r,G0r,JU,O0r,V0r,X0r,nx,z0r,hMe,W0r,Q0r,H0r,Dt,sx,U0r,uMe,J0r,Y0r,yc,K0r,pMe,Z0r,e6r,YU,o6r,r6r,t6r,l3,a6r,Nr,lx,n6r,_Me,s6r,l6r,gn,i6r,bMe,d6r,c6r,vMe,m6r,f6r,FMe,g6r,h6r,u6r,TMe,i3,MMe,p6r,_6r,KU,b6r,v6r,F6r,d3,pNe,Lc,c3,EMe,ix,T6r,CMe,M6r,_Ne,mr,dx,E6r,xc,C6r,ZU,w6r,A6r,eJ,y6r,L6r,x6r,cx,$6r,wMe,k6r,S6r,R6r,Gt,mx,P6r,AMe,B6r,I6r,$c,q6r,yMe,N6r,j6r,oJ,D6r,G6r,O6r,m3,V6r,jr,fx,X6r,LMe,z6r,W6r,hn,Q6r,xMe,H6r,U6r,$Me,J6r,Y6r,kMe,K6r,Z6r,eyr,re,f3,SMe,oyr,ryr,rJ,tyr,ayr,nyr,g3,RMe,syr,lyr,tJ,iyr,dyr,cyr,h3,PMe,myr,fyr,aJ,gyr,hyr,uyr,u3,BMe,pyr,_yr,nJ,byr,vyr,Fyr,p3,IMe,Tyr,Myr,sJ,Eyr,Cyr,wyr,_3,qMe,Ayr,yyr,lJ,Lyr,xyr,$yr,b3,NMe,kyr,Syr,iJ,Ryr,Pyr,Byr,v3,jMe,Iyr,qyr,dJ,Nyr,jyr,Dyr,F3,DMe,Gyr,Oyr,cJ,Vyr,Xyr,zyr,T3,GMe,Wyr,Qyr,mJ,Hyr,Uyr,Jyr,M3,OMe,Yyr,Kyr,fJ,Zyr,eLr,oLr,E3,VMe,rLr,tLr,gJ,aLr,nLr,sLr,C3,XMe,lLr,iLr,hJ,dLr,cLr,mLr,w3,zMe,fLr,gLr,uJ,hLr,uLr,pLr,A3,WMe,_Lr,bLr,pJ,vLr,FLr,TLr,y3,QMe,MLr,ELr,_J,CLr,wLr,ALr,L3,HMe,yLr,LLr,bJ,xLr,$Lr,kLr,x3,UMe,SLr,RLr,vJ,PLr,BLr,ILr,$3,JMe,qLr,NLr,FJ,jLr,DLr,GLr,k3,YMe,OLr,VLr,TJ,XLr,zLr,WLr,S3,KMe,QLr,HLr,MJ,ULr,JLr,YLr,R3,ZMe,KLr,ZLr,EJ,e8r,o8r,r8r,P3,e4e,t8r,a8r,CJ,n8r,s8r,l8r,B3,o4e,i8r,d8r,wJ,c8r,m8r,f8r,I3,r4e,g8r,h8r,AJ,u8r,p8r,_8r,q3,bNe,kc,N3,t4e,gx,b8r,a4e,v8r,vNe,fr,hx,F8r,Sc,T8r,yJ,M8r,E8r,LJ,C8r,w8r,A8r,ux,y8r,n4e,L8r,x8r,$8r,Ot,px,k8r,s4e,S8r,R8r,Rc,P8r,l4e,B8r,I8r,xJ,q8r,N8r,j8r,j3,D8r,Dr,_x,G8r,i4e,O8r,V8r,un,X8r,d4e,z8r,W8r,c4e,Q8r,H8r,m4e,U8r,J8r,Y8r,Re,D3,f4e,K8r,Z8r,$J,e7r,o7r,r7r,G3,g4e,t7r,a7r,kJ,n7r,s7r,l7r,O3,h4e,i7r,d7r,SJ,c7r,m7r,f7r,V3,u4e,g7r,h7r,RJ,u7r,p7r,_7r,X3,p4e,b7r,v7r,PJ,F7r,T7r,M7r,z3,_4e,E7r,C7r,BJ,w7r,A7r,y7r,W3,b4e,L7r,x7r,IJ,$7r,k7r,S7r,Q3,v4e,R7r,P7r,qJ,B7r,I7r,q7r,H3,F4e,N7r,j7r,NJ,D7r,G7r,O7r,U3,FNe,Pc,J3,T4e,bx,V7r,M4e,X7r,TNe,gr,vx,z7r,Bc,W7r,jJ,Q7r,H7r,DJ,U7r,J7r,Y7r,Fx,K7r,E4e,Z7r,exr,oxr,Vt,Tx,rxr,C4e,txr,axr,Ic,nxr,w4e,sxr,lxr,GJ,ixr,dxr,cxr,Y3,mxr,Gr,Mx,fxr,A4e,gxr,hxr,pn,uxr,y4e,pxr,_xr,L4e,bxr,vxr,x4e,Fxr,Txr,Mxr,Me,K3,$4e,Exr,Cxr,OJ,wxr,Axr,yxr,Z3,k4e,Lxr,xxr,VJ,$xr,kxr,Sxr,ew,S4e,Rxr,Pxr,XJ,Bxr,Ixr,qxr,ow,R4e,Nxr,jxr,zJ,Dxr,Gxr,Oxr,rw,P4e,Vxr,Xxr,WJ,zxr,Wxr,Qxr,tw,B4e,Hxr,Uxr,QJ,Jxr,Yxr,Kxr,aw,I4e,Zxr,e9r,HJ,o9r,r9r,t9r,nw,q4e,a9r,n9r,UJ,s9r,l9r,i9r,sw,N4e,d9r,c9r,JJ,m9r,f9r,g9r,lw,j4e,h9r,u9r,YJ,p9r,_9r,b9r,iw,D4e,v9r,F9r,KJ,T9r,M9r,E9r,dw,G4e,C9r,w9r,ZJ,A9r,y9r,L9r,cw,MNe,qc,mw,O4e,Ex,x9r,V4e,$9r,ENe,hr,Cx,k9r,Nc,S9r,eY,R9r,P9r,oY,B9r,I9r,q9r,wx,N9r,X4e,j9r,D9r,G9r,Xt,Ax,O9r,z4e,V9r,X9r,jc,z9r,W4e,W9r,Q9r,rY,H9r,U9r,J9r,fw,Y9r,Or,yx,K9r,Q4e,Z9r,e$r,_n,o$r,H4e,r$r,t$r,U4e,a$r,n$r,J4e,s$r,l$r,i$r,Le,gw,Y4e,d$r,c$r,tY,m$r,f$r,g$r,hw,K4e,h$r,u$r,aY,p$r,_$r,b$r,uw,Z4e,v$r,F$r,nY,T$r,M$r,E$r,pw,eEe,C$r,w$r,sY,A$r,y$r,L$r,_w,oEe,x$r,$$r,lY,k$r,S$r,R$r,bw,rEe,P$r,B$r,iY,I$r,q$r,N$r,vw,tEe,j$r,D$r,dY,G$r,O$r,V$r,Fw,aEe,X$r,z$r,cY,W$r,Q$r,H$r,Tw,nEe,U$r,J$r,mY,Y$r,K$r,Z$r,Mw,sEe,ekr,okr,fY,rkr,tkr,akr,Ew,CNe,Dc,Cw,lEe,Lx,nkr,iEe,skr,wNe,ur,xx,lkr,Gc,ikr,gY,dkr,ckr,hY,mkr,fkr,gkr,$x,hkr,dEe,ukr,pkr,_kr,zt,kx,bkr,cEe,vkr,Fkr,Oc,Tkr,mEe,Mkr,Ekr,uY,Ckr,wkr,Akr,ww,ykr,Vr,Sx,Lkr,fEe,xkr,$kr,bn,kkr,gEe,Skr,Rkr,hEe,Pkr,Bkr,uEe,Ikr,qkr,Nkr,Pe,Aw,pEe,jkr,Dkr,pY,Gkr,Okr,Vkr,yw,_Ee,Xkr,zkr,_Y,Wkr,Qkr,Hkr,Lw,bEe,Ukr,Jkr,bY,Ykr,Kkr,Zkr,xw,vEe,eSr,oSr,vY,rSr,tSr,aSr,$w,FEe,nSr,sSr,FY,lSr,iSr,dSr,kw,TEe,cSr,mSr,TY,fSr,gSr,hSr,Sw,MEe,uSr,pSr,MY,_Sr,bSr,vSr,Rw,EEe,FSr,TSr,EY,MSr,ESr,CSr,Pw,CEe,wSr,ASr,CY,ySr,LSr,xSr,Bw,ANe,Vc,Iw,wEe,Rx,$Sr,AEe,kSr,yNe,pr,Px,SSr,Xc,RSr,wY,PSr,BSr,AY,ISr,qSr,NSr,Bx,jSr,yEe,DSr,GSr,OSr,Wt,Ix,VSr,LEe,XSr,zSr,zc,WSr,xEe,QSr,HSr,yY,USr,JSr,YSr,qw,KSr,Xr,qx,ZSr,$Ee,eRr,oRr,vn,rRr,kEe,tRr,aRr,SEe,nRr,sRr,REe,lRr,iRr,dRr,xe,Nw,PEe,cRr,mRr,LY,fRr,gRr,hRr,jw,BEe,uRr,pRr,xY,_Rr,bRr,vRr,Dw,IEe,FRr,TRr,$Y,MRr,ERr,CRr,Gw,qEe,wRr,ARr,kY,yRr,LRr,xRr,Ow,NEe,$Rr,kRr,SY,SRr,RRr,PRr,Vw,jEe,BRr,IRr,RY,qRr,NRr,jRr,Xw,DEe,DRr,GRr,PY,ORr,VRr,XRr,zw,GEe,zRr,WRr,BY,QRr,HRr,URr,Ww,OEe,JRr,YRr,IY,KRr,ZRr,ePr,Qw,VEe,oPr,rPr,qY,tPr,aPr,nPr,Hw,LNe,Wc,Uw,XEe,Nx,sPr,zEe,lPr,xNe,_r,jx,iPr,Qc,dPr,NY,cPr,mPr,jY,fPr,gPr,hPr,Dx,uPr,WEe,pPr,_Pr,bPr,Qt,Gx,vPr,QEe,FPr,TPr,Hc,MPr,HEe,EPr,CPr,DY,wPr,APr,yPr,Jw,LPr,zr,Ox,xPr,UEe,$Pr,kPr,Fn,SPr,JEe,RPr,PPr,YEe,BPr,IPr,KEe,qPr,NPr,jPr,$e,Yw,ZEe,DPr,GPr,GY,OPr,VPr,XPr,Kw,eCe,zPr,WPr,OY,QPr,HPr,UPr,Zw,oCe,JPr,YPr,VY,KPr,ZPr,eBr,eA,rCe,oBr,rBr,XY,tBr,aBr,nBr,oA,tCe,sBr,lBr,zY,iBr,dBr,cBr,rA,aCe,mBr,fBr,WY,gBr,hBr,uBr,tA,nCe,pBr,_Br,QY,bBr,vBr,FBr,aA,sCe,TBr,MBr,HY,EBr,CBr,wBr,nA,lCe,ABr,yBr,UY,LBr,xBr,$Br,sA,iCe,kBr,SBr,JY,RBr,PBr,BBr,lA,$Ne,Uc,iA,dCe,Vx,IBr,cCe,qBr,kNe,br,Xx,NBr,Jc,jBr,YY,DBr,GBr,KY,OBr,VBr,XBr,zx,zBr,mCe,WBr,QBr,HBr,Ht,Wx,UBr,fCe,JBr,YBr,Yc,KBr,gCe,ZBr,eIr,ZY,oIr,rIr,tIr,dA,aIr,Wr,Qx,nIr,hCe,sIr,lIr,Tn,iIr,uCe,dIr,cIr,pCe,mIr,fIr,_Ce,gIr,hIr,uIr,De,cA,bCe,pIr,_Ir,eK,bIr,vIr,FIr,mA,vCe,TIr,MIr,oK,EIr,CIr,wIr,fA,FCe,AIr,yIr,rK,LIr,xIr,$Ir,gA,TCe,kIr,SIr,tK,RIr,PIr,BIr,hA,MCe,IIr,qIr,aK,NIr,jIr,DIr,uA,ECe,GIr,OIr,nK,VIr,XIr,zIr,pA,CCe,WIr,QIr,sK,HIr,UIr,JIr,_A,wCe,YIr,KIr,lK,ZIr,eqr,oqr,bA,SNe,Kc,vA,ACe,Hx,rqr,yCe,tqr,RNe,vr,Ux,aqr,Zc,nqr,iK,sqr,lqr,dK,iqr,dqr,cqr,Jx,mqr,LCe,fqr,gqr,hqr,Ut,Yx,uqr,xCe,pqr,_qr,em,bqr,$Ce,vqr,Fqr,cK,Tqr,Mqr,Eqr,FA,Cqr,Qr,Kx,wqr,kCe,Aqr,yqr,Mn,Lqr,SCe,xqr,$qr,RCe,kqr,Sqr,PCe,Rqr,Pqr,Bqr,Ge,TA,BCe,Iqr,qqr,mK,Nqr,jqr,Dqr,MA,ICe,Gqr,Oqr,fK,Vqr,Xqr,zqr,EA,qCe,Wqr,Qqr,gK,Hqr,Uqr,Jqr,CA,NCe,Yqr,Kqr,hK,Zqr,eNr,oNr,wA,jCe,rNr,tNr,uK,aNr,nNr,sNr,AA,DCe,lNr,iNr,pK,dNr,cNr,mNr,yA,GCe,fNr,gNr,_K,hNr,uNr,pNr,LA,OCe,_Nr,bNr,bK,vNr,FNr,TNr,xA,PNe,om,$A,VCe,Zx,MNr,XCe,ENr,BNe,Fr,e9,CNr,rm,wNr,vK,ANr,yNr,FK,LNr,xNr,$Nr,o9,kNr,zCe,SNr,RNr,PNr,Jt,r9,BNr,WCe,INr,qNr,tm,NNr,QCe,jNr,DNr,TK,GNr,ONr,VNr,kA,XNr,Hr,t9,zNr,HCe,WNr,QNr,En,HNr,UCe,UNr,JNr,JCe,YNr,KNr,YCe,ZNr,ejr,ojr,KCe,SA,ZCe,rjr,tjr,MK,ajr,njr,sjr,RA,INe,am,PA,e5e,a9,ljr,o5e,ijr,qNe,Tr,n9,djr,nm,cjr,EK,mjr,fjr,CK,gjr,hjr,ujr,s9,pjr,r5e,_jr,bjr,vjr,Yt,l9,Fjr,t5e,Tjr,Mjr,sm,Ejr,a5e,Cjr,wjr,wK,Ajr,yjr,Ljr,BA,xjr,Ur,i9,$jr,n5e,kjr,Sjr,Cn,Rjr,s5e,Pjr,Bjr,l5e,Ijr,qjr,i5e,Njr,jjr,Djr,d9,IA,d5e,Gjr,Ojr,AK,Vjr,Xjr,zjr,qA,c5e,Wjr,Qjr,yK,Hjr,Ujr,Jjr,NA,NNe,lm,jA,m5e,c9,Yjr,f5e,Kjr,jNe,Mr,m9,Zjr,im,eDr,LK,oDr,rDr,xK,tDr,aDr,nDr,f9,sDr,g5e,lDr,iDr,dDr,Kt,g9,cDr,h5e,mDr,fDr,dm,gDr,u5e,hDr,uDr,$K,pDr,_Dr,bDr,DA,vDr,Jr,h9,FDr,p5e,TDr,MDr,wn,EDr,_5e,CDr,wDr,b5e,ADr,yDr,v5e,LDr,xDr,$Dr,F5e,GA,T5e,kDr,SDr,kK,RDr,PDr,BDr,OA,DNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cy=new oe({}),my=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bm=new IDr({props:{warning:!0,$$slots:{default:[I8t]},$$scope:{ctx:L}}}),fy=new oe({}),gy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L575"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L598"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L721"}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L388"}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L598"}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),Lh=new IDr({props:{$$slots:{default:[j8t]},$$scope:{ctx:L}}}),xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L87"}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L101"}}),Hh=new IDr({props:{$$slots:{default:[G8t]},$$scope:{ctx:L}}}),Uh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),By=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L254"}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L727"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xp=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L734"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Wp=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L749"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L756"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L763"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),lL=new oe({}),iL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L772"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[e7t]},$$scope:{ctx:L}}}),fL=new oe({}),gL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L806"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[o7t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[r7t]},$$scope:{ctx:L}}}),_L=new oe({}),bL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L813"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[t7t]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[a7t]},$$scope:{ctx:L}}}),ML=new oe({}),EL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L799"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[n7t]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[s7t]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L781"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[l7t]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[i7t]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[d7t]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[c7t]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[m7t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[f7t]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L861"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[g7t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[h7t]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[u7t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[p7t]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[_7t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[b7t]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L875"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[v7t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[F7t]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[T7t]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[M7t]},$$scope:{ctx:L}}}),h8=new oe({}),u8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[E7t]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[C7t]},$$scope:{ctx:L}}}),v8=new oe({}),F8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L907"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[w7t]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[A7t]},$$scope:{ctx:L}}}),C8=new oe({}),w8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[y7t]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[L7t]},$$scope:{ctx:L}}}),$8=new oe({}),k8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L829"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[x7t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[$7t]},$$scope:{ctx:L}}}),B8=new oe({}),I8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),N8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[k7t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[S7t]},$$scope:{ctx:L}}}),D8=new oe({}),G8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L845"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[R7t]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[P7t]},$$scope:{ctx:L}}}),z8=new oe({}),W8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[B7t]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[I7t]},$$scope:{ctx:L}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[q7t]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[N7t]},$$scope:{ctx:L}}}),o7=new oe({}),r7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),a7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[j7t]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[D7t]},$$scope:{ctx:L}}}),s7=new oe({}),l7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),d7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[G7t]},$$scope:{ctx:L}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[O7t]},$$scope:{ctx:L}}}),m7=new oe({}),f7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),h7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[V7t]},$$scope:{ctx:L}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X7t]},$$scope:{ctx:L}}}),p7=new oe({}),_7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),v7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z7t]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W7t]},$$scope:{ctx:L}}}),T7=new oe({}),M7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),C7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q7t]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H7t]},$$scope:{ctx:L}}}),A7=new oe({}),y7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),x7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[U7t]},$$scope:{ctx:L}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[J7t]},$$scope:{ctx:L}}}),k7=new oe({}),S7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),P7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Y7t]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[K7t]},$$scope:{ctx:L}}}),q7=new oe({}),N7=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),D7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Z7t]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),O7=new oe({}),V7=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Q7=new oe({}),H7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),J7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),K7=new oe({}),Z7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),Nx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Zx=new oe({}),e9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),r9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),a9=new oe({}),n9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),l9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),c9=new oe({}),m9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),g9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),gm=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),sy=o("from_pretrained()"),hm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),ly=o("AutoConfig"),Ln=o(", "),xn=a("a"),iy=o("AutoModel"),hi=o(`, and
`),$n=a("a"),dy=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),um=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),y$=o("will create a model that is an instance of "),pi=a("a"),L$=o("BertModel"),x$=o("."),Eo=l(),wa=a("p"),$$=o("There is one class of "),pm=a("code"),k$=o("AutoModel"),HDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qIe=l(),_i=a("h2"),_m=a("a"),Cee=a("span"),F(cy.$$.fragment),UDe=l(),wee=a("span"),JDe=o("Extending the Auto Classes"),NIe=l(),kn=a("p"),YDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aee=a("code"),KDe=o("NewModel"),ZDe=o(", make sure you have a "),yee=a("code"),eGe=o("NewModelConfig"),oGe=o(` then you can add those to the auto
classes like this:`),jIe=l(),F(my.$$.fragment),DIe=l(),S$=a("p"),rGe=o("You will then be able to use the auto classes like you would usually do!"),GIe=l(),F(bm.$$.fragment),OIe=l(),bi=a("h2"),vm=a("a"),Lee=a("span"),F(fy.$$.fragment),tGe=l(),xee=a("span"),aGe=o("AutoConfig"),VIe=l(),Co=a("div"),F(gy.$$.fragment),nGe=l(),hy=a("p"),sGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R$=a("a"),lGe=o("from_pretrained()"),iGe=o(" class method."),dGe=l(),uy=a("p"),cGe=o("This class cannot be instantiated directly using "),$ee=a("code"),mGe=o("__init__()"),fGe=o(" (throws an error)."),gGe=l(),Er=a("div"),F(py.$$.fragment),hGe=l(),kee=a("p"),uGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),pGe=l(),vi=a("p"),_Ge=o("The configuration class to instantiate is selected based on the "),See=a("code"),bGe=o("model_type"),vGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ree=a("code"),FGe=o("pretrained_model_name_or_path"),TGe=o(":"),MGe=l(),A=a("ul"),Fm=a("li"),Pee=a("strong"),EGe=o("albert"),CGe=o(" \u2014 "),P$=a("a"),wGe=o("AlbertConfig"),AGe=o(" (ALBERT model)"),yGe=l(),Tm=a("li"),Bee=a("strong"),LGe=o("bart"),xGe=o(" \u2014 "),B$=a("a"),$Ge=o("BartConfig"),kGe=o(" (BART model)"),SGe=l(),Mm=a("li"),Iee=a("strong"),RGe=o("beit"),PGe=o(" \u2014 "),I$=a("a"),BGe=o("BeitConfig"),IGe=o(" (BEiT model)"),qGe=l(),Em=a("li"),qee=a("strong"),NGe=o("bert"),jGe=o(" \u2014 "),q$=a("a"),DGe=o("BertConfig"),GGe=o(" (BERT model)"),OGe=l(),Cm=a("li"),Nee=a("strong"),VGe=o("bert-generation"),XGe=o(" \u2014 "),N$=a("a"),zGe=o("BertGenerationConfig"),WGe=o(" (Bert Generation model)"),QGe=l(),wm=a("li"),jee=a("strong"),HGe=o("big_bird"),UGe=o(" \u2014 "),j$=a("a"),JGe=o("BigBirdConfig"),YGe=o(" (BigBird model)"),KGe=l(),Am=a("li"),Dee=a("strong"),ZGe=o("bigbird_pegasus"),eOe=o(" \u2014 "),D$=a("a"),oOe=o("BigBirdPegasusConfig"),rOe=o(" (BigBirdPegasus model)"),tOe=l(),ym=a("li"),Gee=a("strong"),aOe=o("blenderbot"),nOe=o(" \u2014 "),G$=a("a"),sOe=o("BlenderbotConfig"),lOe=o(" (Blenderbot model)"),iOe=l(),Lm=a("li"),Oee=a("strong"),dOe=o("blenderbot-small"),cOe=o(" \u2014 "),O$=a("a"),mOe=o("BlenderbotSmallConfig"),fOe=o(" (BlenderbotSmall model)"),gOe=l(),xm=a("li"),Vee=a("strong"),hOe=o("camembert"),uOe=o(" \u2014 "),V$=a("a"),pOe=o("CamembertConfig"),_Oe=o(" (CamemBERT model)"),bOe=l(),$m=a("li"),Xee=a("strong"),vOe=o("canine"),FOe=o(" \u2014 "),X$=a("a"),TOe=o("CanineConfig"),MOe=o(" (Canine model)"),EOe=l(),km=a("li"),zee=a("strong"),COe=o("clip"),wOe=o(" \u2014 "),z$=a("a"),AOe=o("CLIPConfig"),yOe=o(" (CLIP model)"),LOe=l(),Sm=a("li"),Wee=a("strong"),xOe=o("convbert"),$Oe=o(" \u2014 "),W$=a("a"),kOe=o("ConvBertConfig"),SOe=o(" (ConvBERT model)"),ROe=l(),Rm=a("li"),Qee=a("strong"),POe=o("convnext"),BOe=o(" \u2014 "),Q$=a("a"),IOe=o("ConvNextConfig"),qOe=o(" (ConvNext model)"),NOe=l(),Pm=a("li"),Hee=a("strong"),jOe=o("ctrl"),DOe=o(" \u2014 "),H$=a("a"),GOe=o("CTRLConfig"),OOe=o(" (CTRL model)"),VOe=l(),Bm=a("li"),Uee=a("strong"),XOe=o("data2vec-audio"),zOe=o(" \u2014 "),U$=a("a"),WOe=o("Data2VecAudioConfig"),QOe=o(" (Data2VecAudio model)"),HOe=l(),Im=a("li"),Jee=a("strong"),UOe=o("data2vec-text"),JOe=o(" \u2014 "),J$=a("a"),YOe=o("Data2VecTextConfig"),KOe=o(" (Data2VecText model)"),ZOe=l(),qm=a("li"),Yee=a("strong"),eVe=o("data2vec-vision"),oVe=o(" \u2014 "),Y$=a("a"),rVe=o("Data2VecVisionConfig"),tVe=o(" (Data2VecVision model)"),aVe=l(),Nm=a("li"),Kee=a("strong"),nVe=o("deberta"),sVe=o(" \u2014 "),K$=a("a"),lVe=o("DebertaConfig"),iVe=o(" (DeBERTa model)"),dVe=l(),jm=a("li"),Zee=a("strong"),cVe=o("deberta-v2"),mVe=o(" \u2014 "),Z$=a("a"),fVe=o("DebertaV2Config"),gVe=o(" (DeBERTa-v2 model)"),hVe=l(),Dm=a("li"),eoe=a("strong"),uVe=o("decision_transformer"),pVe=o(" \u2014 "),ek=a("a"),_Ve=o("DecisionTransformerConfig"),bVe=o(" (Decision Transformer model)"),vVe=l(),Gm=a("li"),ooe=a("strong"),FVe=o("deit"),TVe=o(" \u2014 "),ok=a("a"),MVe=o("DeiTConfig"),EVe=o(" (DeiT model)"),CVe=l(),Om=a("li"),roe=a("strong"),wVe=o("detr"),AVe=o(" \u2014 "),rk=a("a"),yVe=o("DetrConfig"),LVe=o(" (DETR model)"),xVe=l(),Vm=a("li"),toe=a("strong"),$Ve=o("distilbert"),kVe=o(" \u2014 "),tk=a("a"),SVe=o("DistilBertConfig"),RVe=o(" (DistilBERT model)"),PVe=l(),Xm=a("li"),aoe=a("strong"),BVe=o("dpr"),IVe=o(" \u2014 "),ak=a("a"),qVe=o("DPRConfig"),NVe=o(" (DPR model)"),jVe=l(),zm=a("li"),noe=a("strong"),DVe=o("dpt"),GVe=o(" \u2014 "),nk=a("a"),OVe=o("DPTConfig"),VVe=o(" (DPT model)"),XVe=l(),Wm=a("li"),soe=a("strong"),zVe=o("electra"),WVe=o(" \u2014 "),sk=a("a"),QVe=o("ElectraConfig"),HVe=o(" (ELECTRA model)"),UVe=l(),Qm=a("li"),loe=a("strong"),JVe=o("encoder-decoder"),YVe=o(" \u2014 "),lk=a("a"),KVe=o("EncoderDecoderConfig"),ZVe=o(" (Encoder decoder model)"),eXe=l(),Hm=a("li"),ioe=a("strong"),oXe=o("flaubert"),rXe=o(" \u2014 "),ik=a("a"),tXe=o("FlaubertConfig"),aXe=o(" (FlauBERT model)"),nXe=l(),Um=a("li"),doe=a("strong"),sXe=o("flava"),lXe=o(" \u2014 "),dk=a("a"),iXe=o("FlavaConfig"),dXe=o(" (Flava model)"),cXe=l(),Jm=a("li"),coe=a("strong"),mXe=o("fnet"),fXe=o(" \u2014 "),ck=a("a"),gXe=o("FNetConfig"),hXe=o(" (FNet model)"),uXe=l(),Ym=a("li"),moe=a("strong"),pXe=o("fsmt"),_Xe=o(" \u2014 "),mk=a("a"),bXe=o("FSMTConfig"),vXe=o(" (FairSeq Machine-Translation model)"),FXe=l(),Km=a("li"),foe=a("strong"),TXe=o("funnel"),MXe=o(" \u2014 "),fk=a("a"),EXe=o("FunnelConfig"),CXe=o(" (Funnel Transformer model)"),wXe=l(),Zm=a("li"),goe=a("strong"),AXe=o("glpn"),yXe=o(" \u2014 "),gk=a("a"),LXe=o("GLPNConfig"),xXe=o(" (GLPN model)"),$Xe=l(),ef=a("li"),hoe=a("strong"),kXe=o("gpt2"),SXe=o(" \u2014 "),hk=a("a"),RXe=o("GPT2Config"),PXe=o(" (OpenAI GPT-2 model)"),BXe=l(),of=a("li"),uoe=a("strong"),IXe=o("gpt_neo"),qXe=o(" \u2014 "),uk=a("a"),NXe=o("GPTNeoConfig"),jXe=o(" (GPT Neo model)"),DXe=l(),rf=a("li"),poe=a("strong"),GXe=o("gptj"),OXe=o(" \u2014 "),pk=a("a"),VXe=o("GPTJConfig"),XXe=o(" (GPT-J model)"),zXe=l(),tf=a("li"),_oe=a("strong"),WXe=o("hubert"),QXe=o(" \u2014 "),_k=a("a"),HXe=o("HubertConfig"),UXe=o(" (Hubert model)"),JXe=l(),af=a("li"),boe=a("strong"),YXe=o("ibert"),KXe=o(" \u2014 "),bk=a("a"),ZXe=o("IBertConfig"),eze=o(" (I-BERT model)"),oze=l(),nf=a("li"),voe=a("strong"),rze=o("imagegpt"),tze=o(" \u2014 "),vk=a("a"),aze=o("ImageGPTConfig"),nze=o(" (ImageGPT model)"),sze=l(),sf=a("li"),Foe=a("strong"),lze=o("layoutlm"),ize=o(" \u2014 "),Fk=a("a"),dze=o("LayoutLMConfig"),cze=o(" (LayoutLM model)"),mze=l(),lf=a("li"),Toe=a("strong"),fze=o("layoutlmv2"),gze=o(" \u2014 "),Tk=a("a"),hze=o("LayoutLMv2Config"),uze=o(" (LayoutLMv2 model)"),pze=l(),df=a("li"),Moe=a("strong"),_ze=o("led"),bze=o(" \u2014 "),Mk=a("a"),vze=o("LEDConfig"),Fze=o(" (LED model)"),Tze=l(),cf=a("li"),Eoe=a("strong"),Mze=o("longformer"),Eze=o(" \u2014 "),Ek=a("a"),Cze=o("LongformerConfig"),wze=o(" (Longformer model)"),Aze=l(),mf=a("li"),Coe=a("strong"),yze=o("luke"),Lze=o(" \u2014 "),Ck=a("a"),xze=o("LukeConfig"),$ze=o(" (LUKE model)"),kze=l(),ff=a("li"),woe=a("strong"),Sze=o("lxmert"),Rze=o(" \u2014 "),wk=a("a"),Pze=o("LxmertConfig"),Bze=o(" (LXMERT model)"),Ize=l(),gf=a("li"),Aoe=a("strong"),qze=o("m2m_100"),Nze=o(" \u2014 "),Ak=a("a"),jze=o("M2M100Config"),Dze=o(" (M2M100 model)"),Gze=l(),hf=a("li"),yoe=a("strong"),Oze=o("marian"),Vze=o(" \u2014 "),yk=a("a"),Xze=o("MarianConfig"),zze=o(" (Marian model)"),Wze=l(),uf=a("li"),Loe=a("strong"),Qze=o("maskformer"),Hze=o(" \u2014 "),Lk=a("a"),Uze=o("MaskFormerConfig"),Jze=o(" (MaskFormer model)"),Yze=l(),pf=a("li"),xoe=a("strong"),Kze=o("mbart"),Zze=o(" \u2014 "),xk=a("a"),eWe=o("MBartConfig"),oWe=o(" (mBART model)"),rWe=l(),_f=a("li"),$oe=a("strong"),tWe=o("megatron-bert"),aWe=o(" \u2014 "),$k=a("a"),nWe=o("MegatronBertConfig"),sWe=o(" (MegatronBert model)"),lWe=l(),bf=a("li"),koe=a("strong"),iWe=o("mobilebert"),dWe=o(" \u2014 "),kk=a("a"),cWe=o("MobileBertConfig"),mWe=o(" (MobileBERT model)"),fWe=l(),vf=a("li"),Soe=a("strong"),gWe=o("mpnet"),hWe=o(" \u2014 "),Sk=a("a"),uWe=o("MPNetConfig"),pWe=o(" (MPNet model)"),_We=l(),Ff=a("li"),Roe=a("strong"),bWe=o("mt5"),vWe=o(" \u2014 "),Rk=a("a"),FWe=o("MT5Config"),TWe=o(" (mT5 model)"),MWe=l(),Tf=a("li"),Poe=a("strong"),EWe=o("nystromformer"),CWe=o(" \u2014 "),Pk=a("a"),wWe=o("NystromformerConfig"),AWe=o(" (Nystromformer model)"),yWe=l(),Mf=a("li"),Boe=a("strong"),LWe=o("openai-gpt"),xWe=o(" \u2014 "),Bk=a("a"),$We=o("OpenAIGPTConfig"),kWe=o(" (OpenAI GPT model)"),SWe=l(),Ef=a("li"),Ioe=a("strong"),RWe=o("opt"),PWe=o(" \u2014 "),Ik=a("a"),BWe=o("OPTConfig"),IWe=o(" (OPT model)"),qWe=l(),Cf=a("li"),qoe=a("strong"),NWe=o("pegasus"),jWe=o(" \u2014 "),qk=a("a"),DWe=o("PegasusConfig"),GWe=o(" (Pegasus model)"),OWe=l(),wf=a("li"),Noe=a("strong"),VWe=o("perceiver"),XWe=o(" \u2014 "),Nk=a("a"),zWe=o("PerceiverConfig"),WWe=o(" (Perceiver model)"),QWe=l(),Af=a("li"),joe=a("strong"),HWe=o("plbart"),UWe=o(" \u2014 "),jk=a("a"),JWe=o("PLBartConfig"),YWe=o(" (PLBart model)"),KWe=l(),yf=a("li"),Doe=a("strong"),ZWe=o("poolformer"),eQe=o(" \u2014 "),Dk=a("a"),oQe=o("PoolFormerConfig"),rQe=o(" (PoolFormer model)"),tQe=l(),Lf=a("li"),Goe=a("strong"),aQe=o("prophetnet"),nQe=o(" \u2014 "),Gk=a("a"),sQe=o("ProphetNetConfig"),lQe=o(" (ProphetNet model)"),iQe=l(),xf=a("li"),Ooe=a("strong"),dQe=o("qdqbert"),cQe=o(" \u2014 "),Ok=a("a"),mQe=o("QDQBertConfig"),fQe=o(" (QDQBert model)"),gQe=l(),$f=a("li"),Voe=a("strong"),hQe=o("rag"),uQe=o(" \u2014 "),Vk=a("a"),pQe=o("RagConfig"),_Qe=o(" (RAG model)"),bQe=l(),kf=a("li"),Xoe=a("strong"),vQe=o("realm"),FQe=o(" \u2014 "),Xk=a("a"),TQe=o("RealmConfig"),MQe=o(" (Realm model)"),EQe=l(),Sf=a("li"),zoe=a("strong"),CQe=o("reformer"),wQe=o(" \u2014 "),zk=a("a"),AQe=o("ReformerConfig"),yQe=o(" (Reformer model)"),LQe=l(),Rf=a("li"),Woe=a("strong"),xQe=o("regnet"),$Qe=o(" \u2014 "),Wk=a("a"),kQe=o("RegNetConfig"),SQe=o(" (RegNet model)"),RQe=l(),Pf=a("li"),Qoe=a("strong"),PQe=o("rembert"),BQe=o(" \u2014 "),Qk=a("a"),IQe=o("RemBertConfig"),qQe=o(" (RemBERT model)"),NQe=l(),Bf=a("li"),Hoe=a("strong"),jQe=o("resnet"),DQe=o(" \u2014 "),Hk=a("a"),GQe=o("ResNetConfig"),OQe=o(" (ResNet model)"),VQe=l(),If=a("li"),Uoe=a("strong"),XQe=o("retribert"),zQe=o(" \u2014 "),Uk=a("a"),WQe=o("RetriBertConfig"),QQe=o(" (RetriBERT model)"),HQe=l(),qf=a("li"),Joe=a("strong"),UQe=o("roberta"),JQe=o(" \u2014 "),Jk=a("a"),YQe=o("RobertaConfig"),KQe=o(" (RoBERTa model)"),ZQe=l(),Nf=a("li"),Yoe=a("strong"),eHe=o("roformer"),oHe=o(" \u2014 "),Yk=a("a"),rHe=o("RoFormerConfig"),tHe=o(" (RoFormer model)"),aHe=l(),jf=a("li"),Koe=a("strong"),nHe=o("segformer"),sHe=o(" \u2014 "),Kk=a("a"),lHe=o("SegformerConfig"),iHe=o(" (SegFormer model)"),dHe=l(),Df=a("li"),Zoe=a("strong"),cHe=o("sew"),mHe=o(" \u2014 "),Zk=a("a"),fHe=o("SEWConfig"),gHe=o(" (SEW model)"),hHe=l(),Gf=a("li"),ere=a("strong"),uHe=o("sew-d"),pHe=o(" \u2014 "),eS=a("a"),_He=o("SEWDConfig"),bHe=o(" (SEW-D model)"),vHe=l(),Of=a("li"),ore=a("strong"),FHe=o("speech-encoder-decoder"),THe=o(" \u2014 "),oS=a("a"),MHe=o("SpeechEncoderDecoderConfig"),EHe=o(" (Speech Encoder decoder model)"),CHe=l(),Vf=a("li"),rre=a("strong"),wHe=o("speech_to_text"),AHe=o(" \u2014 "),rS=a("a"),yHe=o("Speech2TextConfig"),LHe=o(" (Speech2Text model)"),xHe=l(),Xf=a("li"),tre=a("strong"),$He=o("speech_to_text_2"),kHe=o(" \u2014 "),tS=a("a"),SHe=o("Speech2Text2Config"),RHe=o(" (Speech2Text2 model)"),PHe=l(),zf=a("li"),are=a("strong"),BHe=o("splinter"),IHe=o(" \u2014 "),aS=a("a"),qHe=o("SplinterConfig"),NHe=o(" (Splinter model)"),jHe=l(),Wf=a("li"),nre=a("strong"),DHe=o("squeezebert"),GHe=o(" \u2014 "),nS=a("a"),OHe=o("SqueezeBertConfig"),VHe=o(" (SqueezeBERT model)"),XHe=l(),Qf=a("li"),sre=a("strong"),zHe=o("swin"),WHe=o(" \u2014 "),sS=a("a"),QHe=o("SwinConfig"),HHe=o(" (Swin model)"),UHe=l(),Hf=a("li"),lre=a("strong"),JHe=o("t5"),YHe=o(" \u2014 "),lS=a("a"),KHe=o("T5Config"),ZHe=o(" (T5 model)"),eUe=l(),Uf=a("li"),ire=a("strong"),oUe=o("tapas"),rUe=o(" \u2014 "),iS=a("a"),tUe=o("TapasConfig"),aUe=o(" (TAPAS model)"),nUe=l(),Jf=a("li"),dre=a("strong"),sUe=o("trajectory_transformer"),lUe=o(" \u2014 "),dS=a("a"),iUe=o("TrajectoryTransformerConfig"),dUe=o(" (Trajectory Transformer model)"),cUe=l(),Yf=a("li"),cre=a("strong"),mUe=o("transfo-xl"),fUe=o(" \u2014 "),cS=a("a"),gUe=o("TransfoXLConfig"),hUe=o(" (Transformer-XL model)"),uUe=l(),Kf=a("li"),mre=a("strong"),pUe=o("trocr"),_Ue=o(" \u2014 "),mS=a("a"),bUe=o("TrOCRConfig"),vUe=o(" (TrOCR model)"),FUe=l(),Zf=a("li"),fre=a("strong"),TUe=o("unispeech"),MUe=o(" \u2014 "),fS=a("a"),EUe=o("UniSpeechConfig"),CUe=o(" (UniSpeech model)"),wUe=l(),eg=a("li"),gre=a("strong"),AUe=o("unispeech-sat"),yUe=o(" \u2014 "),gS=a("a"),LUe=o("UniSpeechSatConfig"),xUe=o(" (UniSpeechSat model)"),$Ue=l(),og=a("li"),hre=a("strong"),kUe=o("van"),SUe=o(" \u2014 "),hS=a("a"),RUe=o("VanConfig"),PUe=o(" (VAN model)"),BUe=l(),rg=a("li"),ure=a("strong"),IUe=o("vilt"),qUe=o(" \u2014 "),uS=a("a"),NUe=o("ViltConfig"),jUe=o(" (ViLT model)"),DUe=l(),tg=a("li"),pre=a("strong"),GUe=o("vision-encoder-decoder"),OUe=o(" \u2014 "),pS=a("a"),VUe=o("VisionEncoderDecoderConfig"),XUe=o(" (Vision Encoder decoder model)"),zUe=l(),ag=a("li"),_re=a("strong"),WUe=o("vision-text-dual-encoder"),QUe=o(" \u2014 "),_S=a("a"),HUe=o("VisionTextDualEncoderConfig"),UUe=o(" (VisionTextDualEncoder model)"),JUe=l(),ng=a("li"),bre=a("strong"),YUe=o("visual_bert"),KUe=o(" \u2014 "),bS=a("a"),ZUe=o("VisualBertConfig"),eJe=o(" (VisualBert model)"),oJe=l(),sg=a("li"),vre=a("strong"),rJe=o("vit"),tJe=o(" \u2014 "),vS=a("a"),aJe=o("ViTConfig"),nJe=o(" (ViT model)"),sJe=l(),lg=a("li"),Fre=a("strong"),lJe=o("vit_mae"),iJe=o(" \u2014 "),FS=a("a"),dJe=o("ViTMAEConfig"),cJe=o(" (ViTMAE model)"),mJe=l(),ig=a("li"),Tre=a("strong"),fJe=o("wav2vec2"),gJe=o(" \u2014 "),TS=a("a"),hJe=o("Wav2Vec2Config"),uJe=o(" (Wav2Vec2 model)"),pJe=l(),dg=a("li"),Mre=a("strong"),_Je=o("wav2vec2-conformer"),bJe=o(" \u2014 "),MS=a("a"),vJe=o("Wav2Vec2ConformerConfig"),FJe=o(" (Wav2Vec2-Conformer model)"),TJe=l(),cg=a("li"),Ere=a("strong"),MJe=o("wavlm"),EJe=o(" \u2014 "),ES=a("a"),CJe=o("WavLMConfig"),wJe=o(" (WavLM model)"),AJe=l(),mg=a("li"),Cre=a("strong"),yJe=o("xglm"),LJe=o(" \u2014 "),CS=a("a"),xJe=o("XGLMConfig"),$Je=o(" (XGLM model)"),kJe=l(),fg=a("li"),wre=a("strong"),SJe=o("xlm"),RJe=o(" \u2014 "),wS=a("a"),PJe=o("XLMConfig"),BJe=o(" (XLM model)"),IJe=l(),gg=a("li"),Are=a("strong"),qJe=o("xlm-prophetnet"),NJe=o(" \u2014 "),AS=a("a"),jJe=o("XLMProphetNetConfig"),DJe=o(" (XLMProphetNet model)"),GJe=l(),hg=a("li"),yre=a("strong"),OJe=o("xlm-roberta"),VJe=o(" \u2014 "),yS=a("a"),XJe=o("XLMRobertaConfig"),zJe=o(" (XLM-RoBERTa model)"),WJe=l(),ug=a("li"),Lre=a("strong"),QJe=o("xlm-roberta-xl"),HJe=o(" \u2014 "),LS=a("a"),UJe=o("XLMRobertaXLConfig"),JJe=o(" (XLM-RoBERTa-XL model)"),YJe=l(),pg=a("li"),xre=a("strong"),KJe=o("xlnet"),ZJe=o(" \u2014 "),xS=a("a"),eYe=o("XLNetConfig"),oYe=o(" (XLNet model)"),rYe=l(),_g=a("li"),$re=a("strong"),tYe=o("yolos"),aYe=o(" \u2014 "),$S=a("a"),nYe=o("YolosConfig"),sYe=o(" (YOLOS model)"),lYe=l(),bg=a("li"),kre=a("strong"),iYe=o("yoso"),dYe=o(" \u2014 "),kS=a("a"),cYe=o("YosoConfig"),mYe=o(" (YOSO model)"),fYe=l(),F(vg.$$.fragment),gYe=l(),Fg=a("div"),F(_y.$$.fragment),hYe=l(),Sre=a("p"),uYe=o("Register a new configuration for this class."),XIe=l(),Fi=a("h2"),Tg=a("a"),Rre=a("span"),F(by.$$.fragment),pYe=l(),Pre=a("span"),_Ye=o("AutoTokenizer"),zIe=l(),wo=a("div"),F(vy.$$.fragment),bYe=l(),Fy=a("p"),vYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SS=a("a"),FYe=o("AutoTokenizer.from_pretrained()"),TYe=o(" class method."),MYe=l(),Ty=a("p"),EYe=o("This class cannot be instantiated directly using "),Bre=a("code"),CYe=o("__init__()"),wYe=o(" (throws an error)."),AYe=l(),Cr=a("div"),F(My.$$.fragment),yYe=l(),Ire=a("p"),LYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xYe=l(),Aa=a("p"),$Ye=o("The tokenizer class to instantiate is selected based on the "),qre=a("code"),kYe=o("model_type"),SYe=o(` property of the config object (either
passed as an argument or loaded from `),Nre=a("code"),RYe=o("pretrained_model_name_or_path"),PYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=a("code"),BYe=o("pretrained_model_name_or_path"),IYe=o(":"),qYe=l(),k=a("ul"),Sn=a("li"),Dre=a("strong"),NYe=o("albert"),jYe=o(" \u2014 "),RS=a("a"),DYe=o("AlbertTokenizer"),GYe=o(" or "),PS=a("a"),OYe=o("AlbertTokenizerFast"),VYe=o(" (ALBERT model)"),XYe=l(),Rn=a("li"),Gre=a("strong"),zYe=o("bart"),WYe=o(" \u2014 "),BS=a("a"),QYe=o("BartTokenizer"),HYe=o(" or "),IS=a("a"),UYe=o("BartTokenizerFast"),JYe=o(" (BART model)"),YYe=l(),Pn=a("li"),Ore=a("strong"),KYe=o("barthez"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("BarthezTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("BarthezTokenizerFast"),tKe=o(" (BARThez model)"),aKe=l(),Mg=a("li"),Vre=a("strong"),nKe=o("bartpho"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("BartphoTokenizer"),iKe=o(" (BARTpho model)"),dKe=l(),Bn=a("li"),Xre=a("strong"),cKe=o("bert"),mKe=o(" \u2014 "),DS=a("a"),fKe=o("BertTokenizer"),gKe=o(" or "),GS=a("a"),hKe=o("BertTokenizerFast"),uKe=o(" (BERT model)"),pKe=l(),Eg=a("li"),zre=a("strong"),_Ke=o("bert-generation"),bKe=o(" \u2014 "),OS=a("a"),vKe=o("BertGenerationTokenizer"),FKe=o(" (Bert Generation model)"),TKe=l(),Cg=a("li"),Wre=a("strong"),MKe=o("bert-japanese"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("BertJapaneseTokenizer"),wKe=o(" (BertJapanese model)"),AKe=l(),wg=a("li"),Qre=a("strong"),yKe=o("bertweet"),LKe=o(" \u2014 "),XS=a("a"),xKe=o("BertweetTokenizer"),$Ke=o(" (Bertweet model)"),kKe=l(),In=a("li"),Hre=a("strong"),SKe=o("big_bird"),RKe=o(" \u2014 "),zS=a("a"),PKe=o("BigBirdTokenizer"),BKe=o(" or "),WS=a("a"),IKe=o("BigBirdTokenizerFast"),qKe=o(" (BigBird model)"),NKe=l(),qn=a("li"),Ure=a("strong"),jKe=o("bigbird_pegasus"),DKe=o(" \u2014 "),QS=a("a"),GKe=o("PegasusTokenizer"),OKe=o(" or "),HS=a("a"),VKe=o("PegasusTokenizerFast"),XKe=o(" (BigBirdPegasus model)"),zKe=l(),Nn=a("li"),Jre=a("strong"),WKe=o("blenderbot"),QKe=o(" \u2014 "),US=a("a"),HKe=o("BlenderbotTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("BlenderbotTokenizerFast"),YKe=o(" (Blenderbot model)"),KKe=l(),Ag=a("li"),Yre=a("strong"),ZKe=o("blenderbot-small"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("BlenderbotSmallTokenizer"),rZe=o(" (BlenderbotSmall model)"),tZe=l(),yg=a("li"),Kre=a("strong"),aZe=o("byt5"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("ByT5Tokenizer"),lZe=o(" (ByT5 model)"),iZe=l(),jn=a("li"),Zre=a("strong"),dZe=o("camembert"),cZe=o(" \u2014 "),ZS=a("a"),mZe=o("CamembertTokenizer"),fZe=o(" or "),eR=a("a"),gZe=o("CamembertTokenizerFast"),hZe=o(" (CamemBERT model)"),uZe=l(),Lg=a("li"),ete=a("strong"),pZe=o("canine"),_Ze=o(" \u2014 "),oR=a("a"),bZe=o("CanineTokenizer"),vZe=o(" (Canine model)"),FZe=l(),Dn=a("li"),ote=a("strong"),TZe=o("clip"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("CLIPTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("CLIPTokenizerFast"),AZe=o(" (CLIP model)"),yZe=l(),Gn=a("li"),rte=a("strong"),LZe=o("convbert"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("ConvBertTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("ConvBertTokenizerFast"),RZe=o(" (ConvBERT model)"),PZe=l(),On=a("li"),tte=a("strong"),BZe=o("cpm"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("CpmTokenizer"),NZe=o(" or "),lR=a("a"),jZe=o("CpmTokenizerFast"),DZe=o(" (CPM model)"),GZe=l(),xg=a("li"),ate=a("strong"),OZe=o("ctrl"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("CTRLTokenizer"),zZe=o(" (CTRL model)"),WZe=l(),Vn=a("li"),nte=a("strong"),QZe=o("data2vec-text"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("RobertaTokenizer"),JZe=o(" or "),cR=a("a"),YZe=o("RobertaTokenizerFast"),KZe=o(" (Data2VecText model)"),ZZe=l(),Xn=a("li"),ste=a("strong"),eeo=o("deberta"),oeo=o(" \u2014 "),mR=a("a"),reo=o("DebertaTokenizer"),teo=o(" or "),fR=a("a"),aeo=o("DebertaTokenizerFast"),neo=o(" (DeBERTa model)"),seo=l(),zn=a("li"),lte=a("strong"),leo=o("deberta-v2"),ieo=o(" \u2014 "),gR=a("a"),deo=o("DebertaV2Tokenizer"),ceo=o(" or "),hR=a("a"),meo=o("DebertaV2TokenizerFast"),feo=o(" (DeBERTa-v2 model)"),geo=l(),Wn=a("li"),ite=a("strong"),heo=o("distilbert"),ueo=o(" \u2014 "),uR=a("a"),peo=o("DistilBertTokenizer"),_eo=o(" or "),pR=a("a"),beo=o("DistilBertTokenizerFast"),veo=o(" (DistilBERT model)"),Feo=l(),Qn=a("li"),dte=a("strong"),Teo=o("dpr"),Meo=o(" \u2014 "),_R=a("a"),Eeo=o("DPRQuestionEncoderTokenizer"),Ceo=o(" or "),bR=a("a"),weo=o("DPRQuestionEncoderTokenizerFast"),Aeo=o(" (DPR model)"),yeo=l(),Hn=a("li"),cte=a("strong"),Leo=o("electra"),xeo=o(" \u2014 "),vR=a("a"),$eo=o("ElectraTokenizer"),keo=o(" or "),FR=a("a"),Seo=o("ElectraTokenizerFast"),Reo=o(" (ELECTRA model)"),Peo=l(),$g=a("li"),mte=a("strong"),Beo=o("flaubert"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("FlaubertTokenizer"),Neo=o(" (FlauBERT model)"),jeo=l(),Un=a("li"),fte=a("strong"),Deo=o("fnet"),Geo=o(" \u2014 "),MR=a("a"),Oeo=o("FNetTokenizer"),Veo=o(" or "),ER=a("a"),Xeo=o("FNetTokenizerFast"),zeo=o(" (FNet model)"),Weo=l(),kg=a("li"),gte=a("strong"),Qeo=o("fsmt"),Heo=o(" \u2014 "),CR=a("a"),Ueo=o("FSMTTokenizer"),Jeo=o(" (FairSeq Machine-Translation model)"),Yeo=l(),Jn=a("li"),hte=a("strong"),Keo=o("funnel"),Zeo=o(" \u2014 "),wR=a("a"),eoo=o("FunnelTokenizer"),ooo=o(" or "),AR=a("a"),roo=o("FunnelTokenizerFast"),too=o(" (Funnel Transformer model)"),aoo=l(),Yn=a("li"),ute=a("strong"),noo=o("gpt2"),soo=o(" \u2014 "),yR=a("a"),loo=o("GPT2Tokenizer"),ioo=o(" or "),LR=a("a"),doo=o("GPT2TokenizerFast"),coo=o(" (OpenAI GPT-2 model)"),moo=l(),Kn=a("li"),pte=a("strong"),foo=o("gpt_neo"),goo=o(" \u2014 "),xR=a("a"),hoo=o("GPT2Tokenizer"),uoo=o(" or "),$R=a("a"),poo=o("GPT2TokenizerFast"),_oo=o(" (GPT Neo model)"),boo=l(),Zn=a("li"),_te=a("strong"),voo=o("gptj"),Foo=o(" \u2014 "),kR=a("a"),Too=o("GPT2Tokenizer"),Moo=o(" or "),SR=a("a"),Eoo=o("GPT2TokenizerFast"),Coo=o(" (GPT-J model)"),woo=l(),es=a("li"),bte=a("strong"),Aoo=o("herbert"),yoo=o(" \u2014 "),RR=a("a"),Loo=o("HerbertTokenizer"),xoo=o(" or "),PR=a("a"),$oo=o("HerbertTokenizerFast"),koo=o(" (HerBERT model)"),Soo=l(),Sg=a("li"),vte=a("strong"),Roo=o("hubert"),Poo=o(" \u2014 "),BR=a("a"),Boo=o("Wav2Vec2CTCTokenizer"),Ioo=o(" (Hubert model)"),qoo=l(),os=a("li"),Fte=a("strong"),Noo=o("ibert"),joo=o(" \u2014 "),IR=a("a"),Doo=o("RobertaTokenizer"),Goo=o(" or "),qR=a("a"),Ooo=o("RobertaTokenizerFast"),Voo=o(" (I-BERT model)"),Xoo=l(),rs=a("li"),Tte=a("strong"),zoo=o("layoutlm"),Woo=o(" \u2014 "),NR=a("a"),Qoo=o("LayoutLMTokenizer"),Hoo=o(" or "),jR=a("a"),Uoo=o("LayoutLMTokenizerFast"),Joo=o(" (LayoutLM model)"),Yoo=l(),ts=a("li"),Mte=a("strong"),Koo=o("layoutlmv2"),Zoo=o(" \u2014 "),DR=a("a"),ero=o("LayoutLMv2Tokenizer"),oro=o(" or "),GR=a("a"),rro=o("LayoutLMv2TokenizerFast"),tro=o(" (LayoutLMv2 model)"),aro=l(),as=a("li"),Ete=a("strong"),nro=o("layoutxlm"),sro=o(" \u2014 "),OR=a("a"),lro=o("LayoutXLMTokenizer"),iro=o(" or "),VR=a("a"),dro=o("LayoutXLMTokenizerFast"),cro=o(" (LayoutXLM model)"),mro=l(),ns=a("li"),Cte=a("strong"),fro=o("led"),gro=o(" \u2014 "),XR=a("a"),hro=o("LEDTokenizer"),uro=o(" or "),zR=a("a"),pro=o("LEDTokenizerFast"),_ro=o(" (LED model)"),bro=l(),ss=a("li"),wte=a("strong"),vro=o("longformer"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("LongformerTokenizer"),Mro=o(" or "),QR=a("a"),Ero=o("LongformerTokenizerFast"),Cro=o(" (Longformer model)"),wro=l(),Rg=a("li"),Ate=a("strong"),Aro=o("luke"),yro=o(" \u2014 "),HR=a("a"),Lro=o("LukeTokenizer"),xro=o(" (LUKE model)"),$ro=l(),ls=a("li"),yte=a("strong"),kro=o("lxmert"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("LxmertTokenizer"),Pro=o(" or "),JR=a("a"),Bro=o("LxmertTokenizerFast"),Iro=o(" (LXMERT model)"),qro=l(),Pg=a("li"),Lte=a("strong"),Nro=o("m2m_100"),jro=o(" \u2014 "),YR=a("a"),Dro=o("M2M100Tokenizer"),Gro=o(" (M2M100 model)"),Oro=l(),Bg=a("li"),xte=a("strong"),Vro=o("marian"),Xro=o(" \u2014 "),KR=a("a"),zro=o("MarianTokenizer"),Wro=o(" (Marian model)"),Qro=l(),is=a("li"),$te=a("strong"),Hro=o("mbart"),Uro=o(" \u2014 "),ZR=a("a"),Jro=o("MBartTokenizer"),Yro=o(" or "),eP=a("a"),Kro=o("MBartTokenizerFast"),Zro=o(" (mBART model)"),eto=l(),ds=a("li"),kte=a("strong"),oto=o("mbart50"),rto=o(" \u2014 "),oP=a("a"),tto=o("MBart50Tokenizer"),ato=o(" or "),rP=a("a"),nto=o("MBart50TokenizerFast"),sto=o(" (mBART-50 model)"),lto=l(),cs=a("li"),Ste=a("strong"),ito=o("megatron-bert"),dto=o(" \u2014 "),tP=a("a"),cto=o("BertTokenizer"),mto=o(" or "),aP=a("a"),fto=o("BertTokenizerFast"),gto=o(" (MegatronBert model)"),hto=l(),Ig=a("li"),Rte=a("strong"),uto=o("mluke"),pto=o(" \u2014 "),nP=a("a"),_to=o("MLukeTokenizer"),bto=o(" (mLUKE model)"),vto=l(),ms=a("li"),Pte=a("strong"),Fto=o("mobilebert"),Tto=o(" \u2014 "),sP=a("a"),Mto=o("MobileBertTokenizer"),Eto=o(" or "),lP=a("a"),Cto=o("MobileBertTokenizerFast"),wto=o(" (MobileBERT model)"),Ato=l(),fs=a("li"),Bte=a("strong"),yto=o("mpnet"),Lto=o(" \u2014 "),iP=a("a"),xto=o("MPNetTokenizer"),$to=o(" or "),dP=a("a"),kto=o("MPNetTokenizerFast"),Sto=o(" (MPNet model)"),Rto=l(),gs=a("li"),Ite=a("strong"),Pto=o("mt5"),Bto=o(" \u2014 "),cP=a("a"),Ito=o("MT5Tokenizer"),qto=o(" or "),mP=a("a"),Nto=o("MT5TokenizerFast"),jto=o(" (mT5 model)"),Dto=l(),hs=a("li"),qte=a("strong"),Gto=o("nystromformer"),Oto=o(" \u2014 "),fP=a("a"),Vto=o("AlbertTokenizer"),Xto=o(" or "),gP=a("a"),zto=o("AlbertTokenizerFast"),Wto=o(" (Nystromformer model)"),Qto=l(),us=a("li"),Nte=a("strong"),Hto=o("openai-gpt"),Uto=o(" \u2014 "),hP=a("a"),Jto=o("OpenAIGPTTokenizer"),Yto=o(" or "),uP=a("a"),Kto=o("OpenAIGPTTokenizerFast"),Zto=o(" (OpenAI GPT model)"),eao=l(),qg=a("li"),jte=a("strong"),oao=o("opt"),rao=o(" \u2014 "),pP=a("a"),tao=o("GPT2Tokenizer"),aao=o(" (OPT model)"),nao=l(),ps=a("li"),Dte=a("strong"),sao=o("pegasus"),lao=o(" \u2014 "),_P=a("a"),iao=o("PegasusTokenizer"),dao=o(" or "),bP=a("a"),cao=o("PegasusTokenizerFast"),mao=o(" (Pegasus model)"),fao=l(),Ng=a("li"),Gte=a("strong"),gao=o("perceiver"),hao=o(" \u2014 "),vP=a("a"),uao=o("PerceiverTokenizer"),pao=o(" (Perceiver model)"),_ao=l(),jg=a("li"),Ote=a("strong"),bao=o("phobert"),vao=o(" \u2014 "),FP=a("a"),Fao=o("PhobertTokenizer"),Tao=o(" (PhoBERT model)"),Mao=l(),Dg=a("li"),Vte=a("strong"),Eao=o("plbart"),Cao=o(" \u2014 "),TP=a("a"),wao=o("PLBartTokenizer"),Aao=o(" (PLBart model)"),yao=l(),Gg=a("li"),Xte=a("strong"),Lao=o("prophetnet"),xao=o(" \u2014 "),MP=a("a"),$ao=o("ProphetNetTokenizer"),kao=o(" (ProphetNet model)"),Sao=l(),_s=a("li"),zte=a("strong"),Rao=o("qdqbert"),Pao=o(" \u2014 "),EP=a("a"),Bao=o("BertTokenizer"),Iao=o(" or "),CP=a("a"),qao=o("BertTokenizerFast"),Nao=o(" (QDQBert model)"),jao=l(),Og=a("li"),Wte=a("strong"),Dao=o("rag"),Gao=o(" \u2014 "),wP=a("a"),Oao=o("RagTokenizer"),Vao=o(" (RAG model)"),Xao=l(),bs=a("li"),Qte=a("strong"),zao=o("realm"),Wao=o(" \u2014 "),AP=a("a"),Qao=o("RealmTokenizer"),Hao=o(" or "),yP=a("a"),Uao=o("RealmTokenizerFast"),Jao=o(" (Realm model)"),Yao=l(),vs=a("li"),Hte=a("strong"),Kao=o("reformer"),Zao=o(" \u2014 "),LP=a("a"),eno=o("ReformerTokenizer"),ono=o(" or "),xP=a("a"),rno=o("ReformerTokenizerFast"),tno=o(" (Reformer model)"),ano=l(),Fs=a("li"),Ute=a("strong"),nno=o("rembert"),sno=o(" \u2014 "),$P=a("a"),lno=o("RemBertTokenizer"),ino=o(" or "),kP=a("a"),dno=o("RemBertTokenizerFast"),cno=o(" (RemBERT model)"),mno=l(),Ts=a("li"),Jte=a("strong"),fno=o("retribert"),gno=o(" \u2014 "),SP=a("a"),hno=o("RetriBertTokenizer"),uno=o(" or "),RP=a("a"),pno=o("RetriBertTokenizerFast"),_no=o(" (RetriBERT model)"),bno=l(),Ms=a("li"),Yte=a("strong"),vno=o("roberta"),Fno=o(" \u2014 "),PP=a("a"),Tno=o("RobertaTokenizer"),Mno=o(" or "),BP=a("a"),Eno=o("RobertaTokenizerFast"),Cno=o(" (RoBERTa model)"),wno=l(),Es=a("li"),Kte=a("strong"),Ano=o("roformer"),yno=o(" \u2014 "),IP=a("a"),Lno=o("RoFormerTokenizer"),xno=o(" or "),qP=a("a"),$no=o("RoFormerTokenizerFast"),kno=o(" (RoFormer model)"),Sno=l(),Vg=a("li"),Zte=a("strong"),Rno=o("speech_to_text"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("Speech2TextTokenizer"),Ino=o(" (Speech2Text model)"),qno=l(),Xg=a("li"),eae=a("strong"),Nno=o("speech_to_text_2"),jno=o(" \u2014 "),jP=a("a"),Dno=o("Speech2Text2Tokenizer"),Gno=o(" (Speech2Text2 model)"),Ono=l(),Cs=a("li"),oae=a("strong"),Vno=o("splinter"),Xno=o(" \u2014 "),DP=a("a"),zno=o("SplinterTokenizer"),Wno=o(" or "),GP=a("a"),Qno=o("SplinterTokenizerFast"),Hno=o(" (Splinter model)"),Uno=l(),ws=a("li"),rae=a("strong"),Jno=o("squeezebert"),Yno=o(" \u2014 "),OP=a("a"),Kno=o("SqueezeBertTokenizer"),Zno=o(" or "),VP=a("a"),eso=o("SqueezeBertTokenizerFast"),oso=o(" (SqueezeBERT model)"),rso=l(),As=a("li"),tae=a("strong"),tso=o("t5"),aso=o(" \u2014 "),XP=a("a"),nso=o("T5Tokenizer"),sso=o(" or "),zP=a("a"),lso=o("T5TokenizerFast"),iso=o(" (T5 model)"),dso=l(),zg=a("li"),aae=a("strong"),cso=o("tapas"),mso=o(" \u2014 "),WP=a("a"),fso=o("TapasTokenizer"),gso=o(" (TAPAS model)"),hso=l(),Wg=a("li"),nae=a("strong"),uso=o("tapex"),pso=o(" \u2014 "),QP=a("a"),_so=o("TapexTokenizer"),bso=o(" (TAPEX model)"),vso=l(),Qg=a("li"),sae=a("strong"),Fso=o("transfo-xl"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("TransfoXLTokenizer"),Eso=o(" (Transformer-XL model)"),Cso=l(),ys=a("li"),lae=a("strong"),wso=o("visual_bert"),Aso=o(" \u2014 "),UP=a("a"),yso=o("BertTokenizer"),Lso=o(" or "),JP=a("a"),xso=o("BertTokenizerFast"),$so=o(" (VisualBert model)"),kso=l(),Hg=a("li"),iae=a("strong"),Sso=o("wav2vec2"),Rso=o(" \u2014 "),YP=a("a"),Pso=o("Wav2Vec2CTCTokenizer"),Bso=o(" (Wav2Vec2 model)"),Iso=l(),Ug=a("li"),dae=a("strong"),qso=o("wav2vec2-conformer"),Nso=o(" \u2014 "),KP=a("a"),jso=o("Wav2Vec2CTCTokenizer"),Dso=o(" (Wav2Vec2-Conformer model)"),Gso=l(),Jg=a("li"),cae=a("strong"),Oso=o("wav2vec2_phoneme"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("Wav2Vec2PhonemeCTCTokenizer"),zso=o(" (Wav2Vec2Phoneme model)"),Wso=l(),Ls=a("li"),mae=a("strong"),Qso=o("xglm"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("XGLMTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("XGLMTokenizerFast"),Kso=o(" (XGLM model)"),Zso=l(),Yg=a("li"),fae=a("strong"),elo=o("xlm"),olo=o(" \u2014 "),rB=a("a"),rlo=o("XLMTokenizer"),tlo=o(" (XLM model)"),alo=l(),Kg=a("li"),gae=a("strong"),nlo=o("xlm-prophetnet"),slo=o(" \u2014 "),tB=a("a"),llo=o("XLMProphetNetTokenizer"),ilo=o(" (XLMProphetNet model)"),dlo=l(),xs=a("li"),hae=a("strong"),clo=o("xlm-roberta"),mlo=o(" \u2014 "),aB=a("a"),flo=o("XLMRobertaTokenizer"),glo=o(" or "),nB=a("a"),hlo=o("XLMRobertaTokenizerFast"),ulo=o(" (XLM-RoBERTa model)"),plo=l(),$s=a("li"),uae=a("strong"),_lo=o("xlm-roberta-xl"),blo=o(" \u2014 "),sB=a("a"),vlo=o("RobertaTokenizer"),Flo=o(" or "),lB=a("a"),Tlo=o("RobertaTokenizerFast"),Mlo=o(" (XLM-RoBERTa-XL model)"),Elo=l(),ks=a("li"),pae=a("strong"),Clo=o("xlnet"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("XLNetTokenizer"),ylo=o(" or "),dB=a("a"),Llo=o("XLNetTokenizerFast"),xlo=o(" (XLNet model)"),$lo=l(),Ss=a("li"),_ae=a("strong"),klo=o("yoso"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("AlbertTokenizer"),Plo=o(" or "),mB=a("a"),Blo=o("AlbertTokenizerFast"),Ilo=o(" (YOSO model)"),qlo=l(),F(Zg.$$.fragment),Nlo=l(),eh=a("div"),F(Ey.$$.fragment),jlo=l(),bae=a("p"),Dlo=o("Register a new tokenizer in this mapping."),WIe=l(),Ti=a("h2"),oh=a("a"),vae=a("span"),F(Cy.$$.fragment),Glo=l(),Fae=a("span"),Olo=o("AutoFeatureExtractor"),QIe=l(),Ao=a("div"),F(wy.$$.fragment),Vlo=l(),Ay=a("p"),Xlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fB=a("a"),zlo=o("AutoFeatureExtractor.from_pretrained()"),Wlo=o(" class method."),Qlo=l(),yy=a("p"),Hlo=o("This class cannot be instantiated directly using "),Tae=a("code"),Ulo=o("__init__()"),Jlo=o(" (throws an error)."),Ylo=l(),He=a("div"),F(Ly.$$.fragment),Klo=l(),Mae=a("p"),Zlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eio=l(),ya=a("p"),oio=o("The feature extractor class to instantiate is selected based on the "),Eae=a("code"),rio=o("model_type"),tio=o(` property of the config object
(either passed as an argument or loaded from `),Cae=a("code"),aio=o("pretrained_model_name_or_path"),nio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wae=a("code"),sio=o("pretrained_model_name_or_path"),lio=o(":"),iio=l(),Z=a("ul"),rh=a("li"),Aae=a("strong"),dio=o("beit"),cio=o(" \u2014 "),gB=a("a"),mio=o("BeitFeatureExtractor"),fio=o(" (BEiT model)"),gio=l(),th=a("li"),yae=a("strong"),hio=o("clip"),uio=o(" \u2014 "),hB=a("a"),pio=o("CLIPFeatureExtractor"),_io=o(" (CLIP model)"),bio=l(),ah=a("li"),Lae=a("strong"),vio=o("convnext"),Fio=o(" \u2014 "),uB=a("a"),Tio=o("ConvNextFeatureExtractor"),Mio=o(" (ConvNext model)"),Eio=l(),nh=a("li"),xae=a("strong"),Cio=o("data2vec-audio"),wio=o(" \u2014 "),pB=a("a"),Aio=o("Wav2Vec2FeatureExtractor"),yio=o(" (Data2VecAudio model)"),Lio=l(),sh=a("li"),$ae=a("strong"),xio=o("data2vec-vision"),$io=o(" \u2014 "),_B=a("a"),kio=o("BeitFeatureExtractor"),Sio=o(" (Data2VecVision model)"),Rio=l(),lh=a("li"),kae=a("strong"),Pio=o("deit"),Bio=o(" \u2014 "),bB=a("a"),Iio=o("DeiTFeatureExtractor"),qio=o(" (DeiT model)"),Nio=l(),ih=a("li"),Sae=a("strong"),jio=o("detr"),Dio=o(" \u2014 "),vB=a("a"),Gio=o("DetrFeatureExtractor"),Oio=o(" (DETR model)"),Vio=l(),dh=a("li"),Rae=a("strong"),Xio=o("dpt"),zio=o(" \u2014 "),FB=a("a"),Wio=o("DPTFeatureExtractor"),Qio=o(" (DPT model)"),Hio=l(),ch=a("li"),Pae=a("strong"),Uio=o("flava"),Jio=o(" \u2014 "),TB=a("a"),Yio=o("FlavaFeatureExtractor"),Kio=o(" (Flava model)"),Zio=l(),mh=a("li"),Bae=a("strong"),edo=o("glpn"),odo=o(" \u2014 "),MB=a("a"),rdo=o("GLPNFeatureExtractor"),tdo=o(" (GLPN model)"),ado=l(),fh=a("li"),Iae=a("strong"),ndo=o("hubert"),sdo=o(" \u2014 "),EB=a("a"),ldo=o("Wav2Vec2FeatureExtractor"),ido=o(" (Hubert model)"),ddo=l(),gh=a("li"),qae=a("strong"),cdo=o("layoutlmv2"),mdo=o(" \u2014 "),CB=a("a"),fdo=o("LayoutLMv2FeatureExtractor"),gdo=o(" (LayoutLMv2 model)"),hdo=l(),hh=a("li"),Nae=a("strong"),udo=o("maskformer"),pdo=o(" \u2014 "),wB=a("a"),_do=o("MaskFormerFeatureExtractor"),bdo=o(" (MaskFormer model)"),vdo=l(),uh=a("li"),jae=a("strong"),Fdo=o("perceiver"),Tdo=o(" \u2014 "),AB=a("a"),Mdo=o("PerceiverFeatureExtractor"),Edo=o(" (Perceiver model)"),Cdo=l(),ph=a("li"),Dae=a("strong"),wdo=o("poolformer"),Ado=o(" \u2014 "),yB=a("a"),ydo=o("PoolFormerFeatureExtractor"),Ldo=o(" (PoolFormer model)"),xdo=l(),_h=a("li"),Gae=a("strong"),$do=o("regnet"),kdo=o(" \u2014 "),LB=a("a"),Sdo=o("ConvNextFeatureExtractor"),Rdo=o(" (RegNet model)"),Pdo=l(),bh=a("li"),Oae=a("strong"),Bdo=o("resnet"),Ido=o(" \u2014 "),xB=a("a"),qdo=o("ConvNextFeatureExtractor"),Ndo=o(" (ResNet model)"),jdo=l(),vh=a("li"),Vae=a("strong"),Ddo=o("segformer"),Gdo=o(" \u2014 "),$B=a("a"),Odo=o("SegformerFeatureExtractor"),Vdo=o(" (SegFormer model)"),Xdo=l(),Fh=a("li"),Xae=a("strong"),zdo=o("speech_to_text"),Wdo=o(" \u2014 "),kB=a("a"),Qdo=o("Speech2TextFeatureExtractor"),Hdo=o(" (Speech2Text model)"),Udo=l(),Th=a("li"),zae=a("strong"),Jdo=o("swin"),Ydo=o(" \u2014 "),SB=a("a"),Kdo=o("ViTFeatureExtractor"),Zdo=o(" (Swin model)"),eco=l(),Mh=a("li"),Wae=a("strong"),oco=o("van"),rco=o(" \u2014 "),RB=a("a"),tco=o("ConvNextFeatureExtractor"),aco=o(" (VAN model)"),nco=l(),Eh=a("li"),Qae=a("strong"),sco=o("vit"),lco=o(" \u2014 "),PB=a("a"),ico=o("ViTFeatureExtractor"),dco=o(" (ViT model)"),cco=l(),Ch=a("li"),Hae=a("strong"),mco=o("vit_mae"),fco=o(" \u2014 "),BB=a("a"),gco=o("ViTFeatureExtractor"),hco=o(" (ViTMAE model)"),uco=l(),wh=a("li"),Uae=a("strong"),pco=o("wav2vec2"),_co=o(" \u2014 "),IB=a("a"),bco=o("Wav2Vec2FeatureExtractor"),vco=o(" (Wav2Vec2 model)"),Fco=l(),Ah=a("li"),Jae=a("strong"),Tco=o("wav2vec2-conformer"),Mco=o(" \u2014 "),qB=a("a"),Eco=o("Wav2Vec2FeatureExtractor"),Cco=o(" (Wav2Vec2-Conformer model)"),wco=l(),yh=a("li"),Yae=a("strong"),Aco=o("yolos"),yco=o(" \u2014 "),NB=a("a"),Lco=o("YolosFeatureExtractor"),xco=o(" (YOLOS model)"),$co=l(),F(Lh.$$.fragment),kco=l(),F(xh.$$.fragment),Sco=l(),$h=a("div"),F(xy.$$.fragment),Rco=l(),Kae=a("p"),Pco=o("Register a new feature extractor for this class."),HIe=l(),Mi=a("h2"),kh=a("a"),Zae=a("span"),F($y.$$.fragment),Bco=l(),ene=a("span"),Ico=o("AutoProcessor"),UIe=l(),yo=a("div"),F(ky.$$.fragment),qco=l(),Sy=a("p"),Nco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=a("a"),jco=o("AutoProcessor.from_pretrained()"),Dco=o(" class method."),Gco=l(),Ry=a("p"),Oco=o("This class cannot be instantiated directly using "),one=a("code"),Vco=o("__init__()"),Xco=o(" (throws an error)."),zco=l(),Ue=a("div"),F(Py.$$.fragment),Wco=l(),rne=a("p"),Qco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Hco=l(),Ei=a("p"),Uco=o("The processor class to instantiate is selected based on the "),tne=a("code"),Jco=o("model_type"),Yco=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),Kco=o("pretrained_model_name_or_path"),Zco=o(" if possible):"),emo=l(),ue=a("ul"),Sh=a("li"),nne=a("strong"),omo=o("clip"),rmo=o(" \u2014 "),DB=a("a"),tmo=o("CLIPProcessor"),amo=o(" (CLIP model)"),nmo=l(),Rh=a("li"),sne=a("strong"),smo=o("flava"),lmo=o(" \u2014 "),lne=a("code"),imo=o("FLAVAProcessor"),dmo=o(" (Flava model)"),cmo=l(),Ph=a("li"),ine=a("strong"),mmo=o("layoutlmv2"),fmo=o(" \u2014 "),GB=a("a"),gmo=o("LayoutLMv2Processor"),hmo=o(" (LayoutLMv2 model)"),umo=l(),Bh=a("li"),dne=a("strong"),pmo=o("layoutxlm"),_mo=o(" \u2014 "),OB=a("a"),bmo=o("LayoutXLMProcessor"),vmo=o(" (LayoutXLM model)"),Fmo=l(),Ih=a("li"),cne=a("strong"),Tmo=o("sew"),Mmo=o(" \u2014 "),VB=a("a"),Emo=o("Wav2Vec2Processor"),Cmo=o(" (SEW model)"),wmo=l(),qh=a("li"),mne=a("strong"),Amo=o("sew-d"),ymo=o(" \u2014 "),XB=a("a"),Lmo=o("Wav2Vec2Processor"),xmo=o(" (SEW-D model)"),$mo=l(),Nh=a("li"),fne=a("strong"),kmo=o("speech_to_text"),Smo=o(" \u2014 "),zB=a("a"),Rmo=o("Speech2TextProcessor"),Pmo=o(" (Speech2Text model)"),Bmo=l(),jh=a("li"),gne=a("strong"),Imo=o("speech_to_text_2"),qmo=o(" \u2014 "),WB=a("a"),Nmo=o("Speech2Text2Processor"),jmo=o(" (Speech2Text2 model)"),Dmo=l(),Dh=a("li"),hne=a("strong"),Gmo=o("trocr"),Omo=o(" \u2014 "),QB=a("a"),Vmo=o("TrOCRProcessor"),Xmo=o(" (TrOCR model)"),zmo=l(),Gh=a("li"),une=a("strong"),Wmo=o("unispeech"),Qmo=o(" \u2014 "),HB=a("a"),Hmo=o("Wav2Vec2Processor"),Umo=o(" (UniSpeech model)"),Jmo=l(),Oh=a("li"),pne=a("strong"),Ymo=o("unispeech-sat"),Kmo=o(" \u2014 "),UB=a("a"),Zmo=o("Wav2Vec2Processor"),efo=o(" (UniSpeechSat model)"),ofo=l(),Vh=a("li"),_ne=a("strong"),rfo=o("vilt"),tfo=o(" \u2014 "),JB=a("a"),afo=o("ViltProcessor"),nfo=o(" (ViLT model)"),sfo=l(),Xh=a("li"),bne=a("strong"),lfo=o("vision-text-dual-encoder"),ifo=o(" \u2014 "),YB=a("a"),dfo=o("VisionTextDualEncoderProcessor"),cfo=o(" (VisionTextDualEncoder model)"),mfo=l(),zh=a("li"),vne=a("strong"),ffo=o("wav2vec2"),gfo=o(" \u2014 "),KB=a("a"),hfo=o("Wav2Vec2Processor"),ufo=o(" (Wav2Vec2 model)"),pfo=l(),Wh=a("li"),Fne=a("strong"),_fo=o("wav2vec2-conformer"),bfo=o(" \u2014 "),ZB=a("a"),vfo=o("Wav2Vec2Processor"),Ffo=o(" (Wav2Vec2-Conformer model)"),Tfo=l(),Qh=a("li"),Tne=a("strong"),Mfo=o("wavlm"),Efo=o(" \u2014 "),eI=a("a"),Cfo=o("Wav2Vec2Processor"),wfo=o(" (WavLM model)"),Afo=l(),F(Hh.$$.fragment),yfo=l(),F(Uh.$$.fragment),Lfo=l(),Jh=a("div"),F(By.$$.fragment),xfo=l(),Mne=a("p"),$fo=o("Register a new processor for this class."),JIe=l(),Ci=a("h2"),Yh=a("a"),Ene=a("span"),F(Iy.$$.fragment),kfo=l(),Cne=a("span"),Sfo=o("AutoModel"),YIe=l(),Lo=a("div"),F(qy.$$.fragment),Rfo=l(),wi=a("p"),Pfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oI=a("a"),Bfo=o("from_pretrained()"),Ifo=o(" class method or the "),rI=a("a"),qfo=o("from_config()"),Nfo=o(` class
method.`),jfo=l(),Ny=a("p"),Dfo=o("This class cannot be instantiated directly using "),wne=a("code"),Gfo=o("__init__()"),Ofo=o(" (throws an error)."),Vfo=l(),tt=a("div"),F(jy.$$.fragment),Xfo=l(),Ane=a("p"),zfo=o("Instantiates one of the base model classes of the library from a configuration."),Wfo=l(),Ai=a("p"),Qfo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),Hfo=o("not"),Ufo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tI=a("a"),Jfo=o("from_pretrained()"),Yfo=o(" to load the model weights."),Kfo=l(),F(Kh.$$.fragment),Zfo=l(),Je=a("div"),F(Dy.$$.fragment),ego=l(),Lne=a("p"),ogo=o("Instantiate one of the base model classes of the library from a pretrained model."),rgo=l(),La=a("p"),tgo=o("The model class to instantiate is selected based on the "),xne=a("code"),ago=o("model_type"),ngo=o(` property of the config object (either
passed as an argument or loaded from `),$ne=a("code"),sgo=o("pretrained_model_name_or_path"),lgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),igo=o("pretrained_model_name_or_path"),dgo=o(":"),cgo=l(),x=a("ul"),Zh=a("li"),Sne=a("strong"),mgo=o("albert"),fgo=o(" \u2014 "),aI=a("a"),ggo=o("AlbertModel"),hgo=o(" (ALBERT model)"),ugo=l(),eu=a("li"),Rne=a("strong"),pgo=o("bart"),_go=o(" \u2014 "),nI=a("a"),bgo=o("BartModel"),vgo=o(" (BART model)"),Fgo=l(),ou=a("li"),Pne=a("strong"),Tgo=o("beit"),Mgo=o(" \u2014 "),sI=a("a"),Ego=o("BeitModel"),Cgo=o(" (BEiT model)"),wgo=l(),ru=a("li"),Bne=a("strong"),Ago=o("bert"),ygo=o(" \u2014 "),lI=a("a"),Lgo=o("BertModel"),xgo=o(" (BERT model)"),$go=l(),tu=a("li"),Ine=a("strong"),kgo=o("bert-generation"),Sgo=o(" \u2014 "),iI=a("a"),Rgo=o("BertGenerationEncoder"),Pgo=o(" (Bert Generation model)"),Bgo=l(),au=a("li"),qne=a("strong"),Igo=o("big_bird"),qgo=o(" \u2014 "),dI=a("a"),Ngo=o("BigBirdModel"),jgo=o(" (BigBird model)"),Dgo=l(),nu=a("li"),Nne=a("strong"),Ggo=o("bigbird_pegasus"),Ogo=o(" \u2014 "),cI=a("a"),Vgo=o("BigBirdPegasusModel"),Xgo=o(" (BigBirdPegasus model)"),zgo=l(),su=a("li"),jne=a("strong"),Wgo=o("blenderbot"),Qgo=o(" \u2014 "),mI=a("a"),Hgo=o("BlenderbotModel"),Ugo=o(" (Blenderbot model)"),Jgo=l(),lu=a("li"),Dne=a("strong"),Ygo=o("blenderbot-small"),Kgo=o(" \u2014 "),fI=a("a"),Zgo=o("BlenderbotSmallModel"),eho=o(" (BlenderbotSmall model)"),oho=l(),iu=a("li"),Gne=a("strong"),rho=o("camembert"),tho=o(" \u2014 "),gI=a("a"),aho=o("CamembertModel"),nho=o(" (CamemBERT model)"),sho=l(),du=a("li"),One=a("strong"),lho=o("canine"),iho=o(" \u2014 "),hI=a("a"),dho=o("CanineModel"),cho=o(" (Canine model)"),mho=l(),cu=a("li"),Vne=a("strong"),fho=o("clip"),gho=o(" \u2014 "),uI=a("a"),hho=o("CLIPModel"),uho=o(" (CLIP model)"),pho=l(),mu=a("li"),Xne=a("strong"),_ho=o("convbert"),bho=o(" \u2014 "),pI=a("a"),vho=o("ConvBertModel"),Fho=o(" (ConvBERT model)"),Tho=l(),fu=a("li"),zne=a("strong"),Mho=o("convnext"),Eho=o(" \u2014 "),_I=a("a"),Cho=o("ConvNextModel"),who=o(" (ConvNext model)"),Aho=l(),gu=a("li"),Wne=a("strong"),yho=o("ctrl"),Lho=o(" \u2014 "),bI=a("a"),xho=o("CTRLModel"),$ho=o(" (CTRL model)"),kho=l(),hu=a("li"),Qne=a("strong"),Sho=o("data2vec-audio"),Rho=o(" \u2014 "),vI=a("a"),Pho=o("Data2VecAudioModel"),Bho=o(" (Data2VecAudio model)"),Iho=l(),uu=a("li"),Hne=a("strong"),qho=o("data2vec-text"),Nho=o(" \u2014 "),FI=a("a"),jho=o("Data2VecTextModel"),Dho=o(" (Data2VecText model)"),Gho=l(),pu=a("li"),Une=a("strong"),Oho=o("data2vec-vision"),Vho=o(" \u2014 "),TI=a("a"),Xho=o("Data2VecVisionModel"),zho=o(" (Data2VecVision model)"),Who=l(),_u=a("li"),Jne=a("strong"),Qho=o("deberta"),Hho=o(" \u2014 "),MI=a("a"),Uho=o("DebertaModel"),Jho=o(" (DeBERTa model)"),Yho=l(),bu=a("li"),Yne=a("strong"),Kho=o("deberta-v2"),Zho=o(" \u2014 "),EI=a("a"),euo=o("DebertaV2Model"),ouo=o(" (DeBERTa-v2 model)"),ruo=l(),vu=a("li"),Kne=a("strong"),tuo=o("decision_transformer"),auo=o(" \u2014 "),CI=a("a"),nuo=o("DecisionTransformerModel"),suo=o(" (Decision Transformer model)"),luo=l(),Fu=a("li"),Zne=a("strong"),iuo=o("deit"),duo=o(" \u2014 "),wI=a("a"),cuo=o("DeiTModel"),muo=o(" (DeiT model)"),fuo=l(),Tu=a("li"),ese=a("strong"),guo=o("detr"),huo=o(" \u2014 "),AI=a("a"),uuo=o("DetrModel"),puo=o(" (DETR model)"),_uo=l(),Mu=a("li"),ose=a("strong"),buo=o("distilbert"),vuo=o(" \u2014 "),yI=a("a"),Fuo=o("DistilBertModel"),Tuo=o(" (DistilBERT model)"),Muo=l(),Eu=a("li"),rse=a("strong"),Euo=o("dpr"),Cuo=o(" \u2014 "),LI=a("a"),wuo=o("DPRQuestionEncoder"),Auo=o(" (DPR model)"),yuo=l(),Cu=a("li"),tse=a("strong"),Luo=o("dpt"),xuo=o(" \u2014 "),xI=a("a"),$uo=o("DPTModel"),kuo=o(" (DPT model)"),Suo=l(),wu=a("li"),ase=a("strong"),Ruo=o("electra"),Puo=o(" \u2014 "),$I=a("a"),Buo=o("ElectraModel"),Iuo=o(" (ELECTRA model)"),quo=l(),Au=a("li"),nse=a("strong"),Nuo=o("flaubert"),juo=o(" \u2014 "),kI=a("a"),Duo=o("FlaubertModel"),Guo=o(" (FlauBERT model)"),Ouo=l(),yu=a("li"),sse=a("strong"),Vuo=o("flava"),Xuo=o(" \u2014 "),SI=a("a"),zuo=o("FlavaModel"),Wuo=o(" (Flava model)"),Quo=l(),Lu=a("li"),lse=a("strong"),Huo=o("fnet"),Uuo=o(" \u2014 "),RI=a("a"),Juo=o("FNetModel"),Yuo=o(" (FNet model)"),Kuo=l(),xu=a("li"),ise=a("strong"),Zuo=o("fsmt"),epo=o(" \u2014 "),PI=a("a"),opo=o("FSMTModel"),rpo=o(" (FairSeq Machine-Translation model)"),tpo=l(),Rs=a("li"),dse=a("strong"),apo=o("funnel"),npo=o(" \u2014 "),BI=a("a"),spo=o("FunnelModel"),lpo=o(" or "),II=a("a"),ipo=o("FunnelBaseModel"),dpo=o(" (Funnel Transformer model)"),cpo=l(),$u=a("li"),cse=a("strong"),mpo=o("glpn"),fpo=o(" \u2014 "),qI=a("a"),gpo=o("GLPNModel"),hpo=o(" (GLPN model)"),upo=l(),ku=a("li"),mse=a("strong"),ppo=o("gpt2"),_po=o(" \u2014 "),NI=a("a"),bpo=o("GPT2Model"),vpo=o(" (OpenAI GPT-2 model)"),Fpo=l(),Su=a("li"),fse=a("strong"),Tpo=o("gpt_neo"),Mpo=o(" \u2014 "),jI=a("a"),Epo=o("GPTNeoModel"),Cpo=o(" (GPT Neo model)"),wpo=l(),Ru=a("li"),gse=a("strong"),Apo=o("gptj"),ypo=o(" \u2014 "),DI=a("a"),Lpo=o("GPTJModel"),xpo=o(" (GPT-J model)"),$po=l(),Pu=a("li"),hse=a("strong"),kpo=o("hubert"),Spo=o(" \u2014 "),GI=a("a"),Rpo=o("HubertModel"),Ppo=o(" (Hubert model)"),Bpo=l(),Bu=a("li"),use=a("strong"),Ipo=o("ibert"),qpo=o(" \u2014 "),OI=a("a"),Npo=o("IBertModel"),jpo=o(" (I-BERT model)"),Dpo=l(),Iu=a("li"),pse=a("strong"),Gpo=o("imagegpt"),Opo=o(" \u2014 "),VI=a("a"),Vpo=o("ImageGPTModel"),Xpo=o(" (ImageGPT model)"),zpo=l(),qu=a("li"),_se=a("strong"),Wpo=o("layoutlm"),Qpo=o(" \u2014 "),XI=a("a"),Hpo=o("LayoutLMModel"),Upo=o(" (LayoutLM model)"),Jpo=l(),Nu=a("li"),bse=a("strong"),Ypo=o("layoutlmv2"),Kpo=o(" \u2014 "),zI=a("a"),Zpo=o("LayoutLMv2Model"),e_o=o(" (LayoutLMv2 model)"),o_o=l(),ju=a("li"),vse=a("strong"),r_o=o("led"),t_o=o(" \u2014 "),WI=a("a"),a_o=o("LEDModel"),n_o=o(" (LED model)"),s_o=l(),Du=a("li"),Fse=a("strong"),l_o=o("longformer"),i_o=o(" \u2014 "),QI=a("a"),d_o=o("LongformerModel"),c_o=o(" (Longformer model)"),m_o=l(),Gu=a("li"),Tse=a("strong"),f_o=o("luke"),g_o=o(" \u2014 "),HI=a("a"),h_o=o("LukeModel"),u_o=o(" (LUKE model)"),p_o=l(),Ou=a("li"),Mse=a("strong"),__o=o("lxmert"),b_o=o(" \u2014 "),UI=a("a"),v_o=o("LxmertModel"),F_o=o(" (LXMERT model)"),T_o=l(),Vu=a("li"),Ese=a("strong"),M_o=o("m2m_100"),E_o=o(" \u2014 "),JI=a("a"),C_o=o("M2M100Model"),w_o=o(" (M2M100 model)"),A_o=l(),Xu=a("li"),Cse=a("strong"),y_o=o("marian"),L_o=o(" \u2014 "),YI=a("a"),x_o=o("MarianModel"),$_o=o(" (Marian model)"),k_o=l(),zu=a("li"),wse=a("strong"),S_o=o("maskformer"),R_o=o(" \u2014 "),KI=a("a"),P_o=o("MaskFormerModel"),B_o=o(" (MaskFormer model)"),I_o=l(),Wu=a("li"),Ase=a("strong"),q_o=o("mbart"),N_o=o(" \u2014 "),ZI=a("a"),j_o=o("MBartModel"),D_o=o(" (mBART model)"),G_o=l(),Qu=a("li"),yse=a("strong"),O_o=o("megatron-bert"),V_o=o(" \u2014 "),eq=a("a"),X_o=o("MegatronBertModel"),z_o=o(" (MegatronBert model)"),W_o=l(),Hu=a("li"),Lse=a("strong"),Q_o=o("mobilebert"),H_o=o(" \u2014 "),oq=a("a"),U_o=o("MobileBertModel"),J_o=o(" (MobileBERT model)"),Y_o=l(),Uu=a("li"),xse=a("strong"),K_o=o("mpnet"),Z_o=o(" \u2014 "),rq=a("a"),ebo=o("MPNetModel"),obo=o(" (MPNet model)"),rbo=l(),Ju=a("li"),$se=a("strong"),tbo=o("mt5"),abo=o(" \u2014 "),tq=a("a"),nbo=o("MT5Model"),sbo=o(" (mT5 model)"),lbo=l(),Yu=a("li"),kse=a("strong"),ibo=o("nystromformer"),dbo=o(" \u2014 "),aq=a("a"),cbo=o("NystromformerModel"),mbo=o(" (Nystromformer model)"),fbo=l(),Ku=a("li"),Sse=a("strong"),gbo=o("openai-gpt"),hbo=o(" \u2014 "),nq=a("a"),ubo=o("OpenAIGPTModel"),pbo=o(" (OpenAI GPT model)"),_bo=l(),Zu=a("li"),Rse=a("strong"),bbo=o("opt"),vbo=o(" \u2014 "),sq=a("a"),Fbo=o("OPTModel"),Tbo=o(" (OPT model)"),Mbo=l(),ep=a("li"),Pse=a("strong"),Ebo=o("pegasus"),Cbo=o(" \u2014 "),lq=a("a"),wbo=o("PegasusModel"),Abo=o(" (Pegasus model)"),ybo=l(),op=a("li"),Bse=a("strong"),Lbo=o("perceiver"),xbo=o(" \u2014 "),iq=a("a"),$bo=o("PerceiverModel"),kbo=o(" (Perceiver model)"),Sbo=l(),rp=a("li"),Ise=a("strong"),Rbo=o("plbart"),Pbo=o(" \u2014 "),dq=a("a"),Bbo=o("PLBartModel"),Ibo=o(" (PLBart model)"),qbo=l(),tp=a("li"),qse=a("strong"),Nbo=o("poolformer"),jbo=o(" \u2014 "),cq=a("a"),Dbo=o("PoolFormerModel"),Gbo=o(" (PoolFormer model)"),Obo=l(),ap=a("li"),Nse=a("strong"),Vbo=o("prophetnet"),Xbo=o(" \u2014 "),mq=a("a"),zbo=o("ProphetNetModel"),Wbo=o(" (ProphetNet model)"),Qbo=l(),np=a("li"),jse=a("strong"),Hbo=o("qdqbert"),Ubo=o(" \u2014 "),fq=a("a"),Jbo=o("QDQBertModel"),Ybo=o(" (QDQBert model)"),Kbo=l(),sp=a("li"),Dse=a("strong"),Zbo=o("reformer"),e2o=o(" \u2014 "),gq=a("a"),o2o=o("ReformerModel"),r2o=o(" (Reformer model)"),t2o=l(),lp=a("li"),Gse=a("strong"),a2o=o("regnet"),n2o=o(" \u2014 "),hq=a("a"),s2o=o("RegNetModel"),l2o=o(" (RegNet model)"),i2o=l(),ip=a("li"),Ose=a("strong"),d2o=o("rembert"),c2o=o(" \u2014 "),uq=a("a"),m2o=o("RemBertModel"),f2o=o(" (RemBERT model)"),g2o=l(),dp=a("li"),Vse=a("strong"),h2o=o("resnet"),u2o=o(" \u2014 "),pq=a("a"),p2o=o("ResNetModel"),_2o=o(" (ResNet model)"),b2o=l(),cp=a("li"),Xse=a("strong"),v2o=o("retribert"),F2o=o(" \u2014 "),_q=a("a"),T2o=o("RetriBertModel"),M2o=o(" (RetriBERT model)"),E2o=l(),mp=a("li"),zse=a("strong"),C2o=o("roberta"),w2o=o(" \u2014 "),bq=a("a"),A2o=o("RobertaModel"),y2o=o(" (RoBERTa model)"),L2o=l(),fp=a("li"),Wse=a("strong"),x2o=o("roformer"),$2o=o(" \u2014 "),vq=a("a"),k2o=o("RoFormerModel"),S2o=o(" (RoFormer model)"),R2o=l(),gp=a("li"),Qse=a("strong"),P2o=o("segformer"),B2o=o(" \u2014 "),Fq=a("a"),I2o=o("SegformerModel"),q2o=o(" (SegFormer model)"),N2o=l(),hp=a("li"),Hse=a("strong"),j2o=o("sew"),D2o=o(" \u2014 "),Tq=a("a"),G2o=o("SEWModel"),O2o=o(" (SEW model)"),V2o=l(),up=a("li"),Use=a("strong"),X2o=o("sew-d"),z2o=o(" \u2014 "),Mq=a("a"),W2o=o("SEWDModel"),Q2o=o(" (SEW-D model)"),H2o=l(),pp=a("li"),Jse=a("strong"),U2o=o("speech_to_text"),J2o=o(" \u2014 "),Eq=a("a"),Y2o=o("Speech2TextModel"),K2o=o(" (Speech2Text model)"),Z2o=l(),_p=a("li"),Yse=a("strong"),evo=o("splinter"),ovo=o(" \u2014 "),Cq=a("a"),rvo=o("SplinterModel"),tvo=o(" (Splinter model)"),avo=l(),bp=a("li"),Kse=a("strong"),nvo=o("squeezebert"),svo=o(" \u2014 "),wq=a("a"),lvo=o("SqueezeBertModel"),ivo=o(" (SqueezeBERT model)"),dvo=l(),vp=a("li"),Zse=a("strong"),cvo=o("swin"),mvo=o(" \u2014 "),Aq=a("a"),fvo=o("SwinModel"),gvo=o(" (Swin model)"),hvo=l(),Fp=a("li"),ele=a("strong"),uvo=o("t5"),pvo=o(" \u2014 "),yq=a("a"),_vo=o("T5Model"),bvo=o(" (T5 model)"),vvo=l(),Tp=a("li"),ole=a("strong"),Fvo=o("tapas"),Tvo=o(" \u2014 "),Lq=a("a"),Mvo=o("TapasModel"),Evo=o(" (TAPAS model)"),Cvo=l(),Mp=a("li"),rle=a("strong"),wvo=o("trajectory_transformer"),Avo=o(" \u2014 "),xq=a("a"),yvo=o("TrajectoryTransformerModel"),Lvo=o(" (Trajectory Transformer model)"),xvo=l(),Ep=a("li"),tle=a("strong"),$vo=o("transfo-xl"),kvo=o(" \u2014 "),$q=a("a"),Svo=o("TransfoXLModel"),Rvo=o(" (Transformer-XL model)"),Pvo=l(),Cp=a("li"),ale=a("strong"),Bvo=o("unispeech"),Ivo=o(" \u2014 "),kq=a("a"),qvo=o("UniSpeechModel"),Nvo=o(" (UniSpeech model)"),jvo=l(),wp=a("li"),nle=a("strong"),Dvo=o("unispeech-sat"),Gvo=o(" \u2014 "),Sq=a("a"),Ovo=o("UniSpeechSatModel"),Vvo=o(" (UniSpeechSat model)"),Xvo=l(),Ap=a("li"),sle=a("strong"),zvo=o("van"),Wvo=o(" \u2014 "),Rq=a("a"),Qvo=o("VanModel"),Hvo=o(" (VAN model)"),Uvo=l(),yp=a("li"),lle=a("strong"),Jvo=o("vilt"),Yvo=o(" \u2014 "),Pq=a("a"),Kvo=o("ViltModel"),Zvo=o(" (ViLT model)"),eFo=l(),Lp=a("li"),ile=a("strong"),oFo=o("vision-text-dual-encoder"),rFo=o(" \u2014 "),Bq=a("a"),tFo=o("VisionTextDualEncoderModel"),aFo=o(" (VisionTextDualEncoder model)"),nFo=l(),xp=a("li"),dle=a("strong"),sFo=o("visual_bert"),lFo=o(" \u2014 "),Iq=a("a"),iFo=o("VisualBertModel"),dFo=o(" (VisualBert model)"),cFo=l(),$p=a("li"),cle=a("strong"),mFo=o("vit"),fFo=o(" \u2014 "),qq=a("a"),gFo=o("ViTModel"),hFo=o(" (ViT model)"),uFo=l(),kp=a("li"),mle=a("strong"),pFo=o("vit_mae"),_Fo=o(" \u2014 "),Nq=a("a"),bFo=o("ViTMAEModel"),vFo=o(" (ViTMAE model)"),FFo=l(),Sp=a("li"),fle=a("strong"),TFo=o("wav2vec2"),MFo=o(" \u2014 "),jq=a("a"),EFo=o("Wav2Vec2Model"),CFo=o(" (Wav2Vec2 model)"),wFo=l(),Rp=a("li"),gle=a("strong"),AFo=o("wav2vec2-conformer"),yFo=o(" \u2014 "),Dq=a("a"),LFo=o("Wav2Vec2ConformerModel"),xFo=o(" (Wav2Vec2-Conformer model)"),$Fo=l(),Pp=a("li"),hle=a("strong"),kFo=o("wavlm"),SFo=o(" \u2014 "),Gq=a("a"),RFo=o("WavLMModel"),PFo=o(" (WavLM model)"),BFo=l(),Bp=a("li"),ule=a("strong"),IFo=o("xglm"),qFo=o(" \u2014 "),Oq=a("a"),NFo=o("XGLMModel"),jFo=o(" (XGLM model)"),DFo=l(),Ip=a("li"),ple=a("strong"),GFo=o("xlm"),OFo=o(" \u2014 "),Vq=a("a"),VFo=o("XLMModel"),XFo=o(" (XLM model)"),zFo=l(),qp=a("li"),_le=a("strong"),WFo=o("xlm-prophetnet"),QFo=o(" \u2014 "),Xq=a("a"),HFo=o("XLMProphetNetModel"),UFo=o(" (XLMProphetNet model)"),JFo=l(),Np=a("li"),ble=a("strong"),YFo=o("xlm-roberta"),KFo=o(" \u2014 "),zq=a("a"),ZFo=o("XLMRobertaModel"),e1o=o(" (XLM-RoBERTa model)"),o1o=l(),jp=a("li"),vle=a("strong"),r1o=o("xlm-roberta-xl"),t1o=o(" \u2014 "),Wq=a("a"),a1o=o("XLMRobertaXLModel"),n1o=o(" (XLM-RoBERTa-XL model)"),s1o=l(),Dp=a("li"),Fle=a("strong"),l1o=o("xlnet"),i1o=o(" \u2014 "),Qq=a("a"),d1o=o("XLNetModel"),c1o=o(" (XLNet model)"),m1o=l(),Gp=a("li"),Tle=a("strong"),f1o=o("yolos"),g1o=o(" \u2014 "),Hq=a("a"),h1o=o("YolosModel"),u1o=o(" (YOLOS model)"),p1o=l(),Op=a("li"),Mle=a("strong"),_1o=o("yoso"),b1o=o(" \u2014 "),Uq=a("a"),v1o=o("YosoModel"),F1o=o(" (YOSO model)"),T1o=l(),Vp=a("p"),M1o=o("The model is set in evaluation mode by default using "),Ele=a("code"),E1o=o("model.eval()"),C1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=a("code"),w1o=o("model.train()"),A1o=l(),F(Xp.$$.fragment),KIe=l(),yi=a("h2"),zp=a("a"),wle=a("span"),F(Gy.$$.fragment),y1o=l(),Ale=a("span"),L1o=o("AutoModelForPreTraining"),ZIe=l(),xo=a("div"),F(Oy.$$.fragment),x1o=l(),Li=a("p"),$1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jq=a("a"),k1o=o("from_pretrained()"),S1o=o(" class method or the "),Yq=a("a"),R1o=o("from_config()"),P1o=o(` class
method.`),B1o=l(),Vy=a("p"),I1o=o("This class cannot be instantiated directly using "),yle=a("code"),q1o=o("__init__()"),N1o=o(" (throws an error)."),j1o=l(),at=a("div"),F(Xy.$$.fragment),D1o=l(),Lle=a("p"),G1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O1o=l(),xi=a("p"),V1o=o(`Note:
Loading a model from its configuration file does `),xle=a("strong"),X1o=o("not"),z1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=a("a"),W1o=o("from_pretrained()"),Q1o=o(" to load the model weights."),H1o=l(),F(Wp.$$.fragment),U1o=l(),Ye=a("div"),F(zy.$$.fragment),J1o=l(),$le=a("p"),Y1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K1o=l(),xa=a("p"),Z1o=o("The model class to instantiate is selected based on the "),kle=a("code"),eTo=o("model_type"),oTo=o(` property of the config object (either
passed as an argument or loaded from `),Sle=a("code"),rTo=o("pretrained_model_name_or_path"),tTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),aTo=o("pretrained_model_name_or_path"),nTo=o(":"),sTo=l(),G=a("ul"),Qp=a("li"),Ple=a("strong"),lTo=o("albert"),iTo=o(" \u2014 "),Zq=a("a"),dTo=o("AlbertForPreTraining"),cTo=o(" (ALBERT model)"),mTo=l(),Hp=a("li"),Ble=a("strong"),fTo=o("bart"),gTo=o(" \u2014 "),eN=a("a"),hTo=o("BartForConditionalGeneration"),uTo=o(" (BART model)"),pTo=l(),Up=a("li"),Ile=a("strong"),_To=o("bert"),bTo=o(" \u2014 "),oN=a("a"),vTo=o("BertForPreTraining"),FTo=o(" (BERT model)"),TTo=l(),Jp=a("li"),qle=a("strong"),MTo=o("big_bird"),ETo=o(" \u2014 "),rN=a("a"),CTo=o("BigBirdForPreTraining"),wTo=o(" (BigBird model)"),ATo=l(),Yp=a("li"),Nle=a("strong"),yTo=o("camembert"),LTo=o(" \u2014 "),tN=a("a"),xTo=o("CamembertForMaskedLM"),$To=o(" (CamemBERT model)"),kTo=l(),Kp=a("li"),jle=a("strong"),STo=o("ctrl"),RTo=o(" \u2014 "),aN=a("a"),PTo=o("CTRLLMHeadModel"),BTo=o(" (CTRL model)"),ITo=l(),Zp=a("li"),Dle=a("strong"),qTo=o("data2vec-text"),NTo=o(" \u2014 "),nN=a("a"),jTo=o("Data2VecTextForMaskedLM"),DTo=o(" (Data2VecText model)"),GTo=l(),e_=a("li"),Gle=a("strong"),OTo=o("deberta"),VTo=o(" \u2014 "),sN=a("a"),XTo=o("DebertaForMaskedLM"),zTo=o(" (DeBERTa model)"),WTo=l(),o_=a("li"),Ole=a("strong"),QTo=o("deberta-v2"),HTo=o(" \u2014 "),lN=a("a"),UTo=o("DebertaV2ForMaskedLM"),JTo=o(" (DeBERTa-v2 model)"),YTo=l(),r_=a("li"),Vle=a("strong"),KTo=o("distilbert"),ZTo=o(" \u2014 "),iN=a("a"),eMo=o("DistilBertForMaskedLM"),oMo=o(" (DistilBERT model)"),rMo=l(),t_=a("li"),Xle=a("strong"),tMo=o("electra"),aMo=o(" \u2014 "),dN=a("a"),nMo=o("ElectraForPreTraining"),sMo=o(" (ELECTRA model)"),lMo=l(),a_=a("li"),zle=a("strong"),iMo=o("flaubert"),dMo=o(" \u2014 "),cN=a("a"),cMo=o("FlaubertWithLMHeadModel"),mMo=o(" (FlauBERT model)"),fMo=l(),n_=a("li"),Wle=a("strong"),gMo=o("flava"),hMo=o(" \u2014 "),mN=a("a"),uMo=o("FlavaForPreTraining"),pMo=o(" (Flava model)"),_Mo=l(),s_=a("li"),Qle=a("strong"),bMo=o("fnet"),vMo=o(" \u2014 "),fN=a("a"),FMo=o("FNetForPreTraining"),TMo=o(" (FNet model)"),MMo=l(),l_=a("li"),Hle=a("strong"),EMo=o("fsmt"),CMo=o(" \u2014 "),gN=a("a"),wMo=o("FSMTForConditionalGeneration"),AMo=o(" (FairSeq Machine-Translation model)"),yMo=l(),i_=a("li"),Ule=a("strong"),LMo=o("funnel"),xMo=o(" \u2014 "),hN=a("a"),$Mo=o("FunnelForPreTraining"),kMo=o(" (Funnel Transformer model)"),SMo=l(),d_=a("li"),Jle=a("strong"),RMo=o("gpt2"),PMo=o(" \u2014 "),uN=a("a"),BMo=o("GPT2LMHeadModel"),IMo=o(" (OpenAI GPT-2 model)"),qMo=l(),c_=a("li"),Yle=a("strong"),NMo=o("ibert"),jMo=o(" \u2014 "),pN=a("a"),DMo=o("IBertForMaskedLM"),GMo=o(" (I-BERT model)"),OMo=l(),m_=a("li"),Kle=a("strong"),VMo=o("layoutlm"),XMo=o(" \u2014 "),_N=a("a"),zMo=o("LayoutLMForMaskedLM"),WMo=o(" (LayoutLM model)"),QMo=l(),f_=a("li"),Zle=a("strong"),HMo=o("longformer"),UMo=o(" \u2014 "),bN=a("a"),JMo=o("LongformerForMaskedLM"),YMo=o(" (Longformer model)"),KMo=l(),g_=a("li"),eie=a("strong"),ZMo=o("lxmert"),e4o=o(" \u2014 "),vN=a("a"),o4o=o("LxmertForPreTraining"),r4o=o(" (LXMERT model)"),t4o=l(),h_=a("li"),oie=a("strong"),a4o=o("megatron-bert"),n4o=o(" \u2014 "),FN=a("a"),s4o=o("MegatronBertForPreTraining"),l4o=o(" (MegatronBert model)"),i4o=l(),u_=a("li"),rie=a("strong"),d4o=o("mobilebert"),c4o=o(" \u2014 "),TN=a("a"),m4o=o("MobileBertForPreTraining"),f4o=o(" (MobileBERT model)"),g4o=l(),p_=a("li"),tie=a("strong"),h4o=o("mpnet"),u4o=o(" \u2014 "),MN=a("a"),p4o=o("MPNetForMaskedLM"),_4o=o(" (MPNet model)"),b4o=l(),__=a("li"),aie=a("strong"),v4o=o("openai-gpt"),F4o=o(" \u2014 "),EN=a("a"),T4o=o("OpenAIGPTLMHeadModel"),M4o=o(" (OpenAI GPT model)"),E4o=l(),b_=a("li"),nie=a("strong"),C4o=o("retribert"),w4o=o(" \u2014 "),CN=a("a"),A4o=o("RetriBertModel"),y4o=o(" (RetriBERT model)"),L4o=l(),v_=a("li"),sie=a("strong"),x4o=o("roberta"),$4o=o(" \u2014 "),wN=a("a"),k4o=o("RobertaForMaskedLM"),S4o=o(" (RoBERTa model)"),R4o=l(),F_=a("li"),lie=a("strong"),P4o=o("splinter"),B4o=o(" \u2014 "),AN=a("a"),I4o=o("SplinterForPreTraining"),q4o=o(" (Splinter model)"),N4o=l(),T_=a("li"),iie=a("strong"),j4o=o("squeezebert"),D4o=o(" \u2014 "),yN=a("a"),G4o=o("SqueezeBertForMaskedLM"),O4o=o(" (SqueezeBERT model)"),V4o=l(),M_=a("li"),die=a("strong"),X4o=o("t5"),z4o=o(" \u2014 "),LN=a("a"),W4o=o("T5ForConditionalGeneration"),Q4o=o(" (T5 model)"),H4o=l(),E_=a("li"),cie=a("strong"),U4o=o("tapas"),J4o=o(" \u2014 "),xN=a("a"),Y4o=o("TapasForMaskedLM"),K4o=o(" (TAPAS model)"),Z4o=l(),C_=a("li"),mie=a("strong"),eEo=o("transfo-xl"),oEo=o(" \u2014 "),$N=a("a"),rEo=o("TransfoXLLMHeadModel"),tEo=o(" (Transformer-XL model)"),aEo=l(),w_=a("li"),fie=a("strong"),nEo=o("unispeech"),sEo=o(" \u2014 "),kN=a("a"),lEo=o("UniSpeechForPreTraining"),iEo=o(" (UniSpeech model)"),dEo=l(),A_=a("li"),gie=a("strong"),cEo=o("unispeech-sat"),mEo=o(" \u2014 "),SN=a("a"),fEo=o("UniSpeechSatForPreTraining"),gEo=o(" (UniSpeechSat model)"),hEo=l(),y_=a("li"),hie=a("strong"),uEo=o("visual_bert"),pEo=o(" \u2014 "),RN=a("a"),_Eo=o("VisualBertForPreTraining"),bEo=o(" (VisualBert model)"),vEo=l(),L_=a("li"),uie=a("strong"),FEo=o("vit_mae"),TEo=o(" \u2014 "),PN=a("a"),MEo=o("ViTMAEForPreTraining"),EEo=o(" (ViTMAE model)"),CEo=l(),x_=a("li"),pie=a("strong"),wEo=o("wav2vec2"),AEo=o(" \u2014 "),BN=a("a"),yEo=o("Wav2Vec2ForPreTraining"),LEo=o(" (Wav2Vec2 model)"),xEo=l(),$_=a("li"),_ie=a("strong"),$Eo=o("wav2vec2-conformer"),kEo=o(" \u2014 "),IN=a("a"),SEo=o("Wav2Vec2ConformerForPreTraining"),REo=o(" (Wav2Vec2-Conformer model)"),PEo=l(),k_=a("li"),bie=a("strong"),BEo=o("xlm"),IEo=o(" \u2014 "),qN=a("a"),qEo=o("XLMWithLMHeadModel"),NEo=o(" (XLM model)"),jEo=l(),S_=a("li"),vie=a("strong"),DEo=o("xlm-roberta"),GEo=o(" \u2014 "),NN=a("a"),OEo=o("XLMRobertaForMaskedLM"),VEo=o(" (XLM-RoBERTa model)"),XEo=l(),R_=a("li"),Fie=a("strong"),zEo=o("xlm-roberta-xl"),WEo=o(" \u2014 "),jN=a("a"),QEo=o("XLMRobertaXLForMaskedLM"),HEo=o(" (XLM-RoBERTa-XL model)"),UEo=l(),P_=a("li"),Tie=a("strong"),JEo=o("xlnet"),YEo=o(" \u2014 "),DN=a("a"),KEo=o("XLNetLMHeadModel"),ZEo=o(" (XLNet model)"),eCo=l(),B_=a("p"),oCo=o("The model is set in evaluation mode by default using "),Mie=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=a("code"),aCo=o("model.train()"),nCo=l(),F(I_.$$.fragment),eqe=l(),$i=a("h2"),q_=a("a"),Cie=a("span"),F(Wy.$$.fragment),sCo=l(),wie=a("span"),lCo=o("AutoModelForCausalLM"),oqe=l(),$o=a("div"),F(Qy.$$.fragment),iCo=l(),ki=a("p"),dCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GN=a("a"),cCo=o("from_pretrained()"),mCo=o(" class method or the "),ON=a("a"),fCo=o("from_config()"),gCo=o(` class
method.`),hCo=l(),Hy=a("p"),uCo=o("This class cannot be instantiated directly using "),Aie=a("code"),pCo=o("__init__()"),_Co=o(" (throws an error)."),bCo=l(),nt=a("div"),F(Uy.$$.fragment),vCo=l(),yie=a("p"),FCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TCo=l(),Si=a("p"),MCo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),ECo=o("not"),CCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),wCo=o("from_pretrained()"),ACo=o(" to load the model weights."),yCo=l(),F(N_.$$.fragment),LCo=l(),Ke=a("div"),F(Jy.$$.fragment),xCo=l(),xie=a("p"),$Co=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kCo=l(),$a=a("p"),SCo=o("The model class to instantiate is selected based on the "),$ie=a("code"),RCo=o("model_type"),PCo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),BCo=o("pretrained_model_name_or_path"),ICo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),qCo=o("pretrained_model_name_or_path"),NCo=o(":"),jCo=l(),z=a("ul"),j_=a("li"),Rie=a("strong"),DCo=o("bart"),GCo=o(" \u2014 "),XN=a("a"),OCo=o("BartForCausalLM"),VCo=o(" (BART model)"),XCo=l(),D_=a("li"),Pie=a("strong"),zCo=o("bert"),WCo=o(" \u2014 "),zN=a("a"),QCo=o("BertLMHeadModel"),HCo=o(" (BERT model)"),UCo=l(),G_=a("li"),Bie=a("strong"),JCo=o("bert-generation"),YCo=o(" \u2014 "),WN=a("a"),KCo=o("BertGenerationDecoder"),ZCo=o(" (Bert Generation model)"),e5o=l(),O_=a("li"),Iie=a("strong"),o5o=o("big_bird"),r5o=o(" \u2014 "),QN=a("a"),t5o=o("BigBirdForCausalLM"),a5o=o(" (BigBird model)"),n5o=l(),V_=a("li"),qie=a("strong"),s5o=o("bigbird_pegasus"),l5o=o(" \u2014 "),HN=a("a"),i5o=o("BigBirdPegasusForCausalLM"),d5o=o(" (BigBirdPegasus model)"),c5o=l(),X_=a("li"),Nie=a("strong"),m5o=o("blenderbot"),f5o=o(" \u2014 "),UN=a("a"),g5o=o("BlenderbotForCausalLM"),h5o=o(" (Blenderbot model)"),u5o=l(),z_=a("li"),jie=a("strong"),p5o=o("blenderbot-small"),_5o=o(" \u2014 "),JN=a("a"),b5o=o("BlenderbotSmallForCausalLM"),v5o=o(" (BlenderbotSmall model)"),F5o=l(),W_=a("li"),Die=a("strong"),T5o=o("camembert"),M5o=o(" \u2014 "),YN=a("a"),E5o=o("CamembertForCausalLM"),C5o=o(" (CamemBERT model)"),w5o=l(),Q_=a("li"),Gie=a("strong"),A5o=o("ctrl"),y5o=o(" \u2014 "),KN=a("a"),L5o=o("CTRLLMHeadModel"),x5o=o(" (CTRL model)"),$5o=l(),H_=a("li"),Oie=a("strong"),k5o=o("data2vec-text"),S5o=o(" \u2014 "),ZN=a("a"),R5o=o("Data2VecTextForCausalLM"),P5o=o(" (Data2VecText model)"),B5o=l(),U_=a("li"),Vie=a("strong"),I5o=o("electra"),q5o=o(" \u2014 "),ej=a("a"),N5o=o("ElectraForCausalLM"),j5o=o(" (ELECTRA model)"),D5o=l(),J_=a("li"),Xie=a("strong"),G5o=o("gpt2"),O5o=o(" \u2014 "),oj=a("a"),V5o=o("GPT2LMHeadModel"),X5o=o(" (OpenAI GPT-2 model)"),z5o=l(),Y_=a("li"),zie=a("strong"),W5o=o("gpt_neo"),Q5o=o(" \u2014 "),rj=a("a"),H5o=o("GPTNeoForCausalLM"),U5o=o(" (GPT Neo model)"),J5o=l(),K_=a("li"),Wie=a("strong"),Y5o=o("gptj"),K5o=o(" \u2014 "),tj=a("a"),Z5o=o("GPTJForCausalLM"),e3o=o(" (GPT-J model)"),o3o=l(),Z_=a("li"),Qie=a("strong"),r3o=o("marian"),t3o=o(" \u2014 "),aj=a("a"),a3o=o("MarianForCausalLM"),n3o=o(" (Marian model)"),s3o=l(),eb=a("li"),Hie=a("strong"),l3o=o("mbart"),i3o=o(" \u2014 "),nj=a("a"),d3o=o("MBartForCausalLM"),c3o=o(" (mBART model)"),m3o=l(),ob=a("li"),Uie=a("strong"),f3o=o("megatron-bert"),g3o=o(" \u2014 "),sj=a("a"),h3o=o("MegatronBertForCausalLM"),u3o=o(" (MegatronBert model)"),p3o=l(),rb=a("li"),Jie=a("strong"),_3o=o("openai-gpt"),b3o=o(" \u2014 "),lj=a("a"),v3o=o("OpenAIGPTLMHeadModel"),F3o=o(" (OpenAI GPT model)"),T3o=l(),tb=a("li"),Yie=a("strong"),M3o=o("opt"),E3o=o(" \u2014 "),ij=a("a"),C3o=o("OPTForCausalLM"),w3o=o(" (OPT model)"),A3o=l(),ab=a("li"),Kie=a("strong"),y3o=o("pegasus"),L3o=o(" \u2014 "),dj=a("a"),x3o=o("PegasusForCausalLM"),$3o=o(" (Pegasus model)"),k3o=l(),nb=a("li"),Zie=a("strong"),S3o=o("plbart"),R3o=o(" \u2014 "),cj=a("a"),P3o=o("PLBartForCausalLM"),B3o=o(" (PLBart model)"),I3o=l(),sb=a("li"),ede=a("strong"),q3o=o("prophetnet"),N3o=o(" \u2014 "),mj=a("a"),j3o=o("ProphetNetForCausalLM"),D3o=o(" (ProphetNet model)"),G3o=l(),lb=a("li"),ode=a("strong"),O3o=o("qdqbert"),V3o=o(" \u2014 "),fj=a("a"),X3o=o("QDQBertLMHeadModel"),z3o=o(" (QDQBert model)"),W3o=l(),ib=a("li"),rde=a("strong"),Q3o=o("reformer"),H3o=o(" \u2014 "),gj=a("a"),U3o=o("ReformerModelWithLMHead"),J3o=o(" (Reformer model)"),Y3o=l(),db=a("li"),tde=a("strong"),K3o=o("rembert"),Z3o=o(" \u2014 "),hj=a("a"),ewo=o("RemBertForCausalLM"),owo=o(" (RemBERT model)"),rwo=l(),cb=a("li"),ade=a("strong"),two=o("roberta"),awo=o(" \u2014 "),uj=a("a"),nwo=o("RobertaForCausalLM"),swo=o(" (RoBERTa model)"),lwo=l(),mb=a("li"),nde=a("strong"),iwo=o("roformer"),dwo=o(" \u2014 "),pj=a("a"),cwo=o("RoFormerForCausalLM"),mwo=o(" (RoFormer model)"),fwo=l(),fb=a("li"),sde=a("strong"),gwo=o("speech_to_text_2"),hwo=o(" \u2014 "),_j=a("a"),uwo=o("Speech2Text2ForCausalLM"),pwo=o(" (Speech2Text2 model)"),_wo=l(),gb=a("li"),lde=a("strong"),bwo=o("transfo-xl"),vwo=o(" \u2014 "),bj=a("a"),Fwo=o("TransfoXLLMHeadModel"),Two=o(" (Transformer-XL model)"),Mwo=l(),hb=a("li"),ide=a("strong"),Ewo=o("trocr"),Cwo=o(" \u2014 "),vj=a("a"),wwo=o("TrOCRForCausalLM"),Awo=o(" (TrOCR model)"),ywo=l(),ub=a("li"),dde=a("strong"),Lwo=o("xglm"),xwo=o(" \u2014 "),Fj=a("a"),$wo=o("XGLMForCausalLM"),kwo=o(" (XGLM model)"),Swo=l(),pb=a("li"),cde=a("strong"),Rwo=o("xlm"),Pwo=o(" \u2014 "),Tj=a("a"),Bwo=o("XLMWithLMHeadModel"),Iwo=o(" (XLM model)"),qwo=l(),_b=a("li"),mde=a("strong"),Nwo=o("xlm-prophetnet"),jwo=o(" \u2014 "),Mj=a("a"),Dwo=o("XLMProphetNetForCausalLM"),Gwo=o(" (XLMProphetNet model)"),Owo=l(),bb=a("li"),fde=a("strong"),Vwo=o("xlm-roberta"),Xwo=o(" \u2014 "),Ej=a("a"),zwo=o("XLMRobertaForCausalLM"),Wwo=o(" (XLM-RoBERTa model)"),Qwo=l(),vb=a("li"),gde=a("strong"),Hwo=o("xlm-roberta-xl"),Uwo=o(" \u2014 "),Cj=a("a"),Jwo=o("XLMRobertaXLForCausalLM"),Ywo=o(" (XLM-RoBERTa-XL model)"),Kwo=l(),Fb=a("li"),hde=a("strong"),Zwo=o("xlnet"),eAo=o(" \u2014 "),wj=a("a"),oAo=o("XLNetLMHeadModel"),rAo=o(" (XLNet model)"),tAo=l(),Tb=a("p"),aAo=o("The model is set in evaluation mode by default using "),ude=a("code"),nAo=o("model.eval()"),sAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),lAo=o("model.train()"),iAo=l(),F(Mb.$$.fragment),rqe=l(),Ri=a("h2"),Eb=a("a"),_de=a("span"),F(Yy.$$.fragment),dAo=l(),bde=a("span"),cAo=o("AutoModelForMaskedLM"),tqe=l(),ko=a("div"),F(Ky.$$.fragment),mAo=l(),Pi=a("p"),fAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aj=a("a"),gAo=o("from_pretrained()"),hAo=o(" class method or the "),yj=a("a"),uAo=o("from_config()"),pAo=o(` class
method.`),_Ao=l(),Zy=a("p"),bAo=o("This class cannot be instantiated directly using "),vde=a("code"),vAo=o("__init__()"),FAo=o(" (throws an error)."),TAo=l(),st=a("div"),F(eL.$$.fragment),MAo=l(),Fde=a("p"),EAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CAo=l(),Bi=a("p"),wAo=o(`Note:
Loading a model from its configuration file does `),Tde=a("strong"),AAo=o("not"),yAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),LAo=o("from_pretrained()"),xAo=o(" to load the model weights."),$Ao=l(),F(Cb.$$.fragment),kAo=l(),Ze=a("div"),F(oL.$$.fragment),SAo=l(),Mde=a("p"),RAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PAo=l(),ka=a("p"),BAo=o("The model class to instantiate is selected based on the "),Ede=a("code"),IAo=o("model_type"),qAo=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),NAo=o("pretrained_model_name_or_path"),jAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),DAo=o("pretrained_model_name_or_path"),GAo=o(":"),OAo=l(),W=a("ul"),wb=a("li"),Ade=a("strong"),VAo=o("albert"),XAo=o(" \u2014 "),xj=a("a"),zAo=o("AlbertForMaskedLM"),WAo=o(" (ALBERT model)"),QAo=l(),Ab=a("li"),yde=a("strong"),HAo=o("bart"),UAo=o(" \u2014 "),$j=a("a"),JAo=o("BartForConditionalGeneration"),YAo=o(" (BART model)"),KAo=l(),yb=a("li"),Lde=a("strong"),ZAo=o("bert"),e0o=o(" \u2014 "),kj=a("a"),o0o=o("BertForMaskedLM"),r0o=o(" (BERT model)"),t0o=l(),Lb=a("li"),xde=a("strong"),a0o=o("big_bird"),n0o=o(" \u2014 "),Sj=a("a"),s0o=o("BigBirdForMaskedLM"),l0o=o(" (BigBird model)"),i0o=l(),xb=a("li"),$de=a("strong"),d0o=o("camembert"),c0o=o(" \u2014 "),Rj=a("a"),m0o=o("CamembertForMaskedLM"),f0o=o(" (CamemBERT model)"),g0o=l(),$b=a("li"),kde=a("strong"),h0o=o("convbert"),u0o=o(" \u2014 "),Pj=a("a"),p0o=o("ConvBertForMaskedLM"),_0o=o(" (ConvBERT model)"),b0o=l(),kb=a("li"),Sde=a("strong"),v0o=o("data2vec-text"),F0o=o(" \u2014 "),Bj=a("a"),T0o=o("Data2VecTextForMaskedLM"),M0o=o(" (Data2VecText model)"),E0o=l(),Sb=a("li"),Rde=a("strong"),C0o=o("deberta"),w0o=o(" \u2014 "),Ij=a("a"),A0o=o("DebertaForMaskedLM"),y0o=o(" (DeBERTa model)"),L0o=l(),Rb=a("li"),Pde=a("strong"),x0o=o("deberta-v2"),$0o=o(" \u2014 "),qj=a("a"),k0o=o("DebertaV2ForMaskedLM"),S0o=o(" (DeBERTa-v2 model)"),R0o=l(),Pb=a("li"),Bde=a("strong"),P0o=o("distilbert"),B0o=o(" \u2014 "),Nj=a("a"),I0o=o("DistilBertForMaskedLM"),q0o=o(" (DistilBERT model)"),N0o=l(),Bb=a("li"),Ide=a("strong"),j0o=o("electra"),D0o=o(" \u2014 "),jj=a("a"),G0o=o("ElectraForMaskedLM"),O0o=o(" (ELECTRA model)"),V0o=l(),Ib=a("li"),qde=a("strong"),X0o=o("flaubert"),z0o=o(" \u2014 "),Dj=a("a"),W0o=o("FlaubertWithLMHeadModel"),Q0o=o(" (FlauBERT model)"),H0o=l(),qb=a("li"),Nde=a("strong"),U0o=o("fnet"),J0o=o(" \u2014 "),Gj=a("a"),Y0o=o("FNetForMaskedLM"),K0o=o(" (FNet model)"),Z0o=l(),Nb=a("li"),jde=a("strong"),e6o=o("funnel"),o6o=o(" \u2014 "),Oj=a("a"),r6o=o("FunnelForMaskedLM"),t6o=o(" (Funnel Transformer model)"),a6o=l(),jb=a("li"),Dde=a("strong"),n6o=o("ibert"),s6o=o(" \u2014 "),Vj=a("a"),l6o=o("IBertForMaskedLM"),i6o=o(" (I-BERT model)"),d6o=l(),Db=a("li"),Gde=a("strong"),c6o=o("layoutlm"),m6o=o(" \u2014 "),Xj=a("a"),f6o=o("LayoutLMForMaskedLM"),g6o=o(" (LayoutLM model)"),h6o=l(),Gb=a("li"),Ode=a("strong"),u6o=o("longformer"),p6o=o(" \u2014 "),zj=a("a"),_6o=o("LongformerForMaskedLM"),b6o=o(" (Longformer model)"),v6o=l(),Ob=a("li"),Vde=a("strong"),F6o=o("mbart"),T6o=o(" \u2014 "),Wj=a("a"),M6o=o("MBartForConditionalGeneration"),E6o=o(" (mBART model)"),C6o=l(),Vb=a("li"),Xde=a("strong"),w6o=o("megatron-bert"),A6o=o(" \u2014 "),Qj=a("a"),y6o=o("MegatronBertForMaskedLM"),L6o=o(" (MegatronBert model)"),x6o=l(),Xb=a("li"),zde=a("strong"),$6o=o("mobilebert"),k6o=o(" \u2014 "),Hj=a("a"),S6o=o("MobileBertForMaskedLM"),R6o=o(" (MobileBERT model)"),P6o=l(),zb=a("li"),Wde=a("strong"),B6o=o("mpnet"),I6o=o(" \u2014 "),Uj=a("a"),q6o=o("MPNetForMaskedLM"),N6o=o(" (MPNet model)"),j6o=l(),Wb=a("li"),Qde=a("strong"),D6o=o("nystromformer"),G6o=o(" \u2014 "),Jj=a("a"),O6o=o("NystromformerForMaskedLM"),V6o=o(" (Nystromformer model)"),X6o=l(),Qb=a("li"),Hde=a("strong"),z6o=o("perceiver"),W6o=o(" \u2014 "),Yj=a("a"),Q6o=o("PerceiverForMaskedLM"),H6o=o(" (Perceiver model)"),U6o=l(),Hb=a("li"),Ude=a("strong"),J6o=o("qdqbert"),Y6o=o(" \u2014 "),Kj=a("a"),K6o=o("QDQBertForMaskedLM"),Z6o=o(" (QDQBert model)"),eyo=l(),Ub=a("li"),Jde=a("strong"),oyo=o("reformer"),ryo=o(" \u2014 "),Zj=a("a"),tyo=o("ReformerForMaskedLM"),ayo=o(" (Reformer model)"),nyo=l(),Jb=a("li"),Yde=a("strong"),syo=o("rembert"),lyo=o(" \u2014 "),eD=a("a"),iyo=o("RemBertForMaskedLM"),dyo=o(" (RemBERT model)"),cyo=l(),Yb=a("li"),Kde=a("strong"),myo=o("roberta"),fyo=o(" \u2014 "),oD=a("a"),gyo=o("RobertaForMaskedLM"),hyo=o(" (RoBERTa model)"),uyo=l(),Kb=a("li"),Zde=a("strong"),pyo=o("roformer"),_yo=o(" \u2014 "),rD=a("a"),byo=o("RoFormerForMaskedLM"),vyo=o(" (RoFormer model)"),Fyo=l(),Zb=a("li"),ece=a("strong"),Tyo=o("squeezebert"),Myo=o(" \u2014 "),tD=a("a"),Eyo=o("SqueezeBertForMaskedLM"),Cyo=o(" (SqueezeBERT model)"),wyo=l(),e2=a("li"),oce=a("strong"),Ayo=o("tapas"),yyo=o(" \u2014 "),aD=a("a"),Lyo=o("TapasForMaskedLM"),xyo=o(" (TAPAS model)"),$yo=l(),o2=a("li"),rce=a("strong"),kyo=o("wav2vec2"),Syo=o(" \u2014 "),tce=a("code"),Ryo=o("Wav2Vec2ForMaskedLM"),Pyo=o(" (Wav2Vec2 model)"),Byo=l(),r2=a("li"),ace=a("strong"),Iyo=o("xlm"),qyo=o(" \u2014 "),nD=a("a"),Nyo=o("XLMWithLMHeadModel"),jyo=o(" (XLM model)"),Dyo=l(),t2=a("li"),nce=a("strong"),Gyo=o("xlm-roberta"),Oyo=o(" \u2014 "),sD=a("a"),Vyo=o("XLMRobertaForMaskedLM"),Xyo=o(" (XLM-RoBERTa model)"),zyo=l(),a2=a("li"),sce=a("strong"),Wyo=o("xlm-roberta-xl"),Qyo=o(" \u2014 "),lD=a("a"),Hyo=o("XLMRobertaXLForMaskedLM"),Uyo=o(" (XLM-RoBERTa-XL model)"),Jyo=l(),n2=a("li"),lce=a("strong"),Yyo=o("yoso"),Kyo=o(" \u2014 "),iD=a("a"),Zyo=o("YosoForMaskedLM"),eLo=o(" (YOSO model)"),oLo=l(),s2=a("p"),rLo=o("The model is set in evaluation mode by default using "),ice=a("code"),tLo=o("model.eval()"),aLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),nLo=o("model.train()"),sLo=l(),F(l2.$$.fragment),aqe=l(),Ii=a("h2"),i2=a("a"),cce=a("span"),F(rL.$$.fragment),lLo=l(),mce=a("span"),iLo=o("AutoModelForSeq2SeqLM"),nqe=l(),So=a("div"),F(tL.$$.fragment),dLo=l(),qi=a("p"),cLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dD=a("a"),mLo=o("from_pretrained()"),fLo=o(" class method or the "),cD=a("a"),gLo=o("from_config()"),hLo=o(` class
method.`),uLo=l(),aL=a("p"),pLo=o("This class cannot be instantiated directly using "),fce=a("code"),_Lo=o("__init__()"),bLo=o(" (throws an error)."),vLo=l(),lt=a("div"),F(nL.$$.fragment),FLo=l(),gce=a("p"),TLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MLo=l(),Ni=a("p"),ELo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),CLo=o("not"),wLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),ALo=o("from_pretrained()"),yLo=o(" to load the model weights."),LLo=l(),F(d2.$$.fragment),xLo=l(),eo=a("div"),F(sL.$$.fragment),$Lo=l(),uce=a("p"),kLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SLo=l(),Sa=a("p"),RLo=o("The model class to instantiate is selected based on the "),pce=a("code"),PLo=o("model_type"),BLo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),ILo=o("pretrained_model_name_or_path"),qLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),NLo=o("pretrained_model_name_or_path"),jLo=o(":"),DLo=l(),pe=a("ul"),c2=a("li"),vce=a("strong"),GLo=o("bart"),OLo=o(" \u2014 "),fD=a("a"),VLo=o("BartForConditionalGeneration"),XLo=o(" (BART model)"),zLo=l(),m2=a("li"),Fce=a("strong"),WLo=o("bigbird_pegasus"),QLo=o(" \u2014 "),gD=a("a"),HLo=o("BigBirdPegasusForConditionalGeneration"),ULo=o(" (BigBirdPegasus model)"),JLo=l(),f2=a("li"),Tce=a("strong"),YLo=o("blenderbot"),KLo=o(" \u2014 "),hD=a("a"),ZLo=o("BlenderbotForConditionalGeneration"),e8o=o(" (Blenderbot model)"),o8o=l(),g2=a("li"),Mce=a("strong"),r8o=o("blenderbot-small"),t8o=o(" \u2014 "),uD=a("a"),a8o=o("BlenderbotSmallForConditionalGeneration"),n8o=o(" (BlenderbotSmall model)"),s8o=l(),h2=a("li"),Ece=a("strong"),l8o=o("encoder-decoder"),i8o=o(" \u2014 "),pD=a("a"),d8o=o("EncoderDecoderModel"),c8o=o(" (Encoder decoder model)"),m8o=l(),u2=a("li"),Cce=a("strong"),f8o=o("fsmt"),g8o=o(" \u2014 "),_D=a("a"),h8o=o("FSMTForConditionalGeneration"),u8o=o(" (FairSeq Machine-Translation model)"),p8o=l(),p2=a("li"),wce=a("strong"),_8o=o("led"),b8o=o(" \u2014 "),bD=a("a"),v8o=o("LEDForConditionalGeneration"),F8o=o(" (LED model)"),T8o=l(),_2=a("li"),Ace=a("strong"),M8o=o("m2m_100"),E8o=o(" \u2014 "),vD=a("a"),C8o=o("M2M100ForConditionalGeneration"),w8o=o(" (M2M100 model)"),A8o=l(),b2=a("li"),yce=a("strong"),y8o=o("marian"),L8o=o(" \u2014 "),FD=a("a"),x8o=o("MarianMTModel"),$8o=o(" (Marian model)"),k8o=l(),v2=a("li"),Lce=a("strong"),S8o=o("mbart"),R8o=o(" \u2014 "),TD=a("a"),P8o=o("MBartForConditionalGeneration"),B8o=o(" (mBART model)"),I8o=l(),F2=a("li"),xce=a("strong"),q8o=o("mt5"),N8o=o(" \u2014 "),MD=a("a"),j8o=o("MT5ForConditionalGeneration"),D8o=o(" (mT5 model)"),G8o=l(),T2=a("li"),$ce=a("strong"),O8o=o("pegasus"),V8o=o(" \u2014 "),ED=a("a"),X8o=o("PegasusForConditionalGeneration"),z8o=o(" (Pegasus model)"),W8o=l(),M2=a("li"),kce=a("strong"),Q8o=o("plbart"),H8o=o(" \u2014 "),CD=a("a"),U8o=o("PLBartForConditionalGeneration"),J8o=o(" (PLBart model)"),Y8o=l(),E2=a("li"),Sce=a("strong"),K8o=o("prophetnet"),Z8o=o(" \u2014 "),wD=a("a"),e7o=o("ProphetNetForConditionalGeneration"),o7o=o(" (ProphetNet model)"),r7o=l(),C2=a("li"),Rce=a("strong"),t7o=o("t5"),a7o=o(" \u2014 "),AD=a("a"),n7o=o("T5ForConditionalGeneration"),s7o=o(" (T5 model)"),l7o=l(),w2=a("li"),Pce=a("strong"),i7o=o("xlm-prophetnet"),d7o=o(" \u2014 "),yD=a("a"),c7o=o("XLMProphetNetForConditionalGeneration"),m7o=o(" (XLMProphetNet model)"),f7o=l(),A2=a("p"),g7o=o("The model is set in evaluation mode by default using "),Bce=a("code"),h7o=o("model.eval()"),u7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),p7o=o("model.train()"),_7o=l(),F(y2.$$.fragment),sqe=l(),ji=a("h2"),L2=a("a"),qce=a("span"),F(lL.$$.fragment),b7o=l(),Nce=a("span"),v7o=o("AutoModelForSequenceClassification"),lqe=l(),Ro=a("div"),F(iL.$$.fragment),F7o=l(),Di=a("p"),T7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LD=a("a"),M7o=o("from_pretrained()"),E7o=o(" class method or the "),xD=a("a"),C7o=o("from_config()"),w7o=o(` class
method.`),A7o=l(),dL=a("p"),y7o=o("This class cannot be instantiated directly using "),jce=a("code"),L7o=o("__init__()"),x7o=o(" (throws an error)."),$7o=l(),it=a("div"),F(cL.$$.fragment),k7o=l(),Dce=a("p"),S7o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R7o=l(),Gi=a("p"),P7o=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),B7o=o("not"),I7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),q7o=o("from_pretrained()"),N7o=o(" to load the model weights."),j7o=l(),F(x2.$$.fragment),D7o=l(),oo=a("div"),F(mL.$$.fragment),G7o=l(),Oce=a("p"),O7o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),V7o=l(),Ra=a("p"),X7o=o("The model class to instantiate is selected based on the "),Vce=a("code"),z7o=o("model_type"),W7o=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),Q7o=o("pretrained_model_name_or_path"),H7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),U7o=o("pretrained_model_name_or_path"),J7o=o(":"),Y7o=l(),q=a("ul"),$2=a("li"),Wce=a("strong"),K7o=o("albert"),Z7o=o(" \u2014 "),kD=a("a"),exo=o("AlbertForSequenceClassification"),oxo=o(" (ALBERT model)"),rxo=l(),k2=a("li"),Qce=a("strong"),txo=o("bart"),axo=o(" \u2014 "),SD=a("a"),nxo=o("BartForSequenceClassification"),sxo=o(" (BART model)"),lxo=l(),S2=a("li"),Hce=a("strong"),ixo=o("bert"),dxo=o(" \u2014 "),RD=a("a"),cxo=o("BertForSequenceClassification"),mxo=o(" (BERT model)"),fxo=l(),R2=a("li"),Uce=a("strong"),gxo=o("big_bird"),hxo=o(" \u2014 "),PD=a("a"),uxo=o("BigBirdForSequenceClassification"),pxo=o(" (BigBird model)"),_xo=l(),P2=a("li"),Jce=a("strong"),bxo=o("bigbird_pegasus"),vxo=o(" \u2014 "),BD=a("a"),Fxo=o("BigBirdPegasusForSequenceClassification"),Txo=o(" (BigBirdPegasus model)"),Mxo=l(),B2=a("li"),Yce=a("strong"),Exo=o("camembert"),Cxo=o(" \u2014 "),ID=a("a"),wxo=o("CamembertForSequenceClassification"),Axo=o(" (CamemBERT model)"),yxo=l(),I2=a("li"),Kce=a("strong"),Lxo=o("canine"),xxo=o(" \u2014 "),qD=a("a"),$xo=o("CanineForSequenceClassification"),kxo=o(" (Canine model)"),Sxo=l(),q2=a("li"),Zce=a("strong"),Rxo=o("convbert"),Pxo=o(" \u2014 "),ND=a("a"),Bxo=o("ConvBertForSequenceClassification"),Ixo=o(" (ConvBERT model)"),qxo=l(),N2=a("li"),eme=a("strong"),Nxo=o("ctrl"),jxo=o(" \u2014 "),jD=a("a"),Dxo=o("CTRLForSequenceClassification"),Gxo=o(" (CTRL model)"),Oxo=l(),j2=a("li"),ome=a("strong"),Vxo=o("data2vec-text"),Xxo=o(" \u2014 "),DD=a("a"),zxo=o("Data2VecTextForSequenceClassification"),Wxo=o(" (Data2VecText model)"),Qxo=l(),D2=a("li"),rme=a("strong"),Hxo=o("deberta"),Uxo=o(" \u2014 "),GD=a("a"),Jxo=o("DebertaForSequenceClassification"),Yxo=o(" (DeBERTa model)"),Kxo=l(),G2=a("li"),tme=a("strong"),Zxo=o("deberta-v2"),e9o=o(" \u2014 "),OD=a("a"),o9o=o("DebertaV2ForSequenceClassification"),r9o=o(" (DeBERTa-v2 model)"),t9o=l(),O2=a("li"),ame=a("strong"),a9o=o("distilbert"),n9o=o(" \u2014 "),VD=a("a"),s9o=o("DistilBertForSequenceClassification"),l9o=o(" (DistilBERT model)"),i9o=l(),V2=a("li"),nme=a("strong"),d9o=o("electra"),c9o=o(" \u2014 "),XD=a("a"),m9o=o("ElectraForSequenceClassification"),f9o=o(" (ELECTRA model)"),g9o=l(),X2=a("li"),sme=a("strong"),h9o=o("flaubert"),u9o=o(" \u2014 "),zD=a("a"),p9o=o("FlaubertForSequenceClassification"),_9o=o(" (FlauBERT model)"),b9o=l(),z2=a("li"),lme=a("strong"),v9o=o("fnet"),F9o=o(" \u2014 "),WD=a("a"),T9o=o("FNetForSequenceClassification"),M9o=o(" (FNet model)"),E9o=l(),W2=a("li"),ime=a("strong"),C9o=o("funnel"),w9o=o(" \u2014 "),QD=a("a"),A9o=o("FunnelForSequenceClassification"),y9o=o(" (Funnel Transformer model)"),L9o=l(),Q2=a("li"),dme=a("strong"),x9o=o("gpt2"),$9o=o(" \u2014 "),HD=a("a"),k9o=o("GPT2ForSequenceClassification"),S9o=o(" (OpenAI GPT-2 model)"),R9o=l(),H2=a("li"),cme=a("strong"),P9o=o("gpt_neo"),B9o=o(" \u2014 "),UD=a("a"),I9o=o("GPTNeoForSequenceClassification"),q9o=o(" (GPT Neo model)"),N9o=l(),U2=a("li"),mme=a("strong"),j9o=o("gptj"),D9o=o(" \u2014 "),JD=a("a"),G9o=o("GPTJForSequenceClassification"),O9o=o(" (GPT-J model)"),V9o=l(),J2=a("li"),fme=a("strong"),X9o=o("ibert"),z9o=o(" \u2014 "),YD=a("a"),W9o=o("IBertForSequenceClassification"),Q9o=o(" (I-BERT model)"),H9o=l(),Y2=a("li"),gme=a("strong"),U9o=o("layoutlm"),J9o=o(" \u2014 "),KD=a("a"),Y9o=o("LayoutLMForSequenceClassification"),K9o=o(" (LayoutLM model)"),Z9o=l(),K2=a("li"),hme=a("strong"),e$o=o("layoutlmv2"),o$o=o(" \u2014 "),ZD=a("a"),r$o=o("LayoutLMv2ForSequenceClassification"),t$o=o(" (LayoutLMv2 model)"),a$o=l(),Z2=a("li"),ume=a("strong"),n$o=o("led"),s$o=o(" \u2014 "),eG=a("a"),l$o=o("LEDForSequenceClassification"),i$o=o(" (LED model)"),d$o=l(),ev=a("li"),pme=a("strong"),c$o=o("longformer"),m$o=o(" \u2014 "),oG=a("a"),f$o=o("LongformerForSequenceClassification"),g$o=o(" (Longformer model)"),h$o=l(),ov=a("li"),_me=a("strong"),u$o=o("mbart"),p$o=o(" \u2014 "),rG=a("a"),_$o=o("MBartForSequenceClassification"),b$o=o(" (mBART model)"),v$o=l(),rv=a("li"),bme=a("strong"),F$o=o("megatron-bert"),T$o=o(" \u2014 "),tG=a("a"),M$o=o("MegatronBertForSequenceClassification"),E$o=o(" (MegatronBert model)"),C$o=l(),tv=a("li"),vme=a("strong"),w$o=o("mobilebert"),A$o=o(" \u2014 "),aG=a("a"),y$o=o("MobileBertForSequenceClassification"),L$o=o(" (MobileBERT model)"),x$o=l(),av=a("li"),Fme=a("strong"),$$o=o("mpnet"),k$o=o(" \u2014 "),nG=a("a"),S$o=o("MPNetForSequenceClassification"),R$o=o(" (MPNet model)"),P$o=l(),nv=a("li"),Tme=a("strong"),B$o=o("nystromformer"),I$o=o(" \u2014 "),sG=a("a"),q$o=o("NystromformerForSequenceClassification"),N$o=o(" (Nystromformer model)"),j$o=l(),sv=a("li"),Mme=a("strong"),D$o=o("openai-gpt"),G$o=o(" \u2014 "),lG=a("a"),O$o=o("OpenAIGPTForSequenceClassification"),V$o=o(" (OpenAI GPT model)"),X$o=l(),lv=a("li"),Eme=a("strong"),z$o=o("perceiver"),W$o=o(" \u2014 "),iG=a("a"),Q$o=o("PerceiverForSequenceClassification"),H$o=o(" (Perceiver model)"),U$o=l(),iv=a("li"),Cme=a("strong"),J$o=o("plbart"),Y$o=o(" \u2014 "),dG=a("a"),K$o=o("PLBartForSequenceClassification"),Z$o=o(" (PLBart model)"),eko=l(),dv=a("li"),wme=a("strong"),oko=o("qdqbert"),rko=o(" \u2014 "),cG=a("a"),tko=o("QDQBertForSequenceClassification"),ako=o(" (QDQBert model)"),nko=l(),cv=a("li"),Ame=a("strong"),sko=o("reformer"),lko=o(" \u2014 "),mG=a("a"),iko=o("ReformerForSequenceClassification"),dko=o(" (Reformer model)"),cko=l(),mv=a("li"),yme=a("strong"),mko=o("rembert"),fko=o(" \u2014 "),fG=a("a"),gko=o("RemBertForSequenceClassification"),hko=o(" (RemBERT model)"),uko=l(),fv=a("li"),Lme=a("strong"),pko=o("roberta"),_ko=o(" \u2014 "),gG=a("a"),bko=o("RobertaForSequenceClassification"),vko=o(" (RoBERTa model)"),Fko=l(),gv=a("li"),xme=a("strong"),Tko=o("roformer"),Mko=o(" \u2014 "),hG=a("a"),Eko=o("RoFormerForSequenceClassification"),Cko=o(" (RoFormer model)"),wko=l(),hv=a("li"),$me=a("strong"),Ako=o("squeezebert"),yko=o(" \u2014 "),uG=a("a"),Lko=o("SqueezeBertForSequenceClassification"),xko=o(" (SqueezeBERT model)"),$ko=l(),uv=a("li"),kme=a("strong"),kko=o("tapas"),Sko=o(" \u2014 "),pG=a("a"),Rko=o("TapasForSequenceClassification"),Pko=o(" (TAPAS model)"),Bko=l(),pv=a("li"),Sme=a("strong"),Iko=o("transfo-xl"),qko=o(" \u2014 "),_G=a("a"),Nko=o("TransfoXLForSequenceClassification"),jko=o(" (Transformer-XL model)"),Dko=l(),_v=a("li"),Rme=a("strong"),Gko=o("xlm"),Oko=o(" \u2014 "),bG=a("a"),Vko=o("XLMForSequenceClassification"),Xko=o(" (XLM model)"),zko=l(),bv=a("li"),Pme=a("strong"),Wko=o("xlm-roberta"),Qko=o(" \u2014 "),vG=a("a"),Hko=o("XLMRobertaForSequenceClassification"),Uko=o(" (XLM-RoBERTa model)"),Jko=l(),vv=a("li"),Bme=a("strong"),Yko=o("xlm-roberta-xl"),Kko=o(" \u2014 "),FG=a("a"),Zko=o("XLMRobertaXLForSequenceClassification"),eSo=o(" (XLM-RoBERTa-XL model)"),oSo=l(),Fv=a("li"),Ime=a("strong"),rSo=o("xlnet"),tSo=o(" \u2014 "),TG=a("a"),aSo=o("XLNetForSequenceClassification"),nSo=o(" (XLNet model)"),sSo=l(),Tv=a("li"),qme=a("strong"),lSo=o("yoso"),iSo=o(" \u2014 "),MG=a("a"),dSo=o("YosoForSequenceClassification"),cSo=o(" (YOSO model)"),mSo=l(),Mv=a("p"),fSo=o("The model is set in evaluation mode by default using "),Nme=a("code"),gSo=o("model.eval()"),hSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),uSo=o("model.train()"),pSo=l(),F(Ev.$$.fragment),iqe=l(),Oi=a("h2"),Cv=a("a"),Dme=a("span"),F(fL.$$.fragment),_So=l(),Gme=a("span"),bSo=o("AutoModelForMultipleChoice"),dqe=l(),Po=a("div"),F(gL.$$.fragment),vSo=l(),Vi=a("p"),FSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EG=a("a"),TSo=o("from_pretrained()"),MSo=o(" class method or the "),CG=a("a"),ESo=o("from_config()"),CSo=o(` class
method.`),wSo=l(),hL=a("p"),ASo=o("This class cannot be instantiated directly using "),Ome=a("code"),ySo=o("__init__()"),LSo=o(" (throws an error)."),xSo=l(),dt=a("div"),F(uL.$$.fragment),$So=l(),Vme=a("p"),kSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SSo=l(),Xi=a("p"),RSo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),PSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),ISo=o("from_pretrained()"),qSo=o(" to load the model weights."),NSo=l(),F(wv.$$.fragment),jSo=l(),ro=a("div"),F(pL.$$.fragment),DSo=l(),zme=a("p"),GSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OSo=l(),Pa=a("p"),VSo=o("The model class to instantiate is selected based on the "),Wme=a("code"),XSo=o("model_type"),zSo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),WSo=o("pretrained_model_name_or_path"),QSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),HSo=o("pretrained_model_name_or_path"),USo=o(":"),JSo=l(),Y=a("ul"),Av=a("li"),Ume=a("strong"),YSo=o("albert"),KSo=o(" \u2014 "),AG=a("a"),ZSo=o("AlbertForMultipleChoice"),eRo=o(" (ALBERT model)"),oRo=l(),yv=a("li"),Jme=a("strong"),rRo=o("bert"),tRo=o(" \u2014 "),yG=a("a"),aRo=o("BertForMultipleChoice"),nRo=o(" (BERT model)"),sRo=l(),Lv=a("li"),Yme=a("strong"),lRo=o("big_bird"),iRo=o(" \u2014 "),LG=a("a"),dRo=o("BigBirdForMultipleChoice"),cRo=o(" (BigBird model)"),mRo=l(),xv=a("li"),Kme=a("strong"),fRo=o("camembert"),gRo=o(" \u2014 "),xG=a("a"),hRo=o("CamembertForMultipleChoice"),uRo=o(" (CamemBERT model)"),pRo=l(),$v=a("li"),Zme=a("strong"),_Ro=o("canine"),bRo=o(" \u2014 "),$G=a("a"),vRo=o("CanineForMultipleChoice"),FRo=o(" (Canine model)"),TRo=l(),kv=a("li"),efe=a("strong"),MRo=o("convbert"),ERo=o(" \u2014 "),kG=a("a"),CRo=o("ConvBertForMultipleChoice"),wRo=o(" (ConvBERT model)"),ARo=l(),Sv=a("li"),ofe=a("strong"),yRo=o("data2vec-text"),LRo=o(" \u2014 "),SG=a("a"),xRo=o("Data2VecTextForMultipleChoice"),$Ro=o(" (Data2VecText model)"),kRo=l(),Rv=a("li"),rfe=a("strong"),SRo=o("deberta-v2"),RRo=o(" \u2014 "),RG=a("a"),PRo=o("DebertaV2ForMultipleChoice"),BRo=o(" (DeBERTa-v2 model)"),IRo=l(),Pv=a("li"),tfe=a("strong"),qRo=o("distilbert"),NRo=o(" \u2014 "),PG=a("a"),jRo=o("DistilBertForMultipleChoice"),DRo=o(" (DistilBERT model)"),GRo=l(),Bv=a("li"),afe=a("strong"),ORo=o("electra"),VRo=o(" \u2014 "),BG=a("a"),XRo=o("ElectraForMultipleChoice"),zRo=o(" (ELECTRA model)"),WRo=l(),Iv=a("li"),nfe=a("strong"),QRo=o("flaubert"),HRo=o(" \u2014 "),IG=a("a"),URo=o("FlaubertForMultipleChoice"),JRo=o(" (FlauBERT model)"),YRo=l(),qv=a("li"),sfe=a("strong"),KRo=o("fnet"),ZRo=o(" \u2014 "),qG=a("a"),ePo=o("FNetForMultipleChoice"),oPo=o(" (FNet model)"),rPo=l(),Nv=a("li"),lfe=a("strong"),tPo=o("funnel"),aPo=o(" \u2014 "),NG=a("a"),nPo=o("FunnelForMultipleChoice"),sPo=o(" (Funnel Transformer model)"),lPo=l(),jv=a("li"),ife=a("strong"),iPo=o("ibert"),dPo=o(" \u2014 "),jG=a("a"),cPo=o("IBertForMultipleChoice"),mPo=o(" (I-BERT model)"),fPo=l(),Dv=a("li"),dfe=a("strong"),gPo=o("longformer"),hPo=o(" \u2014 "),DG=a("a"),uPo=o("LongformerForMultipleChoice"),pPo=o(" (Longformer model)"),_Po=l(),Gv=a("li"),cfe=a("strong"),bPo=o("megatron-bert"),vPo=o(" \u2014 "),GG=a("a"),FPo=o("MegatronBertForMultipleChoice"),TPo=o(" (MegatronBert model)"),MPo=l(),Ov=a("li"),mfe=a("strong"),EPo=o("mobilebert"),CPo=o(" \u2014 "),OG=a("a"),wPo=o("MobileBertForMultipleChoice"),APo=o(" (MobileBERT model)"),yPo=l(),Vv=a("li"),ffe=a("strong"),LPo=o("mpnet"),xPo=o(" \u2014 "),VG=a("a"),$Po=o("MPNetForMultipleChoice"),kPo=o(" (MPNet model)"),SPo=l(),Xv=a("li"),gfe=a("strong"),RPo=o("nystromformer"),PPo=o(" \u2014 "),XG=a("a"),BPo=o("NystromformerForMultipleChoice"),IPo=o(" (Nystromformer model)"),qPo=l(),zv=a("li"),hfe=a("strong"),NPo=o("qdqbert"),jPo=o(" \u2014 "),zG=a("a"),DPo=o("QDQBertForMultipleChoice"),GPo=o(" (QDQBert model)"),OPo=l(),Wv=a("li"),ufe=a("strong"),VPo=o("rembert"),XPo=o(" \u2014 "),WG=a("a"),zPo=o("RemBertForMultipleChoice"),WPo=o(" (RemBERT model)"),QPo=l(),Qv=a("li"),pfe=a("strong"),HPo=o("roberta"),UPo=o(" \u2014 "),QG=a("a"),JPo=o("RobertaForMultipleChoice"),YPo=o(" (RoBERTa model)"),KPo=l(),Hv=a("li"),_fe=a("strong"),ZPo=o("roformer"),eBo=o(" \u2014 "),HG=a("a"),oBo=o("RoFormerForMultipleChoice"),rBo=o(" (RoFormer model)"),tBo=l(),Uv=a("li"),bfe=a("strong"),aBo=o("squeezebert"),nBo=o(" \u2014 "),UG=a("a"),sBo=o("SqueezeBertForMultipleChoice"),lBo=o(" (SqueezeBERT model)"),iBo=l(),Jv=a("li"),vfe=a("strong"),dBo=o("xlm"),cBo=o(" \u2014 "),JG=a("a"),mBo=o("XLMForMultipleChoice"),fBo=o(" (XLM model)"),gBo=l(),Yv=a("li"),Ffe=a("strong"),hBo=o("xlm-roberta"),uBo=o(" \u2014 "),YG=a("a"),pBo=o("XLMRobertaForMultipleChoice"),_Bo=o(" (XLM-RoBERTa model)"),bBo=l(),Kv=a("li"),Tfe=a("strong"),vBo=o("xlm-roberta-xl"),FBo=o(" \u2014 "),KG=a("a"),TBo=o("XLMRobertaXLForMultipleChoice"),MBo=o(" (XLM-RoBERTa-XL model)"),EBo=l(),Zv=a("li"),Mfe=a("strong"),CBo=o("xlnet"),wBo=o(" \u2014 "),ZG=a("a"),ABo=o("XLNetForMultipleChoice"),yBo=o(" (XLNet model)"),LBo=l(),eF=a("li"),Efe=a("strong"),xBo=o("yoso"),$Bo=o(" \u2014 "),eO=a("a"),kBo=o("YosoForMultipleChoice"),SBo=o(" (YOSO model)"),RBo=l(),oF=a("p"),PBo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),BBo=o("model.eval()"),IBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),qBo=o("model.train()"),NBo=l(),F(rF.$$.fragment),cqe=l(),zi=a("h2"),tF=a("a"),Afe=a("span"),F(_L.$$.fragment),jBo=l(),yfe=a("span"),DBo=o("AutoModelForNextSentencePrediction"),mqe=l(),Bo=a("div"),F(bL.$$.fragment),GBo=l(),Wi=a("p"),OBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oO=a("a"),VBo=o("from_pretrained()"),XBo=o(" class method or the "),rO=a("a"),zBo=o("from_config()"),WBo=o(` class
method.`),QBo=l(),vL=a("p"),HBo=o("This class cannot be instantiated directly using "),Lfe=a("code"),UBo=o("__init__()"),JBo=o(" (throws an error)."),YBo=l(),ct=a("div"),F(FL.$$.fragment),KBo=l(),xfe=a("p"),ZBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eIo=l(),Qi=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(aF.$$.fragment),lIo=l(),to=a("div"),F(TL.$$.fragment),iIo=l(),kfe=a("p"),dIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cIo=l(),Ba=a("p"),mIo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),fIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),hIo=o("pretrained_model_name_or_path"),uIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),pIo=o("pretrained_model_name_or_path"),_Io=o(":"),bIo=l(),Yr=a("ul"),nF=a("li"),Bfe=a("strong"),vIo=o("bert"),FIo=o(" \u2014 "),aO=a("a"),TIo=o("BertForNextSentencePrediction"),MIo=o(" (BERT model)"),EIo=l(),sF=a("li"),Ife=a("strong"),CIo=o("fnet"),wIo=o(" \u2014 "),nO=a("a"),AIo=o("FNetForNextSentencePrediction"),yIo=o(" (FNet model)"),LIo=l(),lF=a("li"),qfe=a("strong"),xIo=o("megatron-bert"),$Io=o(" \u2014 "),sO=a("a"),kIo=o("MegatronBertForNextSentencePrediction"),SIo=o(" (MegatronBert model)"),RIo=l(),iF=a("li"),Nfe=a("strong"),PIo=o("mobilebert"),BIo=o(" \u2014 "),lO=a("a"),IIo=o("MobileBertForNextSentencePrediction"),qIo=o(" (MobileBERT model)"),NIo=l(),dF=a("li"),jfe=a("strong"),jIo=o("qdqbert"),DIo=o(" \u2014 "),iO=a("a"),GIo=o("QDQBertForNextSentencePrediction"),OIo=o(" (QDQBert model)"),VIo=l(),cF=a("p"),XIo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),zIo=o("model.eval()"),WIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),QIo=o("model.train()"),HIo=l(),F(mF.$$.fragment),fqe=l(),Hi=a("h2"),fF=a("a"),Ofe=a("span"),F(ML.$$.fragment),UIo=l(),Vfe=a("span"),JIo=o("AutoModelForTokenClassification"),gqe=l(),Io=a("div"),F(EL.$$.fragment),YIo=l(),Ui=a("p"),KIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dO=a("a"),ZIo=o("from_pretrained()"),eqo=o(" class method or the "),cO=a("a"),oqo=o("from_config()"),rqo=o(` class
method.`),tqo=l(),CL=a("p"),aqo=o("This class cannot be instantiated directly using "),Xfe=a("code"),nqo=o("__init__()"),sqo=o(" (throws an error)."),lqo=l(),mt=a("div"),F(wL.$$.fragment),iqo=l(),zfe=a("p"),dqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cqo=l(),Ji=a("p"),mqo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),fqo=o("not"),gqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),hqo=o("from_pretrained()"),uqo=o(" to load the model weights."),pqo=l(),F(gF.$$.fragment),_qo=l(),ao=a("div"),F(AL.$$.fragment),bqo=l(),Qfe=a("p"),vqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fqo=l(),Ia=a("p"),Tqo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),Mqo=o("model_type"),Eqo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),Cqo=o("pretrained_model_name_or_path"),wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),Aqo=o("pretrained_model_name_or_path"),yqo=o(":"),Lqo=l(),U=a("ul"),hF=a("li"),Yfe=a("strong"),xqo=o("albert"),$qo=o(" \u2014 "),fO=a("a"),kqo=o("AlbertForTokenClassification"),Sqo=o(" (ALBERT model)"),Rqo=l(),uF=a("li"),Kfe=a("strong"),Pqo=o("bert"),Bqo=o(" \u2014 "),gO=a("a"),Iqo=o("BertForTokenClassification"),qqo=o(" (BERT model)"),Nqo=l(),pF=a("li"),Zfe=a("strong"),jqo=o("big_bird"),Dqo=o(" \u2014 "),hO=a("a"),Gqo=o("BigBirdForTokenClassification"),Oqo=o(" (BigBird model)"),Vqo=l(),_F=a("li"),ege=a("strong"),Xqo=o("camembert"),zqo=o(" \u2014 "),uO=a("a"),Wqo=o("CamembertForTokenClassification"),Qqo=o(" (CamemBERT model)"),Hqo=l(),bF=a("li"),oge=a("strong"),Uqo=o("canine"),Jqo=o(" \u2014 "),pO=a("a"),Yqo=o("CanineForTokenClassification"),Kqo=o(" (Canine model)"),Zqo=l(),vF=a("li"),rge=a("strong"),eNo=o("convbert"),oNo=o(" \u2014 "),_O=a("a"),rNo=o("ConvBertForTokenClassification"),tNo=o(" (ConvBERT model)"),aNo=l(),FF=a("li"),tge=a("strong"),nNo=o("data2vec-text"),sNo=o(" \u2014 "),bO=a("a"),lNo=o("Data2VecTextForTokenClassification"),iNo=o(" (Data2VecText model)"),dNo=l(),TF=a("li"),age=a("strong"),cNo=o("deberta"),mNo=o(" \u2014 "),vO=a("a"),fNo=o("DebertaForTokenClassification"),gNo=o(" (DeBERTa model)"),hNo=l(),MF=a("li"),nge=a("strong"),uNo=o("deberta-v2"),pNo=o(" \u2014 "),FO=a("a"),_No=o("DebertaV2ForTokenClassification"),bNo=o(" (DeBERTa-v2 model)"),vNo=l(),EF=a("li"),sge=a("strong"),FNo=o("distilbert"),TNo=o(" \u2014 "),TO=a("a"),MNo=o("DistilBertForTokenClassification"),ENo=o(" (DistilBERT model)"),CNo=l(),CF=a("li"),lge=a("strong"),wNo=o("electra"),ANo=o(" \u2014 "),MO=a("a"),yNo=o("ElectraForTokenClassification"),LNo=o(" (ELECTRA model)"),xNo=l(),wF=a("li"),ige=a("strong"),$No=o("flaubert"),kNo=o(" \u2014 "),EO=a("a"),SNo=o("FlaubertForTokenClassification"),RNo=o(" (FlauBERT model)"),PNo=l(),AF=a("li"),dge=a("strong"),BNo=o("fnet"),INo=o(" \u2014 "),CO=a("a"),qNo=o("FNetForTokenClassification"),NNo=o(" (FNet model)"),jNo=l(),yF=a("li"),cge=a("strong"),DNo=o("funnel"),GNo=o(" \u2014 "),wO=a("a"),ONo=o("FunnelForTokenClassification"),VNo=o(" (Funnel Transformer model)"),XNo=l(),LF=a("li"),mge=a("strong"),zNo=o("gpt2"),WNo=o(" \u2014 "),AO=a("a"),QNo=o("GPT2ForTokenClassification"),HNo=o(" (OpenAI GPT-2 model)"),UNo=l(),xF=a("li"),fge=a("strong"),JNo=o("ibert"),YNo=o(" \u2014 "),yO=a("a"),KNo=o("IBertForTokenClassification"),ZNo=o(" (I-BERT model)"),ejo=l(),$F=a("li"),gge=a("strong"),ojo=o("layoutlm"),rjo=o(" \u2014 "),LO=a("a"),tjo=o("LayoutLMForTokenClassification"),ajo=o(" (LayoutLM model)"),njo=l(),kF=a("li"),hge=a("strong"),sjo=o("layoutlmv2"),ljo=o(" \u2014 "),xO=a("a"),ijo=o("LayoutLMv2ForTokenClassification"),djo=o(" (LayoutLMv2 model)"),cjo=l(),SF=a("li"),uge=a("strong"),mjo=o("longformer"),fjo=o(" \u2014 "),$O=a("a"),gjo=o("LongformerForTokenClassification"),hjo=o(" (Longformer model)"),ujo=l(),RF=a("li"),pge=a("strong"),pjo=o("megatron-bert"),_jo=o(" \u2014 "),kO=a("a"),bjo=o("MegatronBertForTokenClassification"),vjo=o(" (MegatronBert model)"),Fjo=l(),PF=a("li"),_ge=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),SO=a("a"),Ejo=o("MobileBertForTokenClassification"),Cjo=o(" (MobileBERT model)"),wjo=l(),BF=a("li"),bge=a("strong"),Ajo=o("mpnet"),yjo=o(" \u2014 "),RO=a("a"),Ljo=o("MPNetForTokenClassification"),xjo=o(" (MPNet model)"),$jo=l(),IF=a("li"),vge=a("strong"),kjo=o("nystromformer"),Sjo=o(" \u2014 "),PO=a("a"),Rjo=o("NystromformerForTokenClassification"),Pjo=o(" (Nystromformer model)"),Bjo=l(),qF=a("li"),Fge=a("strong"),Ijo=o("qdqbert"),qjo=o(" \u2014 "),BO=a("a"),Njo=o("QDQBertForTokenClassification"),jjo=o(" (QDQBert model)"),Djo=l(),NF=a("li"),Tge=a("strong"),Gjo=o("rembert"),Ojo=o(" \u2014 "),IO=a("a"),Vjo=o("RemBertForTokenClassification"),Xjo=o(" (RemBERT model)"),zjo=l(),jF=a("li"),Mge=a("strong"),Wjo=o("roberta"),Qjo=o(" \u2014 "),qO=a("a"),Hjo=o("RobertaForTokenClassification"),Ujo=o(" (RoBERTa model)"),Jjo=l(),DF=a("li"),Ege=a("strong"),Yjo=o("roformer"),Kjo=o(" \u2014 "),NO=a("a"),Zjo=o("RoFormerForTokenClassification"),eDo=o(" (RoFormer model)"),oDo=l(),GF=a("li"),Cge=a("strong"),rDo=o("squeezebert"),tDo=o(" \u2014 "),jO=a("a"),aDo=o("SqueezeBertForTokenClassification"),nDo=o(" (SqueezeBERT model)"),sDo=l(),OF=a("li"),wge=a("strong"),lDo=o("xlm"),iDo=o(" \u2014 "),DO=a("a"),dDo=o("XLMForTokenClassification"),cDo=o(" (XLM model)"),mDo=l(),VF=a("li"),Age=a("strong"),fDo=o("xlm-roberta"),gDo=o(" \u2014 "),GO=a("a"),hDo=o("XLMRobertaForTokenClassification"),uDo=o(" (XLM-RoBERTa model)"),pDo=l(),XF=a("li"),yge=a("strong"),_Do=o("xlm-roberta-xl"),bDo=o(" \u2014 "),OO=a("a"),vDo=o("XLMRobertaXLForTokenClassification"),FDo=o(" (XLM-RoBERTa-XL model)"),TDo=l(),zF=a("li"),Lge=a("strong"),MDo=o("xlnet"),EDo=o(" \u2014 "),VO=a("a"),CDo=o("XLNetForTokenClassification"),wDo=o(" (XLNet model)"),ADo=l(),WF=a("li"),xge=a("strong"),yDo=o("yoso"),LDo=o(" \u2014 "),XO=a("a"),xDo=o("YosoForTokenClassification"),$Do=o(" (YOSO model)"),kDo=l(),QF=a("p"),SDo=o("The model is set in evaluation mode by default using "),$ge=a("code"),RDo=o("model.eval()"),PDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),BDo=o("model.train()"),IDo=l(),F(HF.$$.fragment),hqe=l(),Yi=a("h2"),UF=a("a"),Sge=a("span"),F(yL.$$.fragment),qDo=l(),Rge=a("span"),NDo=o("AutoModelForQuestionAnswering"),uqe=l(),qo=a("div"),F(LL.$$.fragment),jDo=l(),Ki=a("p"),DDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zO=a("a"),GDo=o("from_pretrained()"),ODo=o(" class method or the "),WO=a("a"),VDo=o("from_config()"),XDo=o(` class
method.`),zDo=l(),xL=a("p"),WDo=o("This class cannot be instantiated directly using "),Pge=a("code"),QDo=o("__init__()"),HDo=o(" (throws an error)."),UDo=l(),ft=a("div"),F($L.$$.fragment),JDo=l(),Bge=a("p"),YDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KDo=l(),Zi=a("p"),ZDo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),rGo=o("from_pretrained()"),tGo=o(" to load the model weights."),aGo=l(),F(JF.$$.fragment),nGo=l(),no=a("div"),F(kL.$$.fragment),sGo=l(),qge=a("p"),lGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iGo=l(),qa=a("p"),dGo=o("The model class to instantiate is selected based on the "),Nge=a("code"),cGo=o("model_type"),mGo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),fGo=o("pretrained_model_name_or_path"),gGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),hGo=o("pretrained_model_name_or_path"),uGo=o(":"),pGo=l(),V=a("ul"),YF=a("li"),Gge=a("strong"),_Go=o("albert"),bGo=o(" \u2014 "),HO=a("a"),vGo=o("AlbertForQuestionAnswering"),FGo=o(" (ALBERT model)"),TGo=l(),KF=a("li"),Oge=a("strong"),MGo=o("bart"),EGo=o(" \u2014 "),UO=a("a"),CGo=o("BartForQuestionAnswering"),wGo=o(" (BART model)"),AGo=l(),ZF=a("li"),Vge=a("strong"),yGo=o("bert"),LGo=o(" \u2014 "),JO=a("a"),xGo=o("BertForQuestionAnswering"),$Go=o(" (BERT model)"),kGo=l(),e1=a("li"),Xge=a("strong"),SGo=o("big_bird"),RGo=o(" \u2014 "),YO=a("a"),PGo=o("BigBirdForQuestionAnswering"),BGo=o(" (BigBird model)"),IGo=l(),o1=a("li"),zge=a("strong"),qGo=o("bigbird_pegasus"),NGo=o(" \u2014 "),KO=a("a"),jGo=o("BigBirdPegasusForQuestionAnswering"),DGo=o(" (BigBirdPegasus model)"),GGo=l(),r1=a("li"),Wge=a("strong"),OGo=o("camembert"),VGo=o(" \u2014 "),ZO=a("a"),XGo=o("CamembertForQuestionAnswering"),zGo=o(" (CamemBERT model)"),WGo=l(),t1=a("li"),Qge=a("strong"),QGo=o("canine"),HGo=o(" \u2014 "),eV=a("a"),UGo=o("CanineForQuestionAnswering"),JGo=o(" (Canine model)"),YGo=l(),a1=a("li"),Hge=a("strong"),KGo=o("convbert"),ZGo=o(" \u2014 "),oV=a("a"),eOo=o("ConvBertForQuestionAnswering"),oOo=o(" (ConvBERT model)"),rOo=l(),n1=a("li"),Uge=a("strong"),tOo=o("data2vec-text"),aOo=o(" \u2014 "),rV=a("a"),nOo=o("Data2VecTextForQuestionAnswering"),sOo=o(" (Data2VecText model)"),lOo=l(),s1=a("li"),Jge=a("strong"),iOo=o("deberta"),dOo=o(" \u2014 "),tV=a("a"),cOo=o("DebertaForQuestionAnswering"),mOo=o(" (DeBERTa model)"),fOo=l(),l1=a("li"),Yge=a("strong"),gOo=o("deberta-v2"),hOo=o(" \u2014 "),aV=a("a"),uOo=o("DebertaV2ForQuestionAnswering"),pOo=o(" (DeBERTa-v2 model)"),_Oo=l(),i1=a("li"),Kge=a("strong"),bOo=o("distilbert"),vOo=o(" \u2014 "),nV=a("a"),FOo=o("DistilBertForQuestionAnswering"),TOo=o(" (DistilBERT model)"),MOo=l(),d1=a("li"),Zge=a("strong"),EOo=o("electra"),COo=o(" \u2014 "),sV=a("a"),wOo=o("ElectraForQuestionAnswering"),AOo=o(" (ELECTRA model)"),yOo=l(),c1=a("li"),ehe=a("strong"),LOo=o("flaubert"),xOo=o(" \u2014 "),lV=a("a"),$Oo=o("FlaubertForQuestionAnsweringSimple"),kOo=o(" (FlauBERT model)"),SOo=l(),m1=a("li"),ohe=a("strong"),ROo=o("fnet"),POo=o(" \u2014 "),iV=a("a"),BOo=o("FNetForQuestionAnswering"),IOo=o(" (FNet model)"),qOo=l(),f1=a("li"),rhe=a("strong"),NOo=o("funnel"),jOo=o(" \u2014 "),dV=a("a"),DOo=o("FunnelForQuestionAnswering"),GOo=o(" (Funnel Transformer model)"),OOo=l(),g1=a("li"),the=a("strong"),VOo=o("gptj"),XOo=o(" \u2014 "),cV=a("a"),zOo=o("GPTJForQuestionAnswering"),WOo=o(" (GPT-J model)"),QOo=l(),h1=a("li"),ahe=a("strong"),HOo=o("ibert"),UOo=o(" \u2014 "),mV=a("a"),JOo=o("IBertForQuestionAnswering"),YOo=o(" (I-BERT model)"),KOo=l(),u1=a("li"),nhe=a("strong"),ZOo=o("layoutlmv2"),eVo=o(" \u2014 "),fV=a("a"),oVo=o("LayoutLMv2ForQuestionAnswering"),rVo=o(" (LayoutLMv2 model)"),tVo=l(),p1=a("li"),she=a("strong"),aVo=o("led"),nVo=o(" \u2014 "),gV=a("a"),sVo=o("LEDForQuestionAnswering"),lVo=o(" (LED model)"),iVo=l(),_1=a("li"),lhe=a("strong"),dVo=o("longformer"),cVo=o(" \u2014 "),hV=a("a"),mVo=o("LongformerForQuestionAnswering"),fVo=o(" (Longformer model)"),gVo=l(),b1=a("li"),ihe=a("strong"),hVo=o("lxmert"),uVo=o(" \u2014 "),uV=a("a"),pVo=o("LxmertForQuestionAnswering"),_Vo=o(" (LXMERT model)"),bVo=l(),v1=a("li"),dhe=a("strong"),vVo=o("mbart"),FVo=o(" \u2014 "),pV=a("a"),TVo=o("MBartForQuestionAnswering"),MVo=o(" (mBART model)"),EVo=l(),F1=a("li"),che=a("strong"),CVo=o("megatron-bert"),wVo=o(" \u2014 "),_V=a("a"),AVo=o("MegatronBertForQuestionAnswering"),yVo=o(" (MegatronBert model)"),LVo=l(),T1=a("li"),mhe=a("strong"),xVo=o("mobilebert"),$Vo=o(" \u2014 "),bV=a("a"),kVo=o("MobileBertForQuestionAnswering"),SVo=o(" (MobileBERT model)"),RVo=l(),M1=a("li"),fhe=a("strong"),PVo=o("mpnet"),BVo=o(" \u2014 "),vV=a("a"),IVo=o("MPNetForQuestionAnswering"),qVo=o(" (MPNet model)"),NVo=l(),E1=a("li"),ghe=a("strong"),jVo=o("nystromformer"),DVo=o(" \u2014 "),FV=a("a"),GVo=o("NystromformerForQuestionAnswering"),OVo=o(" (Nystromformer model)"),VVo=l(),C1=a("li"),hhe=a("strong"),XVo=o("qdqbert"),zVo=o(" \u2014 "),TV=a("a"),WVo=o("QDQBertForQuestionAnswering"),QVo=o(" (QDQBert model)"),HVo=l(),w1=a("li"),uhe=a("strong"),UVo=o("reformer"),JVo=o(" \u2014 "),MV=a("a"),YVo=o("ReformerForQuestionAnswering"),KVo=o(" (Reformer model)"),ZVo=l(),A1=a("li"),phe=a("strong"),eXo=o("rembert"),oXo=o(" \u2014 "),EV=a("a"),rXo=o("RemBertForQuestionAnswering"),tXo=o(" (RemBERT model)"),aXo=l(),y1=a("li"),_he=a("strong"),nXo=o("roberta"),sXo=o(" \u2014 "),CV=a("a"),lXo=o("RobertaForQuestionAnswering"),iXo=o(" (RoBERTa model)"),dXo=l(),L1=a("li"),bhe=a("strong"),cXo=o("roformer"),mXo=o(" \u2014 "),wV=a("a"),fXo=o("RoFormerForQuestionAnswering"),gXo=o(" (RoFormer model)"),hXo=l(),x1=a("li"),vhe=a("strong"),uXo=o("splinter"),pXo=o(" \u2014 "),AV=a("a"),_Xo=o("SplinterForQuestionAnswering"),bXo=o(" (Splinter model)"),vXo=l(),$1=a("li"),Fhe=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),yV=a("a"),MXo=o("SqueezeBertForQuestionAnswering"),EXo=o(" (SqueezeBERT model)"),CXo=l(),k1=a("li"),The=a("strong"),wXo=o("xlm"),AXo=o(" \u2014 "),LV=a("a"),yXo=o("XLMForQuestionAnsweringSimple"),LXo=o(" (XLM model)"),xXo=l(),S1=a("li"),Mhe=a("strong"),$Xo=o("xlm-roberta"),kXo=o(" \u2014 "),xV=a("a"),SXo=o("XLMRobertaForQuestionAnswering"),RXo=o(" (XLM-RoBERTa model)"),PXo=l(),R1=a("li"),Ehe=a("strong"),BXo=o("xlm-roberta-xl"),IXo=o(" \u2014 "),$V=a("a"),qXo=o("XLMRobertaXLForQuestionAnswering"),NXo=o(" (XLM-RoBERTa-XL model)"),jXo=l(),P1=a("li"),Che=a("strong"),DXo=o("xlnet"),GXo=o(" \u2014 "),kV=a("a"),OXo=o("XLNetForQuestionAnsweringSimple"),VXo=o(" (XLNet model)"),XXo=l(),B1=a("li"),whe=a("strong"),zXo=o("yoso"),WXo=o(" \u2014 "),SV=a("a"),QXo=o("YosoForQuestionAnswering"),HXo=o(" (YOSO model)"),UXo=l(),I1=a("p"),JXo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),YXo=o("model.eval()"),KXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),ZXo=o("model.train()"),ezo=l(),F(q1.$$.fragment),pqe=l(),ed=a("h2"),N1=a("a"),Lhe=a("span"),F(SL.$$.fragment),ozo=l(),xhe=a("span"),rzo=o("AutoModelForTableQuestionAnswering"),_qe=l(),No=a("div"),F(RL.$$.fragment),tzo=l(),od=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RV=a("a"),nzo=o("from_pretrained()"),szo=o(" class method or the "),PV=a("a"),lzo=o("from_config()"),izo=o(` class
method.`),dzo=l(),PL=a("p"),czo=o("This class cannot be instantiated directly using "),$he=a("code"),mzo=o("__init__()"),fzo=o(" (throws an error)."),gzo=l(),gt=a("div"),F(BL.$$.fragment),hzo=l(),khe=a("p"),uzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pzo=l(),rd=a("p"),_zo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" to load the model weights."),Mzo=l(),F(j1.$$.fragment),Ezo=l(),so=a("div"),F(IL.$$.fragment),Czo=l(),Rhe=a("p"),wzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Azo=l(),Na=a("p"),yzo=o("The model class to instantiate is selected based on the "),Phe=a("code"),Lzo=o("model_type"),xzo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),$zo=o("pretrained_model_name_or_path"),kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),Szo=o("pretrained_model_name_or_path"),Rzo=o(":"),Pzo=l(),qhe=a("ul"),D1=a("li"),Nhe=a("strong"),Bzo=o("tapas"),Izo=o(" \u2014 "),IV=a("a"),qzo=o("TapasForQuestionAnswering"),Nzo=o(" (TAPAS model)"),jzo=l(),G1=a("p"),Dzo=o("The model is set in evaluation mode by default using "),jhe=a("code"),Gzo=o("model.eval()"),Ozo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),Vzo=o("model.train()"),Xzo=l(),F(O1.$$.fragment),bqe=l(),td=a("h2"),V1=a("a"),Ghe=a("span"),F(qL.$$.fragment),zzo=l(),Ohe=a("span"),Wzo=o("AutoModelForImageClassification"),vqe=l(),jo=a("div"),F(NL.$$.fragment),Qzo=l(),ad=a("p"),Hzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=a("a"),Uzo=o("from_pretrained()"),Jzo=o(" class method or the "),NV=a("a"),Yzo=o("from_config()"),Kzo=o(` class
method.`),Zzo=l(),jL=a("p"),eWo=o("This class cannot be instantiated directly using "),Vhe=a("code"),oWo=o("__init__()"),rWo=o(" (throws an error)."),tWo=l(),ht=a("div"),F(DL.$$.fragment),aWo=l(),Xhe=a("p"),nWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sWo=l(),nd=a("p"),lWo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),iWo=o("not"),dWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),cWo=o("from_pretrained()"),mWo=o(" to load the model weights."),fWo=l(),F(X1.$$.fragment),gWo=l(),lo=a("div"),F(GL.$$.fragment),hWo=l(),Whe=a("p"),uWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pWo=l(),ja=a("p"),_Wo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),bWo=o("model_type"),vWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),FWo=o("pretrained_model_name_or_path"),TWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(":"),CWo=l(),Fe=a("ul"),z1=a("li"),Jhe=a("strong"),wWo=o("beit"),AWo=o(" \u2014 "),DV=a("a"),yWo=o("BeitForImageClassification"),LWo=o(" (BEiT model)"),xWo=l(),W1=a("li"),Yhe=a("strong"),$Wo=o("convnext"),kWo=o(" \u2014 "),GV=a("a"),SWo=o("ConvNextForImageClassification"),RWo=o(" (ConvNext model)"),PWo=l(),Q1=a("li"),Khe=a("strong"),BWo=o("data2vec-vision"),IWo=o(" \u2014 "),OV=a("a"),qWo=o("Data2VecVisionForImageClassification"),NWo=o(" (Data2VecVision model)"),jWo=l(),Ps=a("li"),Zhe=a("strong"),DWo=o("deit"),GWo=o(" \u2014 "),VV=a("a"),OWo=o("DeiTForImageClassification"),VWo=o(" or "),XV=a("a"),XWo=o("DeiTForImageClassificationWithTeacher"),zWo=o(" (DeiT model)"),WWo=l(),H1=a("li"),eue=a("strong"),QWo=o("imagegpt"),HWo=o(" \u2014 "),zV=a("a"),UWo=o("ImageGPTForImageClassification"),JWo=o(" (ImageGPT model)"),YWo=l(),ut=a("li"),oue=a("strong"),KWo=o("perceiver"),ZWo=o(" \u2014 "),WV=a("a"),eQo=o("PerceiverForImageClassificationLearned"),oQo=o(" or "),QV=a("a"),rQo=o("PerceiverForImageClassificationFourier"),tQo=o(" or "),HV=a("a"),aQo=o("PerceiverForImageClassificationConvProcessing"),nQo=o(" (Perceiver model)"),sQo=l(),U1=a("li"),rue=a("strong"),lQo=o("poolformer"),iQo=o(" \u2014 "),UV=a("a"),dQo=o("PoolFormerForImageClassification"),cQo=o(" (PoolFormer model)"),mQo=l(),J1=a("li"),tue=a("strong"),fQo=o("regnet"),gQo=o(" \u2014 "),JV=a("a"),hQo=o("RegNetForImageClassification"),uQo=o(" (RegNet model)"),pQo=l(),Y1=a("li"),aue=a("strong"),_Qo=o("resnet"),bQo=o(" \u2014 "),YV=a("a"),vQo=o("ResNetForImageClassification"),FQo=o(" (ResNet model)"),TQo=l(),K1=a("li"),nue=a("strong"),MQo=o("segformer"),EQo=o(" \u2014 "),KV=a("a"),CQo=o("SegformerForImageClassification"),wQo=o(" (SegFormer model)"),AQo=l(),Z1=a("li"),sue=a("strong"),yQo=o("swin"),LQo=o(" \u2014 "),ZV=a("a"),xQo=o("SwinForImageClassification"),$Qo=o(" (Swin model)"),kQo=l(),eT=a("li"),lue=a("strong"),SQo=o("van"),RQo=o(" \u2014 "),eX=a("a"),PQo=o("VanForImageClassification"),BQo=o(" (VAN model)"),IQo=l(),oT=a("li"),iue=a("strong"),qQo=o("vit"),NQo=o(" \u2014 "),oX=a("a"),jQo=o("ViTForImageClassification"),DQo=o(" (ViT model)"),GQo=l(),rT=a("p"),OQo=o("The model is set in evaluation mode by default using "),due=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),zQo=o("model.train()"),WQo=l(),F(tT.$$.fragment),Fqe=l(),sd=a("h2"),aT=a("a"),mue=a("span"),F(OL.$$.fragment),QQo=l(),fue=a("span"),HQo=o("AutoModelForVision2Seq"),Tqe=l(),Do=a("div"),F(VL.$$.fragment),UQo=l(),ld=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rX=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),tX=a("a"),ZQo=o("from_config()"),eHo=o(` class
method.`),oHo=l(),XL=a("p"),rHo=o("This class cannot be instantiated directly using "),gue=a("code"),tHo=o("__init__()"),aHo=o(" (throws an error)."),nHo=l(),pt=a("div"),F(zL.$$.fragment),sHo=l(),hue=a("p"),lHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iHo=l(),id=a("p"),dHo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),cHo=o("not"),mHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),fHo=o("from_pretrained()"),gHo=o(" to load the model weights."),hHo=l(),F(nT.$$.fragment),uHo=l(),io=a("div"),F(WL.$$.fragment),pHo=l(),pue=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bHo=l(),Da=a("p"),vHo=o("The model class to instantiate is selected based on the "),_ue=a("code"),FHo=o("model_type"),THo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(":"),AHo=l(),Fue=a("ul"),sT=a("li"),Tue=a("strong"),yHo=o("vision-encoder-decoder"),LHo=o(" \u2014 "),nX=a("a"),xHo=o("VisionEncoderDecoderModel"),$Ho=o(" (Vision Encoder decoder model)"),kHo=l(),lT=a("p"),SHo=o("The model is set in evaluation mode by default using "),Mue=a("code"),RHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),BHo=o("model.train()"),IHo=l(),F(iT.$$.fragment),Mqe=l(),dd=a("h2"),dT=a("a"),Cue=a("span"),F(QL.$$.fragment),qHo=l(),wue=a("span"),NHo=o("AutoModelForAudioClassification"),Eqe=l(),Go=a("div"),F(HL.$$.fragment),jHo=l(),cd=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sX=a("a"),GHo=o("from_pretrained()"),OHo=o(" class method or the "),lX=a("a"),VHo=o("from_config()"),XHo=o(` class
method.`),zHo=l(),UL=a("p"),WHo=o("This class cannot be instantiated directly using "),Aue=a("code"),QHo=o("__init__()"),HHo=o(" (throws an error)."),UHo=l(),_t=a("div"),F(JL.$$.fragment),JHo=l(),yue=a("p"),YHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KHo=l(),md=a("p"),ZHo=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),eUo=o("not"),oUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),rUo=o("from_pretrained()"),tUo=o(" to load the model weights."),aUo=l(),F(cT.$$.fragment),nUo=l(),co=a("div"),F(YL.$$.fragment),sUo=l(),xue=a("p"),lUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iUo=l(),Ga=a("p"),dUo=o("The model class to instantiate is selected based on the "),$ue=a("code"),cUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),fUo=o("pretrained_model_name_or_path"),gUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),hUo=o("pretrained_model_name_or_path"),uUo=o(":"),pUo=l(),ke=a("ul"),mT=a("li"),Rue=a("strong"),_Uo=o("data2vec-audio"),bUo=o(" \u2014 "),dX=a("a"),vUo=o("Data2VecAudioForSequenceClassification"),FUo=o(" (Data2VecAudio model)"),TUo=l(),fT=a("li"),Pue=a("strong"),MUo=o("hubert"),EUo=o(" \u2014 "),cX=a("a"),CUo=o("HubertForSequenceClassification"),wUo=o(" (Hubert model)"),AUo=l(),gT=a("li"),Bue=a("strong"),yUo=o("sew"),LUo=o(" \u2014 "),mX=a("a"),xUo=o("SEWForSequenceClassification"),$Uo=o(" (SEW model)"),kUo=l(),hT=a("li"),Iue=a("strong"),SUo=o("sew-d"),RUo=o(" \u2014 "),fX=a("a"),PUo=o("SEWDForSequenceClassification"),BUo=o(" (SEW-D model)"),IUo=l(),uT=a("li"),que=a("strong"),qUo=o("unispeech"),NUo=o(" \u2014 "),gX=a("a"),jUo=o("UniSpeechForSequenceClassification"),DUo=o(" (UniSpeech model)"),GUo=l(),pT=a("li"),Nue=a("strong"),OUo=o("unispeech-sat"),VUo=o(" \u2014 "),hX=a("a"),XUo=o("UniSpeechSatForSequenceClassification"),zUo=o(" (UniSpeechSat model)"),WUo=l(),_T=a("li"),jue=a("strong"),QUo=o("wav2vec2"),HUo=o(" \u2014 "),uX=a("a"),UUo=o("Wav2Vec2ForSequenceClassification"),JUo=o(" (Wav2Vec2 model)"),YUo=l(),bT=a("li"),Due=a("strong"),KUo=o("wav2vec2-conformer"),ZUo=o(" \u2014 "),pX=a("a"),eJo=o("Wav2Vec2ConformerForSequenceClassification"),oJo=o(" (Wav2Vec2-Conformer model)"),rJo=l(),vT=a("li"),Gue=a("strong"),tJo=o("wavlm"),aJo=o(" \u2014 "),_X=a("a"),nJo=o("WavLMForSequenceClassification"),sJo=o(" (WavLM model)"),lJo=l(),FT=a("p"),iJo=o("The model is set in evaluation mode by default using "),Oue=a("code"),dJo=o("model.eval()"),cJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),mJo=o("model.train()"),fJo=l(),F(TT.$$.fragment),Cqe=l(),fd=a("h2"),MT=a("a"),Xue=a("span"),F(KL.$$.fragment),gJo=l(),zue=a("span"),hJo=o("AutoModelForAudioFrameClassification"),wqe=l(),Oo=a("div"),F(ZL.$$.fragment),uJo=l(),gd=a("p"),pJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bX=a("a"),_Jo=o("from_pretrained()"),bJo=o(" class method or the "),vX=a("a"),vJo=o("from_config()"),FJo=o(` class
method.`),TJo=l(),e8=a("p"),MJo=o("This class cannot be instantiated directly using "),Wue=a("code"),EJo=o("__init__()"),CJo=o(" (throws an error)."),wJo=l(),bt=a("div"),F(o8.$$.fragment),AJo=l(),Que=a("p"),yJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),LJo=l(),hd=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),$Jo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),SJo=o("from_pretrained()"),RJo=o(" to load the model weights."),PJo=l(),F(ET.$$.fragment),BJo=l(),mo=a("div"),F(r8.$$.fragment),IJo=l(),Uue=a("p"),qJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NJo=l(),Oa=a("p"),jJo=o("The model class to instantiate is selected based on the "),Jue=a("code"),DJo=o("model_type"),GJo=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),OJo=o("pretrained_model_name_or_path"),VJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(":"),WJo=l(),Kr=a("ul"),CT=a("li"),Zue=a("strong"),QJo=o("data2vec-audio"),HJo=o(" \u2014 "),TX=a("a"),UJo=o("Data2VecAudioForAudioFrameClassification"),JJo=o(" (Data2VecAudio model)"),YJo=l(),wT=a("li"),epe=a("strong"),KJo=o("unispeech-sat"),ZJo=o(" \u2014 "),MX=a("a"),eYo=o("UniSpeechSatForAudioFrameClassification"),oYo=o(" (UniSpeechSat model)"),rYo=l(),AT=a("li"),ope=a("strong"),tYo=o("wav2vec2"),aYo=o(" \u2014 "),EX=a("a"),nYo=o("Wav2Vec2ForAudioFrameClassification"),sYo=o(" (Wav2Vec2 model)"),lYo=l(),yT=a("li"),rpe=a("strong"),iYo=o("wav2vec2-conformer"),dYo=o(" \u2014 "),CX=a("a"),cYo=o("Wav2Vec2ConformerForAudioFrameClassification"),mYo=o(" (Wav2Vec2-Conformer model)"),fYo=l(),LT=a("li"),tpe=a("strong"),gYo=o("wavlm"),hYo=o(" \u2014 "),wX=a("a"),uYo=o("WavLMForAudioFrameClassification"),pYo=o(" (WavLM model)"),_Yo=l(),xT=a("p"),bYo=o("The model is set in evaluation mode by default using "),ape=a("code"),vYo=o("model.eval()"),FYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),TYo=o("model.train()"),MYo=l(),F($T.$$.fragment),Aqe=l(),ud=a("h2"),kT=a("a"),spe=a("span"),F(t8.$$.fragment),EYo=l(),lpe=a("span"),CYo=o("AutoModelForCTC"),yqe=l(),Vo=a("div"),F(a8.$$.fragment),wYo=l(),pd=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AX=a("a"),yYo=o("from_pretrained()"),LYo=o(" class method or the "),yX=a("a"),xYo=o("from_config()"),$Yo=o(` class
method.`),kYo=l(),n8=a("p"),SYo=o("This class cannot be instantiated directly using "),ipe=a("code"),RYo=o("__init__()"),PYo=o(" (throws an error)."),BYo=l(),vt=a("div"),F(s8.$$.fragment),IYo=l(),dpe=a("p"),qYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NYo=l(),_d=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),F(ST.$$.fragment),zYo=l(),fo=a("div"),F(l8.$$.fragment),WYo=l(),mpe=a("p"),QYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HYo=l(),Va=a("p"),UYo=o("The model class to instantiate is selected based on the "),fpe=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),Se=a("ul"),RT=a("li"),upe=a("strong"),tKo=o("data2vec-audio"),aKo=o(" \u2014 "),xX=a("a"),nKo=o("Data2VecAudioForCTC"),sKo=o(" (Data2VecAudio model)"),lKo=l(),PT=a("li"),ppe=a("strong"),iKo=o("hubert"),dKo=o(" \u2014 "),$X=a("a"),cKo=o("HubertForCTC"),mKo=o(" (Hubert model)"),fKo=l(),BT=a("li"),_pe=a("strong"),gKo=o("sew"),hKo=o(" \u2014 "),kX=a("a"),uKo=o("SEWForCTC"),pKo=o(" (SEW model)"),_Ko=l(),IT=a("li"),bpe=a("strong"),bKo=o("sew-d"),vKo=o(" \u2014 "),SX=a("a"),FKo=o("SEWDForCTC"),TKo=o(" (SEW-D model)"),MKo=l(),qT=a("li"),vpe=a("strong"),EKo=o("unispeech"),CKo=o(" \u2014 "),RX=a("a"),wKo=o("UniSpeechForCTC"),AKo=o(" (UniSpeech model)"),yKo=l(),NT=a("li"),Fpe=a("strong"),LKo=o("unispeech-sat"),xKo=o(" \u2014 "),PX=a("a"),$Ko=o("UniSpeechSatForCTC"),kKo=o(" (UniSpeechSat model)"),SKo=l(),jT=a("li"),Tpe=a("strong"),RKo=o("wav2vec2"),PKo=o(" \u2014 "),BX=a("a"),BKo=o("Wav2Vec2ForCTC"),IKo=o(" (Wav2Vec2 model)"),qKo=l(),DT=a("li"),Mpe=a("strong"),NKo=o("wav2vec2-conformer"),jKo=o(" \u2014 "),IX=a("a"),DKo=o("Wav2Vec2ConformerForCTC"),GKo=o(" (Wav2Vec2-Conformer model)"),OKo=l(),GT=a("li"),Epe=a("strong"),VKo=o("wavlm"),XKo=o(" \u2014 "),qX=a("a"),zKo=o("WavLMForCTC"),WKo=o(" (WavLM model)"),QKo=l(),OT=a("p"),HKo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),YKo=o("model.train()"),KKo=l(),F(VT.$$.fragment),Lqe=l(),bd=a("h2"),XT=a("a"),Ape=a("span"),F(i8.$$.fragment),ZKo=l(),ype=a("span"),eZo=o("AutoModelForSpeechSeq2Seq"),xqe=l(),Xo=a("div"),F(d8.$$.fragment),oZo=l(),vd=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NX=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),jX=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),c8=a("p"),iZo=o("This class cannot be instantiated directly using "),Lpe=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),mZo=l(),Ft=a("div"),F(m8.$$.fragment),fZo=l(),xpe=a("p"),gZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hZo=l(),Fd=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),pZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(zT.$$.fragment),TZo=l(),go=a("div"),F(f8.$$.fragment),MZo=l(),kpe=a("p"),EZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CZo=l(),Xa=a("p"),wZo=o("The model class to instantiate is selected based on the "),Spe=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),g8=a("ul"),WT=a("li"),Bpe=a("strong"),RZo=o("speech-encoder-decoder"),PZo=o(" \u2014 "),GX=a("a"),BZo=o("SpeechEncoderDecoderModel"),IZo=o(" (Speech Encoder decoder model)"),qZo=l(),QT=a("li"),Ipe=a("strong"),NZo=o("speech_to_text"),jZo=o(" \u2014 "),OX=a("a"),DZo=o("Speech2TextForConditionalGeneration"),GZo=o(" (Speech2Text model)"),OZo=l(),HT=a("p"),VZo=o("The model is set in evaluation mode by default using "),qpe=a("code"),XZo=o("model.eval()"),zZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),WZo=o("model.train()"),QZo=l(),F(UT.$$.fragment),$qe=l(),Td=a("h2"),JT=a("a"),jpe=a("span"),F(h8.$$.fragment),HZo=l(),Dpe=a("span"),UZo=o("AutoModelForAudioXVector"),kqe=l(),zo=a("div"),F(u8.$$.fragment),JZo=l(),Md=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VX=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),XX=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),p8=a("p"),ter=o("This class cannot be instantiated directly using "),Gpe=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),Tt=a("div"),F(_8.$$.fragment),ler=l(),Ope=a("p"),ier=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),der=l(),Ed=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),mer=o("not"),fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),uer=l(),F(YT.$$.fragment),per=l(),ho=a("div"),F(b8.$$.fragment),_er=l(),Xpe=a("p"),ber=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ver=l(),za=a("p"),Fer=o("The model class to instantiate is selected based on the "),zpe=a("code"),Ter=o("model_type"),Mer=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(":"),yer=l(),Zr=a("ul"),KT=a("li"),Hpe=a("strong"),Ler=o("data2vec-audio"),xer=o(" \u2014 "),WX=a("a"),$er=o("Data2VecAudioForXVector"),ker=o(" (Data2VecAudio model)"),Ser=l(),ZT=a("li"),Upe=a("strong"),Rer=o("unispeech-sat"),Per=o(" \u2014 "),QX=a("a"),Ber=o("UniSpeechSatForXVector"),Ier=o(" (UniSpeechSat model)"),qer=l(),eM=a("li"),Jpe=a("strong"),Ner=o("wav2vec2"),jer=o(" \u2014 "),HX=a("a"),Der=o("Wav2Vec2ForXVector"),Ger=o(" (Wav2Vec2 model)"),Oer=l(),oM=a("li"),Ype=a("strong"),Ver=o("wav2vec2-conformer"),Xer=o(" \u2014 "),UX=a("a"),zer=o("Wav2Vec2ConformerForXVector"),Wer=o(" (Wav2Vec2-Conformer model)"),Qer=l(),rM=a("li"),Kpe=a("strong"),Her=o("wavlm"),Uer=o(" \u2014 "),JX=a("a"),Jer=o("WavLMForXVector"),Yer=o(" (WavLM model)"),Ker=l(),tM=a("p"),Zer=o("The model is set in evaluation mode by default using "),Zpe=a("code"),eor=o("model.eval()"),oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),ror=o("model.train()"),tor=l(),F(aM.$$.fragment),Sqe=l(),Cd=a("h2"),nM=a("a"),o_e=a("span"),F(v8.$$.fragment),aor=l(),r_e=a("span"),nor=o("AutoModelForMaskedImageModeling"),Rqe=l(),Wo=a("div"),F(F8.$$.fragment),sor=l(),wd=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),YX=a("a"),ior=o("from_pretrained()"),dor=o(" class method or the "),KX=a("a"),cor=o("from_config()"),mor=o(` class
method.`),gor=l(),T8=a("p"),hor=o("This class cannot be instantiated directly using "),t_e=a("code"),uor=o("__init__()"),por=o(" (throws an error)."),_or=l(),Mt=a("div"),F(M8.$$.fragment),bor=l(),a_e=a("p"),vor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),For=l(),Ad=a("p"),Tor=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Mor=o("not"),Eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Cor=o("from_pretrained()"),wor=o(" to load the model weights."),Aor=l(),F(sM.$$.fragment),yor=l(),uo=a("div"),F(E8.$$.fragment),Lor=l(),s_e=a("p"),xor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$or=l(),Wa=a("p"),kor=o("The model class to instantiate is selected based on the "),l_e=a("code"),Sor=o("model_type"),Ror=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),Ior=o("pretrained_model_name_or_path"),qor=o(":"),Nor=l(),yd=a("ul"),lM=a("li"),c_e=a("strong"),jor=o("deit"),Dor=o(" \u2014 "),ez=a("a"),Gor=o("DeiTForMaskedImageModeling"),Oor=o(" (DeiT model)"),Vor=l(),iM=a("li"),m_e=a("strong"),Xor=o("swin"),zor=o(" \u2014 "),oz=a("a"),Wor=o("SwinForMaskedImageModeling"),Qor=o(" (Swin model)"),Hor=l(),dM=a("li"),f_e=a("strong"),Uor=o("vit"),Jor=o(" \u2014 "),rz=a("a"),Yor=o("ViTForMaskedImageModeling"),Kor=o(" (ViT model)"),Zor=l(),cM=a("p"),err=o("The model is set in evaluation mode by default using "),g_e=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=a("code"),trr=o("model.train()"),arr=l(),F(mM.$$.fragment),Pqe=l(),Ld=a("h2"),fM=a("a"),u_e=a("span"),F(C8.$$.fragment),nrr=l(),p_e=a("span"),srr=o("AutoModelForObjectDetection"),Bqe=l(),Qo=a("div"),F(w8.$$.fragment),lrr=l(),xd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tz=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),az=a("a"),mrr=o("from_config()"),frr=o(` class
method.`),grr=l(),A8=a("p"),hrr=o("This class cannot be instantiated directly using "),__e=a("code"),urr=o("__init__()"),prr=o(" (throws an error)."),_rr=l(),Et=a("div"),F(y8.$$.fragment),brr=l(),b_e=a("p"),vrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Frr=l(),$d=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(gM.$$.fragment),yrr=l(),po=a("div"),F(L8.$$.fragment),Lrr=l(),F_e=a("p"),xrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$rr=l(),Qa=a("p"),krr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(":"),Nrr=l(),x8=a("ul"),hM=a("li"),C_e=a("strong"),jrr=o("detr"),Drr=o(" \u2014 "),sz=a("a"),Grr=o("DetrForObjectDetection"),Orr=o(" (DETR model)"),Vrr=l(),uM=a("li"),w_e=a("strong"),Xrr=o("yolos"),zrr=o(" \u2014 "),lz=a("a"),Wrr=o("YolosForObjectDetection"),Qrr=o(" (YOLOS model)"),Hrr=l(),pM=a("p"),Urr=o("The model is set in evaluation mode by default using "),A_e=a("code"),Jrr=o("model.eval()"),Yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),Krr=o("model.train()"),Zrr=l(),F(_M.$$.fragment),Iqe=l(),kd=a("h2"),bM=a("a"),L_e=a("span"),F($8.$$.fragment),etr=l(),x_e=a("span"),otr=o("AutoModelForImageSegmentation"),qqe=l(),Ho=a("div"),F(k8.$$.fragment),rtr=l(),Sd=a("p"),ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iz=a("a"),atr=o("from_pretrained()"),ntr=o(" class method or the "),dz=a("a"),str=o("from_config()"),ltr=o(` class
method.`),itr=l(),S8=a("p"),dtr=o("This class cannot be instantiated directly using "),$_e=a("code"),ctr=o("__init__()"),mtr=o(" (throws an error)."),ftr=l(),Ct=a("div"),F(R8.$$.fragment),gtr=l(),k_e=a("p"),htr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),utr=l(),Rd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),_tr=o("not"),btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),vtr=o("from_pretrained()"),Ftr=o(" to load the model weights."),Ttr=l(),F(vM.$$.fragment),Mtr=l(),_o=a("div"),F(P8.$$.fragment),Etr=l(),R_e=a("p"),Ctr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wtr=l(),Ha=a("p"),Atr=o("The model class to instantiate is selected based on the "),P_e=a("code"),ytr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),xtr=o("pretrained_model_name_or_path"),$tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),ktr=o("pretrained_model_name_or_path"),Str=o(":"),Rtr=l(),q_e=a("ul"),FM=a("li"),N_e=a("strong"),Ptr=o("detr"),Btr=o(" \u2014 "),mz=a("a"),Itr=o("DetrForSegmentation"),qtr=o(" (DETR model)"),Ntr=l(),TM=a("p"),jtr=o("The model is set in evaluation mode by default using "),j_e=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),Otr=o("model.train()"),Vtr=l(),F(MM.$$.fragment),Nqe=l(),Pd=a("h2"),EM=a("a"),G_e=a("span"),F(B8.$$.fragment),Xtr=l(),O_e=a("span"),ztr=o("AutoModelForSemanticSegmentation"),jqe=l(),Uo=a("div"),F(I8.$$.fragment),Wtr=l(),Bd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),fz=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),gz=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),q8=a("p"),Ztr=o("This class cannot be instantiated directly using "),V_e=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),wt=a("div"),F(N8.$$.fragment),tar=l(),X_e=a("p"),aar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nar=l(),Id=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),mar=l(),F(CM.$$.fragment),far=l(),bo=a("div"),F(j8.$$.fragment),gar=l(),W_e=a("p"),har=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uar=l(),Ua=a("p"),par=o("The model class to instantiate is selected based on the "),Q_e=a("code"),_ar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),Ja=a("ul"),wM=a("li"),J_e=a("strong"),war=o("beit"),Aar=o(" \u2014 "),uz=a("a"),yar=o("BeitForSemanticSegmentation"),Lar=o(" (BEiT model)"),xar=l(),AM=a("li"),Y_e=a("strong"),$ar=o("data2vec-vision"),kar=o(" \u2014 "),pz=a("a"),Sar=o("Data2VecVisionForSemanticSegmentation"),Rar=o(" (Data2VecVision model)"),Par=l(),yM=a("li"),K_e=a("strong"),Bar=o("dpt"),Iar=o(" \u2014 "),_z=a("a"),qar=o("DPTForSemanticSegmentation"),Nar=o(" (DPT model)"),jar=l(),LM=a("li"),Z_e=a("strong"),Dar=o("segformer"),Gar=o(" \u2014 "),bz=a("a"),Oar=o("SegformerForSemanticSegmentation"),Var=o(" (SegFormer model)"),Xar=l(),xM=a("p"),zar=o("The model is set in evaluation mode by default using "),ebe=a("code"),War=o("model.eval()"),Qar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Har=o("model.train()"),Uar=l(),F($M.$$.fragment),Dqe=l(),qd=a("h2"),kM=a("a"),rbe=a("span"),F(D8.$$.fragment),Jar=l(),tbe=a("span"),Yar=o("AutoModelForInstanceSegmentation"),Gqe=l(),Jo=a("div"),F(G8.$$.fragment),Kar=l(),Nd=a("p"),Zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vz=a("a"),enr=o("from_pretrained()"),onr=o(" class method or the "),Fz=a("a"),rnr=o("from_config()"),tnr=o(` class
method.`),anr=l(),O8=a("p"),nnr=o("This class cannot be instantiated directly using "),abe=a("code"),snr=o("__init__()"),lnr=o(" (throws an error)."),inr=l(),At=a("div"),F(V8.$$.fragment),dnr=l(),nbe=a("p"),cnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mnr=l(),jd=a("p"),fnr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),gnr=o("not"),hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),unr=o("from_pretrained()"),pnr=o(" to load the model weights."),_nr=l(),F(SM.$$.fragment),bnr=l(),vo=a("div"),F(X8.$$.fragment),vnr=l(),lbe=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tnr=l(),Ya=a("p"),Mnr=o("The model class to instantiate is selected based on the "),ibe=a("code"),Enr=o("model_type"),Cnr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),ynr=o("pretrained_model_name_or_path"),Lnr=o(":"),xnr=l(),mbe=a("ul"),RM=a("li"),fbe=a("strong"),$nr=o("maskformer"),knr=o(" \u2014 "),Mz=a("a"),Snr=o("MaskFormerForInstanceSegmentation"),Rnr=o(" (MaskFormer model)"),Pnr=l(),PM=a("p"),Bnr=o("The model is set in evaluation mode by default using "),gbe=a("code"),Inr=o("model.eval()"),qnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=a("code"),Nnr=o("model.train()"),jnr=l(),F(BM.$$.fragment),Oqe=l(),Dd=a("h2"),IM=a("a"),ube=a("span"),F(z8.$$.fragment),Dnr=l(),pbe=a("span"),Gnr=o("TFAutoModel"),Vqe=l(),Yo=a("div"),F(W8.$$.fragment),Onr=l(),Gd=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ez=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),Cz=a("a"),Wnr=o("from_config()"),Qnr=o(` class
method.`),Hnr=l(),Q8=a("p"),Unr=o("This class cannot be instantiated directly using "),_be=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),yt=a("div"),F(H8.$$.fragment),Znr=l(),bbe=a("p"),esr=o("Instantiates one of the base model classes of the library from a configuration."),osr=l(),Od=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),F(qM.$$.fragment),isr=l(),wr=a("div"),F(U8.$$.fragment),dsr=l(),Fbe=a("p"),csr=o("Instantiate one of the base model classes of the library from a pretrained model."),msr=l(),Ka=a("p"),fsr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),gsr=o("model_type"),hsr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),usr=o("pretrained_model_name_or_path"),psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),_sr=o("pretrained_model_name_or_path"),bsr=o(":"),vsr=l(),N=a("ul"),NM=a("li"),Cbe=a("strong"),Fsr=o("albert"),Tsr=o(" \u2014 "),Az=a("a"),Msr=o("TFAlbertModel"),Esr=o(" (ALBERT model)"),Csr=l(),jM=a("li"),wbe=a("strong"),wsr=o("bart"),Asr=o(" \u2014 "),yz=a("a"),ysr=o("TFBartModel"),Lsr=o(" (BART model)"),xsr=l(),DM=a("li"),Abe=a("strong"),$sr=o("bert"),ksr=o(" \u2014 "),Lz=a("a"),Ssr=o("TFBertModel"),Rsr=o(" (BERT model)"),Psr=l(),GM=a("li"),ybe=a("strong"),Bsr=o("blenderbot"),Isr=o(" \u2014 "),xz=a("a"),qsr=o("TFBlenderbotModel"),Nsr=o(" (Blenderbot model)"),jsr=l(),OM=a("li"),Lbe=a("strong"),Dsr=o("blenderbot-small"),Gsr=o(" \u2014 "),$z=a("a"),Osr=o("TFBlenderbotSmallModel"),Vsr=o(" (BlenderbotSmall model)"),Xsr=l(),VM=a("li"),xbe=a("strong"),zsr=o("camembert"),Wsr=o(" \u2014 "),kz=a("a"),Qsr=o("TFCamembertModel"),Hsr=o(" (CamemBERT model)"),Usr=l(),XM=a("li"),$be=a("strong"),Jsr=o("clip"),Ysr=o(" \u2014 "),Sz=a("a"),Ksr=o("TFCLIPModel"),Zsr=o(" (CLIP model)"),elr=l(),zM=a("li"),kbe=a("strong"),olr=o("convbert"),rlr=o(" \u2014 "),Rz=a("a"),tlr=o("TFConvBertModel"),alr=o(" (ConvBERT model)"),nlr=l(),WM=a("li"),Sbe=a("strong"),slr=o("convnext"),llr=o(" \u2014 "),Pz=a("a"),ilr=o("TFConvNextModel"),dlr=o(" (ConvNext model)"),clr=l(),QM=a("li"),Rbe=a("strong"),mlr=o("ctrl"),flr=o(" \u2014 "),Bz=a("a"),glr=o("TFCTRLModel"),hlr=o(" (CTRL model)"),ulr=l(),HM=a("li"),Pbe=a("strong"),plr=o("data2vec-vision"),_lr=o(" \u2014 "),Iz=a("a"),blr=o("TFData2VecVisionModel"),vlr=o(" (Data2VecVision model)"),Flr=l(),UM=a("li"),Bbe=a("strong"),Tlr=o("deberta"),Mlr=o(" \u2014 "),qz=a("a"),Elr=o("TFDebertaModel"),Clr=o(" (DeBERTa model)"),wlr=l(),JM=a("li"),Ibe=a("strong"),Alr=o("deberta-v2"),ylr=o(" \u2014 "),Nz=a("a"),Llr=o("TFDebertaV2Model"),xlr=o(" (DeBERTa-v2 model)"),$lr=l(),YM=a("li"),qbe=a("strong"),klr=o("distilbert"),Slr=o(" \u2014 "),jz=a("a"),Rlr=o("TFDistilBertModel"),Plr=o(" (DistilBERT model)"),Blr=l(),KM=a("li"),Nbe=a("strong"),Ilr=o("dpr"),qlr=o(" \u2014 "),Dz=a("a"),Nlr=o("TFDPRQuestionEncoder"),jlr=o(" (DPR model)"),Dlr=l(),ZM=a("li"),jbe=a("strong"),Glr=o("electra"),Olr=o(" \u2014 "),Gz=a("a"),Vlr=o("TFElectraModel"),Xlr=o(" (ELECTRA model)"),zlr=l(),e4=a("li"),Dbe=a("strong"),Wlr=o("flaubert"),Qlr=o(" \u2014 "),Oz=a("a"),Hlr=o("TFFlaubertModel"),Ulr=o(" (FlauBERT model)"),Jlr=l(),Bs=a("li"),Gbe=a("strong"),Ylr=o("funnel"),Klr=o(" \u2014 "),Vz=a("a"),Zlr=o("TFFunnelModel"),eir=o(" or "),Xz=a("a"),oir=o("TFFunnelBaseModel"),rir=o(" (Funnel Transformer model)"),tir=l(),o4=a("li"),Obe=a("strong"),air=o("gpt2"),nir=o(" \u2014 "),zz=a("a"),sir=o("TFGPT2Model"),lir=o(" (OpenAI GPT-2 model)"),iir=l(),r4=a("li"),Vbe=a("strong"),dir=o("gptj"),cir=o(" \u2014 "),Wz=a("a"),mir=o("TFGPTJModel"),fir=o(" (GPT-J model)"),gir=l(),t4=a("li"),Xbe=a("strong"),hir=o("hubert"),uir=o(" \u2014 "),Qz=a("a"),pir=o("TFHubertModel"),_ir=o(" (Hubert model)"),bir=l(),a4=a("li"),zbe=a("strong"),vir=o("layoutlm"),Fir=o(" \u2014 "),Hz=a("a"),Tir=o("TFLayoutLMModel"),Mir=o(" (LayoutLM model)"),Eir=l(),n4=a("li"),Wbe=a("strong"),Cir=o("led"),wir=o(" \u2014 "),Uz=a("a"),Air=o("TFLEDModel"),yir=o(" (LED model)"),Lir=l(),s4=a("li"),Qbe=a("strong"),xir=o("longformer"),$ir=o(" \u2014 "),Jz=a("a"),kir=o("TFLongformerModel"),Sir=o(" (Longformer model)"),Rir=l(),l4=a("li"),Hbe=a("strong"),Pir=o("lxmert"),Bir=o(" \u2014 "),Yz=a("a"),Iir=o("TFLxmertModel"),qir=o(" (LXMERT model)"),Nir=l(),i4=a("li"),Ube=a("strong"),jir=o("marian"),Dir=o(" \u2014 "),Kz=a("a"),Gir=o("TFMarianModel"),Oir=o(" (Marian model)"),Vir=l(),d4=a("li"),Jbe=a("strong"),Xir=o("mbart"),zir=o(" \u2014 "),Zz=a("a"),Wir=o("TFMBartModel"),Qir=o(" (mBART model)"),Hir=l(),c4=a("li"),Ybe=a("strong"),Uir=o("mobilebert"),Jir=o(" \u2014 "),eW=a("a"),Yir=o("TFMobileBertModel"),Kir=o(" (MobileBERT model)"),Zir=l(),m4=a("li"),Kbe=a("strong"),edr=o("mpnet"),odr=o(" \u2014 "),oW=a("a"),rdr=o("TFMPNetModel"),tdr=o(" (MPNet model)"),adr=l(),f4=a("li"),Zbe=a("strong"),ndr=o("mt5"),sdr=o(" \u2014 "),rW=a("a"),ldr=o("TFMT5Model"),idr=o(" (mT5 model)"),ddr=l(),g4=a("li"),e2e=a("strong"),cdr=o("openai-gpt"),mdr=o(" \u2014 "),tW=a("a"),fdr=o("TFOpenAIGPTModel"),gdr=o(" (OpenAI GPT model)"),hdr=l(),h4=a("li"),o2e=a("strong"),udr=o("pegasus"),pdr=o(" \u2014 "),aW=a("a"),_dr=o("TFPegasusModel"),bdr=o(" (Pegasus model)"),vdr=l(),u4=a("li"),r2e=a("strong"),Fdr=o("rembert"),Tdr=o(" \u2014 "),nW=a("a"),Mdr=o("TFRemBertModel"),Edr=o(" (RemBERT model)"),Cdr=l(),p4=a("li"),t2e=a("strong"),wdr=o("roberta"),Adr=o(" \u2014 "),sW=a("a"),ydr=o("TFRobertaModel"),Ldr=o(" (RoBERTa model)"),xdr=l(),_4=a("li"),a2e=a("strong"),$dr=o("roformer"),kdr=o(" \u2014 "),lW=a("a"),Sdr=o("TFRoFormerModel"),Rdr=o(" (RoFormer model)"),Pdr=l(),b4=a("li"),n2e=a("strong"),Bdr=o("speech_to_text"),Idr=o(" \u2014 "),iW=a("a"),qdr=o("TFSpeech2TextModel"),Ndr=o(" (Speech2Text model)"),jdr=l(),v4=a("li"),s2e=a("strong"),Ddr=o("swin"),Gdr=o(" \u2014 "),dW=a("a"),Odr=o("TFSwinModel"),Vdr=o(" (Swin model)"),Xdr=l(),F4=a("li"),l2e=a("strong"),zdr=o("t5"),Wdr=o(" \u2014 "),cW=a("a"),Qdr=o("TFT5Model"),Hdr=o(" (T5 model)"),Udr=l(),T4=a("li"),i2e=a("strong"),Jdr=o("tapas"),Ydr=o(" \u2014 "),mW=a("a"),Kdr=o("TFTapasModel"),Zdr=o(" (TAPAS model)"),ecr=l(),M4=a("li"),d2e=a("strong"),ocr=o("transfo-xl"),rcr=o(" \u2014 "),fW=a("a"),tcr=o("TFTransfoXLModel"),acr=o(" (Transformer-XL model)"),ncr=l(),E4=a("li"),c2e=a("strong"),scr=o("vit"),lcr=o(" \u2014 "),gW=a("a"),icr=o("TFViTModel"),dcr=o(" (ViT model)"),ccr=l(),C4=a("li"),m2e=a("strong"),mcr=o("vit_mae"),fcr=o(" \u2014 "),hW=a("a"),gcr=o("TFViTMAEModel"),hcr=o(" (ViTMAE model)"),ucr=l(),w4=a("li"),f2e=a("strong"),pcr=o("wav2vec2"),_cr=o(" \u2014 "),uW=a("a"),bcr=o("TFWav2Vec2Model"),vcr=o(" (Wav2Vec2 model)"),Fcr=l(),A4=a("li"),g2e=a("strong"),Tcr=o("xlm"),Mcr=o(" \u2014 "),pW=a("a"),Ecr=o("TFXLMModel"),Ccr=o(" (XLM model)"),wcr=l(),y4=a("li"),h2e=a("strong"),Acr=o("xlm-roberta"),ycr=o(" \u2014 "),_W=a("a"),Lcr=o("TFXLMRobertaModel"),xcr=o(" (XLM-RoBERTa model)"),$cr=l(),L4=a("li"),u2e=a("strong"),kcr=o("xlnet"),Scr=o(" \u2014 "),bW=a("a"),Rcr=o("TFXLNetModel"),Pcr=o(" (XLNet model)"),Bcr=l(),F(x4.$$.fragment),Xqe=l(),Vd=a("h2"),$4=a("a"),p2e=a("span"),F(J8.$$.fragment),Icr=l(),_2e=a("span"),qcr=o("TFAutoModelForPreTraining"),zqe=l(),Ko=a("div"),F(Y8.$$.fragment),Ncr=l(),Xd=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vW=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" class method or the "),FW=a("a"),Ocr=o("from_config()"),Vcr=o(` class
method.`),Xcr=l(),K8=a("p"),zcr=o("This class cannot be instantiated directly using "),b2e=a("code"),Wcr=o("__init__()"),Qcr=o(" (throws an error)."),Hcr=l(),Lt=a("div"),F(Z8.$$.fragment),Ucr=l(),v2e=a("p"),Jcr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ycr=l(),zd=a("p"),Kcr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Zcr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),omr=o("from_pretrained()"),rmr=o(" to load the model weights."),tmr=l(),F(k4.$$.fragment),amr=l(),Ar=a("div"),F(e7.$$.fragment),nmr=l(),T2e=a("p"),smr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lmr=l(),Za=a("p"),imr=o("The model class to instantiate is selected based on the "),M2e=a("code"),dmr=o("model_type"),cmr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),mmr=o("pretrained_model_name_or_path"),fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(":"),umr=l(),se=a("ul"),S4=a("li"),w2e=a("strong"),pmr=o("albert"),_mr=o(" \u2014 "),MW=a("a"),bmr=o("TFAlbertForPreTraining"),vmr=o(" (ALBERT model)"),Fmr=l(),R4=a("li"),A2e=a("strong"),Tmr=o("bart"),Mmr=o(" \u2014 "),EW=a("a"),Emr=o("TFBartForConditionalGeneration"),Cmr=o(" (BART model)"),wmr=l(),P4=a("li"),y2e=a("strong"),Amr=o("bert"),ymr=o(" \u2014 "),CW=a("a"),Lmr=o("TFBertForPreTraining"),xmr=o(" (BERT model)"),$mr=l(),B4=a("li"),L2e=a("strong"),kmr=o("camembert"),Smr=o(" \u2014 "),wW=a("a"),Rmr=o("TFCamembertForMaskedLM"),Pmr=o(" (CamemBERT model)"),Bmr=l(),I4=a("li"),x2e=a("strong"),Imr=o("ctrl"),qmr=o(" \u2014 "),AW=a("a"),Nmr=o("TFCTRLLMHeadModel"),jmr=o(" (CTRL model)"),Dmr=l(),q4=a("li"),$2e=a("strong"),Gmr=o("distilbert"),Omr=o(" \u2014 "),yW=a("a"),Vmr=o("TFDistilBertForMaskedLM"),Xmr=o(" (DistilBERT model)"),zmr=l(),N4=a("li"),k2e=a("strong"),Wmr=o("electra"),Qmr=o(" \u2014 "),LW=a("a"),Hmr=o("TFElectraForPreTraining"),Umr=o(" (ELECTRA model)"),Jmr=l(),j4=a("li"),S2e=a("strong"),Ymr=o("flaubert"),Kmr=o(" \u2014 "),xW=a("a"),Zmr=o("TFFlaubertWithLMHeadModel"),efr=o(" (FlauBERT model)"),ofr=l(),D4=a("li"),R2e=a("strong"),rfr=o("funnel"),tfr=o(" \u2014 "),$W=a("a"),afr=o("TFFunnelForPreTraining"),nfr=o(" (Funnel Transformer model)"),sfr=l(),G4=a("li"),P2e=a("strong"),lfr=o("gpt2"),ifr=o(" \u2014 "),kW=a("a"),dfr=o("TFGPT2LMHeadModel"),cfr=o(" (OpenAI GPT-2 model)"),mfr=l(),O4=a("li"),B2e=a("strong"),ffr=o("layoutlm"),gfr=o(" \u2014 "),SW=a("a"),hfr=o("TFLayoutLMForMaskedLM"),ufr=o(" (LayoutLM model)"),pfr=l(),V4=a("li"),I2e=a("strong"),_fr=o("lxmert"),bfr=o(" \u2014 "),RW=a("a"),vfr=o("TFLxmertForPreTraining"),Ffr=o(" (LXMERT model)"),Tfr=l(),X4=a("li"),q2e=a("strong"),Mfr=o("mobilebert"),Efr=o(" \u2014 "),PW=a("a"),Cfr=o("TFMobileBertForPreTraining"),wfr=o(" (MobileBERT model)"),Afr=l(),z4=a("li"),N2e=a("strong"),yfr=o("mpnet"),Lfr=o(" \u2014 "),BW=a("a"),xfr=o("TFMPNetForMaskedLM"),$fr=o(" (MPNet model)"),kfr=l(),W4=a("li"),j2e=a("strong"),Sfr=o("openai-gpt"),Rfr=o(" \u2014 "),IW=a("a"),Pfr=o("TFOpenAIGPTLMHeadModel"),Bfr=o(" (OpenAI GPT model)"),Ifr=l(),Q4=a("li"),D2e=a("strong"),qfr=o("roberta"),Nfr=o(" \u2014 "),qW=a("a"),jfr=o("TFRobertaForMaskedLM"),Dfr=o(" (RoBERTa model)"),Gfr=l(),H4=a("li"),G2e=a("strong"),Ofr=o("t5"),Vfr=o(" \u2014 "),NW=a("a"),Xfr=o("TFT5ForConditionalGeneration"),zfr=o(" (T5 model)"),Wfr=l(),U4=a("li"),O2e=a("strong"),Qfr=o("tapas"),Hfr=o(" \u2014 "),jW=a("a"),Ufr=o("TFTapasForMaskedLM"),Jfr=o(" (TAPAS model)"),Yfr=l(),J4=a("li"),V2e=a("strong"),Kfr=o("transfo-xl"),Zfr=o(" \u2014 "),DW=a("a"),egr=o("TFTransfoXLLMHeadModel"),ogr=o(" (Transformer-XL model)"),rgr=l(),Y4=a("li"),X2e=a("strong"),tgr=o("vit_mae"),agr=o(" \u2014 "),GW=a("a"),ngr=o("TFViTMAEForPreTraining"),sgr=o(" (ViTMAE model)"),lgr=l(),K4=a("li"),z2e=a("strong"),igr=o("xlm"),dgr=o(" \u2014 "),OW=a("a"),cgr=o("TFXLMWithLMHeadModel"),mgr=o(" (XLM model)"),fgr=l(),Z4=a("li"),W2e=a("strong"),ggr=o("xlm-roberta"),hgr=o(" \u2014 "),VW=a("a"),ugr=o("TFXLMRobertaForMaskedLM"),pgr=o(" (XLM-RoBERTa model)"),_gr=l(),eE=a("li"),Q2e=a("strong"),bgr=o("xlnet"),vgr=o(" \u2014 "),XW=a("a"),Fgr=o("TFXLNetLMHeadModel"),Tgr=o(" (XLNet model)"),Mgr=l(),F(oE.$$.fragment),Wqe=l(),Wd=a("h2"),rE=a("a"),H2e=a("span"),F(o7.$$.fragment),Egr=l(),U2e=a("span"),Cgr=o("TFAutoModelForCausalLM"),Qqe=l(),Zo=a("div"),F(r7.$$.fragment),wgr=l(),Qd=a("p"),Agr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zW=a("a"),ygr=o("from_pretrained()"),Lgr=o(" class method or the "),WW=a("a"),xgr=o("from_config()"),$gr=o(` class
method.`),kgr=l(),t7=a("p"),Sgr=o("This class cannot be instantiated directly using "),J2e=a("code"),Rgr=o("__init__()"),Pgr=o(" (throws an error)."),Bgr=l(),xt=a("div"),F(a7.$$.fragment),Igr=l(),Y2e=a("p"),qgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ngr=l(),Hd=a("p"),jgr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Dgr=o("not"),Ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" to load the model weights."),Xgr=l(),F(tE.$$.fragment),zgr=l(),yr=a("div"),F(n7.$$.fragment),Wgr=l(),Z2e=a("p"),Qgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hgr=l(),en=a("p"),Ugr=o("The model class to instantiate is selected based on the "),eve=a("code"),Jgr=o("model_type"),Ygr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(":"),rhr=l(),Te=a("ul"),aE=a("li"),tve=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),HW=a("a"),nhr=o("TFBertLMHeadModel"),shr=o(" (BERT model)"),lhr=l(),nE=a("li"),ave=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),UW=a("a"),chr=o("TFCamembertForCausalLM"),mhr=o(" (CamemBERT model)"),fhr=l(),sE=a("li"),nve=a("strong"),ghr=o("ctrl"),hhr=o(" \u2014 "),JW=a("a"),uhr=o("TFCTRLLMHeadModel"),phr=o(" (CTRL model)"),_hr=l(),lE=a("li"),sve=a("strong"),bhr=o("gpt2"),vhr=o(" \u2014 "),YW=a("a"),Fhr=o("TFGPT2LMHeadModel"),Thr=o(" (OpenAI GPT-2 model)"),Mhr=l(),iE=a("li"),lve=a("strong"),Ehr=o("gptj"),Chr=o(" \u2014 "),KW=a("a"),whr=o("TFGPTJForCausalLM"),Ahr=o(" (GPT-J model)"),yhr=l(),dE=a("li"),ive=a("strong"),Lhr=o("openai-gpt"),xhr=o(" \u2014 "),ZW=a("a"),$hr=o("TFOpenAIGPTLMHeadModel"),khr=o(" (OpenAI GPT model)"),Shr=l(),cE=a("li"),dve=a("strong"),Rhr=o("rembert"),Phr=o(" \u2014 "),eQ=a("a"),Bhr=o("TFRemBertForCausalLM"),Ihr=o(" (RemBERT model)"),qhr=l(),mE=a("li"),cve=a("strong"),Nhr=o("roberta"),jhr=o(" \u2014 "),oQ=a("a"),Dhr=o("TFRobertaForCausalLM"),Ghr=o(" (RoBERTa model)"),Ohr=l(),fE=a("li"),mve=a("strong"),Vhr=o("roformer"),Xhr=o(" \u2014 "),rQ=a("a"),zhr=o("TFRoFormerForCausalLM"),Whr=o(" (RoFormer model)"),Qhr=l(),gE=a("li"),fve=a("strong"),Hhr=o("transfo-xl"),Uhr=o(" \u2014 "),tQ=a("a"),Jhr=o("TFTransfoXLLMHeadModel"),Yhr=o(" (Transformer-XL model)"),Khr=l(),hE=a("li"),gve=a("strong"),Zhr=o("xlm"),eur=o(" \u2014 "),aQ=a("a"),our=o("TFXLMWithLMHeadModel"),rur=o(" (XLM model)"),tur=l(),uE=a("li"),hve=a("strong"),aur=o("xlnet"),nur=o(" \u2014 "),nQ=a("a"),sur=o("TFXLNetLMHeadModel"),lur=o(" (XLNet model)"),iur=l(),F(pE.$$.fragment),Hqe=l(),Ud=a("h2"),_E=a("a"),uve=a("span"),F(s7.$$.fragment),dur=l(),pve=a("span"),cur=o("TFAutoModelForImageClassification"),Uqe=l(),er=a("div"),F(l7.$$.fragment),mur=l(),Jd=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=a("a"),gur=o("from_pretrained()"),hur=o(" class method or the "),lQ=a("a"),uur=o("from_config()"),pur=o(` class
method.`),_ur=l(),i7=a("p"),bur=o("This class cannot be instantiated directly using "),_ve=a("code"),vur=o("__init__()"),Fur=o(" (throws an error)."),Tur=l(),$t=a("div"),F(d7.$$.fragment),Mur=l(),bve=a("p"),Eur=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cur=l(),Yd=a("p"),wur=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),Aur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),Lur=o("from_pretrained()"),xur=o(" to load the model weights."),$ur=l(),F(bE.$$.fragment),kur=l(),Lr=a("div"),F(c7.$$.fragment),Sur=l(),Fve=a("p"),Rur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pur=l(),on=a("p"),Bur=o("The model class to instantiate is selected based on the "),Tve=a("code"),Iur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),Nur=o("pretrained_model_name_or_path"),jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(":"),Our=l(),rn=a("ul"),vE=a("li"),Cve=a("strong"),Vur=o("convnext"),Xur=o(" \u2014 "),dQ=a("a"),zur=o("TFConvNextForImageClassification"),Wur=o(" (ConvNext model)"),Qur=l(),FE=a("li"),wve=a("strong"),Hur=o("data2vec-vision"),Uur=o(" \u2014 "),cQ=a("a"),Jur=o("TFData2VecVisionForImageClassification"),Yur=o(" (Data2VecVision model)"),Kur=l(),TE=a("li"),Ave=a("strong"),Zur=o("swin"),epr=o(" \u2014 "),mQ=a("a"),opr=o("TFSwinForImageClassification"),rpr=o(" (Swin model)"),tpr=l(),ME=a("li"),yve=a("strong"),apr=o("vit"),npr=o(" \u2014 "),fQ=a("a"),spr=o("TFViTForImageClassification"),lpr=o(" (ViT model)"),ipr=l(),F(EE.$$.fragment),Jqe=l(),Kd=a("h2"),CE=a("a"),Lve=a("span"),F(m7.$$.fragment),dpr=l(),xve=a("span"),cpr=o("TFAutoModelForMaskedLM"),Yqe=l(),or=a("div"),F(f7.$$.fragment),mpr=l(),Zd=a("p"),fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gQ=a("a"),gpr=o("from_pretrained()"),hpr=o(" class method or the "),hQ=a("a"),upr=o("from_config()"),ppr=o(` class
method.`),_pr=l(),g7=a("p"),bpr=o("This class cannot be instantiated directly using "),$ve=a("code"),vpr=o("__init__()"),Fpr=o(" (throws an error)."),Tpr=l(),kt=a("div"),F(h7.$$.fragment),Mpr=l(),kve=a("p"),Epr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cpr=l(),ec=a("p"),wpr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Apr=o("not"),ypr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Lpr=o("from_pretrained()"),xpr=o(" to load the model weights."),$pr=l(),F(wE.$$.fragment),kpr=l(),xr=a("div"),F(u7.$$.fragment),Spr=l(),Rve=a("p"),Rpr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ppr=l(),tn=a("p"),Bpr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Ipr=o("model_type"),qpr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),Npr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),ie=a("ul"),AE=a("li"),qve=a("strong"),Vpr=o("albert"),Xpr=o(" \u2014 "),pQ=a("a"),zpr=o("TFAlbertForMaskedLM"),Wpr=o(" (ALBERT model)"),Qpr=l(),yE=a("li"),Nve=a("strong"),Hpr=o("bert"),Upr=o(" \u2014 "),_Q=a("a"),Jpr=o("TFBertForMaskedLM"),Ypr=o(" (BERT model)"),Kpr=l(),LE=a("li"),jve=a("strong"),Zpr=o("camembert"),e_r=o(" \u2014 "),bQ=a("a"),o_r=o("TFCamembertForMaskedLM"),r_r=o(" (CamemBERT model)"),t_r=l(),xE=a("li"),Dve=a("strong"),a_r=o("convbert"),n_r=o(" \u2014 "),vQ=a("a"),s_r=o("TFConvBertForMaskedLM"),l_r=o(" (ConvBERT model)"),i_r=l(),$E=a("li"),Gve=a("strong"),d_r=o("deberta"),c_r=o(" \u2014 "),FQ=a("a"),m_r=o("TFDebertaForMaskedLM"),f_r=o(" (DeBERTa model)"),g_r=l(),kE=a("li"),Ove=a("strong"),h_r=o("deberta-v2"),u_r=o(" \u2014 "),TQ=a("a"),p_r=o("TFDebertaV2ForMaskedLM"),__r=o(" (DeBERTa-v2 model)"),b_r=l(),SE=a("li"),Vve=a("strong"),v_r=o("distilbert"),F_r=o(" \u2014 "),MQ=a("a"),T_r=o("TFDistilBertForMaskedLM"),M_r=o(" (DistilBERT model)"),E_r=l(),RE=a("li"),Xve=a("strong"),C_r=o("electra"),w_r=o(" \u2014 "),EQ=a("a"),A_r=o("TFElectraForMaskedLM"),y_r=o(" (ELECTRA model)"),L_r=l(),PE=a("li"),zve=a("strong"),x_r=o("flaubert"),$_r=o(" \u2014 "),CQ=a("a"),k_r=o("TFFlaubertWithLMHeadModel"),S_r=o(" (FlauBERT model)"),R_r=l(),BE=a("li"),Wve=a("strong"),P_r=o("funnel"),B_r=o(" \u2014 "),wQ=a("a"),I_r=o("TFFunnelForMaskedLM"),q_r=o(" (Funnel Transformer model)"),N_r=l(),IE=a("li"),Qve=a("strong"),j_r=o("layoutlm"),D_r=o(" \u2014 "),AQ=a("a"),G_r=o("TFLayoutLMForMaskedLM"),O_r=o(" (LayoutLM model)"),V_r=l(),qE=a("li"),Hve=a("strong"),X_r=o("longformer"),z_r=o(" \u2014 "),yQ=a("a"),W_r=o("TFLongformerForMaskedLM"),Q_r=o(" (Longformer model)"),H_r=l(),NE=a("li"),Uve=a("strong"),U_r=o("mobilebert"),J_r=o(" \u2014 "),LQ=a("a"),Y_r=o("TFMobileBertForMaskedLM"),K_r=o(" (MobileBERT model)"),Z_r=l(),jE=a("li"),Jve=a("strong"),ebr=o("mpnet"),obr=o(" \u2014 "),xQ=a("a"),rbr=o("TFMPNetForMaskedLM"),tbr=o(" (MPNet model)"),abr=l(),DE=a("li"),Yve=a("strong"),nbr=o("rembert"),sbr=o(" \u2014 "),$Q=a("a"),lbr=o("TFRemBertForMaskedLM"),ibr=o(" (RemBERT model)"),dbr=l(),GE=a("li"),Kve=a("strong"),cbr=o("roberta"),mbr=o(" \u2014 "),kQ=a("a"),fbr=o("TFRobertaForMaskedLM"),gbr=o(" (RoBERTa model)"),hbr=l(),OE=a("li"),Zve=a("strong"),ubr=o("roformer"),pbr=o(" \u2014 "),SQ=a("a"),_br=o("TFRoFormerForMaskedLM"),bbr=o(" (RoFormer model)"),vbr=l(),VE=a("li"),eFe=a("strong"),Fbr=o("tapas"),Tbr=o(" \u2014 "),RQ=a("a"),Mbr=o("TFTapasForMaskedLM"),Ebr=o(" (TAPAS model)"),Cbr=l(),XE=a("li"),oFe=a("strong"),wbr=o("xlm"),Abr=o(" \u2014 "),PQ=a("a"),ybr=o("TFXLMWithLMHeadModel"),Lbr=o(" (XLM model)"),xbr=l(),zE=a("li"),rFe=a("strong"),$br=o("xlm-roberta"),kbr=o(" \u2014 "),BQ=a("a"),Sbr=o("TFXLMRobertaForMaskedLM"),Rbr=o(" (XLM-RoBERTa model)"),Pbr=l(),F(WE.$$.fragment),Kqe=l(),oc=a("h2"),QE=a("a"),tFe=a("span"),F(p7.$$.fragment),Bbr=l(),aFe=a("span"),Ibr=o("TFAutoModelForSeq2SeqLM"),Zqe=l(),rr=a("div"),F(_7.$$.fragment),qbr=l(),rc=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IQ=a("a"),jbr=o("from_pretrained()"),Dbr=o(" class method or the "),qQ=a("a"),Gbr=o("from_config()"),Obr=o(` class
method.`),Vbr=l(),b7=a("p"),Xbr=o("This class cannot be instantiated directly using "),nFe=a("code"),zbr=o("__init__()"),Wbr=o(" (throws an error)."),Qbr=l(),St=a("div"),F(v7.$$.fragment),Hbr=l(),sFe=a("p"),Ubr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jbr=l(),tc=a("p"),Ybr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),Kbr=o("not"),Zbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),e2r=o("from_pretrained()"),o2r=o(" to load the model weights."),r2r=l(),F(HE.$$.fragment),t2r=l(),$r=a("div"),F(F7.$$.fragment),a2r=l(),iFe=a("p"),n2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s2r=l(),an=a("p"),l2r=o("The model class to instantiate is selected based on the "),dFe=a("code"),i2r=o("model_type"),d2r=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),c2r=o("pretrained_model_name_or_path"),m2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),f2r=o("pretrained_model_name_or_path"),g2r=o(":"),h2r=l(),ye=a("ul"),UE=a("li"),fFe=a("strong"),u2r=o("bart"),p2r=o(" \u2014 "),jQ=a("a"),_2r=o("TFBartForConditionalGeneration"),b2r=o(" (BART model)"),v2r=l(),JE=a("li"),gFe=a("strong"),F2r=o("blenderbot"),T2r=o(" \u2014 "),DQ=a("a"),M2r=o("TFBlenderbotForConditionalGeneration"),E2r=o(" (Blenderbot model)"),C2r=l(),YE=a("li"),hFe=a("strong"),w2r=o("blenderbot-small"),A2r=o(" \u2014 "),GQ=a("a"),y2r=o("TFBlenderbotSmallForConditionalGeneration"),L2r=o(" (BlenderbotSmall model)"),x2r=l(),KE=a("li"),uFe=a("strong"),$2r=o("encoder-decoder"),k2r=o(" \u2014 "),OQ=a("a"),S2r=o("TFEncoderDecoderModel"),R2r=o(" (Encoder decoder model)"),P2r=l(),ZE=a("li"),pFe=a("strong"),B2r=o("led"),I2r=o(" \u2014 "),VQ=a("a"),q2r=o("TFLEDForConditionalGeneration"),N2r=o(" (LED model)"),j2r=l(),eC=a("li"),_Fe=a("strong"),D2r=o("marian"),G2r=o(" \u2014 "),XQ=a("a"),O2r=o("TFMarianMTModel"),V2r=o(" (Marian model)"),X2r=l(),oC=a("li"),bFe=a("strong"),z2r=o("mbart"),W2r=o(" \u2014 "),zQ=a("a"),Q2r=o("TFMBartForConditionalGeneration"),H2r=o(" (mBART model)"),U2r=l(),rC=a("li"),vFe=a("strong"),J2r=o("mt5"),Y2r=o(" \u2014 "),WQ=a("a"),K2r=o("TFMT5ForConditionalGeneration"),Z2r=o(" (mT5 model)"),evr=l(),tC=a("li"),FFe=a("strong"),ovr=o("pegasus"),rvr=o(" \u2014 "),QQ=a("a"),tvr=o("TFPegasusForConditionalGeneration"),avr=o(" (Pegasus model)"),nvr=l(),aC=a("li"),TFe=a("strong"),svr=o("t5"),lvr=o(" \u2014 "),HQ=a("a"),ivr=o("TFT5ForConditionalGeneration"),dvr=o(" (T5 model)"),cvr=l(),F(nC.$$.fragment),eNe=l(),ac=a("h2"),sC=a("a"),MFe=a("span"),F(T7.$$.fragment),mvr=l(),EFe=a("span"),fvr=o("TFAutoModelForSequenceClassification"),oNe=l(),tr=a("div"),F(M7.$$.fragment),gvr=l(),nc=a("p"),hvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UQ=a("a"),uvr=o("from_pretrained()"),pvr=o(" class method or the "),JQ=a("a"),_vr=o("from_config()"),bvr=o(` class
method.`),vvr=l(),E7=a("p"),Fvr=o("This class cannot be instantiated directly using "),CFe=a("code"),Tvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),Rt=a("div"),F(C7.$$.fragment),Cvr=l(),wFe=a("p"),wvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Avr=l(),sc=a("p"),yvr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Lvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),$vr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),F(lC.$$.fragment),Rvr=l(),kr=a("div"),F(w7.$$.fragment),Pvr=l(),yFe=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ivr=l(),nn=a("p"),qvr=o("The model class to instantiate is selected based on the "),LFe=a("code"),Nvr=o("model_type"),jvr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(":"),Xvr=l(),ee=a("ul"),iC=a("li"),kFe=a("strong"),zvr=o("albert"),Wvr=o(" \u2014 "),KQ=a("a"),Qvr=o("TFAlbertForSequenceClassification"),Hvr=o(" (ALBERT model)"),Uvr=l(),dC=a("li"),SFe=a("strong"),Jvr=o("bert"),Yvr=o(" \u2014 "),ZQ=a("a"),Kvr=o("TFBertForSequenceClassification"),Zvr=o(" (BERT model)"),eFr=l(),cC=a("li"),RFe=a("strong"),oFr=o("camembert"),rFr=o(" \u2014 "),eH=a("a"),tFr=o("TFCamembertForSequenceClassification"),aFr=o(" (CamemBERT model)"),nFr=l(),mC=a("li"),PFe=a("strong"),sFr=o("convbert"),lFr=o(" \u2014 "),oH=a("a"),iFr=o("TFConvBertForSequenceClassification"),dFr=o(" (ConvBERT model)"),cFr=l(),fC=a("li"),BFe=a("strong"),mFr=o("ctrl"),fFr=o(" \u2014 "),rH=a("a"),gFr=o("TFCTRLForSequenceClassification"),hFr=o(" (CTRL model)"),uFr=l(),gC=a("li"),IFe=a("strong"),pFr=o("deberta"),_Fr=o(" \u2014 "),tH=a("a"),bFr=o("TFDebertaForSequenceClassification"),vFr=o(" (DeBERTa model)"),FFr=l(),hC=a("li"),qFe=a("strong"),TFr=o("deberta-v2"),MFr=o(" \u2014 "),aH=a("a"),EFr=o("TFDebertaV2ForSequenceClassification"),CFr=o(" (DeBERTa-v2 model)"),wFr=l(),uC=a("li"),NFe=a("strong"),AFr=o("distilbert"),yFr=o(" \u2014 "),nH=a("a"),LFr=o("TFDistilBertForSequenceClassification"),xFr=o(" (DistilBERT model)"),$Fr=l(),pC=a("li"),jFe=a("strong"),kFr=o("electra"),SFr=o(" \u2014 "),sH=a("a"),RFr=o("TFElectraForSequenceClassification"),PFr=o(" (ELECTRA model)"),BFr=l(),_C=a("li"),DFe=a("strong"),IFr=o("flaubert"),qFr=o(" \u2014 "),lH=a("a"),NFr=o("TFFlaubertForSequenceClassification"),jFr=o(" (FlauBERT model)"),DFr=l(),bC=a("li"),GFe=a("strong"),GFr=o("funnel"),OFr=o(" \u2014 "),iH=a("a"),VFr=o("TFFunnelForSequenceClassification"),XFr=o(" (Funnel Transformer model)"),zFr=l(),vC=a("li"),OFe=a("strong"),WFr=o("gpt2"),QFr=o(" \u2014 "),dH=a("a"),HFr=o("TFGPT2ForSequenceClassification"),UFr=o(" (OpenAI GPT-2 model)"),JFr=l(),FC=a("li"),VFe=a("strong"),YFr=o("gptj"),KFr=o(" \u2014 "),cH=a("a"),ZFr=o("TFGPTJForSequenceClassification"),e1r=o(" (GPT-J model)"),o1r=l(),TC=a("li"),XFe=a("strong"),r1r=o("layoutlm"),t1r=o(" \u2014 "),mH=a("a"),a1r=o("TFLayoutLMForSequenceClassification"),n1r=o(" (LayoutLM model)"),s1r=l(),MC=a("li"),zFe=a("strong"),l1r=o("longformer"),i1r=o(" \u2014 "),fH=a("a"),d1r=o("TFLongformerForSequenceClassification"),c1r=o(" (Longformer model)"),m1r=l(),EC=a("li"),WFe=a("strong"),f1r=o("mobilebert"),g1r=o(" \u2014 "),gH=a("a"),h1r=o("TFMobileBertForSequenceClassification"),u1r=o(" (MobileBERT model)"),p1r=l(),CC=a("li"),QFe=a("strong"),_1r=o("mpnet"),b1r=o(" \u2014 "),hH=a("a"),v1r=o("TFMPNetForSequenceClassification"),F1r=o(" (MPNet model)"),T1r=l(),wC=a("li"),HFe=a("strong"),M1r=o("openai-gpt"),E1r=o(" \u2014 "),uH=a("a"),C1r=o("TFOpenAIGPTForSequenceClassification"),w1r=o(" (OpenAI GPT model)"),A1r=l(),AC=a("li"),UFe=a("strong"),y1r=o("rembert"),L1r=o(" \u2014 "),pH=a("a"),x1r=o("TFRemBertForSequenceClassification"),$1r=o(" (RemBERT model)"),k1r=l(),yC=a("li"),JFe=a("strong"),S1r=o("roberta"),R1r=o(" \u2014 "),_H=a("a"),P1r=o("TFRobertaForSequenceClassification"),B1r=o(" (RoBERTa model)"),I1r=l(),LC=a("li"),YFe=a("strong"),q1r=o("roformer"),N1r=o(" \u2014 "),bH=a("a"),j1r=o("TFRoFormerForSequenceClassification"),D1r=o(" (RoFormer model)"),G1r=l(),xC=a("li"),KFe=a("strong"),O1r=o("tapas"),V1r=o(" \u2014 "),vH=a("a"),X1r=o("TFTapasForSequenceClassification"),z1r=o(" (TAPAS model)"),W1r=l(),$C=a("li"),ZFe=a("strong"),Q1r=o("transfo-xl"),H1r=o(" \u2014 "),FH=a("a"),U1r=o("TFTransfoXLForSequenceClassification"),J1r=o(" (Transformer-XL model)"),Y1r=l(),kC=a("li"),e1e=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),TH=a("a"),eTr=o("TFXLMForSequenceClassification"),oTr=o(" (XLM model)"),rTr=l(),SC=a("li"),o1e=a("strong"),tTr=o("xlm-roberta"),aTr=o(" \u2014 "),MH=a("a"),nTr=o("TFXLMRobertaForSequenceClassification"),sTr=o(" (XLM-RoBERTa model)"),lTr=l(),RC=a("li"),r1e=a("strong"),iTr=o("xlnet"),dTr=o(" \u2014 "),EH=a("a"),cTr=o("TFXLNetForSequenceClassification"),mTr=o(" (XLNet model)"),fTr=l(),F(PC.$$.fragment),rNe=l(),lc=a("h2"),BC=a("a"),t1e=a("span"),F(A7.$$.fragment),gTr=l(),a1e=a("span"),hTr=o("TFAutoModelForMultipleChoice"),tNe=l(),ar=a("div"),F(y7.$$.fragment),uTr=l(),ic=a("p"),pTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=a("a"),_Tr=o("from_pretrained()"),bTr=o(" class method or the "),wH=a("a"),vTr=o("from_config()"),FTr=o(` class
method.`),TTr=l(),L7=a("p"),MTr=o("This class cannot be instantiated directly using "),n1e=a("code"),ETr=o("__init__()"),CTr=o(" (throws an error)."),wTr=l(),Pt=a("div"),F(x7.$$.fragment),ATr=l(),s1e=a("p"),yTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LTr=l(),dc=a("p"),xTr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),$Tr=o("not"),kTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),STr=o("from_pretrained()"),RTr=o(" to load the model weights."),PTr=l(),F(IC.$$.fragment),BTr=l(),Sr=a("div"),F($7.$$.fragment),ITr=l(),i1e=a("p"),qTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NTr=l(),sn=a("p"),jTr=o("The model class to instantiate is selected based on the "),d1e=a("code"),DTr=o("model_type"),GTr=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),OTr=o("pretrained_model_name_or_path"),VTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(":"),WTr=l(),he=a("ul"),qC=a("li"),f1e=a("strong"),QTr=o("albert"),HTr=o(" \u2014 "),yH=a("a"),UTr=o("TFAlbertForMultipleChoice"),JTr=o(" (ALBERT model)"),YTr=l(),NC=a("li"),g1e=a("strong"),KTr=o("bert"),ZTr=o(" \u2014 "),LH=a("a"),eMr=o("TFBertForMultipleChoice"),oMr=o(" (BERT model)"),rMr=l(),jC=a("li"),h1e=a("strong"),tMr=o("camembert"),aMr=o(" \u2014 "),xH=a("a"),nMr=o("TFCamembertForMultipleChoice"),sMr=o(" (CamemBERT model)"),lMr=l(),DC=a("li"),u1e=a("strong"),iMr=o("convbert"),dMr=o(" \u2014 "),$H=a("a"),cMr=o("TFConvBertForMultipleChoice"),mMr=o(" (ConvBERT model)"),fMr=l(),GC=a("li"),p1e=a("strong"),gMr=o("distilbert"),hMr=o(" \u2014 "),kH=a("a"),uMr=o("TFDistilBertForMultipleChoice"),pMr=o(" (DistilBERT model)"),_Mr=l(),OC=a("li"),_1e=a("strong"),bMr=o("electra"),vMr=o(" \u2014 "),SH=a("a"),FMr=o("TFElectraForMultipleChoice"),TMr=o(" (ELECTRA model)"),MMr=l(),VC=a("li"),b1e=a("strong"),EMr=o("flaubert"),CMr=o(" \u2014 "),RH=a("a"),wMr=o("TFFlaubertForMultipleChoice"),AMr=o(" (FlauBERT model)"),yMr=l(),XC=a("li"),v1e=a("strong"),LMr=o("funnel"),xMr=o(" \u2014 "),PH=a("a"),$Mr=o("TFFunnelForMultipleChoice"),kMr=o(" (Funnel Transformer model)"),SMr=l(),zC=a("li"),F1e=a("strong"),RMr=o("longformer"),PMr=o(" \u2014 "),BH=a("a"),BMr=o("TFLongformerForMultipleChoice"),IMr=o(" (Longformer model)"),qMr=l(),WC=a("li"),T1e=a("strong"),NMr=o("mobilebert"),jMr=o(" \u2014 "),IH=a("a"),DMr=o("TFMobileBertForMultipleChoice"),GMr=o(" (MobileBERT model)"),OMr=l(),QC=a("li"),M1e=a("strong"),VMr=o("mpnet"),XMr=o(" \u2014 "),qH=a("a"),zMr=o("TFMPNetForMultipleChoice"),WMr=o(" (MPNet model)"),QMr=l(),HC=a("li"),E1e=a("strong"),HMr=o("rembert"),UMr=o(" \u2014 "),NH=a("a"),JMr=o("TFRemBertForMultipleChoice"),YMr=o(" (RemBERT model)"),KMr=l(),UC=a("li"),C1e=a("strong"),ZMr=o("roberta"),e4r=o(" \u2014 "),jH=a("a"),o4r=o("TFRobertaForMultipleChoice"),r4r=o(" (RoBERTa model)"),t4r=l(),JC=a("li"),w1e=a("strong"),a4r=o("roformer"),n4r=o(" \u2014 "),DH=a("a"),s4r=o("TFRoFormerForMultipleChoice"),l4r=o(" (RoFormer model)"),i4r=l(),YC=a("li"),A1e=a("strong"),d4r=o("xlm"),c4r=o(" \u2014 "),GH=a("a"),m4r=o("TFXLMForMultipleChoice"),f4r=o(" (XLM model)"),g4r=l(),KC=a("li"),y1e=a("strong"),h4r=o("xlm-roberta"),u4r=o(" \u2014 "),OH=a("a"),p4r=o("TFXLMRobertaForMultipleChoice"),_4r=o(" (XLM-RoBERTa model)"),b4r=l(),ZC=a("li"),L1e=a("strong"),v4r=o("xlnet"),F4r=o(" \u2014 "),VH=a("a"),T4r=o("TFXLNetForMultipleChoice"),M4r=o(" (XLNet model)"),E4r=l(),F(e5.$$.fragment),aNe=l(),cc=a("h2"),o5=a("a"),x1e=a("span"),F(k7.$$.fragment),C4r=l(),$1e=a("span"),w4r=o("TFAutoModelForNextSentencePrediction"),nNe=l(),nr=a("div"),F(S7.$$.fragment),A4r=l(),mc=a("p"),y4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XH=a("a"),L4r=o("from_pretrained()"),x4r=o(" class method or the "),zH=a("a"),$4r=o("from_config()"),k4r=o(` class
method.`),S4r=l(),R7=a("p"),R4r=o("This class cannot be instantiated directly using "),k1e=a("code"),P4r=o("__init__()"),B4r=o(" (throws an error)."),I4r=l(),Bt=a("div"),F(P7.$$.fragment),q4r=l(),S1e=a("p"),N4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j4r=l(),fc=a("p"),D4r=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),G4r=o("not"),O4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),V4r=o("from_pretrained()"),X4r=o(" to load the model weights."),z4r=l(),F(r5.$$.fragment),W4r=l(),Rr=a("div"),F(B7.$$.fragment),Q4r=l(),P1e=a("p"),H4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U4r=l(),ln=a("p"),J4r=o("The model class to instantiate is selected based on the "),B1e=a("code"),Y4r=o("model_type"),K4r=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),oEr=o("pretrained_model_name_or_path"),rEr=o(":"),tEr=l(),I7=a("ul"),t5=a("li"),N1e=a("strong"),aEr=o("bert"),nEr=o(" \u2014 "),QH=a("a"),sEr=o("TFBertForNextSentencePrediction"),lEr=o(" (BERT model)"),iEr=l(),a5=a("li"),j1e=a("strong"),dEr=o("mobilebert"),cEr=o(" \u2014 "),HH=a("a"),mEr=o("TFMobileBertForNextSentencePrediction"),fEr=o(" (MobileBERT model)"),gEr=l(),F(n5.$$.fragment),sNe=l(),gc=a("h2"),s5=a("a"),D1e=a("span"),F(q7.$$.fragment),hEr=l(),G1e=a("span"),uEr=o("TFAutoModelForTableQuestionAnswering"),lNe=l(),sr=a("div"),F(N7.$$.fragment),pEr=l(),hc=a("p"),_Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UH=a("a"),bEr=o("from_pretrained()"),vEr=o(" class method or the "),JH=a("a"),FEr=o("from_config()"),TEr=o(` class
method.`),MEr=l(),j7=a("p"),EEr=o("This class cannot be instantiated directly using "),O1e=a("code"),CEr=o("__init__()"),wEr=o(" (throws an error)."),AEr=l(),It=a("div"),F(D7.$$.fragment),yEr=l(),V1e=a("p"),LEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xEr=l(),uc=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),kEr=o("not"),SEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),REr=o("from_pretrained()"),PEr=o(" to load the model weights."),BEr=l(),F(l5.$$.fragment),IEr=l(),Pr=a("div"),F(G7.$$.fragment),qEr=l(),z1e=a("p"),NEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jEr=l(),dn=a("p"),DEr=o("The model class to instantiate is selected based on the "),W1e=a("code"),GEr=o("model_type"),OEr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),zEr=o("pretrained_model_name_or_path"),WEr=o(":"),QEr=l(),U1e=a("ul"),i5=a("li"),J1e=a("strong"),HEr=o("tapas"),UEr=o(" \u2014 "),KH=a("a"),JEr=o("TFTapasForQuestionAnswering"),YEr=o(" (TAPAS model)"),KEr=l(),F(d5.$$.fragment),iNe=l(),pc=a("h2"),c5=a("a"),Y1e=a("span"),F(O7.$$.fragment),ZEr=l(),K1e=a("span"),eCr=o("TFAutoModelForTokenClassification"),dNe=l(),lr=a("div"),F(V7.$$.fragment),oCr=l(),_c=a("p"),rCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZH=a("a"),tCr=o("from_pretrained()"),aCr=o(" class method or the "),eU=a("a"),nCr=o("from_config()"),sCr=o(` class
method.`),lCr=l(),X7=a("p"),iCr=o("This class cannot be instantiated directly using "),Z1e=a("code"),dCr=o("__init__()"),cCr=o(" (throws an error)."),mCr=l(),qt=a("div"),F(z7.$$.fragment),fCr=l(),eTe=a("p"),gCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hCr=l(),bc=a("p"),uCr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),pCr=o("not"),_Cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),bCr=o("from_pretrained()"),vCr=o(" to load the model weights."),FCr=l(),F(m5.$$.fragment),TCr=l(),Br=a("div"),F(W7.$$.fragment),MCr=l(),rTe=a("p"),ECr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CCr=l(),cn=a("p"),wCr=o("The model class to instantiate is selected based on the "),tTe=a("code"),ACr=o("model_type"),yCr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),$Cr=o("pretrained_model_name_or_path"),kCr=o(":"),SCr=l(),de=a("ul"),f5=a("li"),sTe=a("strong"),RCr=o("albert"),PCr=o(" \u2014 "),rU=a("a"),BCr=o("TFAlbertForTokenClassification"),ICr=o(" (ALBERT model)"),qCr=l(),g5=a("li"),lTe=a("strong"),NCr=o("bert"),jCr=o(" \u2014 "),tU=a("a"),DCr=o("TFBertForTokenClassification"),GCr=o(" (BERT model)"),OCr=l(),h5=a("li"),iTe=a("strong"),VCr=o("camembert"),XCr=o(" \u2014 "),aU=a("a"),zCr=o("TFCamembertForTokenClassification"),WCr=o(" (CamemBERT model)"),QCr=l(),u5=a("li"),dTe=a("strong"),HCr=o("convbert"),UCr=o(" \u2014 "),nU=a("a"),JCr=o("TFConvBertForTokenClassification"),YCr=o(" (ConvBERT model)"),KCr=l(),p5=a("li"),cTe=a("strong"),ZCr=o("deberta"),e5r=o(" \u2014 "),sU=a("a"),o5r=o("TFDebertaForTokenClassification"),r5r=o(" (DeBERTa model)"),t5r=l(),_5=a("li"),mTe=a("strong"),a5r=o("deberta-v2"),n5r=o(" \u2014 "),lU=a("a"),s5r=o("TFDebertaV2ForTokenClassification"),l5r=o(" (DeBERTa-v2 model)"),i5r=l(),b5=a("li"),fTe=a("strong"),d5r=o("distilbert"),c5r=o(" \u2014 "),iU=a("a"),m5r=o("TFDistilBertForTokenClassification"),f5r=o(" (DistilBERT model)"),g5r=l(),v5=a("li"),gTe=a("strong"),h5r=o("electra"),u5r=o(" \u2014 "),dU=a("a"),p5r=o("TFElectraForTokenClassification"),_5r=o(" (ELECTRA model)"),b5r=l(),F5=a("li"),hTe=a("strong"),v5r=o("flaubert"),F5r=o(" \u2014 "),cU=a("a"),T5r=o("TFFlaubertForTokenClassification"),M5r=o(" (FlauBERT model)"),E5r=l(),T5=a("li"),uTe=a("strong"),C5r=o("funnel"),w5r=o(" \u2014 "),mU=a("a"),A5r=o("TFFunnelForTokenClassification"),y5r=o(" (Funnel Transformer model)"),L5r=l(),M5=a("li"),pTe=a("strong"),x5r=o("layoutlm"),$5r=o(" \u2014 "),fU=a("a"),k5r=o("TFLayoutLMForTokenClassification"),S5r=o(" (LayoutLM model)"),R5r=l(),E5=a("li"),_Te=a("strong"),P5r=o("longformer"),B5r=o(" \u2014 "),gU=a("a"),I5r=o("TFLongformerForTokenClassification"),q5r=o(" (Longformer model)"),N5r=l(),C5=a("li"),bTe=a("strong"),j5r=o("mobilebert"),D5r=o(" \u2014 "),hU=a("a"),G5r=o("TFMobileBertForTokenClassification"),O5r=o(" (MobileBERT model)"),V5r=l(),w5=a("li"),vTe=a("strong"),X5r=o("mpnet"),z5r=o(" \u2014 "),uU=a("a"),W5r=o("TFMPNetForTokenClassification"),Q5r=o(" (MPNet model)"),H5r=l(),A5=a("li"),FTe=a("strong"),U5r=o("rembert"),J5r=o(" \u2014 "),pU=a("a"),Y5r=o("TFRemBertForTokenClassification"),K5r=o(" (RemBERT model)"),Z5r=l(),y5=a("li"),TTe=a("strong"),e3r=o("roberta"),o3r=o(" \u2014 "),_U=a("a"),r3r=o("TFRobertaForTokenClassification"),t3r=o(" (RoBERTa model)"),a3r=l(),L5=a("li"),MTe=a("strong"),n3r=o("roformer"),s3r=o(" \u2014 "),bU=a("a"),l3r=o("TFRoFormerForTokenClassification"),i3r=o(" (RoFormer model)"),d3r=l(),x5=a("li"),ETe=a("strong"),c3r=o("xlm"),m3r=o(" \u2014 "),vU=a("a"),f3r=o("TFXLMForTokenClassification"),g3r=o(" (XLM model)"),h3r=l(),$5=a("li"),CTe=a("strong"),u3r=o("xlm-roberta"),p3r=o(" \u2014 "),FU=a("a"),_3r=o("TFXLMRobertaForTokenClassification"),b3r=o(" (XLM-RoBERTa model)"),v3r=l(),k5=a("li"),wTe=a("strong"),F3r=o("xlnet"),T3r=o(" \u2014 "),TU=a("a"),M3r=o("TFXLNetForTokenClassification"),E3r=o(" (XLNet model)"),C3r=l(),F(S5.$$.fragment),cNe=l(),vc=a("h2"),R5=a("a"),ATe=a("span"),F(Q7.$$.fragment),w3r=l(),yTe=a("span"),A3r=o("TFAutoModelForQuestionAnswering"),mNe=l(),ir=a("div"),F(H7.$$.fragment),y3r=l(),Fc=a("p"),L3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MU=a("a"),x3r=o("from_pretrained()"),$3r=o(" class method or the "),EU=a("a"),k3r=o("from_config()"),S3r=o(` class
method.`),R3r=l(),U7=a("p"),P3r=o("This class cannot be instantiated directly using "),LTe=a("code"),B3r=o("__init__()"),I3r=o(" (throws an error)."),q3r=l(),Nt=a("div"),F(J7.$$.fragment),N3r=l(),xTe=a("p"),j3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D3r=l(),Tc=a("p"),G3r=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),O3r=o("not"),V3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),X3r=o("from_pretrained()"),z3r=o(" to load the model weights."),W3r=l(),F(P5.$$.fragment),Q3r=l(),Ir=a("div"),F(Y7.$$.fragment),H3r=l(),kTe=a("p"),U3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J3r=l(),mn=a("p"),Y3r=o("The model class to instantiate is selected based on the "),STe=a("code"),K3r=o("model_type"),Z3r=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(":"),awr=l(),ce=a("ul"),B5=a("li"),BTe=a("strong"),nwr=o("albert"),swr=o(" \u2014 "),wU=a("a"),lwr=o("TFAlbertForQuestionAnswering"),iwr=o(" (ALBERT model)"),dwr=l(),I5=a("li"),ITe=a("strong"),cwr=o("bert"),mwr=o(" \u2014 "),AU=a("a"),fwr=o("TFBertForQuestionAnswering"),gwr=o(" (BERT model)"),hwr=l(),q5=a("li"),qTe=a("strong"),uwr=o("camembert"),pwr=o(" \u2014 "),yU=a("a"),_wr=o("TFCamembertForQuestionAnswering"),bwr=o(" (CamemBERT model)"),vwr=l(),N5=a("li"),NTe=a("strong"),Fwr=o("convbert"),Twr=o(" \u2014 "),LU=a("a"),Mwr=o("TFConvBertForQuestionAnswering"),Ewr=o(" (ConvBERT model)"),Cwr=l(),j5=a("li"),jTe=a("strong"),wwr=o("deberta"),Awr=o(" \u2014 "),xU=a("a"),ywr=o("TFDebertaForQuestionAnswering"),Lwr=o(" (DeBERTa model)"),xwr=l(),D5=a("li"),DTe=a("strong"),$wr=o("deberta-v2"),kwr=o(" \u2014 "),$U=a("a"),Swr=o("TFDebertaV2ForQuestionAnswering"),Rwr=o(" (DeBERTa-v2 model)"),Pwr=l(),G5=a("li"),GTe=a("strong"),Bwr=o("distilbert"),Iwr=o(" \u2014 "),kU=a("a"),qwr=o("TFDistilBertForQuestionAnswering"),Nwr=o(" (DistilBERT model)"),jwr=l(),O5=a("li"),OTe=a("strong"),Dwr=o("electra"),Gwr=o(" \u2014 "),SU=a("a"),Owr=o("TFElectraForQuestionAnswering"),Vwr=o(" (ELECTRA model)"),Xwr=l(),V5=a("li"),VTe=a("strong"),zwr=o("flaubert"),Wwr=o(" \u2014 "),RU=a("a"),Qwr=o("TFFlaubertForQuestionAnsweringSimple"),Hwr=o(" (FlauBERT model)"),Uwr=l(),X5=a("li"),XTe=a("strong"),Jwr=o("funnel"),Ywr=o(" \u2014 "),PU=a("a"),Kwr=o("TFFunnelForQuestionAnswering"),Zwr=o(" (Funnel Transformer model)"),eAr=l(),z5=a("li"),zTe=a("strong"),oAr=o("gptj"),rAr=o(" \u2014 "),BU=a("a"),tAr=o("TFGPTJForQuestionAnswering"),aAr=o(" (GPT-J model)"),nAr=l(),W5=a("li"),WTe=a("strong"),sAr=o("longformer"),lAr=o(" \u2014 "),IU=a("a"),iAr=o("TFLongformerForQuestionAnswering"),dAr=o(" (Longformer model)"),cAr=l(),Q5=a("li"),QTe=a("strong"),mAr=o("mobilebert"),fAr=o(" \u2014 "),qU=a("a"),gAr=o("TFMobileBertForQuestionAnswering"),hAr=o(" (MobileBERT model)"),uAr=l(),H5=a("li"),HTe=a("strong"),pAr=o("mpnet"),_Ar=o(" \u2014 "),NU=a("a"),bAr=o("TFMPNetForQuestionAnswering"),vAr=o(" (MPNet model)"),FAr=l(),U5=a("li"),UTe=a("strong"),TAr=o("rembert"),MAr=o(" \u2014 "),jU=a("a"),EAr=o("TFRemBertForQuestionAnswering"),CAr=o(" (RemBERT model)"),wAr=l(),J5=a("li"),JTe=a("strong"),AAr=o("roberta"),yAr=o(" \u2014 "),DU=a("a"),LAr=o("TFRobertaForQuestionAnswering"),xAr=o(" (RoBERTa model)"),$Ar=l(),Y5=a("li"),YTe=a("strong"),kAr=o("roformer"),SAr=o(" \u2014 "),GU=a("a"),RAr=o("TFRoFormerForQuestionAnswering"),PAr=o(" (RoFormer model)"),BAr=l(),K5=a("li"),KTe=a("strong"),IAr=o("xlm"),qAr=o(" \u2014 "),OU=a("a"),NAr=o("TFXLMForQuestionAnsweringSimple"),jAr=o(" (XLM model)"),DAr=l(),Z5=a("li"),ZTe=a("strong"),GAr=o("xlm-roberta"),OAr=o(" \u2014 "),VU=a("a"),VAr=o("TFXLMRobertaForQuestionAnswering"),XAr=o(" (XLM-RoBERTa model)"),zAr=l(),e3=a("li"),eMe=a("strong"),WAr=o("xlnet"),QAr=o(" \u2014 "),XU=a("a"),HAr=o("TFXLNetForQuestionAnsweringSimple"),UAr=o(" (XLNet model)"),JAr=l(),F(o3.$$.fragment),fNe=l(),Mc=a("h2"),r3=a("a"),oMe=a("span"),F(K7.$$.fragment),YAr=l(),rMe=a("span"),KAr=o("TFAutoModelForVision2Seq"),gNe=l(),dr=a("div"),F(Z7.$$.fragment),ZAr=l(),Ec=a("p"),e0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zU=a("a"),o0r=o("from_pretrained()"),r0r=o(" class method or the "),WU=a("a"),t0r=o("from_config()"),a0r=o(` class
method.`),n0r=l(),ex=a("p"),s0r=o("This class cannot be instantiated directly using "),tMe=a("code"),l0r=o("__init__()"),i0r=o(" (throws an error)."),d0r=l(),jt=a("div"),F(ox.$$.fragment),c0r=l(),aMe=a("p"),m0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f0r=l(),Cc=a("p"),g0r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),h0r=o("not"),u0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),p0r=o("from_pretrained()"),_0r=o(" to load the model weights."),b0r=l(),F(t3.$$.fragment),v0r=l(),qr=a("div"),F(rx.$$.fragment),F0r=l(),sMe=a("p"),T0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M0r=l(),fn=a("p"),E0r=o("The model class to instantiate is selected based on the "),lMe=a("code"),C0r=o("model_type"),w0r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(":"),$0r=l(),cMe=a("ul"),a3=a("li"),mMe=a("strong"),k0r=o("vision-encoder-decoder"),S0r=o(" \u2014 "),HU=a("a"),R0r=o("TFVisionEncoderDecoderModel"),P0r=o(" (Vision Encoder decoder model)"),B0r=l(),F(n3.$$.fragment),hNe=l(),wc=a("h2"),s3=a("a"),fMe=a("span"),F(tx.$$.fragment),I0r=l(),gMe=a("span"),q0r=o("TFAutoModelForSpeechSeq2Seq"),uNe=l(),cr=a("div"),F(ax.$$.fragment),N0r=l(),Ac=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UU=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),JU=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),nx=a("p"),z0r=o("This class cannot be instantiated directly using "),hMe=a("code"),W0r=o("__init__()"),Q0r=o(" (throws an error)."),H0r=l(),Dt=a("div"),F(sx.$$.fragment),U0r=l(),uMe=a("p"),J0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Y0r=l(),yc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),Z0r=o("not"),e6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),o6r=o("from_pretrained()"),r6r=o(" to load the model weights."),t6r=l(),F(l3.$$.fragment),a6r=l(),Nr=a("div"),F(lx.$$.fragment),n6r=l(),_Me=a("p"),s6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l6r=l(),gn=a("p"),i6r=o("The model class to instantiate is selected based on the "),bMe=a("code"),d6r=o("model_type"),c6r=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),m6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),g6r=o("pretrained_model_name_or_path"),h6r=o(":"),u6r=l(),TMe=a("ul"),i3=a("li"),MMe=a("strong"),p6r=o("speech_to_text"),_6r=o(" \u2014 "),KU=a("a"),b6r=o("TFSpeech2TextForConditionalGeneration"),v6r=o(" (Speech2Text model)"),F6r=l(),F(d3.$$.fragment),pNe=l(),Lc=a("h2"),c3=a("a"),EMe=a("span"),F(ix.$$.fragment),T6r=l(),CMe=a("span"),M6r=o("FlaxAutoModel"),_Ne=l(),mr=a("div"),F(dx.$$.fragment),E6r=l(),xc=a("p"),C6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=a("a"),w6r=o("from_pretrained()"),A6r=o(" class method or the "),eJ=a("a"),y6r=o("from_config()"),L6r=o(` class
method.`),x6r=l(),cx=a("p"),$6r=o("This class cannot be instantiated directly using "),wMe=a("code"),k6r=o("__init__()"),S6r=o(" (throws an error)."),R6r=l(),Gt=a("div"),F(mx.$$.fragment),P6r=l(),AMe=a("p"),B6r=o("Instantiates one of the base model classes of the library from a configuration."),I6r=l(),$c=a("p"),q6r=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),N6r=o("not"),j6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),D6r=o("from_pretrained()"),G6r=o(" to load the model weights."),O6r=l(),F(m3.$$.fragment),V6r=l(),jr=a("div"),F(fx.$$.fragment),X6r=l(),LMe=a("p"),z6r=o("Instantiate one of the base model classes of the library from a pretrained model."),W6r=l(),hn=a("p"),Q6r=o("The model class to instantiate is selected based on the "),xMe=a("code"),H6r=o("model_type"),U6r=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(":"),eyr=l(),re=a("ul"),f3=a("li"),SMe=a("strong"),oyr=o("albert"),ryr=o(" \u2014 "),rJ=a("a"),tyr=o("FlaxAlbertModel"),ayr=o(" (ALBERT model)"),nyr=l(),g3=a("li"),RMe=a("strong"),syr=o("bart"),lyr=o(" \u2014 "),tJ=a("a"),iyr=o("FlaxBartModel"),dyr=o(" (BART model)"),cyr=l(),h3=a("li"),PMe=a("strong"),myr=o("beit"),fyr=o(" \u2014 "),aJ=a("a"),gyr=o("FlaxBeitModel"),hyr=o(" (BEiT model)"),uyr=l(),u3=a("li"),BMe=a("strong"),pyr=o("bert"),_yr=o(" \u2014 "),nJ=a("a"),byr=o("FlaxBertModel"),vyr=o(" (BERT model)"),Fyr=l(),p3=a("li"),IMe=a("strong"),Tyr=o("big_bird"),Myr=o(" \u2014 "),sJ=a("a"),Eyr=o("FlaxBigBirdModel"),Cyr=o(" (BigBird model)"),wyr=l(),_3=a("li"),qMe=a("strong"),Ayr=o("blenderbot"),yyr=o(" \u2014 "),lJ=a("a"),Lyr=o("FlaxBlenderbotModel"),xyr=o(" (Blenderbot model)"),$yr=l(),b3=a("li"),NMe=a("strong"),kyr=o("blenderbot-small"),Syr=o(" \u2014 "),iJ=a("a"),Ryr=o("FlaxBlenderbotSmallModel"),Pyr=o(" (BlenderbotSmall model)"),Byr=l(),v3=a("li"),jMe=a("strong"),Iyr=o("clip"),qyr=o(" \u2014 "),dJ=a("a"),Nyr=o("FlaxCLIPModel"),jyr=o(" (CLIP model)"),Dyr=l(),F3=a("li"),DMe=a("strong"),Gyr=o("distilbert"),Oyr=o(" \u2014 "),cJ=a("a"),Vyr=o("FlaxDistilBertModel"),Xyr=o(" (DistilBERT model)"),zyr=l(),T3=a("li"),GMe=a("strong"),Wyr=o("electra"),Qyr=o(" \u2014 "),mJ=a("a"),Hyr=o("FlaxElectraModel"),Uyr=o(" (ELECTRA model)"),Jyr=l(),M3=a("li"),OMe=a("strong"),Yyr=o("gpt2"),Kyr=o(" \u2014 "),fJ=a("a"),Zyr=o("FlaxGPT2Model"),eLr=o(" (OpenAI GPT-2 model)"),oLr=l(),E3=a("li"),VMe=a("strong"),rLr=o("gpt_neo"),tLr=o(" \u2014 "),gJ=a("a"),aLr=o("FlaxGPTNeoModel"),nLr=o(" (GPT Neo model)"),sLr=l(),C3=a("li"),XMe=a("strong"),lLr=o("gptj"),iLr=o(" \u2014 "),hJ=a("a"),dLr=o("FlaxGPTJModel"),cLr=o(" (GPT-J model)"),mLr=l(),w3=a("li"),zMe=a("strong"),fLr=o("marian"),gLr=o(" \u2014 "),uJ=a("a"),hLr=o("FlaxMarianModel"),uLr=o(" (Marian model)"),pLr=l(),A3=a("li"),WMe=a("strong"),_Lr=o("mbart"),bLr=o(" \u2014 "),pJ=a("a"),vLr=o("FlaxMBartModel"),FLr=o(" (mBART model)"),TLr=l(),y3=a("li"),QMe=a("strong"),MLr=o("mt5"),ELr=o(" \u2014 "),_J=a("a"),CLr=o("FlaxMT5Model"),wLr=o(" (mT5 model)"),ALr=l(),L3=a("li"),HMe=a("strong"),yLr=o("pegasus"),LLr=o(" \u2014 "),bJ=a("a"),xLr=o("FlaxPegasusModel"),$Lr=o(" (Pegasus model)"),kLr=l(),x3=a("li"),UMe=a("strong"),SLr=o("roberta"),RLr=o(" \u2014 "),vJ=a("a"),PLr=o("FlaxRobertaModel"),BLr=o(" (RoBERTa model)"),ILr=l(),$3=a("li"),JMe=a("strong"),qLr=o("roformer"),NLr=o(" \u2014 "),FJ=a("a"),jLr=o("FlaxRoFormerModel"),DLr=o(" (RoFormer model)"),GLr=l(),k3=a("li"),YMe=a("strong"),OLr=o("t5"),VLr=o(" \u2014 "),TJ=a("a"),XLr=o("FlaxT5Model"),zLr=o(" (T5 model)"),WLr=l(),S3=a("li"),KMe=a("strong"),QLr=o("vision-text-dual-encoder"),HLr=o(" \u2014 "),MJ=a("a"),ULr=o("FlaxVisionTextDualEncoderModel"),JLr=o(" (VisionTextDualEncoder model)"),YLr=l(),R3=a("li"),ZMe=a("strong"),KLr=o("vit"),ZLr=o(" \u2014 "),EJ=a("a"),e8r=o("FlaxViTModel"),o8r=o(" (ViT model)"),r8r=l(),P3=a("li"),e4e=a("strong"),t8r=o("wav2vec2"),a8r=o(" \u2014 "),CJ=a("a"),n8r=o("FlaxWav2Vec2Model"),s8r=o(" (Wav2Vec2 model)"),l8r=l(),B3=a("li"),o4e=a("strong"),i8r=o("xglm"),d8r=o(" \u2014 "),wJ=a("a"),c8r=o("FlaxXGLMModel"),m8r=o(" (XGLM model)"),f8r=l(),I3=a("li"),r4e=a("strong"),g8r=o("xlm-roberta"),h8r=o(" \u2014 "),AJ=a("a"),u8r=o("FlaxXLMRobertaModel"),p8r=o(" (XLM-RoBERTa model)"),_8r=l(),F(q3.$$.fragment),bNe=l(),kc=a("h2"),N3=a("a"),t4e=a("span"),F(gx.$$.fragment),b8r=l(),a4e=a("span"),v8r=o("FlaxAutoModelForCausalLM"),vNe=l(),fr=a("div"),F(hx.$$.fragment),F8r=l(),Sc=a("p"),T8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yJ=a("a"),M8r=o("from_pretrained()"),E8r=o(" class method or the "),LJ=a("a"),C8r=o("from_config()"),w8r=o(` class
method.`),A8r=l(),ux=a("p"),y8r=o("This class cannot be instantiated directly using "),n4e=a("code"),L8r=o("__init__()"),x8r=o(" (throws an error)."),$8r=l(),Ot=a("div"),F(px.$$.fragment),k8r=l(),s4e=a("p"),S8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R8r=l(),Rc=a("p"),P8r=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),B8r=o("not"),I8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),q8r=o("from_pretrained()"),N8r=o(" to load the model weights."),j8r=l(),F(j3.$$.fragment),D8r=l(),Dr=a("div"),F(_x.$$.fragment),G8r=l(),i4e=a("p"),O8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V8r=l(),un=a("p"),X8r=o("The model class to instantiate is selected based on the "),d4e=a("code"),z8r=o("model_type"),W8r=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Q8r=o("pretrained_model_name_or_path"),H8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),U8r=o("pretrained_model_name_or_path"),J8r=o(":"),Y8r=l(),Re=a("ul"),D3=a("li"),f4e=a("strong"),K8r=o("bart"),Z8r=o(" \u2014 "),$J=a("a"),e7r=o("FlaxBartForCausalLM"),o7r=o(" (BART model)"),r7r=l(),G3=a("li"),g4e=a("strong"),t7r=o("bert"),a7r=o(" \u2014 "),kJ=a("a"),n7r=o("FlaxBertForCausalLM"),s7r=o(" (BERT model)"),l7r=l(),O3=a("li"),h4e=a("strong"),i7r=o("big_bird"),d7r=o(" \u2014 "),SJ=a("a"),c7r=o("FlaxBigBirdForCausalLM"),m7r=o(" (BigBird model)"),f7r=l(),V3=a("li"),u4e=a("strong"),g7r=o("electra"),h7r=o(" \u2014 "),RJ=a("a"),u7r=o("FlaxElectraForCausalLM"),p7r=o(" (ELECTRA model)"),_7r=l(),X3=a("li"),p4e=a("strong"),b7r=o("gpt2"),v7r=o(" \u2014 "),PJ=a("a"),F7r=o("FlaxGPT2LMHeadModel"),T7r=o(" (OpenAI GPT-2 model)"),M7r=l(),z3=a("li"),_4e=a("strong"),E7r=o("gpt_neo"),C7r=o(" \u2014 "),BJ=a("a"),w7r=o("FlaxGPTNeoForCausalLM"),A7r=o(" (GPT Neo model)"),y7r=l(),W3=a("li"),b4e=a("strong"),L7r=o("gptj"),x7r=o(" \u2014 "),IJ=a("a"),$7r=o("FlaxGPTJForCausalLM"),k7r=o(" (GPT-J model)"),S7r=l(),Q3=a("li"),v4e=a("strong"),R7r=o("roberta"),P7r=o(" \u2014 "),qJ=a("a"),B7r=o("FlaxRobertaForCausalLM"),I7r=o(" (RoBERTa model)"),q7r=l(),H3=a("li"),F4e=a("strong"),N7r=o("xglm"),j7r=o(" \u2014 "),NJ=a("a"),D7r=o("FlaxXGLMForCausalLM"),G7r=o(" (XGLM model)"),O7r=l(),F(U3.$$.fragment),FNe=l(),Pc=a("h2"),J3=a("a"),T4e=a("span"),F(bx.$$.fragment),V7r=l(),M4e=a("span"),X7r=o("FlaxAutoModelForPreTraining"),TNe=l(),gr=a("div"),F(vx.$$.fragment),z7r=l(),Bc=a("p"),W7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jJ=a("a"),Q7r=o("from_pretrained()"),H7r=o(" class method or the "),DJ=a("a"),U7r=o("from_config()"),J7r=o(` class
method.`),Y7r=l(),Fx=a("p"),K7r=o("This class cannot be instantiated directly using "),E4e=a("code"),Z7r=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),Vt=a("div"),F(Tx.$$.fragment),rxr=l(),C4e=a("p"),txr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),axr=l(),Ic=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),ixr=o("from_pretrained()"),dxr=o(" to load the model weights."),cxr=l(),F(Y3.$$.fragment),mxr=l(),Gr=a("div"),F(Mx.$$.fragment),fxr=l(),A4e=a("p"),gxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hxr=l(),pn=a("p"),uxr=o("The model class to instantiate is selected based on the "),y4e=a("code"),pxr=o("model_type"),_xr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(":"),Mxr=l(),Me=a("ul"),K3=a("li"),$4e=a("strong"),Exr=o("albert"),Cxr=o(" \u2014 "),OJ=a("a"),wxr=o("FlaxAlbertForPreTraining"),Axr=o(" (ALBERT model)"),yxr=l(),Z3=a("li"),k4e=a("strong"),Lxr=o("bart"),xxr=o(" \u2014 "),VJ=a("a"),$xr=o("FlaxBartForConditionalGeneration"),kxr=o(" (BART model)"),Sxr=l(),ew=a("li"),S4e=a("strong"),Rxr=o("bert"),Pxr=o(" \u2014 "),XJ=a("a"),Bxr=o("FlaxBertForPreTraining"),Ixr=o(" (BERT model)"),qxr=l(),ow=a("li"),R4e=a("strong"),Nxr=o("big_bird"),jxr=o(" \u2014 "),zJ=a("a"),Dxr=o("FlaxBigBirdForPreTraining"),Gxr=o(" (BigBird model)"),Oxr=l(),rw=a("li"),P4e=a("strong"),Vxr=o("electra"),Xxr=o(" \u2014 "),WJ=a("a"),zxr=o("FlaxElectraForPreTraining"),Wxr=o(" (ELECTRA model)"),Qxr=l(),tw=a("li"),B4e=a("strong"),Hxr=o("mbart"),Uxr=o(" \u2014 "),QJ=a("a"),Jxr=o("FlaxMBartForConditionalGeneration"),Yxr=o(" (mBART model)"),Kxr=l(),aw=a("li"),I4e=a("strong"),Zxr=o("mt5"),e9r=o(" \u2014 "),HJ=a("a"),o9r=o("FlaxMT5ForConditionalGeneration"),r9r=o(" (mT5 model)"),t9r=l(),nw=a("li"),q4e=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),UJ=a("a"),s9r=o("FlaxRobertaForMaskedLM"),l9r=o(" (RoBERTa model)"),i9r=l(),sw=a("li"),N4e=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),JJ=a("a"),m9r=o("FlaxRoFormerForMaskedLM"),f9r=o(" (RoFormer model)"),g9r=l(),lw=a("li"),j4e=a("strong"),h9r=o("t5"),u9r=o(" \u2014 "),YJ=a("a"),p9r=o("FlaxT5ForConditionalGeneration"),_9r=o(" (T5 model)"),b9r=l(),iw=a("li"),D4e=a("strong"),v9r=o("wav2vec2"),F9r=o(" \u2014 "),KJ=a("a"),T9r=o("FlaxWav2Vec2ForPreTraining"),M9r=o(" (Wav2Vec2 model)"),E9r=l(),dw=a("li"),G4e=a("strong"),C9r=o("xlm-roberta"),w9r=o(" \u2014 "),ZJ=a("a"),A9r=o("FlaxXLMRobertaForMaskedLM"),y9r=o(" (XLM-RoBERTa model)"),L9r=l(),F(cw.$$.fragment),MNe=l(),qc=a("h2"),mw=a("a"),O4e=a("span"),F(Ex.$$.fragment),x9r=l(),V4e=a("span"),$9r=o("FlaxAutoModelForMaskedLM"),ENe=l(),hr=a("div"),F(Cx.$$.fragment),k9r=l(),Nc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),oY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),q9r=l(),wx=a("p"),N9r=o("This class cannot be instantiated directly using "),X4e=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Xt=a("div"),F(Ax.$$.fragment),O9r=l(),z4e=a("p"),V9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X9r=l(),jc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(fw.$$.fragment),Y9r=l(),Or=a("div"),F(yx.$$.fragment),K9r=l(),Q4e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e$r=l(),_n=a("p"),o$r=o("The model class to instantiate is selected based on the "),H4e=a("code"),r$r=o("model_type"),t$r=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),a$r=o("pretrained_model_name_or_path"),n$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),s$r=o("pretrained_model_name_or_path"),l$r=o(":"),i$r=l(),Le=a("ul"),gw=a("li"),Y4e=a("strong"),d$r=o("albert"),c$r=o(" \u2014 "),tY=a("a"),m$r=o("FlaxAlbertForMaskedLM"),f$r=o(" (ALBERT model)"),g$r=l(),hw=a("li"),K4e=a("strong"),h$r=o("bart"),u$r=o(" \u2014 "),aY=a("a"),p$r=o("FlaxBartForConditionalGeneration"),_$r=o(" (BART model)"),b$r=l(),uw=a("li"),Z4e=a("strong"),v$r=o("bert"),F$r=o(" \u2014 "),nY=a("a"),T$r=o("FlaxBertForMaskedLM"),M$r=o(" (BERT model)"),E$r=l(),pw=a("li"),eEe=a("strong"),C$r=o("big_bird"),w$r=o(" \u2014 "),sY=a("a"),A$r=o("FlaxBigBirdForMaskedLM"),y$r=o(" (BigBird model)"),L$r=l(),_w=a("li"),oEe=a("strong"),x$r=o("distilbert"),$$r=o(" \u2014 "),lY=a("a"),k$r=o("FlaxDistilBertForMaskedLM"),S$r=o(" (DistilBERT model)"),R$r=l(),bw=a("li"),rEe=a("strong"),P$r=o("electra"),B$r=o(" \u2014 "),iY=a("a"),I$r=o("FlaxElectraForMaskedLM"),q$r=o(" (ELECTRA model)"),N$r=l(),vw=a("li"),tEe=a("strong"),j$r=o("mbart"),D$r=o(" \u2014 "),dY=a("a"),G$r=o("FlaxMBartForConditionalGeneration"),O$r=o(" (mBART model)"),V$r=l(),Fw=a("li"),aEe=a("strong"),X$r=o("roberta"),z$r=o(" \u2014 "),cY=a("a"),W$r=o("FlaxRobertaForMaskedLM"),Q$r=o(" (RoBERTa model)"),H$r=l(),Tw=a("li"),nEe=a("strong"),U$r=o("roformer"),J$r=o(" \u2014 "),mY=a("a"),Y$r=o("FlaxRoFormerForMaskedLM"),K$r=o(" (RoFormer model)"),Z$r=l(),Mw=a("li"),sEe=a("strong"),ekr=o("xlm-roberta"),okr=o(" \u2014 "),fY=a("a"),rkr=o("FlaxXLMRobertaForMaskedLM"),tkr=o(" (XLM-RoBERTa model)"),akr=l(),F(Ew.$$.fragment),CNe=l(),Dc=a("h2"),Cw=a("a"),lEe=a("span"),F(Lx.$$.fragment),nkr=l(),iEe=a("span"),skr=o("FlaxAutoModelForSeq2SeqLM"),wNe=l(),ur=a("div"),F(xx.$$.fragment),lkr=l(),Gc=a("p"),ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gY=a("a"),dkr=o("from_pretrained()"),ckr=o(" class method or the "),hY=a("a"),mkr=o("from_config()"),fkr=o(` class
method.`),gkr=l(),$x=a("p"),hkr=o("This class cannot be instantiated directly using "),dEe=a("code"),ukr=o("__init__()"),pkr=o(" (throws an error)."),_kr=l(),zt=a("div"),F(kx.$$.fragment),bkr=l(),cEe=a("p"),vkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fkr=l(),Oc=a("p"),Tkr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),Mkr=o("not"),Ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),Ckr=o("from_pretrained()"),wkr=o(" to load the model weights."),Akr=l(),F(ww.$$.fragment),ykr=l(),Vr=a("div"),F(Sx.$$.fragment),Lkr=l(),fEe=a("p"),xkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$kr=l(),bn=a("p"),kkr=o("The model class to instantiate is selected based on the "),gEe=a("code"),Skr=o("model_type"),Rkr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),Nkr=l(),Pe=a("ul"),Aw=a("li"),pEe=a("strong"),jkr=o("bart"),Dkr=o(" \u2014 "),pY=a("a"),Gkr=o("FlaxBartForConditionalGeneration"),Okr=o(" (BART model)"),Vkr=l(),yw=a("li"),_Ee=a("strong"),Xkr=o("blenderbot"),zkr=o(" \u2014 "),_Y=a("a"),Wkr=o("FlaxBlenderbotForConditionalGeneration"),Qkr=o(" (Blenderbot model)"),Hkr=l(),Lw=a("li"),bEe=a("strong"),Ukr=o("blenderbot-small"),Jkr=o(" \u2014 "),bY=a("a"),Ykr=o("FlaxBlenderbotSmallForConditionalGeneration"),Kkr=o(" (BlenderbotSmall model)"),Zkr=l(),xw=a("li"),vEe=a("strong"),eSr=o("encoder-decoder"),oSr=o(" \u2014 "),vY=a("a"),rSr=o("FlaxEncoderDecoderModel"),tSr=o(" (Encoder decoder model)"),aSr=l(),$w=a("li"),FEe=a("strong"),nSr=o("marian"),sSr=o(" \u2014 "),FY=a("a"),lSr=o("FlaxMarianMTModel"),iSr=o(" (Marian model)"),dSr=l(),kw=a("li"),TEe=a("strong"),cSr=o("mbart"),mSr=o(" \u2014 "),TY=a("a"),fSr=o("FlaxMBartForConditionalGeneration"),gSr=o(" (mBART model)"),hSr=l(),Sw=a("li"),MEe=a("strong"),uSr=o("mt5"),pSr=o(" \u2014 "),MY=a("a"),_Sr=o("FlaxMT5ForConditionalGeneration"),bSr=o(" (mT5 model)"),vSr=l(),Rw=a("li"),EEe=a("strong"),FSr=o("pegasus"),TSr=o(" \u2014 "),EY=a("a"),MSr=o("FlaxPegasusForConditionalGeneration"),ESr=o(" (Pegasus model)"),CSr=l(),Pw=a("li"),CEe=a("strong"),wSr=o("t5"),ASr=o(" \u2014 "),CY=a("a"),ySr=o("FlaxT5ForConditionalGeneration"),LSr=o(" (T5 model)"),xSr=l(),F(Bw.$$.fragment),ANe=l(),Vc=a("h2"),Iw=a("a"),wEe=a("span"),F(Rx.$$.fragment),$Sr=l(),AEe=a("span"),kSr=o("FlaxAutoModelForSequenceClassification"),yNe=l(),pr=a("div"),F(Px.$$.fragment),SSr=l(),Xc=a("p"),RSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wY=a("a"),PSr=o("from_pretrained()"),BSr=o(" class method or the "),AY=a("a"),ISr=o("from_config()"),qSr=o(` class
method.`),NSr=l(),Bx=a("p"),jSr=o("This class cannot be instantiated directly using "),yEe=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),Wt=a("div"),F(Ix.$$.fragment),VSr=l(),LEe=a("p"),XSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zSr=l(),zc=a("p"),WSr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),QSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),F(qw.$$.fragment),KSr=l(),Xr=a("div"),F(qx.$$.fragment),ZSr=l(),$Ee=a("p"),eRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oRr=l(),vn=a("p"),rRr=o("The model class to instantiate is selected based on the "),kEe=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),xe=a("ul"),Nw=a("li"),PEe=a("strong"),cRr=o("albert"),mRr=o(" \u2014 "),LY=a("a"),fRr=o("FlaxAlbertForSequenceClassification"),gRr=o(" (ALBERT model)"),hRr=l(),jw=a("li"),BEe=a("strong"),uRr=o("bart"),pRr=o(" \u2014 "),xY=a("a"),_Rr=o("FlaxBartForSequenceClassification"),bRr=o(" (BART model)"),vRr=l(),Dw=a("li"),IEe=a("strong"),FRr=o("bert"),TRr=o(" \u2014 "),$Y=a("a"),MRr=o("FlaxBertForSequenceClassification"),ERr=o(" (BERT model)"),CRr=l(),Gw=a("li"),qEe=a("strong"),wRr=o("big_bird"),ARr=o(" \u2014 "),kY=a("a"),yRr=o("FlaxBigBirdForSequenceClassification"),LRr=o(" (BigBird model)"),xRr=l(),Ow=a("li"),NEe=a("strong"),$Rr=o("distilbert"),kRr=o(" \u2014 "),SY=a("a"),SRr=o("FlaxDistilBertForSequenceClassification"),RRr=o(" (DistilBERT model)"),PRr=l(),Vw=a("li"),jEe=a("strong"),BRr=o("electra"),IRr=o(" \u2014 "),RY=a("a"),qRr=o("FlaxElectraForSequenceClassification"),NRr=o(" (ELECTRA model)"),jRr=l(),Xw=a("li"),DEe=a("strong"),DRr=o("mbart"),GRr=o(" \u2014 "),PY=a("a"),ORr=o("FlaxMBartForSequenceClassification"),VRr=o(" (mBART model)"),XRr=l(),zw=a("li"),GEe=a("strong"),zRr=o("roberta"),WRr=o(" \u2014 "),BY=a("a"),QRr=o("FlaxRobertaForSequenceClassification"),HRr=o(" (RoBERTa model)"),URr=l(),Ww=a("li"),OEe=a("strong"),JRr=o("roformer"),YRr=o(" \u2014 "),IY=a("a"),KRr=o("FlaxRoFormerForSequenceClassification"),ZRr=o(" (RoFormer model)"),ePr=l(),Qw=a("li"),VEe=a("strong"),oPr=o("xlm-roberta"),rPr=o(" \u2014 "),qY=a("a"),tPr=o("FlaxXLMRobertaForSequenceClassification"),aPr=o(" (XLM-RoBERTa model)"),nPr=l(),F(Hw.$$.fragment),LNe=l(),Wc=a("h2"),Uw=a("a"),XEe=a("span"),F(Nx.$$.fragment),sPr=l(),zEe=a("span"),lPr=o("FlaxAutoModelForQuestionAnswering"),xNe=l(),_r=a("div"),F(jx.$$.fragment),iPr=l(),Qc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NY=a("a"),cPr=o("from_pretrained()"),mPr=o(" class method or the "),jY=a("a"),fPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),Dx=a("p"),uPr=o("This class cannot be instantiated directly using "),WEe=a("code"),pPr=o("__init__()"),_Pr=o(" (throws an error)."),bPr=l(),Qt=a("div"),F(Gx.$$.fragment),vPr=l(),QEe=a("p"),FPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TPr=l(),Hc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),yPr=l(),F(Jw.$$.fragment),LPr=l(),zr=a("div"),F(Ox.$$.fragment),xPr=l(),UEe=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kPr=l(),Fn=a("p"),SPr=o("The model class to instantiate is selected based on the "),JEe=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(":"),jPr=l(),$e=a("ul"),Yw=a("li"),ZEe=a("strong"),DPr=o("albert"),GPr=o(" \u2014 "),GY=a("a"),OPr=o("FlaxAlbertForQuestionAnswering"),VPr=o(" (ALBERT model)"),XPr=l(),Kw=a("li"),eCe=a("strong"),zPr=o("bart"),WPr=o(" \u2014 "),OY=a("a"),QPr=o("FlaxBartForQuestionAnswering"),HPr=o(" (BART model)"),UPr=l(),Zw=a("li"),oCe=a("strong"),JPr=o("bert"),YPr=o(" \u2014 "),VY=a("a"),KPr=o("FlaxBertForQuestionAnswering"),ZPr=o(" (BERT model)"),eBr=l(),eA=a("li"),rCe=a("strong"),oBr=o("big_bird"),rBr=o(" \u2014 "),XY=a("a"),tBr=o("FlaxBigBirdForQuestionAnswering"),aBr=o(" (BigBird model)"),nBr=l(),oA=a("li"),tCe=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),zY=a("a"),iBr=o("FlaxDistilBertForQuestionAnswering"),dBr=o(" (DistilBERT model)"),cBr=l(),rA=a("li"),aCe=a("strong"),mBr=o("electra"),fBr=o(" \u2014 "),WY=a("a"),gBr=o("FlaxElectraForQuestionAnswering"),hBr=o(" (ELECTRA model)"),uBr=l(),tA=a("li"),nCe=a("strong"),pBr=o("mbart"),_Br=o(" \u2014 "),QY=a("a"),bBr=o("FlaxMBartForQuestionAnswering"),vBr=o(" (mBART model)"),FBr=l(),aA=a("li"),sCe=a("strong"),TBr=o("roberta"),MBr=o(" \u2014 "),HY=a("a"),EBr=o("FlaxRobertaForQuestionAnswering"),CBr=o(" (RoBERTa model)"),wBr=l(),nA=a("li"),lCe=a("strong"),ABr=o("roformer"),yBr=o(" \u2014 "),UY=a("a"),LBr=o("FlaxRoFormerForQuestionAnswering"),xBr=o(" (RoFormer model)"),$Br=l(),sA=a("li"),iCe=a("strong"),kBr=o("xlm-roberta"),SBr=o(" \u2014 "),JY=a("a"),RBr=o("FlaxXLMRobertaForQuestionAnswering"),PBr=o(" (XLM-RoBERTa model)"),BBr=l(),F(lA.$$.fragment),$Ne=l(),Uc=a("h2"),iA=a("a"),dCe=a("span"),F(Vx.$$.fragment),IBr=l(),cCe=a("span"),qBr=o("FlaxAutoModelForTokenClassification"),kNe=l(),br=a("div"),F(Xx.$$.fragment),NBr=l(),Jc=a("p"),jBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YY=a("a"),DBr=o("from_pretrained()"),GBr=o(" class method or the "),KY=a("a"),OBr=o("from_config()"),VBr=o(` class
method.`),XBr=l(),zx=a("p"),zBr=o("This class cannot be instantiated directly using "),mCe=a("code"),WBr=o("__init__()"),QBr=o(" (throws an error)."),HBr=l(),Ht=a("div"),F(Wx.$$.fragment),UBr=l(),fCe=a("p"),JBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YBr=l(),Yc=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),ZBr=o("not"),eIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),oIr=o("from_pretrained()"),rIr=o(" to load the model weights."),tIr=l(),F(dA.$$.fragment),aIr=l(),Wr=a("div"),F(Qx.$$.fragment),nIr=l(),hCe=a("p"),sIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lIr=l(),Tn=a("p"),iIr=o("The model class to instantiate is selected based on the "),uCe=a("code"),dIr=o("model_type"),cIr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),mIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(":"),uIr=l(),De=a("ul"),cA=a("li"),bCe=a("strong"),pIr=o("albert"),_Ir=o(" \u2014 "),eK=a("a"),bIr=o("FlaxAlbertForTokenClassification"),vIr=o(" (ALBERT model)"),FIr=l(),mA=a("li"),vCe=a("strong"),TIr=o("bert"),MIr=o(" \u2014 "),oK=a("a"),EIr=o("FlaxBertForTokenClassification"),CIr=o(" (BERT model)"),wIr=l(),fA=a("li"),FCe=a("strong"),AIr=o("big_bird"),yIr=o(" \u2014 "),rK=a("a"),LIr=o("FlaxBigBirdForTokenClassification"),xIr=o(" (BigBird model)"),$Ir=l(),gA=a("li"),TCe=a("strong"),kIr=o("distilbert"),SIr=o(" \u2014 "),tK=a("a"),RIr=o("FlaxDistilBertForTokenClassification"),PIr=o(" (DistilBERT model)"),BIr=l(),hA=a("li"),MCe=a("strong"),IIr=o("electra"),qIr=o(" \u2014 "),aK=a("a"),NIr=o("FlaxElectraForTokenClassification"),jIr=o(" (ELECTRA model)"),DIr=l(),uA=a("li"),ECe=a("strong"),GIr=o("roberta"),OIr=o(" \u2014 "),nK=a("a"),VIr=o("FlaxRobertaForTokenClassification"),XIr=o(" (RoBERTa model)"),zIr=l(),pA=a("li"),CCe=a("strong"),WIr=o("roformer"),QIr=o(" \u2014 "),sK=a("a"),HIr=o("FlaxRoFormerForTokenClassification"),UIr=o(" (RoFormer model)"),JIr=l(),_A=a("li"),wCe=a("strong"),YIr=o("xlm-roberta"),KIr=o(" \u2014 "),lK=a("a"),ZIr=o("FlaxXLMRobertaForTokenClassification"),eqr=o(" (XLM-RoBERTa model)"),oqr=l(),F(bA.$$.fragment),SNe=l(),Kc=a("h2"),vA=a("a"),ACe=a("span"),F(Hx.$$.fragment),rqr=l(),yCe=a("span"),tqr=o("FlaxAutoModelForMultipleChoice"),RNe=l(),vr=a("div"),F(Ux.$$.fragment),aqr=l(),Zc=a("p"),nqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iK=a("a"),sqr=o("from_pretrained()"),lqr=o(" class method or the "),dK=a("a"),iqr=o("from_config()"),dqr=o(` class
method.`),cqr=l(),Jx=a("p"),mqr=o("This class cannot be instantiated directly using "),LCe=a("code"),fqr=o("__init__()"),gqr=o(" (throws an error)."),hqr=l(),Ut=a("div"),F(Yx.$$.fragment),uqr=l(),xCe=a("p"),pqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_qr=l(),em=a("p"),bqr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),vqr=o("not"),Fqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Tqr=o("from_pretrained()"),Mqr=o(" to load the model weights."),Eqr=l(),F(FA.$$.fragment),Cqr=l(),Qr=a("div"),F(Kx.$$.fragment),wqr=l(),kCe=a("p"),Aqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yqr=l(),Mn=a("p"),Lqr=o("The model class to instantiate is selected based on the "),SCe=a("code"),xqr=o("model_type"),$qr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),Rqr=o("pretrained_model_name_or_path"),Pqr=o(":"),Bqr=l(),Ge=a("ul"),TA=a("li"),BCe=a("strong"),Iqr=o("albert"),qqr=o(" \u2014 "),mK=a("a"),Nqr=o("FlaxAlbertForMultipleChoice"),jqr=o(" (ALBERT model)"),Dqr=l(),MA=a("li"),ICe=a("strong"),Gqr=o("bert"),Oqr=o(" \u2014 "),fK=a("a"),Vqr=o("FlaxBertForMultipleChoice"),Xqr=o(" (BERT model)"),zqr=l(),EA=a("li"),qCe=a("strong"),Wqr=o("big_bird"),Qqr=o(" \u2014 "),gK=a("a"),Hqr=o("FlaxBigBirdForMultipleChoice"),Uqr=o(" (BigBird model)"),Jqr=l(),CA=a("li"),NCe=a("strong"),Yqr=o("distilbert"),Kqr=o(" \u2014 "),hK=a("a"),Zqr=o("FlaxDistilBertForMultipleChoice"),eNr=o(" (DistilBERT model)"),oNr=l(),wA=a("li"),jCe=a("strong"),rNr=o("electra"),tNr=o(" \u2014 "),uK=a("a"),aNr=o("FlaxElectraForMultipleChoice"),nNr=o(" (ELECTRA model)"),sNr=l(),AA=a("li"),DCe=a("strong"),lNr=o("roberta"),iNr=o(" \u2014 "),pK=a("a"),dNr=o("FlaxRobertaForMultipleChoice"),cNr=o(" (RoBERTa model)"),mNr=l(),yA=a("li"),GCe=a("strong"),fNr=o("roformer"),gNr=o(" \u2014 "),_K=a("a"),hNr=o("FlaxRoFormerForMultipleChoice"),uNr=o(" (RoFormer model)"),pNr=l(),LA=a("li"),OCe=a("strong"),_Nr=o("xlm-roberta"),bNr=o(" \u2014 "),bK=a("a"),vNr=o("FlaxXLMRobertaForMultipleChoice"),FNr=o(" (XLM-RoBERTa model)"),TNr=l(),F(xA.$$.fragment),PNe=l(),om=a("h2"),$A=a("a"),VCe=a("span"),F(Zx.$$.fragment),MNr=l(),XCe=a("span"),ENr=o("FlaxAutoModelForNextSentencePrediction"),BNe=l(),Fr=a("div"),F(e9.$$.fragment),CNr=l(),rm=a("p"),wNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vK=a("a"),ANr=o("from_pretrained()"),yNr=o(" class method or the "),FK=a("a"),LNr=o("from_config()"),xNr=o(` class
method.`),$Nr=l(),o9=a("p"),kNr=o("This class cannot be instantiated directly using "),zCe=a("code"),SNr=o("__init__()"),RNr=o(" (throws an error)."),PNr=l(),Jt=a("div"),F(r9.$$.fragment),BNr=l(),WCe=a("p"),INr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qNr=l(),tm=a("p"),NNr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),jNr=o("not"),DNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),GNr=o("from_pretrained()"),ONr=o(" to load the model weights."),VNr=l(),F(kA.$$.fragment),XNr=l(),Hr=a("div"),F(t9.$$.fragment),zNr=l(),HCe=a("p"),WNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QNr=l(),En=a("p"),HNr=o("The model class to instantiate is selected based on the "),UCe=a("code"),UNr=o("model_type"),JNr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),ZNr=o("pretrained_model_name_or_path"),ejr=o(":"),ojr=l(),KCe=a("ul"),SA=a("li"),ZCe=a("strong"),rjr=o("bert"),tjr=o(" \u2014 "),MK=a("a"),ajr=o("FlaxBertForNextSentencePrediction"),njr=o(" (BERT model)"),sjr=l(),F(RA.$$.fragment),INe=l(),am=a("h2"),PA=a("a"),e5e=a("span"),F(a9.$$.fragment),ljr=l(),o5e=a("span"),ijr=o("FlaxAutoModelForImageClassification"),qNe=l(),Tr=a("div"),F(n9.$$.fragment),djr=l(),nm=a("p"),cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EK=a("a"),mjr=o("from_pretrained()"),fjr=o(" class method or the "),CK=a("a"),gjr=o("from_config()"),hjr=o(` class
method.`),ujr=l(),s9=a("p"),pjr=o("This class cannot be instantiated directly using "),r5e=a("code"),_jr=o("__init__()"),bjr=o(" (throws an error)."),vjr=l(),Yt=a("div"),F(l9.$$.fragment),Fjr=l(),t5e=a("p"),Tjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mjr=l(),sm=a("p"),Ejr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),Cjr=o("not"),wjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),Ajr=o("from_pretrained()"),yjr=o(" to load the model weights."),Ljr=l(),F(BA.$$.fragment),xjr=l(),Ur=a("div"),F(i9.$$.fragment),$jr=l(),n5e=a("p"),kjr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Sjr=l(),Cn=a("p"),Rjr=o("The model class to instantiate is selected based on the "),s5e=a("code"),Pjr=o("model_type"),Bjr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),Njr=o("pretrained_model_name_or_path"),jjr=o(":"),Djr=l(),d9=a("ul"),IA=a("li"),d5e=a("strong"),Gjr=o("beit"),Ojr=o(" \u2014 "),AK=a("a"),Vjr=o("FlaxBeitForImageClassification"),Xjr=o(" (BEiT model)"),zjr=l(),qA=a("li"),c5e=a("strong"),Wjr=o("vit"),Qjr=o(" \u2014 "),yK=a("a"),Hjr=o("FlaxViTForImageClassification"),Ujr=o(" (ViT model)"),Jjr=l(),F(NA.$$.fragment),NNe=l(),lm=a("h2"),jA=a("a"),m5e=a("span"),F(c9.$$.fragment),Yjr=l(),f5e=a("span"),Kjr=o("FlaxAutoModelForVision2Seq"),jNe=l(),Mr=a("div"),F(m9.$$.fragment),Zjr=l(),im=a("p"),eDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=a("a"),oDr=o("from_pretrained()"),rDr=o(" class method or the "),xK=a("a"),tDr=o("from_config()"),aDr=o(` class
method.`),nDr=l(),f9=a("p"),sDr=o("This class cannot be instantiated directly using "),g5e=a("code"),lDr=o("__init__()"),iDr=o(" (throws an error)."),dDr=l(),Kt=a("div"),F(g9.$$.fragment),cDr=l(),h5e=a("p"),mDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fDr=l(),dm=a("p"),gDr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),hDr=o("not"),uDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),pDr=o("from_pretrained()"),_Dr=o(" to load the model weights."),bDr=l(),F(DA.$$.fragment),vDr=l(),Jr=a("div"),F(h9.$$.fragment),FDr=l(),p5e=a("p"),TDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MDr=l(),wn=a("p"),EDr=o("The model class to instantiate is selected based on the "),_5e=a("code"),CDr=o("model_type"),wDr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(":"),$Dr=l(),F5e=a("ul"),GA=a("li"),T5e=a("strong"),kDr=o("vision-encoder-decoder"),SDr=o(" \u2014 "),kK=a("a"),RDr=o("FlaxVisionEncoderDecoderModel"),PDr=o(" (Vision Encoder decoder model)"),BDr=l(),F(OA.$$.fragment),this.h()},l(m){const _=P8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var u9=s(u);f=n(u9,"A",{id:!0,class:!0,href:!0});var M5e=s(f);p=n(M5e,"SPAN",{});var E5e=s(p);T(d.$$.fragment,E5e),E5e.forEach(t),M5e.forEach(t),h=i(u9),Mo=n(u9,"SPAN",{});var C5e=s(Mo);ci=r(C5e,"Auto Classes"),C5e.forEach(t),u9.forEach(t),gm=i(m),rt=n(m,"P",{});var p9=s(rt);mi=r(p9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(p9,"CODE",{});var w5e=s(fi);sy=r(w5e,"from_pretrained()"),w5e.forEach(t),hm=r(p9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),p9.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var A5e=s(yn);ly=r(A5e,"AutoConfig"),A5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var y5e=s(xn);iy=r(y5e,"AutoModel"),y5e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var L5e=s($n);dy=r(L5e,"AutoTokenizer"),L5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),um=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var _9=s(Ae);y$=r(_9,"will create a model that is an instance of "),pi=n(_9,"A",{href:!0});var x5e=s(pi);L$=r(x5e,"BertModel"),x5e.forEach(t),x$=r(_9,"."),_9.forEach(t),Eo=i(m),wa=n(m,"P",{});var b9=s(wa);$$=r(b9,"There is one class of "),pm=n(b9,"CODE",{});var $5e=s(pm);k$=r($5e,"AutoModel"),$5e.forEach(t),HDe=r(b9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),b9.forEach(t),qIe=i(m),_i=n(m,"H2",{class:!0});var v9=s(_i);_m=n(v9,"A",{id:!0,class:!0,href:!0});var k5e=s(_m);Cee=n(k5e,"SPAN",{});var S5e=s(Cee);T(cy.$$.fragment,S5e),S5e.forEach(t),k5e.forEach(t),UDe=i(v9),wee=n(v9,"SPAN",{});var R5e=s(wee);JDe=r(R5e,"Extending the Auto Classes"),R5e.forEach(t),v9.forEach(t),NIe=i(m),kn=n(m,"P",{});var cm=s(kn);YDe=r(cm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aee=n(cm,"CODE",{});var P5e=s(Aee);KDe=r(P5e,"NewModel"),P5e.forEach(t),ZDe=r(cm,", make sure you have a "),yee=n(cm,"CODE",{});var B5e=s(yee);eGe=r(B5e,"NewModelConfig"),B5e.forEach(t),oGe=r(cm,` then you can add those to the auto
classes like this:`),cm.forEach(t),jIe=i(m),T(my.$$.fragment,m),DIe=i(m),S$=n(m,"P",{});var I5e=s(S$);rGe=r(I5e,"You will then be able to use the auto classes like you would usually do!"),I5e.forEach(t),GIe=i(m),T(bm.$$.fragment,m),OIe=i(m),bi=n(m,"H2",{class:!0});var F9=s(bi);vm=n(F9,"A",{id:!0,class:!0,href:!0});var q5e=s(vm);Lee=n(q5e,"SPAN",{});var N5e=s(Lee);T(fy.$$.fragment,N5e),N5e.forEach(t),q5e.forEach(t),tGe=i(F9),xee=n(F9,"SPAN",{});var j5e=s(xee);aGe=r(j5e,"AutoConfig"),j5e.forEach(t),F9.forEach(t),VIe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(gy.$$.fragment,et),nGe=i(et),hy=n(et,"P",{});var T9=s(hy);sGe=r(T9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R$=n(T9,"A",{href:!0});var D5e=s(R$);lGe=r(D5e,"from_pretrained()"),D5e.forEach(t),iGe=r(T9," class method."),T9.forEach(t),dGe=i(et),uy=n(et,"P",{});var M9=s(uy);cGe=r(M9,"This class cannot be instantiated directly using "),$ee=n(M9,"CODE",{});var G5e=s($ee);mGe=r(G5e,"__init__()"),G5e.forEach(t),fGe=r(M9," (throws an error)."),M9.forEach(t),gGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(py.$$.fragment,ot),hGe=i(ot),kee=n(ot,"P",{});var O5e=s(kee);uGe=r(O5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),O5e.forEach(t),pGe=i(ot),vi=n(ot,"P",{});var mm=s(vi);_Ge=r(mm,"The configuration class to instantiate is selected based on the "),See=n(mm,"CODE",{});var V5e=s(See);bGe=r(V5e,"model_type"),V5e.forEach(t),vGe=r(mm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ree=n(mm,"CODE",{});var X5e=s(Ree);FGe=r(X5e,"pretrained_model_name_or_path"),X5e.forEach(t),TGe=r(mm,":"),mm.forEach(t),MGe=i(ot),A=n(ot,"UL",{});var y=s(A);Fm=n(y,"LI",{});var VA=s(Fm);Pee=n(VA,"STRONG",{});var z5e=s(Pee);EGe=r(z5e,"albert"),z5e.forEach(t),CGe=r(VA," \u2014 "),P$=n(VA,"A",{href:!0});var W5e=s(P$);wGe=r(W5e,"AlbertConfig"),W5e.forEach(t),AGe=r(VA," (ALBERT model)"),VA.forEach(t),yGe=i(y),Tm=n(y,"LI",{});var XA=s(Tm);Bee=n(XA,"STRONG",{});var Q5e=s(Bee);LGe=r(Q5e,"bart"),Q5e.forEach(t),xGe=r(XA," \u2014 "),B$=n(XA,"A",{href:!0});var H5e=s(B$);$Ge=r(H5e,"BartConfig"),H5e.forEach(t),kGe=r(XA," (BART model)"),XA.forEach(t),SGe=i(y),Mm=n(y,"LI",{});var zA=s(Mm);Iee=n(zA,"STRONG",{});var U5e=s(Iee);RGe=r(U5e,"beit"),U5e.forEach(t),PGe=r(zA," \u2014 "),I$=n(zA,"A",{href:!0});var J5e=s(I$);BGe=r(J5e,"BeitConfig"),J5e.forEach(t),IGe=r(zA," (BEiT model)"),zA.forEach(t),qGe=i(y),Em=n(y,"LI",{});var WA=s(Em);qee=n(WA,"STRONG",{});var Y5e=s(qee);NGe=r(Y5e,"bert"),Y5e.forEach(t),jGe=r(WA," \u2014 "),q$=n(WA,"A",{href:!0});var K5e=s(q$);DGe=r(K5e,"BertConfig"),K5e.forEach(t),GGe=r(WA," (BERT model)"),WA.forEach(t),OGe=i(y),Cm=n(y,"LI",{});var QA=s(Cm);Nee=n(QA,"STRONG",{});var Z5e=s(Nee);VGe=r(Z5e,"bert-generation"),Z5e.forEach(t),XGe=r(QA," \u2014 "),N$=n(QA,"A",{href:!0});var e3e=s(N$);zGe=r(e3e,"BertGenerationConfig"),e3e.forEach(t),WGe=r(QA," (Bert Generation model)"),QA.forEach(t),QGe=i(y),wm=n(y,"LI",{});var HA=s(wm);jee=n(HA,"STRONG",{});var o3e=s(jee);HGe=r(o3e,"big_bird"),o3e.forEach(t),UGe=r(HA," \u2014 "),j$=n(HA,"A",{href:!0});var r3e=s(j$);JGe=r(r3e,"BigBirdConfig"),r3e.forEach(t),YGe=r(HA," (BigBird model)"),HA.forEach(t),KGe=i(y),Am=n(y,"LI",{});var UA=s(Am);Dee=n(UA,"STRONG",{});var t3e=s(Dee);ZGe=r(t3e,"bigbird_pegasus"),t3e.forEach(t),eOe=r(UA," \u2014 "),D$=n(UA,"A",{href:!0});var a3e=s(D$);oOe=r(a3e,"BigBirdPegasusConfig"),a3e.forEach(t),rOe=r(UA," (BigBirdPegasus model)"),UA.forEach(t),tOe=i(y),ym=n(y,"LI",{});var JA=s(ym);Gee=n(JA,"STRONG",{});var n3e=s(Gee);aOe=r(n3e,"blenderbot"),n3e.forEach(t),nOe=r(JA," \u2014 "),G$=n(JA,"A",{href:!0});var s3e=s(G$);sOe=r(s3e,"BlenderbotConfig"),s3e.forEach(t),lOe=r(JA," (Blenderbot model)"),JA.forEach(t),iOe=i(y),Lm=n(y,"LI",{});var YA=s(Lm);Oee=n(YA,"STRONG",{});var l3e=s(Oee);dOe=r(l3e,"blenderbot-small"),l3e.forEach(t),cOe=r(YA," \u2014 "),O$=n(YA,"A",{href:!0});var i3e=s(O$);mOe=r(i3e,"BlenderbotSmallConfig"),i3e.forEach(t),fOe=r(YA," (BlenderbotSmall model)"),YA.forEach(t),gOe=i(y),xm=n(y,"LI",{});var KA=s(xm);Vee=n(KA,"STRONG",{});var d3e=s(Vee);hOe=r(d3e,"camembert"),d3e.forEach(t),uOe=r(KA," \u2014 "),V$=n(KA,"A",{href:!0});var c3e=s(V$);pOe=r(c3e,"CamembertConfig"),c3e.forEach(t),_Oe=r(KA," (CamemBERT model)"),KA.forEach(t),bOe=i(y),$m=n(y,"LI",{});var ZA=s($m);Xee=n(ZA,"STRONG",{});var m3e=s(Xee);vOe=r(m3e,"canine"),m3e.forEach(t),FOe=r(ZA," \u2014 "),X$=n(ZA,"A",{href:!0});var f3e=s(X$);TOe=r(f3e,"CanineConfig"),f3e.forEach(t),MOe=r(ZA," (Canine model)"),ZA.forEach(t),EOe=i(y),km=n(y,"LI",{});var e0=s(km);zee=n(e0,"STRONG",{});var g3e=s(zee);COe=r(g3e,"clip"),g3e.forEach(t),wOe=r(e0," \u2014 "),z$=n(e0,"A",{href:!0});var h3e=s(z$);AOe=r(h3e,"CLIPConfig"),h3e.forEach(t),yOe=r(e0," (CLIP model)"),e0.forEach(t),LOe=i(y),Sm=n(y,"LI",{});var o0=s(Sm);Wee=n(o0,"STRONG",{});var u3e=s(Wee);xOe=r(u3e,"convbert"),u3e.forEach(t),$Oe=r(o0," \u2014 "),W$=n(o0,"A",{href:!0});var p3e=s(W$);kOe=r(p3e,"ConvBertConfig"),p3e.forEach(t),SOe=r(o0," (ConvBERT model)"),o0.forEach(t),ROe=i(y),Rm=n(y,"LI",{});var r0=s(Rm);Qee=n(r0,"STRONG",{});var _3e=s(Qee);POe=r(_3e,"convnext"),_3e.forEach(t),BOe=r(r0," \u2014 "),Q$=n(r0,"A",{href:!0});var b3e=s(Q$);IOe=r(b3e,"ConvNextConfig"),b3e.forEach(t),qOe=r(r0," (ConvNext model)"),r0.forEach(t),NOe=i(y),Pm=n(y,"LI",{});var t0=s(Pm);Hee=n(t0,"STRONG",{});var v3e=s(Hee);jOe=r(v3e,"ctrl"),v3e.forEach(t),DOe=r(t0," \u2014 "),H$=n(t0,"A",{href:!0});var F3e=s(H$);GOe=r(F3e,"CTRLConfig"),F3e.forEach(t),OOe=r(t0," (CTRL model)"),t0.forEach(t),VOe=i(y),Bm=n(y,"LI",{});var a0=s(Bm);Uee=n(a0,"STRONG",{});var T3e=s(Uee);XOe=r(T3e,"data2vec-audio"),T3e.forEach(t),zOe=r(a0," \u2014 "),U$=n(a0,"A",{href:!0});var M3e=s(U$);WOe=r(M3e,"Data2VecAudioConfig"),M3e.forEach(t),QOe=r(a0," (Data2VecAudio model)"),a0.forEach(t),HOe=i(y),Im=n(y,"LI",{});var n0=s(Im);Jee=n(n0,"STRONG",{});var E3e=s(Jee);UOe=r(E3e,"data2vec-text"),E3e.forEach(t),JOe=r(n0," \u2014 "),J$=n(n0,"A",{href:!0});var C3e=s(J$);YOe=r(C3e,"Data2VecTextConfig"),C3e.forEach(t),KOe=r(n0," (Data2VecText model)"),n0.forEach(t),ZOe=i(y),qm=n(y,"LI",{});var s0=s(qm);Yee=n(s0,"STRONG",{});var w3e=s(Yee);eVe=r(w3e,"data2vec-vision"),w3e.forEach(t),oVe=r(s0," \u2014 "),Y$=n(s0,"A",{href:!0});var A3e=s(Y$);rVe=r(A3e,"Data2VecVisionConfig"),A3e.forEach(t),tVe=r(s0," (Data2VecVision model)"),s0.forEach(t),aVe=i(y),Nm=n(y,"LI",{});var l0=s(Nm);Kee=n(l0,"STRONG",{});var y3e=s(Kee);nVe=r(y3e,"deberta"),y3e.forEach(t),sVe=r(l0," \u2014 "),K$=n(l0,"A",{href:!0});var L3e=s(K$);lVe=r(L3e,"DebertaConfig"),L3e.forEach(t),iVe=r(l0," (DeBERTa model)"),l0.forEach(t),dVe=i(y),jm=n(y,"LI",{});var i0=s(jm);Zee=n(i0,"STRONG",{});var x3e=s(Zee);cVe=r(x3e,"deberta-v2"),x3e.forEach(t),mVe=r(i0," \u2014 "),Z$=n(i0,"A",{href:!0});var $3e=s(Z$);fVe=r($3e,"DebertaV2Config"),$3e.forEach(t),gVe=r(i0," (DeBERTa-v2 model)"),i0.forEach(t),hVe=i(y),Dm=n(y,"LI",{});var d0=s(Dm);eoe=n(d0,"STRONG",{});var k3e=s(eoe);uVe=r(k3e,"decision_transformer"),k3e.forEach(t),pVe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var S3e=s(ek);_Ve=r(S3e,"DecisionTransformerConfig"),S3e.forEach(t),bVe=r(d0," (Decision Transformer model)"),d0.forEach(t),vVe=i(y),Gm=n(y,"LI",{});var c0=s(Gm);ooe=n(c0,"STRONG",{});var R3e=s(ooe);FVe=r(R3e,"deit"),R3e.forEach(t),TVe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var P3e=s(ok);MVe=r(P3e,"DeiTConfig"),P3e.forEach(t),EVe=r(c0," (DeiT model)"),c0.forEach(t),CVe=i(y),Om=n(y,"LI",{});var m0=s(Om);roe=n(m0,"STRONG",{});var B3e=s(roe);wVe=r(B3e,"detr"),B3e.forEach(t),AVe=r(m0," \u2014 "),rk=n(m0,"A",{href:!0});var qDr=s(rk);yVe=r(qDr,"DetrConfig"),qDr.forEach(t),LVe=r(m0," (DETR model)"),m0.forEach(t),xVe=i(y),Vm=n(y,"LI",{});var I3e=s(Vm);toe=n(I3e,"STRONG",{});var NDr=s(toe);$Ve=r(NDr,"distilbert"),NDr.forEach(t),kVe=r(I3e," \u2014 "),tk=n(I3e,"A",{href:!0});var jDr=s(tk);SVe=r(jDr,"DistilBertConfig"),jDr.forEach(t),RVe=r(I3e," (DistilBERT model)"),I3e.forEach(t),PVe=i(y),Xm=n(y,"LI",{});var q3e=s(Xm);aoe=n(q3e,"STRONG",{});var DDr=s(aoe);BVe=r(DDr,"dpr"),DDr.forEach(t),IVe=r(q3e," \u2014 "),ak=n(q3e,"A",{href:!0});var GDr=s(ak);qVe=r(GDr,"DPRConfig"),GDr.forEach(t),NVe=r(q3e," (DPR model)"),q3e.forEach(t),jVe=i(y),zm=n(y,"LI",{});var N3e=s(zm);noe=n(N3e,"STRONG",{});var ODr=s(noe);DVe=r(ODr,"dpt"),ODr.forEach(t),GVe=r(N3e," \u2014 "),nk=n(N3e,"A",{href:!0});var VDr=s(nk);OVe=r(VDr,"DPTConfig"),VDr.forEach(t),VVe=r(N3e," (DPT model)"),N3e.forEach(t),XVe=i(y),Wm=n(y,"LI",{});var j3e=s(Wm);soe=n(j3e,"STRONG",{});var XDr=s(soe);zVe=r(XDr,"electra"),XDr.forEach(t),WVe=r(j3e," \u2014 "),sk=n(j3e,"A",{href:!0});var zDr=s(sk);QVe=r(zDr,"ElectraConfig"),zDr.forEach(t),HVe=r(j3e," (ELECTRA model)"),j3e.forEach(t),UVe=i(y),Qm=n(y,"LI",{});var D3e=s(Qm);loe=n(D3e,"STRONG",{});var WDr=s(loe);JVe=r(WDr,"encoder-decoder"),WDr.forEach(t),YVe=r(D3e," \u2014 "),lk=n(D3e,"A",{href:!0});var QDr=s(lk);KVe=r(QDr,"EncoderDecoderConfig"),QDr.forEach(t),ZVe=r(D3e," (Encoder decoder model)"),D3e.forEach(t),eXe=i(y),Hm=n(y,"LI",{});var G3e=s(Hm);ioe=n(G3e,"STRONG",{});var HDr=s(ioe);oXe=r(HDr,"flaubert"),HDr.forEach(t),rXe=r(G3e," \u2014 "),ik=n(G3e,"A",{href:!0});var UDr=s(ik);tXe=r(UDr,"FlaubertConfig"),UDr.forEach(t),aXe=r(G3e," (FlauBERT model)"),G3e.forEach(t),nXe=i(y),Um=n(y,"LI",{});var O3e=s(Um);doe=n(O3e,"STRONG",{});var JDr=s(doe);sXe=r(JDr,"flava"),JDr.forEach(t),lXe=r(O3e," \u2014 "),dk=n(O3e,"A",{href:!0});var YDr=s(dk);iXe=r(YDr,"FlavaConfig"),YDr.forEach(t),dXe=r(O3e," (Flava model)"),O3e.forEach(t),cXe=i(y),Jm=n(y,"LI",{});var V3e=s(Jm);coe=n(V3e,"STRONG",{});var KDr=s(coe);mXe=r(KDr,"fnet"),KDr.forEach(t),fXe=r(V3e," \u2014 "),ck=n(V3e,"A",{href:!0});var ZDr=s(ck);gXe=r(ZDr,"FNetConfig"),ZDr.forEach(t),hXe=r(V3e," (FNet model)"),V3e.forEach(t),uXe=i(y),Ym=n(y,"LI",{});var X3e=s(Ym);moe=n(X3e,"STRONG",{});var eGr=s(moe);pXe=r(eGr,"fsmt"),eGr.forEach(t),_Xe=r(X3e," \u2014 "),mk=n(X3e,"A",{href:!0});var oGr=s(mk);bXe=r(oGr,"FSMTConfig"),oGr.forEach(t),vXe=r(X3e," (FairSeq Machine-Translation model)"),X3e.forEach(t),FXe=i(y),Km=n(y,"LI",{});var z3e=s(Km);foe=n(z3e,"STRONG",{});var rGr=s(foe);TXe=r(rGr,"funnel"),rGr.forEach(t),MXe=r(z3e," \u2014 "),fk=n(z3e,"A",{href:!0});var tGr=s(fk);EXe=r(tGr,"FunnelConfig"),tGr.forEach(t),CXe=r(z3e," (Funnel Transformer model)"),z3e.forEach(t),wXe=i(y),Zm=n(y,"LI",{});var W3e=s(Zm);goe=n(W3e,"STRONG",{});var aGr=s(goe);AXe=r(aGr,"glpn"),aGr.forEach(t),yXe=r(W3e," \u2014 "),gk=n(W3e,"A",{href:!0});var nGr=s(gk);LXe=r(nGr,"GLPNConfig"),nGr.forEach(t),xXe=r(W3e," (GLPN model)"),W3e.forEach(t),$Xe=i(y),ef=n(y,"LI",{});var Q3e=s(ef);hoe=n(Q3e,"STRONG",{});var sGr=s(hoe);kXe=r(sGr,"gpt2"),sGr.forEach(t),SXe=r(Q3e," \u2014 "),hk=n(Q3e,"A",{href:!0});var lGr=s(hk);RXe=r(lGr,"GPT2Config"),lGr.forEach(t),PXe=r(Q3e," (OpenAI GPT-2 model)"),Q3e.forEach(t),BXe=i(y),of=n(y,"LI",{});var H3e=s(of);uoe=n(H3e,"STRONG",{});var iGr=s(uoe);IXe=r(iGr,"gpt_neo"),iGr.forEach(t),qXe=r(H3e," \u2014 "),uk=n(H3e,"A",{href:!0});var dGr=s(uk);NXe=r(dGr,"GPTNeoConfig"),dGr.forEach(t),jXe=r(H3e," (GPT Neo model)"),H3e.forEach(t),DXe=i(y),rf=n(y,"LI",{});var U3e=s(rf);poe=n(U3e,"STRONG",{});var cGr=s(poe);GXe=r(cGr,"gptj"),cGr.forEach(t),OXe=r(U3e," \u2014 "),pk=n(U3e,"A",{href:!0});var mGr=s(pk);VXe=r(mGr,"GPTJConfig"),mGr.forEach(t),XXe=r(U3e," (GPT-J model)"),U3e.forEach(t),zXe=i(y),tf=n(y,"LI",{});var J3e=s(tf);_oe=n(J3e,"STRONG",{});var fGr=s(_oe);WXe=r(fGr,"hubert"),fGr.forEach(t),QXe=r(J3e," \u2014 "),_k=n(J3e,"A",{href:!0});var gGr=s(_k);HXe=r(gGr,"HubertConfig"),gGr.forEach(t),UXe=r(J3e," (Hubert model)"),J3e.forEach(t),JXe=i(y),af=n(y,"LI",{});var Y3e=s(af);boe=n(Y3e,"STRONG",{});var hGr=s(boe);YXe=r(hGr,"ibert"),hGr.forEach(t),KXe=r(Y3e," \u2014 "),bk=n(Y3e,"A",{href:!0});var uGr=s(bk);ZXe=r(uGr,"IBertConfig"),uGr.forEach(t),eze=r(Y3e," (I-BERT model)"),Y3e.forEach(t),oze=i(y),nf=n(y,"LI",{});var K3e=s(nf);voe=n(K3e,"STRONG",{});var pGr=s(voe);rze=r(pGr,"imagegpt"),pGr.forEach(t),tze=r(K3e," \u2014 "),vk=n(K3e,"A",{href:!0});var _Gr=s(vk);aze=r(_Gr,"ImageGPTConfig"),_Gr.forEach(t),nze=r(K3e," (ImageGPT model)"),K3e.forEach(t),sze=i(y),sf=n(y,"LI",{});var Z3e=s(sf);Foe=n(Z3e,"STRONG",{});var bGr=s(Foe);lze=r(bGr,"layoutlm"),bGr.forEach(t),ize=r(Z3e," \u2014 "),Fk=n(Z3e,"A",{href:!0});var vGr=s(Fk);dze=r(vGr,"LayoutLMConfig"),vGr.forEach(t),cze=r(Z3e," (LayoutLM model)"),Z3e.forEach(t),mze=i(y),lf=n(y,"LI",{});var ewe=s(lf);Toe=n(ewe,"STRONG",{});var FGr=s(Toe);fze=r(FGr,"layoutlmv2"),FGr.forEach(t),gze=r(ewe," \u2014 "),Tk=n(ewe,"A",{href:!0});var TGr=s(Tk);hze=r(TGr,"LayoutLMv2Config"),TGr.forEach(t),uze=r(ewe," (LayoutLMv2 model)"),ewe.forEach(t),pze=i(y),df=n(y,"LI",{});var owe=s(df);Moe=n(owe,"STRONG",{});var MGr=s(Moe);_ze=r(MGr,"led"),MGr.forEach(t),bze=r(owe," \u2014 "),Mk=n(owe,"A",{href:!0});var EGr=s(Mk);vze=r(EGr,"LEDConfig"),EGr.forEach(t),Fze=r(owe," (LED model)"),owe.forEach(t),Tze=i(y),cf=n(y,"LI",{});var rwe=s(cf);Eoe=n(rwe,"STRONG",{});var CGr=s(Eoe);Mze=r(CGr,"longformer"),CGr.forEach(t),Eze=r(rwe," \u2014 "),Ek=n(rwe,"A",{href:!0});var wGr=s(Ek);Cze=r(wGr,"LongformerConfig"),wGr.forEach(t),wze=r(rwe," (Longformer model)"),rwe.forEach(t),Aze=i(y),mf=n(y,"LI",{});var twe=s(mf);Coe=n(twe,"STRONG",{});var AGr=s(Coe);yze=r(AGr,"luke"),AGr.forEach(t),Lze=r(twe," \u2014 "),Ck=n(twe,"A",{href:!0});var yGr=s(Ck);xze=r(yGr,"LukeConfig"),yGr.forEach(t),$ze=r(twe," (LUKE model)"),twe.forEach(t),kze=i(y),ff=n(y,"LI",{});var awe=s(ff);woe=n(awe,"STRONG",{});var LGr=s(woe);Sze=r(LGr,"lxmert"),LGr.forEach(t),Rze=r(awe," \u2014 "),wk=n(awe,"A",{href:!0});var xGr=s(wk);Pze=r(xGr,"LxmertConfig"),xGr.forEach(t),Bze=r(awe," (LXMERT model)"),awe.forEach(t),Ize=i(y),gf=n(y,"LI",{});var nwe=s(gf);Aoe=n(nwe,"STRONG",{});var $Gr=s(Aoe);qze=r($Gr,"m2m_100"),$Gr.forEach(t),Nze=r(nwe," \u2014 "),Ak=n(nwe,"A",{href:!0});var kGr=s(Ak);jze=r(kGr,"M2M100Config"),kGr.forEach(t),Dze=r(nwe," (M2M100 model)"),nwe.forEach(t),Gze=i(y),hf=n(y,"LI",{});var swe=s(hf);yoe=n(swe,"STRONG",{});var SGr=s(yoe);Oze=r(SGr,"marian"),SGr.forEach(t),Vze=r(swe," \u2014 "),yk=n(swe,"A",{href:!0});var RGr=s(yk);Xze=r(RGr,"MarianConfig"),RGr.forEach(t),zze=r(swe," (Marian model)"),swe.forEach(t),Wze=i(y),uf=n(y,"LI",{});var lwe=s(uf);Loe=n(lwe,"STRONG",{});var PGr=s(Loe);Qze=r(PGr,"maskformer"),PGr.forEach(t),Hze=r(lwe," \u2014 "),Lk=n(lwe,"A",{href:!0});var BGr=s(Lk);Uze=r(BGr,"MaskFormerConfig"),BGr.forEach(t),Jze=r(lwe," (MaskFormer model)"),lwe.forEach(t),Yze=i(y),pf=n(y,"LI",{});var iwe=s(pf);xoe=n(iwe,"STRONG",{});var IGr=s(xoe);Kze=r(IGr,"mbart"),IGr.forEach(t),Zze=r(iwe," \u2014 "),xk=n(iwe,"A",{href:!0});var qGr=s(xk);eWe=r(qGr,"MBartConfig"),qGr.forEach(t),oWe=r(iwe," (mBART model)"),iwe.forEach(t),rWe=i(y),_f=n(y,"LI",{});var dwe=s(_f);$oe=n(dwe,"STRONG",{});var NGr=s($oe);tWe=r(NGr,"megatron-bert"),NGr.forEach(t),aWe=r(dwe," \u2014 "),$k=n(dwe,"A",{href:!0});var jGr=s($k);nWe=r(jGr,"MegatronBertConfig"),jGr.forEach(t),sWe=r(dwe," (MegatronBert model)"),dwe.forEach(t),lWe=i(y),bf=n(y,"LI",{});var cwe=s(bf);koe=n(cwe,"STRONG",{});var DGr=s(koe);iWe=r(DGr,"mobilebert"),DGr.forEach(t),dWe=r(cwe," \u2014 "),kk=n(cwe,"A",{href:!0});var GGr=s(kk);cWe=r(GGr,"MobileBertConfig"),GGr.forEach(t),mWe=r(cwe," (MobileBERT model)"),cwe.forEach(t),fWe=i(y),vf=n(y,"LI",{});var mwe=s(vf);Soe=n(mwe,"STRONG",{});var OGr=s(Soe);gWe=r(OGr,"mpnet"),OGr.forEach(t),hWe=r(mwe," \u2014 "),Sk=n(mwe,"A",{href:!0});var VGr=s(Sk);uWe=r(VGr,"MPNetConfig"),VGr.forEach(t),pWe=r(mwe," (MPNet model)"),mwe.forEach(t),_We=i(y),Ff=n(y,"LI",{});var fwe=s(Ff);Roe=n(fwe,"STRONG",{});var XGr=s(Roe);bWe=r(XGr,"mt5"),XGr.forEach(t),vWe=r(fwe," \u2014 "),Rk=n(fwe,"A",{href:!0});var zGr=s(Rk);FWe=r(zGr,"MT5Config"),zGr.forEach(t),TWe=r(fwe," (mT5 model)"),fwe.forEach(t),MWe=i(y),Tf=n(y,"LI",{});var gwe=s(Tf);Poe=n(gwe,"STRONG",{});var WGr=s(Poe);EWe=r(WGr,"nystromformer"),WGr.forEach(t),CWe=r(gwe," \u2014 "),Pk=n(gwe,"A",{href:!0});var QGr=s(Pk);wWe=r(QGr,"NystromformerConfig"),QGr.forEach(t),AWe=r(gwe," (Nystromformer model)"),gwe.forEach(t),yWe=i(y),Mf=n(y,"LI",{});var hwe=s(Mf);Boe=n(hwe,"STRONG",{});var HGr=s(Boe);LWe=r(HGr,"openai-gpt"),HGr.forEach(t),xWe=r(hwe," \u2014 "),Bk=n(hwe,"A",{href:!0});var UGr=s(Bk);$We=r(UGr,"OpenAIGPTConfig"),UGr.forEach(t),kWe=r(hwe," (OpenAI GPT model)"),hwe.forEach(t),SWe=i(y),Ef=n(y,"LI",{});var uwe=s(Ef);Ioe=n(uwe,"STRONG",{});var JGr=s(Ioe);RWe=r(JGr,"opt"),JGr.forEach(t),PWe=r(uwe," \u2014 "),Ik=n(uwe,"A",{href:!0});var YGr=s(Ik);BWe=r(YGr,"OPTConfig"),YGr.forEach(t),IWe=r(uwe," (OPT model)"),uwe.forEach(t),qWe=i(y),Cf=n(y,"LI",{});var pwe=s(Cf);qoe=n(pwe,"STRONG",{});var KGr=s(qoe);NWe=r(KGr,"pegasus"),KGr.forEach(t),jWe=r(pwe," \u2014 "),qk=n(pwe,"A",{href:!0});var ZGr=s(qk);DWe=r(ZGr,"PegasusConfig"),ZGr.forEach(t),GWe=r(pwe," (Pegasus model)"),pwe.forEach(t),OWe=i(y),wf=n(y,"LI",{});var _we=s(wf);Noe=n(_we,"STRONG",{});var eOr=s(Noe);VWe=r(eOr,"perceiver"),eOr.forEach(t),XWe=r(_we," \u2014 "),Nk=n(_we,"A",{href:!0});var oOr=s(Nk);zWe=r(oOr,"PerceiverConfig"),oOr.forEach(t),WWe=r(_we," (Perceiver model)"),_we.forEach(t),QWe=i(y),Af=n(y,"LI",{});var bwe=s(Af);joe=n(bwe,"STRONG",{});var rOr=s(joe);HWe=r(rOr,"plbart"),rOr.forEach(t),UWe=r(bwe," \u2014 "),jk=n(bwe,"A",{href:!0});var tOr=s(jk);JWe=r(tOr,"PLBartConfig"),tOr.forEach(t),YWe=r(bwe," (PLBart model)"),bwe.forEach(t),KWe=i(y),yf=n(y,"LI",{});var vwe=s(yf);Doe=n(vwe,"STRONG",{});var aOr=s(Doe);ZWe=r(aOr,"poolformer"),aOr.forEach(t),eQe=r(vwe," \u2014 "),Dk=n(vwe,"A",{href:!0});var nOr=s(Dk);oQe=r(nOr,"PoolFormerConfig"),nOr.forEach(t),rQe=r(vwe," (PoolFormer model)"),vwe.forEach(t),tQe=i(y),Lf=n(y,"LI",{});var Fwe=s(Lf);Goe=n(Fwe,"STRONG",{});var sOr=s(Goe);aQe=r(sOr,"prophetnet"),sOr.forEach(t),nQe=r(Fwe," \u2014 "),Gk=n(Fwe,"A",{href:!0});var lOr=s(Gk);sQe=r(lOr,"ProphetNetConfig"),lOr.forEach(t),lQe=r(Fwe," (ProphetNet model)"),Fwe.forEach(t),iQe=i(y),xf=n(y,"LI",{});var Twe=s(xf);Ooe=n(Twe,"STRONG",{});var iOr=s(Ooe);dQe=r(iOr,"qdqbert"),iOr.forEach(t),cQe=r(Twe," \u2014 "),Ok=n(Twe,"A",{href:!0});var dOr=s(Ok);mQe=r(dOr,"QDQBertConfig"),dOr.forEach(t),fQe=r(Twe," (QDQBert model)"),Twe.forEach(t),gQe=i(y),$f=n(y,"LI",{});var Mwe=s($f);Voe=n(Mwe,"STRONG",{});var cOr=s(Voe);hQe=r(cOr,"rag"),cOr.forEach(t),uQe=r(Mwe," \u2014 "),Vk=n(Mwe,"A",{href:!0});var mOr=s(Vk);pQe=r(mOr,"RagConfig"),mOr.forEach(t),_Qe=r(Mwe," (RAG model)"),Mwe.forEach(t),bQe=i(y),kf=n(y,"LI",{});var Ewe=s(kf);Xoe=n(Ewe,"STRONG",{});var fOr=s(Xoe);vQe=r(fOr,"realm"),fOr.forEach(t),FQe=r(Ewe," \u2014 "),Xk=n(Ewe,"A",{href:!0});var gOr=s(Xk);TQe=r(gOr,"RealmConfig"),gOr.forEach(t),MQe=r(Ewe," (Realm model)"),Ewe.forEach(t),EQe=i(y),Sf=n(y,"LI",{});var Cwe=s(Sf);zoe=n(Cwe,"STRONG",{});var hOr=s(zoe);CQe=r(hOr,"reformer"),hOr.forEach(t),wQe=r(Cwe," \u2014 "),zk=n(Cwe,"A",{href:!0});var uOr=s(zk);AQe=r(uOr,"ReformerConfig"),uOr.forEach(t),yQe=r(Cwe," (Reformer model)"),Cwe.forEach(t),LQe=i(y),Rf=n(y,"LI",{});var wwe=s(Rf);Woe=n(wwe,"STRONG",{});var pOr=s(Woe);xQe=r(pOr,"regnet"),pOr.forEach(t),$Qe=r(wwe," \u2014 "),Wk=n(wwe,"A",{href:!0});var _Or=s(Wk);kQe=r(_Or,"RegNetConfig"),_Or.forEach(t),SQe=r(wwe," (RegNet model)"),wwe.forEach(t),RQe=i(y),Pf=n(y,"LI",{});var Awe=s(Pf);Qoe=n(Awe,"STRONG",{});var bOr=s(Qoe);PQe=r(bOr,"rembert"),bOr.forEach(t),BQe=r(Awe," \u2014 "),Qk=n(Awe,"A",{href:!0});var vOr=s(Qk);IQe=r(vOr,"RemBertConfig"),vOr.forEach(t),qQe=r(Awe," (RemBERT model)"),Awe.forEach(t),NQe=i(y),Bf=n(y,"LI",{});var ywe=s(Bf);Hoe=n(ywe,"STRONG",{});var FOr=s(Hoe);jQe=r(FOr,"resnet"),FOr.forEach(t),DQe=r(ywe," \u2014 "),Hk=n(ywe,"A",{href:!0});var TOr=s(Hk);GQe=r(TOr,"ResNetConfig"),TOr.forEach(t),OQe=r(ywe," (ResNet model)"),ywe.forEach(t),VQe=i(y),If=n(y,"LI",{});var Lwe=s(If);Uoe=n(Lwe,"STRONG",{});var MOr=s(Uoe);XQe=r(MOr,"retribert"),MOr.forEach(t),zQe=r(Lwe," \u2014 "),Uk=n(Lwe,"A",{href:!0});var EOr=s(Uk);WQe=r(EOr,"RetriBertConfig"),EOr.forEach(t),QQe=r(Lwe," (RetriBERT model)"),Lwe.forEach(t),HQe=i(y),qf=n(y,"LI",{});var xwe=s(qf);Joe=n(xwe,"STRONG",{});var COr=s(Joe);UQe=r(COr,"roberta"),COr.forEach(t),JQe=r(xwe," \u2014 "),Jk=n(xwe,"A",{href:!0});var wOr=s(Jk);YQe=r(wOr,"RobertaConfig"),wOr.forEach(t),KQe=r(xwe," (RoBERTa model)"),xwe.forEach(t),ZQe=i(y),Nf=n(y,"LI",{});var $we=s(Nf);Yoe=n($we,"STRONG",{});var AOr=s(Yoe);eHe=r(AOr,"roformer"),AOr.forEach(t),oHe=r($we," \u2014 "),Yk=n($we,"A",{href:!0});var yOr=s(Yk);rHe=r(yOr,"RoFormerConfig"),yOr.forEach(t),tHe=r($we," (RoFormer model)"),$we.forEach(t),aHe=i(y),jf=n(y,"LI",{});var kwe=s(jf);Koe=n(kwe,"STRONG",{});var LOr=s(Koe);nHe=r(LOr,"segformer"),LOr.forEach(t),sHe=r(kwe," \u2014 "),Kk=n(kwe,"A",{href:!0});var xOr=s(Kk);lHe=r(xOr,"SegformerConfig"),xOr.forEach(t),iHe=r(kwe," (SegFormer model)"),kwe.forEach(t),dHe=i(y),Df=n(y,"LI",{});var Swe=s(Df);Zoe=n(Swe,"STRONG",{});var $Or=s(Zoe);cHe=r($Or,"sew"),$Or.forEach(t),mHe=r(Swe," \u2014 "),Zk=n(Swe,"A",{href:!0});var kOr=s(Zk);fHe=r(kOr,"SEWConfig"),kOr.forEach(t),gHe=r(Swe," (SEW model)"),Swe.forEach(t),hHe=i(y),Gf=n(y,"LI",{});var Rwe=s(Gf);ere=n(Rwe,"STRONG",{});var SOr=s(ere);uHe=r(SOr,"sew-d"),SOr.forEach(t),pHe=r(Rwe," \u2014 "),eS=n(Rwe,"A",{href:!0});var ROr=s(eS);_He=r(ROr,"SEWDConfig"),ROr.forEach(t),bHe=r(Rwe," (SEW-D model)"),Rwe.forEach(t),vHe=i(y),Of=n(y,"LI",{});var Pwe=s(Of);ore=n(Pwe,"STRONG",{});var POr=s(ore);FHe=r(POr,"speech-encoder-decoder"),POr.forEach(t),THe=r(Pwe," \u2014 "),oS=n(Pwe,"A",{href:!0});var BOr=s(oS);MHe=r(BOr,"SpeechEncoderDecoderConfig"),BOr.forEach(t),EHe=r(Pwe," (Speech Encoder decoder model)"),Pwe.forEach(t),CHe=i(y),Vf=n(y,"LI",{});var Bwe=s(Vf);rre=n(Bwe,"STRONG",{});var IOr=s(rre);wHe=r(IOr,"speech_to_text"),IOr.forEach(t),AHe=r(Bwe," \u2014 "),rS=n(Bwe,"A",{href:!0});var qOr=s(rS);yHe=r(qOr,"Speech2TextConfig"),qOr.forEach(t),LHe=r(Bwe," (Speech2Text model)"),Bwe.forEach(t),xHe=i(y),Xf=n(y,"LI",{});var Iwe=s(Xf);tre=n(Iwe,"STRONG",{});var NOr=s(tre);$He=r(NOr,"speech_to_text_2"),NOr.forEach(t),kHe=r(Iwe," \u2014 "),tS=n(Iwe,"A",{href:!0});var jOr=s(tS);SHe=r(jOr,"Speech2Text2Config"),jOr.forEach(t),RHe=r(Iwe," (Speech2Text2 model)"),Iwe.forEach(t),PHe=i(y),zf=n(y,"LI",{});var qwe=s(zf);are=n(qwe,"STRONG",{});var DOr=s(are);BHe=r(DOr,"splinter"),DOr.forEach(t),IHe=r(qwe," \u2014 "),aS=n(qwe,"A",{href:!0});var GOr=s(aS);qHe=r(GOr,"SplinterConfig"),GOr.forEach(t),NHe=r(qwe," (Splinter model)"),qwe.forEach(t),jHe=i(y),Wf=n(y,"LI",{});var Nwe=s(Wf);nre=n(Nwe,"STRONG",{});var OOr=s(nre);DHe=r(OOr,"squeezebert"),OOr.forEach(t),GHe=r(Nwe," \u2014 "),nS=n(Nwe,"A",{href:!0});var VOr=s(nS);OHe=r(VOr,"SqueezeBertConfig"),VOr.forEach(t),VHe=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),XHe=i(y),Qf=n(y,"LI",{});var jwe=s(Qf);sre=n(jwe,"STRONG",{});var XOr=s(sre);zHe=r(XOr,"swin"),XOr.forEach(t),WHe=r(jwe," \u2014 "),sS=n(jwe,"A",{href:!0});var zOr=s(sS);QHe=r(zOr,"SwinConfig"),zOr.forEach(t),HHe=r(jwe," (Swin model)"),jwe.forEach(t),UHe=i(y),Hf=n(y,"LI",{});var Dwe=s(Hf);lre=n(Dwe,"STRONG",{});var WOr=s(lre);JHe=r(WOr,"t5"),WOr.forEach(t),YHe=r(Dwe," \u2014 "),lS=n(Dwe,"A",{href:!0});var QOr=s(lS);KHe=r(QOr,"T5Config"),QOr.forEach(t),ZHe=r(Dwe," (T5 model)"),Dwe.forEach(t),eUe=i(y),Uf=n(y,"LI",{});var Gwe=s(Uf);ire=n(Gwe,"STRONG",{});var HOr=s(ire);oUe=r(HOr,"tapas"),HOr.forEach(t),rUe=r(Gwe," \u2014 "),iS=n(Gwe,"A",{href:!0});var UOr=s(iS);tUe=r(UOr,"TapasConfig"),UOr.forEach(t),aUe=r(Gwe," (TAPAS model)"),Gwe.forEach(t),nUe=i(y),Jf=n(y,"LI",{});var Owe=s(Jf);dre=n(Owe,"STRONG",{});var JOr=s(dre);sUe=r(JOr,"trajectory_transformer"),JOr.forEach(t),lUe=r(Owe," \u2014 "),dS=n(Owe,"A",{href:!0});var YOr=s(dS);iUe=r(YOr,"TrajectoryTransformerConfig"),YOr.forEach(t),dUe=r(Owe," (Trajectory Transformer model)"),Owe.forEach(t),cUe=i(y),Yf=n(y,"LI",{});var Vwe=s(Yf);cre=n(Vwe,"STRONG",{});var KOr=s(cre);mUe=r(KOr,"transfo-xl"),KOr.forEach(t),fUe=r(Vwe," \u2014 "),cS=n(Vwe,"A",{href:!0});var ZOr=s(cS);gUe=r(ZOr,"TransfoXLConfig"),ZOr.forEach(t),hUe=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),uUe=i(y),Kf=n(y,"LI",{});var Xwe=s(Kf);mre=n(Xwe,"STRONG",{});var eVr=s(mre);pUe=r(eVr,"trocr"),eVr.forEach(t),_Ue=r(Xwe," \u2014 "),mS=n(Xwe,"A",{href:!0});var oVr=s(mS);bUe=r(oVr,"TrOCRConfig"),oVr.forEach(t),vUe=r(Xwe," (TrOCR model)"),Xwe.forEach(t),FUe=i(y),Zf=n(y,"LI",{});var zwe=s(Zf);fre=n(zwe,"STRONG",{});var rVr=s(fre);TUe=r(rVr,"unispeech"),rVr.forEach(t),MUe=r(zwe," \u2014 "),fS=n(zwe,"A",{href:!0});var tVr=s(fS);EUe=r(tVr,"UniSpeechConfig"),tVr.forEach(t),CUe=r(zwe," (UniSpeech model)"),zwe.forEach(t),wUe=i(y),eg=n(y,"LI",{});var Wwe=s(eg);gre=n(Wwe,"STRONG",{});var aVr=s(gre);AUe=r(aVr,"unispeech-sat"),aVr.forEach(t),yUe=r(Wwe," \u2014 "),gS=n(Wwe,"A",{href:!0});var nVr=s(gS);LUe=r(nVr,"UniSpeechSatConfig"),nVr.forEach(t),xUe=r(Wwe," (UniSpeechSat model)"),Wwe.forEach(t),$Ue=i(y),og=n(y,"LI",{});var Qwe=s(og);hre=n(Qwe,"STRONG",{});var sVr=s(hre);kUe=r(sVr,"van"),sVr.forEach(t),SUe=r(Qwe," \u2014 "),hS=n(Qwe,"A",{href:!0});var lVr=s(hS);RUe=r(lVr,"VanConfig"),lVr.forEach(t),PUe=r(Qwe," (VAN model)"),Qwe.forEach(t),BUe=i(y),rg=n(y,"LI",{});var Hwe=s(rg);ure=n(Hwe,"STRONG",{});var iVr=s(ure);IUe=r(iVr,"vilt"),iVr.forEach(t),qUe=r(Hwe," \u2014 "),uS=n(Hwe,"A",{href:!0});var dVr=s(uS);NUe=r(dVr,"ViltConfig"),dVr.forEach(t),jUe=r(Hwe," (ViLT model)"),Hwe.forEach(t),DUe=i(y),tg=n(y,"LI",{});var Uwe=s(tg);pre=n(Uwe,"STRONG",{});var cVr=s(pre);GUe=r(cVr,"vision-encoder-decoder"),cVr.forEach(t),OUe=r(Uwe," \u2014 "),pS=n(Uwe,"A",{href:!0});var mVr=s(pS);VUe=r(mVr,"VisionEncoderDecoderConfig"),mVr.forEach(t),XUe=r(Uwe," (Vision Encoder decoder model)"),Uwe.forEach(t),zUe=i(y),ag=n(y,"LI",{});var Jwe=s(ag);_re=n(Jwe,"STRONG",{});var fVr=s(_re);WUe=r(fVr,"vision-text-dual-encoder"),fVr.forEach(t),QUe=r(Jwe," \u2014 "),_S=n(Jwe,"A",{href:!0});var gVr=s(_S);HUe=r(gVr,"VisionTextDualEncoderConfig"),gVr.forEach(t),UUe=r(Jwe," (VisionTextDualEncoder model)"),Jwe.forEach(t),JUe=i(y),ng=n(y,"LI",{});var Ywe=s(ng);bre=n(Ywe,"STRONG",{});var hVr=s(bre);YUe=r(hVr,"visual_bert"),hVr.forEach(t),KUe=r(Ywe," \u2014 "),bS=n(Ywe,"A",{href:!0});var uVr=s(bS);ZUe=r(uVr,"VisualBertConfig"),uVr.forEach(t),eJe=r(Ywe," (VisualBert model)"),Ywe.forEach(t),oJe=i(y),sg=n(y,"LI",{});var Kwe=s(sg);vre=n(Kwe,"STRONG",{});var pVr=s(vre);rJe=r(pVr,"vit"),pVr.forEach(t),tJe=r(Kwe," \u2014 "),vS=n(Kwe,"A",{href:!0});var _Vr=s(vS);aJe=r(_Vr,"ViTConfig"),_Vr.forEach(t),nJe=r(Kwe," (ViT model)"),Kwe.forEach(t),sJe=i(y),lg=n(y,"LI",{});var Zwe=s(lg);Fre=n(Zwe,"STRONG",{});var bVr=s(Fre);lJe=r(bVr,"vit_mae"),bVr.forEach(t),iJe=r(Zwe," \u2014 "),FS=n(Zwe,"A",{href:!0});var vVr=s(FS);dJe=r(vVr,"ViTMAEConfig"),vVr.forEach(t),cJe=r(Zwe," (ViTMAE model)"),Zwe.forEach(t),mJe=i(y),ig=n(y,"LI",{});var eAe=s(ig);Tre=n(eAe,"STRONG",{});var FVr=s(Tre);fJe=r(FVr,"wav2vec2"),FVr.forEach(t),gJe=r(eAe," \u2014 "),TS=n(eAe,"A",{href:!0});var TVr=s(TS);hJe=r(TVr,"Wav2Vec2Config"),TVr.forEach(t),uJe=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),pJe=i(y),dg=n(y,"LI",{});var oAe=s(dg);Mre=n(oAe,"STRONG",{});var MVr=s(Mre);_Je=r(MVr,"wav2vec2-conformer"),MVr.forEach(t),bJe=r(oAe," \u2014 "),MS=n(oAe,"A",{href:!0});var EVr=s(MS);vJe=r(EVr,"Wav2Vec2ConformerConfig"),EVr.forEach(t),FJe=r(oAe," (Wav2Vec2-Conformer model)"),oAe.forEach(t),TJe=i(y),cg=n(y,"LI",{});var rAe=s(cg);Ere=n(rAe,"STRONG",{});var CVr=s(Ere);MJe=r(CVr,"wavlm"),CVr.forEach(t),EJe=r(rAe," \u2014 "),ES=n(rAe,"A",{href:!0});var wVr=s(ES);CJe=r(wVr,"WavLMConfig"),wVr.forEach(t),wJe=r(rAe," (WavLM model)"),rAe.forEach(t),AJe=i(y),mg=n(y,"LI",{});var tAe=s(mg);Cre=n(tAe,"STRONG",{});var AVr=s(Cre);yJe=r(AVr,"xglm"),AVr.forEach(t),LJe=r(tAe," \u2014 "),CS=n(tAe,"A",{href:!0});var yVr=s(CS);xJe=r(yVr,"XGLMConfig"),yVr.forEach(t),$Je=r(tAe," (XGLM model)"),tAe.forEach(t),kJe=i(y),fg=n(y,"LI",{});var aAe=s(fg);wre=n(aAe,"STRONG",{});var LVr=s(wre);SJe=r(LVr,"xlm"),LVr.forEach(t),RJe=r(aAe," \u2014 "),wS=n(aAe,"A",{href:!0});var xVr=s(wS);PJe=r(xVr,"XLMConfig"),xVr.forEach(t),BJe=r(aAe," (XLM model)"),aAe.forEach(t),IJe=i(y),gg=n(y,"LI",{});var nAe=s(gg);Are=n(nAe,"STRONG",{});var $Vr=s(Are);qJe=r($Vr,"xlm-prophetnet"),$Vr.forEach(t),NJe=r(nAe," \u2014 "),AS=n(nAe,"A",{href:!0});var kVr=s(AS);jJe=r(kVr,"XLMProphetNetConfig"),kVr.forEach(t),DJe=r(nAe," (XLMProphetNet model)"),nAe.forEach(t),GJe=i(y),hg=n(y,"LI",{});var sAe=s(hg);yre=n(sAe,"STRONG",{});var SVr=s(yre);OJe=r(SVr,"xlm-roberta"),SVr.forEach(t),VJe=r(sAe," \u2014 "),yS=n(sAe,"A",{href:!0});var RVr=s(yS);XJe=r(RVr,"XLMRobertaConfig"),RVr.forEach(t),zJe=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),WJe=i(y),ug=n(y,"LI",{});var lAe=s(ug);Lre=n(lAe,"STRONG",{});var PVr=s(Lre);QJe=r(PVr,"xlm-roberta-xl"),PVr.forEach(t),HJe=r(lAe," \u2014 "),LS=n(lAe,"A",{href:!0});var BVr=s(LS);UJe=r(BVr,"XLMRobertaXLConfig"),BVr.forEach(t),JJe=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),YJe=i(y),pg=n(y,"LI",{});var iAe=s(pg);xre=n(iAe,"STRONG",{});var IVr=s(xre);KJe=r(IVr,"xlnet"),IVr.forEach(t),ZJe=r(iAe," \u2014 "),xS=n(iAe,"A",{href:!0});var qVr=s(xS);eYe=r(qVr,"XLNetConfig"),qVr.forEach(t),oYe=r(iAe," (XLNet model)"),iAe.forEach(t),rYe=i(y),_g=n(y,"LI",{});var dAe=s(_g);$re=n(dAe,"STRONG",{});var NVr=s($re);tYe=r(NVr,"yolos"),NVr.forEach(t),aYe=r(dAe," \u2014 "),$S=n(dAe,"A",{href:!0});var jVr=s($S);nYe=r(jVr,"YolosConfig"),jVr.forEach(t),sYe=r(dAe," (YOLOS model)"),dAe.forEach(t),lYe=i(y),bg=n(y,"LI",{});var cAe=s(bg);kre=n(cAe,"STRONG",{});var DVr=s(kre);iYe=r(DVr,"yoso"),DVr.forEach(t),dYe=r(cAe," \u2014 "),kS=n(cAe,"A",{href:!0});var GVr=s(kS);cYe=r(GVr,"YosoConfig"),GVr.forEach(t),mYe=r(cAe," (YOSO model)"),cAe.forEach(t),y.forEach(t),fYe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),gYe=i(et),Fg=n(et,"DIV",{class:!0});var GNe=s(Fg);T(_y.$$.fragment,GNe),hYe=i(GNe),Sre=n(GNe,"P",{});var OVr=s(Sre);uYe=r(OVr,"Register a new configuration for this class."),OVr.forEach(t),GNe.forEach(t),et.forEach(t),XIe=i(m),Fi=n(m,"H2",{class:!0});var ONe=s(Fi);Tg=n(ONe,"A",{id:!0,class:!0,href:!0});var VVr=s(Tg);Rre=n(VVr,"SPAN",{});var XVr=s(Rre);T(by.$$.fragment,XVr),XVr.forEach(t),VVr.forEach(t),pYe=i(ONe),Pre=n(ONe,"SPAN",{});var zVr=s(Pre);_Ye=r(zVr,"AutoTokenizer"),zVr.forEach(t),ONe.forEach(t),zIe=i(m),wo=n(m,"DIV",{class:!0});var Is=s(wo);T(vy.$$.fragment,Is),bYe=i(Is),Fy=n(Is,"P",{});var VNe=s(Fy);vYe=r(VNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SS=n(VNe,"A",{href:!0});var WVr=s(SS);FYe=r(WVr,"AutoTokenizer.from_pretrained()"),WVr.forEach(t),TYe=r(VNe," class method."),VNe.forEach(t),MYe=i(Is),Ty=n(Is,"P",{});var XNe=s(Ty);EYe=r(XNe,"This class cannot be instantiated directly using "),Bre=n(XNe,"CODE",{});var QVr=s(Bre);CYe=r(QVr,"__init__()"),QVr.forEach(t),wYe=r(XNe," (throws an error)."),XNe.forEach(t),AYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(My.$$.fragment,qs),yYe=i(qs),Ire=n(qs,"P",{});var HVr=s(Ire);LYe=r(HVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HVr.forEach(t),xYe=i(qs),Aa=n(qs,"P",{});var f0=s(Aa);$Ye=r(f0,"The tokenizer class to instantiate is selected based on the "),qre=n(f0,"CODE",{});var UVr=s(qre);kYe=r(UVr,"model_type"),UVr.forEach(t),SYe=r(f0,` property of the config object (either
passed as an argument or loaded from `),Nre=n(f0,"CODE",{});var JVr=s(Nre);RYe=r(JVr,"pretrained_model_name_or_path"),JVr.forEach(t),PYe=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=n(f0,"CODE",{});var YVr=s(jre);BYe=r(YVr,"pretrained_model_name_or_path"),YVr.forEach(t),IYe=r(f0,":"),f0.forEach(t),qYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var E9=s(Sn);Dre=n(E9,"STRONG",{});var KVr=s(Dre);NYe=r(KVr,"albert"),KVr.forEach(t),jYe=r(E9," \u2014 "),RS=n(E9,"A",{href:!0});var ZVr=s(RS);DYe=r(ZVr,"AlbertTokenizer"),ZVr.forEach(t),GYe=r(E9," or "),PS=n(E9,"A",{href:!0});var eXr=s(PS);OYe=r(eXr,"AlbertTokenizerFast"),eXr.forEach(t),VYe=r(E9," (ALBERT model)"),E9.forEach(t),XYe=i(S),Rn=n(S,"LI",{});var C9=s(Rn);Gre=n(C9,"STRONG",{});var oXr=s(Gre);zYe=r(oXr,"bart"),oXr.forEach(t),WYe=r(C9," \u2014 "),BS=n(C9,"A",{href:!0});var rXr=s(BS);QYe=r(rXr,"BartTokenizer"),rXr.forEach(t),HYe=r(C9," or "),IS=n(C9,"A",{href:!0});var tXr=s(IS);UYe=r(tXr,"BartTokenizerFast"),tXr.forEach(t),JYe=r(C9," (BART model)"),C9.forEach(t),YYe=i(S),Pn=n(S,"LI",{});var w9=s(Pn);Ore=n(w9,"STRONG",{});var aXr=s(Ore);KYe=r(aXr,"barthez"),aXr.forEach(t),ZYe=r(w9," \u2014 "),qS=n(w9,"A",{href:!0});var nXr=s(qS);eKe=r(nXr,"BarthezTokenizer"),nXr.forEach(t),oKe=r(w9," or "),NS=n(w9,"A",{href:!0});var sXr=s(NS);rKe=r(sXr,"BarthezTokenizerFast"),sXr.forEach(t),tKe=r(w9," (BARThez model)"),w9.forEach(t),aKe=i(S),Mg=n(S,"LI",{});var mAe=s(Mg);Vre=n(mAe,"STRONG",{});var lXr=s(Vre);nKe=r(lXr,"bartpho"),lXr.forEach(t),sKe=r(mAe," \u2014 "),jS=n(mAe,"A",{href:!0});var iXr=s(jS);lKe=r(iXr,"BartphoTokenizer"),iXr.forEach(t),iKe=r(mAe," (BARTpho model)"),mAe.forEach(t),dKe=i(S),Bn=n(S,"LI",{});var A9=s(Bn);Xre=n(A9,"STRONG",{});var dXr=s(Xre);cKe=r(dXr,"bert"),dXr.forEach(t),mKe=r(A9," \u2014 "),DS=n(A9,"A",{href:!0});var cXr=s(DS);fKe=r(cXr,"BertTokenizer"),cXr.forEach(t),gKe=r(A9," or "),GS=n(A9,"A",{href:!0});var mXr=s(GS);hKe=r(mXr,"BertTokenizerFast"),mXr.forEach(t),uKe=r(A9," (BERT model)"),A9.forEach(t),pKe=i(S),Eg=n(S,"LI",{});var fAe=s(Eg);zre=n(fAe,"STRONG",{});var fXr=s(zre);_Ke=r(fXr,"bert-generation"),fXr.forEach(t),bKe=r(fAe," \u2014 "),OS=n(fAe,"A",{href:!0});var gXr=s(OS);vKe=r(gXr,"BertGenerationTokenizer"),gXr.forEach(t),FKe=r(fAe," (Bert Generation model)"),fAe.forEach(t),TKe=i(S),Cg=n(S,"LI",{});var gAe=s(Cg);Wre=n(gAe,"STRONG",{});var hXr=s(Wre);MKe=r(hXr,"bert-japanese"),hXr.forEach(t),EKe=r(gAe," \u2014 "),VS=n(gAe,"A",{href:!0});var uXr=s(VS);CKe=r(uXr,"BertJapaneseTokenizer"),uXr.forEach(t),wKe=r(gAe," (BertJapanese model)"),gAe.forEach(t),AKe=i(S),wg=n(S,"LI",{});var hAe=s(wg);Qre=n(hAe,"STRONG",{});var pXr=s(Qre);yKe=r(pXr,"bertweet"),pXr.forEach(t),LKe=r(hAe," \u2014 "),XS=n(hAe,"A",{href:!0});var _Xr=s(XS);xKe=r(_Xr,"BertweetTokenizer"),_Xr.forEach(t),$Ke=r(hAe," (Bertweet model)"),hAe.forEach(t),kKe=i(S),In=n(S,"LI",{});var y9=s(In);Hre=n(y9,"STRONG",{});var bXr=s(Hre);SKe=r(bXr,"big_bird"),bXr.forEach(t),RKe=r(y9," \u2014 "),zS=n(y9,"A",{href:!0});var vXr=s(zS);PKe=r(vXr,"BigBirdTokenizer"),vXr.forEach(t),BKe=r(y9," or "),WS=n(y9,"A",{href:!0});var FXr=s(WS);IKe=r(FXr,"BigBirdTokenizerFast"),FXr.forEach(t),qKe=r(y9," (BigBird model)"),y9.forEach(t),NKe=i(S),qn=n(S,"LI",{});var L9=s(qn);Ure=n(L9,"STRONG",{});var TXr=s(Ure);jKe=r(TXr,"bigbird_pegasus"),TXr.forEach(t),DKe=r(L9," \u2014 "),QS=n(L9,"A",{href:!0});var MXr=s(QS);GKe=r(MXr,"PegasusTokenizer"),MXr.forEach(t),OKe=r(L9," or "),HS=n(L9,"A",{href:!0});var EXr=s(HS);VKe=r(EXr,"PegasusTokenizerFast"),EXr.forEach(t),XKe=r(L9," (BigBirdPegasus model)"),L9.forEach(t),zKe=i(S),Nn=n(S,"LI",{});var x9=s(Nn);Jre=n(x9,"STRONG",{});var CXr=s(Jre);WKe=r(CXr,"blenderbot"),CXr.forEach(t),QKe=r(x9," \u2014 "),US=n(x9,"A",{href:!0});var wXr=s(US);HKe=r(wXr,"BlenderbotTokenizer"),wXr.forEach(t),UKe=r(x9," or "),JS=n(x9,"A",{href:!0});var AXr=s(JS);JKe=r(AXr,"BlenderbotTokenizerFast"),AXr.forEach(t),YKe=r(x9," (Blenderbot model)"),x9.forEach(t),KKe=i(S),Ag=n(S,"LI",{});var uAe=s(Ag);Yre=n(uAe,"STRONG",{});var yXr=s(Yre);ZKe=r(yXr,"blenderbot-small"),yXr.forEach(t),eZe=r(uAe," \u2014 "),YS=n(uAe,"A",{href:!0});var LXr=s(YS);oZe=r(LXr,"BlenderbotSmallTokenizer"),LXr.forEach(t),rZe=r(uAe," (BlenderbotSmall model)"),uAe.forEach(t),tZe=i(S),yg=n(S,"LI",{});var pAe=s(yg);Kre=n(pAe,"STRONG",{});var xXr=s(Kre);aZe=r(xXr,"byt5"),xXr.forEach(t),nZe=r(pAe," \u2014 "),KS=n(pAe,"A",{href:!0});var $Xr=s(KS);sZe=r($Xr,"ByT5Tokenizer"),$Xr.forEach(t),lZe=r(pAe," (ByT5 model)"),pAe.forEach(t),iZe=i(S),jn=n(S,"LI",{});var $9=s(jn);Zre=n($9,"STRONG",{});var kXr=s(Zre);dZe=r(kXr,"camembert"),kXr.forEach(t),cZe=r($9," \u2014 "),ZS=n($9,"A",{href:!0});var SXr=s(ZS);mZe=r(SXr,"CamembertTokenizer"),SXr.forEach(t),fZe=r($9," or "),eR=n($9,"A",{href:!0});var RXr=s(eR);gZe=r(RXr,"CamembertTokenizerFast"),RXr.forEach(t),hZe=r($9," (CamemBERT model)"),$9.forEach(t),uZe=i(S),Lg=n(S,"LI",{});var _Ae=s(Lg);ete=n(_Ae,"STRONG",{});var PXr=s(ete);pZe=r(PXr,"canine"),PXr.forEach(t),_Ze=r(_Ae," \u2014 "),oR=n(_Ae,"A",{href:!0});var BXr=s(oR);bZe=r(BXr,"CanineTokenizer"),BXr.forEach(t),vZe=r(_Ae," (Canine model)"),_Ae.forEach(t),FZe=i(S),Dn=n(S,"LI",{});var k9=s(Dn);ote=n(k9,"STRONG",{});var IXr=s(ote);TZe=r(IXr,"clip"),IXr.forEach(t),MZe=r(k9," \u2014 "),rR=n(k9,"A",{href:!0});var qXr=s(rR);EZe=r(qXr,"CLIPTokenizer"),qXr.forEach(t),CZe=r(k9," or "),tR=n(k9,"A",{href:!0});var NXr=s(tR);wZe=r(NXr,"CLIPTokenizerFast"),NXr.forEach(t),AZe=r(k9," (CLIP model)"),k9.forEach(t),yZe=i(S),Gn=n(S,"LI",{});var S9=s(Gn);rte=n(S9,"STRONG",{});var jXr=s(rte);LZe=r(jXr,"convbert"),jXr.forEach(t),xZe=r(S9," \u2014 "),aR=n(S9,"A",{href:!0});var DXr=s(aR);$Ze=r(DXr,"ConvBertTokenizer"),DXr.forEach(t),kZe=r(S9," or "),nR=n(S9,"A",{href:!0});var GXr=s(nR);SZe=r(GXr,"ConvBertTokenizerFast"),GXr.forEach(t),RZe=r(S9," (ConvBERT model)"),S9.forEach(t),PZe=i(S),On=n(S,"LI",{});var R9=s(On);tte=n(R9,"STRONG",{});var OXr=s(tte);BZe=r(OXr,"cpm"),OXr.forEach(t),IZe=r(R9," \u2014 "),sR=n(R9,"A",{href:!0});var VXr=s(sR);qZe=r(VXr,"CpmTokenizer"),VXr.forEach(t),NZe=r(R9," or "),lR=n(R9,"A",{href:!0});var XXr=s(lR);jZe=r(XXr,"CpmTokenizerFast"),XXr.forEach(t),DZe=r(R9," (CPM model)"),R9.forEach(t),GZe=i(S),xg=n(S,"LI",{});var bAe=s(xg);ate=n(bAe,"STRONG",{});var zXr=s(ate);OZe=r(zXr,"ctrl"),zXr.forEach(t),VZe=r(bAe," \u2014 "),iR=n(bAe,"A",{href:!0});var WXr=s(iR);XZe=r(WXr,"CTRLTokenizer"),WXr.forEach(t),zZe=r(bAe," (CTRL model)"),bAe.forEach(t),WZe=i(S),Vn=n(S,"LI",{});var P9=s(Vn);nte=n(P9,"STRONG",{});var QXr=s(nte);QZe=r(QXr,"data2vec-text"),QXr.forEach(t),HZe=r(P9," \u2014 "),dR=n(P9,"A",{href:!0});var HXr=s(dR);UZe=r(HXr,"RobertaTokenizer"),HXr.forEach(t),JZe=r(P9," or "),cR=n(P9,"A",{href:!0});var UXr=s(cR);YZe=r(UXr,"RobertaTokenizerFast"),UXr.forEach(t),KZe=r(P9," (Data2VecText model)"),P9.forEach(t),ZZe=i(S),Xn=n(S,"LI",{});var B9=s(Xn);ste=n(B9,"STRONG",{});var JXr=s(ste);eeo=r(JXr,"deberta"),JXr.forEach(t),oeo=r(B9," \u2014 "),mR=n(B9,"A",{href:!0});var YXr=s(mR);reo=r(YXr,"DebertaTokenizer"),YXr.forEach(t),teo=r(B9," or "),fR=n(B9,"A",{href:!0});var KXr=s(fR);aeo=r(KXr,"DebertaTokenizerFast"),KXr.forEach(t),neo=r(B9," (DeBERTa model)"),B9.forEach(t),seo=i(S),zn=n(S,"LI",{});var I9=s(zn);lte=n(I9,"STRONG",{});var ZXr=s(lte);leo=r(ZXr,"deberta-v2"),ZXr.forEach(t),ieo=r(I9," \u2014 "),gR=n(I9,"A",{href:!0});var ezr=s(gR);deo=r(ezr,"DebertaV2Tokenizer"),ezr.forEach(t),ceo=r(I9," or "),hR=n(I9,"A",{href:!0});var ozr=s(hR);meo=r(ozr,"DebertaV2TokenizerFast"),ozr.forEach(t),feo=r(I9," (DeBERTa-v2 model)"),I9.forEach(t),geo=i(S),Wn=n(S,"LI",{});var q9=s(Wn);ite=n(q9,"STRONG",{});var rzr=s(ite);heo=r(rzr,"distilbert"),rzr.forEach(t),ueo=r(q9," \u2014 "),uR=n(q9,"A",{href:!0});var tzr=s(uR);peo=r(tzr,"DistilBertTokenizer"),tzr.forEach(t),_eo=r(q9," or "),pR=n(q9,"A",{href:!0});var azr=s(pR);beo=r(azr,"DistilBertTokenizerFast"),azr.forEach(t),veo=r(q9," (DistilBERT model)"),q9.forEach(t),Feo=i(S),Qn=n(S,"LI",{});var N9=s(Qn);dte=n(N9,"STRONG",{});var nzr=s(dte);Teo=r(nzr,"dpr"),nzr.forEach(t),Meo=r(N9," \u2014 "),_R=n(N9,"A",{href:!0});var szr=s(_R);Eeo=r(szr,"DPRQuestionEncoderTokenizer"),szr.forEach(t),Ceo=r(N9," or "),bR=n(N9,"A",{href:!0});var lzr=s(bR);weo=r(lzr,"DPRQuestionEncoderTokenizerFast"),lzr.forEach(t),Aeo=r(N9," (DPR model)"),N9.forEach(t),yeo=i(S),Hn=n(S,"LI",{});var j9=s(Hn);cte=n(j9,"STRONG",{});var izr=s(cte);Leo=r(izr,"electra"),izr.forEach(t),xeo=r(j9," \u2014 "),vR=n(j9,"A",{href:!0});var dzr=s(vR);$eo=r(dzr,"ElectraTokenizer"),dzr.forEach(t),keo=r(j9," or "),FR=n(j9,"A",{href:!0});var czr=s(FR);Seo=r(czr,"ElectraTokenizerFast"),czr.forEach(t),Reo=r(j9," (ELECTRA model)"),j9.forEach(t),Peo=i(S),$g=n(S,"LI",{});var vAe=s($g);mte=n(vAe,"STRONG",{});var mzr=s(mte);Beo=r(mzr,"flaubert"),mzr.forEach(t),Ieo=r(vAe," \u2014 "),TR=n(vAe,"A",{href:!0});var fzr=s(TR);qeo=r(fzr,"FlaubertTokenizer"),fzr.forEach(t),Neo=r(vAe," (FlauBERT model)"),vAe.forEach(t),jeo=i(S),Un=n(S,"LI",{});var D9=s(Un);fte=n(D9,"STRONG",{});var gzr=s(fte);Deo=r(gzr,"fnet"),gzr.forEach(t),Geo=r(D9," \u2014 "),MR=n(D9,"A",{href:!0});var hzr=s(MR);Oeo=r(hzr,"FNetTokenizer"),hzr.forEach(t),Veo=r(D9," or "),ER=n(D9,"A",{href:!0});var uzr=s(ER);Xeo=r(uzr,"FNetTokenizerFast"),uzr.forEach(t),zeo=r(D9," (FNet model)"),D9.forEach(t),Weo=i(S),kg=n(S,"LI",{});var FAe=s(kg);gte=n(FAe,"STRONG",{});var pzr=s(gte);Qeo=r(pzr,"fsmt"),pzr.forEach(t),Heo=r(FAe," \u2014 "),CR=n(FAe,"A",{href:!0});var _zr=s(CR);Ueo=r(_zr,"FSMTTokenizer"),_zr.forEach(t),Jeo=r(FAe," (FairSeq Machine-Translation model)"),FAe.forEach(t),Yeo=i(S),Jn=n(S,"LI",{});var G9=s(Jn);hte=n(G9,"STRONG",{});var bzr=s(hte);Keo=r(bzr,"funnel"),bzr.forEach(t),Zeo=r(G9," \u2014 "),wR=n(G9,"A",{href:!0});var vzr=s(wR);eoo=r(vzr,"FunnelTokenizer"),vzr.forEach(t),ooo=r(G9," or "),AR=n(G9,"A",{href:!0});var Fzr=s(AR);roo=r(Fzr,"FunnelTokenizerFast"),Fzr.forEach(t),too=r(G9," (Funnel Transformer model)"),G9.forEach(t),aoo=i(S),Yn=n(S,"LI",{});var O9=s(Yn);ute=n(O9,"STRONG",{});var Tzr=s(ute);noo=r(Tzr,"gpt2"),Tzr.forEach(t),soo=r(O9," \u2014 "),yR=n(O9,"A",{href:!0});var Mzr=s(yR);loo=r(Mzr,"GPT2Tokenizer"),Mzr.forEach(t),ioo=r(O9," or "),LR=n(O9,"A",{href:!0});var Ezr=s(LR);doo=r(Ezr,"GPT2TokenizerFast"),Ezr.forEach(t),coo=r(O9," (OpenAI GPT-2 model)"),O9.forEach(t),moo=i(S),Kn=n(S,"LI",{});var V9=s(Kn);pte=n(V9,"STRONG",{});var Czr=s(pte);foo=r(Czr,"gpt_neo"),Czr.forEach(t),goo=r(V9," \u2014 "),xR=n(V9,"A",{href:!0});var wzr=s(xR);hoo=r(wzr,"GPT2Tokenizer"),wzr.forEach(t),uoo=r(V9," or "),$R=n(V9,"A",{href:!0});var Azr=s($R);poo=r(Azr,"GPT2TokenizerFast"),Azr.forEach(t),_oo=r(V9," (GPT Neo model)"),V9.forEach(t),boo=i(S),Zn=n(S,"LI",{});var X9=s(Zn);_te=n(X9,"STRONG",{});var yzr=s(_te);voo=r(yzr,"gptj"),yzr.forEach(t),Foo=r(X9," \u2014 "),kR=n(X9,"A",{href:!0});var Lzr=s(kR);Too=r(Lzr,"GPT2Tokenizer"),Lzr.forEach(t),Moo=r(X9," or "),SR=n(X9,"A",{href:!0});var xzr=s(SR);Eoo=r(xzr,"GPT2TokenizerFast"),xzr.forEach(t),Coo=r(X9," (GPT-J model)"),X9.forEach(t),woo=i(S),es=n(S,"LI",{});var z9=s(es);bte=n(z9,"STRONG",{});var $zr=s(bte);Aoo=r($zr,"herbert"),$zr.forEach(t),yoo=r(z9," \u2014 "),RR=n(z9,"A",{href:!0});var kzr=s(RR);Loo=r(kzr,"HerbertTokenizer"),kzr.forEach(t),xoo=r(z9," or "),PR=n(z9,"A",{href:!0});var Szr=s(PR);$oo=r(Szr,"HerbertTokenizerFast"),Szr.forEach(t),koo=r(z9," (HerBERT model)"),z9.forEach(t),Soo=i(S),Sg=n(S,"LI",{});var TAe=s(Sg);vte=n(TAe,"STRONG",{});var Rzr=s(vte);Roo=r(Rzr,"hubert"),Rzr.forEach(t),Poo=r(TAe," \u2014 "),BR=n(TAe,"A",{href:!0});var Pzr=s(BR);Boo=r(Pzr,"Wav2Vec2CTCTokenizer"),Pzr.forEach(t),Ioo=r(TAe," (Hubert model)"),TAe.forEach(t),qoo=i(S),os=n(S,"LI",{});var W9=s(os);Fte=n(W9,"STRONG",{});var Bzr=s(Fte);Noo=r(Bzr,"ibert"),Bzr.forEach(t),joo=r(W9," \u2014 "),IR=n(W9,"A",{href:!0});var Izr=s(IR);Doo=r(Izr,"RobertaTokenizer"),Izr.forEach(t),Goo=r(W9," or "),qR=n(W9,"A",{href:!0});var qzr=s(qR);Ooo=r(qzr,"RobertaTokenizerFast"),qzr.forEach(t),Voo=r(W9," (I-BERT model)"),W9.forEach(t),Xoo=i(S),rs=n(S,"LI",{});var Q9=s(rs);Tte=n(Q9,"STRONG",{});var Nzr=s(Tte);zoo=r(Nzr,"layoutlm"),Nzr.forEach(t),Woo=r(Q9," \u2014 "),NR=n(Q9,"A",{href:!0});var jzr=s(NR);Qoo=r(jzr,"LayoutLMTokenizer"),jzr.forEach(t),Hoo=r(Q9," or "),jR=n(Q9,"A",{href:!0});var Dzr=s(jR);Uoo=r(Dzr,"LayoutLMTokenizerFast"),Dzr.forEach(t),Joo=r(Q9," (LayoutLM model)"),Q9.forEach(t),Yoo=i(S),ts=n(S,"LI",{});var H9=s(ts);Mte=n(H9,"STRONG",{});var Gzr=s(Mte);Koo=r(Gzr,"layoutlmv2"),Gzr.forEach(t),Zoo=r(H9," \u2014 "),DR=n(H9,"A",{href:!0});var Ozr=s(DR);ero=r(Ozr,"LayoutLMv2Tokenizer"),Ozr.forEach(t),oro=r(H9," or "),GR=n(H9,"A",{href:!0});var Vzr=s(GR);rro=r(Vzr,"LayoutLMv2TokenizerFast"),Vzr.forEach(t),tro=r(H9," (LayoutLMv2 model)"),H9.forEach(t),aro=i(S),as=n(S,"LI",{});var U9=s(as);Ete=n(U9,"STRONG",{});var Xzr=s(Ete);nro=r(Xzr,"layoutxlm"),Xzr.forEach(t),sro=r(U9," \u2014 "),OR=n(U9,"A",{href:!0});var zzr=s(OR);lro=r(zzr,"LayoutXLMTokenizer"),zzr.forEach(t),iro=r(U9," or "),VR=n(U9,"A",{href:!0});var Wzr=s(VR);dro=r(Wzr,"LayoutXLMTokenizerFast"),Wzr.forEach(t),cro=r(U9," (LayoutXLM model)"),U9.forEach(t),mro=i(S),ns=n(S,"LI",{});var J9=s(ns);Cte=n(J9,"STRONG",{});var Qzr=s(Cte);fro=r(Qzr,"led"),Qzr.forEach(t),gro=r(J9," \u2014 "),XR=n(J9,"A",{href:!0});var Hzr=s(XR);hro=r(Hzr,"LEDTokenizer"),Hzr.forEach(t),uro=r(J9," or "),zR=n(J9,"A",{href:!0});var Uzr=s(zR);pro=r(Uzr,"LEDTokenizerFast"),Uzr.forEach(t),_ro=r(J9," (LED model)"),J9.forEach(t),bro=i(S),ss=n(S,"LI",{});var Y9=s(ss);wte=n(Y9,"STRONG",{});var Jzr=s(wte);vro=r(Jzr,"longformer"),Jzr.forEach(t),Fro=r(Y9," \u2014 "),WR=n(Y9,"A",{href:!0});var Yzr=s(WR);Tro=r(Yzr,"LongformerTokenizer"),Yzr.forEach(t),Mro=r(Y9," or "),QR=n(Y9,"A",{href:!0});var Kzr=s(QR);Ero=r(Kzr,"LongformerTokenizerFast"),Kzr.forEach(t),Cro=r(Y9," (Longformer model)"),Y9.forEach(t),wro=i(S),Rg=n(S,"LI",{});var MAe=s(Rg);Ate=n(MAe,"STRONG",{});var Zzr=s(Ate);Aro=r(Zzr,"luke"),Zzr.forEach(t),yro=r(MAe," \u2014 "),HR=n(MAe,"A",{href:!0});var eWr=s(HR);Lro=r(eWr,"LukeTokenizer"),eWr.forEach(t),xro=r(MAe," (LUKE model)"),MAe.forEach(t),$ro=i(S),ls=n(S,"LI",{});var K9=s(ls);yte=n(K9,"STRONG",{});var oWr=s(yte);kro=r(oWr,"lxmert"),oWr.forEach(t),Sro=r(K9," \u2014 "),UR=n(K9,"A",{href:!0});var rWr=s(UR);Rro=r(rWr,"LxmertTokenizer"),rWr.forEach(t),Pro=r(K9," or "),JR=n(K9,"A",{href:!0});var tWr=s(JR);Bro=r(tWr,"LxmertTokenizerFast"),tWr.forEach(t),Iro=r(K9," (LXMERT model)"),K9.forEach(t),qro=i(S),Pg=n(S,"LI",{});var EAe=s(Pg);Lte=n(EAe,"STRONG",{});var aWr=s(Lte);Nro=r(aWr,"m2m_100"),aWr.forEach(t),jro=r(EAe," \u2014 "),YR=n(EAe,"A",{href:!0});var nWr=s(YR);Dro=r(nWr,"M2M100Tokenizer"),nWr.forEach(t),Gro=r(EAe," (M2M100 model)"),EAe.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var CAe=s(Bg);xte=n(CAe,"STRONG",{});var sWr=s(xte);Vro=r(sWr,"marian"),sWr.forEach(t),Xro=r(CAe," \u2014 "),KR=n(CAe,"A",{href:!0});var lWr=s(KR);zro=r(lWr,"MarianTokenizer"),lWr.forEach(t),Wro=r(CAe," (Marian model)"),CAe.forEach(t),Qro=i(S),is=n(S,"LI",{});var Z9=s(is);$te=n(Z9,"STRONG",{});var iWr=s($te);Hro=r(iWr,"mbart"),iWr.forEach(t),Uro=r(Z9," \u2014 "),ZR=n(Z9,"A",{href:!0});var dWr=s(ZR);Jro=r(dWr,"MBartTokenizer"),dWr.forEach(t),Yro=r(Z9," or "),eP=n(Z9,"A",{href:!0});var cWr=s(eP);Kro=r(cWr,"MBartTokenizerFast"),cWr.forEach(t),Zro=r(Z9," (mBART model)"),Z9.forEach(t),eto=i(S),ds=n(S,"LI",{});var e$=s(ds);kte=n(e$,"STRONG",{});var mWr=s(kte);oto=r(mWr,"mbart50"),mWr.forEach(t),rto=r(e$," \u2014 "),oP=n(e$,"A",{href:!0});var fWr=s(oP);tto=r(fWr,"MBart50Tokenizer"),fWr.forEach(t),ato=r(e$," or "),rP=n(e$,"A",{href:!0});var gWr=s(rP);nto=r(gWr,"MBart50TokenizerFast"),gWr.forEach(t),sto=r(e$," (mBART-50 model)"),e$.forEach(t),lto=i(S),cs=n(S,"LI",{});var o$=s(cs);Ste=n(o$,"STRONG",{});var hWr=s(Ste);ito=r(hWr,"megatron-bert"),hWr.forEach(t),dto=r(o$," \u2014 "),tP=n(o$,"A",{href:!0});var uWr=s(tP);cto=r(uWr,"BertTokenizer"),uWr.forEach(t),mto=r(o$," or "),aP=n(o$,"A",{href:!0});var pWr=s(aP);fto=r(pWr,"BertTokenizerFast"),pWr.forEach(t),gto=r(o$," (MegatronBert model)"),o$.forEach(t),hto=i(S),Ig=n(S,"LI",{});var wAe=s(Ig);Rte=n(wAe,"STRONG",{});var _Wr=s(Rte);uto=r(_Wr,"mluke"),_Wr.forEach(t),pto=r(wAe," \u2014 "),nP=n(wAe,"A",{href:!0});var bWr=s(nP);_to=r(bWr,"MLukeTokenizer"),bWr.forEach(t),bto=r(wAe," (mLUKE model)"),wAe.forEach(t),vto=i(S),ms=n(S,"LI",{});var r$=s(ms);Pte=n(r$,"STRONG",{});var vWr=s(Pte);Fto=r(vWr,"mobilebert"),vWr.forEach(t),Tto=r(r$," \u2014 "),sP=n(r$,"A",{href:!0});var FWr=s(sP);Mto=r(FWr,"MobileBertTokenizer"),FWr.forEach(t),Eto=r(r$," or "),lP=n(r$,"A",{href:!0});var TWr=s(lP);Cto=r(TWr,"MobileBertTokenizerFast"),TWr.forEach(t),wto=r(r$," (MobileBERT model)"),r$.forEach(t),Ato=i(S),fs=n(S,"LI",{});var t$=s(fs);Bte=n(t$,"STRONG",{});var MWr=s(Bte);yto=r(MWr,"mpnet"),MWr.forEach(t),Lto=r(t$," \u2014 "),iP=n(t$,"A",{href:!0});var EWr=s(iP);xto=r(EWr,"MPNetTokenizer"),EWr.forEach(t),$to=r(t$," or "),dP=n(t$,"A",{href:!0});var CWr=s(dP);kto=r(CWr,"MPNetTokenizerFast"),CWr.forEach(t),Sto=r(t$," (MPNet model)"),t$.forEach(t),Rto=i(S),gs=n(S,"LI",{});var a$=s(gs);Ite=n(a$,"STRONG",{});var wWr=s(Ite);Pto=r(wWr,"mt5"),wWr.forEach(t),Bto=r(a$," \u2014 "),cP=n(a$,"A",{href:!0});var AWr=s(cP);Ito=r(AWr,"MT5Tokenizer"),AWr.forEach(t),qto=r(a$," or "),mP=n(a$,"A",{href:!0});var yWr=s(mP);Nto=r(yWr,"MT5TokenizerFast"),yWr.forEach(t),jto=r(a$," (mT5 model)"),a$.forEach(t),Dto=i(S),hs=n(S,"LI",{});var n$=s(hs);qte=n(n$,"STRONG",{});var LWr=s(qte);Gto=r(LWr,"nystromformer"),LWr.forEach(t),Oto=r(n$," \u2014 "),fP=n(n$,"A",{href:!0});var xWr=s(fP);Vto=r(xWr,"AlbertTokenizer"),xWr.forEach(t),Xto=r(n$," or "),gP=n(n$,"A",{href:!0});var $Wr=s(gP);zto=r($Wr,"AlbertTokenizerFast"),$Wr.forEach(t),Wto=r(n$," (Nystromformer model)"),n$.forEach(t),Qto=i(S),us=n(S,"LI",{});var s$=s(us);Nte=n(s$,"STRONG",{});var kWr=s(Nte);Hto=r(kWr,"openai-gpt"),kWr.forEach(t),Uto=r(s$," \u2014 "),hP=n(s$,"A",{href:!0});var SWr=s(hP);Jto=r(SWr,"OpenAIGPTTokenizer"),SWr.forEach(t),Yto=r(s$," or "),uP=n(s$,"A",{href:!0});var RWr=s(uP);Kto=r(RWr,"OpenAIGPTTokenizerFast"),RWr.forEach(t),Zto=r(s$," (OpenAI GPT model)"),s$.forEach(t),eao=i(S),qg=n(S,"LI",{});var AAe=s(qg);jte=n(AAe,"STRONG",{});var PWr=s(jte);oao=r(PWr,"opt"),PWr.forEach(t),rao=r(AAe," \u2014 "),pP=n(AAe,"A",{href:!0});var BWr=s(pP);tao=r(BWr,"GPT2Tokenizer"),BWr.forEach(t),aao=r(AAe," (OPT model)"),AAe.forEach(t),nao=i(S),ps=n(S,"LI",{});var l$=s(ps);Dte=n(l$,"STRONG",{});var IWr=s(Dte);sao=r(IWr,"pegasus"),IWr.forEach(t),lao=r(l$," \u2014 "),_P=n(l$,"A",{href:!0});var qWr=s(_P);iao=r(qWr,"PegasusTokenizer"),qWr.forEach(t),dao=r(l$," or "),bP=n(l$,"A",{href:!0});var NWr=s(bP);cao=r(NWr,"PegasusTokenizerFast"),NWr.forEach(t),mao=r(l$," (Pegasus model)"),l$.forEach(t),fao=i(S),Ng=n(S,"LI",{});var yAe=s(Ng);Gte=n(yAe,"STRONG",{});var jWr=s(Gte);gao=r(jWr,"perceiver"),jWr.forEach(t),hao=r(yAe," \u2014 "),vP=n(yAe,"A",{href:!0});var DWr=s(vP);uao=r(DWr,"PerceiverTokenizer"),DWr.forEach(t),pao=r(yAe," (Perceiver model)"),yAe.forEach(t),_ao=i(S),jg=n(S,"LI",{});var LAe=s(jg);Ote=n(LAe,"STRONG",{});var GWr=s(Ote);bao=r(GWr,"phobert"),GWr.forEach(t),vao=r(LAe," \u2014 "),FP=n(LAe,"A",{href:!0});var OWr=s(FP);Fao=r(OWr,"PhobertTokenizer"),OWr.forEach(t),Tao=r(LAe," (PhoBERT model)"),LAe.forEach(t),Mao=i(S),Dg=n(S,"LI",{});var xAe=s(Dg);Vte=n(xAe,"STRONG",{});var VWr=s(Vte);Eao=r(VWr,"plbart"),VWr.forEach(t),Cao=r(xAe," \u2014 "),TP=n(xAe,"A",{href:!0});var XWr=s(TP);wao=r(XWr,"PLBartTokenizer"),XWr.forEach(t),Aao=r(xAe," (PLBart model)"),xAe.forEach(t),yao=i(S),Gg=n(S,"LI",{});var $Ae=s(Gg);Xte=n($Ae,"STRONG",{});var zWr=s(Xte);Lao=r(zWr,"prophetnet"),zWr.forEach(t),xao=r($Ae," \u2014 "),MP=n($Ae,"A",{href:!0});var WWr=s(MP);$ao=r(WWr,"ProphetNetTokenizer"),WWr.forEach(t),kao=r($Ae," (ProphetNet model)"),$Ae.forEach(t),Sao=i(S),_s=n(S,"LI",{});var i$=s(_s);zte=n(i$,"STRONG",{});var QWr=s(zte);Rao=r(QWr,"qdqbert"),QWr.forEach(t),Pao=r(i$," \u2014 "),EP=n(i$,"A",{href:!0});var HWr=s(EP);Bao=r(HWr,"BertTokenizer"),HWr.forEach(t),Iao=r(i$," or "),CP=n(i$,"A",{href:!0});var UWr=s(CP);qao=r(UWr,"BertTokenizerFast"),UWr.forEach(t),Nao=r(i$," (QDQBert model)"),i$.forEach(t),jao=i(S),Og=n(S,"LI",{});var kAe=s(Og);Wte=n(kAe,"STRONG",{});var JWr=s(Wte);Dao=r(JWr,"rag"),JWr.forEach(t),Gao=r(kAe," \u2014 "),wP=n(kAe,"A",{href:!0});var YWr=s(wP);Oao=r(YWr,"RagTokenizer"),YWr.forEach(t),Vao=r(kAe," (RAG model)"),kAe.forEach(t),Xao=i(S),bs=n(S,"LI",{});var d$=s(bs);Qte=n(d$,"STRONG",{});var KWr=s(Qte);zao=r(KWr,"realm"),KWr.forEach(t),Wao=r(d$," \u2014 "),AP=n(d$,"A",{href:!0});var ZWr=s(AP);Qao=r(ZWr,"RealmTokenizer"),ZWr.forEach(t),Hao=r(d$," or "),yP=n(d$,"A",{href:!0});var eQr=s(yP);Uao=r(eQr,"RealmTokenizerFast"),eQr.forEach(t),Jao=r(d$," (Realm model)"),d$.forEach(t),Yao=i(S),vs=n(S,"LI",{});var c$=s(vs);Hte=n(c$,"STRONG",{});var oQr=s(Hte);Kao=r(oQr,"reformer"),oQr.forEach(t),Zao=r(c$," \u2014 "),LP=n(c$,"A",{href:!0});var rQr=s(LP);eno=r(rQr,"ReformerTokenizer"),rQr.forEach(t),ono=r(c$," or "),xP=n(c$,"A",{href:!0});var tQr=s(xP);rno=r(tQr,"ReformerTokenizerFast"),tQr.forEach(t),tno=r(c$," (Reformer model)"),c$.forEach(t),ano=i(S),Fs=n(S,"LI",{});var m$=s(Fs);Ute=n(m$,"STRONG",{});var aQr=s(Ute);nno=r(aQr,"rembert"),aQr.forEach(t),sno=r(m$," \u2014 "),$P=n(m$,"A",{href:!0});var nQr=s($P);lno=r(nQr,"RemBertTokenizer"),nQr.forEach(t),ino=r(m$," or "),kP=n(m$,"A",{href:!0});var sQr=s(kP);dno=r(sQr,"RemBertTokenizerFast"),sQr.forEach(t),cno=r(m$," (RemBERT model)"),m$.forEach(t),mno=i(S),Ts=n(S,"LI",{});var f$=s(Ts);Jte=n(f$,"STRONG",{});var lQr=s(Jte);fno=r(lQr,"retribert"),lQr.forEach(t),gno=r(f$," \u2014 "),SP=n(f$,"A",{href:!0});var iQr=s(SP);hno=r(iQr,"RetriBertTokenizer"),iQr.forEach(t),uno=r(f$," or "),RP=n(f$,"A",{href:!0});var dQr=s(RP);pno=r(dQr,"RetriBertTokenizerFast"),dQr.forEach(t),_no=r(f$," (RetriBERT model)"),f$.forEach(t),bno=i(S),Ms=n(S,"LI",{});var g$=s(Ms);Yte=n(g$,"STRONG",{});var cQr=s(Yte);vno=r(cQr,"roberta"),cQr.forEach(t),Fno=r(g$," \u2014 "),PP=n(g$,"A",{href:!0});var mQr=s(PP);Tno=r(mQr,"RobertaTokenizer"),mQr.forEach(t),Mno=r(g$," or "),BP=n(g$,"A",{href:!0});var fQr=s(BP);Eno=r(fQr,"RobertaTokenizerFast"),fQr.forEach(t),Cno=r(g$," (RoBERTa model)"),g$.forEach(t),wno=i(S),Es=n(S,"LI",{});var h$=s(Es);Kte=n(h$,"STRONG",{});var gQr=s(Kte);Ano=r(gQr,"roformer"),gQr.forEach(t),yno=r(h$," \u2014 "),IP=n(h$,"A",{href:!0});var hQr=s(IP);Lno=r(hQr,"RoFormerTokenizer"),hQr.forEach(t),xno=r(h$," or "),qP=n(h$,"A",{href:!0});var uQr=s(qP);$no=r(uQr,"RoFormerTokenizerFast"),uQr.forEach(t),kno=r(h$," (RoFormer model)"),h$.forEach(t),Sno=i(S),Vg=n(S,"LI",{});var SAe=s(Vg);Zte=n(SAe,"STRONG",{});var pQr=s(Zte);Rno=r(pQr,"speech_to_text"),pQr.forEach(t),Pno=r(SAe," \u2014 "),NP=n(SAe,"A",{href:!0});var _Qr=s(NP);Bno=r(_Qr,"Speech2TextTokenizer"),_Qr.forEach(t),Ino=r(SAe," (Speech2Text model)"),SAe.forEach(t),qno=i(S),Xg=n(S,"LI",{});var RAe=s(Xg);eae=n(RAe,"STRONG",{});var bQr=s(eae);Nno=r(bQr,"speech_to_text_2"),bQr.forEach(t),jno=r(RAe," \u2014 "),jP=n(RAe,"A",{href:!0});var vQr=s(jP);Dno=r(vQr,"Speech2Text2Tokenizer"),vQr.forEach(t),Gno=r(RAe," (Speech2Text2 model)"),RAe.forEach(t),Ono=i(S),Cs=n(S,"LI",{});var u$=s(Cs);oae=n(u$,"STRONG",{});var FQr=s(oae);Vno=r(FQr,"splinter"),FQr.forEach(t),Xno=r(u$," \u2014 "),DP=n(u$,"A",{href:!0});var TQr=s(DP);zno=r(TQr,"SplinterTokenizer"),TQr.forEach(t),Wno=r(u$," or "),GP=n(u$,"A",{href:!0});var MQr=s(GP);Qno=r(MQr,"SplinterTokenizerFast"),MQr.forEach(t),Hno=r(u$," (Splinter model)"),u$.forEach(t),Uno=i(S),ws=n(S,"LI",{});var p$=s(ws);rae=n(p$,"STRONG",{});var EQr=s(rae);Jno=r(EQr,"squeezebert"),EQr.forEach(t),Yno=r(p$," \u2014 "),OP=n(p$,"A",{href:!0});var CQr=s(OP);Kno=r(CQr,"SqueezeBertTokenizer"),CQr.forEach(t),Zno=r(p$," or "),VP=n(p$,"A",{href:!0});var wQr=s(VP);eso=r(wQr,"SqueezeBertTokenizerFast"),wQr.forEach(t),oso=r(p$," (SqueezeBERT model)"),p$.forEach(t),rso=i(S),As=n(S,"LI",{});var _$=s(As);tae=n(_$,"STRONG",{});var AQr=s(tae);tso=r(AQr,"t5"),AQr.forEach(t),aso=r(_$," \u2014 "),XP=n(_$,"A",{href:!0});var yQr=s(XP);nso=r(yQr,"T5Tokenizer"),yQr.forEach(t),sso=r(_$," or "),zP=n(_$,"A",{href:!0});var LQr=s(zP);lso=r(LQr,"T5TokenizerFast"),LQr.forEach(t),iso=r(_$," (T5 model)"),_$.forEach(t),dso=i(S),zg=n(S,"LI",{});var PAe=s(zg);aae=n(PAe,"STRONG",{});var xQr=s(aae);cso=r(xQr,"tapas"),xQr.forEach(t),mso=r(PAe," \u2014 "),WP=n(PAe,"A",{href:!0});var $Qr=s(WP);fso=r($Qr,"TapasTokenizer"),$Qr.forEach(t),gso=r(PAe," (TAPAS model)"),PAe.forEach(t),hso=i(S),Wg=n(S,"LI",{});var BAe=s(Wg);nae=n(BAe,"STRONG",{});var kQr=s(nae);uso=r(kQr,"tapex"),kQr.forEach(t),pso=r(BAe," \u2014 "),QP=n(BAe,"A",{href:!0});var SQr=s(QP);_so=r(SQr,"TapexTokenizer"),SQr.forEach(t),bso=r(BAe," (TAPEX model)"),BAe.forEach(t),vso=i(S),Qg=n(S,"LI",{});var IAe=s(Qg);sae=n(IAe,"STRONG",{});var RQr=s(sae);Fso=r(RQr,"transfo-xl"),RQr.forEach(t),Tso=r(IAe," \u2014 "),HP=n(IAe,"A",{href:!0});var PQr=s(HP);Mso=r(PQr,"TransfoXLTokenizer"),PQr.forEach(t),Eso=r(IAe," (Transformer-XL model)"),IAe.forEach(t),Cso=i(S),ys=n(S,"LI",{});var b$=s(ys);lae=n(b$,"STRONG",{});var BQr=s(lae);wso=r(BQr,"visual_bert"),BQr.forEach(t),Aso=r(b$," \u2014 "),UP=n(b$,"A",{href:!0});var IQr=s(UP);yso=r(IQr,"BertTokenizer"),IQr.forEach(t),Lso=r(b$," or "),JP=n(b$,"A",{href:!0});var qQr=s(JP);xso=r(qQr,"BertTokenizerFast"),qQr.forEach(t),$so=r(b$," (VisualBert model)"),b$.forEach(t),kso=i(S),Hg=n(S,"LI",{});var qAe=s(Hg);iae=n(qAe,"STRONG",{});var NQr=s(iae);Sso=r(NQr,"wav2vec2"),NQr.forEach(t),Rso=r(qAe," \u2014 "),YP=n(qAe,"A",{href:!0});var jQr=s(YP);Pso=r(jQr,"Wav2Vec2CTCTokenizer"),jQr.forEach(t),Bso=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),Iso=i(S),Ug=n(S,"LI",{});var NAe=s(Ug);dae=n(NAe,"STRONG",{});var DQr=s(dae);qso=r(DQr,"wav2vec2-conformer"),DQr.forEach(t),Nso=r(NAe," \u2014 "),KP=n(NAe,"A",{href:!0});var GQr=s(KP);jso=r(GQr,"Wav2Vec2CTCTokenizer"),GQr.forEach(t),Dso=r(NAe," (Wav2Vec2-Conformer model)"),NAe.forEach(t),Gso=i(S),Jg=n(S,"LI",{});var jAe=s(Jg);cae=n(jAe,"STRONG",{});var OQr=s(cae);Oso=r(OQr,"wav2vec2_phoneme"),OQr.forEach(t),Vso=r(jAe," \u2014 "),ZP=n(jAe,"A",{href:!0});var VQr=s(ZP);Xso=r(VQr,"Wav2Vec2PhonemeCTCTokenizer"),VQr.forEach(t),zso=r(jAe," (Wav2Vec2Phoneme model)"),jAe.forEach(t),Wso=i(S),Ls=n(S,"LI",{});var v$=s(Ls);mae=n(v$,"STRONG",{});var XQr=s(mae);Qso=r(XQr,"xglm"),XQr.forEach(t),Hso=r(v$," \u2014 "),eB=n(v$,"A",{href:!0});var zQr=s(eB);Uso=r(zQr,"XGLMTokenizer"),zQr.forEach(t),Jso=r(v$," or "),oB=n(v$,"A",{href:!0});var WQr=s(oB);Yso=r(WQr,"XGLMTokenizerFast"),WQr.forEach(t),Kso=r(v$," (XGLM model)"),v$.forEach(t),Zso=i(S),Yg=n(S,"LI",{});var DAe=s(Yg);fae=n(DAe,"STRONG",{});var QQr=s(fae);elo=r(QQr,"xlm"),QQr.forEach(t),olo=r(DAe," \u2014 "),rB=n(DAe,"A",{href:!0});var HQr=s(rB);rlo=r(HQr,"XLMTokenizer"),HQr.forEach(t),tlo=r(DAe," (XLM model)"),DAe.forEach(t),alo=i(S),Kg=n(S,"LI",{});var GAe=s(Kg);gae=n(GAe,"STRONG",{});var UQr=s(gae);nlo=r(UQr,"xlm-prophetnet"),UQr.forEach(t),slo=r(GAe," \u2014 "),tB=n(GAe,"A",{href:!0});var JQr=s(tB);llo=r(JQr,"XLMProphetNetTokenizer"),JQr.forEach(t),ilo=r(GAe," (XLMProphetNet model)"),GAe.forEach(t),dlo=i(S),xs=n(S,"LI",{});var F$=s(xs);hae=n(F$,"STRONG",{});var YQr=s(hae);clo=r(YQr,"xlm-roberta"),YQr.forEach(t),mlo=r(F$," \u2014 "),aB=n(F$,"A",{href:!0});var KQr=s(aB);flo=r(KQr,"XLMRobertaTokenizer"),KQr.forEach(t),glo=r(F$," or "),nB=n(F$,"A",{href:!0});var ZQr=s(nB);hlo=r(ZQr,"XLMRobertaTokenizerFast"),ZQr.forEach(t),ulo=r(F$," (XLM-RoBERTa model)"),F$.forEach(t),plo=i(S),$s=n(S,"LI",{});var T$=s($s);uae=n(T$,"STRONG",{});var eHr=s(uae);_lo=r(eHr,"xlm-roberta-xl"),eHr.forEach(t),blo=r(T$," \u2014 "),sB=n(T$,"A",{href:!0});var oHr=s(sB);vlo=r(oHr,"RobertaTokenizer"),oHr.forEach(t),Flo=r(T$," or "),lB=n(T$,"A",{href:!0});var rHr=s(lB);Tlo=r(rHr,"RobertaTokenizerFast"),rHr.forEach(t),Mlo=r(T$," (XLM-RoBERTa-XL model)"),T$.forEach(t),Elo=i(S),ks=n(S,"LI",{});var M$=s(ks);pae=n(M$,"STRONG",{});var tHr=s(pae);Clo=r(tHr,"xlnet"),tHr.forEach(t),wlo=r(M$," \u2014 "),iB=n(M$,"A",{href:!0});var aHr=s(iB);Alo=r(aHr,"XLNetTokenizer"),aHr.forEach(t),ylo=r(M$," or "),dB=n(M$,"A",{href:!0});var nHr=s(dB);Llo=r(nHr,"XLNetTokenizerFast"),nHr.forEach(t),xlo=r(M$," (XLNet model)"),M$.forEach(t),$lo=i(S),Ss=n(S,"LI",{});var E$=s(Ss);_ae=n(E$,"STRONG",{});var sHr=s(_ae);klo=r(sHr,"yoso"),sHr.forEach(t),Slo=r(E$," \u2014 "),cB=n(E$,"A",{href:!0});var lHr=s(cB);Rlo=r(lHr,"AlbertTokenizer"),lHr.forEach(t),Plo=r(E$," or "),mB=n(E$,"A",{href:!0});var iHr=s(mB);Blo=r(iHr,"AlbertTokenizerFast"),iHr.forEach(t),Ilo=r(E$," (YOSO model)"),E$.forEach(t),S.forEach(t),qlo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),Nlo=i(Is),eh=n(Is,"DIV",{class:!0});var zNe=s(eh);T(Ey.$$.fragment,zNe),jlo=i(zNe),bae=n(zNe,"P",{});var dHr=s(bae);Dlo=r(dHr,"Register a new tokenizer in this mapping."),dHr.forEach(t),zNe.forEach(t),Is.forEach(t),WIe=i(m),Ti=n(m,"H2",{class:!0});var WNe=s(Ti);oh=n(WNe,"A",{id:!0,class:!0,href:!0});var cHr=s(oh);vae=n(cHr,"SPAN",{});var mHr=s(vae);T(Cy.$$.fragment,mHr),mHr.forEach(t),cHr.forEach(t),Glo=i(WNe),Fae=n(WNe,"SPAN",{});var fHr=s(Fae);Olo=r(fHr,"AutoFeatureExtractor"),fHr.forEach(t),WNe.forEach(t),QIe=i(m),Ao=n(m,"DIV",{class:!0});var Ns=s(Ao);T(wy.$$.fragment,Ns),Vlo=i(Ns),Ay=n(Ns,"P",{});var QNe=s(Ay);Xlo=r(QNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fB=n(QNe,"A",{href:!0});var gHr=s(fB);zlo=r(gHr,"AutoFeatureExtractor.from_pretrained()"),gHr.forEach(t),Wlo=r(QNe," class method."),QNe.forEach(t),Qlo=i(Ns),yy=n(Ns,"P",{});var HNe=s(yy);Hlo=r(HNe,"This class cannot be instantiated directly using "),Tae=n(HNe,"CODE",{});var hHr=s(Tae);Ulo=r(hHr,"__init__()"),hHr.forEach(t),Jlo=r(HNe," (throws an error)."),HNe.forEach(t),Ylo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(Ly.$$.fragment,Zt),Klo=i(Zt),Mae=n(Zt,"P",{});var uHr=s(Mae);Zlo=r(uHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uHr.forEach(t),eio=i(Zt),ya=n(Zt,"P",{});var g0=s(ya);oio=r(g0,"The feature extractor class to instantiate is selected based on the "),Eae=n(g0,"CODE",{});var pHr=s(Eae);rio=r(pHr,"model_type"),pHr.forEach(t),tio=r(g0,` property of the config object
(either passed as an argument or loaded from `),Cae=n(g0,"CODE",{});var _Hr=s(Cae);aio=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),nio=r(g0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wae=n(g0,"CODE",{});var bHr=s(wae);sio=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),lio=r(g0,":"),g0.forEach(t),iio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);rh=n(te,"LI",{});var OAe=s(rh);Aae=n(OAe,"STRONG",{});var vHr=s(Aae);dio=r(vHr,"beit"),vHr.forEach(t),cio=r(OAe," \u2014 "),gB=n(OAe,"A",{href:!0});var FHr=s(gB);mio=r(FHr,"BeitFeatureExtractor"),FHr.forEach(t),fio=r(OAe," (BEiT model)"),OAe.forEach(t),gio=i(te),th=n(te,"LI",{});var VAe=s(th);yae=n(VAe,"STRONG",{});var THr=s(yae);hio=r(THr,"clip"),THr.forEach(t),uio=r(VAe," \u2014 "),hB=n(VAe,"A",{href:!0});var MHr=s(hB);pio=r(MHr,"CLIPFeatureExtractor"),MHr.forEach(t),_io=r(VAe," (CLIP model)"),VAe.forEach(t),bio=i(te),ah=n(te,"LI",{});var XAe=s(ah);Lae=n(XAe,"STRONG",{});var EHr=s(Lae);vio=r(EHr,"convnext"),EHr.forEach(t),Fio=r(XAe," \u2014 "),uB=n(XAe,"A",{href:!0});var CHr=s(uB);Tio=r(CHr,"ConvNextFeatureExtractor"),CHr.forEach(t),Mio=r(XAe," (ConvNext model)"),XAe.forEach(t),Eio=i(te),nh=n(te,"LI",{});var zAe=s(nh);xae=n(zAe,"STRONG",{});var wHr=s(xae);Cio=r(wHr,"data2vec-audio"),wHr.forEach(t),wio=r(zAe," \u2014 "),pB=n(zAe,"A",{href:!0});var AHr=s(pB);Aio=r(AHr,"Wav2Vec2FeatureExtractor"),AHr.forEach(t),yio=r(zAe," (Data2VecAudio model)"),zAe.forEach(t),Lio=i(te),sh=n(te,"LI",{});var WAe=s(sh);$ae=n(WAe,"STRONG",{});var yHr=s($ae);xio=r(yHr,"data2vec-vision"),yHr.forEach(t),$io=r(WAe," \u2014 "),_B=n(WAe,"A",{href:!0});var LHr=s(_B);kio=r(LHr,"BeitFeatureExtractor"),LHr.forEach(t),Sio=r(WAe," (Data2VecVision model)"),WAe.forEach(t),Rio=i(te),lh=n(te,"LI",{});var QAe=s(lh);kae=n(QAe,"STRONG",{});var xHr=s(kae);Pio=r(xHr,"deit"),xHr.forEach(t),Bio=r(QAe," \u2014 "),bB=n(QAe,"A",{href:!0});var $Hr=s(bB);Iio=r($Hr,"DeiTFeatureExtractor"),$Hr.forEach(t),qio=r(QAe," (DeiT model)"),QAe.forEach(t),Nio=i(te),ih=n(te,"LI",{});var HAe=s(ih);Sae=n(HAe,"STRONG",{});var kHr=s(Sae);jio=r(kHr,"detr"),kHr.forEach(t),Dio=r(HAe," \u2014 "),vB=n(HAe,"A",{href:!0});var SHr=s(vB);Gio=r(SHr,"DetrFeatureExtractor"),SHr.forEach(t),Oio=r(HAe," (DETR model)"),HAe.forEach(t),Vio=i(te),dh=n(te,"LI",{});var UAe=s(dh);Rae=n(UAe,"STRONG",{});var RHr=s(Rae);Xio=r(RHr,"dpt"),RHr.forEach(t),zio=r(UAe," \u2014 "),FB=n(UAe,"A",{href:!0});var PHr=s(FB);Wio=r(PHr,"DPTFeatureExtractor"),PHr.forEach(t),Qio=r(UAe," (DPT model)"),UAe.forEach(t),Hio=i(te),ch=n(te,"LI",{});var JAe=s(ch);Pae=n(JAe,"STRONG",{});var BHr=s(Pae);Uio=r(BHr,"flava"),BHr.forEach(t),Jio=r(JAe," \u2014 "),TB=n(JAe,"A",{href:!0});var IHr=s(TB);Yio=r(IHr,"FlavaFeatureExtractor"),IHr.forEach(t),Kio=r(JAe," (Flava model)"),JAe.forEach(t),Zio=i(te),mh=n(te,"LI",{});var YAe=s(mh);Bae=n(YAe,"STRONG",{});var qHr=s(Bae);edo=r(qHr,"glpn"),qHr.forEach(t),odo=r(YAe," \u2014 "),MB=n(YAe,"A",{href:!0});var NHr=s(MB);rdo=r(NHr,"GLPNFeatureExtractor"),NHr.forEach(t),tdo=r(YAe," (GLPN model)"),YAe.forEach(t),ado=i(te),fh=n(te,"LI",{});var KAe=s(fh);Iae=n(KAe,"STRONG",{});var jHr=s(Iae);ndo=r(jHr,"hubert"),jHr.forEach(t),sdo=r(KAe," \u2014 "),EB=n(KAe,"A",{href:!0});var DHr=s(EB);ldo=r(DHr,"Wav2Vec2FeatureExtractor"),DHr.forEach(t),ido=r(KAe," (Hubert model)"),KAe.forEach(t),ddo=i(te),gh=n(te,"LI",{});var ZAe=s(gh);qae=n(ZAe,"STRONG",{});var GHr=s(qae);cdo=r(GHr,"layoutlmv2"),GHr.forEach(t),mdo=r(ZAe," \u2014 "),CB=n(ZAe,"A",{href:!0});var OHr=s(CB);fdo=r(OHr,"LayoutLMv2FeatureExtractor"),OHr.forEach(t),gdo=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),hdo=i(te),hh=n(te,"LI",{});var e0e=s(hh);Nae=n(e0e,"STRONG",{});var VHr=s(Nae);udo=r(VHr,"maskformer"),VHr.forEach(t),pdo=r(e0e," \u2014 "),wB=n(e0e,"A",{href:!0});var XHr=s(wB);_do=r(XHr,"MaskFormerFeatureExtractor"),XHr.forEach(t),bdo=r(e0e," (MaskFormer model)"),e0e.forEach(t),vdo=i(te),uh=n(te,"LI",{});var o0e=s(uh);jae=n(o0e,"STRONG",{});var zHr=s(jae);Fdo=r(zHr,"perceiver"),zHr.forEach(t),Tdo=r(o0e," \u2014 "),AB=n(o0e,"A",{href:!0});var WHr=s(AB);Mdo=r(WHr,"PerceiverFeatureExtractor"),WHr.forEach(t),Edo=r(o0e," (Perceiver model)"),o0e.forEach(t),Cdo=i(te),ph=n(te,"LI",{});var r0e=s(ph);Dae=n(r0e,"STRONG",{});var QHr=s(Dae);wdo=r(QHr,"poolformer"),QHr.forEach(t),Ado=r(r0e," \u2014 "),yB=n(r0e,"A",{href:!0});var HHr=s(yB);ydo=r(HHr,"PoolFormerFeatureExtractor"),HHr.forEach(t),Ldo=r(r0e," (PoolFormer model)"),r0e.forEach(t),xdo=i(te),_h=n(te,"LI",{});var t0e=s(_h);Gae=n(t0e,"STRONG",{});var UHr=s(Gae);$do=r(UHr,"regnet"),UHr.forEach(t),kdo=r(t0e," \u2014 "),LB=n(t0e,"A",{href:!0});var JHr=s(LB);Sdo=r(JHr,"ConvNextFeatureExtractor"),JHr.forEach(t),Rdo=r(t0e," (RegNet model)"),t0e.forEach(t),Pdo=i(te),bh=n(te,"LI",{});var a0e=s(bh);Oae=n(a0e,"STRONG",{});var YHr=s(Oae);Bdo=r(YHr,"resnet"),YHr.forEach(t),Ido=r(a0e," \u2014 "),xB=n(a0e,"A",{href:!0});var KHr=s(xB);qdo=r(KHr,"ConvNextFeatureExtractor"),KHr.forEach(t),Ndo=r(a0e," (ResNet model)"),a0e.forEach(t),jdo=i(te),vh=n(te,"LI",{});var n0e=s(vh);Vae=n(n0e,"STRONG",{});var ZHr=s(Vae);Ddo=r(ZHr,"segformer"),ZHr.forEach(t),Gdo=r(n0e," \u2014 "),$B=n(n0e,"A",{href:!0});var eUr=s($B);Odo=r(eUr,"SegformerFeatureExtractor"),eUr.forEach(t),Vdo=r(n0e," (SegFormer model)"),n0e.forEach(t),Xdo=i(te),Fh=n(te,"LI",{});var s0e=s(Fh);Xae=n(s0e,"STRONG",{});var oUr=s(Xae);zdo=r(oUr,"speech_to_text"),oUr.forEach(t),Wdo=r(s0e," \u2014 "),kB=n(s0e,"A",{href:!0});var rUr=s(kB);Qdo=r(rUr,"Speech2TextFeatureExtractor"),rUr.forEach(t),Hdo=r(s0e," (Speech2Text model)"),s0e.forEach(t),Udo=i(te),Th=n(te,"LI",{});var l0e=s(Th);zae=n(l0e,"STRONG",{});var tUr=s(zae);Jdo=r(tUr,"swin"),tUr.forEach(t),Ydo=r(l0e," \u2014 "),SB=n(l0e,"A",{href:!0});var aUr=s(SB);Kdo=r(aUr,"ViTFeatureExtractor"),aUr.forEach(t),Zdo=r(l0e," (Swin model)"),l0e.forEach(t),eco=i(te),Mh=n(te,"LI",{});var i0e=s(Mh);Wae=n(i0e,"STRONG",{});var nUr=s(Wae);oco=r(nUr,"van"),nUr.forEach(t),rco=r(i0e," \u2014 "),RB=n(i0e,"A",{href:!0});var sUr=s(RB);tco=r(sUr,"ConvNextFeatureExtractor"),sUr.forEach(t),aco=r(i0e," (VAN model)"),i0e.forEach(t),nco=i(te),Eh=n(te,"LI",{});var d0e=s(Eh);Qae=n(d0e,"STRONG",{});var lUr=s(Qae);sco=r(lUr,"vit"),lUr.forEach(t),lco=r(d0e," \u2014 "),PB=n(d0e,"A",{href:!0});var iUr=s(PB);ico=r(iUr,"ViTFeatureExtractor"),iUr.forEach(t),dco=r(d0e," (ViT model)"),d0e.forEach(t),cco=i(te),Ch=n(te,"LI",{});var c0e=s(Ch);Hae=n(c0e,"STRONG",{});var dUr=s(Hae);mco=r(dUr,"vit_mae"),dUr.forEach(t),fco=r(c0e," \u2014 "),BB=n(c0e,"A",{href:!0});var cUr=s(BB);gco=r(cUr,"ViTFeatureExtractor"),cUr.forEach(t),hco=r(c0e," (ViTMAE model)"),c0e.forEach(t),uco=i(te),wh=n(te,"LI",{});var m0e=s(wh);Uae=n(m0e,"STRONG",{});var mUr=s(Uae);pco=r(mUr,"wav2vec2"),mUr.forEach(t),_co=r(m0e," \u2014 "),IB=n(m0e,"A",{href:!0});var fUr=s(IB);bco=r(fUr,"Wav2Vec2FeatureExtractor"),fUr.forEach(t),vco=r(m0e," (Wav2Vec2 model)"),m0e.forEach(t),Fco=i(te),Ah=n(te,"LI",{});var f0e=s(Ah);Jae=n(f0e,"STRONG",{});var gUr=s(Jae);Tco=r(gUr,"wav2vec2-conformer"),gUr.forEach(t),Mco=r(f0e," \u2014 "),qB=n(f0e,"A",{href:!0});var hUr=s(qB);Eco=r(hUr,"Wav2Vec2FeatureExtractor"),hUr.forEach(t),Cco=r(f0e," (Wav2Vec2-Conformer model)"),f0e.forEach(t),wco=i(te),yh=n(te,"LI",{});var g0e=s(yh);Yae=n(g0e,"STRONG",{});var uUr=s(Yae);Aco=r(uUr,"yolos"),uUr.forEach(t),yco=r(g0e," \u2014 "),NB=n(g0e,"A",{href:!0});var pUr=s(NB);Lco=r(pUr,"YolosFeatureExtractor"),pUr.forEach(t),xco=r(g0e," (YOLOS model)"),g0e.forEach(t),te.forEach(t),$co=i(Zt),T(Lh.$$.fragment,Zt),kco=i(Zt),T(xh.$$.fragment,Zt),Zt.forEach(t),Sco=i(Ns),$h=n(Ns,"DIV",{class:!0});var UNe=s($h);T(xy.$$.fragment,UNe),Rco=i(UNe),Kae=n(UNe,"P",{});var _Ur=s(Kae);Pco=r(_Ur,"Register a new feature extractor for this class."),_Ur.forEach(t),UNe.forEach(t),Ns.forEach(t),HIe=i(m),Mi=n(m,"H2",{class:!0});var JNe=s(Mi);kh=n(JNe,"A",{id:!0,class:!0,href:!0});var bUr=s(kh);Zae=n(bUr,"SPAN",{});var vUr=s(Zae);T($y.$$.fragment,vUr),vUr.forEach(t),bUr.forEach(t),Bco=i(JNe),ene=n(JNe,"SPAN",{});var FUr=s(ene);Ico=r(FUr,"AutoProcessor"),FUr.forEach(t),JNe.forEach(t),UIe=i(m),yo=n(m,"DIV",{class:!0});var js=s(yo);T(ky.$$.fragment,js),qco=i(js),Sy=n(js,"P",{});var YNe=s(Sy);Nco=r(YNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=n(YNe,"A",{href:!0});var TUr=s(jB);jco=r(TUr,"AutoProcessor.from_pretrained()"),TUr.forEach(t),Dco=r(YNe," class method."),YNe.forEach(t),Gco=i(js),Ry=n(js,"P",{});var KNe=s(Ry);Oco=r(KNe,"This class cannot be instantiated directly using "),one=n(KNe,"CODE",{});var MUr=s(one);Vco=r(MUr,"__init__()"),MUr.forEach(t),Xco=r(KNe," (throws an error)."),KNe.forEach(t),zco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(Py.$$.fragment,ea),Wco=i(ea),rne=n(ea,"P",{});var EUr=s(rne);Qco=r(EUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),EUr.forEach(t),Hco=i(ea),Ei=n(ea,"P",{});var SK=s(Ei);Uco=r(SK,"The processor class to instantiate is selected based on the "),tne=n(SK,"CODE",{});var CUr=s(tne);Jco=r(CUr,"model_type"),CUr.forEach(t),Yco=r(SK,` property of the config object (either
passed as an argument or loaded from `),ane=n(SK,"CODE",{});var wUr=s(ane);Kco=r(wUr,"pretrained_model_name_or_path"),wUr.forEach(t),Zco=r(SK," if possible):"),SK.forEach(t),emo=i(ea),ue=n(ea,"UL",{});var be=s(ue);Sh=n(be,"LI",{});var h0e=s(Sh);nne=n(h0e,"STRONG",{});var AUr=s(nne);omo=r(AUr,"clip"),AUr.forEach(t),rmo=r(h0e," \u2014 "),DB=n(h0e,"A",{href:!0});var yUr=s(DB);tmo=r(yUr,"CLIPProcessor"),yUr.forEach(t),amo=r(h0e," (CLIP model)"),h0e.forEach(t),nmo=i(be),Rh=n(be,"LI",{});var u0e=s(Rh);sne=n(u0e,"STRONG",{});var LUr=s(sne);smo=r(LUr,"flava"),LUr.forEach(t),lmo=r(u0e," \u2014 "),lne=n(u0e,"CODE",{});var xUr=s(lne);imo=r(xUr,"FLAVAProcessor"),xUr.forEach(t),dmo=r(u0e," (Flava model)"),u0e.forEach(t),cmo=i(be),Ph=n(be,"LI",{});var p0e=s(Ph);ine=n(p0e,"STRONG",{});var $Ur=s(ine);mmo=r($Ur,"layoutlmv2"),$Ur.forEach(t),fmo=r(p0e," \u2014 "),GB=n(p0e,"A",{href:!0});var kUr=s(GB);gmo=r(kUr,"LayoutLMv2Processor"),kUr.forEach(t),hmo=r(p0e," (LayoutLMv2 model)"),p0e.forEach(t),umo=i(be),Bh=n(be,"LI",{});var _0e=s(Bh);dne=n(_0e,"STRONG",{});var SUr=s(dne);pmo=r(SUr,"layoutxlm"),SUr.forEach(t),_mo=r(_0e," \u2014 "),OB=n(_0e,"A",{href:!0});var RUr=s(OB);bmo=r(RUr,"LayoutXLMProcessor"),RUr.forEach(t),vmo=r(_0e," (LayoutXLM model)"),_0e.forEach(t),Fmo=i(be),Ih=n(be,"LI",{});var b0e=s(Ih);cne=n(b0e,"STRONG",{});var PUr=s(cne);Tmo=r(PUr,"sew"),PUr.forEach(t),Mmo=r(b0e," \u2014 "),VB=n(b0e,"A",{href:!0});var BUr=s(VB);Emo=r(BUr,"Wav2Vec2Processor"),BUr.forEach(t),Cmo=r(b0e," (SEW model)"),b0e.forEach(t),wmo=i(be),qh=n(be,"LI",{});var v0e=s(qh);mne=n(v0e,"STRONG",{});var IUr=s(mne);Amo=r(IUr,"sew-d"),IUr.forEach(t),ymo=r(v0e," \u2014 "),XB=n(v0e,"A",{href:!0});var qUr=s(XB);Lmo=r(qUr,"Wav2Vec2Processor"),qUr.forEach(t),xmo=r(v0e," (SEW-D model)"),v0e.forEach(t),$mo=i(be),Nh=n(be,"LI",{});var F0e=s(Nh);fne=n(F0e,"STRONG",{});var NUr=s(fne);kmo=r(NUr,"speech_to_text"),NUr.forEach(t),Smo=r(F0e," \u2014 "),zB=n(F0e,"A",{href:!0});var jUr=s(zB);Rmo=r(jUr,"Speech2TextProcessor"),jUr.forEach(t),Pmo=r(F0e," (Speech2Text model)"),F0e.forEach(t),Bmo=i(be),jh=n(be,"LI",{});var T0e=s(jh);gne=n(T0e,"STRONG",{});var DUr=s(gne);Imo=r(DUr,"speech_to_text_2"),DUr.forEach(t),qmo=r(T0e," \u2014 "),WB=n(T0e,"A",{href:!0});var GUr=s(WB);Nmo=r(GUr,"Speech2Text2Processor"),GUr.forEach(t),jmo=r(T0e," (Speech2Text2 model)"),T0e.forEach(t),Dmo=i(be),Dh=n(be,"LI",{});var M0e=s(Dh);hne=n(M0e,"STRONG",{});var OUr=s(hne);Gmo=r(OUr,"trocr"),OUr.forEach(t),Omo=r(M0e," \u2014 "),QB=n(M0e,"A",{href:!0});var VUr=s(QB);Vmo=r(VUr,"TrOCRProcessor"),VUr.forEach(t),Xmo=r(M0e," (TrOCR model)"),M0e.forEach(t),zmo=i(be),Gh=n(be,"LI",{});var E0e=s(Gh);une=n(E0e,"STRONG",{});var XUr=s(une);Wmo=r(XUr,"unispeech"),XUr.forEach(t),Qmo=r(E0e," \u2014 "),HB=n(E0e,"A",{href:!0});var zUr=s(HB);Hmo=r(zUr,"Wav2Vec2Processor"),zUr.forEach(t),Umo=r(E0e," (UniSpeech model)"),E0e.forEach(t),Jmo=i(be),Oh=n(be,"LI",{});var C0e=s(Oh);pne=n(C0e,"STRONG",{});var WUr=s(pne);Ymo=r(WUr,"unispeech-sat"),WUr.forEach(t),Kmo=r(C0e," \u2014 "),UB=n(C0e,"A",{href:!0});var QUr=s(UB);Zmo=r(QUr,"Wav2Vec2Processor"),QUr.forEach(t),efo=r(C0e," (UniSpeechSat model)"),C0e.forEach(t),ofo=i(be),Vh=n(be,"LI",{});var w0e=s(Vh);_ne=n(w0e,"STRONG",{});var HUr=s(_ne);rfo=r(HUr,"vilt"),HUr.forEach(t),tfo=r(w0e," \u2014 "),JB=n(w0e,"A",{href:!0});var UUr=s(JB);afo=r(UUr,"ViltProcessor"),UUr.forEach(t),nfo=r(w0e," (ViLT model)"),w0e.forEach(t),sfo=i(be),Xh=n(be,"LI",{});var A0e=s(Xh);bne=n(A0e,"STRONG",{});var JUr=s(bne);lfo=r(JUr,"vision-text-dual-encoder"),JUr.forEach(t),ifo=r(A0e," \u2014 "),YB=n(A0e,"A",{href:!0});var YUr=s(YB);dfo=r(YUr,"VisionTextDualEncoderProcessor"),YUr.forEach(t),cfo=r(A0e," (VisionTextDualEncoder model)"),A0e.forEach(t),mfo=i(be),zh=n(be,"LI",{});var y0e=s(zh);vne=n(y0e,"STRONG",{});var KUr=s(vne);ffo=r(KUr,"wav2vec2"),KUr.forEach(t),gfo=r(y0e," \u2014 "),KB=n(y0e,"A",{href:!0});var ZUr=s(KB);hfo=r(ZUr,"Wav2Vec2Processor"),ZUr.forEach(t),ufo=r(y0e," (Wav2Vec2 model)"),y0e.forEach(t),pfo=i(be),Wh=n(be,"LI",{});var L0e=s(Wh);Fne=n(L0e,"STRONG",{});var eJr=s(Fne);_fo=r(eJr,"wav2vec2-conformer"),eJr.forEach(t),bfo=r(L0e," \u2014 "),ZB=n(L0e,"A",{href:!0});var oJr=s(ZB);vfo=r(oJr,"Wav2Vec2Processor"),oJr.forEach(t),Ffo=r(L0e," (Wav2Vec2-Conformer model)"),L0e.forEach(t),Tfo=i(be),Qh=n(be,"LI",{});var x0e=s(Qh);Tne=n(x0e,"STRONG",{});var rJr=s(Tne);Mfo=r(rJr,"wavlm"),rJr.forEach(t),Efo=r(x0e," \u2014 "),eI=n(x0e,"A",{href:!0});var tJr=s(eI);Cfo=r(tJr,"Wav2Vec2Processor"),tJr.forEach(t),wfo=r(x0e," (WavLM model)"),x0e.forEach(t),be.forEach(t),Afo=i(ea),T(Hh.$$.fragment,ea),yfo=i(ea),T(Uh.$$.fragment,ea),ea.forEach(t),Lfo=i(js),Jh=n(js,"DIV",{class:!0});var ZNe=s(Jh);T(By.$$.fragment,ZNe),xfo=i(ZNe),Mne=n(ZNe,"P",{});var aJr=s(Mne);$fo=r(aJr,"Register a new processor for this class."),aJr.forEach(t),ZNe.forEach(t),js.forEach(t),JIe=i(m),Ci=n(m,"H2",{class:!0});var eje=s(Ci);Yh=n(eje,"A",{id:!0,class:!0,href:!0});var nJr=s(Yh);Ene=n(nJr,"SPAN",{});var sJr=s(Ene);T(Iy.$$.fragment,sJr),sJr.forEach(t),nJr.forEach(t),kfo=i(eje),Cne=n(eje,"SPAN",{});var lJr=s(Cne);Sfo=r(lJr,"AutoModel"),lJr.forEach(t),eje.forEach(t),YIe=i(m),Lo=n(m,"DIV",{class:!0});var Ds=s(Lo);T(qy.$$.fragment,Ds),Rfo=i(Ds),wi=n(Ds,"P",{});var RK=s(wi);Pfo=r(RK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oI=n(RK,"A",{href:!0});var iJr=s(oI);Bfo=r(iJr,"from_pretrained()"),iJr.forEach(t),Ifo=r(RK," class method or the "),rI=n(RK,"A",{href:!0});var dJr=s(rI);qfo=r(dJr,"from_config()"),dJr.forEach(t),Nfo=r(RK,` class
method.`),RK.forEach(t),jfo=i(Ds),Ny=n(Ds,"P",{});var oje=s(Ny);Dfo=r(oje,"This class cannot be instantiated directly using "),wne=n(oje,"CODE",{});var cJr=s(wne);Gfo=r(cJr,"__init__()"),cJr.forEach(t),Ofo=r(oje," (throws an error)."),oje.forEach(t),Vfo=i(Ds),tt=n(Ds,"DIV",{class:!0});var h0=s(tt);T(jy.$$.fragment,h0),Xfo=i(h0),Ane=n(h0,"P",{});var mJr=s(Ane);zfo=r(mJr,"Instantiates one of the base model classes of the library from a configuration."),mJr.forEach(t),Wfo=i(h0),Ai=n(h0,"P",{});var PK=s(Ai);Qfo=r(PK,`Note:
Loading a model from its configuration file does `),yne=n(PK,"STRONG",{});var fJr=s(yne);Hfo=r(fJr,"not"),fJr.forEach(t),Ufo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tI=n(PK,"A",{href:!0});var gJr=s(tI);Jfo=r(gJr,"from_pretrained()"),gJr.forEach(t),Yfo=r(PK," to load the model weights."),PK.forEach(t),Kfo=i(h0),T(Kh.$$.fragment,h0),h0.forEach(t),Zfo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(Dy.$$.fragment,oa),ego=i(oa),Lne=n(oa,"P",{});var hJr=s(Lne);ogo=r(hJr,"Instantiate one of the base model classes of the library from a pretrained model."),hJr.forEach(t),rgo=i(oa),La=n(oa,"P",{});var u0=s(La);tgo=r(u0,"The model class to instantiate is selected based on the "),xne=n(u0,"CODE",{});var uJr=s(xne);ago=r(uJr,"model_type"),uJr.forEach(t),ngo=r(u0,` property of the config object (either
passed as an argument or loaded from `),$ne=n(u0,"CODE",{});var pJr=s($ne);sgo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),lgo=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(u0,"CODE",{});var _Jr=s(kne);igo=r(_Jr,"pretrained_model_name_or_path"),_Jr.forEach(t),dgo=r(u0,":"),u0.forEach(t),cgo=i(oa),x=n(oa,"UL",{});var $=s(x);Zh=n($,"LI",{});var $0e=s(Zh);Sne=n($0e,"STRONG",{});var bJr=s(Sne);mgo=r(bJr,"albert"),bJr.forEach(t),fgo=r($0e," \u2014 "),aI=n($0e,"A",{href:!0});var vJr=s(aI);ggo=r(vJr,"AlbertModel"),vJr.forEach(t),hgo=r($0e," (ALBERT model)"),$0e.forEach(t),ugo=i($),eu=n($,"LI",{});var k0e=s(eu);Rne=n(k0e,"STRONG",{});var FJr=s(Rne);pgo=r(FJr,"bart"),FJr.forEach(t),_go=r(k0e," \u2014 "),nI=n(k0e,"A",{href:!0});var TJr=s(nI);bgo=r(TJr,"BartModel"),TJr.forEach(t),vgo=r(k0e," (BART model)"),k0e.forEach(t),Fgo=i($),ou=n($,"LI",{});var S0e=s(ou);Pne=n(S0e,"STRONG",{});var MJr=s(Pne);Tgo=r(MJr,"beit"),MJr.forEach(t),Mgo=r(S0e," \u2014 "),sI=n(S0e,"A",{href:!0});var EJr=s(sI);Ego=r(EJr,"BeitModel"),EJr.forEach(t),Cgo=r(S0e," (BEiT model)"),S0e.forEach(t),wgo=i($),ru=n($,"LI",{});var R0e=s(ru);Bne=n(R0e,"STRONG",{});var CJr=s(Bne);Ago=r(CJr,"bert"),CJr.forEach(t),ygo=r(R0e," \u2014 "),lI=n(R0e,"A",{href:!0});var wJr=s(lI);Lgo=r(wJr,"BertModel"),wJr.forEach(t),xgo=r(R0e," (BERT model)"),R0e.forEach(t),$go=i($),tu=n($,"LI",{});var P0e=s(tu);Ine=n(P0e,"STRONG",{});var AJr=s(Ine);kgo=r(AJr,"bert-generation"),AJr.forEach(t),Sgo=r(P0e," \u2014 "),iI=n(P0e,"A",{href:!0});var yJr=s(iI);Rgo=r(yJr,"BertGenerationEncoder"),yJr.forEach(t),Pgo=r(P0e," (Bert Generation model)"),P0e.forEach(t),Bgo=i($),au=n($,"LI",{});var B0e=s(au);qne=n(B0e,"STRONG",{});var LJr=s(qne);Igo=r(LJr,"big_bird"),LJr.forEach(t),qgo=r(B0e," \u2014 "),dI=n(B0e,"A",{href:!0});var xJr=s(dI);Ngo=r(xJr,"BigBirdModel"),xJr.forEach(t),jgo=r(B0e," (BigBird model)"),B0e.forEach(t),Dgo=i($),nu=n($,"LI",{});var I0e=s(nu);Nne=n(I0e,"STRONG",{});var $Jr=s(Nne);Ggo=r($Jr,"bigbird_pegasus"),$Jr.forEach(t),Ogo=r(I0e," \u2014 "),cI=n(I0e,"A",{href:!0});var kJr=s(cI);Vgo=r(kJr,"BigBirdPegasusModel"),kJr.forEach(t),Xgo=r(I0e," (BigBirdPegasus model)"),I0e.forEach(t),zgo=i($),su=n($,"LI",{});var q0e=s(su);jne=n(q0e,"STRONG",{});var SJr=s(jne);Wgo=r(SJr,"blenderbot"),SJr.forEach(t),Qgo=r(q0e," \u2014 "),mI=n(q0e,"A",{href:!0});var RJr=s(mI);Hgo=r(RJr,"BlenderbotModel"),RJr.forEach(t),Ugo=r(q0e," (Blenderbot model)"),q0e.forEach(t),Jgo=i($),lu=n($,"LI",{});var N0e=s(lu);Dne=n(N0e,"STRONG",{});var PJr=s(Dne);Ygo=r(PJr,"blenderbot-small"),PJr.forEach(t),Kgo=r(N0e," \u2014 "),fI=n(N0e,"A",{href:!0});var BJr=s(fI);Zgo=r(BJr,"BlenderbotSmallModel"),BJr.forEach(t),eho=r(N0e," (BlenderbotSmall model)"),N0e.forEach(t),oho=i($),iu=n($,"LI",{});var j0e=s(iu);Gne=n(j0e,"STRONG",{});var IJr=s(Gne);rho=r(IJr,"camembert"),IJr.forEach(t),tho=r(j0e," \u2014 "),gI=n(j0e,"A",{href:!0});var qJr=s(gI);aho=r(qJr,"CamembertModel"),qJr.forEach(t),nho=r(j0e," (CamemBERT model)"),j0e.forEach(t),sho=i($),du=n($,"LI",{});var D0e=s(du);One=n(D0e,"STRONG",{});var NJr=s(One);lho=r(NJr,"canine"),NJr.forEach(t),iho=r(D0e," \u2014 "),hI=n(D0e,"A",{href:!0});var jJr=s(hI);dho=r(jJr,"CanineModel"),jJr.forEach(t),cho=r(D0e," (Canine model)"),D0e.forEach(t),mho=i($),cu=n($,"LI",{});var G0e=s(cu);Vne=n(G0e,"STRONG",{});var DJr=s(Vne);fho=r(DJr,"clip"),DJr.forEach(t),gho=r(G0e," \u2014 "),uI=n(G0e,"A",{href:!0});var GJr=s(uI);hho=r(GJr,"CLIPModel"),GJr.forEach(t),uho=r(G0e," (CLIP model)"),G0e.forEach(t),pho=i($),mu=n($,"LI",{});var O0e=s(mu);Xne=n(O0e,"STRONG",{});var OJr=s(Xne);_ho=r(OJr,"convbert"),OJr.forEach(t),bho=r(O0e," \u2014 "),pI=n(O0e,"A",{href:!0});var VJr=s(pI);vho=r(VJr,"ConvBertModel"),VJr.forEach(t),Fho=r(O0e," (ConvBERT model)"),O0e.forEach(t),Tho=i($),fu=n($,"LI",{});var V0e=s(fu);zne=n(V0e,"STRONG",{});var XJr=s(zne);Mho=r(XJr,"convnext"),XJr.forEach(t),Eho=r(V0e," \u2014 "),_I=n(V0e,"A",{href:!0});var zJr=s(_I);Cho=r(zJr,"ConvNextModel"),zJr.forEach(t),who=r(V0e," (ConvNext model)"),V0e.forEach(t),Aho=i($),gu=n($,"LI",{});var X0e=s(gu);Wne=n(X0e,"STRONG",{});var WJr=s(Wne);yho=r(WJr,"ctrl"),WJr.forEach(t),Lho=r(X0e," \u2014 "),bI=n(X0e,"A",{href:!0});var QJr=s(bI);xho=r(QJr,"CTRLModel"),QJr.forEach(t),$ho=r(X0e," (CTRL model)"),X0e.forEach(t),kho=i($),hu=n($,"LI",{});var z0e=s(hu);Qne=n(z0e,"STRONG",{});var HJr=s(Qne);Sho=r(HJr,"data2vec-audio"),HJr.forEach(t),Rho=r(z0e," \u2014 "),vI=n(z0e,"A",{href:!0});var UJr=s(vI);Pho=r(UJr,"Data2VecAudioModel"),UJr.forEach(t),Bho=r(z0e," (Data2VecAudio model)"),z0e.forEach(t),Iho=i($),uu=n($,"LI",{});var W0e=s(uu);Hne=n(W0e,"STRONG",{});var JJr=s(Hne);qho=r(JJr,"data2vec-text"),JJr.forEach(t),Nho=r(W0e," \u2014 "),FI=n(W0e,"A",{href:!0});var YJr=s(FI);jho=r(YJr,"Data2VecTextModel"),YJr.forEach(t),Dho=r(W0e," (Data2VecText model)"),W0e.forEach(t),Gho=i($),pu=n($,"LI",{});var Q0e=s(pu);Une=n(Q0e,"STRONG",{});var KJr=s(Une);Oho=r(KJr,"data2vec-vision"),KJr.forEach(t),Vho=r(Q0e," \u2014 "),TI=n(Q0e,"A",{href:!0});var ZJr=s(TI);Xho=r(ZJr,"Data2VecVisionModel"),ZJr.forEach(t),zho=r(Q0e," (Data2VecVision model)"),Q0e.forEach(t),Who=i($),_u=n($,"LI",{});var H0e=s(_u);Jne=n(H0e,"STRONG",{});var eYr=s(Jne);Qho=r(eYr,"deberta"),eYr.forEach(t),Hho=r(H0e," \u2014 "),MI=n(H0e,"A",{href:!0});var oYr=s(MI);Uho=r(oYr,"DebertaModel"),oYr.forEach(t),Jho=r(H0e," (DeBERTa model)"),H0e.forEach(t),Yho=i($),bu=n($,"LI",{});var U0e=s(bu);Yne=n(U0e,"STRONG",{});var rYr=s(Yne);Kho=r(rYr,"deberta-v2"),rYr.forEach(t),Zho=r(U0e," \u2014 "),EI=n(U0e,"A",{href:!0});var tYr=s(EI);euo=r(tYr,"DebertaV2Model"),tYr.forEach(t),ouo=r(U0e," (DeBERTa-v2 model)"),U0e.forEach(t),ruo=i($),vu=n($,"LI",{});var J0e=s(vu);Kne=n(J0e,"STRONG",{});var aYr=s(Kne);tuo=r(aYr,"decision_transformer"),aYr.forEach(t),auo=r(J0e," \u2014 "),CI=n(J0e,"A",{href:!0});var nYr=s(CI);nuo=r(nYr,"DecisionTransformerModel"),nYr.forEach(t),suo=r(J0e," (Decision Transformer model)"),J0e.forEach(t),luo=i($),Fu=n($,"LI",{});var Y0e=s(Fu);Zne=n(Y0e,"STRONG",{});var sYr=s(Zne);iuo=r(sYr,"deit"),sYr.forEach(t),duo=r(Y0e," \u2014 "),wI=n(Y0e,"A",{href:!0});var lYr=s(wI);cuo=r(lYr,"DeiTModel"),lYr.forEach(t),muo=r(Y0e," (DeiT model)"),Y0e.forEach(t),fuo=i($),Tu=n($,"LI",{});var K0e=s(Tu);ese=n(K0e,"STRONG",{});var iYr=s(ese);guo=r(iYr,"detr"),iYr.forEach(t),huo=r(K0e," \u2014 "),AI=n(K0e,"A",{href:!0});var dYr=s(AI);uuo=r(dYr,"DetrModel"),dYr.forEach(t),puo=r(K0e," (DETR model)"),K0e.forEach(t),_uo=i($),Mu=n($,"LI",{});var Z0e=s(Mu);ose=n(Z0e,"STRONG",{});var cYr=s(ose);buo=r(cYr,"distilbert"),cYr.forEach(t),vuo=r(Z0e," \u2014 "),yI=n(Z0e,"A",{href:!0});var mYr=s(yI);Fuo=r(mYr,"DistilBertModel"),mYr.forEach(t),Tuo=r(Z0e," (DistilBERT model)"),Z0e.forEach(t),Muo=i($),Eu=n($,"LI",{});var e6e=s(Eu);rse=n(e6e,"STRONG",{});var fYr=s(rse);Euo=r(fYr,"dpr"),fYr.forEach(t),Cuo=r(e6e," \u2014 "),LI=n(e6e,"A",{href:!0});var gYr=s(LI);wuo=r(gYr,"DPRQuestionEncoder"),gYr.forEach(t),Auo=r(e6e," (DPR model)"),e6e.forEach(t),yuo=i($),Cu=n($,"LI",{});var o6e=s(Cu);tse=n(o6e,"STRONG",{});var hYr=s(tse);Luo=r(hYr,"dpt"),hYr.forEach(t),xuo=r(o6e," \u2014 "),xI=n(o6e,"A",{href:!0});var uYr=s(xI);$uo=r(uYr,"DPTModel"),uYr.forEach(t),kuo=r(o6e," (DPT model)"),o6e.forEach(t),Suo=i($),wu=n($,"LI",{});var r6e=s(wu);ase=n(r6e,"STRONG",{});var pYr=s(ase);Ruo=r(pYr,"electra"),pYr.forEach(t),Puo=r(r6e," \u2014 "),$I=n(r6e,"A",{href:!0});var _Yr=s($I);Buo=r(_Yr,"ElectraModel"),_Yr.forEach(t),Iuo=r(r6e," (ELECTRA model)"),r6e.forEach(t),quo=i($),Au=n($,"LI",{});var t6e=s(Au);nse=n(t6e,"STRONG",{});var bYr=s(nse);Nuo=r(bYr,"flaubert"),bYr.forEach(t),juo=r(t6e," \u2014 "),kI=n(t6e,"A",{href:!0});var vYr=s(kI);Duo=r(vYr,"FlaubertModel"),vYr.forEach(t),Guo=r(t6e," (FlauBERT model)"),t6e.forEach(t),Ouo=i($),yu=n($,"LI",{});var a6e=s(yu);sse=n(a6e,"STRONG",{});var FYr=s(sse);Vuo=r(FYr,"flava"),FYr.forEach(t),Xuo=r(a6e," \u2014 "),SI=n(a6e,"A",{href:!0});var TYr=s(SI);zuo=r(TYr,"FlavaModel"),TYr.forEach(t),Wuo=r(a6e," (Flava model)"),a6e.forEach(t),Quo=i($),Lu=n($,"LI",{});var n6e=s(Lu);lse=n(n6e,"STRONG",{});var MYr=s(lse);Huo=r(MYr,"fnet"),MYr.forEach(t),Uuo=r(n6e," \u2014 "),RI=n(n6e,"A",{href:!0});var EYr=s(RI);Juo=r(EYr,"FNetModel"),EYr.forEach(t),Yuo=r(n6e," (FNet model)"),n6e.forEach(t),Kuo=i($),xu=n($,"LI",{});var s6e=s(xu);ise=n(s6e,"STRONG",{});var CYr=s(ise);Zuo=r(CYr,"fsmt"),CYr.forEach(t),epo=r(s6e," \u2014 "),PI=n(s6e,"A",{href:!0});var wYr=s(PI);opo=r(wYr,"FSMTModel"),wYr.forEach(t),rpo=r(s6e," (FairSeq Machine-Translation model)"),s6e.forEach(t),tpo=i($),Rs=n($,"LI",{});var C$=s(Rs);dse=n(C$,"STRONG",{});var AYr=s(dse);apo=r(AYr,"funnel"),AYr.forEach(t),npo=r(C$," \u2014 "),BI=n(C$,"A",{href:!0});var yYr=s(BI);spo=r(yYr,"FunnelModel"),yYr.forEach(t),lpo=r(C$," or "),II=n(C$,"A",{href:!0});var LYr=s(II);ipo=r(LYr,"FunnelBaseModel"),LYr.forEach(t),dpo=r(C$," (Funnel Transformer model)"),C$.forEach(t),cpo=i($),$u=n($,"LI",{});var l6e=s($u);cse=n(l6e,"STRONG",{});var xYr=s(cse);mpo=r(xYr,"glpn"),xYr.forEach(t),fpo=r(l6e," \u2014 "),qI=n(l6e,"A",{href:!0});var $Yr=s(qI);gpo=r($Yr,"GLPNModel"),$Yr.forEach(t),hpo=r(l6e," (GLPN model)"),l6e.forEach(t),upo=i($),ku=n($,"LI",{});var i6e=s(ku);mse=n(i6e,"STRONG",{});var kYr=s(mse);ppo=r(kYr,"gpt2"),kYr.forEach(t),_po=r(i6e," \u2014 "),NI=n(i6e,"A",{href:!0});var SYr=s(NI);bpo=r(SYr,"GPT2Model"),SYr.forEach(t),vpo=r(i6e," (OpenAI GPT-2 model)"),i6e.forEach(t),Fpo=i($),Su=n($,"LI",{});var d6e=s(Su);fse=n(d6e,"STRONG",{});var RYr=s(fse);Tpo=r(RYr,"gpt_neo"),RYr.forEach(t),Mpo=r(d6e," \u2014 "),jI=n(d6e,"A",{href:!0});var PYr=s(jI);Epo=r(PYr,"GPTNeoModel"),PYr.forEach(t),Cpo=r(d6e," (GPT Neo model)"),d6e.forEach(t),wpo=i($),Ru=n($,"LI",{});var c6e=s(Ru);gse=n(c6e,"STRONG",{});var BYr=s(gse);Apo=r(BYr,"gptj"),BYr.forEach(t),ypo=r(c6e," \u2014 "),DI=n(c6e,"A",{href:!0});var IYr=s(DI);Lpo=r(IYr,"GPTJModel"),IYr.forEach(t),xpo=r(c6e," (GPT-J model)"),c6e.forEach(t),$po=i($),Pu=n($,"LI",{});var m6e=s(Pu);hse=n(m6e,"STRONG",{});var qYr=s(hse);kpo=r(qYr,"hubert"),qYr.forEach(t),Spo=r(m6e," \u2014 "),GI=n(m6e,"A",{href:!0});var NYr=s(GI);Rpo=r(NYr,"HubertModel"),NYr.forEach(t),Ppo=r(m6e," (Hubert model)"),m6e.forEach(t),Bpo=i($),Bu=n($,"LI",{});var f6e=s(Bu);use=n(f6e,"STRONG",{});var jYr=s(use);Ipo=r(jYr,"ibert"),jYr.forEach(t),qpo=r(f6e," \u2014 "),OI=n(f6e,"A",{href:!0});var DYr=s(OI);Npo=r(DYr,"IBertModel"),DYr.forEach(t),jpo=r(f6e," (I-BERT model)"),f6e.forEach(t),Dpo=i($),Iu=n($,"LI",{});var g6e=s(Iu);pse=n(g6e,"STRONG",{});var GYr=s(pse);Gpo=r(GYr,"imagegpt"),GYr.forEach(t),Opo=r(g6e," \u2014 "),VI=n(g6e,"A",{href:!0});var OYr=s(VI);Vpo=r(OYr,"ImageGPTModel"),OYr.forEach(t),Xpo=r(g6e," (ImageGPT model)"),g6e.forEach(t),zpo=i($),qu=n($,"LI",{});var h6e=s(qu);_se=n(h6e,"STRONG",{});var VYr=s(_se);Wpo=r(VYr,"layoutlm"),VYr.forEach(t),Qpo=r(h6e," \u2014 "),XI=n(h6e,"A",{href:!0});var XYr=s(XI);Hpo=r(XYr,"LayoutLMModel"),XYr.forEach(t),Upo=r(h6e," (LayoutLM model)"),h6e.forEach(t),Jpo=i($),Nu=n($,"LI",{});var u6e=s(Nu);bse=n(u6e,"STRONG",{});var zYr=s(bse);Ypo=r(zYr,"layoutlmv2"),zYr.forEach(t),Kpo=r(u6e," \u2014 "),zI=n(u6e,"A",{href:!0});var WYr=s(zI);Zpo=r(WYr,"LayoutLMv2Model"),WYr.forEach(t),e_o=r(u6e," (LayoutLMv2 model)"),u6e.forEach(t),o_o=i($),ju=n($,"LI",{});var p6e=s(ju);vse=n(p6e,"STRONG",{});var QYr=s(vse);r_o=r(QYr,"led"),QYr.forEach(t),t_o=r(p6e," \u2014 "),WI=n(p6e,"A",{href:!0});var HYr=s(WI);a_o=r(HYr,"LEDModel"),HYr.forEach(t),n_o=r(p6e," (LED model)"),p6e.forEach(t),s_o=i($),Du=n($,"LI",{});var _6e=s(Du);Fse=n(_6e,"STRONG",{});var UYr=s(Fse);l_o=r(UYr,"longformer"),UYr.forEach(t),i_o=r(_6e," \u2014 "),QI=n(_6e,"A",{href:!0});var JYr=s(QI);d_o=r(JYr,"LongformerModel"),JYr.forEach(t),c_o=r(_6e," (Longformer model)"),_6e.forEach(t),m_o=i($),Gu=n($,"LI",{});var b6e=s(Gu);Tse=n(b6e,"STRONG",{});var YYr=s(Tse);f_o=r(YYr,"luke"),YYr.forEach(t),g_o=r(b6e," \u2014 "),HI=n(b6e,"A",{href:!0});var KYr=s(HI);h_o=r(KYr,"LukeModel"),KYr.forEach(t),u_o=r(b6e," (LUKE model)"),b6e.forEach(t),p_o=i($),Ou=n($,"LI",{});var v6e=s(Ou);Mse=n(v6e,"STRONG",{});var ZYr=s(Mse);__o=r(ZYr,"lxmert"),ZYr.forEach(t),b_o=r(v6e," \u2014 "),UI=n(v6e,"A",{href:!0});var eKr=s(UI);v_o=r(eKr,"LxmertModel"),eKr.forEach(t),F_o=r(v6e," (LXMERT model)"),v6e.forEach(t),T_o=i($),Vu=n($,"LI",{});var F6e=s(Vu);Ese=n(F6e,"STRONG",{});var oKr=s(Ese);M_o=r(oKr,"m2m_100"),oKr.forEach(t),E_o=r(F6e," \u2014 "),JI=n(F6e,"A",{href:!0});var rKr=s(JI);C_o=r(rKr,"M2M100Model"),rKr.forEach(t),w_o=r(F6e," (M2M100 model)"),F6e.forEach(t),A_o=i($),Xu=n($,"LI",{});var T6e=s(Xu);Cse=n(T6e,"STRONG",{});var tKr=s(Cse);y_o=r(tKr,"marian"),tKr.forEach(t),L_o=r(T6e," \u2014 "),YI=n(T6e,"A",{href:!0});var aKr=s(YI);x_o=r(aKr,"MarianModel"),aKr.forEach(t),$_o=r(T6e," (Marian model)"),T6e.forEach(t),k_o=i($),zu=n($,"LI",{});var M6e=s(zu);wse=n(M6e,"STRONG",{});var nKr=s(wse);S_o=r(nKr,"maskformer"),nKr.forEach(t),R_o=r(M6e," \u2014 "),KI=n(M6e,"A",{href:!0});var sKr=s(KI);P_o=r(sKr,"MaskFormerModel"),sKr.forEach(t),B_o=r(M6e," (MaskFormer model)"),M6e.forEach(t),I_o=i($),Wu=n($,"LI",{});var E6e=s(Wu);Ase=n(E6e,"STRONG",{});var lKr=s(Ase);q_o=r(lKr,"mbart"),lKr.forEach(t),N_o=r(E6e," \u2014 "),ZI=n(E6e,"A",{href:!0});var iKr=s(ZI);j_o=r(iKr,"MBartModel"),iKr.forEach(t),D_o=r(E6e," (mBART model)"),E6e.forEach(t),G_o=i($),Qu=n($,"LI",{});var C6e=s(Qu);yse=n(C6e,"STRONG",{});var dKr=s(yse);O_o=r(dKr,"megatron-bert"),dKr.forEach(t),V_o=r(C6e," \u2014 "),eq=n(C6e,"A",{href:!0});var cKr=s(eq);X_o=r(cKr,"MegatronBertModel"),cKr.forEach(t),z_o=r(C6e," (MegatronBert model)"),C6e.forEach(t),W_o=i($),Hu=n($,"LI",{});var w6e=s(Hu);Lse=n(w6e,"STRONG",{});var mKr=s(Lse);Q_o=r(mKr,"mobilebert"),mKr.forEach(t),H_o=r(w6e," \u2014 "),oq=n(w6e,"A",{href:!0});var fKr=s(oq);U_o=r(fKr,"MobileBertModel"),fKr.forEach(t),J_o=r(w6e," (MobileBERT model)"),w6e.forEach(t),Y_o=i($),Uu=n($,"LI",{});var A6e=s(Uu);xse=n(A6e,"STRONG",{});var gKr=s(xse);K_o=r(gKr,"mpnet"),gKr.forEach(t),Z_o=r(A6e," \u2014 "),rq=n(A6e,"A",{href:!0});var hKr=s(rq);ebo=r(hKr,"MPNetModel"),hKr.forEach(t),obo=r(A6e," (MPNet model)"),A6e.forEach(t),rbo=i($),Ju=n($,"LI",{});var y6e=s(Ju);$se=n(y6e,"STRONG",{});var uKr=s($se);tbo=r(uKr,"mt5"),uKr.forEach(t),abo=r(y6e," \u2014 "),tq=n(y6e,"A",{href:!0});var pKr=s(tq);nbo=r(pKr,"MT5Model"),pKr.forEach(t),sbo=r(y6e," (mT5 model)"),y6e.forEach(t),lbo=i($),Yu=n($,"LI",{});var L6e=s(Yu);kse=n(L6e,"STRONG",{});var _Kr=s(kse);ibo=r(_Kr,"nystromformer"),_Kr.forEach(t),dbo=r(L6e," \u2014 "),aq=n(L6e,"A",{href:!0});var bKr=s(aq);cbo=r(bKr,"NystromformerModel"),bKr.forEach(t),mbo=r(L6e," (Nystromformer model)"),L6e.forEach(t),fbo=i($),Ku=n($,"LI",{});var x6e=s(Ku);Sse=n(x6e,"STRONG",{});var vKr=s(Sse);gbo=r(vKr,"openai-gpt"),vKr.forEach(t),hbo=r(x6e," \u2014 "),nq=n(x6e,"A",{href:!0});var FKr=s(nq);ubo=r(FKr,"OpenAIGPTModel"),FKr.forEach(t),pbo=r(x6e," (OpenAI GPT model)"),x6e.forEach(t),_bo=i($),Zu=n($,"LI",{});var $6e=s(Zu);Rse=n($6e,"STRONG",{});var TKr=s(Rse);bbo=r(TKr,"opt"),TKr.forEach(t),vbo=r($6e," \u2014 "),sq=n($6e,"A",{href:!0});var MKr=s(sq);Fbo=r(MKr,"OPTModel"),MKr.forEach(t),Tbo=r($6e," (OPT model)"),$6e.forEach(t),Mbo=i($),ep=n($,"LI",{});var k6e=s(ep);Pse=n(k6e,"STRONG",{});var EKr=s(Pse);Ebo=r(EKr,"pegasus"),EKr.forEach(t),Cbo=r(k6e," \u2014 "),lq=n(k6e,"A",{href:!0});var CKr=s(lq);wbo=r(CKr,"PegasusModel"),CKr.forEach(t),Abo=r(k6e," (Pegasus model)"),k6e.forEach(t),ybo=i($),op=n($,"LI",{});var S6e=s(op);Bse=n(S6e,"STRONG",{});var wKr=s(Bse);Lbo=r(wKr,"perceiver"),wKr.forEach(t),xbo=r(S6e," \u2014 "),iq=n(S6e,"A",{href:!0});var AKr=s(iq);$bo=r(AKr,"PerceiverModel"),AKr.forEach(t),kbo=r(S6e," (Perceiver model)"),S6e.forEach(t),Sbo=i($),rp=n($,"LI",{});var R6e=s(rp);Ise=n(R6e,"STRONG",{});var yKr=s(Ise);Rbo=r(yKr,"plbart"),yKr.forEach(t),Pbo=r(R6e," \u2014 "),dq=n(R6e,"A",{href:!0});var LKr=s(dq);Bbo=r(LKr,"PLBartModel"),LKr.forEach(t),Ibo=r(R6e," (PLBart model)"),R6e.forEach(t),qbo=i($),tp=n($,"LI",{});var P6e=s(tp);qse=n(P6e,"STRONG",{});var xKr=s(qse);Nbo=r(xKr,"poolformer"),xKr.forEach(t),jbo=r(P6e," \u2014 "),cq=n(P6e,"A",{href:!0});var $Kr=s(cq);Dbo=r($Kr,"PoolFormerModel"),$Kr.forEach(t),Gbo=r(P6e," (PoolFormer model)"),P6e.forEach(t),Obo=i($),ap=n($,"LI",{});var B6e=s(ap);Nse=n(B6e,"STRONG",{});var kKr=s(Nse);Vbo=r(kKr,"prophetnet"),kKr.forEach(t),Xbo=r(B6e," \u2014 "),mq=n(B6e,"A",{href:!0});var SKr=s(mq);zbo=r(SKr,"ProphetNetModel"),SKr.forEach(t),Wbo=r(B6e," (ProphetNet model)"),B6e.forEach(t),Qbo=i($),np=n($,"LI",{});var I6e=s(np);jse=n(I6e,"STRONG",{});var RKr=s(jse);Hbo=r(RKr,"qdqbert"),RKr.forEach(t),Ubo=r(I6e," \u2014 "),fq=n(I6e,"A",{href:!0});var PKr=s(fq);Jbo=r(PKr,"QDQBertModel"),PKr.forEach(t),Ybo=r(I6e," (QDQBert model)"),I6e.forEach(t),Kbo=i($),sp=n($,"LI",{});var q6e=s(sp);Dse=n(q6e,"STRONG",{});var BKr=s(Dse);Zbo=r(BKr,"reformer"),BKr.forEach(t),e2o=r(q6e," \u2014 "),gq=n(q6e,"A",{href:!0});var IKr=s(gq);o2o=r(IKr,"ReformerModel"),IKr.forEach(t),r2o=r(q6e," (Reformer model)"),q6e.forEach(t),t2o=i($),lp=n($,"LI",{});var N6e=s(lp);Gse=n(N6e,"STRONG",{});var qKr=s(Gse);a2o=r(qKr,"regnet"),qKr.forEach(t),n2o=r(N6e," \u2014 "),hq=n(N6e,"A",{href:!0});var NKr=s(hq);s2o=r(NKr,"RegNetModel"),NKr.forEach(t),l2o=r(N6e," (RegNet model)"),N6e.forEach(t),i2o=i($),ip=n($,"LI",{});var j6e=s(ip);Ose=n(j6e,"STRONG",{});var jKr=s(Ose);d2o=r(jKr,"rembert"),jKr.forEach(t),c2o=r(j6e," \u2014 "),uq=n(j6e,"A",{href:!0});var DKr=s(uq);m2o=r(DKr,"RemBertModel"),DKr.forEach(t),f2o=r(j6e," (RemBERT model)"),j6e.forEach(t),g2o=i($),dp=n($,"LI",{});var D6e=s(dp);Vse=n(D6e,"STRONG",{});var GKr=s(Vse);h2o=r(GKr,"resnet"),GKr.forEach(t),u2o=r(D6e," \u2014 "),pq=n(D6e,"A",{href:!0});var OKr=s(pq);p2o=r(OKr,"ResNetModel"),OKr.forEach(t),_2o=r(D6e," (ResNet model)"),D6e.forEach(t),b2o=i($),cp=n($,"LI",{});var G6e=s(cp);Xse=n(G6e,"STRONG",{});var VKr=s(Xse);v2o=r(VKr,"retribert"),VKr.forEach(t),F2o=r(G6e," \u2014 "),_q=n(G6e,"A",{href:!0});var XKr=s(_q);T2o=r(XKr,"RetriBertModel"),XKr.forEach(t),M2o=r(G6e," (RetriBERT model)"),G6e.forEach(t),E2o=i($),mp=n($,"LI",{});var O6e=s(mp);zse=n(O6e,"STRONG",{});var zKr=s(zse);C2o=r(zKr,"roberta"),zKr.forEach(t),w2o=r(O6e," \u2014 "),bq=n(O6e,"A",{href:!0});var WKr=s(bq);A2o=r(WKr,"RobertaModel"),WKr.forEach(t),y2o=r(O6e," (RoBERTa model)"),O6e.forEach(t),L2o=i($),fp=n($,"LI",{});var V6e=s(fp);Wse=n(V6e,"STRONG",{});var QKr=s(Wse);x2o=r(QKr,"roformer"),QKr.forEach(t),$2o=r(V6e," \u2014 "),vq=n(V6e,"A",{href:!0});var HKr=s(vq);k2o=r(HKr,"RoFormerModel"),HKr.forEach(t),S2o=r(V6e," (RoFormer model)"),V6e.forEach(t),R2o=i($),gp=n($,"LI",{});var X6e=s(gp);Qse=n(X6e,"STRONG",{});var UKr=s(Qse);P2o=r(UKr,"segformer"),UKr.forEach(t),B2o=r(X6e," \u2014 "),Fq=n(X6e,"A",{href:!0});var JKr=s(Fq);I2o=r(JKr,"SegformerModel"),JKr.forEach(t),q2o=r(X6e," (SegFormer model)"),X6e.forEach(t),N2o=i($),hp=n($,"LI",{});var z6e=s(hp);Hse=n(z6e,"STRONG",{});var YKr=s(Hse);j2o=r(YKr,"sew"),YKr.forEach(t),D2o=r(z6e," \u2014 "),Tq=n(z6e,"A",{href:!0});var KKr=s(Tq);G2o=r(KKr,"SEWModel"),KKr.forEach(t),O2o=r(z6e," (SEW model)"),z6e.forEach(t),V2o=i($),up=n($,"LI",{});var W6e=s(up);Use=n(W6e,"STRONG",{});var ZKr=s(Use);X2o=r(ZKr,"sew-d"),ZKr.forEach(t),z2o=r(W6e," \u2014 "),Mq=n(W6e,"A",{href:!0});var eZr=s(Mq);W2o=r(eZr,"SEWDModel"),eZr.forEach(t),Q2o=r(W6e," (SEW-D model)"),W6e.forEach(t),H2o=i($),pp=n($,"LI",{});var Q6e=s(pp);Jse=n(Q6e,"STRONG",{});var oZr=s(Jse);U2o=r(oZr,"speech_to_text"),oZr.forEach(t),J2o=r(Q6e," \u2014 "),Eq=n(Q6e,"A",{href:!0});var rZr=s(Eq);Y2o=r(rZr,"Speech2TextModel"),rZr.forEach(t),K2o=r(Q6e," (Speech2Text model)"),Q6e.forEach(t),Z2o=i($),_p=n($,"LI",{});var H6e=s(_p);Yse=n(H6e,"STRONG",{});var tZr=s(Yse);evo=r(tZr,"splinter"),tZr.forEach(t),ovo=r(H6e," \u2014 "),Cq=n(H6e,"A",{href:!0});var aZr=s(Cq);rvo=r(aZr,"SplinterModel"),aZr.forEach(t),tvo=r(H6e," (Splinter model)"),H6e.forEach(t),avo=i($),bp=n($,"LI",{});var U6e=s(bp);Kse=n(U6e,"STRONG",{});var nZr=s(Kse);nvo=r(nZr,"squeezebert"),nZr.forEach(t),svo=r(U6e," \u2014 "),wq=n(U6e,"A",{href:!0});var sZr=s(wq);lvo=r(sZr,"SqueezeBertModel"),sZr.forEach(t),ivo=r(U6e," (SqueezeBERT model)"),U6e.forEach(t),dvo=i($),vp=n($,"LI",{});var J6e=s(vp);Zse=n(J6e,"STRONG",{});var lZr=s(Zse);cvo=r(lZr,"swin"),lZr.forEach(t),mvo=r(J6e," \u2014 "),Aq=n(J6e,"A",{href:!0});var iZr=s(Aq);fvo=r(iZr,"SwinModel"),iZr.forEach(t),gvo=r(J6e," (Swin model)"),J6e.forEach(t),hvo=i($),Fp=n($,"LI",{});var Y6e=s(Fp);ele=n(Y6e,"STRONG",{});var dZr=s(ele);uvo=r(dZr,"t5"),dZr.forEach(t),pvo=r(Y6e," \u2014 "),yq=n(Y6e,"A",{href:!0});var cZr=s(yq);_vo=r(cZr,"T5Model"),cZr.forEach(t),bvo=r(Y6e," (T5 model)"),Y6e.forEach(t),vvo=i($),Tp=n($,"LI",{});var K6e=s(Tp);ole=n(K6e,"STRONG",{});var mZr=s(ole);Fvo=r(mZr,"tapas"),mZr.forEach(t),Tvo=r(K6e," \u2014 "),Lq=n(K6e,"A",{href:!0});var fZr=s(Lq);Mvo=r(fZr,"TapasModel"),fZr.forEach(t),Evo=r(K6e," (TAPAS model)"),K6e.forEach(t),Cvo=i($),Mp=n($,"LI",{});var Z6e=s(Mp);rle=n(Z6e,"STRONG",{});var gZr=s(rle);wvo=r(gZr,"trajectory_transformer"),gZr.forEach(t),Avo=r(Z6e," \u2014 "),xq=n(Z6e,"A",{href:!0});var hZr=s(xq);yvo=r(hZr,"TrajectoryTransformerModel"),hZr.forEach(t),Lvo=r(Z6e," (Trajectory Transformer model)"),Z6e.forEach(t),xvo=i($),Ep=n($,"LI",{});var eye=s(Ep);tle=n(eye,"STRONG",{});var uZr=s(tle);$vo=r(uZr,"transfo-xl"),uZr.forEach(t),kvo=r(eye," \u2014 "),$q=n(eye,"A",{href:!0});var pZr=s($q);Svo=r(pZr,"TransfoXLModel"),pZr.forEach(t),Rvo=r(eye," (Transformer-XL model)"),eye.forEach(t),Pvo=i($),Cp=n($,"LI",{});var oye=s(Cp);ale=n(oye,"STRONG",{});var _Zr=s(ale);Bvo=r(_Zr,"unispeech"),_Zr.forEach(t),Ivo=r(oye," \u2014 "),kq=n(oye,"A",{href:!0});var bZr=s(kq);qvo=r(bZr,"UniSpeechModel"),bZr.forEach(t),Nvo=r(oye," (UniSpeech model)"),oye.forEach(t),jvo=i($),wp=n($,"LI",{});var rye=s(wp);nle=n(rye,"STRONG",{});var vZr=s(nle);Dvo=r(vZr,"unispeech-sat"),vZr.forEach(t),Gvo=r(rye," \u2014 "),Sq=n(rye,"A",{href:!0});var FZr=s(Sq);Ovo=r(FZr,"UniSpeechSatModel"),FZr.forEach(t),Vvo=r(rye," (UniSpeechSat model)"),rye.forEach(t),Xvo=i($),Ap=n($,"LI",{});var tye=s(Ap);sle=n(tye,"STRONG",{});var TZr=s(sle);zvo=r(TZr,"van"),TZr.forEach(t),Wvo=r(tye," \u2014 "),Rq=n(tye,"A",{href:!0});var MZr=s(Rq);Qvo=r(MZr,"VanModel"),MZr.forEach(t),Hvo=r(tye," (VAN model)"),tye.forEach(t),Uvo=i($),yp=n($,"LI",{});var aye=s(yp);lle=n(aye,"STRONG",{});var EZr=s(lle);Jvo=r(EZr,"vilt"),EZr.forEach(t),Yvo=r(aye," \u2014 "),Pq=n(aye,"A",{href:!0});var CZr=s(Pq);Kvo=r(CZr,"ViltModel"),CZr.forEach(t),Zvo=r(aye," (ViLT model)"),aye.forEach(t),eFo=i($),Lp=n($,"LI",{});var nye=s(Lp);ile=n(nye,"STRONG",{});var wZr=s(ile);oFo=r(wZr,"vision-text-dual-encoder"),wZr.forEach(t),rFo=r(nye," \u2014 "),Bq=n(nye,"A",{href:!0});var AZr=s(Bq);tFo=r(AZr,"VisionTextDualEncoderModel"),AZr.forEach(t),aFo=r(nye," (VisionTextDualEncoder model)"),nye.forEach(t),nFo=i($),xp=n($,"LI",{});var sye=s(xp);dle=n(sye,"STRONG",{});var yZr=s(dle);sFo=r(yZr,"visual_bert"),yZr.forEach(t),lFo=r(sye," \u2014 "),Iq=n(sye,"A",{href:!0});var LZr=s(Iq);iFo=r(LZr,"VisualBertModel"),LZr.forEach(t),dFo=r(sye," (VisualBert model)"),sye.forEach(t),cFo=i($),$p=n($,"LI",{});var lye=s($p);cle=n(lye,"STRONG",{});var xZr=s(cle);mFo=r(xZr,"vit"),xZr.forEach(t),fFo=r(lye," \u2014 "),qq=n(lye,"A",{href:!0});var $Zr=s(qq);gFo=r($Zr,"ViTModel"),$Zr.forEach(t),hFo=r(lye," (ViT model)"),lye.forEach(t),uFo=i($),kp=n($,"LI",{});var iye=s(kp);mle=n(iye,"STRONG",{});var kZr=s(mle);pFo=r(kZr,"vit_mae"),kZr.forEach(t),_Fo=r(iye," \u2014 "),Nq=n(iye,"A",{href:!0});var SZr=s(Nq);bFo=r(SZr,"ViTMAEModel"),SZr.forEach(t),vFo=r(iye," (ViTMAE model)"),iye.forEach(t),FFo=i($),Sp=n($,"LI",{});var dye=s(Sp);fle=n(dye,"STRONG",{});var RZr=s(fle);TFo=r(RZr,"wav2vec2"),RZr.forEach(t),MFo=r(dye," \u2014 "),jq=n(dye,"A",{href:!0});var PZr=s(jq);EFo=r(PZr,"Wav2Vec2Model"),PZr.forEach(t),CFo=r(dye," (Wav2Vec2 model)"),dye.forEach(t),wFo=i($),Rp=n($,"LI",{});var cye=s(Rp);gle=n(cye,"STRONG",{});var BZr=s(gle);AFo=r(BZr,"wav2vec2-conformer"),BZr.forEach(t),yFo=r(cye," \u2014 "),Dq=n(cye,"A",{href:!0});var IZr=s(Dq);LFo=r(IZr,"Wav2Vec2ConformerModel"),IZr.forEach(t),xFo=r(cye," (Wav2Vec2-Conformer model)"),cye.forEach(t),$Fo=i($),Pp=n($,"LI",{});var mye=s(Pp);hle=n(mye,"STRONG",{});var qZr=s(hle);kFo=r(qZr,"wavlm"),qZr.forEach(t),SFo=r(mye," \u2014 "),Gq=n(mye,"A",{href:!0});var NZr=s(Gq);RFo=r(NZr,"WavLMModel"),NZr.forEach(t),PFo=r(mye," (WavLM model)"),mye.forEach(t),BFo=i($),Bp=n($,"LI",{});var fye=s(Bp);ule=n(fye,"STRONG",{});var jZr=s(ule);IFo=r(jZr,"xglm"),jZr.forEach(t),qFo=r(fye," \u2014 "),Oq=n(fye,"A",{href:!0});var DZr=s(Oq);NFo=r(DZr,"XGLMModel"),DZr.forEach(t),jFo=r(fye," (XGLM model)"),fye.forEach(t),DFo=i($),Ip=n($,"LI",{});var gye=s(Ip);ple=n(gye,"STRONG",{});var GZr=s(ple);GFo=r(GZr,"xlm"),GZr.forEach(t),OFo=r(gye," \u2014 "),Vq=n(gye,"A",{href:!0});var OZr=s(Vq);VFo=r(OZr,"XLMModel"),OZr.forEach(t),XFo=r(gye," (XLM model)"),gye.forEach(t),zFo=i($),qp=n($,"LI",{});var hye=s(qp);_le=n(hye,"STRONG",{});var VZr=s(_le);WFo=r(VZr,"xlm-prophetnet"),VZr.forEach(t),QFo=r(hye," \u2014 "),Xq=n(hye,"A",{href:!0});var XZr=s(Xq);HFo=r(XZr,"XLMProphetNetModel"),XZr.forEach(t),UFo=r(hye," (XLMProphetNet model)"),hye.forEach(t),JFo=i($),Np=n($,"LI",{});var uye=s(Np);ble=n(uye,"STRONG",{});var zZr=s(ble);YFo=r(zZr,"xlm-roberta"),zZr.forEach(t),KFo=r(uye," \u2014 "),zq=n(uye,"A",{href:!0});var WZr=s(zq);ZFo=r(WZr,"XLMRobertaModel"),WZr.forEach(t),e1o=r(uye," (XLM-RoBERTa model)"),uye.forEach(t),o1o=i($),jp=n($,"LI",{});var pye=s(jp);vle=n(pye,"STRONG",{});var QZr=s(vle);r1o=r(QZr,"xlm-roberta-xl"),QZr.forEach(t),t1o=r(pye," \u2014 "),Wq=n(pye,"A",{href:!0});var HZr=s(Wq);a1o=r(HZr,"XLMRobertaXLModel"),HZr.forEach(t),n1o=r(pye," (XLM-RoBERTa-XL model)"),pye.forEach(t),s1o=i($),Dp=n($,"LI",{});var _ye=s(Dp);Fle=n(_ye,"STRONG",{});var UZr=s(Fle);l1o=r(UZr,"xlnet"),UZr.forEach(t),i1o=r(_ye," \u2014 "),Qq=n(_ye,"A",{href:!0});var JZr=s(Qq);d1o=r(JZr,"XLNetModel"),JZr.forEach(t),c1o=r(_ye," (XLNet model)"),_ye.forEach(t),m1o=i($),Gp=n($,"LI",{});var bye=s(Gp);Tle=n(bye,"STRONG",{});var YZr=s(Tle);f1o=r(YZr,"yolos"),YZr.forEach(t),g1o=r(bye," \u2014 "),Hq=n(bye,"A",{href:!0});var KZr=s(Hq);h1o=r(KZr,"YolosModel"),KZr.forEach(t),u1o=r(bye," (YOLOS model)"),bye.forEach(t),p1o=i($),Op=n($,"LI",{});var vye=s(Op);Mle=n(vye,"STRONG",{});var ZZr=s(Mle);_1o=r(ZZr,"yoso"),ZZr.forEach(t),b1o=r(vye," \u2014 "),Uq=n(vye,"A",{href:!0});var eet=s(Uq);v1o=r(eet,"YosoModel"),eet.forEach(t),F1o=r(vye," (YOSO model)"),vye.forEach(t),$.forEach(t),T1o=i(oa),Vp=n(oa,"P",{});var Fye=s(Vp);M1o=r(Fye,"The model is set in evaluation mode by default using "),Ele=n(Fye,"CODE",{});var oet=s(Ele);E1o=r(oet,"model.eval()"),oet.forEach(t),C1o=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=n(Fye,"CODE",{});var ret=s(Cle);w1o=r(ret,"model.train()"),ret.forEach(t),Fye.forEach(t),A1o=i(oa),T(Xp.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),KIe=i(m),yi=n(m,"H2",{class:!0});var rje=s(yi);zp=n(rje,"A",{id:!0,class:!0,href:!0});var tet=s(zp);wle=n(tet,"SPAN",{});var aet=s(wle);T(Gy.$$.fragment,aet),aet.forEach(t),tet.forEach(t),y1o=i(rje),Ale=n(rje,"SPAN",{});var net=s(Ale);L1o=r(net,"AutoModelForPreTraining"),net.forEach(t),rje.forEach(t),ZIe=i(m),xo=n(m,"DIV",{class:!0});var Gs=s(xo);T(Oy.$$.fragment,Gs),x1o=i(Gs),Li=n(Gs,"P",{});var BK=s(Li);$1o=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jq=n(BK,"A",{href:!0});var set=s(Jq);k1o=r(set,"from_pretrained()"),set.forEach(t),S1o=r(BK," class method or the "),Yq=n(BK,"A",{href:!0});var iet=s(Yq);R1o=r(iet,"from_config()"),iet.forEach(t),P1o=r(BK,` class
method.`),BK.forEach(t),B1o=i(Gs),Vy=n(Gs,"P",{});var tje=s(Vy);I1o=r(tje,"This class cannot be instantiated directly using "),yle=n(tje,"CODE",{});var det=s(yle);q1o=r(det,"__init__()"),det.forEach(t),N1o=r(tje," (throws an error)."),tje.forEach(t),j1o=i(Gs),at=n(Gs,"DIV",{class:!0});var p0=s(at);T(Xy.$$.fragment,p0),D1o=i(p0),Lle=n(p0,"P",{});var cet=s(Lle);G1o=r(cet,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cet.forEach(t),O1o=i(p0),xi=n(p0,"P",{});var IK=s(xi);V1o=r(IK,`Note:
Loading a model from its configuration file does `),xle=n(IK,"STRONG",{});var met=s(xle);X1o=r(met,"not"),met.forEach(t),z1o=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=n(IK,"A",{href:!0});var fet=s(Kq);W1o=r(fet,"from_pretrained()"),fet.forEach(t),Q1o=r(IK," to load the model weights."),IK.forEach(t),H1o=i(p0),T(Wp.$$.fragment,p0),p0.forEach(t),U1o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(zy.$$.fragment,ra),J1o=i(ra),$le=n(ra,"P",{});var get=s($le);Y1o=r(get,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),get.forEach(t),K1o=i(ra),xa=n(ra,"P",{});var _0=s(xa);Z1o=r(_0,"The model class to instantiate is selected based on the "),kle=n(_0,"CODE",{});var het=s(kle);eTo=r(het,"model_type"),het.forEach(t),oTo=r(_0,` property of the config object (either
passed as an argument or loaded from `),Sle=n(_0,"CODE",{});var uet=s(Sle);rTo=r(uet,"pretrained_model_name_or_path"),uet.forEach(t),tTo=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(_0,"CODE",{});var pet=s(Rle);aTo=r(pet,"pretrained_model_name_or_path"),pet.forEach(t),nTo=r(_0,":"),_0.forEach(t),sTo=i(ra),G=n(ra,"UL",{});var O=s(G);Qp=n(O,"LI",{});var Tye=s(Qp);Ple=n(Tye,"STRONG",{});var _et=s(Ple);lTo=r(_et,"albert"),_et.forEach(t),iTo=r(Tye," \u2014 "),Zq=n(Tye,"A",{href:!0});var bet=s(Zq);dTo=r(bet,"AlbertForPreTraining"),bet.forEach(t),cTo=r(Tye," (ALBERT model)"),Tye.forEach(t),mTo=i(O),Hp=n(O,"LI",{});var Mye=s(Hp);Ble=n(Mye,"STRONG",{});var vet=s(Ble);fTo=r(vet,"bart"),vet.forEach(t),gTo=r(Mye," \u2014 "),eN=n(Mye,"A",{href:!0});var Fet=s(eN);hTo=r(Fet,"BartForConditionalGeneration"),Fet.forEach(t),uTo=r(Mye," (BART model)"),Mye.forEach(t),pTo=i(O),Up=n(O,"LI",{});var Eye=s(Up);Ile=n(Eye,"STRONG",{});var Tet=s(Ile);_To=r(Tet,"bert"),Tet.forEach(t),bTo=r(Eye," \u2014 "),oN=n(Eye,"A",{href:!0});var Met=s(oN);vTo=r(Met,"BertForPreTraining"),Met.forEach(t),FTo=r(Eye," (BERT model)"),Eye.forEach(t),TTo=i(O),Jp=n(O,"LI",{});var Cye=s(Jp);qle=n(Cye,"STRONG",{});var Eet=s(qle);MTo=r(Eet,"big_bird"),Eet.forEach(t),ETo=r(Cye," \u2014 "),rN=n(Cye,"A",{href:!0});var Cet=s(rN);CTo=r(Cet,"BigBirdForPreTraining"),Cet.forEach(t),wTo=r(Cye," (BigBird model)"),Cye.forEach(t),ATo=i(O),Yp=n(O,"LI",{});var wye=s(Yp);Nle=n(wye,"STRONG",{});var wet=s(Nle);yTo=r(wet,"camembert"),wet.forEach(t),LTo=r(wye," \u2014 "),tN=n(wye,"A",{href:!0});var Aet=s(tN);xTo=r(Aet,"CamembertForMaskedLM"),Aet.forEach(t),$To=r(wye," (CamemBERT model)"),wye.forEach(t),kTo=i(O),Kp=n(O,"LI",{});var Aye=s(Kp);jle=n(Aye,"STRONG",{});var yet=s(jle);STo=r(yet,"ctrl"),yet.forEach(t),RTo=r(Aye," \u2014 "),aN=n(Aye,"A",{href:!0});var Let=s(aN);PTo=r(Let,"CTRLLMHeadModel"),Let.forEach(t),BTo=r(Aye," (CTRL model)"),Aye.forEach(t),ITo=i(O),Zp=n(O,"LI",{});var yye=s(Zp);Dle=n(yye,"STRONG",{});var xet=s(Dle);qTo=r(xet,"data2vec-text"),xet.forEach(t),NTo=r(yye," \u2014 "),nN=n(yye,"A",{href:!0});var $et=s(nN);jTo=r($et,"Data2VecTextForMaskedLM"),$et.forEach(t),DTo=r(yye," (Data2VecText model)"),yye.forEach(t),GTo=i(O),e_=n(O,"LI",{});var Lye=s(e_);Gle=n(Lye,"STRONG",{});var ket=s(Gle);OTo=r(ket,"deberta"),ket.forEach(t),VTo=r(Lye," \u2014 "),sN=n(Lye,"A",{href:!0});var Set=s(sN);XTo=r(Set,"DebertaForMaskedLM"),Set.forEach(t),zTo=r(Lye," (DeBERTa model)"),Lye.forEach(t),WTo=i(O),o_=n(O,"LI",{});var xye=s(o_);Ole=n(xye,"STRONG",{});var Ret=s(Ole);QTo=r(Ret,"deberta-v2"),Ret.forEach(t),HTo=r(xye," \u2014 "),lN=n(xye,"A",{href:!0});var Pet=s(lN);UTo=r(Pet,"DebertaV2ForMaskedLM"),Pet.forEach(t),JTo=r(xye," (DeBERTa-v2 model)"),xye.forEach(t),YTo=i(O),r_=n(O,"LI",{});var $ye=s(r_);Vle=n($ye,"STRONG",{});var Bet=s(Vle);KTo=r(Bet,"distilbert"),Bet.forEach(t),ZTo=r($ye," \u2014 "),iN=n($ye,"A",{href:!0});var Iet=s(iN);eMo=r(Iet,"DistilBertForMaskedLM"),Iet.forEach(t),oMo=r($ye," (DistilBERT model)"),$ye.forEach(t),rMo=i(O),t_=n(O,"LI",{});var kye=s(t_);Xle=n(kye,"STRONG",{});var qet=s(Xle);tMo=r(qet,"electra"),qet.forEach(t),aMo=r(kye," \u2014 "),dN=n(kye,"A",{href:!0});var Net=s(dN);nMo=r(Net,"ElectraForPreTraining"),Net.forEach(t),sMo=r(kye," (ELECTRA model)"),kye.forEach(t),lMo=i(O),a_=n(O,"LI",{});var Sye=s(a_);zle=n(Sye,"STRONG",{});var jet=s(zle);iMo=r(jet,"flaubert"),jet.forEach(t),dMo=r(Sye," \u2014 "),cN=n(Sye,"A",{href:!0});var Det=s(cN);cMo=r(Det,"FlaubertWithLMHeadModel"),Det.forEach(t),mMo=r(Sye," (FlauBERT model)"),Sye.forEach(t),fMo=i(O),n_=n(O,"LI",{});var Rye=s(n_);Wle=n(Rye,"STRONG",{});var Get=s(Wle);gMo=r(Get,"flava"),Get.forEach(t),hMo=r(Rye," \u2014 "),mN=n(Rye,"A",{href:!0});var Oet=s(mN);uMo=r(Oet,"FlavaForPreTraining"),Oet.forEach(t),pMo=r(Rye," (Flava model)"),Rye.forEach(t),_Mo=i(O),s_=n(O,"LI",{});var Pye=s(s_);Qle=n(Pye,"STRONG",{});var Vet=s(Qle);bMo=r(Vet,"fnet"),Vet.forEach(t),vMo=r(Pye," \u2014 "),fN=n(Pye,"A",{href:!0});var Xet=s(fN);FMo=r(Xet,"FNetForPreTraining"),Xet.forEach(t),TMo=r(Pye," (FNet model)"),Pye.forEach(t),MMo=i(O),l_=n(O,"LI",{});var Bye=s(l_);Hle=n(Bye,"STRONG",{});var zet=s(Hle);EMo=r(zet,"fsmt"),zet.forEach(t),CMo=r(Bye," \u2014 "),gN=n(Bye,"A",{href:!0});var Wet=s(gN);wMo=r(Wet,"FSMTForConditionalGeneration"),Wet.forEach(t),AMo=r(Bye," (FairSeq Machine-Translation model)"),Bye.forEach(t),yMo=i(O),i_=n(O,"LI",{});var Iye=s(i_);Ule=n(Iye,"STRONG",{});var Qet=s(Ule);LMo=r(Qet,"funnel"),Qet.forEach(t),xMo=r(Iye," \u2014 "),hN=n(Iye,"A",{href:!0});var Het=s(hN);$Mo=r(Het,"FunnelForPreTraining"),Het.forEach(t),kMo=r(Iye," (Funnel Transformer model)"),Iye.forEach(t),SMo=i(O),d_=n(O,"LI",{});var qye=s(d_);Jle=n(qye,"STRONG",{});var Uet=s(Jle);RMo=r(Uet,"gpt2"),Uet.forEach(t),PMo=r(qye," \u2014 "),uN=n(qye,"A",{href:!0});var Jet=s(uN);BMo=r(Jet,"GPT2LMHeadModel"),Jet.forEach(t),IMo=r(qye," (OpenAI GPT-2 model)"),qye.forEach(t),qMo=i(O),c_=n(O,"LI",{});var Nye=s(c_);Yle=n(Nye,"STRONG",{});var Yet=s(Yle);NMo=r(Yet,"ibert"),Yet.forEach(t),jMo=r(Nye," \u2014 "),pN=n(Nye,"A",{href:!0});var Ket=s(pN);DMo=r(Ket,"IBertForMaskedLM"),Ket.forEach(t),GMo=r(Nye," (I-BERT model)"),Nye.forEach(t),OMo=i(O),m_=n(O,"LI",{});var jye=s(m_);Kle=n(jye,"STRONG",{});var Zet=s(Kle);VMo=r(Zet,"layoutlm"),Zet.forEach(t),XMo=r(jye," \u2014 "),_N=n(jye,"A",{href:!0});var eot=s(_N);zMo=r(eot,"LayoutLMForMaskedLM"),eot.forEach(t),WMo=r(jye," (LayoutLM model)"),jye.forEach(t),QMo=i(O),f_=n(O,"LI",{});var Dye=s(f_);Zle=n(Dye,"STRONG",{});var oot=s(Zle);HMo=r(oot,"longformer"),oot.forEach(t),UMo=r(Dye," \u2014 "),bN=n(Dye,"A",{href:!0});var rot=s(bN);JMo=r(rot,"LongformerForMaskedLM"),rot.forEach(t),YMo=r(Dye," (Longformer model)"),Dye.forEach(t),KMo=i(O),g_=n(O,"LI",{});var Gye=s(g_);eie=n(Gye,"STRONG",{});var tot=s(eie);ZMo=r(tot,"lxmert"),tot.forEach(t),e4o=r(Gye," \u2014 "),vN=n(Gye,"A",{href:!0});var aot=s(vN);o4o=r(aot,"LxmertForPreTraining"),aot.forEach(t),r4o=r(Gye," (LXMERT model)"),Gye.forEach(t),t4o=i(O),h_=n(O,"LI",{});var Oye=s(h_);oie=n(Oye,"STRONG",{});var not=s(oie);a4o=r(not,"megatron-bert"),not.forEach(t),n4o=r(Oye," \u2014 "),FN=n(Oye,"A",{href:!0});var sot=s(FN);s4o=r(sot,"MegatronBertForPreTraining"),sot.forEach(t),l4o=r(Oye," (MegatronBert model)"),Oye.forEach(t),i4o=i(O),u_=n(O,"LI",{});var Vye=s(u_);rie=n(Vye,"STRONG",{});var lot=s(rie);d4o=r(lot,"mobilebert"),lot.forEach(t),c4o=r(Vye," \u2014 "),TN=n(Vye,"A",{href:!0});var iot=s(TN);m4o=r(iot,"MobileBertForPreTraining"),iot.forEach(t),f4o=r(Vye," (MobileBERT model)"),Vye.forEach(t),g4o=i(O),p_=n(O,"LI",{});var Xye=s(p_);tie=n(Xye,"STRONG",{});var dot=s(tie);h4o=r(dot,"mpnet"),dot.forEach(t),u4o=r(Xye," \u2014 "),MN=n(Xye,"A",{href:!0});var cot=s(MN);p4o=r(cot,"MPNetForMaskedLM"),cot.forEach(t),_4o=r(Xye," (MPNet model)"),Xye.forEach(t),b4o=i(O),__=n(O,"LI",{});var zye=s(__);aie=n(zye,"STRONG",{});var mot=s(aie);v4o=r(mot,"openai-gpt"),mot.forEach(t),F4o=r(zye," \u2014 "),EN=n(zye,"A",{href:!0});var fot=s(EN);T4o=r(fot,"OpenAIGPTLMHeadModel"),fot.forEach(t),M4o=r(zye," (OpenAI GPT model)"),zye.forEach(t),E4o=i(O),b_=n(O,"LI",{});var Wye=s(b_);nie=n(Wye,"STRONG",{});var got=s(nie);C4o=r(got,"retribert"),got.forEach(t),w4o=r(Wye," \u2014 "),CN=n(Wye,"A",{href:!0});var hot=s(CN);A4o=r(hot,"RetriBertModel"),hot.forEach(t),y4o=r(Wye," (RetriBERT model)"),Wye.forEach(t),L4o=i(O),v_=n(O,"LI",{});var Qye=s(v_);sie=n(Qye,"STRONG",{});var uot=s(sie);x4o=r(uot,"roberta"),uot.forEach(t),$4o=r(Qye," \u2014 "),wN=n(Qye,"A",{href:!0});var pot=s(wN);k4o=r(pot,"RobertaForMaskedLM"),pot.forEach(t),S4o=r(Qye," (RoBERTa model)"),Qye.forEach(t),R4o=i(O),F_=n(O,"LI",{});var Hye=s(F_);lie=n(Hye,"STRONG",{});var _ot=s(lie);P4o=r(_ot,"splinter"),_ot.forEach(t),B4o=r(Hye," \u2014 "),AN=n(Hye,"A",{href:!0});var bot=s(AN);I4o=r(bot,"SplinterForPreTraining"),bot.forEach(t),q4o=r(Hye," (Splinter model)"),Hye.forEach(t),N4o=i(O),T_=n(O,"LI",{});var Uye=s(T_);iie=n(Uye,"STRONG",{});var vot=s(iie);j4o=r(vot,"squeezebert"),vot.forEach(t),D4o=r(Uye," \u2014 "),yN=n(Uye,"A",{href:!0});var Fot=s(yN);G4o=r(Fot,"SqueezeBertForMaskedLM"),Fot.forEach(t),O4o=r(Uye," (SqueezeBERT model)"),Uye.forEach(t),V4o=i(O),M_=n(O,"LI",{});var Jye=s(M_);die=n(Jye,"STRONG",{});var Tot=s(die);X4o=r(Tot,"t5"),Tot.forEach(t),z4o=r(Jye," \u2014 "),LN=n(Jye,"A",{href:!0});var Mot=s(LN);W4o=r(Mot,"T5ForConditionalGeneration"),Mot.forEach(t),Q4o=r(Jye," (T5 model)"),Jye.forEach(t),H4o=i(O),E_=n(O,"LI",{});var Yye=s(E_);cie=n(Yye,"STRONG",{});var Eot=s(cie);U4o=r(Eot,"tapas"),Eot.forEach(t),J4o=r(Yye," \u2014 "),xN=n(Yye,"A",{href:!0});var Cot=s(xN);Y4o=r(Cot,"TapasForMaskedLM"),Cot.forEach(t),K4o=r(Yye," (TAPAS model)"),Yye.forEach(t),Z4o=i(O),C_=n(O,"LI",{});var Kye=s(C_);mie=n(Kye,"STRONG",{});var wot=s(mie);eEo=r(wot,"transfo-xl"),wot.forEach(t),oEo=r(Kye," \u2014 "),$N=n(Kye,"A",{href:!0});var Aot=s($N);rEo=r(Aot,"TransfoXLLMHeadModel"),Aot.forEach(t),tEo=r(Kye," (Transformer-XL model)"),Kye.forEach(t),aEo=i(O),w_=n(O,"LI",{});var Zye=s(w_);fie=n(Zye,"STRONG",{});var yot=s(fie);nEo=r(yot,"unispeech"),yot.forEach(t),sEo=r(Zye," \u2014 "),kN=n(Zye,"A",{href:!0});var Lot=s(kN);lEo=r(Lot,"UniSpeechForPreTraining"),Lot.forEach(t),iEo=r(Zye," (UniSpeech model)"),Zye.forEach(t),dEo=i(O),A_=n(O,"LI",{});var eLe=s(A_);gie=n(eLe,"STRONG",{});var xot=s(gie);cEo=r(xot,"unispeech-sat"),xot.forEach(t),mEo=r(eLe," \u2014 "),SN=n(eLe,"A",{href:!0});var $ot=s(SN);fEo=r($ot,"UniSpeechSatForPreTraining"),$ot.forEach(t),gEo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),hEo=i(O),y_=n(O,"LI",{});var oLe=s(y_);hie=n(oLe,"STRONG",{});var kot=s(hie);uEo=r(kot,"visual_bert"),kot.forEach(t),pEo=r(oLe," \u2014 "),RN=n(oLe,"A",{href:!0});var Sot=s(RN);_Eo=r(Sot,"VisualBertForPreTraining"),Sot.forEach(t),bEo=r(oLe," (VisualBert model)"),oLe.forEach(t),vEo=i(O),L_=n(O,"LI",{});var rLe=s(L_);uie=n(rLe,"STRONG",{});var Rot=s(uie);FEo=r(Rot,"vit_mae"),Rot.forEach(t),TEo=r(rLe," \u2014 "),PN=n(rLe,"A",{href:!0});var Pot=s(PN);MEo=r(Pot,"ViTMAEForPreTraining"),Pot.forEach(t),EEo=r(rLe," (ViTMAE model)"),rLe.forEach(t),CEo=i(O),x_=n(O,"LI",{});var tLe=s(x_);pie=n(tLe,"STRONG",{});var Bot=s(pie);wEo=r(Bot,"wav2vec2"),Bot.forEach(t),AEo=r(tLe," \u2014 "),BN=n(tLe,"A",{href:!0});var Iot=s(BN);yEo=r(Iot,"Wav2Vec2ForPreTraining"),Iot.forEach(t),LEo=r(tLe," (Wav2Vec2 model)"),tLe.forEach(t),xEo=i(O),$_=n(O,"LI",{});var aLe=s($_);_ie=n(aLe,"STRONG",{});var qot=s(_ie);$Eo=r(qot,"wav2vec2-conformer"),qot.forEach(t),kEo=r(aLe," \u2014 "),IN=n(aLe,"A",{href:!0});var Not=s(IN);SEo=r(Not,"Wav2Vec2ConformerForPreTraining"),Not.forEach(t),REo=r(aLe," (Wav2Vec2-Conformer model)"),aLe.forEach(t),PEo=i(O),k_=n(O,"LI",{});var nLe=s(k_);bie=n(nLe,"STRONG",{});var jot=s(bie);BEo=r(jot,"xlm"),jot.forEach(t),IEo=r(nLe," \u2014 "),qN=n(nLe,"A",{href:!0});var Dot=s(qN);qEo=r(Dot,"XLMWithLMHeadModel"),Dot.forEach(t),NEo=r(nLe," (XLM model)"),nLe.forEach(t),jEo=i(O),S_=n(O,"LI",{});var sLe=s(S_);vie=n(sLe,"STRONG",{});var Got=s(vie);DEo=r(Got,"xlm-roberta"),Got.forEach(t),GEo=r(sLe," \u2014 "),NN=n(sLe,"A",{href:!0});var Oot=s(NN);OEo=r(Oot,"XLMRobertaForMaskedLM"),Oot.forEach(t),VEo=r(sLe," (XLM-RoBERTa model)"),sLe.forEach(t),XEo=i(O),R_=n(O,"LI",{});var lLe=s(R_);Fie=n(lLe,"STRONG",{});var Vot=s(Fie);zEo=r(Vot,"xlm-roberta-xl"),Vot.forEach(t),WEo=r(lLe," \u2014 "),jN=n(lLe,"A",{href:!0});var Xot=s(jN);QEo=r(Xot,"XLMRobertaXLForMaskedLM"),Xot.forEach(t),HEo=r(lLe," (XLM-RoBERTa-XL model)"),lLe.forEach(t),UEo=i(O),P_=n(O,"LI",{});var iLe=s(P_);Tie=n(iLe,"STRONG",{});var zot=s(Tie);JEo=r(zot,"xlnet"),zot.forEach(t),YEo=r(iLe," \u2014 "),DN=n(iLe,"A",{href:!0});var Wot=s(DN);KEo=r(Wot,"XLNetLMHeadModel"),Wot.forEach(t),ZEo=r(iLe," (XLNet model)"),iLe.forEach(t),O.forEach(t),eCo=i(ra),B_=n(ra,"P",{});var dLe=s(B_);oCo=r(dLe,"The model is set in evaluation mode by default using "),Mie=n(dLe,"CODE",{});var Qot=s(Mie);rCo=r(Qot,"model.eval()"),Qot.forEach(t),tCo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=n(dLe,"CODE",{});var Hot=s(Eie);aCo=r(Hot,"model.train()"),Hot.forEach(t),dLe.forEach(t),nCo=i(ra),T(I_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),eqe=i(m),$i=n(m,"H2",{class:!0});var aje=s($i);q_=n(aje,"A",{id:!0,class:!0,href:!0});var Uot=s(q_);Cie=n(Uot,"SPAN",{});var Jot=s(Cie);T(Wy.$$.fragment,Jot),Jot.forEach(t),Uot.forEach(t),sCo=i(aje),wie=n(aje,"SPAN",{});var Yot=s(wie);lCo=r(Yot,"AutoModelForCausalLM"),Yot.forEach(t),aje.forEach(t),oqe=i(m),$o=n(m,"DIV",{class:!0});var Os=s($o);T(Qy.$$.fragment,Os),iCo=i(Os),ki=n(Os,"P",{});var qK=s(ki);dCo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GN=n(qK,"A",{href:!0});var Kot=s(GN);cCo=r(Kot,"from_pretrained()"),Kot.forEach(t),mCo=r(qK," class method or the "),ON=n(qK,"A",{href:!0});var Zot=s(ON);fCo=r(Zot,"from_config()"),Zot.forEach(t),gCo=r(qK,` class
method.`),qK.forEach(t),hCo=i(Os),Hy=n(Os,"P",{});var nje=s(Hy);uCo=r(nje,"This class cannot be instantiated directly using "),Aie=n(nje,"CODE",{});var ert=s(Aie);pCo=r(ert,"__init__()"),ert.forEach(t),_Co=r(nje," (throws an error)."),nje.forEach(t),bCo=i(Os),nt=n(Os,"DIV",{class:!0});var b0=s(nt);T(Uy.$$.fragment,b0),vCo=i(b0),yie=n(b0,"P",{});var ort=s(yie);FCo=r(ort,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ort.forEach(t),TCo=i(b0),Si=n(b0,"P",{});var NK=s(Si);MCo=r(NK,`Note:
Loading a model from its configuration file does `),Lie=n(NK,"STRONG",{});var rrt=s(Lie);ECo=r(rrt,"not"),rrt.forEach(t),CCo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(NK,"A",{href:!0});var trt=s(VN);wCo=r(trt,"from_pretrained()"),trt.forEach(t),ACo=r(NK," to load the model weights."),NK.forEach(t),yCo=i(b0),T(N_.$$.fragment,b0),b0.forEach(t),LCo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Jy.$$.fragment,ta),xCo=i(ta),xie=n(ta,"P",{});var art=s(xie);$Co=r(art,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),art.forEach(t),kCo=i(ta),$a=n(ta,"P",{});var v0=s($a);SCo=r(v0,"The model class to instantiate is selected based on the "),$ie=n(v0,"CODE",{});var nrt=s($ie);RCo=r(nrt,"model_type"),nrt.forEach(t),PCo=r(v0,` property of the config object (either
passed as an argument or loaded from `),kie=n(v0,"CODE",{});var srt=s(kie);BCo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),ICo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(v0,"CODE",{});var lrt=s(Sie);qCo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),NCo=r(v0,":"),v0.forEach(t),jCo=i(ta),z=n(ta,"UL",{});var Q=s(z);j_=n(Q,"LI",{});var cLe=s(j_);Rie=n(cLe,"STRONG",{});var irt=s(Rie);DCo=r(irt,"bart"),irt.forEach(t),GCo=r(cLe," \u2014 "),XN=n(cLe,"A",{href:!0});var drt=s(XN);OCo=r(drt,"BartForCausalLM"),drt.forEach(t),VCo=r(cLe," (BART model)"),cLe.forEach(t),XCo=i(Q),D_=n(Q,"LI",{});var mLe=s(D_);Pie=n(mLe,"STRONG",{});var crt=s(Pie);zCo=r(crt,"bert"),crt.forEach(t),WCo=r(mLe," \u2014 "),zN=n(mLe,"A",{href:!0});var mrt=s(zN);QCo=r(mrt,"BertLMHeadModel"),mrt.forEach(t),HCo=r(mLe," (BERT model)"),mLe.forEach(t),UCo=i(Q),G_=n(Q,"LI",{});var fLe=s(G_);Bie=n(fLe,"STRONG",{});var frt=s(Bie);JCo=r(frt,"bert-generation"),frt.forEach(t),YCo=r(fLe," \u2014 "),WN=n(fLe,"A",{href:!0});var grt=s(WN);KCo=r(grt,"BertGenerationDecoder"),grt.forEach(t),ZCo=r(fLe," (Bert Generation model)"),fLe.forEach(t),e5o=i(Q),O_=n(Q,"LI",{});var gLe=s(O_);Iie=n(gLe,"STRONG",{});var hrt=s(Iie);o5o=r(hrt,"big_bird"),hrt.forEach(t),r5o=r(gLe," \u2014 "),QN=n(gLe,"A",{href:!0});var urt=s(QN);t5o=r(urt,"BigBirdForCausalLM"),urt.forEach(t),a5o=r(gLe," (BigBird model)"),gLe.forEach(t),n5o=i(Q),V_=n(Q,"LI",{});var hLe=s(V_);qie=n(hLe,"STRONG",{});var prt=s(qie);s5o=r(prt,"bigbird_pegasus"),prt.forEach(t),l5o=r(hLe," \u2014 "),HN=n(hLe,"A",{href:!0});var _rt=s(HN);i5o=r(_rt,"BigBirdPegasusForCausalLM"),_rt.forEach(t),d5o=r(hLe," (BigBirdPegasus model)"),hLe.forEach(t),c5o=i(Q),X_=n(Q,"LI",{});var uLe=s(X_);Nie=n(uLe,"STRONG",{});var brt=s(Nie);m5o=r(brt,"blenderbot"),brt.forEach(t),f5o=r(uLe," \u2014 "),UN=n(uLe,"A",{href:!0});var vrt=s(UN);g5o=r(vrt,"BlenderbotForCausalLM"),vrt.forEach(t),h5o=r(uLe," (Blenderbot model)"),uLe.forEach(t),u5o=i(Q),z_=n(Q,"LI",{});var pLe=s(z_);jie=n(pLe,"STRONG",{});var Frt=s(jie);p5o=r(Frt,"blenderbot-small"),Frt.forEach(t),_5o=r(pLe," \u2014 "),JN=n(pLe,"A",{href:!0});var Trt=s(JN);b5o=r(Trt,"BlenderbotSmallForCausalLM"),Trt.forEach(t),v5o=r(pLe," (BlenderbotSmall model)"),pLe.forEach(t),F5o=i(Q),W_=n(Q,"LI",{});var _Le=s(W_);Die=n(_Le,"STRONG",{});var Mrt=s(Die);T5o=r(Mrt,"camembert"),Mrt.forEach(t),M5o=r(_Le," \u2014 "),YN=n(_Le,"A",{href:!0});var Ert=s(YN);E5o=r(Ert,"CamembertForCausalLM"),Ert.forEach(t),C5o=r(_Le," (CamemBERT model)"),_Le.forEach(t),w5o=i(Q),Q_=n(Q,"LI",{});var bLe=s(Q_);Gie=n(bLe,"STRONG",{});var Crt=s(Gie);A5o=r(Crt,"ctrl"),Crt.forEach(t),y5o=r(bLe," \u2014 "),KN=n(bLe,"A",{href:!0});var wrt=s(KN);L5o=r(wrt,"CTRLLMHeadModel"),wrt.forEach(t),x5o=r(bLe," (CTRL model)"),bLe.forEach(t),$5o=i(Q),H_=n(Q,"LI",{});var vLe=s(H_);Oie=n(vLe,"STRONG",{});var Art=s(Oie);k5o=r(Art,"data2vec-text"),Art.forEach(t),S5o=r(vLe," \u2014 "),ZN=n(vLe,"A",{href:!0});var yrt=s(ZN);R5o=r(yrt,"Data2VecTextForCausalLM"),yrt.forEach(t),P5o=r(vLe," (Data2VecText model)"),vLe.forEach(t),B5o=i(Q),U_=n(Q,"LI",{});var FLe=s(U_);Vie=n(FLe,"STRONG",{});var Lrt=s(Vie);I5o=r(Lrt,"electra"),Lrt.forEach(t),q5o=r(FLe," \u2014 "),ej=n(FLe,"A",{href:!0});var xrt=s(ej);N5o=r(xrt,"ElectraForCausalLM"),xrt.forEach(t),j5o=r(FLe," (ELECTRA model)"),FLe.forEach(t),D5o=i(Q),J_=n(Q,"LI",{});var TLe=s(J_);Xie=n(TLe,"STRONG",{});var $rt=s(Xie);G5o=r($rt,"gpt2"),$rt.forEach(t),O5o=r(TLe," \u2014 "),oj=n(TLe,"A",{href:!0});var krt=s(oj);V5o=r(krt,"GPT2LMHeadModel"),krt.forEach(t),X5o=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),z5o=i(Q),Y_=n(Q,"LI",{});var MLe=s(Y_);zie=n(MLe,"STRONG",{});var Srt=s(zie);W5o=r(Srt,"gpt_neo"),Srt.forEach(t),Q5o=r(MLe," \u2014 "),rj=n(MLe,"A",{href:!0});var Rrt=s(rj);H5o=r(Rrt,"GPTNeoForCausalLM"),Rrt.forEach(t),U5o=r(MLe," (GPT Neo model)"),MLe.forEach(t),J5o=i(Q),K_=n(Q,"LI",{});var ELe=s(K_);Wie=n(ELe,"STRONG",{});var Prt=s(Wie);Y5o=r(Prt,"gptj"),Prt.forEach(t),K5o=r(ELe," \u2014 "),tj=n(ELe,"A",{href:!0});var Brt=s(tj);Z5o=r(Brt,"GPTJForCausalLM"),Brt.forEach(t),e3o=r(ELe," (GPT-J model)"),ELe.forEach(t),o3o=i(Q),Z_=n(Q,"LI",{});var CLe=s(Z_);Qie=n(CLe,"STRONG",{});var Irt=s(Qie);r3o=r(Irt,"marian"),Irt.forEach(t),t3o=r(CLe," \u2014 "),aj=n(CLe,"A",{href:!0});var qrt=s(aj);a3o=r(qrt,"MarianForCausalLM"),qrt.forEach(t),n3o=r(CLe," (Marian model)"),CLe.forEach(t),s3o=i(Q),eb=n(Q,"LI",{});var wLe=s(eb);Hie=n(wLe,"STRONG",{});var Nrt=s(Hie);l3o=r(Nrt,"mbart"),Nrt.forEach(t),i3o=r(wLe," \u2014 "),nj=n(wLe,"A",{href:!0});var jrt=s(nj);d3o=r(jrt,"MBartForCausalLM"),jrt.forEach(t),c3o=r(wLe," (mBART model)"),wLe.forEach(t),m3o=i(Q),ob=n(Q,"LI",{});var ALe=s(ob);Uie=n(ALe,"STRONG",{});var Drt=s(Uie);f3o=r(Drt,"megatron-bert"),Drt.forEach(t),g3o=r(ALe," \u2014 "),sj=n(ALe,"A",{href:!0});var Grt=s(sj);h3o=r(Grt,"MegatronBertForCausalLM"),Grt.forEach(t),u3o=r(ALe," (MegatronBert model)"),ALe.forEach(t),p3o=i(Q),rb=n(Q,"LI",{});var yLe=s(rb);Jie=n(yLe,"STRONG",{});var Ort=s(Jie);_3o=r(Ort,"openai-gpt"),Ort.forEach(t),b3o=r(yLe," \u2014 "),lj=n(yLe,"A",{href:!0});var Vrt=s(lj);v3o=r(Vrt,"OpenAIGPTLMHeadModel"),Vrt.forEach(t),F3o=r(yLe," (OpenAI GPT model)"),yLe.forEach(t),T3o=i(Q),tb=n(Q,"LI",{});var LLe=s(tb);Yie=n(LLe,"STRONG",{});var Xrt=s(Yie);M3o=r(Xrt,"opt"),Xrt.forEach(t),E3o=r(LLe," \u2014 "),ij=n(LLe,"A",{href:!0});var zrt=s(ij);C3o=r(zrt,"OPTForCausalLM"),zrt.forEach(t),w3o=r(LLe," (OPT model)"),LLe.forEach(t),A3o=i(Q),ab=n(Q,"LI",{});var xLe=s(ab);Kie=n(xLe,"STRONG",{});var Wrt=s(Kie);y3o=r(Wrt,"pegasus"),Wrt.forEach(t),L3o=r(xLe," \u2014 "),dj=n(xLe,"A",{href:!0});var Qrt=s(dj);x3o=r(Qrt,"PegasusForCausalLM"),Qrt.forEach(t),$3o=r(xLe," (Pegasus model)"),xLe.forEach(t),k3o=i(Q),nb=n(Q,"LI",{});var $Le=s(nb);Zie=n($Le,"STRONG",{});var Hrt=s(Zie);S3o=r(Hrt,"plbart"),Hrt.forEach(t),R3o=r($Le," \u2014 "),cj=n($Le,"A",{href:!0});var Urt=s(cj);P3o=r(Urt,"PLBartForCausalLM"),Urt.forEach(t),B3o=r($Le," (PLBart model)"),$Le.forEach(t),I3o=i(Q),sb=n(Q,"LI",{});var kLe=s(sb);ede=n(kLe,"STRONG",{});var Jrt=s(ede);q3o=r(Jrt,"prophetnet"),Jrt.forEach(t),N3o=r(kLe," \u2014 "),mj=n(kLe,"A",{href:!0});var Yrt=s(mj);j3o=r(Yrt,"ProphetNetForCausalLM"),Yrt.forEach(t),D3o=r(kLe," (ProphetNet model)"),kLe.forEach(t),G3o=i(Q),lb=n(Q,"LI",{});var SLe=s(lb);ode=n(SLe,"STRONG",{});var Krt=s(ode);O3o=r(Krt,"qdqbert"),Krt.forEach(t),V3o=r(SLe," \u2014 "),fj=n(SLe,"A",{href:!0});var Zrt=s(fj);X3o=r(Zrt,"QDQBertLMHeadModel"),Zrt.forEach(t),z3o=r(SLe," (QDQBert model)"),SLe.forEach(t),W3o=i(Q),ib=n(Q,"LI",{});var RLe=s(ib);rde=n(RLe,"STRONG",{});var ett=s(rde);Q3o=r(ett,"reformer"),ett.forEach(t),H3o=r(RLe," \u2014 "),gj=n(RLe,"A",{href:!0});var ott=s(gj);U3o=r(ott,"ReformerModelWithLMHead"),ott.forEach(t),J3o=r(RLe," (Reformer model)"),RLe.forEach(t),Y3o=i(Q),db=n(Q,"LI",{});var PLe=s(db);tde=n(PLe,"STRONG",{});var rtt=s(tde);K3o=r(rtt,"rembert"),rtt.forEach(t),Z3o=r(PLe," \u2014 "),hj=n(PLe,"A",{href:!0});var ttt=s(hj);ewo=r(ttt,"RemBertForCausalLM"),ttt.forEach(t),owo=r(PLe," (RemBERT model)"),PLe.forEach(t),rwo=i(Q),cb=n(Q,"LI",{});var BLe=s(cb);ade=n(BLe,"STRONG",{});var att=s(ade);two=r(att,"roberta"),att.forEach(t),awo=r(BLe," \u2014 "),uj=n(BLe,"A",{href:!0});var ntt=s(uj);nwo=r(ntt,"RobertaForCausalLM"),ntt.forEach(t),swo=r(BLe," (RoBERTa model)"),BLe.forEach(t),lwo=i(Q),mb=n(Q,"LI",{});var ILe=s(mb);nde=n(ILe,"STRONG",{});var stt=s(nde);iwo=r(stt,"roformer"),stt.forEach(t),dwo=r(ILe," \u2014 "),pj=n(ILe,"A",{href:!0});var ltt=s(pj);cwo=r(ltt,"RoFormerForCausalLM"),ltt.forEach(t),mwo=r(ILe," (RoFormer model)"),ILe.forEach(t),fwo=i(Q),fb=n(Q,"LI",{});var qLe=s(fb);sde=n(qLe,"STRONG",{});var itt=s(sde);gwo=r(itt,"speech_to_text_2"),itt.forEach(t),hwo=r(qLe," \u2014 "),_j=n(qLe,"A",{href:!0});var dtt=s(_j);uwo=r(dtt,"Speech2Text2ForCausalLM"),dtt.forEach(t),pwo=r(qLe," (Speech2Text2 model)"),qLe.forEach(t),_wo=i(Q),gb=n(Q,"LI",{});var NLe=s(gb);lde=n(NLe,"STRONG",{});var ctt=s(lde);bwo=r(ctt,"transfo-xl"),ctt.forEach(t),vwo=r(NLe," \u2014 "),bj=n(NLe,"A",{href:!0});var mtt=s(bj);Fwo=r(mtt,"TransfoXLLMHeadModel"),mtt.forEach(t),Two=r(NLe," (Transformer-XL model)"),NLe.forEach(t),Mwo=i(Q),hb=n(Q,"LI",{});var jLe=s(hb);ide=n(jLe,"STRONG",{});var ftt=s(ide);Ewo=r(ftt,"trocr"),ftt.forEach(t),Cwo=r(jLe," \u2014 "),vj=n(jLe,"A",{href:!0});var gtt=s(vj);wwo=r(gtt,"TrOCRForCausalLM"),gtt.forEach(t),Awo=r(jLe," (TrOCR model)"),jLe.forEach(t),ywo=i(Q),ub=n(Q,"LI",{});var DLe=s(ub);dde=n(DLe,"STRONG",{});var htt=s(dde);Lwo=r(htt,"xglm"),htt.forEach(t),xwo=r(DLe," \u2014 "),Fj=n(DLe,"A",{href:!0});var utt=s(Fj);$wo=r(utt,"XGLMForCausalLM"),utt.forEach(t),kwo=r(DLe," (XGLM model)"),DLe.forEach(t),Swo=i(Q),pb=n(Q,"LI",{});var GLe=s(pb);cde=n(GLe,"STRONG",{});var ptt=s(cde);Rwo=r(ptt,"xlm"),ptt.forEach(t),Pwo=r(GLe," \u2014 "),Tj=n(GLe,"A",{href:!0});var _tt=s(Tj);Bwo=r(_tt,"XLMWithLMHeadModel"),_tt.forEach(t),Iwo=r(GLe," (XLM model)"),GLe.forEach(t),qwo=i(Q),_b=n(Q,"LI",{});var OLe=s(_b);mde=n(OLe,"STRONG",{});var btt=s(mde);Nwo=r(btt,"xlm-prophetnet"),btt.forEach(t),jwo=r(OLe," \u2014 "),Mj=n(OLe,"A",{href:!0});var vtt=s(Mj);Dwo=r(vtt,"XLMProphetNetForCausalLM"),vtt.forEach(t),Gwo=r(OLe," (XLMProphetNet model)"),OLe.forEach(t),Owo=i(Q),bb=n(Q,"LI",{});var VLe=s(bb);fde=n(VLe,"STRONG",{});var Ftt=s(fde);Vwo=r(Ftt,"xlm-roberta"),Ftt.forEach(t),Xwo=r(VLe," \u2014 "),Ej=n(VLe,"A",{href:!0});var Ttt=s(Ej);zwo=r(Ttt,"XLMRobertaForCausalLM"),Ttt.forEach(t),Wwo=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),Qwo=i(Q),vb=n(Q,"LI",{});var XLe=s(vb);gde=n(XLe,"STRONG",{});var Mtt=s(gde);Hwo=r(Mtt,"xlm-roberta-xl"),Mtt.forEach(t),Uwo=r(XLe," \u2014 "),Cj=n(XLe,"A",{href:!0});var Ett=s(Cj);Jwo=r(Ett,"XLMRobertaXLForCausalLM"),Ett.forEach(t),Ywo=r(XLe," (XLM-RoBERTa-XL model)"),XLe.forEach(t),Kwo=i(Q),Fb=n(Q,"LI",{});var zLe=s(Fb);hde=n(zLe,"STRONG",{});var Ctt=s(hde);Zwo=r(Ctt,"xlnet"),Ctt.forEach(t),eAo=r(zLe," \u2014 "),wj=n(zLe,"A",{href:!0});var wtt=s(wj);oAo=r(wtt,"XLNetLMHeadModel"),wtt.forEach(t),rAo=r(zLe," (XLNet model)"),zLe.forEach(t),Q.forEach(t),tAo=i(ta),Tb=n(ta,"P",{});var WLe=s(Tb);aAo=r(WLe,"The model is set in evaluation mode by default using "),ude=n(WLe,"CODE",{});var Att=s(ude);nAo=r(Att,"model.eval()"),Att.forEach(t),sAo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n(WLe,"CODE",{});var ytt=s(pde);lAo=r(ytt,"model.train()"),ytt.forEach(t),WLe.forEach(t),iAo=i(ta),T(Mb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),rqe=i(m),Ri=n(m,"H2",{class:!0});var sje=s(Ri);Eb=n(sje,"A",{id:!0,class:!0,href:!0});var Ltt=s(Eb);_de=n(Ltt,"SPAN",{});var xtt=s(_de);T(Yy.$$.fragment,xtt),xtt.forEach(t),Ltt.forEach(t),dAo=i(sje),bde=n(sje,"SPAN",{});var $tt=s(bde);cAo=r($tt,"AutoModelForMaskedLM"),$tt.forEach(t),sje.forEach(t),tqe=i(m),ko=n(m,"DIV",{class:!0});var Vs=s(ko);T(Ky.$$.fragment,Vs),mAo=i(Vs),Pi=n(Vs,"P",{});var jK=s(Pi);fAo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aj=n(jK,"A",{href:!0});var ktt=s(Aj);gAo=r(ktt,"from_pretrained()"),ktt.forEach(t),hAo=r(jK," class method or the "),yj=n(jK,"A",{href:!0});var Stt=s(yj);uAo=r(Stt,"from_config()"),Stt.forEach(t),pAo=r(jK,` class
method.`),jK.forEach(t),_Ao=i(Vs),Zy=n(Vs,"P",{});var lje=s(Zy);bAo=r(lje,"This class cannot be instantiated directly using "),vde=n(lje,"CODE",{});var Rtt=s(vde);vAo=r(Rtt,"__init__()"),Rtt.forEach(t),FAo=r(lje," (throws an error)."),lje.forEach(t),TAo=i(Vs),st=n(Vs,"DIV",{class:!0});var F0=s(st);T(eL.$$.fragment,F0),MAo=i(F0),Fde=n(F0,"P",{});var Ptt=s(Fde);EAo=r(Ptt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ptt.forEach(t),CAo=i(F0),Bi=n(F0,"P",{});var DK=s(Bi);wAo=r(DK,`Note:
Loading a model from its configuration file does `),Tde=n(DK,"STRONG",{});var Btt=s(Tde);AAo=r(Btt,"not"),Btt.forEach(t),yAo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n(DK,"A",{href:!0});var Itt=s(Lj);LAo=r(Itt,"from_pretrained()"),Itt.forEach(t),xAo=r(DK," to load the model weights."),DK.forEach(t),$Ao=i(F0),T(Cb.$$.fragment,F0),F0.forEach(t),kAo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(oL.$$.fragment,aa),SAo=i(aa),Mde=n(aa,"P",{});var qtt=s(Mde);RAo=r(qtt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qtt.forEach(t),PAo=i(aa),ka=n(aa,"P",{});var T0=s(ka);BAo=r(T0,"The model class to instantiate is selected based on the "),Ede=n(T0,"CODE",{});var Ntt=s(Ede);IAo=r(Ntt,"model_type"),Ntt.forEach(t),qAo=r(T0,` property of the config object (either
passed as an argument or loaded from `),Cde=n(T0,"CODE",{});var jtt=s(Cde);NAo=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),jAo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(T0,"CODE",{});var Dtt=s(wde);DAo=r(Dtt,"pretrained_model_name_or_path"),Dtt.forEach(t),GAo=r(T0,":"),T0.forEach(t),OAo=i(aa),W=n(aa,"UL",{});var H=s(W);wb=n(H,"LI",{});var QLe=s(wb);Ade=n(QLe,"STRONG",{});var Gtt=s(Ade);VAo=r(Gtt,"albert"),Gtt.forEach(t),XAo=r(QLe," \u2014 "),xj=n(QLe,"A",{href:!0});var Ott=s(xj);zAo=r(Ott,"AlbertForMaskedLM"),Ott.forEach(t),WAo=r(QLe," (ALBERT model)"),QLe.forEach(t),QAo=i(H),Ab=n(H,"LI",{});var HLe=s(Ab);yde=n(HLe,"STRONG",{});var Vtt=s(yde);HAo=r(Vtt,"bart"),Vtt.forEach(t),UAo=r(HLe," \u2014 "),$j=n(HLe,"A",{href:!0});var Xtt=s($j);JAo=r(Xtt,"BartForConditionalGeneration"),Xtt.forEach(t),YAo=r(HLe," (BART model)"),HLe.forEach(t),KAo=i(H),yb=n(H,"LI",{});var ULe=s(yb);Lde=n(ULe,"STRONG",{});var ztt=s(Lde);ZAo=r(ztt,"bert"),ztt.forEach(t),e0o=r(ULe," \u2014 "),kj=n(ULe,"A",{href:!0});var Wtt=s(kj);o0o=r(Wtt,"BertForMaskedLM"),Wtt.forEach(t),r0o=r(ULe," (BERT model)"),ULe.forEach(t),t0o=i(H),Lb=n(H,"LI",{});var JLe=s(Lb);xde=n(JLe,"STRONG",{});var Qtt=s(xde);a0o=r(Qtt,"big_bird"),Qtt.forEach(t),n0o=r(JLe," \u2014 "),Sj=n(JLe,"A",{href:!0});var Htt=s(Sj);s0o=r(Htt,"BigBirdForMaskedLM"),Htt.forEach(t),l0o=r(JLe," (BigBird model)"),JLe.forEach(t),i0o=i(H),xb=n(H,"LI",{});var YLe=s(xb);$de=n(YLe,"STRONG",{});var Utt=s($de);d0o=r(Utt,"camembert"),Utt.forEach(t),c0o=r(YLe," \u2014 "),Rj=n(YLe,"A",{href:!0});var Jtt=s(Rj);m0o=r(Jtt,"CamembertForMaskedLM"),Jtt.forEach(t),f0o=r(YLe," (CamemBERT model)"),YLe.forEach(t),g0o=i(H),$b=n(H,"LI",{});var KLe=s($b);kde=n(KLe,"STRONG",{});var Ytt=s(kde);h0o=r(Ytt,"convbert"),Ytt.forEach(t),u0o=r(KLe," \u2014 "),Pj=n(KLe,"A",{href:!0});var Ktt=s(Pj);p0o=r(Ktt,"ConvBertForMaskedLM"),Ktt.forEach(t),_0o=r(KLe," (ConvBERT model)"),KLe.forEach(t),b0o=i(H),kb=n(H,"LI",{});var ZLe=s(kb);Sde=n(ZLe,"STRONG",{});var Ztt=s(Sde);v0o=r(Ztt,"data2vec-text"),Ztt.forEach(t),F0o=r(ZLe," \u2014 "),Bj=n(ZLe,"A",{href:!0});var eat=s(Bj);T0o=r(eat,"Data2VecTextForMaskedLM"),eat.forEach(t),M0o=r(ZLe," (Data2VecText model)"),ZLe.forEach(t),E0o=i(H),Sb=n(H,"LI",{});var e8e=s(Sb);Rde=n(e8e,"STRONG",{});var oat=s(Rde);C0o=r(oat,"deberta"),oat.forEach(t),w0o=r(e8e," \u2014 "),Ij=n(e8e,"A",{href:!0});var rat=s(Ij);A0o=r(rat,"DebertaForMaskedLM"),rat.forEach(t),y0o=r(e8e," (DeBERTa model)"),e8e.forEach(t),L0o=i(H),Rb=n(H,"LI",{});var o8e=s(Rb);Pde=n(o8e,"STRONG",{});var tat=s(Pde);x0o=r(tat,"deberta-v2"),tat.forEach(t),$0o=r(o8e," \u2014 "),qj=n(o8e,"A",{href:!0});var aat=s(qj);k0o=r(aat,"DebertaV2ForMaskedLM"),aat.forEach(t),S0o=r(o8e," (DeBERTa-v2 model)"),o8e.forEach(t),R0o=i(H),Pb=n(H,"LI",{});var r8e=s(Pb);Bde=n(r8e,"STRONG",{});var nat=s(Bde);P0o=r(nat,"distilbert"),nat.forEach(t),B0o=r(r8e," \u2014 "),Nj=n(r8e,"A",{href:!0});var sat=s(Nj);I0o=r(sat,"DistilBertForMaskedLM"),sat.forEach(t),q0o=r(r8e," (DistilBERT model)"),r8e.forEach(t),N0o=i(H),Bb=n(H,"LI",{});var t8e=s(Bb);Ide=n(t8e,"STRONG",{});var lat=s(Ide);j0o=r(lat,"electra"),lat.forEach(t),D0o=r(t8e," \u2014 "),jj=n(t8e,"A",{href:!0});var iat=s(jj);G0o=r(iat,"ElectraForMaskedLM"),iat.forEach(t),O0o=r(t8e," (ELECTRA model)"),t8e.forEach(t),V0o=i(H),Ib=n(H,"LI",{});var a8e=s(Ib);qde=n(a8e,"STRONG",{});var dat=s(qde);X0o=r(dat,"flaubert"),dat.forEach(t),z0o=r(a8e," \u2014 "),Dj=n(a8e,"A",{href:!0});var cat=s(Dj);W0o=r(cat,"FlaubertWithLMHeadModel"),cat.forEach(t),Q0o=r(a8e," (FlauBERT model)"),a8e.forEach(t),H0o=i(H),qb=n(H,"LI",{});var n8e=s(qb);Nde=n(n8e,"STRONG",{});var mat=s(Nde);U0o=r(mat,"fnet"),mat.forEach(t),J0o=r(n8e," \u2014 "),Gj=n(n8e,"A",{href:!0});var fat=s(Gj);Y0o=r(fat,"FNetForMaskedLM"),fat.forEach(t),K0o=r(n8e," (FNet model)"),n8e.forEach(t),Z0o=i(H),Nb=n(H,"LI",{});var s8e=s(Nb);jde=n(s8e,"STRONG",{});var gat=s(jde);e6o=r(gat,"funnel"),gat.forEach(t),o6o=r(s8e," \u2014 "),Oj=n(s8e,"A",{href:!0});var hat=s(Oj);r6o=r(hat,"FunnelForMaskedLM"),hat.forEach(t),t6o=r(s8e," (Funnel Transformer model)"),s8e.forEach(t),a6o=i(H),jb=n(H,"LI",{});var l8e=s(jb);Dde=n(l8e,"STRONG",{});var uat=s(Dde);n6o=r(uat,"ibert"),uat.forEach(t),s6o=r(l8e," \u2014 "),Vj=n(l8e,"A",{href:!0});var pat=s(Vj);l6o=r(pat,"IBertForMaskedLM"),pat.forEach(t),i6o=r(l8e," (I-BERT model)"),l8e.forEach(t),d6o=i(H),Db=n(H,"LI",{});var i8e=s(Db);Gde=n(i8e,"STRONG",{});var _at=s(Gde);c6o=r(_at,"layoutlm"),_at.forEach(t),m6o=r(i8e," \u2014 "),Xj=n(i8e,"A",{href:!0});var bat=s(Xj);f6o=r(bat,"LayoutLMForMaskedLM"),bat.forEach(t),g6o=r(i8e," (LayoutLM model)"),i8e.forEach(t),h6o=i(H),Gb=n(H,"LI",{});var d8e=s(Gb);Ode=n(d8e,"STRONG",{});var vat=s(Ode);u6o=r(vat,"longformer"),vat.forEach(t),p6o=r(d8e," \u2014 "),zj=n(d8e,"A",{href:!0});var Fat=s(zj);_6o=r(Fat,"LongformerForMaskedLM"),Fat.forEach(t),b6o=r(d8e," (Longformer model)"),d8e.forEach(t),v6o=i(H),Ob=n(H,"LI",{});var c8e=s(Ob);Vde=n(c8e,"STRONG",{});var Tat=s(Vde);F6o=r(Tat,"mbart"),Tat.forEach(t),T6o=r(c8e," \u2014 "),Wj=n(c8e,"A",{href:!0});var Mat=s(Wj);M6o=r(Mat,"MBartForConditionalGeneration"),Mat.forEach(t),E6o=r(c8e," (mBART model)"),c8e.forEach(t),C6o=i(H),Vb=n(H,"LI",{});var m8e=s(Vb);Xde=n(m8e,"STRONG",{});var Eat=s(Xde);w6o=r(Eat,"megatron-bert"),Eat.forEach(t),A6o=r(m8e," \u2014 "),Qj=n(m8e,"A",{href:!0});var Cat=s(Qj);y6o=r(Cat,"MegatronBertForMaskedLM"),Cat.forEach(t),L6o=r(m8e," (MegatronBert model)"),m8e.forEach(t),x6o=i(H),Xb=n(H,"LI",{});var f8e=s(Xb);zde=n(f8e,"STRONG",{});var wat=s(zde);$6o=r(wat,"mobilebert"),wat.forEach(t),k6o=r(f8e," \u2014 "),Hj=n(f8e,"A",{href:!0});var Aat=s(Hj);S6o=r(Aat,"MobileBertForMaskedLM"),Aat.forEach(t),R6o=r(f8e," (MobileBERT model)"),f8e.forEach(t),P6o=i(H),zb=n(H,"LI",{});var g8e=s(zb);Wde=n(g8e,"STRONG",{});var yat=s(Wde);B6o=r(yat,"mpnet"),yat.forEach(t),I6o=r(g8e," \u2014 "),Uj=n(g8e,"A",{href:!0});var Lat=s(Uj);q6o=r(Lat,"MPNetForMaskedLM"),Lat.forEach(t),N6o=r(g8e," (MPNet model)"),g8e.forEach(t),j6o=i(H),Wb=n(H,"LI",{});var h8e=s(Wb);Qde=n(h8e,"STRONG",{});var xat=s(Qde);D6o=r(xat,"nystromformer"),xat.forEach(t),G6o=r(h8e," \u2014 "),Jj=n(h8e,"A",{href:!0});var $at=s(Jj);O6o=r($at,"NystromformerForMaskedLM"),$at.forEach(t),V6o=r(h8e," (Nystromformer model)"),h8e.forEach(t),X6o=i(H),Qb=n(H,"LI",{});var u8e=s(Qb);Hde=n(u8e,"STRONG",{});var kat=s(Hde);z6o=r(kat,"perceiver"),kat.forEach(t),W6o=r(u8e," \u2014 "),Yj=n(u8e,"A",{href:!0});var Sat=s(Yj);Q6o=r(Sat,"PerceiverForMaskedLM"),Sat.forEach(t),H6o=r(u8e," (Perceiver model)"),u8e.forEach(t),U6o=i(H),Hb=n(H,"LI",{});var p8e=s(Hb);Ude=n(p8e,"STRONG",{});var Rat=s(Ude);J6o=r(Rat,"qdqbert"),Rat.forEach(t),Y6o=r(p8e," \u2014 "),Kj=n(p8e,"A",{href:!0});var Pat=s(Kj);K6o=r(Pat,"QDQBertForMaskedLM"),Pat.forEach(t),Z6o=r(p8e," (QDQBert model)"),p8e.forEach(t),eyo=i(H),Ub=n(H,"LI",{});var _8e=s(Ub);Jde=n(_8e,"STRONG",{});var Bat=s(Jde);oyo=r(Bat,"reformer"),Bat.forEach(t),ryo=r(_8e," \u2014 "),Zj=n(_8e,"A",{href:!0});var Iat=s(Zj);tyo=r(Iat,"ReformerForMaskedLM"),Iat.forEach(t),ayo=r(_8e," (Reformer model)"),_8e.forEach(t),nyo=i(H),Jb=n(H,"LI",{});var b8e=s(Jb);Yde=n(b8e,"STRONG",{});var qat=s(Yde);syo=r(qat,"rembert"),qat.forEach(t),lyo=r(b8e," \u2014 "),eD=n(b8e,"A",{href:!0});var Nat=s(eD);iyo=r(Nat,"RemBertForMaskedLM"),Nat.forEach(t),dyo=r(b8e," (RemBERT model)"),b8e.forEach(t),cyo=i(H),Yb=n(H,"LI",{});var v8e=s(Yb);Kde=n(v8e,"STRONG",{});var jat=s(Kde);myo=r(jat,"roberta"),jat.forEach(t),fyo=r(v8e," \u2014 "),oD=n(v8e,"A",{href:!0});var Dat=s(oD);gyo=r(Dat,"RobertaForMaskedLM"),Dat.forEach(t),hyo=r(v8e," (RoBERTa model)"),v8e.forEach(t),uyo=i(H),Kb=n(H,"LI",{});var F8e=s(Kb);Zde=n(F8e,"STRONG",{});var Gat=s(Zde);pyo=r(Gat,"roformer"),Gat.forEach(t),_yo=r(F8e," \u2014 "),rD=n(F8e,"A",{href:!0});var Oat=s(rD);byo=r(Oat,"RoFormerForMaskedLM"),Oat.forEach(t),vyo=r(F8e," (RoFormer model)"),F8e.forEach(t),Fyo=i(H),Zb=n(H,"LI",{});var T8e=s(Zb);ece=n(T8e,"STRONG",{});var Vat=s(ece);Tyo=r(Vat,"squeezebert"),Vat.forEach(t),Myo=r(T8e," \u2014 "),tD=n(T8e,"A",{href:!0});var Xat=s(tD);Eyo=r(Xat,"SqueezeBertForMaskedLM"),Xat.forEach(t),Cyo=r(T8e," (SqueezeBERT model)"),T8e.forEach(t),wyo=i(H),e2=n(H,"LI",{});var M8e=s(e2);oce=n(M8e,"STRONG",{});var zat=s(oce);Ayo=r(zat,"tapas"),zat.forEach(t),yyo=r(M8e," \u2014 "),aD=n(M8e,"A",{href:!0});var Wat=s(aD);Lyo=r(Wat,"TapasForMaskedLM"),Wat.forEach(t),xyo=r(M8e," (TAPAS model)"),M8e.forEach(t),$yo=i(H),o2=n(H,"LI",{});var E8e=s(o2);rce=n(E8e,"STRONG",{});var Qat=s(rce);kyo=r(Qat,"wav2vec2"),Qat.forEach(t),Syo=r(E8e," \u2014 "),tce=n(E8e,"CODE",{});var Hat=s(tce);Ryo=r(Hat,"Wav2Vec2ForMaskedLM"),Hat.forEach(t),Pyo=r(E8e," (Wav2Vec2 model)"),E8e.forEach(t),Byo=i(H),r2=n(H,"LI",{});var C8e=s(r2);ace=n(C8e,"STRONG",{});var Uat=s(ace);Iyo=r(Uat,"xlm"),Uat.forEach(t),qyo=r(C8e," \u2014 "),nD=n(C8e,"A",{href:!0});var Jat=s(nD);Nyo=r(Jat,"XLMWithLMHeadModel"),Jat.forEach(t),jyo=r(C8e," (XLM model)"),C8e.forEach(t),Dyo=i(H),t2=n(H,"LI",{});var w8e=s(t2);nce=n(w8e,"STRONG",{});var Yat=s(nce);Gyo=r(Yat,"xlm-roberta"),Yat.forEach(t),Oyo=r(w8e," \u2014 "),sD=n(w8e,"A",{href:!0});var Kat=s(sD);Vyo=r(Kat,"XLMRobertaForMaskedLM"),Kat.forEach(t),Xyo=r(w8e," (XLM-RoBERTa model)"),w8e.forEach(t),zyo=i(H),a2=n(H,"LI",{});var A8e=s(a2);sce=n(A8e,"STRONG",{});var Zat=s(sce);Wyo=r(Zat,"xlm-roberta-xl"),Zat.forEach(t),Qyo=r(A8e," \u2014 "),lD=n(A8e,"A",{href:!0});var ent=s(lD);Hyo=r(ent,"XLMRobertaXLForMaskedLM"),ent.forEach(t),Uyo=r(A8e," (XLM-RoBERTa-XL model)"),A8e.forEach(t),Jyo=i(H),n2=n(H,"LI",{});var y8e=s(n2);lce=n(y8e,"STRONG",{});var ont=s(lce);Yyo=r(ont,"yoso"),ont.forEach(t),Kyo=r(y8e," \u2014 "),iD=n(y8e,"A",{href:!0});var rnt=s(iD);Zyo=r(rnt,"YosoForMaskedLM"),rnt.forEach(t),eLo=r(y8e," (YOSO model)"),y8e.forEach(t),H.forEach(t),oLo=i(aa),s2=n(aa,"P",{});var L8e=s(s2);rLo=r(L8e,"The model is set in evaluation mode by default using "),ice=n(L8e,"CODE",{});var tnt=s(ice);tLo=r(tnt,"model.eval()"),tnt.forEach(t),aLo=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(L8e,"CODE",{});var ant=s(dce);nLo=r(ant,"model.train()"),ant.forEach(t),L8e.forEach(t),sLo=i(aa),T(l2.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),aqe=i(m),Ii=n(m,"H2",{class:!0});var ije=s(Ii);i2=n(ije,"A",{id:!0,class:!0,href:!0});var nnt=s(i2);cce=n(nnt,"SPAN",{});var snt=s(cce);T(rL.$$.fragment,snt),snt.forEach(t),nnt.forEach(t),lLo=i(ije),mce=n(ije,"SPAN",{});var lnt=s(mce);iLo=r(lnt,"AutoModelForSeq2SeqLM"),lnt.forEach(t),ije.forEach(t),nqe=i(m),So=n(m,"DIV",{class:!0});var Xs=s(So);T(tL.$$.fragment,Xs),dLo=i(Xs),qi=n(Xs,"P",{});var GK=s(qi);cLo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dD=n(GK,"A",{href:!0});var int=s(dD);mLo=r(int,"from_pretrained()"),int.forEach(t),fLo=r(GK," class method or the "),cD=n(GK,"A",{href:!0});var dnt=s(cD);gLo=r(dnt,"from_config()"),dnt.forEach(t),hLo=r(GK,` class
method.`),GK.forEach(t),uLo=i(Xs),aL=n(Xs,"P",{});var dje=s(aL);pLo=r(dje,"This class cannot be instantiated directly using "),fce=n(dje,"CODE",{});var cnt=s(fce);_Lo=r(cnt,"__init__()"),cnt.forEach(t),bLo=r(dje," (throws an error)."),dje.forEach(t),vLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var M0=s(lt);T(nL.$$.fragment,M0),FLo=i(M0),gce=n(M0,"P",{});var mnt=s(gce);TLo=r(mnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mnt.forEach(t),MLo=i(M0),Ni=n(M0,"P",{});var OK=s(Ni);ELo=r(OK,`Note:
Loading a model from its configuration file does `),hce=n(OK,"STRONG",{});var fnt=s(hce);CLo=r(fnt,"not"),fnt.forEach(t),wLo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(OK,"A",{href:!0});var gnt=s(mD);ALo=r(gnt,"from_pretrained()"),gnt.forEach(t),yLo=r(OK," to load the model weights."),OK.forEach(t),LLo=i(M0),T(d2.$$.fragment,M0),M0.forEach(t),xLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(sL.$$.fragment,na),$Lo=i(na),uce=n(na,"P",{});var hnt=s(uce);kLo=r(hnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hnt.forEach(t),SLo=i(na),Sa=n(na,"P",{});var E0=s(Sa);RLo=r(E0,"The model class to instantiate is selected based on the "),pce=n(E0,"CODE",{});var unt=s(pce);PLo=r(unt,"model_type"),unt.forEach(t),BLo=r(E0,` property of the config object (either
passed as an argument or loaded from `),_ce=n(E0,"CODE",{});var pnt=s(_ce);ILo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),qLo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(E0,"CODE",{});var _nt=s(bce);NLo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),jLo=r(E0,":"),E0.forEach(t),DLo=i(na),pe=n(na,"UL",{});var ve=s(pe);c2=n(ve,"LI",{});var x8e=s(c2);vce=n(x8e,"STRONG",{});var bnt=s(vce);GLo=r(bnt,"bart"),bnt.forEach(t),OLo=r(x8e," \u2014 "),fD=n(x8e,"A",{href:!0});var vnt=s(fD);VLo=r(vnt,"BartForConditionalGeneration"),vnt.forEach(t),XLo=r(x8e," (BART model)"),x8e.forEach(t),zLo=i(ve),m2=n(ve,"LI",{});var $8e=s(m2);Fce=n($8e,"STRONG",{});var Fnt=s(Fce);WLo=r(Fnt,"bigbird_pegasus"),Fnt.forEach(t),QLo=r($8e," \u2014 "),gD=n($8e,"A",{href:!0});var Tnt=s(gD);HLo=r(Tnt,"BigBirdPegasusForConditionalGeneration"),Tnt.forEach(t),ULo=r($8e," (BigBirdPegasus model)"),$8e.forEach(t),JLo=i(ve),f2=n(ve,"LI",{});var k8e=s(f2);Tce=n(k8e,"STRONG",{});var Mnt=s(Tce);YLo=r(Mnt,"blenderbot"),Mnt.forEach(t),KLo=r(k8e," \u2014 "),hD=n(k8e,"A",{href:!0});var Ent=s(hD);ZLo=r(Ent,"BlenderbotForConditionalGeneration"),Ent.forEach(t),e8o=r(k8e," (Blenderbot model)"),k8e.forEach(t),o8o=i(ve),g2=n(ve,"LI",{});var S8e=s(g2);Mce=n(S8e,"STRONG",{});var Cnt=s(Mce);r8o=r(Cnt,"blenderbot-small"),Cnt.forEach(t),t8o=r(S8e," \u2014 "),uD=n(S8e,"A",{href:!0});var wnt=s(uD);a8o=r(wnt,"BlenderbotSmallForConditionalGeneration"),wnt.forEach(t),n8o=r(S8e," (BlenderbotSmall model)"),S8e.forEach(t),s8o=i(ve),h2=n(ve,"LI",{});var R8e=s(h2);Ece=n(R8e,"STRONG",{});var Ant=s(Ece);l8o=r(Ant,"encoder-decoder"),Ant.forEach(t),i8o=r(R8e," \u2014 "),pD=n(R8e,"A",{href:!0});var ynt=s(pD);d8o=r(ynt,"EncoderDecoderModel"),ynt.forEach(t),c8o=r(R8e," (Encoder decoder model)"),R8e.forEach(t),m8o=i(ve),u2=n(ve,"LI",{});var P8e=s(u2);Cce=n(P8e,"STRONG",{});var Lnt=s(Cce);f8o=r(Lnt,"fsmt"),Lnt.forEach(t),g8o=r(P8e," \u2014 "),_D=n(P8e,"A",{href:!0});var xnt=s(_D);h8o=r(xnt,"FSMTForConditionalGeneration"),xnt.forEach(t),u8o=r(P8e," (FairSeq Machine-Translation model)"),P8e.forEach(t),p8o=i(ve),p2=n(ve,"LI",{});var B8e=s(p2);wce=n(B8e,"STRONG",{});var $nt=s(wce);_8o=r($nt,"led"),$nt.forEach(t),b8o=r(B8e," \u2014 "),bD=n(B8e,"A",{href:!0});var knt=s(bD);v8o=r(knt,"LEDForConditionalGeneration"),knt.forEach(t),F8o=r(B8e," (LED model)"),B8e.forEach(t),T8o=i(ve),_2=n(ve,"LI",{});var I8e=s(_2);Ace=n(I8e,"STRONG",{});var Snt=s(Ace);M8o=r(Snt,"m2m_100"),Snt.forEach(t),E8o=r(I8e," \u2014 "),vD=n(I8e,"A",{href:!0});var Rnt=s(vD);C8o=r(Rnt,"M2M100ForConditionalGeneration"),Rnt.forEach(t),w8o=r(I8e," (M2M100 model)"),I8e.forEach(t),A8o=i(ve),b2=n(ve,"LI",{});var q8e=s(b2);yce=n(q8e,"STRONG",{});var Pnt=s(yce);y8o=r(Pnt,"marian"),Pnt.forEach(t),L8o=r(q8e," \u2014 "),FD=n(q8e,"A",{href:!0});var Bnt=s(FD);x8o=r(Bnt,"MarianMTModel"),Bnt.forEach(t),$8o=r(q8e," (Marian model)"),q8e.forEach(t),k8o=i(ve),v2=n(ve,"LI",{});var N8e=s(v2);Lce=n(N8e,"STRONG",{});var Int=s(Lce);S8o=r(Int,"mbart"),Int.forEach(t),R8o=r(N8e," \u2014 "),TD=n(N8e,"A",{href:!0});var qnt=s(TD);P8o=r(qnt,"MBartForConditionalGeneration"),qnt.forEach(t),B8o=r(N8e," (mBART model)"),N8e.forEach(t),I8o=i(ve),F2=n(ve,"LI",{});var j8e=s(F2);xce=n(j8e,"STRONG",{});var Nnt=s(xce);q8o=r(Nnt,"mt5"),Nnt.forEach(t),N8o=r(j8e," \u2014 "),MD=n(j8e,"A",{href:!0});var jnt=s(MD);j8o=r(jnt,"MT5ForConditionalGeneration"),jnt.forEach(t),D8o=r(j8e," (mT5 model)"),j8e.forEach(t),G8o=i(ve),T2=n(ve,"LI",{});var D8e=s(T2);$ce=n(D8e,"STRONG",{});var Dnt=s($ce);O8o=r(Dnt,"pegasus"),Dnt.forEach(t),V8o=r(D8e," \u2014 "),ED=n(D8e,"A",{href:!0});var Gnt=s(ED);X8o=r(Gnt,"PegasusForConditionalGeneration"),Gnt.forEach(t),z8o=r(D8e," (Pegasus model)"),D8e.forEach(t),W8o=i(ve),M2=n(ve,"LI",{});var G8e=s(M2);kce=n(G8e,"STRONG",{});var Ont=s(kce);Q8o=r(Ont,"plbart"),Ont.forEach(t),H8o=r(G8e," \u2014 "),CD=n(G8e,"A",{href:!0});var Vnt=s(CD);U8o=r(Vnt,"PLBartForConditionalGeneration"),Vnt.forEach(t),J8o=r(G8e," (PLBart model)"),G8e.forEach(t),Y8o=i(ve),E2=n(ve,"LI",{});var O8e=s(E2);Sce=n(O8e,"STRONG",{});var Xnt=s(Sce);K8o=r(Xnt,"prophetnet"),Xnt.forEach(t),Z8o=r(O8e," \u2014 "),wD=n(O8e,"A",{href:!0});var znt=s(wD);e7o=r(znt,"ProphetNetForConditionalGeneration"),znt.forEach(t),o7o=r(O8e," (ProphetNet model)"),O8e.forEach(t),r7o=i(ve),C2=n(ve,"LI",{});var V8e=s(C2);Rce=n(V8e,"STRONG",{});var Wnt=s(Rce);t7o=r(Wnt,"t5"),Wnt.forEach(t),a7o=r(V8e," \u2014 "),AD=n(V8e,"A",{href:!0});var Qnt=s(AD);n7o=r(Qnt,"T5ForConditionalGeneration"),Qnt.forEach(t),s7o=r(V8e," (T5 model)"),V8e.forEach(t),l7o=i(ve),w2=n(ve,"LI",{});var X8e=s(w2);Pce=n(X8e,"STRONG",{});var Hnt=s(Pce);i7o=r(Hnt,"xlm-prophetnet"),Hnt.forEach(t),d7o=r(X8e," \u2014 "),yD=n(X8e,"A",{href:!0});var Unt=s(yD);c7o=r(Unt,"XLMProphetNetForConditionalGeneration"),Unt.forEach(t),m7o=r(X8e," (XLMProphetNet model)"),X8e.forEach(t),ve.forEach(t),f7o=i(na),A2=n(na,"P",{});var z8e=s(A2);g7o=r(z8e,"The model is set in evaluation mode by default using "),Bce=n(z8e,"CODE",{});var Jnt=s(Bce);h7o=r(Jnt,"model.eval()"),Jnt.forEach(t),u7o=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(z8e,"CODE",{});var Ynt=s(Ice);p7o=r(Ynt,"model.train()"),Ynt.forEach(t),z8e.forEach(t),_7o=i(na),T(y2.$$.fragment,na),na.forEach(t),Xs.forEach(t),sqe=i(m),ji=n(m,"H2",{class:!0});var cje=s(ji);L2=n(cje,"A",{id:!0,class:!0,href:!0});var Knt=s(L2);qce=n(Knt,"SPAN",{});var Znt=s(qce);T(lL.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),b7o=i(cje),Nce=n(cje,"SPAN",{});var est=s(Nce);v7o=r(est,"AutoModelForSequenceClassification"),est.forEach(t),cje.forEach(t),lqe=i(m),Ro=n(m,"DIV",{class:!0});var zs=s(Ro);T(iL.$$.fragment,zs),F7o=i(zs),Di=n(zs,"P",{});var VK=s(Di);T7o=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LD=n(VK,"A",{href:!0});var ost=s(LD);M7o=r(ost,"from_pretrained()"),ost.forEach(t),E7o=r(VK," class method or the "),xD=n(VK,"A",{href:!0});var rst=s(xD);C7o=r(rst,"from_config()"),rst.forEach(t),w7o=r(VK,` class
method.`),VK.forEach(t),A7o=i(zs),dL=n(zs,"P",{});var mje=s(dL);y7o=r(mje,"This class cannot be instantiated directly using "),jce=n(mje,"CODE",{});var tst=s(jce);L7o=r(tst,"__init__()"),tst.forEach(t),x7o=r(mje," (throws an error)."),mje.forEach(t),$7o=i(zs),it=n(zs,"DIV",{class:!0});var C0=s(it);T(cL.$$.fragment,C0),k7o=i(C0),Dce=n(C0,"P",{});var ast=s(Dce);S7o=r(ast,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ast.forEach(t),R7o=i(C0),Gi=n(C0,"P",{});var XK=s(Gi);P7o=r(XK,`Note:
Loading a model from its configuration file does `),Gce=n(XK,"STRONG",{});var nst=s(Gce);B7o=r(nst,"not"),nst.forEach(t),I7o=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(XK,"A",{href:!0});var sst=s($D);q7o=r(sst,"from_pretrained()"),sst.forEach(t),N7o=r(XK," to load the model weights."),XK.forEach(t),j7o=i(C0),T(x2.$$.fragment,C0),C0.forEach(t),D7o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(mL.$$.fragment,sa),G7o=i(sa),Oce=n(sa,"P",{});var lst=s(Oce);O7o=r(lst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lst.forEach(t),V7o=i(sa),Ra=n(sa,"P",{});var w0=s(Ra);X7o=r(w0,"The model class to instantiate is selected based on the "),Vce=n(w0,"CODE",{});var ist=s(Vce);z7o=r(ist,"model_type"),ist.forEach(t),W7o=r(w0,` property of the config object (either
passed as an argument or loaded from `),Xce=n(w0,"CODE",{});var dst=s(Xce);Q7o=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),H7o=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(w0,"CODE",{});var cst=s(zce);U7o=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),J7o=r(w0,":"),w0.forEach(t),Y7o=i(sa),q=n(sa,"UL",{});var j=s(q);$2=n(j,"LI",{});var W8e=s($2);Wce=n(W8e,"STRONG",{});var mst=s(Wce);K7o=r(mst,"albert"),mst.forEach(t),Z7o=r(W8e," \u2014 "),kD=n(W8e,"A",{href:!0});var fst=s(kD);exo=r(fst,"AlbertForSequenceClassification"),fst.forEach(t),oxo=r(W8e," (ALBERT model)"),W8e.forEach(t),rxo=i(j),k2=n(j,"LI",{});var Q8e=s(k2);Qce=n(Q8e,"STRONG",{});var gst=s(Qce);txo=r(gst,"bart"),gst.forEach(t),axo=r(Q8e," \u2014 "),SD=n(Q8e,"A",{href:!0});var hst=s(SD);nxo=r(hst,"BartForSequenceClassification"),hst.forEach(t),sxo=r(Q8e," (BART model)"),Q8e.forEach(t),lxo=i(j),S2=n(j,"LI",{});var H8e=s(S2);Hce=n(H8e,"STRONG",{});var ust=s(Hce);ixo=r(ust,"bert"),ust.forEach(t),dxo=r(H8e," \u2014 "),RD=n(H8e,"A",{href:!0});var pst=s(RD);cxo=r(pst,"BertForSequenceClassification"),pst.forEach(t),mxo=r(H8e," (BERT model)"),H8e.forEach(t),fxo=i(j),R2=n(j,"LI",{});var U8e=s(R2);Uce=n(U8e,"STRONG",{});var _st=s(Uce);gxo=r(_st,"big_bird"),_st.forEach(t),hxo=r(U8e," \u2014 "),PD=n(U8e,"A",{href:!0});var bst=s(PD);uxo=r(bst,"BigBirdForSequenceClassification"),bst.forEach(t),pxo=r(U8e," (BigBird model)"),U8e.forEach(t),_xo=i(j),P2=n(j,"LI",{});var J8e=s(P2);Jce=n(J8e,"STRONG",{});var vst=s(Jce);bxo=r(vst,"bigbird_pegasus"),vst.forEach(t),vxo=r(J8e," \u2014 "),BD=n(J8e,"A",{href:!0});var Fst=s(BD);Fxo=r(Fst,"BigBirdPegasusForSequenceClassification"),Fst.forEach(t),Txo=r(J8e," (BigBirdPegasus model)"),J8e.forEach(t),Mxo=i(j),B2=n(j,"LI",{});var Y8e=s(B2);Yce=n(Y8e,"STRONG",{});var Tst=s(Yce);Exo=r(Tst,"camembert"),Tst.forEach(t),Cxo=r(Y8e," \u2014 "),ID=n(Y8e,"A",{href:!0});var Mst=s(ID);wxo=r(Mst,"CamembertForSequenceClassification"),Mst.forEach(t),Axo=r(Y8e," (CamemBERT model)"),Y8e.forEach(t),yxo=i(j),I2=n(j,"LI",{});var K8e=s(I2);Kce=n(K8e,"STRONG",{});var Est=s(Kce);Lxo=r(Est,"canine"),Est.forEach(t),xxo=r(K8e," \u2014 "),qD=n(K8e,"A",{href:!0});var Cst=s(qD);$xo=r(Cst,"CanineForSequenceClassification"),Cst.forEach(t),kxo=r(K8e," (Canine model)"),K8e.forEach(t),Sxo=i(j),q2=n(j,"LI",{});var Z8e=s(q2);Zce=n(Z8e,"STRONG",{});var wst=s(Zce);Rxo=r(wst,"convbert"),wst.forEach(t),Pxo=r(Z8e," \u2014 "),ND=n(Z8e,"A",{href:!0});var Ast=s(ND);Bxo=r(Ast,"ConvBertForSequenceClassification"),Ast.forEach(t),Ixo=r(Z8e," (ConvBERT model)"),Z8e.forEach(t),qxo=i(j),N2=n(j,"LI",{});var e7e=s(N2);eme=n(e7e,"STRONG",{});var yst=s(eme);Nxo=r(yst,"ctrl"),yst.forEach(t),jxo=r(e7e," \u2014 "),jD=n(e7e,"A",{href:!0});var Lst=s(jD);Dxo=r(Lst,"CTRLForSequenceClassification"),Lst.forEach(t),Gxo=r(e7e," (CTRL model)"),e7e.forEach(t),Oxo=i(j),j2=n(j,"LI",{});var o7e=s(j2);ome=n(o7e,"STRONG",{});var xst=s(ome);Vxo=r(xst,"data2vec-text"),xst.forEach(t),Xxo=r(o7e," \u2014 "),DD=n(o7e,"A",{href:!0});var $st=s(DD);zxo=r($st,"Data2VecTextForSequenceClassification"),$st.forEach(t),Wxo=r(o7e," (Data2VecText model)"),o7e.forEach(t),Qxo=i(j),D2=n(j,"LI",{});var r7e=s(D2);rme=n(r7e,"STRONG",{});var kst=s(rme);Hxo=r(kst,"deberta"),kst.forEach(t),Uxo=r(r7e," \u2014 "),GD=n(r7e,"A",{href:!0});var Sst=s(GD);Jxo=r(Sst,"DebertaForSequenceClassification"),Sst.forEach(t),Yxo=r(r7e," (DeBERTa model)"),r7e.forEach(t),Kxo=i(j),G2=n(j,"LI",{});var t7e=s(G2);tme=n(t7e,"STRONG",{});var Rst=s(tme);Zxo=r(Rst,"deberta-v2"),Rst.forEach(t),e9o=r(t7e," \u2014 "),OD=n(t7e,"A",{href:!0});var Pst=s(OD);o9o=r(Pst,"DebertaV2ForSequenceClassification"),Pst.forEach(t),r9o=r(t7e," (DeBERTa-v2 model)"),t7e.forEach(t),t9o=i(j),O2=n(j,"LI",{});var a7e=s(O2);ame=n(a7e,"STRONG",{});var Bst=s(ame);a9o=r(Bst,"distilbert"),Bst.forEach(t),n9o=r(a7e," \u2014 "),VD=n(a7e,"A",{href:!0});var Ist=s(VD);s9o=r(Ist,"DistilBertForSequenceClassification"),Ist.forEach(t),l9o=r(a7e," (DistilBERT model)"),a7e.forEach(t),i9o=i(j),V2=n(j,"LI",{});var n7e=s(V2);nme=n(n7e,"STRONG",{});var qst=s(nme);d9o=r(qst,"electra"),qst.forEach(t),c9o=r(n7e," \u2014 "),XD=n(n7e,"A",{href:!0});var Nst=s(XD);m9o=r(Nst,"ElectraForSequenceClassification"),Nst.forEach(t),f9o=r(n7e," (ELECTRA model)"),n7e.forEach(t),g9o=i(j),X2=n(j,"LI",{});var s7e=s(X2);sme=n(s7e,"STRONG",{});var jst=s(sme);h9o=r(jst,"flaubert"),jst.forEach(t),u9o=r(s7e," \u2014 "),zD=n(s7e,"A",{href:!0});var Dst=s(zD);p9o=r(Dst,"FlaubertForSequenceClassification"),Dst.forEach(t),_9o=r(s7e," (FlauBERT model)"),s7e.forEach(t),b9o=i(j),z2=n(j,"LI",{});var l7e=s(z2);lme=n(l7e,"STRONG",{});var Gst=s(lme);v9o=r(Gst,"fnet"),Gst.forEach(t),F9o=r(l7e," \u2014 "),WD=n(l7e,"A",{href:!0});var Ost=s(WD);T9o=r(Ost,"FNetForSequenceClassification"),Ost.forEach(t),M9o=r(l7e," (FNet model)"),l7e.forEach(t),E9o=i(j),W2=n(j,"LI",{});var i7e=s(W2);ime=n(i7e,"STRONG",{});var Vst=s(ime);C9o=r(Vst,"funnel"),Vst.forEach(t),w9o=r(i7e," \u2014 "),QD=n(i7e,"A",{href:!0});var Xst=s(QD);A9o=r(Xst,"FunnelForSequenceClassification"),Xst.forEach(t),y9o=r(i7e," (Funnel Transformer model)"),i7e.forEach(t),L9o=i(j),Q2=n(j,"LI",{});var d7e=s(Q2);dme=n(d7e,"STRONG",{});var zst=s(dme);x9o=r(zst,"gpt2"),zst.forEach(t),$9o=r(d7e," \u2014 "),HD=n(d7e,"A",{href:!0});var Wst=s(HD);k9o=r(Wst,"GPT2ForSequenceClassification"),Wst.forEach(t),S9o=r(d7e," (OpenAI GPT-2 model)"),d7e.forEach(t),R9o=i(j),H2=n(j,"LI",{});var c7e=s(H2);cme=n(c7e,"STRONG",{});var Qst=s(cme);P9o=r(Qst,"gpt_neo"),Qst.forEach(t),B9o=r(c7e," \u2014 "),UD=n(c7e,"A",{href:!0});var Hst=s(UD);I9o=r(Hst,"GPTNeoForSequenceClassification"),Hst.forEach(t),q9o=r(c7e," (GPT Neo model)"),c7e.forEach(t),N9o=i(j),U2=n(j,"LI",{});var m7e=s(U2);mme=n(m7e,"STRONG",{});var Ust=s(mme);j9o=r(Ust,"gptj"),Ust.forEach(t),D9o=r(m7e," \u2014 "),JD=n(m7e,"A",{href:!0});var Jst=s(JD);G9o=r(Jst,"GPTJForSequenceClassification"),Jst.forEach(t),O9o=r(m7e," (GPT-J model)"),m7e.forEach(t),V9o=i(j),J2=n(j,"LI",{});var f7e=s(J2);fme=n(f7e,"STRONG",{});var Yst=s(fme);X9o=r(Yst,"ibert"),Yst.forEach(t),z9o=r(f7e," \u2014 "),YD=n(f7e,"A",{href:!0});var Kst=s(YD);W9o=r(Kst,"IBertForSequenceClassification"),Kst.forEach(t),Q9o=r(f7e," (I-BERT model)"),f7e.forEach(t),H9o=i(j),Y2=n(j,"LI",{});var g7e=s(Y2);gme=n(g7e,"STRONG",{});var Zst=s(gme);U9o=r(Zst,"layoutlm"),Zst.forEach(t),J9o=r(g7e," \u2014 "),KD=n(g7e,"A",{href:!0});var elt=s(KD);Y9o=r(elt,"LayoutLMForSequenceClassification"),elt.forEach(t),K9o=r(g7e," (LayoutLM model)"),g7e.forEach(t),Z9o=i(j),K2=n(j,"LI",{});var h7e=s(K2);hme=n(h7e,"STRONG",{});var olt=s(hme);e$o=r(olt,"layoutlmv2"),olt.forEach(t),o$o=r(h7e," \u2014 "),ZD=n(h7e,"A",{href:!0});var rlt=s(ZD);r$o=r(rlt,"LayoutLMv2ForSequenceClassification"),rlt.forEach(t),t$o=r(h7e," (LayoutLMv2 model)"),h7e.forEach(t),a$o=i(j),Z2=n(j,"LI",{});var u7e=s(Z2);ume=n(u7e,"STRONG",{});var tlt=s(ume);n$o=r(tlt,"led"),tlt.forEach(t),s$o=r(u7e," \u2014 "),eG=n(u7e,"A",{href:!0});var alt=s(eG);l$o=r(alt,"LEDForSequenceClassification"),alt.forEach(t),i$o=r(u7e," (LED model)"),u7e.forEach(t),d$o=i(j),ev=n(j,"LI",{});var p7e=s(ev);pme=n(p7e,"STRONG",{});var nlt=s(pme);c$o=r(nlt,"longformer"),nlt.forEach(t),m$o=r(p7e," \u2014 "),oG=n(p7e,"A",{href:!0});var slt=s(oG);f$o=r(slt,"LongformerForSequenceClassification"),slt.forEach(t),g$o=r(p7e," (Longformer model)"),p7e.forEach(t),h$o=i(j),ov=n(j,"LI",{});var _7e=s(ov);_me=n(_7e,"STRONG",{});var llt=s(_me);u$o=r(llt,"mbart"),llt.forEach(t),p$o=r(_7e," \u2014 "),rG=n(_7e,"A",{href:!0});var ilt=s(rG);_$o=r(ilt,"MBartForSequenceClassification"),ilt.forEach(t),b$o=r(_7e," (mBART model)"),_7e.forEach(t),v$o=i(j),rv=n(j,"LI",{});var b7e=s(rv);bme=n(b7e,"STRONG",{});var dlt=s(bme);F$o=r(dlt,"megatron-bert"),dlt.forEach(t),T$o=r(b7e," \u2014 "),tG=n(b7e,"A",{href:!0});var clt=s(tG);M$o=r(clt,"MegatronBertForSequenceClassification"),clt.forEach(t),E$o=r(b7e," (MegatronBert model)"),b7e.forEach(t),C$o=i(j),tv=n(j,"LI",{});var v7e=s(tv);vme=n(v7e,"STRONG",{});var mlt=s(vme);w$o=r(mlt,"mobilebert"),mlt.forEach(t),A$o=r(v7e," \u2014 "),aG=n(v7e,"A",{href:!0});var flt=s(aG);y$o=r(flt,"MobileBertForSequenceClassification"),flt.forEach(t),L$o=r(v7e," (MobileBERT model)"),v7e.forEach(t),x$o=i(j),av=n(j,"LI",{});var F7e=s(av);Fme=n(F7e,"STRONG",{});var glt=s(Fme);$$o=r(glt,"mpnet"),glt.forEach(t),k$o=r(F7e," \u2014 "),nG=n(F7e,"A",{href:!0});var hlt=s(nG);S$o=r(hlt,"MPNetForSequenceClassification"),hlt.forEach(t),R$o=r(F7e," (MPNet model)"),F7e.forEach(t),P$o=i(j),nv=n(j,"LI",{});var T7e=s(nv);Tme=n(T7e,"STRONG",{});var ult=s(Tme);B$o=r(ult,"nystromformer"),ult.forEach(t),I$o=r(T7e," \u2014 "),sG=n(T7e,"A",{href:!0});var plt=s(sG);q$o=r(plt,"NystromformerForSequenceClassification"),plt.forEach(t),N$o=r(T7e," (Nystromformer model)"),T7e.forEach(t),j$o=i(j),sv=n(j,"LI",{});var M7e=s(sv);Mme=n(M7e,"STRONG",{});var _lt=s(Mme);D$o=r(_lt,"openai-gpt"),_lt.forEach(t),G$o=r(M7e," \u2014 "),lG=n(M7e,"A",{href:!0});var blt=s(lG);O$o=r(blt,"OpenAIGPTForSequenceClassification"),blt.forEach(t),V$o=r(M7e," (OpenAI GPT model)"),M7e.forEach(t),X$o=i(j),lv=n(j,"LI",{});var E7e=s(lv);Eme=n(E7e,"STRONG",{});var vlt=s(Eme);z$o=r(vlt,"perceiver"),vlt.forEach(t),W$o=r(E7e," \u2014 "),iG=n(E7e,"A",{href:!0});var Flt=s(iG);Q$o=r(Flt,"PerceiverForSequenceClassification"),Flt.forEach(t),H$o=r(E7e," (Perceiver model)"),E7e.forEach(t),U$o=i(j),iv=n(j,"LI",{});var C7e=s(iv);Cme=n(C7e,"STRONG",{});var Tlt=s(Cme);J$o=r(Tlt,"plbart"),Tlt.forEach(t),Y$o=r(C7e," \u2014 "),dG=n(C7e,"A",{href:!0});var Mlt=s(dG);K$o=r(Mlt,"PLBartForSequenceClassification"),Mlt.forEach(t),Z$o=r(C7e," (PLBart model)"),C7e.forEach(t),eko=i(j),dv=n(j,"LI",{});var w7e=s(dv);wme=n(w7e,"STRONG",{});var Elt=s(wme);oko=r(Elt,"qdqbert"),Elt.forEach(t),rko=r(w7e," \u2014 "),cG=n(w7e,"A",{href:!0});var Clt=s(cG);tko=r(Clt,"QDQBertForSequenceClassification"),Clt.forEach(t),ako=r(w7e," (QDQBert model)"),w7e.forEach(t),nko=i(j),cv=n(j,"LI",{});var A7e=s(cv);Ame=n(A7e,"STRONG",{});var wlt=s(Ame);sko=r(wlt,"reformer"),wlt.forEach(t),lko=r(A7e," \u2014 "),mG=n(A7e,"A",{href:!0});var Alt=s(mG);iko=r(Alt,"ReformerForSequenceClassification"),Alt.forEach(t),dko=r(A7e," (Reformer model)"),A7e.forEach(t),cko=i(j),mv=n(j,"LI",{});var y7e=s(mv);yme=n(y7e,"STRONG",{});var ylt=s(yme);mko=r(ylt,"rembert"),ylt.forEach(t),fko=r(y7e," \u2014 "),fG=n(y7e,"A",{href:!0});var Llt=s(fG);gko=r(Llt,"RemBertForSequenceClassification"),Llt.forEach(t),hko=r(y7e," (RemBERT model)"),y7e.forEach(t),uko=i(j),fv=n(j,"LI",{});var L7e=s(fv);Lme=n(L7e,"STRONG",{});var xlt=s(Lme);pko=r(xlt,"roberta"),xlt.forEach(t),_ko=r(L7e," \u2014 "),gG=n(L7e,"A",{href:!0});var $lt=s(gG);bko=r($lt,"RobertaForSequenceClassification"),$lt.forEach(t),vko=r(L7e," (RoBERTa model)"),L7e.forEach(t),Fko=i(j),gv=n(j,"LI",{});var x7e=s(gv);xme=n(x7e,"STRONG",{});var klt=s(xme);Tko=r(klt,"roformer"),klt.forEach(t),Mko=r(x7e," \u2014 "),hG=n(x7e,"A",{href:!0});var Slt=s(hG);Eko=r(Slt,"RoFormerForSequenceClassification"),Slt.forEach(t),Cko=r(x7e," (RoFormer model)"),x7e.forEach(t),wko=i(j),hv=n(j,"LI",{});var $7e=s(hv);$me=n($7e,"STRONG",{});var Rlt=s($me);Ako=r(Rlt,"squeezebert"),Rlt.forEach(t),yko=r($7e," \u2014 "),uG=n($7e,"A",{href:!0});var Plt=s(uG);Lko=r(Plt,"SqueezeBertForSequenceClassification"),Plt.forEach(t),xko=r($7e," (SqueezeBERT model)"),$7e.forEach(t),$ko=i(j),uv=n(j,"LI",{});var k7e=s(uv);kme=n(k7e,"STRONG",{});var Blt=s(kme);kko=r(Blt,"tapas"),Blt.forEach(t),Sko=r(k7e," \u2014 "),pG=n(k7e,"A",{href:!0});var Ilt=s(pG);Rko=r(Ilt,"TapasForSequenceClassification"),Ilt.forEach(t),Pko=r(k7e," (TAPAS model)"),k7e.forEach(t),Bko=i(j),pv=n(j,"LI",{});var S7e=s(pv);Sme=n(S7e,"STRONG",{});var qlt=s(Sme);Iko=r(qlt,"transfo-xl"),qlt.forEach(t),qko=r(S7e," \u2014 "),_G=n(S7e,"A",{href:!0});var Nlt=s(_G);Nko=r(Nlt,"TransfoXLForSequenceClassification"),Nlt.forEach(t),jko=r(S7e," (Transformer-XL model)"),S7e.forEach(t),Dko=i(j),_v=n(j,"LI",{});var R7e=s(_v);Rme=n(R7e,"STRONG",{});var jlt=s(Rme);Gko=r(jlt,"xlm"),jlt.forEach(t),Oko=r(R7e," \u2014 "),bG=n(R7e,"A",{href:!0});var Dlt=s(bG);Vko=r(Dlt,"XLMForSequenceClassification"),Dlt.forEach(t),Xko=r(R7e," (XLM model)"),R7e.forEach(t),zko=i(j),bv=n(j,"LI",{});var P7e=s(bv);Pme=n(P7e,"STRONG",{});var Glt=s(Pme);Wko=r(Glt,"xlm-roberta"),Glt.forEach(t),Qko=r(P7e," \u2014 "),vG=n(P7e,"A",{href:!0});var Olt=s(vG);Hko=r(Olt,"XLMRobertaForSequenceClassification"),Olt.forEach(t),Uko=r(P7e," (XLM-RoBERTa model)"),P7e.forEach(t),Jko=i(j),vv=n(j,"LI",{});var B7e=s(vv);Bme=n(B7e,"STRONG",{});var Vlt=s(Bme);Yko=r(Vlt,"xlm-roberta-xl"),Vlt.forEach(t),Kko=r(B7e," \u2014 "),FG=n(B7e,"A",{href:!0});var Xlt=s(FG);Zko=r(Xlt,"XLMRobertaXLForSequenceClassification"),Xlt.forEach(t),eSo=r(B7e," (XLM-RoBERTa-XL model)"),B7e.forEach(t),oSo=i(j),Fv=n(j,"LI",{});var I7e=s(Fv);Ime=n(I7e,"STRONG",{});var zlt=s(Ime);rSo=r(zlt,"xlnet"),zlt.forEach(t),tSo=r(I7e," \u2014 "),TG=n(I7e,"A",{href:!0});var Wlt=s(TG);aSo=r(Wlt,"XLNetForSequenceClassification"),Wlt.forEach(t),nSo=r(I7e," (XLNet model)"),I7e.forEach(t),sSo=i(j),Tv=n(j,"LI",{});var q7e=s(Tv);qme=n(q7e,"STRONG",{});var Qlt=s(qme);lSo=r(Qlt,"yoso"),Qlt.forEach(t),iSo=r(q7e," \u2014 "),MG=n(q7e,"A",{href:!0});var Hlt=s(MG);dSo=r(Hlt,"YosoForSequenceClassification"),Hlt.forEach(t),cSo=r(q7e," (YOSO model)"),q7e.forEach(t),j.forEach(t),mSo=i(sa),Mv=n(sa,"P",{});var N7e=s(Mv);fSo=r(N7e,"The model is set in evaluation mode by default using "),Nme=n(N7e,"CODE",{});var Ult=s(Nme);gSo=r(Ult,"model.eval()"),Ult.forEach(t),hSo=r(N7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(N7e,"CODE",{});var Jlt=s(jme);uSo=r(Jlt,"model.train()"),Jlt.forEach(t),N7e.forEach(t),pSo=i(sa),T(Ev.$$.fragment,sa),sa.forEach(t),zs.forEach(t),iqe=i(m),Oi=n(m,"H2",{class:!0});var fje=s(Oi);Cv=n(fje,"A",{id:!0,class:!0,href:!0});var Ylt=s(Cv);Dme=n(Ylt,"SPAN",{});var Klt=s(Dme);T(fL.$$.fragment,Klt),Klt.forEach(t),Ylt.forEach(t),_So=i(fje),Gme=n(fje,"SPAN",{});var Zlt=s(Gme);bSo=r(Zlt,"AutoModelForMultipleChoice"),Zlt.forEach(t),fje.forEach(t),dqe=i(m),Po=n(m,"DIV",{class:!0});var Ws=s(Po);T(gL.$$.fragment,Ws),vSo=i(Ws),Vi=n(Ws,"P",{});var zK=s(Vi);FSo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EG=n(zK,"A",{href:!0});var eit=s(EG);TSo=r(eit,"from_pretrained()"),eit.forEach(t),MSo=r(zK," class method or the "),CG=n(zK,"A",{href:!0});var oit=s(CG);ESo=r(oit,"from_config()"),oit.forEach(t),CSo=r(zK,` class
method.`),zK.forEach(t),wSo=i(Ws),hL=n(Ws,"P",{});var gje=s(hL);ASo=r(gje,"This class cannot be instantiated directly using "),Ome=n(gje,"CODE",{});var rit=s(Ome);ySo=r(rit,"__init__()"),rit.forEach(t),LSo=r(gje," (throws an error)."),gje.forEach(t),xSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var A0=s(dt);T(uL.$$.fragment,A0),$So=i(A0),Vme=n(A0,"P",{});var tit=s(Vme);kSo=r(tit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tit.forEach(t),SSo=i(A0),Xi=n(A0,"P",{});var WK=s(Xi);RSo=r(WK,`Note:
Loading a model from its configuration file does `),Xme=n(WK,"STRONG",{});var ait=s(Xme);PSo=r(ait,"not"),ait.forEach(t),BSo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(WK,"A",{href:!0});var nit=s(wG);ISo=r(nit,"from_pretrained()"),nit.forEach(t),qSo=r(WK," to load the model weights."),WK.forEach(t),NSo=i(A0),T(wv.$$.fragment,A0),A0.forEach(t),jSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(pL.$$.fragment,la),DSo=i(la),zme=n(la,"P",{});var sit=s(zme);GSo=r(sit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sit.forEach(t),OSo=i(la),Pa=n(la,"P",{});var y0=s(Pa);VSo=r(y0,"The model class to instantiate is selected based on the "),Wme=n(y0,"CODE",{});var lit=s(Wme);XSo=r(lit,"model_type"),lit.forEach(t),zSo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Qme=n(y0,"CODE",{});var iit=s(Qme);WSo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),QSo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(y0,"CODE",{});var dit=s(Hme);HSo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),USo=r(y0,":"),y0.forEach(t),JSo=i(la),Y=n(la,"UL",{});var K=s(Y);Av=n(K,"LI",{});var j7e=s(Av);Ume=n(j7e,"STRONG",{});var cit=s(Ume);YSo=r(cit,"albert"),cit.forEach(t),KSo=r(j7e," \u2014 "),AG=n(j7e,"A",{href:!0});var mit=s(AG);ZSo=r(mit,"AlbertForMultipleChoice"),mit.forEach(t),eRo=r(j7e," (ALBERT model)"),j7e.forEach(t),oRo=i(K),yv=n(K,"LI",{});var D7e=s(yv);Jme=n(D7e,"STRONG",{});var fit=s(Jme);rRo=r(fit,"bert"),fit.forEach(t),tRo=r(D7e," \u2014 "),yG=n(D7e,"A",{href:!0});var git=s(yG);aRo=r(git,"BertForMultipleChoice"),git.forEach(t),nRo=r(D7e," (BERT model)"),D7e.forEach(t),sRo=i(K),Lv=n(K,"LI",{});var G7e=s(Lv);Yme=n(G7e,"STRONG",{});var hit=s(Yme);lRo=r(hit,"big_bird"),hit.forEach(t),iRo=r(G7e," \u2014 "),LG=n(G7e,"A",{href:!0});var uit=s(LG);dRo=r(uit,"BigBirdForMultipleChoice"),uit.forEach(t),cRo=r(G7e," (BigBird model)"),G7e.forEach(t),mRo=i(K),xv=n(K,"LI",{});var O7e=s(xv);Kme=n(O7e,"STRONG",{});var pit=s(Kme);fRo=r(pit,"camembert"),pit.forEach(t),gRo=r(O7e," \u2014 "),xG=n(O7e,"A",{href:!0});var _it=s(xG);hRo=r(_it,"CamembertForMultipleChoice"),_it.forEach(t),uRo=r(O7e," (CamemBERT model)"),O7e.forEach(t),pRo=i(K),$v=n(K,"LI",{});var V7e=s($v);Zme=n(V7e,"STRONG",{});var bit=s(Zme);_Ro=r(bit,"canine"),bit.forEach(t),bRo=r(V7e," \u2014 "),$G=n(V7e,"A",{href:!0});var vit=s($G);vRo=r(vit,"CanineForMultipleChoice"),vit.forEach(t),FRo=r(V7e," (Canine model)"),V7e.forEach(t),TRo=i(K),kv=n(K,"LI",{});var X7e=s(kv);efe=n(X7e,"STRONG",{});var Fit=s(efe);MRo=r(Fit,"convbert"),Fit.forEach(t),ERo=r(X7e," \u2014 "),kG=n(X7e,"A",{href:!0});var Tit=s(kG);CRo=r(Tit,"ConvBertForMultipleChoice"),Tit.forEach(t),wRo=r(X7e," (ConvBERT model)"),X7e.forEach(t),ARo=i(K),Sv=n(K,"LI",{});var z7e=s(Sv);ofe=n(z7e,"STRONG",{});var Mit=s(ofe);yRo=r(Mit,"data2vec-text"),Mit.forEach(t),LRo=r(z7e," \u2014 "),SG=n(z7e,"A",{href:!0});var Eit=s(SG);xRo=r(Eit,"Data2VecTextForMultipleChoice"),Eit.forEach(t),$Ro=r(z7e," (Data2VecText model)"),z7e.forEach(t),kRo=i(K),Rv=n(K,"LI",{});var W7e=s(Rv);rfe=n(W7e,"STRONG",{});var Cit=s(rfe);SRo=r(Cit,"deberta-v2"),Cit.forEach(t),RRo=r(W7e," \u2014 "),RG=n(W7e,"A",{href:!0});var wit=s(RG);PRo=r(wit,"DebertaV2ForMultipleChoice"),wit.forEach(t),BRo=r(W7e," (DeBERTa-v2 model)"),W7e.forEach(t),IRo=i(K),Pv=n(K,"LI",{});var Q7e=s(Pv);tfe=n(Q7e,"STRONG",{});var Ait=s(tfe);qRo=r(Ait,"distilbert"),Ait.forEach(t),NRo=r(Q7e," \u2014 "),PG=n(Q7e,"A",{href:!0});var yit=s(PG);jRo=r(yit,"DistilBertForMultipleChoice"),yit.forEach(t),DRo=r(Q7e," (DistilBERT model)"),Q7e.forEach(t),GRo=i(K),Bv=n(K,"LI",{});var H7e=s(Bv);afe=n(H7e,"STRONG",{});var Lit=s(afe);ORo=r(Lit,"electra"),Lit.forEach(t),VRo=r(H7e," \u2014 "),BG=n(H7e,"A",{href:!0});var xit=s(BG);XRo=r(xit,"ElectraForMultipleChoice"),xit.forEach(t),zRo=r(H7e," (ELECTRA model)"),H7e.forEach(t),WRo=i(K),Iv=n(K,"LI",{});var U7e=s(Iv);nfe=n(U7e,"STRONG",{});var $it=s(nfe);QRo=r($it,"flaubert"),$it.forEach(t),HRo=r(U7e," \u2014 "),IG=n(U7e,"A",{href:!0});var kit=s(IG);URo=r(kit,"FlaubertForMultipleChoice"),kit.forEach(t),JRo=r(U7e," (FlauBERT model)"),U7e.forEach(t),YRo=i(K),qv=n(K,"LI",{});var J7e=s(qv);sfe=n(J7e,"STRONG",{});var Sit=s(sfe);KRo=r(Sit,"fnet"),Sit.forEach(t),ZRo=r(J7e," \u2014 "),qG=n(J7e,"A",{href:!0});var Rit=s(qG);ePo=r(Rit,"FNetForMultipleChoice"),Rit.forEach(t),oPo=r(J7e," (FNet model)"),J7e.forEach(t),rPo=i(K),Nv=n(K,"LI",{});var Y7e=s(Nv);lfe=n(Y7e,"STRONG",{});var Pit=s(lfe);tPo=r(Pit,"funnel"),Pit.forEach(t),aPo=r(Y7e," \u2014 "),NG=n(Y7e,"A",{href:!0});var Bit=s(NG);nPo=r(Bit,"FunnelForMultipleChoice"),Bit.forEach(t),sPo=r(Y7e," (Funnel Transformer model)"),Y7e.forEach(t),lPo=i(K),jv=n(K,"LI",{});var K7e=s(jv);ife=n(K7e,"STRONG",{});var Iit=s(ife);iPo=r(Iit,"ibert"),Iit.forEach(t),dPo=r(K7e," \u2014 "),jG=n(K7e,"A",{href:!0});var qit=s(jG);cPo=r(qit,"IBertForMultipleChoice"),qit.forEach(t),mPo=r(K7e," (I-BERT model)"),K7e.forEach(t),fPo=i(K),Dv=n(K,"LI",{});var Z7e=s(Dv);dfe=n(Z7e,"STRONG",{});var Nit=s(dfe);gPo=r(Nit,"longformer"),Nit.forEach(t),hPo=r(Z7e," \u2014 "),DG=n(Z7e,"A",{href:!0});var jit=s(DG);uPo=r(jit,"LongformerForMultipleChoice"),jit.forEach(t),pPo=r(Z7e," (Longformer model)"),Z7e.forEach(t),_Po=i(K),Gv=n(K,"LI",{});var exe=s(Gv);cfe=n(exe,"STRONG",{});var Dit=s(cfe);bPo=r(Dit,"megatron-bert"),Dit.forEach(t),vPo=r(exe," \u2014 "),GG=n(exe,"A",{href:!0});var Git=s(GG);FPo=r(Git,"MegatronBertForMultipleChoice"),Git.forEach(t),TPo=r(exe," (MegatronBert model)"),exe.forEach(t),MPo=i(K),Ov=n(K,"LI",{});var oxe=s(Ov);mfe=n(oxe,"STRONG",{});var Oit=s(mfe);EPo=r(Oit,"mobilebert"),Oit.forEach(t),CPo=r(oxe," \u2014 "),OG=n(oxe,"A",{href:!0});var Vit=s(OG);wPo=r(Vit,"MobileBertForMultipleChoice"),Vit.forEach(t),APo=r(oxe," (MobileBERT model)"),oxe.forEach(t),yPo=i(K),Vv=n(K,"LI",{});var rxe=s(Vv);ffe=n(rxe,"STRONG",{});var Xit=s(ffe);LPo=r(Xit,"mpnet"),Xit.forEach(t),xPo=r(rxe," \u2014 "),VG=n(rxe,"A",{href:!0});var zit=s(VG);$Po=r(zit,"MPNetForMultipleChoice"),zit.forEach(t),kPo=r(rxe," (MPNet model)"),rxe.forEach(t),SPo=i(K),Xv=n(K,"LI",{});var txe=s(Xv);gfe=n(txe,"STRONG",{});var Wit=s(gfe);RPo=r(Wit,"nystromformer"),Wit.forEach(t),PPo=r(txe," \u2014 "),XG=n(txe,"A",{href:!0});var Qit=s(XG);BPo=r(Qit,"NystromformerForMultipleChoice"),Qit.forEach(t),IPo=r(txe," (Nystromformer model)"),txe.forEach(t),qPo=i(K),zv=n(K,"LI",{});var axe=s(zv);hfe=n(axe,"STRONG",{});var Hit=s(hfe);NPo=r(Hit,"qdqbert"),Hit.forEach(t),jPo=r(axe," \u2014 "),zG=n(axe,"A",{href:!0});var Uit=s(zG);DPo=r(Uit,"QDQBertForMultipleChoice"),Uit.forEach(t),GPo=r(axe," (QDQBert model)"),axe.forEach(t),OPo=i(K),Wv=n(K,"LI",{});var nxe=s(Wv);ufe=n(nxe,"STRONG",{});var Jit=s(ufe);VPo=r(Jit,"rembert"),Jit.forEach(t),XPo=r(nxe," \u2014 "),WG=n(nxe,"A",{href:!0});var Yit=s(WG);zPo=r(Yit,"RemBertForMultipleChoice"),Yit.forEach(t),WPo=r(nxe," (RemBERT model)"),nxe.forEach(t),QPo=i(K),Qv=n(K,"LI",{});var sxe=s(Qv);pfe=n(sxe,"STRONG",{});var Kit=s(pfe);HPo=r(Kit,"roberta"),Kit.forEach(t),UPo=r(sxe," \u2014 "),QG=n(sxe,"A",{href:!0});var Zit=s(QG);JPo=r(Zit,"RobertaForMultipleChoice"),Zit.forEach(t),YPo=r(sxe," (RoBERTa model)"),sxe.forEach(t),KPo=i(K),Hv=n(K,"LI",{});var lxe=s(Hv);_fe=n(lxe,"STRONG",{});var edt=s(_fe);ZPo=r(edt,"roformer"),edt.forEach(t),eBo=r(lxe," \u2014 "),HG=n(lxe,"A",{href:!0});var odt=s(HG);oBo=r(odt,"RoFormerForMultipleChoice"),odt.forEach(t),rBo=r(lxe," (RoFormer model)"),lxe.forEach(t),tBo=i(K),Uv=n(K,"LI",{});var ixe=s(Uv);bfe=n(ixe,"STRONG",{});var rdt=s(bfe);aBo=r(rdt,"squeezebert"),rdt.forEach(t),nBo=r(ixe," \u2014 "),UG=n(ixe,"A",{href:!0});var tdt=s(UG);sBo=r(tdt,"SqueezeBertForMultipleChoice"),tdt.forEach(t),lBo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),iBo=i(K),Jv=n(K,"LI",{});var dxe=s(Jv);vfe=n(dxe,"STRONG",{});var adt=s(vfe);dBo=r(adt,"xlm"),adt.forEach(t),cBo=r(dxe," \u2014 "),JG=n(dxe,"A",{href:!0});var ndt=s(JG);mBo=r(ndt,"XLMForMultipleChoice"),ndt.forEach(t),fBo=r(dxe," (XLM model)"),dxe.forEach(t),gBo=i(K),Yv=n(K,"LI",{});var cxe=s(Yv);Ffe=n(cxe,"STRONG",{});var sdt=s(Ffe);hBo=r(sdt,"xlm-roberta"),sdt.forEach(t),uBo=r(cxe," \u2014 "),YG=n(cxe,"A",{href:!0});var ldt=s(YG);pBo=r(ldt,"XLMRobertaForMultipleChoice"),ldt.forEach(t),_Bo=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),bBo=i(K),Kv=n(K,"LI",{});var mxe=s(Kv);Tfe=n(mxe,"STRONG",{});var idt=s(Tfe);vBo=r(idt,"xlm-roberta-xl"),idt.forEach(t),FBo=r(mxe," \u2014 "),KG=n(mxe,"A",{href:!0});var ddt=s(KG);TBo=r(ddt,"XLMRobertaXLForMultipleChoice"),ddt.forEach(t),MBo=r(mxe," (XLM-RoBERTa-XL model)"),mxe.forEach(t),EBo=i(K),Zv=n(K,"LI",{});var fxe=s(Zv);Mfe=n(fxe,"STRONG",{});var cdt=s(Mfe);CBo=r(cdt,"xlnet"),cdt.forEach(t),wBo=r(fxe," \u2014 "),ZG=n(fxe,"A",{href:!0});var mdt=s(ZG);ABo=r(mdt,"XLNetForMultipleChoice"),mdt.forEach(t),yBo=r(fxe," (XLNet model)"),fxe.forEach(t),LBo=i(K),eF=n(K,"LI",{});var gxe=s(eF);Efe=n(gxe,"STRONG",{});var fdt=s(Efe);xBo=r(fdt,"yoso"),fdt.forEach(t),$Bo=r(gxe," \u2014 "),eO=n(gxe,"A",{href:!0});var gdt=s(eO);kBo=r(gdt,"YosoForMultipleChoice"),gdt.forEach(t),SBo=r(gxe," (YOSO model)"),gxe.forEach(t),K.forEach(t),RBo=i(la),oF=n(la,"P",{});var hxe=s(oF);PBo=r(hxe,"The model is set in evaluation mode by default using "),Cfe=n(hxe,"CODE",{});var hdt=s(Cfe);BBo=r(hdt,"model.eval()"),hdt.forEach(t),IBo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(hxe,"CODE",{});var udt=s(wfe);qBo=r(udt,"model.train()"),udt.forEach(t),hxe.forEach(t),NBo=i(la),T(rF.$$.fragment,la),la.forEach(t),Ws.forEach(t),cqe=i(m),zi=n(m,"H2",{class:!0});var hje=s(zi);tF=n(hje,"A",{id:!0,class:!0,href:!0});var pdt=s(tF);Afe=n(pdt,"SPAN",{});var _dt=s(Afe);T(_L.$$.fragment,_dt),_dt.forEach(t),pdt.forEach(t),jBo=i(hje),yfe=n(hje,"SPAN",{});var bdt=s(yfe);DBo=r(bdt,"AutoModelForNextSentencePrediction"),bdt.forEach(t),hje.forEach(t),mqe=i(m),Bo=n(m,"DIV",{class:!0});var Qs=s(Bo);T(bL.$$.fragment,Qs),GBo=i(Qs),Wi=n(Qs,"P",{});var QK=s(Wi);OBo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oO=n(QK,"A",{href:!0});var vdt=s(oO);VBo=r(vdt,"from_pretrained()"),vdt.forEach(t),XBo=r(QK," class method or the "),rO=n(QK,"A",{href:!0});var Fdt=s(rO);zBo=r(Fdt,"from_config()"),Fdt.forEach(t),WBo=r(QK,` class
method.`),QK.forEach(t),QBo=i(Qs),vL=n(Qs,"P",{});var uje=s(vL);HBo=r(uje,"This class cannot be instantiated directly using "),Lfe=n(uje,"CODE",{});var Tdt=s(Lfe);UBo=r(Tdt,"__init__()"),Tdt.forEach(t),JBo=r(uje," (throws an error)."),uje.forEach(t),YBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var L0=s(ct);T(FL.$$.fragment,L0),KBo=i(L0),xfe=n(L0,"P",{});var Mdt=s(xfe);ZBo=r(Mdt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mdt.forEach(t),eIo=i(L0),Qi=n(L0,"P",{});var HK=s(Qi);oIo=r(HK,`Note:
Loading a model from its configuration file does `),$fe=n(HK,"STRONG",{});var Edt=s($fe);rIo=r(Edt,"not"),Edt.forEach(t),tIo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(HK,"A",{href:!0});var Cdt=s(tO);aIo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),nIo=r(HK," to load the model weights."),HK.forEach(t),sIo=i(L0),T(aF.$$.fragment,L0),L0.forEach(t),lIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(TL.$$.fragment,ia),iIo=i(ia),kfe=n(ia,"P",{});var wdt=s(kfe);dIo=r(wdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wdt.forEach(t),cIo=i(ia),Ba=n(ia,"P",{});var x0=s(Ba);mIo=r(x0,"The model class to instantiate is selected based on the "),Sfe=n(x0,"CODE",{});var Adt=s(Sfe);fIo=r(Adt,"model_type"),Adt.forEach(t),gIo=r(x0,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(x0,"CODE",{});var ydt=s(Rfe);hIo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),uIo=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(x0,"CODE",{});var Ldt=s(Pfe);pIo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),_Io=r(x0,":"),x0.forEach(t),bIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);nF=n(Hs,"LI",{});var uxe=s(nF);Bfe=n(uxe,"STRONG",{});var xdt=s(Bfe);vIo=r(xdt,"bert"),xdt.forEach(t),FIo=r(uxe," \u2014 "),aO=n(uxe,"A",{href:!0});var $dt=s(aO);TIo=r($dt,"BertForNextSentencePrediction"),$dt.forEach(t),MIo=r(uxe," (BERT model)"),uxe.forEach(t),EIo=i(Hs),sF=n(Hs,"LI",{});var pxe=s(sF);Ife=n(pxe,"STRONG",{});var kdt=s(Ife);CIo=r(kdt,"fnet"),kdt.forEach(t),wIo=r(pxe," \u2014 "),nO=n(pxe,"A",{href:!0});var Sdt=s(nO);AIo=r(Sdt,"FNetForNextSentencePrediction"),Sdt.forEach(t),yIo=r(pxe," (FNet model)"),pxe.forEach(t),LIo=i(Hs),lF=n(Hs,"LI",{});var _xe=s(lF);qfe=n(_xe,"STRONG",{});var Rdt=s(qfe);xIo=r(Rdt,"megatron-bert"),Rdt.forEach(t),$Io=r(_xe," \u2014 "),sO=n(_xe,"A",{href:!0});var Pdt=s(sO);kIo=r(Pdt,"MegatronBertForNextSentencePrediction"),Pdt.forEach(t),SIo=r(_xe," (MegatronBert model)"),_xe.forEach(t),RIo=i(Hs),iF=n(Hs,"LI",{});var bxe=s(iF);Nfe=n(bxe,"STRONG",{});var Bdt=s(Nfe);PIo=r(Bdt,"mobilebert"),Bdt.forEach(t),BIo=r(bxe," \u2014 "),lO=n(bxe,"A",{href:!0});var Idt=s(lO);IIo=r(Idt,"MobileBertForNextSentencePrediction"),Idt.forEach(t),qIo=r(bxe," (MobileBERT model)"),bxe.forEach(t),NIo=i(Hs),dF=n(Hs,"LI",{});var vxe=s(dF);jfe=n(vxe,"STRONG",{});var qdt=s(jfe);jIo=r(qdt,"qdqbert"),qdt.forEach(t),DIo=r(vxe," \u2014 "),iO=n(vxe,"A",{href:!0});var Ndt=s(iO);GIo=r(Ndt,"QDQBertForNextSentencePrediction"),Ndt.forEach(t),OIo=r(vxe," (QDQBert model)"),vxe.forEach(t),Hs.forEach(t),VIo=i(ia),cF=n(ia,"P",{});var Fxe=s(cF);XIo=r(Fxe,"The model is set in evaluation mode by default using "),Dfe=n(Fxe,"CODE",{});var jdt=s(Dfe);zIo=r(jdt,"model.eval()"),jdt.forEach(t),WIo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(Fxe,"CODE",{});var Ddt=s(Gfe);QIo=r(Ddt,"model.train()"),Ddt.forEach(t),Fxe.forEach(t),HIo=i(ia),T(mF.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),fqe=i(m),Hi=n(m,"H2",{class:!0});var pje=s(Hi);fF=n(pje,"A",{id:!0,class:!0,href:!0});var Gdt=s(fF);Ofe=n(Gdt,"SPAN",{});var Odt=s(Ofe);T(ML.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),UIo=i(pje),Vfe=n(pje,"SPAN",{});var Vdt=s(Vfe);JIo=r(Vdt,"AutoModelForTokenClassification"),Vdt.forEach(t),pje.forEach(t),gqe=i(m),Io=n(m,"DIV",{class:!0});var Us=s(Io);T(EL.$$.fragment,Us),YIo=i(Us),Ui=n(Us,"P",{});var UK=s(Ui);KIo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dO=n(UK,"A",{href:!0});var Xdt=s(dO);ZIo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),eqo=r(UK," class method or the "),cO=n(UK,"A",{href:!0});var zdt=s(cO);oqo=r(zdt,"from_config()"),zdt.forEach(t),rqo=r(UK,` class
method.`),UK.forEach(t),tqo=i(Us),CL=n(Us,"P",{});var _je=s(CL);aqo=r(_je,"This class cannot be instantiated directly using "),Xfe=n(_je,"CODE",{});var Wdt=s(Xfe);nqo=r(Wdt,"__init__()"),Wdt.forEach(t),sqo=r(_je," (throws an error)."),_je.forEach(t),lqo=i(Us),mt=n(Us,"DIV",{class:!0});var $0=s(mt);T(wL.$$.fragment,$0),iqo=i($0),zfe=n($0,"P",{});var Qdt=s(zfe);dqo=r(Qdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qdt.forEach(t),cqo=i($0),Ji=n($0,"P",{});var JK=s(Ji);mqo=r(JK,`Note:
Loading a model from its configuration file does `),Wfe=n(JK,"STRONG",{});var Hdt=s(Wfe);fqo=r(Hdt,"not"),Hdt.forEach(t),gqo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(JK,"A",{href:!0});var Udt=s(mO);hqo=r(Udt,"from_pretrained()"),Udt.forEach(t),uqo=r(JK," to load the model weights."),JK.forEach(t),pqo=i($0),T(gF.$$.fragment,$0),$0.forEach(t),_qo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(AL.$$.fragment,da),bqo=i(da),Qfe=n(da,"P",{});var Jdt=s(Qfe);vqo=r(Jdt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jdt.forEach(t),Fqo=i(da),Ia=n(da,"P",{});var k0=s(Ia);Tqo=r(k0,"The model class to instantiate is selected based on the "),Hfe=n(k0,"CODE",{});var Ydt=s(Hfe);Mqo=r(Ydt,"model_type"),Ydt.forEach(t),Eqo=r(k0,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(k0,"CODE",{});var Kdt=s(Ufe);Cqo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),wqo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(k0,"CODE",{});var Zdt=s(Jfe);Aqo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),yqo=r(k0,":"),k0.forEach(t),Lqo=i(da),U=n(da,"UL",{});var J=s(U);hF=n(J,"LI",{});var Txe=s(hF);Yfe=n(Txe,"STRONG",{});var ect=s(Yfe);xqo=r(ect,"albert"),ect.forEach(t),$qo=r(Txe," \u2014 "),fO=n(Txe,"A",{href:!0});var oct=s(fO);kqo=r(oct,"AlbertForTokenClassification"),oct.forEach(t),Sqo=r(Txe," (ALBERT model)"),Txe.forEach(t),Rqo=i(J),uF=n(J,"LI",{});var Mxe=s(uF);Kfe=n(Mxe,"STRONG",{});var rct=s(Kfe);Pqo=r(rct,"bert"),rct.forEach(t),Bqo=r(Mxe," \u2014 "),gO=n(Mxe,"A",{href:!0});var tct=s(gO);Iqo=r(tct,"BertForTokenClassification"),tct.forEach(t),qqo=r(Mxe," (BERT model)"),Mxe.forEach(t),Nqo=i(J),pF=n(J,"LI",{});var Exe=s(pF);Zfe=n(Exe,"STRONG",{});var act=s(Zfe);jqo=r(act,"big_bird"),act.forEach(t),Dqo=r(Exe," \u2014 "),hO=n(Exe,"A",{href:!0});var nct=s(hO);Gqo=r(nct,"BigBirdForTokenClassification"),nct.forEach(t),Oqo=r(Exe," (BigBird model)"),Exe.forEach(t),Vqo=i(J),_F=n(J,"LI",{});var Cxe=s(_F);ege=n(Cxe,"STRONG",{});var sct=s(ege);Xqo=r(sct,"camembert"),sct.forEach(t),zqo=r(Cxe," \u2014 "),uO=n(Cxe,"A",{href:!0});var lct=s(uO);Wqo=r(lct,"CamembertForTokenClassification"),lct.forEach(t),Qqo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),Hqo=i(J),bF=n(J,"LI",{});var wxe=s(bF);oge=n(wxe,"STRONG",{});var ict=s(oge);Uqo=r(ict,"canine"),ict.forEach(t),Jqo=r(wxe," \u2014 "),pO=n(wxe,"A",{href:!0});var dct=s(pO);Yqo=r(dct,"CanineForTokenClassification"),dct.forEach(t),Kqo=r(wxe," (Canine model)"),wxe.forEach(t),Zqo=i(J),vF=n(J,"LI",{});var Axe=s(vF);rge=n(Axe,"STRONG",{});var cct=s(rge);eNo=r(cct,"convbert"),cct.forEach(t),oNo=r(Axe," \u2014 "),_O=n(Axe,"A",{href:!0});var mct=s(_O);rNo=r(mct,"ConvBertForTokenClassification"),mct.forEach(t),tNo=r(Axe," (ConvBERT model)"),Axe.forEach(t),aNo=i(J),FF=n(J,"LI",{});var yxe=s(FF);tge=n(yxe,"STRONG",{});var fct=s(tge);nNo=r(fct,"data2vec-text"),fct.forEach(t),sNo=r(yxe," \u2014 "),bO=n(yxe,"A",{href:!0});var gct=s(bO);lNo=r(gct,"Data2VecTextForTokenClassification"),gct.forEach(t),iNo=r(yxe," (Data2VecText model)"),yxe.forEach(t),dNo=i(J),TF=n(J,"LI",{});var Lxe=s(TF);age=n(Lxe,"STRONG",{});var hct=s(age);cNo=r(hct,"deberta"),hct.forEach(t),mNo=r(Lxe," \u2014 "),vO=n(Lxe,"A",{href:!0});var uct=s(vO);fNo=r(uct,"DebertaForTokenClassification"),uct.forEach(t),gNo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),hNo=i(J),MF=n(J,"LI",{});var xxe=s(MF);nge=n(xxe,"STRONG",{});var pct=s(nge);uNo=r(pct,"deberta-v2"),pct.forEach(t),pNo=r(xxe," \u2014 "),FO=n(xxe,"A",{href:!0});var _ct=s(FO);_No=r(_ct,"DebertaV2ForTokenClassification"),_ct.forEach(t),bNo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),vNo=i(J),EF=n(J,"LI",{});var $xe=s(EF);sge=n($xe,"STRONG",{});var bct=s(sge);FNo=r(bct,"distilbert"),bct.forEach(t),TNo=r($xe," \u2014 "),TO=n($xe,"A",{href:!0});var vct=s(TO);MNo=r(vct,"DistilBertForTokenClassification"),vct.forEach(t),ENo=r($xe," (DistilBERT model)"),$xe.forEach(t),CNo=i(J),CF=n(J,"LI",{});var kxe=s(CF);lge=n(kxe,"STRONG",{});var Fct=s(lge);wNo=r(Fct,"electra"),Fct.forEach(t),ANo=r(kxe," \u2014 "),MO=n(kxe,"A",{href:!0});var Tct=s(MO);yNo=r(Tct,"ElectraForTokenClassification"),Tct.forEach(t),LNo=r(kxe," (ELECTRA model)"),kxe.forEach(t),xNo=i(J),wF=n(J,"LI",{});var Sxe=s(wF);ige=n(Sxe,"STRONG",{});var Mct=s(ige);$No=r(Mct,"flaubert"),Mct.forEach(t),kNo=r(Sxe," \u2014 "),EO=n(Sxe,"A",{href:!0});var Ect=s(EO);SNo=r(Ect,"FlaubertForTokenClassification"),Ect.forEach(t),RNo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),PNo=i(J),AF=n(J,"LI",{});var Rxe=s(AF);dge=n(Rxe,"STRONG",{});var Cct=s(dge);BNo=r(Cct,"fnet"),Cct.forEach(t),INo=r(Rxe," \u2014 "),CO=n(Rxe,"A",{href:!0});var wct=s(CO);qNo=r(wct,"FNetForTokenClassification"),wct.forEach(t),NNo=r(Rxe," (FNet model)"),Rxe.forEach(t),jNo=i(J),yF=n(J,"LI",{});var Pxe=s(yF);cge=n(Pxe,"STRONG",{});var Act=s(cge);DNo=r(Act,"funnel"),Act.forEach(t),GNo=r(Pxe," \u2014 "),wO=n(Pxe,"A",{href:!0});var yct=s(wO);ONo=r(yct,"FunnelForTokenClassification"),yct.forEach(t),VNo=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),XNo=i(J),LF=n(J,"LI",{});var Bxe=s(LF);mge=n(Bxe,"STRONG",{});var Lct=s(mge);zNo=r(Lct,"gpt2"),Lct.forEach(t),WNo=r(Bxe," \u2014 "),AO=n(Bxe,"A",{href:!0});var xct=s(AO);QNo=r(xct,"GPT2ForTokenClassification"),xct.forEach(t),HNo=r(Bxe," (OpenAI GPT-2 model)"),Bxe.forEach(t),UNo=i(J),xF=n(J,"LI",{});var Ixe=s(xF);fge=n(Ixe,"STRONG",{});var $ct=s(fge);JNo=r($ct,"ibert"),$ct.forEach(t),YNo=r(Ixe," \u2014 "),yO=n(Ixe,"A",{href:!0});var kct=s(yO);KNo=r(kct,"IBertForTokenClassification"),kct.forEach(t),ZNo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),ejo=i(J),$F=n(J,"LI",{});var qxe=s($F);gge=n(qxe,"STRONG",{});var Sct=s(gge);ojo=r(Sct,"layoutlm"),Sct.forEach(t),rjo=r(qxe," \u2014 "),LO=n(qxe,"A",{href:!0});var Rct=s(LO);tjo=r(Rct,"LayoutLMForTokenClassification"),Rct.forEach(t),ajo=r(qxe," (LayoutLM model)"),qxe.forEach(t),njo=i(J),kF=n(J,"LI",{});var Nxe=s(kF);hge=n(Nxe,"STRONG",{});var Pct=s(hge);sjo=r(Pct,"layoutlmv2"),Pct.forEach(t),ljo=r(Nxe," \u2014 "),xO=n(Nxe,"A",{href:!0});var Bct=s(xO);ijo=r(Bct,"LayoutLMv2ForTokenClassification"),Bct.forEach(t),djo=r(Nxe," (LayoutLMv2 model)"),Nxe.forEach(t),cjo=i(J),SF=n(J,"LI",{});var jxe=s(SF);uge=n(jxe,"STRONG",{});var Ict=s(uge);mjo=r(Ict,"longformer"),Ict.forEach(t),fjo=r(jxe," \u2014 "),$O=n(jxe,"A",{href:!0});var qct=s($O);gjo=r(qct,"LongformerForTokenClassification"),qct.forEach(t),hjo=r(jxe," (Longformer model)"),jxe.forEach(t),ujo=i(J),RF=n(J,"LI",{});var Dxe=s(RF);pge=n(Dxe,"STRONG",{});var Nct=s(pge);pjo=r(Nct,"megatron-bert"),Nct.forEach(t),_jo=r(Dxe," \u2014 "),kO=n(Dxe,"A",{href:!0});var jct=s(kO);bjo=r(jct,"MegatronBertForTokenClassification"),jct.forEach(t),vjo=r(Dxe," (MegatronBert model)"),Dxe.forEach(t),Fjo=i(J),PF=n(J,"LI",{});var Gxe=s(PF);_ge=n(Gxe,"STRONG",{});var Dct=s(_ge);Tjo=r(Dct,"mobilebert"),Dct.forEach(t),Mjo=r(Gxe," \u2014 "),SO=n(Gxe,"A",{href:!0});var Gct=s(SO);Ejo=r(Gct,"MobileBertForTokenClassification"),Gct.forEach(t),Cjo=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),wjo=i(J),BF=n(J,"LI",{});var Oxe=s(BF);bge=n(Oxe,"STRONG",{});var Oct=s(bge);Ajo=r(Oct,"mpnet"),Oct.forEach(t),yjo=r(Oxe," \u2014 "),RO=n(Oxe,"A",{href:!0});var Vct=s(RO);Ljo=r(Vct,"MPNetForTokenClassification"),Vct.forEach(t),xjo=r(Oxe," (MPNet model)"),Oxe.forEach(t),$jo=i(J),IF=n(J,"LI",{});var Vxe=s(IF);vge=n(Vxe,"STRONG",{});var Xct=s(vge);kjo=r(Xct,"nystromformer"),Xct.forEach(t),Sjo=r(Vxe," \u2014 "),PO=n(Vxe,"A",{href:!0});var zct=s(PO);Rjo=r(zct,"NystromformerForTokenClassification"),zct.forEach(t),Pjo=r(Vxe," (Nystromformer model)"),Vxe.forEach(t),Bjo=i(J),qF=n(J,"LI",{});var Xxe=s(qF);Fge=n(Xxe,"STRONG",{});var Wct=s(Fge);Ijo=r(Wct,"qdqbert"),Wct.forEach(t),qjo=r(Xxe," \u2014 "),BO=n(Xxe,"A",{href:!0});var Qct=s(BO);Njo=r(Qct,"QDQBertForTokenClassification"),Qct.forEach(t),jjo=r(Xxe," (QDQBert model)"),Xxe.forEach(t),Djo=i(J),NF=n(J,"LI",{});var zxe=s(NF);Tge=n(zxe,"STRONG",{});var Hct=s(Tge);Gjo=r(Hct,"rembert"),Hct.forEach(t),Ojo=r(zxe," \u2014 "),IO=n(zxe,"A",{href:!0});var Uct=s(IO);Vjo=r(Uct,"RemBertForTokenClassification"),Uct.forEach(t),Xjo=r(zxe," (RemBERT model)"),zxe.forEach(t),zjo=i(J),jF=n(J,"LI",{});var Wxe=s(jF);Mge=n(Wxe,"STRONG",{});var Jct=s(Mge);Wjo=r(Jct,"roberta"),Jct.forEach(t),Qjo=r(Wxe," \u2014 "),qO=n(Wxe,"A",{href:!0});var Yct=s(qO);Hjo=r(Yct,"RobertaForTokenClassification"),Yct.forEach(t),Ujo=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),Jjo=i(J),DF=n(J,"LI",{});var Qxe=s(DF);Ege=n(Qxe,"STRONG",{});var Kct=s(Ege);Yjo=r(Kct,"roformer"),Kct.forEach(t),Kjo=r(Qxe," \u2014 "),NO=n(Qxe,"A",{href:!0});var Zct=s(NO);Zjo=r(Zct,"RoFormerForTokenClassification"),Zct.forEach(t),eDo=r(Qxe," (RoFormer model)"),Qxe.forEach(t),oDo=i(J),GF=n(J,"LI",{});var Hxe=s(GF);Cge=n(Hxe,"STRONG",{});var emt=s(Cge);rDo=r(emt,"squeezebert"),emt.forEach(t),tDo=r(Hxe," \u2014 "),jO=n(Hxe,"A",{href:!0});var omt=s(jO);aDo=r(omt,"SqueezeBertForTokenClassification"),omt.forEach(t),nDo=r(Hxe," (SqueezeBERT model)"),Hxe.forEach(t),sDo=i(J),OF=n(J,"LI",{});var Uxe=s(OF);wge=n(Uxe,"STRONG",{});var rmt=s(wge);lDo=r(rmt,"xlm"),rmt.forEach(t),iDo=r(Uxe," \u2014 "),DO=n(Uxe,"A",{href:!0});var tmt=s(DO);dDo=r(tmt,"XLMForTokenClassification"),tmt.forEach(t),cDo=r(Uxe," (XLM model)"),Uxe.forEach(t),mDo=i(J),VF=n(J,"LI",{});var Jxe=s(VF);Age=n(Jxe,"STRONG",{});var amt=s(Age);fDo=r(amt,"xlm-roberta"),amt.forEach(t),gDo=r(Jxe," \u2014 "),GO=n(Jxe,"A",{href:!0});var nmt=s(GO);hDo=r(nmt,"XLMRobertaForTokenClassification"),nmt.forEach(t),uDo=r(Jxe," (XLM-RoBERTa model)"),Jxe.forEach(t),pDo=i(J),XF=n(J,"LI",{});var Yxe=s(XF);yge=n(Yxe,"STRONG",{});var smt=s(yge);_Do=r(smt,"xlm-roberta-xl"),smt.forEach(t),bDo=r(Yxe," \u2014 "),OO=n(Yxe,"A",{href:!0});var lmt=s(OO);vDo=r(lmt,"XLMRobertaXLForTokenClassification"),lmt.forEach(t),FDo=r(Yxe," (XLM-RoBERTa-XL model)"),Yxe.forEach(t),TDo=i(J),zF=n(J,"LI",{});var Kxe=s(zF);Lge=n(Kxe,"STRONG",{});var imt=s(Lge);MDo=r(imt,"xlnet"),imt.forEach(t),EDo=r(Kxe," \u2014 "),VO=n(Kxe,"A",{href:!0});var dmt=s(VO);CDo=r(dmt,"XLNetForTokenClassification"),dmt.forEach(t),wDo=r(Kxe," (XLNet model)"),Kxe.forEach(t),ADo=i(J),WF=n(J,"LI",{});var Zxe=s(WF);xge=n(Zxe,"STRONG",{});var cmt=s(xge);yDo=r(cmt,"yoso"),cmt.forEach(t),LDo=r(Zxe," \u2014 "),XO=n(Zxe,"A",{href:!0});var mmt=s(XO);xDo=r(mmt,"YosoForTokenClassification"),mmt.forEach(t),$Do=r(Zxe," (YOSO model)"),Zxe.forEach(t),J.forEach(t),kDo=i(da),QF=n(da,"P",{});var e9e=s(QF);SDo=r(e9e,"The model is set in evaluation mode by default using "),$ge=n(e9e,"CODE",{});var fmt=s($ge);RDo=r(fmt,"model.eval()"),fmt.forEach(t),PDo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(e9e,"CODE",{});var gmt=s(kge);BDo=r(gmt,"model.train()"),gmt.forEach(t),e9e.forEach(t),IDo=i(da),T(HF.$$.fragment,da),da.forEach(t),Us.forEach(t),hqe=i(m),Yi=n(m,"H2",{class:!0});var bje=s(Yi);UF=n(bje,"A",{id:!0,class:!0,href:!0});var hmt=s(UF);Sge=n(hmt,"SPAN",{});var umt=s(Sge);T(yL.$$.fragment,umt),umt.forEach(t),hmt.forEach(t),qDo=i(bje),Rge=n(bje,"SPAN",{});var pmt=s(Rge);NDo=r(pmt,"AutoModelForQuestionAnswering"),pmt.forEach(t),bje.forEach(t),uqe=i(m),qo=n(m,"DIV",{class:!0});var Js=s(qo);T(LL.$$.fragment,Js),jDo=i(Js),Ki=n(Js,"P",{});var YK=s(Ki);DDo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zO=n(YK,"A",{href:!0});var _mt=s(zO);GDo=r(_mt,"from_pretrained()"),_mt.forEach(t),ODo=r(YK," class method or the "),WO=n(YK,"A",{href:!0});var bmt=s(WO);VDo=r(bmt,"from_config()"),bmt.forEach(t),XDo=r(YK,` class
method.`),YK.forEach(t),zDo=i(Js),xL=n(Js,"P",{});var vje=s(xL);WDo=r(vje,"This class cannot be instantiated directly using "),Pge=n(vje,"CODE",{});var vmt=s(Pge);QDo=r(vmt,"__init__()"),vmt.forEach(t),HDo=r(vje," (throws an error)."),vje.forEach(t),UDo=i(Js),ft=n(Js,"DIV",{class:!0});var S0=s(ft);T($L.$$.fragment,S0),JDo=i(S0),Bge=n(S0,"P",{});var Fmt=s(Bge);YDo=r(Fmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fmt.forEach(t),KDo=i(S0),Zi=n(S0,"P",{});var KK=s(Zi);ZDo=r(KK,`Note:
Loading a model from its configuration file does `),Ige=n(KK,"STRONG",{});var Tmt=s(Ige);eGo=r(Tmt,"not"),Tmt.forEach(t),oGo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(KK,"A",{href:!0});var Mmt=s(QO);rGo=r(Mmt,"from_pretrained()"),Mmt.forEach(t),tGo=r(KK," to load the model weights."),KK.forEach(t),aGo=i(S0),T(JF.$$.fragment,S0),S0.forEach(t),nGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(kL.$$.fragment,ca),sGo=i(ca),qge=n(ca,"P",{});var Emt=s(qge);lGo=r(Emt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Emt.forEach(t),iGo=i(ca),qa=n(ca,"P",{});var R0=s(qa);dGo=r(R0,"The model class to instantiate is selected based on the "),Nge=n(R0,"CODE",{});var Cmt=s(Nge);cGo=r(Cmt,"model_type"),Cmt.forEach(t),mGo=r(R0,` property of the config object (either
passed as an argument or loaded from `),jge=n(R0,"CODE",{});var wmt=s(jge);fGo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),gGo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(R0,"CODE",{});var Amt=s(Dge);hGo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),uGo=r(R0,":"),R0.forEach(t),pGo=i(ca),V=n(ca,"UL",{});var X=s(V);YF=n(X,"LI",{});var o9e=s(YF);Gge=n(o9e,"STRONG",{});var ymt=s(Gge);_Go=r(ymt,"albert"),ymt.forEach(t),bGo=r(o9e," \u2014 "),HO=n(o9e,"A",{href:!0});var Lmt=s(HO);vGo=r(Lmt,"AlbertForQuestionAnswering"),Lmt.forEach(t),FGo=r(o9e," (ALBERT model)"),o9e.forEach(t),TGo=i(X),KF=n(X,"LI",{});var r9e=s(KF);Oge=n(r9e,"STRONG",{});var xmt=s(Oge);MGo=r(xmt,"bart"),xmt.forEach(t),EGo=r(r9e," \u2014 "),UO=n(r9e,"A",{href:!0});var $mt=s(UO);CGo=r($mt,"BartForQuestionAnswering"),$mt.forEach(t),wGo=r(r9e," (BART model)"),r9e.forEach(t),AGo=i(X),ZF=n(X,"LI",{});var t9e=s(ZF);Vge=n(t9e,"STRONG",{});var kmt=s(Vge);yGo=r(kmt,"bert"),kmt.forEach(t),LGo=r(t9e," \u2014 "),JO=n(t9e,"A",{href:!0});var Smt=s(JO);xGo=r(Smt,"BertForQuestionAnswering"),Smt.forEach(t),$Go=r(t9e," (BERT model)"),t9e.forEach(t),kGo=i(X),e1=n(X,"LI",{});var a9e=s(e1);Xge=n(a9e,"STRONG",{});var Rmt=s(Xge);SGo=r(Rmt,"big_bird"),Rmt.forEach(t),RGo=r(a9e," \u2014 "),YO=n(a9e,"A",{href:!0});var Pmt=s(YO);PGo=r(Pmt,"BigBirdForQuestionAnswering"),Pmt.forEach(t),BGo=r(a9e," (BigBird model)"),a9e.forEach(t),IGo=i(X),o1=n(X,"LI",{});var n9e=s(o1);zge=n(n9e,"STRONG",{});var Bmt=s(zge);qGo=r(Bmt,"bigbird_pegasus"),Bmt.forEach(t),NGo=r(n9e," \u2014 "),KO=n(n9e,"A",{href:!0});var Imt=s(KO);jGo=r(Imt,"BigBirdPegasusForQuestionAnswering"),Imt.forEach(t),DGo=r(n9e," (BigBirdPegasus model)"),n9e.forEach(t),GGo=i(X),r1=n(X,"LI",{});var s9e=s(r1);Wge=n(s9e,"STRONG",{});var qmt=s(Wge);OGo=r(qmt,"camembert"),qmt.forEach(t),VGo=r(s9e," \u2014 "),ZO=n(s9e,"A",{href:!0});var Nmt=s(ZO);XGo=r(Nmt,"CamembertForQuestionAnswering"),Nmt.forEach(t),zGo=r(s9e," (CamemBERT model)"),s9e.forEach(t),WGo=i(X),t1=n(X,"LI",{});var l9e=s(t1);Qge=n(l9e,"STRONG",{});var jmt=s(Qge);QGo=r(jmt,"canine"),jmt.forEach(t),HGo=r(l9e," \u2014 "),eV=n(l9e,"A",{href:!0});var Dmt=s(eV);UGo=r(Dmt,"CanineForQuestionAnswering"),Dmt.forEach(t),JGo=r(l9e," (Canine model)"),l9e.forEach(t),YGo=i(X),a1=n(X,"LI",{});var i9e=s(a1);Hge=n(i9e,"STRONG",{});var Gmt=s(Hge);KGo=r(Gmt,"convbert"),Gmt.forEach(t),ZGo=r(i9e," \u2014 "),oV=n(i9e,"A",{href:!0});var Omt=s(oV);eOo=r(Omt,"ConvBertForQuestionAnswering"),Omt.forEach(t),oOo=r(i9e," (ConvBERT model)"),i9e.forEach(t),rOo=i(X),n1=n(X,"LI",{});var d9e=s(n1);Uge=n(d9e,"STRONG",{});var Vmt=s(Uge);tOo=r(Vmt,"data2vec-text"),Vmt.forEach(t),aOo=r(d9e," \u2014 "),rV=n(d9e,"A",{href:!0});var Xmt=s(rV);nOo=r(Xmt,"Data2VecTextForQuestionAnswering"),Xmt.forEach(t),sOo=r(d9e," (Data2VecText model)"),d9e.forEach(t),lOo=i(X),s1=n(X,"LI",{});var c9e=s(s1);Jge=n(c9e,"STRONG",{});var zmt=s(Jge);iOo=r(zmt,"deberta"),zmt.forEach(t),dOo=r(c9e," \u2014 "),tV=n(c9e,"A",{href:!0});var Wmt=s(tV);cOo=r(Wmt,"DebertaForQuestionAnswering"),Wmt.forEach(t),mOo=r(c9e," (DeBERTa model)"),c9e.forEach(t),fOo=i(X),l1=n(X,"LI",{});var m9e=s(l1);Yge=n(m9e,"STRONG",{});var Qmt=s(Yge);gOo=r(Qmt,"deberta-v2"),Qmt.forEach(t),hOo=r(m9e," \u2014 "),aV=n(m9e,"A",{href:!0});var Hmt=s(aV);uOo=r(Hmt,"DebertaV2ForQuestionAnswering"),Hmt.forEach(t),pOo=r(m9e," (DeBERTa-v2 model)"),m9e.forEach(t),_Oo=i(X),i1=n(X,"LI",{});var f9e=s(i1);Kge=n(f9e,"STRONG",{});var Umt=s(Kge);bOo=r(Umt,"distilbert"),Umt.forEach(t),vOo=r(f9e," \u2014 "),nV=n(f9e,"A",{href:!0});var Jmt=s(nV);FOo=r(Jmt,"DistilBertForQuestionAnswering"),Jmt.forEach(t),TOo=r(f9e," (DistilBERT model)"),f9e.forEach(t),MOo=i(X),d1=n(X,"LI",{});var g9e=s(d1);Zge=n(g9e,"STRONG",{});var Ymt=s(Zge);EOo=r(Ymt,"electra"),Ymt.forEach(t),COo=r(g9e," \u2014 "),sV=n(g9e,"A",{href:!0});var Kmt=s(sV);wOo=r(Kmt,"ElectraForQuestionAnswering"),Kmt.forEach(t),AOo=r(g9e," (ELECTRA model)"),g9e.forEach(t),yOo=i(X),c1=n(X,"LI",{});var h9e=s(c1);ehe=n(h9e,"STRONG",{});var Zmt=s(ehe);LOo=r(Zmt,"flaubert"),Zmt.forEach(t),xOo=r(h9e," \u2014 "),lV=n(h9e,"A",{href:!0});var eft=s(lV);$Oo=r(eft,"FlaubertForQuestionAnsweringSimple"),eft.forEach(t),kOo=r(h9e," (FlauBERT model)"),h9e.forEach(t),SOo=i(X),m1=n(X,"LI",{});var u9e=s(m1);ohe=n(u9e,"STRONG",{});var oft=s(ohe);ROo=r(oft,"fnet"),oft.forEach(t),POo=r(u9e," \u2014 "),iV=n(u9e,"A",{href:!0});var rft=s(iV);BOo=r(rft,"FNetForQuestionAnswering"),rft.forEach(t),IOo=r(u9e," (FNet model)"),u9e.forEach(t),qOo=i(X),f1=n(X,"LI",{});var p9e=s(f1);rhe=n(p9e,"STRONG",{});var tft=s(rhe);NOo=r(tft,"funnel"),tft.forEach(t),jOo=r(p9e," \u2014 "),dV=n(p9e,"A",{href:!0});var aft=s(dV);DOo=r(aft,"FunnelForQuestionAnswering"),aft.forEach(t),GOo=r(p9e," (Funnel Transformer model)"),p9e.forEach(t),OOo=i(X),g1=n(X,"LI",{});var _9e=s(g1);the=n(_9e,"STRONG",{});var nft=s(the);VOo=r(nft,"gptj"),nft.forEach(t),XOo=r(_9e," \u2014 "),cV=n(_9e,"A",{href:!0});var sft=s(cV);zOo=r(sft,"GPTJForQuestionAnswering"),sft.forEach(t),WOo=r(_9e," (GPT-J model)"),_9e.forEach(t),QOo=i(X),h1=n(X,"LI",{});var b9e=s(h1);ahe=n(b9e,"STRONG",{});var lft=s(ahe);HOo=r(lft,"ibert"),lft.forEach(t),UOo=r(b9e," \u2014 "),mV=n(b9e,"A",{href:!0});var ift=s(mV);JOo=r(ift,"IBertForQuestionAnswering"),ift.forEach(t),YOo=r(b9e," (I-BERT model)"),b9e.forEach(t),KOo=i(X),u1=n(X,"LI",{});var v9e=s(u1);nhe=n(v9e,"STRONG",{});var dft=s(nhe);ZOo=r(dft,"layoutlmv2"),dft.forEach(t),eVo=r(v9e," \u2014 "),fV=n(v9e,"A",{href:!0});var cft=s(fV);oVo=r(cft,"LayoutLMv2ForQuestionAnswering"),cft.forEach(t),rVo=r(v9e," (LayoutLMv2 model)"),v9e.forEach(t),tVo=i(X),p1=n(X,"LI",{});var F9e=s(p1);she=n(F9e,"STRONG",{});var mft=s(she);aVo=r(mft,"led"),mft.forEach(t),nVo=r(F9e," \u2014 "),gV=n(F9e,"A",{href:!0});var fft=s(gV);sVo=r(fft,"LEDForQuestionAnswering"),fft.forEach(t),lVo=r(F9e," (LED model)"),F9e.forEach(t),iVo=i(X),_1=n(X,"LI",{});var T9e=s(_1);lhe=n(T9e,"STRONG",{});var gft=s(lhe);dVo=r(gft,"longformer"),gft.forEach(t),cVo=r(T9e," \u2014 "),hV=n(T9e,"A",{href:!0});var hft=s(hV);mVo=r(hft,"LongformerForQuestionAnswering"),hft.forEach(t),fVo=r(T9e," (Longformer model)"),T9e.forEach(t),gVo=i(X),b1=n(X,"LI",{});var M9e=s(b1);ihe=n(M9e,"STRONG",{});var uft=s(ihe);hVo=r(uft,"lxmert"),uft.forEach(t),uVo=r(M9e," \u2014 "),uV=n(M9e,"A",{href:!0});var pft=s(uV);pVo=r(pft,"LxmertForQuestionAnswering"),pft.forEach(t),_Vo=r(M9e," (LXMERT model)"),M9e.forEach(t),bVo=i(X),v1=n(X,"LI",{});var E9e=s(v1);dhe=n(E9e,"STRONG",{});var _ft=s(dhe);vVo=r(_ft,"mbart"),_ft.forEach(t),FVo=r(E9e," \u2014 "),pV=n(E9e,"A",{href:!0});var bft=s(pV);TVo=r(bft,"MBartForQuestionAnswering"),bft.forEach(t),MVo=r(E9e," (mBART model)"),E9e.forEach(t),EVo=i(X),F1=n(X,"LI",{});var C9e=s(F1);che=n(C9e,"STRONG",{});var vft=s(che);CVo=r(vft,"megatron-bert"),vft.forEach(t),wVo=r(C9e," \u2014 "),_V=n(C9e,"A",{href:!0});var Fft=s(_V);AVo=r(Fft,"MegatronBertForQuestionAnswering"),Fft.forEach(t),yVo=r(C9e," (MegatronBert model)"),C9e.forEach(t),LVo=i(X),T1=n(X,"LI",{});var w9e=s(T1);mhe=n(w9e,"STRONG",{});var Tft=s(mhe);xVo=r(Tft,"mobilebert"),Tft.forEach(t),$Vo=r(w9e," \u2014 "),bV=n(w9e,"A",{href:!0});var Mft=s(bV);kVo=r(Mft,"MobileBertForQuestionAnswering"),Mft.forEach(t),SVo=r(w9e," (MobileBERT model)"),w9e.forEach(t),RVo=i(X),M1=n(X,"LI",{});var A9e=s(M1);fhe=n(A9e,"STRONG",{});var Eft=s(fhe);PVo=r(Eft,"mpnet"),Eft.forEach(t),BVo=r(A9e," \u2014 "),vV=n(A9e,"A",{href:!0});var Cft=s(vV);IVo=r(Cft,"MPNetForQuestionAnswering"),Cft.forEach(t),qVo=r(A9e," (MPNet model)"),A9e.forEach(t),NVo=i(X),E1=n(X,"LI",{});var y9e=s(E1);ghe=n(y9e,"STRONG",{});var wft=s(ghe);jVo=r(wft,"nystromformer"),wft.forEach(t),DVo=r(y9e," \u2014 "),FV=n(y9e,"A",{href:!0});var Aft=s(FV);GVo=r(Aft,"NystromformerForQuestionAnswering"),Aft.forEach(t),OVo=r(y9e," (Nystromformer model)"),y9e.forEach(t),VVo=i(X),C1=n(X,"LI",{});var L9e=s(C1);hhe=n(L9e,"STRONG",{});var yft=s(hhe);XVo=r(yft,"qdqbert"),yft.forEach(t),zVo=r(L9e," \u2014 "),TV=n(L9e,"A",{href:!0});var Lft=s(TV);WVo=r(Lft,"QDQBertForQuestionAnswering"),Lft.forEach(t),QVo=r(L9e," (QDQBert model)"),L9e.forEach(t),HVo=i(X),w1=n(X,"LI",{});var x9e=s(w1);uhe=n(x9e,"STRONG",{});var xft=s(uhe);UVo=r(xft,"reformer"),xft.forEach(t),JVo=r(x9e," \u2014 "),MV=n(x9e,"A",{href:!0});var $ft=s(MV);YVo=r($ft,"ReformerForQuestionAnswering"),$ft.forEach(t),KVo=r(x9e," (Reformer model)"),x9e.forEach(t),ZVo=i(X),A1=n(X,"LI",{});var $9e=s(A1);phe=n($9e,"STRONG",{});var kft=s(phe);eXo=r(kft,"rembert"),kft.forEach(t),oXo=r($9e," \u2014 "),EV=n($9e,"A",{href:!0});var Sft=s(EV);rXo=r(Sft,"RemBertForQuestionAnswering"),Sft.forEach(t),tXo=r($9e," (RemBERT model)"),$9e.forEach(t),aXo=i(X),y1=n(X,"LI",{});var k9e=s(y1);_he=n(k9e,"STRONG",{});var Rft=s(_he);nXo=r(Rft,"roberta"),Rft.forEach(t),sXo=r(k9e," \u2014 "),CV=n(k9e,"A",{href:!0});var Pft=s(CV);lXo=r(Pft,"RobertaForQuestionAnswering"),Pft.forEach(t),iXo=r(k9e," (RoBERTa model)"),k9e.forEach(t),dXo=i(X),L1=n(X,"LI",{});var S9e=s(L1);bhe=n(S9e,"STRONG",{});var Bft=s(bhe);cXo=r(Bft,"roformer"),Bft.forEach(t),mXo=r(S9e," \u2014 "),wV=n(S9e,"A",{href:!0});var Ift=s(wV);fXo=r(Ift,"RoFormerForQuestionAnswering"),Ift.forEach(t),gXo=r(S9e," (RoFormer model)"),S9e.forEach(t),hXo=i(X),x1=n(X,"LI",{});var R9e=s(x1);vhe=n(R9e,"STRONG",{});var qft=s(vhe);uXo=r(qft,"splinter"),qft.forEach(t),pXo=r(R9e," \u2014 "),AV=n(R9e,"A",{href:!0});var Nft=s(AV);_Xo=r(Nft,"SplinterForQuestionAnswering"),Nft.forEach(t),bXo=r(R9e," (Splinter model)"),R9e.forEach(t),vXo=i(X),$1=n(X,"LI",{});var P9e=s($1);Fhe=n(P9e,"STRONG",{});var jft=s(Fhe);FXo=r(jft,"squeezebert"),jft.forEach(t),TXo=r(P9e," \u2014 "),yV=n(P9e,"A",{href:!0});var Dft=s(yV);MXo=r(Dft,"SqueezeBertForQuestionAnswering"),Dft.forEach(t),EXo=r(P9e," (SqueezeBERT model)"),P9e.forEach(t),CXo=i(X),k1=n(X,"LI",{});var B9e=s(k1);The=n(B9e,"STRONG",{});var Gft=s(The);wXo=r(Gft,"xlm"),Gft.forEach(t),AXo=r(B9e," \u2014 "),LV=n(B9e,"A",{href:!0});var Oft=s(LV);yXo=r(Oft,"XLMForQuestionAnsweringSimple"),Oft.forEach(t),LXo=r(B9e," (XLM model)"),B9e.forEach(t),xXo=i(X),S1=n(X,"LI",{});var I9e=s(S1);Mhe=n(I9e,"STRONG",{});var Vft=s(Mhe);$Xo=r(Vft,"xlm-roberta"),Vft.forEach(t),kXo=r(I9e," \u2014 "),xV=n(I9e,"A",{href:!0});var Xft=s(xV);SXo=r(Xft,"XLMRobertaForQuestionAnswering"),Xft.forEach(t),RXo=r(I9e," (XLM-RoBERTa model)"),I9e.forEach(t),PXo=i(X),R1=n(X,"LI",{});var q9e=s(R1);Ehe=n(q9e,"STRONG",{});var zft=s(Ehe);BXo=r(zft,"xlm-roberta-xl"),zft.forEach(t),IXo=r(q9e," \u2014 "),$V=n(q9e,"A",{href:!0});var Wft=s($V);qXo=r(Wft,"XLMRobertaXLForQuestionAnswering"),Wft.forEach(t),NXo=r(q9e," (XLM-RoBERTa-XL model)"),q9e.forEach(t),jXo=i(X),P1=n(X,"LI",{});var N9e=s(P1);Che=n(N9e,"STRONG",{});var Qft=s(Che);DXo=r(Qft,"xlnet"),Qft.forEach(t),GXo=r(N9e," \u2014 "),kV=n(N9e,"A",{href:!0});var Hft=s(kV);OXo=r(Hft,"XLNetForQuestionAnsweringSimple"),Hft.forEach(t),VXo=r(N9e," (XLNet model)"),N9e.forEach(t),XXo=i(X),B1=n(X,"LI",{});var j9e=s(B1);whe=n(j9e,"STRONG",{});var Uft=s(whe);zXo=r(Uft,"yoso"),Uft.forEach(t),WXo=r(j9e," \u2014 "),SV=n(j9e,"A",{href:!0});var Jft=s(SV);QXo=r(Jft,"YosoForQuestionAnswering"),Jft.forEach(t),HXo=r(j9e," (YOSO model)"),j9e.forEach(t),X.forEach(t),UXo=i(ca),I1=n(ca,"P",{});var D9e=s(I1);JXo=r(D9e,"The model is set in evaluation mode by default using "),Ahe=n(D9e,"CODE",{});var Yft=s(Ahe);YXo=r(Yft,"model.eval()"),Yft.forEach(t),KXo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(D9e,"CODE",{});var Kft=s(yhe);ZXo=r(Kft,"model.train()"),Kft.forEach(t),D9e.forEach(t),ezo=i(ca),T(q1.$$.fragment,ca),ca.forEach(t),Js.forEach(t),pqe=i(m),ed=n(m,"H2",{class:!0});var Fje=s(ed);N1=n(Fje,"A",{id:!0,class:!0,href:!0});var Zft=s(N1);Lhe=n(Zft,"SPAN",{});var egt=s(Lhe);T(SL.$$.fragment,egt),egt.forEach(t),Zft.forEach(t),ozo=i(Fje),xhe=n(Fje,"SPAN",{});var ogt=s(xhe);rzo=r(ogt,"AutoModelForTableQuestionAnswering"),ogt.forEach(t),Fje.forEach(t),_qe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(RL.$$.fragment,Ys),tzo=i(Ys),od=n(Ys,"P",{});var ZK=s(od);azo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RV=n(ZK,"A",{href:!0});var rgt=s(RV);nzo=r(rgt,"from_pretrained()"),rgt.forEach(t),szo=r(ZK," class method or the "),PV=n(ZK,"A",{href:!0});var tgt=s(PV);lzo=r(tgt,"from_config()"),tgt.forEach(t),izo=r(ZK,` class
method.`),ZK.forEach(t),dzo=i(Ys),PL=n(Ys,"P",{});var Tje=s(PL);czo=r(Tje,"This class cannot be instantiated directly using "),$he=n(Tje,"CODE",{});var agt=s($he);mzo=r(agt,"__init__()"),agt.forEach(t),fzo=r(Tje," (throws an error)."),Tje.forEach(t),gzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var P0=s(gt);T(BL.$$.fragment,P0),hzo=i(P0),khe=n(P0,"P",{});var ngt=s(khe);uzo=r(ngt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ngt.forEach(t),pzo=i(P0),rd=n(P0,"P",{});var eZ=s(rd);_zo=r(eZ,`Note:
Loading a model from its configuration file does `),She=n(eZ,"STRONG",{});var sgt=s(She);bzo=r(sgt,"not"),sgt.forEach(t),vzo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(eZ,"A",{href:!0});var lgt=s(BV);Fzo=r(lgt,"from_pretrained()"),lgt.forEach(t),Tzo=r(eZ," to load the model weights."),eZ.forEach(t),Mzo=i(P0),T(j1.$$.fragment,P0),P0.forEach(t),Ezo=i(Ys),so=n(Ys,"DIV",{class:!0});var ma=s(so);T(IL.$$.fragment,ma),Czo=i(ma),Rhe=n(ma,"P",{});var igt=s(Rhe);wzo=r(igt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),igt.forEach(t),Azo=i(ma),Na=n(ma,"P",{});var B0=s(Na);yzo=r(B0,"The model class to instantiate is selected based on the "),Phe=n(B0,"CODE",{});var dgt=s(Phe);Lzo=r(dgt,"model_type"),dgt.forEach(t),xzo=r(B0,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(B0,"CODE",{});var cgt=s(Bhe);$zo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),kzo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(B0,"CODE",{});var mgt=s(Ihe);Szo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),Rzo=r(B0,":"),B0.forEach(t),Pzo=i(ma),qhe=n(ma,"UL",{});var fgt=s(qhe);D1=n(fgt,"LI",{});var G9e=s(D1);Nhe=n(G9e,"STRONG",{});var ggt=s(Nhe);Bzo=r(ggt,"tapas"),ggt.forEach(t),Izo=r(G9e," \u2014 "),IV=n(G9e,"A",{href:!0});var hgt=s(IV);qzo=r(hgt,"TapasForQuestionAnswering"),hgt.forEach(t),Nzo=r(G9e," (TAPAS model)"),G9e.forEach(t),fgt.forEach(t),jzo=i(ma),G1=n(ma,"P",{});var O9e=s(G1);Dzo=r(O9e,"The model is set in evaluation mode by default using "),jhe=n(O9e,"CODE",{});var ugt=s(jhe);Gzo=r(ugt,"model.eval()"),ugt.forEach(t),Ozo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(O9e,"CODE",{});var pgt=s(Dhe);Vzo=r(pgt,"model.train()"),pgt.forEach(t),O9e.forEach(t),Xzo=i(ma),T(O1.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),bqe=i(m),td=n(m,"H2",{class:!0});var Mje=s(td);V1=n(Mje,"A",{id:!0,class:!0,href:!0});var _gt=s(V1);Ghe=n(_gt,"SPAN",{});var bgt=s(Ghe);T(qL.$$.fragment,bgt),bgt.forEach(t),_gt.forEach(t),zzo=i(Mje),Ohe=n(Mje,"SPAN",{});var vgt=s(Ohe);Wzo=r(vgt,"AutoModelForImageClassification"),vgt.forEach(t),Mje.forEach(t),vqe=i(m),jo=n(m,"DIV",{class:!0});var Ks=s(jo);T(NL.$$.fragment,Ks),Qzo=i(Ks),ad=n(Ks,"P",{});var oZ=s(ad);Hzo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=n(oZ,"A",{href:!0});var Fgt=s(qV);Uzo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),Jzo=r(oZ," class method or the "),NV=n(oZ,"A",{href:!0});var Tgt=s(NV);Yzo=r(Tgt,"from_config()"),Tgt.forEach(t),Kzo=r(oZ,` class
method.`),oZ.forEach(t),Zzo=i(Ks),jL=n(Ks,"P",{});var Eje=s(jL);eWo=r(Eje,"This class cannot be instantiated directly using "),Vhe=n(Eje,"CODE",{});var Mgt=s(Vhe);oWo=r(Mgt,"__init__()"),Mgt.forEach(t),rWo=r(Eje," (throws an error)."),Eje.forEach(t),tWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var I0=s(ht);T(DL.$$.fragment,I0),aWo=i(I0),Xhe=n(I0,"P",{});var Egt=s(Xhe);nWo=r(Egt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Egt.forEach(t),sWo=i(I0),nd=n(I0,"P",{});var rZ=s(nd);lWo=r(rZ,`Note:
Loading a model from its configuration file does `),zhe=n(rZ,"STRONG",{});var Cgt=s(zhe);iWo=r(Cgt,"not"),Cgt.forEach(t),dWo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(rZ,"A",{href:!0});var wgt=s(jV);cWo=r(wgt,"from_pretrained()"),wgt.forEach(t),mWo=r(rZ," to load the model weights."),rZ.forEach(t),fWo=i(I0),T(X1.$$.fragment,I0),I0.forEach(t),gWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var fa=s(lo);T(GL.$$.fragment,fa),hWo=i(fa),Whe=n(fa,"P",{});var Agt=s(Whe);uWo=r(Agt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Agt.forEach(t),pWo=i(fa),ja=n(fa,"P",{});var q0=s(ja);_Wo=r(q0,"The model class to instantiate is selected based on the "),Qhe=n(q0,"CODE",{});var ygt=s(Qhe);bWo=r(ygt,"model_type"),ygt.forEach(t),vWo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(q0,"CODE",{});var Lgt=s(Hhe);FWo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),TWo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(q0,"CODE",{});var xgt=s(Uhe);MWo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),EWo=r(q0,":"),q0.forEach(t),CWo=i(fa),Fe=n(fa,"UL",{});var Ee=s(Fe);z1=n(Ee,"LI",{});var V9e=s(z1);Jhe=n(V9e,"STRONG",{});var $gt=s(Jhe);wWo=r($gt,"beit"),$gt.forEach(t),AWo=r(V9e," \u2014 "),DV=n(V9e,"A",{href:!0});var kgt=s(DV);yWo=r(kgt,"BeitForImageClassification"),kgt.forEach(t),LWo=r(V9e," (BEiT model)"),V9e.forEach(t),xWo=i(Ee),W1=n(Ee,"LI",{});var X9e=s(W1);Yhe=n(X9e,"STRONG",{});var Sgt=s(Yhe);$Wo=r(Sgt,"convnext"),Sgt.forEach(t),kWo=r(X9e," \u2014 "),GV=n(X9e,"A",{href:!0});var Rgt=s(GV);SWo=r(Rgt,"ConvNextForImageClassification"),Rgt.forEach(t),RWo=r(X9e," (ConvNext model)"),X9e.forEach(t),PWo=i(Ee),Q1=n(Ee,"LI",{});var z9e=s(Q1);Khe=n(z9e,"STRONG",{});var Pgt=s(Khe);BWo=r(Pgt,"data2vec-vision"),Pgt.forEach(t),IWo=r(z9e," \u2014 "),OV=n(z9e,"A",{href:!0});var Bgt=s(OV);qWo=r(Bgt,"Data2VecVisionForImageClassification"),Bgt.forEach(t),NWo=r(z9e," (Data2VecVision model)"),z9e.forEach(t),jWo=i(Ee),Ps=n(Ee,"LI",{});var w$=s(Ps);Zhe=n(w$,"STRONG",{});var Igt=s(Zhe);DWo=r(Igt,"deit"),Igt.forEach(t),GWo=r(w$," \u2014 "),VV=n(w$,"A",{href:!0});var qgt=s(VV);OWo=r(qgt,"DeiTForImageClassification"),qgt.forEach(t),VWo=r(w$," or "),XV=n(w$,"A",{href:!0});var Ngt=s(XV);XWo=r(Ngt,"DeiTForImageClassificationWithTeacher"),Ngt.forEach(t),zWo=r(w$," (DeiT model)"),w$.forEach(t),WWo=i(Ee),H1=n(Ee,"LI",{});var W9e=s(H1);eue=n(W9e,"STRONG",{});var jgt=s(eue);QWo=r(jgt,"imagegpt"),jgt.forEach(t),HWo=r(W9e," \u2014 "),zV=n(W9e,"A",{href:!0});var Dgt=s(zV);UWo=r(Dgt,"ImageGPTForImageClassification"),Dgt.forEach(t),JWo=r(W9e," (ImageGPT model)"),W9e.forEach(t),YWo=i(Ee),ut=n(Ee,"LI",{});var fm=s(ut);oue=n(fm,"STRONG",{});var Ggt=s(oue);KWo=r(Ggt,"perceiver"),Ggt.forEach(t),ZWo=r(fm," \u2014 "),WV=n(fm,"A",{href:!0});var Ogt=s(WV);eQo=r(Ogt,"PerceiverForImageClassificationLearned"),Ogt.forEach(t),oQo=r(fm," or "),QV=n(fm,"A",{href:!0});var Vgt=s(QV);rQo=r(Vgt,"PerceiverForImageClassificationFourier"),Vgt.forEach(t),tQo=r(fm," or "),HV=n(fm,"A",{href:!0});var Xgt=s(HV);aQo=r(Xgt,"PerceiverForImageClassificationConvProcessing"),Xgt.forEach(t),nQo=r(fm," (Perceiver model)"),fm.forEach(t),sQo=i(Ee),U1=n(Ee,"LI",{});var Q9e=s(U1);rue=n(Q9e,"STRONG",{});var zgt=s(rue);lQo=r(zgt,"poolformer"),zgt.forEach(t),iQo=r(Q9e," \u2014 "),UV=n(Q9e,"A",{href:!0});var Wgt=s(UV);dQo=r(Wgt,"PoolFormerForImageClassification"),Wgt.forEach(t),cQo=r(Q9e," (PoolFormer model)"),Q9e.forEach(t),mQo=i(Ee),J1=n(Ee,"LI",{});var H9e=s(J1);tue=n(H9e,"STRONG",{});var Qgt=s(tue);fQo=r(Qgt,"regnet"),Qgt.forEach(t),gQo=r(H9e," \u2014 "),JV=n(H9e,"A",{href:!0});var Hgt=s(JV);hQo=r(Hgt,"RegNetForImageClassification"),Hgt.forEach(t),uQo=r(H9e," (RegNet model)"),H9e.forEach(t),pQo=i(Ee),Y1=n(Ee,"LI",{});var U9e=s(Y1);aue=n(U9e,"STRONG",{});var Ugt=s(aue);_Qo=r(Ugt,"resnet"),Ugt.forEach(t),bQo=r(U9e," \u2014 "),YV=n(U9e,"A",{href:!0});var Jgt=s(YV);vQo=r(Jgt,"ResNetForImageClassification"),Jgt.forEach(t),FQo=r(U9e," (ResNet model)"),U9e.forEach(t),TQo=i(Ee),K1=n(Ee,"LI",{});var J9e=s(K1);nue=n(J9e,"STRONG",{});var Ygt=s(nue);MQo=r(Ygt,"segformer"),Ygt.forEach(t),EQo=r(J9e," \u2014 "),KV=n(J9e,"A",{href:!0});var Kgt=s(KV);CQo=r(Kgt,"SegformerForImageClassification"),Kgt.forEach(t),wQo=r(J9e," (SegFormer model)"),J9e.forEach(t),AQo=i(Ee),Z1=n(Ee,"LI",{});var Y9e=s(Z1);sue=n(Y9e,"STRONG",{});var Zgt=s(sue);yQo=r(Zgt,"swin"),Zgt.forEach(t),LQo=r(Y9e," \u2014 "),ZV=n(Y9e,"A",{href:!0});var eht=s(ZV);xQo=r(eht,"SwinForImageClassification"),eht.forEach(t),$Qo=r(Y9e," (Swin model)"),Y9e.forEach(t),kQo=i(Ee),eT=n(Ee,"LI",{});var K9e=s(eT);lue=n(K9e,"STRONG",{});var oht=s(lue);SQo=r(oht,"van"),oht.forEach(t),RQo=r(K9e," \u2014 "),eX=n(K9e,"A",{href:!0});var rht=s(eX);PQo=r(rht,"VanForImageClassification"),rht.forEach(t),BQo=r(K9e," (VAN model)"),K9e.forEach(t),IQo=i(Ee),oT=n(Ee,"LI",{});var Z9e=s(oT);iue=n(Z9e,"STRONG",{});var tht=s(iue);qQo=r(tht,"vit"),tht.forEach(t),NQo=r(Z9e," \u2014 "),oX=n(Z9e,"A",{href:!0});var aht=s(oX);jQo=r(aht,"ViTForImageClassification"),aht.forEach(t),DQo=r(Z9e," (ViT model)"),Z9e.forEach(t),Ee.forEach(t),GQo=i(fa),rT=n(fa,"P",{});var e$e=s(rT);OQo=r(e$e,"The model is set in evaluation mode by default using "),due=n(e$e,"CODE",{});var nht=s(due);VQo=r(nht,"model.eval()"),nht.forEach(t),XQo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(e$e,"CODE",{});var sht=s(cue);zQo=r(sht,"model.train()"),sht.forEach(t),e$e.forEach(t),WQo=i(fa),T(tT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Fqe=i(m),sd=n(m,"H2",{class:!0});var Cje=s(sd);aT=n(Cje,"A",{id:!0,class:!0,href:!0});var lht=s(aT);mue=n(lht,"SPAN",{});var iht=s(mue);T(OL.$$.fragment,iht),iht.forEach(t),lht.forEach(t),QQo=i(Cje),fue=n(Cje,"SPAN",{});var dht=s(fue);HQo=r(dht,"AutoModelForVision2Seq"),dht.forEach(t),Cje.forEach(t),Tqe=i(m),Do=n(m,"DIV",{class:!0});var Zs=s(Do);T(VL.$$.fragment,Zs),UQo=i(Zs),ld=n(Zs,"P",{});var tZ=s(ld);JQo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rX=n(tZ,"A",{href:!0});var cht=s(rX);YQo=r(cht,"from_pretrained()"),cht.forEach(t),KQo=r(tZ," class method or the "),tX=n(tZ,"A",{href:!0});var mht=s(tX);ZQo=r(mht,"from_config()"),mht.forEach(t),eHo=r(tZ,` class
method.`),tZ.forEach(t),oHo=i(Zs),XL=n(Zs,"P",{});var wje=s(XL);rHo=r(wje,"This class cannot be instantiated directly using "),gue=n(wje,"CODE",{});var fht=s(gue);tHo=r(fht,"__init__()"),fht.forEach(t),aHo=r(wje," (throws an error)."),wje.forEach(t),nHo=i(Zs),pt=n(Zs,"DIV",{class:!0});var N0=s(pt);T(zL.$$.fragment,N0),sHo=i(N0),hue=n(N0,"P",{});var ght=s(hue);lHo=r(ght,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ght.forEach(t),iHo=i(N0),id=n(N0,"P",{});var aZ=s(id);dHo=r(aZ,`Note:
Loading a model from its configuration file does `),uue=n(aZ,"STRONG",{});var hht=s(uue);cHo=r(hht,"not"),hht.forEach(t),mHo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(aZ,"A",{href:!0});var uht=s(aX);fHo=r(uht,"from_pretrained()"),uht.forEach(t),gHo=r(aZ," to load the model weights."),aZ.forEach(t),hHo=i(N0),T(nT.$$.fragment,N0),N0.forEach(t),uHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(WL.$$.fragment,ga),pHo=i(ga),pue=n(ga,"P",{});var pht=s(pue);_Ho=r(pht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pht.forEach(t),bHo=i(ga),Da=n(ga,"P",{});var j0=s(Da);vHo=r(j0,"The model class to instantiate is selected based on the "),_ue=n(j0,"CODE",{});var _ht=s(_ue);FHo=r(_ht,"model_type"),_ht.forEach(t),THo=r(j0,` property of the config object (either
passed as an argument or loaded from `),bue=n(j0,"CODE",{});var bht=s(bue);MHo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),EHo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(j0,"CODE",{});var vht=s(vue);CHo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),wHo=r(j0,":"),j0.forEach(t),AHo=i(ga),Fue=n(ga,"UL",{});var Fht=s(Fue);sT=n(Fht,"LI",{});var o$e=s(sT);Tue=n(o$e,"STRONG",{});var Tht=s(Tue);yHo=r(Tht,"vision-encoder-decoder"),Tht.forEach(t),LHo=r(o$e," \u2014 "),nX=n(o$e,"A",{href:!0});var Mht=s(nX);xHo=r(Mht,"VisionEncoderDecoderModel"),Mht.forEach(t),$Ho=r(o$e," (Vision Encoder decoder model)"),o$e.forEach(t),Fht.forEach(t),kHo=i(ga),lT=n(ga,"P",{});var r$e=s(lT);SHo=r(r$e,"The model is set in evaluation mode by default using "),Mue=n(r$e,"CODE",{});var Eht=s(Mue);RHo=r(Eht,"model.eval()"),Eht.forEach(t),PHo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(r$e,"CODE",{});var Cht=s(Eue);BHo=r(Cht,"model.train()"),Cht.forEach(t),r$e.forEach(t),IHo=i(ga),T(iT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Mqe=i(m),dd=n(m,"H2",{class:!0});var Aje=s(dd);dT=n(Aje,"A",{id:!0,class:!0,href:!0});var wht=s(dT);Cue=n(wht,"SPAN",{});var Aht=s(Cue);T(QL.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),qHo=i(Aje),wue=n(Aje,"SPAN",{});var yht=s(wue);NHo=r(yht,"AutoModelForAudioClassification"),yht.forEach(t),Aje.forEach(t),Eqe=i(m),Go=n(m,"DIV",{class:!0});var el=s(Go);T(HL.$$.fragment,el),jHo=i(el),cd=n(el,"P",{});var nZ=s(cd);DHo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sX=n(nZ,"A",{href:!0});var Lht=s(sX);GHo=r(Lht,"from_pretrained()"),Lht.forEach(t),OHo=r(nZ," class method or the "),lX=n(nZ,"A",{href:!0});var xht=s(lX);VHo=r(xht,"from_config()"),xht.forEach(t),XHo=r(nZ,` class
method.`),nZ.forEach(t),zHo=i(el),UL=n(el,"P",{});var yje=s(UL);WHo=r(yje,"This class cannot be instantiated directly using "),Aue=n(yje,"CODE",{});var $ht=s(Aue);QHo=r($ht,"__init__()"),$ht.forEach(t),HHo=r(yje," (throws an error)."),yje.forEach(t),UHo=i(el),_t=n(el,"DIV",{class:!0});var D0=s(_t);T(JL.$$.fragment,D0),JHo=i(D0),yue=n(D0,"P",{});var kht=s(yue);YHo=r(kht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kht.forEach(t),KHo=i(D0),md=n(D0,"P",{});var sZ=s(md);ZHo=r(sZ,`Note:
Loading a model from its configuration file does `),Lue=n(sZ,"STRONG",{});var Sht=s(Lue);eUo=r(Sht,"not"),Sht.forEach(t),oUo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(sZ,"A",{href:!0});var Rht=s(iX);rUo=r(Rht,"from_pretrained()"),Rht.forEach(t),tUo=r(sZ," to load the model weights."),sZ.forEach(t),aUo=i(D0),T(cT.$$.fragment,D0),D0.forEach(t),nUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(YL.$$.fragment,ha),sUo=i(ha),xue=n(ha,"P",{});var Pht=s(xue);lUo=r(Pht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Pht.forEach(t),iUo=i(ha),Ga=n(ha,"P",{});var G0=s(Ga);dUo=r(G0,"The model class to instantiate is selected based on the "),$ue=n(G0,"CODE",{});var Bht=s($ue);cUo=r(Bht,"model_type"),Bht.forEach(t),mUo=r(G0,` property of the config object (either
passed as an argument or loaded from `),kue=n(G0,"CODE",{});var Iht=s(kue);fUo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),gUo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(G0,"CODE",{});var qht=s(Sue);hUo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),uUo=r(G0,":"),G0.forEach(t),pUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);mT=n(Oe,"LI",{});var t$e=s(mT);Rue=n(t$e,"STRONG",{});var Nht=s(Rue);_Uo=r(Nht,"data2vec-audio"),Nht.forEach(t),bUo=r(t$e," \u2014 "),dX=n(t$e,"A",{href:!0});var jht=s(dX);vUo=r(jht,"Data2VecAudioForSequenceClassification"),jht.forEach(t),FUo=r(t$e," (Data2VecAudio model)"),t$e.forEach(t),TUo=i(Oe),fT=n(Oe,"LI",{});var a$e=s(fT);Pue=n(a$e,"STRONG",{});var Dht=s(Pue);MUo=r(Dht,"hubert"),Dht.forEach(t),EUo=r(a$e," \u2014 "),cX=n(a$e,"A",{href:!0});var Ght=s(cX);CUo=r(Ght,"HubertForSequenceClassification"),Ght.forEach(t),wUo=r(a$e," (Hubert model)"),a$e.forEach(t),AUo=i(Oe),gT=n(Oe,"LI",{});var n$e=s(gT);Bue=n(n$e,"STRONG",{});var Oht=s(Bue);yUo=r(Oht,"sew"),Oht.forEach(t),LUo=r(n$e," \u2014 "),mX=n(n$e,"A",{href:!0});var Vht=s(mX);xUo=r(Vht,"SEWForSequenceClassification"),Vht.forEach(t),$Uo=r(n$e," (SEW model)"),n$e.forEach(t),kUo=i(Oe),hT=n(Oe,"LI",{});var s$e=s(hT);Iue=n(s$e,"STRONG",{});var Xht=s(Iue);SUo=r(Xht,"sew-d"),Xht.forEach(t),RUo=r(s$e," \u2014 "),fX=n(s$e,"A",{href:!0});var zht=s(fX);PUo=r(zht,"SEWDForSequenceClassification"),zht.forEach(t),BUo=r(s$e," (SEW-D model)"),s$e.forEach(t),IUo=i(Oe),uT=n(Oe,"LI",{});var l$e=s(uT);que=n(l$e,"STRONG",{});var Wht=s(que);qUo=r(Wht,"unispeech"),Wht.forEach(t),NUo=r(l$e," \u2014 "),gX=n(l$e,"A",{href:!0});var Qht=s(gX);jUo=r(Qht,"UniSpeechForSequenceClassification"),Qht.forEach(t),DUo=r(l$e," (UniSpeech model)"),l$e.forEach(t),GUo=i(Oe),pT=n(Oe,"LI",{});var i$e=s(pT);Nue=n(i$e,"STRONG",{});var Hht=s(Nue);OUo=r(Hht,"unispeech-sat"),Hht.forEach(t),VUo=r(i$e," \u2014 "),hX=n(i$e,"A",{href:!0});var Uht=s(hX);XUo=r(Uht,"UniSpeechSatForSequenceClassification"),Uht.forEach(t),zUo=r(i$e," (UniSpeechSat model)"),i$e.forEach(t),WUo=i(Oe),_T=n(Oe,"LI",{});var d$e=s(_T);jue=n(d$e,"STRONG",{});var Jht=s(jue);QUo=r(Jht,"wav2vec2"),Jht.forEach(t),HUo=r(d$e," \u2014 "),uX=n(d$e,"A",{href:!0});var Yht=s(uX);UUo=r(Yht,"Wav2Vec2ForSequenceClassification"),Yht.forEach(t),JUo=r(d$e," (Wav2Vec2 model)"),d$e.forEach(t),YUo=i(Oe),bT=n(Oe,"LI",{});var c$e=s(bT);Due=n(c$e,"STRONG",{});var Kht=s(Due);KUo=r(Kht,"wav2vec2-conformer"),Kht.forEach(t),ZUo=r(c$e," \u2014 "),pX=n(c$e,"A",{href:!0});var Zht=s(pX);eJo=r(Zht,"Wav2Vec2ConformerForSequenceClassification"),Zht.forEach(t),oJo=r(c$e," (Wav2Vec2-Conformer model)"),c$e.forEach(t),rJo=i(Oe),vT=n(Oe,"LI",{});var m$e=s(vT);Gue=n(m$e,"STRONG",{});var eut=s(Gue);tJo=r(eut,"wavlm"),eut.forEach(t),aJo=r(m$e," \u2014 "),_X=n(m$e,"A",{href:!0});var out=s(_X);nJo=r(out,"WavLMForSequenceClassification"),out.forEach(t),sJo=r(m$e," (WavLM model)"),m$e.forEach(t),Oe.forEach(t),lJo=i(ha),FT=n(ha,"P",{});var f$e=s(FT);iJo=r(f$e,"The model is set in evaluation mode by default using "),Oue=n(f$e,"CODE",{});var rut=s(Oue);dJo=r(rut,"model.eval()"),rut.forEach(t),cJo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(f$e,"CODE",{});var tut=s(Vue);mJo=r(tut,"model.train()"),tut.forEach(t),f$e.forEach(t),fJo=i(ha),T(TT.$$.fragment,ha),ha.forEach(t),el.forEach(t),Cqe=i(m),fd=n(m,"H2",{class:!0});var Lje=s(fd);MT=n(Lje,"A",{id:!0,class:!0,href:!0});var aut=s(MT);Xue=n(aut,"SPAN",{});var nut=s(Xue);T(KL.$$.fragment,nut),nut.forEach(t),aut.forEach(t),gJo=i(Lje),zue=n(Lje,"SPAN",{});var sut=s(zue);hJo=r(sut,"AutoModelForAudioFrameClassification"),sut.forEach(t),Lje.forEach(t),wqe=i(m),Oo=n(m,"DIV",{class:!0});var ol=s(Oo);T(ZL.$$.fragment,ol),uJo=i(ol),gd=n(ol,"P",{});var lZ=s(gd);pJo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bX=n(lZ,"A",{href:!0});var lut=s(bX);_Jo=r(lut,"from_pretrained()"),lut.forEach(t),bJo=r(lZ," class method or the "),vX=n(lZ,"A",{href:!0});var iut=s(vX);vJo=r(iut,"from_config()"),iut.forEach(t),FJo=r(lZ,` class
method.`),lZ.forEach(t),TJo=i(ol),e8=n(ol,"P",{});var xje=s(e8);MJo=r(xje,"This class cannot be instantiated directly using "),Wue=n(xje,"CODE",{});var dut=s(Wue);EJo=r(dut,"__init__()"),dut.forEach(t),CJo=r(xje," (throws an error)."),xje.forEach(t),wJo=i(ol),bt=n(ol,"DIV",{class:!0});var O0=s(bt);T(o8.$$.fragment,O0),AJo=i(O0),Que=n(O0,"P",{});var cut=s(Que);yJo=r(cut,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cut.forEach(t),LJo=i(O0),hd=n(O0,"P",{});var iZ=s(hd);xJo=r(iZ,`Note:
Loading a model from its configuration file does `),Hue=n(iZ,"STRONG",{});var mut=s(Hue);$Jo=r(mut,"not"),mut.forEach(t),kJo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(iZ,"A",{href:!0});var fut=s(FX);SJo=r(fut,"from_pretrained()"),fut.forEach(t),RJo=r(iZ," to load the model weights."),iZ.forEach(t),PJo=i(O0),T(ET.$$.fragment,O0),O0.forEach(t),BJo=i(ol),mo=n(ol,"DIV",{class:!0});var ua=s(mo);T(r8.$$.fragment,ua),IJo=i(ua),Uue=n(ua,"P",{});var gut=s(Uue);qJo=r(gut,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gut.forEach(t),NJo=i(ua),Oa=n(ua,"P",{});var V0=s(Oa);jJo=r(V0,"The model class to instantiate is selected based on the "),Jue=n(V0,"CODE",{});var hut=s(Jue);DJo=r(hut,"model_type"),hut.forEach(t),GJo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Yue=n(V0,"CODE",{});var uut=s(Yue);OJo=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),VJo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(V0,"CODE",{});var put=s(Kue);XJo=r(put,"pretrained_model_name_or_path"),put.forEach(t),zJo=r(V0,":"),V0.forEach(t),WJo=i(ua),Kr=n(ua,"UL",{});var rl=s(Kr);CT=n(rl,"LI",{});var g$e=s(CT);Zue=n(g$e,"STRONG",{});var _ut=s(Zue);QJo=r(_ut,"data2vec-audio"),_ut.forEach(t),HJo=r(g$e," \u2014 "),TX=n(g$e,"A",{href:!0});var but=s(TX);UJo=r(but,"Data2VecAudioForAudioFrameClassification"),but.forEach(t),JJo=r(g$e," (Data2VecAudio model)"),g$e.forEach(t),YJo=i(rl),wT=n(rl,"LI",{});var h$e=s(wT);epe=n(h$e,"STRONG",{});var vut=s(epe);KJo=r(vut,"unispeech-sat"),vut.forEach(t),ZJo=r(h$e," \u2014 "),MX=n(h$e,"A",{href:!0});var Fut=s(MX);eYo=r(Fut,"UniSpeechSatForAudioFrameClassification"),Fut.forEach(t),oYo=r(h$e," (UniSpeechSat model)"),h$e.forEach(t),rYo=i(rl),AT=n(rl,"LI",{});var u$e=s(AT);ope=n(u$e,"STRONG",{});var Tut=s(ope);tYo=r(Tut,"wav2vec2"),Tut.forEach(t),aYo=r(u$e," \u2014 "),EX=n(u$e,"A",{href:!0});var Mut=s(EX);nYo=r(Mut,"Wav2Vec2ForAudioFrameClassification"),Mut.forEach(t),sYo=r(u$e," (Wav2Vec2 model)"),u$e.forEach(t),lYo=i(rl),yT=n(rl,"LI",{});var p$e=s(yT);rpe=n(p$e,"STRONG",{});var Eut=s(rpe);iYo=r(Eut,"wav2vec2-conformer"),Eut.forEach(t),dYo=r(p$e," \u2014 "),CX=n(p$e,"A",{href:!0});var Cut=s(CX);cYo=r(Cut,"Wav2Vec2ConformerForAudioFrameClassification"),Cut.forEach(t),mYo=r(p$e," (Wav2Vec2-Conformer model)"),p$e.forEach(t),fYo=i(rl),LT=n(rl,"LI",{});var _$e=s(LT);tpe=n(_$e,"STRONG",{});var wut=s(tpe);gYo=r(wut,"wavlm"),wut.forEach(t),hYo=r(_$e," \u2014 "),wX=n(_$e,"A",{href:!0});var Aut=s(wX);uYo=r(Aut,"WavLMForAudioFrameClassification"),Aut.forEach(t),pYo=r(_$e," (WavLM model)"),_$e.forEach(t),rl.forEach(t),_Yo=i(ua),xT=n(ua,"P",{});var b$e=s(xT);bYo=r(b$e,"The model is set in evaluation mode by default using "),ape=n(b$e,"CODE",{});var yut=s(ape);vYo=r(yut,"model.eval()"),yut.forEach(t),FYo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(b$e,"CODE",{});var Lut=s(npe);TYo=r(Lut,"model.train()"),Lut.forEach(t),b$e.forEach(t),MYo=i(ua),T($T.$$.fragment,ua),ua.forEach(t),ol.forEach(t),Aqe=i(m),ud=n(m,"H2",{class:!0});var $je=s(ud);kT=n($je,"A",{id:!0,class:!0,href:!0});var xut=s(kT);spe=n(xut,"SPAN",{});var $ut=s(spe);T(t8.$$.fragment,$ut),$ut.forEach(t),xut.forEach(t),EYo=i($je),lpe=n($je,"SPAN",{});var kut=s(lpe);CYo=r(kut,"AutoModelForCTC"),kut.forEach(t),$je.forEach(t),yqe=i(m),Vo=n(m,"DIV",{class:!0});var tl=s(Vo);T(a8.$$.fragment,tl),wYo=i(tl),pd=n(tl,"P",{});var dZ=s(pd);AYo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AX=n(dZ,"A",{href:!0});var Sut=s(AX);yYo=r(Sut,"from_pretrained()"),Sut.forEach(t),LYo=r(dZ," class method or the "),yX=n(dZ,"A",{href:!0});var Rut=s(yX);xYo=r(Rut,"from_config()"),Rut.forEach(t),$Yo=r(dZ,` class
method.`),dZ.forEach(t),kYo=i(tl),n8=n(tl,"P",{});var kje=s(n8);SYo=r(kje,"This class cannot be instantiated directly using "),ipe=n(kje,"CODE",{});var Put=s(ipe);RYo=r(Put,"__init__()"),Put.forEach(t),PYo=r(kje," (throws an error)."),kje.forEach(t),BYo=i(tl),vt=n(tl,"DIV",{class:!0});var X0=s(vt);T(s8.$$.fragment,X0),IYo=i(X0),dpe=n(X0,"P",{});var But=s(dpe);qYo=r(But,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),But.forEach(t),NYo=i(X0),_d=n(X0,"P",{});var cZ=s(_d);jYo=r(cZ,`Note:
Loading a model from its configuration file does `),cpe=n(cZ,"STRONG",{});var Iut=s(cpe);DYo=r(Iut,"not"),Iut.forEach(t),GYo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(cZ,"A",{href:!0});var qut=s(LX);OYo=r(qut,"from_pretrained()"),qut.forEach(t),VYo=r(cZ," to load the model weights."),cZ.forEach(t),XYo=i(X0),T(ST.$$.fragment,X0),X0.forEach(t),zYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(l8.$$.fragment,pa),WYo=i(pa),mpe=n(pa,"P",{});var Nut=s(mpe);QYo=r(Nut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nut.forEach(t),HYo=i(pa),Va=n(pa,"P",{});var z0=s(Va);UYo=r(z0,"The model class to instantiate is selected based on the "),fpe=n(z0,"CODE",{});var jut=s(fpe);JYo=r(jut,"model_type"),jut.forEach(t),YYo=r(z0,` property of the config object (either
passed as an argument or loaded from `),gpe=n(z0,"CODE",{});var Dut=s(gpe);KYo=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),ZYo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(z0,"CODE",{});var Gut=s(hpe);eKo=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),oKo=r(z0,":"),z0.forEach(t),rKo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);RT=n(Ve,"LI",{});var v$e=s(RT);upe=n(v$e,"STRONG",{});var Out=s(upe);tKo=r(Out,"data2vec-audio"),Out.forEach(t),aKo=r(v$e," \u2014 "),xX=n(v$e,"A",{href:!0});var Vut=s(xX);nKo=r(Vut,"Data2VecAudioForCTC"),Vut.forEach(t),sKo=r(v$e," (Data2VecAudio model)"),v$e.forEach(t),lKo=i(Ve),PT=n(Ve,"LI",{});var F$e=s(PT);ppe=n(F$e,"STRONG",{});var Xut=s(ppe);iKo=r(Xut,"hubert"),Xut.forEach(t),dKo=r(F$e," \u2014 "),$X=n(F$e,"A",{href:!0});var zut=s($X);cKo=r(zut,"HubertForCTC"),zut.forEach(t),mKo=r(F$e," (Hubert model)"),F$e.forEach(t),fKo=i(Ve),BT=n(Ve,"LI",{});var T$e=s(BT);_pe=n(T$e,"STRONG",{});var Wut=s(_pe);gKo=r(Wut,"sew"),Wut.forEach(t),hKo=r(T$e," \u2014 "),kX=n(T$e,"A",{href:!0});var Qut=s(kX);uKo=r(Qut,"SEWForCTC"),Qut.forEach(t),pKo=r(T$e," (SEW model)"),T$e.forEach(t),_Ko=i(Ve),IT=n(Ve,"LI",{});var M$e=s(IT);bpe=n(M$e,"STRONG",{});var Hut=s(bpe);bKo=r(Hut,"sew-d"),Hut.forEach(t),vKo=r(M$e," \u2014 "),SX=n(M$e,"A",{href:!0});var Uut=s(SX);FKo=r(Uut,"SEWDForCTC"),Uut.forEach(t),TKo=r(M$e," (SEW-D model)"),M$e.forEach(t),MKo=i(Ve),qT=n(Ve,"LI",{});var E$e=s(qT);vpe=n(E$e,"STRONG",{});var Jut=s(vpe);EKo=r(Jut,"unispeech"),Jut.forEach(t),CKo=r(E$e," \u2014 "),RX=n(E$e,"A",{href:!0});var Yut=s(RX);wKo=r(Yut,"UniSpeechForCTC"),Yut.forEach(t),AKo=r(E$e," (UniSpeech model)"),E$e.forEach(t),yKo=i(Ve),NT=n(Ve,"LI",{});var C$e=s(NT);Fpe=n(C$e,"STRONG",{});var Kut=s(Fpe);LKo=r(Kut,"unispeech-sat"),Kut.forEach(t),xKo=r(C$e," \u2014 "),PX=n(C$e,"A",{href:!0});var Zut=s(PX);$Ko=r(Zut,"UniSpeechSatForCTC"),Zut.forEach(t),kKo=r(C$e," (UniSpeechSat model)"),C$e.forEach(t),SKo=i(Ve),jT=n(Ve,"LI",{});var w$e=s(jT);Tpe=n(w$e,"STRONG",{});var ept=s(Tpe);RKo=r(ept,"wav2vec2"),ept.forEach(t),PKo=r(w$e," \u2014 "),BX=n(w$e,"A",{href:!0});var opt=s(BX);BKo=r(opt,"Wav2Vec2ForCTC"),opt.forEach(t),IKo=r(w$e," (Wav2Vec2 model)"),w$e.forEach(t),qKo=i(Ve),DT=n(Ve,"LI",{});var A$e=s(DT);Mpe=n(A$e,"STRONG",{});var rpt=s(Mpe);NKo=r(rpt,"wav2vec2-conformer"),rpt.forEach(t),jKo=r(A$e," \u2014 "),IX=n(A$e,"A",{href:!0});var tpt=s(IX);DKo=r(tpt,"Wav2Vec2ConformerForCTC"),tpt.forEach(t),GKo=r(A$e," (Wav2Vec2-Conformer model)"),A$e.forEach(t),OKo=i(Ve),GT=n(Ve,"LI",{});var y$e=s(GT);Epe=n(y$e,"STRONG",{});var apt=s(Epe);VKo=r(apt,"wavlm"),apt.forEach(t),XKo=r(y$e," \u2014 "),qX=n(y$e,"A",{href:!0});var npt=s(qX);zKo=r(npt,"WavLMForCTC"),npt.forEach(t),WKo=r(y$e," (WavLM model)"),y$e.forEach(t),Ve.forEach(t),QKo=i(pa),OT=n(pa,"P",{});var L$e=s(OT);HKo=r(L$e,"The model is set in evaluation mode by default using "),Cpe=n(L$e,"CODE",{});var spt=s(Cpe);UKo=r(spt,"model.eval()"),spt.forEach(t),JKo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(L$e,"CODE",{});var lpt=s(wpe);YKo=r(lpt,"model.train()"),lpt.forEach(t),L$e.forEach(t),KKo=i(pa),T(VT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Lqe=i(m),bd=n(m,"H2",{class:!0});var Sje=s(bd);XT=n(Sje,"A",{id:!0,class:!0,href:!0});var ipt=s(XT);Ape=n(ipt,"SPAN",{});var dpt=s(Ape);T(i8.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),ZKo=i(Sje),ype=n(Sje,"SPAN",{});var cpt=s(ype);eZo=r(cpt,"AutoModelForSpeechSeq2Seq"),cpt.forEach(t),Sje.forEach(t),xqe=i(m),Xo=n(m,"DIV",{class:!0});var al=s(Xo);T(d8.$$.fragment,al),oZo=i(al),vd=n(al,"P",{});var mZ=s(vd);rZo=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NX=n(mZ,"A",{href:!0});var mpt=s(NX);tZo=r(mpt,"from_pretrained()"),mpt.forEach(t),aZo=r(mZ," class method or the "),jX=n(mZ,"A",{href:!0});var fpt=s(jX);nZo=r(fpt,"from_config()"),fpt.forEach(t),sZo=r(mZ,` class
method.`),mZ.forEach(t),lZo=i(al),c8=n(al,"P",{});var Rje=s(c8);iZo=r(Rje,"This class cannot be instantiated directly using "),Lpe=n(Rje,"CODE",{});var gpt=s(Lpe);dZo=r(gpt,"__init__()"),gpt.forEach(t),cZo=r(Rje," (throws an error)."),Rje.forEach(t),mZo=i(al),Ft=n(al,"DIV",{class:!0});var W0=s(Ft);T(m8.$$.fragment,W0),fZo=i(W0),xpe=n(W0,"P",{});var hpt=s(xpe);gZo=r(hpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hpt.forEach(t),hZo=i(W0),Fd=n(W0,"P",{});var fZ=s(Fd);uZo=r(fZ,`Note:
Loading a model from its configuration file does `),$pe=n(fZ,"STRONG",{});var upt=s($pe);pZo=r(upt,"not"),upt.forEach(t),_Zo=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(fZ,"A",{href:!0});var ppt=s(DX);bZo=r(ppt,"from_pretrained()"),ppt.forEach(t),vZo=r(fZ," to load the model weights."),fZ.forEach(t),FZo=i(W0),T(zT.$$.fragment,W0),W0.forEach(t),TZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(f8.$$.fragment,_a),MZo=i(_a),kpe=n(_a,"P",{});var _pt=s(kpe);EZo=r(_pt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_pt.forEach(t),CZo=i(_a),Xa=n(_a,"P",{});var Q0=s(Xa);wZo=r(Q0,"The model class to instantiate is selected based on the "),Spe=n(Q0,"CODE",{});var bpt=s(Spe);AZo=r(bpt,"model_type"),bpt.forEach(t),yZo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(Q0,"CODE",{});var vpt=s(Rpe);LZo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),xZo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(Q0,"CODE",{});var Fpt=s(Ppe);$Zo=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),kZo=r(Q0,":"),Q0.forEach(t),SZo=i(_a),g8=n(_a,"UL",{});var Pje=s(g8);WT=n(Pje,"LI",{});var x$e=s(WT);Bpe=n(x$e,"STRONG",{});var Tpt=s(Bpe);RZo=r(Tpt,"speech-encoder-decoder"),Tpt.forEach(t),PZo=r(x$e," \u2014 "),GX=n(x$e,"A",{href:!0});var Mpt=s(GX);BZo=r(Mpt,"SpeechEncoderDecoderModel"),Mpt.forEach(t),IZo=r(x$e," (Speech Encoder decoder model)"),x$e.forEach(t),qZo=i(Pje),QT=n(Pje,"LI",{});var $$e=s(QT);Ipe=n($$e,"STRONG",{});var Ept=s(Ipe);NZo=r(Ept,"speech_to_text"),Ept.forEach(t),jZo=r($$e," \u2014 "),OX=n($$e,"A",{href:!0});var Cpt=s(OX);DZo=r(Cpt,"Speech2TextForConditionalGeneration"),Cpt.forEach(t),GZo=r($$e," (Speech2Text model)"),$$e.forEach(t),Pje.forEach(t),OZo=i(_a),HT=n(_a,"P",{});var k$e=s(HT);VZo=r(k$e,"The model is set in evaluation mode by default using "),qpe=n(k$e,"CODE",{});var wpt=s(qpe);XZo=r(wpt,"model.eval()"),wpt.forEach(t),zZo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(k$e,"CODE",{});var Apt=s(Npe);WZo=r(Apt,"model.train()"),Apt.forEach(t),k$e.forEach(t),QZo=i(_a),T(UT.$$.fragment,_a),_a.forEach(t),al.forEach(t),$qe=i(m),Td=n(m,"H2",{class:!0});var Bje=s(Td);JT=n(Bje,"A",{id:!0,class:!0,href:!0});var ypt=s(JT);jpe=n(ypt,"SPAN",{});var Lpt=s(jpe);T(h8.$$.fragment,Lpt),Lpt.forEach(t),ypt.forEach(t),HZo=i(Bje),Dpe=n(Bje,"SPAN",{});var xpt=s(Dpe);UZo=r(xpt,"AutoModelForAudioXVector"),xpt.forEach(t),Bje.forEach(t),kqe=i(m),zo=n(m,"DIV",{class:!0});var nl=s(zo);T(u8.$$.fragment,nl),JZo=i(nl),Md=n(nl,"P",{});var gZ=s(Md);YZo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VX=n(gZ,"A",{href:!0});var $pt=s(VX);KZo=r($pt,"from_pretrained()"),$pt.forEach(t),ZZo=r(gZ," class method or the "),XX=n(gZ,"A",{href:!0});var kpt=s(XX);eer=r(kpt,"from_config()"),kpt.forEach(t),oer=r(gZ,` class
method.`),gZ.forEach(t),rer=i(nl),p8=n(nl,"P",{});var Ije=s(p8);ter=r(Ije,"This class cannot be instantiated directly using "),Gpe=n(Ije,"CODE",{});var Spt=s(Gpe);aer=r(Spt,"__init__()"),Spt.forEach(t),ner=r(Ije," (throws an error)."),Ije.forEach(t),ser=i(nl),Tt=n(nl,"DIV",{class:!0});var H0=s(Tt);T(_8.$$.fragment,H0),ler=i(H0),Ope=n(H0,"P",{});var Rpt=s(Ope);ier=r(Rpt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rpt.forEach(t),der=i(H0),Ed=n(H0,"P",{});var hZ=s(Ed);cer=r(hZ,`Note:
Loading a model from its configuration file does `),Vpe=n(hZ,"STRONG",{});var Ppt=s(Vpe);mer=r(Ppt,"not"),Ppt.forEach(t),fer=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(hZ,"A",{href:!0});var Bpt=s(zX);ger=r(Bpt,"from_pretrained()"),Bpt.forEach(t),her=r(hZ," to load the model weights."),hZ.forEach(t),uer=i(H0),T(YT.$$.fragment,H0),H0.forEach(t),per=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(b8.$$.fragment,ba),_er=i(ba),Xpe=n(ba,"P",{});var Ipt=s(Xpe);ber=r(Ipt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ipt.forEach(t),ver=i(ba),za=n(ba,"P",{});var U0=s(za);Fer=r(U0,"The model class to instantiate is selected based on the "),zpe=n(U0,"CODE",{});var qpt=s(zpe);Ter=r(qpt,"model_type"),qpt.forEach(t),Mer=r(U0,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(U0,"CODE",{});var Npt=s(Wpe);Eer=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Cer=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(U0,"CODE",{});var jpt=s(Qpe);wer=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),Aer=r(U0,":"),U0.forEach(t),yer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);KT=n(sl,"LI",{});var S$e=s(KT);Hpe=n(S$e,"STRONG",{});var Dpt=s(Hpe);Ler=r(Dpt,"data2vec-audio"),Dpt.forEach(t),xer=r(S$e," \u2014 "),WX=n(S$e,"A",{href:!0});var Gpt=s(WX);$er=r(Gpt,"Data2VecAudioForXVector"),Gpt.forEach(t),ker=r(S$e," (Data2VecAudio model)"),S$e.forEach(t),Ser=i(sl),ZT=n(sl,"LI",{});var R$e=s(ZT);Upe=n(R$e,"STRONG",{});var Opt=s(Upe);Rer=r(Opt,"unispeech-sat"),Opt.forEach(t),Per=r(R$e," \u2014 "),QX=n(R$e,"A",{href:!0});var Vpt=s(QX);Ber=r(Vpt,"UniSpeechSatForXVector"),Vpt.forEach(t),Ier=r(R$e," (UniSpeechSat model)"),R$e.forEach(t),qer=i(sl),eM=n(sl,"LI",{});var P$e=s(eM);Jpe=n(P$e,"STRONG",{});var Xpt=s(Jpe);Ner=r(Xpt,"wav2vec2"),Xpt.forEach(t),jer=r(P$e," \u2014 "),HX=n(P$e,"A",{href:!0});var zpt=s(HX);Der=r(zpt,"Wav2Vec2ForXVector"),zpt.forEach(t),Ger=r(P$e," (Wav2Vec2 model)"),P$e.forEach(t),Oer=i(sl),oM=n(sl,"LI",{});var B$e=s(oM);Ype=n(B$e,"STRONG",{});var Wpt=s(Ype);Ver=r(Wpt,"wav2vec2-conformer"),Wpt.forEach(t),Xer=r(B$e," \u2014 "),UX=n(B$e,"A",{href:!0});var Qpt=s(UX);zer=r(Qpt,"Wav2Vec2ConformerForXVector"),Qpt.forEach(t),Wer=r(B$e," (Wav2Vec2-Conformer model)"),B$e.forEach(t),Qer=i(sl),rM=n(sl,"LI",{});var I$e=s(rM);Kpe=n(I$e,"STRONG",{});var Hpt=s(Kpe);Her=r(Hpt,"wavlm"),Hpt.forEach(t),Uer=r(I$e," \u2014 "),JX=n(I$e,"A",{href:!0});var Upt=s(JX);Jer=r(Upt,"WavLMForXVector"),Upt.forEach(t),Yer=r(I$e," (WavLM model)"),I$e.forEach(t),sl.forEach(t),Ker=i(ba),tM=n(ba,"P",{});var q$e=s(tM);Zer=r(q$e,"The model is set in evaluation mode by default using "),Zpe=n(q$e,"CODE",{});var Jpt=s(Zpe);eor=r(Jpt,"model.eval()"),Jpt.forEach(t),oor=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(q$e,"CODE",{});var Ypt=s(e_e);ror=r(Ypt,"model.train()"),Ypt.forEach(t),q$e.forEach(t),tor=i(ba),T(aM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Sqe=i(m),Cd=n(m,"H2",{class:!0});var qje=s(Cd);nM=n(qje,"A",{id:!0,class:!0,href:!0});var Kpt=s(nM);o_e=n(Kpt,"SPAN",{});var Zpt=s(o_e);T(v8.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),aor=i(qje),r_e=n(qje,"SPAN",{});var e_t=s(r_e);nor=r(e_t,"AutoModelForMaskedImageModeling"),e_t.forEach(t),qje.forEach(t),Rqe=i(m),Wo=n(m,"DIV",{class:!0});var ll=s(Wo);T(F8.$$.fragment,ll),sor=i(ll),wd=n(ll,"P",{});var uZ=s(wd);lor=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),YX=n(uZ,"A",{href:!0});var o_t=s(YX);ior=r(o_t,"from_pretrained()"),o_t.forEach(t),dor=r(uZ," class method or the "),KX=n(uZ,"A",{href:!0});var r_t=s(KX);cor=r(r_t,"from_config()"),r_t.forEach(t),mor=r(uZ,` class
method.`),uZ.forEach(t),gor=i(ll),T8=n(ll,"P",{});var Nje=s(T8);hor=r(Nje,"This class cannot be instantiated directly using "),t_e=n(Nje,"CODE",{});var t_t=s(t_e);uor=r(t_t,"__init__()"),t_t.forEach(t),por=r(Nje," (throws an error)."),Nje.forEach(t),_or=i(ll),Mt=n(ll,"DIV",{class:!0});var J0=s(Mt);T(M8.$$.fragment,J0),bor=i(J0),a_e=n(J0,"P",{});var a_t=s(a_e);vor=r(a_t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),a_t.forEach(t),For=i(J0),Ad=n(J0,"P",{});var pZ=s(Ad);Tor=r(pZ,`Note:
Loading a model from its configuration file does `),n_e=n(pZ,"STRONG",{});var n_t=s(n_e);Mor=r(n_t,"not"),n_t.forEach(t),Eor=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(pZ,"A",{href:!0});var s_t=s(ZX);Cor=r(s_t,"from_pretrained()"),s_t.forEach(t),wor=r(pZ," to load the model weights."),pZ.forEach(t),Aor=i(J0),T(sM.$$.fragment,J0),J0.forEach(t),yor=i(ll),uo=n(ll,"DIV",{class:!0});var va=s(uo);T(E8.$$.fragment,va),Lor=i(va),s_e=n(va,"P",{});var l_t=s(s_e);xor=r(l_t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),l_t.forEach(t),$or=i(va),Wa=n(va,"P",{});var Y0=s(Wa);kor=r(Y0,"The model class to instantiate is selected based on the "),l_e=n(Y0,"CODE",{});var i_t=s(l_e);Sor=r(i_t,"model_type"),i_t.forEach(t),Ror=r(Y0,` property of the config object (either
passed as an argument or loaded from `),i_e=n(Y0,"CODE",{});var d_t=s(i_e);Por=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),Bor=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(Y0,"CODE",{});var c_t=s(d_e);Ior=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),qor=r(Y0,":"),Y0.forEach(t),Nor=i(va),yd=n(va,"UL",{});var _Z=s(yd);lM=n(_Z,"LI",{});var N$e=s(lM);c_e=n(N$e,"STRONG",{});var m_t=s(c_e);jor=r(m_t,"deit"),m_t.forEach(t),Dor=r(N$e," \u2014 "),ez=n(N$e,"A",{href:!0});var f_t=s(ez);Gor=r(f_t,"DeiTForMaskedImageModeling"),f_t.forEach(t),Oor=r(N$e," (DeiT model)"),N$e.forEach(t),Vor=i(_Z),iM=n(_Z,"LI",{});var j$e=s(iM);m_e=n(j$e,"STRONG",{});var g_t=s(m_e);Xor=r(g_t,"swin"),g_t.forEach(t),zor=r(j$e," \u2014 "),oz=n(j$e,"A",{href:!0});var h_t=s(oz);Wor=r(h_t,"SwinForMaskedImageModeling"),h_t.forEach(t),Qor=r(j$e," (Swin model)"),j$e.forEach(t),Hor=i(_Z),dM=n(_Z,"LI",{});var D$e=s(dM);f_e=n(D$e,"STRONG",{});var u_t=s(f_e);Uor=r(u_t,"vit"),u_t.forEach(t),Jor=r(D$e," \u2014 "),rz=n(D$e,"A",{href:!0});var p_t=s(rz);Yor=r(p_t,"ViTForMaskedImageModeling"),p_t.forEach(t),Kor=r(D$e," (ViT model)"),D$e.forEach(t),_Z.forEach(t),Zor=i(va),cM=n(va,"P",{});var G$e=s(cM);err=r(G$e,"The model is set in evaluation mode by default using "),g_e=n(G$e,"CODE",{});var __t=s(g_e);orr=r(__t,"model.eval()"),__t.forEach(t),rrr=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h_e=n(G$e,"CODE",{});var b_t=s(h_e);trr=r(b_t,"model.train()"),b_t.forEach(t),G$e.forEach(t),arr=i(va),T(mM.$$.fragment,va),va.forEach(t),ll.forEach(t),Pqe=i(m),Ld=n(m,"H2",{class:!0});var jje=s(Ld);fM=n(jje,"A",{id:!0,class:!0,href:!0});var v_t=s(fM);u_e=n(v_t,"SPAN",{});var F_t=s(u_e);T(C8.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),nrr=i(jje),p_e=n(jje,"SPAN",{});var T_t=s(p_e);srr=r(T_t,"AutoModelForObjectDetection"),T_t.forEach(t),jje.forEach(t),Bqe=i(m),Qo=n(m,"DIV",{class:!0});var il=s(Qo);T(w8.$$.fragment,il),lrr=i(il),xd=n(il,"P",{});var bZ=s(xd);irr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tz=n(bZ,"A",{href:!0});var M_t=s(tz);drr=r(M_t,"from_pretrained()"),M_t.forEach(t),crr=r(bZ," class method or the "),az=n(bZ,"A",{href:!0});var E_t=s(az);mrr=r(E_t,"from_config()"),E_t.forEach(t),frr=r(bZ,` class
method.`),bZ.forEach(t),grr=i(il),A8=n(il,"P",{});var Dje=s(A8);hrr=r(Dje,"This class cannot be instantiated directly using "),__e=n(Dje,"CODE",{});var C_t=s(__e);urr=r(C_t,"__init__()"),C_t.forEach(t),prr=r(Dje," (throws an error)."),Dje.forEach(t),_rr=i(il),Et=n(il,"DIV",{class:!0});var K0=s(Et);T(y8.$$.fragment,K0),brr=i(K0),b_e=n(K0,"P",{});var w_t=s(b_e);vrr=r(w_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),w_t.forEach(t),Frr=i(K0),$d=n(K0,"P",{});var vZ=s($d);Trr=r(vZ,`Note:
Loading a model from its configuration file does `),v_e=n(vZ,"STRONG",{});var A_t=s(v_e);Mrr=r(A_t,"not"),A_t.forEach(t),Err=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(vZ,"A",{href:!0});var y_t=s(nz);Crr=r(y_t,"from_pretrained()"),y_t.forEach(t),wrr=r(vZ," to load the model weights."),vZ.forEach(t),Arr=i(K0),T(gM.$$.fragment,K0),K0.forEach(t),yrr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(L8.$$.fragment,Fa),Lrr=i(Fa),F_e=n(Fa,"P",{});var L_t=s(F_e);xrr=r(L_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),L_t.forEach(t),$rr=i(Fa),Qa=n(Fa,"P",{});var Z0=s(Qa);krr=r(Z0,"The model class to instantiate is selected based on the "),T_e=n(Z0,"CODE",{});var x_t=s(T_e);Srr=r(x_t,"model_type"),x_t.forEach(t),Rrr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Z0,"CODE",{});var $_t=s(M_e);Prr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Brr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Z0,"CODE",{});var k_t=s(E_e);Irr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),qrr=r(Z0,":"),Z0.forEach(t),Nrr=i(Fa),x8=n(Fa,"UL",{});var Gje=s(x8);hM=n(Gje,"LI",{});var O$e=s(hM);C_e=n(O$e,"STRONG",{});var S_t=s(C_e);jrr=r(S_t,"detr"),S_t.forEach(t),Drr=r(O$e," \u2014 "),sz=n(O$e,"A",{href:!0});var R_t=s(sz);Grr=r(R_t,"DetrForObjectDetection"),R_t.forEach(t),Orr=r(O$e," (DETR model)"),O$e.forEach(t),Vrr=i(Gje),uM=n(Gje,"LI",{});var V$e=s(uM);w_e=n(V$e,"STRONG",{});var P_t=s(w_e);Xrr=r(P_t,"yolos"),P_t.forEach(t),zrr=r(V$e," \u2014 "),lz=n(V$e,"A",{href:!0});var B_t=s(lz);Wrr=r(B_t,"YolosForObjectDetection"),B_t.forEach(t),Qrr=r(V$e," (YOLOS model)"),V$e.forEach(t),Gje.forEach(t),Hrr=i(Fa),pM=n(Fa,"P",{});var X$e=s(pM);Urr=r(X$e,"The model is set in evaluation mode by default using "),A_e=n(X$e,"CODE",{});var I_t=s(A_e);Jrr=r(I_t,"model.eval()"),I_t.forEach(t),Yrr=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(X$e,"CODE",{});var q_t=s(y_e);Krr=r(q_t,"model.train()"),q_t.forEach(t),X$e.forEach(t),Zrr=i(Fa),T(_M.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Iqe=i(m),kd=n(m,"H2",{class:!0});var Oje=s(kd);bM=n(Oje,"A",{id:!0,class:!0,href:!0});var N_t=s(bM);L_e=n(N_t,"SPAN",{});var j_t=s(L_e);T($8.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),etr=i(Oje),x_e=n(Oje,"SPAN",{});var D_t=s(x_e);otr=r(D_t,"AutoModelForImageSegmentation"),D_t.forEach(t),Oje.forEach(t),qqe=i(m),Ho=n(m,"DIV",{class:!0});var dl=s(Ho);T(k8.$$.fragment,dl),rtr=i(dl),Sd=n(dl,"P",{});var FZ=s(Sd);ttr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iz=n(FZ,"A",{href:!0});var G_t=s(iz);atr=r(G_t,"from_pretrained()"),G_t.forEach(t),ntr=r(FZ," class method or the "),dz=n(FZ,"A",{href:!0});var O_t=s(dz);str=r(O_t,"from_config()"),O_t.forEach(t),ltr=r(FZ,` class
method.`),FZ.forEach(t),itr=i(dl),S8=n(dl,"P",{});var Vje=s(S8);dtr=r(Vje,"This class cannot be instantiated directly using "),$_e=n(Vje,"CODE",{});var V_t=s($_e);ctr=r(V_t,"__init__()"),V_t.forEach(t),mtr=r(Vje," (throws an error)."),Vje.forEach(t),ftr=i(dl),Ct=n(dl,"DIV",{class:!0});var e6=s(Ct);T(R8.$$.fragment,e6),gtr=i(e6),k_e=n(e6,"P",{});var X_t=s(k_e);htr=r(X_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X_t.forEach(t),utr=i(e6),Rd=n(e6,"P",{});var TZ=s(Rd);ptr=r(TZ,`Note:
Loading a model from its configuration file does `),S_e=n(TZ,"STRONG",{});var z_t=s(S_e);_tr=r(z_t,"not"),z_t.forEach(t),btr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(TZ,"A",{href:!0});var W_t=s(cz);vtr=r(W_t,"from_pretrained()"),W_t.forEach(t),Ftr=r(TZ," to load the model weights."),TZ.forEach(t),Ttr=i(e6),T(vM.$$.fragment,e6),e6.forEach(t),Mtr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(P8.$$.fragment,Ta),Etr=i(Ta),R_e=n(Ta,"P",{});var Q_t=s(R_e);Ctr=r(Q_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Q_t.forEach(t),wtr=i(Ta),Ha=n(Ta,"P",{});var o6=s(Ha);Atr=r(o6,"The model class to instantiate is selected based on the "),P_e=n(o6,"CODE",{});var H_t=s(P_e);ytr=r(H_t,"model_type"),H_t.forEach(t),Ltr=r(o6,` property of the config object (either
passed as an argument or loaded from `),B_e=n(o6,"CODE",{});var U_t=s(B_e);xtr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),$tr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(o6,"CODE",{});var J_t=s(I_e);ktr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Str=r(o6,":"),o6.forEach(t),Rtr=i(Ta),q_e=n(Ta,"UL",{});var Y_t=s(q_e);FM=n(Y_t,"LI",{});var z$e=s(FM);N_e=n(z$e,"STRONG",{});var K_t=s(N_e);Ptr=r(K_t,"detr"),K_t.forEach(t),Btr=r(z$e," \u2014 "),mz=n(z$e,"A",{href:!0});var Z_t=s(mz);Itr=r(Z_t,"DetrForSegmentation"),Z_t.forEach(t),qtr=r(z$e," (DETR model)"),z$e.forEach(t),Y_t.forEach(t),Ntr=i(Ta),TM=n(Ta,"P",{});var W$e=s(TM);jtr=r(W$e,"The model is set in evaluation mode by default using "),j_e=n(W$e,"CODE",{});var ebt=s(j_e);Dtr=r(ebt,"model.eval()"),ebt.forEach(t),Gtr=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(W$e,"CODE",{});var obt=s(D_e);Otr=r(obt,"model.train()"),obt.forEach(t),W$e.forEach(t),Vtr=i(Ta),T(MM.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Nqe=i(m),Pd=n(m,"H2",{class:!0});var Xje=s(Pd);EM=n(Xje,"A",{id:!0,class:!0,href:!0});var rbt=s(EM);G_e=n(rbt,"SPAN",{});var tbt=s(G_e);T(B8.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),Xtr=i(Xje),O_e=n(Xje,"SPAN",{});var abt=s(O_e);ztr=r(abt,"AutoModelForSemanticSegmentation"),abt.forEach(t),Xje.forEach(t),jqe=i(m),Uo=n(m,"DIV",{class:!0});var cl=s(Uo);T(I8.$$.fragment,cl),Wtr=i(cl),Bd=n(cl,"P",{});var MZ=s(Bd);Qtr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),fz=n(MZ,"A",{href:!0});var nbt=s(fz);Htr=r(nbt,"from_pretrained()"),nbt.forEach(t),Utr=r(MZ," class method or the "),gz=n(MZ,"A",{href:!0});var sbt=s(gz);Jtr=r(sbt,"from_config()"),sbt.forEach(t),Ytr=r(MZ,` class
method.`),MZ.forEach(t),Ktr=i(cl),q8=n(cl,"P",{});var zje=s(q8);Ztr=r(zje,"This class cannot be instantiated directly using "),V_e=n(zje,"CODE",{});var lbt=s(V_e);ear=r(lbt,"__init__()"),lbt.forEach(t),oar=r(zje," (throws an error)."),zje.forEach(t),rar=i(cl),wt=n(cl,"DIV",{class:!0});var r6=s(wt);T(N8.$$.fragment,r6),tar=i(r6),X_e=n(r6,"P",{});var ibt=s(X_e);aar=r(ibt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ibt.forEach(t),nar=i(r6),Id=n(r6,"P",{});var EZ=s(Id);sar=r(EZ,`Note:
Loading a model from its configuration file does `),z_e=n(EZ,"STRONG",{});var dbt=s(z_e);lar=r(dbt,"not"),dbt.forEach(t),iar=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(EZ,"A",{href:!0});var cbt=s(hz);dar=r(cbt,"from_pretrained()"),cbt.forEach(t),car=r(EZ," to load the model weights."),EZ.forEach(t),mar=i(r6),T(CM.$$.fragment,r6),r6.forEach(t),far=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(j8.$$.fragment,Ma),gar=i(Ma),W_e=n(Ma,"P",{});var mbt=s(W_e);har=r(mbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mbt.forEach(t),uar=i(Ma),Ua=n(Ma,"P",{});var t6=s(Ua);par=r(t6,"The model class to instantiate is selected based on the "),Q_e=n(t6,"CODE",{});var fbt=s(Q_e);_ar=r(fbt,"model_type"),fbt.forEach(t),bar=r(t6,` property of the config object (either
passed as an argument or loaded from `),H_e=n(t6,"CODE",{});var gbt=s(H_e);Far=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),Tar=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(t6,"CODE",{});var hbt=s(U_e);Mar=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Ear=r(t6,":"),t6.forEach(t),Car=i(Ma),Ja=n(Ma,"UL",{});var a6=s(Ja);wM=n(a6,"LI",{});var Q$e=s(wM);J_e=n(Q$e,"STRONG",{});var ubt=s(J_e);war=r(ubt,"beit"),ubt.forEach(t),Aar=r(Q$e," \u2014 "),uz=n(Q$e,"A",{href:!0});var pbt=s(uz);yar=r(pbt,"BeitForSemanticSegmentation"),pbt.forEach(t),Lar=r(Q$e," (BEiT model)"),Q$e.forEach(t),xar=i(a6),AM=n(a6,"LI",{});var H$e=s(AM);Y_e=n(H$e,"STRONG",{});var _bt=s(Y_e);$ar=r(_bt,"data2vec-vision"),_bt.forEach(t),kar=r(H$e," \u2014 "),pz=n(H$e,"A",{href:!0});var bbt=s(pz);Sar=r(bbt,"Data2VecVisionForSemanticSegmentation"),bbt.forEach(t),Rar=r(H$e," (Data2VecVision model)"),H$e.forEach(t),Par=i(a6),yM=n(a6,"LI",{});var U$e=s(yM);K_e=n(U$e,"STRONG",{});var vbt=s(K_e);Bar=r(vbt,"dpt"),vbt.forEach(t),Iar=r(U$e," \u2014 "),_z=n(U$e,"A",{href:!0});var Fbt=s(_z);qar=r(Fbt,"DPTForSemanticSegmentation"),Fbt.forEach(t),Nar=r(U$e," (DPT model)"),U$e.forEach(t),jar=i(a6),LM=n(a6,"LI",{});var J$e=s(LM);Z_e=n(J$e,"STRONG",{});var Tbt=s(Z_e);Dar=r(Tbt,"segformer"),Tbt.forEach(t),Gar=r(J$e," \u2014 "),bz=n(J$e,"A",{href:!0});var Mbt=s(bz);Oar=r(Mbt,"SegformerForSemanticSegmentation"),Mbt.forEach(t),Var=r(J$e," (SegFormer model)"),J$e.forEach(t),a6.forEach(t),Xar=i(Ma),xM=n(Ma,"P",{});var Y$e=s(xM);zar=r(Y$e,"The model is set in evaluation mode by default using "),ebe=n(Y$e,"CODE",{});var Ebt=s(ebe);War=r(Ebt,"model.eval()"),Ebt.forEach(t),Qar=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(Y$e,"CODE",{});var Cbt=s(obe);Har=r(Cbt,"model.train()"),Cbt.forEach(t),Y$e.forEach(t),Uar=i(Ma),T($M.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Dqe=i(m),qd=n(m,"H2",{class:!0});var Wje=s(qd);kM=n(Wje,"A",{id:!0,class:!0,href:!0});var wbt=s(kM);rbe=n(wbt,"SPAN",{});var Abt=s(rbe);T(D8.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),Jar=i(Wje),tbe=n(Wje,"SPAN",{});var ybt=s(tbe);Yar=r(ybt,"AutoModelForInstanceSegmentation"),ybt.forEach(t),Wje.forEach(t),Gqe=i(m),Jo=n(m,"DIV",{class:!0});var ml=s(Jo);T(G8.$$.fragment,ml),Kar=i(ml),Nd=n(ml,"P",{});var CZ=s(Nd);Zar=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vz=n(CZ,"A",{href:!0});var Lbt=s(vz);enr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),onr=r(CZ," class method or the "),Fz=n(CZ,"A",{href:!0});var xbt=s(Fz);rnr=r(xbt,"from_config()"),xbt.forEach(t),tnr=r(CZ,` class
method.`),CZ.forEach(t),anr=i(ml),O8=n(ml,"P",{});var Qje=s(O8);nnr=r(Qje,"This class cannot be instantiated directly using "),abe=n(Qje,"CODE",{});var $bt=s(abe);snr=r($bt,"__init__()"),$bt.forEach(t),lnr=r(Qje," (throws an error)."),Qje.forEach(t),inr=i(ml),At=n(ml,"DIV",{class:!0});var n6=s(At);T(V8.$$.fragment,n6),dnr=i(n6),nbe=n(n6,"P",{});var kbt=s(nbe);cnr=r(kbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kbt.forEach(t),mnr=i(n6),jd=n(n6,"P",{});var wZ=s(jd);fnr=r(wZ,`Note:
Loading a model from its configuration file does `),sbe=n(wZ,"STRONG",{});var Sbt=s(sbe);gnr=r(Sbt,"not"),Sbt.forEach(t),hnr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(wZ,"A",{href:!0});var Rbt=s(Tz);unr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),pnr=r(wZ," to load the model weights."),wZ.forEach(t),_nr=i(n6),T(SM.$$.fragment,n6),n6.forEach(t),bnr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(X8.$$.fragment,Ea),vnr=i(Ea),lbe=n(Ea,"P",{});var Pbt=s(lbe);Fnr=r(Pbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Pbt.forEach(t),Tnr=i(Ea),Ya=n(Ea,"P",{});var s6=s(Ya);Mnr=r(s6,"The model class to instantiate is selected based on the "),ibe=n(s6,"CODE",{});var Bbt=s(ibe);Enr=r(Bbt,"model_type"),Bbt.forEach(t),Cnr=r(s6,` property of the config object (either
passed as an argument or loaded from `),dbe=n(s6,"CODE",{});var Ibt=s(dbe);wnr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Anr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(s6,"CODE",{});var qbt=s(cbe);ynr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Lnr=r(s6,":"),s6.forEach(t),xnr=i(Ea),mbe=n(Ea,"UL",{});var Nbt=s(mbe);RM=n(Nbt,"LI",{});var K$e=s(RM);fbe=n(K$e,"STRONG",{});var jbt=s(fbe);$nr=r(jbt,"maskformer"),jbt.forEach(t),knr=r(K$e," \u2014 "),Mz=n(K$e,"A",{href:!0});var Dbt=s(Mz);Snr=r(Dbt,"MaskFormerForInstanceSegmentation"),Dbt.forEach(t),Rnr=r(K$e," (MaskFormer model)"),K$e.forEach(t),Nbt.forEach(t),Pnr=i(Ea),PM=n(Ea,"P",{});var Z$e=s(PM);Bnr=r(Z$e,"The model is set in evaluation mode by default using "),gbe=n(Z$e,"CODE",{});var Gbt=s(gbe);Inr=r(Gbt,"model.eval()"),Gbt.forEach(t),qnr=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=n(Z$e,"CODE",{});var Obt=s(hbe);Nnr=r(Obt,"model.train()"),Obt.forEach(t),Z$e.forEach(t),jnr=i(Ea),T(BM.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Oqe=i(m),Dd=n(m,"H2",{class:!0});var Hje=s(Dd);IM=n(Hje,"A",{id:!0,class:!0,href:!0});var Vbt=s(IM);ube=n(Vbt,"SPAN",{});var Xbt=s(ube);T(z8.$$.fragment,Xbt),Xbt.forEach(t),Vbt.forEach(t),Dnr=i(Hje),pbe=n(Hje,"SPAN",{});var zbt=s(pbe);Gnr=r(zbt,"TFAutoModel"),zbt.forEach(t),Hje.forEach(t),Vqe=i(m),Yo=n(m,"DIV",{class:!0});var fl=s(Yo);T(W8.$$.fragment,fl),Onr=i(fl),Gd=n(fl,"P",{});var AZ=s(Gd);Vnr=r(AZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ez=n(AZ,"A",{href:!0});var Wbt=s(Ez);Xnr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),znr=r(AZ," class method or the "),Cz=n(AZ,"A",{href:!0});var Qbt=s(Cz);Wnr=r(Qbt,"from_config()"),Qbt.forEach(t),Qnr=r(AZ,` class
method.`),AZ.forEach(t),Hnr=i(fl),Q8=n(fl,"P",{});var Uje=s(Q8);Unr=r(Uje,"This class cannot be instantiated directly using "),_be=n(Uje,"CODE",{});var Hbt=s(_be);Jnr=r(Hbt,"__init__()"),Hbt.forEach(t),Ynr=r(Uje," (throws an error)."),Uje.forEach(t),Knr=i(fl),yt=n(fl,"DIV",{class:!0});var l6=s(yt);T(H8.$$.fragment,l6),Znr=i(l6),bbe=n(l6,"P",{});var Ubt=s(bbe);esr=r(Ubt,"Instantiates one of the base model classes of the library from a configuration."),Ubt.forEach(t),osr=i(l6),Od=n(l6,"P",{});var yZ=s(Od);rsr=r(yZ,`Note:
Loading a model from its configuration file does `),vbe=n(yZ,"STRONG",{});var Jbt=s(vbe);tsr=r(Jbt,"not"),Jbt.forEach(t),asr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(yZ,"A",{href:!0});var Ybt=s(wz);nsr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),ssr=r(yZ," to load the model weights."),yZ.forEach(t),lsr=i(l6),T(qM.$$.fragment,l6),l6.forEach(t),isr=i(fl),wr=n(fl,"DIV",{class:!0});var gl=s(wr);T(U8.$$.fragment,gl),dsr=i(gl),Fbe=n(gl,"P",{});var Kbt=s(Fbe);csr=r(Kbt,"Instantiate one of the base model classes of the library from a pretrained model."),Kbt.forEach(t),msr=i(gl),Ka=n(gl,"P",{});var i6=s(Ka);fsr=r(i6,"The model class to instantiate is selected based on the "),Tbe=n(i6,"CODE",{});var Zbt=s(Tbe);gsr=r(Zbt,"model_type"),Zbt.forEach(t),hsr=r(i6,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(i6,"CODE",{});var e2t=s(Mbe);usr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),psr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(i6,"CODE",{});var o2t=s(Ebe);_sr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),bsr=r(i6,":"),i6.forEach(t),vsr=i(gl),N=n(gl,"UL",{});var D=s(N);NM=n(D,"LI",{});var eke=s(NM);Cbe=n(eke,"STRONG",{});var r2t=s(Cbe);Fsr=r(r2t,"albert"),r2t.forEach(t),Tsr=r(eke," \u2014 "),Az=n(eke,"A",{href:!0});var t2t=s(Az);Msr=r(t2t,"TFAlbertModel"),t2t.forEach(t),Esr=r(eke," (ALBERT model)"),eke.forEach(t),Csr=i(D),jM=n(D,"LI",{});var oke=s(jM);wbe=n(oke,"STRONG",{});var a2t=s(wbe);wsr=r(a2t,"bart"),a2t.forEach(t),Asr=r(oke," \u2014 "),yz=n(oke,"A",{href:!0});var n2t=s(yz);ysr=r(n2t,"TFBartModel"),n2t.forEach(t),Lsr=r(oke," (BART model)"),oke.forEach(t),xsr=i(D),DM=n(D,"LI",{});var rke=s(DM);Abe=n(rke,"STRONG",{});var s2t=s(Abe);$sr=r(s2t,"bert"),s2t.forEach(t),ksr=r(rke," \u2014 "),Lz=n(rke,"A",{href:!0});var l2t=s(Lz);Ssr=r(l2t,"TFBertModel"),l2t.forEach(t),Rsr=r(rke," (BERT model)"),rke.forEach(t),Psr=i(D),GM=n(D,"LI",{});var tke=s(GM);ybe=n(tke,"STRONG",{});var i2t=s(ybe);Bsr=r(i2t,"blenderbot"),i2t.forEach(t),Isr=r(tke," \u2014 "),xz=n(tke,"A",{href:!0});var d2t=s(xz);qsr=r(d2t,"TFBlenderbotModel"),d2t.forEach(t),Nsr=r(tke," (Blenderbot model)"),tke.forEach(t),jsr=i(D),OM=n(D,"LI",{});var ake=s(OM);Lbe=n(ake,"STRONG",{});var c2t=s(Lbe);Dsr=r(c2t,"blenderbot-small"),c2t.forEach(t),Gsr=r(ake," \u2014 "),$z=n(ake,"A",{href:!0});var m2t=s($z);Osr=r(m2t,"TFBlenderbotSmallModel"),m2t.forEach(t),Vsr=r(ake," (BlenderbotSmall model)"),ake.forEach(t),Xsr=i(D),VM=n(D,"LI",{});var nke=s(VM);xbe=n(nke,"STRONG",{});var f2t=s(xbe);zsr=r(f2t,"camembert"),f2t.forEach(t),Wsr=r(nke," \u2014 "),kz=n(nke,"A",{href:!0});var g2t=s(kz);Qsr=r(g2t,"TFCamembertModel"),g2t.forEach(t),Hsr=r(nke," (CamemBERT model)"),nke.forEach(t),Usr=i(D),XM=n(D,"LI",{});var ske=s(XM);$be=n(ske,"STRONG",{});var h2t=s($be);Jsr=r(h2t,"clip"),h2t.forEach(t),Ysr=r(ske," \u2014 "),Sz=n(ske,"A",{href:!0});var u2t=s(Sz);Ksr=r(u2t,"TFCLIPModel"),u2t.forEach(t),Zsr=r(ske," (CLIP model)"),ske.forEach(t),elr=i(D),zM=n(D,"LI",{});var lke=s(zM);kbe=n(lke,"STRONG",{});var p2t=s(kbe);olr=r(p2t,"convbert"),p2t.forEach(t),rlr=r(lke," \u2014 "),Rz=n(lke,"A",{href:!0});var _2t=s(Rz);tlr=r(_2t,"TFConvBertModel"),_2t.forEach(t),alr=r(lke," (ConvBERT model)"),lke.forEach(t),nlr=i(D),WM=n(D,"LI",{});var ike=s(WM);Sbe=n(ike,"STRONG",{});var b2t=s(Sbe);slr=r(b2t,"convnext"),b2t.forEach(t),llr=r(ike," \u2014 "),Pz=n(ike,"A",{href:!0});var v2t=s(Pz);ilr=r(v2t,"TFConvNextModel"),v2t.forEach(t),dlr=r(ike," (ConvNext model)"),ike.forEach(t),clr=i(D),QM=n(D,"LI",{});var dke=s(QM);Rbe=n(dke,"STRONG",{});var F2t=s(Rbe);mlr=r(F2t,"ctrl"),F2t.forEach(t),flr=r(dke," \u2014 "),Bz=n(dke,"A",{href:!0});var T2t=s(Bz);glr=r(T2t,"TFCTRLModel"),T2t.forEach(t),hlr=r(dke," (CTRL model)"),dke.forEach(t),ulr=i(D),HM=n(D,"LI",{});var cke=s(HM);Pbe=n(cke,"STRONG",{});var M2t=s(Pbe);plr=r(M2t,"data2vec-vision"),M2t.forEach(t),_lr=r(cke," \u2014 "),Iz=n(cke,"A",{href:!0});var E2t=s(Iz);blr=r(E2t,"TFData2VecVisionModel"),E2t.forEach(t),vlr=r(cke," (Data2VecVision model)"),cke.forEach(t),Flr=i(D),UM=n(D,"LI",{});var mke=s(UM);Bbe=n(mke,"STRONG",{});var C2t=s(Bbe);Tlr=r(C2t,"deberta"),C2t.forEach(t),Mlr=r(mke," \u2014 "),qz=n(mke,"A",{href:!0});var w2t=s(qz);Elr=r(w2t,"TFDebertaModel"),w2t.forEach(t),Clr=r(mke," (DeBERTa model)"),mke.forEach(t),wlr=i(D),JM=n(D,"LI",{});var fke=s(JM);Ibe=n(fke,"STRONG",{});var A2t=s(Ibe);Alr=r(A2t,"deberta-v2"),A2t.forEach(t),ylr=r(fke," \u2014 "),Nz=n(fke,"A",{href:!0});var y2t=s(Nz);Llr=r(y2t,"TFDebertaV2Model"),y2t.forEach(t),xlr=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),$lr=i(D),YM=n(D,"LI",{});var gke=s(YM);qbe=n(gke,"STRONG",{});var L2t=s(qbe);klr=r(L2t,"distilbert"),L2t.forEach(t),Slr=r(gke," \u2014 "),jz=n(gke,"A",{href:!0});var x2t=s(jz);Rlr=r(x2t,"TFDistilBertModel"),x2t.forEach(t),Plr=r(gke," (DistilBERT model)"),gke.forEach(t),Blr=i(D),KM=n(D,"LI",{});var hke=s(KM);Nbe=n(hke,"STRONG",{});var $2t=s(Nbe);Ilr=r($2t,"dpr"),$2t.forEach(t),qlr=r(hke," \u2014 "),Dz=n(hke,"A",{href:!0});var k2t=s(Dz);Nlr=r(k2t,"TFDPRQuestionEncoder"),k2t.forEach(t),jlr=r(hke," (DPR model)"),hke.forEach(t),Dlr=i(D),ZM=n(D,"LI",{});var uke=s(ZM);jbe=n(uke,"STRONG",{});var S2t=s(jbe);Glr=r(S2t,"electra"),S2t.forEach(t),Olr=r(uke," \u2014 "),Gz=n(uke,"A",{href:!0});var R2t=s(Gz);Vlr=r(R2t,"TFElectraModel"),R2t.forEach(t),Xlr=r(uke," (ELECTRA model)"),uke.forEach(t),zlr=i(D),e4=n(D,"LI",{});var pke=s(e4);Dbe=n(pke,"STRONG",{});var P2t=s(Dbe);Wlr=r(P2t,"flaubert"),P2t.forEach(t),Qlr=r(pke," \u2014 "),Oz=n(pke,"A",{href:!0});var B2t=s(Oz);Hlr=r(B2t,"TFFlaubertModel"),B2t.forEach(t),Ulr=r(pke," (FlauBERT model)"),pke.forEach(t),Jlr=i(D),Bs=n(D,"LI",{});var A$=s(Bs);Gbe=n(A$,"STRONG",{});var I2t=s(Gbe);Ylr=r(I2t,"funnel"),I2t.forEach(t),Klr=r(A$," \u2014 "),Vz=n(A$,"A",{href:!0});var q2t=s(Vz);Zlr=r(q2t,"TFFunnelModel"),q2t.forEach(t),eir=r(A$," or "),Xz=n(A$,"A",{href:!0});var N2t=s(Xz);oir=r(N2t,"TFFunnelBaseModel"),N2t.forEach(t),rir=r(A$," (Funnel Transformer model)"),A$.forEach(t),tir=i(D),o4=n(D,"LI",{});var _ke=s(o4);Obe=n(_ke,"STRONG",{});var j2t=s(Obe);air=r(j2t,"gpt2"),j2t.forEach(t),nir=r(_ke," \u2014 "),zz=n(_ke,"A",{href:!0});var D2t=s(zz);sir=r(D2t,"TFGPT2Model"),D2t.forEach(t),lir=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),iir=i(D),r4=n(D,"LI",{});var bke=s(r4);Vbe=n(bke,"STRONG",{});var G2t=s(Vbe);dir=r(G2t,"gptj"),G2t.forEach(t),cir=r(bke," \u2014 "),Wz=n(bke,"A",{href:!0});var O2t=s(Wz);mir=r(O2t,"TFGPTJModel"),O2t.forEach(t),fir=r(bke," (GPT-J model)"),bke.forEach(t),gir=i(D),t4=n(D,"LI",{});var vke=s(t4);Xbe=n(vke,"STRONG",{});var V2t=s(Xbe);hir=r(V2t,"hubert"),V2t.forEach(t),uir=r(vke," \u2014 "),Qz=n(vke,"A",{href:!0});var X2t=s(Qz);pir=r(X2t,"TFHubertModel"),X2t.forEach(t),_ir=r(vke," (Hubert model)"),vke.forEach(t),bir=i(D),a4=n(D,"LI",{});var Fke=s(a4);zbe=n(Fke,"STRONG",{});var z2t=s(zbe);vir=r(z2t,"layoutlm"),z2t.forEach(t),Fir=r(Fke," \u2014 "),Hz=n(Fke,"A",{href:!0});var W2t=s(Hz);Tir=r(W2t,"TFLayoutLMModel"),W2t.forEach(t),Mir=r(Fke," (LayoutLM model)"),Fke.forEach(t),Eir=i(D),n4=n(D,"LI",{});var Tke=s(n4);Wbe=n(Tke,"STRONG",{});var Q2t=s(Wbe);Cir=r(Q2t,"led"),Q2t.forEach(t),wir=r(Tke," \u2014 "),Uz=n(Tke,"A",{href:!0});var H2t=s(Uz);Air=r(H2t,"TFLEDModel"),H2t.forEach(t),yir=r(Tke," (LED model)"),Tke.forEach(t),Lir=i(D),s4=n(D,"LI",{});var Mke=s(s4);Qbe=n(Mke,"STRONG",{});var U2t=s(Qbe);xir=r(U2t,"longformer"),U2t.forEach(t),$ir=r(Mke," \u2014 "),Jz=n(Mke,"A",{href:!0});var J2t=s(Jz);kir=r(J2t,"TFLongformerModel"),J2t.forEach(t),Sir=r(Mke," (Longformer model)"),Mke.forEach(t),Rir=i(D),l4=n(D,"LI",{});var Eke=s(l4);Hbe=n(Eke,"STRONG",{});var Y2t=s(Hbe);Pir=r(Y2t,"lxmert"),Y2t.forEach(t),Bir=r(Eke," \u2014 "),Yz=n(Eke,"A",{href:!0});var K2t=s(Yz);Iir=r(K2t,"TFLxmertModel"),K2t.forEach(t),qir=r(Eke," (LXMERT model)"),Eke.forEach(t),Nir=i(D),i4=n(D,"LI",{});var Cke=s(i4);Ube=n(Cke,"STRONG",{});var Z2t=s(Ube);jir=r(Z2t,"marian"),Z2t.forEach(t),Dir=r(Cke," \u2014 "),Kz=n(Cke,"A",{href:!0});var evt=s(Kz);Gir=r(evt,"TFMarianModel"),evt.forEach(t),Oir=r(Cke," (Marian model)"),Cke.forEach(t),Vir=i(D),d4=n(D,"LI",{});var wke=s(d4);Jbe=n(wke,"STRONG",{});var ovt=s(Jbe);Xir=r(ovt,"mbart"),ovt.forEach(t),zir=r(wke," \u2014 "),Zz=n(wke,"A",{href:!0});var rvt=s(Zz);Wir=r(rvt,"TFMBartModel"),rvt.forEach(t),Qir=r(wke," (mBART model)"),wke.forEach(t),Hir=i(D),c4=n(D,"LI",{});var Ake=s(c4);Ybe=n(Ake,"STRONG",{});var tvt=s(Ybe);Uir=r(tvt,"mobilebert"),tvt.forEach(t),Jir=r(Ake," \u2014 "),eW=n(Ake,"A",{href:!0});var avt=s(eW);Yir=r(avt,"TFMobileBertModel"),avt.forEach(t),Kir=r(Ake," (MobileBERT model)"),Ake.forEach(t),Zir=i(D),m4=n(D,"LI",{});var yke=s(m4);Kbe=n(yke,"STRONG",{});var nvt=s(Kbe);edr=r(nvt,"mpnet"),nvt.forEach(t),odr=r(yke," \u2014 "),oW=n(yke,"A",{href:!0});var svt=s(oW);rdr=r(svt,"TFMPNetModel"),svt.forEach(t),tdr=r(yke," (MPNet model)"),yke.forEach(t),adr=i(D),f4=n(D,"LI",{});var Lke=s(f4);Zbe=n(Lke,"STRONG",{});var lvt=s(Zbe);ndr=r(lvt,"mt5"),lvt.forEach(t),sdr=r(Lke," \u2014 "),rW=n(Lke,"A",{href:!0});var ivt=s(rW);ldr=r(ivt,"TFMT5Model"),ivt.forEach(t),idr=r(Lke," (mT5 model)"),Lke.forEach(t),ddr=i(D),g4=n(D,"LI",{});var xke=s(g4);e2e=n(xke,"STRONG",{});var dvt=s(e2e);cdr=r(dvt,"openai-gpt"),dvt.forEach(t),mdr=r(xke," \u2014 "),tW=n(xke,"A",{href:!0});var cvt=s(tW);fdr=r(cvt,"TFOpenAIGPTModel"),cvt.forEach(t),gdr=r(xke," (OpenAI GPT model)"),xke.forEach(t),hdr=i(D),h4=n(D,"LI",{});var $ke=s(h4);o2e=n($ke,"STRONG",{});var mvt=s(o2e);udr=r(mvt,"pegasus"),mvt.forEach(t),pdr=r($ke," \u2014 "),aW=n($ke,"A",{href:!0});var fvt=s(aW);_dr=r(fvt,"TFPegasusModel"),fvt.forEach(t),bdr=r($ke," (Pegasus model)"),$ke.forEach(t),vdr=i(D),u4=n(D,"LI",{});var kke=s(u4);r2e=n(kke,"STRONG",{});var gvt=s(r2e);Fdr=r(gvt,"rembert"),gvt.forEach(t),Tdr=r(kke," \u2014 "),nW=n(kke,"A",{href:!0});var hvt=s(nW);Mdr=r(hvt,"TFRemBertModel"),hvt.forEach(t),Edr=r(kke," (RemBERT model)"),kke.forEach(t),Cdr=i(D),p4=n(D,"LI",{});var Ske=s(p4);t2e=n(Ske,"STRONG",{});var uvt=s(t2e);wdr=r(uvt,"roberta"),uvt.forEach(t),Adr=r(Ske," \u2014 "),sW=n(Ske,"A",{href:!0});var pvt=s(sW);ydr=r(pvt,"TFRobertaModel"),pvt.forEach(t),Ldr=r(Ske," (RoBERTa model)"),Ske.forEach(t),xdr=i(D),_4=n(D,"LI",{});var Rke=s(_4);a2e=n(Rke,"STRONG",{});var _vt=s(a2e);$dr=r(_vt,"roformer"),_vt.forEach(t),kdr=r(Rke," \u2014 "),lW=n(Rke,"A",{href:!0});var bvt=s(lW);Sdr=r(bvt,"TFRoFormerModel"),bvt.forEach(t),Rdr=r(Rke," (RoFormer model)"),Rke.forEach(t),Pdr=i(D),b4=n(D,"LI",{});var Pke=s(b4);n2e=n(Pke,"STRONG",{});var vvt=s(n2e);Bdr=r(vvt,"speech_to_text"),vvt.forEach(t),Idr=r(Pke," \u2014 "),iW=n(Pke,"A",{href:!0});var Fvt=s(iW);qdr=r(Fvt,"TFSpeech2TextModel"),Fvt.forEach(t),Ndr=r(Pke," (Speech2Text model)"),Pke.forEach(t),jdr=i(D),v4=n(D,"LI",{});var Bke=s(v4);s2e=n(Bke,"STRONG",{});var Tvt=s(s2e);Ddr=r(Tvt,"swin"),Tvt.forEach(t),Gdr=r(Bke," \u2014 "),dW=n(Bke,"A",{href:!0});var Mvt=s(dW);Odr=r(Mvt,"TFSwinModel"),Mvt.forEach(t),Vdr=r(Bke," (Swin model)"),Bke.forEach(t),Xdr=i(D),F4=n(D,"LI",{});var Ike=s(F4);l2e=n(Ike,"STRONG",{});var Evt=s(l2e);zdr=r(Evt,"t5"),Evt.forEach(t),Wdr=r(Ike," \u2014 "),cW=n(Ike,"A",{href:!0});var Cvt=s(cW);Qdr=r(Cvt,"TFT5Model"),Cvt.forEach(t),Hdr=r(Ike," (T5 model)"),Ike.forEach(t),Udr=i(D),T4=n(D,"LI",{});var qke=s(T4);i2e=n(qke,"STRONG",{});var wvt=s(i2e);Jdr=r(wvt,"tapas"),wvt.forEach(t),Ydr=r(qke," \u2014 "),mW=n(qke,"A",{href:!0});var Avt=s(mW);Kdr=r(Avt,"TFTapasModel"),Avt.forEach(t),Zdr=r(qke," (TAPAS model)"),qke.forEach(t),ecr=i(D),M4=n(D,"LI",{});var Nke=s(M4);d2e=n(Nke,"STRONG",{});var yvt=s(d2e);ocr=r(yvt,"transfo-xl"),yvt.forEach(t),rcr=r(Nke," \u2014 "),fW=n(Nke,"A",{href:!0});var Lvt=s(fW);tcr=r(Lvt,"TFTransfoXLModel"),Lvt.forEach(t),acr=r(Nke," (Transformer-XL model)"),Nke.forEach(t),ncr=i(D),E4=n(D,"LI",{});var jke=s(E4);c2e=n(jke,"STRONG",{});var xvt=s(c2e);scr=r(xvt,"vit"),xvt.forEach(t),lcr=r(jke," \u2014 "),gW=n(jke,"A",{href:!0});var $vt=s(gW);icr=r($vt,"TFViTModel"),$vt.forEach(t),dcr=r(jke," (ViT model)"),jke.forEach(t),ccr=i(D),C4=n(D,"LI",{});var Dke=s(C4);m2e=n(Dke,"STRONG",{});var kvt=s(m2e);mcr=r(kvt,"vit_mae"),kvt.forEach(t),fcr=r(Dke," \u2014 "),hW=n(Dke,"A",{href:!0});var Svt=s(hW);gcr=r(Svt,"TFViTMAEModel"),Svt.forEach(t),hcr=r(Dke," (ViTMAE model)"),Dke.forEach(t),ucr=i(D),w4=n(D,"LI",{});var Gke=s(w4);f2e=n(Gke,"STRONG",{});var Rvt=s(f2e);pcr=r(Rvt,"wav2vec2"),Rvt.forEach(t),_cr=r(Gke," \u2014 "),uW=n(Gke,"A",{href:!0});var Pvt=s(uW);bcr=r(Pvt,"TFWav2Vec2Model"),Pvt.forEach(t),vcr=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),Fcr=i(D),A4=n(D,"LI",{});var Oke=s(A4);g2e=n(Oke,"STRONG",{});var Bvt=s(g2e);Tcr=r(Bvt,"xlm"),Bvt.forEach(t),Mcr=r(Oke," \u2014 "),pW=n(Oke,"A",{href:!0});var Ivt=s(pW);Ecr=r(Ivt,"TFXLMModel"),Ivt.forEach(t),Ccr=r(Oke," (XLM model)"),Oke.forEach(t),wcr=i(D),y4=n(D,"LI",{});var Vke=s(y4);h2e=n(Vke,"STRONG",{});var qvt=s(h2e);Acr=r(qvt,"xlm-roberta"),qvt.forEach(t),ycr=r(Vke," \u2014 "),_W=n(Vke,"A",{href:!0});var Nvt=s(_W);Lcr=r(Nvt,"TFXLMRobertaModel"),Nvt.forEach(t),xcr=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),$cr=i(D),L4=n(D,"LI",{});var Xke=s(L4);u2e=n(Xke,"STRONG",{});var jvt=s(u2e);kcr=r(jvt,"xlnet"),jvt.forEach(t),Scr=r(Xke," \u2014 "),bW=n(Xke,"A",{href:!0});var Dvt=s(bW);Rcr=r(Dvt,"TFXLNetModel"),Dvt.forEach(t),Pcr=r(Xke," (XLNet model)"),Xke.forEach(t),D.forEach(t),Bcr=i(gl),T(x4.$$.fragment,gl),gl.forEach(t),fl.forEach(t),Xqe=i(m),Vd=n(m,"H2",{class:!0});var Jje=s(Vd);$4=n(Jje,"A",{id:!0,class:!0,href:!0});var Gvt=s($4);p2e=n(Gvt,"SPAN",{});var Ovt=s(p2e);T(J8.$$.fragment,Ovt),Ovt.forEach(t),Gvt.forEach(t),Icr=i(Jje),_2e=n(Jje,"SPAN",{});var Vvt=s(_2e);qcr=r(Vvt,"TFAutoModelForPreTraining"),Vvt.forEach(t),Jje.forEach(t),zqe=i(m),Ko=n(m,"DIV",{class:!0});var hl=s(Ko);T(Y8.$$.fragment,hl),Ncr=i(hl),Xd=n(hl,"P",{});var LZ=s(Xd);jcr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vW=n(LZ,"A",{href:!0});var Xvt=s(vW);Dcr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Gcr=r(LZ," class method or the "),FW=n(LZ,"A",{href:!0});var zvt=s(FW);Ocr=r(zvt,"from_config()"),zvt.forEach(t),Vcr=r(LZ,` class
method.`),LZ.forEach(t),Xcr=i(hl),K8=n(hl,"P",{});var Yje=s(K8);zcr=r(Yje,"This class cannot be instantiated directly using "),b2e=n(Yje,"CODE",{});var Wvt=s(b2e);Wcr=r(Wvt,"__init__()"),Wvt.forEach(t),Qcr=r(Yje," (throws an error)."),Yje.forEach(t),Hcr=i(hl),Lt=n(hl,"DIV",{class:!0});var d6=s(Lt);T(Z8.$$.fragment,d6),Ucr=i(d6),v2e=n(d6,"P",{});var Qvt=s(v2e);Jcr=r(Qvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qvt.forEach(t),Ycr=i(d6),zd=n(d6,"P",{});var xZ=s(zd);Kcr=r(xZ,`Note:
Loading a model from its configuration file does `),F2e=n(xZ,"STRONG",{});var Hvt=s(F2e);Zcr=r(Hvt,"not"),Hvt.forEach(t),emr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(xZ,"A",{href:!0});var Uvt=s(TW);omr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),rmr=r(xZ," to load the model weights."),xZ.forEach(t),tmr=i(d6),T(k4.$$.fragment,d6),d6.forEach(t),amr=i(hl),Ar=n(hl,"DIV",{class:!0});var ul=s(Ar);T(e7.$$.fragment,ul),nmr=i(ul),T2e=n(ul,"P",{});var Jvt=s(T2e);smr=r(Jvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jvt.forEach(t),lmr=i(ul),Za=n(ul,"P",{});var c6=s(Za);imr=r(c6,"The model class to instantiate is selected based on the "),M2e=n(c6,"CODE",{});var Yvt=s(M2e);dmr=r(Yvt,"model_type"),Yvt.forEach(t),cmr=r(c6,` property of the config object (either
passed as an argument or loaded from `),E2e=n(c6,"CODE",{});var Kvt=s(E2e);mmr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),fmr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(c6,"CODE",{});var Zvt=s(C2e);gmr=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),hmr=r(c6,":"),c6.forEach(t),umr=i(ul),se=n(ul,"UL",{});var le=s(se);S4=n(le,"LI",{});var zke=s(S4);w2e=n(zke,"STRONG",{});var eFt=s(w2e);pmr=r(eFt,"albert"),eFt.forEach(t),_mr=r(zke," \u2014 "),MW=n(zke,"A",{href:!0});var oFt=s(MW);bmr=r(oFt,"TFAlbertForPreTraining"),oFt.forEach(t),vmr=r(zke," (ALBERT model)"),zke.forEach(t),Fmr=i(le),R4=n(le,"LI",{});var Wke=s(R4);A2e=n(Wke,"STRONG",{});var rFt=s(A2e);Tmr=r(rFt,"bart"),rFt.forEach(t),Mmr=r(Wke," \u2014 "),EW=n(Wke,"A",{href:!0});var tFt=s(EW);Emr=r(tFt,"TFBartForConditionalGeneration"),tFt.forEach(t),Cmr=r(Wke," (BART model)"),Wke.forEach(t),wmr=i(le),P4=n(le,"LI",{});var Qke=s(P4);y2e=n(Qke,"STRONG",{});var aFt=s(y2e);Amr=r(aFt,"bert"),aFt.forEach(t),ymr=r(Qke," \u2014 "),CW=n(Qke,"A",{href:!0});var nFt=s(CW);Lmr=r(nFt,"TFBertForPreTraining"),nFt.forEach(t),xmr=r(Qke," (BERT model)"),Qke.forEach(t),$mr=i(le),B4=n(le,"LI",{});var Hke=s(B4);L2e=n(Hke,"STRONG",{});var sFt=s(L2e);kmr=r(sFt,"camembert"),sFt.forEach(t),Smr=r(Hke," \u2014 "),wW=n(Hke,"A",{href:!0});var lFt=s(wW);Rmr=r(lFt,"TFCamembertForMaskedLM"),lFt.forEach(t),Pmr=r(Hke," (CamemBERT model)"),Hke.forEach(t),Bmr=i(le),I4=n(le,"LI",{});var Uke=s(I4);x2e=n(Uke,"STRONG",{});var iFt=s(x2e);Imr=r(iFt,"ctrl"),iFt.forEach(t),qmr=r(Uke," \u2014 "),AW=n(Uke,"A",{href:!0});var dFt=s(AW);Nmr=r(dFt,"TFCTRLLMHeadModel"),dFt.forEach(t),jmr=r(Uke," (CTRL model)"),Uke.forEach(t),Dmr=i(le),q4=n(le,"LI",{});var Jke=s(q4);$2e=n(Jke,"STRONG",{});var cFt=s($2e);Gmr=r(cFt,"distilbert"),cFt.forEach(t),Omr=r(Jke," \u2014 "),yW=n(Jke,"A",{href:!0});var mFt=s(yW);Vmr=r(mFt,"TFDistilBertForMaskedLM"),mFt.forEach(t),Xmr=r(Jke," (DistilBERT model)"),Jke.forEach(t),zmr=i(le),N4=n(le,"LI",{});var Yke=s(N4);k2e=n(Yke,"STRONG",{});var fFt=s(k2e);Wmr=r(fFt,"electra"),fFt.forEach(t),Qmr=r(Yke," \u2014 "),LW=n(Yke,"A",{href:!0});var gFt=s(LW);Hmr=r(gFt,"TFElectraForPreTraining"),gFt.forEach(t),Umr=r(Yke," (ELECTRA model)"),Yke.forEach(t),Jmr=i(le),j4=n(le,"LI",{});var Kke=s(j4);S2e=n(Kke,"STRONG",{});var hFt=s(S2e);Ymr=r(hFt,"flaubert"),hFt.forEach(t),Kmr=r(Kke," \u2014 "),xW=n(Kke,"A",{href:!0});var uFt=s(xW);Zmr=r(uFt,"TFFlaubertWithLMHeadModel"),uFt.forEach(t),efr=r(Kke," (FlauBERT model)"),Kke.forEach(t),ofr=i(le),D4=n(le,"LI",{});var Zke=s(D4);R2e=n(Zke,"STRONG",{});var pFt=s(R2e);rfr=r(pFt,"funnel"),pFt.forEach(t),tfr=r(Zke," \u2014 "),$W=n(Zke,"A",{href:!0});var _Ft=s($W);afr=r(_Ft,"TFFunnelForPreTraining"),_Ft.forEach(t),nfr=r(Zke," (Funnel Transformer model)"),Zke.forEach(t),sfr=i(le),G4=n(le,"LI",{});var eSe=s(G4);P2e=n(eSe,"STRONG",{});var bFt=s(P2e);lfr=r(bFt,"gpt2"),bFt.forEach(t),ifr=r(eSe," \u2014 "),kW=n(eSe,"A",{href:!0});var vFt=s(kW);dfr=r(vFt,"TFGPT2LMHeadModel"),vFt.forEach(t),cfr=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),mfr=i(le),O4=n(le,"LI",{});var oSe=s(O4);B2e=n(oSe,"STRONG",{});var FFt=s(B2e);ffr=r(FFt,"layoutlm"),FFt.forEach(t),gfr=r(oSe," \u2014 "),SW=n(oSe,"A",{href:!0});var TFt=s(SW);hfr=r(TFt,"TFLayoutLMForMaskedLM"),TFt.forEach(t),ufr=r(oSe," (LayoutLM model)"),oSe.forEach(t),pfr=i(le),V4=n(le,"LI",{});var rSe=s(V4);I2e=n(rSe,"STRONG",{});var MFt=s(I2e);_fr=r(MFt,"lxmert"),MFt.forEach(t),bfr=r(rSe," \u2014 "),RW=n(rSe,"A",{href:!0});var EFt=s(RW);vfr=r(EFt,"TFLxmertForPreTraining"),EFt.forEach(t),Ffr=r(rSe," (LXMERT model)"),rSe.forEach(t),Tfr=i(le),X4=n(le,"LI",{});var tSe=s(X4);q2e=n(tSe,"STRONG",{});var CFt=s(q2e);Mfr=r(CFt,"mobilebert"),CFt.forEach(t),Efr=r(tSe," \u2014 "),PW=n(tSe,"A",{href:!0});var wFt=s(PW);Cfr=r(wFt,"TFMobileBertForPreTraining"),wFt.forEach(t),wfr=r(tSe," (MobileBERT model)"),tSe.forEach(t),Afr=i(le),z4=n(le,"LI",{});var aSe=s(z4);N2e=n(aSe,"STRONG",{});var AFt=s(N2e);yfr=r(AFt,"mpnet"),AFt.forEach(t),Lfr=r(aSe," \u2014 "),BW=n(aSe,"A",{href:!0});var yFt=s(BW);xfr=r(yFt,"TFMPNetForMaskedLM"),yFt.forEach(t),$fr=r(aSe," (MPNet model)"),aSe.forEach(t),kfr=i(le),W4=n(le,"LI",{});var nSe=s(W4);j2e=n(nSe,"STRONG",{});var LFt=s(j2e);Sfr=r(LFt,"openai-gpt"),LFt.forEach(t),Rfr=r(nSe," \u2014 "),IW=n(nSe,"A",{href:!0});var xFt=s(IW);Pfr=r(xFt,"TFOpenAIGPTLMHeadModel"),xFt.forEach(t),Bfr=r(nSe," (OpenAI GPT model)"),nSe.forEach(t),Ifr=i(le),Q4=n(le,"LI",{});var sSe=s(Q4);D2e=n(sSe,"STRONG",{});var $Ft=s(D2e);qfr=r($Ft,"roberta"),$Ft.forEach(t),Nfr=r(sSe," \u2014 "),qW=n(sSe,"A",{href:!0});var kFt=s(qW);jfr=r(kFt,"TFRobertaForMaskedLM"),kFt.forEach(t),Dfr=r(sSe," (RoBERTa model)"),sSe.forEach(t),Gfr=i(le),H4=n(le,"LI",{});var lSe=s(H4);G2e=n(lSe,"STRONG",{});var SFt=s(G2e);Ofr=r(SFt,"t5"),SFt.forEach(t),Vfr=r(lSe," \u2014 "),NW=n(lSe,"A",{href:!0});var RFt=s(NW);Xfr=r(RFt,"TFT5ForConditionalGeneration"),RFt.forEach(t),zfr=r(lSe," (T5 model)"),lSe.forEach(t),Wfr=i(le),U4=n(le,"LI",{});var iSe=s(U4);O2e=n(iSe,"STRONG",{});var PFt=s(O2e);Qfr=r(PFt,"tapas"),PFt.forEach(t),Hfr=r(iSe," \u2014 "),jW=n(iSe,"A",{href:!0});var BFt=s(jW);Ufr=r(BFt,"TFTapasForMaskedLM"),BFt.forEach(t),Jfr=r(iSe," (TAPAS model)"),iSe.forEach(t),Yfr=i(le),J4=n(le,"LI",{});var dSe=s(J4);V2e=n(dSe,"STRONG",{});var IFt=s(V2e);Kfr=r(IFt,"transfo-xl"),IFt.forEach(t),Zfr=r(dSe," \u2014 "),DW=n(dSe,"A",{href:!0});var qFt=s(DW);egr=r(qFt,"TFTransfoXLLMHeadModel"),qFt.forEach(t),ogr=r(dSe," (Transformer-XL model)"),dSe.forEach(t),rgr=i(le),Y4=n(le,"LI",{});var cSe=s(Y4);X2e=n(cSe,"STRONG",{});var NFt=s(X2e);tgr=r(NFt,"vit_mae"),NFt.forEach(t),agr=r(cSe," \u2014 "),GW=n(cSe,"A",{href:!0});var jFt=s(GW);ngr=r(jFt,"TFViTMAEForPreTraining"),jFt.forEach(t),sgr=r(cSe," (ViTMAE model)"),cSe.forEach(t),lgr=i(le),K4=n(le,"LI",{});var mSe=s(K4);z2e=n(mSe,"STRONG",{});var DFt=s(z2e);igr=r(DFt,"xlm"),DFt.forEach(t),dgr=r(mSe," \u2014 "),OW=n(mSe,"A",{href:!0});var GFt=s(OW);cgr=r(GFt,"TFXLMWithLMHeadModel"),GFt.forEach(t),mgr=r(mSe," (XLM model)"),mSe.forEach(t),fgr=i(le),Z4=n(le,"LI",{});var fSe=s(Z4);W2e=n(fSe,"STRONG",{});var OFt=s(W2e);ggr=r(OFt,"xlm-roberta"),OFt.forEach(t),hgr=r(fSe," \u2014 "),VW=n(fSe,"A",{href:!0});var VFt=s(VW);ugr=r(VFt,"TFXLMRobertaForMaskedLM"),VFt.forEach(t),pgr=r(fSe," (XLM-RoBERTa model)"),fSe.forEach(t),_gr=i(le),eE=n(le,"LI",{});var gSe=s(eE);Q2e=n(gSe,"STRONG",{});var XFt=s(Q2e);bgr=r(XFt,"xlnet"),XFt.forEach(t),vgr=r(gSe," \u2014 "),XW=n(gSe,"A",{href:!0});var zFt=s(XW);Fgr=r(zFt,"TFXLNetLMHeadModel"),zFt.forEach(t),Tgr=r(gSe," (XLNet model)"),gSe.forEach(t),le.forEach(t),Mgr=i(ul),T(oE.$$.fragment,ul),ul.forEach(t),hl.forEach(t),Wqe=i(m),Wd=n(m,"H2",{class:!0});var Kje=s(Wd);rE=n(Kje,"A",{id:!0,class:!0,href:!0});var WFt=s(rE);H2e=n(WFt,"SPAN",{});var QFt=s(H2e);T(o7.$$.fragment,QFt),QFt.forEach(t),WFt.forEach(t),Egr=i(Kje),U2e=n(Kje,"SPAN",{});var HFt=s(U2e);Cgr=r(HFt,"TFAutoModelForCausalLM"),HFt.forEach(t),Kje.forEach(t),Qqe=i(m),Zo=n(m,"DIV",{class:!0});var pl=s(Zo);T(r7.$$.fragment,pl),wgr=i(pl),Qd=n(pl,"P",{});var $Z=s(Qd);Agr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zW=n($Z,"A",{href:!0});var UFt=s(zW);ygr=r(UFt,"from_pretrained()"),UFt.forEach(t),Lgr=r($Z," class method or the "),WW=n($Z,"A",{href:!0});var JFt=s(WW);xgr=r(JFt,"from_config()"),JFt.forEach(t),$gr=r($Z,` class
method.`),$Z.forEach(t),kgr=i(pl),t7=n(pl,"P",{});var Zje=s(t7);Sgr=r(Zje,"This class cannot be instantiated directly using "),J2e=n(Zje,"CODE",{});var YFt=s(J2e);Rgr=r(YFt,"__init__()"),YFt.forEach(t),Pgr=r(Zje," (throws an error)."),Zje.forEach(t),Bgr=i(pl),xt=n(pl,"DIV",{class:!0});var m6=s(xt);T(a7.$$.fragment,m6),Igr=i(m6),Y2e=n(m6,"P",{});var KFt=s(Y2e);qgr=r(KFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KFt.forEach(t),Ngr=i(m6),Hd=n(m6,"P",{});var kZ=s(Hd);jgr=r(kZ,`Note:
Loading a model from its configuration file does `),K2e=n(kZ,"STRONG",{});var ZFt=s(K2e);Dgr=r(ZFt,"not"),ZFt.forEach(t),Ggr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(kZ,"A",{href:!0});var e1t=s(QW);Ogr=r(e1t,"from_pretrained()"),e1t.forEach(t),Vgr=r(kZ," to load the model weights."),kZ.forEach(t),Xgr=i(m6),T(tE.$$.fragment,m6),m6.forEach(t),zgr=i(pl),yr=n(pl,"DIV",{class:!0});var _l=s(yr);T(n7.$$.fragment,_l),Wgr=i(_l),Z2e=n(_l,"P",{});var o1t=s(Z2e);Qgr=r(o1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o1t.forEach(t),Hgr=i(_l),en=n(_l,"P",{});var f6=s(en);Ugr=r(f6,"The model class to instantiate is selected based on the "),eve=n(f6,"CODE",{});var r1t=s(eve);Jgr=r(r1t,"model_type"),r1t.forEach(t),Ygr=r(f6,` property of the config object (either
passed as an argument or loaded from `),ove=n(f6,"CODE",{});var t1t=s(ove);Kgr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),Zgr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(f6,"CODE",{});var a1t=s(rve);ehr=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),ohr=r(f6,":"),f6.forEach(t),rhr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);aE=n(Ce,"LI",{});var hSe=s(aE);tve=n(hSe,"STRONG",{});var n1t=s(tve);thr=r(n1t,"bert"),n1t.forEach(t),ahr=r(hSe," \u2014 "),HW=n(hSe,"A",{href:!0});var s1t=s(HW);nhr=r(s1t,"TFBertLMHeadModel"),s1t.forEach(t),shr=r(hSe," (BERT model)"),hSe.forEach(t),lhr=i(Ce),nE=n(Ce,"LI",{});var uSe=s(nE);ave=n(uSe,"STRONG",{});var l1t=s(ave);ihr=r(l1t,"camembert"),l1t.forEach(t),dhr=r(uSe," \u2014 "),UW=n(uSe,"A",{href:!0});var i1t=s(UW);chr=r(i1t,"TFCamembertForCausalLM"),i1t.forEach(t),mhr=r(uSe," (CamemBERT model)"),uSe.forEach(t),fhr=i(Ce),sE=n(Ce,"LI",{});var pSe=s(sE);nve=n(pSe,"STRONG",{});var d1t=s(nve);ghr=r(d1t,"ctrl"),d1t.forEach(t),hhr=r(pSe," \u2014 "),JW=n(pSe,"A",{href:!0});var c1t=s(JW);uhr=r(c1t,"TFCTRLLMHeadModel"),c1t.forEach(t),phr=r(pSe," (CTRL model)"),pSe.forEach(t),_hr=i(Ce),lE=n(Ce,"LI",{});var _Se=s(lE);sve=n(_Se,"STRONG",{});var m1t=s(sve);bhr=r(m1t,"gpt2"),m1t.forEach(t),vhr=r(_Se," \u2014 "),YW=n(_Se,"A",{href:!0});var f1t=s(YW);Fhr=r(f1t,"TFGPT2LMHeadModel"),f1t.forEach(t),Thr=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),Mhr=i(Ce),iE=n(Ce,"LI",{});var bSe=s(iE);lve=n(bSe,"STRONG",{});var g1t=s(lve);Ehr=r(g1t,"gptj"),g1t.forEach(t),Chr=r(bSe," \u2014 "),KW=n(bSe,"A",{href:!0});var h1t=s(KW);whr=r(h1t,"TFGPTJForCausalLM"),h1t.forEach(t),Ahr=r(bSe," (GPT-J model)"),bSe.forEach(t),yhr=i(Ce),dE=n(Ce,"LI",{});var vSe=s(dE);ive=n(vSe,"STRONG",{});var u1t=s(ive);Lhr=r(u1t,"openai-gpt"),u1t.forEach(t),xhr=r(vSe," \u2014 "),ZW=n(vSe,"A",{href:!0});var p1t=s(ZW);$hr=r(p1t,"TFOpenAIGPTLMHeadModel"),p1t.forEach(t),khr=r(vSe," (OpenAI GPT model)"),vSe.forEach(t),Shr=i(Ce),cE=n(Ce,"LI",{});var FSe=s(cE);dve=n(FSe,"STRONG",{});var _1t=s(dve);Rhr=r(_1t,"rembert"),_1t.forEach(t),Phr=r(FSe," \u2014 "),eQ=n(FSe,"A",{href:!0});var b1t=s(eQ);Bhr=r(b1t,"TFRemBertForCausalLM"),b1t.forEach(t),Ihr=r(FSe," (RemBERT model)"),FSe.forEach(t),qhr=i(Ce),mE=n(Ce,"LI",{});var TSe=s(mE);cve=n(TSe,"STRONG",{});var v1t=s(cve);Nhr=r(v1t,"roberta"),v1t.forEach(t),jhr=r(TSe," \u2014 "),oQ=n(TSe,"A",{href:!0});var F1t=s(oQ);Dhr=r(F1t,"TFRobertaForCausalLM"),F1t.forEach(t),Ghr=r(TSe," (RoBERTa model)"),TSe.forEach(t),Ohr=i(Ce),fE=n(Ce,"LI",{});var MSe=s(fE);mve=n(MSe,"STRONG",{});var T1t=s(mve);Vhr=r(T1t,"roformer"),T1t.forEach(t),Xhr=r(MSe," \u2014 "),rQ=n(MSe,"A",{href:!0});var M1t=s(rQ);zhr=r(M1t,"TFRoFormerForCausalLM"),M1t.forEach(t),Whr=r(MSe," (RoFormer model)"),MSe.forEach(t),Qhr=i(Ce),gE=n(Ce,"LI",{});var ESe=s(gE);fve=n(ESe,"STRONG",{});var E1t=s(fve);Hhr=r(E1t,"transfo-xl"),E1t.forEach(t),Uhr=r(ESe," \u2014 "),tQ=n(ESe,"A",{href:!0});var C1t=s(tQ);Jhr=r(C1t,"TFTransfoXLLMHeadModel"),C1t.forEach(t),Yhr=r(ESe," (Transformer-XL model)"),ESe.forEach(t),Khr=i(Ce),hE=n(Ce,"LI",{});var CSe=s(hE);gve=n(CSe,"STRONG",{});var w1t=s(gve);Zhr=r(w1t,"xlm"),w1t.forEach(t),eur=r(CSe," \u2014 "),aQ=n(CSe,"A",{href:!0});var A1t=s(aQ);our=r(A1t,"TFXLMWithLMHeadModel"),A1t.forEach(t),rur=r(CSe," (XLM model)"),CSe.forEach(t),tur=i(Ce),uE=n(Ce,"LI",{});var wSe=s(uE);hve=n(wSe,"STRONG",{});var y1t=s(hve);aur=r(y1t,"xlnet"),y1t.forEach(t),nur=r(wSe," \u2014 "),nQ=n(wSe,"A",{href:!0});var L1t=s(nQ);sur=r(L1t,"TFXLNetLMHeadModel"),L1t.forEach(t),lur=r(wSe," (XLNet model)"),wSe.forEach(t),Ce.forEach(t),iur=i(_l),T(pE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Hqe=i(m),Ud=n(m,"H2",{class:!0});var eDe=s(Ud);_E=n(eDe,"A",{id:!0,class:!0,href:!0});var x1t=s(_E);uve=n(x1t,"SPAN",{});var $1t=s(uve);T(s7.$$.fragment,$1t),$1t.forEach(t),x1t.forEach(t),dur=i(eDe),pve=n(eDe,"SPAN",{});var k1t=s(pve);cur=r(k1t,"TFAutoModelForImageClassification"),k1t.forEach(t),eDe.forEach(t),Uqe=i(m),er=n(m,"DIV",{class:!0});var bl=s(er);T(l7.$$.fragment,bl),mur=i(bl),Jd=n(bl,"P",{});var SZ=s(Jd);fur=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=n(SZ,"A",{href:!0});var S1t=s(sQ);gur=r(S1t,"from_pretrained()"),S1t.forEach(t),hur=r(SZ," class method or the "),lQ=n(SZ,"A",{href:!0});var R1t=s(lQ);uur=r(R1t,"from_config()"),R1t.forEach(t),pur=r(SZ,` class
method.`),SZ.forEach(t),_ur=i(bl),i7=n(bl,"P",{});var oDe=s(i7);bur=r(oDe,"This class cannot be instantiated directly using "),_ve=n(oDe,"CODE",{});var P1t=s(_ve);vur=r(P1t,"__init__()"),P1t.forEach(t),Fur=r(oDe," (throws an error)."),oDe.forEach(t),Tur=i(bl),$t=n(bl,"DIV",{class:!0});var g6=s($t);T(d7.$$.fragment,g6),Mur=i(g6),bve=n(g6,"P",{});var B1t=s(bve);Eur=r(B1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B1t.forEach(t),Cur=i(g6),Yd=n(g6,"P",{});var RZ=s(Yd);wur=r(RZ,`Note:
Loading a model from its configuration file does `),vve=n(RZ,"STRONG",{});var I1t=s(vve);Aur=r(I1t,"not"),I1t.forEach(t),yur=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(RZ,"A",{href:!0});var q1t=s(iQ);Lur=r(q1t,"from_pretrained()"),q1t.forEach(t),xur=r(RZ," to load the model weights."),RZ.forEach(t),$ur=i(g6),T(bE.$$.fragment,g6),g6.forEach(t),kur=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(c7.$$.fragment,vl),Sur=i(vl),Fve=n(vl,"P",{});var N1t=s(Fve);Rur=r(N1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N1t.forEach(t),Pur=i(vl),on=n(vl,"P",{});var h6=s(on);Bur=r(h6,"The model class to instantiate is selected based on the "),Tve=n(h6,"CODE",{});var j1t=s(Tve);Iur=r(j1t,"model_type"),j1t.forEach(t),qur=r(h6,` property of the config object (either
passed as an argument or loaded from `),Mve=n(h6,"CODE",{});var D1t=s(Mve);Nur=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),jur=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(h6,"CODE",{});var G1t=s(Eve);Dur=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),Gur=r(h6,":"),h6.forEach(t),Our=i(vl),rn=n(vl,"UL",{});var u6=s(rn);vE=n(u6,"LI",{});var ASe=s(vE);Cve=n(ASe,"STRONG",{});var O1t=s(Cve);Vur=r(O1t,"convnext"),O1t.forEach(t),Xur=r(ASe," \u2014 "),dQ=n(ASe,"A",{href:!0});var V1t=s(dQ);zur=r(V1t,"TFConvNextForImageClassification"),V1t.forEach(t),Wur=r(ASe," (ConvNext model)"),ASe.forEach(t),Qur=i(u6),FE=n(u6,"LI",{});var ySe=s(FE);wve=n(ySe,"STRONG",{});var X1t=s(wve);Hur=r(X1t,"data2vec-vision"),X1t.forEach(t),Uur=r(ySe," \u2014 "),cQ=n(ySe,"A",{href:!0});var z1t=s(cQ);Jur=r(z1t,"TFData2VecVisionForImageClassification"),z1t.forEach(t),Yur=r(ySe," (Data2VecVision model)"),ySe.forEach(t),Kur=i(u6),TE=n(u6,"LI",{});var LSe=s(TE);Ave=n(LSe,"STRONG",{});var W1t=s(Ave);Zur=r(W1t,"swin"),W1t.forEach(t),epr=r(LSe," \u2014 "),mQ=n(LSe,"A",{href:!0});var Q1t=s(mQ);opr=r(Q1t,"TFSwinForImageClassification"),Q1t.forEach(t),rpr=r(LSe," (Swin model)"),LSe.forEach(t),tpr=i(u6),ME=n(u6,"LI",{});var xSe=s(ME);yve=n(xSe,"STRONG",{});var H1t=s(yve);apr=r(H1t,"vit"),H1t.forEach(t),npr=r(xSe," \u2014 "),fQ=n(xSe,"A",{href:!0});var U1t=s(fQ);spr=r(U1t,"TFViTForImageClassification"),U1t.forEach(t),lpr=r(xSe," (ViT model)"),xSe.forEach(t),u6.forEach(t),ipr=i(vl),T(EE.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Jqe=i(m),Kd=n(m,"H2",{class:!0});var rDe=s(Kd);CE=n(rDe,"A",{id:!0,class:!0,href:!0});var J1t=s(CE);Lve=n(J1t,"SPAN",{});var Y1t=s(Lve);T(m7.$$.fragment,Y1t),Y1t.forEach(t),J1t.forEach(t),dpr=i(rDe),xve=n(rDe,"SPAN",{});var K1t=s(xve);cpr=r(K1t,"TFAutoModelForMaskedLM"),K1t.forEach(t),rDe.forEach(t),Yqe=i(m),or=n(m,"DIV",{class:!0});var Fl=s(or);T(f7.$$.fragment,Fl),mpr=i(Fl),Zd=n(Fl,"P",{});var PZ=s(Zd);fpr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gQ=n(PZ,"A",{href:!0});var Z1t=s(gQ);gpr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),hpr=r(PZ," class method or the "),hQ=n(PZ,"A",{href:!0});var eTt=s(hQ);upr=r(eTt,"from_config()"),eTt.forEach(t),ppr=r(PZ,` class
method.`),PZ.forEach(t),_pr=i(Fl),g7=n(Fl,"P",{});var tDe=s(g7);bpr=r(tDe,"This class cannot be instantiated directly using "),$ve=n(tDe,"CODE",{});var oTt=s($ve);vpr=r(oTt,"__init__()"),oTt.forEach(t),Fpr=r(tDe," (throws an error)."),tDe.forEach(t),Tpr=i(Fl),kt=n(Fl,"DIV",{class:!0});var p6=s(kt);T(h7.$$.fragment,p6),Mpr=i(p6),kve=n(p6,"P",{});var rTt=s(kve);Epr=r(rTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rTt.forEach(t),Cpr=i(p6),ec=n(p6,"P",{});var BZ=s(ec);wpr=r(BZ,`Note:
Loading a model from its configuration file does `),Sve=n(BZ,"STRONG",{});var tTt=s(Sve);Apr=r(tTt,"not"),tTt.forEach(t),ypr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(BZ,"A",{href:!0});var aTt=s(uQ);Lpr=r(aTt,"from_pretrained()"),aTt.forEach(t),xpr=r(BZ," to load the model weights."),BZ.forEach(t),$pr=i(p6),T(wE.$$.fragment,p6),p6.forEach(t),kpr=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(u7.$$.fragment,Tl),Spr=i(Tl),Rve=n(Tl,"P",{});var nTt=s(Rve);Rpr=r(nTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nTt.forEach(t),Ppr=i(Tl),tn=n(Tl,"P",{});var _6=s(tn);Bpr=r(_6,"The model class to instantiate is selected based on the "),Pve=n(_6,"CODE",{});var sTt=s(Pve);Ipr=r(sTt,"model_type"),sTt.forEach(t),qpr=r(_6,` property of the config object (either
passed as an argument or loaded from `),Bve=n(_6,"CODE",{});var lTt=s(Bve);Npr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),jpr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(_6,"CODE",{});var iTt=s(Ive);Dpr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),Gpr=r(_6,":"),_6.forEach(t),Opr=i(Tl),ie=n(Tl,"UL",{});var me=s(ie);AE=n(me,"LI",{});var $Se=s(AE);qve=n($Se,"STRONG",{});var dTt=s(qve);Vpr=r(dTt,"albert"),dTt.forEach(t),Xpr=r($Se," \u2014 "),pQ=n($Se,"A",{href:!0});var cTt=s(pQ);zpr=r(cTt,"TFAlbertForMaskedLM"),cTt.forEach(t),Wpr=r($Se," (ALBERT model)"),$Se.forEach(t),Qpr=i(me),yE=n(me,"LI",{});var kSe=s(yE);Nve=n(kSe,"STRONG",{});var mTt=s(Nve);Hpr=r(mTt,"bert"),mTt.forEach(t),Upr=r(kSe," \u2014 "),_Q=n(kSe,"A",{href:!0});var fTt=s(_Q);Jpr=r(fTt,"TFBertForMaskedLM"),fTt.forEach(t),Ypr=r(kSe," (BERT model)"),kSe.forEach(t),Kpr=i(me),LE=n(me,"LI",{});var SSe=s(LE);jve=n(SSe,"STRONG",{});var gTt=s(jve);Zpr=r(gTt,"camembert"),gTt.forEach(t),e_r=r(SSe," \u2014 "),bQ=n(SSe,"A",{href:!0});var hTt=s(bQ);o_r=r(hTt,"TFCamembertForMaskedLM"),hTt.forEach(t),r_r=r(SSe," (CamemBERT model)"),SSe.forEach(t),t_r=i(me),xE=n(me,"LI",{});var RSe=s(xE);Dve=n(RSe,"STRONG",{});var uTt=s(Dve);a_r=r(uTt,"convbert"),uTt.forEach(t),n_r=r(RSe," \u2014 "),vQ=n(RSe,"A",{href:!0});var pTt=s(vQ);s_r=r(pTt,"TFConvBertForMaskedLM"),pTt.forEach(t),l_r=r(RSe," (ConvBERT model)"),RSe.forEach(t),i_r=i(me),$E=n(me,"LI",{});var PSe=s($E);Gve=n(PSe,"STRONG",{});var _Tt=s(Gve);d_r=r(_Tt,"deberta"),_Tt.forEach(t),c_r=r(PSe," \u2014 "),FQ=n(PSe,"A",{href:!0});var bTt=s(FQ);m_r=r(bTt,"TFDebertaForMaskedLM"),bTt.forEach(t),f_r=r(PSe," (DeBERTa model)"),PSe.forEach(t),g_r=i(me),kE=n(me,"LI",{});var BSe=s(kE);Ove=n(BSe,"STRONG",{});var vTt=s(Ove);h_r=r(vTt,"deberta-v2"),vTt.forEach(t),u_r=r(BSe," \u2014 "),TQ=n(BSe,"A",{href:!0});var FTt=s(TQ);p_r=r(FTt,"TFDebertaV2ForMaskedLM"),FTt.forEach(t),__r=r(BSe," (DeBERTa-v2 model)"),BSe.forEach(t),b_r=i(me),SE=n(me,"LI",{});var ISe=s(SE);Vve=n(ISe,"STRONG",{});var TTt=s(Vve);v_r=r(TTt,"distilbert"),TTt.forEach(t),F_r=r(ISe," \u2014 "),MQ=n(ISe,"A",{href:!0});var MTt=s(MQ);T_r=r(MTt,"TFDistilBertForMaskedLM"),MTt.forEach(t),M_r=r(ISe," (DistilBERT model)"),ISe.forEach(t),E_r=i(me),RE=n(me,"LI",{});var qSe=s(RE);Xve=n(qSe,"STRONG",{});var ETt=s(Xve);C_r=r(ETt,"electra"),ETt.forEach(t),w_r=r(qSe," \u2014 "),EQ=n(qSe,"A",{href:!0});var CTt=s(EQ);A_r=r(CTt,"TFElectraForMaskedLM"),CTt.forEach(t),y_r=r(qSe," (ELECTRA model)"),qSe.forEach(t),L_r=i(me),PE=n(me,"LI",{});var NSe=s(PE);zve=n(NSe,"STRONG",{});var wTt=s(zve);x_r=r(wTt,"flaubert"),wTt.forEach(t),$_r=r(NSe," \u2014 "),CQ=n(NSe,"A",{href:!0});var ATt=s(CQ);k_r=r(ATt,"TFFlaubertWithLMHeadModel"),ATt.forEach(t),S_r=r(NSe," (FlauBERT model)"),NSe.forEach(t),R_r=i(me),BE=n(me,"LI",{});var jSe=s(BE);Wve=n(jSe,"STRONG",{});var yTt=s(Wve);P_r=r(yTt,"funnel"),yTt.forEach(t),B_r=r(jSe," \u2014 "),wQ=n(jSe,"A",{href:!0});var LTt=s(wQ);I_r=r(LTt,"TFFunnelForMaskedLM"),LTt.forEach(t),q_r=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),N_r=i(me),IE=n(me,"LI",{});var DSe=s(IE);Qve=n(DSe,"STRONG",{});var xTt=s(Qve);j_r=r(xTt,"layoutlm"),xTt.forEach(t),D_r=r(DSe," \u2014 "),AQ=n(DSe,"A",{href:!0});var $Tt=s(AQ);G_r=r($Tt,"TFLayoutLMForMaskedLM"),$Tt.forEach(t),O_r=r(DSe," (LayoutLM model)"),DSe.forEach(t),V_r=i(me),qE=n(me,"LI",{});var GSe=s(qE);Hve=n(GSe,"STRONG",{});var kTt=s(Hve);X_r=r(kTt,"longformer"),kTt.forEach(t),z_r=r(GSe," \u2014 "),yQ=n(GSe,"A",{href:!0});var STt=s(yQ);W_r=r(STt,"TFLongformerForMaskedLM"),STt.forEach(t),Q_r=r(GSe," (Longformer model)"),GSe.forEach(t),H_r=i(me),NE=n(me,"LI",{});var OSe=s(NE);Uve=n(OSe,"STRONG",{});var RTt=s(Uve);U_r=r(RTt,"mobilebert"),RTt.forEach(t),J_r=r(OSe," \u2014 "),LQ=n(OSe,"A",{href:!0});var PTt=s(LQ);Y_r=r(PTt,"TFMobileBertForMaskedLM"),PTt.forEach(t),K_r=r(OSe," (MobileBERT model)"),OSe.forEach(t),Z_r=i(me),jE=n(me,"LI",{});var VSe=s(jE);Jve=n(VSe,"STRONG",{});var BTt=s(Jve);ebr=r(BTt,"mpnet"),BTt.forEach(t),obr=r(VSe," \u2014 "),xQ=n(VSe,"A",{href:!0});var ITt=s(xQ);rbr=r(ITt,"TFMPNetForMaskedLM"),ITt.forEach(t),tbr=r(VSe," (MPNet model)"),VSe.forEach(t),abr=i(me),DE=n(me,"LI",{});var XSe=s(DE);Yve=n(XSe,"STRONG",{});var qTt=s(Yve);nbr=r(qTt,"rembert"),qTt.forEach(t),sbr=r(XSe," \u2014 "),$Q=n(XSe,"A",{href:!0});var NTt=s($Q);lbr=r(NTt,"TFRemBertForMaskedLM"),NTt.forEach(t),ibr=r(XSe," (RemBERT model)"),XSe.forEach(t),dbr=i(me),GE=n(me,"LI",{});var zSe=s(GE);Kve=n(zSe,"STRONG",{});var jTt=s(Kve);cbr=r(jTt,"roberta"),jTt.forEach(t),mbr=r(zSe," \u2014 "),kQ=n(zSe,"A",{href:!0});var DTt=s(kQ);fbr=r(DTt,"TFRobertaForMaskedLM"),DTt.forEach(t),gbr=r(zSe," (RoBERTa model)"),zSe.forEach(t),hbr=i(me),OE=n(me,"LI",{});var WSe=s(OE);Zve=n(WSe,"STRONG",{});var GTt=s(Zve);ubr=r(GTt,"roformer"),GTt.forEach(t),pbr=r(WSe," \u2014 "),SQ=n(WSe,"A",{href:!0});var OTt=s(SQ);_br=r(OTt,"TFRoFormerForMaskedLM"),OTt.forEach(t),bbr=r(WSe," (RoFormer model)"),WSe.forEach(t),vbr=i(me),VE=n(me,"LI",{});var QSe=s(VE);eFe=n(QSe,"STRONG",{});var VTt=s(eFe);Fbr=r(VTt,"tapas"),VTt.forEach(t),Tbr=r(QSe," \u2014 "),RQ=n(QSe,"A",{href:!0});var XTt=s(RQ);Mbr=r(XTt,"TFTapasForMaskedLM"),XTt.forEach(t),Ebr=r(QSe," (TAPAS model)"),QSe.forEach(t),Cbr=i(me),XE=n(me,"LI",{});var HSe=s(XE);oFe=n(HSe,"STRONG",{});var zTt=s(oFe);wbr=r(zTt,"xlm"),zTt.forEach(t),Abr=r(HSe," \u2014 "),PQ=n(HSe,"A",{href:!0});var WTt=s(PQ);ybr=r(WTt,"TFXLMWithLMHeadModel"),WTt.forEach(t),Lbr=r(HSe," (XLM model)"),HSe.forEach(t),xbr=i(me),zE=n(me,"LI",{});var USe=s(zE);rFe=n(USe,"STRONG",{});var QTt=s(rFe);$br=r(QTt,"xlm-roberta"),QTt.forEach(t),kbr=r(USe," \u2014 "),BQ=n(USe,"A",{href:!0});var HTt=s(BQ);Sbr=r(HTt,"TFXLMRobertaForMaskedLM"),HTt.forEach(t),Rbr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),me.forEach(t),Pbr=i(Tl),T(WE.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Kqe=i(m),oc=n(m,"H2",{class:!0});var aDe=s(oc);QE=n(aDe,"A",{id:!0,class:!0,href:!0});var UTt=s(QE);tFe=n(UTt,"SPAN",{});var JTt=s(tFe);T(p7.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),Bbr=i(aDe),aFe=n(aDe,"SPAN",{});var YTt=s(aFe);Ibr=r(YTt,"TFAutoModelForSeq2SeqLM"),YTt.forEach(t),aDe.forEach(t),Zqe=i(m),rr=n(m,"DIV",{class:!0});var Ml=s(rr);T(_7.$$.fragment,Ml),qbr=i(Ml),rc=n(Ml,"P",{});var IZ=s(rc);Nbr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IQ=n(IZ,"A",{href:!0});var KTt=s(IQ);jbr=r(KTt,"from_pretrained()"),KTt.forEach(t),Dbr=r(IZ," class method or the "),qQ=n(IZ,"A",{href:!0});var ZTt=s(qQ);Gbr=r(ZTt,"from_config()"),ZTt.forEach(t),Obr=r(IZ,` class
method.`),IZ.forEach(t),Vbr=i(Ml),b7=n(Ml,"P",{});var nDe=s(b7);Xbr=r(nDe,"This class cannot be instantiated directly using "),nFe=n(nDe,"CODE",{});var eMt=s(nFe);zbr=r(eMt,"__init__()"),eMt.forEach(t),Wbr=r(nDe," (throws an error)."),nDe.forEach(t),Qbr=i(Ml),St=n(Ml,"DIV",{class:!0});var b6=s(St);T(v7.$$.fragment,b6),Hbr=i(b6),sFe=n(b6,"P",{});var oMt=s(sFe);Ubr=r(oMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oMt.forEach(t),Jbr=i(b6),tc=n(b6,"P",{});var qZ=s(tc);Ybr=r(qZ,`Note:
Loading a model from its configuration file does `),lFe=n(qZ,"STRONG",{});var rMt=s(lFe);Kbr=r(rMt,"not"),rMt.forEach(t),Zbr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(qZ,"A",{href:!0});var tMt=s(NQ);e2r=r(tMt,"from_pretrained()"),tMt.forEach(t),o2r=r(qZ," to load the model weights."),qZ.forEach(t),r2r=i(b6),T(HE.$$.fragment,b6),b6.forEach(t),t2r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(F7.$$.fragment,El),a2r=i(El),iFe=n(El,"P",{});var aMt=s(iFe);n2r=r(aMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aMt.forEach(t),s2r=i(El),an=n(El,"P",{});var v6=s(an);l2r=r(v6,"The model class to instantiate is selected based on the "),dFe=n(v6,"CODE",{});var nMt=s(dFe);i2r=r(nMt,"model_type"),nMt.forEach(t),d2r=r(v6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(v6,"CODE",{});var sMt=s(cFe);c2r=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),m2r=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(v6,"CODE",{});var lMt=s(mFe);f2r=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),g2r=r(v6,":"),v6.forEach(t),h2r=i(El),ye=n(El,"UL",{});var Be=s(ye);UE=n(Be,"LI",{});var JSe=s(UE);fFe=n(JSe,"STRONG",{});var iMt=s(fFe);u2r=r(iMt,"bart"),iMt.forEach(t),p2r=r(JSe," \u2014 "),jQ=n(JSe,"A",{href:!0});var dMt=s(jQ);_2r=r(dMt,"TFBartForConditionalGeneration"),dMt.forEach(t),b2r=r(JSe," (BART model)"),JSe.forEach(t),v2r=i(Be),JE=n(Be,"LI",{});var YSe=s(JE);gFe=n(YSe,"STRONG",{});var cMt=s(gFe);F2r=r(cMt,"blenderbot"),cMt.forEach(t),T2r=r(YSe," \u2014 "),DQ=n(YSe,"A",{href:!0});var mMt=s(DQ);M2r=r(mMt,"TFBlenderbotForConditionalGeneration"),mMt.forEach(t),E2r=r(YSe," (Blenderbot model)"),YSe.forEach(t),C2r=i(Be),YE=n(Be,"LI",{});var KSe=s(YE);hFe=n(KSe,"STRONG",{});var fMt=s(hFe);w2r=r(fMt,"blenderbot-small"),fMt.forEach(t),A2r=r(KSe," \u2014 "),GQ=n(KSe,"A",{href:!0});var gMt=s(GQ);y2r=r(gMt,"TFBlenderbotSmallForConditionalGeneration"),gMt.forEach(t),L2r=r(KSe," (BlenderbotSmall model)"),KSe.forEach(t),x2r=i(Be),KE=n(Be,"LI",{});var ZSe=s(KE);uFe=n(ZSe,"STRONG",{});var hMt=s(uFe);$2r=r(hMt,"encoder-decoder"),hMt.forEach(t),k2r=r(ZSe," \u2014 "),OQ=n(ZSe,"A",{href:!0});var uMt=s(OQ);S2r=r(uMt,"TFEncoderDecoderModel"),uMt.forEach(t),R2r=r(ZSe," (Encoder decoder model)"),ZSe.forEach(t),P2r=i(Be),ZE=n(Be,"LI",{});var eRe=s(ZE);pFe=n(eRe,"STRONG",{});var pMt=s(pFe);B2r=r(pMt,"led"),pMt.forEach(t),I2r=r(eRe," \u2014 "),VQ=n(eRe,"A",{href:!0});var _Mt=s(VQ);q2r=r(_Mt,"TFLEDForConditionalGeneration"),_Mt.forEach(t),N2r=r(eRe," (LED model)"),eRe.forEach(t),j2r=i(Be),eC=n(Be,"LI",{});var oRe=s(eC);_Fe=n(oRe,"STRONG",{});var bMt=s(_Fe);D2r=r(bMt,"marian"),bMt.forEach(t),G2r=r(oRe," \u2014 "),XQ=n(oRe,"A",{href:!0});var vMt=s(XQ);O2r=r(vMt,"TFMarianMTModel"),vMt.forEach(t),V2r=r(oRe," (Marian model)"),oRe.forEach(t),X2r=i(Be),oC=n(Be,"LI",{});var rRe=s(oC);bFe=n(rRe,"STRONG",{});var FMt=s(bFe);z2r=r(FMt,"mbart"),FMt.forEach(t),W2r=r(rRe," \u2014 "),zQ=n(rRe,"A",{href:!0});var TMt=s(zQ);Q2r=r(TMt,"TFMBartForConditionalGeneration"),TMt.forEach(t),H2r=r(rRe," (mBART model)"),rRe.forEach(t),U2r=i(Be),rC=n(Be,"LI",{});var tRe=s(rC);vFe=n(tRe,"STRONG",{});var MMt=s(vFe);J2r=r(MMt,"mt5"),MMt.forEach(t),Y2r=r(tRe," \u2014 "),WQ=n(tRe,"A",{href:!0});var EMt=s(WQ);K2r=r(EMt,"TFMT5ForConditionalGeneration"),EMt.forEach(t),Z2r=r(tRe," (mT5 model)"),tRe.forEach(t),evr=i(Be),tC=n(Be,"LI",{});var aRe=s(tC);FFe=n(aRe,"STRONG",{});var CMt=s(FFe);ovr=r(CMt,"pegasus"),CMt.forEach(t),rvr=r(aRe," \u2014 "),QQ=n(aRe,"A",{href:!0});var wMt=s(QQ);tvr=r(wMt,"TFPegasusForConditionalGeneration"),wMt.forEach(t),avr=r(aRe," (Pegasus model)"),aRe.forEach(t),nvr=i(Be),aC=n(Be,"LI",{});var nRe=s(aC);TFe=n(nRe,"STRONG",{});var AMt=s(TFe);svr=r(AMt,"t5"),AMt.forEach(t),lvr=r(nRe," \u2014 "),HQ=n(nRe,"A",{href:!0});var yMt=s(HQ);ivr=r(yMt,"TFT5ForConditionalGeneration"),yMt.forEach(t),dvr=r(nRe," (T5 model)"),nRe.forEach(t),Be.forEach(t),cvr=i(El),T(nC.$$.fragment,El),El.forEach(t),Ml.forEach(t),eNe=i(m),ac=n(m,"H2",{class:!0});var sDe=s(ac);sC=n(sDe,"A",{id:!0,class:!0,href:!0});var LMt=s(sC);MFe=n(LMt,"SPAN",{});var xMt=s(MFe);T(T7.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),mvr=i(sDe),EFe=n(sDe,"SPAN",{});var $Mt=s(EFe);fvr=r($Mt,"TFAutoModelForSequenceClassification"),$Mt.forEach(t),sDe.forEach(t),oNe=i(m),tr=n(m,"DIV",{class:!0});var Cl=s(tr);T(M7.$$.fragment,Cl),gvr=i(Cl),nc=n(Cl,"P",{});var NZ=s(nc);hvr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UQ=n(NZ,"A",{href:!0});var kMt=s(UQ);uvr=r(kMt,"from_pretrained()"),kMt.forEach(t),pvr=r(NZ," class method or the "),JQ=n(NZ,"A",{href:!0});var SMt=s(JQ);_vr=r(SMt,"from_config()"),SMt.forEach(t),bvr=r(NZ,` class
method.`),NZ.forEach(t),vvr=i(Cl),E7=n(Cl,"P",{});var lDe=s(E7);Fvr=r(lDe,"This class cannot be instantiated directly using "),CFe=n(lDe,"CODE",{});var RMt=s(CFe);Tvr=r(RMt,"__init__()"),RMt.forEach(t),Mvr=r(lDe," (throws an error)."),lDe.forEach(t),Evr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var F6=s(Rt);T(C7.$$.fragment,F6),Cvr=i(F6),wFe=n(F6,"P",{});var PMt=s(wFe);wvr=r(PMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PMt.forEach(t),Avr=i(F6),sc=n(F6,"P",{});var jZ=s(sc);yvr=r(jZ,`Note:
Loading a model from its configuration file does `),AFe=n(jZ,"STRONG",{});var BMt=s(AFe);Lvr=r(BMt,"not"),BMt.forEach(t),xvr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(jZ,"A",{href:!0});var IMt=s(YQ);$vr=r(IMt,"from_pretrained()"),IMt.forEach(t),kvr=r(jZ," to load the model weights."),jZ.forEach(t),Svr=i(F6),T(lC.$$.fragment,F6),F6.forEach(t),Rvr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(w7.$$.fragment,wl),Pvr=i(wl),yFe=n(wl,"P",{});var qMt=s(yFe);Bvr=r(qMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qMt.forEach(t),Ivr=i(wl),nn=n(wl,"P",{});var T6=s(nn);qvr=r(T6,"The model class to instantiate is selected based on the "),LFe=n(T6,"CODE",{});var NMt=s(LFe);Nvr=r(NMt,"model_type"),NMt.forEach(t),jvr=r(T6,` property of the config object (either
passed as an argument or loaded from `),xFe=n(T6,"CODE",{});var jMt=s(xFe);Dvr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),Gvr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(T6,"CODE",{});var DMt=s($Fe);Ovr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),Vvr=r(T6,":"),T6.forEach(t),Xvr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);iC=n(ae,"LI",{});var sRe=s(iC);kFe=n(sRe,"STRONG",{});var GMt=s(kFe);zvr=r(GMt,"albert"),GMt.forEach(t),Wvr=r(sRe," \u2014 "),KQ=n(sRe,"A",{href:!0});var OMt=s(KQ);Qvr=r(OMt,"TFAlbertForSequenceClassification"),OMt.forEach(t),Hvr=r(sRe," (ALBERT model)"),sRe.forEach(t),Uvr=i(ae),dC=n(ae,"LI",{});var lRe=s(dC);SFe=n(lRe,"STRONG",{});var VMt=s(SFe);Jvr=r(VMt,"bert"),VMt.forEach(t),Yvr=r(lRe," \u2014 "),ZQ=n(lRe,"A",{href:!0});var XMt=s(ZQ);Kvr=r(XMt,"TFBertForSequenceClassification"),XMt.forEach(t),Zvr=r(lRe," (BERT model)"),lRe.forEach(t),eFr=i(ae),cC=n(ae,"LI",{});var iRe=s(cC);RFe=n(iRe,"STRONG",{});var zMt=s(RFe);oFr=r(zMt,"camembert"),zMt.forEach(t),rFr=r(iRe," \u2014 "),eH=n(iRe,"A",{href:!0});var WMt=s(eH);tFr=r(WMt,"TFCamembertForSequenceClassification"),WMt.forEach(t),aFr=r(iRe," (CamemBERT model)"),iRe.forEach(t),nFr=i(ae),mC=n(ae,"LI",{});var dRe=s(mC);PFe=n(dRe,"STRONG",{});var QMt=s(PFe);sFr=r(QMt,"convbert"),QMt.forEach(t),lFr=r(dRe," \u2014 "),oH=n(dRe,"A",{href:!0});var HMt=s(oH);iFr=r(HMt,"TFConvBertForSequenceClassification"),HMt.forEach(t),dFr=r(dRe," (ConvBERT model)"),dRe.forEach(t),cFr=i(ae),fC=n(ae,"LI",{});var cRe=s(fC);BFe=n(cRe,"STRONG",{});var UMt=s(BFe);mFr=r(UMt,"ctrl"),UMt.forEach(t),fFr=r(cRe," \u2014 "),rH=n(cRe,"A",{href:!0});var JMt=s(rH);gFr=r(JMt,"TFCTRLForSequenceClassification"),JMt.forEach(t),hFr=r(cRe," (CTRL model)"),cRe.forEach(t),uFr=i(ae),gC=n(ae,"LI",{});var mRe=s(gC);IFe=n(mRe,"STRONG",{});var YMt=s(IFe);pFr=r(YMt,"deberta"),YMt.forEach(t),_Fr=r(mRe," \u2014 "),tH=n(mRe,"A",{href:!0});var KMt=s(tH);bFr=r(KMt,"TFDebertaForSequenceClassification"),KMt.forEach(t),vFr=r(mRe," (DeBERTa model)"),mRe.forEach(t),FFr=i(ae),hC=n(ae,"LI",{});var fRe=s(hC);qFe=n(fRe,"STRONG",{});var ZMt=s(qFe);TFr=r(ZMt,"deberta-v2"),ZMt.forEach(t),MFr=r(fRe," \u2014 "),aH=n(fRe,"A",{href:!0});var e4t=s(aH);EFr=r(e4t,"TFDebertaV2ForSequenceClassification"),e4t.forEach(t),CFr=r(fRe," (DeBERTa-v2 model)"),fRe.forEach(t),wFr=i(ae),uC=n(ae,"LI",{});var gRe=s(uC);NFe=n(gRe,"STRONG",{});var o4t=s(NFe);AFr=r(o4t,"distilbert"),o4t.forEach(t),yFr=r(gRe," \u2014 "),nH=n(gRe,"A",{href:!0});var r4t=s(nH);LFr=r(r4t,"TFDistilBertForSequenceClassification"),r4t.forEach(t),xFr=r(gRe," (DistilBERT model)"),gRe.forEach(t),$Fr=i(ae),pC=n(ae,"LI",{});var hRe=s(pC);jFe=n(hRe,"STRONG",{});var t4t=s(jFe);kFr=r(t4t,"electra"),t4t.forEach(t),SFr=r(hRe," \u2014 "),sH=n(hRe,"A",{href:!0});var a4t=s(sH);RFr=r(a4t,"TFElectraForSequenceClassification"),a4t.forEach(t),PFr=r(hRe," (ELECTRA model)"),hRe.forEach(t),BFr=i(ae),_C=n(ae,"LI",{});var uRe=s(_C);DFe=n(uRe,"STRONG",{});var n4t=s(DFe);IFr=r(n4t,"flaubert"),n4t.forEach(t),qFr=r(uRe," \u2014 "),lH=n(uRe,"A",{href:!0});var s4t=s(lH);NFr=r(s4t,"TFFlaubertForSequenceClassification"),s4t.forEach(t),jFr=r(uRe," (FlauBERT model)"),uRe.forEach(t),DFr=i(ae),bC=n(ae,"LI",{});var pRe=s(bC);GFe=n(pRe,"STRONG",{});var l4t=s(GFe);GFr=r(l4t,"funnel"),l4t.forEach(t),OFr=r(pRe," \u2014 "),iH=n(pRe,"A",{href:!0});var i4t=s(iH);VFr=r(i4t,"TFFunnelForSequenceClassification"),i4t.forEach(t),XFr=r(pRe," (Funnel Transformer model)"),pRe.forEach(t),zFr=i(ae),vC=n(ae,"LI",{});var _Re=s(vC);OFe=n(_Re,"STRONG",{});var d4t=s(OFe);WFr=r(d4t,"gpt2"),d4t.forEach(t),QFr=r(_Re," \u2014 "),dH=n(_Re,"A",{href:!0});var c4t=s(dH);HFr=r(c4t,"TFGPT2ForSequenceClassification"),c4t.forEach(t),UFr=r(_Re," (OpenAI GPT-2 model)"),_Re.forEach(t),JFr=i(ae),FC=n(ae,"LI",{});var bRe=s(FC);VFe=n(bRe,"STRONG",{});var m4t=s(VFe);YFr=r(m4t,"gptj"),m4t.forEach(t),KFr=r(bRe," \u2014 "),cH=n(bRe,"A",{href:!0});var f4t=s(cH);ZFr=r(f4t,"TFGPTJForSequenceClassification"),f4t.forEach(t),e1r=r(bRe," (GPT-J model)"),bRe.forEach(t),o1r=i(ae),TC=n(ae,"LI",{});var vRe=s(TC);XFe=n(vRe,"STRONG",{});var g4t=s(XFe);r1r=r(g4t,"layoutlm"),g4t.forEach(t),t1r=r(vRe," \u2014 "),mH=n(vRe,"A",{href:!0});var h4t=s(mH);a1r=r(h4t,"TFLayoutLMForSequenceClassification"),h4t.forEach(t),n1r=r(vRe," (LayoutLM model)"),vRe.forEach(t),s1r=i(ae),MC=n(ae,"LI",{});var FRe=s(MC);zFe=n(FRe,"STRONG",{});var u4t=s(zFe);l1r=r(u4t,"longformer"),u4t.forEach(t),i1r=r(FRe," \u2014 "),fH=n(FRe,"A",{href:!0});var p4t=s(fH);d1r=r(p4t,"TFLongformerForSequenceClassification"),p4t.forEach(t),c1r=r(FRe," (Longformer model)"),FRe.forEach(t),m1r=i(ae),EC=n(ae,"LI",{});var TRe=s(EC);WFe=n(TRe,"STRONG",{});var _4t=s(WFe);f1r=r(_4t,"mobilebert"),_4t.forEach(t),g1r=r(TRe," \u2014 "),gH=n(TRe,"A",{href:!0});var b4t=s(gH);h1r=r(b4t,"TFMobileBertForSequenceClassification"),b4t.forEach(t),u1r=r(TRe," (MobileBERT model)"),TRe.forEach(t),p1r=i(ae),CC=n(ae,"LI",{});var MRe=s(CC);QFe=n(MRe,"STRONG",{});var v4t=s(QFe);_1r=r(v4t,"mpnet"),v4t.forEach(t),b1r=r(MRe," \u2014 "),hH=n(MRe,"A",{href:!0});var F4t=s(hH);v1r=r(F4t,"TFMPNetForSequenceClassification"),F4t.forEach(t),F1r=r(MRe," (MPNet model)"),MRe.forEach(t),T1r=i(ae),wC=n(ae,"LI",{});var ERe=s(wC);HFe=n(ERe,"STRONG",{});var T4t=s(HFe);M1r=r(T4t,"openai-gpt"),T4t.forEach(t),E1r=r(ERe," \u2014 "),uH=n(ERe,"A",{href:!0});var M4t=s(uH);C1r=r(M4t,"TFOpenAIGPTForSequenceClassification"),M4t.forEach(t),w1r=r(ERe," (OpenAI GPT model)"),ERe.forEach(t),A1r=i(ae),AC=n(ae,"LI",{});var CRe=s(AC);UFe=n(CRe,"STRONG",{});var E4t=s(UFe);y1r=r(E4t,"rembert"),E4t.forEach(t),L1r=r(CRe," \u2014 "),pH=n(CRe,"A",{href:!0});var C4t=s(pH);x1r=r(C4t,"TFRemBertForSequenceClassification"),C4t.forEach(t),$1r=r(CRe," (RemBERT model)"),CRe.forEach(t),k1r=i(ae),yC=n(ae,"LI",{});var wRe=s(yC);JFe=n(wRe,"STRONG",{});var w4t=s(JFe);S1r=r(w4t,"roberta"),w4t.forEach(t),R1r=r(wRe," \u2014 "),_H=n(wRe,"A",{href:!0});var A4t=s(_H);P1r=r(A4t,"TFRobertaForSequenceClassification"),A4t.forEach(t),B1r=r(wRe," (RoBERTa model)"),wRe.forEach(t),I1r=i(ae),LC=n(ae,"LI",{});var ARe=s(LC);YFe=n(ARe,"STRONG",{});var y4t=s(YFe);q1r=r(y4t,"roformer"),y4t.forEach(t),N1r=r(ARe," \u2014 "),bH=n(ARe,"A",{href:!0});var L4t=s(bH);j1r=r(L4t,"TFRoFormerForSequenceClassification"),L4t.forEach(t),D1r=r(ARe," (RoFormer model)"),ARe.forEach(t),G1r=i(ae),xC=n(ae,"LI",{});var yRe=s(xC);KFe=n(yRe,"STRONG",{});var x4t=s(KFe);O1r=r(x4t,"tapas"),x4t.forEach(t),V1r=r(yRe," \u2014 "),vH=n(yRe,"A",{href:!0});var $4t=s(vH);X1r=r($4t,"TFTapasForSequenceClassification"),$4t.forEach(t),z1r=r(yRe," (TAPAS model)"),yRe.forEach(t),W1r=i(ae),$C=n(ae,"LI",{});var LRe=s($C);ZFe=n(LRe,"STRONG",{});var k4t=s(ZFe);Q1r=r(k4t,"transfo-xl"),k4t.forEach(t),H1r=r(LRe," \u2014 "),FH=n(LRe,"A",{href:!0});var S4t=s(FH);U1r=r(S4t,"TFTransfoXLForSequenceClassification"),S4t.forEach(t),J1r=r(LRe," (Transformer-XL model)"),LRe.forEach(t),Y1r=i(ae),kC=n(ae,"LI",{});var xRe=s(kC);e1e=n(xRe,"STRONG",{});var R4t=s(e1e);K1r=r(R4t,"xlm"),R4t.forEach(t),Z1r=r(xRe," \u2014 "),TH=n(xRe,"A",{href:!0});var P4t=s(TH);eTr=r(P4t,"TFXLMForSequenceClassification"),P4t.forEach(t),oTr=r(xRe," (XLM model)"),xRe.forEach(t),rTr=i(ae),SC=n(ae,"LI",{});var $Re=s(SC);o1e=n($Re,"STRONG",{});var B4t=s(o1e);tTr=r(B4t,"xlm-roberta"),B4t.forEach(t),aTr=r($Re," \u2014 "),MH=n($Re,"A",{href:!0});var I4t=s(MH);nTr=r(I4t,"TFXLMRobertaForSequenceClassification"),I4t.forEach(t),sTr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),lTr=i(ae),RC=n(ae,"LI",{});var kRe=s(RC);r1e=n(kRe,"STRONG",{});var q4t=s(r1e);iTr=r(q4t,"xlnet"),q4t.forEach(t),dTr=r(kRe," \u2014 "),EH=n(kRe,"A",{href:!0});var N4t=s(EH);cTr=r(N4t,"TFXLNetForSequenceClassification"),N4t.forEach(t),mTr=r(kRe," (XLNet model)"),kRe.forEach(t),ae.forEach(t),fTr=i(wl),T(PC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),rNe=i(m),lc=n(m,"H2",{class:!0});var iDe=s(lc);BC=n(iDe,"A",{id:!0,class:!0,href:!0});var j4t=s(BC);t1e=n(j4t,"SPAN",{});var D4t=s(t1e);T(A7.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),gTr=i(iDe),a1e=n(iDe,"SPAN",{});var G4t=s(a1e);hTr=r(G4t,"TFAutoModelForMultipleChoice"),G4t.forEach(t),iDe.forEach(t),tNe=i(m),ar=n(m,"DIV",{class:!0});var Al=s(ar);T(y7.$$.fragment,Al),uTr=i(Al),ic=n(Al,"P",{});var DZ=s(ic);pTr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=n(DZ,"A",{href:!0});var O4t=s(CH);_Tr=r(O4t,"from_pretrained()"),O4t.forEach(t),bTr=r(DZ," class method or the "),wH=n(DZ,"A",{href:!0});var V4t=s(wH);vTr=r(V4t,"from_config()"),V4t.forEach(t),FTr=r(DZ,` class
method.`),DZ.forEach(t),TTr=i(Al),L7=n(Al,"P",{});var dDe=s(L7);MTr=r(dDe,"This class cannot be instantiated directly using "),n1e=n(dDe,"CODE",{});var X4t=s(n1e);ETr=r(X4t,"__init__()"),X4t.forEach(t),CTr=r(dDe," (throws an error)."),dDe.forEach(t),wTr=i(Al),Pt=n(Al,"DIV",{class:!0});var M6=s(Pt);T(x7.$$.fragment,M6),ATr=i(M6),s1e=n(M6,"P",{});var z4t=s(s1e);yTr=r(z4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z4t.forEach(t),LTr=i(M6),dc=n(M6,"P",{});var GZ=s(dc);xTr=r(GZ,`Note:
Loading a model from its configuration file does `),l1e=n(GZ,"STRONG",{});var W4t=s(l1e);$Tr=r(W4t,"not"),W4t.forEach(t),kTr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(GZ,"A",{href:!0});var Q4t=s(AH);STr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),RTr=r(GZ," to load the model weights."),GZ.forEach(t),PTr=i(M6),T(IC.$$.fragment,M6),M6.forEach(t),BTr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T($7.$$.fragment,yl),ITr=i(yl),i1e=n(yl,"P",{});var H4t=s(i1e);qTr=r(H4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H4t.forEach(t),NTr=i(yl),sn=n(yl,"P",{});var E6=s(sn);jTr=r(E6,"The model class to instantiate is selected based on the "),d1e=n(E6,"CODE",{});var U4t=s(d1e);DTr=r(U4t,"model_type"),U4t.forEach(t),GTr=r(E6,` property of the config object (either
passed as an argument or loaded from `),c1e=n(E6,"CODE",{});var J4t=s(c1e);OTr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),VTr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(E6,"CODE",{});var Y4t=s(m1e);XTr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),zTr=r(E6,":"),E6.forEach(t),WTr=i(yl),he=n(yl,"UL",{});var _e=s(he);qC=n(_e,"LI",{});var SRe=s(qC);f1e=n(SRe,"STRONG",{});var K4t=s(f1e);QTr=r(K4t,"albert"),K4t.forEach(t),HTr=r(SRe," \u2014 "),yH=n(SRe,"A",{href:!0});var Z4t=s(yH);UTr=r(Z4t,"TFAlbertForMultipleChoice"),Z4t.forEach(t),JTr=r(SRe," (ALBERT model)"),SRe.forEach(t),YTr=i(_e),NC=n(_e,"LI",{});var RRe=s(NC);g1e=n(RRe,"STRONG",{});var eEt=s(g1e);KTr=r(eEt,"bert"),eEt.forEach(t),ZTr=r(RRe," \u2014 "),LH=n(RRe,"A",{href:!0});var oEt=s(LH);eMr=r(oEt,"TFBertForMultipleChoice"),oEt.forEach(t),oMr=r(RRe," (BERT model)"),RRe.forEach(t),rMr=i(_e),jC=n(_e,"LI",{});var PRe=s(jC);h1e=n(PRe,"STRONG",{});var rEt=s(h1e);tMr=r(rEt,"camembert"),rEt.forEach(t),aMr=r(PRe," \u2014 "),xH=n(PRe,"A",{href:!0});var tEt=s(xH);nMr=r(tEt,"TFCamembertForMultipleChoice"),tEt.forEach(t),sMr=r(PRe," (CamemBERT model)"),PRe.forEach(t),lMr=i(_e),DC=n(_e,"LI",{});var BRe=s(DC);u1e=n(BRe,"STRONG",{});var aEt=s(u1e);iMr=r(aEt,"convbert"),aEt.forEach(t),dMr=r(BRe," \u2014 "),$H=n(BRe,"A",{href:!0});var nEt=s($H);cMr=r(nEt,"TFConvBertForMultipleChoice"),nEt.forEach(t),mMr=r(BRe," (ConvBERT model)"),BRe.forEach(t),fMr=i(_e),GC=n(_e,"LI",{});var IRe=s(GC);p1e=n(IRe,"STRONG",{});var sEt=s(p1e);gMr=r(sEt,"distilbert"),sEt.forEach(t),hMr=r(IRe," \u2014 "),kH=n(IRe,"A",{href:!0});var lEt=s(kH);uMr=r(lEt,"TFDistilBertForMultipleChoice"),lEt.forEach(t),pMr=r(IRe," (DistilBERT model)"),IRe.forEach(t),_Mr=i(_e),OC=n(_e,"LI",{});var qRe=s(OC);_1e=n(qRe,"STRONG",{});var iEt=s(_1e);bMr=r(iEt,"electra"),iEt.forEach(t),vMr=r(qRe," \u2014 "),SH=n(qRe,"A",{href:!0});var dEt=s(SH);FMr=r(dEt,"TFElectraForMultipleChoice"),dEt.forEach(t),TMr=r(qRe," (ELECTRA model)"),qRe.forEach(t),MMr=i(_e),VC=n(_e,"LI",{});var NRe=s(VC);b1e=n(NRe,"STRONG",{});var cEt=s(b1e);EMr=r(cEt,"flaubert"),cEt.forEach(t),CMr=r(NRe," \u2014 "),RH=n(NRe,"A",{href:!0});var mEt=s(RH);wMr=r(mEt,"TFFlaubertForMultipleChoice"),mEt.forEach(t),AMr=r(NRe," (FlauBERT model)"),NRe.forEach(t),yMr=i(_e),XC=n(_e,"LI",{});var jRe=s(XC);v1e=n(jRe,"STRONG",{});var fEt=s(v1e);LMr=r(fEt,"funnel"),fEt.forEach(t),xMr=r(jRe," \u2014 "),PH=n(jRe,"A",{href:!0});var gEt=s(PH);$Mr=r(gEt,"TFFunnelForMultipleChoice"),gEt.forEach(t),kMr=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),SMr=i(_e),zC=n(_e,"LI",{});var DRe=s(zC);F1e=n(DRe,"STRONG",{});var hEt=s(F1e);RMr=r(hEt,"longformer"),hEt.forEach(t),PMr=r(DRe," \u2014 "),BH=n(DRe,"A",{href:!0});var uEt=s(BH);BMr=r(uEt,"TFLongformerForMultipleChoice"),uEt.forEach(t),IMr=r(DRe," (Longformer model)"),DRe.forEach(t),qMr=i(_e),WC=n(_e,"LI",{});var GRe=s(WC);T1e=n(GRe,"STRONG",{});var pEt=s(T1e);NMr=r(pEt,"mobilebert"),pEt.forEach(t),jMr=r(GRe," \u2014 "),IH=n(GRe,"A",{href:!0});var _Et=s(IH);DMr=r(_Et,"TFMobileBertForMultipleChoice"),_Et.forEach(t),GMr=r(GRe," (MobileBERT model)"),GRe.forEach(t),OMr=i(_e),QC=n(_e,"LI",{});var ORe=s(QC);M1e=n(ORe,"STRONG",{});var bEt=s(M1e);VMr=r(bEt,"mpnet"),bEt.forEach(t),XMr=r(ORe," \u2014 "),qH=n(ORe,"A",{href:!0});var vEt=s(qH);zMr=r(vEt,"TFMPNetForMultipleChoice"),vEt.forEach(t),WMr=r(ORe," (MPNet model)"),ORe.forEach(t),QMr=i(_e),HC=n(_e,"LI",{});var VRe=s(HC);E1e=n(VRe,"STRONG",{});var FEt=s(E1e);HMr=r(FEt,"rembert"),FEt.forEach(t),UMr=r(VRe," \u2014 "),NH=n(VRe,"A",{href:!0});var TEt=s(NH);JMr=r(TEt,"TFRemBertForMultipleChoice"),TEt.forEach(t),YMr=r(VRe," (RemBERT model)"),VRe.forEach(t),KMr=i(_e),UC=n(_e,"LI",{});var XRe=s(UC);C1e=n(XRe,"STRONG",{});var MEt=s(C1e);ZMr=r(MEt,"roberta"),MEt.forEach(t),e4r=r(XRe," \u2014 "),jH=n(XRe,"A",{href:!0});var EEt=s(jH);o4r=r(EEt,"TFRobertaForMultipleChoice"),EEt.forEach(t),r4r=r(XRe," (RoBERTa model)"),XRe.forEach(t),t4r=i(_e),JC=n(_e,"LI",{});var zRe=s(JC);w1e=n(zRe,"STRONG",{});var CEt=s(w1e);a4r=r(CEt,"roformer"),CEt.forEach(t),n4r=r(zRe," \u2014 "),DH=n(zRe,"A",{href:!0});var wEt=s(DH);s4r=r(wEt,"TFRoFormerForMultipleChoice"),wEt.forEach(t),l4r=r(zRe," (RoFormer model)"),zRe.forEach(t),i4r=i(_e),YC=n(_e,"LI",{});var WRe=s(YC);A1e=n(WRe,"STRONG",{});var AEt=s(A1e);d4r=r(AEt,"xlm"),AEt.forEach(t),c4r=r(WRe," \u2014 "),GH=n(WRe,"A",{href:!0});var yEt=s(GH);m4r=r(yEt,"TFXLMForMultipleChoice"),yEt.forEach(t),f4r=r(WRe," (XLM model)"),WRe.forEach(t),g4r=i(_e),KC=n(_e,"LI",{});var QRe=s(KC);y1e=n(QRe,"STRONG",{});var LEt=s(y1e);h4r=r(LEt,"xlm-roberta"),LEt.forEach(t),u4r=r(QRe," \u2014 "),OH=n(QRe,"A",{href:!0});var xEt=s(OH);p4r=r(xEt,"TFXLMRobertaForMultipleChoice"),xEt.forEach(t),_4r=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),b4r=i(_e),ZC=n(_e,"LI",{});var HRe=s(ZC);L1e=n(HRe,"STRONG",{});var $Et=s(L1e);v4r=r($Et,"xlnet"),$Et.forEach(t),F4r=r(HRe," \u2014 "),VH=n(HRe,"A",{href:!0});var kEt=s(VH);T4r=r(kEt,"TFXLNetForMultipleChoice"),kEt.forEach(t),M4r=r(HRe," (XLNet model)"),HRe.forEach(t),_e.forEach(t),E4r=i(yl),T(e5.$$.fragment,yl),yl.forEach(t),Al.forEach(t),aNe=i(m),cc=n(m,"H2",{class:!0});var cDe=s(cc);o5=n(cDe,"A",{id:!0,class:!0,href:!0});var SEt=s(o5);x1e=n(SEt,"SPAN",{});var REt=s(x1e);T(k7.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),C4r=i(cDe),$1e=n(cDe,"SPAN",{});var PEt=s($1e);w4r=r(PEt,"TFAutoModelForNextSentencePrediction"),PEt.forEach(t),cDe.forEach(t),nNe=i(m),nr=n(m,"DIV",{class:!0});var Ll=s(nr);T(S7.$$.fragment,Ll),A4r=i(Ll),mc=n(Ll,"P",{});var OZ=s(mc);y4r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XH=n(OZ,"A",{href:!0});var BEt=s(XH);L4r=r(BEt,"from_pretrained()"),BEt.forEach(t),x4r=r(OZ," class method or the "),zH=n(OZ,"A",{href:!0});var IEt=s(zH);$4r=r(IEt,"from_config()"),IEt.forEach(t),k4r=r(OZ,` class
method.`),OZ.forEach(t),S4r=i(Ll),R7=n(Ll,"P",{});var mDe=s(R7);R4r=r(mDe,"This class cannot be instantiated directly using "),k1e=n(mDe,"CODE",{});var qEt=s(k1e);P4r=r(qEt,"__init__()"),qEt.forEach(t),B4r=r(mDe," (throws an error)."),mDe.forEach(t),I4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var C6=s(Bt);T(P7.$$.fragment,C6),q4r=i(C6),S1e=n(C6,"P",{});var NEt=s(S1e);N4r=r(NEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NEt.forEach(t),j4r=i(C6),fc=n(C6,"P",{});var VZ=s(fc);D4r=r(VZ,`Note:
Loading a model from its configuration file does `),R1e=n(VZ,"STRONG",{});var jEt=s(R1e);G4r=r(jEt,"not"),jEt.forEach(t),O4r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(VZ,"A",{href:!0});var DEt=s(WH);V4r=r(DEt,"from_pretrained()"),DEt.forEach(t),X4r=r(VZ," to load the model weights."),VZ.forEach(t),z4r=i(C6),T(r5.$$.fragment,C6),C6.forEach(t),W4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(B7.$$.fragment,xl),Q4r=i(xl),P1e=n(xl,"P",{});var GEt=s(P1e);H4r=r(GEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GEt.forEach(t),U4r=i(xl),ln=n(xl,"P",{});var w6=s(ln);J4r=r(w6,"The model class to instantiate is selected based on the "),B1e=n(w6,"CODE",{});var OEt=s(B1e);Y4r=r(OEt,"model_type"),OEt.forEach(t),K4r=r(w6,` property of the config object (either
passed as an argument or loaded from `),I1e=n(w6,"CODE",{});var VEt=s(I1e);Z4r=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),eEr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(w6,"CODE",{});var XEt=s(q1e);oEr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),rEr=r(w6,":"),w6.forEach(t),tEr=i(xl),I7=n(xl,"UL",{});var fDe=s(I7);t5=n(fDe,"LI",{});var URe=s(t5);N1e=n(URe,"STRONG",{});var zEt=s(N1e);aEr=r(zEt,"bert"),zEt.forEach(t),nEr=r(URe," \u2014 "),QH=n(URe,"A",{href:!0});var WEt=s(QH);sEr=r(WEt,"TFBertForNextSentencePrediction"),WEt.forEach(t),lEr=r(URe," (BERT model)"),URe.forEach(t),iEr=i(fDe),a5=n(fDe,"LI",{});var JRe=s(a5);j1e=n(JRe,"STRONG",{});var QEt=s(j1e);dEr=r(QEt,"mobilebert"),QEt.forEach(t),cEr=r(JRe," \u2014 "),HH=n(JRe,"A",{href:!0});var HEt=s(HH);mEr=r(HEt,"TFMobileBertForNextSentencePrediction"),HEt.forEach(t),fEr=r(JRe," (MobileBERT model)"),JRe.forEach(t),fDe.forEach(t),gEr=i(xl),T(n5.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),sNe=i(m),gc=n(m,"H2",{class:!0});var gDe=s(gc);s5=n(gDe,"A",{id:!0,class:!0,href:!0});var UEt=s(s5);D1e=n(UEt,"SPAN",{});var JEt=s(D1e);T(q7.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),hEr=i(gDe),G1e=n(gDe,"SPAN",{});var YEt=s(G1e);uEr=r(YEt,"TFAutoModelForTableQuestionAnswering"),YEt.forEach(t),gDe.forEach(t),lNe=i(m),sr=n(m,"DIV",{class:!0});var $l=s(sr);T(N7.$$.fragment,$l),pEr=i($l),hc=n($l,"P",{});var XZ=s(hc);_Er=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UH=n(XZ,"A",{href:!0});var KEt=s(UH);bEr=r(KEt,"from_pretrained()"),KEt.forEach(t),vEr=r(XZ," class method or the "),JH=n(XZ,"A",{href:!0});var ZEt=s(JH);FEr=r(ZEt,"from_config()"),ZEt.forEach(t),TEr=r(XZ,` class
method.`),XZ.forEach(t),MEr=i($l),j7=n($l,"P",{});var hDe=s(j7);EEr=r(hDe,"This class cannot be instantiated directly using "),O1e=n(hDe,"CODE",{});var eCt=s(O1e);CEr=r(eCt,"__init__()"),eCt.forEach(t),wEr=r(hDe," (throws an error)."),hDe.forEach(t),AEr=i($l),It=n($l,"DIV",{class:!0});var A6=s(It);T(D7.$$.fragment,A6),yEr=i(A6),V1e=n(A6,"P",{});var oCt=s(V1e);LEr=r(oCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oCt.forEach(t),xEr=i(A6),uc=n(A6,"P",{});var zZ=s(uc);$Er=r(zZ,`Note:
Loading a model from its configuration file does `),X1e=n(zZ,"STRONG",{});var rCt=s(X1e);kEr=r(rCt,"not"),rCt.forEach(t),SEr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(zZ,"A",{href:!0});var tCt=s(YH);REr=r(tCt,"from_pretrained()"),tCt.forEach(t),PEr=r(zZ," to load the model weights."),zZ.forEach(t),BEr=i(A6),T(l5.$$.fragment,A6),A6.forEach(t),IEr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(G7.$$.fragment,kl),qEr=i(kl),z1e=n(kl,"P",{});var aCt=s(z1e);NEr=r(aCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aCt.forEach(t),jEr=i(kl),dn=n(kl,"P",{});var y6=s(dn);DEr=r(y6,"The model class to instantiate is selected based on the "),W1e=n(y6,"CODE",{});var nCt=s(W1e);GEr=r(nCt,"model_type"),nCt.forEach(t),OEr=r(y6,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(y6,"CODE",{});var sCt=s(Q1e);VEr=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),XEr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(y6,"CODE",{});var lCt=s(H1e);zEr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),WEr=r(y6,":"),y6.forEach(t),QEr=i(kl),U1e=n(kl,"UL",{});var iCt=s(U1e);i5=n(iCt,"LI",{});var YRe=s(i5);J1e=n(YRe,"STRONG",{});var dCt=s(J1e);HEr=r(dCt,"tapas"),dCt.forEach(t),UEr=r(YRe," \u2014 "),KH=n(YRe,"A",{href:!0});var cCt=s(KH);JEr=r(cCt,"TFTapasForQuestionAnswering"),cCt.forEach(t),YEr=r(YRe," (TAPAS model)"),YRe.forEach(t),iCt.forEach(t),KEr=i(kl),T(d5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),iNe=i(m),pc=n(m,"H2",{class:!0});var uDe=s(pc);c5=n(uDe,"A",{id:!0,class:!0,href:!0});var mCt=s(c5);Y1e=n(mCt,"SPAN",{});var fCt=s(Y1e);T(O7.$$.fragment,fCt),fCt.forEach(t),mCt.forEach(t),ZEr=i(uDe),K1e=n(uDe,"SPAN",{});var gCt=s(K1e);eCr=r(gCt,"TFAutoModelForTokenClassification"),gCt.forEach(t),uDe.forEach(t),dNe=i(m),lr=n(m,"DIV",{class:!0});var Sl=s(lr);T(V7.$$.fragment,Sl),oCr=i(Sl),_c=n(Sl,"P",{});var WZ=s(_c);rCr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZH=n(WZ,"A",{href:!0});var hCt=s(ZH);tCr=r(hCt,"from_pretrained()"),hCt.forEach(t),aCr=r(WZ," class method or the "),eU=n(WZ,"A",{href:!0});var uCt=s(eU);nCr=r(uCt,"from_config()"),uCt.forEach(t),sCr=r(WZ,` class
method.`),WZ.forEach(t),lCr=i(Sl),X7=n(Sl,"P",{});var pDe=s(X7);iCr=r(pDe,"This class cannot be instantiated directly using "),Z1e=n(pDe,"CODE",{});var pCt=s(Z1e);dCr=r(pCt,"__init__()"),pCt.forEach(t),cCr=r(pDe," (throws an error)."),pDe.forEach(t),mCr=i(Sl),qt=n(Sl,"DIV",{class:!0});var L6=s(qt);T(z7.$$.fragment,L6),fCr=i(L6),eTe=n(L6,"P",{});var _Ct=s(eTe);gCr=r(_Ct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Ct.forEach(t),hCr=i(L6),bc=n(L6,"P",{});var QZ=s(bc);uCr=r(QZ,`Note:
Loading a model from its configuration file does `),oTe=n(QZ,"STRONG",{});var bCt=s(oTe);pCr=r(bCt,"not"),bCt.forEach(t),_Cr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(QZ,"A",{href:!0});var vCt=s(oU);bCr=r(vCt,"from_pretrained()"),vCt.forEach(t),vCr=r(QZ," to load the model weights."),QZ.forEach(t),FCr=i(L6),T(m5.$$.fragment,L6),L6.forEach(t),TCr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(W7.$$.fragment,Rl),MCr=i(Rl),rTe=n(Rl,"P",{});var FCt=s(rTe);ECr=r(FCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FCt.forEach(t),CCr=i(Rl),cn=n(Rl,"P",{});var x6=s(cn);wCr=r(x6,"The model class to instantiate is selected based on the "),tTe=n(x6,"CODE",{});var TCt=s(tTe);ACr=r(TCt,"model_type"),TCt.forEach(t),yCr=r(x6,` property of the config object (either
passed as an argument or loaded from `),aTe=n(x6,"CODE",{});var MCt=s(aTe);LCr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),xCr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(x6,"CODE",{});var ECt=s(nTe);$Cr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),kCr=r(x6,":"),x6.forEach(t),SCr=i(Rl),de=n(Rl,"UL",{});var fe=s(de);f5=n(fe,"LI",{});var KRe=s(f5);sTe=n(KRe,"STRONG",{});var CCt=s(sTe);RCr=r(CCt,"albert"),CCt.forEach(t),PCr=r(KRe," \u2014 "),rU=n(KRe,"A",{href:!0});var wCt=s(rU);BCr=r(wCt,"TFAlbertForTokenClassification"),wCt.forEach(t),ICr=r(KRe," (ALBERT model)"),KRe.forEach(t),qCr=i(fe),g5=n(fe,"LI",{});var ZRe=s(g5);lTe=n(ZRe,"STRONG",{});var ACt=s(lTe);NCr=r(ACt,"bert"),ACt.forEach(t),jCr=r(ZRe," \u2014 "),tU=n(ZRe,"A",{href:!0});var yCt=s(tU);DCr=r(yCt,"TFBertForTokenClassification"),yCt.forEach(t),GCr=r(ZRe," (BERT model)"),ZRe.forEach(t),OCr=i(fe),h5=n(fe,"LI",{});var ePe=s(h5);iTe=n(ePe,"STRONG",{});var LCt=s(iTe);VCr=r(LCt,"camembert"),LCt.forEach(t),XCr=r(ePe," \u2014 "),aU=n(ePe,"A",{href:!0});var xCt=s(aU);zCr=r(xCt,"TFCamembertForTokenClassification"),xCt.forEach(t),WCr=r(ePe," (CamemBERT model)"),ePe.forEach(t),QCr=i(fe),u5=n(fe,"LI",{});var oPe=s(u5);dTe=n(oPe,"STRONG",{});var $Ct=s(dTe);HCr=r($Ct,"convbert"),$Ct.forEach(t),UCr=r(oPe," \u2014 "),nU=n(oPe,"A",{href:!0});var kCt=s(nU);JCr=r(kCt,"TFConvBertForTokenClassification"),kCt.forEach(t),YCr=r(oPe," (ConvBERT model)"),oPe.forEach(t),KCr=i(fe),p5=n(fe,"LI",{});var rPe=s(p5);cTe=n(rPe,"STRONG",{});var SCt=s(cTe);ZCr=r(SCt,"deberta"),SCt.forEach(t),e5r=r(rPe," \u2014 "),sU=n(rPe,"A",{href:!0});var RCt=s(sU);o5r=r(RCt,"TFDebertaForTokenClassification"),RCt.forEach(t),r5r=r(rPe," (DeBERTa model)"),rPe.forEach(t),t5r=i(fe),_5=n(fe,"LI",{});var tPe=s(_5);mTe=n(tPe,"STRONG",{});var PCt=s(mTe);a5r=r(PCt,"deberta-v2"),PCt.forEach(t),n5r=r(tPe," \u2014 "),lU=n(tPe,"A",{href:!0});var BCt=s(lU);s5r=r(BCt,"TFDebertaV2ForTokenClassification"),BCt.forEach(t),l5r=r(tPe," (DeBERTa-v2 model)"),tPe.forEach(t),i5r=i(fe),b5=n(fe,"LI",{});var aPe=s(b5);fTe=n(aPe,"STRONG",{});var ICt=s(fTe);d5r=r(ICt,"distilbert"),ICt.forEach(t),c5r=r(aPe," \u2014 "),iU=n(aPe,"A",{href:!0});var qCt=s(iU);m5r=r(qCt,"TFDistilBertForTokenClassification"),qCt.forEach(t),f5r=r(aPe," (DistilBERT model)"),aPe.forEach(t),g5r=i(fe),v5=n(fe,"LI",{});var nPe=s(v5);gTe=n(nPe,"STRONG",{});var NCt=s(gTe);h5r=r(NCt,"electra"),NCt.forEach(t),u5r=r(nPe," \u2014 "),dU=n(nPe,"A",{href:!0});var jCt=s(dU);p5r=r(jCt,"TFElectraForTokenClassification"),jCt.forEach(t),_5r=r(nPe," (ELECTRA model)"),nPe.forEach(t),b5r=i(fe),F5=n(fe,"LI",{});var sPe=s(F5);hTe=n(sPe,"STRONG",{});var DCt=s(hTe);v5r=r(DCt,"flaubert"),DCt.forEach(t),F5r=r(sPe," \u2014 "),cU=n(sPe,"A",{href:!0});var GCt=s(cU);T5r=r(GCt,"TFFlaubertForTokenClassification"),GCt.forEach(t),M5r=r(sPe," (FlauBERT model)"),sPe.forEach(t),E5r=i(fe),T5=n(fe,"LI",{});var lPe=s(T5);uTe=n(lPe,"STRONG",{});var OCt=s(uTe);C5r=r(OCt,"funnel"),OCt.forEach(t),w5r=r(lPe," \u2014 "),mU=n(lPe,"A",{href:!0});var VCt=s(mU);A5r=r(VCt,"TFFunnelForTokenClassification"),VCt.forEach(t),y5r=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),L5r=i(fe),M5=n(fe,"LI",{});var iPe=s(M5);pTe=n(iPe,"STRONG",{});var XCt=s(pTe);x5r=r(XCt,"layoutlm"),XCt.forEach(t),$5r=r(iPe," \u2014 "),fU=n(iPe,"A",{href:!0});var zCt=s(fU);k5r=r(zCt,"TFLayoutLMForTokenClassification"),zCt.forEach(t),S5r=r(iPe," (LayoutLM model)"),iPe.forEach(t),R5r=i(fe),E5=n(fe,"LI",{});var dPe=s(E5);_Te=n(dPe,"STRONG",{});var WCt=s(_Te);P5r=r(WCt,"longformer"),WCt.forEach(t),B5r=r(dPe," \u2014 "),gU=n(dPe,"A",{href:!0});var QCt=s(gU);I5r=r(QCt,"TFLongformerForTokenClassification"),QCt.forEach(t),q5r=r(dPe," (Longformer model)"),dPe.forEach(t),N5r=i(fe),C5=n(fe,"LI",{});var cPe=s(C5);bTe=n(cPe,"STRONG",{});var HCt=s(bTe);j5r=r(HCt,"mobilebert"),HCt.forEach(t),D5r=r(cPe," \u2014 "),hU=n(cPe,"A",{href:!0});var UCt=s(hU);G5r=r(UCt,"TFMobileBertForTokenClassification"),UCt.forEach(t),O5r=r(cPe," (MobileBERT model)"),cPe.forEach(t),V5r=i(fe),w5=n(fe,"LI",{});var mPe=s(w5);vTe=n(mPe,"STRONG",{});var JCt=s(vTe);X5r=r(JCt,"mpnet"),JCt.forEach(t),z5r=r(mPe," \u2014 "),uU=n(mPe,"A",{href:!0});var YCt=s(uU);W5r=r(YCt,"TFMPNetForTokenClassification"),YCt.forEach(t),Q5r=r(mPe," (MPNet model)"),mPe.forEach(t),H5r=i(fe),A5=n(fe,"LI",{});var fPe=s(A5);FTe=n(fPe,"STRONG",{});var KCt=s(FTe);U5r=r(KCt,"rembert"),KCt.forEach(t),J5r=r(fPe," \u2014 "),pU=n(fPe,"A",{href:!0});var ZCt=s(pU);Y5r=r(ZCt,"TFRemBertForTokenClassification"),ZCt.forEach(t),K5r=r(fPe," (RemBERT model)"),fPe.forEach(t),Z5r=i(fe),y5=n(fe,"LI",{});var gPe=s(y5);TTe=n(gPe,"STRONG",{});var e5t=s(TTe);e3r=r(e5t,"roberta"),e5t.forEach(t),o3r=r(gPe," \u2014 "),_U=n(gPe,"A",{href:!0});var o5t=s(_U);r3r=r(o5t,"TFRobertaForTokenClassification"),o5t.forEach(t),t3r=r(gPe," (RoBERTa model)"),gPe.forEach(t),a3r=i(fe),L5=n(fe,"LI",{});var hPe=s(L5);MTe=n(hPe,"STRONG",{});var r5t=s(MTe);n3r=r(r5t,"roformer"),r5t.forEach(t),s3r=r(hPe," \u2014 "),bU=n(hPe,"A",{href:!0});var t5t=s(bU);l3r=r(t5t,"TFRoFormerForTokenClassification"),t5t.forEach(t),i3r=r(hPe," (RoFormer model)"),hPe.forEach(t),d3r=i(fe),x5=n(fe,"LI",{});var uPe=s(x5);ETe=n(uPe,"STRONG",{});var a5t=s(ETe);c3r=r(a5t,"xlm"),a5t.forEach(t),m3r=r(uPe," \u2014 "),vU=n(uPe,"A",{href:!0});var n5t=s(vU);f3r=r(n5t,"TFXLMForTokenClassification"),n5t.forEach(t),g3r=r(uPe," (XLM model)"),uPe.forEach(t),h3r=i(fe),$5=n(fe,"LI",{});var pPe=s($5);CTe=n(pPe,"STRONG",{});var s5t=s(CTe);u3r=r(s5t,"xlm-roberta"),s5t.forEach(t),p3r=r(pPe," \u2014 "),FU=n(pPe,"A",{href:!0});var l5t=s(FU);_3r=r(l5t,"TFXLMRobertaForTokenClassification"),l5t.forEach(t),b3r=r(pPe," (XLM-RoBERTa model)"),pPe.forEach(t),v3r=i(fe),k5=n(fe,"LI",{});var _Pe=s(k5);wTe=n(_Pe,"STRONG",{});var i5t=s(wTe);F3r=r(i5t,"xlnet"),i5t.forEach(t),T3r=r(_Pe," \u2014 "),TU=n(_Pe,"A",{href:!0});var d5t=s(TU);M3r=r(d5t,"TFXLNetForTokenClassification"),d5t.forEach(t),E3r=r(_Pe," (XLNet model)"),_Pe.forEach(t),fe.forEach(t),C3r=i(Rl),T(S5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),cNe=i(m),vc=n(m,"H2",{class:!0});var _De=s(vc);R5=n(_De,"A",{id:!0,class:!0,href:!0});var c5t=s(R5);ATe=n(c5t,"SPAN",{});var m5t=s(ATe);T(Q7.$$.fragment,m5t),m5t.forEach(t),c5t.forEach(t),w3r=i(_De),yTe=n(_De,"SPAN",{});var f5t=s(yTe);A3r=r(f5t,"TFAutoModelForQuestionAnswering"),f5t.forEach(t),_De.forEach(t),mNe=i(m),ir=n(m,"DIV",{class:!0});var Pl=s(ir);T(H7.$$.fragment,Pl),y3r=i(Pl),Fc=n(Pl,"P",{});var HZ=s(Fc);L3r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MU=n(HZ,"A",{href:!0});var g5t=s(MU);x3r=r(g5t,"from_pretrained()"),g5t.forEach(t),$3r=r(HZ," class method or the "),EU=n(HZ,"A",{href:!0});var h5t=s(EU);k3r=r(h5t,"from_config()"),h5t.forEach(t),S3r=r(HZ,` class
method.`),HZ.forEach(t),R3r=i(Pl),U7=n(Pl,"P",{});var bDe=s(U7);P3r=r(bDe,"This class cannot be instantiated directly using "),LTe=n(bDe,"CODE",{});var u5t=s(LTe);B3r=r(u5t,"__init__()"),u5t.forEach(t),I3r=r(bDe," (throws an error)."),bDe.forEach(t),q3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var $6=s(Nt);T(J7.$$.fragment,$6),N3r=i($6),xTe=n($6,"P",{});var p5t=s(xTe);j3r=r(p5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p5t.forEach(t),D3r=i($6),Tc=n($6,"P",{});var UZ=s(Tc);G3r=r(UZ,`Note:
Loading a model from its configuration file does `),$Te=n(UZ,"STRONG",{});var _5t=s($Te);O3r=r(_5t,"not"),_5t.forEach(t),V3r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(UZ,"A",{href:!0});var b5t=s(CU);X3r=r(b5t,"from_pretrained()"),b5t.forEach(t),z3r=r(UZ," to load the model weights."),UZ.forEach(t),W3r=i($6),T(P5.$$.fragment,$6),$6.forEach(t),Q3r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(Y7.$$.fragment,Bl),H3r=i(Bl),kTe=n(Bl,"P",{});var v5t=s(kTe);U3r=r(v5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v5t.forEach(t),J3r=i(Bl),mn=n(Bl,"P",{});var k6=s(mn);Y3r=r(k6,"The model class to instantiate is selected based on the "),STe=n(k6,"CODE",{});var F5t=s(STe);K3r=r(F5t,"model_type"),F5t.forEach(t),Z3r=r(k6,` property of the config object (either
passed as an argument or loaded from `),RTe=n(k6,"CODE",{});var T5t=s(RTe);ewr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),owr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(k6,"CODE",{});var M5t=s(PTe);rwr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),twr=r(k6,":"),k6.forEach(t),awr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);B5=n(ge,"LI",{});var bPe=s(B5);BTe=n(bPe,"STRONG",{});var E5t=s(BTe);nwr=r(E5t,"albert"),E5t.forEach(t),swr=r(bPe," \u2014 "),wU=n(bPe,"A",{href:!0});var C5t=s(wU);lwr=r(C5t,"TFAlbertForQuestionAnswering"),C5t.forEach(t),iwr=r(bPe," (ALBERT model)"),bPe.forEach(t),dwr=i(ge),I5=n(ge,"LI",{});var vPe=s(I5);ITe=n(vPe,"STRONG",{});var w5t=s(ITe);cwr=r(w5t,"bert"),w5t.forEach(t),mwr=r(vPe," \u2014 "),AU=n(vPe,"A",{href:!0});var A5t=s(AU);fwr=r(A5t,"TFBertForQuestionAnswering"),A5t.forEach(t),gwr=r(vPe," (BERT model)"),vPe.forEach(t),hwr=i(ge),q5=n(ge,"LI",{});var FPe=s(q5);qTe=n(FPe,"STRONG",{});var y5t=s(qTe);uwr=r(y5t,"camembert"),y5t.forEach(t),pwr=r(FPe," \u2014 "),yU=n(FPe,"A",{href:!0});var L5t=s(yU);_wr=r(L5t,"TFCamembertForQuestionAnswering"),L5t.forEach(t),bwr=r(FPe," (CamemBERT model)"),FPe.forEach(t),vwr=i(ge),N5=n(ge,"LI",{});var TPe=s(N5);NTe=n(TPe,"STRONG",{});var x5t=s(NTe);Fwr=r(x5t,"convbert"),x5t.forEach(t),Twr=r(TPe," \u2014 "),LU=n(TPe,"A",{href:!0});var $5t=s(LU);Mwr=r($5t,"TFConvBertForQuestionAnswering"),$5t.forEach(t),Ewr=r(TPe," (ConvBERT model)"),TPe.forEach(t),Cwr=i(ge),j5=n(ge,"LI",{});var MPe=s(j5);jTe=n(MPe,"STRONG",{});var k5t=s(jTe);wwr=r(k5t,"deberta"),k5t.forEach(t),Awr=r(MPe," \u2014 "),xU=n(MPe,"A",{href:!0});var S5t=s(xU);ywr=r(S5t,"TFDebertaForQuestionAnswering"),S5t.forEach(t),Lwr=r(MPe," (DeBERTa model)"),MPe.forEach(t),xwr=i(ge),D5=n(ge,"LI",{});var EPe=s(D5);DTe=n(EPe,"STRONG",{});var R5t=s(DTe);$wr=r(R5t,"deberta-v2"),R5t.forEach(t),kwr=r(EPe," \u2014 "),$U=n(EPe,"A",{href:!0});var P5t=s($U);Swr=r(P5t,"TFDebertaV2ForQuestionAnswering"),P5t.forEach(t),Rwr=r(EPe," (DeBERTa-v2 model)"),EPe.forEach(t),Pwr=i(ge),G5=n(ge,"LI",{});var CPe=s(G5);GTe=n(CPe,"STRONG",{});var B5t=s(GTe);Bwr=r(B5t,"distilbert"),B5t.forEach(t),Iwr=r(CPe," \u2014 "),kU=n(CPe,"A",{href:!0});var I5t=s(kU);qwr=r(I5t,"TFDistilBertForQuestionAnswering"),I5t.forEach(t),Nwr=r(CPe," (DistilBERT model)"),CPe.forEach(t),jwr=i(ge),O5=n(ge,"LI",{});var wPe=s(O5);OTe=n(wPe,"STRONG",{});var q5t=s(OTe);Dwr=r(q5t,"electra"),q5t.forEach(t),Gwr=r(wPe," \u2014 "),SU=n(wPe,"A",{href:!0});var N5t=s(SU);Owr=r(N5t,"TFElectraForQuestionAnswering"),N5t.forEach(t),Vwr=r(wPe," (ELECTRA model)"),wPe.forEach(t),Xwr=i(ge),V5=n(ge,"LI",{});var APe=s(V5);VTe=n(APe,"STRONG",{});var j5t=s(VTe);zwr=r(j5t,"flaubert"),j5t.forEach(t),Wwr=r(APe," \u2014 "),RU=n(APe,"A",{href:!0});var D5t=s(RU);Qwr=r(D5t,"TFFlaubertForQuestionAnsweringSimple"),D5t.forEach(t),Hwr=r(APe," (FlauBERT model)"),APe.forEach(t),Uwr=i(ge),X5=n(ge,"LI",{});var yPe=s(X5);XTe=n(yPe,"STRONG",{});var G5t=s(XTe);Jwr=r(G5t,"funnel"),G5t.forEach(t),Ywr=r(yPe," \u2014 "),PU=n(yPe,"A",{href:!0});var O5t=s(PU);Kwr=r(O5t,"TFFunnelForQuestionAnswering"),O5t.forEach(t),Zwr=r(yPe," (Funnel Transformer model)"),yPe.forEach(t),eAr=i(ge),z5=n(ge,"LI",{});var LPe=s(z5);zTe=n(LPe,"STRONG",{});var V5t=s(zTe);oAr=r(V5t,"gptj"),V5t.forEach(t),rAr=r(LPe," \u2014 "),BU=n(LPe,"A",{href:!0});var X5t=s(BU);tAr=r(X5t,"TFGPTJForQuestionAnswering"),X5t.forEach(t),aAr=r(LPe," (GPT-J model)"),LPe.forEach(t),nAr=i(ge),W5=n(ge,"LI",{});var xPe=s(W5);WTe=n(xPe,"STRONG",{});var z5t=s(WTe);sAr=r(z5t,"longformer"),z5t.forEach(t),lAr=r(xPe," \u2014 "),IU=n(xPe,"A",{href:!0});var W5t=s(IU);iAr=r(W5t,"TFLongformerForQuestionAnswering"),W5t.forEach(t),dAr=r(xPe," (Longformer model)"),xPe.forEach(t),cAr=i(ge),Q5=n(ge,"LI",{});var $Pe=s(Q5);QTe=n($Pe,"STRONG",{});var Q5t=s(QTe);mAr=r(Q5t,"mobilebert"),Q5t.forEach(t),fAr=r($Pe," \u2014 "),qU=n($Pe,"A",{href:!0});var H5t=s(qU);gAr=r(H5t,"TFMobileBertForQuestionAnswering"),H5t.forEach(t),hAr=r($Pe," (MobileBERT model)"),$Pe.forEach(t),uAr=i(ge),H5=n(ge,"LI",{});var kPe=s(H5);HTe=n(kPe,"STRONG",{});var U5t=s(HTe);pAr=r(U5t,"mpnet"),U5t.forEach(t),_Ar=r(kPe," \u2014 "),NU=n(kPe,"A",{href:!0});var J5t=s(NU);bAr=r(J5t,"TFMPNetForQuestionAnswering"),J5t.forEach(t),vAr=r(kPe," (MPNet model)"),kPe.forEach(t),FAr=i(ge),U5=n(ge,"LI",{});var SPe=s(U5);UTe=n(SPe,"STRONG",{});var Y5t=s(UTe);TAr=r(Y5t,"rembert"),Y5t.forEach(t),MAr=r(SPe," \u2014 "),jU=n(SPe,"A",{href:!0});var K5t=s(jU);EAr=r(K5t,"TFRemBertForQuestionAnswering"),K5t.forEach(t),CAr=r(SPe," (RemBERT model)"),SPe.forEach(t),wAr=i(ge),J5=n(ge,"LI",{});var RPe=s(J5);JTe=n(RPe,"STRONG",{});var Z5t=s(JTe);AAr=r(Z5t,"roberta"),Z5t.forEach(t),yAr=r(RPe," \u2014 "),DU=n(RPe,"A",{href:!0});var e3t=s(DU);LAr=r(e3t,"TFRobertaForQuestionAnswering"),e3t.forEach(t),xAr=r(RPe," (RoBERTa model)"),RPe.forEach(t),$Ar=i(ge),Y5=n(ge,"LI",{});var PPe=s(Y5);YTe=n(PPe,"STRONG",{});var o3t=s(YTe);kAr=r(o3t,"roformer"),o3t.forEach(t),SAr=r(PPe," \u2014 "),GU=n(PPe,"A",{href:!0});var r3t=s(GU);RAr=r(r3t,"TFRoFormerForQuestionAnswering"),r3t.forEach(t),PAr=r(PPe," (RoFormer model)"),PPe.forEach(t),BAr=i(ge),K5=n(ge,"LI",{});var BPe=s(K5);KTe=n(BPe,"STRONG",{});var t3t=s(KTe);IAr=r(t3t,"xlm"),t3t.forEach(t),qAr=r(BPe," \u2014 "),OU=n(BPe,"A",{href:!0});var a3t=s(OU);NAr=r(a3t,"TFXLMForQuestionAnsweringSimple"),a3t.forEach(t),jAr=r(BPe," (XLM model)"),BPe.forEach(t),DAr=i(ge),Z5=n(ge,"LI",{});var IPe=s(Z5);ZTe=n(IPe,"STRONG",{});var n3t=s(ZTe);GAr=r(n3t,"xlm-roberta"),n3t.forEach(t),OAr=r(IPe," \u2014 "),VU=n(IPe,"A",{href:!0});var s3t=s(VU);VAr=r(s3t,"TFXLMRobertaForQuestionAnswering"),s3t.forEach(t),XAr=r(IPe," (XLM-RoBERTa model)"),IPe.forEach(t),zAr=i(ge),e3=n(ge,"LI",{});var qPe=s(e3);eMe=n(qPe,"STRONG",{});var l3t=s(eMe);WAr=r(l3t,"xlnet"),l3t.forEach(t),QAr=r(qPe," \u2014 "),XU=n(qPe,"A",{href:!0});var i3t=s(XU);HAr=r(i3t,"TFXLNetForQuestionAnsweringSimple"),i3t.forEach(t),UAr=r(qPe," (XLNet model)"),qPe.forEach(t),ge.forEach(t),JAr=i(Bl),T(o3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),fNe=i(m),Mc=n(m,"H2",{class:!0});var vDe=s(Mc);r3=n(vDe,"A",{id:!0,class:!0,href:!0});var d3t=s(r3);oMe=n(d3t,"SPAN",{});var c3t=s(oMe);T(K7.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),YAr=i(vDe),rMe=n(vDe,"SPAN",{});var m3t=s(rMe);KAr=r(m3t,"TFAutoModelForVision2Seq"),m3t.forEach(t),vDe.forEach(t),gNe=i(m),dr=n(m,"DIV",{class:!0});var Il=s(dr);T(Z7.$$.fragment,Il),ZAr=i(Il),Ec=n(Il,"P",{});var JZ=s(Ec);e0r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zU=n(JZ,"A",{href:!0});var f3t=s(zU);o0r=r(f3t,"from_pretrained()"),f3t.forEach(t),r0r=r(JZ," class method or the "),WU=n(JZ,"A",{href:!0});var g3t=s(WU);t0r=r(g3t,"from_config()"),g3t.forEach(t),a0r=r(JZ,` class
method.`),JZ.forEach(t),n0r=i(Il),ex=n(Il,"P",{});var FDe=s(ex);s0r=r(FDe,"This class cannot be instantiated directly using "),tMe=n(FDe,"CODE",{});var h3t=s(tMe);l0r=r(h3t,"__init__()"),h3t.forEach(t),i0r=r(FDe," (throws an error)."),FDe.forEach(t),d0r=i(Il),jt=n(Il,"DIV",{class:!0});var S6=s(jt);T(ox.$$.fragment,S6),c0r=i(S6),aMe=n(S6,"P",{});var u3t=s(aMe);m0r=r(u3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u3t.forEach(t),f0r=i(S6),Cc=n(S6,"P",{});var YZ=s(Cc);g0r=r(YZ,`Note:
Loading a model from its configuration file does `),nMe=n(YZ,"STRONG",{});var p3t=s(nMe);h0r=r(p3t,"not"),p3t.forEach(t),u0r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(YZ,"A",{href:!0});var _3t=s(QU);p0r=r(_3t,"from_pretrained()"),_3t.forEach(t),_0r=r(YZ," to load the model weights."),YZ.forEach(t),b0r=i(S6),T(t3.$$.fragment,S6),S6.forEach(t),v0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(rx.$$.fragment,ql),F0r=i(ql),sMe=n(ql,"P",{});var b3t=s(sMe);T0r=r(b3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b3t.forEach(t),M0r=i(ql),fn=n(ql,"P",{});var R6=s(fn);E0r=r(R6,"The model class to instantiate is selected based on the "),lMe=n(R6,"CODE",{});var v3t=s(lMe);C0r=r(v3t,"model_type"),v3t.forEach(t),w0r=r(R6,` property of the config object (either
passed as an argument or loaded from `),iMe=n(R6,"CODE",{});var F3t=s(iMe);A0r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),y0r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(R6,"CODE",{});var T3t=s(dMe);L0r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),x0r=r(R6,":"),R6.forEach(t),$0r=i(ql),cMe=n(ql,"UL",{});var M3t=s(cMe);a3=n(M3t,"LI",{});var NPe=s(a3);mMe=n(NPe,"STRONG",{});var E3t=s(mMe);k0r=r(E3t,"vision-encoder-decoder"),E3t.forEach(t),S0r=r(NPe," \u2014 "),HU=n(NPe,"A",{href:!0});var C3t=s(HU);R0r=r(C3t,"TFVisionEncoderDecoderModel"),C3t.forEach(t),P0r=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),M3t.forEach(t),B0r=i(ql),T(n3.$$.fragment,ql),ql.forEach(t),Il.forEach(t),hNe=i(m),wc=n(m,"H2",{class:!0});var TDe=s(wc);s3=n(TDe,"A",{id:!0,class:!0,href:!0});var w3t=s(s3);fMe=n(w3t,"SPAN",{});var A3t=s(fMe);T(tx.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),I0r=i(TDe),gMe=n(TDe,"SPAN",{});var y3t=s(gMe);q0r=r(y3t,"TFAutoModelForSpeechSeq2Seq"),y3t.forEach(t),TDe.forEach(t),uNe=i(m),cr=n(m,"DIV",{class:!0});var Nl=s(cr);T(ax.$$.fragment,Nl),N0r=i(Nl),Ac=n(Nl,"P",{});var KZ=s(Ac);j0r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UU=n(KZ,"A",{href:!0});var L3t=s(UU);D0r=r(L3t,"from_pretrained()"),L3t.forEach(t),G0r=r(KZ," class method or the "),JU=n(KZ,"A",{href:!0});var x3t=s(JU);O0r=r(x3t,"from_config()"),x3t.forEach(t),V0r=r(KZ,` class
method.`),KZ.forEach(t),X0r=i(Nl),nx=n(Nl,"P",{});var MDe=s(nx);z0r=r(MDe,"This class cannot be instantiated directly using "),hMe=n(MDe,"CODE",{});var $3t=s(hMe);W0r=r($3t,"__init__()"),$3t.forEach(t),Q0r=r(MDe," (throws an error)."),MDe.forEach(t),H0r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var P6=s(Dt);T(sx.$$.fragment,P6),U0r=i(P6),uMe=n(P6,"P",{});var k3t=s(uMe);J0r=r(k3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k3t.forEach(t),Y0r=i(P6),yc=n(P6,"P",{});var ZZ=s(yc);K0r=r(ZZ,`Note:
Loading a model from its configuration file does `),pMe=n(ZZ,"STRONG",{});var S3t=s(pMe);Z0r=r(S3t,"not"),S3t.forEach(t),e6r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(ZZ,"A",{href:!0});var R3t=s(YU);o6r=r(R3t,"from_pretrained()"),R3t.forEach(t),r6r=r(ZZ," to load the model weights."),ZZ.forEach(t),t6r=i(P6),T(l3.$$.fragment,P6),P6.forEach(t),a6r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(lx.$$.fragment,jl),n6r=i(jl),_Me=n(jl,"P",{});var P3t=s(_Me);s6r=r(P3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P3t.forEach(t),l6r=i(jl),gn=n(jl,"P",{});var B6=s(gn);i6r=r(B6,"The model class to instantiate is selected based on the "),bMe=n(B6,"CODE",{});var B3t=s(bMe);d6r=r(B3t,"model_type"),B3t.forEach(t),c6r=r(B6,` property of the config object (either
passed as an argument or loaded from `),vMe=n(B6,"CODE",{});var I3t=s(vMe);m6r=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),f6r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(B6,"CODE",{});var q3t=s(FMe);g6r=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),h6r=r(B6,":"),B6.forEach(t),u6r=i(jl),TMe=n(jl,"UL",{});var N3t=s(TMe);i3=n(N3t,"LI",{});var jPe=s(i3);MMe=n(jPe,"STRONG",{});var j3t=s(MMe);p6r=r(j3t,"speech_to_text"),j3t.forEach(t),_6r=r(jPe," \u2014 "),KU=n(jPe,"A",{href:!0});var D3t=s(KU);b6r=r(D3t,"TFSpeech2TextForConditionalGeneration"),D3t.forEach(t),v6r=r(jPe," (Speech2Text model)"),jPe.forEach(t),N3t.forEach(t),F6r=i(jl),T(d3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),pNe=i(m),Lc=n(m,"H2",{class:!0});var EDe=s(Lc);c3=n(EDe,"A",{id:!0,class:!0,href:!0});var G3t=s(c3);EMe=n(G3t,"SPAN",{});var O3t=s(EMe);T(ix.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),T6r=i(EDe),CMe=n(EDe,"SPAN",{});var V3t=s(CMe);M6r=r(V3t,"FlaxAutoModel"),V3t.forEach(t),EDe.forEach(t),_Ne=i(m),mr=n(m,"DIV",{class:!0});var Dl=s(mr);T(dx.$$.fragment,Dl),E6r=i(Dl),xc=n(Dl,"P",{});var eee=s(xc);C6r=r(eee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=n(eee,"A",{href:!0});var X3t=s(ZU);w6r=r(X3t,"from_pretrained()"),X3t.forEach(t),A6r=r(eee," class method or the "),eJ=n(eee,"A",{href:!0});var z3t=s(eJ);y6r=r(z3t,"from_config()"),z3t.forEach(t),L6r=r(eee,` class
method.`),eee.forEach(t),x6r=i(Dl),cx=n(Dl,"P",{});var CDe=s(cx);$6r=r(CDe,"This class cannot be instantiated directly using "),wMe=n(CDe,"CODE",{});var W3t=s(wMe);k6r=r(W3t,"__init__()"),W3t.forEach(t),S6r=r(CDe," (throws an error)."),CDe.forEach(t),R6r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var I6=s(Gt);T(mx.$$.fragment,I6),P6r=i(I6),AMe=n(I6,"P",{});var Q3t=s(AMe);B6r=r(Q3t,"Instantiates one of the base model classes of the library from a configuration."),Q3t.forEach(t),I6r=i(I6),$c=n(I6,"P",{});var oee=s($c);q6r=r(oee,`Note:
Loading a model from its configuration file does `),yMe=n(oee,"STRONG",{});var H3t=s(yMe);N6r=r(H3t,"not"),H3t.forEach(t),j6r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(oee,"A",{href:!0});var U3t=s(oJ);D6r=r(U3t,"from_pretrained()"),U3t.forEach(t),G6r=r(oee," to load the model weights."),oee.forEach(t),O6r=i(I6),T(m3.$$.fragment,I6),I6.forEach(t),V6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(fx.$$.fragment,Gl),X6r=i(Gl),LMe=n(Gl,"P",{});var J3t=s(LMe);z6r=r(J3t,"Instantiate one of the base model classes of the library from a pretrained model."),J3t.forEach(t),W6r=i(Gl),hn=n(Gl,"P",{});var q6=s(hn);Q6r=r(q6,"The model class to instantiate is selected based on the "),xMe=n(q6,"CODE",{});var Y3t=s(xMe);H6r=r(Y3t,"model_type"),Y3t.forEach(t),U6r=r(q6,` property of the config object (either
passed as an argument or loaded from `),$Me=n(q6,"CODE",{});var K3t=s($Me);J6r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),Y6r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(q6,"CODE",{});var Z3t=s(kMe);K6r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),Z6r=r(q6,":"),q6.forEach(t),eyr=i(Gl),re=n(Gl,"UL",{});var ne=s(re);f3=n(ne,"LI",{});var DPe=s(f3);SMe=n(DPe,"STRONG",{});var ewt=s(SMe);oyr=r(ewt,"albert"),ewt.forEach(t),ryr=r(DPe," \u2014 "),rJ=n(DPe,"A",{href:!0});var owt=s(rJ);tyr=r(owt,"FlaxAlbertModel"),owt.forEach(t),ayr=r(DPe," (ALBERT model)"),DPe.forEach(t),nyr=i(ne),g3=n(ne,"LI",{});var GPe=s(g3);RMe=n(GPe,"STRONG",{});var rwt=s(RMe);syr=r(rwt,"bart"),rwt.forEach(t),lyr=r(GPe," \u2014 "),tJ=n(GPe,"A",{href:!0});var twt=s(tJ);iyr=r(twt,"FlaxBartModel"),twt.forEach(t),dyr=r(GPe," (BART model)"),GPe.forEach(t),cyr=i(ne),h3=n(ne,"LI",{});var OPe=s(h3);PMe=n(OPe,"STRONG",{});var awt=s(PMe);myr=r(awt,"beit"),awt.forEach(t),fyr=r(OPe," \u2014 "),aJ=n(OPe,"A",{href:!0});var nwt=s(aJ);gyr=r(nwt,"FlaxBeitModel"),nwt.forEach(t),hyr=r(OPe," (BEiT model)"),OPe.forEach(t),uyr=i(ne),u3=n(ne,"LI",{});var VPe=s(u3);BMe=n(VPe,"STRONG",{});var swt=s(BMe);pyr=r(swt,"bert"),swt.forEach(t),_yr=r(VPe," \u2014 "),nJ=n(VPe,"A",{href:!0});var lwt=s(nJ);byr=r(lwt,"FlaxBertModel"),lwt.forEach(t),vyr=r(VPe," (BERT model)"),VPe.forEach(t),Fyr=i(ne),p3=n(ne,"LI",{});var XPe=s(p3);IMe=n(XPe,"STRONG",{});var iwt=s(IMe);Tyr=r(iwt,"big_bird"),iwt.forEach(t),Myr=r(XPe," \u2014 "),sJ=n(XPe,"A",{href:!0});var dwt=s(sJ);Eyr=r(dwt,"FlaxBigBirdModel"),dwt.forEach(t),Cyr=r(XPe," (BigBird model)"),XPe.forEach(t),wyr=i(ne),_3=n(ne,"LI",{});var zPe=s(_3);qMe=n(zPe,"STRONG",{});var cwt=s(qMe);Ayr=r(cwt,"blenderbot"),cwt.forEach(t),yyr=r(zPe," \u2014 "),lJ=n(zPe,"A",{href:!0});var mwt=s(lJ);Lyr=r(mwt,"FlaxBlenderbotModel"),mwt.forEach(t),xyr=r(zPe," (Blenderbot model)"),zPe.forEach(t),$yr=i(ne),b3=n(ne,"LI",{});var WPe=s(b3);NMe=n(WPe,"STRONG",{});var fwt=s(NMe);kyr=r(fwt,"blenderbot-small"),fwt.forEach(t),Syr=r(WPe," \u2014 "),iJ=n(WPe,"A",{href:!0});var gwt=s(iJ);Ryr=r(gwt,"FlaxBlenderbotSmallModel"),gwt.forEach(t),Pyr=r(WPe," (BlenderbotSmall model)"),WPe.forEach(t),Byr=i(ne),v3=n(ne,"LI",{});var QPe=s(v3);jMe=n(QPe,"STRONG",{});var hwt=s(jMe);Iyr=r(hwt,"clip"),hwt.forEach(t),qyr=r(QPe," \u2014 "),dJ=n(QPe,"A",{href:!0});var uwt=s(dJ);Nyr=r(uwt,"FlaxCLIPModel"),uwt.forEach(t),jyr=r(QPe," (CLIP model)"),QPe.forEach(t),Dyr=i(ne),F3=n(ne,"LI",{});var HPe=s(F3);DMe=n(HPe,"STRONG",{});var pwt=s(DMe);Gyr=r(pwt,"distilbert"),pwt.forEach(t),Oyr=r(HPe," \u2014 "),cJ=n(HPe,"A",{href:!0});var _wt=s(cJ);Vyr=r(_wt,"FlaxDistilBertModel"),_wt.forEach(t),Xyr=r(HPe," (DistilBERT model)"),HPe.forEach(t),zyr=i(ne),T3=n(ne,"LI",{});var UPe=s(T3);GMe=n(UPe,"STRONG",{});var bwt=s(GMe);Wyr=r(bwt,"electra"),bwt.forEach(t),Qyr=r(UPe," \u2014 "),mJ=n(UPe,"A",{href:!0});var vwt=s(mJ);Hyr=r(vwt,"FlaxElectraModel"),vwt.forEach(t),Uyr=r(UPe," (ELECTRA model)"),UPe.forEach(t),Jyr=i(ne),M3=n(ne,"LI",{});var JPe=s(M3);OMe=n(JPe,"STRONG",{});var Fwt=s(OMe);Yyr=r(Fwt,"gpt2"),Fwt.forEach(t),Kyr=r(JPe," \u2014 "),fJ=n(JPe,"A",{href:!0});var Twt=s(fJ);Zyr=r(Twt,"FlaxGPT2Model"),Twt.forEach(t),eLr=r(JPe," (OpenAI GPT-2 model)"),JPe.forEach(t),oLr=i(ne),E3=n(ne,"LI",{});var YPe=s(E3);VMe=n(YPe,"STRONG",{});var Mwt=s(VMe);rLr=r(Mwt,"gpt_neo"),Mwt.forEach(t),tLr=r(YPe," \u2014 "),gJ=n(YPe,"A",{href:!0});var Ewt=s(gJ);aLr=r(Ewt,"FlaxGPTNeoModel"),Ewt.forEach(t),nLr=r(YPe," (GPT Neo model)"),YPe.forEach(t),sLr=i(ne),C3=n(ne,"LI",{});var KPe=s(C3);XMe=n(KPe,"STRONG",{});var Cwt=s(XMe);lLr=r(Cwt,"gptj"),Cwt.forEach(t),iLr=r(KPe," \u2014 "),hJ=n(KPe,"A",{href:!0});var wwt=s(hJ);dLr=r(wwt,"FlaxGPTJModel"),wwt.forEach(t),cLr=r(KPe," (GPT-J model)"),KPe.forEach(t),mLr=i(ne),w3=n(ne,"LI",{});var ZPe=s(w3);zMe=n(ZPe,"STRONG",{});var Awt=s(zMe);fLr=r(Awt,"marian"),Awt.forEach(t),gLr=r(ZPe," \u2014 "),uJ=n(ZPe,"A",{href:!0});var ywt=s(uJ);hLr=r(ywt,"FlaxMarianModel"),ywt.forEach(t),uLr=r(ZPe," (Marian model)"),ZPe.forEach(t),pLr=i(ne),A3=n(ne,"LI",{});var eBe=s(A3);WMe=n(eBe,"STRONG",{});var Lwt=s(WMe);_Lr=r(Lwt,"mbart"),Lwt.forEach(t),bLr=r(eBe," \u2014 "),pJ=n(eBe,"A",{href:!0});var xwt=s(pJ);vLr=r(xwt,"FlaxMBartModel"),xwt.forEach(t),FLr=r(eBe," (mBART model)"),eBe.forEach(t),TLr=i(ne),y3=n(ne,"LI",{});var oBe=s(y3);QMe=n(oBe,"STRONG",{});var $wt=s(QMe);MLr=r($wt,"mt5"),$wt.forEach(t),ELr=r(oBe," \u2014 "),_J=n(oBe,"A",{href:!0});var kwt=s(_J);CLr=r(kwt,"FlaxMT5Model"),kwt.forEach(t),wLr=r(oBe," (mT5 model)"),oBe.forEach(t),ALr=i(ne),L3=n(ne,"LI",{});var rBe=s(L3);HMe=n(rBe,"STRONG",{});var Swt=s(HMe);yLr=r(Swt,"pegasus"),Swt.forEach(t),LLr=r(rBe," \u2014 "),bJ=n(rBe,"A",{href:!0});var Rwt=s(bJ);xLr=r(Rwt,"FlaxPegasusModel"),Rwt.forEach(t),$Lr=r(rBe," (Pegasus model)"),rBe.forEach(t),kLr=i(ne),x3=n(ne,"LI",{});var tBe=s(x3);UMe=n(tBe,"STRONG",{});var Pwt=s(UMe);SLr=r(Pwt,"roberta"),Pwt.forEach(t),RLr=r(tBe," \u2014 "),vJ=n(tBe,"A",{href:!0});var Bwt=s(vJ);PLr=r(Bwt,"FlaxRobertaModel"),Bwt.forEach(t),BLr=r(tBe," (RoBERTa model)"),tBe.forEach(t),ILr=i(ne),$3=n(ne,"LI",{});var aBe=s($3);JMe=n(aBe,"STRONG",{});var Iwt=s(JMe);qLr=r(Iwt,"roformer"),Iwt.forEach(t),NLr=r(aBe," \u2014 "),FJ=n(aBe,"A",{href:!0});var qwt=s(FJ);jLr=r(qwt,"FlaxRoFormerModel"),qwt.forEach(t),DLr=r(aBe," (RoFormer model)"),aBe.forEach(t),GLr=i(ne),k3=n(ne,"LI",{});var nBe=s(k3);YMe=n(nBe,"STRONG",{});var Nwt=s(YMe);OLr=r(Nwt,"t5"),Nwt.forEach(t),VLr=r(nBe," \u2014 "),TJ=n(nBe,"A",{href:!0});var jwt=s(TJ);XLr=r(jwt,"FlaxT5Model"),jwt.forEach(t),zLr=r(nBe," (T5 model)"),nBe.forEach(t),WLr=i(ne),S3=n(ne,"LI",{});var sBe=s(S3);KMe=n(sBe,"STRONG",{});var Dwt=s(KMe);QLr=r(Dwt,"vision-text-dual-encoder"),Dwt.forEach(t),HLr=r(sBe," \u2014 "),MJ=n(sBe,"A",{href:!0});var Gwt=s(MJ);ULr=r(Gwt,"FlaxVisionTextDualEncoderModel"),Gwt.forEach(t),JLr=r(sBe," (VisionTextDualEncoder model)"),sBe.forEach(t),YLr=i(ne),R3=n(ne,"LI",{});var lBe=s(R3);ZMe=n(lBe,"STRONG",{});var Owt=s(ZMe);KLr=r(Owt,"vit"),Owt.forEach(t),ZLr=r(lBe," \u2014 "),EJ=n(lBe,"A",{href:!0});var Vwt=s(EJ);e8r=r(Vwt,"FlaxViTModel"),Vwt.forEach(t),o8r=r(lBe," (ViT model)"),lBe.forEach(t),r8r=i(ne),P3=n(ne,"LI",{});var iBe=s(P3);e4e=n(iBe,"STRONG",{});var Xwt=s(e4e);t8r=r(Xwt,"wav2vec2"),Xwt.forEach(t),a8r=r(iBe," \u2014 "),CJ=n(iBe,"A",{href:!0});var zwt=s(CJ);n8r=r(zwt,"FlaxWav2Vec2Model"),zwt.forEach(t),s8r=r(iBe," (Wav2Vec2 model)"),iBe.forEach(t),l8r=i(ne),B3=n(ne,"LI",{});var dBe=s(B3);o4e=n(dBe,"STRONG",{});var Wwt=s(o4e);i8r=r(Wwt,"xglm"),Wwt.forEach(t),d8r=r(dBe," \u2014 "),wJ=n(dBe,"A",{href:!0});var Qwt=s(wJ);c8r=r(Qwt,"FlaxXGLMModel"),Qwt.forEach(t),m8r=r(dBe," (XGLM model)"),dBe.forEach(t),f8r=i(ne),I3=n(ne,"LI",{});var cBe=s(I3);r4e=n(cBe,"STRONG",{});var Hwt=s(r4e);g8r=r(Hwt,"xlm-roberta"),Hwt.forEach(t),h8r=r(cBe," \u2014 "),AJ=n(cBe,"A",{href:!0});var Uwt=s(AJ);u8r=r(Uwt,"FlaxXLMRobertaModel"),Uwt.forEach(t),p8r=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),ne.forEach(t),_8r=i(Gl),T(q3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),bNe=i(m),kc=n(m,"H2",{class:!0});var wDe=s(kc);N3=n(wDe,"A",{id:!0,class:!0,href:!0});var Jwt=s(N3);t4e=n(Jwt,"SPAN",{});var Ywt=s(t4e);T(gx.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),b8r=i(wDe),a4e=n(wDe,"SPAN",{});var Kwt=s(a4e);v8r=r(Kwt,"FlaxAutoModelForCausalLM"),Kwt.forEach(t),wDe.forEach(t),vNe=i(m),fr=n(m,"DIV",{class:!0});var Ol=s(fr);T(hx.$$.fragment,Ol),F8r=i(Ol),Sc=n(Ol,"P",{});var ree=s(Sc);T8r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yJ=n(ree,"A",{href:!0});var Zwt=s(yJ);M8r=r(Zwt,"from_pretrained()"),Zwt.forEach(t),E8r=r(ree," class method or the "),LJ=n(ree,"A",{href:!0});var eAt=s(LJ);C8r=r(eAt,"from_config()"),eAt.forEach(t),w8r=r(ree,` class
method.`),ree.forEach(t),A8r=i(Ol),ux=n(Ol,"P",{});var ADe=s(ux);y8r=r(ADe,"This class cannot be instantiated directly using "),n4e=n(ADe,"CODE",{});var oAt=s(n4e);L8r=r(oAt,"__init__()"),oAt.forEach(t),x8r=r(ADe," (throws an error)."),ADe.forEach(t),$8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var N6=s(Ot);T(px.$$.fragment,N6),k8r=i(N6),s4e=n(N6,"P",{});var rAt=s(s4e);S8r=r(rAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rAt.forEach(t),R8r=i(N6),Rc=n(N6,"P",{});var tee=s(Rc);P8r=r(tee,`Note:
Loading a model from its configuration file does `),l4e=n(tee,"STRONG",{});var tAt=s(l4e);B8r=r(tAt,"not"),tAt.forEach(t),I8r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(tee,"A",{href:!0});var aAt=s(xJ);q8r=r(aAt,"from_pretrained()"),aAt.forEach(t),N8r=r(tee," to load the model weights."),tee.forEach(t),j8r=i(N6),T(j3.$$.fragment,N6),N6.forEach(t),D8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(_x.$$.fragment,Vl),G8r=i(Vl),i4e=n(Vl,"P",{});var nAt=s(i4e);O8r=r(nAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nAt.forEach(t),V8r=i(Vl),un=n(Vl,"P",{});var j6=s(un);X8r=r(j6,"The model class to instantiate is selected based on the "),d4e=n(j6,"CODE",{});var sAt=s(d4e);z8r=r(sAt,"model_type"),sAt.forEach(t),W8r=r(j6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(j6,"CODE",{});var lAt=s(c4e);Q8r=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),H8r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(j6,"CODE",{});var iAt=s(m4e);U8r=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),J8r=r(j6,":"),j6.forEach(t),Y8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);D3=n(Xe,"LI",{});var mBe=s(D3);f4e=n(mBe,"STRONG",{});var dAt=s(f4e);K8r=r(dAt,"bart"),dAt.forEach(t),Z8r=r(mBe," \u2014 "),$J=n(mBe,"A",{href:!0});var cAt=s($J);e7r=r(cAt,"FlaxBartForCausalLM"),cAt.forEach(t),o7r=r(mBe," (BART model)"),mBe.forEach(t),r7r=i(Xe),G3=n(Xe,"LI",{});var fBe=s(G3);g4e=n(fBe,"STRONG",{});var mAt=s(g4e);t7r=r(mAt,"bert"),mAt.forEach(t),a7r=r(fBe," \u2014 "),kJ=n(fBe,"A",{href:!0});var fAt=s(kJ);n7r=r(fAt,"FlaxBertForCausalLM"),fAt.forEach(t),s7r=r(fBe," (BERT model)"),fBe.forEach(t),l7r=i(Xe),O3=n(Xe,"LI",{});var gBe=s(O3);h4e=n(gBe,"STRONG",{});var gAt=s(h4e);i7r=r(gAt,"big_bird"),gAt.forEach(t),d7r=r(gBe," \u2014 "),SJ=n(gBe,"A",{href:!0});var hAt=s(SJ);c7r=r(hAt,"FlaxBigBirdForCausalLM"),hAt.forEach(t),m7r=r(gBe," (BigBird model)"),gBe.forEach(t),f7r=i(Xe),V3=n(Xe,"LI",{});var hBe=s(V3);u4e=n(hBe,"STRONG",{});var uAt=s(u4e);g7r=r(uAt,"electra"),uAt.forEach(t),h7r=r(hBe," \u2014 "),RJ=n(hBe,"A",{href:!0});var pAt=s(RJ);u7r=r(pAt,"FlaxElectraForCausalLM"),pAt.forEach(t),p7r=r(hBe," (ELECTRA model)"),hBe.forEach(t),_7r=i(Xe),X3=n(Xe,"LI",{});var uBe=s(X3);p4e=n(uBe,"STRONG",{});var _At=s(p4e);b7r=r(_At,"gpt2"),_At.forEach(t),v7r=r(uBe," \u2014 "),PJ=n(uBe,"A",{href:!0});var bAt=s(PJ);F7r=r(bAt,"FlaxGPT2LMHeadModel"),bAt.forEach(t),T7r=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),M7r=i(Xe),z3=n(Xe,"LI",{});var pBe=s(z3);_4e=n(pBe,"STRONG",{});var vAt=s(_4e);E7r=r(vAt,"gpt_neo"),vAt.forEach(t),C7r=r(pBe," \u2014 "),BJ=n(pBe,"A",{href:!0});var FAt=s(BJ);w7r=r(FAt,"FlaxGPTNeoForCausalLM"),FAt.forEach(t),A7r=r(pBe," (GPT Neo model)"),pBe.forEach(t),y7r=i(Xe),W3=n(Xe,"LI",{});var _Be=s(W3);b4e=n(_Be,"STRONG",{});var TAt=s(b4e);L7r=r(TAt,"gptj"),TAt.forEach(t),x7r=r(_Be," \u2014 "),IJ=n(_Be,"A",{href:!0});var MAt=s(IJ);$7r=r(MAt,"FlaxGPTJForCausalLM"),MAt.forEach(t),k7r=r(_Be," (GPT-J model)"),_Be.forEach(t),S7r=i(Xe),Q3=n(Xe,"LI",{});var bBe=s(Q3);v4e=n(bBe,"STRONG",{});var EAt=s(v4e);R7r=r(EAt,"roberta"),EAt.forEach(t),P7r=r(bBe," \u2014 "),qJ=n(bBe,"A",{href:!0});var CAt=s(qJ);B7r=r(CAt,"FlaxRobertaForCausalLM"),CAt.forEach(t),I7r=r(bBe," (RoBERTa model)"),bBe.forEach(t),q7r=i(Xe),H3=n(Xe,"LI",{});var vBe=s(H3);F4e=n(vBe,"STRONG",{});var wAt=s(F4e);N7r=r(wAt,"xglm"),wAt.forEach(t),j7r=r(vBe," \u2014 "),NJ=n(vBe,"A",{href:!0});var AAt=s(NJ);D7r=r(AAt,"FlaxXGLMForCausalLM"),AAt.forEach(t),G7r=r(vBe," (XGLM model)"),vBe.forEach(t),Xe.forEach(t),O7r=i(Vl),T(U3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),FNe=i(m),Pc=n(m,"H2",{class:!0});var yDe=s(Pc);J3=n(yDe,"A",{id:!0,class:!0,href:!0});var yAt=s(J3);T4e=n(yAt,"SPAN",{});var LAt=s(T4e);T(bx.$$.fragment,LAt),LAt.forEach(t),yAt.forEach(t),V7r=i(yDe),M4e=n(yDe,"SPAN",{});var xAt=s(M4e);X7r=r(xAt,"FlaxAutoModelForPreTraining"),xAt.forEach(t),yDe.forEach(t),TNe=i(m),gr=n(m,"DIV",{class:!0});var Xl=s(gr);T(vx.$$.fragment,Xl),z7r=i(Xl),Bc=n(Xl,"P",{});var aee=s(Bc);W7r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jJ=n(aee,"A",{href:!0});var $At=s(jJ);Q7r=r($At,"from_pretrained()"),$At.forEach(t),H7r=r(aee," class method or the "),DJ=n(aee,"A",{href:!0});var kAt=s(DJ);U7r=r(kAt,"from_config()"),kAt.forEach(t),J7r=r(aee,` class
method.`),aee.forEach(t),Y7r=i(Xl),Fx=n(Xl,"P",{});var LDe=s(Fx);K7r=r(LDe,"This class cannot be instantiated directly using "),E4e=n(LDe,"CODE",{});var SAt=s(E4e);Z7r=r(SAt,"__init__()"),SAt.forEach(t),exr=r(LDe," (throws an error)."),LDe.forEach(t),oxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var D6=s(Vt);T(Tx.$$.fragment,D6),rxr=i(D6),C4e=n(D6,"P",{});var RAt=s(C4e);txr=r(RAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RAt.forEach(t),axr=i(D6),Ic=n(D6,"P",{});var nee=s(Ic);nxr=r(nee,`Note:
Loading a model from its configuration file does `),w4e=n(nee,"STRONG",{});var PAt=s(w4e);sxr=r(PAt,"not"),PAt.forEach(t),lxr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(nee,"A",{href:!0});var BAt=s(GJ);ixr=r(BAt,"from_pretrained()"),BAt.forEach(t),dxr=r(nee," to load the model weights."),nee.forEach(t),cxr=i(D6),T(Y3.$$.fragment,D6),D6.forEach(t),mxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(Mx.$$.fragment,zl),fxr=i(zl),A4e=n(zl,"P",{});var IAt=s(A4e);gxr=r(IAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IAt.forEach(t),hxr=i(zl),pn=n(zl,"P",{});var G6=s(pn);uxr=r(G6,"The model class to instantiate is selected based on the "),y4e=n(G6,"CODE",{});var qAt=s(y4e);pxr=r(qAt,"model_type"),qAt.forEach(t),_xr=r(G6,` property of the config object (either
passed as an argument or loaded from `),L4e=n(G6,"CODE",{});var NAt=s(L4e);bxr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),vxr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(G6,"CODE",{});var jAt=s(x4e);Fxr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),Txr=r(G6,":"),G6.forEach(t),Mxr=i(zl),Me=n(zl,"UL",{});var we=s(Me);K3=n(we,"LI",{});var FBe=s(K3);$4e=n(FBe,"STRONG",{});var DAt=s($4e);Exr=r(DAt,"albert"),DAt.forEach(t),Cxr=r(FBe," \u2014 "),OJ=n(FBe,"A",{href:!0});var GAt=s(OJ);wxr=r(GAt,"FlaxAlbertForPreTraining"),GAt.forEach(t),Axr=r(FBe," (ALBERT model)"),FBe.forEach(t),yxr=i(we),Z3=n(we,"LI",{});var TBe=s(Z3);k4e=n(TBe,"STRONG",{});var OAt=s(k4e);Lxr=r(OAt,"bart"),OAt.forEach(t),xxr=r(TBe," \u2014 "),VJ=n(TBe,"A",{href:!0});var VAt=s(VJ);$xr=r(VAt,"FlaxBartForConditionalGeneration"),VAt.forEach(t),kxr=r(TBe," (BART model)"),TBe.forEach(t),Sxr=i(we),ew=n(we,"LI",{});var MBe=s(ew);S4e=n(MBe,"STRONG",{});var XAt=s(S4e);Rxr=r(XAt,"bert"),XAt.forEach(t),Pxr=r(MBe," \u2014 "),XJ=n(MBe,"A",{href:!0});var zAt=s(XJ);Bxr=r(zAt,"FlaxBertForPreTraining"),zAt.forEach(t),Ixr=r(MBe," (BERT model)"),MBe.forEach(t),qxr=i(we),ow=n(we,"LI",{});var EBe=s(ow);R4e=n(EBe,"STRONG",{});var WAt=s(R4e);Nxr=r(WAt,"big_bird"),WAt.forEach(t),jxr=r(EBe," \u2014 "),zJ=n(EBe,"A",{href:!0});var QAt=s(zJ);Dxr=r(QAt,"FlaxBigBirdForPreTraining"),QAt.forEach(t),Gxr=r(EBe," (BigBird model)"),EBe.forEach(t),Oxr=i(we),rw=n(we,"LI",{});var CBe=s(rw);P4e=n(CBe,"STRONG",{});var HAt=s(P4e);Vxr=r(HAt,"electra"),HAt.forEach(t),Xxr=r(CBe," \u2014 "),WJ=n(CBe,"A",{href:!0});var UAt=s(WJ);zxr=r(UAt,"FlaxElectraForPreTraining"),UAt.forEach(t),Wxr=r(CBe," (ELECTRA model)"),CBe.forEach(t),Qxr=i(we),tw=n(we,"LI",{});var wBe=s(tw);B4e=n(wBe,"STRONG",{});var JAt=s(B4e);Hxr=r(JAt,"mbart"),JAt.forEach(t),Uxr=r(wBe," \u2014 "),QJ=n(wBe,"A",{href:!0});var YAt=s(QJ);Jxr=r(YAt,"FlaxMBartForConditionalGeneration"),YAt.forEach(t),Yxr=r(wBe," (mBART model)"),wBe.forEach(t),Kxr=i(we),aw=n(we,"LI",{});var ABe=s(aw);I4e=n(ABe,"STRONG",{});var KAt=s(I4e);Zxr=r(KAt,"mt5"),KAt.forEach(t),e9r=r(ABe," \u2014 "),HJ=n(ABe,"A",{href:!0});var ZAt=s(HJ);o9r=r(ZAt,"FlaxMT5ForConditionalGeneration"),ZAt.forEach(t),r9r=r(ABe," (mT5 model)"),ABe.forEach(t),t9r=i(we),nw=n(we,"LI",{});var yBe=s(nw);q4e=n(yBe,"STRONG",{});var e0t=s(q4e);a9r=r(e0t,"roberta"),e0t.forEach(t),n9r=r(yBe," \u2014 "),UJ=n(yBe,"A",{href:!0});var o0t=s(UJ);s9r=r(o0t,"FlaxRobertaForMaskedLM"),o0t.forEach(t),l9r=r(yBe," (RoBERTa model)"),yBe.forEach(t),i9r=i(we),sw=n(we,"LI",{});var LBe=s(sw);N4e=n(LBe,"STRONG",{});var r0t=s(N4e);d9r=r(r0t,"roformer"),r0t.forEach(t),c9r=r(LBe," \u2014 "),JJ=n(LBe,"A",{href:!0});var t0t=s(JJ);m9r=r(t0t,"FlaxRoFormerForMaskedLM"),t0t.forEach(t),f9r=r(LBe," (RoFormer model)"),LBe.forEach(t),g9r=i(we),lw=n(we,"LI",{});var xBe=s(lw);j4e=n(xBe,"STRONG",{});var a0t=s(j4e);h9r=r(a0t,"t5"),a0t.forEach(t),u9r=r(xBe," \u2014 "),YJ=n(xBe,"A",{href:!0});var n0t=s(YJ);p9r=r(n0t,"FlaxT5ForConditionalGeneration"),n0t.forEach(t),_9r=r(xBe," (T5 model)"),xBe.forEach(t),b9r=i(we),iw=n(we,"LI",{});var $Be=s(iw);D4e=n($Be,"STRONG",{});var s0t=s(D4e);v9r=r(s0t,"wav2vec2"),s0t.forEach(t),F9r=r($Be," \u2014 "),KJ=n($Be,"A",{href:!0});var l0t=s(KJ);T9r=r(l0t,"FlaxWav2Vec2ForPreTraining"),l0t.forEach(t),M9r=r($Be," (Wav2Vec2 model)"),$Be.forEach(t),E9r=i(we),dw=n(we,"LI",{});var kBe=s(dw);G4e=n(kBe,"STRONG",{});var i0t=s(G4e);C9r=r(i0t,"xlm-roberta"),i0t.forEach(t),w9r=r(kBe," \u2014 "),ZJ=n(kBe,"A",{href:!0});var d0t=s(ZJ);A9r=r(d0t,"FlaxXLMRobertaForMaskedLM"),d0t.forEach(t),y9r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),we.forEach(t),L9r=i(zl),T(cw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),MNe=i(m),qc=n(m,"H2",{class:!0});var xDe=s(qc);mw=n(xDe,"A",{id:!0,class:!0,href:!0});var c0t=s(mw);O4e=n(c0t,"SPAN",{});var m0t=s(O4e);T(Ex.$$.fragment,m0t),m0t.forEach(t),c0t.forEach(t),x9r=i(xDe),V4e=n(xDe,"SPAN",{});var f0t=s(V4e);$9r=r(f0t,"FlaxAutoModelForMaskedLM"),f0t.forEach(t),xDe.forEach(t),ENe=i(m),hr=n(m,"DIV",{class:!0});var Wl=s(hr);T(Cx.$$.fragment,Wl),k9r=i(Wl),Nc=n(Wl,"P",{});var see=s(Nc);S9r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(see,"A",{href:!0});var g0t=s(eY);R9r=r(g0t,"from_pretrained()"),g0t.forEach(t),P9r=r(see," class method or the "),oY=n(see,"A",{href:!0});var h0t=s(oY);B9r=r(h0t,"from_config()"),h0t.forEach(t),I9r=r(see,` class
method.`),see.forEach(t),q9r=i(Wl),wx=n(Wl,"P",{});var $De=s(wx);N9r=r($De,"This class cannot be instantiated directly using "),X4e=n($De,"CODE",{});var u0t=s(X4e);j9r=r(u0t,"__init__()"),u0t.forEach(t),D9r=r($De," (throws an error)."),$De.forEach(t),G9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var O6=s(Xt);T(Ax.$$.fragment,O6),O9r=i(O6),z4e=n(O6,"P",{});var p0t=s(z4e);V9r=r(p0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p0t.forEach(t),X9r=i(O6),jc=n(O6,"P",{});var lee=s(jc);z9r=r(lee,`Note:
Loading a model from its configuration file does `),W4e=n(lee,"STRONG",{});var _0t=s(W4e);W9r=r(_0t,"not"),_0t.forEach(t),Q9r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(lee,"A",{href:!0});var b0t=s(rY);H9r=r(b0t,"from_pretrained()"),b0t.forEach(t),U9r=r(lee," to load the model weights."),lee.forEach(t),J9r=i(O6),T(fw.$$.fragment,O6),O6.forEach(t),Y9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(yx.$$.fragment,Ql),K9r=i(Ql),Q4e=n(Ql,"P",{});var v0t=s(Q4e);Z9r=r(v0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v0t.forEach(t),e$r=i(Ql),_n=n(Ql,"P",{});var V6=s(_n);o$r=r(V6,"The model class to instantiate is selected based on the "),H4e=n(V6,"CODE",{});var F0t=s(H4e);r$r=r(F0t,"model_type"),F0t.forEach(t),t$r=r(V6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(V6,"CODE",{});var T0t=s(U4e);a$r=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),n$r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(V6,"CODE",{});var M0t=s(J4e);s$r=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),l$r=r(V6,":"),V6.forEach(t),i$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);gw=n(Ie,"LI",{});var SBe=s(gw);Y4e=n(SBe,"STRONG",{});var E0t=s(Y4e);d$r=r(E0t,"albert"),E0t.forEach(t),c$r=r(SBe," \u2014 "),tY=n(SBe,"A",{href:!0});var C0t=s(tY);m$r=r(C0t,"FlaxAlbertForMaskedLM"),C0t.forEach(t),f$r=r(SBe," (ALBERT model)"),SBe.forEach(t),g$r=i(Ie),hw=n(Ie,"LI",{});var RBe=s(hw);K4e=n(RBe,"STRONG",{});var w0t=s(K4e);h$r=r(w0t,"bart"),w0t.forEach(t),u$r=r(RBe," \u2014 "),aY=n(RBe,"A",{href:!0});var A0t=s(aY);p$r=r(A0t,"FlaxBartForConditionalGeneration"),A0t.forEach(t),_$r=r(RBe," (BART model)"),RBe.forEach(t),b$r=i(Ie),uw=n(Ie,"LI",{});var PBe=s(uw);Z4e=n(PBe,"STRONG",{});var y0t=s(Z4e);v$r=r(y0t,"bert"),y0t.forEach(t),F$r=r(PBe," \u2014 "),nY=n(PBe,"A",{href:!0});var L0t=s(nY);T$r=r(L0t,"FlaxBertForMaskedLM"),L0t.forEach(t),M$r=r(PBe," (BERT model)"),PBe.forEach(t),E$r=i(Ie),pw=n(Ie,"LI",{});var BBe=s(pw);eEe=n(BBe,"STRONG",{});var x0t=s(eEe);C$r=r(x0t,"big_bird"),x0t.forEach(t),w$r=r(BBe," \u2014 "),sY=n(BBe,"A",{href:!0});var $0t=s(sY);A$r=r($0t,"FlaxBigBirdForMaskedLM"),$0t.forEach(t),y$r=r(BBe," (BigBird model)"),BBe.forEach(t),L$r=i(Ie),_w=n(Ie,"LI",{});var IBe=s(_w);oEe=n(IBe,"STRONG",{});var k0t=s(oEe);x$r=r(k0t,"distilbert"),k0t.forEach(t),$$r=r(IBe," \u2014 "),lY=n(IBe,"A",{href:!0});var S0t=s(lY);k$r=r(S0t,"FlaxDistilBertForMaskedLM"),S0t.forEach(t),S$r=r(IBe," (DistilBERT model)"),IBe.forEach(t),R$r=i(Ie),bw=n(Ie,"LI",{});var qBe=s(bw);rEe=n(qBe,"STRONG",{});var R0t=s(rEe);P$r=r(R0t,"electra"),R0t.forEach(t),B$r=r(qBe," \u2014 "),iY=n(qBe,"A",{href:!0});var P0t=s(iY);I$r=r(P0t,"FlaxElectraForMaskedLM"),P0t.forEach(t),q$r=r(qBe," (ELECTRA model)"),qBe.forEach(t),N$r=i(Ie),vw=n(Ie,"LI",{});var NBe=s(vw);tEe=n(NBe,"STRONG",{});var B0t=s(tEe);j$r=r(B0t,"mbart"),B0t.forEach(t),D$r=r(NBe," \u2014 "),dY=n(NBe,"A",{href:!0});var I0t=s(dY);G$r=r(I0t,"FlaxMBartForConditionalGeneration"),I0t.forEach(t),O$r=r(NBe," (mBART model)"),NBe.forEach(t),V$r=i(Ie),Fw=n(Ie,"LI",{});var jBe=s(Fw);aEe=n(jBe,"STRONG",{});var q0t=s(aEe);X$r=r(q0t,"roberta"),q0t.forEach(t),z$r=r(jBe," \u2014 "),cY=n(jBe,"A",{href:!0});var N0t=s(cY);W$r=r(N0t,"FlaxRobertaForMaskedLM"),N0t.forEach(t),Q$r=r(jBe," (RoBERTa model)"),jBe.forEach(t),H$r=i(Ie),Tw=n(Ie,"LI",{});var DBe=s(Tw);nEe=n(DBe,"STRONG",{});var j0t=s(nEe);U$r=r(j0t,"roformer"),j0t.forEach(t),J$r=r(DBe," \u2014 "),mY=n(DBe,"A",{href:!0});var D0t=s(mY);Y$r=r(D0t,"FlaxRoFormerForMaskedLM"),D0t.forEach(t),K$r=r(DBe," (RoFormer model)"),DBe.forEach(t),Z$r=i(Ie),Mw=n(Ie,"LI",{});var GBe=s(Mw);sEe=n(GBe,"STRONG",{});var G0t=s(sEe);ekr=r(G0t,"xlm-roberta"),G0t.forEach(t),okr=r(GBe," \u2014 "),fY=n(GBe,"A",{href:!0});var O0t=s(fY);rkr=r(O0t,"FlaxXLMRobertaForMaskedLM"),O0t.forEach(t),tkr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),Ie.forEach(t),akr=i(Ql),T(Ew.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),CNe=i(m),Dc=n(m,"H2",{class:!0});var kDe=s(Dc);Cw=n(kDe,"A",{id:!0,class:!0,href:!0});var V0t=s(Cw);lEe=n(V0t,"SPAN",{});var X0t=s(lEe);T(Lx.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),nkr=i(kDe),iEe=n(kDe,"SPAN",{});var z0t=s(iEe);skr=r(z0t,"FlaxAutoModelForSeq2SeqLM"),z0t.forEach(t),kDe.forEach(t),wNe=i(m),ur=n(m,"DIV",{class:!0});var Hl=s(ur);T(xx.$$.fragment,Hl),lkr=i(Hl),Gc=n(Hl,"P",{});var iee=s(Gc);ikr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gY=n(iee,"A",{href:!0});var W0t=s(gY);dkr=r(W0t,"from_pretrained()"),W0t.forEach(t),ckr=r(iee," class method or the "),hY=n(iee,"A",{href:!0});var Q0t=s(hY);mkr=r(Q0t,"from_config()"),Q0t.forEach(t),fkr=r(iee,` class
method.`),iee.forEach(t),gkr=i(Hl),$x=n(Hl,"P",{});var SDe=s($x);hkr=r(SDe,"This class cannot be instantiated directly using "),dEe=n(SDe,"CODE",{});var H0t=s(dEe);ukr=r(H0t,"__init__()"),H0t.forEach(t),pkr=r(SDe," (throws an error)."),SDe.forEach(t),_kr=i(Hl),zt=n(Hl,"DIV",{class:!0});var X6=s(zt);T(kx.$$.fragment,X6),bkr=i(X6),cEe=n(X6,"P",{});var U0t=s(cEe);vkr=r(U0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U0t.forEach(t),Fkr=i(X6),Oc=n(X6,"P",{});var dee=s(Oc);Tkr=r(dee,`Note:
Loading a model from its configuration file does `),mEe=n(dee,"STRONG",{});var J0t=s(mEe);Mkr=r(J0t,"not"),J0t.forEach(t),Ekr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(dee,"A",{href:!0});var Y0t=s(uY);Ckr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),wkr=r(dee," to load the model weights."),dee.forEach(t),Akr=i(X6),T(ww.$$.fragment,X6),X6.forEach(t),ykr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(Sx.$$.fragment,Ul),Lkr=i(Ul),fEe=n(Ul,"P",{});var K0t=s(fEe);xkr=r(K0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K0t.forEach(t),$kr=i(Ul),bn=n(Ul,"P",{});var z6=s(bn);kkr=r(z6,"The model class to instantiate is selected based on the "),gEe=n(z6,"CODE",{});var Z0t=s(gEe);Skr=r(Z0t,"model_type"),Z0t.forEach(t),Rkr=r(z6,` property of the config object (either
passed as an argument or loaded from `),hEe=n(z6,"CODE",{});var e6t=s(hEe);Pkr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),Bkr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(z6,"CODE",{});var o6t=s(uEe);Ikr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),qkr=r(z6,":"),z6.forEach(t),Nkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);Aw=n(ze,"LI",{});var OBe=s(Aw);pEe=n(OBe,"STRONG",{});var r6t=s(pEe);jkr=r(r6t,"bart"),r6t.forEach(t),Dkr=r(OBe," \u2014 "),pY=n(OBe,"A",{href:!0});var t6t=s(pY);Gkr=r(t6t,"FlaxBartForConditionalGeneration"),t6t.forEach(t),Okr=r(OBe," (BART model)"),OBe.forEach(t),Vkr=i(ze),yw=n(ze,"LI",{});var VBe=s(yw);_Ee=n(VBe,"STRONG",{});var a6t=s(_Ee);Xkr=r(a6t,"blenderbot"),a6t.forEach(t),zkr=r(VBe," \u2014 "),_Y=n(VBe,"A",{href:!0});var n6t=s(_Y);Wkr=r(n6t,"FlaxBlenderbotForConditionalGeneration"),n6t.forEach(t),Qkr=r(VBe," (Blenderbot model)"),VBe.forEach(t),Hkr=i(ze),Lw=n(ze,"LI",{});var XBe=s(Lw);bEe=n(XBe,"STRONG",{});var s6t=s(bEe);Ukr=r(s6t,"blenderbot-small"),s6t.forEach(t),Jkr=r(XBe," \u2014 "),bY=n(XBe,"A",{href:!0});var l6t=s(bY);Ykr=r(l6t,"FlaxBlenderbotSmallForConditionalGeneration"),l6t.forEach(t),Kkr=r(XBe," (BlenderbotSmall model)"),XBe.forEach(t),Zkr=i(ze),xw=n(ze,"LI",{});var zBe=s(xw);vEe=n(zBe,"STRONG",{});var i6t=s(vEe);eSr=r(i6t,"encoder-decoder"),i6t.forEach(t),oSr=r(zBe," \u2014 "),vY=n(zBe,"A",{href:!0});var d6t=s(vY);rSr=r(d6t,"FlaxEncoderDecoderModel"),d6t.forEach(t),tSr=r(zBe," (Encoder decoder model)"),zBe.forEach(t),aSr=i(ze),$w=n(ze,"LI",{});var WBe=s($w);FEe=n(WBe,"STRONG",{});var c6t=s(FEe);nSr=r(c6t,"marian"),c6t.forEach(t),sSr=r(WBe," \u2014 "),FY=n(WBe,"A",{href:!0});var m6t=s(FY);lSr=r(m6t,"FlaxMarianMTModel"),m6t.forEach(t),iSr=r(WBe," (Marian model)"),WBe.forEach(t),dSr=i(ze),kw=n(ze,"LI",{});var QBe=s(kw);TEe=n(QBe,"STRONG",{});var f6t=s(TEe);cSr=r(f6t,"mbart"),f6t.forEach(t),mSr=r(QBe," \u2014 "),TY=n(QBe,"A",{href:!0});var g6t=s(TY);fSr=r(g6t,"FlaxMBartForConditionalGeneration"),g6t.forEach(t),gSr=r(QBe," (mBART model)"),QBe.forEach(t),hSr=i(ze),Sw=n(ze,"LI",{});var HBe=s(Sw);MEe=n(HBe,"STRONG",{});var h6t=s(MEe);uSr=r(h6t,"mt5"),h6t.forEach(t),pSr=r(HBe," \u2014 "),MY=n(HBe,"A",{href:!0});var u6t=s(MY);_Sr=r(u6t,"FlaxMT5ForConditionalGeneration"),u6t.forEach(t),bSr=r(HBe," (mT5 model)"),HBe.forEach(t),vSr=i(ze),Rw=n(ze,"LI",{});var UBe=s(Rw);EEe=n(UBe,"STRONG",{});var p6t=s(EEe);FSr=r(p6t,"pegasus"),p6t.forEach(t),TSr=r(UBe," \u2014 "),EY=n(UBe,"A",{href:!0});var _6t=s(EY);MSr=r(_6t,"FlaxPegasusForConditionalGeneration"),_6t.forEach(t),ESr=r(UBe," (Pegasus model)"),UBe.forEach(t),CSr=i(ze),Pw=n(ze,"LI",{});var JBe=s(Pw);CEe=n(JBe,"STRONG",{});var b6t=s(CEe);wSr=r(b6t,"t5"),b6t.forEach(t),ASr=r(JBe," \u2014 "),CY=n(JBe,"A",{href:!0});var v6t=s(CY);ySr=r(v6t,"FlaxT5ForConditionalGeneration"),v6t.forEach(t),LSr=r(JBe," (T5 model)"),JBe.forEach(t),ze.forEach(t),xSr=i(Ul),T(Bw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ANe=i(m),Vc=n(m,"H2",{class:!0});var RDe=s(Vc);Iw=n(RDe,"A",{id:!0,class:!0,href:!0});var F6t=s(Iw);wEe=n(F6t,"SPAN",{});var T6t=s(wEe);T(Rx.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),$Sr=i(RDe),AEe=n(RDe,"SPAN",{});var M6t=s(AEe);kSr=r(M6t,"FlaxAutoModelForSequenceClassification"),M6t.forEach(t),RDe.forEach(t),yNe=i(m),pr=n(m,"DIV",{class:!0});var Jl=s(pr);T(Px.$$.fragment,Jl),SSr=i(Jl),Xc=n(Jl,"P",{});var cee=s(Xc);RSr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wY=n(cee,"A",{href:!0});var E6t=s(wY);PSr=r(E6t,"from_pretrained()"),E6t.forEach(t),BSr=r(cee," class method or the "),AY=n(cee,"A",{href:!0});var C6t=s(AY);ISr=r(C6t,"from_config()"),C6t.forEach(t),qSr=r(cee,` class
method.`),cee.forEach(t),NSr=i(Jl),Bx=n(Jl,"P",{});var PDe=s(Bx);jSr=r(PDe,"This class cannot be instantiated directly using "),yEe=n(PDe,"CODE",{});var w6t=s(yEe);DSr=r(w6t,"__init__()"),w6t.forEach(t),GSr=r(PDe," (throws an error)."),PDe.forEach(t),OSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var W6=s(Wt);T(Ix.$$.fragment,W6),VSr=i(W6),LEe=n(W6,"P",{});var A6t=s(LEe);XSr=r(A6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A6t.forEach(t),zSr=i(W6),zc=n(W6,"P",{});var mee=s(zc);WSr=r(mee,`Note:
Loading a model from its configuration file does `),xEe=n(mee,"STRONG",{});var y6t=s(xEe);QSr=r(y6t,"not"),y6t.forEach(t),HSr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(mee,"A",{href:!0});var L6t=s(yY);USr=r(L6t,"from_pretrained()"),L6t.forEach(t),JSr=r(mee," to load the model weights."),mee.forEach(t),YSr=i(W6),T(qw.$$.fragment,W6),W6.forEach(t),KSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(qx.$$.fragment,Yl),ZSr=i(Yl),$Ee=n(Yl,"P",{});var x6t=s($Ee);eRr=r(x6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x6t.forEach(t),oRr=i(Yl),vn=n(Yl,"P",{});var Q6=s(vn);rRr=r(Q6,"The model class to instantiate is selected based on the "),kEe=n(Q6,"CODE",{});var $6t=s(kEe);tRr=r($6t,"model_type"),$6t.forEach(t),aRr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),SEe=n(Q6,"CODE",{});var k6t=s(SEe);nRr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),sRr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(Q6,"CODE",{});var S6t=s(REe);lRr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),iRr=r(Q6,":"),Q6.forEach(t),dRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);Nw=n(qe,"LI",{});var YBe=s(Nw);PEe=n(YBe,"STRONG",{});var R6t=s(PEe);cRr=r(R6t,"albert"),R6t.forEach(t),mRr=r(YBe," \u2014 "),LY=n(YBe,"A",{href:!0});var P6t=s(LY);fRr=r(P6t,"FlaxAlbertForSequenceClassification"),P6t.forEach(t),gRr=r(YBe," (ALBERT model)"),YBe.forEach(t),hRr=i(qe),jw=n(qe,"LI",{});var KBe=s(jw);BEe=n(KBe,"STRONG",{});var B6t=s(BEe);uRr=r(B6t,"bart"),B6t.forEach(t),pRr=r(KBe," \u2014 "),xY=n(KBe,"A",{href:!0});var I6t=s(xY);_Rr=r(I6t,"FlaxBartForSequenceClassification"),I6t.forEach(t),bRr=r(KBe," (BART model)"),KBe.forEach(t),vRr=i(qe),Dw=n(qe,"LI",{});var ZBe=s(Dw);IEe=n(ZBe,"STRONG",{});var q6t=s(IEe);FRr=r(q6t,"bert"),q6t.forEach(t),TRr=r(ZBe," \u2014 "),$Y=n(ZBe,"A",{href:!0});var N6t=s($Y);MRr=r(N6t,"FlaxBertForSequenceClassification"),N6t.forEach(t),ERr=r(ZBe," (BERT model)"),ZBe.forEach(t),CRr=i(qe),Gw=n(qe,"LI",{});var eIe=s(Gw);qEe=n(eIe,"STRONG",{});var j6t=s(qEe);wRr=r(j6t,"big_bird"),j6t.forEach(t),ARr=r(eIe," \u2014 "),kY=n(eIe,"A",{href:!0});var D6t=s(kY);yRr=r(D6t,"FlaxBigBirdForSequenceClassification"),D6t.forEach(t),LRr=r(eIe," (BigBird model)"),eIe.forEach(t),xRr=i(qe),Ow=n(qe,"LI",{});var oIe=s(Ow);NEe=n(oIe,"STRONG",{});var G6t=s(NEe);$Rr=r(G6t,"distilbert"),G6t.forEach(t),kRr=r(oIe," \u2014 "),SY=n(oIe,"A",{href:!0});var O6t=s(SY);SRr=r(O6t,"FlaxDistilBertForSequenceClassification"),O6t.forEach(t),RRr=r(oIe," (DistilBERT model)"),oIe.forEach(t),PRr=i(qe),Vw=n(qe,"LI",{});var rIe=s(Vw);jEe=n(rIe,"STRONG",{});var V6t=s(jEe);BRr=r(V6t,"electra"),V6t.forEach(t),IRr=r(rIe," \u2014 "),RY=n(rIe,"A",{href:!0});var X6t=s(RY);qRr=r(X6t,"FlaxElectraForSequenceClassification"),X6t.forEach(t),NRr=r(rIe," (ELECTRA model)"),rIe.forEach(t),jRr=i(qe),Xw=n(qe,"LI",{});var tIe=s(Xw);DEe=n(tIe,"STRONG",{});var z6t=s(DEe);DRr=r(z6t,"mbart"),z6t.forEach(t),GRr=r(tIe," \u2014 "),PY=n(tIe,"A",{href:!0});var W6t=s(PY);ORr=r(W6t,"FlaxMBartForSequenceClassification"),W6t.forEach(t),VRr=r(tIe," (mBART model)"),tIe.forEach(t),XRr=i(qe),zw=n(qe,"LI",{});var aIe=s(zw);GEe=n(aIe,"STRONG",{});var Q6t=s(GEe);zRr=r(Q6t,"roberta"),Q6t.forEach(t),WRr=r(aIe," \u2014 "),BY=n(aIe,"A",{href:!0});var H6t=s(BY);QRr=r(H6t,"FlaxRobertaForSequenceClassification"),H6t.forEach(t),HRr=r(aIe," (RoBERTa model)"),aIe.forEach(t),URr=i(qe),Ww=n(qe,"LI",{});var nIe=s(Ww);OEe=n(nIe,"STRONG",{});var U6t=s(OEe);JRr=r(U6t,"roformer"),U6t.forEach(t),YRr=r(nIe," \u2014 "),IY=n(nIe,"A",{href:!0});var J6t=s(IY);KRr=r(J6t,"FlaxRoFormerForSequenceClassification"),J6t.forEach(t),ZRr=r(nIe," (RoFormer model)"),nIe.forEach(t),ePr=i(qe),Qw=n(qe,"LI",{});var sIe=s(Qw);VEe=n(sIe,"STRONG",{});var Y6t=s(VEe);oPr=r(Y6t,"xlm-roberta"),Y6t.forEach(t),rPr=r(sIe," \u2014 "),qY=n(sIe,"A",{href:!0});var K6t=s(qY);tPr=r(K6t,"FlaxXLMRobertaForSequenceClassification"),K6t.forEach(t),aPr=r(sIe," (XLM-RoBERTa model)"),sIe.forEach(t),qe.forEach(t),nPr=i(Yl),T(Hw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),LNe=i(m),Wc=n(m,"H2",{class:!0});var BDe=s(Wc);Uw=n(BDe,"A",{id:!0,class:!0,href:!0});var Z6t=s(Uw);XEe=n(Z6t,"SPAN",{});var eyt=s(XEe);T(Nx.$$.fragment,eyt),eyt.forEach(t),Z6t.forEach(t),sPr=i(BDe),zEe=n(BDe,"SPAN",{});var oyt=s(zEe);lPr=r(oyt,"FlaxAutoModelForQuestionAnswering"),oyt.forEach(t),BDe.forEach(t),xNe=i(m),_r=n(m,"DIV",{class:!0});var Kl=s(_r);T(jx.$$.fragment,Kl),iPr=i(Kl),Qc=n(Kl,"P",{});var fee=s(Qc);dPr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NY=n(fee,"A",{href:!0});var ryt=s(NY);cPr=r(ryt,"from_pretrained()"),ryt.forEach(t),mPr=r(fee," class method or the "),jY=n(fee,"A",{href:!0});var tyt=s(jY);fPr=r(tyt,"from_config()"),tyt.forEach(t),gPr=r(fee,` class
method.`),fee.forEach(t),hPr=i(Kl),Dx=n(Kl,"P",{});var IDe=s(Dx);uPr=r(IDe,"This class cannot be instantiated directly using "),WEe=n(IDe,"CODE",{});var ayt=s(WEe);pPr=r(ayt,"__init__()"),ayt.forEach(t),_Pr=r(IDe," (throws an error)."),IDe.forEach(t),bPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var H6=s(Qt);T(Gx.$$.fragment,H6),vPr=i(H6),QEe=n(H6,"P",{});var nyt=s(QEe);FPr=r(nyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nyt.forEach(t),TPr=i(H6),Hc=n(H6,"P",{});var gee=s(Hc);MPr=r(gee,`Note:
Loading a model from its configuration file does `),HEe=n(gee,"STRONG",{});var syt=s(HEe);EPr=r(syt,"not"),syt.forEach(t),CPr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(gee,"A",{href:!0});var lyt=s(DY);wPr=r(lyt,"from_pretrained()"),lyt.forEach(t),APr=r(gee," to load the model weights."),gee.forEach(t),yPr=i(H6),T(Jw.$$.fragment,H6),H6.forEach(t),LPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Ox.$$.fragment,Zl),xPr=i(Zl),UEe=n(Zl,"P",{});var iyt=s(UEe);$Pr=r(iyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iyt.forEach(t),kPr=i(Zl),Fn=n(Zl,"P",{});var U6=s(Fn);SPr=r(U6,"The model class to instantiate is selected based on the "),JEe=n(U6,"CODE",{});var dyt=s(JEe);RPr=r(dyt,"model_type"),dyt.forEach(t),PPr=r(U6,` property of the config object (either
passed as an argument or loaded from `),YEe=n(U6,"CODE",{});var cyt=s(YEe);BPr=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),IPr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(U6,"CODE",{});var myt=s(KEe);qPr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),NPr=r(U6,":"),U6.forEach(t),jPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);Yw=n(Ne,"LI",{});var lIe=s(Yw);ZEe=n(lIe,"STRONG",{});var fyt=s(ZEe);DPr=r(fyt,"albert"),fyt.forEach(t),GPr=r(lIe," \u2014 "),GY=n(lIe,"A",{href:!0});var gyt=s(GY);OPr=r(gyt,"FlaxAlbertForQuestionAnswering"),gyt.forEach(t),VPr=r(lIe," (ALBERT model)"),lIe.forEach(t),XPr=i(Ne),Kw=n(Ne,"LI",{});var iIe=s(Kw);eCe=n(iIe,"STRONG",{});var hyt=s(eCe);zPr=r(hyt,"bart"),hyt.forEach(t),WPr=r(iIe," \u2014 "),OY=n(iIe,"A",{href:!0});var uyt=s(OY);QPr=r(uyt,"FlaxBartForQuestionAnswering"),uyt.forEach(t),HPr=r(iIe," (BART model)"),iIe.forEach(t),UPr=i(Ne),Zw=n(Ne,"LI",{});var dIe=s(Zw);oCe=n(dIe,"STRONG",{});var pyt=s(oCe);JPr=r(pyt,"bert"),pyt.forEach(t),YPr=r(dIe," \u2014 "),VY=n(dIe,"A",{href:!0});var _yt=s(VY);KPr=r(_yt,"FlaxBertForQuestionAnswering"),_yt.forEach(t),ZPr=r(dIe," (BERT model)"),dIe.forEach(t),eBr=i(Ne),eA=n(Ne,"LI",{});var cIe=s(eA);rCe=n(cIe,"STRONG",{});var byt=s(rCe);oBr=r(byt,"big_bird"),byt.forEach(t),rBr=r(cIe," \u2014 "),XY=n(cIe,"A",{href:!0});var vyt=s(XY);tBr=r(vyt,"FlaxBigBirdForQuestionAnswering"),vyt.forEach(t),aBr=r(cIe," (BigBird model)"),cIe.forEach(t),nBr=i(Ne),oA=n(Ne,"LI",{});var mIe=s(oA);tCe=n(mIe,"STRONG",{});var Fyt=s(tCe);sBr=r(Fyt,"distilbert"),Fyt.forEach(t),lBr=r(mIe," \u2014 "),zY=n(mIe,"A",{href:!0});var Tyt=s(zY);iBr=r(Tyt,"FlaxDistilBertForQuestionAnswering"),Tyt.forEach(t),dBr=r(mIe," (DistilBERT model)"),mIe.forEach(t),cBr=i(Ne),rA=n(Ne,"LI",{});var fIe=s(rA);aCe=n(fIe,"STRONG",{});var Myt=s(aCe);mBr=r(Myt,"electra"),Myt.forEach(t),fBr=r(fIe," \u2014 "),WY=n(fIe,"A",{href:!0});var Eyt=s(WY);gBr=r(Eyt,"FlaxElectraForQuestionAnswering"),Eyt.forEach(t),hBr=r(fIe," (ELECTRA model)"),fIe.forEach(t),uBr=i(Ne),tA=n(Ne,"LI",{});var gIe=s(tA);nCe=n(gIe,"STRONG",{});var Cyt=s(nCe);pBr=r(Cyt,"mbart"),Cyt.forEach(t),_Br=r(gIe," \u2014 "),QY=n(gIe,"A",{href:!0});var wyt=s(QY);bBr=r(wyt,"FlaxMBartForQuestionAnswering"),wyt.forEach(t),vBr=r(gIe," (mBART model)"),gIe.forEach(t),FBr=i(Ne),aA=n(Ne,"LI",{});var hIe=s(aA);sCe=n(hIe,"STRONG",{});var Ayt=s(sCe);TBr=r(Ayt,"roberta"),Ayt.forEach(t),MBr=r(hIe," \u2014 "),HY=n(hIe,"A",{href:!0});var yyt=s(HY);EBr=r(yyt,"FlaxRobertaForQuestionAnswering"),yyt.forEach(t),CBr=r(hIe," (RoBERTa model)"),hIe.forEach(t),wBr=i(Ne),nA=n(Ne,"LI",{});var uIe=s(nA);lCe=n(uIe,"STRONG",{});var Lyt=s(lCe);ABr=r(Lyt,"roformer"),Lyt.forEach(t),yBr=r(uIe," \u2014 "),UY=n(uIe,"A",{href:!0});var xyt=s(UY);LBr=r(xyt,"FlaxRoFormerForQuestionAnswering"),xyt.forEach(t),xBr=r(uIe," (RoFormer model)"),uIe.forEach(t),$Br=i(Ne),sA=n(Ne,"LI",{});var pIe=s(sA);iCe=n(pIe,"STRONG",{});var $yt=s(iCe);kBr=r($yt,"xlm-roberta"),$yt.forEach(t),SBr=r(pIe," \u2014 "),JY=n(pIe,"A",{href:!0});var kyt=s(JY);RBr=r(kyt,"FlaxXLMRobertaForQuestionAnswering"),kyt.forEach(t),PBr=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),Ne.forEach(t),BBr=i(Zl),T(lA.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),$Ne=i(m),Uc=n(m,"H2",{class:!0});var qDe=s(Uc);iA=n(qDe,"A",{id:!0,class:!0,href:!0});var Syt=s(iA);dCe=n(Syt,"SPAN",{});var Ryt=s(dCe);T(Vx.$$.fragment,Ryt),Ryt.forEach(t),Syt.forEach(t),IBr=i(qDe),cCe=n(qDe,"SPAN",{});var Pyt=s(cCe);qBr=r(Pyt,"FlaxAutoModelForTokenClassification"),Pyt.forEach(t),qDe.forEach(t),kNe=i(m),br=n(m,"DIV",{class:!0});var ei=s(br);T(Xx.$$.fragment,ei),NBr=i(ei),Jc=n(ei,"P",{});var hee=s(Jc);jBr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YY=n(hee,"A",{href:!0});var Byt=s(YY);DBr=r(Byt,"from_pretrained()"),Byt.forEach(t),GBr=r(hee," class method or the "),KY=n(hee,"A",{href:!0});var Iyt=s(KY);OBr=r(Iyt,"from_config()"),Iyt.forEach(t),VBr=r(hee,` class
method.`),hee.forEach(t),XBr=i(ei),zx=n(ei,"P",{});var NDe=s(zx);zBr=r(NDe,"This class cannot be instantiated directly using "),mCe=n(NDe,"CODE",{});var qyt=s(mCe);WBr=r(qyt,"__init__()"),qyt.forEach(t),QBr=r(NDe," (throws an error)."),NDe.forEach(t),HBr=i(ei),Ht=n(ei,"DIV",{class:!0});var J6=s(Ht);T(Wx.$$.fragment,J6),UBr=i(J6),fCe=n(J6,"P",{});var Nyt=s(fCe);JBr=r(Nyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nyt.forEach(t),YBr=i(J6),Yc=n(J6,"P",{});var uee=s(Yc);KBr=r(uee,`Note:
Loading a model from its configuration file does `),gCe=n(uee,"STRONG",{});var jyt=s(gCe);ZBr=r(jyt,"not"),jyt.forEach(t),eIr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(uee,"A",{href:!0});var Dyt=s(ZY);oIr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),rIr=r(uee," to load the model weights."),uee.forEach(t),tIr=i(J6),T(dA.$$.fragment,J6),J6.forEach(t),aIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Qx.$$.fragment,oi),nIr=i(oi),hCe=n(oi,"P",{});var Gyt=s(hCe);sIr=r(Gyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gyt.forEach(t),lIr=i(oi),Tn=n(oi,"P",{});var Y6=s(Tn);iIr=r(Y6,"The model class to instantiate is selected based on the "),uCe=n(Y6,"CODE",{});var Oyt=s(uCe);dIr=r(Oyt,"model_type"),Oyt.forEach(t),cIr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),pCe=n(Y6,"CODE",{});var Vyt=s(pCe);mIr=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),fIr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(Y6,"CODE",{});var Xyt=s(_Ce);gIr=r(Xyt,"pretrained_model_name_or_path"),Xyt.forEach(t),hIr=r(Y6,":"),Y6.forEach(t),uIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);cA=n(Fo,"LI",{});var _Ie=s(cA);bCe=n(_Ie,"STRONG",{});var zyt=s(bCe);pIr=r(zyt,"albert"),zyt.forEach(t),_Ir=r(_Ie," \u2014 "),eK=n(_Ie,"A",{href:!0});var Wyt=s(eK);bIr=r(Wyt,"FlaxAlbertForTokenClassification"),Wyt.forEach(t),vIr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),FIr=i(Fo),mA=n(Fo,"LI",{});var bIe=s(mA);vCe=n(bIe,"STRONG",{});var Qyt=s(vCe);TIr=r(Qyt,"bert"),Qyt.forEach(t),MIr=r(bIe," \u2014 "),oK=n(bIe,"A",{href:!0});var Hyt=s(oK);EIr=r(Hyt,"FlaxBertForTokenClassification"),Hyt.forEach(t),CIr=r(bIe," (BERT model)"),bIe.forEach(t),wIr=i(Fo),fA=n(Fo,"LI",{});var vIe=s(fA);FCe=n(vIe,"STRONG",{});var Uyt=s(FCe);AIr=r(Uyt,"big_bird"),Uyt.forEach(t),yIr=r(vIe," \u2014 "),rK=n(vIe,"A",{href:!0});var Jyt=s(rK);LIr=r(Jyt,"FlaxBigBirdForTokenClassification"),Jyt.forEach(t),xIr=r(vIe," (BigBird model)"),vIe.forEach(t),$Ir=i(Fo),gA=n(Fo,"LI",{});var FIe=s(gA);TCe=n(FIe,"STRONG",{});var Yyt=s(TCe);kIr=r(Yyt,"distilbert"),Yyt.forEach(t),SIr=r(FIe," \u2014 "),tK=n(FIe,"A",{href:!0});var Kyt=s(tK);RIr=r(Kyt,"FlaxDistilBertForTokenClassification"),Kyt.forEach(t),PIr=r(FIe," (DistilBERT model)"),FIe.forEach(t),BIr=i(Fo),hA=n(Fo,"LI",{});var TIe=s(hA);MCe=n(TIe,"STRONG",{});var Zyt=s(MCe);IIr=r(Zyt,"electra"),Zyt.forEach(t),qIr=r(TIe," \u2014 "),aK=n(TIe,"A",{href:!0});var eLt=s(aK);NIr=r(eLt,"FlaxElectraForTokenClassification"),eLt.forEach(t),jIr=r(TIe," (ELECTRA model)"),TIe.forEach(t),DIr=i(Fo),uA=n(Fo,"LI",{});var MIe=s(uA);ECe=n(MIe,"STRONG",{});var oLt=s(ECe);GIr=r(oLt,"roberta"),oLt.forEach(t),OIr=r(MIe," \u2014 "),nK=n(MIe,"A",{href:!0});var rLt=s(nK);VIr=r(rLt,"FlaxRobertaForTokenClassification"),rLt.forEach(t),XIr=r(MIe," (RoBERTa model)"),MIe.forEach(t),zIr=i(Fo),pA=n(Fo,"LI",{});var EIe=s(pA);CCe=n(EIe,"STRONG",{});var tLt=s(CCe);WIr=r(tLt,"roformer"),tLt.forEach(t),QIr=r(EIe," \u2014 "),sK=n(EIe,"A",{href:!0});var aLt=s(sK);HIr=r(aLt,"FlaxRoFormerForTokenClassification"),aLt.forEach(t),UIr=r(EIe," (RoFormer model)"),EIe.forEach(t),JIr=i(Fo),_A=n(Fo,"LI",{});var CIe=s(_A);wCe=n(CIe,"STRONG",{});var nLt=s(wCe);YIr=r(nLt,"xlm-roberta"),nLt.forEach(t),KIr=r(CIe," \u2014 "),lK=n(CIe,"A",{href:!0});var sLt=s(lK);ZIr=r(sLt,"FlaxXLMRobertaForTokenClassification"),sLt.forEach(t),eqr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Fo.forEach(t),oqr=i(oi),T(bA.$$.fragment,oi),oi.forEach(t),ei.forEach(t),SNe=i(m),Kc=n(m,"H2",{class:!0});var jDe=s(Kc);vA=n(jDe,"A",{id:!0,class:!0,href:!0});var lLt=s(vA);ACe=n(lLt,"SPAN",{});var iLt=s(ACe);T(Hx.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),rqr=i(jDe),yCe=n(jDe,"SPAN",{});var dLt=s(yCe);tqr=r(dLt,"FlaxAutoModelForMultipleChoice"),dLt.forEach(t),jDe.forEach(t),RNe=i(m),vr=n(m,"DIV",{class:!0});var ri=s(vr);T(Ux.$$.fragment,ri),aqr=i(ri),Zc=n(ri,"P",{});var pee=s(Zc);nqr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iK=n(pee,"A",{href:!0});var cLt=s(iK);sqr=r(cLt,"from_pretrained()"),cLt.forEach(t),lqr=r(pee," class method or the "),dK=n(pee,"A",{href:!0});var mLt=s(dK);iqr=r(mLt,"from_config()"),mLt.forEach(t),dqr=r(pee,` class
method.`),pee.forEach(t),cqr=i(ri),Jx=n(ri,"P",{});var DDe=s(Jx);mqr=r(DDe,"This class cannot be instantiated directly using "),LCe=n(DDe,"CODE",{});var fLt=s(LCe);fqr=r(fLt,"__init__()"),fLt.forEach(t),gqr=r(DDe," (throws an error)."),DDe.forEach(t),hqr=i(ri),Ut=n(ri,"DIV",{class:!0});var K6=s(Ut);T(Yx.$$.fragment,K6),uqr=i(K6),xCe=n(K6,"P",{});var gLt=s(xCe);pqr=r(gLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gLt.forEach(t),_qr=i(K6),em=n(K6,"P",{});var _ee=s(em);bqr=r(_ee,`Note:
Loading a model from its configuration file does `),$Ce=n(_ee,"STRONG",{});var hLt=s($Ce);vqr=r(hLt,"not"),hLt.forEach(t),Fqr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(_ee,"A",{href:!0});var uLt=s(cK);Tqr=r(uLt,"from_pretrained()"),uLt.forEach(t),Mqr=r(_ee," to load the model weights."),_ee.forEach(t),Eqr=i(K6),T(FA.$$.fragment,K6),K6.forEach(t),Cqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Kx.$$.fragment,ti),wqr=i(ti),kCe=n(ti,"P",{});var pLt=s(kCe);Aqr=r(pLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pLt.forEach(t),yqr=i(ti),Mn=n(ti,"P",{});var Z6=s(Mn);Lqr=r(Z6,"The model class to instantiate is selected based on the "),SCe=n(Z6,"CODE",{});var _Lt=s(SCe);xqr=r(_Lt,"model_type"),_Lt.forEach(t),$qr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),RCe=n(Z6,"CODE",{});var bLt=s(RCe);kqr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),Sqr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(Z6,"CODE",{});var vLt=s(PCe);Rqr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),Pqr=r(Z6,":"),Z6.forEach(t),Bqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);TA=n(To,"LI",{});var wIe=s(TA);BCe=n(wIe,"STRONG",{});var FLt=s(BCe);Iqr=r(FLt,"albert"),FLt.forEach(t),qqr=r(wIe," \u2014 "),mK=n(wIe,"A",{href:!0});var TLt=s(mK);Nqr=r(TLt,"FlaxAlbertForMultipleChoice"),TLt.forEach(t),jqr=r(wIe," (ALBERT model)"),wIe.forEach(t),Dqr=i(To),MA=n(To,"LI",{});var AIe=s(MA);ICe=n(AIe,"STRONG",{});var MLt=s(ICe);Gqr=r(MLt,"bert"),MLt.forEach(t),Oqr=r(AIe," \u2014 "),fK=n(AIe,"A",{href:!0});var ELt=s(fK);Vqr=r(ELt,"FlaxBertForMultipleChoice"),ELt.forEach(t),Xqr=r(AIe," (BERT model)"),AIe.forEach(t),zqr=i(To),EA=n(To,"LI",{});var yIe=s(EA);qCe=n(yIe,"STRONG",{});var CLt=s(qCe);Wqr=r(CLt,"big_bird"),CLt.forEach(t),Qqr=r(yIe," \u2014 "),gK=n(yIe,"A",{href:!0});var wLt=s(gK);Hqr=r(wLt,"FlaxBigBirdForMultipleChoice"),wLt.forEach(t),Uqr=r(yIe," (BigBird model)"),yIe.forEach(t),Jqr=i(To),CA=n(To,"LI",{});var LIe=s(CA);NCe=n(LIe,"STRONG",{});var ALt=s(NCe);Yqr=r(ALt,"distilbert"),ALt.forEach(t),Kqr=r(LIe," \u2014 "),hK=n(LIe,"A",{href:!0});var yLt=s(hK);Zqr=r(yLt,"FlaxDistilBertForMultipleChoice"),yLt.forEach(t),eNr=r(LIe," (DistilBERT model)"),LIe.forEach(t),oNr=i(To),wA=n(To,"LI",{});var xIe=s(wA);jCe=n(xIe,"STRONG",{});var LLt=s(jCe);rNr=r(LLt,"electra"),LLt.forEach(t),tNr=r(xIe," \u2014 "),uK=n(xIe,"A",{href:!0});var xLt=s(uK);aNr=r(xLt,"FlaxElectraForMultipleChoice"),xLt.forEach(t),nNr=r(xIe," (ELECTRA model)"),xIe.forEach(t),sNr=i(To),AA=n(To,"LI",{});var $Ie=s(AA);DCe=n($Ie,"STRONG",{});var $Lt=s(DCe);lNr=r($Lt,"roberta"),$Lt.forEach(t),iNr=r($Ie," \u2014 "),pK=n($Ie,"A",{href:!0});var kLt=s(pK);dNr=r(kLt,"FlaxRobertaForMultipleChoice"),kLt.forEach(t),cNr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),mNr=i(To),yA=n(To,"LI",{});var kIe=s(yA);GCe=n(kIe,"STRONG",{});var SLt=s(GCe);fNr=r(SLt,"roformer"),SLt.forEach(t),gNr=r(kIe," \u2014 "),_K=n(kIe,"A",{href:!0});var RLt=s(_K);hNr=r(RLt,"FlaxRoFormerForMultipleChoice"),RLt.forEach(t),uNr=r(kIe," (RoFormer model)"),kIe.forEach(t),pNr=i(To),LA=n(To,"LI",{});var SIe=s(LA);OCe=n(SIe,"STRONG",{});var PLt=s(OCe);_Nr=r(PLt,"xlm-roberta"),PLt.forEach(t),bNr=r(SIe," \u2014 "),bK=n(SIe,"A",{href:!0});var BLt=s(bK);vNr=r(BLt,"FlaxXLMRobertaForMultipleChoice"),BLt.forEach(t),FNr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),To.forEach(t),TNr=i(ti),T(xA.$$.fragment,ti),ti.forEach(t),ri.forEach(t),PNe=i(m),om=n(m,"H2",{class:!0});var GDe=s(om);$A=n(GDe,"A",{id:!0,class:!0,href:!0});var ILt=s($A);VCe=n(ILt,"SPAN",{});var qLt=s(VCe);T(Zx.$$.fragment,qLt),qLt.forEach(t),ILt.forEach(t),MNr=i(GDe),XCe=n(GDe,"SPAN",{});var NLt=s(XCe);ENr=r(NLt,"FlaxAutoModelForNextSentencePrediction"),NLt.forEach(t),GDe.forEach(t),BNe=i(m),Fr=n(m,"DIV",{class:!0});var ai=s(Fr);T(e9.$$.fragment,ai),CNr=i(ai),rm=n(ai,"P",{});var bee=s(rm);wNr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vK=n(bee,"A",{href:!0});var jLt=s(vK);ANr=r(jLt,"from_pretrained()"),jLt.forEach(t),yNr=r(bee," class method or the "),FK=n(bee,"A",{href:!0});var DLt=s(FK);LNr=r(DLt,"from_config()"),DLt.forEach(t),xNr=r(bee,` class
method.`),bee.forEach(t),$Nr=i(ai),o9=n(ai,"P",{});var ODe=s(o9);kNr=r(ODe,"This class cannot be instantiated directly using "),zCe=n(ODe,"CODE",{});var GLt=s(zCe);SNr=r(GLt,"__init__()"),GLt.forEach(t),RNr=r(ODe," (throws an error)."),ODe.forEach(t),PNr=i(ai),Jt=n(ai,"DIV",{class:!0});var ey=s(Jt);T(r9.$$.fragment,ey),BNr=i(ey),WCe=n(ey,"P",{});var OLt=s(WCe);INr=r(OLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OLt.forEach(t),qNr=i(ey),tm=n(ey,"P",{});var vee=s(tm);NNr=r(vee,`Note:
Loading a model from its configuration file does `),QCe=n(vee,"STRONG",{});var VLt=s(QCe);jNr=r(VLt,"not"),VLt.forEach(t),DNr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(vee,"A",{href:!0});var XLt=s(TK);GNr=r(XLt,"from_pretrained()"),XLt.forEach(t),ONr=r(vee," to load the model weights."),vee.forEach(t),VNr=i(ey),T(kA.$$.fragment,ey),ey.forEach(t),XNr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(t9.$$.fragment,ni),zNr=i(ni),HCe=n(ni,"P",{});var zLt=s(HCe);WNr=r(zLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zLt.forEach(t),QNr=i(ni),En=n(ni,"P",{});var oy=s(En);HNr=r(oy,"The model class to instantiate is selected based on the "),UCe=n(oy,"CODE",{});var WLt=s(UCe);UNr=r(WLt,"model_type"),WLt.forEach(t),JNr=r(oy,` property of the config object (either
passed as an argument or loaded from `),JCe=n(oy,"CODE",{});var QLt=s(JCe);YNr=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),KNr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(oy,"CODE",{});var HLt=s(YCe);ZNr=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),ejr=r(oy,":"),oy.forEach(t),ojr=i(ni),KCe=n(ni,"UL",{});var ULt=s(KCe);SA=n(ULt,"LI",{});var RIe=s(SA);ZCe=n(RIe,"STRONG",{});var JLt=s(ZCe);rjr=r(JLt,"bert"),JLt.forEach(t),tjr=r(RIe," \u2014 "),MK=n(RIe,"A",{href:!0});var YLt=s(MK);ajr=r(YLt,"FlaxBertForNextSentencePrediction"),YLt.forEach(t),njr=r(RIe," (BERT model)"),RIe.forEach(t),ULt.forEach(t),sjr=i(ni),T(RA.$$.fragment,ni),ni.forEach(t),ai.forEach(t),INe=i(m),am=n(m,"H2",{class:!0});var VDe=s(am);PA=n(VDe,"A",{id:!0,class:!0,href:!0});var KLt=s(PA);e5e=n(KLt,"SPAN",{});var ZLt=s(e5e);T(a9.$$.fragment,ZLt),ZLt.forEach(t),KLt.forEach(t),ljr=i(VDe),o5e=n(VDe,"SPAN",{});var e8t=s(o5e);ijr=r(e8t,"FlaxAutoModelForImageClassification"),e8t.forEach(t),VDe.forEach(t),qNe=i(m),Tr=n(m,"DIV",{class:!0});var si=s(Tr);T(n9.$$.fragment,si),djr=i(si),nm=n(si,"P",{});var Fee=s(nm);cjr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EK=n(Fee,"A",{href:!0});var o8t=s(EK);mjr=r(o8t,"from_pretrained()"),o8t.forEach(t),fjr=r(Fee," class method or the "),CK=n(Fee,"A",{href:!0});var r8t=s(CK);gjr=r(r8t,"from_config()"),r8t.forEach(t),hjr=r(Fee,` class
method.`),Fee.forEach(t),ujr=i(si),s9=n(si,"P",{});var XDe=s(s9);pjr=r(XDe,"This class cannot be instantiated directly using "),r5e=n(XDe,"CODE",{});var t8t=s(r5e);_jr=r(t8t,"__init__()"),t8t.forEach(t),bjr=r(XDe," (throws an error)."),XDe.forEach(t),vjr=i(si),Yt=n(si,"DIV",{class:!0});var ry=s(Yt);T(l9.$$.fragment,ry),Fjr=i(ry),t5e=n(ry,"P",{});var a8t=s(t5e);Tjr=r(a8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a8t.forEach(t),Mjr=i(ry),sm=n(ry,"P",{});var Tee=s(sm);Ejr=r(Tee,`Note:
Loading a model from its configuration file does `),a5e=n(Tee,"STRONG",{});var n8t=s(a5e);Cjr=r(n8t,"not"),n8t.forEach(t),wjr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Tee,"A",{href:!0});var s8t=s(wK);Ajr=r(s8t,"from_pretrained()"),s8t.forEach(t),yjr=r(Tee," to load the model weights."),Tee.forEach(t),Ljr=i(ry),T(BA.$$.fragment,ry),ry.forEach(t),xjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(i9.$$.fragment,li),$jr=i(li),n5e=n(li,"P",{});var l8t=s(n5e);kjr=r(l8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l8t.forEach(t),Sjr=i(li),Cn=n(li,"P",{});var ty=s(Cn);Rjr=r(ty,"The model class to instantiate is selected based on the "),s5e=n(ty,"CODE",{});var i8t=s(s5e);Pjr=r(i8t,"model_type"),i8t.forEach(t),Bjr=r(ty,` property of the config object (either
passed as an argument or loaded from `),l5e=n(ty,"CODE",{});var d8t=s(l5e);Ijr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),qjr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(ty,"CODE",{});var c8t=s(i5e);Njr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),jjr=r(ty,":"),ty.forEach(t),Djr=i(li),d9=n(li,"UL",{});var zDe=s(d9);IA=n(zDe,"LI",{});var PIe=s(IA);d5e=n(PIe,"STRONG",{});var m8t=s(d5e);Gjr=r(m8t,"beit"),m8t.forEach(t),Ojr=r(PIe," \u2014 "),AK=n(PIe,"A",{href:!0});var f8t=s(AK);Vjr=r(f8t,"FlaxBeitForImageClassification"),f8t.forEach(t),Xjr=r(PIe," (BEiT model)"),PIe.forEach(t),zjr=i(zDe),qA=n(zDe,"LI",{});var BIe=s(qA);c5e=n(BIe,"STRONG",{});var g8t=s(c5e);Wjr=r(g8t,"vit"),g8t.forEach(t),Qjr=r(BIe," \u2014 "),yK=n(BIe,"A",{href:!0});var h8t=s(yK);Hjr=r(h8t,"FlaxViTForImageClassification"),h8t.forEach(t),Ujr=r(BIe," (ViT model)"),BIe.forEach(t),zDe.forEach(t),Jjr=i(li),T(NA.$$.fragment,li),li.forEach(t),si.forEach(t),NNe=i(m),lm=n(m,"H2",{class:!0});var WDe=s(lm);jA=n(WDe,"A",{id:!0,class:!0,href:!0});var u8t=s(jA);m5e=n(u8t,"SPAN",{});var p8t=s(m5e);T(c9.$$.fragment,p8t),p8t.forEach(t),u8t.forEach(t),Yjr=i(WDe),f5e=n(WDe,"SPAN",{});var _8t=s(f5e);Kjr=r(_8t,"FlaxAutoModelForVision2Seq"),_8t.forEach(t),WDe.forEach(t),jNe=i(m),Mr=n(m,"DIV",{class:!0});var ii=s(Mr);T(m9.$$.fragment,ii),Zjr=i(ii),im=n(ii,"P",{});var Mee=s(im);eDr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=n(Mee,"A",{href:!0});var b8t=s(LK);oDr=r(b8t,"from_pretrained()"),b8t.forEach(t),rDr=r(Mee," class method or the "),xK=n(Mee,"A",{href:!0});var v8t=s(xK);tDr=r(v8t,"from_config()"),v8t.forEach(t),aDr=r(Mee,` class
method.`),Mee.forEach(t),nDr=i(ii),f9=n(ii,"P",{});var QDe=s(f9);sDr=r(QDe,"This class cannot be instantiated directly using "),g5e=n(QDe,"CODE",{});var F8t=s(g5e);lDr=r(F8t,"__init__()"),F8t.forEach(t),iDr=r(QDe," (throws an error)."),QDe.forEach(t),dDr=i(ii),Kt=n(ii,"DIV",{class:!0});var ay=s(Kt);T(g9.$$.fragment,ay),cDr=i(ay),h5e=n(ay,"P",{});var T8t=s(h5e);mDr=r(T8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T8t.forEach(t),fDr=i(ay),dm=n(ay,"P",{});var Eee=s(dm);gDr=r(Eee,`Note:
Loading a model from its configuration file does `),u5e=n(Eee,"STRONG",{});var M8t=s(u5e);hDr=r(M8t,"not"),M8t.forEach(t),uDr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(Eee,"A",{href:!0});var E8t=s($K);pDr=r(E8t,"from_pretrained()"),E8t.forEach(t),_Dr=r(Eee," to load the model weights."),Eee.forEach(t),bDr=i(ay),T(DA.$$.fragment,ay),ay.forEach(t),vDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(h9.$$.fragment,di),FDr=i(di),p5e=n(di,"P",{});var C8t=s(p5e);TDr=r(C8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C8t.forEach(t),MDr=i(di),wn=n(di,"P",{});var ny=s(wn);EDr=r(ny,"The model class to instantiate is selected based on the "),_5e=n(ny,"CODE",{});var w8t=s(_5e);CDr=r(w8t,"model_type"),w8t.forEach(t),wDr=r(ny,` property of the config object (either
passed as an argument or loaded from `),b5e=n(ny,"CODE",{});var A8t=s(b5e);ADr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),yDr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(ny,"CODE",{});var y8t=s(v5e);LDr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),xDr=r(ny,":"),ny.forEach(t),$Dr=i(di),F5e=n(di,"UL",{});var L8t=s(F5e);GA=n(L8t,"LI",{});var IIe=s(GA);T5e=n(IIe,"STRONG",{});var x8t=s(T5e);kDr=r(x8t,"vision-encoder-decoder"),x8t.forEach(t),SDr=r(IIe," \u2014 "),kK=n(IIe,"A",{href:!0});var $8t=s(kK);RDr=r($8t,"FlaxVisionEncoderDecoderModel"),$8t.forEach(t),PDr=r(IIe," (Vision Encoder decoder model)"),IIe.forEach(t),L8t.forEach(t),BDr=i(di),T(OA.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Pxt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(_m,"id","extending-the-auto-classes"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(vm,"id","transformers.AutoConfig"),c(vm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vm,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(R$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(P$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ek,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(uk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Mk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(yk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c($k,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Pk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(aS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(iS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(MS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c($S,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(SS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(RS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(qS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(jS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(OS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(WS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(QS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(US,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(WR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(nP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(fP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(WP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(fB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(gB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_B,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoProcessor"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(jB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(DB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(GB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(OB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(WB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(YB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(KB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"id","transformers.AutoModel"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(oI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(nI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(sI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(lI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(iI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(cI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(mI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(hI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(uI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(pI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(_I,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(bI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(vI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(FI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(TI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(MI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(EI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(CI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(wI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(AI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(yI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(LI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(xI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c($I,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(kI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(SI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(RI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(PI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(BI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(II,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(NI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(jI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(DI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(GI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(OI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(VI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(XI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(zI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(WI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(QI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(HI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(UI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(JI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(YI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(KI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(eq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(tq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(aq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(nq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(sq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(lq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(iq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(dq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(cq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(fq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(gq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(hq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(uq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(pq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(_q,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(vq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(wq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(yq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Lq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(xq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($q,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(jq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Dq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(zq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zp,"id","transformers.AutoModelForPreTraining"),c(zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zp,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Jq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(rN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(fN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_N,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(wN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(yN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(SN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(BN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(qN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q_,"id","transformers.AutoModelForCausalLM"),c(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(GN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(zN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(WN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(QN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(HN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(KN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(nj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ij,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(dj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(cj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(fj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(gj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(hj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(uj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(pj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(_j,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(bj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(wj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForMaskedLM"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Qj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(eD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i2,"id","transformers.AutoModelForSeq2SeqLM"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(dD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(uD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(pD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_D,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(FD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(TD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(MD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ED,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(CD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(AD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForSequenceClassification"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(LD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($D,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForMultipleChoice"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(EG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c($G,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(kG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(SG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(RG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(PG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(BG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(IG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(qG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(NG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(QG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForNextSentencePrediction"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(oO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForTokenClassification"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c($O,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForQuestionAnswering"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(aV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(lV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(iV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(cV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(fV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(gV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(hV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(pV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(_V,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(bV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(vV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(FV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(EV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(wV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(AV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(yV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(LV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(xV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c($V,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(kV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(SV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForTableQuestionAnswering"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForImageClassification"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(qV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(zV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(QV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(HV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(UV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForVision2Seq"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioClassification"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForAudioFrameClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForCTC"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($X,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(kX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(SX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(RX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(PX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(BX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(IX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(qX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(OX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioXVector"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(QX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(HX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(UX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(JX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForMaskedImageModeling"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(oz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(rz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.AutoModelForObjectDetection"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(lz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.AutoModelForImageSegmentation"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.AutoModelForSemanticSegmentation"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(pz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(_z,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(bz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.AutoModelForInstanceSegmentation"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModel"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(yz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(xz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c($z,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(kz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(qz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(jz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Gz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(zz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Wz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(eW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(oW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(rW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(tW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(aW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(nW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(sW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(lW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(iW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(cW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(mW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(fW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(hW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(pW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(_W,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForPreTraining"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(EW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($W,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(kW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(PW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(BW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(GW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(OW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(XW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForCausalLM"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(JW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(YW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ZW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForImageClassification"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForMaskedLM"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(zQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForSequenceClassification"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.TFAutoModelForMultipleChoice"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(qH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(NH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.TFAutoModelForTokenClassification"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.TFAutoModelForQuestionAnswering"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.TFAutoModelForVision2Seq"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModel"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(fJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(_J,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(vJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(TJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(MJ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(EJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(CJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(wJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(AJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForCausalLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(RJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(IJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForPreTraining"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForMaskedLM"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_Y,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.FlaxAutoModelForTokenClassification"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(fK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(pK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_K,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($A,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($A,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(om,"class","relative group"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForImageClassification"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForImageClassification"),c(am,"class","relative group"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jA,"id","transformers.FlaxAutoModelForVision2Seq"),c(jA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lm,"class","relative group"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,ci),b(m,gm,_),b(m,rt,_),e(rt,mi),e(rt,fi),e(fi,sy),e(rt,hm),b(m,je,_),b(m,We,_),e(We,gi),e(We,yn),e(yn,ly),e(We,Ln),e(We,xn),e(xn,iy),e(We,hi),e(We,$n),e($n,dy),e(We,ui),b(m,um,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,y$),e(Ae,pi),e(pi,L$),e(Ae,x$),b(m,Eo,_),b(m,wa,_),e(wa,$$),e(wa,pm),e(pm,k$),e(wa,HDe),b(m,qIe,_),b(m,_i,_),e(_i,_m),e(_m,Cee),M(cy,Cee,null),e(_i,UDe),e(_i,wee),e(wee,JDe),b(m,NIe,_),b(m,kn,_),e(kn,YDe),e(kn,Aee),e(Aee,KDe),e(kn,ZDe),e(kn,yee),e(yee,eGe),e(kn,oGe),b(m,jIe,_),M(my,m,_),b(m,DIe,_),b(m,S$,_),e(S$,rGe),b(m,GIe,_),M(bm,m,_),b(m,OIe,_),b(m,bi,_),e(bi,vm),e(vm,Lee),M(fy,Lee,null),e(bi,tGe),e(bi,xee),e(xee,aGe),b(m,VIe,_),b(m,Co,_),M(gy,Co,null),e(Co,nGe),e(Co,hy),e(hy,sGe),e(hy,R$),e(R$,lGe),e(hy,iGe),e(Co,dGe),e(Co,uy),e(uy,cGe),e(uy,$ee),e($ee,mGe),e(uy,fGe),e(Co,gGe),e(Co,Er),M(py,Er,null),e(Er,hGe),e(Er,kee),e(kee,uGe),e(Er,pGe),e(Er,vi),e(vi,_Ge),e(vi,See),e(See,bGe),e(vi,vGe),e(vi,Ree),e(Ree,FGe),e(vi,TGe),e(Er,MGe),e(Er,A),e(A,Fm),e(Fm,Pee),e(Pee,EGe),e(Fm,CGe),e(Fm,P$),e(P$,wGe),e(Fm,AGe),e(A,yGe),e(A,Tm),e(Tm,Bee),e(Bee,LGe),e(Tm,xGe),e(Tm,B$),e(B$,$Ge),e(Tm,kGe),e(A,SGe),e(A,Mm),e(Mm,Iee),e(Iee,RGe),e(Mm,PGe),e(Mm,I$),e(I$,BGe),e(Mm,IGe),e(A,qGe),e(A,Em),e(Em,qee),e(qee,NGe),e(Em,jGe),e(Em,q$),e(q$,DGe),e(Em,GGe),e(A,OGe),e(A,Cm),e(Cm,Nee),e(Nee,VGe),e(Cm,XGe),e(Cm,N$),e(N$,zGe),e(Cm,WGe),e(A,QGe),e(A,wm),e(wm,jee),e(jee,HGe),e(wm,UGe),e(wm,j$),e(j$,JGe),e(wm,YGe),e(A,KGe),e(A,Am),e(Am,Dee),e(Dee,ZGe),e(Am,eOe),e(Am,D$),e(D$,oOe),e(Am,rOe),e(A,tOe),e(A,ym),e(ym,Gee),e(Gee,aOe),e(ym,nOe),e(ym,G$),e(G$,sOe),e(ym,lOe),e(A,iOe),e(A,Lm),e(Lm,Oee),e(Oee,dOe),e(Lm,cOe),e(Lm,O$),e(O$,mOe),e(Lm,fOe),e(A,gOe),e(A,xm),e(xm,Vee),e(Vee,hOe),e(xm,uOe),e(xm,V$),e(V$,pOe),e(xm,_Oe),e(A,bOe),e(A,$m),e($m,Xee),e(Xee,vOe),e($m,FOe),e($m,X$),e(X$,TOe),e($m,MOe),e(A,EOe),e(A,km),e(km,zee),e(zee,COe),e(km,wOe),e(km,z$),e(z$,AOe),e(km,yOe),e(A,LOe),e(A,Sm),e(Sm,Wee),e(Wee,xOe),e(Sm,$Oe),e(Sm,W$),e(W$,kOe),e(Sm,SOe),e(A,ROe),e(A,Rm),e(Rm,Qee),e(Qee,POe),e(Rm,BOe),e(Rm,Q$),e(Q$,IOe),e(Rm,qOe),e(A,NOe),e(A,Pm),e(Pm,Hee),e(Hee,jOe),e(Pm,DOe),e(Pm,H$),e(H$,GOe),e(Pm,OOe),e(A,VOe),e(A,Bm),e(Bm,Uee),e(Uee,XOe),e(Bm,zOe),e(Bm,U$),e(U$,WOe),e(Bm,QOe),e(A,HOe),e(A,Im),e(Im,Jee),e(Jee,UOe),e(Im,JOe),e(Im,J$),e(J$,YOe),e(Im,KOe),e(A,ZOe),e(A,qm),e(qm,Yee),e(Yee,eVe),e(qm,oVe),e(qm,Y$),e(Y$,rVe),e(qm,tVe),e(A,aVe),e(A,Nm),e(Nm,Kee),e(Kee,nVe),e(Nm,sVe),e(Nm,K$),e(K$,lVe),e(Nm,iVe),e(A,dVe),e(A,jm),e(jm,Zee),e(Zee,cVe),e(jm,mVe),e(jm,Z$),e(Z$,fVe),e(jm,gVe),e(A,hVe),e(A,Dm),e(Dm,eoe),e(eoe,uVe),e(Dm,pVe),e(Dm,ek),e(ek,_Ve),e(Dm,bVe),e(A,vVe),e(A,Gm),e(Gm,ooe),e(ooe,FVe),e(Gm,TVe),e(Gm,ok),e(ok,MVe),e(Gm,EVe),e(A,CVe),e(A,Om),e(Om,roe),e(roe,wVe),e(Om,AVe),e(Om,rk),e(rk,yVe),e(Om,LVe),e(A,xVe),e(A,Vm),e(Vm,toe),e(toe,$Ve),e(Vm,kVe),e(Vm,tk),e(tk,SVe),e(Vm,RVe),e(A,PVe),e(A,Xm),e(Xm,aoe),e(aoe,BVe),e(Xm,IVe),e(Xm,ak),e(ak,qVe),e(Xm,NVe),e(A,jVe),e(A,zm),e(zm,noe),e(noe,DVe),e(zm,GVe),e(zm,nk),e(nk,OVe),e(zm,VVe),e(A,XVe),e(A,Wm),e(Wm,soe),e(soe,zVe),e(Wm,WVe),e(Wm,sk),e(sk,QVe),e(Wm,HVe),e(A,UVe),e(A,Qm),e(Qm,loe),e(loe,JVe),e(Qm,YVe),e(Qm,lk),e(lk,KVe),e(Qm,ZVe),e(A,eXe),e(A,Hm),e(Hm,ioe),e(ioe,oXe),e(Hm,rXe),e(Hm,ik),e(ik,tXe),e(Hm,aXe),e(A,nXe),e(A,Um),e(Um,doe),e(doe,sXe),e(Um,lXe),e(Um,dk),e(dk,iXe),e(Um,dXe),e(A,cXe),e(A,Jm),e(Jm,coe),e(coe,mXe),e(Jm,fXe),e(Jm,ck),e(ck,gXe),e(Jm,hXe),e(A,uXe),e(A,Ym),e(Ym,moe),e(moe,pXe),e(Ym,_Xe),e(Ym,mk),e(mk,bXe),e(Ym,vXe),e(A,FXe),e(A,Km),e(Km,foe),e(foe,TXe),e(Km,MXe),e(Km,fk),e(fk,EXe),e(Km,CXe),e(A,wXe),e(A,Zm),e(Zm,goe),e(goe,AXe),e(Zm,yXe),e(Zm,gk),e(gk,LXe),e(Zm,xXe),e(A,$Xe),e(A,ef),e(ef,hoe),e(hoe,kXe),e(ef,SXe),e(ef,hk),e(hk,RXe),e(ef,PXe),e(A,BXe),e(A,of),e(of,uoe),e(uoe,IXe),e(of,qXe),e(of,uk),e(uk,NXe),e(of,jXe),e(A,DXe),e(A,rf),e(rf,poe),e(poe,GXe),e(rf,OXe),e(rf,pk),e(pk,VXe),e(rf,XXe),e(A,zXe),e(A,tf),e(tf,_oe),e(_oe,WXe),e(tf,QXe),e(tf,_k),e(_k,HXe),e(tf,UXe),e(A,JXe),e(A,af),e(af,boe),e(boe,YXe),e(af,KXe),e(af,bk),e(bk,ZXe),e(af,eze),e(A,oze),e(A,nf),e(nf,voe),e(voe,rze),e(nf,tze),e(nf,vk),e(vk,aze),e(nf,nze),e(A,sze),e(A,sf),e(sf,Foe),e(Foe,lze),e(sf,ize),e(sf,Fk),e(Fk,dze),e(sf,cze),e(A,mze),e(A,lf),e(lf,Toe),e(Toe,fze),e(lf,gze),e(lf,Tk),e(Tk,hze),e(lf,uze),e(A,pze),e(A,df),e(df,Moe),e(Moe,_ze),e(df,bze),e(df,Mk),e(Mk,vze),e(df,Fze),e(A,Tze),e(A,cf),e(cf,Eoe),e(Eoe,Mze),e(cf,Eze),e(cf,Ek),e(Ek,Cze),e(cf,wze),e(A,Aze),e(A,mf),e(mf,Coe),e(Coe,yze),e(mf,Lze),e(mf,Ck),e(Ck,xze),e(mf,$ze),e(A,kze),e(A,ff),e(ff,woe),e(woe,Sze),e(ff,Rze),e(ff,wk),e(wk,Pze),e(ff,Bze),e(A,Ize),e(A,gf),e(gf,Aoe),e(Aoe,qze),e(gf,Nze),e(gf,Ak),e(Ak,jze),e(gf,Dze),e(A,Gze),e(A,hf),e(hf,yoe),e(yoe,Oze),e(hf,Vze),e(hf,yk),e(yk,Xze),e(hf,zze),e(A,Wze),e(A,uf),e(uf,Loe),e(Loe,Qze),e(uf,Hze),e(uf,Lk),e(Lk,Uze),e(uf,Jze),e(A,Yze),e(A,pf),e(pf,xoe),e(xoe,Kze),e(pf,Zze),e(pf,xk),e(xk,eWe),e(pf,oWe),e(A,rWe),e(A,_f),e(_f,$oe),e($oe,tWe),e(_f,aWe),e(_f,$k),e($k,nWe),e(_f,sWe),e(A,lWe),e(A,bf),e(bf,koe),e(koe,iWe),e(bf,dWe),e(bf,kk),e(kk,cWe),e(bf,mWe),e(A,fWe),e(A,vf),e(vf,Soe),e(Soe,gWe),e(vf,hWe),e(vf,Sk),e(Sk,uWe),e(vf,pWe),e(A,_We),e(A,Ff),e(Ff,Roe),e(Roe,bWe),e(Ff,vWe),e(Ff,Rk),e(Rk,FWe),e(Ff,TWe),e(A,MWe),e(A,Tf),e(Tf,Poe),e(Poe,EWe),e(Tf,CWe),e(Tf,Pk),e(Pk,wWe),e(Tf,AWe),e(A,yWe),e(A,Mf),e(Mf,Boe),e(Boe,LWe),e(Mf,xWe),e(Mf,Bk),e(Bk,$We),e(Mf,kWe),e(A,SWe),e(A,Ef),e(Ef,Ioe),e(Ioe,RWe),e(Ef,PWe),e(Ef,Ik),e(Ik,BWe),e(Ef,IWe),e(A,qWe),e(A,Cf),e(Cf,qoe),e(qoe,NWe),e(Cf,jWe),e(Cf,qk),e(qk,DWe),e(Cf,GWe),e(A,OWe),e(A,wf),e(wf,Noe),e(Noe,VWe),e(wf,XWe),e(wf,Nk),e(Nk,zWe),e(wf,WWe),e(A,QWe),e(A,Af),e(Af,joe),e(joe,HWe),e(Af,UWe),e(Af,jk),e(jk,JWe),e(Af,YWe),e(A,KWe),e(A,yf),e(yf,Doe),e(Doe,ZWe),e(yf,eQe),e(yf,Dk),e(Dk,oQe),e(yf,rQe),e(A,tQe),e(A,Lf),e(Lf,Goe),e(Goe,aQe),e(Lf,nQe),e(Lf,Gk),e(Gk,sQe),e(Lf,lQe),e(A,iQe),e(A,xf),e(xf,Ooe),e(Ooe,dQe),e(xf,cQe),e(xf,Ok),e(Ok,mQe),e(xf,fQe),e(A,gQe),e(A,$f),e($f,Voe),e(Voe,hQe),e($f,uQe),e($f,Vk),e(Vk,pQe),e($f,_Qe),e(A,bQe),e(A,kf),e(kf,Xoe),e(Xoe,vQe),e(kf,FQe),e(kf,Xk),e(Xk,TQe),e(kf,MQe),e(A,EQe),e(A,Sf),e(Sf,zoe),e(zoe,CQe),e(Sf,wQe),e(Sf,zk),e(zk,AQe),e(Sf,yQe),e(A,LQe),e(A,Rf),e(Rf,Woe),e(Woe,xQe),e(Rf,$Qe),e(Rf,Wk),e(Wk,kQe),e(Rf,SQe),e(A,RQe),e(A,Pf),e(Pf,Qoe),e(Qoe,PQe),e(Pf,BQe),e(Pf,Qk),e(Qk,IQe),e(Pf,qQe),e(A,NQe),e(A,Bf),e(Bf,Hoe),e(Hoe,jQe),e(Bf,DQe),e(Bf,Hk),e(Hk,GQe),e(Bf,OQe),e(A,VQe),e(A,If),e(If,Uoe),e(Uoe,XQe),e(If,zQe),e(If,Uk),e(Uk,WQe),e(If,QQe),e(A,HQe),e(A,qf),e(qf,Joe),e(Joe,UQe),e(qf,JQe),e(qf,Jk),e(Jk,YQe),e(qf,KQe),e(A,ZQe),e(A,Nf),e(Nf,Yoe),e(Yoe,eHe),e(Nf,oHe),e(Nf,Yk),e(Yk,rHe),e(Nf,tHe),e(A,aHe),e(A,jf),e(jf,Koe),e(Koe,nHe),e(jf,sHe),e(jf,Kk),e(Kk,lHe),e(jf,iHe),e(A,dHe),e(A,Df),e(Df,Zoe),e(Zoe,cHe),e(Df,mHe),e(Df,Zk),e(Zk,fHe),e(Df,gHe),e(A,hHe),e(A,Gf),e(Gf,ere),e(ere,uHe),e(Gf,pHe),e(Gf,eS),e(eS,_He),e(Gf,bHe),e(A,vHe),e(A,Of),e(Of,ore),e(ore,FHe),e(Of,THe),e(Of,oS),e(oS,MHe),e(Of,EHe),e(A,CHe),e(A,Vf),e(Vf,rre),e(rre,wHe),e(Vf,AHe),e(Vf,rS),e(rS,yHe),e(Vf,LHe),e(A,xHe),e(A,Xf),e(Xf,tre),e(tre,$He),e(Xf,kHe),e(Xf,tS),e(tS,SHe),e(Xf,RHe),e(A,PHe),e(A,zf),e(zf,are),e(are,BHe),e(zf,IHe),e(zf,aS),e(aS,qHe),e(zf,NHe),e(A,jHe),e(A,Wf),e(Wf,nre),e(nre,DHe),e(Wf,GHe),e(Wf,nS),e(nS,OHe),e(Wf,VHe),e(A,XHe),e(A,Qf),e(Qf,sre),e(sre,zHe),e(Qf,WHe),e(Qf,sS),e(sS,QHe),e(Qf,HHe),e(A,UHe),e(A,Hf),e(Hf,lre),e(lre,JHe),e(Hf,YHe),e(Hf,lS),e(lS,KHe),e(Hf,ZHe),e(A,eUe),e(A,Uf),e(Uf,ire),e(ire,oUe),e(Uf,rUe),e(Uf,iS),e(iS,tUe),e(Uf,aUe),e(A,nUe),e(A,Jf),e(Jf,dre),e(dre,sUe),e(Jf,lUe),e(Jf,dS),e(dS,iUe),e(Jf,dUe),e(A,cUe),e(A,Yf),e(Yf,cre),e(cre,mUe),e(Yf,fUe),e(Yf,cS),e(cS,gUe),e(Yf,hUe),e(A,uUe),e(A,Kf),e(Kf,mre),e(mre,pUe),e(Kf,_Ue),e(Kf,mS),e(mS,bUe),e(Kf,vUe),e(A,FUe),e(A,Zf),e(Zf,fre),e(fre,TUe),e(Zf,MUe),e(Zf,fS),e(fS,EUe),e(Zf,CUe),e(A,wUe),e(A,eg),e(eg,gre),e(gre,AUe),e(eg,yUe),e(eg,gS),e(gS,LUe),e(eg,xUe),e(A,$Ue),e(A,og),e(og,hre),e(hre,kUe),e(og,SUe),e(og,hS),e(hS,RUe),e(og,PUe),e(A,BUe),e(A,rg),e(rg,ure),e(ure,IUe),e(rg,qUe),e(rg,uS),e(uS,NUe),e(rg,jUe),e(A,DUe),e(A,tg),e(tg,pre),e(pre,GUe),e(tg,OUe),e(tg,pS),e(pS,VUe),e(tg,XUe),e(A,zUe),e(A,ag),e(ag,_re),e(_re,WUe),e(ag,QUe),e(ag,_S),e(_S,HUe),e(ag,UUe),e(A,JUe),e(A,ng),e(ng,bre),e(bre,YUe),e(ng,KUe),e(ng,bS),e(bS,ZUe),e(ng,eJe),e(A,oJe),e(A,sg),e(sg,vre),e(vre,rJe),e(sg,tJe),e(sg,vS),e(vS,aJe),e(sg,nJe),e(A,sJe),e(A,lg),e(lg,Fre),e(Fre,lJe),e(lg,iJe),e(lg,FS),e(FS,dJe),e(lg,cJe),e(A,mJe),e(A,ig),e(ig,Tre),e(Tre,fJe),e(ig,gJe),e(ig,TS),e(TS,hJe),e(ig,uJe),e(A,pJe),e(A,dg),e(dg,Mre),e(Mre,_Je),e(dg,bJe),e(dg,MS),e(MS,vJe),e(dg,FJe),e(A,TJe),e(A,cg),e(cg,Ere),e(Ere,MJe),e(cg,EJe),e(cg,ES),e(ES,CJe),e(cg,wJe),e(A,AJe),e(A,mg),e(mg,Cre),e(Cre,yJe),e(mg,LJe),e(mg,CS),e(CS,xJe),e(mg,$Je),e(A,kJe),e(A,fg),e(fg,wre),e(wre,SJe),e(fg,RJe),e(fg,wS),e(wS,PJe),e(fg,BJe),e(A,IJe),e(A,gg),e(gg,Are),e(Are,qJe),e(gg,NJe),e(gg,AS),e(AS,jJe),e(gg,DJe),e(A,GJe),e(A,hg),e(hg,yre),e(yre,OJe),e(hg,VJe),e(hg,yS),e(yS,XJe),e(hg,zJe),e(A,WJe),e(A,ug),e(ug,Lre),e(Lre,QJe),e(ug,HJe),e(ug,LS),e(LS,UJe),e(ug,JJe),e(A,YJe),e(A,pg),e(pg,xre),e(xre,KJe),e(pg,ZJe),e(pg,xS),e(xS,eYe),e(pg,oYe),e(A,rYe),e(A,_g),e(_g,$re),e($re,tYe),e(_g,aYe),e(_g,$S),e($S,nYe),e(_g,sYe),e(A,lYe),e(A,bg),e(bg,kre),e(kre,iYe),e(bg,dYe),e(bg,kS),e(kS,cYe),e(bg,mYe),e(Er,fYe),M(vg,Er,null),e(Co,gYe),e(Co,Fg),M(_y,Fg,null),e(Fg,hYe),e(Fg,Sre),e(Sre,uYe),b(m,XIe,_),b(m,Fi,_),e(Fi,Tg),e(Tg,Rre),M(by,Rre,null),e(Fi,pYe),e(Fi,Pre),e(Pre,_Ye),b(m,zIe,_),b(m,wo,_),M(vy,wo,null),e(wo,bYe),e(wo,Fy),e(Fy,vYe),e(Fy,SS),e(SS,FYe),e(Fy,TYe),e(wo,MYe),e(wo,Ty),e(Ty,EYe),e(Ty,Bre),e(Bre,CYe),e(Ty,wYe),e(wo,AYe),e(wo,Cr),M(My,Cr,null),e(Cr,yYe),e(Cr,Ire),e(Ire,LYe),e(Cr,xYe),e(Cr,Aa),e(Aa,$Ye),e(Aa,qre),e(qre,kYe),e(Aa,SYe),e(Aa,Nre),e(Nre,RYe),e(Aa,PYe),e(Aa,jre),e(jre,BYe),e(Aa,IYe),e(Cr,qYe),e(Cr,k),e(k,Sn),e(Sn,Dre),e(Dre,NYe),e(Sn,jYe),e(Sn,RS),e(RS,DYe),e(Sn,GYe),e(Sn,PS),e(PS,OYe),e(Sn,VYe),e(k,XYe),e(k,Rn),e(Rn,Gre),e(Gre,zYe),e(Rn,WYe),e(Rn,BS),e(BS,QYe),e(Rn,HYe),e(Rn,IS),e(IS,UYe),e(Rn,JYe),e(k,YYe),e(k,Pn),e(Pn,Ore),e(Ore,KYe),e(Pn,ZYe),e(Pn,qS),e(qS,eKe),e(Pn,oKe),e(Pn,NS),e(NS,rKe),e(Pn,tKe),e(k,aKe),e(k,Mg),e(Mg,Vre),e(Vre,nKe),e(Mg,sKe),e(Mg,jS),e(jS,lKe),e(Mg,iKe),e(k,dKe),e(k,Bn),e(Bn,Xre),e(Xre,cKe),e(Bn,mKe),e(Bn,DS),e(DS,fKe),e(Bn,gKe),e(Bn,GS),e(GS,hKe),e(Bn,uKe),e(k,pKe),e(k,Eg),e(Eg,zre),e(zre,_Ke),e(Eg,bKe),e(Eg,OS),e(OS,vKe),e(Eg,FKe),e(k,TKe),e(k,Cg),e(Cg,Wre),e(Wre,MKe),e(Cg,EKe),e(Cg,VS),e(VS,CKe),e(Cg,wKe),e(k,AKe),e(k,wg),e(wg,Qre),e(Qre,yKe),e(wg,LKe),e(wg,XS),e(XS,xKe),e(wg,$Ke),e(k,kKe),e(k,In),e(In,Hre),e(Hre,SKe),e(In,RKe),e(In,zS),e(zS,PKe),e(In,BKe),e(In,WS),e(WS,IKe),e(In,qKe),e(k,NKe),e(k,qn),e(qn,Ure),e(Ure,jKe),e(qn,DKe),e(qn,QS),e(QS,GKe),e(qn,OKe),e(qn,HS),e(HS,VKe),e(qn,XKe),e(k,zKe),e(k,Nn),e(Nn,Jre),e(Jre,WKe),e(Nn,QKe),e(Nn,US),e(US,HKe),e(Nn,UKe),e(Nn,JS),e(JS,JKe),e(Nn,YKe),e(k,KKe),e(k,Ag),e(Ag,Yre),e(Yre,ZKe),e(Ag,eZe),e(Ag,YS),e(YS,oZe),e(Ag,rZe),e(k,tZe),e(k,yg),e(yg,Kre),e(Kre,aZe),e(yg,nZe),e(yg,KS),e(KS,sZe),e(yg,lZe),e(k,iZe),e(k,jn),e(jn,Zre),e(Zre,dZe),e(jn,cZe),e(jn,ZS),e(ZS,mZe),e(jn,fZe),e(jn,eR),e(eR,gZe),e(jn,hZe),e(k,uZe),e(k,Lg),e(Lg,ete),e(ete,pZe),e(Lg,_Ze),e(Lg,oR),e(oR,bZe),e(Lg,vZe),e(k,FZe),e(k,Dn),e(Dn,ote),e(ote,TZe),e(Dn,MZe),e(Dn,rR),e(rR,EZe),e(Dn,CZe),e(Dn,tR),e(tR,wZe),e(Dn,AZe),e(k,yZe),e(k,Gn),e(Gn,rte),e(rte,LZe),e(Gn,xZe),e(Gn,aR),e(aR,$Ze),e(Gn,kZe),e(Gn,nR),e(nR,SZe),e(Gn,RZe),e(k,PZe),e(k,On),e(On,tte),e(tte,BZe),e(On,IZe),e(On,sR),e(sR,qZe),e(On,NZe),e(On,lR),e(lR,jZe),e(On,DZe),e(k,GZe),e(k,xg),e(xg,ate),e(ate,OZe),e(xg,VZe),e(xg,iR),e(iR,XZe),e(xg,zZe),e(k,WZe),e(k,Vn),e(Vn,nte),e(nte,QZe),e(Vn,HZe),e(Vn,dR),e(dR,UZe),e(Vn,JZe),e(Vn,cR),e(cR,YZe),e(Vn,KZe),e(k,ZZe),e(k,Xn),e(Xn,ste),e(ste,eeo),e(Xn,oeo),e(Xn,mR),e(mR,reo),e(Xn,teo),e(Xn,fR),e(fR,aeo),e(Xn,neo),e(k,seo),e(k,zn),e(zn,lte),e(lte,leo),e(zn,ieo),e(zn,gR),e(gR,deo),e(zn,ceo),e(zn,hR),e(hR,meo),e(zn,feo),e(k,geo),e(k,Wn),e(Wn,ite),e(ite,heo),e(Wn,ueo),e(Wn,uR),e(uR,peo),e(Wn,_eo),e(Wn,pR),e(pR,beo),e(Wn,veo),e(k,Feo),e(k,Qn),e(Qn,dte),e(dte,Teo),e(Qn,Meo),e(Qn,_R),e(_R,Eeo),e(Qn,Ceo),e(Qn,bR),e(bR,weo),e(Qn,Aeo),e(k,yeo),e(k,Hn),e(Hn,cte),e(cte,Leo),e(Hn,xeo),e(Hn,vR),e(vR,$eo),e(Hn,keo),e(Hn,FR),e(FR,Seo),e(Hn,Reo),e(k,Peo),e(k,$g),e($g,mte),e(mte,Beo),e($g,Ieo),e($g,TR),e(TR,qeo),e($g,Neo),e(k,jeo),e(k,Un),e(Un,fte),e(fte,Deo),e(Un,Geo),e(Un,MR),e(MR,Oeo),e(Un,Veo),e(Un,ER),e(ER,Xeo),e(Un,zeo),e(k,Weo),e(k,kg),e(kg,gte),e(gte,Qeo),e(kg,Heo),e(kg,CR),e(CR,Ueo),e(kg,Jeo),e(k,Yeo),e(k,Jn),e(Jn,hte),e(hte,Keo),e(Jn,Zeo),e(Jn,wR),e(wR,eoo),e(Jn,ooo),e(Jn,AR),e(AR,roo),e(Jn,too),e(k,aoo),e(k,Yn),e(Yn,ute),e(ute,noo),e(Yn,soo),e(Yn,yR),e(yR,loo),e(Yn,ioo),e(Yn,LR),e(LR,doo),e(Yn,coo),e(k,moo),e(k,Kn),e(Kn,pte),e(pte,foo),e(Kn,goo),e(Kn,xR),e(xR,hoo),e(Kn,uoo),e(Kn,$R),e($R,poo),e(Kn,_oo),e(k,boo),e(k,Zn),e(Zn,_te),e(_te,voo),e(Zn,Foo),e(Zn,kR),e(kR,Too),e(Zn,Moo),e(Zn,SR),e(SR,Eoo),e(Zn,Coo),e(k,woo),e(k,es),e(es,bte),e(bte,Aoo),e(es,yoo),e(es,RR),e(RR,Loo),e(es,xoo),e(es,PR),e(PR,$oo),e(es,koo),e(k,Soo),e(k,Sg),e(Sg,vte),e(vte,Roo),e(Sg,Poo),e(Sg,BR),e(BR,Boo),e(Sg,Ioo),e(k,qoo),e(k,os),e(os,Fte),e(Fte,Noo),e(os,joo),e(os,IR),e(IR,Doo),e(os,Goo),e(os,qR),e(qR,Ooo),e(os,Voo),e(k,Xoo),e(k,rs),e(rs,Tte),e(Tte,zoo),e(rs,Woo),e(rs,NR),e(NR,Qoo),e(rs,Hoo),e(rs,jR),e(jR,Uoo),e(rs,Joo),e(k,Yoo),e(k,ts),e(ts,Mte),e(Mte,Koo),e(ts,Zoo),e(ts,DR),e(DR,ero),e(ts,oro),e(ts,GR),e(GR,rro),e(ts,tro),e(k,aro),e(k,as),e(as,Ete),e(Ete,nro),e(as,sro),e(as,OR),e(OR,lro),e(as,iro),e(as,VR),e(VR,dro),e(as,cro),e(k,mro),e(k,ns),e(ns,Cte),e(Cte,fro),e(ns,gro),e(ns,XR),e(XR,hro),e(ns,uro),e(ns,zR),e(zR,pro),e(ns,_ro),e(k,bro),e(k,ss),e(ss,wte),e(wte,vro),e(ss,Fro),e(ss,WR),e(WR,Tro),e(ss,Mro),e(ss,QR),e(QR,Ero),e(ss,Cro),e(k,wro),e(k,Rg),e(Rg,Ate),e(Ate,Aro),e(Rg,yro),e(Rg,HR),e(HR,Lro),e(Rg,xro),e(k,$ro),e(k,ls),e(ls,yte),e(yte,kro),e(ls,Sro),e(ls,UR),e(UR,Rro),e(ls,Pro),e(ls,JR),e(JR,Bro),e(ls,Iro),e(k,qro),e(k,Pg),e(Pg,Lte),e(Lte,Nro),e(Pg,jro),e(Pg,YR),e(YR,Dro),e(Pg,Gro),e(k,Oro),e(k,Bg),e(Bg,xte),e(xte,Vro),e(Bg,Xro),e(Bg,KR),e(KR,zro),e(Bg,Wro),e(k,Qro),e(k,is),e(is,$te),e($te,Hro),e(is,Uro),e(is,ZR),e(ZR,Jro),e(is,Yro),e(is,eP),e(eP,Kro),e(is,Zro),e(k,eto),e(k,ds),e(ds,kte),e(kte,oto),e(ds,rto),e(ds,oP),e(oP,tto),e(ds,ato),e(ds,rP),e(rP,nto),e(ds,sto),e(k,lto),e(k,cs),e(cs,Ste),e(Ste,ito),e(cs,dto),e(cs,tP),e(tP,cto),e(cs,mto),e(cs,aP),e(aP,fto),e(cs,gto),e(k,hto),e(k,Ig),e(Ig,Rte),e(Rte,uto),e(Ig,pto),e(Ig,nP),e(nP,_to),e(Ig,bto),e(k,vto),e(k,ms),e(ms,Pte),e(Pte,Fto),e(ms,Tto),e(ms,sP),e(sP,Mto),e(ms,Eto),e(ms,lP),e(lP,Cto),e(ms,wto),e(k,Ato),e(k,fs),e(fs,Bte),e(Bte,yto),e(fs,Lto),e(fs,iP),e(iP,xto),e(fs,$to),e(fs,dP),e(dP,kto),e(fs,Sto),e(k,Rto),e(k,gs),e(gs,Ite),e(Ite,Pto),e(gs,Bto),e(gs,cP),e(cP,Ito),e(gs,qto),e(gs,mP),e(mP,Nto),e(gs,jto),e(k,Dto),e(k,hs),e(hs,qte),e(qte,Gto),e(hs,Oto),e(hs,fP),e(fP,Vto),e(hs,Xto),e(hs,gP),e(gP,zto),e(hs,Wto),e(k,Qto),e(k,us),e(us,Nte),e(Nte,Hto),e(us,Uto),e(us,hP),e(hP,Jto),e(us,Yto),e(us,uP),e(uP,Kto),e(us,Zto),e(k,eao),e(k,qg),e(qg,jte),e(jte,oao),e(qg,rao),e(qg,pP),e(pP,tao),e(qg,aao),e(k,nao),e(k,ps),e(ps,Dte),e(Dte,sao),e(ps,lao),e(ps,_P),e(_P,iao),e(ps,dao),e(ps,bP),e(bP,cao),e(ps,mao),e(k,fao),e(k,Ng),e(Ng,Gte),e(Gte,gao),e(Ng,hao),e(Ng,vP),e(vP,uao),e(Ng,pao),e(k,_ao),e(k,jg),e(jg,Ote),e(Ote,bao),e(jg,vao),e(jg,FP),e(FP,Fao),e(jg,Tao),e(k,Mao),e(k,Dg),e(Dg,Vte),e(Vte,Eao),e(Dg,Cao),e(Dg,TP),e(TP,wao),e(Dg,Aao),e(k,yao),e(k,Gg),e(Gg,Xte),e(Xte,Lao),e(Gg,xao),e(Gg,MP),e(MP,$ao),e(Gg,kao),e(k,Sao),e(k,_s),e(_s,zte),e(zte,Rao),e(_s,Pao),e(_s,EP),e(EP,Bao),e(_s,Iao),e(_s,CP),e(CP,qao),e(_s,Nao),e(k,jao),e(k,Og),e(Og,Wte),e(Wte,Dao),e(Og,Gao),e(Og,wP),e(wP,Oao),e(Og,Vao),e(k,Xao),e(k,bs),e(bs,Qte),e(Qte,zao),e(bs,Wao),e(bs,AP),e(AP,Qao),e(bs,Hao),e(bs,yP),e(yP,Uao),e(bs,Jao),e(k,Yao),e(k,vs),e(vs,Hte),e(Hte,Kao),e(vs,Zao),e(vs,LP),e(LP,eno),e(vs,ono),e(vs,xP),e(xP,rno),e(vs,tno),e(k,ano),e(k,Fs),e(Fs,Ute),e(Ute,nno),e(Fs,sno),e(Fs,$P),e($P,lno),e(Fs,ino),e(Fs,kP),e(kP,dno),e(Fs,cno),e(k,mno),e(k,Ts),e(Ts,Jte),e(Jte,fno),e(Ts,gno),e(Ts,SP),e(SP,hno),e(Ts,uno),e(Ts,RP),e(RP,pno),e(Ts,_no),e(k,bno),e(k,Ms),e(Ms,Yte),e(Yte,vno),e(Ms,Fno),e(Ms,PP),e(PP,Tno),e(Ms,Mno),e(Ms,BP),e(BP,Eno),e(Ms,Cno),e(k,wno),e(k,Es),e(Es,Kte),e(Kte,Ano),e(Es,yno),e(Es,IP),e(IP,Lno),e(Es,xno),e(Es,qP),e(qP,$no),e(Es,kno),e(k,Sno),e(k,Vg),e(Vg,Zte),e(Zte,Rno),e(Vg,Pno),e(Vg,NP),e(NP,Bno),e(Vg,Ino),e(k,qno),e(k,Xg),e(Xg,eae),e(eae,Nno),e(Xg,jno),e(Xg,jP),e(jP,Dno),e(Xg,Gno),e(k,Ono),e(k,Cs),e(Cs,oae),e(oae,Vno),e(Cs,Xno),e(Cs,DP),e(DP,zno),e(Cs,Wno),e(Cs,GP),e(GP,Qno),e(Cs,Hno),e(k,Uno),e(k,ws),e(ws,rae),e(rae,Jno),e(ws,Yno),e(ws,OP),e(OP,Kno),e(ws,Zno),e(ws,VP),e(VP,eso),e(ws,oso),e(k,rso),e(k,As),e(As,tae),e(tae,tso),e(As,aso),e(As,XP),e(XP,nso),e(As,sso),e(As,zP),e(zP,lso),e(As,iso),e(k,dso),e(k,zg),e(zg,aae),e(aae,cso),e(zg,mso),e(zg,WP),e(WP,fso),e(zg,gso),e(k,hso),e(k,Wg),e(Wg,nae),e(nae,uso),e(Wg,pso),e(Wg,QP),e(QP,_so),e(Wg,bso),e(k,vso),e(k,Qg),e(Qg,sae),e(sae,Fso),e(Qg,Tso),e(Qg,HP),e(HP,Mso),e(Qg,Eso),e(k,Cso),e(k,ys),e(ys,lae),e(lae,wso),e(ys,Aso),e(ys,UP),e(UP,yso),e(ys,Lso),e(ys,JP),e(JP,xso),e(ys,$so),e(k,kso),e(k,Hg),e(Hg,iae),e(iae,Sso),e(Hg,Rso),e(Hg,YP),e(YP,Pso),e(Hg,Bso),e(k,Iso),e(k,Ug),e(Ug,dae),e(dae,qso),e(Ug,Nso),e(Ug,KP),e(KP,jso),e(Ug,Dso),e(k,Gso),e(k,Jg),e(Jg,cae),e(cae,Oso),e(Jg,Vso),e(Jg,ZP),e(ZP,Xso),e(Jg,zso),e(k,Wso),e(k,Ls),e(Ls,mae),e(mae,Qso),e(Ls,Hso),e(Ls,eB),e(eB,Uso),e(Ls,Jso),e(Ls,oB),e(oB,Yso),e(Ls,Kso),e(k,Zso),e(k,Yg),e(Yg,fae),e(fae,elo),e(Yg,olo),e(Yg,rB),e(rB,rlo),e(Yg,tlo),e(k,alo),e(k,Kg),e(Kg,gae),e(gae,nlo),e(Kg,slo),e(Kg,tB),e(tB,llo),e(Kg,ilo),e(k,dlo),e(k,xs),e(xs,hae),e(hae,clo),e(xs,mlo),e(xs,aB),e(aB,flo),e(xs,glo),e(xs,nB),e(nB,hlo),e(xs,ulo),e(k,plo),e(k,$s),e($s,uae),e(uae,_lo),e($s,blo),e($s,sB),e(sB,vlo),e($s,Flo),e($s,lB),e(lB,Tlo),e($s,Mlo),e(k,Elo),e(k,ks),e(ks,pae),e(pae,Clo),e(ks,wlo),e(ks,iB),e(iB,Alo),e(ks,ylo),e(ks,dB),e(dB,Llo),e(ks,xlo),e(k,$lo),e(k,Ss),e(Ss,_ae),e(_ae,klo),e(Ss,Slo),e(Ss,cB),e(cB,Rlo),e(Ss,Plo),e(Ss,mB),e(mB,Blo),e(Ss,Ilo),e(Cr,qlo),M(Zg,Cr,null),e(wo,Nlo),e(wo,eh),M(Ey,eh,null),e(eh,jlo),e(eh,bae),e(bae,Dlo),b(m,WIe,_),b(m,Ti,_),e(Ti,oh),e(oh,vae),M(Cy,vae,null),e(Ti,Glo),e(Ti,Fae),e(Fae,Olo),b(m,QIe,_),b(m,Ao,_),M(wy,Ao,null),e(Ao,Vlo),e(Ao,Ay),e(Ay,Xlo),e(Ay,fB),e(fB,zlo),e(Ay,Wlo),e(Ao,Qlo),e(Ao,yy),e(yy,Hlo),e(yy,Tae),e(Tae,Ulo),e(yy,Jlo),e(Ao,Ylo),e(Ao,He),M(Ly,He,null),e(He,Klo),e(He,Mae),e(Mae,Zlo),e(He,eio),e(He,ya),e(ya,oio),e(ya,Eae),e(Eae,rio),e(ya,tio),e(ya,Cae),e(Cae,aio),e(ya,nio),e(ya,wae),e(wae,sio),e(ya,lio),e(He,iio),e(He,Z),e(Z,rh),e(rh,Aae),e(Aae,dio),e(rh,cio),e(rh,gB),e(gB,mio),e(rh,fio),e(Z,gio),e(Z,th),e(th,yae),e(yae,hio),e(th,uio),e(th,hB),e(hB,pio),e(th,_io),e(Z,bio),e(Z,ah),e(ah,Lae),e(Lae,vio),e(ah,Fio),e(ah,uB),e(uB,Tio),e(ah,Mio),e(Z,Eio),e(Z,nh),e(nh,xae),e(xae,Cio),e(nh,wio),e(nh,pB),e(pB,Aio),e(nh,yio),e(Z,Lio),e(Z,sh),e(sh,$ae),e($ae,xio),e(sh,$io),e(sh,_B),e(_B,kio),e(sh,Sio),e(Z,Rio),e(Z,lh),e(lh,kae),e(kae,Pio),e(lh,Bio),e(lh,bB),e(bB,Iio),e(lh,qio),e(Z,Nio),e(Z,ih),e(ih,Sae),e(Sae,jio),e(ih,Dio),e(ih,vB),e(vB,Gio),e(ih,Oio),e(Z,Vio),e(Z,dh),e(dh,Rae),e(Rae,Xio),e(dh,zio),e(dh,FB),e(FB,Wio),e(dh,Qio),e(Z,Hio),e(Z,ch),e(ch,Pae),e(Pae,Uio),e(ch,Jio),e(ch,TB),e(TB,Yio),e(ch,Kio),e(Z,Zio),e(Z,mh),e(mh,Bae),e(Bae,edo),e(mh,odo),e(mh,MB),e(MB,rdo),e(mh,tdo),e(Z,ado),e(Z,fh),e(fh,Iae),e(Iae,ndo),e(fh,sdo),e(fh,EB),e(EB,ldo),e(fh,ido),e(Z,ddo),e(Z,gh),e(gh,qae),e(qae,cdo),e(gh,mdo),e(gh,CB),e(CB,fdo),e(gh,gdo),e(Z,hdo),e(Z,hh),e(hh,Nae),e(Nae,udo),e(hh,pdo),e(hh,wB),e(wB,_do),e(hh,bdo),e(Z,vdo),e(Z,uh),e(uh,jae),e(jae,Fdo),e(uh,Tdo),e(uh,AB),e(AB,Mdo),e(uh,Edo),e(Z,Cdo),e(Z,ph),e(ph,Dae),e(Dae,wdo),e(ph,Ado),e(ph,yB),e(yB,ydo),e(ph,Ldo),e(Z,xdo),e(Z,_h),e(_h,Gae),e(Gae,$do),e(_h,kdo),e(_h,LB),e(LB,Sdo),e(_h,Rdo),e(Z,Pdo),e(Z,bh),e(bh,Oae),e(Oae,Bdo),e(bh,Ido),e(bh,xB),e(xB,qdo),e(bh,Ndo),e(Z,jdo),e(Z,vh),e(vh,Vae),e(Vae,Ddo),e(vh,Gdo),e(vh,$B),e($B,Odo),e(vh,Vdo),e(Z,Xdo),e(Z,Fh),e(Fh,Xae),e(Xae,zdo),e(Fh,Wdo),e(Fh,kB),e(kB,Qdo),e(Fh,Hdo),e(Z,Udo),e(Z,Th),e(Th,zae),e(zae,Jdo),e(Th,Ydo),e(Th,SB),e(SB,Kdo),e(Th,Zdo),e(Z,eco),e(Z,Mh),e(Mh,Wae),e(Wae,oco),e(Mh,rco),e(Mh,RB),e(RB,tco),e(Mh,aco),e(Z,nco),e(Z,Eh),e(Eh,Qae),e(Qae,sco),e(Eh,lco),e(Eh,PB),e(PB,ico),e(Eh,dco),e(Z,cco),e(Z,Ch),e(Ch,Hae),e(Hae,mco),e(Ch,fco),e(Ch,BB),e(BB,gco),e(Ch,hco),e(Z,uco),e(Z,wh),e(wh,Uae),e(Uae,pco),e(wh,_co),e(wh,IB),e(IB,bco),e(wh,vco),e(Z,Fco),e(Z,Ah),e(Ah,Jae),e(Jae,Tco),e(Ah,Mco),e(Ah,qB),e(qB,Eco),e(Ah,Cco),e(Z,wco),e(Z,yh),e(yh,Yae),e(Yae,Aco),e(yh,yco),e(yh,NB),e(NB,Lco),e(yh,xco),e(He,$co),M(Lh,He,null),e(He,kco),M(xh,He,null),e(Ao,Sco),e(Ao,$h),M(xy,$h,null),e($h,Rco),e($h,Kae),e(Kae,Pco),b(m,HIe,_),b(m,Mi,_),e(Mi,kh),e(kh,Zae),M($y,Zae,null),e(Mi,Bco),e(Mi,ene),e(ene,Ico),b(m,UIe,_),b(m,yo,_),M(ky,yo,null),e(yo,qco),e(yo,Sy),e(Sy,Nco),e(Sy,jB),e(jB,jco),e(Sy,Dco),e(yo,Gco),e(yo,Ry),e(Ry,Oco),e(Ry,one),e(one,Vco),e(Ry,Xco),e(yo,zco),e(yo,Ue),M(Py,Ue,null),e(Ue,Wco),e(Ue,rne),e(rne,Qco),e(Ue,Hco),e(Ue,Ei),e(Ei,Uco),e(Ei,tne),e(tne,Jco),e(Ei,Yco),e(Ei,ane),e(ane,Kco),e(Ei,Zco),e(Ue,emo),e(Ue,ue),e(ue,Sh),e(Sh,nne),e(nne,omo),e(Sh,rmo),e(Sh,DB),e(DB,tmo),e(Sh,amo),e(ue,nmo),e(ue,Rh),e(Rh,sne),e(sne,smo),e(Rh,lmo),e(Rh,lne),e(lne,imo),e(Rh,dmo),e(ue,cmo),e(ue,Ph),e(Ph,ine),e(ine,mmo),e(Ph,fmo),e(Ph,GB),e(GB,gmo),e(Ph,hmo),e(ue,umo),e(ue,Bh),e(Bh,dne),e(dne,pmo),e(Bh,_mo),e(Bh,OB),e(OB,bmo),e(Bh,vmo),e(ue,Fmo),e(ue,Ih),e(Ih,cne),e(cne,Tmo),e(Ih,Mmo),e(Ih,VB),e(VB,Emo),e(Ih,Cmo),e(ue,wmo),e(ue,qh),e(qh,mne),e(mne,Amo),e(qh,ymo),e(qh,XB),e(XB,Lmo),e(qh,xmo),e(ue,$mo),e(ue,Nh),e(Nh,fne),e(fne,kmo),e(Nh,Smo),e(Nh,zB),e(zB,Rmo),e(Nh,Pmo),e(ue,Bmo),e(ue,jh),e(jh,gne),e(gne,Imo),e(jh,qmo),e(jh,WB),e(WB,Nmo),e(jh,jmo),e(ue,Dmo),e(ue,Dh),e(Dh,hne),e(hne,Gmo),e(Dh,Omo),e(Dh,QB),e(QB,Vmo),e(Dh,Xmo),e(ue,zmo),e(ue,Gh),e(Gh,une),e(une,Wmo),e(Gh,Qmo),e(Gh,HB),e(HB,Hmo),e(Gh,Umo),e(ue,Jmo),e(ue,Oh),e(Oh,pne),e(pne,Ymo),e(Oh,Kmo),e(Oh,UB),e(UB,Zmo),e(Oh,efo),e(ue,ofo),e(ue,Vh),e(Vh,_ne),e(_ne,rfo),e(Vh,tfo),e(Vh,JB),e(JB,afo),e(Vh,nfo),e(ue,sfo),e(ue,Xh),e(Xh,bne),e(bne,lfo),e(Xh,ifo),e(Xh,YB),e(YB,dfo),e(Xh,cfo),e(ue,mfo),e(ue,zh),e(zh,vne),e(vne,ffo),e(zh,gfo),e(zh,KB),e(KB,hfo),e(zh,ufo),e(ue,pfo),e(ue,Wh),e(Wh,Fne),e(Fne,_fo),e(Wh,bfo),e(Wh,ZB),e(ZB,vfo),e(Wh,Ffo),e(ue,Tfo),e(ue,Qh),e(Qh,Tne),e(Tne,Mfo),e(Qh,Efo),e(Qh,eI),e(eI,Cfo),e(Qh,wfo),e(Ue,Afo),M(Hh,Ue,null),e(Ue,yfo),M(Uh,Ue,null),e(yo,Lfo),e(yo,Jh),M(By,Jh,null),e(Jh,xfo),e(Jh,Mne),e(Mne,$fo),b(m,JIe,_),b(m,Ci,_),e(Ci,Yh),e(Yh,Ene),M(Iy,Ene,null),e(Ci,kfo),e(Ci,Cne),e(Cne,Sfo),b(m,YIe,_),b(m,Lo,_),M(qy,Lo,null),e(Lo,Rfo),e(Lo,wi),e(wi,Pfo),e(wi,oI),e(oI,Bfo),e(wi,Ifo),e(wi,rI),e(rI,qfo),e(wi,Nfo),e(Lo,jfo),e(Lo,Ny),e(Ny,Dfo),e(Ny,wne),e(wne,Gfo),e(Ny,Ofo),e(Lo,Vfo),e(Lo,tt),M(jy,tt,null),e(tt,Xfo),e(tt,Ane),e(Ane,zfo),e(tt,Wfo),e(tt,Ai),e(Ai,Qfo),e(Ai,yne),e(yne,Hfo),e(Ai,Ufo),e(Ai,tI),e(tI,Jfo),e(Ai,Yfo),e(tt,Kfo),M(Kh,tt,null),e(Lo,Zfo),e(Lo,Je),M(Dy,Je,null),e(Je,ego),e(Je,Lne),e(Lne,ogo),e(Je,rgo),e(Je,La),e(La,tgo),e(La,xne),e(xne,ago),e(La,ngo),e(La,$ne),e($ne,sgo),e(La,lgo),e(La,kne),e(kne,igo),e(La,dgo),e(Je,cgo),e(Je,x),e(x,Zh),e(Zh,Sne),e(Sne,mgo),e(Zh,fgo),e(Zh,aI),e(aI,ggo),e(Zh,hgo),e(x,ugo),e(x,eu),e(eu,Rne),e(Rne,pgo),e(eu,_go),e(eu,nI),e(nI,bgo),e(eu,vgo),e(x,Fgo),e(x,ou),e(ou,Pne),e(Pne,Tgo),e(ou,Mgo),e(ou,sI),e(sI,Ego),e(ou,Cgo),e(x,wgo),e(x,ru),e(ru,Bne),e(Bne,Ago),e(ru,ygo),e(ru,lI),e(lI,Lgo),e(ru,xgo),e(x,$go),e(x,tu),e(tu,Ine),e(Ine,kgo),e(tu,Sgo),e(tu,iI),e(iI,Rgo),e(tu,Pgo),e(x,Bgo),e(x,au),e(au,qne),e(qne,Igo),e(au,qgo),e(au,dI),e(dI,Ngo),e(au,jgo),e(x,Dgo),e(x,nu),e(nu,Nne),e(Nne,Ggo),e(nu,Ogo),e(nu,cI),e(cI,Vgo),e(nu,Xgo),e(x,zgo),e(x,su),e(su,jne),e(jne,Wgo),e(su,Qgo),e(su,mI),e(mI,Hgo),e(su,Ugo),e(x,Jgo),e(x,lu),e(lu,Dne),e(Dne,Ygo),e(lu,Kgo),e(lu,fI),e(fI,Zgo),e(lu,eho),e(x,oho),e(x,iu),e(iu,Gne),e(Gne,rho),e(iu,tho),e(iu,gI),e(gI,aho),e(iu,nho),e(x,sho),e(x,du),e(du,One),e(One,lho),e(du,iho),e(du,hI),e(hI,dho),e(du,cho),e(x,mho),e(x,cu),e(cu,Vne),e(Vne,fho),e(cu,gho),e(cu,uI),e(uI,hho),e(cu,uho),e(x,pho),e(x,mu),e(mu,Xne),e(Xne,_ho),e(mu,bho),e(mu,pI),e(pI,vho),e(mu,Fho),e(x,Tho),e(x,fu),e(fu,zne),e(zne,Mho),e(fu,Eho),e(fu,_I),e(_I,Cho),e(fu,who),e(x,Aho),e(x,gu),e(gu,Wne),e(Wne,yho),e(gu,Lho),e(gu,bI),e(bI,xho),e(gu,$ho),e(x,kho),e(x,hu),e(hu,Qne),e(Qne,Sho),e(hu,Rho),e(hu,vI),e(vI,Pho),e(hu,Bho),e(x,Iho),e(x,uu),e(uu,Hne),e(Hne,qho),e(uu,Nho),e(uu,FI),e(FI,jho),e(uu,Dho),e(x,Gho),e(x,pu),e(pu,Une),e(Une,Oho),e(pu,Vho),e(pu,TI),e(TI,Xho),e(pu,zho),e(x,Who),e(x,_u),e(_u,Jne),e(Jne,Qho),e(_u,Hho),e(_u,MI),e(MI,Uho),e(_u,Jho),e(x,Yho),e(x,bu),e(bu,Yne),e(Yne,Kho),e(bu,Zho),e(bu,EI),e(EI,euo),e(bu,ouo),e(x,ruo),e(x,vu),e(vu,Kne),e(Kne,tuo),e(vu,auo),e(vu,CI),e(CI,nuo),e(vu,suo),e(x,luo),e(x,Fu),e(Fu,Zne),e(Zne,iuo),e(Fu,duo),e(Fu,wI),e(wI,cuo),e(Fu,muo),e(x,fuo),e(x,Tu),e(Tu,ese),e(ese,guo),e(Tu,huo),e(Tu,AI),e(AI,uuo),e(Tu,puo),e(x,_uo),e(x,Mu),e(Mu,ose),e(ose,buo),e(Mu,vuo),e(Mu,yI),e(yI,Fuo),e(Mu,Tuo),e(x,Muo),e(x,Eu),e(Eu,rse),e(rse,Euo),e(Eu,Cuo),e(Eu,LI),e(LI,wuo),e(Eu,Auo),e(x,yuo),e(x,Cu),e(Cu,tse),e(tse,Luo),e(Cu,xuo),e(Cu,xI),e(xI,$uo),e(Cu,kuo),e(x,Suo),e(x,wu),e(wu,ase),e(ase,Ruo),e(wu,Puo),e(wu,$I),e($I,Buo),e(wu,Iuo),e(x,quo),e(x,Au),e(Au,nse),e(nse,Nuo),e(Au,juo),e(Au,kI),e(kI,Duo),e(Au,Guo),e(x,Ouo),e(x,yu),e(yu,sse),e(sse,Vuo),e(yu,Xuo),e(yu,SI),e(SI,zuo),e(yu,Wuo),e(x,Quo),e(x,Lu),e(Lu,lse),e(lse,Huo),e(Lu,Uuo),e(Lu,RI),e(RI,Juo),e(Lu,Yuo),e(x,Kuo),e(x,xu),e(xu,ise),e(ise,Zuo),e(xu,epo),e(xu,PI),e(PI,opo),e(xu,rpo),e(x,tpo),e(x,Rs),e(Rs,dse),e(dse,apo),e(Rs,npo),e(Rs,BI),e(BI,spo),e(Rs,lpo),e(Rs,II),e(II,ipo),e(Rs,dpo),e(x,cpo),e(x,$u),e($u,cse),e(cse,mpo),e($u,fpo),e($u,qI),e(qI,gpo),e($u,hpo),e(x,upo),e(x,ku),e(ku,mse),e(mse,ppo),e(ku,_po),e(ku,NI),e(NI,bpo),e(ku,vpo),e(x,Fpo),e(x,Su),e(Su,fse),e(fse,Tpo),e(Su,Mpo),e(Su,jI),e(jI,Epo),e(Su,Cpo),e(x,wpo),e(x,Ru),e(Ru,gse),e(gse,Apo),e(Ru,ypo),e(Ru,DI),e(DI,Lpo),e(Ru,xpo),e(x,$po),e(x,Pu),e(Pu,hse),e(hse,kpo),e(Pu,Spo),e(Pu,GI),e(GI,Rpo),e(Pu,Ppo),e(x,Bpo),e(x,Bu),e(Bu,use),e(use,Ipo),e(Bu,qpo),e(Bu,OI),e(OI,Npo),e(Bu,jpo),e(x,Dpo),e(x,Iu),e(Iu,pse),e(pse,Gpo),e(Iu,Opo),e(Iu,VI),e(VI,Vpo),e(Iu,Xpo),e(x,zpo),e(x,qu),e(qu,_se),e(_se,Wpo),e(qu,Qpo),e(qu,XI),e(XI,Hpo),e(qu,Upo),e(x,Jpo),e(x,Nu),e(Nu,bse),e(bse,Ypo),e(Nu,Kpo),e(Nu,zI),e(zI,Zpo),e(Nu,e_o),e(x,o_o),e(x,ju),e(ju,vse),e(vse,r_o),e(ju,t_o),e(ju,WI),e(WI,a_o),e(ju,n_o),e(x,s_o),e(x,Du),e(Du,Fse),e(Fse,l_o),e(Du,i_o),e(Du,QI),e(QI,d_o),e(Du,c_o),e(x,m_o),e(x,Gu),e(Gu,Tse),e(Tse,f_o),e(Gu,g_o),e(Gu,HI),e(HI,h_o),e(Gu,u_o),e(x,p_o),e(x,Ou),e(Ou,Mse),e(Mse,__o),e(Ou,b_o),e(Ou,UI),e(UI,v_o),e(Ou,F_o),e(x,T_o),e(x,Vu),e(Vu,Ese),e(Ese,M_o),e(Vu,E_o),e(Vu,JI),e(JI,C_o),e(Vu,w_o),e(x,A_o),e(x,Xu),e(Xu,Cse),e(Cse,y_o),e(Xu,L_o),e(Xu,YI),e(YI,x_o),e(Xu,$_o),e(x,k_o),e(x,zu),e(zu,wse),e(wse,S_o),e(zu,R_o),e(zu,KI),e(KI,P_o),e(zu,B_o),e(x,I_o),e(x,Wu),e(Wu,Ase),e(Ase,q_o),e(Wu,N_o),e(Wu,ZI),e(ZI,j_o),e(Wu,D_o),e(x,G_o),e(x,Qu),e(Qu,yse),e(yse,O_o),e(Qu,V_o),e(Qu,eq),e(eq,X_o),e(Qu,z_o),e(x,W_o),e(x,Hu),e(Hu,Lse),e(Lse,Q_o),e(Hu,H_o),e(Hu,oq),e(oq,U_o),e(Hu,J_o),e(x,Y_o),e(x,Uu),e(Uu,xse),e(xse,K_o),e(Uu,Z_o),e(Uu,rq),e(rq,ebo),e(Uu,obo),e(x,rbo),e(x,Ju),e(Ju,$se),e($se,tbo),e(Ju,abo),e(Ju,tq),e(tq,nbo),e(Ju,sbo),e(x,lbo),e(x,Yu),e(Yu,kse),e(kse,ibo),e(Yu,dbo),e(Yu,aq),e(aq,cbo),e(Yu,mbo),e(x,fbo),e(x,Ku),e(Ku,Sse),e(Sse,gbo),e(Ku,hbo),e(Ku,nq),e(nq,ubo),e(Ku,pbo),e(x,_bo),e(x,Zu),e(Zu,Rse),e(Rse,bbo),e(Zu,vbo),e(Zu,sq),e(sq,Fbo),e(Zu,Tbo),e(x,Mbo),e(x,ep),e(ep,Pse),e(Pse,Ebo),e(ep,Cbo),e(ep,lq),e(lq,wbo),e(ep,Abo),e(x,ybo),e(x,op),e(op,Bse),e(Bse,Lbo),e(op,xbo),e(op,iq),e(iq,$bo),e(op,kbo),e(x,Sbo),e(x,rp),e(rp,Ise),e(Ise,Rbo),e(rp,Pbo),e(rp,dq),e(dq,Bbo),e(rp,Ibo),e(x,qbo),e(x,tp),e(tp,qse),e(qse,Nbo),e(tp,jbo),e(tp,cq),e(cq,Dbo),e(tp,Gbo),e(x,Obo),e(x,ap),e(ap,Nse),e(Nse,Vbo),e(ap,Xbo),e(ap,mq),e(mq,zbo),e(ap,Wbo),e(x,Qbo),e(x,np),e(np,jse),e(jse,Hbo),e(np,Ubo),e(np,fq),e(fq,Jbo),e(np,Ybo),e(x,Kbo),e(x,sp),e(sp,Dse),e(Dse,Zbo),e(sp,e2o),e(sp,gq),e(gq,o2o),e(sp,r2o),e(x,t2o),e(x,lp),e(lp,Gse),e(Gse,a2o),e(lp,n2o),e(lp,hq),e(hq,s2o),e(lp,l2o),e(x,i2o),e(x,ip),e(ip,Ose),e(Ose,d2o),e(ip,c2o),e(ip,uq),e(uq,m2o),e(ip,f2o),e(x,g2o),e(x,dp),e(dp,Vse),e(Vse,h2o),e(dp,u2o),e(dp,pq),e(pq,p2o),e(dp,_2o),e(x,b2o),e(x,cp),e(cp,Xse),e(Xse,v2o),e(cp,F2o),e(cp,_q),e(_q,T2o),e(cp,M2o),e(x,E2o),e(x,mp),e(mp,zse),e(zse,C2o),e(mp,w2o),e(mp,bq),e(bq,A2o),e(mp,y2o),e(x,L2o),e(x,fp),e(fp,Wse),e(Wse,x2o),e(fp,$2o),e(fp,vq),e(vq,k2o),e(fp,S2o),e(x,R2o),e(x,gp),e(gp,Qse),e(Qse,P2o),e(gp,B2o),e(gp,Fq),e(Fq,I2o),e(gp,q2o),e(x,N2o),e(x,hp),e(hp,Hse),e(Hse,j2o),e(hp,D2o),e(hp,Tq),e(Tq,G2o),e(hp,O2o),e(x,V2o),e(x,up),e(up,Use),e(Use,X2o),e(up,z2o),e(up,Mq),e(Mq,W2o),e(up,Q2o),e(x,H2o),e(x,pp),e(pp,Jse),e(Jse,U2o),e(pp,J2o),e(pp,Eq),e(Eq,Y2o),e(pp,K2o),e(x,Z2o),e(x,_p),e(_p,Yse),e(Yse,evo),e(_p,ovo),e(_p,Cq),e(Cq,rvo),e(_p,tvo),e(x,avo),e(x,bp),e(bp,Kse),e(Kse,nvo),e(bp,svo),e(bp,wq),e(wq,lvo),e(bp,ivo),e(x,dvo),e(x,vp),e(vp,Zse),e(Zse,cvo),e(vp,mvo),e(vp,Aq),e(Aq,fvo),e(vp,gvo),e(x,hvo),e(x,Fp),e(Fp,ele),e(ele,uvo),e(Fp,pvo),e(Fp,yq),e(yq,_vo),e(Fp,bvo),e(x,vvo),e(x,Tp),e(Tp,ole),e(ole,Fvo),e(Tp,Tvo),e(Tp,Lq),e(Lq,Mvo),e(Tp,Evo),e(x,Cvo),e(x,Mp),e(Mp,rle),e(rle,wvo),e(Mp,Avo),e(Mp,xq),e(xq,yvo),e(Mp,Lvo),e(x,xvo),e(x,Ep),e(Ep,tle),e(tle,$vo),e(Ep,kvo),e(Ep,$q),e($q,Svo),e(Ep,Rvo),e(x,Pvo),e(x,Cp),e(Cp,ale),e(ale,Bvo),e(Cp,Ivo),e(Cp,kq),e(kq,qvo),e(Cp,Nvo),e(x,jvo),e(x,wp),e(wp,nle),e(nle,Dvo),e(wp,Gvo),e(wp,Sq),e(Sq,Ovo),e(wp,Vvo),e(x,Xvo),e(x,Ap),e(Ap,sle),e(sle,zvo),e(Ap,Wvo),e(Ap,Rq),e(Rq,Qvo),e(Ap,Hvo),e(x,Uvo),e(x,yp),e(yp,lle),e(lle,Jvo),e(yp,Yvo),e(yp,Pq),e(Pq,Kvo),e(yp,Zvo),e(x,eFo),e(x,Lp),e(Lp,ile),e(ile,oFo),e(Lp,rFo),e(Lp,Bq),e(Bq,tFo),e(Lp,aFo),e(x,nFo),e(x,xp),e(xp,dle),e(dle,sFo),e(xp,lFo),e(xp,Iq),e(Iq,iFo),e(xp,dFo),e(x,cFo),e(x,$p),e($p,cle),e(cle,mFo),e($p,fFo),e($p,qq),e(qq,gFo),e($p,hFo),e(x,uFo),e(x,kp),e(kp,mle),e(mle,pFo),e(kp,_Fo),e(kp,Nq),e(Nq,bFo),e(kp,vFo),e(x,FFo),e(x,Sp),e(Sp,fle),e(fle,TFo),e(Sp,MFo),e(Sp,jq),e(jq,EFo),e(Sp,CFo),e(x,wFo),e(x,Rp),e(Rp,gle),e(gle,AFo),e(Rp,yFo),e(Rp,Dq),e(Dq,LFo),e(Rp,xFo),e(x,$Fo),e(x,Pp),e(Pp,hle),e(hle,kFo),e(Pp,SFo),e(Pp,Gq),e(Gq,RFo),e(Pp,PFo),e(x,BFo),e(x,Bp),e(Bp,ule),e(ule,IFo),e(Bp,qFo),e(Bp,Oq),e(Oq,NFo),e(Bp,jFo),e(x,DFo),e(x,Ip),e(Ip,ple),e(ple,GFo),e(Ip,OFo),e(Ip,Vq),e(Vq,VFo),e(Ip,XFo),e(x,zFo),e(x,qp),e(qp,_le),e(_le,WFo),e(qp,QFo),e(qp,Xq),e(Xq,HFo),e(qp,UFo),e(x,JFo),e(x,Np),e(Np,ble),e(ble,YFo),e(Np,KFo),e(Np,zq),e(zq,ZFo),e(Np,e1o),e(x,o1o),e(x,jp),e(jp,vle),e(vle,r1o),e(jp,t1o),e(jp,Wq),e(Wq,a1o),e(jp,n1o),e(x,s1o),e(x,Dp),e(Dp,Fle),e(Fle,l1o),e(Dp,i1o),e(Dp,Qq),e(Qq,d1o),e(Dp,c1o),e(x,m1o),e(x,Gp),e(Gp,Tle),e(Tle,f1o),e(Gp,g1o),e(Gp,Hq),e(Hq,h1o),e(Gp,u1o),e(x,p1o),e(x,Op),e(Op,Mle),e(Mle,_1o),e(Op,b1o),e(Op,Uq),e(Uq,v1o),e(Op,F1o),e(Je,T1o),e(Je,Vp),e(Vp,M1o),e(Vp,Ele),e(Ele,E1o),e(Vp,C1o),e(Vp,Cle),e(Cle,w1o),e(Je,A1o),M(Xp,Je,null),b(m,KIe,_),b(m,yi,_),e(yi,zp),e(zp,wle),M(Gy,wle,null),e(yi,y1o),e(yi,Ale),e(Ale,L1o),b(m,ZIe,_),b(m,xo,_),M(Oy,xo,null),e(xo,x1o),e(xo,Li),e(Li,$1o),e(Li,Jq),e(Jq,k1o),e(Li,S1o),e(Li,Yq),e(Yq,R1o),e(Li,P1o),e(xo,B1o),e(xo,Vy),e(Vy,I1o),e(Vy,yle),e(yle,q1o),e(Vy,N1o),e(xo,j1o),e(xo,at),M(Xy,at,null),e(at,D1o),e(at,Lle),e(Lle,G1o),e(at,O1o),e(at,xi),e(xi,V1o),e(xi,xle),e(xle,X1o),e(xi,z1o),e(xi,Kq),e(Kq,W1o),e(xi,Q1o),e(at,H1o),M(Wp,at,null),e(xo,U1o),e(xo,Ye),M(zy,Ye,null),e(Ye,J1o),e(Ye,$le),e($le,Y1o),e(Ye,K1o),e(Ye,xa),e(xa,Z1o),e(xa,kle),e(kle,eTo),e(xa,oTo),e(xa,Sle),e(Sle,rTo),e(xa,tTo),e(xa,Rle),e(Rle,aTo),e(xa,nTo),e(Ye,sTo),e(Ye,G),e(G,Qp),e(Qp,Ple),e(Ple,lTo),e(Qp,iTo),e(Qp,Zq),e(Zq,dTo),e(Qp,cTo),e(G,mTo),e(G,Hp),e(Hp,Ble),e(Ble,fTo),e(Hp,gTo),e(Hp,eN),e(eN,hTo),e(Hp,uTo),e(G,pTo),e(G,Up),e(Up,Ile),e(Ile,_To),e(Up,bTo),e(Up,oN),e(oN,vTo),e(Up,FTo),e(G,TTo),e(G,Jp),e(Jp,qle),e(qle,MTo),e(Jp,ETo),e(Jp,rN),e(rN,CTo),e(Jp,wTo),e(G,ATo),e(G,Yp),e(Yp,Nle),e(Nle,yTo),e(Yp,LTo),e(Yp,tN),e(tN,xTo),e(Yp,$To),e(G,kTo),e(G,Kp),e(Kp,jle),e(jle,STo),e(Kp,RTo),e(Kp,aN),e(aN,PTo),e(Kp,BTo),e(G,ITo),e(G,Zp),e(Zp,Dle),e(Dle,qTo),e(Zp,NTo),e(Zp,nN),e(nN,jTo),e(Zp,DTo),e(G,GTo),e(G,e_),e(e_,Gle),e(Gle,OTo),e(e_,VTo),e(e_,sN),e(sN,XTo),e(e_,zTo),e(G,WTo),e(G,o_),e(o_,Ole),e(Ole,QTo),e(o_,HTo),e(o_,lN),e(lN,UTo),e(o_,JTo),e(G,YTo),e(G,r_),e(r_,Vle),e(Vle,KTo),e(r_,ZTo),e(r_,iN),e(iN,eMo),e(r_,oMo),e(G,rMo),e(G,t_),e(t_,Xle),e(Xle,tMo),e(t_,aMo),e(t_,dN),e(dN,nMo),e(t_,sMo),e(G,lMo),e(G,a_),e(a_,zle),e(zle,iMo),e(a_,dMo),e(a_,cN),e(cN,cMo),e(a_,mMo),e(G,fMo),e(G,n_),e(n_,Wle),e(Wle,gMo),e(n_,hMo),e(n_,mN),e(mN,uMo),e(n_,pMo),e(G,_Mo),e(G,s_),e(s_,Qle),e(Qle,bMo),e(s_,vMo),e(s_,fN),e(fN,FMo),e(s_,TMo),e(G,MMo),e(G,l_),e(l_,Hle),e(Hle,EMo),e(l_,CMo),e(l_,gN),e(gN,wMo),e(l_,AMo),e(G,yMo),e(G,i_),e(i_,Ule),e(Ule,LMo),e(i_,xMo),e(i_,hN),e(hN,$Mo),e(i_,kMo),e(G,SMo),e(G,d_),e(d_,Jle),e(Jle,RMo),e(d_,PMo),e(d_,uN),e(uN,BMo),e(d_,IMo),e(G,qMo),e(G,c_),e(c_,Yle),e(Yle,NMo),e(c_,jMo),e(c_,pN),e(pN,DMo),e(c_,GMo),e(G,OMo),e(G,m_),e(m_,Kle),e(Kle,VMo),e(m_,XMo),e(m_,_N),e(_N,zMo),e(m_,WMo),e(G,QMo),e(G,f_),e(f_,Zle),e(Zle,HMo),e(f_,UMo),e(f_,bN),e(bN,JMo),e(f_,YMo),e(G,KMo),e(G,g_),e(g_,eie),e(eie,ZMo),e(g_,e4o),e(g_,vN),e(vN,o4o),e(g_,r4o),e(G,t4o),e(G,h_),e(h_,oie),e(oie,a4o),e(h_,n4o),e(h_,FN),e(FN,s4o),e(h_,l4o),e(G,i4o),e(G,u_),e(u_,rie),e(rie,d4o),e(u_,c4o),e(u_,TN),e(TN,m4o),e(u_,f4o),e(G,g4o),e(G,p_),e(p_,tie),e(tie,h4o),e(p_,u4o),e(p_,MN),e(MN,p4o),e(p_,_4o),e(G,b4o),e(G,__),e(__,aie),e(aie,v4o),e(__,F4o),e(__,EN),e(EN,T4o),e(__,M4o),e(G,E4o),e(G,b_),e(b_,nie),e(nie,C4o),e(b_,w4o),e(b_,CN),e(CN,A4o),e(b_,y4o),e(G,L4o),e(G,v_),e(v_,sie),e(sie,x4o),e(v_,$4o),e(v_,wN),e(wN,k4o),e(v_,S4o),e(G,R4o),e(G,F_),e(F_,lie),e(lie,P4o),e(F_,B4o),e(F_,AN),e(AN,I4o),e(F_,q4o),e(G,N4o),e(G,T_),e(T_,iie),e(iie,j4o),e(T_,D4o),e(T_,yN),e(yN,G4o),e(T_,O4o),e(G,V4o),e(G,M_),e(M_,die),e(die,X4o),e(M_,z4o),e(M_,LN),e(LN,W4o),e(M_,Q4o),e(G,H4o),e(G,E_),e(E_,cie),e(cie,U4o),e(E_,J4o),e(E_,xN),e(xN,Y4o),e(E_,K4o),e(G,Z4o),e(G,C_),e(C_,mie),e(mie,eEo),e(C_,oEo),e(C_,$N),e($N,rEo),e(C_,tEo),e(G,aEo),e(G,w_),e(w_,fie),e(fie,nEo),e(w_,sEo),e(w_,kN),e(kN,lEo),e(w_,iEo),e(G,dEo),e(G,A_),e(A_,gie),e(gie,cEo),e(A_,mEo),e(A_,SN),e(SN,fEo),e(A_,gEo),e(G,hEo),e(G,y_),e(y_,hie),e(hie,uEo),e(y_,pEo),e(y_,RN),e(RN,_Eo),e(y_,bEo),e(G,vEo),e(G,L_),e(L_,uie),e(uie,FEo),e(L_,TEo),e(L_,PN),e(PN,MEo),e(L_,EEo),e(G,CEo),e(G,x_),e(x_,pie),e(pie,wEo),e(x_,AEo),e(x_,BN),e(BN,yEo),e(x_,LEo),e(G,xEo),e(G,$_),e($_,_ie),e(_ie,$Eo),e($_,kEo),e($_,IN),e(IN,SEo),e($_,REo),e(G,PEo),e(G,k_),e(k_,bie),e(bie,BEo),e(k_,IEo),e(k_,qN),e(qN,qEo),e(k_,NEo),e(G,jEo),e(G,S_),e(S_,vie),e(vie,DEo),e(S_,GEo),e(S_,NN),e(NN,OEo),e(S_,VEo),e(G,XEo),e(G,R_),e(R_,Fie),e(Fie,zEo),e(R_,WEo),e(R_,jN),e(jN,QEo),e(R_,HEo),e(G,UEo),e(G,P_),e(P_,Tie),e(Tie,JEo),e(P_,YEo),e(P_,DN),e(DN,KEo),e(P_,ZEo),e(Ye,eCo),e(Ye,B_),e(B_,oCo),e(B_,Mie),e(Mie,rCo),e(B_,tCo),e(B_,Eie),e(Eie,aCo),e(Ye,nCo),M(I_,Ye,null),b(m,eqe,_),b(m,$i,_),e($i,q_),e(q_,Cie),M(Wy,Cie,null),e($i,sCo),e($i,wie),e(wie,lCo),b(m,oqe,_),b(m,$o,_),M(Qy,$o,null),e($o,iCo),e($o,ki),e(ki,dCo),e(ki,GN),e(GN,cCo),e(ki,mCo),e(ki,ON),e(ON,fCo),e(ki,gCo),e($o,hCo),e($o,Hy),e(Hy,uCo),e(Hy,Aie),e(Aie,pCo),e(Hy,_Co),e($o,bCo),e($o,nt),M(Uy,nt,null),e(nt,vCo),e(nt,yie),e(yie,FCo),e(nt,TCo),e(nt,Si),e(Si,MCo),e(Si,Lie),e(Lie,ECo),e(Si,CCo),e(Si,VN),e(VN,wCo),e(Si,ACo),e(nt,yCo),M(N_,nt,null),e($o,LCo),e($o,Ke),M(Jy,Ke,null),e(Ke,xCo),e(Ke,xie),e(xie,$Co),e(Ke,kCo),e(Ke,$a),e($a,SCo),e($a,$ie),e($ie,RCo),e($a,PCo),e($a,kie),e(kie,BCo),e($a,ICo),e($a,Sie),e(Sie,qCo),e($a,NCo),e(Ke,jCo),e(Ke,z),e(z,j_),e(j_,Rie),e(Rie,DCo),e(j_,GCo),e(j_,XN),e(XN,OCo),e(j_,VCo),e(z,XCo),e(z,D_),e(D_,Pie),e(Pie,zCo),e(D_,WCo),e(D_,zN),e(zN,QCo),e(D_,HCo),e(z,UCo),e(z,G_),e(G_,Bie),e(Bie,JCo),e(G_,YCo),e(G_,WN),e(WN,KCo),e(G_,ZCo),e(z,e5o),e(z,O_),e(O_,Iie),e(Iie,o5o),e(O_,r5o),e(O_,QN),e(QN,t5o),e(O_,a5o),e(z,n5o),e(z,V_),e(V_,qie),e(qie,s5o),e(V_,l5o),e(V_,HN),e(HN,i5o),e(V_,d5o),e(z,c5o),e(z,X_),e(X_,Nie),e(Nie,m5o),e(X_,f5o),e(X_,UN),e(UN,g5o),e(X_,h5o),e(z,u5o),e(z,z_),e(z_,jie),e(jie,p5o),e(z_,_5o),e(z_,JN),e(JN,b5o),e(z_,v5o),e(z,F5o),e(z,W_),e(W_,Die),e(Die,T5o),e(W_,M5o),e(W_,YN),e(YN,E5o),e(W_,C5o),e(z,w5o),e(z,Q_),e(Q_,Gie),e(Gie,A5o),e(Q_,y5o),e(Q_,KN),e(KN,L5o),e(Q_,x5o),e(z,$5o),e(z,H_),e(H_,Oie),e(Oie,k5o),e(H_,S5o),e(H_,ZN),e(ZN,R5o),e(H_,P5o),e(z,B5o),e(z,U_),e(U_,Vie),e(Vie,I5o),e(U_,q5o),e(U_,ej),e(ej,N5o),e(U_,j5o),e(z,D5o),e(z,J_),e(J_,Xie),e(Xie,G5o),e(J_,O5o),e(J_,oj),e(oj,V5o),e(J_,X5o),e(z,z5o),e(z,Y_),e(Y_,zie),e(zie,W5o),e(Y_,Q5o),e(Y_,rj),e(rj,H5o),e(Y_,U5o),e(z,J5o),e(z,K_),e(K_,Wie),e(Wie,Y5o),e(K_,K5o),e(K_,tj),e(tj,Z5o),e(K_,e3o),e(z,o3o),e(z,Z_),e(Z_,Qie),e(Qie,r3o),e(Z_,t3o),e(Z_,aj),e(aj,a3o),e(Z_,n3o),e(z,s3o),e(z,eb),e(eb,Hie),e(Hie,l3o),e(eb,i3o),e(eb,nj),e(nj,d3o),e(eb,c3o),e(z,m3o),e(z,ob),e(ob,Uie),e(Uie,f3o),e(ob,g3o),e(ob,sj),e(sj,h3o),e(ob,u3o),e(z,p3o),e(z,rb),e(rb,Jie),e(Jie,_3o),e(rb,b3o),e(rb,lj),e(lj,v3o),e(rb,F3o),e(z,T3o),e(z,tb),e(tb,Yie),e(Yie,M3o),e(tb,E3o),e(tb,ij),e(ij,C3o),e(tb,w3o),e(z,A3o),e(z,ab),e(ab,Kie),e(Kie,y3o),e(ab,L3o),e(ab,dj),e(dj,x3o),e(ab,$3o),e(z,k3o),e(z,nb),e(nb,Zie),e(Zie,S3o),e(nb,R3o),e(nb,cj),e(cj,P3o),e(nb,B3o),e(z,I3o),e(z,sb),e(sb,ede),e(ede,q3o),e(sb,N3o),e(sb,mj),e(mj,j3o),e(sb,D3o),e(z,G3o),e(z,lb),e(lb,ode),e(ode,O3o),e(lb,V3o),e(lb,fj),e(fj,X3o),e(lb,z3o),e(z,W3o),e(z,ib),e(ib,rde),e(rde,Q3o),e(ib,H3o),e(ib,gj),e(gj,U3o),e(ib,J3o),e(z,Y3o),e(z,db),e(db,tde),e(tde,K3o),e(db,Z3o),e(db,hj),e(hj,ewo),e(db,owo),e(z,rwo),e(z,cb),e(cb,ade),e(ade,two),e(cb,awo),e(cb,uj),e(uj,nwo),e(cb,swo),e(z,lwo),e(z,mb),e(mb,nde),e(nde,iwo),e(mb,dwo),e(mb,pj),e(pj,cwo),e(mb,mwo),e(z,fwo),e(z,fb),e(fb,sde),e(sde,gwo),e(fb,hwo),e(fb,_j),e(_j,uwo),e(fb,pwo),e(z,_wo),e(z,gb),e(gb,lde),e(lde,bwo),e(gb,vwo),e(gb,bj),e(bj,Fwo),e(gb,Two),e(z,Mwo),e(z,hb),e(hb,ide),e(ide,Ewo),e(hb,Cwo),e(hb,vj),e(vj,wwo),e(hb,Awo),e(z,ywo),e(z,ub),e(ub,dde),e(dde,Lwo),e(ub,xwo),e(ub,Fj),e(Fj,$wo),e(ub,kwo),e(z,Swo),e(z,pb),e(pb,cde),e(cde,Rwo),e(pb,Pwo),e(pb,Tj),e(Tj,Bwo),e(pb,Iwo),e(z,qwo),e(z,_b),e(_b,mde),e(mde,Nwo),e(_b,jwo),e(_b,Mj),e(Mj,Dwo),e(_b,Gwo),e(z,Owo),e(z,bb),e(bb,fde),e(fde,Vwo),e(bb,Xwo),e(bb,Ej),e(Ej,zwo),e(bb,Wwo),e(z,Qwo),e(z,vb),e(vb,gde),e(gde,Hwo),e(vb,Uwo),e(vb,Cj),e(Cj,Jwo),e(vb,Ywo),e(z,Kwo),e(z,Fb),e(Fb,hde),e(hde,Zwo),e(Fb,eAo),e(Fb,wj),e(wj,oAo),e(Fb,rAo),e(Ke,tAo),e(Ke,Tb),e(Tb,aAo),e(Tb,ude),e(ude,nAo),e(Tb,sAo),e(Tb,pde),e(pde,lAo),e(Ke,iAo),M(Mb,Ke,null),b(m,rqe,_),b(m,Ri,_),e(Ri,Eb),e(Eb,_de),M(Yy,_de,null),e(Ri,dAo),e(Ri,bde),e(bde,cAo),b(m,tqe,_),b(m,ko,_),M(Ky,ko,null),e(ko,mAo),e(ko,Pi),e(Pi,fAo),e(Pi,Aj),e(Aj,gAo),e(Pi,hAo),e(Pi,yj),e(yj,uAo),e(Pi,pAo),e(ko,_Ao),e(ko,Zy),e(Zy,bAo),e(Zy,vde),e(vde,vAo),e(Zy,FAo),e(ko,TAo),e(ko,st),M(eL,st,null),e(st,MAo),e(st,Fde),e(Fde,EAo),e(st,CAo),e(st,Bi),e(Bi,wAo),e(Bi,Tde),e(Tde,AAo),e(Bi,yAo),e(Bi,Lj),e(Lj,LAo),e(Bi,xAo),e(st,$Ao),M(Cb,st,null),e(ko,kAo),e(ko,Ze),M(oL,Ze,null),e(Ze,SAo),e(Ze,Mde),e(Mde,RAo),e(Ze,PAo),e(Ze,ka),e(ka,BAo),e(ka,Ede),e(Ede,IAo),e(ka,qAo),e(ka,Cde),e(Cde,NAo),e(ka,jAo),e(ka,wde),e(wde,DAo),e(ka,GAo),e(Ze,OAo),e(Ze,W),e(W,wb),e(wb,Ade),e(Ade,VAo),e(wb,XAo),e(wb,xj),e(xj,zAo),e(wb,WAo),e(W,QAo),e(W,Ab),e(Ab,yde),e(yde,HAo),e(Ab,UAo),e(Ab,$j),e($j,JAo),e(Ab,YAo),e(W,KAo),e(W,yb),e(yb,Lde),e(Lde,ZAo),e(yb,e0o),e(yb,kj),e(kj,o0o),e(yb,r0o),e(W,t0o),e(W,Lb),e(Lb,xde),e(xde,a0o),e(Lb,n0o),e(Lb,Sj),e(Sj,s0o),e(Lb,l0o),e(W,i0o),e(W,xb),e(xb,$de),e($de,d0o),e(xb,c0o),e(xb,Rj),e(Rj,m0o),e(xb,f0o),e(W,g0o),e(W,$b),e($b,kde),e(kde,h0o),e($b,u0o),e($b,Pj),e(Pj,p0o),e($b,_0o),e(W,b0o),e(W,kb),e(kb,Sde),e(Sde,v0o),e(kb,F0o),e(kb,Bj),e(Bj,T0o),e(kb,M0o),e(W,E0o),e(W,Sb),e(Sb,Rde),e(Rde,C0o),e(Sb,w0o),e(Sb,Ij),e(Ij,A0o),e(Sb,y0o),e(W,L0o),e(W,Rb),e(Rb,Pde),e(Pde,x0o),e(Rb,$0o),e(Rb,qj),e(qj,k0o),e(Rb,S0o),e(W,R0o),e(W,Pb),e(Pb,Bde),e(Bde,P0o),e(Pb,B0o),e(Pb,Nj),e(Nj,I0o),e(Pb,q0o),e(W,N0o),e(W,Bb),e(Bb,Ide),e(Ide,j0o),e(Bb,D0o),e(Bb,jj),e(jj,G0o),e(Bb,O0o),e(W,V0o),e(W,Ib),e(Ib,qde),e(qde,X0o),e(Ib,z0o),e(Ib,Dj),e(Dj,W0o),e(Ib,Q0o),e(W,H0o),e(W,qb),e(qb,Nde),e(Nde,U0o),e(qb,J0o),e(qb,Gj),e(Gj,Y0o),e(qb,K0o),e(W,Z0o),e(W,Nb),e(Nb,jde),e(jde,e6o),e(Nb,o6o),e(Nb,Oj),e(Oj,r6o),e(Nb,t6o),e(W,a6o),e(W,jb),e(jb,Dde),e(Dde,n6o),e(jb,s6o),e(jb,Vj),e(Vj,l6o),e(jb,i6o),e(W,d6o),e(W,Db),e(Db,Gde),e(Gde,c6o),e(Db,m6o),e(Db,Xj),e(Xj,f6o),e(Db,g6o),e(W,h6o),e(W,Gb),e(Gb,Ode),e(Ode,u6o),e(Gb,p6o),e(Gb,zj),e(zj,_6o),e(Gb,b6o),e(W,v6o),e(W,Ob),e(Ob,Vde),e(Vde,F6o),e(Ob,T6o),e(Ob,Wj),e(Wj,M6o),e(Ob,E6o),e(W,C6o),e(W,Vb),e(Vb,Xde),e(Xde,w6o),e(Vb,A6o),e(Vb,Qj),e(Qj,y6o),e(Vb,L6o),e(W,x6o),e(W,Xb),e(Xb,zde),e(zde,$6o),e(Xb,k6o),e(Xb,Hj),e(Hj,S6o),e(Xb,R6o),e(W,P6o),e(W,zb),e(zb,Wde),e(Wde,B6o),e(zb,I6o),e(zb,Uj),e(Uj,q6o),e(zb,N6o),e(W,j6o),e(W,Wb),e(Wb,Qde),e(Qde,D6o),e(Wb,G6o),e(Wb,Jj),e(Jj,O6o),e(Wb,V6o),e(W,X6o),e(W,Qb),e(Qb,Hde),e(Hde,z6o),e(Qb,W6o),e(Qb,Yj),e(Yj,Q6o),e(Qb,H6o),e(W,U6o),e(W,Hb),e(Hb,Ude),e(Ude,J6o),e(Hb,Y6o),e(Hb,Kj),e(Kj,K6o),e(Hb,Z6o),e(W,eyo),e(W,Ub),e(Ub,Jde),e(Jde,oyo),e(Ub,ryo),e(Ub,Zj),e(Zj,tyo),e(Ub,ayo),e(W,nyo),e(W,Jb),e(Jb,Yde),e(Yde,syo),e(Jb,lyo),e(Jb,eD),e(eD,iyo),e(Jb,dyo),e(W,cyo),e(W,Yb),e(Yb,Kde),e(Kde,myo),e(Yb,fyo),e(Yb,oD),e(oD,gyo),e(Yb,hyo),e(W,uyo),e(W,Kb),e(Kb,Zde),e(Zde,pyo),e(Kb,_yo),e(Kb,rD),e(rD,byo),e(Kb,vyo),e(W,Fyo),e(W,Zb),e(Zb,ece),e(ece,Tyo),e(Zb,Myo),e(Zb,tD),e(tD,Eyo),e(Zb,Cyo),e(W,wyo),e(W,e2),e(e2,oce),e(oce,Ayo),e(e2,yyo),e(e2,aD),e(aD,Lyo),e(e2,xyo),e(W,$yo),e(W,o2),e(o2,rce),e(rce,kyo),e(o2,Syo),e(o2,tce),e(tce,Ryo),e(o2,Pyo),e(W,Byo),e(W,r2),e(r2,ace),e(ace,Iyo),e(r2,qyo),e(r2,nD),e(nD,Nyo),e(r2,jyo),e(W,Dyo),e(W,t2),e(t2,nce),e(nce,Gyo),e(t2,Oyo),e(t2,sD),e(sD,Vyo),e(t2,Xyo),e(W,zyo),e(W,a2),e(a2,sce),e(sce,Wyo),e(a2,Qyo),e(a2,lD),e(lD,Hyo),e(a2,Uyo),e(W,Jyo),e(W,n2),e(n2,lce),e(lce,Yyo),e(n2,Kyo),e(n2,iD),e(iD,Zyo),e(n2,eLo),e(Ze,oLo),e(Ze,s2),e(s2,rLo),e(s2,ice),e(ice,tLo),e(s2,aLo),e(s2,dce),e(dce,nLo),e(Ze,sLo),M(l2,Ze,null),b(m,aqe,_),b(m,Ii,_),e(Ii,i2),e(i2,cce),M(rL,cce,null),e(Ii,lLo),e(Ii,mce),e(mce,iLo),b(m,nqe,_),b(m,So,_),M(tL,So,null),e(So,dLo),e(So,qi),e(qi,cLo),e(qi,dD),e(dD,mLo),e(qi,fLo),e(qi,cD),e(cD,gLo),e(qi,hLo),e(So,uLo),e(So,aL),e(aL,pLo),e(aL,fce),e(fce,_Lo),e(aL,bLo),e(So,vLo),e(So,lt),M(nL,lt,null),e(lt,FLo),e(lt,gce),e(gce,TLo),e(lt,MLo),e(lt,Ni),e(Ni,ELo),e(Ni,hce),e(hce,CLo),e(Ni,wLo),e(Ni,mD),e(mD,ALo),e(Ni,yLo),e(lt,LLo),M(d2,lt,null),e(So,xLo),e(So,eo),M(sL,eo,null),e(eo,$Lo),e(eo,uce),e(uce,kLo),e(eo,SLo),e(eo,Sa),e(Sa,RLo),e(Sa,pce),e(pce,PLo),e(Sa,BLo),e(Sa,_ce),e(_ce,ILo),e(Sa,qLo),e(Sa,bce),e(bce,NLo),e(Sa,jLo),e(eo,DLo),e(eo,pe),e(pe,c2),e(c2,vce),e(vce,GLo),e(c2,OLo),e(c2,fD),e(fD,VLo),e(c2,XLo),e(pe,zLo),e(pe,m2),e(m2,Fce),e(Fce,WLo),e(m2,QLo),e(m2,gD),e(gD,HLo),e(m2,ULo),e(pe,JLo),e(pe,f2),e(f2,Tce),e(Tce,YLo),e(f2,KLo),e(f2,hD),e(hD,ZLo),e(f2,e8o),e(pe,o8o),e(pe,g2),e(g2,Mce),e(Mce,r8o),e(g2,t8o),e(g2,uD),e(uD,a8o),e(g2,n8o),e(pe,s8o),e(pe,h2),e(h2,Ece),e(Ece,l8o),e(h2,i8o),e(h2,pD),e(pD,d8o),e(h2,c8o),e(pe,m8o),e(pe,u2),e(u2,Cce),e(Cce,f8o),e(u2,g8o),e(u2,_D),e(_D,h8o),e(u2,u8o),e(pe,p8o),e(pe,p2),e(p2,wce),e(wce,_8o),e(p2,b8o),e(p2,bD),e(bD,v8o),e(p2,F8o),e(pe,T8o),e(pe,_2),e(_2,Ace),e(Ace,M8o),e(_2,E8o),e(_2,vD),e(vD,C8o),e(_2,w8o),e(pe,A8o),e(pe,b2),e(b2,yce),e(yce,y8o),e(b2,L8o),e(b2,FD),e(FD,x8o),e(b2,$8o),e(pe,k8o),e(pe,v2),e(v2,Lce),e(Lce,S8o),e(v2,R8o),e(v2,TD),e(TD,P8o),e(v2,B8o),e(pe,I8o),e(pe,F2),e(F2,xce),e(xce,q8o),e(F2,N8o),e(F2,MD),e(MD,j8o),e(F2,D8o),e(pe,G8o),e(pe,T2),e(T2,$ce),e($ce,O8o),e(T2,V8o),e(T2,ED),e(ED,X8o),e(T2,z8o),e(pe,W8o),e(pe,M2),e(M2,kce),e(kce,Q8o),e(M2,H8o),e(M2,CD),e(CD,U8o),e(M2,J8o),e(pe,Y8o),e(pe,E2),e(E2,Sce),e(Sce,K8o),e(E2,Z8o),e(E2,wD),e(wD,e7o),e(E2,o7o),e(pe,r7o),e(pe,C2),e(C2,Rce),e(Rce,t7o),e(C2,a7o),e(C2,AD),e(AD,n7o),e(C2,s7o),e(pe,l7o),e(pe,w2),e(w2,Pce),e(Pce,i7o),e(w2,d7o),e(w2,yD),e(yD,c7o),e(w2,m7o),e(eo,f7o),e(eo,A2),e(A2,g7o),e(A2,Bce),e(Bce,h7o),e(A2,u7o),e(A2,Ice),e(Ice,p7o),e(eo,_7o),M(y2,eo,null),b(m,sqe,_),b(m,ji,_),e(ji,L2),e(L2,qce),M(lL,qce,null),e(ji,b7o),e(ji,Nce),e(Nce,v7o),b(m,lqe,_),b(m,Ro,_),M(iL,Ro,null),e(Ro,F7o),e(Ro,Di),e(Di,T7o),e(Di,LD),e(LD,M7o),e(Di,E7o),e(Di,xD),e(xD,C7o),e(Di,w7o),e(Ro,A7o),e(Ro,dL),e(dL,y7o),e(dL,jce),e(jce,L7o),e(dL,x7o),e(Ro,$7o),e(Ro,it),M(cL,it,null),e(it,k7o),e(it,Dce),e(Dce,S7o),e(it,R7o),e(it,Gi),e(Gi,P7o),e(Gi,Gce),e(Gce,B7o),e(Gi,I7o),e(Gi,$D),e($D,q7o),e(Gi,N7o),e(it,j7o),M(x2,it,null),e(Ro,D7o),e(Ro,oo),M(mL,oo,null),e(oo,G7o),e(oo,Oce),e(Oce,O7o),e(oo,V7o),e(oo,Ra),e(Ra,X7o),e(Ra,Vce),e(Vce,z7o),e(Ra,W7o),e(Ra,Xce),e(Xce,Q7o),e(Ra,H7o),e(Ra,zce),e(zce,U7o),e(Ra,J7o),e(oo,Y7o),e(oo,q),e(q,$2),e($2,Wce),e(Wce,K7o),e($2,Z7o),e($2,kD),e(kD,exo),e($2,oxo),e(q,rxo),e(q,k2),e(k2,Qce),e(Qce,txo),e(k2,axo),e(k2,SD),e(SD,nxo),e(k2,sxo),e(q,lxo),e(q,S2),e(S2,Hce),e(Hce,ixo),e(S2,dxo),e(S2,RD),e(RD,cxo),e(S2,mxo),e(q,fxo),e(q,R2),e(R2,Uce),e(Uce,gxo),e(R2,hxo),e(R2,PD),e(PD,uxo),e(R2,pxo),e(q,_xo),e(q,P2),e(P2,Jce),e(Jce,bxo),e(P2,vxo),e(P2,BD),e(BD,Fxo),e(P2,Txo),e(q,Mxo),e(q,B2),e(B2,Yce),e(Yce,Exo),e(B2,Cxo),e(B2,ID),e(ID,wxo),e(B2,Axo),e(q,yxo),e(q,I2),e(I2,Kce),e(Kce,Lxo),e(I2,xxo),e(I2,qD),e(qD,$xo),e(I2,kxo),e(q,Sxo),e(q,q2),e(q2,Zce),e(Zce,Rxo),e(q2,Pxo),e(q2,ND),e(ND,Bxo),e(q2,Ixo),e(q,qxo),e(q,N2),e(N2,eme),e(eme,Nxo),e(N2,jxo),e(N2,jD),e(jD,Dxo),e(N2,Gxo),e(q,Oxo),e(q,j2),e(j2,ome),e(ome,Vxo),e(j2,Xxo),e(j2,DD),e(DD,zxo),e(j2,Wxo),e(q,Qxo),e(q,D2),e(D2,rme),e(rme,Hxo),e(D2,Uxo),e(D2,GD),e(GD,Jxo),e(D2,Yxo),e(q,Kxo),e(q,G2),e(G2,tme),e(tme,Zxo),e(G2,e9o),e(G2,OD),e(OD,o9o),e(G2,r9o),e(q,t9o),e(q,O2),e(O2,ame),e(ame,a9o),e(O2,n9o),e(O2,VD),e(VD,s9o),e(O2,l9o),e(q,i9o),e(q,V2),e(V2,nme),e(nme,d9o),e(V2,c9o),e(V2,XD),e(XD,m9o),e(V2,f9o),e(q,g9o),e(q,X2),e(X2,sme),e(sme,h9o),e(X2,u9o),e(X2,zD),e(zD,p9o),e(X2,_9o),e(q,b9o),e(q,z2),e(z2,lme),e(lme,v9o),e(z2,F9o),e(z2,WD),e(WD,T9o),e(z2,M9o),e(q,E9o),e(q,W2),e(W2,ime),e(ime,C9o),e(W2,w9o),e(W2,QD),e(QD,A9o),e(W2,y9o),e(q,L9o),e(q,Q2),e(Q2,dme),e(dme,x9o),e(Q2,$9o),e(Q2,HD),e(HD,k9o),e(Q2,S9o),e(q,R9o),e(q,H2),e(H2,cme),e(cme,P9o),e(H2,B9o),e(H2,UD),e(UD,I9o),e(H2,q9o),e(q,N9o),e(q,U2),e(U2,mme),e(mme,j9o),e(U2,D9o),e(U2,JD),e(JD,G9o),e(U2,O9o),e(q,V9o),e(q,J2),e(J2,fme),e(fme,X9o),e(J2,z9o),e(J2,YD),e(YD,W9o),e(J2,Q9o),e(q,H9o),e(q,Y2),e(Y2,gme),e(gme,U9o),e(Y2,J9o),e(Y2,KD),e(KD,Y9o),e(Y2,K9o),e(q,Z9o),e(q,K2),e(K2,hme),e(hme,e$o),e(K2,o$o),e(K2,ZD),e(ZD,r$o),e(K2,t$o),e(q,a$o),e(q,Z2),e(Z2,ume),e(ume,n$o),e(Z2,s$o),e(Z2,eG),e(eG,l$o),e(Z2,i$o),e(q,d$o),e(q,ev),e(ev,pme),e(pme,c$o),e(ev,m$o),e(ev,oG),e(oG,f$o),e(ev,g$o),e(q,h$o),e(q,ov),e(ov,_me),e(_me,u$o),e(ov,p$o),e(ov,rG),e(rG,_$o),e(ov,b$o),e(q,v$o),e(q,rv),e(rv,bme),e(bme,F$o),e(rv,T$o),e(rv,tG),e(tG,M$o),e(rv,E$o),e(q,C$o),e(q,tv),e(tv,vme),e(vme,w$o),e(tv,A$o),e(tv,aG),e(aG,y$o),e(tv,L$o),e(q,x$o),e(q,av),e(av,Fme),e(Fme,$$o),e(av,k$o),e(av,nG),e(nG,S$o),e(av,R$o),e(q,P$o),e(q,nv),e(nv,Tme),e(Tme,B$o),e(nv,I$o),e(nv,sG),e(sG,q$o),e(nv,N$o),e(q,j$o),e(q,sv),e(sv,Mme),e(Mme,D$o),e(sv,G$o),e(sv,lG),e(lG,O$o),e(sv,V$o),e(q,X$o),e(q,lv),e(lv,Eme),e(Eme,z$o),e(lv,W$o),e(lv,iG),e(iG,Q$o),e(lv,H$o),e(q,U$o),e(q,iv),e(iv,Cme),e(Cme,J$o),e(iv,Y$o),e(iv,dG),e(dG,K$o),e(iv,Z$o),e(q,eko),e(q,dv),e(dv,wme),e(wme,oko),e(dv,rko),e(dv,cG),e(cG,tko),e(dv,ako),e(q,nko),e(q,cv),e(cv,Ame),e(Ame,sko),e(cv,lko),e(cv,mG),e(mG,iko),e(cv,dko),e(q,cko),e(q,mv),e(mv,yme),e(yme,mko),e(mv,fko),e(mv,fG),e(fG,gko),e(mv,hko),e(q,uko),e(q,fv),e(fv,Lme),e(Lme,pko),e(fv,_ko),e(fv,gG),e(gG,bko),e(fv,vko),e(q,Fko),e(q,gv),e(gv,xme),e(xme,Tko),e(gv,Mko),e(gv,hG),e(hG,Eko),e(gv,Cko),e(q,wko),e(q,hv),e(hv,$me),e($me,Ako),e(hv,yko),e(hv,uG),e(uG,Lko),e(hv,xko),e(q,$ko),e(q,uv),e(uv,kme),e(kme,kko),e(uv,Sko),e(uv,pG),e(pG,Rko),e(uv,Pko),e(q,Bko),e(q,pv),e(pv,Sme),e(Sme,Iko),e(pv,qko),e(pv,_G),e(_G,Nko),e(pv,jko),e(q,Dko),e(q,_v),e(_v,Rme),e(Rme,Gko),e(_v,Oko),e(_v,bG),e(bG,Vko),e(_v,Xko),e(q,zko),e(q,bv),e(bv,Pme),e(Pme,Wko),e(bv,Qko),e(bv,vG),e(vG,Hko),e(bv,Uko),e(q,Jko),e(q,vv),e(vv,Bme),e(Bme,Yko),e(vv,Kko),e(vv,FG),e(FG,Zko),e(vv,eSo),e(q,oSo),e(q,Fv),e(Fv,Ime),e(Ime,rSo),e(Fv,tSo),e(Fv,TG),e(TG,aSo),e(Fv,nSo),e(q,sSo),e(q,Tv),e(Tv,qme),e(qme,lSo),e(Tv,iSo),e(Tv,MG),e(MG,dSo),e(Tv,cSo),e(oo,mSo),e(oo,Mv),e(Mv,fSo),e(Mv,Nme),e(Nme,gSo),e(Mv,hSo),e(Mv,jme),e(jme,uSo),e(oo,pSo),M(Ev,oo,null),b(m,iqe,_),b(m,Oi,_),e(Oi,Cv),e(Cv,Dme),M(fL,Dme,null),e(Oi,_So),e(Oi,Gme),e(Gme,bSo),b(m,dqe,_),b(m,Po,_),M(gL,Po,null),e(Po,vSo),e(Po,Vi),e(Vi,FSo),e(Vi,EG),e(EG,TSo),e(Vi,MSo),e(Vi,CG),e(CG,ESo),e(Vi,CSo),e(Po,wSo),e(Po,hL),e(hL,ASo),e(hL,Ome),e(Ome,ySo),e(hL,LSo),e(Po,xSo),e(Po,dt),M(uL,dt,null),e(dt,$So),e(dt,Vme),e(Vme,kSo),e(dt,SSo),e(dt,Xi),e(Xi,RSo),e(Xi,Xme),e(Xme,PSo),e(Xi,BSo),e(Xi,wG),e(wG,ISo),e(Xi,qSo),e(dt,NSo),M(wv,dt,null),e(Po,jSo),e(Po,ro),M(pL,ro,null),e(ro,DSo),e(ro,zme),e(zme,GSo),e(ro,OSo),e(ro,Pa),e(Pa,VSo),e(Pa,Wme),e(Wme,XSo),e(Pa,zSo),e(Pa,Qme),e(Qme,WSo),e(Pa,QSo),e(Pa,Hme),e(Hme,HSo),e(Pa,USo),e(ro,JSo),e(ro,Y),e(Y,Av),e(Av,Ume),e(Ume,YSo),e(Av,KSo),e(Av,AG),e(AG,ZSo),e(Av,eRo),e(Y,oRo),e(Y,yv),e(yv,Jme),e(Jme,rRo),e(yv,tRo),e(yv,yG),e(yG,aRo),e(yv,nRo),e(Y,sRo),e(Y,Lv),e(Lv,Yme),e(Yme,lRo),e(Lv,iRo),e(Lv,LG),e(LG,dRo),e(Lv,cRo),e(Y,mRo),e(Y,xv),e(xv,Kme),e(Kme,fRo),e(xv,gRo),e(xv,xG),e(xG,hRo),e(xv,uRo),e(Y,pRo),e(Y,$v),e($v,Zme),e(Zme,_Ro),e($v,bRo),e($v,$G),e($G,vRo),e($v,FRo),e(Y,TRo),e(Y,kv),e(kv,efe),e(efe,MRo),e(kv,ERo),e(kv,kG),e(kG,CRo),e(kv,wRo),e(Y,ARo),e(Y,Sv),e(Sv,ofe),e(ofe,yRo),e(Sv,LRo),e(Sv,SG),e(SG,xRo),e(Sv,$Ro),e(Y,kRo),e(Y,Rv),e(Rv,rfe),e(rfe,SRo),e(Rv,RRo),e(Rv,RG),e(RG,PRo),e(Rv,BRo),e(Y,IRo),e(Y,Pv),e(Pv,tfe),e(tfe,qRo),e(Pv,NRo),e(Pv,PG),e(PG,jRo),e(Pv,DRo),e(Y,GRo),e(Y,Bv),e(Bv,afe),e(afe,ORo),e(Bv,VRo),e(Bv,BG),e(BG,XRo),e(Bv,zRo),e(Y,WRo),e(Y,Iv),e(Iv,nfe),e(nfe,QRo),e(Iv,HRo),e(Iv,IG),e(IG,URo),e(Iv,JRo),e(Y,YRo),e(Y,qv),e(qv,sfe),e(sfe,KRo),e(qv,ZRo),e(qv,qG),e(qG,ePo),e(qv,oPo),e(Y,rPo),e(Y,Nv),e(Nv,lfe),e(lfe,tPo),e(Nv,aPo),e(Nv,NG),e(NG,nPo),e(Nv,sPo),e(Y,lPo),e(Y,jv),e(jv,ife),e(ife,iPo),e(jv,dPo),e(jv,jG),e(jG,cPo),e(jv,mPo),e(Y,fPo),e(Y,Dv),e(Dv,dfe),e(dfe,gPo),e(Dv,hPo),e(Dv,DG),e(DG,uPo),e(Dv,pPo),e(Y,_Po),e(Y,Gv),e(Gv,cfe),e(cfe,bPo),e(Gv,vPo),e(Gv,GG),e(GG,FPo),e(Gv,TPo),e(Y,MPo),e(Y,Ov),e(Ov,mfe),e(mfe,EPo),e(Ov,CPo),e(Ov,OG),e(OG,wPo),e(Ov,APo),e(Y,yPo),e(Y,Vv),e(Vv,ffe),e(ffe,LPo),e(Vv,xPo),e(Vv,VG),e(VG,$Po),e(Vv,kPo),e(Y,SPo),e(Y,Xv),e(Xv,gfe),e(gfe,RPo),e(Xv,PPo),e(Xv,XG),e(XG,BPo),e(Xv,IPo),e(Y,qPo),e(Y,zv),e(zv,hfe),e(hfe,NPo),e(zv,jPo),e(zv,zG),e(zG,DPo),e(zv,GPo),e(Y,OPo),e(Y,Wv),e(Wv,ufe),e(ufe,VPo),e(Wv,XPo),e(Wv,WG),e(WG,zPo),e(Wv,WPo),e(Y,QPo),e(Y,Qv),e(Qv,pfe),e(pfe,HPo),e(Qv,UPo),e(Qv,QG),e(QG,JPo),e(Qv,YPo),e(Y,KPo),e(Y,Hv),e(Hv,_fe),e(_fe,ZPo),e(Hv,eBo),e(Hv,HG),e(HG,oBo),e(Hv,rBo),e(Y,tBo),e(Y,Uv),e(Uv,bfe),e(bfe,aBo),e(Uv,nBo),e(Uv,UG),e(UG,sBo),e(Uv,lBo),e(Y,iBo),e(Y,Jv),e(Jv,vfe),e(vfe,dBo),e(Jv,cBo),e(Jv,JG),e(JG,mBo),e(Jv,fBo),e(Y,gBo),e(Y,Yv),e(Yv,Ffe),e(Ffe,hBo),e(Yv,uBo),e(Yv,YG),e(YG,pBo),e(Yv,_Bo),e(Y,bBo),e(Y,Kv),e(Kv,Tfe),e(Tfe,vBo),e(Kv,FBo),e(Kv,KG),e(KG,TBo),e(Kv,MBo),e(Y,EBo),e(Y,Zv),e(Zv,Mfe),e(Mfe,CBo),e(Zv,wBo),e(Zv,ZG),e(ZG,ABo),e(Zv,yBo),e(Y,LBo),e(Y,eF),e(eF,Efe),e(Efe,xBo),e(eF,$Bo),e(eF,eO),e(eO,kBo),e(eF,SBo),e(ro,RBo),e(ro,oF),e(oF,PBo),e(oF,Cfe),e(Cfe,BBo),e(oF,IBo),e(oF,wfe),e(wfe,qBo),e(ro,NBo),M(rF,ro,null),b(m,cqe,_),b(m,zi,_),e(zi,tF),e(tF,Afe),M(_L,Afe,null),e(zi,jBo),e(zi,yfe),e(yfe,DBo),b(m,mqe,_),b(m,Bo,_),M(bL,Bo,null),e(Bo,GBo),e(Bo,Wi),e(Wi,OBo),e(Wi,oO),e(oO,VBo),e(Wi,XBo),e(Wi,rO),e(rO,zBo),e(Wi,WBo),e(Bo,QBo),e(Bo,vL),e(vL,HBo),e(vL,Lfe),e(Lfe,UBo),e(vL,JBo),e(Bo,YBo),e(Bo,ct),M(FL,ct,null),e(ct,KBo),e(ct,xfe),e(xfe,ZBo),e(ct,eIo),e(ct,Qi),e(Qi,oIo),e(Qi,$fe),e($fe,rIo),e(Qi,tIo),e(Qi,tO),e(tO,aIo),e(Qi,nIo),e(ct,sIo),M(aF,ct,null),e(Bo,lIo),e(Bo,to),M(TL,to,null),e(to,iIo),e(to,kfe),e(kfe,dIo),e(to,cIo),e(to,Ba),e(Ba,mIo),e(Ba,Sfe),e(Sfe,fIo),e(Ba,gIo),e(Ba,Rfe),e(Rfe,hIo),e(Ba,uIo),e(Ba,Pfe),e(Pfe,pIo),e(Ba,_Io),e(to,bIo),e(to,Yr),e(Yr,nF),e(nF,Bfe),e(Bfe,vIo),e(nF,FIo),e(nF,aO),e(aO,TIo),e(nF,MIo),e(Yr,EIo),e(Yr,sF),e(sF,Ife),e(Ife,CIo),e(sF,wIo),e(sF,nO),e(nO,AIo),e(sF,yIo),e(Yr,LIo),e(Yr,lF),e(lF,qfe),e(qfe,xIo),e(lF,$Io),e(lF,sO),e(sO,kIo),e(lF,SIo),e(Yr,RIo),e(Yr,iF),e(iF,Nfe),e(Nfe,PIo),e(iF,BIo),e(iF,lO),e(lO,IIo),e(iF,qIo),e(Yr,NIo),e(Yr,dF),e(dF,jfe),e(jfe,jIo),e(dF,DIo),e(dF,iO),e(iO,GIo),e(dF,OIo),e(to,VIo),e(to,cF),e(cF,XIo),e(cF,Dfe),e(Dfe,zIo),e(cF,WIo),e(cF,Gfe),e(Gfe,QIo),e(to,HIo),M(mF,to,null),b(m,fqe,_),b(m,Hi,_),e(Hi,fF),e(fF,Ofe),M(ML,Ofe,null),e(Hi,UIo),e(Hi,Vfe),e(Vfe,JIo),b(m,gqe,_),b(m,Io,_),M(EL,Io,null),e(Io,YIo),e(Io,Ui),e(Ui,KIo),e(Ui,dO),e(dO,ZIo),e(Ui,eqo),e(Ui,cO),e(cO,oqo),e(Ui,rqo),e(Io,tqo),e(Io,CL),e(CL,aqo),e(CL,Xfe),e(Xfe,nqo),e(CL,sqo),e(Io,lqo),e(Io,mt),M(wL,mt,null),e(mt,iqo),e(mt,zfe),e(zfe,dqo),e(mt,cqo),e(mt,Ji),e(Ji,mqo),e(Ji,Wfe),e(Wfe,fqo),e(Ji,gqo),e(Ji,mO),e(mO,hqo),e(Ji,uqo),e(mt,pqo),M(gF,mt,null),e(Io,_qo),e(Io,ao),M(AL,ao,null),e(ao,bqo),e(ao,Qfe),e(Qfe,vqo),e(ao,Fqo),e(ao,Ia),e(Ia,Tqo),e(Ia,Hfe),e(Hfe,Mqo),e(Ia,Eqo),e(Ia,Ufe),e(Ufe,Cqo),e(Ia,wqo),e(Ia,Jfe),e(Jfe,Aqo),e(Ia,yqo),e(ao,Lqo),e(ao,U),e(U,hF),e(hF,Yfe),e(Yfe,xqo),e(hF,$qo),e(hF,fO),e(fO,kqo),e(hF,Sqo),e(U,Rqo),e(U,uF),e(uF,Kfe),e(Kfe,Pqo),e(uF,Bqo),e(uF,gO),e(gO,Iqo),e(uF,qqo),e(U,Nqo),e(U,pF),e(pF,Zfe),e(Zfe,jqo),e(pF,Dqo),e(pF,hO),e(hO,Gqo),e(pF,Oqo),e(U,Vqo),e(U,_F),e(_F,ege),e(ege,Xqo),e(_F,zqo),e(_F,uO),e(uO,Wqo),e(_F,Qqo),e(U,Hqo),e(U,bF),e(bF,oge),e(oge,Uqo),e(bF,Jqo),e(bF,pO),e(pO,Yqo),e(bF,Kqo),e(U,Zqo),e(U,vF),e(vF,rge),e(rge,eNo),e(vF,oNo),e(vF,_O),e(_O,rNo),e(vF,tNo),e(U,aNo),e(U,FF),e(FF,tge),e(tge,nNo),e(FF,sNo),e(FF,bO),e(bO,lNo),e(FF,iNo),e(U,dNo),e(U,TF),e(TF,age),e(age,cNo),e(TF,mNo),e(TF,vO),e(vO,fNo),e(TF,gNo),e(U,hNo),e(U,MF),e(MF,nge),e(nge,uNo),e(MF,pNo),e(MF,FO),e(FO,_No),e(MF,bNo),e(U,vNo),e(U,EF),e(EF,sge),e(sge,FNo),e(EF,TNo),e(EF,TO),e(TO,MNo),e(EF,ENo),e(U,CNo),e(U,CF),e(CF,lge),e(lge,wNo),e(CF,ANo),e(CF,MO),e(MO,yNo),e(CF,LNo),e(U,xNo),e(U,wF),e(wF,ige),e(ige,$No),e(wF,kNo),e(wF,EO),e(EO,SNo),e(wF,RNo),e(U,PNo),e(U,AF),e(AF,dge),e(dge,BNo),e(AF,INo),e(AF,CO),e(CO,qNo),e(AF,NNo),e(U,jNo),e(U,yF),e(yF,cge),e(cge,DNo),e(yF,GNo),e(yF,wO),e(wO,ONo),e(yF,VNo),e(U,XNo),e(U,LF),e(LF,mge),e(mge,zNo),e(LF,WNo),e(LF,AO),e(AO,QNo),e(LF,HNo),e(U,UNo),e(U,xF),e(xF,fge),e(fge,JNo),e(xF,YNo),e(xF,yO),e(yO,KNo),e(xF,ZNo),e(U,ejo),e(U,$F),e($F,gge),e(gge,ojo),e($F,rjo),e($F,LO),e(LO,tjo),e($F,ajo),e(U,njo),e(U,kF),e(kF,hge),e(hge,sjo),e(kF,ljo),e(kF,xO),e(xO,ijo),e(kF,djo),e(U,cjo),e(U,SF),e(SF,uge),e(uge,mjo),e(SF,fjo),e(SF,$O),e($O,gjo),e(SF,hjo),e(U,ujo),e(U,RF),e(RF,pge),e(pge,pjo),e(RF,_jo),e(RF,kO),e(kO,bjo),e(RF,vjo),e(U,Fjo),e(U,PF),e(PF,_ge),e(_ge,Tjo),e(PF,Mjo),e(PF,SO),e(SO,Ejo),e(PF,Cjo),e(U,wjo),e(U,BF),e(BF,bge),e(bge,Ajo),e(BF,yjo),e(BF,RO),e(RO,Ljo),e(BF,xjo),e(U,$jo),e(U,IF),e(IF,vge),e(vge,kjo),e(IF,Sjo),e(IF,PO),e(PO,Rjo),e(IF,Pjo),e(U,Bjo),e(U,qF),e(qF,Fge),e(Fge,Ijo),e(qF,qjo),e(qF,BO),e(BO,Njo),e(qF,jjo),e(U,Djo),e(U,NF),e(NF,Tge),e(Tge,Gjo),e(NF,Ojo),e(NF,IO),e(IO,Vjo),e(NF,Xjo),e(U,zjo),e(U,jF),e(jF,Mge),e(Mge,Wjo),e(jF,Qjo),e(jF,qO),e(qO,Hjo),e(jF,Ujo),e(U,Jjo),e(U,DF),e(DF,Ege),e(Ege,Yjo),e(DF,Kjo),e(DF,NO),e(NO,Zjo),e(DF,eDo),e(U,oDo),e(U,GF),e(GF,Cge),e(Cge,rDo),e(GF,tDo),e(GF,jO),e(jO,aDo),e(GF,nDo),e(U,sDo),e(U,OF),e(OF,wge),e(wge,lDo),e(OF,iDo),e(OF,DO),e(DO,dDo),e(OF,cDo),e(U,mDo),e(U,VF),e(VF,Age),e(Age,fDo),e(VF,gDo),e(VF,GO),e(GO,hDo),e(VF,uDo),e(U,pDo),e(U,XF),e(XF,yge),e(yge,_Do),e(XF,bDo),e(XF,OO),e(OO,vDo),e(XF,FDo),e(U,TDo),e(U,zF),e(zF,Lge),e(Lge,MDo),e(zF,EDo),e(zF,VO),e(VO,CDo),e(zF,wDo),e(U,ADo),e(U,WF),e(WF,xge),e(xge,yDo),e(WF,LDo),e(WF,XO),e(XO,xDo),e(WF,$Do),e(ao,kDo),e(ao,QF),e(QF,SDo),e(QF,$ge),e($ge,RDo),e(QF,PDo),e(QF,kge),e(kge,BDo),e(ao,IDo),M(HF,ao,null),b(m,hqe,_),b(m,Yi,_),e(Yi,UF),e(UF,Sge),M(yL,Sge,null),e(Yi,qDo),e(Yi,Rge),e(Rge,NDo),b(m,uqe,_),b(m,qo,_),M(LL,qo,null),e(qo,jDo),e(qo,Ki),e(Ki,DDo),e(Ki,zO),e(zO,GDo),e(Ki,ODo),e(Ki,WO),e(WO,VDo),e(Ki,XDo),e(qo,zDo),e(qo,xL),e(xL,WDo),e(xL,Pge),e(Pge,QDo),e(xL,HDo),e(qo,UDo),e(qo,ft),M($L,ft,null),e(ft,JDo),e(ft,Bge),e(Bge,YDo),e(ft,KDo),e(ft,Zi),e(Zi,ZDo),e(Zi,Ige),e(Ige,eGo),e(Zi,oGo),e(Zi,QO),e(QO,rGo),e(Zi,tGo),e(ft,aGo),M(JF,ft,null),e(qo,nGo),e(qo,no),M(kL,no,null),e(no,sGo),e(no,qge),e(qge,lGo),e(no,iGo),e(no,qa),e(qa,dGo),e(qa,Nge),e(Nge,cGo),e(qa,mGo),e(qa,jge),e(jge,fGo),e(qa,gGo),e(qa,Dge),e(Dge,hGo),e(qa,uGo),e(no,pGo),e(no,V),e(V,YF),e(YF,Gge),e(Gge,_Go),e(YF,bGo),e(YF,HO),e(HO,vGo),e(YF,FGo),e(V,TGo),e(V,KF),e(KF,Oge),e(Oge,MGo),e(KF,EGo),e(KF,UO),e(UO,CGo),e(KF,wGo),e(V,AGo),e(V,ZF),e(ZF,Vge),e(Vge,yGo),e(ZF,LGo),e(ZF,JO),e(JO,xGo),e(ZF,$Go),e(V,kGo),e(V,e1),e(e1,Xge),e(Xge,SGo),e(e1,RGo),e(e1,YO),e(YO,PGo),e(e1,BGo),e(V,IGo),e(V,o1),e(o1,zge),e(zge,qGo),e(o1,NGo),e(o1,KO),e(KO,jGo),e(o1,DGo),e(V,GGo),e(V,r1),e(r1,Wge),e(Wge,OGo),e(r1,VGo),e(r1,ZO),e(ZO,XGo),e(r1,zGo),e(V,WGo),e(V,t1),e(t1,Qge),e(Qge,QGo),e(t1,HGo),e(t1,eV),e(eV,UGo),e(t1,JGo),e(V,YGo),e(V,a1),e(a1,Hge),e(Hge,KGo),e(a1,ZGo),e(a1,oV),e(oV,eOo),e(a1,oOo),e(V,rOo),e(V,n1),e(n1,Uge),e(Uge,tOo),e(n1,aOo),e(n1,rV),e(rV,nOo),e(n1,sOo),e(V,lOo),e(V,s1),e(s1,Jge),e(Jge,iOo),e(s1,dOo),e(s1,tV),e(tV,cOo),e(s1,mOo),e(V,fOo),e(V,l1),e(l1,Yge),e(Yge,gOo),e(l1,hOo),e(l1,aV),e(aV,uOo),e(l1,pOo),e(V,_Oo),e(V,i1),e(i1,Kge),e(Kge,bOo),e(i1,vOo),e(i1,nV),e(nV,FOo),e(i1,TOo),e(V,MOo),e(V,d1),e(d1,Zge),e(Zge,EOo),e(d1,COo),e(d1,sV),e(sV,wOo),e(d1,AOo),e(V,yOo),e(V,c1),e(c1,ehe),e(ehe,LOo),e(c1,xOo),e(c1,lV),e(lV,$Oo),e(c1,kOo),e(V,SOo),e(V,m1),e(m1,ohe),e(ohe,ROo),e(m1,POo),e(m1,iV),e(iV,BOo),e(m1,IOo),e(V,qOo),e(V,f1),e(f1,rhe),e(rhe,NOo),e(f1,jOo),e(f1,dV),e(dV,DOo),e(f1,GOo),e(V,OOo),e(V,g1),e(g1,the),e(the,VOo),e(g1,XOo),e(g1,cV),e(cV,zOo),e(g1,WOo),e(V,QOo),e(V,h1),e(h1,ahe),e(ahe,HOo),e(h1,UOo),e(h1,mV),e(mV,JOo),e(h1,YOo),e(V,KOo),e(V,u1),e(u1,nhe),e(nhe,ZOo),e(u1,eVo),e(u1,fV),e(fV,oVo),e(u1,rVo),e(V,tVo),e(V,p1),e(p1,she),e(she,aVo),e(p1,nVo),e(p1,gV),e(gV,sVo),e(p1,lVo),e(V,iVo),e(V,_1),e(_1,lhe),e(lhe,dVo),e(_1,cVo),e(_1,hV),e(hV,mVo),e(_1,fVo),e(V,gVo),e(V,b1),e(b1,ihe),e(ihe,hVo),e(b1,uVo),e(b1,uV),e(uV,pVo),e(b1,_Vo),e(V,bVo),e(V,v1),e(v1,dhe),e(dhe,vVo),e(v1,FVo),e(v1,pV),e(pV,TVo),e(v1,MVo),e(V,EVo),e(V,F1),e(F1,che),e(che,CVo),e(F1,wVo),e(F1,_V),e(_V,AVo),e(F1,yVo),e(V,LVo),e(V,T1),e(T1,mhe),e(mhe,xVo),e(T1,$Vo),e(T1,bV),e(bV,kVo),e(T1,SVo),e(V,RVo),e(V,M1),e(M1,fhe),e(fhe,PVo),e(M1,BVo),e(M1,vV),e(vV,IVo),e(M1,qVo),e(V,NVo),e(V,E1),e(E1,ghe),e(ghe,jVo),e(E1,DVo),e(E1,FV),e(FV,GVo),e(E1,OVo),e(V,VVo),e(V,C1),e(C1,hhe),e(hhe,XVo),e(C1,zVo),e(C1,TV),e(TV,WVo),e(C1,QVo),e(V,HVo),e(V,w1),e(w1,uhe),e(uhe,UVo),e(w1,JVo),e(w1,MV),e(MV,YVo),e(w1,KVo),e(V,ZVo),e(V,A1),e(A1,phe),e(phe,eXo),e(A1,oXo),e(A1,EV),e(EV,rXo),e(A1,tXo),e(V,aXo),e(V,y1),e(y1,_he),e(_he,nXo),e(y1,sXo),e(y1,CV),e(CV,lXo),e(y1,iXo),e(V,dXo),e(V,L1),e(L1,bhe),e(bhe,cXo),e(L1,mXo),e(L1,wV),e(wV,fXo),e(L1,gXo),e(V,hXo),e(V,x1),e(x1,vhe),e(vhe,uXo),e(x1,pXo),e(x1,AV),e(AV,_Xo),e(x1,bXo),e(V,vXo),e(V,$1),e($1,Fhe),e(Fhe,FXo),e($1,TXo),e($1,yV),e(yV,MXo),e($1,EXo),e(V,CXo),e(V,k1),e(k1,The),e(The,wXo),e(k1,AXo),e(k1,LV),e(LV,yXo),e(k1,LXo),e(V,xXo),e(V,S1),e(S1,Mhe),e(Mhe,$Xo),e(S1,kXo),e(S1,xV),e(xV,SXo),e(S1,RXo),e(V,PXo),e(V,R1),e(R1,Ehe),e(Ehe,BXo),e(R1,IXo),e(R1,$V),e($V,qXo),e(R1,NXo),e(V,jXo),e(V,P1),e(P1,Che),e(Che,DXo),e(P1,GXo),e(P1,kV),e(kV,OXo),e(P1,VXo),e(V,XXo),e(V,B1),e(B1,whe),e(whe,zXo),e(B1,WXo),e(B1,SV),e(SV,QXo),e(B1,HXo),e(no,UXo),e(no,I1),e(I1,JXo),e(I1,Ahe),e(Ahe,YXo),e(I1,KXo),e(I1,yhe),e(yhe,ZXo),e(no,ezo),M(q1,no,null),b(m,pqe,_),b(m,ed,_),e(ed,N1),e(N1,Lhe),M(SL,Lhe,null),e(ed,ozo),e(ed,xhe),e(xhe,rzo),b(m,_qe,_),b(m,No,_),M(RL,No,null),e(No,tzo),e(No,od),e(od,azo),e(od,RV),e(RV,nzo),e(od,szo),e(od,PV),e(PV,lzo),e(od,izo),e(No,dzo),e(No,PL),e(PL,czo),e(PL,$he),e($he,mzo),e(PL,fzo),e(No,gzo),e(No,gt),M(BL,gt,null),e(gt,hzo),e(gt,khe),e(khe,uzo),e(gt,pzo),e(gt,rd),e(rd,_zo),e(rd,She),e(She,bzo),e(rd,vzo),e(rd,BV),e(BV,Fzo),e(rd,Tzo),e(gt,Mzo),M(j1,gt,null),e(No,Ezo),e(No,so),M(IL,so,null),e(so,Czo),e(so,Rhe),e(Rhe,wzo),e(so,Azo),e(so,Na),e(Na,yzo),e(Na,Phe),e(Phe,Lzo),e(Na,xzo),e(Na,Bhe),e(Bhe,$zo),e(Na,kzo),e(Na,Ihe),e(Ihe,Szo),e(Na,Rzo),e(so,Pzo),e(so,qhe),e(qhe,D1),e(D1,Nhe),e(Nhe,Bzo),e(D1,Izo),e(D1,IV),e(IV,qzo),e(D1,Nzo),e(so,jzo),e(so,G1),e(G1,Dzo),e(G1,jhe),e(jhe,Gzo),e(G1,Ozo),e(G1,Dhe),e(Dhe,Vzo),e(so,Xzo),M(O1,so,null),b(m,bqe,_),b(m,td,_),e(td,V1),e(V1,Ghe),M(qL,Ghe,null),e(td,zzo),e(td,Ohe),e(Ohe,Wzo),b(m,vqe,_),b(m,jo,_),M(NL,jo,null),e(jo,Qzo),e(jo,ad),e(ad,Hzo),e(ad,qV),e(qV,Uzo),e(ad,Jzo),e(ad,NV),e(NV,Yzo),e(ad,Kzo),e(jo,Zzo),e(jo,jL),e(jL,eWo),e(jL,Vhe),e(Vhe,oWo),e(jL,rWo),e(jo,tWo),e(jo,ht),M(DL,ht,null),e(ht,aWo),e(ht,Xhe),e(Xhe,nWo),e(ht,sWo),e(ht,nd),e(nd,lWo),e(nd,zhe),e(zhe,iWo),e(nd,dWo),e(nd,jV),e(jV,cWo),e(nd,mWo),e(ht,fWo),M(X1,ht,null),e(jo,gWo),e(jo,lo),M(GL,lo,null),e(lo,hWo),e(lo,Whe),e(Whe,uWo),e(lo,pWo),e(lo,ja),e(ja,_Wo),e(ja,Qhe),e(Qhe,bWo),e(ja,vWo),e(ja,Hhe),e(Hhe,FWo),e(ja,TWo),e(ja,Uhe),e(Uhe,MWo),e(ja,EWo),e(lo,CWo),e(lo,Fe),e(Fe,z1),e(z1,Jhe),e(Jhe,wWo),e(z1,AWo),e(z1,DV),e(DV,yWo),e(z1,LWo),e(Fe,xWo),e(Fe,W1),e(W1,Yhe),e(Yhe,$Wo),e(W1,kWo),e(W1,GV),e(GV,SWo),e(W1,RWo),e(Fe,PWo),e(Fe,Q1),e(Q1,Khe),e(Khe,BWo),e(Q1,IWo),e(Q1,OV),e(OV,qWo),e(Q1,NWo),e(Fe,jWo),e(Fe,Ps),e(Ps,Zhe),e(Zhe,DWo),e(Ps,GWo),e(Ps,VV),e(VV,OWo),e(Ps,VWo),e(Ps,XV),e(XV,XWo),e(Ps,zWo),e(Fe,WWo),e(Fe,H1),e(H1,eue),e(eue,QWo),e(H1,HWo),e(H1,zV),e(zV,UWo),e(H1,JWo),e(Fe,YWo),e(Fe,ut),e(ut,oue),e(oue,KWo),e(ut,ZWo),e(ut,WV),e(WV,eQo),e(ut,oQo),e(ut,QV),e(QV,rQo),e(ut,tQo),e(ut,HV),e(HV,aQo),e(ut,nQo),e(Fe,sQo),e(Fe,U1),e(U1,rue),e(rue,lQo),e(U1,iQo),e(U1,UV),e(UV,dQo),e(U1,cQo),e(Fe,mQo),e(Fe,J1),e(J1,tue),e(tue,fQo),e(J1,gQo),e(J1,JV),e(JV,hQo),e(J1,uQo),e(Fe,pQo),e(Fe,Y1),e(Y1,aue),e(aue,_Qo),e(Y1,bQo),e(Y1,YV),e(YV,vQo),e(Y1,FQo),e(Fe,TQo),e(Fe,K1),e(K1,nue),e(nue,MQo),e(K1,EQo),e(K1,KV),e(KV,CQo),e(K1,wQo),e(Fe,AQo),e(Fe,Z1),e(Z1,sue),e(sue,yQo),e(Z1,LQo),e(Z1,ZV),e(ZV,xQo),e(Z1,$Qo),e(Fe,kQo),e(Fe,eT),e(eT,lue),e(lue,SQo),e(eT,RQo),e(eT,eX),e(eX,PQo),e(eT,BQo),e(Fe,IQo),e(Fe,oT),e(oT,iue),e(iue,qQo),e(oT,NQo),e(oT,oX),e(oX,jQo),e(oT,DQo),e(lo,GQo),e(lo,rT),e(rT,OQo),e(rT,due),e(due,VQo),e(rT,XQo),e(rT,cue),e(cue,zQo),e(lo,WQo),M(tT,lo,null),b(m,Fqe,_),b(m,sd,_),e(sd,aT),e(aT,mue),M(OL,mue,null),e(sd,QQo),e(sd,fue),e(fue,HQo),b(m,Tqe,_),b(m,Do,_),M(VL,Do,null),e(Do,UQo),e(Do,ld),e(ld,JQo),e(ld,rX),e(rX,YQo),e(ld,KQo),e(ld,tX),e(tX,ZQo),e(ld,eHo),e(Do,oHo),e(Do,XL),e(XL,rHo),e(XL,gue),e(gue,tHo),e(XL,aHo),e(Do,nHo),e(Do,pt),M(zL,pt,null),e(pt,sHo),e(pt,hue),e(hue,lHo),e(pt,iHo),e(pt,id),e(id,dHo),e(id,uue),e(uue,cHo),e(id,mHo),e(id,aX),e(aX,fHo),e(id,gHo),e(pt,hHo),M(nT,pt,null),e(Do,uHo),e(Do,io),M(WL,io,null),e(io,pHo),e(io,pue),e(pue,_Ho),e(io,bHo),e(io,Da),e(Da,vHo),e(Da,_ue),e(_ue,FHo),e(Da,THo),e(Da,bue),e(bue,MHo),e(Da,EHo),e(Da,vue),e(vue,CHo),e(Da,wHo),e(io,AHo),e(io,Fue),e(Fue,sT),e(sT,Tue),e(Tue,yHo),e(sT,LHo),e(sT,nX),e(nX,xHo),e(sT,$Ho),e(io,kHo),e(io,lT),e(lT,SHo),e(lT,Mue),e(Mue,RHo),e(lT,PHo),e(lT,Eue),e(Eue,BHo),e(io,IHo),M(iT,io,null),b(m,Mqe,_),b(m,dd,_),e(dd,dT),e(dT,Cue),M(QL,Cue,null),e(dd,qHo),e(dd,wue),e(wue,NHo),b(m,Eqe,_),b(m,Go,_),M(HL,Go,null),e(Go,jHo),e(Go,cd),e(cd,DHo),e(cd,sX),e(sX,GHo),e(cd,OHo),e(cd,lX),e(lX,VHo),e(cd,XHo),e(Go,zHo),e(Go,UL),e(UL,WHo),e(UL,Aue),e(Aue,QHo),e(UL,HHo),e(Go,UHo),e(Go,_t),M(JL,_t,null),e(_t,JHo),e(_t,yue),e(yue,YHo),e(_t,KHo),e(_t,md),e(md,ZHo),e(md,Lue),e(Lue,eUo),e(md,oUo),e(md,iX),e(iX,rUo),e(md,tUo),e(_t,aUo),M(cT,_t,null),e(Go,nUo),e(Go,co),M(YL,co,null),e(co,sUo),e(co,xue),e(xue,lUo),e(co,iUo),e(co,Ga),e(Ga,dUo),e(Ga,$ue),e($ue,cUo),e(Ga,mUo),e(Ga,kue),e(kue,fUo),e(Ga,gUo),e(Ga,Sue),e(Sue,hUo),e(Ga,uUo),e(co,pUo),e(co,ke),e(ke,mT),e(mT,Rue),e(Rue,_Uo),e(mT,bUo),e(mT,dX),e(dX,vUo),e(mT,FUo),e(ke,TUo),e(ke,fT),e(fT,Pue),e(Pue,MUo),e(fT,EUo),e(fT,cX),e(cX,CUo),e(fT,wUo),e(ke,AUo),e(ke,gT),e(gT,Bue),e(Bue,yUo),e(gT,LUo),e(gT,mX),e(mX,xUo),e(gT,$Uo),e(ke,kUo),e(ke,hT),e(hT,Iue),e(Iue,SUo),e(hT,RUo),e(hT,fX),e(fX,PUo),e(hT,BUo),e(ke,IUo),e(ke,uT),e(uT,que),e(que,qUo),e(uT,NUo),e(uT,gX),e(gX,jUo),e(uT,DUo),e(ke,GUo),e(ke,pT),e(pT,Nue),e(Nue,OUo),e(pT,VUo),e(pT,hX),e(hX,XUo),e(pT,zUo),e(ke,WUo),e(ke,_T),e(_T,jue),e(jue,QUo),e(_T,HUo),e(_T,uX),e(uX,UUo),e(_T,JUo),e(ke,YUo),e(ke,bT),e(bT,Due),e(Due,KUo),e(bT,ZUo),e(bT,pX),e(pX,eJo),e(bT,oJo),e(ke,rJo),e(ke,vT),e(vT,Gue),e(Gue,tJo),e(vT,aJo),e(vT,_X),e(_X,nJo),e(vT,sJo),e(co,lJo),e(co,FT),e(FT,iJo),e(FT,Oue),e(Oue,dJo),e(FT,cJo),e(FT,Vue),e(Vue,mJo),e(co,fJo),M(TT,co,null),b(m,Cqe,_),b(m,fd,_),e(fd,MT),e(MT,Xue),M(KL,Xue,null),e(fd,gJo),e(fd,zue),e(zue,hJo),b(m,wqe,_),b(m,Oo,_),M(ZL,Oo,null),e(Oo,uJo),e(Oo,gd),e(gd,pJo),e(gd,bX),e(bX,_Jo),e(gd,bJo),e(gd,vX),e(vX,vJo),e(gd,FJo),e(Oo,TJo),e(Oo,e8),e(e8,MJo),e(e8,Wue),e(Wue,EJo),e(e8,CJo),e(Oo,wJo),e(Oo,bt),M(o8,bt,null),e(bt,AJo),e(bt,Que),e(Que,yJo),e(bt,LJo),e(bt,hd),e(hd,xJo),e(hd,Hue),e(Hue,$Jo),e(hd,kJo),e(hd,FX),e(FX,SJo),e(hd,RJo),e(bt,PJo),M(ET,bt,null),e(Oo,BJo),e(Oo,mo),M(r8,mo,null),e(mo,IJo),e(mo,Uue),e(Uue,qJo),e(mo,NJo),e(mo,Oa),e(Oa,jJo),e(Oa,Jue),e(Jue,DJo),e(Oa,GJo),e(Oa,Yue),e(Yue,OJo),e(Oa,VJo),e(Oa,Kue),e(Kue,XJo),e(Oa,zJo),e(mo,WJo),e(mo,Kr),e(Kr,CT),e(CT,Zue),e(Zue,QJo),e(CT,HJo),e(CT,TX),e(TX,UJo),e(CT,JJo),e(Kr,YJo),e(Kr,wT),e(wT,epe),e(epe,KJo),e(wT,ZJo),e(wT,MX),e(MX,eYo),e(wT,oYo),e(Kr,rYo),e(Kr,AT),e(AT,ope),e(ope,tYo),e(AT,aYo),e(AT,EX),e(EX,nYo),e(AT,sYo),e(Kr,lYo),e(Kr,yT),e(yT,rpe),e(rpe,iYo),e(yT,dYo),e(yT,CX),e(CX,cYo),e(yT,mYo),e(Kr,fYo),e(Kr,LT),e(LT,tpe),e(tpe,gYo),e(LT,hYo),e(LT,wX),e(wX,uYo),e(LT,pYo),e(mo,_Yo),e(mo,xT),e(xT,bYo),e(xT,ape),e(ape,vYo),e(xT,FYo),e(xT,npe),e(npe,TYo),e(mo,MYo),M($T,mo,null),b(m,Aqe,_),b(m,ud,_),e(ud,kT),e(kT,spe),M(t8,spe,null),e(ud,EYo),e(ud,lpe),e(lpe,CYo),b(m,yqe,_),b(m,Vo,_),M(a8,Vo,null),e(Vo,wYo),e(Vo,pd),e(pd,AYo),e(pd,AX),e(AX,yYo),e(pd,LYo),e(pd,yX),e(yX,xYo),e(pd,$Yo),e(Vo,kYo),e(Vo,n8),e(n8,SYo),e(n8,ipe),e(ipe,RYo),e(n8,PYo),e(Vo,BYo),e(Vo,vt),M(s8,vt,null),e(vt,IYo),e(vt,dpe),e(dpe,qYo),e(vt,NYo),e(vt,_d),e(_d,jYo),e(_d,cpe),e(cpe,DYo),e(_d,GYo),e(_d,LX),e(LX,OYo),e(_d,VYo),e(vt,XYo),M(ST,vt,null),e(Vo,zYo),e(Vo,fo),M(l8,fo,null),e(fo,WYo),e(fo,mpe),e(mpe,QYo),e(fo,HYo),e(fo,Va),e(Va,UYo),e(Va,fpe),e(fpe,JYo),e(Va,YYo),e(Va,gpe),e(gpe,KYo),e(Va,ZYo),e(Va,hpe),e(hpe,eKo),e(Va,oKo),e(fo,rKo),e(fo,Se),e(Se,RT),e(RT,upe),e(upe,tKo),e(RT,aKo),e(RT,xX),e(xX,nKo),e(RT,sKo),e(Se,lKo),e(Se,PT),e(PT,ppe),e(ppe,iKo),e(PT,dKo),e(PT,$X),e($X,cKo),e(PT,mKo),e(Se,fKo),e(Se,BT),e(BT,_pe),e(_pe,gKo),e(BT,hKo),e(BT,kX),e(kX,uKo),e(BT,pKo),e(Se,_Ko),e(Se,IT),e(IT,bpe),e(bpe,bKo),e(IT,vKo),e(IT,SX),e(SX,FKo),e(IT,TKo),e(Se,MKo),e(Se,qT),e(qT,vpe),e(vpe,EKo),e(qT,CKo),e(qT,RX),e(RX,wKo),e(qT,AKo),e(Se,yKo),e(Se,NT),e(NT,Fpe),e(Fpe,LKo),e(NT,xKo),e(NT,PX),e(PX,$Ko),e(NT,kKo),e(Se,SKo),e(Se,jT),e(jT,Tpe),e(Tpe,RKo),e(jT,PKo),e(jT,BX),e(BX,BKo),e(jT,IKo),e(Se,qKo),e(Se,DT),e(DT,Mpe),e(Mpe,NKo),e(DT,jKo),e(DT,IX),e(IX,DKo),e(DT,GKo),e(Se,OKo),e(Se,GT),e(GT,Epe),e(Epe,VKo),e(GT,XKo),e(GT,qX),e(qX,zKo),e(GT,WKo),e(fo,QKo),e(fo,OT),e(OT,HKo),e(OT,Cpe),e(Cpe,UKo),e(OT,JKo),e(OT,wpe),e(wpe,YKo),e(fo,KKo),M(VT,fo,null),b(m,Lqe,_),b(m,bd,_),e(bd,XT),e(XT,Ape),M(i8,Ape,null),e(bd,ZKo),e(bd,ype),e(ype,eZo),b(m,xqe,_),b(m,Xo,_),M(d8,Xo,null),e(Xo,oZo),e(Xo,vd),e(vd,rZo),e(vd,NX),e(NX,tZo),e(vd,aZo),e(vd,jX),e(jX,nZo),e(vd,sZo),e(Xo,lZo),e(Xo,c8),e(c8,iZo),e(c8,Lpe),e(Lpe,dZo),e(c8,cZo),e(Xo,mZo),e(Xo,Ft),M(m8,Ft,null),e(Ft,fZo),e(Ft,xpe),e(xpe,gZo),e(Ft,hZo),e(Ft,Fd),e(Fd,uZo),e(Fd,$pe),e($pe,pZo),e(Fd,_Zo),e(Fd,DX),e(DX,bZo),e(Fd,vZo),e(Ft,FZo),M(zT,Ft,null),e(Xo,TZo),e(Xo,go),M(f8,go,null),e(go,MZo),e(go,kpe),e(kpe,EZo),e(go,CZo),e(go,Xa),e(Xa,wZo),e(Xa,Spe),e(Spe,AZo),e(Xa,yZo),e(Xa,Rpe),e(Rpe,LZo),e(Xa,xZo),e(Xa,Ppe),e(Ppe,$Zo),e(Xa,kZo),e(go,SZo),e(go,g8),e(g8,WT),e(WT,Bpe),e(Bpe,RZo),e(WT,PZo),e(WT,GX),e(GX,BZo),e(WT,IZo),e(g8,qZo),e(g8,QT),e(QT,Ipe),e(Ipe,NZo),e(QT,jZo),e(QT,OX),e(OX,DZo),e(QT,GZo),e(go,OZo),e(go,HT),e(HT,VZo),e(HT,qpe),e(qpe,XZo),e(HT,zZo),e(HT,Npe),e(Npe,WZo),e(go,QZo),M(UT,go,null),b(m,$qe,_),b(m,Td,_),e(Td,JT),e(JT,jpe),M(h8,jpe,null),e(Td,HZo),e(Td,Dpe),e(Dpe,UZo),b(m,kqe,_),b(m,zo,_),M(u8,zo,null),e(zo,JZo),e(zo,Md),e(Md,YZo),e(Md,VX),e(VX,KZo),e(Md,ZZo),e(Md,XX),e(XX,eer),e(Md,oer),e(zo,rer),e(zo,p8),e(p8,ter),e(p8,Gpe),e(Gpe,aer),e(p8,ner),e(zo,ser),e(zo,Tt),M(_8,Tt,null),e(Tt,ler),e(Tt,Ope),e(Ope,ier),e(Tt,der),e(Tt,Ed),e(Ed,cer),e(Ed,Vpe),e(Vpe,mer),e(Ed,fer),e(Ed,zX),e(zX,ger),e(Ed,her),e(Tt,uer),M(YT,Tt,null),e(zo,per),e(zo,ho),M(b8,ho,null),e(ho,_er),e(ho,Xpe),e(Xpe,ber),e(ho,ver),e(ho,za),e(za,Fer),e(za,zpe),e(zpe,Ter),e(za,Mer),e(za,Wpe),e(Wpe,Eer),e(za,Cer),e(za,Qpe),e(Qpe,wer),e(za,Aer),e(ho,yer),e(ho,Zr),e(Zr,KT),e(KT,Hpe),e(Hpe,Ler),e(KT,xer),e(KT,WX),e(WX,$er),e(KT,ker),e(Zr,Ser),e(Zr,ZT),e(ZT,Upe),e(Upe,Rer),e(ZT,Per),e(ZT,QX),e(QX,Ber),e(ZT,Ier),e(Zr,qer),e(Zr,eM),e(eM,Jpe),e(Jpe,Ner),e(eM,jer),e(eM,HX),e(HX,Der),e(eM,Ger),e(Zr,Oer),e(Zr,oM),e(oM,Ype),e(Ype,Ver),e(oM,Xer),e(oM,UX),e(UX,zer),e(oM,Wer),e(Zr,Qer),e(Zr,rM),e(rM,Kpe),e(Kpe,Her),e(rM,Uer),e(rM,JX),e(JX,Jer),e(rM,Yer),e(ho,Ker),e(ho,tM),e(tM,Zer),e(tM,Zpe),e(Zpe,eor),e(tM,oor),e(tM,e_e),e(e_e,ror),e(ho,tor),M(aM,ho,null),b(m,Sqe,_),b(m,Cd,_),e(Cd,nM),e(nM,o_e),M(v8,o_e,null),e(Cd,aor),e(Cd,r_e),e(r_e,nor),b(m,Rqe,_),b(m,Wo,_),M(F8,Wo,null),e(Wo,sor),e(Wo,wd),e(wd,lor),e(wd,YX),e(YX,ior),e(wd,dor),e(wd,KX),e(KX,cor),e(wd,mor),e(Wo,gor),e(Wo,T8),e(T8,hor),e(T8,t_e),e(t_e,uor),e(T8,por),e(Wo,_or),e(Wo,Mt),M(M8,Mt,null),e(Mt,bor),e(Mt,a_e),e(a_e,vor),e(Mt,For),e(Mt,Ad),e(Ad,Tor),e(Ad,n_e),e(n_e,Mor),e(Ad,Eor),e(Ad,ZX),e(ZX,Cor),e(Ad,wor),e(Mt,Aor),M(sM,Mt,null),e(Wo,yor),e(Wo,uo),M(E8,uo,null),e(uo,Lor),e(uo,s_e),e(s_e,xor),e(uo,$or),e(uo,Wa),e(Wa,kor),e(Wa,l_e),e(l_e,Sor),e(Wa,Ror),e(Wa,i_e),e(i_e,Por),e(Wa,Bor),e(Wa,d_e),e(d_e,Ior),e(Wa,qor),e(uo,Nor),e(uo,yd),e(yd,lM),e(lM,c_e),e(c_e,jor),e(lM,Dor),e(lM,ez),e(ez,Gor),e(lM,Oor),e(yd,Vor),e(yd,iM),e(iM,m_e),e(m_e,Xor),e(iM,zor),e(iM,oz),e(oz,Wor),e(iM,Qor),e(yd,Hor),e(yd,dM),e(dM,f_e),e(f_e,Uor),e(dM,Jor),e(dM,rz),e(rz,Yor),e(dM,Kor),e(uo,Zor),e(uo,cM),e(cM,err),e(cM,g_e),e(g_e,orr),e(cM,rrr),e(cM,h_e),e(h_e,trr),e(uo,arr),M(mM,uo,null),b(m,Pqe,_),b(m,Ld,_),e(Ld,fM),e(fM,u_e),M(C8,u_e,null),e(Ld,nrr),e(Ld,p_e),e(p_e,srr),b(m,Bqe,_),b(m,Qo,_),M(w8,Qo,null),e(Qo,lrr),e(Qo,xd),e(xd,irr),e(xd,tz),e(tz,drr),e(xd,crr),e(xd,az),e(az,mrr),e(xd,frr),e(Qo,grr),e(Qo,A8),e(A8,hrr),e(A8,__e),e(__e,urr),e(A8,prr),e(Qo,_rr),e(Qo,Et),M(y8,Et,null),e(Et,brr),e(Et,b_e),e(b_e,vrr),e(Et,Frr),e(Et,$d),e($d,Trr),e($d,v_e),e(v_e,Mrr),e($d,Err),e($d,nz),e(nz,Crr),e($d,wrr),e(Et,Arr),M(gM,Et,null),e(Qo,yrr),e(Qo,po),M(L8,po,null),e(po,Lrr),e(po,F_e),e(F_e,xrr),e(po,$rr),e(po,Qa),e(Qa,krr),e(Qa,T_e),e(T_e,Srr),e(Qa,Rrr),e(Qa,M_e),e(M_e,Prr),e(Qa,Brr),e(Qa,E_e),e(E_e,Irr),e(Qa,qrr),e(po,Nrr),e(po,x8),e(x8,hM),e(hM,C_e),e(C_e,jrr),e(hM,Drr),e(hM,sz),e(sz,Grr),e(hM,Orr),e(x8,Vrr),e(x8,uM),e(uM,w_e),e(w_e,Xrr),e(uM,zrr),e(uM,lz),e(lz,Wrr),e(uM,Qrr),e(po,Hrr),e(po,pM),e(pM,Urr),e(pM,A_e),e(A_e,Jrr),e(pM,Yrr),e(pM,y_e),e(y_e,Krr),e(po,Zrr),M(_M,po,null),b(m,Iqe,_),b(m,kd,_),e(kd,bM),e(bM,L_e),M($8,L_e,null),e(kd,etr),e(kd,x_e),e(x_e,otr),b(m,qqe,_),b(m,Ho,_),M(k8,Ho,null),e(Ho,rtr),e(Ho,Sd),e(Sd,ttr),e(Sd,iz),e(iz,atr),e(Sd,ntr),e(Sd,dz),e(dz,str),e(Sd,ltr),e(Ho,itr),e(Ho,S8),e(S8,dtr),e(S8,$_e),e($_e,ctr),e(S8,mtr),e(Ho,ftr),e(Ho,Ct),M(R8,Ct,null),e(Ct,gtr),e(Ct,k_e),e(k_e,htr),e(Ct,utr),e(Ct,Rd),e(Rd,ptr),e(Rd,S_e),e(S_e,_tr),e(Rd,btr),e(Rd,cz),e(cz,vtr),e(Rd,Ftr),e(Ct,Ttr),M(vM,Ct,null),e(Ho,Mtr),e(Ho,_o),M(P8,_o,null),e(_o,Etr),e(_o,R_e),e(R_e,Ctr),e(_o,wtr),e(_o,Ha),e(Ha,Atr),e(Ha,P_e),e(P_e,ytr),e(Ha,Ltr),e(Ha,B_e),e(B_e,xtr),e(Ha,$tr),e(Ha,I_e),e(I_e,ktr),e(Ha,Str),e(_o,Rtr),e(_o,q_e),e(q_e,FM),e(FM,N_e),e(N_e,Ptr),e(FM,Btr),e(FM,mz),e(mz,Itr),e(FM,qtr),e(_o,Ntr),e(_o,TM),e(TM,jtr),e(TM,j_e),e(j_e,Dtr),e(TM,Gtr),e(TM,D_e),e(D_e,Otr),e(_o,Vtr),M(MM,_o,null),b(m,Nqe,_),b(m,Pd,_),e(Pd,EM),e(EM,G_e),M(B8,G_e,null),e(Pd,Xtr),e(Pd,O_e),e(O_e,ztr),b(m,jqe,_),b(m,Uo,_),M(I8,Uo,null),e(Uo,Wtr),e(Uo,Bd),e(Bd,Qtr),e(Bd,fz),e(fz,Htr),e(Bd,Utr),e(Bd,gz),e(gz,Jtr),e(Bd,Ytr),e(Uo,Ktr),e(Uo,q8),e(q8,Ztr),e(q8,V_e),e(V_e,ear),e(q8,oar),e(Uo,rar),e(Uo,wt),M(N8,wt,null),e(wt,tar),e(wt,X_e),e(X_e,aar),e(wt,nar),e(wt,Id),e(Id,sar),e(Id,z_e),e(z_e,lar),e(Id,iar),e(Id,hz),e(hz,dar),e(Id,car),e(wt,mar),M(CM,wt,null),e(Uo,far),e(Uo,bo),M(j8,bo,null),e(bo,gar),e(bo,W_e),e(W_e,har),e(bo,uar),e(bo,Ua),e(Ua,par),e(Ua,Q_e),e(Q_e,_ar),e(Ua,bar),e(Ua,H_e),e(H_e,Far),e(Ua,Tar),e(Ua,U_e),e(U_e,Mar),e(Ua,Ear),e(bo,Car),e(bo,Ja),e(Ja,wM),e(wM,J_e),e(J_e,war),e(wM,Aar),e(wM,uz),e(uz,yar),e(wM,Lar),e(Ja,xar),e(Ja,AM),e(AM,Y_e),e(Y_e,$ar),e(AM,kar),e(AM,pz),e(pz,Sar),e(AM,Rar),e(Ja,Par),e(Ja,yM),e(yM,K_e),e(K_e,Bar),e(yM,Iar),e(yM,_z),e(_z,qar),e(yM,Nar),e(Ja,jar),e(Ja,LM),e(LM,Z_e),e(Z_e,Dar),e(LM,Gar),e(LM,bz),e(bz,Oar),e(LM,Var),e(bo,Xar),e(bo,xM),e(xM,zar),e(xM,ebe),e(ebe,War),e(xM,Qar),e(xM,obe),e(obe,Har),e(bo,Uar),M($M,bo,null),b(m,Dqe,_),b(m,qd,_),e(qd,kM),e(kM,rbe),M(D8,rbe,null),e(qd,Jar),e(qd,tbe),e(tbe,Yar),b(m,Gqe,_),b(m,Jo,_),M(G8,Jo,null),e(Jo,Kar),e(Jo,Nd),e(Nd,Zar),e(Nd,vz),e(vz,enr),e(Nd,onr),e(Nd,Fz),e(Fz,rnr),e(Nd,tnr),e(Jo,anr),e(Jo,O8),e(O8,nnr),e(O8,abe),e(abe,snr),e(O8,lnr),e(Jo,inr),e(Jo,At),M(V8,At,null),e(At,dnr),e(At,nbe),e(nbe,cnr),e(At,mnr),e(At,jd),e(jd,fnr),e(jd,sbe),e(sbe,gnr),e(jd,hnr),e(jd,Tz),e(Tz,unr),e(jd,pnr),e(At,_nr),M(SM,At,null),e(Jo,bnr),e(Jo,vo),M(X8,vo,null),e(vo,vnr),e(vo,lbe),e(lbe,Fnr),e(vo,Tnr),e(vo,Ya),e(Ya,Mnr),e(Ya,ibe),e(ibe,Enr),e(Ya,Cnr),e(Ya,dbe),e(dbe,wnr),e(Ya,Anr),e(Ya,cbe),e(cbe,ynr),e(Ya,Lnr),e(vo,xnr),e(vo,mbe),e(mbe,RM),e(RM,fbe),e(fbe,$nr),e(RM,knr),e(RM,Mz),e(Mz,Snr),e(RM,Rnr),e(vo,Pnr),e(vo,PM),e(PM,Bnr),e(PM,gbe),e(gbe,Inr),e(PM,qnr),e(PM,hbe),e(hbe,Nnr),e(vo,jnr),M(BM,vo,null),b(m,Oqe,_),b(m,Dd,_),e(Dd,IM),e(IM,ube),M(z8,ube,null),e(Dd,Dnr),e(Dd,pbe),e(pbe,Gnr),b(m,Vqe,_),b(m,Yo,_),M(W8,Yo,null),e(Yo,Onr),e(Yo,Gd),e(Gd,Vnr),e(Gd,Ez),e(Ez,Xnr),e(Gd,znr),e(Gd,Cz),e(Cz,Wnr),e(Gd,Qnr),e(Yo,Hnr),e(Yo,Q8),e(Q8,Unr),e(Q8,_be),e(_be,Jnr),e(Q8,Ynr),e(Yo,Knr),e(Yo,yt),M(H8,yt,null),e(yt,Znr),e(yt,bbe),e(bbe,esr),e(yt,osr),e(yt,Od),e(Od,rsr),e(Od,vbe),e(vbe,tsr),e(Od,asr),e(Od,wz),e(wz,nsr),e(Od,ssr),e(yt,lsr),M(qM,yt,null),e(Yo,isr),e(Yo,wr),M(U8,wr,null),e(wr,dsr),e(wr,Fbe),e(Fbe,csr),e(wr,msr),e(wr,Ka),e(Ka,fsr),e(Ka,Tbe),e(Tbe,gsr),e(Ka,hsr),e(Ka,Mbe),e(Mbe,usr),e(Ka,psr),e(Ka,Ebe),e(Ebe,_sr),e(Ka,bsr),e(wr,vsr),e(wr,N),e(N,NM),e(NM,Cbe),e(Cbe,Fsr),e(NM,Tsr),e(NM,Az),e(Az,Msr),e(NM,Esr),e(N,Csr),e(N,jM),e(jM,wbe),e(wbe,wsr),e(jM,Asr),e(jM,yz),e(yz,ysr),e(jM,Lsr),e(N,xsr),e(N,DM),e(DM,Abe),e(Abe,$sr),e(DM,ksr),e(DM,Lz),e(Lz,Ssr),e(DM,Rsr),e(N,Psr),e(N,GM),e(GM,ybe),e(ybe,Bsr),e(GM,Isr),e(GM,xz),e(xz,qsr),e(GM,Nsr),e(N,jsr),e(N,OM),e(OM,Lbe),e(Lbe,Dsr),e(OM,Gsr),e(OM,$z),e($z,Osr),e(OM,Vsr),e(N,Xsr),e(N,VM),e(VM,xbe),e(xbe,zsr),e(VM,Wsr),e(VM,kz),e(kz,Qsr),e(VM,Hsr),e(N,Usr),e(N,XM),e(XM,$be),e($be,Jsr),e(XM,Ysr),e(XM,Sz),e(Sz,Ksr),e(XM,Zsr),e(N,elr),e(N,zM),e(zM,kbe),e(kbe,olr),e(zM,rlr),e(zM,Rz),e(Rz,tlr),e(zM,alr),e(N,nlr),e(N,WM),e(WM,Sbe),e(Sbe,slr),e(WM,llr),e(WM,Pz),e(Pz,ilr),e(WM,dlr),e(N,clr),e(N,QM),e(QM,Rbe),e(Rbe,mlr),e(QM,flr),e(QM,Bz),e(Bz,glr),e(QM,hlr),e(N,ulr),e(N,HM),e(HM,Pbe),e(Pbe,plr),e(HM,_lr),e(HM,Iz),e(Iz,blr),e(HM,vlr),e(N,Flr),e(N,UM),e(UM,Bbe),e(Bbe,Tlr),e(UM,Mlr),e(UM,qz),e(qz,Elr),e(UM,Clr),e(N,wlr),e(N,JM),e(JM,Ibe),e(Ibe,Alr),e(JM,ylr),e(JM,Nz),e(Nz,Llr),e(JM,xlr),e(N,$lr),e(N,YM),e(YM,qbe),e(qbe,klr),e(YM,Slr),e(YM,jz),e(jz,Rlr),e(YM,Plr),e(N,Blr),e(N,KM),e(KM,Nbe),e(Nbe,Ilr),e(KM,qlr),e(KM,Dz),e(Dz,Nlr),e(KM,jlr),e(N,Dlr),e(N,ZM),e(ZM,jbe),e(jbe,Glr),e(ZM,Olr),e(ZM,Gz),e(Gz,Vlr),e(ZM,Xlr),e(N,zlr),e(N,e4),e(e4,Dbe),e(Dbe,Wlr),e(e4,Qlr),e(e4,Oz),e(Oz,Hlr),e(e4,Ulr),e(N,Jlr),e(N,Bs),e(Bs,Gbe),e(Gbe,Ylr),e(Bs,Klr),e(Bs,Vz),e(Vz,Zlr),e(Bs,eir),e(Bs,Xz),e(Xz,oir),e(Bs,rir),e(N,tir),e(N,o4),e(o4,Obe),e(Obe,air),e(o4,nir),e(o4,zz),e(zz,sir),e(o4,lir),e(N,iir),e(N,r4),e(r4,Vbe),e(Vbe,dir),e(r4,cir),e(r4,Wz),e(Wz,mir),e(r4,fir),e(N,gir),e(N,t4),e(t4,Xbe),e(Xbe,hir),e(t4,uir),e(t4,Qz),e(Qz,pir),e(t4,_ir),e(N,bir),e(N,a4),e(a4,zbe),e(zbe,vir),e(a4,Fir),e(a4,Hz),e(Hz,Tir),e(a4,Mir),e(N,Eir),e(N,n4),e(n4,Wbe),e(Wbe,Cir),e(n4,wir),e(n4,Uz),e(Uz,Air),e(n4,yir),e(N,Lir),e(N,s4),e(s4,Qbe),e(Qbe,xir),e(s4,$ir),e(s4,Jz),e(Jz,kir),e(s4,Sir),e(N,Rir),e(N,l4),e(l4,Hbe),e(Hbe,Pir),e(l4,Bir),e(l4,Yz),e(Yz,Iir),e(l4,qir),e(N,Nir),e(N,i4),e(i4,Ube),e(Ube,jir),e(i4,Dir),e(i4,Kz),e(Kz,Gir),e(i4,Oir),e(N,Vir),e(N,d4),e(d4,Jbe),e(Jbe,Xir),e(d4,zir),e(d4,Zz),e(Zz,Wir),e(d4,Qir),e(N,Hir),e(N,c4),e(c4,Ybe),e(Ybe,Uir),e(c4,Jir),e(c4,eW),e(eW,Yir),e(c4,Kir),e(N,Zir),e(N,m4),e(m4,Kbe),e(Kbe,edr),e(m4,odr),e(m4,oW),e(oW,rdr),e(m4,tdr),e(N,adr),e(N,f4),e(f4,Zbe),e(Zbe,ndr),e(f4,sdr),e(f4,rW),e(rW,ldr),e(f4,idr),e(N,ddr),e(N,g4),e(g4,e2e),e(e2e,cdr),e(g4,mdr),e(g4,tW),e(tW,fdr),e(g4,gdr),e(N,hdr),e(N,h4),e(h4,o2e),e(o2e,udr),e(h4,pdr),e(h4,aW),e(aW,_dr),e(h4,bdr),e(N,vdr),e(N,u4),e(u4,r2e),e(r2e,Fdr),e(u4,Tdr),e(u4,nW),e(nW,Mdr),e(u4,Edr),e(N,Cdr),e(N,p4),e(p4,t2e),e(t2e,wdr),e(p4,Adr),e(p4,sW),e(sW,ydr),e(p4,Ldr),e(N,xdr),e(N,_4),e(_4,a2e),e(a2e,$dr),e(_4,kdr),e(_4,lW),e(lW,Sdr),e(_4,Rdr),e(N,Pdr),e(N,b4),e(b4,n2e),e(n2e,Bdr),e(b4,Idr),e(b4,iW),e(iW,qdr),e(b4,Ndr),e(N,jdr),e(N,v4),e(v4,s2e),e(s2e,Ddr),e(v4,Gdr),e(v4,dW),e(dW,Odr),e(v4,Vdr),e(N,Xdr),e(N,F4),e(F4,l2e),e(l2e,zdr),e(F4,Wdr),e(F4,cW),e(cW,Qdr),e(F4,Hdr),e(N,Udr),e(N,T4),e(T4,i2e),e(i2e,Jdr),e(T4,Ydr),e(T4,mW),e(mW,Kdr),e(T4,Zdr),e(N,ecr),e(N,M4),e(M4,d2e),e(d2e,ocr),e(M4,rcr),e(M4,fW),e(fW,tcr),e(M4,acr),e(N,ncr),e(N,E4),e(E4,c2e),e(c2e,scr),e(E4,lcr),e(E4,gW),e(gW,icr),e(E4,dcr),e(N,ccr),e(N,C4),e(C4,m2e),e(m2e,mcr),e(C4,fcr),e(C4,hW),e(hW,gcr),e(C4,hcr),e(N,ucr),e(N,w4),e(w4,f2e),e(f2e,pcr),e(w4,_cr),e(w4,uW),e(uW,bcr),e(w4,vcr),e(N,Fcr),e(N,A4),e(A4,g2e),e(g2e,Tcr),e(A4,Mcr),e(A4,pW),e(pW,Ecr),e(A4,Ccr),e(N,wcr),e(N,y4),e(y4,h2e),e(h2e,Acr),e(y4,ycr),e(y4,_W),e(_W,Lcr),e(y4,xcr),e(N,$cr),e(N,L4),e(L4,u2e),e(u2e,kcr),e(L4,Scr),e(L4,bW),e(bW,Rcr),e(L4,Pcr),e(wr,Bcr),M(x4,wr,null),b(m,Xqe,_),b(m,Vd,_),e(Vd,$4),e($4,p2e),M(J8,p2e,null),e(Vd,Icr),e(Vd,_2e),e(_2e,qcr),b(m,zqe,_),b(m,Ko,_),M(Y8,Ko,null),e(Ko,Ncr),e(Ko,Xd),e(Xd,jcr),e(Xd,vW),e(vW,Dcr),e(Xd,Gcr),e(Xd,FW),e(FW,Ocr),e(Xd,Vcr),e(Ko,Xcr),e(Ko,K8),e(K8,zcr),e(K8,b2e),e(b2e,Wcr),e(K8,Qcr),e(Ko,Hcr),e(Ko,Lt),M(Z8,Lt,null),e(Lt,Ucr),e(Lt,v2e),e(v2e,Jcr),e(Lt,Ycr),e(Lt,zd),e(zd,Kcr),e(zd,F2e),e(F2e,Zcr),e(zd,emr),e(zd,TW),e(TW,omr),e(zd,rmr),e(Lt,tmr),M(k4,Lt,null),e(Ko,amr),e(Ko,Ar),M(e7,Ar,null),e(Ar,nmr),e(Ar,T2e),e(T2e,smr),e(Ar,lmr),e(Ar,Za),e(Za,imr),e(Za,M2e),e(M2e,dmr),e(Za,cmr),e(Za,E2e),e(E2e,mmr),e(Za,fmr),e(Za,C2e),e(C2e,gmr),e(Za,hmr),e(Ar,umr),e(Ar,se),e(se,S4),e(S4,w2e),e(w2e,pmr),e(S4,_mr),e(S4,MW),e(MW,bmr),e(S4,vmr),e(se,Fmr),e(se,R4),e(R4,A2e),e(A2e,Tmr),e(R4,Mmr),e(R4,EW),e(EW,Emr),e(R4,Cmr),e(se,wmr),e(se,P4),e(P4,y2e),e(y2e,Amr),e(P4,ymr),e(P4,CW),e(CW,Lmr),e(P4,xmr),e(se,$mr),e(se,B4),e(B4,L2e),e(L2e,kmr),e(B4,Smr),e(B4,wW),e(wW,Rmr),e(B4,Pmr),e(se,Bmr),e(se,I4),e(I4,x2e),e(x2e,Imr),e(I4,qmr),e(I4,AW),e(AW,Nmr),e(I4,jmr),e(se,Dmr),e(se,q4),e(q4,$2e),e($2e,Gmr),e(q4,Omr),e(q4,yW),e(yW,Vmr),e(q4,Xmr),e(se,zmr),e(se,N4),e(N4,k2e),e(k2e,Wmr),e(N4,Qmr),e(N4,LW),e(LW,Hmr),e(N4,Umr),e(se,Jmr),e(se,j4),e(j4,S2e),e(S2e,Ymr),e(j4,Kmr),e(j4,xW),e(xW,Zmr),e(j4,efr),e(se,ofr),e(se,D4),e(D4,R2e),e(R2e,rfr),e(D4,tfr),e(D4,$W),e($W,afr),e(D4,nfr),e(se,sfr),e(se,G4),e(G4,P2e),e(P2e,lfr),e(G4,ifr),e(G4,kW),e(kW,dfr),e(G4,cfr),e(se,mfr),e(se,O4),e(O4,B2e),e(B2e,ffr),e(O4,gfr),e(O4,SW),e(SW,hfr),e(O4,ufr),e(se,pfr),e(se,V4),e(V4,I2e),e(I2e,_fr),e(V4,bfr),e(V4,RW),e(RW,vfr),e(V4,Ffr),e(se,Tfr),e(se,X4),e(X4,q2e),e(q2e,Mfr),e(X4,Efr),e(X4,PW),e(PW,Cfr),e(X4,wfr),e(se,Afr),e(se,z4),e(z4,N2e),e(N2e,yfr),e(z4,Lfr),e(z4,BW),e(BW,xfr),e(z4,$fr),e(se,kfr),e(se,W4),e(W4,j2e),e(j2e,Sfr),e(W4,Rfr),e(W4,IW),e(IW,Pfr),e(W4,Bfr),e(se,Ifr),e(se,Q4),e(Q4,D2e),e(D2e,qfr),e(Q4,Nfr),e(Q4,qW),e(qW,jfr),e(Q4,Dfr),e(se,Gfr),e(se,H4),e(H4,G2e),e(G2e,Ofr),e(H4,Vfr),e(H4,NW),e(NW,Xfr),e(H4,zfr),e(se,Wfr),e(se,U4),e(U4,O2e),e(O2e,Qfr),e(U4,Hfr),e(U4,jW),e(jW,Ufr),e(U4,Jfr),e(se,Yfr),e(se,J4),e(J4,V2e),e(V2e,Kfr),e(J4,Zfr),e(J4,DW),e(DW,egr),e(J4,ogr),e(se,rgr),e(se,Y4),e(Y4,X2e),e(X2e,tgr),e(Y4,agr),e(Y4,GW),e(GW,ngr),e(Y4,sgr),e(se,lgr),e(se,K4),e(K4,z2e),e(z2e,igr),e(K4,dgr),e(K4,OW),e(OW,cgr),e(K4,mgr),e(se,fgr),e(se,Z4),e(Z4,W2e),e(W2e,ggr),e(Z4,hgr),e(Z4,VW),e(VW,ugr),e(Z4,pgr),e(se,_gr),e(se,eE),e(eE,Q2e),e(Q2e,bgr),e(eE,vgr),e(eE,XW),e(XW,Fgr),e(eE,Tgr),e(Ar,Mgr),M(oE,Ar,null),b(m,Wqe,_),b(m,Wd,_),e(Wd,rE),e(rE,H2e),M(o7,H2e,null),e(Wd,Egr),e(Wd,U2e),e(U2e,Cgr),b(m,Qqe,_),b(m,Zo,_),M(r7,Zo,null),e(Zo,wgr),e(Zo,Qd),e(Qd,Agr),e(Qd,zW),e(zW,ygr),e(Qd,Lgr),e(Qd,WW),e(WW,xgr),e(Qd,$gr),e(Zo,kgr),e(Zo,t7),e(t7,Sgr),e(t7,J2e),e(J2e,Rgr),e(t7,Pgr),e(Zo,Bgr),e(Zo,xt),M(a7,xt,null),e(xt,Igr),e(xt,Y2e),e(Y2e,qgr),e(xt,Ngr),e(xt,Hd),e(Hd,jgr),e(Hd,K2e),e(K2e,Dgr),e(Hd,Ggr),e(Hd,QW),e(QW,Ogr),e(Hd,Vgr),e(xt,Xgr),M(tE,xt,null),e(Zo,zgr),e(Zo,yr),M(n7,yr,null),e(yr,Wgr),e(yr,Z2e),e(Z2e,Qgr),e(yr,Hgr),e(yr,en),e(en,Ugr),e(en,eve),e(eve,Jgr),e(en,Ygr),e(en,ove),e(ove,Kgr),e(en,Zgr),e(en,rve),e(rve,ehr),e(en,ohr),e(yr,rhr),e(yr,Te),e(Te,aE),e(aE,tve),e(tve,thr),e(aE,ahr),e(aE,HW),e(HW,nhr),e(aE,shr),e(Te,lhr),e(Te,nE),e(nE,ave),e(ave,ihr),e(nE,dhr),e(nE,UW),e(UW,chr),e(nE,mhr),e(Te,fhr),e(Te,sE),e(sE,nve),e(nve,ghr),e(sE,hhr),e(sE,JW),e(JW,uhr),e(sE,phr),e(Te,_hr),e(Te,lE),e(lE,sve),e(sve,bhr),e(lE,vhr),e(lE,YW),e(YW,Fhr),e(lE,Thr),e(Te,Mhr),e(Te,iE),e(iE,lve),e(lve,Ehr),e(iE,Chr),e(iE,KW),e(KW,whr),e(iE,Ahr),e(Te,yhr),e(Te,dE),e(dE,ive),e(ive,Lhr),e(dE,xhr),e(dE,ZW),e(ZW,$hr),e(dE,khr),e(Te,Shr),e(Te,cE),e(cE,dve),e(dve,Rhr),e(cE,Phr),e(cE,eQ),e(eQ,Bhr),e(cE,Ihr),e(Te,qhr),e(Te,mE),e(mE,cve),e(cve,Nhr),e(mE,jhr),e(mE,oQ),e(oQ,Dhr),e(mE,Ghr),e(Te,Ohr),e(Te,fE),e(fE,mve),e(mve,Vhr),e(fE,Xhr),e(fE,rQ),e(rQ,zhr),e(fE,Whr),e(Te,Qhr),e(Te,gE),e(gE,fve),e(fve,Hhr),e(gE,Uhr),e(gE,tQ),e(tQ,Jhr),e(gE,Yhr),e(Te,Khr),e(Te,hE),e(hE,gve),e(gve,Zhr),e(hE,eur),e(hE,aQ),e(aQ,our),e(hE,rur),e(Te,tur),e(Te,uE),e(uE,hve),e(hve,aur),e(uE,nur),e(uE,nQ),e(nQ,sur),e(uE,lur),e(yr,iur),M(pE,yr,null),b(m,Hqe,_),b(m,Ud,_),e(Ud,_E),e(_E,uve),M(s7,uve,null),e(Ud,dur),e(Ud,pve),e(pve,cur),b(m,Uqe,_),b(m,er,_),M(l7,er,null),e(er,mur),e(er,Jd),e(Jd,fur),e(Jd,sQ),e(sQ,gur),e(Jd,hur),e(Jd,lQ),e(lQ,uur),e(Jd,pur),e(er,_ur),e(er,i7),e(i7,bur),e(i7,_ve),e(_ve,vur),e(i7,Fur),e(er,Tur),e(er,$t),M(d7,$t,null),e($t,Mur),e($t,bve),e(bve,Eur),e($t,Cur),e($t,Yd),e(Yd,wur),e(Yd,vve),e(vve,Aur),e(Yd,yur),e(Yd,iQ),e(iQ,Lur),e(Yd,xur),e($t,$ur),M(bE,$t,null),e(er,kur),e(er,Lr),M(c7,Lr,null),e(Lr,Sur),e(Lr,Fve),e(Fve,Rur),e(Lr,Pur),e(Lr,on),e(on,Bur),e(on,Tve),e(Tve,Iur),e(on,qur),e(on,Mve),e(Mve,Nur),e(on,jur),e(on,Eve),e(Eve,Dur),e(on,Gur),e(Lr,Our),e(Lr,rn),e(rn,vE),e(vE,Cve),e(Cve,Vur),e(vE,Xur),e(vE,dQ),e(dQ,zur),e(vE,Wur),e(rn,Qur),e(rn,FE),e(FE,wve),e(wve,Hur),e(FE,Uur),e(FE,cQ),e(cQ,Jur),e(FE,Yur),e(rn,Kur),e(rn,TE),e(TE,Ave),e(Ave,Zur),e(TE,epr),e(TE,mQ),e(mQ,opr),e(TE,rpr),e(rn,tpr),e(rn,ME),e(ME,yve),e(yve,apr),e(ME,npr),e(ME,fQ),e(fQ,spr),e(ME,lpr),e(Lr,ipr),M(EE,Lr,null),b(m,Jqe,_),b(m,Kd,_),e(Kd,CE),e(CE,Lve),M(m7,Lve,null),e(Kd,dpr),e(Kd,xve),e(xve,cpr),b(m,Yqe,_),b(m,or,_),M(f7,or,null),e(or,mpr),e(or,Zd),e(Zd,fpr),e(Zd,gQ),e(gQ,gpr),e(Zd,hpr),e(Zd,hQ),e(hQ,upr),e(Zd,ppr),e(or,_pr),e(or,g7),e(g7,bpr),e(g7,$ve),e($ve,vpr),e(g7,Fpr),e(or,Tpr),e(or,kt),M(h7,kt,null),e(kt,Mpr),e(kt,kve),e(kve,Epr),e(kt,Cpr),e(kt,ec),e(ec,wpr),e(ec,Sve),e(Sve,Apr),e(ec,ypr),e(ec,uQ),e(uQ,Lpr),e(ec,xpr),e(kt,$pr),M(wE,kt,null),e(or,kpr),e(or,xr),M(u7,xr,null),e(xr,Spr),e(xr,Rve),e(Rve,Rpr),e(xr,Ppr),e(xr,tn),e(tn,Bpr),e(tn,Pve),e(Pve,Ipr),e(tn,qpr),e(tn,Bve),e(Bve,Npr),e(tn,jpr),e(tn,Ive),e(Ive,Dpr),e(tn,Gpr),e(xr,Opr),e(xr,ie),e(ie,AE),e(AE,qve),e(qve,Vpr),e(AE,Xpr),e(AE,pQ),e(pQ,zpr),e(AE,Wpr),e(ie,Qpr),e(ie,yE),e(yE,Nve),e(Nve,Hpr),e(yE,Upr),e(yE,_Q),e(_Q,Jpr),e(yE,Ypr),e(ie,Kpr),e(ie,LE),e(LE,jve),e(jve,Zpr),e(LE,e_r),e(LE,bQ),e(bQ,o_r),e(LE,r_r),e(ie,t_r),e(ie,xE),e(xE,Dve),e(Dve,a_r),e(xE,n_r),e(xE,vQ),e(vQ,s_r),e(xE,l_r),e(ie,i_r),e(ie,$E),e($E,Gve),e(Gve,d_r),e($E,c_r),e($E,FQ),e(FQ,m_r),e($E,f_r),e(ie,g_r),e(ie,kE),e(kE,Ove),e(Ove,h_r),e(kE,u_r),e(kE,TQ),e(TQ,p_r),e(kE,__r),e(ie,b_r),e(ie,SE),e(SE,Vve),e(Vve,v_r),e(SE,F_r),e(SE,MQ),e(MQ,T_r),e(SE,M_r),e(ie,E_r),e(ie,RE),e(RE,Xve),e(Xve,C_r),e(RE,w_r),e(RE,EQ),e(EQ,A_r),e(RE,y_r),e(ie,L_r),e(ie,PE),e(PE,zve),e(zve,x_r),e(PE,$_r),e(PE,CQ),e(CQ,k_r),e(PE,S_r),e(ie,R_r),e(ie,BE),e(BE,Wve),e(Wve,P_r),e(BE,B_r),e(BE,wQ),e(wQ,I_r),e(BE,q_r),e(ie,N_r),e(ie,IE),e(IE,Qve),e(Qve,j_r),e(IE,D_r),e(IE,AQ),e(AQ,G_r),e(IE,O_r),e(ie,V_r),e(ie,qE),e(qE,Hve),e(Hve,X_r),e(qE,z_r),e(qE,yQ),e(yQ,W_r),e(qE,Q_r),e(ie,H_r),e(ie,NE),e(NE,Uve),e(Uve,U_r),e(NE,J_r),e(NE,LQ),e(LQ,Y_r),e(NE,K_r),e(ie,Z_r),e(ie,jE),e(jE,Jve),e(Jve,ebr),e(jE,obr),e(jE,xQ),e(xQ,rbr),e(jE,tbr),e(ie,abr),e(ie,DE),e(DE,Yve),e(Yve,nbr),e(DE,sbr),e(DE,$Q),e($Q,lbr),e(DE,ibr),e(ie,dbr),e(ie,GE),e(GE,Kve),e(Kve,cbr),e(GE,mbr),e(GE,kQ),e(kQ,fbr),e(GE,gbr),e(ie,hbr),e(ie,OE),e(OE,Zve),e(Zve,ubr),e(OE,pbr),e(OE,SQ),e(SQ,_br),e(OE,bbr),e(ie,vbr),e(ie,VE),e(VE,eFe),e(eFe,Fbr),e(VE,Tbr),e(VE,RQ),e(RQ,Mbr),e(VE,Ebr),e(ie,Cbr),e(ie,XE),e(XE,oFe),e(oFe,wbr),e(XE,Abr),e(XE,PQ),e(PQ,ybr),e(XE,Lbr),e(ie,xbr),e(ie,zE),e(zE,rFe),e(rFe,$br),e(zE,kbr),e(zE,BQ),e(BQ,Sbr),e(zE,Rbr),e(xr,Pbr),M(WE,xr,null),b(m,Kqe,_),b(m,oc,_),e(oc,QE),e(QE,tFe),M(p7,tFe,null),e(oc,Bbr),e(oc,aFe),e(aFe,Ibr),b(m,Zqe,_),b(m,rr,_),M(_7,rr,null),e(rr,qbr),e(rr,rc),e(rc,Nbr),e(rc,IQ),e(IQ,jbr),e(rc,Dbr),e(rc,qQ),e(qQ,Gbr),e(rc,Obr),e(rr,Vbr),e(rr,b7),e(b7,Xbr),e(b7,nFe),e(nFe,zbr),e(b7,Wbr),e(rr,Qbr),e(rr,St),M(v7,St,null),e(St,Hbr),e(St,sFe),e(sFe,Ubr),e(St,Jbr),e(St,tc),e(tc,Ybr),e(tc,lFe),e(lFe,Kbr),e(tc,Zbr),e(tc,NQ),e(NQ,e2r),e(tc,o2r),e(St,r2r),M(HE,St,null),e(rr,t2r),e(rr,$r),M(F7,$r,null),e($r,a2r),e($r,iFe),e(iFe,n2r),e($r,s2r),e($r,an),e(an,l2r),e(an,dFe),e(dFe,i2r),e(an,d2r),e(an,cFe),e(cFe,c2r),e(an,m2r),e(an,mFe),e(mFe,f2r),e(an,g2r),e($r,h2r),e($r,ye),e(ye,UE),e(UE,fFe),e(fFe,u2r),e(UE,p2r),e(UE,jQ),e(jQ,_2r),e(UE,b2r),e(ye,v2r),e(ye,JE),e(JE,gFe),e(gFe,F2r),e(JE,T2r),e(JE,DQ),e(DQ,M2r),e(JE,E2r),e(ye,C2r),e(ye,YE),e(YE,hFe),e(hFe,w2r),e(YE,A2r),e(YE,GQ),e(GQ,y2r),e(YE,L2r),e(ye,x2r),e(ye,KE),e(KE,uFe),e(uFe,$2r),e(KE,k2r),e(KE,OQ),e(OQ,S2r),e(KE,R2r),e(ye,P2r),e(ye,ZE),e(ZE,pFe),e(pFe,B2r),e(ZE,I2r),e(ZE,VQ),e(VQ,q2r),e(ZE,N2r),e(ye,j2r),e(ye,eC),e(eC,_Fe),e(_Fe,D2r),e(eC,G2r),e(eC,XQ),e(XQ,O2r),e(eC,V2r),e(ye,X2r),e(ye,oC),e(oC,bFe),e(bFe,z2r),e(oC,W2r),e(oC,zQ),e(zQ,Q2r),e(oC,H2r),e(ye,U2r),e(ye,rC),e(rC,vFe),e(vFe,J2r),e(rC,Y2r),e(rC,WQ),e(WQ,K2r),e(rC,Z2r),e(ye,evr),e(ye,tC),e(tC,FFe),e(FFe,ovr),e(tC,rvr),e(tC,QQ),e(QQ,tvr),e(tC,avr),e(ye,nvr),e(ye,aC),e(aC,TFe),e(TFe,svr),e(aC,lvr),e(aC,HQ),e(HQ,ivr),e(aC,dvr),e($r,cvr),M(nC,$r,null),b(m,eNe,_),b(m,ac,_),e(ac,sC),e(sC,MFe),M(T7,MFe,null),e(ac,mvr),e(ac,EFe),e(EFe,fvr),b(m,oNe,_),b(m,tr,_),M(M7,tr,null),e(tr,gvr),e(tr,nc),e(nc,hvr),e(nc,UQ),e(UQ,uvr),e(nc,pvr),e(nc,JQ),e(JQ,_vr),e(nc,bvr),e(tr,vvr),e(tr,E7),e(E7,Fvr),e(E7,CFe),e(CFe,Tvr),e(E7,Mvr),e(tr,Evr),e(tr,Rt),M(C7,Rt,null),e(Rt,Cvr),e(Rt,wFe),e(wFe,wvr),e(Rt,Avr),e(Rt,sc),e(sc,yvr),e(sc,AFe),e(AFe,Lvr),e(sc,xvr),e(sc,YQ),e(YQ,$vr),e(sc,kvr),e(Rt,Svr),M(lC,Rt,null),e(tr,Rvr),e(tr,kr),M(w7,kr,null),e(kr,Pvr),e(kr,yFe),e(yFe,Bvr),e(kr,Ivr),e(kr,nn),e(nn,qvr),e(nn,LFe),e(LFe,Nvr),e(nn,jvr),e(nn,xFe),e(xFe,Dvr),e(nn,Gvr),e(nn,$Fe),e($Fe,Ovr),e(nn,Vvr),e(kr,Xvr),e(kr,ee),e(ee,iC),e(iC,kFe),e(kFe,zvr),e(iC,Wvr),e(iC,KQ),e(KQ,Qvr),e(iC,Hvr),e(ee,Uvr),e(ee,dC),e(dC,SFe),e(SFe,Jvr),e(dC,Yvr),e(dC,ZQ),e(ZQ,Kvr),e(dC,Zvr),e(ee,eFr),e(ee,cC),e(cC,RFe),e(RFe,oFr),e(cC,rFr),e(cC,eH),e(eH,tFr),e(cC,aFr),e(ee,nFr),e(ee,mC),e(mC,PFe),e(PFe,sFr),e(mC,lFr),e(mC,oH),e(oH,iFr),e(mC,dFr),e(ee,cFr),e(ee,fC),e(fC,BFe),e(BFe,mFr),e(fC,fFr),e(fC,rH),e(rH,gFr),e(fC,hFr),e(ee,uFr),e(ee,gC),e(gC,IFe),e(IFe,pFr),e(gC,_Fr),e(gC,tH),e(tH,bFr),e(gC,vFr),e(ee,FFr),e(ee,hC),e(hC,qFe),e(qFe,TFr),e(hC,MFr),e(hC,aH),e(aH,EFr),e(hC,CFr),e(ee,wFr),e(ee,uC),e(uC,NFe),e(NFe,AFr),e(uC,yFr),e(uC,nH),e(nH,LFr),e(uC,xFr),e(ee,$Fr),e(ee,pC),e(pC,jFe),e(jFe,kFr),e(pC,SFr),e(pC,sH),e(sH,RFr),e(pC,PFr),e(ee,BFr),e(ee,_C),e(_C,DFe),e(DFe,IFr),e(_C,qFr),e(_C,lH),e(lH,NFr),e(_C,jFr),e(ee,DFr),e(ee,bC),e(bC,GFe),e(GFe,GFr),e(bC,OFr),e(bC,iH),e(iH,VFr),e(bC,XFr),e(ee,zFr),e(ee,vC),e(vC,OFe),e(OFe,WFr),e(vC,QFr),e(vC,dH),e(dH,HFr),e(vC,UFr),e(ee,JFr),e(ee,FC),e(FC,VFe),e(VFe,YFr),e(FC,KFr),e(FC,cH),e(cH,ZFr),e(FC,e1r),e(ee,o1r),e(ee,TC),e(TC,XFe),e(XFe,r1r),e(TC,t1r),e(TC,mH),e(mH,a1r),e(TC,n1r),e(ee,s1r),e(ee,MC),e(MC,zFe),e(zFe,l1r),e(MC,i1r),e(MC,fH),e(fH,d1r),e(MC,c1r),e(ee,m1r),e(ee,EC),e(EC,WFe),e(WFe,f1r),e(EC,g1r),e(EC,gH),e(gH,h1r),e(EC,u1r),e(ee,p1r),e(ee,CC),e(CC,QFe),e(QFe,_1r),e(CC,b1r),e(CC,hH),e(hH,v1r),e(CC,F1r),e(ee,T1r),e(ee,wC),e(wC,HFe),e(HFe,M1r),e(wC,E1r),e(wC,uH),e(uH,C1r),e(wC,w1r),e(ee,A1r),e(ee,AC),e(AC,UFe),e(UFe,y1r),e(AC,L1r),e(AC,pH),e(pH,x1r),e(AC,$1r),e(ee,k1r),e(ee,yC),e(yC,JFe),e(JFe,S1r),e(yC,R1r),e(yC,_H),e(_H,P1r),e(yC,B1r),e(ee,I1r),e(ee,LC),e(LC,YFe),e(YFe,q1r),e(LC,N1r),e(LC,bH),e(bH,j1r),e(LC,D1r),e(ee,G1r),e(ee,xC),e(xC,KFe),e(KFe,O1r),e(xC,V1r),e(xC,vH),e(vH,X1r),e(xC,z1r),e(ee,W1r),e(ee,$C),e($C,ZFe),e(ZFe,Q1r),e($C,H1r),e($C,FH),e(FH,U1r),e($C,J1r),e(ee,Y1r),e(ee,kC),e(kC,e1e),e(e1e,K1r),e(kC,Z1r),e(kC,TH),e(TH,eTr),e(kC,oTr),e(ee,rTr),e(ee,SC),e(SC,o1e),e(o1e,tTr),e(SC,aTr),e(SC,MH),e(MH,nTr),e(SC,sTr),e(ee,lTr),e(ee,RC),e(RC,r1e),e(r1e,iTr),e(RC,dTr),e(RC,EH),e(EH,cTr),e(RC,mTr),e(kr,fTr),M(PC,kr,null),b(m,rNe,_),b(m,lc,_),e(lc,BC),e(BC,t1e),M(A7,t1e,null),e(lc,gTr),e(lc,a1e),e(a1e,hTr),b(m,tNe,_),b(m,ar,_),M(y7,ar,null),e(ar,uTr),e(ar,ic),e(ic,pTr),e(ic,CH),e(CH,_Tr),e(ic,bTr),e(ic,wH),e(wH,vTr),e(ic,FTr),e(ar,TTr),e(ar,L7),e(L7,MTr),e(L7,n1e),e(n1e,ETr),e(L7,CTr),e(ar,wTr),e(ar,Pt),M(x7,Pt,null),e(Pt,ATr),e(Pt,s1e),e(s1e,yTr),e(Pt,LTr),e(Pt,dc),e(dc,xTr),e(dc,l1e),e(l1e,$Tr),e(dc,kTr),e(dc,AH),e(AH,STr),e(dc,RTr),e(Pt,PTr),M(IC,Pt,null),e(ar,BTr),e(ar,Sr),M($7,Sr,null),e(Sr,ITr),e(Sr,i1e),e(i1e,qTr),e(Sr,NTr),e(Sr,sn),e(sn,jTr),e(sn,d1e),e(d1e,DTr),e(sn,GTr),e(sn,c1e),e(c1e,OTr),e(sn,VTr),e(sn,m1e),e(m1e,XTr),e(sn,zTr),e(Sr,WTr),e(Sr,he),e(he,qC),e(qC,f1e),e(f1e,QTr),e(qC,HTr),e(qC,yH),e(yH,UTr),e(qC,JTr),e(he,YTr),e(he,NC),e(NC,g1e),e(g1e,KTr),e(NC,ZTr),e(NC,LH),e(LH,eMr),e(NC,oMr),e(he,rMr),e(he,jC),e(jC,h1e),e(h1e,tMr),e(jC,aMr),e(jC,xH),e(xH,nMr),e(jC,sMr),e(he,lMr),e(he,DC),e(DC,u1e),e(u1e,iMr),e(DC,dMr),e(DC,$H),e($H,cMr),e(DC,mMr),e(he,fMr),e(he,GC),e(GC,p1e),e(p1e,gMr),e(GC,hMr),e(GC,kH),e(kH,uMr),e(GC,pMr),e(he,_Mr),e(he,OC),e(OC,_1e),e(_1e,bMr),e(OC,vMr),e(OC,SH),e(SH,FMr),e(OC,TMr),e(he,MMr),e(he,VC),e(VC,b1e),e(b1e,EMr),e(VC,CMr),e(VC,RH),e(RH,wMr),e(VC,AMr),e(he,yMr),e(he,XC),e(XC,v1e),e(v1e,LMr),e(XC,xMr),e(XC,PH),e(PH,$Mr),e(XC,kMr),e(he,SMr),e(he,zC),e(zC,F1e),e(F1e,RMr),e(zC,PMr),e(zC,BH),e(BH,BMr),e(zC,IMr),e(he,qMr),e(he,WC),e(WC,T1e),e(T1e,NMr),e(WC,jMr),e(WC,IH),e(IH,DMr),e(WC,GMr),e(he,OMr),e(he,QC),e(QC,M1e),e(M1e,VMr),e(QC,XMr),e(QC,qH),e(qH,zMr),e(QC,WMr),e(he,QMr),e(he,HC),e(HC,E1e),e(E1e,HMr),e(HC,UMr),e(HC,NH),e(NH,JMr),e(HC,YMr),e(he,KMr),e(he,UC),e(UC,C1e),e(C1e,ZMr),e(UC,e4r),e(UC,jH),e(jH,o4r),e(UC,r4r),e(he,t4r),e(he,JC),e(JC,w1e),e(w1e,a4r),e(JC,n4r),e(JC,DH),e(DH,s4r),e(JC,l4r),e(he,i4r),e(he,YC),e(YC,A1e),e(A1e,d4r),e(YC,c4r),e(YC,GH),e(GH,m4r),e(YC,f4r),e(he,g4r),e(he,KC),e(KC,y1e),e(y1e,h4r),e(KC,u4r),e(KC,OH),e(OH,p4r),e(KC,_4r),e(he,b4r),e(he,ZC),e(ZC,L1e),e(L1e,v4r),e(ZC,F4r),e(ZC,VH),e(VH,T4r),e(ZC,M4r),e(Sr,E4r),M(e5,Sr,null),b(m,aNe,_),b(m,cc,_),e(cc,o5),e(o5,x1e),M(k7,x1e,null),e(cc,C4r),e(cc,$1e),e($1e,w4r),b(m,nNe,_),b(m,nr,_),M(S7,nr,null),e(nr,A4r),e(nr,mc),e(mc,y4r),e(mc,XH),e(XH,L4r),e(mc,x4r),e(mc,zH),e(zH,$4r),e(mc,k4r),e(nr,S4r),e(nr,R7),e(R7,R4r),e(R7,k1e),e(k1e,P4r),e(R7,B4r),e(nr,I4r),e(nr,Bt),M(P7,Bt,null),e(Bt,q4r),e(Bt,S1e),e(S1e,N4r),e(Bt,j4r),e(Bt,fc),e(fc,D4r),e(fc,R1e),e(R1e,G4r),e(fc,O4r),e(fc,WH),e(WH,V4r),e(fc,X4r),e(Bt,z4r),M(r5,Bt,null),e(nr,W4r),e(nr,Rr),M(B7,Rr,null),e(Rr,Q4r),e(Rr,P1e),e(P1e,H4r),e(Rr,U4r),e(Rr,ln),e(ln,J4r),e(ln,B1e),e(B1e,Y4r),e(ln,K4r),e(ln,I1e),e(I1e,Z4r),e(ln,eEr),e(ln,q1e),e(q1e,oEr),e(ln,rEr),e(Rr,tEr),e(Rr,I7),e(I7,t5),e(t5,N1e),e(N1e,aEr),e(t5,nEr),e(t5,QH),e(QH,sEr),e(t5,lEr),e(I7,iEr),e(I7,a5),e(a5,j1e),e(j1e,dEr),e(a5,cEr),e(a5,HH),e(HH,mEr),e(a5,fEr),e(Rr,gEr),M(n5,Rr,null),b(m,sNe,_),b(m,gc,_),e(gc,s5),e(s5,D1e),M(q7,D1e,null),e(gc,hEr),e(gc,G1e),e(G1e,uEr),b(m,lNe,_),b(m,sr,_),M(N7,sr,null),e(sr,pEr),e(sr,hc),e(hc,_Er),e(hc,UH),e(UH,bEr),e(hc,vEr),e(hc,JH),e(JH,FEr),e(hc,TEr),e(sr,MEr),e(sr,j7),e(j7,EEr),e(j7,O1e),e(O1e,CEr),e(j7,wEr),e(sr,AEr),e(sr,It),M(D7,It,null),e(It,yEr),e(It,V1e),e(V1e,LEr),e(It,xEr),e(It,uc),e(uc,$Er),e(uc,X1e),e(X1e,kEr),e(uc,SEr),e(uc,YH),e(YH,REr),e(uc,PEr),e(It,BEr),M(l5,It,null),e(sr,IEr),e(sr,Pr),M(G7,Pr,null),e(Pr,qEr),e(Pr,z1e),e(z1e,NEr),e(Pr,jEr),e(Pr,dn),e(dn,DEr),e(dn,W1e),e(W1e,GEr),e(dn,OEr),e(dn,Q1e),e(Q1e,VEr),e(dn,XEr),e(dn,H1e),e(H1e,zEr),e(dn,WEr),e(Pr,QEr),e(Pr,U1e),e(U1e,i5),e(i5,J1e),e(J1e,HEr),e(i5,UEr),e(i5,KH),e(KH,JEr),e(i5,YEr),e(Pr,KEr),M(d5,Pr,null),b(m,iNe,_),b(m,pc,_),e(pc,c5),e(c5,Y1e),M(O7,Y1e,null),e(pc,ZEr),e(pc,K1e),e(K1e,eCr),b(m,dNe,_),b(m,lr,_),M(V7,lr,null),e(lr,oCr),e(lr,_c),e(_c,rCr),e(_c,ZH),e(ZH,tCr),e(_c,aCr),e(_c,eU),e(eU,nCr),e(_c,sCr),e(lr,lCr),e(lr,X7),e(X7,iCr),e(X7,Z1e),e(Z1e,dCr),e(X7,cCr),e(lr,mCr),e(lr,qt),M(z7,qt,null),e(qt,fCr),e(qt,eTe),e(eTe,gCr),e(qt,hCr),e(qt,bc),e(bc,uCr),e(bc,oTe),e(oTe,pCr),e(bc,_Cr),e(bc,oU),e(oU,bCr),e(bc,vCr),e(qt,FCr),M(m5,qt,null),e(lr,TCr),e(lr,Br),M(W7,Br,null),e(Br,MCr),e(Br,rTe),e(rTe,ECr),e(Br,CCr),e(Br,cn),e(cn,wCr),e(cn,tTe),e(tTe,ACr),e(cn,yCr),e(cn,aTe),e(aTe,LCr),e(cn,xCr),e(cn,nTe),e(nTe,$Cr),e(cn,kCr),e(Br,SCr),e(Br,de),e(de,f5),e(f5,sTe),e(sTe,RCr),e(f5,PCr),e(f5,rU),e(rU,BCr),e(f5,ICr),e(de,qCr),e(de,g5),e(g5,lTe),e(lTe,NCr),e(g5,jCr),e(g5,tU),e(tU,DCr),e(g5,GCr),e(de,OCr),e(de,h5),e(h5,iTe),e(iTe,VCr),e(h5,XCr),e(h5,aU),e(aU,zCr),e(h5,WCr),e(de,QCr),e(de,u5),e(u5,dTe),e(dTe,HCr),e(u5,UCr),e(u5,nU),e(nU,JCr),e(u5,YCr),e(de,KCr),e(de,p5),e(p5,cTe),e(cTe,ZCr),e(p5,e5r),e(p5,sU),e(sU,o5r),e(p5,r5r),e(de,t5r),e(de,_5),e(_5,mTe),e(mTe,a5r),e(_5,n5r),e(_5,lU),e(lU,s5r),e(_5,l5r),e(de,i5r),e(de,b5),e(b5,fTe),e(fTe,d5r),e(b5,c5r),e(b5,iU),e(iU,m5r),e(b5,f5r),e(de,g5r),e(de,v5),e(v5,gTe),e(gTe,h5r),e(v5,u5r),e(v5,dU),e(dU,p5r),e(v5,_5r),e(de,b5r),e(de,F5),e(F5,hTe),e(hTe,v5r),e(F5,F5r),e(F5,cU),e(cU,T5r),e(F5,M5r),e(de,E5r),e(de,T5),e(T5,uTe),e(uTe,C5r),e(T5,w5r),e(T5,mU),e(mU,A5r),e(T5,y5r),e(de,L5r),e(de,M5),e(M5,pTe),e(pTe,x5r),e(M5,$5r),e(M5,fU),e(fU,k5r),e(M5,S5r),e(de,R5r),e(de,E5),e(E5,_Te),e(_Te,P5r),e(E5,B5r),e(E5,gU),e(gU,I5r),e(E5,q5r),e(de,N5r),e(de,C5),e(C5,bTe),e(bTe,j5r),e(C5,D5r),e(C5,hU),e(hU,G5r),e(C5,O5r),e(de,V5r),e(de,w5),e(w5,vTe),e(vTe,X5r),e(w5,z5r),e(w5,uU),e(uU,W5r),e(w5,Q5r),e(de,H5r),e(de,A5),e(A5,FTe),e(FTe,U5r),e(A5,J5r),e(A5,pU),e(pU,Y5r),e(A5,K5r),e(de,Z5r),e(de,y5),e(y5,TTe),e(TTe,e3r),e(y5,o3r),e(y5,_U),e(_U,r3r),e(y5,t3r),e(de,a3r),e(de,L5),e(L5,MTe),e(MTe,n3r),e(L5,s3r),e(L5,bU),e(bU,l3r),e(L5,i3r),e(de,d3r),e(de,x5),e(x5,ETe),e(ETe,c3r),e(x5,m3r),e(x5,vU),e(vU,f3r),e(x5,g3r),e(de,h3r),e(de,$5),e($5,CTe),e(CTe,u3r),e($5,p3r),e($5,FU),e(FU,_3r),e($5,b3r),e(de,v3r),e(de,k5),e(k5,wTe),e(wTe,F3r),e(k5,T3r),e(k5,TU),e(TU,M3r),e(k5,E3r),e(Br,C3r),M(S5,Br,null),b(m,cNe,_),b(m,vc,_),e(vc,R5),e(R5,ATe),M(Q7,ATe,null),e(vc,w3r),e(vc,yTe),e(yTe,A3r),b(m,mNe,_),b(m,ir,_),M(H7,ir,null),e(ir,y3r),e(ir,Fc),e(Fc,L3r),e(Fc,MU),e(MU,x3r),e(Fc,$3r),e(Fc,EU),e(EU,k3r),e(Fc,S3r),e(ir,R3r),e(ir,U7),e(U7,P3r),e(U7,LTe),e(LTe,B3r),e(U7,I3r),e(ir,q3r),e(ir,Nt),M(J7,Nt,null),e(Nt,N3r),e(Nt,xTe),e(xTe,j3r),e(Nt,D3r),e(Nt,Tc),e(Tc,G3r),e(Tc,$Te),e($Te,O3r),e(Tc,V3r),e(Tc,CU),e(CU,X3r),e(Tc,z3r),e(Nt,W3r),M(P5,Nt,null),e(ir,Q3r),e(ir,Ir),M(Y7,Ir,null),e(Ir,H3r),e(Ir,kTe),e(kTe,U3r),e(Ir,J3r),e(Ir,mn),e(mn,Y3r),e(mn,STe),e(STe,K3r),e(mn,Z3r),e(mn,RTe),e(RTe,ewr),e(mn,owr),e(mn,PTe),e(PTe,rwr),e(mn,twr),e(Ir,awr),e(Ir,ce),e(ce,B5),e(B5,BTe),e(BTe,nwr),e(B5,swr),e(B5,wU),e(wU,lwr),e(B5,iwr),e(ce,dwr),e(ce,I5),e(I5,ITe),e(ITe,cwr),e(I5,mwr),e(I5,AU),e(AU,fwr),e(I5,gwr),e(ce,hwr),e(ce,q5),e(q5,qTe),e(qTe,uwr),e(q5,pwr),e(q5,yU),e(yU,_wr),e(q5,bwr),e(ce,vwr),e(ce,N5),e(N5,NTe),e(NTe,Fwr),e(N5,Twr),e(N5,LU),e(LU,Mwr),e(N5,Ewr),e(ce,Cwr),e(ce,j5),e(j5,jTe),e(jTe,wwr),e(j5,Awr),e(j5,xU),e(xU,ywr),e(j5,Lwr),e(ce,xwr),e(ce,D5),e(D5,DTe),e(DTe,$wr),e(D5,kwr),e(D5,$U),e($U,Swr),e(D5,Rwr),e(ce,Pwr),e(ce,G5),e(G5,GTe),e(GTe,Bwr),e(G5,Iwr),e(G5,kU),e(kU,qwr),e(G5,Nwr),e(ce,jwr),e(ce,O5),e(O5,OTe),e(OTe,Dwr),e(O5,Gwr),e(O5,SU),e(SU,Owr),e(O5,Vwr),e(ce,Xwr),e(ce,V5),e(V5,VTe),e(VTe,zwr),e(V5,Wwr),e(V5,RU),e(RU,Qwr),e(V5,Hwr),e(ce,Uwr),e(ce,X5),e(X5,XTe),e(XTe,Jwr),e(X5,Ywr),e(X5,PU),e(PU,Kwr),e(X5,Zwr),e(ce,eAr),e(ce,z5),e(z5,zTe),e(zTe,oAr),e(z5,rAr),e(z5,BU),e(BU,tAr),e(z5,aAr),e(ce,nAr),e(ce,W5),e(W5,WTe),e(WTe,sAr),e(W5,lAr),e(W5,IU),e(IU,iAr),e(W5,dAr),e(ce,cAr),e(ce,Q5),e(Q5,QTe),e(QTe,mAr),e(Q5,fAr),e(Q5,qU),e(qU,gAr),e(Q5,hAr),e(ce,uAr),e(ce,H5),e(H5,HTe),e(HTe,pAr),e(H5,_Ar),e(H5,NU),e(NU,bAr),e(H5,vAr),e(ce,FAr),e(ce,U5),e(U5,UTe),e(UTe,TAr),e(U5,MAr),e(U5,jU),e(jU,EAr),e(U5,CAr),e(ce,wAr),e(ce,J5),e(J5,JTe),e(JTe,AAr),e(J5,yAr),e(J5,DU),e(DU,LAr),e(J5,xAr),e(ce,$Ar),e(ce,Y5),e(Y5,YTe),e(YTe,kAr),e(Y5,SAr),e(Y5,GU),e(GU,RAr),e(Y5,PAr),e(ce,BAr),e(ce,K5),e(K5,KTe),e(KTe,IAr),e(K5,qAr),e(K5,OU),e(OU,NAr),e(K5,jAr),e(ce,DAr),e(ce,Z5),e(Z5,ZTe),e(ZTe,GAr),e(Z5,OAr),e(Z5,VU),e(VU,VAr),e(Z5,XAr),e(ce,zAr),e(ce,e3),e(e3,eMe),e(eMe,WAr),e(e3,QAr),e(e3,XU),e(XU,HAr),e(e3,UAr),e(Ir,JAr),M(o3,Ir,null),b(m,fNe,_),b(m,Mc,_),e(Mc,r3),e(r3,oMe),M(K7,oMe,null),e(Mc,YAr),e(Mc,rMe),e(rMe,KAr),b(m,gNe,_),b(m,dr,_),M(Z7,dr,null),e(dr,ZAr),e(dr,Ec),e(Ec,e0r),e(Ec,zU),e(zU,o0r),e(Ec,r0r),e(Ec,WU),e(WU,t0r),e(Ec,a0r),e(dr,n0r),e(dr,ex),e(ex,s0r),e(ex,tMe),e(tMe,l0r),e(ex,i0r),e(dr,d0r),e(dr,jt),M(ox,jt,null),e(jt,c0r),e(jt,aMe),e(aMe,m0r),e(jt,f0r),e(jt,Cc),e(Cc,g0r),e(Cc,nMe),e(nMe,h0r),e(Cc,u0r),e(Cc,QU),e(QU,p0r),e(Cc,_0r),e(jt,b0r),M(t3,jt,null),e(dr,v0r),e(dr,qr),M(rx,qr,null),e(qr,F0r),e(qr,sMe),e(sMe,T0r),e(qr,M0r),e(qr,fn),e(fn,E0r),e(fn,lMe),e(lMe,C0r),e(fn,w0r),e(fn,iMe),e(iMe,A0r),e(fn,y0r),e(fn,dMe),e(dMe,L0r),e(fn,x0r),e(qr,$0r),e(qr,cMe),e(cMe,a3),e(a3,mMe),e(mMe,k0r),e(a3,S0r),e(a3,HU),e(HU,R0r),e(a3,P0r),e(qr,B0r),M(n3,qr,null),b(m,hNe,_),b(m,wc,_),e(wc,s3),e(s3,fMe),M(tx,fMe,null),e(wc,I0r),e(wc,gMe),e(gMe,q0r),b(m,uNe,_),b(m,cr,_),M(ax,cr,null),e(cr,N0r),e(cr,Ac),e(Ac,j0r),e(Ac,UU),e(UU,D0r),e(Ac,G0r),e(Ac,JU),e(JU,O0r),e(Ac,V0r),e(cr,X0r),e(cr,nx),e(nx,z0r),e(nx,hMe),e(hMe,W0r),e(nx,Q0r),e(cr,H0r),e(cr,Dt),M(sx,Dt,null),e(Dt,U0r),e(Dt,uMe),e(uMe,J0r),e(Dt,Y0r),e(Dt,yc),e(yc,K0r),e(yc,pMe),e(pMe,Z0r),e(yc,e6r),e(yc,YU),e(YU,o6r),e(yc,r6r),e(Dt,t6r),M(l3,Dt,null),e(cr,a6r),e(cr,Nr),M(lx,Nr,null),e(Nr,n6r),e(Nr,_Me),e(_Me,s6r),e(Nr,l6r),e(Nr,gn),e(gn,i6r),e(gn,bMe),e(bMe,d6r),e(gn,c6r),e(gn,vMe),e(vMe,m6r),e(gn,f6r),e(gn,FMe),e(FMe,g6r),e(gn,h6r),e(Nr,u6r),e(Nr,TMe),e(TMe,i3),e(i3,MMe),e(MMe,p6r),e(i3,_6r),e(i3,KU),e(KU,b6r),e(i3,v6r),e(Nr,F6r),M(d3,Nr,null),b(m,pNe,_),b(m,Lc,_),e(Lc,c3),e(c3,EMe),M(ix,EMe,null),e(Lc,T6r),e(Lc,CMe),e(CMe,M6r),b(m,_Ne,_),b(m,mr,_),M(dx,mr,null),e(mr,E6r),e(mr,xc),e(xc,C6r),e(xc,ZU),e(ZU,w6r),e(xc,A6r),e(xc,eJ),e(eJ,y6r),e(xc,L6r),e(mr,x6r),e(mr,cx),e(cx,$6r),e(cx,wMe),e(wMe,k6r),e(cx,S6r),e(mr,R6r),e(mr,Gt),M(mx,Gt,null),e(Gt,P6r),e(Gt,AMe),e(AMe,B6r),e(Gt,I6r),e(Gt,$c),e($c,q6r),e($c,yMe),e(yMe,N6r),e($c,j6r),e($c,oJ),e(oJ,D6r),e($c,G6r),e(Gt,O6r),M(m3,Gt,null),e(mr,V6r),e(mr,jr),M(fx,jr,null),e(jr,X6r),e(jr,LMe),e(LMe,z6r),e(jr,W6r),e(jr,hn),e(hn,Q6r),e(hn,xMe),e(xMe,H6r),e(hn,U6r),e(hn,$Me),e($Me,J6r),e(hn,Y6r),e(hn,kMe),e(kMe,K6r),e(hn,Z6r),e(jr,eyr),e(jr,re),e(re,f3),e(f3,SMe),e(SMe,oyr),e(f3,ryr),e(f3,rJ),e(rJ,tyr),e(f3,ayr),e(re,nyr),e(re,g3),e(g3,RMe),e(RMe,syr),e(g3,lyr),e(g3,tJ),e(tJ,iyr),e(g3,dyr),e(re,cyr),e(re,h3),e(h3,PMe),e(PMe,myr),e(h3,fyr),e(h3,aJ),e(aJ,gyr),e(h3,hyr),e(re,uyr),e(re,u3),e(u3,BMe),e(BMe,pyr),e(u3,_yr),e(u3,nJ),e(nJ,byr),e(u3,vyr),e(re,Fyr),e(re,p3),e(p3,IMe),e(IMe,Tyr),e(p3,Myr),e(p3,sJ),e(sJ,Eyr),e(p3,Cyr),e(re,wyr),e(re,_3),e(_3,qMe),e(qMe,Ayr),e(_3,yyr),e(_3,lJ),e(lJ,Lyr),e(_3,xyr),e(re,$yr),e(re,b3),e(b3,NMe),e(NMe,kyr),e(b3,Syr),e(b3,iJ),e(iJ,Ryr),e(b3,Pyr),e(re,Byr),e(re,v3),e(v3,jMe),e(jMe,Iyr),e(v3,qyr),e(v3,dJ),e(dJ,Nyr),e(v3,jyr),e(re,Dyr),e(re,F3),e(F3,DMe),e(DMe,Gyr),e(F3,Oyr),e(F3,cJ),e(cJ,Vyr),e(F3,Xyr),e(re,zyr),e(re,T3),e(T3,GMe),e(GMe,Wyr),e(T3,Qyr),e(T3,mJ),e(mJ,Hyr),e(T3,Uyr),e(re,Jyr),e(re,M3),e(M3,OMe),e(OMe,Yyr),e(M3,Kyr),e(M3,fJ),e(fJ,Zyr),e(M3,eLr),e(re,oLr),e(re,E3),e(E3,VMe),e(VMe,rLr),e(E3,tLr),e(E3,gJ),e(gJ,aLr),e(E3,nLr),e(re,sLr),e(re,C3),e(C3,XMe),e(XMe,lLr),e(C3,iLr),e(C3,hJ),e(hJ,dLr),e(C3,cLr),e(re,mLr),e(re,w3),e(w3,zMe),e(zMe,fLr),e(w3,gLr),e(w3,uJ),e(uJ,hLr),e(w3,uLr),e(re,pLr),e(re,A3),e(A3,WMe),e(WMe,_Lr),e(A3,bLr),e(A3,pJ),e(pJ,vLr),e(A3,FLr),e(re,TLr),e(re,y3),e(y3,QMe),e(QMe,MLr),e(y3,ELr),e(y3,_J),e(_J,CLr),e(y3,wLr),e(re,ALr),e(re,L3),e(L3,HMe),e(HMe,yLr),e(L3,LLr),e(L3,bJ),e(bJ,xLr),e(L3,$Lr),e(re,kLr),e(re,x3),e(x3,UMe),e(UMe,SLr),e(x3,RLr),e(x3,vJ),e(vJ,PLr),e(x3,BLr),e(re,ILr),e(re,$3),e($3,JMe),e(JMe,qLr),e($3,NLr),e($3,FJ),e(FJ,jLr),e($3,DLr),e(re,GLr),e(re,k3),e(k3,YMe),e(YMe,OLr),e(k3,VLr),e(k3,TJ),e(TJ,XLr),e(k3,zLr),e(re,WLr),e(re,S3),e(S3,KMe),e(KMe,QLr),e(S3,HLr),e(S3,MJ),e(MJ,ULr),e(S3,JLr),e(re,YLr),e(re,R3),e(R3,ZMe),e(ZMe,KLr),e(R3,ZLr),e(R3,EJ),e(EJ,e8r),e(R3,o8r),e(re,r8r),e(re,P3),e(P3,e4e),e(e4e,t8r),e(P3,a8r),e(P3,CJ),e(CJ,n8r),e(P3,s8r),e(re,l8r),e(re,B3),e(B3,o4e),e(o4e,i8r),e(B3,d8r),e(B3,wJ),e(wJ,c8r),e(B3,m8r),e(re,f8r),e(re,I3),e(I3,r4e),e(r4e,g8r),e(I3,h8r),e(I3,AJ),e(AJ,u8r),e(I3,p8r),e(jr,_8r),M(q3,jr,null),b(m,bNe,_),b(m,kc,_),e(kc,N3),e(N3,t4e),M(gx,t4e,null),e(kc,b8r),e(kc,a4e),e(a4e,v8r),b(m,vNe,_),b(m,fr,_),M(hx,fr,null),e(fr,F8r),e(fr,Sc),e(Sc,T8r),e(Sc,yJ),e(yJ,M8r),e(Sc,E8r),e(Sc,LJ),e(LJ,C8r),e(Sc,w8r),e(fr,A8r),e(fr,ux),e(ux,y8r),e(ux,n4e),e(n4e,L8r),e(ux,x8r),e(fr,$8r),e(fr,Ot),M(px,Ot,null),e(Ot,k8r),e(Ot,s4e),e(s4e,S8r),e(Ot,R8r),e(Ot,Rc),e(Rc,P8r),e(Rc,l4e),e(l4e,B8r),e(Rc,I8r),e(Rc,xJ),e(xJ,q8r),e(Rc,N8r),e(Ot,j8r),M(j3,Ot,null),e(fr,D8r),e(fr,Dr),M(_x,Dr,null),e(Dr,G8r),e(Dr,i4e),e(i4e,O8r),e(Dr,V8r),e(Dr,un),e(un,X8r),e(un,d4e),e(d4e,z8r),e(un,W8r),e(un,c4e),e(c4e,Q8r),e(un,H8r),e(un,m4e),e(m4e,U8r),e(un,J8r),e(Dr,Y8r),e(Dr,Re),e(Re,D3),e(D3,f4e),e(f4e,K8r),e(D3,Z8r),e(D3,$J),e($J,e7r),e(D3,o7r),e(Re,r7r),e(Re,G3),e(G3,g4e),e(g4e,t7r),e(G3,a7r),e(G3,kJ),e(kJ,n7r),e(G3,s7r),e(Re,l7r),e(Re,O3),e(O3,h4e),e(h4e,i7r),e(O3,d7r),e(O3,SJ),e(SJ,c7r),e(O3,m7r),e(Re,f7r),e(Re,V3),e(V3,u4e),e(u4e,g7r),e(V3,h7r),e(V3,RJ),e(RJ,u7r),e(V3,p7r),e(Re,_7r),e(Re,X3),e(X3,p4e),e(p4e,b7r),e(X3,v7r),e(X3,PJ),e(PJ,F7r),e(X3,T7r),e(Re,M7r),e(Re,z3),e(z3,_4e),e(_4e,E7r),e(z3,C7r),e(z3,BJ),e(BJ,w7r),e(z3,A7r),e(Re,y7r),e(Re,W3),e(W3,b4e),e(b4e,L7r),e(W3,x7r),e(W3,IJ),e(IJ,$7r),e(W3,k7r),e(Re,S7r),e(Re,Q3),e(Q3,v4e),e(v4e,R7r),e(Q3,P7r),e(Q3,qJ),e(qJ,B7r),e(Q3,I7r),e(Re,q7r),e(Re,H3),e(H3,F4e),e(F4e,N7r),e(H3,j7r),e(H3,NJ),e(NJ,D7r),e(H3,G7r),e(Dr,O7r),M(U3,Dr,null),b(m,FNe,_),b(m,Pc,_),e(Pc,J3),e(J3,T4e),M(bx,T4e,null),e(Pc,V7r),e(Pc,M4e),e(M4e,X7r),b(m,TNe,_),b(m,gr,_),M(vx,gr,null),e(gr,z7r),e(gr,Bc),e(Bc,W7r),e(Bc,jJ),e(jJ,Q7r),e(Bc,H7r),e(Bc,DJ),e(DJ,U7r),e(Bc,J7r),e(gr,Y7r),e(gr,Fx),e(Fx,K7r),e(Fx,E4e),e(E4e,Z7r),e(Fx,exr),e(gr,oxr),e(gr,Vt),M(Tx,Vt,null),e(Vt,rxr),e(Vt,C4e),e(C4e,txr),e(Vt,axr),e(Vt,Ic),e(Ic,nxr),e(Ic,w4e),e(w4e,sxr),e(Ic,lxr),e(Ic,GJ),e(GJ,ixr),e(Ic,dxr),e(Vt,cxr),M(Y3,Vt,null),e(gr,mxr),e(gr,Gr),M(Mx,Gr,null),e(Gr,fxr),e(Gr,A4e),e(A4e,gxr),e(Gr,hxr),e(Gr,pn),e(pn,uxr),e(pn,y4e),e(y4e,pxr),e(pn,_xr),e(pn,L4e),e(L4e,bxr),e(pn,vxr),e(pn,x4e),e(x4e,Fxr),e(pn,Txr),e(Gr,Mxr),e(Gr,Me),e(Me,K3),e(K3,$4e),e($4e,Exr),e(K3,Cxr),e(K3,OJ),e(OJ,wxr),e(K3,Axr),e(Me,yxr),e(Me,Z3),e(Z3,k4e),e(k4e,Lxr),e(Z3,xxr),e(Z3,VJ),e(VJ,$xr),e(Z3,kxr),e(Me,Sxr),e(Me,ew),e(ew,S4e),e(S4e,Rxr),e(ew,Pxr),e(ew,XJ),e(XJ,Bxr),e(ew,Ixr),e(Me,qxr),e(Me,ow),e(ow,R4e),e(R4e,Nxr),e(ow,jxr),e(ow,zJ),e(zJ,Dxr),e(ow,Gxr),e(Me,Oxr),e(Me,rw),e(rw,P4e),e(P4e,Vxr),e(rw,Xxr),e(rw,WJ),e(WJ,zxr),e(rw,Wxr),e(Me,Qxr),e(Me,tw),e(tw,B4e),e(B4e,Hxr),e(tw,Uxr),e(tw,QJ),e(QJ,Jxr),e(tw,Yxr),e(Me,Kxr),e(Me,aw),e(aw,I4e),e(I4e,Zxr),e(aw,e9r),e(aw,HJ),e(HJ,o9r),e(aw,r9r),e(Me,t9r),e(Me,nw),e(nw,q4e),e(q4e,a9r),e(nw,n9r),e(nw,UJ),e(UJ,s9r),e(nw,l9r),e(Me,i9r),e(Me,sw),e(sw,N4e),e(N4e,d9r),e(sw,c9r),e(sw,JJ),e(JJ,m9r),e(sw,f9r),e(Me,g9r),e(Me,lw),e(lw,j4e),e(j4e,h9r),e(lw,u9r),e(lw,YJ),e(YJ,p9r),e(lw,_9r),e(Me,b9r),e(Me,iw),e(iw,D4e),e(D4e,v9r),e(iw,F9r),e(iw,KJ),e(KJ,T9r),e(iw,M9r),e(Me,E9r),e(Me,dw),e(dw,G4e),e(G4e,C9r),e(dw,w9r),e(dw,ZJ),e(ZJ,A9r),e(dw,y9r),e(Gr,L9r),M(cw,Gr,null),b(m,MNe,_),b(m,qc,_),e(qc,mw),e(mw,O4e),M(Ex,O4e,null),e(qc,x9r),e(qc,V4e),e(V4e,$9r),b(m,ENe,_),b(m,hr,_),M(Cx,hr,null),e(hr,k9r),e(hr,Nc),e(Nc,S9r),e(Nc,eY),e(eY,R9r),e(Nc,P9r),e(Nc,oY),e(oY,B9r),e(Nc,I9r),e(hr,q9r),e(hr,wx),e(wx,N9r),e(wx,X4e),e(X4e,j9r),e(wx,D9r),e(hr,G9r),e(hr,Xt),M(Ax,Xt,null),e(Xt,O9r),e(Xt,z4e),e(z4e,V9r),e(Xt,X9r),e(Xt,jc),e(jc,z9r),e(jc,W4e),e(W4e,W9r),e(jc,Q9r),e(jc,rY),e(rY,H9r),e(jc,U9r),e(Xt,J9r),M(fw,Xt,null),e(hr,Y9r),e(hr,Or),M(yx,Or,null),e(Or,K9r),e(Or,Q4e),e(Q4e,Z9r),e(Or,e$r),e(Or,_n),e(_n,o$r),e(_n,H4e),e(H4e,r$r),e(_n,t$r),e(_n,U4e),e(U4e,a$r),e(_n,n$r),e(_n,J4e),e(J4e,s$r),e(_n,l$r),e(Or,i$r),e(Or,Le),e(Le,gw),e(gw,Y4e),e(Y4e,d$r),e(gw,c$r),e(gw,tY),e(tY,m$r),e(gw,f$r),e(Le,g$r),e(Le,hw),e(hw,K4e),e(K4e,h$r),e(hw,u$r),e(hw,aY),e(aY,p$r),e(hw,_$r),e(Le,b$r),e(Le,uw),e(uw,Z4e),e(Z4e,v$r),e(uw,F$r),e(uw,nY),e(nY,T$r),e(uw,M$r),e(Le,E$r),e(Le,pw),e(pw,eEe),e(eEe,C$r),e(pw,w$r),e(pw,sY),e(sY,A$r),e(pw,y$r),e(Le,L$r),e(Le,_w),e(_w,oEe),e(oEe,x$r),e(_w,$$r),e(_w,lY),e(lY,k$r),e(_w,S$r),e(Le,R$r),e(Le,bw),e(bw,rEe),e(rEe,P$r),e(bw,B$r),e(bw,iY),e(iY,I$r),e(bw,q$r),e(Le,N$r),e(Le,vw),e(vw,tEe),e(tEe,j$r),e(vw,D$r),e(vw,dY),e(dY,G$r),e(vw,O$r),e(Le,V$r),e(Le,Fw),e(Fw,aEe),e(aEe,X$r),e(Fw,z$r),e(Fw,cY),e(cY,W$r),e(Fw,Q$r),e(Le,H$r),e(Le,Tw),e(Tw,nEe),e(nEe,U$r),e(Tw,J$r),e(Tw,mY),e(mY,Y$r),e(Tw,K$r),e(Le,Z$r),e(Le,Mw),e(Mw,sEe),e(sEe,ekr),e(Mw,okr),e(Mw,fY),e(fY,rkr),e(Mw,tkr),e(Or,akr),M(Ew,Or,null),b(m,CNe,_),b(m,Dc,_),e(Dc,Cw),e(Cw,lEe),M(Lx,lEe,null),e(Dc,nkr),e(Dc,iEe),e(iEe,skr),b(m,wNe,_),b(m,ur,_),M(xx,ur,null),e(ur,lkr),e(ur,Gc),e(Gc,ikr),e(Gc,gY),e(gY,dkr),e(Gc,ckr),e(Gc,hY),e(hY,mkr),e(Gc,fkr),e(ur,gkr),e(ur,$x),e($x,hkr),e($x,dEe),e(dEe,ukr),e($x,pkr),e(ur,_kr),e(ur,zt),M(kx,zt,null),e(zt,bkr),e(zt,cEe),e(cEe,vkr),e(zt,Fkr),e(zt,Oc),e(Oc,Tkr),e(Oc,mEe),e(mEe,Mkr),e(Oc,Ekr),e(Oc,uY),e(uY,Ckr),e(Oc,wkr),e(zt,Akr),M(ww,zt,null),e(ur,ykr),e(ur,Vr),M(Sx,Vr,null),e(Vr,Lkr),e(Vr,fEe),e(fEe,xkr),e(Vr,$kr),e(Vr,bn),e(bn,kkr),e(bn,gEe),e(gEe,Skr),e(bn,Rkr),e(bn,hEe),e(hEe,Pkr),e(bn,Bkr),e(bn,uEe),e(uEe,Ikr),e(bn,qkr),e(Vr,Nkr),e(Vr,Pe),e(Pe,Aw),e(Aw,pEe),e(pEe,jkr),e(Aw,Dkr),e(Aw,pY),e(pY,Gkr),e(Aw,Okr),e(Pe,Vkr),e(Pe,yw),e(yw,_Ee),e(_Ee,Xkr),e(yw,zkr),e(yw,_Y),e(_Y,Wkr),e(yw,Qkr),e(Pe,Hkr),e(Pe,Lw),e(Lw,bEe),e(bEe,Ukr),e(Lw,Jkr),e(Lw,bY),e(bY,Ykr),e(Lw,Kkr),e(Pe,Zkr),e(Pe,xw),e(xw,vEe),e(vEe,eSr),e(xw,oSr),e(xw,vY),e(vY,rSr),e(xw,tSr),e(Pe,aSr),e(Pe,$w),e($w,FEe),e(FEe,nSr),e($w,sSr),e($w,FY),e(FY,lSr),e($w,iSr),e(Pe,dSr),e(Pe,kw),e(kw,TEe),e(TEe,cSr),e(kw,mSr),e(kw,TY),e(TY,fSr),e(kw,gSr),e(Pe,hSr),e(Pe,Sw),e(Sw,MEe),e(MEe,uSr),e(Sw,pSr),e(Sw,MY),e(MY,_Sr),e(Sw,bSr),e(Pe,vSr),e(Pe,Rw),e(Rw,EEe),e(EEe,FSr),e(Rw,TSr),e(Rw,EY),e(EY,MSr),e(Rw,ESr),e(Pe,CSr),e(Pe,Pw),e(Pw,CEe),e(CEe,wSr),e(Pw,ASr),e(Pw,CY),e(CY,ySr),e(Pw,LSr),e(Vr,xSr),M(Bw,Vr,null),b(m,ANe,_),b(m,Vc,_),e(Vc,Iw),e(Iw,wEe),M(Rx,wEe,null),e(Vc,$Sr),e(Vc,AEe),e(AEe,kSr),b(m,yNe,_),b(m,pr,_),M(Px,pr,null),e(pr,SSr),e(pr,Xc),e(Xc,RSr),e(Xc,wY),e(wY,PSr),e(Xc,BSr),e(Xc,AY),e(AY,ISr),e(Xc,qSr),e(pr,NSr),e(pr,Bx),e(Bx,jSr),e(Bx,yEe),e(yEe,DSr),e(Bx,GSr),e(pr,OSr),e(pr,Wt),M(Ix,Wt,null),e(Wt,VSr),e(Wt,LEe),e(LEe,XSr),e(Wt,zSr),e(Wt,zc),e(zc,WSr),e(zc,xEe),e(xEe,QSr),e(zc,HSr),e(zc,yY),e(yY,USr),e(zc,JSr),e(Wt,YSr),M(qw,Wt,null),e(pr,KSr),e(pr,Xr),M(qx,Xr,null),e(Xr,ZSr),e(Xr,$Ee),e($Ee,eRr),e(Xr,oRr),e(Xr,vn),e(vn,rRr),e(vn,kEe),e(kEe,tRr),e(vn,aRr),e(vn,SEe),e(SEe,nRr),e(vn,sRr),e(vn,REe),e(REe,lRr),e(vn,iRr),e(Xr,dRr),e(Xr,xe),e(xe,Nw),e(Nw,PEe),e(PEe,cRr),e(Nw,mRr),e(Nw,LY),e(LY,fRr),e(Nw,gRr),e(xe,hRr),e(xe,jw),e(jw,BEe),e(BEe,uRr),e(jw,pRr),e(jw,xY),e(xY,_Rr),e(jw,bRr),e(xe,vRr),e(xe,Dw),e(Dw,IEe),e(IEe,FRr),e(Dw,TRr),e(Dw,$Y),e($Y,MRr),e(Dw,ERr),e(xe,CRr),e(xe,Gw),e(Gw,qEe),e(qEe,wRr),e(Gw,ARr),e(Gw,kY),e(kY,yRr),e(Gw,LRr),e(xe,xRr),e(xe,Ow),e(Ow,NEe),e(NEe,$Rr),e(Ow,kRr),e(Ow,SY),e(SY,SRr),e(Ow,RRr),e(xe,PRr),e(xe,Vw),e(Vw,jEe),e(jEe,BRr),e(Vw,IRr),e(Vw,RY),e(RY,qRr),e(Vw,NRr),e(xe,jRr),e(xe,Xw),e(Xw,DEe),e(DEe,DRr),e(Xw,GRr),e(Xw,PY),e(PY,ORr),e(Xw,VRr),e(xe,XRr),e(xe,zw),e(zw,GEe),e(GEe,zRr),e(zw,WRr),e(zw,BY),e(BY,QRr),e(zw,HRr),e(xe,URr),e(xe,Ww),e(Ww,OEe),e(OEe,JRr),e(Ww,YRr),e(Ww,IY),e(IY,KRr),e(Ww,ZRr),e(xe,ePr),e(xe,Qw),e(Qw,VEe),e(VEe,oPr),e(Qw,rPr),e(Qw,qY),e(qY,tPr),e(Qw,aPr),e(Xr,nPr),M(Hw,Xr,null),b(m,LNe,_),b(m,Wc,_),e(Wc,Uw),e(Uw,XEe),M(Nx,XEe,null),e(Wc,sPr),e(Wc,zEe),e(zEe,lPr),b(m,xNe,_),b(m,_r,_),M(jx,_r,null),e(_r,iPr),e(_r,Qc),e(Qc,dPr),e(Qc,NY),e(NY,cPr),e(Qc,mPr),e(Qc,jY),e(jY,fPr),e(Qc,gPr),e(_r,hPr),e(_r,Dx),e(Dx,uPr),e(Dx,WEe),e(WEe,pPr),e(Dx,_Pr),e(_r,bPr),e(_r,Qt),M(Gx,Qt,null),e(Qt,vPr),e(Qt,QEe),e(QEe,FPr),e(Qt,TPr),e(Qt,Hc),e(Hc,MPr),e(Hc,HEe),e(HEe,EPr),e(Hc,CPr),e(Hc,DY),e(DY,wPr),e(Hc,APr),e(Qt,yPr),M(Jw,Qt,null),e(_r,LPr),e(_r,zr),M(Ox,zr,null),e(zr,xPr),e(zr,UEe),e(UEe,$Pr),e(zr,kPr),e(zr,Fn),e(Fn,SPr),e(Fn,JEe),e(JEe,RPr),e(Fn,PPr),e(Fn,YEe),e(YEe,BPr),e(Fn,IPr),e(Fn,KEe),e(KEe,qPr),e(Fn,NPr),e(zr,jPr),e(zr,$e),e($e,Yw),e(Yw,ZEe),e(ZEe,DPr),e(Yw,GPr),e(Yw,GY),e(GY,OPr),e(Yw,VPr),e($e,XPr),e($e,Kw),e(Kw,eCe),e(eCe,zPr),e(Kw,WPr),e(Kw,OY),e(OY,QPr),e(Kw,HPr),e($e,UPr),e($e,Zw),e(Zw,oCe),e(oCe,JPr),e(Zw,YPr),e(Zw,VY),e(VY,KPr),e(Zw,ZPr),e($e,eBr),e($e,eA),e(eA,rCe),e(rCe,oBr),e(eA,rBr),e(eA,XY),e(XY,tBr),e(eA,aBr),e($e,nBr),e($e,oA),e(oA,tCe),e(tCe,sBr),e(oA,lBr),e(oA,zY),e(zY,iBr),e(oA,dBr),e($e,cBr),e($e,rA),e(rA,aCe),e(aCe,mBr),e(rA,fBr),e(rA,WY),e(WY,gBr),e(rA,hBr),e($e,uBr),e($e,tA),e(tA,nCe),e(nCe,pBr),e(tA,_Br),e(tA,QY),e(QY,bBr),e(tA,vBr),e($e,FBr),e($e,aA),e(aA,sCe),e(sCe,TBr),e(aA,MBr),e(aA,HY),e(HY,EBr),e(aA,CBr),e($e,wBr),e($e,nA),e(nA,lCe),e(lCe,ABr),e(nA,yBr),e(nA,UY),e(UY,LBr),e(nA,xBr),e($e,$Br),e($e,sA),e(sA,iCe),e(iCe,kBr),e(sA,SBr),e(sA,JY),e(JY,RBr),e(sA,PBr),e(zr,BBr),M(lA,zr,null),b(m,$Ne,_),b(m,Uc,_),e(Uc,iA),e(iA,dCe),M(Vx,dCe,null),e(Uc,IBr),e(Uc,cCe),e(cCe,qBr),b(m,kNe,_),b(m,br,_),M(Xx,br,null),e(br,NBr),e(br,Jc),e(Jc,jBr),e(Jc,YY),e(YY,DBr),e(Jc,GBr),e(Jc,KY),e(KY,OBr),e(Jc,VBr),e(br,XBr),e(br,zx),e(zx,zBr),e(zx,mCe),e(mCe,WBr),e(zx,QBr),e(br,HBr),e(br,Ht),M(Wx,Ht,null),e(Ht,UBr),e(Ht,fCe),e(fCe,JBr),e(Ht,YBr),e(Ht,Yc),e(Yc,KBr),e(Yc,gCe),e(gCe,ZBr),e(Yc,eIr),e(Yc,ZY),e(ZY,oIr),e(Yc,rIr),e(Ht,tIr),M(dA,Ht,null),e(br,aIr),e(br,Wr),M(Qx,Wr,null),e(Wr,nIr),e(Wr,hCe),e(hCe,sIr),e(Wr,lIr),e(Wr,Tn),e(Tn,iIr),e(Tn,uCe),e(uCe,dIr),e(Tn,cIr),e(Tn,pCe),e(pCe,mIr),e(Tn,fIr),e(Tn,_Ce),e(_Ce,gIr),e(Tn,hIr),e(Wr,uIr),e(Wr,De),e(De,cA),e(cA,bCe),e(bCe,pIr),e(cA,_Ir),e(cA,eK),e(eK,bIr),e(cA,vIr),e(De,FIr),e(De,mA),e(mA,vCe),e(vCe,TIr),e(mA,MIr),e(mA,oK),e(oK,EIr),e(mA,CIr),e(De,wIr),e(De,fA),e(fA,FCe),e(FCe,AIr),e(fA,yIr),e(fA,rK),e(rK,LIr),e(fA,xIr),e(De,$Ir),e(De,gA),e(gA,TCe),e(TCe,kIr),e(gA,SIr),e(gA,tK),e(tK,RIr),e(gA,PIr),e(De,BIr),e(De,hA),e(hA,MCe),e(MCe,IIr),e(hA,qIr),e(hA,aK),e(aK,NIr),e(hA,jIr),e(De,DIr),e(De,uA),e(uA,ECe),e(ECe,GIr),e(uA,OIr),e(uA,nK),e(nK,VIr),e(uA,XIr),e(De,zIr),e(De,pA),e(pA,CCe),e(CCe,WIr),e(pA,QIr),e(pA,sK),e(sK,HIr),e(pA,UIr),e(De,JIr),e(De,_A),e(_A,wCe),e(wCe,YIr),e(_A,KIr),e(_A,lK),e(lK,ZIr),e(_A,eqr),e(Wr,oqr),M(bA,Wr,null),b(m,SNe,_),b(m,Kc,_),e(Kc,vA),e(vA,ACe),M(Hx,ACe,null),e(Kc,rqr),e(Kc,yCe),e(yCe,tqr),b(m,RNe,_),b(m,vr,_),M(Ux,vr,null),e(vr,aqr),e(vr,Zc),e(Zc,nqr),e(Zc,iK),e(iK,sqr),e(Zc,lqr),e(Zc,dK),e(dK,iqr),e(Zc,dqr),e(vr,cqr),e(vr,Jx),e(Jx,mqr),e(Jx,LCe),e(LCe,fqr),e(Jx,gqr),e(vr,hqr),e(vr,Ut),M(Yx,Ut,null),e(Ut,uqr),e(Ut,xCe),e(xCe,pqr),e(Ut,_qr),e(Ut,em),e(em,bqr),e(em,$Ce),e($Ce,vqr),e(em,Fqr),e(em,cK),e(cK,Tqr),e(em,Mqr),e(Ut,Eqr),M(FA,Ut,null),e(vr,Cqr),e(vr,Qr),M(Kx,Qr,null),e(Qr,wqr),e(Qr,kCe),e(kCe,Aqr),e(Qr,yqr),e(Qr,Mn),e(Mn,Lqr),e(Mn,SCe),e(SCe,xqr),e(Mn,$qr),e(Mn,RCe),e(RCe,kqr),e(Mn,Sqr),e(Mn,PCe),e(PCe,Rqr),e(Mn,Pqr),e(Qr,Bqr),e(Qr,Ge),e(Ge,TA),e(TA,BCe),e(BCe,Iqr),e(TA,qqr),e(TA,mK),e(mK,Nqr),e(TA,jqr),e(Ge,Dqr),e(Ge,MA),e(MA,ICe),e(ICe,Gqr),e(MA,Oqr),e(MA,fK),e(fK,Vqr),e(MA,Xqr),e(Ge,zqr),e(Ge,EA),e(EA,qCe),e(qCe,Wqr),e(EA,Qqr),e(EA,gK),e(gK,Hqr),e(EA,Uqr),e(Ge,Jqr),e(Ge,CA),e(CA,NCe),e(NCe,Yqr),e(CA,Kqr),e(CA,hK),e(hK,Zqr),e(CA,eNr),e(Ge,oNr),e(Ge,wA),e(wA,jCe),e(jCe,rNr),e(wA,tNr),e(wA,uK),e(uK,aNr),e(wA,nNr),e(Ge,sNr),e(Ge,AA),e(AA,DCe),e(DCe,lNr),e(AA,iNr),e(AA,pK),e(pK,dNr),e(AA,cNr),e(Ge,mNr),e(Ge,yA),e(yA,GCe),e(GCe,fNr),e(yA,gNr),e(yA,_K),e(_K,hNr),e(yA,uNr),e(Ge,pNr),e(Ge,LA),e(LA,OCe),e(OCe,_Nr),e(LA,bNr),e(LA,bK),e(bK,vNr),e(LA,FNr),e(Qr,TNr),M(xA,Qr,null),b(m,PNe,_),b(m,om,_),e(om,$A),e($A,VCe),M(Zx,VCe,null),e(om,MNr),e(om,XCe),e(XCe,ENr),b(m,BNe,_),b(m,Fr,_),M(e9,Fr,null),e(Fr,CNr),e(Fr,rm),e(rm,wNr),e(rm,vK),e(vK,ANr),e(rm,yNr),e(rm,FK),e(FK,LNr),e(rm,xNr),e(Fr,$Nr),e(Fr,o9),e(o9,kNr),e(o9,zCe),e(zCe,SNr),e(o9,RNr),e(Fr,PNr),e(Fr,Jt),M(r9,Jt,null),e(Jt,BNr),e(Jt,WCe),e(WCe,INr),e(Jt,qNr),e(Jt,tm),e(tm,NNr),e(tm,QCe),e(QCe,jNr),e(tm,DNr),e(tm,TK),e(TK,GNr),e(tm,ONr),e(Jt,VNr),M(kA,Jt,null),e(Fr,XNr),e(Fr,Hr),M(t9,Hr,null),e(Hr,zNr),e(Hr,HCe),e(HCe,WNr),e(Hr,QNr),e(Hr,En),e(En,HNr),e(En,UCe),e(UCe,UNr),e(En,JNr),e(En,JCe),e(JCe,YNr),e(En,KNr),e(En,YCe),e(YCe,ZNr),e(En,ejr),e(Hr,ojr),e(Hr,KCe),e(KCe,SA),e(SA,ZCe),e(ZCe,rjr),e(SA,tjr),e(SA,MK),e(MK,ajr),e(SA,njr),e(Hr,sjr),M(RA,Hr,null),b(m,INe,_),b(m,am,_),e(am,PA),e(PA,e5e),M(a9,e5e,null),e(am,ljr),e(am,o5e),e(o5e,ijr),b(m,qNe,_),b(m,Tr,_),M(n9,Tr,null),e(Tr,djr),e(Tr,nm),e(nm,cjr),e(nm,EK),e(EK,mjr),e(nm,fjr),e(nm,CK),e(CK,gjr),e(nm,hjr),e(Tr,ujr),e(Tr,s9),e(s9,pjr),e(s9,r5e),e(r5e,_jr),e(s9,bjr),e(Tr,vjr),e(Tr,Yt),M(l9,Yt,null),e(Yt,Fjr),e(Yt,t5e),e(t5e,Tjr),e(Yt,Mjr),e(Yt,sm),e(sm,Ejr),e(sm,a5e),e(a5e,Cjr),e(sm,wjr),e(sm,wK),e(wK,Ajr),e(sm,yjr),e(Yt,Ljr),M(BA,Yt,null),e(Tr,xjr),e(Tr,Ur),M(i9,Ur,null),e(Ur,$jr),e(Ur,n5e),e(n5e,kjr),e(Ur,Sjr),e(Ur,Cn),e(Cn,Rjr),e(Cn,s5e),e(s5e,Pjr),e(Cn,Bjr),e(Cn,l5e),e(l5e,Ijr),e(Cn,qjr),e(Cn,i5e),e(i5e,Njr),e(Cn,jjr),e(Ur,Djr),e(Ur,d9),e(d9,IA),e(IA,d5e),e(d5e,Gjr),e(IA,Ojr),e(IA,AK),e(AK,Vjr),e(IA,Xjr),e(d9,zjr),e(d9,qA),e(qA,c5e),e(c5e,Wjr),e(qA,Qjr),e(qA,yK),e(yK,Hjr),e(qA,Ujr),e(Ur,Jjr),M(NA,Ur,null),b(m,NNe,_),b(m,lm,_),e(lm,jA),e(jA,m5e),M(c9,m5e,null),e(lm,Yjr),e(lm,f5e),e(f5e,Kjr),b(m,jNe,_),b(m,Mr,_),M(m9,Mr,null),e(Mr,Zjr),e(Mr,im),e(im,eDr),e(im,LK),e(LK,oDr),e(im,rDr),e(im,xK),e(xK,tDr),e(im,aDr),e(Mr,nDr),e(Mr,f9),e(f9,sDr),e(f9,g5e),e(g5e,lDr),e(f9,iDr),e(Mr,dDr),e(Mr,Kt),M(g9,Kt,null),e(Kt,cDr),e(Kt,h5e),e(h5e,mDr),e(Kt,fDr),e(Kt,dm),e(dm,gDr),e(dm,u5e),e(u5e,hDr),e(dm,uDr),e(dm,$K),e($K,pDr),e(dm,_Dr),e(Kt,bDr),M(DA,Kt,null),e(Mr,vDr),e(Mr,Jr),M(h9,Jr,null),e(Jr,FDr),e(Jr,p5e),e(p5e,TDr),e(Jr,MDr),e(Jr,wn),e(wn,EDr),e(wn,_5e),e(_5e,CDr),e(wn,wDr),e(wn,b5e),e(b5e,ADr),e(wn,yDr),e(wn,v5e),e(v5e,LDr),e(wn,xDr),e(Jr,$Dr),e(Jr,F5e),e(F5e,GA),e(GA,T5e),e(T5e,kDr),e(GA,SDr),e(GA,kK),e(kK,RDr),e(GA,PDr),e(Jr,BDr),M(OA,Jr,null),DNe=!0},p(m,[_]){const u9={};_&2&&(u9.$$scope={dirty:_,ctx:m}),bm.$set(u9);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),vg.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),Zg.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),Lh.$set(C5e);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:m}),xh.$set(p9);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),Hh.$set(w5e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),Uh.$set(An);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),Kh.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),Xp.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),Wp.$set(L5e);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:m}),I_.$set(_9);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:m}),N_.$set(x5e);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:m}),Mb.$set(b9);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:m}),Cb.$set($5e);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:m}),l2.$set(v9);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),d2.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),y2.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),x2.$set(R5e);const cm={};_&2&&(cm.$$scope={dirty:_,ctx:m}),Ev.$set(cm);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),wv.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),rF.$set(B5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),aF.$set(I5e);const F9={};_&2&&(F9.$$scope={dirty:_,ctx:m}),mF.$set(F9);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),gF.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),HF.$set(N5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),JF.$set(j5e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),q1.$set(et);const T9={};_&2&&(T9.$$scope={dirty:_,ctx:m}),j1.$set(T9);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),O1.$set(D5e);const M9={};_&2&&(M9.$$scope={dirty:_,ctx:m}),X1.$set(M9);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),tT.$set(G5e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),nT.$set(ot);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),iT.$set(O5e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),cT.$set(mm);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),TT.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),ET.$set(X5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),$T.$set(y);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),ST.$set(VA);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),VT.$set(z5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),zT.$set(W5e);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),UT.$set(XA);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),YT.$set(Q5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),aM.$set(H5e);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),sM.$set(zA);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),mM.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),gM.$set(J5e);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),_M.$set(WA);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),vM.$set(Y5e);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),MM.$set(K5e);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),CM.$set(QA);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),$M.$set(Z5e);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:m}),SM.$set(e3e);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),BM.$set(HA);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:m}),qM.$set(o3e);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:m}),x4.$set(r3e);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),k4.$set(UA);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:m}),oE.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:m}),tE.$set(a3e);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),pE.$set(JA);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:m}),bE.$set(n3e);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:m}),EE.$set(s3e);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),wE.$set(YA);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:m}),WE.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:m}),HE.$set(i3e);const KA={};_&2&&(KA.$$scope={dirty:_,ctx:m}),nC.$set(KA);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),lC.$set(d3e);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),PC.$set(c3e);const ZA={};_&2&&(ZA.$$scope={dirty:_,ctx:m}),IC.$set(ZA);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),e5.$set(m3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),r5.$set(f3e);const e0={};_&2&&(e0.$$scope={dirty:_,ctx:m}),n5.$set(e0);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),l5.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),d5.$set(h3e);const o0={};_&2&&(o0.$$scope={dirty:_,ctx:m}),m5.$set(o0);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),S5.$set(u3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),P5.$set(p3e);const r0={};_&2&&(r0.$$scope={dirty:_,ctx:m}),o3.$set(r0);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),t3.$set(_3e);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),n3.$set(b3e);const t0={};_&2&&(t0.$$scope={dirty:_,ctx:m}),l3.$set(t0);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),d3.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),m3.$set(F3e);const a0={};_&2&&(a0.$$scope={dirty:_,ctx:m}),q3.$set(a0);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),j3.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),U3.$set(M3e);const n0={};_&2&&(n0.$$scope={dirty:_,ctx:m}),Y3.$set(n0);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),cw.$set(E3e);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),fw.$set(C3e);const s0={};_&2&&(s0.$$scope={dirty:_,ctx:m}),Ew.$set(s0);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),ww.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),Bw.$set(A3e);const l0={};_&2&&(l0.$$scope={dirty:_,ctx:m}),qw.$set(l0);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),Hw.$set(y3e);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),Jw.$set(L3e);const i0={};_&2&&(i0.$$scope={dirty:_,ctx:m}),lA.$set(i0);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),dA.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:m}),bA.$set($3e);const d0={};_&2&&(d0.$$scope={dirty:_,ctx:m}),FA.$set(d0);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:m}),xA.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:m}),kA.$set(S3e);const c0={};_&2&&(c0.$$scope={dirty:_,ctx:m}),RA.$set(c0);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),BA.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),NA.$set(P3e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:m}),DA.$set(m0);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),OA.$set(B3e)},i(m){DNe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(bm.$$.fragment,m),E(fy.$$.fragment,m),E(gy.$$.fragment,m),E(py.$$.fragment,m),E(vg.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(vy.$$.fragment,m),E(My.$$.fragment,m),E(Zg.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(Ly.$$.fragment,m),E(Lh.$$.fragment,m),E(xh.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Py.$$.fragment,m),E(Hh.$$.fragment,m),E(Uh.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E(jy.$$.fragment,m),E(Kh.$$.fragment,m),E(Dy.$$.fragment,m),E(Xp.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(Xy.$$.fragment,m),E(Wp.$$.fragment,m),E(zy.$$.fragment,m),E(I_.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Uy.$$.fragment,m),E(N_.$$.fragment,m),E(Jy.$$.fragment,m),E(Mb.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(eL.$$.fragment,m),E(Cb.$$.fragment,m),E(oL.$$.fragment,m),E(l2.$$.fragment,m),E(rL.$$.fragment,m),E(tL.$$.fragment,m),E(nL.$$.fragment,m),E(d2.$$.fragment,m),E(sL.$$.fragment,m),E(y2.$$.fragment,m),E(lL.$$.fragment,m),E(iL.$$.fragment,m),E(cL.$$.fragment,m),E(x2.$$.fragment,m),E(mL.$$.fragment,m),E(Ev.$$.fragment,m),E(fL.$$.fragment,m),E(gL.$$.fragment,m),E(uL.$$.fragment,m),E(wv.$$.fragment,m),E(pL.$$.fragment,m),E(rF.$$.fragment,m),E(_L.$$.fragment,m),E(bL.$$.fragment,m),E(FL.$$.fragment,m),E(aF.$$.fragment,m),E(TL.$$.fragment,m),E(mF.$$.fragment,m),E(ML.$$.fragment,m),E(EL.$$.fragment,m),E(wL.$$.fragment,m),E(gF.$$.fragment,m),E(AL.$$.fragment,m),E(HF.$$.fragment,m),E(yL.$$.fragment,m),E(LL.$$.fragment,m),E($L.$$.fragment,m),E(JF.$$.fragment,m),E(kL.$$.fragment,m),E(q1.$$.fragment,m),E(SL.$$.fragment,m),E(RL.$$.fragment,m),E(BL.$$.fragment,m),E(j1.$$.fragment,m),E(IL.$$.fragment,m),E(O1.$$.fragment,m),E(qL.$$.fragment,m),E(NL.$$.fragment,m),E(DL.$$.fragment,m),E(X1.$$.fragment,m),E(GL.$$.fragment,m),E(tT.$$.fragment,m),E(OL.$$.fragment,m),E(VL.$$.fragment,m),E(zL.$$.fragment,m),E(nT.$$.fragment,m),E(WL.$$.fragment,m),E(iT.$$.fragment,m),E(QL.$$.fragment,m),E(HL.$$.fragment,m),E(JL.$$.fragment,m),E(cT.$$.fragment,m),E(YL.$$.fragment,m),E(TT.$$.fragment,m),E(KL.$$.fragment,m),E(ZL.$$.fragment,m),E(o8.$$.fragment,m),E(ET.$$.fragment,m),E(r8.$$.fragment,m),E($T.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(ST.$$.fragment,m),E(l8.$$.fragment,m),E(VT.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(zT.$$.fragment,m),E(f8.$$.fragment,m),E(UT.$$.fragment,m),E(h8.$$.fragment,m),E(u8.$$.fragment,m),E(_8.$$.fragment,m),E(YT.$$.fragment,m),E(b8.$$.fragment,m),E(aM.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(M8.$$.fragment,m),E(sM.$$.fragment,m),E(E8.$$.fragment,m),E(mM.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(y8.$$.fragment,m),E(gM.$$.fragment,m),E(L8.$$.fragment,m),E(_M.$$.fragment,m),E($8.$$.fragment,m),E(k8.$$.fragment,m),E(R8.$$.fragment,m),E(vM.$$.fragment,m),E(P8.$$.fragment,m),E(MM.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(CM.$$.fragment,m),E(j8.$$.fragment,m),E($M.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(V8.$$.fragment,m),E(SM.$$.fragment,m),E(X8.$$.fragment,m),E(BM.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(qM.$$.fragment,m),E(U8.$$.fragment,m),E(x4.$$.fragment,m),E(J8.$$.fragment,m),E(Y8.$$.fragment,m),E(Z8.$$.fragment,m),E(k4.$$.fragment,m),E(e7.$$.fragment,m),E(oE.$$.fragment,m),E(o7.$$.fragment,m),E(r7.$$.fragment,m),E(a7.$$.fragment,m),E(tE.$$.fragment,m),E(n7.$$.fragment,m),E(pE.$$.fragment,m),E(s7.$$.fragment,m),E(l7.$$.fragment,m),E(d7.$$.fragment,m),E(bE.$$.fragment,m),E(c7.$$.fragment,m),E(EE.$$.fragment,m),E(m7.$$.fragment,m),E(f7.$$.fragment,m),E(h7.$$.fragment,m),E(wE.$$.fragment,m),E(u7.$$.fragment,m),E(WE.$$.fragment,m),E(p7.$$.fragment,m),E(_7.$$.fragment,m),E(v7.$$.fragment,m),E(HE.$$.fragment,m),E(F7.$$.fragment,m),E(nC.$$.fragment,m),E(T7.$$.fragment,m),E(M7.$$.fragment,m),E(C7.$$.fragment,m),E(lC.$$.fragment,m),E(w7.$$.fragment,m),E(PC.$$.fragment,m),E(A7.$$.fragment,m),E(y7.$$.fragment,m),E(x7.$$.fragment,m),E(IC.$$.fragment,m),E($7.$$.fragment,m),E(e5.$$.fragment,m),E(k7.$$.fragment,m),E(S7.$$.fragment,m),E(P7.$$.fragment,m),E(r5.$$.fragment,m),E(B7.$$.fragment,m),E(n5.$$.fragment,m),E(q7.$$.fragment,m),E(N7.$$.fragment,m),E(D7.$$.fragment,m),E(l5.$$.fragment,m),E(G7.$$.fragment,m),E(d5.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(z7.$$.fragment,m),E(m5.$$.fragment,m),E(W7.$$.fragment,m),E(S5.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(J7.$$.fragment,m),E(P5.$$.fragment,m),E(Y7.$$.fragment,m),E(o3.$$.fragment,m),E(K7.$$.fragment,m),E(Z7.$$.fragment,m),E(ox.$$.fragment,m),E(t3.$$.fragment,m),E(rx.$$.fragment,m),E(n3.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(l3.$$.fragment,m),E(lx.$$.fragment,m),E(d3.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(m3.$$.fragment,m),E(fx.$$.fragment,m),E(q3.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(j3.$$.fragment,m),E(_x.$$.fragment,m),E(U3.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(Y3.$$.fragment,m),E(Mx.$$.fragment,m),E(cw.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(fw.$$.fragment,m),E(yx.$$.fragment,m),E(Ew.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(ww.$$.fragment,m),E(Sx.$$.fragment,m),E(Bw.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(qw.$$.fragment,m),E(qx.$$.fragment,m),E(Hw.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(Gx.$$.fragment,m),E(Jw.$$.fragment,m),E(Ox.$$.fragment,m),E(lA.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(Wx.$$.fragment,m),E(dA.$$.fragment,m),E(Qx.$$.fragment,m),E(bA.$$.fragment,m),E(Hx.$$.fragment,m),E(Ux.$$.fragment,m),E(Yx.$$.fragment,m),E(FA.$$.fragment,m),E(Kx.$$.fragment,m),E(xA.$$.fragment,m),E(Zx.$$.fragment,m),E(e9.$$.fragment,m),E(r9.$$.fragment,m),E(kA.$$.fragment,m),E(t9.$$.fragment,m),E(RA.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(BA.$$.fragment,m),E(i9.$$.fragment,m),E(NA.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(DA.$$.fragment,m),E(h9.$$.fragment,m),E(OA.$$.fragment,m),DNe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(bm.$$.fragment,m),C(fy.$$.fragment,m),C(gy.$$.fragment,m),C(py.$$.fragment,m),C(vg.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(vy.$$.fragment,m),C(My.$$.fragment,m),C(Zg.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(Ly.$$.fragment,m),C(Lh.$$.fragment,m),C(xh.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Py.$$.fragment,m),C(Hh.$$.fragment,m),C(Uh.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C(jy.$$.fragment,m),C(Kh.$$.fragment,m),C(Dy.$$.fragment,m),C(Xp.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(Xy.$$.fragment,m),C(Wp.$$.fragment,m),C(zy.$$.fragment,m),C(I_.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Uy.$$.fragment,m),C(N_.$$.fragment,m),C(Jy.$$.fragment,m),C(Mb.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(eL.$$.fragment,m),C(Cb.$$.fragment,m),C(oL.$$.fragment,m),C(l2.$$.fragment,m),C(rL.$$.fragment,m),C(tL.$$.fragment,m),C(nL.$$.fragment,m),C(d2.$$.fragment,m),C(sL.$$.fragment,m),C(y2.$$.fragment,m),C(lL.$$.fragment,m),C(iL.$$.fragment,m),C(cL.$$.fragment,m),C(x2.$$.fragment,m),C(mL.$$.fragment,m),C(Ev.$$.fragment,m),C(fL.$$.fragment,m),C(gL.$$.fragment,m),C(uL.$$.fragment,m),C(wv.$$.fragment,m),C(pL.$$.fragment,m),C(rF.$$.fragment,m),C(_L.$$.fragment,m),C(bL.$$.fragment,m),C(FL.$$.fragment,m),C(aF.$$.fragment,m),C(TL.$$.fragment,m),C(mF.$$.fragment,m),C(ML.$$.fragment,m),C(EL.$$.fragment,m),C(wL.$$.fragment,m),C(gF.$$.fragment,m),C(AL.$$.fragment,m),C(HF.$$.fragment,m),C(yL.$$.fragment,m),C(LL.$$.fragment,m),C($L.$$.fragment,m),C(JF.$$.fragment,m),C(kL.$$.fragment,m),C(q1.$$.fragment,m),C(SL.$$.fragment,m),C(RL.$$.fragment,m),C(BL.$$.fragment,m),C(j1.$$.fragment,m),C(IL.$$.fragment,m),C(O1.$$.fragment,m),C(qL.$$.fragment,m),C(NL.$$.fragment,m),C(DL.$$.fragment,m),C(X1.$$.fragment,m),C(GL.$$.fragment,m),C(tT.$$.fragment,m),C(OL.$$.fragment,m),C(VL.$$.fragment,m),C(zL.$$.fragment,m),C(nT.$$.fragment,m),C(WL.$$.fragment,m),C(iT.$$.fragment,m),C(QL.$$.fragment,m),C(HL.$$.fragment,m),C(JL.$$.fragment,m),C(cT.$$.fragment,m),C(YL.$$.fragment,m),C(TT.$$.fragment,m),C(KL.$$.fragment,m),C(ZL.$$.fragment,m),C(o8.$$.fragment,m),C(ET.$$.fragment,m),C(r8.$$.fragment,m),C($T.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(ST.$$.fragment,m),C(l8.$$.fragment,m),C(VT.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(zT.$$.fragment,m),C(f8.$$.fragment,m),C(UT.$$.fragment,m),C(h8.$$.fragment,m),C(u8.$$.fragment,m),C(_8.$$.fragment,m),C(YT.$$.fragment,m),C(b8.$$.fragment,m),C(aM.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(M8.$$.fragment,m),C(sM.$$.fragment,m),C(E8.$$.fragment,m),C(mM.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(y8.$$.fragment,m),C(gM.$$.fragment,m),C(L8.$$.fragment,m),C(_M.$$.fragment,m),C($8.$$.fragment,m),C(k8.$$.fragment,m),C(R8.$$.fragment,m),C(vM.$$.fragment,m),C(P8.$$.fragment,m),C(MM.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(CM.$$.fragment,m),C(j8.$$.fragment,m),C($M.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(V8.$$.fragment,m),C(SM.$$.fragment,m),C(X8.$$.fragment,m),C(BM.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(qM.$$.fragment,m),C(U8.$$.fragment,m),C(x4.$$.fragment,m),C(J8.$$.fragment,m),C(Y8.$$.fragment,m),C(Z8.$$.fragment,m),C(k4.$$.fragment,m),C(e7.$$.fragment,m),C(oE.$$.fragment,m),C(o7.$$.fragment,m),C(r7.$$.fragment,m),C(a7.$$.fragment,m),C(tE.$$.fragment,m),C(n7.$$.fragment,m),C(pE.$$.fragment,m),C(s7.$$.fragment,m),C(l7.$$.fragment,m),C(d7.$$.fragment,m),C(bE.$$.fragment,m),C(c7.$$.fragment,m),C(EE.$$.fragment,m),C(m7.$$.fragment,m),C(f7.$$.fragment,m),C(h7.$$.fragment,m),C(wE.$$.fragment,m),C(u7.$$.fragment,m),C(WE.$$.fragment,m),C(p7.$$.fragment,m),C(_7.$$.fragment,m),C(v7.$$.fragment,m),C(HE.$$.fragment,m),C(F7.$$.fragment,m),C(nC.$$.fragment,m),C(T7.$$.fragment,m),C(M7.$$.fragment,m),C(C7.$$.fragment,m),C(lC.$$.fragment,m),C(w7.$$.fragment,m),C(PC.$$.fragment,m),C(A7.$$.fragment,m),C(y7.$$.fragment,m),C(x7.$$.fragment,m),C(IC.$$.fragment,m),C($7.$$.fragment,m),C(e5.$$.fragment,m),C(k7.$$.fragment,m),C(S7.$$.fragment,m),C(P7.$$.fragment,m),C(r5.$$.fragment,m),C(B7.$$.fragment,m),C(n5.$$.fragment,m),C(q7.$$.fragment,m),C(N7.$$.fragment,m),C(D7.$$.fragment,m),C(l5.$$.fragment,m),C(G7.$$.fragment,m),C(d5.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(z7.$$.fragment,m),C(m5.$$.fragment,m),C(W7.$$.fragment,m),C(S5.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(J7.$$.fragment,m),C(P5.$$.fragment,m),C(Y7.$$.fragment,m),C(o3.$$.fragment,m),C(K7.$$.fragment,m),C(Z7.$$.fragment,m),C(ox.$$.fragment,m),C(t3.$$.fragment,m),C(rx.$$.fragment,m),C(n3.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(l3.$$.fragment,m),C(lx.$$.fragment,m),C(d3.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(m3.$$.fragment,m),C(fx.$$.fragment,m),C(q3.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(j3.$$.fragment,m),C(_x.$$.fragment,m),C(U3.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(Y3.$$.fragment,m),C(Mx.$$.fragment,m),C(cw.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(fw.$$.fragment,m),C(yx.$$.fragment,m),C(Ew.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(ww.$$.fragment,m),C(Sx.$$.fragment,m),C(Bw.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(qw.$$.fragment,m),C(qx.$$.fragment,m),C(Hw.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(Gx.$$.fragment,m),C(Jw.$$.fragment,m),C(Ox.$$.fragment,m),C(lA.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(Wx.$$.fragment,m),C(dA.$$.fragment,m),C(Qx.$$.fragment,m),C(bA.$$.fragment,m),C(Hx.$$.fragment,m),C(Ux.$$.fragment,m),C(Yx.$$.fragment,m),C(FA.$$.fragment,m),C(Kx.$$.fragment,m),C(xA.$$.fragment,m),C(Zx.$$.fragment,m),C(e9.$$.fragment,m),C(r9.$$.fragment,m),C(kA.$$.fragment,m),C(t9.$$.fragment,m),C(RA.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(BA.$$.fragment,m),C(i9.$$.fragment,m),C(NA.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(DA.$$.fragment,m),C(h9.$$.fragment,m),C(OA.$$.fragment,m),DNe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(gm),m&&t(rt),m&&t(je),m&&t(We),m&&t(um),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(qIe),m&&t(_i),w(cy),m&&t(NIe),m&&t(kn),m&&t(jIe),w(my,m),m&&t(DIe),m&&t(S$),m&&t(GIe),w(bm,m),m&&t(OIe),m&&t(bi),w(fy),m&&t(VIe),m&&t(Co),w(gy),w(py),w(vg),w(_y),m&&t(XIe),m&&t(Fi),w(by),m&&t(zIe),m&&t(wo),w(vy),w(My),w(Zg),w(Ey),m&&t(WIe),m&&t(Ti),w(Cy),m&&t(QIe),m&&t(Ao),w(wy),w(Ly),w(Lh),w(xh),w(xy),m&&t(HIe),m&&t(Mi),w($y),m&&t(UIe),m&&t(yo),w(ky),w(Py),w(Hh),w(Uh),w(By),m&&t(JIe),m&&t(Ci),w(Iy),m&&t(YIe),m&&t(Lo),w(qy),w(jy),w(Kh),w(Dy),w(Xp),m&&t(KIe),m&&t(yi),w(Gy),m&&t(ZIe),m&&t(xo),w(Oy),w(Xy),w(Wp),w(zy),w(I_),m&&t(eqe),m&&t($i),w(Wy),m&&t(oqe),m&&t($o),w(Qy),w(Uy),w(N_),w(Jy),w(Mb),m&&t(rqe),m&&t(Ri),w(Yy),m&&t(tqe),m&&t(ko),w(Ky),w(eL),w(Cb),w(oL),w(l2),m&&t(aqe),m&&t(Ii),w(rL),m&&t(nqe),m&&t(So),w(tL),w(nL),w(d2),w(sL),w(y2),m&&t(sqe),m&&t(ji),w(lL),m&&t(lqe),m&&t(Ro),w(iL),w(cL),w(x2),w(mL),w(Ev),m&&t(iqe),m&&t(Oi),w(fL),m&&t(dqe),m&&t(Po),w(gL),w(uL),w(wv),w(pL),w(rF),m&&t(cqe),m&&t(zi),w(_L),m&&t(mqe),m&&t(Bo),w(bL),w(FL),w(aF),w(TL),w(mF),m&&t(fqe),m&&t(Hi),w(ML),m&&t(gqe),m&&t(Io),w(EL),w(wL),w(gF),w(AL),w(HF),m&&t(hqe),m&&t(Yi),w(yL),m&&t(uqe),m&&t(qo),w(LL),w($L),w(JF),w(kL),w(q1),m&&t(pqe),m&&t(ed),w(SL),m&&t(_qe),m&&t(No),w(RL),w(BL),w(j1),w(IL),w(O1),m&&t(bqe),m&&t(td),w(qL),m&&t(vqe),m&&t(jo),w(NL),w(DL),w(X1),w(GL),w(tT),m&&t(Fqe),m&&t(sd),w(OL),m&&t(Tqe),m&&t(Do),w(VL),w(zL),w(nT),w(WL),w(iT),m&&t(Mqe),m&&t(dd),w(QL),m&&t(Eqe),m&&t(Go),w(HL),w(JL),w(cT),w(YL),w(TT),m&&t(Cqe),m&&t(fd),w(KL),m&&t(wqe),m&&t(Oo),w(ZL),w(o8),w(ET),w(r8),w($T),m&&t(Aqe),m&&t(ud),w(t8),m&&t(yqe),m&&t(Vo),w(a8),w(s8),w(ST),w(l8),w(VT),m&&t(Lqe),m&&t(bd),w(i8),m&&t(xqe),m&&t(Xo),w(d8),w(m8),w(zT),w(f8),w(UT),m&&t($qe),m&&t(Td),w(h8),m&&t(kqe),m&&t(zo),w(u8),w(_8),w(YT),w(b8),w(aM),m&&t(Sqe),m&&t(Cd),w(v8),m&&t(Rqe),m&&t(Wo),w(F8),w(M8),w(sM),w(E8),w(mM),m&&t(Pqe),m&&t(Ld),w(C8),m&&t(Bqe),m&&t(Qo),w(w8),w(y8),w(gM),w(L8),w(_M),m&&t(Iqe),m&&t(kd),w($8),m&&t(qqe),m&&t(Ho),w(k8),w(R8),w(vM),w(P8),w(MM),m&&t(Nqe),m&&t(Pd),w(B8),m&&t(jqe),m&&t(Uo),w(I8),w(N8),w(CM),w(j8),w($M),m&&t(Dqe),m&&t(qd),w(D8),m&&t(Gqe),m&&t(Jo),w(G8),w(V8),w(SM),w(X8),w(BM),m&&t(Oqe),m&&t(Dd),w(z8),m&&t(Vqe),m&&t(Yo),w(W8),w(H8),w(qM),w(U8),w(x4),m&&t(Xqe),m&&t(Vd),w(J8),m&&t(zqe),m&&t(Ko),w(Y8),w(Z8),w(k4),w(e7),w(oE),m&&t(Wqe),m&&t(Wd),w(o7),m&&t(Qqe),m&&t(Zo),w(r7),w(a7),w(tE),w(n7),w(pE),m&&t(Hqe),m&&t(Ud),w(s7),m&&t(Uqe),m&&t(er),w(l7),w(d7),w(bE),w(c7),w(EE),m&&t(Jqe),m&&t(Kd),w(m7),m&&t(Yqe),m&&t(or),w(f7),w(h7),w(wE),w(u7),w(WE),m&&t(Kqe),m&&t(oc),w(p7),m&&t(Zqe),m&&t(rr),w(_7),w(v7),w(HE),w(F7),w(nC),m&&t(eNe),m&&t(ac),w(T7),m&&t(oNe),m&&t(tr),w(M7),w(C7),w(lC),w(w7),w(PC),m&&t(rNe),m&&t(lc),w(A7),m&&t(tNe),m&&t(ar),w(y7),w(x7),w(IC),w($7),w(e5),m&&t(aNe),m&&t(cc),w(k7),m&&t(nNe),m&&t(nr),w(S7),w(P7),w(r5),w(B7),w(n5),m&&t(sNe),m&&t(gc),w(q7),m&&t(lNe),m&&t(sr),w(N7),w(D7),w(l5),w(G7),w(d5),m&&t(iNe),m&&t(pc),w(O7),m&&t(dNe),m&&t(lr),w(V7),w(z7),w(m5),w(W7),w(S5),m&&t(cNe),m&&t(vc),w(Q7),m&&t(mNe),m&&t(ir),w(H7),w(J7),w(P5),w(Y7),w(o3),m&&t(fNe),m&&t(Mc),w(K7),m&&t(gNe),m&&t(dr),w(Z7),w(ox),w(t3),w(rx),w(n3),m&&t(hNe),m&&t(wc),w(tx),m&&t(uNe),m&&t(cr),w(ax),w(sx),w(l3),w(lx),w(d3),m&&t(pNe),m&&t(Lc),w(ix),m&&t(_Ne),m&&t(mr),w(dx),w(mx),w(m3),w(fx),w(q3),m&&t(bNe),m&&t(kc),w(gx),m&&t(vNe),m&&t(fr),w(hx),w(px),w(j3),w(_x),w(U3),m&&t(FNe),m&&t(Pc),w(bx),m&&t(TNe),m&&t(gr),w(vx),w(Tx),w(Y3),w(Mx),w(cw),m&&t(MNe),m&&t(qc),w(Ex),m&&t(ENe),m&&t(hr),w(Cx),w(Ax),w(fw),w(yx),w(Ew),m&&t(CNe),m&&t(Dc),w(Lx),m&&t(wNe),m&&t(ur),w(xx),w(kx),w(ww),w(Sx),w(Bw),m&&t(ANe),m&&t(Vc),w(Rx),m&&t(yNe),m&&t(pr),w(Px),w(Ix),w(qw),w(qx),w(Hw),m&&t(LNe),m&&t(Wc),w(Nx),m&&t(xNe),m&&t(_r),w(jx),w(Gx),w(Jw),w(Ox),w(lA),m&&t($Ne),m&&t(Uc),w(Vx),m&&t(kNe),m&&t(br),w(Xx),w(Wx),w(dA),w(Qx),w(bA),m&&t(SNe),m&&t(Kc),w(Hx),m&&t(RNe),m&&t(vr),w(Ux),w(Yx),w(FA),w(Kx),w(xA),m&&t(PNe),m&&t(om),w(Zx),m&&t(BNe),m&&t(Fr),w(e9),w(r9),w(kA),w(t9),w(RA),m&&t(INe),m&&t(am),w(a9),m&&t(qNe),m&&t(Tr),w(n9),w(l9),w(BA),w(i9),w(NA),m&&t(NNe),m&&t(lm),w(c9),m&&t(jNe),m&&t(Mr),w(m9),w(g9),w(DA),w(h9),w(OA)}}}const Pxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Bxt(L){return B8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Oxt extends k8t{constructor(g){super();S8t(this,g,Bxt,Rxt,R8t,{})}}export{Oxt as default,Pxt as metadata};
