import{S as WCt,i as HCt,s as UCt,e as a,k as l,w as v,t as o,M as JCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as YCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as pBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function KCt(L){let g,F,u,f,p,d,h,vo,oi,om,Yr,ri,ti,g6,rm,Ie,Oe,ai,Tn,h6,Mn,En,u6,ni,Cn,p6,si,tm,ba;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),vo=o(`, make sure its
`),oi=a("code"),om=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),g6=o(")."),rm=l(),Ie=a("p"),Oe=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),h6=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),u6=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),p6=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tm=o("NewModelConfig"),ba=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var x9=s(u);f=r(x9,"NewModelConfig"),x9.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),vo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var $9=s(oi);om=r($9,"model_type"),$9.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var k9=s(ri);ti=r(k9,'"new-model"'),k9.forEach(t),g6=r(Ae,")."),Ae.forEach(t),rm=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var Fa=s(ai);Tn=r(Fa,"NewModel"),Fa.forEach(t),h6=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var S9=s(Mn);En=r(S9,"PreTrainedModel"),S9.forEach(t),u6=r(To,`, make sure its
`),ni=n(To,"CODE",{});var am=s(ni);Cn=r(am,"config_class"),am.forEach(t),p6=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var R9=s(si);tm=r(R9,"NewModelConfig"),R9.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,vo),e(g,oi),e(oi,om),e(g,Yr),e(g,ri),e(ri,ti),e(g,g6),b(Ve,rm,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ai),e(ai,Tn),e(Ie,h6),e(Ie,Mn),e(Mn,En),e(Ie,u6),e(Ie,ni),e(ni,Cn),e(Ie,p6),e(Ie,si),e(si,tm),e(Ie,ba)},d(Ve){Ve&&t(g),Ve&&t(rm),Ve&&t(Ie)}}}function ZCt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o3t(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var vo=s(u);f=r(vo,"use_auth_token=True"),vo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function r3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t3t(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var vo=s(u);f=r(vo,"use_auth_token=True"),vo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function a3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ewt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function owt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function twt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function awt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function swt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _wt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Twt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ewt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Awt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ywt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $wt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Swt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Owt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wwt(L){let g,F,u,f,p,d,h,vo,oi,om,Yr,ri,ti,g6,rm,Ie,Oe,ai,Tn,h6,Mn,En,u6,ni,Cn,p6,si,tm,ba,Ve,Ae,x9,li,$9,k9,To,Fa,S9,am,R9,Jqe,VRe,ii,nm,QK,_6,Yqe,WK,Kqe,XRe,wn,Zqe,HK,eNe,oNe,UK,rNe,tNe,zRe,b6,QRe,B9,aNe,WRe,sm,HRe,di,lm,JK,F6,nNe,YK,sNe,URe,Mo,v6,lNe,T6,iNe,P9,dNe,cNe,mNe,M6,fNe,KK,gNe,hNe,uNe,vr,E6,pNe,ZK,_Ne,bNe,ci,FNe,eZ,vNe,TNe,oZ,MNe,ENe,CNe,A,im,rZ,wNe,ANe,I9,yNe,LNe,xNe,dm,tZ,$Ne,kNe,q9,SNe,RNe,BNe,cm,aZ,PNe,INe,N9,qNe,NNe,jNe,mm,nZ,DNe,GNe,j9,ONe,VNe,XNe,fm,sZ,zNe,QNe,D9,WNe,HNe,UNe,gm,lZ,JNe,YNe,G9,KNe,ZNe,eje,hm,iZ,oje,rje,O9,tje,aje,nje,um,dZ,sje,lje,V9,ije,dje,cje,pm,cZ,mje,fje,X9,gje,hje,uje,_m,mZ,pje,_je,z9,bje,Fje,vje,bm,fZ,Tje,Mje,Q9,Eje,Cje,wje,Fm,gZ,Aje,yje,W9,Lje,xje,$je,vm,hZ,kje,Sje,H9,Rje,Bje,Pje,Tm,uZ,Ije,qje,U9,Nje,jje,Dje,Mm,pZ,Gje,Oje,J9,Vje,Xje,zje,Em,_Z,Qje,Wje,Y9,Hje,Uje,Jje,Cm,bZ,Yje,Kje,K9,Zje,eDe,oDe,wm,FZ,rDe,tDe,Z9,aDe,nDe,sDe,Am,vZ,lDe,iDe,e$,dDe,cDe,mDe,ym,TZ,fDe,gDe,o$,hDe,uDe,pDe,Lm,MZ,_De,bDe,r$,FDe,vDe,TDe,xm,EZ,MDe,EDe,t$,CDe,wDe,ADe,$m,CZ,yDe,LDe,a$,xDe,$De,kDe,km,wZ,SDe,RDe,n$,BDe,PDe,IDe,Sm,AZ,qDe,NDe,s$,jDe,DDe,GDe,Rm,yZ,ODe,VDe,l$,XDe,zDe,QDe,Bm,LZ,WDe,HDe,i$,UDe,JDe,YDe,Pm,xZ,KDe,ZDe,d$,eGe,oGe,rGe,Im,$Z,tGe,aGe,c$,nGe,sGe,lGe,qm,kZ,iGe,dGe,m$,cGe,mGe,fGe,Nm,SZ,gGe,hGe,f$,uGe,pGe,_Ge,jm,RZ,bGe,FGe,g$,vGe,TGe,MGe,Dm,BZ,EGe,CGe,h$,wGe,AGe,yGe,Gm,PZ,LGe,xGe,u$,$Ge,kGe,SGe,Om,IZ,RGe,BGe,p$,PGe,IGe,qGe,Vm,qZ,NGe,jGe,_$,DGe,GGe,OGe,Xm,NZ,VGe,XGe,b$,zGe,QGe,WGe,zm,jZ,HGe,UGe,F$,JGe,YGe,KGe,Qm,DZ,ZGe,eOe,v$,oOe,rOe,tOe,Wm,GZ,aOe,nOe,T$,sOe,lOe,iOe,Hm,OZ,dOe,cOe,M$,mOe,fOe,gOe,Um,VZ,hOe,uOe,E$,pOe,_Oe,bOe,Jm,XZ,FOe,vOe,C$,TOe,MOe,EOe,Ym,zZ,COe,wOe,w$,AOe,yOe,LOe,Km,QZ,xOe,$Oe,A$,kOe,SOe,ROe,Zm,WZ,BOe,POe,y$,IOe,qOe,NOe,ef,HZ,jOe,DOe,L$,GOe,OOe,VOe,of,UZ,XOe,zOe,x$,QOe,WOe,HOe,rf,JZ,UOe,JOe,$$,YOe,KOe,ZOe,tf,YZ,eVe,oVe,k$,rVe,tVe,aVe,af,KZ,nVe,sVe,S$,lVe,iVe,dVe,nf,ZZ,cVe,mVe,R$,fVe,gVe,hVe,sf,eee,uVe,pVe,B$,_Ve,bVe,FVe,lf,oee,vVe,TVe,P$,MVe,EVe,CVe,df,ree,wVe,AVe,I$,yVe,LVe,xVe,cf,tee,$Ve,kVe,q$,SVe,RVe,BVe,mf,aee,PVe,IVe,N$,qVe,NVe,jVe,ff,nee,DVe,GVe,j$,OVe,VVe,XVe,gf,see,zVe,QVe,D$,WVe,HVe,UVe,hf,lee,JVe,YVe,G$,KVe,ZVe,eXe,uf,iee,oXe,rXe,O$,tXe,aXe,nXe,pf,dee,sXe,lXe,V$,iXe,dXe,cXe,_f,cee,mXe,fXe,X$,gXe,hXe,uXe,bf,mee,pXe,_Xe,z$,bXe,FXe,vXe,Ff,fee,TXe,MXe,Q$,EXe,CXe,wXe,vf,gee,AXe,yXe,W$,LXe,xXe,$Xe,Tf,hee,kXe,SXe,H$,RXe,BXe,PXe,Mf,uee,IXe,qXe,U$,NXe,jXe,DXe,Ef,pee,GXe,OXe,J$,VXe,XXe,zXe,Cf,_ee,QXe,WXe,Y$,HXe,UXe,JXe,wf,bee,YXe,KXe,K$,ZXe,eze,oze,Af,Fee,rze,tze,Z$,aze,nze,sze,yf,vee,lze,ize,ek,dze,cze,mze,Lf,Tee,fze,gze,ok,hze,uze,pze,xf,Mee,_ze,bze,rk,Fze,vze,Tze,$f,Eee,Mze,Eze,tk,Cze,wze,Aze,kf,Cee,yze,Lze,ak,xze,$ze,kze,Sf,wee,Sze,Rze,nk,Bze,Pze,Ize,Rf,Aee,qze,Nze,sk,jze,Dze,Gze,Bf,yee,Oze,Vze,lk,Xze,zze,Qze,Pf,Lee,Wze,Hze,ik,Uze,Jze,Yze,If,xee,Kze,Zze,dk,eQe,oQe,rQe,qf,$ee,tQe,aQe,ck,nQe,sQe,lQe,Nf,kee,iQe,dQe,mk,cQe,mQe,fQe,jf,See,gQe,hQe,fk,uQe,pQe,_Qe,Df,Ree,bQe,FQe,gk,vQe,TQe,MQe,Gf,Bee,EQe,CQe,hk,wQe,AQe,yQe,Of,Pee,LQe,xQe,uk,$Qe,kQe,SQe,Vf,Iee,RQe,BQe,pk,PQe,IQe,qQe,Xf,qee,NQe,jQe,_k,DQe,GQe,OQe,zf,Nee,VQe,XQe,bk,zQe,QQe,WQe,Qf,jee,HQe,UQe,Fk,JQe,YQe,KQe,Wf,Dee,ZQe,eWe,vk,oWe,rWe,tWe,Hf,Gee,aWe,nWe,Tk,sWe,lWe,iWe,Uf,Oee,dWe,cWe,Mk,mWe,fWe,gWe,Jf,Vee,hWe,uWe,Ek,pWe,_We,bWe,Yf,Xee,FWe,vWe,Ck,TWe,MWe,EWe,Kf,zee,CWe,wWe,wk,AWe,yWe,LWe,Zf,Qee,xWe,$We,Ak,kWe,SWe,RWe,eg,Wee,BWe,PWe,yk,IWe,qWe,NWe,og,Hee,jWe,DWe,Lk,GWe,OWe,VWe,rg,Uee,XWe,zWe,xk,QWe,WWe,HWe,tg,Jee,UWe,JWe,$k,YWe,KWe,ZWe,ag,eHe,ng,C6,oHe,Yee,rHe,JRe,mi,sg,Kee,w6,tHe,Zee,aHe,YRe,Eo,A6,nHe,y6,sHe,kk,lHe,iHe,dHe,L6,cHe,eoe,mHe,fHe,gHe,Tr,x6,hHe,ooe,uHe,pHe,va,_He,roe,bHe,FHe,toe,vHe,THe,aoe,MHe,EHe,CHe,k,An,noe,wHe,AHe,Sk,yHe,LHe,Rk,xHe,$He,kHe,yn,soe,SHe,RHe,Bk,BHe,PHe,Pk,IHe,qHe,NHe,Ln,loe,jHe,DHe,Ik,GHe,OHe,qk,VHe,XHe,zHe,lg,ioe,QHe,WHe,Nk,HHe,UHe,JHe,xn,doe,YHe,KHe,jk,ZHe,eUe,Dk,oUe,rUe,tUe,ig,coe,aUe,nUe,Gk,sUe,lUe,iUe,dg,moe,dUe,cUe,Ok,mUe,fUe,gUe,cg,foe,hUe,uUe,Vk,pUe,_Ue,bUe,$n,goe,FUe,vUe,Xk,TUe,MUe,zk,EUe,CUe,wUe,kn,hoe,AUe,yUe,Qk,LUe,xUe,Wk,$Ue,kUe,SUe,Sn,uoe,RUe,BUe,Hk,PUe,IUe,Uk,qUe,NUe,jUe,mg,poe,DUe,GUe,Jk,OUe,VUe,XUe,fg,_oe,zUe,QUe,Yk,WUe,HUe,UUe,Rn,boe,JUe,YUe,Kk,KUe,ZUe,Zk,eJe,oJe,rJe,gg,Foe,tJe,aJe,eS,nJe,sJe,lJe,Bn,voe,iJe,dJe,oS,cJe,mJe,rS,fJe,gJe,hJe,Pn,Toe,uJe,pJe,tS,_Je,bJe,aS,FJe,vJe,TJe,In,Moe,MJe,EJe,nS,CJe,wJe,sS,AJe,yJe,LJe,hg,Eoe,xJe,$Je,lS,kJe,SJe,RJe,qn,Coe,BJe,PJe,iS,IJe,qJe,dS,NJe,jJe,DJe,Nn,woe,GJe,OJe,cS,VJe,XJe,mS,zJe,QJe,WJe,jn,Aoe,HJe,UJe,fS,JJe,YJe,gS,KJe,ZJe,eYe,Dn,yoe,oYe,rYe,hS,tYe,aYe,uS,nYe,sYe,lYe,Gn,Loe,iYe,dYe,pS,cYe,mYe,_S,fYe,gYe,hYe,On,xoe,uYe,pYe,bS,_Ye,bYe,FS,FYe,vYe,TYe,ug,$oe,MYe,EYe,vS,CYe,wYe,AYe,Vn,koe,yYe,LYe,TS,xYe,$Ye,MS,kYe,SYe,RYe,pg,Soe,BYe,PYe,ES,IYe,qYe,NYe,Xn,Roe,jYe,DYe,CS,GYe,OYe,wS,VYe,XYe,zYe,zn,Boe,QYe,WYe,AS,HYe,UYe,yS,JYe,YYe,KYe,Qn,Poe,ZYe,eKe,LS,oKe,rKe,xS,tKe,aKe,nKe,Wn,Ioe,sKe,lKe,$S,iKe,dKe,kS,cKe,mKe,fKe,Hn,qoe,gKe,hKe,SS,uKe,pKe,RS,_Ke,bKe,FKe,_g,Noe,vKe,TKe,BS,MKe,EKe,CKe,Un,joe,wKe,AKe,PS,yKe,LKe,IS,xKe,$Ke,kKe,Jn,Doe,SKe,RKe,qS,BKe,PKe,NS,IKe,qKe,NKe,Yn,Goe,jKe,DKe,jS,GKe,OKe,DS,VKe,XKe,zKe,Kn,Ooe,QKe,WKe,GS,HKe,UKe,OS,JKe,YKe,KKe,Zn,Voe,ZKe,eZe,VS,oZe,rZe,XS,tZe,aZe,nZe,es,Xoe,sZe,lZe,zS,iZe,dZe,QS,cZe,mZe,fZe,bg,zoe,gZe,hZe,WS,uZe,pZe,_Ze,os,Qoe,bZe,FZe,HS,vZe,TZe,US,MZe,EZe,CZe,Fg,Woe,wZe,AZe,JS,yZe,LZe,xZe,vg,Hoe,$Ze,kZe,YS,SZe,RZe,BZe,rs,Uoe,PZe,IZe,KS,qZe,NZe,ZS,jZe,DZe,GZe,ts,Joe,OZe,VZe,eR,XZe,zZe,oR,QZe,WZe,HZe,as,Yoe,UZe,JZe,rR,YZe,KZe,tR,ZZe,eeo,oeo,Tg,Koe,reo,teo,aR,aeo,neo,seo,ns,Zoe,leo,ieo,nR,deo,ceo,sR,meo,feo,geo,ss,ere,heo,ueo,lR,peo,_eo,iR,beo,Feo,veo,ls,ore,Teo,Meo,dR,Eeo,Ceo,cR,weo,Aeo,yeo,is,rre,Leo,xeo,mR,$eo,keo,fR,Seo,Reo,Beo,ds,tre,Peo,Ieo,gR,qeo,Neo,hR,jeo,Deo,Geo,cs,are,Oeo,Veo,uR,Xeo,zeo,pR,Qeo,Weo,Heo,Mg,nre,Ueo,Jeo,_R,Yeo,Keo,Zeo,Eg,sre,eoo,ooo,bR,roo,too,aoo,Cg,lre,noo,soo,FR,loo,ioo,doo,wg,ire,coo,moo,vR,foo,goo,hoo,ms,dre,uoo,poo,TR,_oo,boo,MR,Foo,voo,Too,Ag,cre,Moo,Eoo,ER,Coo,woo,Aoo,fs,mre,yoo,Loo,CR,xoo,$oo,wR,koo,Soo,Roo,gs,fre,Boo,Poo,AR,Ioo,qoo,yR,Noo,joo,Doo,hs,gre,Goo,Ooo,LR,Voo,Xoo,xR,zoo,Qoo,Woo,us,hre,Hoo,Uoo,$R,Joo,Yoo,kR,Koo,Zoo,ero,ps,ure,oro,rro,SR,tro,aro,RR,nro,sro,lro,_s,pre,iro,dro,BR,cro,mro,PR,fro,gro,hro,yg,_re,uro,pro,IR,_ro,bro,Fro,Lg,bre,vro,Tro,qR,Mro,Ero,Cro,bs,Fre,wro,Aro,NR,yro,Lro,jR,xro,$ro,kro,Fs,vre,Sro,Rro,DR,Bro,Pro,GR,Iro,qro,Nro,vs,Tre,jro,Dro,OR,Gro,Oro,VR,Vro,Xro,zro,xg,Mre,Qro,Wro,XR,Hro,Uro,Jro,$g,Ere,Yro,Kro,zR,Zro,eto,oto,kg,Cre,rto,tto,QR,ato,nto,sto,Ts,wre,lto,ito,WR,dto,cto,HR,mto,fto,gto,Sg,Are,hto,uto,UR,pto,_to,bto,Rg,yre,Fto,vto,JR,Tto,Mto,Eto,Ms,Lre,Cto,wto,YR,Ato,yto,KR,Lto,xto,$to,Bg,xre,kto,Sto,ZR,Rto,Bto,Pto,Pg,$re,Ito,qto,eB,Nto,jto,Dto,Es,kre,Gto,Oto,oB,Vto,Xto,rB,zto,Qto,Wto,Cs,Sre,Hto,Uto,tB,Jto,Yto,aB,Kto,Zto,eao,ws,Rre,oao,rao,nB,tao,aao,sB,nao,sao,lao,As,Bre,iao,dao,lB,cao,mao,iB,fao,gao,hao,Ig,uao,qg,$6,pao,Pre,_ao,KRe,fi,Ng,Ire,k6,bao,qre,Fao,ZRe,Co,S6,vao,R6,Tao,dB,Mao,Eao,Cao,B6,wao,Nre,Aao,yao,Lao,Xe,P6,xao,jre,$ao,kao,Ta,Sao,Dre,Rao,Bao,Gre,Pao,Iao,Ore,qao,Nao,jao,te,jg,Vre,Dao,Gao,cB,Oao,Vao,Xao,Dg,Xre,zao,Qao,mB,Wao,Hao,Uao,Gg,zre,Jao,Yao,fB,Kao,Zao,eno,Og,Qre,ono,rno,gB,tno,ano,nno,Vg,Wre,sno,lno,hB,ino,dno,cno,Xg,Hre,mno,fno,uB,gno,hno,uno,zg,Ure,pno,_no,pB,bno,Fno,vno,Qg,Jre,Tno,Mno,_B,Eno,Cno,wno,Wg,Yre,Ano,yno,bB,Lno,xno,$no,Hg,Kre,kno,Sno,FB,Rno,Bno,Pno,Ug,Zre,Ino,qno,vB,Nno,jno,Dno,Jg,ete,Gno,Ono,TB,Vno,Xno,zno,Yg,ote,Qno,Wno,MB,Hno,Uno,Jno,Kg,rte,Yno,Kno,EB,Zno,eso,oso,Zg,tte,rso,tso,CB,aso,nso,sso,eh,ate,lso,iso,wB,dso,cso,mso,oh,nte,fso,gso,AB,hso,uso,pso,rh,ste,_so,bso,yB,Fso,vso,Tso,th,lte,Mso,Eso,LB,Cso,wso,Aso,ah,ite,yso,Lso,xB,xso,$so,kso,nh,dte,Sso,Rso,$B,Bso,Pso,Iso,sh,cte,qso,Nso,kB,jso,Dso,Gso,lh,mte,Oso,Vso,SB,Xso,zso,Qso,ih,fte,Wso,Hso,RB,Uso,Jso,Yso,dh,Kso,ch,Zso,mh,I6,elo,gte,olo,eBe,gi,fh,hte,q6,rlo,ute,tlo,oBe,wo,N6,alo,j6,nlo,BB,slo,llo,ilo,D6,dlo,pte,clo,mlo,flo,ze,G6,glo,_te,hlo,ulo,hi,plo,bte,_lo,blo,Fte,Flo,vlo,Tlo,be,gh,vte,Mlo,Elo,PB,Clo,wlo,Alo,hh,Tte,ylo,Llo,IB,xlo,$lo,klo,uh,Mte,Slo,Rlo,qB,Blo,Plo,Ilo,ph,Ete,qlo,Nlo,NB,jlo,Dlo,Glo,_h,Cte,Olo,Vlo,jB,Xlo,zlo,Qlo,bh,wte,Wlo,Hlo,DB,Ulo,Jlo,Ylo,Fh,Ate,Klo,Zlo,GB,eio,oio,rio,vh,yte,tio,aio,OB,nio,sio,lio,Th,Lte,iio,dio,VB,cio,mio,fio,Mh,xte,gio,hio,XB,uio,pio,_io,Eh,$te,bio,Fio,zB,vio,Tio,Mio,Ch,kte,Eio,Cio,QB,wio,Aio,yio,wh,Ste,Lio,xio,WB,$io,kio,Sio,Ah,Rte,Rio,Bio,HB,Pio,Iio,qio,yh,Nio,Lh,jio,xh,O6,Dio,Bte,Gio,rBe,ui,$h,Pte,V6,Oio,Ite,Vio,tBe,Ao,X6,Xio,pi,zio,UB,Qio,Wio,JB,Hio,Uio,Jio,z6,Yio,qte,Kio,Zio,edo,Kr,Q6,odo,Nte,rdo,tdo,_i,ado,jte,ndo,sdo,YB,ldo,ido,ddo,kh,cdo,Qe,W6,mdo,Dte,fdo,gdo,Ma,hdo,Gte,udo,pdo,Ote,_do,bdo,Vte,Fdo,vdo,Tdo,x,Sh,Xte,Mdo,Edo,KB,Cdo,wdo,Ado,Rh,zte,ydo,Ldo,ZB,xdo,$do,kdo,Bh,Qte,Sdo,Rdo,eP,Bdo,Pdo,Ido,Ph,Wte,qdo,Ndo,oP,jdo,Ddo,Gdo,Ih,Hte,Odo,Vdo,rP,Xdo,zdo,Qdo,qh,Ute,Wdo,Hdo,tP,Udo,Jdo,Ydo,Nh,Jte,Kdo,Zdo,aP,eco,oco,rco,jh,Yte,tco,aco,nP,nco,sco,lco,Dh,Kte,ico,dco,sP,cco,mco,fco,Gh,Zte,gco,hco,lP,uco,pco,_co,Oh,eae,bco,Fco,iP,vco,Tco,Mco,Vh,oae,Eco,Cco,dP,wco,Aco,yco,Xh,rae,Lco,xco,cP,$co,kco,Sco,zh,tae,Rco,Bco,mP,Pco,Ico,qco,Qh,aae,Nco,jco,fP,Dco,Gco,Oco,Wh,nae,Vco,Xco,gP,zco,Qco,Wco,Hh,sae,Hco,Uco,hP,Jco,Yco,Kco,Uh,lae,Zco,emo,uP,omo,rmo,tmo,Jh,iae,amo,nmo,pP,smo,lmo,imo,Yh,dae,dmo,cmo,_P,mmo,fmo,gmo,Kh,cae,hmo,umo,bP,pmo,_mo,bmo,Zh,mae,Fmo,vmo,FP,Tmo,Mmo,Emo,eu,fae,Cmo,wmo,vP,Amo,ymo,Lmo,ou,gae,xmo,$mo,TP,kmo,Smo,Rmo,ru,hae,Bmo,Pmo,MP,Imo,qmo,Nmo,tu,uae,jmo,Dmo,EP,Gmo,Omo,Vmo,au,pae,Xmo,zmo,CP,Qmo,Wmo,Hmo,nu,_ae,Umo,Jmo,wP,Ymo,Kmo,Zmo,su,bae,efo,ofo,AP,rfo,tfo,afo,lu,Fae,nfo,sfo,yP,lfo,ifo,dfo,ys,vae,cfo,mfo,LP,ffo,gfo,xP,hfo,ufo,pfo,iu,Tae,_fo,bfo,$P,Ffo,vfo,Tfo,du,Mae,Mfo,Efo,kP,Cfo,wfo,Afo,cu,Eae,yfo,Lfo,SP,xfo,$fo,kfo,mu,Cae,Sfo,Rfo,RP,Bfo,Pfo,Ifo,fu,wae,qfo,Nfo,BP,jfo,Dfo,Gfo,gu,Aae,Ofo,Vfo,PP,Xfo,zfo,Qfo,hu,yae,Wfo,Hfo,IP,Ufo,Jfo,Yfo,uu,Lae,Kfo,Zfo,qP,ego,ogo,rgo,pu,xae,tgo,ago,NP,ngo,sgo,lgo,_u,$ae,igo,dgo,jP,cgo,mgo,fgo,bu,kae,ggo,hgo,DP,ugo,pgo,_go,Fu,Sae,bgo,Fgo,GP,vgo,Tgo,Mgo,vu,Rae,Ego,Cgo,OP,wgo,Ago,ygo,Tu,Bae,Lgo,xgo,VP,$go,kgo,Sgo,Mu,Pae,Rgo,Bgo,XP,Pgo,Igo,qgo,Eu,Iae,Ngo,jgo,zP,Dgo,Ggo,Ogo,Cu,qae,Vgo,Xgo,QP,zgo,Qgo,Wgo,wu,Nae,Hgo,Ugo,WP,Jgo,Ygo,Kgo,Au,jae,Zgo,eho,HP,oho,rho,tho,yu,Dae,aho,nho,UP,sho,lho,iho,Lu,Gae,dho,cho,JP,mho,fho,gho,xu,Oae,hho,uho,YP,pho,_ho,bho,$u,Vae,Fho,vho,KP,Tho,Mho,Eho,ku,Xae,Cho,who,ZP,Aho,yho,Lho,Su,zae,xho,$ho,eI,kho,Sho,Rho,Ru,Qae,Bho,Pho,oI,Iho,qho,Nho,Bu,Wae,jho,Dho,rI,Gho,Oho,Vho,Pu,Hae,Xho,zho,tI,Qho,Who,Hho,Iu,Uae,Uho,Jho,aI,Yho,Kho,Zho,qu,Jae,euo,ouo,nI,ruo,tuo,auo,Nu,Yae,nuo,suo,sI,luo,iuo,duo,ju,Kae,cuo,muo,lI,fuo,guo,huo,Du,Zae,uuo,puo,iI,_uo,buo,Fuo,Gu,ene,vuo,Tuo,dI,Muo,Euo,Cuo,Ou,one,wuo,Auo,cI,yuo,Luo,xuo,Vu,rne,$uo,kuo,mI,Suo,Ruo,Buo,Xu,tne,Puo,Iuo,fI,quo,Nuo,juo,zu,ane,Duo,Guo,gI,Ouo,Vuo,Xuo,Qu,nne,zuo,Quo,hI,Wuo,Huo,Uuo,Wu,sne,Juo,Yuo,uI,Kuo,Zuo,epo,Hu,lne,opo,rpo,pI,tpo,apo,npo,Uu,ine,spo,lpo,_I,ipo,dpo,cpo,Ju,dne,mpo,fpo,bI,gpo,hpo,upo,Yu,cne,ppo,_po,FI,bpo,Fpo,vpo,Ku,mne,Tpo,Mpo,vI,Epo,Cpo,wpo,Zu,fne,Apo,ypo,TI,Lpo,xpo,$po,ep,gne,kpo,Spo,MI,Rpo,Bpo,Ppo,op,hne,Ipo,qpo,EI,Npo,jpo,Dpo,rp,une,Gpo,Opo,CI,Vpo,Xpo,zpo,tp,pne,Qpo,Wpo,wI,Hpo,Upo,Jpo,ap,_ne,Ypo,Kpo,AI,Zpo,e_o,o_o,np,bne,r_o,t_o,yI,a_o,n_o,s_o,sp,Fne,l_o,i_o,LI,d_o,c_o,m_o,lp,vne,f_o,g_o,xI,h_o,u_o,p_o,ip,Tne,__o,b_o,$I,F_o,v_o,T_o,dp,Mne,M_o,E_o,kI,C_o,w_o,A_o,cp,Ene,y_o,L_o,SI,x_o,$_o,k_o,mp,Cne,S_o,R_o,RI,B_o,P_o,I_o,fp,wne,q_o,N_o,BI,j_o,D_o,G_o,gp,Ane,O_o,V_o,PI,X_o,z_o,Q_o,hp,yne,W_o,H_o,II,U_o,J_o,Y_o,up,Lne,K_o,Z_o,qI,ebo,obo,rbo,pp,xne,tbo,abo,NI,nbo,sbo,lbo,_p,$ne,ibo,dbo,jI,cbo,mbo,fbo,bp,gbo,kne,hbo,ubo,Sne,pbo,_bo,Fp,aBe,bi,vp,Rne,H6,bbo,Bne,Fbo,nBe,yo,U6,vbo,Fi,Tbo,DI,Mbo,Ebo,GI,Cbo,wbo,Abo,J6,ybo,Pne,Lbo,xbo,$bo,Zr,Y6,kbo,Ine,Sbo,Rbo,vi,Bbo,qne,Pbo,Ibo,OI,qbo,Nbo,jbo,Tp,Dbo,We,K6,Gbo,Nne,Obo,Vbo,Ea,Xbo,jne,zbo,Qbo,Dne,Wbo,Hbo,Gne,Ubo,Jbo,Ybo,G,Mp,One,Kbo,Zbo,VI,e2o,o2o,r2o,Ep,Vne,t2o,a2o,XI,n2o,s2o,l2o,Cp,Xne,i2o,d2o,zI,c2o,m2o,f2o,wp,zne,g2o,h2o,QI,u2o,p2o,_2o,Ap,Qne,b2o,F2o,WI,v2o,T2o,M2o,yp,Wne,E2o,C2o,HI,w2o,A2o,y2o,Lp,Hne,L2o,x2o,UI,$2o,k2o,S2o,xp,Une,R2o,B2o,JI,P2o,I2o,q2o,$p,Jne,N2o,j2o,YI,D2o,G2o,O2o,kp,Yne,V2o,X2o,KI,z2o,Q2o,W2o,Sp,Kne,H2o,U2o,ZI,J2o,Y2o,K2o,Rp,Zne,Z2o,eFo,eq,oFo,rFo,tFo,Bp,ese,aFo,nFo,oq,sFo,lFo,iFo,Pp,ose,dFo,cFo,rq,mFo,fFo,gFo,Ip,rse,hFo,uFo,tq,pFo,_Fo,bFo,qp,tse,FFo,vFo,aq,TFo,MFo,EFo,Np,ase,CFo,wFo,nq,AFo,yFo,LFo,jp,nse,xFo,$Fo,sq,kFo,SFo,RFo,Dp,sse,BFo,PFo,lq,IFo,qFo,NFo,Gp,lse,jFo,DFo,iq,GFo,OFo,VFo,Op,ise,XFo,zFo,dq,QFo,WFo,HFo,Vp,dse,UFo,JFo,cq,YFo,KFo,ZFo,Xp,cse,evo,ovo,mq,rvo,tvo,avo,zp,mse,nvo,svo,fq,lvo,ivo,dvo,Qp,fse,cvo,mvo,gq,fvo,gvo,hvo,Wp,gse,uvo,pvo,hq,_vo,bvo,Fvo,Hp,hse,vvo,Tvo,uq,Mvo,Evo,Cvo,Up,use,wvo,Avo,pq,yvo,Lvo,xvo,Jp,pse,$vo,kvo,_q,Svo,Rvo,Bvo,Yp,_se,Pvo,Ivo,bq,qvo,Nvo,jvo,Kp,bse,Dvo,Gvo,Fq,Ovo,Vvo,Xvo,Zp,Fse,zvo,Qvo,vq,Wvo,Hvo,Uvo,e_,vse,Jvo,Yvo,Tq,Kvo,Zvo,e1o,o_,Tse,o1o,r1o,Mq,t1o,a1o,n1o,r_,Mse,s1o,l1o,Eq,i1o,d1o,c1o,t_,Ese,m1o,f1o,Cq,g1o,h1o,u1o,a_,Cse,p1o,_1o,wq,b1o,F1o,v1o,n_,wse,T1o,M1o,Aq,E1o,C1o,w1o,s_,Ase,A1o,y1o,yq,L1o,x1o,$1o,l_,k1o,yse,S1o,R1o,Lse,B1o,P1o,i_,sBe,Ti,d_,xse,Z6,I1o,$se,q1o,lBe,Lo,ey,N1o,Mi,j1o,Lq,D1o,G1o,xq,O1o,V1o,X1o,oy,z1o,kse,Q1o,W1o,H1o,et,ry,U1o,Sse,J1o,Y1o,Ei,K1o,Rse,Z1o,eTo,$q,oTo,rTo,tTo,c_,aTo,He,ty,nTo,Bse,sTo,lTo,Ca,iTo,Pse,dTo,cTo,Ise,mTo,fTo,qse,gTo,hTo,uTo,z,m_,Nse,pTo,_To,kq,bTo,FTo,vTo,f_,jse,TTo,MTo,Sq,ETo,CTo,wTo,g_,Dse,ATo,yTo,Rq,LTo,xTo,$To,h_,Gse,kTo,STo,Bq,RTo,BTo,PTo,u_,Ose,ITo,qTo,Pq,NTo,jTo,DTo,p_,Vse,GTo,OTo,Iq,VTo,XTo,zTo,__,Xse,QTo,WTo,qq,HTo,UTo,JTo,b_,zse,YTo,KTo,Nq,ZTo,eMo,oMo,F_,Qse,rMo,tMo,jq,aMo,nMo,sMo,v_,Wse,lMo,iMo,Dq,dMo,cMo,mMo,T_,Hse,fMo,gMo,Gq,hMo,uMo,pMo,M_,Use,_Mo,bMo,Oq,FMo,vMo,TMo,E_,Jse,MMo,EMo,Vq,CMo,wMo,AMo,C_,Yse,yMo,LMo,Xq,xMo,$Mo,kMo,w_,Kse,SMo,RMo,zq,BMo,PMo,IMo,A_,Zse,qMo,NMo,Qq,jMo,DMo,GMo,y_,ele,OMo,VMo,Wq,XMo,zMo,QMo,L_,ole,WMo,HMo,Hq,UMo,JMo,YMo,x_,rle,KMo,ZMo,Uq,e4o,o4o,r4o,$_,tle,t4o,a4o,Jq,n4o,s4o,l4o,k_,ale,i4o,d4o,Yq,c4o,m4o,f4o,S_,nle,g4o,h4o,Kq,u4o,p4o,_4o,R_,sle,b4o,F4o,Zq,v4o,T4o,M4o,B_,lle,E4o,C4o,eN,w4o,A4o,y4o,P_,ile,L4o,x4o,oN,$4o,k4o,S4o,I_,dle,R4o,B4o,rN,P4o,I4o,q4o,q_,cle,N4o,j4o,tN,D4o,G4o,O4o,N_,mle,V4o,X4o,aN,z4o,Q4o,W4o,j_,fle,H4o,U4o,nN,J4o,Y4o,K4o,D_,gle,Z4o,eEo,sN,oEo,rEo,tEo,G_,hle,aEo,nEo,lN,sEo,lEo,iEo,O_,ule,dEo,cEo,iN,mEo,fEo,gEo,V_,ple,hEo,uEo,dN,pEo,_Eo,bEo,X_,_le,FEo,vEo,cN,TEo,MEo,EEo,z_,ble,CEo,wEo,mN,AEo,yEo,LEo,Q_,xEo,Fle,$Eo,kEo,vle,SEo,REo,W_,iBe,Ci,H_,Tle,ay,BEo,Mle,PEo,dBe,xo,ny,IEo,wi,qEo,fN,NEo,jEo,gN,DEo,GEo,OEo,sy,VEo,Ele,XEo,zEo,QEo,ot,ly,WEo,Cle,HEo,UEo,Ai,JEo,wle,YEo,KEo,hN,ZEo,e5o,o5o,U_,r5o,Ue,iy,t5o,Ale,a5o,n5o,wa,s5o,yle,l5o,i5o,Lle,d5o,c5o,xle,m5o,f5o,g5o,Q,J_,$le,h5o,u5o,uN,p5o,_5o,b5o,Y_,kle,F5o,v5o,pN,T5o,M5o,E5o,K_,Sle,C5o,w5o,_N,A5o,y5o,L5o,Z_,Rle,x5o,$5o,bN,k5o,S5o,R5o,eb,Ble,B5o,P5o,FN,I5o,q5o,N5o,ob,Ple,j5o,D5o,vN,G5o,O5o,V5o,rb,Ile,X5o,z5o,TN,Q5o,W5o,H5o,tb,qle,U5o,J5o,MN,Y5o,K5o,Z5o,ab,Nle,eCo,oCo,EN,rCo,tCo,aCo,nb,jle,nCo,sCo,CN,lCo,iCo,dCo,sb,Dle,cCo,mCo,wN,fCo,gCo,hCo,lb,Gle,uCo,pCo,AN,_Co,bCo,FCo,ib,Ole,vCo,TCo,yN,MCo,ECo,CCo,db,Vle,wCo,ACo,LN,yCo,LCo,xCo,cb,Xle,$Co,kCo,xN,SCo,RCo,BCo,mb,zle,PCo,ICo,$N,qCo,NCo,jCo,fb,Qle,DCo,GCo,kN,OCo,VCo,XCo,gb,Wle,zCo,QCo,SN,WCo,HCo,UCo,hb,Hle,JCo,YCo,RN,KCo,ZCo,e3o,ub,Ule,o3o,r3o,BN,t3o,a3o,n3o,pb,Jle,s3o,l3o,PN,i3o,d3o,c3o,_b,Yle,m3o,f3o,IN,g3o,h3o,u3o,bb,Kle,p3o,_3o,qN,b3o,F3o,v3o,Fb,Zle,T3o,M3o,NN,E3o,C3o,w3o,vb,eie,A3o,y3o,jN,L3o,x3o,$3o,Tb,oie,k3o,S3o,DN,R3o,B3o,P3o,Mb,rie,I3o,q3o,GN,N3o,j3o,D3o,Eb,tie,G3o,O3o,ON,V3o,X3o,z3o,Cb,aie,Q3o,W3o,VN,H3o,U3o,J3o,wb,nie,Y3o,K3o,XN,Z3o,ewo,owo,Ab,sie,rwo,two,lie,awo,nwo,swo,yb,iie,lwo,iwo,zN,dwo,cwo,mwo,Lb,die,fwo,gwo,QN,hwo,uwo,pwo,xb,cie,_wo,bwo,WN,Fwo,vwo,Two,$b,mie,Mwo,Ewo,HN,Cwo,wwo,Awo,kb,ywo,fie,Lwo,xwo,gie,$wo,kwo,Sb,cBe,yi,Rb,hie,dy,Swo,uie,Rwo,mBe,$o,cy,Bwo,Li,Pwo,UN,Iwo,qwo,JN,Nwo,jwo,Dwo,my,Gwo,pie,Owo,Vwo,Xwo,rt,fy,zwo,_ie,Qwo,Wwo,xi,Hwo,bie,Uwo,Jwo,YN,Ywo,Kwo,Zwo,Bb,eAo,Je,gy,oAo,Fie,rAo,tAo,Aa,aAo,vie,nAo,sAo,Tie,lAo,iAo,Mie,dAo,cAo,mAo,he,Pb,Eie,fAo,gAo,KN,hAo,uAo,pAo,Ib,Cie,_Ao,bAo,ZN,FAo,vAo,TAo,qb,wie,MAo,EAo,ej,CAo,wAo,AAo,Nb,Aie,yAo,LAo,oj,xAo,$Ao,kAo,jb,yie,SAo,RAo,rj,BAo,PAo,IAo,Db,Lie,qAo,NAo,tj,jAo,DAo,GAo,Gb,xie,OAo,VAo,aj,XAo,zAo,QAo,Ob,$ie,WAo,HAo,nj,UAo,JAo,YAo,Vb,kie,KAo,ZAo,sj,e0o,o0o,r0o,Xb,Sie,t0o,a0o,lj,n0o,s0o,l0o,zb,Rie,i0o,d0o,ij,c0o,m0o,f0o,Qb,Bie,g0o,h0o,dj,u0o,p0o,_0o,Wb,Pie,b0o,F0o,cj,v0o,T0o,M0o,Hb,Iie,E0o,C0o,mj,w0o,A0o,y0o,Ub,qie,L0o,x0o,fj,$0o,k0o,S0o,Jb,Nie,R0o,B0o,gj,P0o,I0o,q0o,Yb,jie,N0o,j0o,hj,D0o,G0o,O0o,Kb,V0o,Die,X0o,z0o,Gie,Q0o,W0o,Zb,fBe,$i,e2,Oie,hy,H0o,Vie,U0o,gBe,ko,uy,J0o,ki,Y0o,uj,K0o,Z0o,pj,e6o,o6o,r6o,py,t6o,Xie,a6o,n6o,s6o,tt,_y,l6o,zie,i6o,d6o,Si,c6o,Qie,m6o,f6o,_j,g6o,h6o,u6o,o2,p6o,Ye,by,_6o,Wie,b6o,F6o,ya,v6o,Hie,T6o,M6o,Uie,E6o,C6o,Jie,w6o,A6o,y6o,q,r2,Yie,L6o,x6o,bj,$6o,k6o,S6o,t2,Kie,R6o,B6o,Fj,P6o,I6o,q6o,a2,Zie,N6o,j6o,vj,D6o,G6o,O6o,n2,ede,V6o,X6o,Tj,z6o,Q6o,W6o,s2,ode,H6o,U6o,Mj,J6o,Y6o,K6o,l2,rde,Z6o,eyo,Ej,oyo,ryo,tyo,i2,tde,ayo,nyo,Cj,syo,lyo,iyo,d2,ade,dyo,cyo,wj,myo,fyo,gyo,c2,nde,hyo,uyo,Aj,pyo,_yo,byo,m2,sde,Fyo,vyo,yj,Tyo,Myo,Eyo,f2,lde,Cyo,wyo,Lj,Ayo,yyo,Lyo,g2,ide,xyo,$yo,xj,kyo,Syo,Ryo,h2,dde,Byo,Pyo,$j,Iyo,qyo,Nyo,u2,cde,jyo,Dyo,kj,Gyo,Oyo,Vyo,p2,mde,Xyo,zyo,Sj,Qyo,Wyo,Hyo,_2,fde,Uyo,Jyo,Rj,Yyo,Kyo,Zyo,b2,gde,eLo,oLo,Bj,rLo,tLo,aLo,F2,hde,nLo,sLo,Pj,lLo,iLo,dLo,v2,ude,cLo,mLo,Ij,fLo,gLo,hLo,T2,pde,uLo,pLo,qj,_Lo,bLo,FLo,M2,_de,vLo,TLo,Nj,MLo,ELo,CLo,E2,bde,wLo,ALo,jj,yLo,LLo,xLo,C2,Fde,$Lo,kLo,Dj,SLo,RLo,BLo,w2,vde,PLo,ILo,Gj,qLo,NLo,jLo,A2,Tde,DLo,GLo,Oj,OLo,VLo,XLo,y2,Mde,zLo,QLo,Vj,WLo,HLo,ULo,L2,Ede,JLo,YLo,Xj,KLo,ZLo,e8o,x2,Cde,o8o,r8o,zj,t8o,a8o,n8o,$2,wde,s8o,l8o,Qj,i8o,d8o,c8o,k2,Ade,m8o,f8o,Wj,g8o,h8o,u8o,S2,yde,p8o,_8o,Hj,b8o,F8o,v8o,R2,Lde,T8o,M8o,Uj,E8o,C8o,w8o,B2,xde,A8o,y8o,Jj,L8o,x8o,$8o,P2,$de,k8o,S8o,Yj,R8o,B8o,P8o,I2,kde,I8o,q8o,Kj,N8o,j8o,D8o,q2,Sde,G8o,O8o,Zj,V8o,X8o,z8o,N2,Rde,Q8o,W8o,eD,H8o,U8o,J8o,j2,Bde,Y8o,K8o,oD,Z8o,e7o,o7o,D2,Pde,r7o,t7o,rD,a7o,n7o,s7o,G2,Ide,l7o,i7o,tD,d7o,c7o,m7o,O2,qde,f7o,g7o,aD,h7o,u7o,p7o,V2,Nde,_7o,b7o,nD,F7o,v7o,T7o,X2,jde,M7o,E7o,sD,C7o,w7o,A7o,z2,Dde,y7o,L7o,lD,x7o,$7o,k7o,Q2,Gde,S7o,R7o,iD,B7o,P7o,I7o,W2,Ode,q7o,N7o,dD,j7o,D7o,G7o,H2,Vde,O7o,V7o,cD,X7o,z7o,Q7o,U2,W7o,Xde,H7o,U7o,zde,J7o,Y7o,J2,hBe,Ri,Y2,Qde,Fy,K7o,Wde,Z7o,uBe,So,vy,exo,Bi,oxo,mD,rxo,txo,fD,axo,nxo,sxo,Ty,lxo,Hde,ixo,dxo,cxo,at,My,mxo,Ude,fxo,gxo,Pi,hxo,Jde,uxo,pxo,gD,_xo,bxo,Fxo,K2,vxo,Ke,Ey,Txo,Yde,Mxo,Exo,La,Cxo,Kde,wxo,Axo,Zde,yxo,Lxo,ece,xxo,$xo,kxo,Y,Z2,oce,Sxo,Rxo,hD,Bxo,Pxo,Ixo,eF,rce,qxo,Nxo,uD,jxo,Dxo,Gxo,oF,tce,Oxo,Vxo,pD,Xxo,zxo,Qxo,rF,ace,Wxo,Hxo,_D,Uxo,Jxo,Yxo,tF,nce,Kxo,Zxo,bD,e9o,o9o,r9o,aF,sce,t9o,a9o,FD,n9o,s9o,l9o,nF,lce,i9o,d9o,vD,c9o,m9o,f9o,sF,ice,g9o,h9o,TD,u9o,p9o,_9o,lF,dce,b9o,F9o,MD,v9o,T9o,M9o,iF,cce,E9o,C9o,ED,w9o,A9o,y9o,dF,mce,L9o,x9o,CD,$9o,k9o,S9o,cF,fce,R9o,B9o,wD,P9o,I9o,q9o,mF,gce,N9o,j9o,AD,D9o,G9o,O9o,fF,hce,V9o,X9o,yD,z9o,Q9o,W9o,gF,uce,H9o,U9o,LD,J9o,Y9o,K9o,hF,pce,Z9o,e$o,xD,o$o,r$o,t$o,uF,_ce,a$o,n$o,$D,s$o,l$o,i$o,pF,bce,d$o,c$o,kD,m$o,f$o,g$o,_F,Fce,h$o,u$o,SD,p$o,_$o,b$o,bF,vce,F$o,v$o,RD,T$o,M$o,E$o,FF,Tce,C$o,w$o,BD,A$o,y$o,L$o,vF,Mce,x$o,$$o,PD,k$o,S$o,R$o,TF,Ece,B$o,P$o,ID,I$o,q$o,N$o,MF,Cce,j$o,D$o,qD,G$o,O$o,V$o,EF,wce,X$o,z$o,ND,Q$o,W$o,H$o,CF,Ace,U$o,J$o,jD,Y$o,K$o,Z$o,wF,yce,eko,oko,DD,rko,tko,ako,AF,Lce,nko,sko,GD,lko,iko,dko,yF,cko,xce,mko,fko,$ce,gko,hko,LF,pBe,Ii,xF,kce,Cy,uko,Sce,pko,_Be,Ro,wy,_ko,qi,bko,OD,Fko,vko,VD,Tko,Mko,Eko,Ay,Cko,Rce,wko,Ako,yko,nt,yy,Lko,Bce,xko,$ko,Ni,kko,Pce,Sko,Rko,XD,Bko,Pko,Iko,$F,qko,Ze,Ly,Nko,Ice,jko,Dko,xa,Gko,qce,Oko,Vko,Nce,Xko,zko,jce,Qko,Wko,Hko,Wr,kF,Dce,Uko,Jko,zD,Yko,Kko,Zko,SF,Gce,eSo,oSo,QD,rSo,tSo,aSo,RF,Oce,nSo,sSo,WD,lSo,iSo,dSo,BF,Vce,cSo,mSo,HD,fSo,gSo,hSo,PF,Xce,uSo,pSo,UD,_So,bSo,FSo,IF,vSo,zce,TSo,MSo,Qce,ESo,CSo,qF,bBe,ji,NF,Wce,xy,wSo,Hce,ASo,FBe,Bo,$y,ySo,Di,LSo,JD,xSo,$So,YD,kSo,SSo,RSo,ky,BSo,Uce,PSo,ISo,qSo,st,Sy,NSo,Jce,jSo,DSo,Gi,GSo,Yce,OSo,VSo,KD,XSo,zSo,QSo,jF,WSo,eo,Ry,HSo,Kce,USo,JSo,$a,YSo,Zce,KSo,ZSo,eme,eRo,oRo,ome,rRo,tRo,aRo,U,DF,rme,nRo,sRo,ZD,lRo,iRo,dRo,GF,tme,cRo,mRo,eG,fRo,gRo,hRo,OF,ame,uRo,pRo,oG,_Ro,bRo,FRo,VF,nme,vRo,TRo,rG,MRo,ERo,CRo,XF,sme,wRo,ARo,tG,yRo,LRo,xRo,zF,lme,$Ro,kRo,aG,SRo,RRo,BRo,QF,ime,PRo,IRo,nG,qRo,NRo,jRo,WF,dme,DRo,GRo,sG,ORo,VRo,XRo,HF,cme,zRo,QRo,lG,WRo,HRo,URo,UF,mme,JRo,YRo,iG,KRo,ZRo,eBo,JF,fme,oBo,rBo,dG,tBo,aBo,nBo,YF,gme,sBo,lBo,cG,iBo,dBo,cBo,KF,hme,mBo,fBo,mG,gBo,hBo,uBo,ZF,ume,pBo,_Bo,fG,bBo,FBo,vBo,ev,pme,TBo,MBo,gG,EBo,CBo,wBo,ov,_me,ABo,yBo,hG,LBo,xBo,$Bo,rv,bme,kBo,SBo,uG,RBo,BBo,PBo,tv,Fme,IBo,qBo,pG,NBo,jBo,DBo,av,vme,GBo,OBo,_G,VBo,XBo,zBo,nv,Tme,QBo,WBo,bG,HBo,UBo,JBo,sv,Mme,YBo,KBo,FG,ZBo,ePo,oPo,lv,Eme,rPo,tPo,vG,aPo,nPo,sPo,iv,Cme,lPo,iPo,TG,dPo,cPo,mPo,dv,wme,fPo,gPo,MG,hPo,uPo,pPo,cv,Ame,_Po,bPo,EG,FPo,vPo,TPo,mv,yme,MPo,EPo,CG,CPo,wPo,APo,fv,Lme,yPo,LPo,wG,xPo,$Po,kPo,gv,xme,SPo,RPo,AG,BPo,PPo,IPo,hv,$me,qPo,NPo,yG,jPo,DPo,GPo,uv,kme,OPo,VPo,LG,XPo,zPo,QPo,pv,Sme,WPo,HPo,xG,UPo,JPo,YPo,_v,Rme,KPo,ZPo,$G,eIo,oIo,rIo,bv,Bme,tIo,aIo,kG,nIo,sIo,lIo,Fv,iIo,Pme,dIo,cIo,Ime,mIo,fIo,vv,vBe,Oi,Tv,qme,By,gIo,Nme,hIo,TBe,Po,Py,uIo,Vi,pIo,SG,_Io,bIo,RG,FIo,vIo,TIo,Iy,MIo,jme,EIo,CIo,wIo,lt,qy,AIo,Dme,yIo,LIo,Xi,xIo,Gme,$Io,kIo,BG,SIo,RIo,BIo,Mv,PIo,oo,Ny,IIo,Ome,qIo,NIo,ka,jIo,Vme,DIo,GIo,Xme,OIo,VIo,zme,XIo,zIo,QIo,O,Ev,Qme,WIo,HIo,PG,UIo,JIo,YIo,Cv,Wme,KIo,ZIo,IG,eqo,oqo,rqo,wv,Hme,tqo,aqo,qG,nqo,sqo,lqo,Av,Ume,iqo,dqo,NG,cqo,mqo,fqo,yv,Jme,gqo,hqo,jG,uqo,pqo,_qo,Lv,Yme,bqo,Fqo,DG,vqo,Tqo,Mqo,xv,Kme,Eqo,Cqo,GG,wqo,Aqo,yqo,$v,Zme,Lqo,xqo,OG,$qo,kqo,Sqo,kv,efe,Rqo,Bqo,VG,Pqo,Iqo,qqo,Sv,ofe,Nqo,jqo,XG,Dqo,Gqo,Oqo,Rv,rfe,Vqo,Xqo,zG,zqo,Qqo,Wqo,Bv,tfe,Hqo,Uqo,QG,Jqo,Yqo,Kqo,Pv,afe,Zqo,eNo,WG,oNo,rNo,tNo,Iv,nfe,aNo,nNo,HG,sNo,lNo,iNo,qv,sfe,dNo,cNo,UG,mNo,fNo,gNo,Nv,lfe,hNo,uNo,JG,pNo,_No,bNo,jv,ife,FNo,vNo,YG,TNo,MNo,ENo,Dv,dfe,CNo,wNo,KG,ANo,yNo,LNo,Gv,cfe,xNo,$No,ZG,kNo,SNo,RNo,Ov,mfe,BNo,PNo,eO,INo,qNo,NNo,Vv,ffe,jNo,DNo,oO,GNo,ONo,VNo,Xv,gfe,XNo,zNo,rO,QNo,WNo,HNo,zv,hfe,UNo,JNo,tO,YNo,KNo,ZNo,Qv,ufe,ejo,ojo,aO,rjo,tjo,ajo,Wv,pfe,njo,sjo,nO,ljo,ijo,djo,Hv,_fe,cjo,mjo,sO,fjo,gjo,hjo,Uv,bfe,ujo,pjo,lO,_jo,bjo,Fjo,Jv,Ffe,vjo,Tjo,iO,Mjo,Ejo,Cjo,Yv,vfe,wjo,Ajo,dO,yjo,Ljo,xjo,Kv,Tfe,$jo,kjo,cO,Sjo,Rjo,Bjo,Zv,Mfe,Pjo,Ijo,mO,qjo,Njo,jjo,e1,Efe,Djo,Gjo,fO,Ojo,Vjo,Xjo,o1,Cfe,zjo,Qjo,gO,Wjo,Hjo,Ujo,r1,wfe,Jjo,Yjo,hO,Kjo,Zjo,eDo,t1,Afe,oDo,rDo,uO,tDo,aDo,nDo,a1,yfe,sDo,lDo,pO,iDo,dDo,cDo,n1,Lfe,mDo,fDo,_O,gDo,hDo,uDo,s1,xfe,pDo,_Do,bO,bDo,FDo,vDo,l1,$fe,TDo,MDo,FO,EDo,CDo,wDo,i1,ADo,kfe,yDo,LDo,Sfe,xDo,$Do,d1,MBe,zi,c1,Rfe,jy,kDo,Bfe,SDo,EBe,Io,Dy,RDo,Qi,BDo,vO,PDo,IDo,TO,qDo,NDo,jDo,Gy,DDo,Pfe,GDo,ODo,VDo,it,Oy,XDo,Ife,zDo,QDo,Wi,WDo,qfe,HDo,UDo,MO,JDo,YDo,KDo,m1,ZDo,ro,Vy,eGo,Nfe,oGo,rGo,Sa,tGo,jfe,aGo,nGo,Dfe,sGo,lGo,Gfe,iGo,dGo,cGo,Ofe,f1,Vfe,mGo,fGo,EO,gGo,hGo,uGo,g1,pGo,Xfe,_Go,bGo,zfe,FGo,vGo,h1,CBe,Hi,u1,Qfe,Xy,TGo,Wfe,MGo,wBe,qo,zy,EGo,Ui,CGo,CO,wGo,AGo,wO,yGo,LGo,xGo,Qy,$Go,Hfe,kGo,SGo,RGo,dt,Wy,BGo,Ufe,PGo,IGo,Ji,qGo,Jfe,NGo,jGo,AO,DGo,GGo,OGo,p1,VGo,to,Hy,XGo,Yfe,zGo,QGo,Ra,WGo,Kfe,HGo,UGo,Zfe,JGo,YGo,ege,KGo,ZGo,eOo,Fe,_1,oge,oOo,rOo,yO,tOo,aOo,nOo,b1,rge,sOo,lOo,LO,iOo,dOo,cOo,F1,tge,mOo,fOo,xO,gOo,hOo,uOo,Ls,age,pOo,_Oo,$O,bOo,FOo,kO,vOo,TOo,MOo,v1,nge,EOo,COo,SO,wOo,AOo,yOo,ct,sge,LOo,xOo,RO,$Oo,kOo,BO,SOo,ROo,PO,BOo,POo,IOo,T1,lge,qOo,NOo,IO,jOo,DOo,GOo,M1,ige,OOo,VOo,qO,XOo,zOo,QOo,E1,dge,WOo,HOo,NO,UOo,JOo,YOo,C1,cge,KOo,ZOo,jO,eVo,oVo,rVo,w1,mge,tVo,aVo,DO,nVo,sVo,lVo,A1,fge,iVo,dVo,GO,cVo,mVo,fVo,y1,gge,gVo,hVo,OO,uVo,pVo,_Vo,L1,bVo,hge,FVo,vVo,uge,TVo,MVo,x1,ABe,Yi,$1,pge,Uy,EVo,_ge,CVo,yBe,No,Jy,wVo,Ki,AVo,VO,yVo,LVo,XO,xVo,$Vo,kVo,Yy,SVo,bge,RVo,BVo,PVo,mt,Ky,IVo,Fge,qVo,NVo,Zi,jVo,vge,DVo,GVo,zO,OVo,VVo,XVo,k1,zVo,ao,Zy,QVo,Tge,WVo,HVo,Ba,UVo,Mge,JVo,YVo,Ege,KVo,ZVo,Cge,eXo,oXo,rXo,wge,S1,Age,tXo,aXo,QO,nXo,sXo,lXo,R1,iXo,yge,dXo,cXo,Lge,mXo,fXo,B1,LBe,ed,P1,xge,eL,gXo,$ge,hXo,xBe,jo,oL,uXo,od,pXo,WO,_Xo,bXo,HO,FXo,vXo,TXo,rL,MXo,kge,EXo,CXo,wXo,ft,tL,AXo,Sge,yXo,LXo,rd,xXo,Rge,$Xo,kXo,UO,SXo,RXo,BXo,I1,PXo,no,aL,IXo,Bge,qXo,NXo,Pa,jXo,Pge,DXo,GXo,Ige,OXo,VXo,qge,XXo,zXo,QXo,qe,q1,Nge,WXo,HXo,JO,UXo,JXo,YXo,N1,jge,KXo,ZXo,YO,ezo,ozo,rzo,j1,Dge,tzo,azo,KO,nzo,szo,lzo,D1,Gge,izo,dzo,ZO,czo,mzo,fzo,G1,Oge,gzo,hzo,eV,uzo,pzo,_zo,O1,Vge,bzo,Fzo,oV,vzo,Tzo,Mzo,V1,Xge,Ezo,Czo,rV,wzo,Azo,yzo,X1,zge,Lzo,xzo,tV,$zo,kzo,Szo,z1,Rzo,Qge,Bzo,Pzo,Wge,Izo,qzo,Q1,$Be,td,W1,Hge,nL,Nzo,Uge,jzo,kBe,Do,sL,Dzo,ad,Gzo,aV,Ozo,Vzo,nV,Xzo,zzo,Qzo,lL,Wzo,Jge,Hzo,Uzo,Jzo,gt,iL,Yzo,Yge,Kzo,Zzo,nd,eQo,Kge,oQo,rQo,sV,tQo,aQo,nQo,H1,sQo,so,dL,lQo,Zge,iQo,dQo,Ia,cQo,ehe,mQo,fQo,ohe,gQo,hQo,rhe,uQo,pQo,_Qo,qa,U1,the,bQo,FQo,lV,vQo,TQo,MQo,J1,ahe,EQo,CQo,iV,wQo,AQo,yQo,Y1,nhe,LQo,xQo,dV,$Qo,kQo,SQo,K1,she,RQo,BQo,cV,PQo,IQo,qQo,Z1,NQo,lhe,jQo,DQo,ihe,GQo,OQo,eT,SBe,sd,oT,dhe,cL,VQo,che,XQo,RBe,Go,mL,zQo,ld,QQo,mV,WQo,HQo,fV,UQo,JQo,YQo,fL,KQo,mhe,ZQo,eWo,oWo,ht,gL,rWo,fhe,tWo,aWo,id,nWo,ghe,sWo,lWo,gV,iWo,dWo,cWo,rT,mWo,lo,hL,fWo,hhe,gWo,hWo,Na,uWo,uhe,pWo,_Wo,phe,bWo,FWo,_he,vWo,TWo,MWo,Ne,tT,bhe,EWo,CWo,hV,wWo,AWo,yWo,aT,Fhe,LWo,xWo,uV,$Wo,kWo,SWo,nT,vhe,RWo,BWo,pV,PWo,IWo,qWo,sT,The,NWo,jWo,_V,DWo,GWo,OWo,lT,Mhe,VWo,XWo,bV,zWo,QWo,WWo,iT,Ehe,HWo,UWo,FV,JWo,YWo,KWo,dT,Che,ZWo,eHo,vV,oHo,rHo,tHo,cT,whe,aHo,nHo,TV,sHo,lHo,iHo,mT,dHo,Ahe,cHo,mHo,yhe,fHo,gHo,fT,BBe,dd,gT,Lhe,uL,hHo,xhe,uHo,PBe,Oo,pL,pHo,cd,_Ho,MV,bHo,FHo,EV,vHo,THo,MHo,_L,EHo,$he,CHo,wHo,AHo,ut,bL,yHo,khe,LHo,xHo,md,$Ho,She,kHo,SHo,CV,RHo,BHo,PHo,hT,IHo,io,FL,qHo,Rhe,NHo,jHo,ja,DHo,Bhe,GHo,OHo,Phe,VHo,XHo,Ihe,zHo,QHo,WHo,vL,uT,qhe,HHo,UHo,wV,JHo,YHo,KHo,pT,Nhe,ZHo,eUo,AV,oUo,rUo,tUo,_T,aUo,jhe,nUo,sUo,Dhe,lUo,iUo,bT,IBe,fd,FT,Ghe,TL,dUo,Ohe,cUo,qBe,Vo,ML,mUo,gd,fUo,yV,gUo,hUo,LV,uUo,pUo,_Uo,EL,bUo,Vhe,FUo,vUo,TUo,pt,CL,MUo,Xhe,EUo,CUo,hd,wUo,zhe,AUo,yUo,xV,LUo,xUo,$Uo,vT,kUo,co,wL,SUo,Qhe,RUo,BUo,Da,PUo,Whe,IUo,qUo,Hhe,NUo,jUo,Uhe,DUo,GUo,OUo,Ga,TT,Jhe,VUo,XUo,$V,zUo,QUo,WUo,MT,Yhe,HUo,UUo,kV,JUo,YUo,KUo,ET,Khe,ZUo,eJo,SV,oJo,rJo,tJo,CT,Zhe,aJo,nJo,RV,sJo,lJo,iJo,wT,dJo,eue,cJo,mJo,oue,fJo,gJo,AT,NBe,ud,yT,rue,AL,hJo,tue,uJo,jBe,Xo,yL,pJo,pd,_Jo,BV,bJo,FJo,PV,vJo,TJo,MJo,LL,EJo,aue,CJo,wJo,AJo,_t,xL,yJo,nue,LJo,xJo,_d,$Jo,sue,kJo,SJo,IV,RJo,BJo,PJo,LT,IJo,mo,$L,qJo,lue,NJo,jJo,Oa,DJo,iue,GJo,OJo,due,VJo,XJo,cue,zJo,QJo,WJo,bd,xT,mue,HJo,UJo,qV,JJo,YJo,KJo,$T,fue,ZJo,eYo,NV,oYo,rYo,tYo,kT,gue,aYo,nYo,jV,sYo,lYo,iYo,ST,dYo,hue,cYo,mYo,uue,fYo,gYo,RT,DBe,Fd,BT,pue,kL,hYo,_ue,uYo,GBe,zo,SL,pYo,vd,_Yo,DV,bYo,FYo,GV,vYo,TYo,MYo,RL,EYo,bue,CYo,wYo,AYo,bt,BL,yYo,Fue,LYo,xYo,Td,$Yo,vue,kYo,SYo,OV,RYo,BYo,PYo,PT,IYo,fo,PL,qYo,Tue,NYo,jYo,Va,DYo,Mue,GYo,OYo,Eue,VYo,XYo,Cue,zYo,QYo,WYo,IL,IT,wue,HYo,UYo,VV,JYo,YYo,KYo,qT,Aue,ZYo,eKo,XV,oKo,rKo,tKo,NT,aKo,yue,nKo,sKo,Lue,lKo,iKo,jT,OBe,Md,DT,xue,qL,dKo,$ue,cKo,VBe,Qo,NL,mKo,Ed,fKo,zV,gKo,hKo,QV,uKo,pKo,_Ko,jL,bKo,kue,FKo,vKo,TKo,Ft,DL,MKo,Sue,EKo,CKo,Cd,wKo,Rue,AKo,yKo,WV,LKo,xKo,$Ko,GT,kKo,go,GL,SKo,Bue,RKo,BKo,Xa,PKo,Pue,IKo,qKo,Iue,NKo,jKo,que,DKo,GKo,OKo,Nue,OT,jue,VKo,XKo,HV,zKo,QKo,WKo,VT,HKo,Due,UKo,JKo,Gue,YKo,KKo,XT,XBe,wd,zT,Oue,OL,ZKo,Vue,eZo,zBe,Wo,VL,oZo,Ad,rZo,UV,tZo,aZo,JV,nZo,sZo,lZo,XL,iZo,Xue,dZo,cZo,mZo,vt,zL,fZo,zue,gZo,hZo,yd,uZo,Que,pZo,_Zo,YV,bZo,FZo,vZo,QT,TZo,ho,QL,MZo,Wue,EZo,CZo,za,wZo,Hue,AZo,yZo,Uue,LZo,xZo,Jue,$Zo,kZo,SZo,Qa,WT,Yue,RZo,BZo,KV,PZo,IZo,qZo,HT,Kue,NZo,jZo,ZV,DZo,GZo,OZo,UT,Zue,VZo,XZo,eX,zZo,QZo,WZo,JT,epe,HZo,UZo,oX,JZo,YZo,KZo,YT,ZZo,ope,eer,oer,rpe,rer,ter,KT,QBe,Ld,ZT,tpe,WL,aer,ape,ner,WBe,Ho,HL,ser,xd,ler,rX,ier,der,tX,cer,mer,fer,UL,ger,npe,her,uer,per,Tt,JL,_er,spe,ber,Fer,$d,ver,lpe,Ter,Mer,aX,Eer,Cer,wer,eM,Aer,uo,YL,yer,ipe,Ler,xer,Wa,$er,dpe,ker,Ser,cpe,Rer,Ber,mpe,Per,Ier,qer,fpe,oM,gpe,Ner,jer,nX,Der,Ger,Oer,rM,Ver,hpe,Xer,zer,upe,Qer,Wer,tM,HBe,kd,aM,ppe,KL,Her,_pe,Uer,UBe,Uo,ZL,Jer,Sd,Yer,sX,Ker,Zer,lX,eor,oor,ror,e8,tor,bpe,aor,nor,sor,Mt,o8,lor,Fpe,ior,dor,Rd,cor,vpe,mor,gor,iX,hor,uor,por,nM,_or,Mr,r8,bor,Tpe,For,vor,Ha,Tor,Mpe,Mor,Eor,Epe,Cor,wor,Cpe,Aor,yor,Lor,j,sM,wpe,xor,$or,dX,kor,Sor,Ror,lM,Ape,Bor,Por,cX,Ior,qor,Nor,iM,ype,jor,Dor,mX,Gor,Oor,Vor,dM,Lpe,Xor,zor,fX,Qor,Wor,Hor,cM,xpe,Uor,Jor,gX,Yor,Kor,Zor,mM,$pe,err,orr,hX,rrr,trr,arr,fM,kpe,nrr,srr,uX,lrr,irr,drr,gM,Spe,crr,mrr,pX,frr,grr,hrr,hM,Rpe,urr,prr,_X,_rr,brr,Frr,uM,Bpe,vrr,Trr,bX,Mrr,Err,Crr,pM,Ppe,wrr,Arr,FX,yrr,Lrr,xrr,_M,Ipe,$rr,krr,vX,Srr,Rrr,Brr,bM,qpe,Prr,Irr,TX,qrr,Nrr,jrr,FM,Npe,Drr,Grr,MX,Orr,Vrr,Xrr,vM,jpe,zrr,Qrr,EX,Wrr,Hrr,Urr,TM,Dpe,Jrr,Yrr,CX,Krr,Zrr,etr,xs,Gpe,otr,rtr,wX,ttr,atr,AX,ntr,str,ltr,MM,Ope,itr,dtr,yX,ctr,mtr,ftr,EM,Vpe,gtr,htr,LX,utr,ptr,_tr,CM,Xpe,btr,Ftr,xX,vtr,Ttr,Mtr,wM,zpe,Etr,Ctr,$X,wtr,Atr,ytr,AM,Qpe,Ltr,xtr,kX,$tr,ktr,Str,yM,Wpe,Rtr,Btr,SX,Ptr,Itr,qtr,LM,Hpe,Ntr,jtr,RX,Dtr,Gtr,Otr,xM,Upe,Vtr,Xtr,BX,ztr,Qtr,Wtr,$M,Jpe,Htr,Utr,PX,Jtr,Ytr,Ktr,kM,Ype,Ztr,ear,IX,oar,rar,tar,SM,Kpe,aar,nar,qX,sar,lar,iar,RM,Zpe,dar,car,NX,mar,far,gar,BM,e_e,har,uar,jX,par,_ar,bar,PM,o_e,Far,Tar,DX,Mar,Ear,Car,IM,r_e,war,Aar,GX,yar,Lar,xar,qM,t_e,$ar,kar,OX,Sar,Rar,Bar,NM,a_e,Par,Iar,VX,qar,Nar,jar,jM,n_e,Dar,Gar,XX,Oar,Var,Xar,DM,s_e,zar,Qar,zX,War,Har,Uar,GM,l_e,Jar,Yar,QX,Kar,Zar,enr,OM,i_e,onr,rnr,WX,tnr,anr,nnr,VM,d_e,snr,lnr,HX,inr,dnr,cnr,XM,c_e,mnr,fnr,UX,gnr,hnr,unr,zM,m_e,pnr,_nr,JX,bnr,Fnr,vnr,QM,f_e,Tnr,Mnr,YX,Enr,Cnr,wnr,WM,g_e,Anr,ynr,KX,Lnr,xnr,$nr,HM,h_e,knr,Snr,ZX,Rnr,Bnr,Pnr,UM,JBe,Bd,JM,u_e,t8,Inr,p_e,qnr,YBe,Jo,a8,Nnr,Pd,jnr,ez,Dnr,Gnr,oz,Onr,Vnr,Xnr,n8,znr,__e,Qnr,Wnr,Hnr,Et,s8,Unr,b_e,Jnr,Ynr,Id,Knr,F_e,Znr,esr,rz,osr,rsr,tsr,YM,asr,Er,l8,nsr,v_e,ssr,lsr,Ua,isr,T_e,dsr,csr,M_e,msr,fsr,E_e,gsr,hsr,usr,ne,KM,C_e,psr,_sr,tz,bsr,Fsr,vsr,ZM,w_e,Tsr,Msr,az,Esr,Csr,wsr,e4,A_e,Asr,ysr,nz,Lsr,xsr,$sr,o4,y_e,ksr,Ssr,sz,Rsr,Bsr,Psr,r4,L_e,Isr,qsr,lz,Nsr,jsr,Dsr,t4,x_e,Gsr,Osr,iz,Vsr,Xsr,zsr,a4,$_e,Qsr,Wsr,dz,Hsr,Usr,Jsr,n4,k_e,Ysr,Ksr,cz,Zsr,elr,olr,s4,S_e,rlr,tlr,mz,alr,nlr,slr,l4,R_e,llr,ilr,fz,dlr,clr,mlr,i4,B_e,flr,glr,gz,hlr,ulr,plr,d4,P_e,_lr,blr,hz,Flr,vlr,Tlr,c4,I_e,Mlr,Elr,uz,Clr,wlr,Alr,m4,q_e,ylr,Llr,pz,xlr,$lr,klr,f4,N_e,Slr,Rlr,_z,Blr,Plr,Ilr,g4,j_e,qlr,Nlr,bz,jlr,Dlr,Glr,h4,D_e,Olr,Vlr,Fz,Xlr,zlr,Qlr,u4,G_e,Wlr,Hlr,vz,Ulr,Jlr,Ylr,p4,O_e,Klr,Zlr,Tz,eir,oir,rir,_4,V_e,tir,air,Mz,nir,sir,lir,b4,X_e,iir,dir,Ez,cir,mir,fir,F4,z_e,gir,hir,Cz,uir,pir,_ir,v4,Q_e,bir,Fir,wz,vir,Tir,Mir,T4,KBe,qd,M4,W_e,i8,Eir,H_e,Cir,ZBe,Yo,d8,wir,Nd,Air,Az,yir,Lir,yz,xir,$ir,kir,c8,Sir,U_e,Rir,Bir,Pir,Ct,m8,Iir,J_e,qir,Nir,jd,jir,Y_e,Dir,Gir,Lz,Oir,Vir,Xir,E4,zir,Cr,f8,Qir,K_e,Wir,Hir,Ja,Uir,Z_e,Jir,Yir,ebe,Kir,Zir,obe,edr,odr,rdr,Te,C4,rbe,tdr,adr,xz,ndr,sdr,ldr,w4,tbe,idr,ddr,$z,cdr,mdr,fdr,A4,abe,gdr,hdr,kz,udr,pdr,_dr,y4,nbe,bdr,Fdr,Sz,vdr,Tdr,Mdr,L4,sbe,Edr,Cdr,Rz,wdr,Adr,ydr,x4,lbe,Ldr,xdr,Bz,$dr,kdr,Sdr,$4,ibe,Rdr,Bdr,Pz,Pdr,Idr,qdr,k4,dbe,Ndr,jdr,Iz,Ddr,Gdr,Odr,S4,cbe,Vdr,Xdr,qz,zdr,Qdr,Wdr,R4,mbe,Hdr,Udr,Nz,Jdr,Ydr,Kdr,B4,fbe,Zdr,ecr,jz,ocr,rcr,tcr,P4,gbe,acr,ncr,Dz,scr,lcr,icr,I4,ePe,Dd,q4,hbe,g8,dcr,ube,ccr,oPe,Ko,h8,mcr,Gd,fcr,Gz,gcr,hcr,Oz,ucr,pcr,_cr,u8,bcr,pbe,Fcr,vcr,Tcr,wt,p8,Mcr,_be,Ecr,Ccr,Od,wcr,bbe,Acr,ycr,Vz,Lcr,xcr,$cr,N4,kcr,wr,_8,Scr,Fbe,Rcr,Bcr,Ya,Pcr,vbe,Icr,qcr,Tbe,Ncr,jcr,Mbe,Dcr,Gcr,Ocr,b8,j4,Ebe,Vcr,Xcr,Xz,zcr,Qcr,Wcr,D4,Cbe,Hcr,Ucr,zz,Jcr,Ycr,Kcr,G4,rPe,Vd,O4,wbe,F8,Zcr,Abe,emr,tPe,Zo,v8,omr,Xd,rmr,Qz,tmr,amr,Wz,nmr,smr,lmr,T8,imr,ybe,dmr,cmr,mmr,At,M8,fmr,Lbe,gmr,hmr,zd,umr,xbe,pmr,_mr,Hz,bmr,Fmr,vmr,V4,Tmr,Ar,E8,Mmr,$be,Emr,Cmr,Ka,wmr,kbe,Amr,ymr,Sbe,Lmr,xmr,Rbe,$mr,kmr,Smr,ie,X4,Bbe,Rmr,Bmr,Uz,Pmr,Imr,qmr,z4,Pbe,Nmr,jmr,Jz,Dmr,Gmr,Omr,Q4,Ibe,Vmr,Xmr,Yz,zmr,Qmr,Wmr,W4,qbe,Hmr,Umr,Kz,Jmr,Ymr,Kmr,H4,Nbe,Zmr,efr,Zz,ofr,rfr,tfr,U4,jbe,afr,nfr,eQ,sfr,lfr,ifr,J4,Dbe,dfr,cfr,oQ,mfr,ffr,gfr,Y4,Gbe,hfr,ufr,rQ,pfr,_fr,bfr,K4,Obe,Ffr,vfr,tQ,Tfr,Mfr,Efr,Z4,Vbe,Cfr,wfr,aQ,Afr,yfr,Lfr,eE,Xbe,xfr,$fr,nQ,kfr,Sfr,Rfr,oE,zbe,Bfr,Pfr,sQ,Ifr,qfr,Nfr,rE,Qbe,jfr,Dfr,lQ,Gfr,Ofr,Vfr,tE,Wbe,Xfr,zfr,iQ,Qfr,Wfr,Hfr,aE,Hbe,Ufr,Jfr,dQ,Yfr,Kfr,Zfr,nE,Ube,egr,ogr,cQ,rgr,tgr,agr,sE,Jbe,ngr,sgr,mQ,lgr,igr,dgr,lE,Ybe,cgr,mgr,fQ,fgr,ggr,hgr,iE,Kbe,ugr,pgr,gQ,_gr,bgr,Fgr,dE,Zbe,vgr,Tgr,hQ,Mgr,Egr,Cgr,cE,aPe,Qd,mE,e2e,C8,wgr,o2e,Agr,nPe,er,w8,ygr,Wd,Lgr,uQ,xgr,$gr,pQ,kgr,Sgr,Rgr,A8,Bgr,r2e,Pgr,Igr,qgr,yt,y8,Ngr,t2e,jgr,Dgr,Hd,Ggr,a2e,Ogr,Vgr,_Q,Xgr,zgr,Qgr,fE,Wgr,yr,L8,Hgr,n2e,Ugr,Jgr,Za,Ygr,s2e,Kgr,Zgr,l2e,ehr,ohr,i2e,rhr,thr,ahr,ye,gE,d2e,nhr,shr,bQ,lhr,ihr,dhr,hE,c2e,chr,mhr,FQ,fhr,ghr,hhr,uE,m2e,uhr,phr,vQ,_hr,bhr,Fhr,pE,f2e,vhr,Thr,TQ,Mhr,Ehr,Chr,_E,g2e,whr,Ahr,MQ,yhr,Lhr,xhr,bE,h2e,$hr,khr,EQ,Shr,Rhr,Bhr,FE,u2e,Phr,Ihr,CQ,qhr,Nhr,jhr,vE,p2e,Dhr,Ghr,wQ,Ohr,Vhr,Xhr,TE,_2e,zhr,Qhr,AQ,Whr,Hhr,Uhr,ME,b2e,Jhr,Yhr,yQ,Khr,Zhr,eur,EE,sPe,Ud,CE,F2e,x8,our,v2e,rur,lPe,or,$8,tur,Jd,aur,LQ,nur,sur,xQ,lur,iur,dur,k8,cur,T2e,mur,fur,gur,Lt,S8,hur,M2e,uur,pur,Yd,_ur,E2e,bur,Fur,$Q,vur,Tur,Mur,wE,Eur,Lr,R8,Cur,C2e,wur,Aur,en,yur,w2e,Lur,xur,A2e,$ur,kur,y2e,Sur,Rur,Bur,Z,AE,L2e,Pur,Iur,kQ,qur,Nur,jur,yE,x2e,Dur,Gur,SQ,Our,Vur,Xur,LE,$2e,zur,Qur,RQ,Wur,Hur,Uur,xE,k2e,Jur,Yur,BQ,Kur,Zur,epr,$E,S2e,opr,rpr,PQ,tpr,apr,npr,kE,R2e,spr,lpr,IQ,ipr,dpr,cpr,SE,B2e,mpr,fpr,qQ,gpr,hpr,upr,RE,P2e,ppr,_pr,NQ,bpr,Fpr,vpr,BE,I2e,Tpr,Mpr,jQ,Epr,Cpr,wpr,PE,q2e,Apr,ypr,DQ,Lpr,xpr,$pr,IE,N2e,kpr,Spr,GQ,Rpr,Bpr,Ppr,qE,j2e,Ipr,qpr,OQ,Npr,jpr,Dpr,NE,D2e,Gpr,Opr,VQ,Vpr,Xpr,zpr,jE,G2e,Qpr,Wpr,XQ,Hpr,Upr,Jpr,DE,O2e,Ypr,Kpr,zQ,Zpr,e_r,o_r,GE,V2e,r_r,t_r,QQ,a_r,n_r,s_r,OE,X2e,l_r,i_r,WQ,d_r,c_r,m_r,VE,z2e,f_r,g_r,HQ,h_r,u_r,p_r,XE,Q2e,__r,b_r,UQ,F_r,v_r,T_r,zE,W2e,M_r,E_r,JQ,C_r,w_r,A_r,QE,H2e,y_r,L_r,YQ,x_r,$_r,k_r,WE,U2e,S_r,R_r,KQ,B_r,P_r,I_r,HE,J2e,q_r,N_r,ZQ,j_r,D_r,G_r,UE,Y2e,O_r,V_r,eW,X_r,z_r,Q_r,JE,K2e,W_r,H_r,oW,U_r,J_r,Y_r,YE,Z2e,K_r,Z_r,rW,ebr,obr,rbr,KE,iPe,Kd,ZE,eFe,B8,tbr,oFe,abr,dPe,rr,P8,nbr,Zd,sbr,tW,lbr,ibr,aW,dbr,cbr,mbr,I8,fbr,rFe,gbr,hbr,ubr,xt,q8,pbr,tFe,_br,bbr,ec,Fbr,aFe,vbr,Tbr,nW,Mbr,Ebr,Cbr,e5,wbr,xr,N8,Abr,nFe,ybr,Lbr,on,xbr,sFe,$br,kbr,lFe,Sbr,Rbr,iFe,Bbr,Pbr,Ibr,ue,o5,dFe,qbr,Nbr,sW,jbr,Dbr,Gbr,r5,cFe,Obr,Vbr,lW,Xbr,zbr,Qbr,t5,mFe,Wbr,Hbr,iW,Ubr,Jbr,Ybr,a5,fFe,Kbr,Zbr,dW,e2r,o2r,r2r,n5,gFe,t2r,a2r,cW,n2r,s2r,l2r,s5,hFe,i2r,d2r,mW,c2r,m2r,f2r,l5,uFe,g2r,h2r,fW,u2r,p2r,_2r,i5,pFe,b2r,F2r,gW,v2r,T2r,M2r,d5,_Fe,E2r,C2r,hW,w2r,A2r,y2r,c5,bFe,L2r,x2r,uW,$2r,k2r,S2r,m5,FFe,R2r,B2r,pW,P2r,I2r,q2r,f5,vFe,N2r,j2r,_W,D2r,G2r,O2r,g5,TFe,V2r,X2r,bW,z2r,Q2r,W2r,h5,MFe,H2r,U2r,FW,J2r,Y2r,K2r,u5,EFe,Z2r,eFr,vW,oFr,rFr,tFr,p5,CFe,aFr,nFr,TW,sFr,lFr,iFr,_5,wFe,dFr,cFr,MW,mFr,fFr,gFr,b5,cPe,oc,F5,AFe,j8,hFr,yFe,uFr,mPe,tr,D8,pFr,rc,_Fr,EW,bFr,FFr,CW,vFr,TFr,MFr,G8,EFr,LFe,CFr,wFr,AFr,$t,O8,yFr,xFe,LFr,xFr,tc,$Fr,$Fe,kFr,SFr,wW,RFr,BFr,PFr,v5,IFr,$r,V8,qFr,kFe,NFr,jFr,rn,DFr,SFe,GFr,OFr,RFe,VFr,XFr,BFe,zFr,QFr,WFr,PFe,T5,IFe,HFr,UFr,AW,JFr,YFr,KFr,M5,fPe,ac,E5,qFe,X8,ZFr,NFe,evr,gPe,ar,z8,ovr,nc,rvr,yW,tvr,avr,LW,nvr,svr,lvr,Q8,ivr,jFe,dvr,cvr,mvr,kt,W8,fvr,DFe,gvr,hvr,sc,uvr,GFe,pvr,_vr,xW,bvr,Fvr,vvr,C5,Tvr,kr,H8,Mvr,OFe,Evr,Cvr,tn,wvr,VFe,Avr,yvr,XFe,Lvr,xvr,zFe,$vr,kvr,Svr,de,w5,QFe,Rvr,Bvr,$W,Pvr,Ivr,qvr,A5,WFe,Nvr,jvr,kW,Dvr,Gvr,Ovr,y5,HFe,Vvr,Xvr,SW,zvr,Qvr,Wvr,L5,UFe,Hvr,Uvr,RW,Jvr,Yvr,Kvr,x5,JFe,Zvr,e1r,BW,o1r,r1r,t1r,$5,YFe,a1r,n1r,PW,s1r,l1r,i1r,k5,KFe,d1r,c1r,IW,m1r,f1r,g1r,S5,ZFe,h1r,u1r,qW,p1r,_1r,b1r,R5,eve,F1r,v1r,NW,T1r,M1r,E1r,B5,ove,C1r,w1r,jW,A1r,y1r,L1r,P5,rve,x1r,$1r,DW,k1r,S1r,R1r,I5,tve,B1r,P1r,GW,I1r,q1r,N1r,q5,ave,j1r,D1r,OW,G1r,O1r,V1r,N5,nve,X1r,z1r,VW,Q1r,W1r,H1r,j5,sve,U1r,J1r,XW,Y1r,K1r,Z1r,D5,lve,eTr,oTr,zW,rTr,tTr,aTr,G5,ive,nTr,sTr,QW,lTr,iTr,dTr,O5,dve,cTr,mTr,WW,fTr,gTr,hTr,V5,cve,uTr,pTr,HW,_Tr,bTr,FTr,X5,mve,vTr,TTr,UW,MTr,ETr,CTr,z5,hPe,lc,Q5,fve,U8,wTr,gve,ATr,uPe,nr,J8,yTr,ic,LTr,JW,xTr,$Tr,YW,kTr,STr,RTr,Y8,BTr,hve,PTr,ITr,qTr,St,K8,NTr,uve,jTr,DTr,dc,GTr,pve,OTr,VTr,KW,XTr,zTr,QTr,W5,WTr,Sr,Z8,HTr,_ve,UTr,JTr,an,YTr,bve,KTr,ZTr,Fve,eMr,oMr,vve,rMr,tMr,aMr,ce,H5,Tve,nMr,sMr,ZW,lMr,iMr,dMr,U5,Mve,cMr,mMr,eH,fMr,gMr,hMr,J5,Eve,uMr,pMr,oH,_Mr,bMr,FMr,Y5,Cve,vMr,TMr,rH,MMr,EMr,CMr,K5,wve,wMr,AMr,tH,yMr,LMr,xMr,Z5,Ave,$Mr,kMr,aH,SMr,RMr,BMr,eC,yve,PMr,IMr,nH,qMr,NMr,jMr,oC,Lve,DMr,GMr,sH,OMr,VMr,XMr,rC,xve,zMr,QMr,lH,WMr,HMr,UMr,tC,$ve,JMr,YMr,iH,KMr,ZMr,e4r,aC,kve,o4r,r4r,dH,t4r,a4r,n4r,nC,Sve,s4r,l4r,cH,i4r,d4r,c4r,sC,Rve,m4r,f4r,mH,g4r,h4r,u4r,lC,Bve,p4r,_4r,fH,b4r,F4r,v4r,iC,Pve,T4r,M4r,gH,E4r,C4r,w4r,dC,Ive,A4r,y4r,hH,L4r,x4r,$4r,cC,qve,k4r,S4r,uH,R4r,B4r,P4r,mC,Nve,I4r,q4r,pH,N4r,j4r,D4r,fC,jve,G4r,O4r,_H,V4r,X4r,z4r,gC,Dve,Q4r,W4r,bH,H4r,U4r,J4r,hC,pPe,cc,uC,Gve,e7,Y4r,Ove,K4r,_Pe,sr,o7,Z4r,mc,eEr,FH,oEr,rEr,vH,tEr,aEr,nEr,r7,sEr,Vve,lEr,iEr,dEr,Rt,t7,cEr,Xve,mEr,fEr,fc,gEr,zve,hEr,uEr,TH,pEr,_Er,bEr,pC,FEr,Rr,a7,vEr,Qve,TEr,MEr,nn,EEr,Wve,CEr,wEr,Hve,AEr,yEr,Uve,LEr,xEr,$Er,Jve,_C,Yve,kEr,SEr,MH,REr,BEr,PEr,bC,bPe,gc,FC,Kve,n7,IEr,Zve,qEr,FPe,lr,s7,NEr,hc,jEr,EH,DEr,GEr,CH,OEr,VEr,XEr,l7,zEr,e1e,QEr,WEr,HEr,Bt,i7,UEr,o1e,JEr,YEr,uc,KEr,r1e,ZEr,e5r,wH,o5r,r5r,t5r,vC,a5r,Br,d7,n5r,t1e,s5r,l5r,sn,i5r,a1e,d5r,c5r,n1e,m5r,f5r,s1e,g5r,h5r,u5r,l1e,TC,i1e,p5r,_5r,AH,b5r,F5r,v5r,MC,vPe,pc,EC,d1e,c7,T5r,c1e,M5r,TPe,ir,m7,E5r,_c,C5r,yH,w5r,A5r,LH,y5r,L5r,x5r,f7,$5r,m1e,k5r,S5r,R5r,Pt,g7,B5r,f1e,P5r,I5r,bc,q5r,g1e,N5r,j5r,xH,D5r,G5r,O5r,CC,V5r,Pr,h7,X5r,h1e,z5r,Q5r,ln,W5r,u1e,H5r,U5r,p1e,J5r,Y5r,_1e,K5r,Z5r,eCr,oe,wC,b1e,oCr,rCr,$H,tCr,aCr,nCr,AC,F1e,sCr,lCr,kH,iCr,dCr,cCr,yC,v1e,mCr,fCr,SH,gCr,hCr,uCr,LC,T1e,pCr,_Cr,RH,bCr,FCr,vCr,xC,M1e,TCr,MCr,BH,ECr,CCr,wCr,$C,E1e,ACr,yCr,PH,LCr,xCr,$Cr,kC,C1e,kCr,SCr,IH,RCr,BCr,PCr,SC,w1e,ICr,qCr,qH,NCr,jCr,DCr,RC,A1e,GCr,OCr,NH,VCr,XCr,zCr,BC,y1e,QCr,WCr,jH,HCr,UCr,JCr,PC,L1e,YCr,KCr,DH,ZCr,e3r,o3r,IC,x1e,r3r,t3r,GH,a3r,n3r,s3r,qC,$1e,l3r,i3r,OH,d3r,c3r,m3r,NC,k1e,f3r,g3r,VH,h3r,u3r,p3r,jC,S1e,_3r,b3r,XH,F3r,v3r,T3r,DC,R1e,M3r,E3r,zH,C3r,w3r,A3r,GC,B1e,y3r,L3r,QH,x3r,$3r,k3r,OC,P1e,S3r,R3r,WH,B3r,P3r,I3r,VC,I1e,q3r,N3r,HH,j3r,D3r,G3r,XC,q1e,O3r,V3r,UH,X3r,z3r,Q3r,zC,N1e,W3r,H3r,JH,U3r,J3r,Y3r,QC,j1e,K3r,Z3r,YH,ewr,owr,rwr,WC,D1e,twr,awr,KH,nwr,swr,lwr,HC,G1e,iwr,dwr,ZH,cwr,mwr,fwr,UC,O1e,gwr,hwr,eU,uwr,pwr,_wr,JC,MPe,Fc,YC,V1e,u7,bwr,X1e,Fwr,EPe,dr,p7,vwr,vc,Twr,oU,Mwr,Ewr,rU,Cwr,wwr,Awr,_7,ywr,z1e,Lwr,xwr,$wr,It,b7,kwr,Q1e,Swr,Rwr,Tc,Bwr,W1e,Pwr,Iwr,tU,qwr,Nwr,jwr,KC,Dwr,Ir,F7,Gwr,H1e,Owr,Vwr,dn,Xwr,U1e,zwr,Qwr,J1e,Wwr,Hwr,Y1e,Uwr,Jwr,Ywr,Hr,ZC,K1e,Kwr,Zwr,aU,eAr,oAr,rAr,e3,Z1e,tAr,aAr,nU,nAr,sAr,lAr,o3,eTe,iAr,dAr,sU,cAr,mAr,fAr,r3,oTe,gAr,hAr,lU,uAr,pAr,_Ar,t3,rTe,bAr,FAr,iU,vAr,TAr,MAr,a3,CPe,Mc,n3,tTe,v7,EAr,aTe,CAr,wPe,cr,T7,wAr,Ec,AAr,dU,yAr,LAr,cU,xAr,$Ar,kAr,M7,SAr,nTe,RAr,BAr,PAr,qt,E7,IAr,sTe,qAr,NAr,Cc,jAr,lTe,DAr,GAr,mU,OAr,VAr,XAr,s3,zAr,qr,C7,QAr,iTe,WAr,HAr,cn,UAr,dTe,JAr,YAr,cTe,KAr,ZAr,mTe,e0r,o0r,r0r,Me,l3,fTe,t0r,a0r,fU,n0r,s0r,l0r,i3,gTe,i0r,d0r,gU,c0r,m0r,f0r,d3,hTe,g0r,h0r,hU,u0r,p0r,_0r,c3,uTe,b0r,F0r,uU,v0r,T0r,M0r,m3,pTe,E0r,C0r,pU,w0r,A0r,y0r,f3,_Te,L0r,x0r,_U,$0r,k0r,S0r,g3,bTe,R0r,B0r,bU,P0r,I0r,q0r,h3,FTe,N0r,j0r,FU,D0r,G0r,O0r,u3,vTe,V0r,X0r,vU,z0r,Q0r,W0r,p3,TTe,H0r,U0r,TU,J0r,Y0r,K0r,_3,MTe,Z0r,e6r,MU,o6r,r6r,t6r,b3,ETe,a6r,n6r,EU,s6r,l6r,i6r,F3,APe,wc,v3,CTe,w7,d6r,wTe,c6r,yPe,mr,A7,m6r,Ac,f6r,CU,g6r,h6r,wU,u6r,p6r,_6r,y7,b6r,ATe,F6r,v6r,T6r,Nt,L7,M6r,yTe,E6r,C6r,yc,w6r,LTe,A6r,y6r,AU,L6r,x6r,$6r,T3,k6r,Nr,x7,S6r,xTe,R6r,B6r,mn,P6r,$Te,I6r,q6r,kTe,N6r,j6r,STe,D6r,G6r,O6r,Le,M3,RTe,V6r,X6r,yU,z6r,Q6r,W6r,E3,BTe,H6r,U6r,LU,J6r,Y6r,K6r,C3,PTe,Z6r,eyr,xU,oyr,ryr,tyr,w3,ITe,ayr,nyr,$U,syr,lyr,iyr,A3,qTe,dyr,cyr,kU,myr,fyr,gyr,y3,NTe,hyr,uyr,SU,pyr,_yr,byr,L3,jTe,Fyr,vyr,RU,Tyr,Myr,Eyr,x3,DTe,Cyr,wyr,BU,Ayr,yyr,Lyr,$3,GTe,xyr,$yr,PU,kyr,Syr,Ryr,k3,OTe,Byr,Pyr,IU,Iyr,qyr,Nyr,S3,LPe,Lc,R3,VTe,$7,jyr,XTe,Dyr,xPe,fr,k7,Gyr,xc,Oyr,qU,Vyr,Xyr,NU,zyr,Qyr,Wyr,S7,Hyr,zTe,Uyr,Jyr,Yyr,jt,R7,Kyr,QTe,Zyr,eLr,$c,oLr,WTe,rLr,tLr,jU,aLr,nLr,sLr,B3,lLr,jr,B7,iLr,HTe,dLr,cLr,fn,mLr,UTe,fLr,gLr,JTe,hLr,uLr,YTe,pLr,_Lr,bLr,ke,P3,KTe,FLr,vLr,DU,TLr,MLr,ELr,I3,ZTe,CLr,wLr,GU,ALr,yLr,LLr,q3,eMe,xLr,$Lr,OU,kLr,SLr,RLr,N3,oMe,BLr,PLr,VU,ILr,qLr,NLr,j3,rMe,jLr,DLr,XU,GLr,OLr,VLr,D3,tMe,XLr,zLr,zU,QLr,WLr,HLr,G3,aMe,ULr,JLr,QU,YLr,KLr,ZLr,O3,nMe,e8r,o8r,WU,r8r,t8r,a8r,V3,sMe,n8r,s8r,HU,l8r,i8r,d8r,X3,$Pe,kc,z3,lMe,P7,c8r,iMe,m8r,kPe,gr,I7,f8r,Sc,g8r,UU,h8r,u8r,JU,p8r,_8r,b8r,q7,F8r,dMe,v8r,T8r,M8r,Dt,N7,E8r,cMe,C8r,w8r,Rc,A8r,mMe,y8r,L8r,YU,x8r,$8r,k8r,Q3,S8r,Dr,j7,R8r,fMe,B8r,P8r,gn,I8r,gMe,q8r,N8r,hMe,j8r,D8r,uMe,G8r,O8r,V8r,xe,W3,pMe,X8r,z8r,KU,Q8r,W8r,H8r,H3,_Me,U8r,J8r,ZU,Y8r,K8r,Z8r,U3,bMe,e7r,o7r,eJ,r7r,t7r,a7r,J3,FMe,n7r,s7r,oJ,l7r,i7r,d7r,Y3,vMe,c7r,m7r,rJ,f7r,g7r,h7r,K3,TMe,u7r,p7r,tJ,_7r,b7r,F7r,Z3,MMe,v7r,T7r,aJ,M7r,E7r,C7r,ew,EMe,w7r,A7r,nJ,y7r,L7r,x7r,ow,CMe,$7r,k7r,sJ,S7r,R7r,B7r,rw,wMe,P7r,I7r,lJ,q7r,N7r,j7r,tw,SPe,Bc,aw,AMe,D7,D7r,yMe,G7r,RPe,hr,G7,O7r,Pc,V7r,iJ,X7r,z7r,dJ,Q7r,W7r,H7r,O7,U7r,LMe,J7r,Y7r,K7r,Gt,V7,Z7r,xMe,exr,oxr,Ic,rxr,$Me,txr,axr,cJ,nxr,sxr,lxr,nw,ixr,Gr,X7,dxr,kMe,cxr,mxr,hn,fxr,SMe,gxr,hxr,RMe,uxr,pxr,BMe,_xr,bxr,Fxr,$e,sw,PMe,vxr,Txr,mJ,Mxr,Exr,Cxr,lw,IMe,wxr,Axr,fJ,yxr,Lxr,xxr,iw,qMe,$xr,kxr,gJ,Sxr,Rxr,Bxr,dw,NMe,Pxr,Ixr,hJ,qxr,Nxr,jxr,cw,jMe,Dxr,Gxr,uJ,Oxr,Vxr,Xxr,mw,DMe,zxr,Qxr,pJ,Wxr,Hxr,Uxr,fw,GMe,Jxr,Yxr,_J,Kxr,Zxr,e9r,gw,OMe,o9r,r9r,bJ,t9r,a9r,n9r,hw,VMe,s9r,l9r,FJ,i9r,d9r,c9r,uw,XMe,m9r,f9r,vJ,g9r,h9r,u9r,pw,BPe,qc,_w,zMe,z7,p9r,QMe,_9r,PPe,ur,Q7,b9r,Nc,F9r,TJ,v9r,T9r,MJ,M9r,E9r,C9r,W7,w9r,WMe,A9r,y9r,L9r,Ot,H7,x9r,HMe,$9r,k9r,jc,S9r,UMe,R9r,B9r,EJ,P9r,I9r,q9r,bw,N9r,Or,U7,j9r,JMe,D9r,G9r,un,O9r,YMe,V9r,X9r,KMe,z9r,Q9r,ZMe,W9r,H9r,U9r,je,Fw,e4e,J9r,Y9r,CJ,K9r,Z9r,e$r,vw,o4e,o$r,r$r,wJ,t$r,a$r,n$r,Tw,r4e,s$r,l$r,AJ,i$r,d$r,c$r,Mw,t4e,m$r,f$r,yJ,g$r,h$r,u$r,Ew,a4e,p$r,_$r,LJ,b$r,F$r,v$r,Cw,n4e,T$r,M$r,xJ,E$r,C$r,w$r,ww,s4e,A$r,y$r,$J,L$r,x$r,$$r,Aw,l4e,k$r,S$r,kJ,R$r,B$r,P$r,yw,IPe,Dc,Lw,i4e,J7,I$r,d4e,q$r,qPe,pr,Y7,N$r,Gc,j$r,SJ,D$r,G$r,RJ,O$r,V$r,X$r,K7,z$r,c4e,Q$r,W$r,H$r,Vt,Z7,U$r,m4e,J$r,Y$r,Oc,K$r,f4e,Z$r,ekr,BJ,okr,rkr,tkr,xw,akr,Vr,ex,nkr,g4e,skr,lkr,pn,ikr,h4e,dkr,ckr,u4e,mkr,fkr,p4e,gkr,hkr,ukr,De,$w,_4e,pkr,_kr,PJ,bkr,Fkr,vkr,kw,b4e,Tkr,Mkr,IJ,Ekr,Ckr,wkr,Sw,F4e,Akr,ykr,qJ,Lkr,xkr,$kr,Rw,v4e,kkr,Skr,NJ,Rkr,Bkr,Pkr,Bw,T4e,Ikr,qkr,jJ,Nkr,jkr,Dkr,Pw,M4e,Gkr,Okr,DJ,Vkr,Xkr,zkr,Iw,E4e,Qkr,Wkr,GJ,Hkr,Ukr,Jkr,qw,C4e,Ykr,Kkr,OJ,Zkr,eSr,oSr,Nw,NPe,Vc,jw,w4e,ox,rSr,A4e,tSr,jPe,_r,rx,aSr,Xc,nSr,VJ,sSr,lSr,XJ,iSr,dSr,cSr,tx,mSr,y4e,fSr,gSr,hSr,Xt,ax,uSr,L4e,pSr,_Sr,zc,bSr,x4e,FSr,vSr,zJ,TSr,MSr,ESr,Dw,CSr,Xr,nx,wSr,$4e,ASr,ySr,_n,LSr,k4e,xSr,$Sr,S4e,kSr,SSr,R4e,RSr,BSr,PSr,B4e,Gw,P4e,ISr,qSr,QJ,NSr,jSr,DSr,Ow,DPe,Qc,Vw,I4e,sx,GSr,q4e,OSr,GPe,br,lx,VSr,Wc,XSr,WJ,zSr,QSr,HJ,WSr,HSr,USr,ix,JSr,N4e,YSr,KSr,ZSr,zt,dx,eRr,j4e,oRr,rRr,Hc,tRr,D4e,aRr,nRr,UJ,sRr,lRr,iRr,Xw,dRr,zr,cx,cRr,G4e,mRr,fRr,bn,gRr,O4e,hRr,uRr,V4e,pRr,_Rr,X4e,bRr,FRr,vRr,mx,zw,z4e,TRr,MRr,JJ,ERr,CRr,wRr,Qw,Q4e,ARr,yRr,YJ,LRr,xRr,$Rr,Ww,OPe,Uc,Hw,W4e,fx,kRr,H4e,SRr,VPe,Fr,gx,RRr,Jc,BRr,KJ,PRr,IRr,ZJ,qRr,NRr,jRr,hx,DRr,U4e,GRr,ORr,VRr,Qt,ux,XRr,J4e,zRr,QRr,Yc,WRr,Y4e,HRr,URr,eY,JRr,YRr,KRr,Uw,ZRr,Qr,px,eBr,K4e,oBr,rBr,Fn,tBr,Z4e,aBr,nBr,eEe,sBr,lBr,oEe,iBr,dBr,cBr,rEe,Jw,tEe,mBr,fBr,oY,gBr,hBr,uBr,Yw,XPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_6=new ee({}),b6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sm=new pBr({props:{warning:!0,$$slots:{default:[KCt]},$$scope:{ctx:L}}}),F6=new ee({}),v6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L563"}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),C6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L708"}}),w6=new ee({}),A6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L377"}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),$6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L587"}}),k6=new ee({}),S6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),dh=new pBr({props:{$$slots:{default:[o3t]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),I6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),q6=new ee({}),N6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L76"}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new pBr({props:{$$slots:{default:[t3t]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),O6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L243"}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L716"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),H6=new ee({}),U6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L723"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),Z6=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L738"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L745"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L752"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),hy=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L761"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),Fy=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L795"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L802"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),cL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L864"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),uL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L834"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),F8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),t7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),i7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),c7=new ee({}),m7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),u7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),v7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),D7=new ee({}),G7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),V7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),z7=new ee({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),H7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),J7=new ee({}),Y7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:L}}}),fx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),vo=a("span"),oi=o("Auto Classes"),om=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),g6=o("from_pretrained()"),rm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ai=o("Instantiating one of "),Tn=a("a"),h6=o("AutoConfig"),Mn=o(", "),En=a("a"),u6=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),p6=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tm=l(),v(ba.$$.fragment),Ve=l(),Ae=a("p"),x9=o("will create a model that is an instance of "),li=a("a"),$9=o("BertModel"),k9=o("."),To=l(),Fa=a("p"),S9=o("There is one class of "),am=a("code"),R9=o("AutoModel"),Jqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),ii=a("h2"),nm=a("a"),QK=a("span"),v(_6.$$.fragment),Yqe=l(),WK=a("span"),Kqe=o("Extending the Auto Classes"),XRe=l(),wn=a("p"),Zqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HK=a("code"),eNe=o("NewModel"),oNe=o(", make sure you have a "),UK=a("code"),rNe=o("NewModelConfig"),tNe=o(` then you can add those to the auto
classes like this:`),zRe=l(),v(b6.$$.fragment),QRe=l(),B9=a("p"),aNe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),v(sm.$$.fragment),HRe=l(),di=a("h2"),lm=a("a"),JK=a("span"),v(F6.$$.fragment),nNe=l(),YK=a("span"),sNe=o("AutoConfig"),URe=l(),Mo=a("div"),v(v6.$$.fragment),lNe=l(),T6=a("p"),iNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P9=a("a"),dNe=o("from_pretrained()"),cNe=o(" class method."),mNe=l(),M6=a("p"),fNe=o("This class cannot be instantiated directly using "),KK=a("code"),gNe=o("__init__()"),hNe=o(" (throws an error)."),uNe=l(),vr=a("div"),v(E6.$$.fragment),pNe=l(),ZK=a("p"),_Ne=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bNe=l(),ci=a("p"),FNe=o("The configuration class to instantiate is selected based on the "),eZ=a("code"),vNe=o("model_type"),TNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oZ=a("code"),MNe=o("pretrained_model_name_or_path"),ENe=o(":"),CNe=l(),A=a("ul"),im=a("li"),rZ=a("strong"),wNe=o("albert"),ANe=o(" \u2014 "),I9=a("a"),yNe=o("AlbertConfig"),LNe=o(" (ALBERT model)"),xNe=l(),dm=a("li"),tZ=a("strong"),$Ne=o("bart"),kNe=o(" \u2014 "),q9=a("a"),SNe=o("BartConfig"),RNe=o(" (BART model)"),BNe=l(),cm=a("li"),aZ=a("strong"),PNe=o("beit"),INe=o(" \u2014 "),N9=a("a"),qNe=o("BeitConfig"),NNe=o(" (BEiT model)"),jNe=l(),mm=a("li"),nZ=a("strong"),DNe=o("bert"),GNe=o(" \u2014 "),j9=a("a"),ONe=o("BertConfig"),VNe=o(" (BERT model)"),XNe=l(),fm=a("li"),sZ=a("strong"),zNe=o("bert-generation"),QNe=o(" \u2014 "),D9=a("a"),WNe=o("BertGenerationConfig"),HNe=o(" (Bert Generation model)"),UNe=l(),gm=a("li"),lZ=a("strong"),JNe=o("big_bird"),YNe=o(" \u2014 "),G9=a("a"),KNe=o("BigBirdConfig"),ZNe=o(" (BigBird model)"),eje=l(),hm=a("li"),iZ=a("strong"),oje=o("bigbird_pegasus"),rje=o(" \u2014 "),O9=a("a"),tje=o("BigBirdPegasusConfig"),aje=o(" (BigBirdPegasus model)"),nje=l(),um=a("li"),dZ=a("strong"),sje=o("blenderbot"),lje=o(" \u2014 "),V9=a("a"),ije=o("BlenderbotConfig"),dje=o(" (Blenderbot model)"),cje=l(),pm=a("li"),cZ=a("strong"),mje=o("blenderbot-small"),fje=o(" \u2014 "),X9=a("a"),gje=o("BlenderbotSmallConfig"),hje=o(" (BlenderbotSmall model)"),uje=l(),_m=a("li"),mZ=a("strong"),pje=o("camembert"),_je=o(" \u2014 "),z9=a("a"),bje=o("CamembertConfig"),Fje=o(" (CamemBERT model)"),vje=l(),bm=a("li"),fZ=a("strong"),Tje=o("canine"),Mje=o(" \u2014 "),Q9=a("a"),Eje=o("CanineConfig"),Cje=o(" (Canine model)"),wje=l(),Fm=a("li"),gZ=a("strong"),Aje=o("clip"),yje=o(" \u2014 "),W9=a("a"),Lje=o("CLIPConfig"),xje=o(" (CLIP model)"),$je=l(),vm=a("li"),hZ=a("strong"),kje=o("convbert"),Sje=o(" \u2014 "),H9=a("a"),Rje=o("ConvBertConfig"),Bje=o(" (ConvBERT model)"),Pje=l(),Tm=a("li"),uZ=a("strong"),Ije=o("convnext"),qje=o(" \u2014 "),U9=a("a"),Nje=o("ConvNextConfig"),jje=o(" (ConvNext model)"),Dje=l(),Mm=a("li"),pZ=a("strong"),Gje=o("ctrl"),Oje=o(" \u2014 "),J9=a("a"),Vje=o("CTRLConfig"),Xje=o(" (CTRL model)"),zje=l(),Em=a("li"),_Z=a("strong"),Qje=o("data2vec-audio"),Wje=o(" \u2014 "),Y9=a("a"),Hje=o("Data2VecAudioConfig"),Uje=o(" (Data2VecAudio model)"),Jje=l(),Cm=a("li"),bZ=a("strong"),Yje=o("data2vec-text"),Kje=o(" \u2014 "),K9=a("a"),Zje=o("Data2VecTextConfig"),eDe=o(" (Data2VecText model)"),oDe=l(),wm=a("li"),FZ=a("strong"),rDe=o("data2vec-vision"),tDe=o(" \u2014 "),Z9=a("a"),aDe=o("Data2VecVisionConfig"),nDe=o(" (Data2VecVision model)"),sDe=l(),Am=a("li"),vZ=a("strong"),lDe=o("deberta"),iDe=o(" \u2014 "),e$=a("a"),dDe=o("DebertaConfig"),cDe=o(" (DeBERTa model)"),mDe=l(),ym=a("li"),TZ=a("strong"),fDe=o("deberta-v2"),gDe=o(" \u2014 "),o$=a("a"),hDe=o("DebertaV2Config"),uDe=o(" (DeBERTa-v2 model)"),pDe=l(),Lm=a("li"),MZ=a("strong"),_De=o("decision_transformer"),bDe=o(" \u2014 "),r$=a("a"),FDe=o("DecisionTransformerConfig"),vDe=o(" (Decision Transformer model)"),TDe=l(),xm=a("li"),EZ=a("strong"),MDe=o("deit"),EDe=o(" \u2014 "),t$=a("a"),CDe=o("DeiTConfig"),wDe=o(" (DeiT model)"),ADe=l(),$m=a("li"),CZ=a("strong"),yDe=o("detr"),LDe=o(" \u2014 "),a$=a("a"),xDe=o("DetrConfig"),$De=o(" (DETR model)"),kDe=l(),km=a("li"),wZ=a("strong"),SDe=o("distilbert"),RDe=o(" \u2014 "),n$=a("a"),BDe=o("DistilBertConfig"),PDe=o(" (DistilBERT model)"),IDe=l(),Sm=a("li"),AZ=a("strong"),qDe=o("dpr"),NDe=o(" \u2014 "),s$=a("a"),jDe=o("DPRConfig"),DDe=o(" (DPR model)"),GDe=l(),Rm=a("li"),yZ=a("strong"),ODe=o("dpt"),VDe=o(" \u2014 "),l$=a("a"),XDe=o("DPTConfig"),zDe=o(" (DPT model)"),QDe=l(),Bm=a("li"),LZ=a("strong"),WDe=o("electra"),HDe=o(" \u2014 "),i$=a("a"),UDe=o("ElectraConfig"),JDe=o(" (ELECTRA model)"),YDe=l(),Pm=a("li"),xZ=a("strong"),KDe=o("encoder-decoder"),ZDe=o(" \u2014 "),d$=a("a"),eGe=o("EncoderDecoderConfig"),oGe=o(" (Encoder decoder model)"),rGe=l(),Im=a("li"),$Z=a("strong"),tGe=o("flaubert"),aGe=o(" \u2014 "),c$=a("a"),nGe=o("FlaubertConfig"),sGe=o(" (FlauBERT model)"),lGe=l(),qm=a("li"),kZ=a("strong"),iGe=o("fnet"),dGe=o(" \u2014 "),m$=a("a"),cGe=o("FNetConfig"),mGe=o(" (FNet model)"),fGe=l(),Nm=a("li"),SZ=a("strong"),gGe=o("fsmt"),hGe=o(" \u2014 "),f$=a("a"),uGe=o("FSMTConfig"),pGe=o(" (FairSeq Machine-Translation model)"),_Ge=l(),jm=a("li"),RZ=a("strong"),bGe=o("funnel"),FGe=o(" \u2014 "),g$=a("a"),vGe=o("FunnelConfig"),TGe=o(" (Funnel Transformer model)"),MGe=l(),Dm=a("li"),BZ=a("strong"),EGe=o("glpn"),CGe=o(" \u2014 "),h$=a("a"),wGe=o("GLPNConfig"),AGe=o(" (GLPN model)"),yGe=l(),Gm=a("li"),PZ=a("strong"),LGe=o("gpt2"),xGe=o(" \u2014 "),u$=a("a"),$Ge=o("GPT2Config"),kGe=o(" (OpenAI GPT-2 model)"),SGe=l(),Om=a("li"),IZ=a("strong"),RGe=o("gpt_neo"),BGe=o(" \u2014 "),p$=a("a"),PGe=o("GPTNeoConfig"),IGe=o(" (GPT Neo model)"),qGe=l(),Vm=a("li"),qZ=a("strong"),NGe=o("gptj"),jGe=o(" \u2014 "),_$=a("a"),DGe=o("GPTJConfig"),GGe=o(" (GPT-J model)"),OGe=l(),Xm=a("li"),NZ=a("strong"),VGe=o("hubert"),XGe=o(" \u2014 "),b$=a("a"),zGe=o("HubertConfig"),QGe=o(" (Hubert model)"),WGe=l(),zm=a("li"),jZ=a("strong"),HGe=o("ibert"),UGe=o(" \u2014 "),F$=a("a"),JGe=o("IBertConfig"),YGe=o(" (I-BERT model)"),KGe=l(),Qm=a("li"),DZ=a("strong"),ZGe=o("imagegpt"),eOe=o(" \u2014 "),v$=a("a"),oOe=o("ImageGPTConfig"),rOe=o(" (ImageGPT model)"),tOe=l(),Wm=a("li"),GZ=a("strong"),aOe=o("layoutlm"),nOe=o(" \u2014 "),T$=a("a"),sOe=o("LayoutLMConfig"),lOe=o(" (LayoutLM model)"),iOe=l(),Hm=a("li"),OZ=a("strong"),dOe=o("layoutlmv2"),cOe=o(" \u2014 "),M$=a("a"),mOe=o("LayoutLMv2Config"),fOe=o(" (LayoutLMv2 model)"),gOe=l(),Um=a("li"),VZ=a("strong"),hOe=o("led"),uOe=o(" \u2014 "),E$=a("a"),pOe=o("LEDConfig"),_Oe=o(" (LED model)"),bOe=l(),Jm=a("li"),XZ=a("strong"),FOe=o("longformer"),vOe=o(" \u2014 "),C$=a("a"),TOe=o("LongformerConfig"),MOe=o(" (Longformer model)"),EOe=l(),Ym=a("li"),zZ=a("strong"),COe=o("luke"),wOe=o(" \u2014 "),w$=a("a"),AOe=o("LukeConfig"),yOe=o(" (LUKE model)"),LOe=l(),Km=a("li"),QZ=a("strong"),xOe=o("lxmert"),$Oe=o(" \u2014 "),A$=a("a"),kOe=o("LxmertConfig"),SOe=o(" (LXMERT model)"),ROe=l(),Zm=a("li"),WZ=a("strong"),BOe=o("m2m_100"),POe=o(" \u2014 "),y$=a("a"),IOe=o("M2M100Config"),qOe=o(" (M2M100 model)"),NOe=l(),ef=a("li"),HZ=a("strong"),jOe=o("marian"),DOe=o(" \u2014 "),L$=a("a"),GOe=o("MarianConfig"),OOe=o(" (Marian model)"),VOe=l(),of=a("li"),UZ=a("strong"),XOe=o("maskformer"),zOe=o(" \u2014 "),x$=a("a"),QOe=o("MaskFormerConfig"),WOe=o(" (MaskFormer model)"),HOe=l(),rf=a("li"),JZ=a("strong"),UOe=o("mbart"),JOe=o(" \u2014 "),$$=a("a"),YOe=o("MBartConfig"),KOe=o(" (mBART model)"),ZOe=l(),tf=a("li"),YZ=a("strong"),eVe=o("megatron-bert"),oVe=o(" \u2014 "),k$=a("a"),rVe=o("MegatronBertConfig"),tVe=o(" (MegatronBert model)"),aVe=l(),af=a("li"),KZ=a("strong"),nVe=o("mobilebert"),sVe=o(" \u2014 "),S$=a("a"),lVe=o("MobileBertConfig"),iVe=o(" (MobileBERT model)"),dVe=l(),nf=a("li"),ZZ=a("strong"),cVe=o("mpnet"),mVe=o(" \u2014 "),R$=a("a"),fVe=o("MPNetConfig"),gVe=o(" (MPNet model)"),hVe=l(),sf=a("li"),eee=a("strong"),uVe=o("mt5"),pVe=o(" \u2014 "),B$=a("a"),_Ve=o("MT5Config"),bVe=o(" (mT5 model)"),FVe=l(),lf=a("li"),oee=a("strong"),vVe=o("nystromformer"),TVe=o(" \u2014 "),P$=a("a"),MVe=o("NystromformerConfig"),EVe=o(" (Nystromformer model)"),CVe=l(),df=a("li"),ree=a("strong"),wVe=o("openai-gpt"),AVe=o(" \u2014 "),I$=a("a"),yVe=o("OpenAIGPTConfig"),LVe=o(" (OpenAI GPT model)"),xVe=l(),cf=a("li"),tee=a("strong"),$Ve=o("pegasus"),kVe=o(" \u2014 "),q$=a("a"),SVe=o("PegasusConfig"),RVe=o(" (Pegasus model)"),BVe=l(),mf=a("li"),aee=a("strong"),PVe=o("perceiver"),IVe=o(" \u2014 "),N$=a("a"),qVe=o("PerceiverConfig"),NVe=o(" (Perceiver model)"),jVe=l(),ff=a("li"),nee=a("strong"),DVe=o("plbart"),GVe=o(" \u2014 "),j$=a("a"),OVe=o("PLBartConfig"),VVe=o(" (PLBart model)"),XVe=l(),gf=a("li"),see=a("strong"),zVe=o("poolformer"),QVe=o(" \u2014 "),D$=a("a"),WVe=o("PoolFormerConfig"),HVe=o(" (PoolFormer model)"),UVe=l(),hf=a("li"),lee=a("strong"),JVe=o("prophetnet"),YVe=o(" \u2014 "),G$=a("a"),KVe=o("ProphetNetConfig"),ZVe=o(" (ProphetNet model)"),eXe=l(),uf=a("li"),iee=a("strong"),oXe=o("qdqbert"),rXe=o(" \u2014 "),O$=a("a"),tXe=o("QDQBertConfig"),aXe=o(" (QDQBert model)"),nXe=l(),pf=a("li"),dee=a("strong"),sXe=o("rag"),lXe=o(" \u2014 "),V$=a("a"),iXe=o("RagConfig"),dXe=o(" (RAG model)"),cXe=l(),_f=a("li"),cee=a("strong"),mXe=o("realm"),fXe=o(" \u2014 "),X$=a("a"),gXe=o("RealmConfig"),hXe=o(" (Realm model)"),uXe=l(),bf=a("li"),mee=a("strong"),pXe=o("reformer"),_Xe=o(" \u2014 "),z$=a("a"),bXe=o("ReformerConfig"),FXe=o(" (Reformer model)"),vXe=l(),Ff=a("li"),fee=a("strong"),TXe=o("regnet"),MXe=o(" \u2014 "),Q$=a("a"),EXe=o("RegNetConfig"),CXe=o(" (RegNet model)"),wXe=l(),vf=a("li"),gee=a("strong"),AXe=o("rembert"),yXe=o(" \u2014 "),W$=a("a"),LXe=o("RemBertConfig"),xXe=o(" (RemBERT model)"),$Xe=l(),Tf=a("li"),hee=a("strong"),kXe=o("resnet"),SXe=o(" \u2014 "),H$=a("a"),RXe=o("ResNetConfig"),BXe=o(" (ResNet model)"),PXe=l(),Mf=a("li"),uee=a("strong"),IXe=o("retribert"),qXe=o(" \u2014 "),U$=a("a"),NXe=o("RetriBertConfig"),jXe=o(" (RetriBERT model)"),DXe=l(),Ef=a("li"),pee=a("strong"),GXe=o("roberta"),OXe=o(" \u2014 "),J$=a("a"),VXe=o("RobertaConfig"),XXe=o(" (RoBERTa model)"),zXe=l(),Cf=a("li"),_ee=a("strong"),QXe=o("roformer"),WXe=o(" \u2014 "),Y$=a("a"),HXe=o("RoFormerConfig"),UXe=o(" (RoFormer model)"),JXe=l(),wf=a("li"),bee=a("strong"),YXe=o("segformer"),KXe=o(" \u2014 "),K$=a("a"),ZXe=o("SegformerConfig"),eze=o(" (SegFormer model)"),oze=l(),Af=a("li"),Fee=a("strong"),rze=o("sew"),tze=o(" \u2014 "),Z$=a("a"),aze=o("SEWConfig"),nze=o(" (SEW model)"),sze=l(),yf=a("li"),vee=a("strong"),lze=o("sew-d"),ize=o(" \u2014 "),ek=a("a"),dze=o("SEWDConfig"),cze=o(" (SEW-D model)"),mze=l(),Lf=a("li"),Tee=a("strong"),fze=o("speech-encoder-decoder"),gze=o(" \u2014 "),ok=a("a"),hze=o("SpeechEncoderDecoderConfig"),uze=o(" (Speech Encoder decoder model)"),pze=l(),xf=a("li"),Mee=a("strong"),_ze=o("speech_to_text"),bze=o(" \u2014 "),rk=a("a"),Fze=o("Speech2TextConfig"),vze=o(" (Speech2Text model)"),Tze=l(),$f=a("li"),Eee=a("strong"),Mze=o("speech_to_text_2"),Eze=o(" \u2014 "),tk=a("a"),Cze=o("Speech2Text2Config"),wze=o(" (Speech2Text2 model)"),Aze=l(),kf=a("li"),Cee=a("strong"),yze=o("splinter"),Lze=o(" \u2014 "),ak=a("a"),xze=o("SplinterConfig"),$ze=o(" (Splinter model)"),kze=l(),Sf=a("li"),wee=a("strong"),Sze=o("squeezebert"),Rze=o(" \u2014 "),nk=a("a"),Bze=o("SqueezeBertConfig"),Pze=o(" (SqueezeBERT model)"),Ize=l(),Rf=a("li"),Aee=a("strong"),qze=o("swin"),Nze=o(" \u2014 "),sk=a("a"),jze=o("SwinConfig"),Dze=o(" (Swin model)"),Gze=l(),Bf=a("li"),yee=a("strong"),Oze=o("t5"),Vze=o(" \u2014 "),lk=a("a"),Xze=o("T5Config"),zze=o(" (T5 model)"),Qze=l(),Pf=a("li"),Lee=a("strong"),Wze=o("tapas"),Hze=o(" \u2014 "),ik=a("a"),Uze=o("TapasConfig"),Jze=o(" (TAPAS model)"),Yze=l(),If=a("li"),xee=a("strong"),Kze=o("tapex"),Zze=o(" \u2014 "),dk=a("a"),eQe=o("BartConfig"),oQe=o(" (TAPEX model)"),rQe=l(),qf=a("li"),$ee=a("strong"),tQe=o("transfo-xl"),aQe=o(" \u2014 "),ck=a("a"),nQe=o("TransfoXLConfig"),sQe=o(" (Transformer-XL model)"),lQe=l(),Nf=a("li"),kee=a("strong"),iQe=o("trocr"),dQe=o(" \u2014 "),mk=a("a"),cQe=o("TrOCRConfig"),mQe=o(" (TrOCR model)"),fQe=l(),jf=a("li"),See=a("strong"),gQe=o("unispeech"),hQe=o(" \u2014 "),fk=a("a"),uQe=o("UniSpeechConfig"),pQe=o(" (UniSpeech model)"),_Qe=l(),Df=a("li"),Ree=a("strong"),bQe=o("unispeech-sat"),FQe=o(" \u2014 "),gk=a("a"),vQe=o("UniSpeechSatConfig"),TQe=o(" (UniSpeechSat model)"),MQe=l(),Gf=a("li"),Bee=a("strong"),EQe=o("van"),CQe=o(" \u2014 "),hk=a("a"),wQe=o("VanConfig"),AQe=o(" (VAN model)"),yQe=l(),Of=a("li"),Pee=a("strong"),LQe=o("vilt"),xQe=o(" \u2014 "),uk=a("a"),$Qe=o("ViltConfig"),kQe=o(" (ViLT model)"),SQe=l(),Vf=a("li"),Iee=a("strong"),RQe=o("vision-encoder-decoder"),BQe=o(" \u2014 "),pk=a("a"),PQe=o("VisionEncoderDecoderConfig"),IQe=o(" (Vision Encoder decoder model)"),qQe=l(),Xf=a("li"),qee=a("strong"),NQe=o("vision-text-dual-encoder"),jQe=o(" \u2014 "),_k=a("a"),DQe=o("VisionTextDualEncoderConfig"),GQe=o(" (VisionTextDualEncoder model)"),OQe=l(),zf=a("li"),Nee=a("strong"),VQe=o("visual_bert"),XQe=o(" \u2014 "),bk=a("a"),zQe=o("VisualBertConfig"),QQe=o(" (VisualBert model)"),WQe=l(),Qf=a("li"),jee=a("strong"),HQe=o("vit"),UQe=o(" \u2014 "),Fk=a("a"),JQe=o("ViTConfig"),YQe=o(" (ViT model)"),KQe=l(),Wf=a("li"),Dee=a("strong"),ZQe=o("vit_mae"),eWe=o(" \u2014 "),vk=a("a"),oWe=o("ViTMAEConfig"),rWe=o(" (ViTMAE model)"),tWe=l(),Hf=a("li"),Gee=a("strong"),aWe=o("wav2vec2"),nWe=o(" \u2014 "),Tk=a("a"),sWe=o("Wav2Vec2Config"),lWe=o(" (Wav2Vec2 model)"),iWe=l(),Uf=a("li"),Oee=a("strong"),dWe=o("wavlm"),cWe=o(" \u2014 "),Mk=a("a"),mWe=o("WavLMConfig"),fWe=o(" (WavLM model)"),gWe=l(),Jf=a("li"),Vee=a("strong"),hWe=o("xglm"),uWe=o(" \u2014 "),Ek=a("a"),pWe=o("XGLMConfig"),_We=o(" (XGLM model)"),bWe=l(),Yf=a("li"),Xee=a("strong"),FWe=o("xlm"),vWe=o(" \u2014 "),Ck=a("a"),TWe=o("XLMConfig"),MWe=o(" (XLM model)"),EWe=l(),Kf=a("li"),zee=a("strong"),CWe=o("xlm-prophetnet"),wWe=o(" \u2014 "),wk=a("a"),AWe=o("XLMProphetNetConfig"),yWe=o(" (XLMProphetNet model)"),LWe=l(),Zf=a("li"),Qee=a("strong"),xWe=o("xlm-roberta"),$We=o(" \u2014 "),Ak=a("a"),kWe=o("XLMRobertaConfig"),SWe=o(" (XLM-RoBERTa model)"),RWe=l(),eg=a("li"),Wee=a("strong"),BWe=o("xlm-roberta-xl"),PWe=o(" \u2014 "),yk=a("a"),IWe=o("XLMRobertaXLConfig"),qWe=o(" (XLM-RoBERTa-XL model)"),NWe=l(),og=a("li"),Hee=a("strong"),jWe=o("xlnet"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("XLNetConfig"),OWe=o(" (XLNet model)"),VWe=l(),rg=a("li"),Uee=a("strong"),XWe=o("yolos"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("YolosConfig"),WWe=o(" (YOLOS model)"),HWe=l(),tg=a("li"),Jee=a("strong"),UWe=o("yoso"),JWe=o(" \u2014 "),$k=a("a"),YWe=o("YosoConfig"),KWe=o(" (YOSO model)"),ZWe=l(),v(ag.$$.fragment),eHe=l(),ng=a("div"),v(C6.$$.fragment),oHe=l(),Yee=a("p"),rHe=o("Register a new configuration for this class."),JRe=l(),mi=a("h2"),sg=a("a"),Kee=a("span"),v(w6.$$.fragment),tHe=l(),Zee=a("span"),aHe=o("AutoTokenizer"),YRe=l(),Eo=a("div"),v(A6.$$.fragment),nHe=l(),y6=a("p"),sHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=a("a"),lHe=o("AutoTokenizer.from_pretrained()"),iHe=o(" class method."),dHe=l(),L6=a("p"),cHe=o("This class cannot be instantiated directly using "),eoe=a("code"),mHe=o("__init__()"),fHe=o(" (throws an error)."),gHe=l(),Tr=a("div"),v(x6.$$.fragment),hHe=l(),ooe=a("p"),uHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pHe=l(),va=a("p"),_He=o("The tokenizer class to instantiate is selected based on the "),roe=a("code"),bHe=o("model_type"),FHe=o(` property of the config object (either
passed as an argument or loaded from `),toe=a("code"),vHe=o("pretrained_model_name_or_path"),THe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aoe=a("code"),MHe=o("pretrained_model_name_or_path"),EHe=o(":"),CHe=l(),k=a("ul"),An=a("li"),noe=a("strong"),wHe=o("albert"),AHe=o(" \u2014 "),Sk=a("a"),yHe=o("AlbertTokenizer"),LHe=o(" or "),Rk=a("a"),xHe=o("AlbertTokenizerFast"),$He=o(" (ALBERT model)"),kHe=l(),yn=a("li"),soe=a("strong"),SHe=o("bart"),RHe=o(" \u2014 "),Bk=a("a"),BHe=o("BartTokenizer"),PHe=o(" or "),Pk=a("a"),IHe=o("BartTokenizerFast"),qHe=o(" (BART model)"),NHe=l(),Ln=a("li"),loe=a("strong"),jHe=o("barthez"),DHe=o(" \u2014 "),Ik=a("a"),GHe=o("BarthezTokenizer"),OHe=o(" or "),qk=a("a"),VHe=o("BarthezTokenizerFast"),XHe=o(" (BARThez model)"),zHe=l(),lg=a("li"),ioe=a("strong"),QHe=o("bartpho"),WHe=o(" \u2014 "),Nk=a("a"),HHe=o("BartphoTokenizer"),UHe=o(" (BARTpho model)"),JHe=l(),xn=a("li"),doe=a("strong"),YHe=o("bert"),KHe=o(" \u2014 "),jk=a("a"),ZHe=o("BertTokenizer"),eUe=o(" or "),Dk=a("a"),oUe=o("BertTokenizerFast"),rUe=o(" (BERT model)"),tUe=l(),ig=a("li"),coe=a("strong"),aUe=o("bert-generation"),nUe=o(" \u2014 "),Gk=a("a"),sUe=o("BertGenerationTokenizer"),lUe=o(" (Bert Generation model)"),iUe=l(),dg=a("li"),moe=a("strong"),dUe=o("bert-japanese"),cUe=o(" \u2014 "),Ok=a("a"),mUe=o("BertJapaneseTokenizer"),fUe=o(" (BertJapanese model)"),gUe=l(),cg=a("li"),foe=a("strong"),hUe=o("bertweet"),uUe=o(" \u2014 "),Vk=a("a"),pUe=o("BertweetTokenizer"),_Ue=o(" (Bertweet model)"),bUe=l(),$n=a("li"),goe=a("strong"),FUe=o("big_bird"),vUe=o(" \u2014 "),Xk=a("a"),TUe=o("BigBirdTokenizer"),MUe=o(" or "),zk=a("a"),EUe=o("BigBirdTokenizerFast"),CUe=o(" (BigBird model)"),wUe=l(),kn=a("li"),hoe=a("strong"),AUe=o("bigbird_pegasus"),yUe=o(" \u2014 "),Qk=a("a"),LUe=o("PegasusTokenizer"),xUe=o(" or "),Wk=a("a"),$Ue=o("PegasusTokenizerFast"),kUe=o(" (BigBirdPegasus model)"),SUe=l(),Sn=a("li"),uoe=a("strong"),RUe=o("blenderbot"),BUe=o(" \u2014 "),Hk=a("a"),PUe=o("BlenderbotTokenizer"),IUe=o(" or "),Uk=a("a"),qUe=o("BlenderbotTokenizerFast"),NUe=o(" (Blenderbot model)"),jUe=l(),mg=a("li"),poe=a("strong"),DUe=o("blenderbot-small"),GUe=o(" \u2014 "),Jk=a("a"),OUe=o("BlenderbotSmallTokenizer"),VUe=o(" (BlenderbotSmall model)"),XUe=l(),fg=a("li"),_oe=a("strong"),zUe=o("byt5"),QUe=o(" \u2014 "),Yk=a("a"),WUe=o("ByT5Tokenizer"),HUe=o(" (ByT5 model)"),UUe=l(),Rn=a("li"),boe=a("strong"),JUe=o("camembert"),YUe=o(" \u2014 "),Kk=a("a"),KUe=o("CamembertTokenizer"),ZUe=o(" or "),Zk=a("a"),eJe=o("CamembertTokenizerFast"),oJe=o(" (CamemBERT model)"),rJe=l(),gg=a("li"),Foe=a("strong"),tJe=o("canine"),aJe=o(" \u2014 "),eS=a("a"),nJe=o("CanineTokenizer"),sJe=o(" (Canine model)"),lJe=l(),Bn=a("li"),voe=a("strong"),iJe=o("clip"),dJe=o(" \u2014 "),oS=a("a"),cJe=o("CLIPTokenizer"),mJe=o(" or "),rS=a("a"),fJe=o("CLIPTokenizerFast"),gJe=o(" (CLIP model)"),hJe=l(),Pn=a("li"),Toe=a("strong"),uJe=o("convbert"),pJe=o(" \u2014 "),tS=a("a"),_Je=o("ConvBertTokenizer"),bJe=o(" or "),aS=a("a"),FJe=o("ConvBertTokenizerFast"),vJe=o(" (ConvBERT model)"),TJe=l(),In=a("li"),Moe=a("strong"),MJe=o("cpm"),EJe=o(" \u2014 "),nS=a("a"),CJe=o("CpmTokenizer"),wJe=o(" or "),sS=a("a"),AJe=o("CpmTokenizerFast"),yJe=o(" (CPM model)"),LJe=l(),hg=a("li"),Eoe=a("strong"),xJe=o("ctrl"),$Je=o(" \u2014 "),lS=a("a"),kJe=o("CTRLTokenizer"),SJe=o(" (CTRL model)"),RJe=l(),qn=a("li"),Coe=a("strong"),BJe=o("data2vec-text"),PJe=o(" \u2014 "),iS=a("a"),IJe=o("RobertaTokenizer"),qJe=o(" or "),dS=a("a"),NJe=o("RobertaTokenizerFast"),jJe=o(" (Data2VecText model)"),DJe=l(),Nn=a("li"),woe=a("strong"),GJe=o("deberta"),OJe=o(" \u2014 "),cS=a("a"),VJe=o("DebertaTokenizer"),XJe=o(" or "),mS=a("a"),zJe=o("DebertaTokenizerFast"),QJe=o(" (DeBERTa model)"),WJe=l(),jn=a("li"),Aoe=a("strong"),HJe=o("deberta-v2"),UJe=o(" \u2014 "),fS=a("a"),JJe=o("DebertaV2Tokenizer"),YJe=o(" or "),gS=a("a"),KJe=o("DebertaV2TokenizerFast"),ZJe=o(" (DeBERTa-v2 model)"),eYe=l(),Dn=a("li"),yoe=a("strong"),oYe=o("distilbert"),rYe=o(" \u2014 "),hS=a("a"),tYe=o("DistilBertTokenizer"),aYe=o(" or "),uS=a("a"),nYe=o("DistilBertTokenizerFast"),sYe=o(" (DistilBERT model)"),lYe=l(),Gn=a("li"),Loe=a("strong"),iYe=o("dpr"),dYe=o(" \u2014 "),pS=a("a"),cYe=o("DPRQuestionEncoderTokenizer"),mYe=o(" or "),_S=a("a"),fYe=o("DPRQuestionEncoderTokenizerFast"),gYe=o(" (DPR model)"),hYe=l(),On=a("li"),xoe=a("strong"),uYe=o("electra"),pYe=o(" \u2014 "),bS=a("a"),_Ye=o("ElectraTokenizer"),bYe=o(" or "),FS=a("a"),FYe=o("ElectraTokenizerFast"),vYe=o(" (ELECTRA model)"),TYe=l(),ug=a("li"),$oe=a("strong"),MYe=o("flaubert"),EYe=o(" \u2014 "),vS=a("a"),CYe=o("FlaubertTokenizer"),wYe=o(" (FlauBERT model)"),AYe=l(),Vn=a("li"),koe=a("strong"),yYe=o("fnet"),LYe=o(" \u2014 "),TS=a("a"),xYe=o("FNetTokenizer"),$Ye=o(" or "),MS=a("a"),kYe=o("FNetTokenizerFast"),SYe=o(" (FNet model)"),RYe=l(),pg=a("li"),Soe=a("strong"),BYe=o("fsmt"),PYe=o(" \u2014 "),ES=a("a"),IYe=o("FSMTTokenizer"),qYe=o(" (FairSeq Machine-Translation model)"),NYe=l(),Xn=a("li"),Roe=a("strong"),jYe=o("funnel"),DYe=o(" \u2014 "),CS=a("a"),GYe=o("FunnelTokenizer"),OYe=o(" or "),wS=a("a"),VYe=o("FunnelTokenizerFast"),XYe=o(" (Funnel Transformer model)"),zYe=l(),zn=a("li"),Boe=a("strong"),QYe=o("gpt2"),WYe=o(" \u2014 "),AS=a("a"),HYe=o("GPT2Tokenizer"),UYe=o(" or "),yS=a("a"),JYe=o("GPT2TokenizerFast"),YYe=o(" (OpenAI GPT-2 model)"),KYe=l(),Qn=a("li"),Poe=a("strong"),ZYe=o("gpt_neo"),eKe=o(" \u2014 "),LS=a("a"),oKe=o("GPT2Tokenizer"),rKe=o(" or "),xS=a("a"),tKe=o("GPT2TokenizerFast"),aKe=o(" (GPT Neo model)"),nKe=l(),Wn=a("li"),Ioe=a("strong"),sKe=o("gptj"),lKe=o(" \u2014 "),$S=a("a"),iKe=o("GPT2Tokenizer"),dKe=o(" or "),kS=a("a"),cKe=o("GPT2TokenizerFast"),mKe=o(" (GPT-J model)"),fKe=l(),Hn=a("li"),qoe=a("strong"),gKe=o("herbert"),hKe=o(" \u2014 "),SS=a("a"),uKe=o("HerbertTokenizer"),pKe=o(" or "),RS=a("a"),_Ke=o("HerbertTokenizerFast"),bKe=o(" (HerBERT model)"),FKe=l(),_g=a("li"),Noe=a("strong"),vKe=o("hubert"),TKe=o(" \u2014 "),BS=a("a"),MKe=o("Wav2Vec2CTCTokenizer"),EKe=o(" (Hubert model)"),CKe=l(),Un=a("li"),joe=a("strong"),wKe=o("ibert"),AKe=o(" \u2014 "),PS=a("a"),yKe=o("RobertaTokenizer"),LKe=o(" or "),IS=a("a"),xKe=o("RobertaTokenizerFast"),$Ke=o(" (I-BERT model)"),kKe=l(),Jn=a("li"),Doe=a("strong"),SKe=o("layoutlm"),RKe=o(" \u2014 "),qS=a("a"),BKe=o("LayoutLMTokenizer"),PKe=o(" or "),NS=a("a"),IKe=o("LayoutLMTokenizerFast"),qKe=o(" (LayoutLM model)"),NKe=l(),Yn=a("li"),Goe=a("strong"),jKe=o("layoutlmv2"),DKe=o(" \u2014 "),jS=a("a"),GKe=o("LayoutLMv2Tokenizer"),OKe=o(" or "),DS=a("a"),VKe=o("LayoutLMv2TokenizerFast"),XKe=o(" (LayoutLMv2 model)"),zKe=l(),Kn=a("li"),Ooe=a("strong"),QKe=o("layoutxlm"),WKe=o(" \u2014 "),GS=a("a"),HKe=o("LayoutXLMTokenizer"),UKe=o(" or "),OS=a("a"),JKe=o("LayoutXLMTokenizerFast"),YKe=o(" (LayoutXLM model)"),KKe=l(),Zn=a("li"),Voe=a("strong"),ZKe=o("led"),eZe=o(" \u2014 "),VS=a("a"),oZe=o("LEDTokenizer"),rZe=o(" or "),XS=a("a"),tZe=o("LEDTokenizerFast"),aZe=o(" (LED model)"),nZe=l(),es=a("li"),Xoe=a("strong"),sZe=o("longformer"),lZe=o(" \u2014 "),zS=a("a"),iZe=o("LongformerTokenizer"),dZe=o(" or "),QS=a("a"),cZe=o("LongformerTokenizerFast"),mZe=o(" (Longformer model)"),fZe=l(),bg=a("li"),zoe=a("strong"),gZe=o("luke"),hZe=o(" \u2014 "),WS=a("a"),uZe=o("LukeTokenizer"),pZe=o(" (LUKE model)"),_Ze=l(),os=a("li"),Qoe=a("strong"),bZe=o("lxmert"),FZe=o(" \u2014 "),HS=a("a"),vZe=o("LxmertTokenizer"),TZe=o(" or "),US=a("a"),MZe=o("LxmertTokenizerFast"),EZe=o(" (LXMERT model)"),CZe=l(),Fg=a("li"),Woe=a("strong"),wZe=o("m2m_100"),AZe=o(" \u2014 "),JS=a("a"),yZe=o("M2M100Tokenizer"),LZe=o(" (M2M100 model)"),xZe=l(),vg=a("li"),Hoe=a("strong"),$Ze=o("marian"),kZe=o(" \u2014 "),YS=a("a"),SZe=o("MarianTokenizer"),RZe=o(" (Marian model)"),BZe=l(),rs=a("li"),Uoe=a("strong"),PZe=o("mbart"),IZe=o(" \u2014 "),KS=a("a"),qZe=o("MBartTokenizer"),NZe=o(" or "),ZS=a("a"),jZe=o("MBartTokenizerFast"),DZe=o(" (mBART model)"),GZe=l(),ts=a("li"),Joe=a("strong"),OZe=o("mbart50"),VZe=o(" \u2014 "),eR=a("a"),XZe=o("MBart50Tokenizer"),zZe=o(" or "),oR=a("a"),QZe=o("MBart50TokenizerFast"),WZe=o(" (mBART-50 model)"),HZe=l(),as=a("li"),Yoe=a("strong"),UZe=o("megatron-bert"),JZe=o(" \u2014 "),rR=a("a"),YZe=o("BertTokenizer"),KZe=o(" or "),tR=a("a"),ZZe=o("BertTokenizerFast"),eeo=o(" (MegatronBert model)"),oeo=l(),Tg=a("li"),Koe=a("strong"),reo=o("mluke"),teo=o(" \u2014 "),aR=a("a"),aeo=o("MLukeTokenizer"),neo=o(" (mLUKE model)"),seo=l(),ns=a("li"),Zoe=a("strong"),leo=o("mobilebert"),ieo=o(" \u2014 "),nR=a("a"),deo=o("MobileBertTokenizer"),ceo=o(" or "),sR=a("a"),meo=o("MobileBertTokenizerFast"),feo=o(" (MobileBERT model)"),geo=l(),ss=a("li"),ere=a("strong"),heo=o("mpnet"),ueo=o(" \u2014 "),lR=a("a"),peo=o("MPNetTokenizer"),_eo=o(" or "),iR=a("a"),beo=o("MPNetTokenizerFast"),Feo=o(" (MPNet model)"),veo=l(),ls=a("li"),ore=a("strong"),Teo=o("mt5"),Meo=o(" \u2014 "),dR=a("a"),Eeo=o("MT5Tokenizer"),Ceo=o(" or "),cR=a("a"),weo=o("MT5TokenizerFast"),Aeo=o(" (mT5 model)"),yeo=l(),is=a("li"),rre=a("strong"),Leo=o("nystromformer"),xeo=o(" \u2014 "),mR=a("a"),$eo=o("AlbertTokenizer"),keo=o(" or "),fR=a("a"),Seo=o("AlbertTokenizerFast"),Reo=o(" (Nystromformer model)"),Beo=l(),ds=a("li"),tre=a("strong"),Peo=o("openai-gpt"),Ieo=o(" \u2014 "),gR=a("a"),qeo=o("OpenAIGPTTokenizer"),Neo=o(" or "),hR=a("a"),jeo=o("OpenAIGPTTokenizerFast"),Deo=o(" (OpenAI GPT model)"),Geo=l(),cs=a("li"),are=a("strong"),Oeo=o("pegasus"),Veo=o(" \u2014 "),uR=a("a"),Xeo=o("PegasusTokenizer"),zeo=o(" or "),pR=a("a"),Qeo=o("PegasusTokenizerFast"),Weo=o(" (Pegasus model)"),Heo=l(),Mg=a("li"),nre=a("strong"),Ueo=o("perceiver"),Jeo=o(" \u2014 "),_R=a("a"),Yeo=o("PerceiverTokenizer"),Keo=o(" (Perceiver model)"),Zeo=l(),Eg=a("li"),sre=a("strong"),eoo=o("phobert"),ooo=o(" \u2014 "),bR=a("a"),roo=o("PhobertTokenizer"),too=o(" (PhoBERT model)"),aoo=l(),Cg=a("li"),lre=a("strong"),noo=o("plbart"),soo=o(" \u2014 "),FR=a("a"),loo=o("PLBartTokenizer"),ioo=o(" (PLBart model)"),doo=l(),wg=a("li"),ire=a("strong"),coo=o("prophetnet"),moo=o(" \u2014 "),vR=a("a"),foo=o("ProphetNetTokenizer"),goo=o(" (ProphetNet model)"),hoo=l(),ms=a("li"),dre=a("strong"),uoo=o("qdqbert"),poo=o(" \u2014 "),TR=a("a"),_oo=o("BertTokenizer"),boo=o(" or "),MR=a("a"),Foo=o("BertTokenizerFast"),voo=o(" (QDQBert model)"),Too=l(),Ag=a("li"),cre=a("strong"),Moo=o("rag"),Eoo=o(" \u2014 "),ER=a("a"),Coo=o("RagTokenizer"),woo=o(" (RAG model)"),Aoo=l(),fs=a("li"),mre=a("strong"),yoo=o("realm"),Loo=o(" \u2014 "),CR=a("a"),xoo=o("RealmTokenizer"),$oo=o(" or "),wR=a("a"),koo=o("RealmTokenizerFast"),Soo=o(" (Realm model)"),Roo=l(),gs=a("li"),fre=a("strong"),Boo=o("reformer"),Poo=o(" \u2014 "),AR=a("a"),Ioo=o("ReformerTokenizer"),qoo=o(" or "),yR=a("a"),Noo=o("ReformerTokenizerFast"),joo=o(" (Reformer model)"),Doo=l(),hs=a("li"),gre=a("strong"),Goo=o("rembert"),Ooo=o(" \u2014 "),LR=a("a"),Voo=o("RemBertTokenizer"),Xoo=o(" or "),xR=a("a"),zoo=o("RemBertTokenizerFast"),Qoo=o(" (RemBERT model)"),Woo=l(),us=a("li"),hre=a("strong"),Hoo=o("retribert"),Uoo=o(" \u2014 "),$R=a("a"),Joo=o("RetriBertTokenizer"),Yoo=o(" or "),kR=a("a"),Koo=o("RetriBertTokenizerFast"),Zoo=o(" (RetriBERT model)"),ero=l(),ps=a("li"),ure=a("strong"),oro=o("roberta"),rro=o(" \u2014 "),SR=a("a"),tro=o("RobertaTokenizer"),aro=o(" or "),RR=a("a"),nro=o("RobertaTokenizerFast"),sro=o(" (RoBERTa model)"),lro=l(),_s=a("li"),pre=a("strong"),iro=o("roformer"),dro=o(" \u2014 "),BR=a("a"),cro=o("RoFormerTokenizer"),mro=o(" or "),PR=a("a"),fro=o("RoFormerTokenizerFast"),gro=o(" (RoFormer model)"),hro=l(),yg=a("li"),_re=a("strong"),uro=o("speech_to_text"),pro=o(" \u2014 "),IR=a("a"),_ro=o("Speech2TextTokenizer"),bro=o(" (Speech2Text model)"),Fro=l(),Lg=a("li"),bre=a("strong"),vro=o("speech_to_text_2"),Tro=o(" \u2014 "),qR=a("a"),Mro=o("Speech2Text2Tokenizer"),Ero=o(" (Speech2Text2 model)"),Cro=l(),bs=a("li"),Fre=a("strong"),wro=o("splinter"),Aro=o(" \u2014 "),NR=a("a"),yro=o("SplinterTokenizer"),Lro=o(" or "),jR=a("a"),xro=o("SplinterTokenizerFast"),$ro=o(" (Splinter model)"),kro=l(),Fs=a("li"),vre=a("strong"),Sro=o("squeezebert"),Rro=o(" \u2014 "),DR=a("a"),Bro=o("SqueezeBertTokenizer"),Pro=o(" or "),GR=a("a"),Iro=o("SqueezeBertTokenizerFast"),qro=o(" (SqueezeBERT model)"),Nro=l(),vs=a("li"),Tre=a("strong"),jro=o("t5"),Dro=o(" \u2014 "),OR=a("a"),Gro=o("T5Tokenizer"),Oro=o(" or "),VR=a("a"),Vro=o("T5TokenizerFast"),Xro=o(" (T5 model)"),zro=l(),xg=a("li"),Mre=a("strong"),Qro=o("tapas"),Wro=o(" \u2014 "),XR=a("a"),Hro=o("TapasTokenizer"),Uro=o(" (TAPAS model)"),Jro=l(),$g=a("li"),Ere=a("strong"),Yro=o("tapex"),Kro=o(" \u2014 "),zR=a("a"),Zro=o("TapexTokenizer"),eto=o(" (TAPEX model)"),oto=l(),kg=a("li"),Cre=a("strong"),rto=o("transfo-xl"),tto=o(" \u2014 "),QR=a("a"),ato=o("TransfoXLTokenizer"),nto=o(" (Transformer-XL model)"),sto=l(),Ts=a("li"),wre=a("strong"),lto=o("visual_bert"),ito=o(" \u2014 "),WR=a("a"),dto=o("BertTokenizer"),cto=o(" or "),HR=a("a"),mto=o("BertTokenizerFast"),fto=o(" (VisualBert model)"),gto=l(),Sg=a("li"),Are=a("strong"),hto=o("wav2vec2"),uto=o(" \u2014 "),UR=a("a"),pto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Wav2Vec2 model)"),bto=l(),Rg=a("li"),yre=a("strong"),Fto=o("wav2vec2_phoneme"),vto=o(" \u2014 "),JR=a("a"),Tto=o("Wav2Vec2PhonemeCTCTokenizer"),Mto=o(" (Wav2Vec2Phoneme model)"),Eto=l(),Ms=a("li"),Lre=a("strong"),Cto=o("xglm"),wto=o(" \u2014 "),YR=a("a"),Ato=o("XGLMTokenizer"),yto=o(" or "),KR=a("a"),Lto=o("XGLMTokenizerFast"),xto=o(" (XGLM model)"),$to=l(),Bg=a("li"),xre=a("strong"),kto=o("xlm"),Sto=o(" \u2014 "),ZR=a("a"),Rto=o("XLMTokenizer"),Bto=o(" (XLM model)"),Pto=l(),Pg=a("li"),$re=a("strong"),Ito=o("xlm-prophetnet"),qto=o(" \u2014 "),eB=a("a"),Nto=o("XLMProphetNetTokenizer"),jto=o(" (XLMProphetNet model)"),Dto=l(),Es=a("li"),kre=a("strong"),Gto=o("xlm-roberta"),Oto=o(" \u2014 "),oB=a("a"),Vto=o("XLMRobertaTokenizer"),Xto=o(" or "),rB=a("a"),zto=o("XLMRobertaTokenizerFast"),Qto=o(" (XLM-RoBERTa model)"),Wto=l(),Cs=a("li"),Sre=a("strong"),Hto=o("xlm-roberta-xl"),Uto=o(" \u2014 "),tB=a("a"),Jto=o("RobertaTokenizer"),Yto=o(" or "),aB=a("a"),Kto=o("RobertaTokenizerFast"),Zto=o(" (XLM-RoBERTa-XL model)"),eao=l(),ws=a("li"),Rre=a("strong"),oao=o("xlnet"),rao=o(" \u2014 "),nB=a("a"),tao=o("XLNetTokenizer"),aao=o(" or "),sB=a("a"),nao=o("XLNetTokenizerFast"),sao=o(" (XLNet model)"),lao=l(),As=a("li"),Bre=a("strong"),iao=o("yoso"),dao=o(" \u2014 "),lB=a("a"),cao=o("AlbertTokenizer"),mao=o(" or "),iB=a("a"),fao=o("AlbertTokenizerFast"),gao=o(" (YOSO model)"),hao=l(),v(Ig.$$.fragment),uao=l(),qg=a("div"),v($6.$$.fragment),pao=l(),Pre=a("p"),_ao=o("Register a new tokenizer in this mapping."),KRe=l(),fi=a("h2"),Ng=a("a"),Ire=a("span"),v(k6.$$.fragment),bao=l(),qre=a("span"),Fao=o("AutoFeatureExtractor"),ZRe=l(),Co=a("div"),v(S6.$$.fragment),vao=l(),R6=a("p"),Tao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=a("a"),Mao=o("AutoFeatureExtractor.from_pretrained()"),Eao=o(" class method."),Cao=l(),B6=a("p"),wao=o("This class cannot be instantiated directly using "),Nre=a("code"),Aao=o("__init__()"),yao=o(" (throws an error)."),Lao=l(),Xe=a("div"),v(P6.$$.fragment),xao=l(),jre=a("p"),$ao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kao=l(),Ta=a("p"),Sao=o("The feature extractor class to instantiate is selected based on the "),Dre=a("code"),Rao=o("model_type"),Bao=o(` property of the config object
(either passed as an argument or loaded from `),Gre=a("code"),Pao=o("pretrained_model_name_or_path"),Iao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=a("code"),qao=o("pretrained_model_name_or_path"),Nao=o(":"),jao=l(),te=a("ul"),jg=a("li"),Vre=a("strong"),Dao=o("beit"),Gao=o(" \u2014 "),cB=a("a"),Oao=o("BeitFeatureExtractor"),Vao=o(" (BEiT model)"),Xao=l(),Dg=a("li"),Xre=a("strong"),zao=o("clip"),Qao=o(" \u2014 "),mB=a("a"),Wao=o("CLIPFeatureExtractor"),Hao=o(" (CLIP model)"),Uao=l(),Gg=a("li"),zre=a("strong"),Jao=o("convnext"),Yao=o(" \u2014 "),fB=a("a"),Kao=o("ConvNextFeatureExtractor"),Zao=o(" (ConvNext model)"),eno=l(),Og=a("li"),Qre=a("strong"),ono=o("data2vec-audio"),rno=o(" \u2014 "),gB=a("a"),tno=o("Wav2Vec2FeatureExtractor"),ano=o(" (Data2VecAudio model)"),nno=l(),Vg=a("li"),Wre=a("strong"),sno=o("data2vec-vision"),lno=o(" \u2014 "),hB=a("a"),ino=o("BeitFeatureExtractor"),dno=o(" (Data2VecVision model)"),cno=l(),Xg=a("li"),Hre=a("strong"),mno=o("deit"),fno=o(" \u2014 "),uB=a("a"),gno=o("DeiTFeatureExtractor"),hno=o(" (DeiT model)"),uno=l(),zg=a("li"),Ure=a("strong"),pno=o("detr"),_no=o(" \u2014 "),pB=a("a"),bno=o("DetrFeatureExtractor"),Fno=o(" (DETR model)"),vno=l(),Qg=a("li"),Jre=a("strong"),Tno=o("dpt"),Mno=o(" \u2014 "),_B=a("a"),Eno=o("DPTFeatureExtractor"),Cno=o(" (DPT model)"),wno=l(),Wg=a("li"),Yre=a("strong"),Ano=o("glpn"),yno=o(" \u2014 "),bB=a("a"),Lno=o("GLPNFeatureExtractor"),xno=o(" (GLPN model)"),$no=l(),Hg=a("li"),Kre=a("strong"),kno=o("hubert"),Sno=o(" \u2014 "),FB=a("a"),Rno=o("Wav2Vec2FeatureExtractor"),Bno=o(" (Hubert model)"),Pno=l(),Ug=a("li"),Zre=a("strong"),Ino=o("layoutlmv2"),qno=o(" \u2014 "),vB=a("a"),Nno=o("LayoutLMv2FeatureExtractor"),jno=o(" (LayoutLMv2 model)"),Dno=l(),Jg=a("li"),ete=a("strong"),Gno=o("maskformer"),Ono=o(" \u2014 "),TB=a("a"),Vno=o("MaskFormerFeatureExtractor"),Xno=o(" (MaskFormer model)"),zno=l(),Yg=a("li"),ote=a("strong"),Qno=o("perceiver"),Wno=o(" \u2014 "),MB=a("a"),Hno=o("PerceiverFeatureExtractor"),Uno=o(" (Perceiver model)"),Jno=l(),Kg=a("li"),rte=a("strong"),Yno=o("poolformer"),Kno=o(" \u2014 "),EB=a("a"),Zno=o("PoolFormerFeatureExtractor"),eso=o(" (PoolFormer model)"),oso=l(),Zg=a("li"),tte=a("strong"),rso=o("regnet"),tso=o(" \u2014 "),CB=a("a"),aso=o("ConvNextFeatureExtractor"),nso=o(" (RegNet model)"),sso=l(),eh=a("li"),ate=a("strong"),lso=o("resnet"),iso=o(" \u2014 "),wB=a("a"),dso=o("ConvNextFeatureExtractor"),cso=o(" (ResNet model)"),mso=l(),oh=a("li"),nte=a("strong"),fso=o("segformer"),gso=o(" \u2014 "),AB=a("a"),hso=o("SegformerFeatureExtractor"),uso=o(" (SegFormer model)"),pso=l(),rh=a("li"),ste=a("strong"),_so=o("speech_to_text"),bso=o(" \u2014 "),yB=a("a"),Fso=o("Speech2TextFeatureExtractor"),vso=o(" (Speech2Text model)"),Tso=l(),th=a("li"),lte=a("strong"),Mso=o("swin"),Eso=o(" \u2014 "),LB=a("a"),Cso=o("ViTFeatureExtractor"),wso=o(" (Swin model)"),Aso=l(),ah=a("li"),ite=a("strong"),yso=o("van"),Lso=o(" \u2014 "),xB=a("a"),xso=o("ConvNextFeatureExtractor"),$so=o(" (VAN model)"),kso=l(),nh=a("li"),dte=a("strong"),Sso=o("vit"),Rso=o(" \u2014 "),$B=a("a"),Bso=o("ViTFeatureExtractor"),Pso=o(" (ViT model)"),Iso=l(),sh=a("li"),cte=a("strong"),qso=o("vit_mae"),Nso=o(" \u2014 "),kB=a("a"),jso=o("ViTFeatureExtractor"),Dso=o(" (ViTMAE model)"),Gso=l(),lh=a("li"),mte=a("strong"),Oso=o("wav2vec2"),Vso=o(" \u2014 "),SB=a("a"),Xso=o("Wav2Vec2FeatureExtractor"),zso=o(" (Wav2Vec2 model)"),Qso=l(),ih=a("li"),fte=a("strong"),Wso=o("yolos"),Hso=o(" \u2014 "),RB=a("a"),Uso=o("YolosFeatureExtractor"),Jso=o(" (YOLOS model)"),Yso=l(),v(dh.$$.fragment),Kso=l(),v(ch.$$.fragment),Zso=l(),mh=a("div"),v(I6.$$.fragment),elo=l(),gte=a("p"),olo=o("Register a new feature extractor for this class."),eBe=l(),gi=a("h2"),fh=a("a"),hte=a("span"),v(q6.$$.fragment),rlo=l(),ute=a("span"),tlo=o("AutoProcessor"),oBe=l(),wo=a("div"),v(N6.$$.fragment),alo=l(),j6=a("p"),nlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=a("a"),slo=o("AutoProcessor.from_pretrained()"),llo=o(" class method."),ilo=l(),D6=a("p"),dlo=o("This class cannot be instantiated directly using "),pte=a("code"),clo=o("__init__()"),mlo=o(" (throws an error)."),flo=l(),ze=a("div"),v(G6.$$.fragment),glo=l(),_te=a("p"),hlo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ulo=l(),hi=a("p"),plo=o("The processor class to instantiate is selected based on the "),bte=a("code"),_lo=o("model_type"),blo=o(` property of the config object (either
passed as an argument or loaded from `),Fte=a("code"),Flo=o("pretrained_model_name_or_path"),vlo=o(" if possible):"),Tlo=l(),be=a("ul"),gh=a("li"),vte=a("strong"),Mlo=o("clip"),Elo=o(" \u2014 "),PB=a("a"),Clo=o("CLIPProcessor"),wlo=o(" (CLIP model)"),Alo=l(),hh=a("li"),Tte=a("strong"),ylo=o("layoutlmv2"),Llo=o(" \u2014 "),IB=a("a"),xlo=o("LayoutLMv2Processor"),$lo=o(" (LayoutLMv2 model)"),klo=l(),uh=a("li"),Mte=a("strong"),Slo=o("layoutxlm"),Rlo=o(" \u2014 "),qB=a("a"),Blo=o("LayoutXLMProcessor"),Plo=o(" (LayoutXLM model)"),Ilo=l(),ph=a("li"),Ete=a("strong"),qlo=o("sew"),Nlo=o(" \u2014 "),NB=a("a"),jlo=o("Wav2Vec2Processor"),Dlo=o(" (SEW model)"),Glo=l(),_h=a("li"),Cte=a("strong"),Olo=o("sew-d"),Vlo=o(" \u2014 "),jB=a("a"),Xlo=o("Wav2Vec2Processor"),zlo=o(" (SEW-D model)"),Qlo=l(),bh=a("li"),wte=a("strong"),Wlo=o("speech_to_text"),Hlo=o(" \u2014 "),DB=a("a"),Ulo=o("Speech2TextProcessor"),Jlo=o(" (Speech2Text model)"),Ylo=l(),Fh=a("li"),Ate=a("strong"),Klo=o("speech_to_text_2"),Zlo=o(" \u2014 "),GB=a("a"),eio=o("Speech2Text2Processor"),oio=o(" (Speech2Text2 model)"),rio=l(),vh=a("li"),yte=a("strong"),tio=o("trocr"),aio=o(" \u2014 "),OB=a("a"),nio=o("TrOCRProcessor"),sio=o(" (TrOCR model)"),lio=l(),Th=a("li"),Lte=a("strong"),iio=o("unispeech"),dio=o(" \u2014 "),VB=a("a"),cio=o("Wav2Vec2Processor"),mio=o(" (UniSpeech model)"),fio=l(),Mh=a("li"),xte=a("strong"),gio=o("unispeech-sat"),hio=o(" \u2014 "),XB=a("a"),uio=o("Wav2Vec2Processor"),pio=o(" (UniSpeechSat model)"),_io=l(),Eh=a("li"),$te=a("strong"),bio=o("vilt"),Fio=o(" \u2014 "),zB=a("a"),vio=o("ViltProcessor"),Tio=o(" (ViLT model)"),Mio=l(),Ch=a("li"),kte=a("strong"),Eio=o("vision-text-dual-encoder"),Cio=o(" \u2014 "),QB=a("a"),wio=o("VisionTextDualEncoderProcessor"),Aio=o(" (VisionTextDualEncoder model)"),yio=l(),wh=a("li"),Ste=a("strong"),Lio=o("wav2vec2"),xio=o(" \u2014 "),WB=a("a"),$io=o("Wav2Vec2Processor"),kio=o(" (Wav2Vec2 model)"),Sio=l(),Ah=a("li"),Rte=a("strong"),Rio=o("wavlm"),Bio=o(" \u2014 "),HB=a("a"),Pio=o("Wav2Vec2Processor"),Iio=o(" (WavLM model)"),qio=l(),v(yh.$$.fragment),Nio=l(),v(Lh.$$.fragment),jio=l(),xh=a("div"),v(O6.$$.fragment),Dio=l(),Bte=a("p"),Gio=o("Register a new processor for this class."),rBe=l(),ui=a("h2"),$h=a("a"),Pte=a("span"),v(V6.$$.fragment),Oio=l(),Ite=a("span"),Vio=o("AutoModel"),tBe=l(),Ao=a("div"),v(X6.$$.fragment),Xio=l(),pi=a("p"),zio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UB=a("a"),Qio=o("from_pretrained()"),Wio=o(" class method or the "),JB=a("a"),Hio=o("from_config()"),Uio=o(` class
method.`),Jio=l(),z6=a("p"),Yio=o("This class cannot be instantiated directly using "),qte=a("code"),Kio=o("__init__()"),Zio=o(" (throws an error)."),edo=l(),Kr=a("div"),v(Q6.$$.fragment),odo=l(),Nte=a("p"),rdo=o("Instantiates one of the base model classes of the library from a configuration."),tdo=l(),_i=a("p"),ado=o(`Note:
Loading a model from its configuration file does `),jte=a("strong"),ndo=o("not"),sdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YB=a("a"),ldo=o("from_pretrained()"),ido=o(" to load the model weights."),ddo=l(),v(kh.$$.fragment),cdo=l(),Qe=a("div"),v(W6.$$.fragment),mdo=l(),Dte=a("p"),fdo=o("Instantiate one of the base model classes of the library from a pretrained model."),gdo=l(),Ma=a("p"),hdo=o("The model class to instantiate is selected based on the "),Gte=a("code"),udo=o("model_type"),pdo=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),_do=o("pretrained_model_name_or_path"),bdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),Fdo=o("pretrained_model_name_or_path"),vdo=o(":"),Tdo=l(),x=a("ul"),Sh=a("li"),Xte=a("strong"),Mdo=o("albert"),Edo=o(" \u2014 "),KB=a("a"),Cdo=o("AlbertModel"),wdo=o(" (ALBERT model)"),Ado=l(),Rh=a("li"),zte=a("strong"),ydo=o("bart"),Ldo=o(" \u2014 "),ZB=a("a"),xdo=o("BartModel"),$do=o(" (BART model)"),kdo=l(),Bh=a("li"),Qte=a("strong"),Sdo=o("beit"),Rdo=o(" \u2014 "),eP=a("a"),Bdo=o("BeitModel"),Pdo=o(" (BEiT model)"),Ido=l(),Ph=a("li"),Wte=a("strong"),qdo=o("bert"),Ndo=o(" \u2014 "),oP=a("a"),jdo=o("BertModel"),Ddo=o(" (BERT model)"),Gdo=l(),Ih=a("li"),Hte=a("strong"),Odo=o("bert-generation"),Vdo=o(" \u2014 "),rP=a("a"),Xdo=o("BertGenerationEncoder"),zdo=o(" (Bert Generation model)"),Qdo=l(),qh=a("li"),Ute=a("strong"),Wdo=o("big_bird"),Hdo=o(" \u2014 "),tP=a("a"),Udo=o("BigBirdModel"),Jdo=o(" (BigBird model)"),Ydo=l(),Nh=a("li"),Jte=a("strong"),Kdo=o("bigbird_pegasus"),Zdo=o(" \u2014 "),aP=a("a"),eco=o("BigBirdPegasusModel"),oco=o(" (BigBirdPegasus model)"),rco=l(),jh=a("li"),Yte=a("strong"),tco=o("blenderbot"),aco=o(" \u2014 "),nP=a("a"),nco=o("BlenderbotModel"),sco=o(" (Blenderbot model)"),lco=l(),Dh=a("li"),Kte=a("strong"),ico=o("blenderbot-small"),dco=o(" \u2014 "),sP=a("a"),cco=o("BlenderbotSmallModel"),mco=o(" (BlenderbotSmall model)"),fco=l(),Gh=a("li"),Zte=a("strong"),gco=o("camembert"),hco=o(" \u2014 "),lP=a("a"),uco=o("CamembertModel"),pco=o(" (CamemBERT model)"),_co=l(),Oh=a("li"),eae=a("strong"),bco=o("canine"),Fco=o(" \u2014 "),iP=a("a"),vco=o("CanineModel"),Tco=o(" (Canine model)"),Mco=l(),Vh=a("li"),oae=a("strong"),Eco=o("clip"),Cco=o(" \u2014 "),dP=a("a"),wco=o("CLIPModel"),Aco=o(" (CLIP model)"),yco=l(),Xh=a("li"),rae=a("strong"),Lco=o("convbert"),xco=o(" \u2014 "),cP=a("a"),$co=o("ConvBertModel"),kco=o(" (ConvBERT model)"),Sco=l(),zh=a("li"),tae=a("strong"),Rco=o("convnext"),Bco=o(" \u2014 "),mP=a("a"),Pco=o("ConvNextModel"),Ico=o(" (ConvNext model)"),qco=l(),Qh=a("li"),aae=a("strong"),Nco=o("ctrl"),jco=o(" \u2014 "),fP=a("a"),Dco=o("CTRLModel"),Gco=o(" (CTRL model)"),Oco=l(),Wh=a("li"),nae=a("strong"),Vco=o("data2vec-audio"),Xco=o(" \u2014 "),gP=a("a"),zco=o("Data2VecAudioModel"),Qco=o(" (Data2VecAudio model)"),Wco=l(),Hh=a("li"),sae=a("strong"),Hco=o("data2vec-text"),Uco=o(" \u2014 "),hP=a("a"),Jco=o("Data2VecTextModel"),Yco=o(" (Data2VecText model)"),Kco=l(),Uh=a("li"),lae=a("strong"),Zco=o("data2vec-vision"),emo=o(" \u2014 "),uP=a("a"),omo=o("Data2VecVisionModel"),rmo=o(" (Data2VecVision model)"),tmo=l(),Jh=a("li"),iae=a("strong"),amo=o("deberta"),nmo=o(" \u2014 "),pP=a("a"),smo=o("DebertaModel"),lmo=o(" (DeBERTa model)"),imo=l(),Yh=a("li"),dae=a("strong"),dmo=o("deberta-v2"),cmo=o(" \u2014 "),_P=a("a"),mmo=o("DebertaV2Model"),fmo=o(" (DeBERTa-v2 model)"),gmo=l(),Kh=a("li"),cae=a("strong"),hmo=o("decision_transformer"),umo=o(" \u2014 "),bP=a("a"),pmo=o("DecisionTransformerModel"),_mo=o(" (Decision Transformer model)"),bmo=l(),Zh=a("li"),mae=a("strong"),Fmo=o("deit"),vmo=o(" \u2014 "),FP=a("a"),Tmo=o("DeiTModel"),Mmo=o(" (DeiT model)"),Emo=l(),eu=a("li"),fae=a("strong"),Cmo=o("detr"),wmo=o(" \u2014 "),vP=a("a"),Amo=o("DetrModel"),ymo=o(" (DETR model)"),Lmo=l(),ou=a("li"),gae=a("strong"),xmo=o("distilbert"),$mo=o(" \u2014 "),TP=a("a"),kmo=o("DistilBertModel"),Smo=o(" (DistilBERT model)"),Rmo=l(),ru=a("li"),hae=a("strong"),Bmo=o("dpr"),Pmo=o(" \u2014 "),MP=a("a"),Imo=o("DPRQuestionEncoder"),qmo=o(" (DPR model)"),Nmo=l(),tu=a("li"),uae=a("strong"),jmo=o("dpt"),Dmo=o(" \u2014 "),EP=a("a"),Gmo=o("DPTModel"),Omo=o(" (DPT model)"),Vmo=l(),au=a("li"),pae=a("strong"),Xmo=o("electra"),zmo=o(" \u2014 "),CP=a("a"),Qmo=o("ElectraModel"),Wmo=o(" (ELECTRA model)"),Hmo=l(),nu=a("li"),_ae=a("strong"),Umo=o("flaubert"),Jmo=o(" \u2014 "),wP=a("a"),Ymo=o("FlaubertModel"),Kmo=o(" (FlauBERT model)"),Zmo=l(),su=a("li"),bae=a("strong"),efo=o("fnet"),ofo=o(" \u2014 "),AP=a("a"),rfo=o("FNetModel"),tfo=o(" (FNet model)"),afo=l(),lu=a("li"),Fae=a("strong"),nfo=o("fsmt"),sfo=o(" \u2014 "),yP=a("a"),lfo=o("FSMTModel"),ifo=o(" (FairSeq Machine-Translation model)"),dfo=l(),ys=a("li"),vae=a("strong"),cfo=o("funnel"),mfo=o(" \u2014 "),LP=a("a"),ffo=o("FunnelModel"),gfo=o(" or "),xP=a("a"),hfo=o("FunnelBaseModel"),ufo=o(" (Funnel Transformer model)"),pfo=l(),iu=a("li"),Tae=a("strong"),_fo=o("glpn"),bfo=o(" \u2014 "),$P=a("a"),Ffo=o("GLPNModel"),vfo=o(" (GLPN model)"),Tfo=l(),du=a("li"),Mae=a("strong"),Mfo=o("gpt2"),Efo=o(" \u2014 "),kP=a("a"),Cfo=o("GPT2Model"),wfo=o(" (OpenAI GPT-2 model)"),Afo=l(),cu=a("li"),Eae=a("strong"),yfo=o("gpt_neo"),Lfo=o(" \u2014 "),SP=a("a"),xfo=o("GPTNeoModel"),$fo=o(" (GPT Neo model)"),kfo=l(),mu=a("li"),Cae=a("strong"),Sfo=o("gptj"),Rfo=o(" \u2014 "),RP=a("a"),Bfo=o("GPTJModel"),Pfo=o(" (GPT-J model)"),Ifo=l(),fu=a("li"),wae=a("strong"),qfo=o("hubert"),Nfo=o(" \u2014 "),BP=a("a"),jfo=o("HubertModel"),Dfo=o(" (Hubert model)"),Gfo=l(),gu=a("li"),Aae=a("strong"),Ofo=o("ibert"),Vfo=o(" \u2014 "),PP=a("a"),Xfo=o("IBertModel"),zfo=o(" (I-BERT model)"),Qfo=l(),hu=a("li"),yae=a("strong"),Wfo=o("imagegpt"),Hfo=o(" \u2014 "),IP=a("a"),Ufo=o("ImageGPTModel"),Jfo=o(" (ImageGPT model)"),Yfo=l(),uu=a("li"),Lae=a("strong"),Kfo=o("layoutlm"),Zfo=o(" \u2014 "),qP=a("a"),ego=o("LayoutLMModel"),ogo=o(" (LayoutLM model)"),rgo=l(),pu=a("li"),xae=a("strong"),tgo=o("layoutlmv2"),ago=o(" \u2014 "),NP=a("a"),ngo=o("LayoutLMv2Model"),sgo=o(" (LayoutLMv2 model)"),lgo=l(),_u=a("li"),$ae=a("strong"),igo=o("led"),dgo=o(" \u2014 "),jP=a("a"),cgo=o("LEDModel"),mgo=o(" (LED model)"),fgo=l(),bu=a("li"),kae=a("strong"),ggo=o("longformer"),hgo=o(" \u2014 "),DP=a("a"),ugo=o("LongformerModel"),pgo=o(" (Longformer model)"),_go=l(),Fu=a("li"),Sae=a("strong"),bgo=o("luke"),Fgo=o(" \u2014 "),GP=a("a"),vgo=o("LukeModel"),Tgo=o(" (LUKE model)"),Mgo=l(),vu=a("li"),Rae=a("strong"),Ego=o("lxmert"),Cgo=o(" \u2014 "),OP=a("a"),wgo=o("LxmertModel"),Ago=o(" (LXMERT model)"),ygo=l(),Tu=a("li"),Bae=a("strong"),Lgo=o("m2m_100"),xgo=o(" \u2014 "),VP=a("a"),$go=o("M2M100Model"),kgo=o(" (M2M100 model)"),Sgo=l(),Mu=a("li"),Pae=a("strong"),Rgo=o("marian"),Bgo=o(" \u2014 "),XP=a("a"),Pgo=o("MarianModel"),Igo=o(" (Marian model)"),qgo=l(),Eu=a("li"),Iae=a("strong"),Ngo=o("maskformer"),jgo=o(" \u2014 "),zP=a("a"),Dgo=o("MaskFormerModel"),Ggo=o(" (MaskFormer model)"),Ogo=l(),Cu=a("li"),qae=a("strong"),Vgo=o("mbart"),Xgo=o(" \u2014 "),QP=a("a"),zgo=o("MBartModel"),Qgo=o(" (mBART model)"),Wgo=l(),wu=a("li"),Nae=a("strong"),Hgo=o("megatron-bert"),Ugo=o(" \u2014 "),WP=a("a"),Jgo=o("MegatronBertModel"),Ygo=o(" (MegatronBert model)"),Kgo=l(),Au=a("li"),jae=a("strong"),Zgo=o("mobilebert"),eho=o(" \u2014 "),HP=a("a"),oho=o("MobileBertModel"),rho=o(" (MobileBERT model)"),tho=l(),yu=a("li"),Dae=a("strong"),aho=o("mpnet"),nho=o(" \u2014 "),UP=a("a"),sho=o("MPNetModel"),lho=o(" (MPNet model)"),iho=l(),Lu=a("li"),Gae=a("strong"),dho=o("mt5"),cho=o(" \u2014 "),JP=a("a"),mho=o("MT5Model"),fho=o(" (mT5 model)"),gho=l(),xu=a("li"),Oae=a("strong"),hho=o("nystromformer"),uho=o(" \u2014 "),YP=a("a"),pho=o("NystromformerModel"),_ho=o(" (Nystromformer model)"),bho=l(),$u=a("li"),Vae=a("strong"),Fho=o("openai-gpt"),vho=o(" \u2014 "),KP=a("a"),Tho=o("OpenAIGPTModel"),Mho=o(" (OpenAI GPT model)"),Eho=l(),ku=a("li"),Xae=a("strong"),Cho=o("pegasus"),who=o(" \u2014 "),ZP=a("a"),Aho=o("PegasusModel"),yho=o(" (Pegasus model)"),Lho=l(),Su=a("li"),zae=a("strong"),xho=o("perceiver"),$ho=o(" \u2014 "),eI=a("a"),kho=o("PerceiverModel"),Sho=o(" (Perceiver model)"),Rho=l(),Ru=a("li"),Qae=a("strong"),Bho=o("plbart"),Pho=o(" \u2014 "),oI=a("a"),Iho=o("PLBartModel"),qho=o(" (PLBart model)"),Nho=l(),Bu=a("li"),Wae=a("strong"),jho=o("poolformer"),Dho=o(" \u2014 "),rI=a("a"),Gho=o("PoolFormerModel"),Oho=o(" (PoolFormer model)"),Vho=l(),Pu=a("li"),Hae=a("strong"),Xho=o("prophetnet"),zho=o(" \u2014 "),tI=a("a"),Qho=o("ProphetNetModel"),Who=o(" (ProphetNet model)"),Hho=l(),Iu=a("li"),Uae=a("strong"),Uho=o("qdqbert"),Jho=o(" \u2014 "),aI=a("a"),Yho=o("QDQBertModel"),Kho=o(" (QDQBert model)"),Zho=l(),qu=a("li"),Jae=a("strong"),euo=o("reformer"),ouo=o(" \u2014 "),nI=a("a"),ruo=o("ReformerModel"),tuo=o(" (Reformer model)"),auo=l(),Nu=a("li"),Yae=a("strong"),nuo=o("regnet"),suo=o(" \u2014 "),sI=a("a"),luo=o("RegNetModel"),iuo=o(" (RegNet model)"),duo=l(),ju=a("li"),Kae=a("strong"),cuo=o("rembert"),muo=o(" \u2014 "),lI=a("a"),fuo=o("RemBertModel"),guo=o(" (RemBERT model)"),huo=l(),Du=a("li"),Zae=a("strong"),uuo=o("resnet"),puo=o(" \u2014 "),iI=a("a"),_uo=o("ResNetModel"),buo=o(" (ResNet model)"),Fuo=l(),Gu=a("li"),ene=a("strong"),vuo=o("retribert"),Tuo=o(" \u2014 "),dI=a("a"),Muo=o("RetriBertModel"),Euo=o(" (RetriBERT model)"),Cuo=l(),Ou=a("li"),one=a("strong"),wuo=o("roberta"),Auo=o(" \u2014 "),cI=a("a"),yuo=o("RobertaModel"),Luo=o(" (RoBERTa model)"),xuo=l(),Vu=a("li"),rne=a("strong"),$uo=o("roformer"),kuo=o(" \u2014 "),mI=a("a"),Suo=o("RoFormerModel"),Ruo=o(" (RoFormer model)"),Buo=l(),Xu=a("li"),tne=a("strong"),Puo=o("segformer"),Iuo=o(" \u2014 "),fI=a("a"),quo=o("SegformerModel"),Nuo=o(" (SegFormer model)"),juo=l(),zu=a("li"),ane=a("strong"),Duo=o("sew"),Guo=o(" \u2014 "),gI=a("a"),Ouo=o("SEWModel"),Vuo=o(" (SEW model)"),Xuo=l(),Qu=a("li"),nne=a("strong"),zuo=o("sew-d"),Quo=o(" \u2014 "),hI=a("a"),Wuo=o("SEWDModel"),Huo=o(" (SEW-D model)"),Uuo=l(),Wu=a("li"),sne=a("strong"),Juo=o("speech_to_text"),Yuo=o(" \u2014 "),uI=a("a"),Kuo=o("Speech2TextModel"),Zuo=o(" (Speech2Text model)"),epo=l(),Hu=a("li"),lne=a("strong"),opo=o("splinter"),rpo=o(" \u2014 "),pI=a("a"),tpo=o("SplinterModel"),apo=o(" (Splinter model)"),npo=l(),Uu=a("li"),ine=a("strong"),spo=o("squeezebert"),lpo=o(" \u2014 "),_I=a("a"),ipo=o("SqueezeBertModel"),dpo=o(" (SqueezeBERT model)"),cpo=l(),Ju=a("li"),dne=a("strong"),mpo=o("swin"),fpo=o(" \u2014 "),bI=a("a"),gpo=o("SwinModel"),hpo=o(" (Swin model)"),upo=l(),Yu=a("li"),cne=a("strong"),ppo=o("t5"),_po=o(" \u2014 "),FI=a("a"),bpo=o("T5Model"),Fpo=o(" (T5 model)"),vpo=l(),Ku=a("li"),mne=a("strong"),Tpo=o("tapas"),Mpo=o(" \u2014 "),vI=a("a"),Epo=o("TapasModel"),Cpo=o(" (TAPAS model)"),wpo=l(),Zu=a("li"),fne=a("strong"),Apo=o("transfo-xl"),ypo=o(" \u2014 "),TI=a("a"),Lpo=o("TransfoXLModel"),xpo=o(" (Transformer-XL model)"),$po=l(),ep=a("li"),gne=a("strong"),kpo=o("unispeech"),Spo=o(" \u2014 "),MI=a("a"),Rpo=o("UniSpeechModel"),Bpo=o(" (UniSpeech model)"),Ppo=l(),op=a("li"),hne=a("strong"),Ipo=o("unispeech-sat"),qpo=o(" \u2014 "),EI=a("a"),Npo=o("UniSpeechSatModel"),jpo=o(" (UniSpeechSat model)"),Dpo=l(),rp=a("li"),une=a("strong"),Gpo=o("van"),Opo=o(" \u2014 "),CI=a("a"),Vpo=o("VanModel"),Xpo=o(" (VAN model)"),zpo=l(),tp=a("li"),pne=a("strong"),Qpo=o("vilt"),Wpo=o(" \u2014 "),wI=a("a"),Hpo=o("ViltModel"),Upo=o(" (ViLT model)"),Jpo=l(),ap=a("li"),_ne=a("strong"),Ypo=o("vision-text-dual-encoder"),Kpo=o(" \u2014 "),AI=a("a"),Zpo=o("VisionTextDualEncoderModel"),e_o=o(" (VisionTextDualEncoder model)"),o_o=l(),np=a("li"),bne=a("strong"),r_o=o("visual_bert"),t_o=o(" \u2014 "),yI=a("a"),a_o=o("VisualBertModel"),n_o=o(" (VisualBert model)"),s_o=l(),sp=a("li"),Fne=a("strong"),l_o=o("vit"),i_o=o(" \u2014 "),LI=a("a"),d_o=o("ViTModel"),c_o=o(" (ViT model)"),m_o=l(),lp=a("li"),vne=a("strong"),f_o=o("vit_mae"),g_o=o(" \u2014 "),xI=a("a"),h_o=o("ViTMAEModel"),u_o=o(" (ViTMAE model)"),p_o=l(),ip=a("li"),Tne=a("strong"),__o=o("wav2vec2"),b_o=o(" \u2014 "),$I=a("a"),F_o=o("Wav2Vec2Model"),v_o=o(" (Wav2Vec2 model)"),T_o=l(),dp=a("li"),Mne=a("strong"),M_o=o("wavlm"),E_o=o(" \u2014 "),kI=a("a"),C_o=o("WavLMModel"),w_o=o(" (WavLM model)"),A_o=l(),cp=a("li"),Ene=a("strong"),y_o=o("xglm"),L_o=o(" \u2014 "),SI=a("a"),x_o=o("XGLMModel"),$_o=o(" (XGLM model)"),k_o=l(),mp=a("li"),Cne=a("strong"),S_o=o("xlm"),R_o=o(" \u2014 "),RI=a("a"),B_o=o("XLMModel"),P_o=o(" (XLM model)"),I_o=l(),fp=a("li"),wne=a("strong"),q_o=o("xlm-prophetnet"),N_o=o(" \u2014 "),BI=a("a"),j_o=o("XLMProphetNetModel"),D_o=o(" (XLMProphetNet model)"),G_o=l(),gp=a("li"),Ane=a("strong"),O_o=o("xlm-roberta"),V_o=o(" \u2014 "),PI=a("a"),X_o=o("XLMRobertaModel"),z_o=o(" (XLM-RoBERTa model)"),Q_o=l(),hp=a("li"),yne=a("strong"),W_o=o("xlm-roberta-xl"),H_o=o(" \u2014 "),II=a("a"),U_o=o("XLMRobertaXLModel"),J_o=o(" (XLM-RoBERTa-XL model)"),Y_o=l(),up=a("li"),Lne=a("strong"),K_o=o("xlnet"),Z_o=o(" \u2014 "),qI=a("a"),ebo=o("XLNetModel"),obo=o(" (XLNet model)"),rbo=l(),pp=a("li"),xne=a("strong"),tbo=o("yolos"),abo=o(" \u2014 "),NI=a("a"),nbo=o("YolosModel"),sbo=o(" (YOLOS model)"),lbo=l(),_p=a("li"),$ne=a("strong"),ibo=o("yoso"),dbo=o(" \u2014 "),jI=a("a"),cbo=o("YosoModel"),mbo=o(" (YOSO model)"),fbo=l(),bp=a("p"),gbo=o("The model is set in evaluation mode by default using "),kne=a("code"),hbo=o("model.eval()"),ubo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=a("code"),pbo=o("model.train()"),_bo=l(),v(Fp.$$.fragment),aBe=l(),bi=a("h2"),vp=a("a"),Rne=a("span"),v(H6.$$.fragment),bbo=l(),Bne=a("span"),Fbo=o("AutoModelForPreTraining"),nBe=l(),yo=a("div"),v(U6.$$.fragment),vbo=l(),Fi=a("p"),Tbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DI=a("a"),Mbo=o("from_pretrained()"),Ebo=o(" class method or the "),GI=a("a"),Cbo=o("from_config()"),wbo=o(` class
method.`),Abo=l(),J6=a("p"),ybo=o("This class cannot be instantiated directly using "),Pne=a("code"),Lbo=o("__init__()"),xbo=o(" (throws an error)."),$bo=l(),Zr=a("div"),v(Y6.$$.fragment),kbo=l(),Ine=a("p"),Sbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rbo=l(),vi=a("p"),Bbo=o(`Note:
Loading a model from its configuration file does `),qne=a("strong"),Pbo=o("not"),Ibo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),qbo=o("from_pretrained()"),Nbo=o(" to load the model weights."),jbo=l(),v(Tp.$$.fragment),Dbo=l(),We=a("div"),v(K6.$$.fragment),Gbo=l(),Nne=a("p"),Obo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vbo=l(),Ea=a("p"),Xbo=o("The model class to instantiate is selected based on the "),jne=a("code"),zbo=o("model_type"),Qbo=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),Wbo=o("pretrained_model_name_or_path"),Hbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),Ubo=o("pretrained_model_name_or_path"),Jbo=o(":"),Ybo=l(),G=a("ul"),Mp=a("li"),One=a("strong"),Kbo=o("albert"),Zbo=o(" \u2014 "),VI=a("a"),e2o=o("AlbertForPreTraining"),o2o=o(" (ALBERT model)"),r2o=l(),Ep=a("li"),Vne=a("strong"),t2o=o("bart"),a2o=o(" \u2014 "),XI=a("a"),n2o=o("BartForConditionalGeneration"),s2o=o(" (BART model)"),l2o=l(),Cp=a("li"),Xne=a("strong"),i2o=o("bert"),d2o=o(" \u2014 "),zI=a("a"),c2o=o("BertForPreTraining"),m2o=o(" (BERT model)"),f2o=l(),wp=a("li"),zne=a("strong"),g2o=o("big_bird"),h2o=o(" \u2014 "),QI=a("a"),u2o=o("BigBirdForPreTraining"),p2o=o(" (BigBird model)"),_2o=l(),Ap=a("li"),Qne=a("strong"),b2o=o("camembert"),F2o=o(" \u2014 "),WI=a("a"),v2o=o("CamembertForMaskedLM"),T2o=o(" (CamemBERT model)"),M2o=l(),yp=a("li"),Wne=a("strong"),E2o=o("ctrl"),C2o=o(" \u2014 "),HI=a("a"),w2o=o("CTRLLMHeadModel"),A2o=o(" (CTRL model)"),y2o=l(),Lp=a("li"),Hne=a("strong"),L2o=o("data2vec-text"),x2o=o(" \u2014 "),UI=a("a"),$2o=o("Data2VecTextForMaskedLM"),k2o=o(" (Data2VecText model)"),S2o=l(),xp=a("li"),Une=a("strong"),R2o=o("deberta"),B2o=o(" \u2014 "),JI=a("a"),P2o=o("DebertaForMaskedLM"),I2o=o(" (DeBERTa model)"),q2o=l(),$p=a("li"),Jne=a("strong"),N2o=o("deberta-v2"),j2o=o(" \u2014 "),YI=a("a"),D2o=o("DebertaV2ForMaskedLM"),G2o=o(" (DeBERTa-v2 model)"),O2o=l(),kp=a("li"),Yne=a("strong"),V2o=o("distilbert"),X2o=o(" \u2014 "),KI=a("a"),z2o=o("DistilBertForMaskedLM"),Q2o=o(" (DistilBERT model)"),W2o=l(),Sp=a("li"),Kne=a("strong"),H2o=o("electra"),U2o=o(" \u2014 "),ZI=a("a"),J2o=o("ElectraForPreTraining"),Y2o=o(" (ELECTRA model)"),K2o=l(),Rp=a("li"),Zne=a("strong"),Z2o=o("flaubert"),eFo=o(" \u2014 "),eq=a("a"),oFo=o("FlaubertWithLMHeadModel"),rFo=o(" (FlauBERT model)"),tFo=l(),Bp=a("li"),ese=a("strong"),aFo=o("fnet"),nFo=o(" \u2014 "),oq=a("a"),sFo=o("FNetForPreTraining"),lFo=o(" (FNet model)"),iFo=l(),Pp=a("li"),ose=a("strong"),dFo=o("fsmt"),cFo=o(" \u2014 "),rq=a("a"),mFo=o("FSMTForConditionalGeneration"),fFo=o(" (FairSeq Machine-Translation model)"),gFo=l(),Ip=a("li"),rse=a("strong"),hFo=o("funnel"),uFo=o(" \u2014 "),tq=a("a"),pFo=o("FunnelForPreTraining"),_Fo=o(" (Funnel Transformer model)"),bFo=l(),qp=a("li"),tse=a("strong"),FFo=o("gpt2"),vFo=o(" \u2014 "),aq=a("a"),TFo=o("GPT2LMHeadModel"),MFo=o(" (OpenAI GPT-2 model)"),EFo=l(),Np=a("li"),ase=a("strong"),CFo=o("ibert"),wFo=o(" \u2014 "),nq=a("a"),AFo=o("IBertForMaskedLM"),yFo=o(" (I-BERT model)"),LFo=l(),jp=a("li"),nse=a("strong"),xFo=o("layoutlm"),$Fo=o(" \u2014 "),sq=a("a"),kFo=o("LayoutLMForMaskedLM"),SFo=o(" (LayoutLM model)"),RFo=l(),Dp=a("li"),sse=a("strong"),BFo=o("longformer"),PFo=o(" \u2014 "),lq=a("a"),IFo=o("LongformerForMaskedLM"),qFo=o(" (Longformer model)"),NFo=l(),Gp=a("li"),lse=a("strong"),jFo=o("lxmert"),DFo=o(" \u2014 "),iq=a("a"),GFo=o("LxmertForPreTraining"),OFo=o(" (LXMERT model)"),VFo=l(),Op=a("li"),ise=a("strong"),XFo=o("megatron-bert"),zFo=o(" \u2014 "),dq=a("a"),QFo=o("MegatronBertForPreTraining"),WFo=o(" (MegatronBert model)"),HFo=l(),Vp=a("li"),dse=a("strong"),UFo=o("mobilebert"),JFo=o(" \u2014 "),cq=a("a"),YFo=o("MobileBertForPreTraining"),KFo=o(" (MobileBERT model)"),ZFo=l(),Xp=a("li"),cse=a("strong"),evo=o("mpnet"),ovo=o(" \u2014 "),mq=a("a"),rvo=o("MPNetForMaskedLM"),tvo=o(" (MPNet model)"),avo=l(),zp=a("li"),mse=a("strong"),nvo=o("openai-gpt"),svo=o(" \u2014 "),fq=a("a"),lvo=o("OpenAIGPTLMHeadModel"),ivo=o(" (OpenAI GPT model)"),dvo=l(),Qp=a("li"),fse=a("strong"),cvo=o("retribert"),mvo=o(" \u2014 "),gq=a("a"),fvo=o("RetriBertModel"),gvo=o(" (RetriBERT model)"),hvo=l(),Wp=a("li"),gse=a("strong"),uvo=o("roberta"),pvo=o(" \u2014 "),hq=a("a"),_vo=o("RobertaForMaskedLM"),bvo=o(" (RoBERTa model)"),Fvo=l(),Hp=a("li"),hse=a("strong"),vvo=o("squeezebert"),Tvo=o(" \u2014 "),uq=a("a"),Mvo=o("SqueezeBertForMaskedLM"),Evo=o(" (SqueezeBERT model)"),Cvo=l(),Up=a("li"),use=a("strong"),wvo=o("t5"),Avo=o(" \u2014 "),pq=a("a"),yvo=o("T5ForConditionalGeneration"),Lvo=o(" (T5 model)"),xvo=l(),Jp=a("li"),pse=a("strong"),$vo=o("tapas"),kvo=o(" \u2014 "),_q=a("a"),Svo=o("TapasForMaskedLM"),Rvo=o(" (TAPAS model)"),Bvo=l(),Yp=a("li"),_se=a("strong"),Pvo=o("transfo-xl"),Ivo=o(" \u2014 "),bq=a("a"),qvo=o("TransfoXLLMHeadModel"),Nvo=o(" (Transformer-XL model)"),jvo=l(),Kp=a("li"),bse=a("strong"),Dvo=o("unispeech"),Gvo=o(" \u2014 "),Fq=a("a"),Ovo=o("UniSpeechForPreTraining"),Vvo=o(" (UniSpeech model)"),Xvo=l(),Zp=a("li"),Fse=a("strong"),zvo=o("unispeech-sat"),Qvo=o(" \u2014 "),vq=a("a"),Wvo=o("UniSpeechSatForPreTraining"),Hvo=o(" (UniSpeechSat model)"),Uvo=l(),e_=a("li"),vse=a("strong"),Jvo=o("visual_bert"),Yvo=o(" \u2014 "),Tq=a("a"),Kvo=o("VisualBertForPreTraining"),Zvo=o(" (VisualBert model)"),e1o=l(),o_=a("li"),Tse=a("strong"),o1o=o("vit_mae"),r1o=o(" \u2014 "),Mq=a("a"),t1o=o("ViTMAEForPreTraining"),a1o=o(" (ViTMAE model)"),n1o=l(),r_=a("li"),Mse=a("strong"),s1o=o("wav2vec2"),l1o=o(" \u2014 "),Eq=a("a"),i1o=o("Wav2Vec2ForPreTraining"),d1o=o(" (Wav2Vec2 model)"),c1o=l(),t_=a("li"),Ese=a("strong"),m1o=o("xlm"),f1o=o(" \u2014 "),Cq=a("a"),g1o=o("XLMWithLMHeadModel"),h1o=o(" (XLM model)"),u1o=l(),a_=a("li"),Cse=a("strong"),p1o=o("xlm-roberta"),_1o=o(" \u2014 "),wq=a("a"),b1o=o("XLMRobertaForMaskedLM"),F1o=o(" (XLM-RoBERTa model)"),v1o=l(),n_=a("li"),wse=a("strong"),T1o=o("xlm-roberta-xl"),M1o=o(" \u2014 "),Aq=a("a"),E1o=o("XLMRobertaXLForMaskedLM"),C1o=o(" (XLM-RoBERTa-XL model)"),w1o=l(),s_=a("li"),Ase=a("strong"),A1o=o("xlnet"),y1o=o(" \u2014 "),yq=a("a"),L1o=o("XLNetLMHeadModel"),x1o=o(" (XLNet model)"),$1o=l(),l_=a("p"),k1o=o("The model is set in evaluation mode by default using "),yse=a("code"),S1o=o("model.eval()"),R1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),B1o=o("model.train()"),P1o=l(),v(i_.$$.fragment),sBe=l(),Ti=a("h2"),d_=a("a"),xse=a("span"),v(Z6.$$.fragment),I1o=l(),$se=a("span"),q1o=o("AutoModelForCausalLM"),lBe=l(),Lo=a("div"),v(ey.$$.fragment),N1o=l(),Mi=a("p"),j1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lq=a("a"),D1o=o("from_pretrained()"),G1o=o(" class method or the "),xq=a("a"),O1o=o("from_config()"),V1o=o(` class
method.`),X1o=l(),oy=a("p"),z1o=o("This class cannot be instantiated directly using "),kse=a("code"),Q1o=o("__init__()"),W1o=o(" (throws an error)."),H1o=l(),et=a("div"),v(ry.$$.fragment),U1o=l(),Sse=a("p"),J1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y1o=l(),Ei=a("p"),K1o=o(`Note:
Loading a model from its configuration file does `),Rse=a("strong"),Z1o=o("not"),eTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),oTo=o("from_pretrained()"),rTo=o(" to load the model weights."),tTo=l(),v(c_.$$.fragment),aTo=l(),He=a("div"),v(ty.$$.fragment),nTo=l(),Bse=a("p"),sTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lTo=l(),Ca=a("p"),iTo=o("The model class to instantiate is selected based on the "),Pse=a("code"),dTo=o("model_type"),cTo=o(` property of the config object (either
passed as an argument or loaded from `),Ise=a("code"),mTo=o("pretrained_model_name_or_path"),fTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=a("code"),gTo=o("pretrained_model_name_or_path"),hTo=o(":"),uTo=l(),z=a("ul"),m_=a("li"),Nse=a("strong"),pTo=o("bart"),_To=o(" \u2014 "),kq=a("a"),bTo=o("BartForCausalLM"),FTo=o(" (BART model)"),vTo=l(),f_=a("li"),jse=a("strong"),TTo=o("bert"),MTo=o(" \u2014 "),Sq=a("a"),ETo=o("BertLMHeadModel"),CTo=o(" (BERT model)"),wTo=l(),g_=a("li"),Dse=a("strong"),ATo=o("bert-generation"),yTo=o(" \u2014 "),Rq=a("a"),LTo=o("BertGenerationDecoder"),xTo=o(" (Bert Generation model)"),$To=l(),h_=a("li"),Gse=a("strong"),kTo=o("big_bird"),STo=o(" \u2014 "),Bq=a("a"),RTo=o("BigBirdForCausalLM"),BTo=o(" (BigBird model)"),PTo=l(),u_=a("li"),Ose=a("strong"),ITo=o("bigbird_pegasus"),qTo=o(" \u2014 "),Pq=a("a"),NTo=o("BigBirdPegasusForCausalLM"),jTo=o(" (BigBirdPegasus model)"),DTo=l(),p_=a("li"),Vse=a("strong"),GTo=o("blenderbot"),OTo=o(" \u2014 "),Iq=a("a"),VTo=o("BlenderbotForCausalLM"),XTo=o(" (Blenderbot model)"),zTo=l(),__=a("li"),Xse=a("strong"),QTo=o("blenderbot-small"),WTo=o(" \u2014 "),qq=a("a"),HTo=o("BlenderbotSmallForCausalLM"),UTo=o(" (BlenderbotSmall model)"),JTo=l(),b_=a("li"),zse=a("strong"),YTo=o("camembert"),KTo=o(" \u2014 "),Nq=a("a"),ZTo=o("CamembertForCausalLM"),eMo=o(" (CamemBERT model)"),oMo=l(),F_=a("li"),Qse=a("strong"),rMo=o("ctrl"),tMo=o(" \u2014 "),jq=a("a"),aMo=o("CTRLLMHeadModel"),nMo=o(" (CTRL model)"),sMo=l(),v_=a("li"),Wse=a("strong"),lMo=o("data2vec-text"),iMo=o(" \u2014 "),Dq=a("a"),dMo=o("Data2VecTextForCausalLM"),cMo=o(" (Data2VecText model)"),mMo=l(),T_=a("li"),Hse=a("strong"),fMo=o("electra"),gMo=o(" \u2014 "),Gq=a("a"),hMo=o("ElectraForCausalLM"),uMo=o(" (ELECTRA model)"),pMo=l(),M_=a("li"),Use=a("strong"),_Mo=o("gpt2"),bMo=o(" \u2014 "),Oq=a("a"),FMo=o("GPT2LMHeadModel"),vMo=o(" (OpenAI GPT-2 model)"),TMo=l(),E_=a("li"),Jse=a("strong"),MMo=o("gpt_neo"),EMo=o(" \u2014 "),Vq=a("a"),CMo=o("GPTNeoForCausalLM"),wMo=o(" (GPT Neo model)"),AMo=l(),C_=a("li"),Yse=a("strong"),yMo=o("gptj"),LMo=o(" \u2014 "),Xq=a("a"),xMo=o("GPTJForCausalLM"),$Mo=o(" (GPT-J model)"),kMo=l(),w_=a("li"),Kse=a("strong"),SMo=o("marian"),RMo=o(" \u2014 "),zq=a("a"),BMo=o("MarianForCausalLM"),PMo=o(" (Marian model)"),IMo=l(),A_=a("li"),Zse=a("strong"),qMo=o("mbart"),NMo=o(" \u2014 "),Qq=a("a"),jMo=o("MBartForCausalLM"),DMo=o(" (mBART model)"),GMo=l(),y_=a("li"),ele=a("strong"),OMo=o("megatron-bert"),VMo=o(" \u2014 "),Wq=a("a"),XMo=o("MegatronBertForCausalLM"),zMo=o(" (MegatronBert model)"),QMo=l(),L_=a("li"),ole=a("strong"),WMo=o("openai-gpt"),HMo=o(" \u2014 "),Hq=a("a"),UMo=o("OpenAIGPTLMHeadModel"),JMo=o(" (OpenAI GPT model)"),YMo=l(),x_=a("li"),rle=a("strong"),KMo=o("pegasus"),ZMo=o(" \u2014 "),Uq=a("a"),e4o=o("PegasusForCausalLM"),o4o=o(" (Pegasus model)"),r4o=l(),$_=a("li"),tle=a("strong"),t4o=o("plbart"),a4o=o(" \u2014 "),Jq=a("a"),n4o=o("PLBartForCausalLM"),s4o=o(" (PLBart model)"),l4o=l(),k_=a("li"),ale=a("strong"),i4o=o("prophetnet"),d4o=o(" \u2014 "),Yq=a("a"),c4o=o("ProphetNetForCausalLM"),m4o=o(" (ProphetNet model)"),f4o=l(),S_=a("li"),nle=a("strong"),g4o=o("qdqbert"),h4o=o(" \u2014 "),Kq=a("a"),u4o=o("QDQBertLMHeadModel"),p4o=o(" (QDQBert model)"),_4o=l(),R_=a("li"),sle=a("strong"),b4o=o("reformer"),F4o=o(" \u2014 "),Zq=a("a"),v4o=o("ReformerModelWithLMHead"),T4o=o(" (Reformer model)"),M4o=l(),B_=a("li"),lle=a("strong"),E4o=o("rembert"),C4o=o(" \u2014 "),eN=a("a"),w4o=o("RemBertForCausalLM"),A4o=o(" (RemBERT model)"),y4o=l(),P_=a("li"),ile=a("strong"),L4o=o("roberta"),x4o=o(" \u2014 "),oN=a("a"),$4o=o("RobertaForCausalLM"),k4o=o(" (RoBERTa model)"),S4o=l(),I_=a("li"),dle=a("strong"),R4o=o("roformer"),B4o=o(" \u2014 "),rN=a("a"),P4o=o("RoFormerForCausalLM"),I4o=o(" (RoFormer model)"),q4o=l(),q_=a("li"),cle=a("strong"),N4o=o("speech_to_text_2"),j4o=o(" \u2014 "),tN=a("a"),D4o=o("Speech2Text2ForCausalLM"),G4o=o(" (Speech2Text2 model)"),O4o=l(),N_=a("li"),mle=a("strong"),V4o=o("transfo-xl"),X4o=o(" \u2014 "),aN=a("a"),z4o=o("TransfoXLLMHeadModel"),Q4o=o(" (Transformer-XL model)"),W4o=l(),j_=a("li"),fle=a("strong"),H4o=o("trocr"),U4o=o(" \u2014 "),nN=a("a"),J4o=o("TrOCRForCausalLM"),Y4o=o(" (TrOCR model)"),K4o=l(),D_=a("li"),gle=a("strong"),Z4o=o("xglm"),eEo=o(" \u2014 "),sN=a("a"),oEo=o("XGLMForCausalLM"),rEo=o(" (XGLM model)"),tEo=l(),G_=a("li"),hle=a("strong"),aEo=o("xlm"),nEo=o(" \u2014 "),lN=a("a"),sEo=o("XLMWithLMHeadModel"),lEo=o(" (XLM model)"),iEo=l(),O_=a("li"),ule=a("strong"),dEo=o("xlm-prophetnet"),cEo=o(" \u2014 "),iN=a("a"),mEo=o("XLMProphetNetForCausalLM"),fEo=o(" (XLMProphetNet model)"),gEo=l(),V_=a("li"),ple=a("strong"),hEo=o("xlm-roberta"),uEo=o(" \u2014 "),dN=a("a"),pEo=o("XLMRobertaForCausalLM"),_Eo=o(" (XLM-RoBERTa model)"),bEo=l(),X_=a("li"),_le=a("strong"),FEo=o("xlm-roberta-xl"),vEo=o(" \u2014 "),cN=a("a"),TEo=o("XLMRobertaXLForCausalLM"),MEo=o(" (XLM-RoBERTa-XL model)"),EEo=l(),z_=a("li"),ble=a("strong"),CEo=o("xlnet"),wEo=o(" \u2014 "),mN=a("a"),AEo=o("XLNetLMHeadModel"),yEo=o(" (XLNet model)"),LEo=l(),Q_=a("p"),xEo=o("The model is set in evaluation mode by default using "),Fle=a("code"),$Eo=o("model.eval()"),kEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),SEo=o("model.train()"),REo=l(),v(W_.$$.fragment),iBe=l(),Ci=a("h2"),H_=a("a"),Tle=a("span"),v(ay.$$.fragment),BEo=l(),Mle=a("span"),PEo=o("AutoModelForMaskedLM"),dBe=l(),xo=a("div"),v(ny.$$.fragment),IEo=l(),wi=a("p"),qEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fN=a("a"),NEo=o("from_pretrained()"),jEo=o(" class method or the "),gN=a("a"),DEo=o("from_config()"),GEo=o(` class
method.`),OEo=l(),sy=a("p"),VEo=o("This class cannot be instantiated directly using "),Ele=a("code"),XEo=o("__init__()"),zEo=o(" (throws an error)."),QEo=l(),ot=a("div"),v(ly.$$.fragment),WEo=l(),Cle=a("p"),HEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UEo=l(),Ai=a("p"),JEo=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),YEo=o("not"),KEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=a("a"),ZEo=o("from_pretrained()"),e5o=o(" to load the model weights."),o5o=l(),v(U_.$$.fragment),r5o=l(),Ue=a("div"),v(iy.$$.fragment),t5o=l(),Ale=a("p"),a5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n5o=l(),wa=a("p"),s5o=o("The model class to instantiate is selected based on the "),yle=a("code"),l5o=o("model_type"),i5o=o(` property of the config object (either
passed as an argument or loaded from `),Lle=a("code"),d5o=o("pretrained_model_name_or_path"),c5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=a("code"),m5o=o("pretrained_model_name_or_path"),f5o=o(":"),g5o=l(),Q=a("ul"),J_=a("li"),$le=a("strong"),h5o=o("albert"),u5o=o(" \u2014 "),uN=a("a"),p5o=o("AlbertForMaskedLM"),_5o=o(" (ALBERT model)"),b5o=l(),Y_=a("li"),kle=a("strong"),F5o=o("bart"),v5o=o(" \u2014 "),pN=a("a"),T5o=o("BartForConditionalGeneration"),M5o=o(" (BART model)"),E5o=l(),K_=a("li"),Sle=a("strong"),C5o=o("bert"),w5o=o(" \u2014 "),_N=a("a"),A5o=o("BertForMaskedLM"),y5o=o(" (BERT model)"),L5o=l(),Z_=a("li"),Rle=a("strong"),x5o=o("big_bird"),$5o=o(" \u2014 "),bN=a("a"),k5o=o("BigBirdForMaskedLM"),S5o=o(" (BigBird model)"),R5o=l(),eb=a("li"),Ble=a("strong"),B5o=o("camembert"),P5o=o(" \u2014 "),FN=a("a"),I5o=o("CamembertForMaskedLM"),q5o=o(" (CamemBERT model)"),N5o=l(),ob=a("li"),Ple=a("strong"),j5o=o("convbert"),D5o=o(" \u2014 "),vN=a("a"),G5o=o("ConvBertForMaskedLM"),O5o=o(" (ConvBERT model)"),V5o=l(),rb=a("li"),Ile=a("strong"),X5o=o("data2vec-text"),z5o=o(" \u2014 "),TN=a("a"),Q5o=o("Data2VecTextForMaskedLM"),W5o=o(" (Data2VecText model)"),H5o=l(),tb=a("li"),qle=a("strong"),U5o=o("deberta"),J5o=o(" \u2014 "),MN=a("a"),Y5o=o("DebertaForMaskedLM"),K5o=o(" (DeBERTa model)"),Z5o=l(),ab=a("li"),Nle=a("strong"),eCo=o("deberta-v2"),oCo=o(" \u2014 "),EN=a("a"),rCo=o("DebertaV2ForMaskedLM"),tCo=o(" (DeBERTa-v2 model)"),aCo=l(),nb=a("li"),jle=a("strong"),nCo=o("distilbert"),sCo=o(" \u2014 "),CN=a("a"),lCo=o("DistilBertForMaskedLM"),iCo=o(" (DistilBERT model)"),dCo=l(),sb=a("li"),Dle=a("strong"),cCo=o("electra"),mCo=o(" \u2014 "),wN=a("a"),fCo=o("ElectraForMaskedLM"),gCo=o(" (ELECTRA model)"),hCo=l(),lb=a("li"),Gle=a("strong"),uCo=o("flaubert"),pCo=o(" \u2014 "),AN=a("a"),_Co=o("FlaubertWithLMHeadModel"),bCo=o(" (FlauBERT model)"),FCo=l(),ib=a("li"),Ole=a("strong"),vCo=o("fnet"),TCo=o(" \u2014 "),yN=a("a"),MCo=o("FNetForMaskedLM"),ECo=o(" (FNet model)"),CCo=l(),db=a("li"),Vle=a("strong"),wCo=o("funnel"),ACo=o(" \u2014 "),LN=a("a"),yCo=o("FunnelForMaskedLM"),LCo=o(" (Funnel Transformer model)"),xCo=l(),cb=a("li"),Xle=a("strong"),$Co=o("ibert"),kCo=o(" \u2014 "),xN=a("a"),SCo=o("IBertForMaskedLM"),RCo=o(" (I-BERT model)"),BCo=l(),mb=a("li"),zle=a("strong"),PCo=o("layoutlm"),ICo=o(" \u2014 "),$N=a("a"),qCo=o("LayoutLMForMaskedLM"),NCo=o(" (LayoutLM model)"),jCo=l(),fb=a("li"),Qle=a("strong"),DCo=o("longformer"),GCo=o(" \u2014 "),kN=a("a"),OCo=o("LongformerForMaskedLM"),VCo=o(" (Longformer model)"),XCo=l(),gb=a("li"),Wle=a("strong"),zCo=o("mbart"),QCo=o(" \u2014 "),SN=a("a"),WCo=o("MBartForConditionalGeneration"),HCo=o(" (mBART model)"),UCo=l(),hb=a("li"),Hle=a("strong"),JCo=o("megatron-bert"),YCo=o(" \u2014 "),RN=a("a"),KCo=o("MegatronBertForMaskedLM"),ZCo=o(" (MegatronBert model)"),e3o=l(),ub=a("li"),Ule=a("strong"),o3o=o("mobilebert"),r3o=o(" \u2014 "),BN=a("a"),t3o=o("MobileBertForMaskedLM"),a3o=o(" (MobileBERT model)"),n3o=l(),pb=a("li"),Jle=a("strong"),s3o=o("mpnet"),l3o=o(" \u2014 "),PN=a("a"),i3o=o("MPNetForMaskedLM"),d3o=o(" (MPNet model)"),c3o=l(),_b=a("li"),Yle=a("strong"),m3o=o("nystromformer"),f3o=o(" \u2014 "),IN=a("a"),g3o=o("NystromformerForMaskedLM"),h3o=o(" (Nystromformer model)"),u3o=l(),bb=a("li"),Kle=a("strong"),p3o=o("perceiver"),_3o=o(" \u2014 "),qN=a("a"),b3o=o("PerceiverForMaskedLM"),F3o=o(" (Perceiver model)"),v3o=l(),Fb=a("li"),Zle=a("strong"),T3o=o("qdqbert"),M3o=o(" \u2014 "),NN=a("a"),E3o=o("QDQBertForMaskedLM"),C3o=o(" (QDQBert model)"),w3o=l(),vb=a("li"),eie=a("strong"),A3o=o("reformer"),y3o=o(" \u2014 "),jN=a("a"),L3o=o("ReformerForMaskedLM"),x3o=o(" (Reformer model)"),$3o=l(),Tb=a("li"),oie=a("strong"),k3o=o("rembert"),S3o=o(" \u2014 "),DN=a("a"),R3o=o("RemBertForMaskedLM"),B3o=o(" (RemBERT model)"),P3o=l(),Mb=a("li"),rie=a("strong"),I3o=o("roberta"),q3o=o(" \u2014 "),GN=a("a"),N3o=o("RobertaForMaskedLM"),j3o=o(" (RoBERTa model)"),D3o=l(),Eb=a("li"),tie=a("strong"),G3o=o("roformer"),O3o=o(" \u2014 "),ON=a("a"),V3o=o("RoFormerForMaskedLM"),X3o=o(" (RoFormer model)"),z3o=l(),Cb=a("li"),aie=a("strong"),Q3o=o("squeezebert"),W3o=o(" \u2014 "),VN=a("a"),H3o=o("SqueezeBertForMaskedLM"),U3o=o(" (SqueezeBERT model)"),J3o=l(),wb=a("li"),nie=a("strong"),Y3o=o("tapas"),K3o=o(" \u2014 "),XN=a("a"),Z3o=o("TapasForMaskedLM"),ewo=o(" (TAPAS model)"),owo=l(),Ab=a("li"),sie=a("strong"),rwo=o("wav2vec2"),two=o(" \u2014 "),lie=a("code"),awo=o("Wav2Vec2ForMaskedLM"),nwo=o(" (Wav2Vec2 model)"),swo=l(),yb=a("li"),iie=a("strong"),lwo=o("xlm"),iwo=o(" \u2014 "),zN=a("a"),dwo=o("XLMWithLMHeadModel"),cwo=o(" (XLM model)"),mwo=l(),Lb=a("li"),die=a("strong"),fwo=o("xlm-roberta"),gwo=o(" \u2014 "),QN=a("a"),hwo=o("XLMRobertaForMaskedLM"),uwo=o(" (XLM-RoBERTa model)"),pwo=l(),xb=a("li"),cie=a("strong"),_wo=o("xlm-roberta-xl"),bwo=o(" \u2014 "),WN=a("a"),Fwo=o("XLMRobertaXLForMaskedLM"),vwo=o(" (XLM-RoBERTa-XL model)"),Two=l(),$b=a("li"),mie=a("strong"),Mwo=o("yoso"),Ewo=o(" \u2014 "),HN=a("a"),Cwo=o("YosoForMaskedLM"),wwo=o(" (YOSO model)"),Awo=l(),kb=a("p"),ywo=o("The model is set in evaluation mode by default using "),fie=a("code"),Lwo=o("model.eval()"),xwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),$wo=o("model.train()"),kwo=l(),v(Sb.$$.fragment),cBe=l(),yi=a("h2"),Rb=a("a"),hie=a("span"),v(dy.$$.fragment),Swo=l(),uie=a("span"),Rwo=o("AutoModelForSeq2SeqLM"),mBe=l(),$o=a("div"),v(cy.$$.fragment),Bwo=l(),Li=a("p"),Pwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UN=a("a"),Iwo=o("from_pretrained()"),qwo=o(" class method or the "),JN=a("a"),Nwo=o("from_config()"),jwo=o(` class
method.`),Dwo=l(),my=a("p"),Gwo=o("This class cannot be instantiated directly using "),pie=a("code"),Owo=o("__init__()"),Vwo=o(" (throws an error)."),Xwo=l(),rt=a("div"),v(fy.$$.fragment),zwo=l(),_ie=a("p"),Qwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wwo=l(),xi=a("p"),Hwo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),Uwo=o("not"),Jwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" to load the model weights."),Zwo=l(),v(Bb.$$.fragment),eAo=l(),Je=a("div"),v(gy.$$.fragment),oAo=l(),Fie=a("p"),rAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tAo=l(),Aa=a("p"),aAo=o("The model class to instantiate is selected based on the "),vie=a("code"),nAo=o("model_type"),sAo=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),lAo=o("pretrained_model_name_or_path"),iAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),dAo=o("pretrained_model_name_or_path"),cAo=o(":"),mAo=l(),he=a("ul"),Pb=a("li"),Eie=a("strong"),fAo=o("bart"),gAo=o(" \u2014 "),KN=a("a"),hAo=o("BartForConditionalGeneration"),uAo=o(" (BART model)"),pAo=l(),Ib=a("li"),Cie=a("strong"),_Ao=o("bigbird_pegasus"),bAo=o(" \u2014 "),ZN=a("a"),FAo=o("BigBirdPegasusForConditionalGeneration"),vAo=o(" (BigBirdPegasus model)"),TAo=l(),qb=a("li"),wie=a("strong"),MAo=o("blenderbot"),EAo=o(" \u2014 "),ej=a("a"),CAo=o("BlenderbotForConditionalGeneration"),wAo=o(" (Blenderbot model)"),AAo=l(),Nb=a("li"),Aie=a("strong"),yAo=o("blenderbot-small"),LAo=o(" \u2014 "),oj=a("a"),xAo=o("BlenderbotSmallForConditionalGeneration"),$Ao=o(" (BlenderbotSmall model)"),kAo=l(),jb=a("li"),yie=a("strong"),SAo=o("encoder-decoder"),RAo=o(" \u2014 "),rj=a("a"),BAo=o("EncoderDecoderModel"),PAo=o(" (Encoder decoder model)"),IAo=l(),Db=a("li"),Lie=a("strong"),qAo=o("fsmt"),NAo=o(" \u2014 "),tj=a("a"),jAo=o("FSMTForConditionalGeneration"),DAo=o(" (FairSeq Machine-Translation model)"),GAo=l(),Gb=a("li"),xie=a("strong"),OAo=o("led"),VAo=o(" \u2014 "),aj=a("a"),XAo=o("LEDForConditionalGeneration"),zAo=o(" (LED model)"),QAo=l(),Ob=a("li"),$ie=a("strong"),WAo=o("m2m_100"),HAo=o(" \u2014 "),nj=a("a"),UAo=o("M2M100ForConditionalGeneration"),JAo=o(" (M2M100 model)"),YAo=l(),Vb=a("li"),kie=a("strong"),KAo=o("marian"),ZAo=o(" \u2014 "),sj=a("a"),e0o=o("MarianMTModel"),o0o=o(" (Marian model)"),r0o=l(),Xb=a("li"),Sie=a("strong"),t0o=o("mbart"),a0o=o(" \u2014 "),lj=a("a"),n0o=o("MBartForConditionalGeneration"),s0o=o(" (mBART model)"),l0o=l(),zb=a("li"),Rie=a("strong"),i0o=o("mt5"),d0o=o(" \u2014 "),ij=a("a"),c0o=o("MT5ForConditionalGeneration"),m0o=o(" (mT5 model)"),f0o=l(),Qb=a("li"),Bie=a("strong"),g0o=o("pegasus"),h0o=o(" \u2014 "),dj=a("a"),u0o=o("PegasusForConditionalGeneration"),p0o=o(" (Pegasus model)"),_0o=l(),Wb=a("li"),Pie=a("strong"),b0o=o("plbart"),F0o=o(" \u2014 "),cj=a("a"),v0o=o("PLBartForConditionalGeneration"),T0o=o(" (PLBart model)"),M0o=l(),Hb=a("li"),Iie=a("strong"),E0o=o("prophetnet"),C0o=o(" \u2014 "),mj=a("a"),w0o=o("ProphetNetForConditionalGeneration"),A0o=o(" (ProphetNet model)"),y0o=l(),Ub=a("li"),qie=a("strong"),L0o=o("t5"),x0o=o(" \u2014 "),fj=a("a"),$0o=o("T5ForConditionalGeneration"),k0o=o(" (T5 model)"),S0o=l(),Jb=a("li"),Nie=a("strong"),R0o=o("tapex"),B0o=o(" \u2014 "),gj=a("a"),P0o=o("BartForConditionalGeneration"),I0o=o(" (TAPEX model)"),q0o=l(),Yb=a("li"),jie=a("strong"),N0o=o("xlm-prophetnet"),j0o=o(" \u2014 "),hj=a("a"),D0o=o("XLMProphetNetForConditionalGeneration"),G0o=o(" (XLMProphetNet model)"),O0o=l(),Kb=a("p"),V0o=o("The model is set in evaluation mode by default using "),Die=a("code"),X0o=o("model.eval()"),z0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),Q0o=o("model.train()"),W0o=l(),v(Zb.$$.fragment),fBe=l(),$i=a("h2"),e2=a("a"),Oie=a("span"),v(hy.$$.fragment),H0o=l(),Vie=a("span"),U0o=o("AutoModelForSequenceClassification"),gBe=l(),ko=a("div"),v(uy.$$.fragment),J0o=l(),ki=a("p"),Y0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uj=a("a"),K0o=o("from_pretrained()"),Z0o=o(" class method or the "),pj=a("a"),e6o=o("from_config()"),o6o=o(` class
method.`),r6o=l(),py=a("p"),t6o=o("This class cannot be instantiated directly using "),Xie=a("code"),a6o=o("__init__()"),n6o=o(" (throws an error)."),s6o=l(),tt=a("div"),v(_y.$$.fragment),l6o=l(),zie=a("p"),i6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d6o=l(),Si=a("p"),c6o=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),m6o=o("not"),f6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),g6o=o("from_pretrained()"),h6o=o(" to load the model weights."),u6o=l(),v(o2.$$.fragment),p6o=l(),Ye=a("div"),v(by.$$.fragment),_6o=l(),Wie=a("p"),b6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F6o=l(),ya=a("p"),v6o=o("The model class to instantiate is selected based on the "),Hie=a("code"),T6o=o("model_type"),M6o=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),E6o=o("pretrained_model_name_or_path"),C6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),w6o=o("pretrained_model_name_or_path"),A6o=o(":"),y6o=l(),q=a("ul"),r2=a("li"),Yie=a("strong"),L6o=o("albert"),x6o=o(" \u2014 "),bj=a("a"),$6o=o("AlbertForSequenceClassification"),k6o=o(" (ALBERT model)"),S6o=l(),t2=a("li"),Kie=a("strong"),R6o=o("bart"),B6o=o(" \u2014 "),Fj=a("a"),P6o=o("BartForSequenceClassification"),I6o=o(" (BART model)"),q6o=l(),a2=a("li"),Zie=a("strong"),N6o=o("bert"),j6o=o(" \u2014 "),vj=a("a"),D6o=o("BertForSequenceClassification"),G6o=o(" (BERT model)"),O6o=l(),n2=a("li"),ede=a("strong"),V6o=o("big_bird"),X6o=o(" \u2014 "),Tj=a("a"),z6o=o("BigBirdForSequenceClassification"),Q6o=o(" (BigBird model)"),W6o=l(),s2=a("li"),ode=a("strong"),H6o=o("bigbird_pegasus"),U6o=o(" \u2014 "),Mj=a("a"),J6o=o("BigBirdPegasusForSequenceClassification"),Y6o=o(" (BigBirdPegasus model)"),K6o=l(),l2=a("li"),rde=a("strong"),Z6o=o("camembert"),eyo=o(" \u2014 "),Ej=a("a"),oyo=o("CamembertForSequenceClassification"),ryo=o(" (CamemBERT model)"),tyo=l(),i2=a("li"),tde=a("strong"),ayo=o("canine"),nyo=o(" \u2014 "),Cj=a("a"),syo=o("CanineForSequenceClassification"),lyo=o(" (Canine model)"),iyo=l(),d2=a("li"),ade=a("strong"),dyo=o("convbert"),cyo=o(" \u2014 "),wj=a("a"),myo=o("ConvBertForSequenceClassification"),fyo=o(" (ConvBERT model)"),gyo=l(),c2=a("li"),nde=a("strong"),hyo=o("ctrl"),uyo=o(" \u2014 "),Aj=a("a"),pyo=o("CTRLForSequenceClassification"),_yo=o(" (CTRL model)"),byo=l(),m2=a("li"),sde=a("strong"),Fyo=o("data2vec-text"),vyo=o(" \u2014 "),yj=a("a"),Tyo=o("Data2VecTextForSequenceClassification"),Myo=o(" (Data2VecText model)"),Eyo=l(),f2=a("li"),lde=a("strong"),Cyo=o("deberta"),wyo=o(" \u2014 "),Lj=a("a"),Ayo=o("DebertaForSequenceClassification"),yyo=o(" (DeBERTa model)"),Lyo=l(),g2=a("li"),ide=a("strong"),xyo=o("deberta-v2"),$yo=o(" \u2014 "),xj=a("a"),kyo=o("DebertaV2ForSequenceClassification"),Syo=o(" (DeBERTa-v2 model)"),Ryo=l(),h2=a("li"),dde=a("strong"),Byo=o("distilbert"),Pyo=o(" \u2014 "),$j=a("a"),Iyo=o("DistilBertForSequenceClassification"),qyo=o(" (DistilBERT model)"),Nyo=l(),u2=a("li"),cde=a("strong"),jyo=o("electra"),Dyo=o(" \u2014 "),kj=a("a"),Gyo=o("ElectraForSequenceClassification"),Oyo=o(" (ELECTRA model)"),Vyo=l(),p2=a("li"),mde=a("strong"),Xyo=o("flaubert"),zyo=o(" \u2014 "),Sj=a("a"),Qyo=o("FlaubertForSequenceClassification"),Wyo=o(" (FlauBERT model)"),Hyo=l(),_2=a("li"),fde=a("strong"),Uyo=o("fnet"),Jyo=o(" \u2014 "),Rj=a("a"),Yyo=o("FNetForSequenceClassification"),Kyo=o(" (FNet model)"),Zyo=l(),b2=a("li"),gde=a("strong"),eLo=o("funnel"),oLo=o(" \u2014 "),Bj=a("a"),rLo=o("FunnelForSequenceClassification"),tLo=o(" (Funnel Transformer model)"),aLo=l(),F2=a("li"),hde=a("strong"),nLo=o("gpt2"),sLo=o(" \u2014 "),Pj=a("a"),lLo=o("GPT2ForSequenceClassification"),iLo=o(" (OpenAI GPT-2 model)"),dLo=l(),v2=a("li"),ude=a("strong"),cLo=o("gpt_neo"),mLo=o(" \u2014 "),Ij=a("a"),fLo=o("GPTNeoForSequenceClassification"),gLo=o(" (GPT Neo model)"),hLo=l(),T2=a("li"),pde=a("strong"),uLo=o("gptj"),pLo=o(" \u2014 "),qj=a("a"),_Lo=o("GPTJForSequenceClassification"),bLo=o(" (GPT-J model)"),FLo=l(),M2=a("li"),_de=a("strong"),vLo=o("ibert"),TLo=o(" \u2014 "),Nj=a("a"),MLo=o("IBertForSequenceClassification"),ELo=o(" (I-BERT model)"),CLo=l(),E2=a("li"),bde=a("strong"),wLo=o("layoutlm"),ALo=o(" \u2014 "),jj=a("a"),yLo=o("LayoutLMForSequenceClassification"),LLo=o(" (LayoutLM model)"),xLo=l(),C2=a("li"),Fde=a("strong"),$Lo=o("layoutlmv2"),kLo=o(" \u2014 "),Dj=a("a"),SLo=o("LayoutLMv2ForSequenceClassification"),RLo=o(" (LayoutLMv2 model)"),BLo=l(),w2=a("li"),vde=a("strong"),PLo=o("led"),ILo=o(" \u2014 "),Gj=a("a"),qLo=o("LEDForSequenceClassification"),NLo=o(" (LED model)"),jLo=l(),A2=a("li"),Tde=a("strong"),DLo=o("longformer"),GLo=o(" \u2014 "),Oj=a("a"),OLo=o("LongformerForSequenceClassification"),VLo=o(" (Longformer model)"),XLo=l(),y2=a("li"),Mde=a("strong"),zLo=o("mbart"),QLo=o(" \u2014 "),Vj=a("a"),WLo=o("MBartForSequenceClassification"),HLo=o(" (mBART model)"),ULo=l(),L2=a("li"),Ede=a("strong"),JLo=o("megatron-bert"),YLo=o(" \u2014 "),Xj=a("a"),KLo=o("MegatronBertForSequenceClassification"),ZLo=o(" (MegatronBert model)"),e8o=l(),x2=a("li"),Cde=a("strong"),o8o=o("mobilebert"),r8o=o(" \u2014 "),zj=a("a"),t8o=o("MobileBertForSequenceClassification"),a8o=o(" (MobileBERT model)"),n8o=l(),$2=a("li"),wde=a("strong"),s8o=o("mpnet"),l8o=o(" \u2014 "),Qj=a("a"),i8o=o("MPNetForSequenceClassification"),d8o=o(" (MPNet model)"),c8o=l(),k2=a("li"),Ade=a("strong"),m8o=o("nystromformer"),f8o=o(" \u2014 "),Wj=a("a"),g8o=o("NystromformerForSequenceClassification"),h8o=o(" (Nystromformer model)"),u8o=l(),S2=a("li"),yde=a("strong"),p8o=o("openai-gpt"),_8o=o(" \u2014 "),Hj=a("a"),b8o=o("OpenAIGPTForSequenceClassification"),F8o=o(" (OpenAI GPT model)"),v8o=l(),R2=a("li"),Lde=a("strong"),T8o=o("perceiver"),M8o=o(" \u2014 "),Uj=a("a"),E8o=o("PerceiverForSequenceClassification"),C8o=o(" (Perceiver model)"),w8o=l(),B2=a("li"),xde=a("strong"),A8o=o("plbart"),y8o=o(" \u2014 "),Jj=a("a"),L8o=o("PLBartForSequenceClassification"),x8o=o(" (PLBart model)"),$8o=l(),P2=a("li"),$de=a("strong"),k8o=o("qdqbert"),S8o=o(" \u2014 "),Yj=a("a"),R8o=o("QDQBertForSequenceClassification"),B8o=o(" (QDQBert model)"),P8o=l(),I2=a("li"),kde=a("strong"),I8o=o("reformer"),q8o=o(" \u2014 "),Kj=a("a"),N8o=o("ReformerForSequenceClassification"),j8o=o(" (Reformer model)"),D8o=l(),q2=a("li"),Sde=a("strong"),G8o=o("rembert"),O8o=o(" \u2014 "),Zj=a("a"),V8o=o("RemBertForSequenceClassification"),X8o=o(" (RemBERT model)"),z8o=l(),N2=a("li"),Rde=a("strong"),Q8o=o("roberta"),W8o=o(" \u2014 "),eD=a("a"),H8o=o("RobertaForSequenceClassification"),U8o=o(" (RoBERTa model)"),J8o=l(),j2=a("li"),Bde=a("strong"),Y8o=o("roformer"),K8o=o(" \u2014 "),oD=a("a"),Z8o=o("RoFormerForSequenceClassification"),e7o=o(" (RoFormer model)"),o7o=l(),D2=a("li"),Pde=a("strong"),r7o=o("squeezebert"),t7o=o(" \u2014 "),rD=a("a"),a7o=o("SqueezeBertForSequenceClassification"),n7o=o(" (SqueezeBERT model)"),s7o=l(),G2=a("li"),Ide=a("strong"),l7o=o("tapas"),i7o=o(" \u2014 "),tD=a("a"),d7o=o("TapasForSequenceClassification"),c7o=o(" (TAPAS model)"),m7o=l(),O2=a("li"),qde=a("strong"),f7o=o("tapex"),g7o=o(" \u2014 "),aD=a("a"),h7o=o("BartForSequenceClassification"),u7o=o(" (TAPEX model)"),p7o=l(),V2=a("li"),Nde=a("strong"),_7o=o("transfo-xl"),b7o=o(" \u2014 "),nD=a("a"),F7o=o("TransfoXLForSequenceClassification"),v7o=o(" (Transformer-XL model)"),T7o=l(),X2=a("li"),jde=a("strong"),M7o=o("xlm"),E7o=o(" \u2014 "),sD=a("a"),C7o=o("XLMForSequenceClassification"),w7o=o(" (XLM model)"),A7o=l(),z2=a("li"),Dde=a("strong"),y7o=o("xlm-roberta"),L7o=o(" \u2014 "),lD=a("a"),x7o=o("XLMRobertaForSequenceClassification"),$7o=o(" (XLM-RoBERTa model)"),k7o=l(),Q2=a("li"),Gde=a("strong"),S7o=o("xlm-roberta-xl"),R7o=o(" \u2014 "),iD=a("a"),B7o=o("XLMRobertaXLForSequenceClassification"),P7o=o(" (XLM-RoBERTa-XL model)"),I7o=l(),W2=a("li"),Ode=a("strong"),q7o=o("xlnet"),N7o=o(" \u2014 "),dD=a("a"),j7o=o("XLNetForSequenceClassification"),D7o=o(" (XLNet model)"),G7o=l(),H2=a("li"),Vde=a("strong"),O7o=o("yoso"),V7o=o(" \u2014 "),cD=a("a"),X7o=o("YosoForSequenceClassification"),z7o=o(" (YOSO model)"),Q7o=l(),U2=a("p"),W7o=o("The model is set in evaluation mode by default using "),Xde=a("code"),H7o=o("model.eval()"),U7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),J7o=o("model.train()"),Y7o=l(),v(J2.$$.fragment),hBe=l(),Ri=a("h2"),Y2=a("a"),Qde=a("span"),v(Fy.$$.fragment),K7o=l(),Wde=a("span"),Z7o=o("AutoModelForMultipleChoice"),uBe=l(),So=a("div"),v(vy.$$.fragment),exo=l(),Bi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mD=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),fD=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),Ty=a("p"),lxo=o("This class cannot be instantiated directly using "),Hde=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),at=a("div"),v(My.$$.fragment),mxo=l(),Ude=a("p"),fxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gxo=l(),Pi=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),Jde=a("strong"),uxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),Fxo=l(),v(K2.$$.fragment),vxo=l(),Ke=a("div"),v(Ey.$$.fragment),Txo=l(),Yde=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Exo=l(),La=a("p"),Cxo=o("The model class to instantiate is selected based on the "),Kde=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),yxo=o("pretrained_model_name_or_path"),Lxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),Y=a("ul"),Z2=a("li"),oce=a("strong"),Sxo=o("albert"),Rxo=o(" \u2014 "),hD=a("a"),Bxo=o("AlbertForMultipleChoice"),Pxo=o(" (ALBERT model)"),Ixo=l(),eF=a("li"),rce=a("strong"),qxo=o("bert"),Nxo=o(" \u2014 "),uD=a("a"),jxo=o("BertForMultipleChoice"),Dxo=o(" (BERT model)"),Gxo=l(),oF=a("li"),tce=a("strong"),Oxo=o("big_bird"),Vxo=o(" \u2014 "),pD=a("a"),Xxo=o("BigBirdForMultipleChoice"),zxo=o(" (BigBird model)"),Qxo=l(),rF=a("li"),ace=a("strong"),Wxo=o("camembert"),Hxo=o(" \u2014 "),_D=a("a"),Uxo=o("CamembertForMultipleChoice"),Jxo=o(" (CamemBERT model)"),Yxo=l(),tF=a("li"),nce=a("strong"),Kxo=o("canine"),Zxo=o(" \u2014 "),bD=a("a"),e9o=o("CanineForMultipleChoice"),o9o=o(" (Canine model)"),r9o=l(),aF=a("li"),sce=a("strong"),t9o=o("convbert"),a9o=o(" \u2014 "),FD=a("a"),n9o=o("ConvBertForMultipleChoice"),s9o=o(" (ConvBERT model)"),l9o=l(),nF=a("li"),lce=a("strong"),i9o=o("data2vec-text"),d9o=o(" \u2014 "),vD=a("a"),c9o=o("Data2VecTextForMultipleChoice"),m9o=o(" (Data2VecText model)"),f9o=l(),sF=a("li"),ice=a("strong"),g9o=o("distilbert"),h9o=o(" \u2014 "),TD=a("a"),u9o=o("DistilBertForMultipleChoice"),p9o=o(" (DistilBERT model)"),_9o=l(),lF=a("li"),dce=a("strong"),b9o=o("electra"),F9o=o(" \u2014 "),MD=a("a"),v9o=o("ElectraForMultipleChoice"),T9o=o(" (ELECTRA model)"),M9o=l(),iF=a("li"),cce=a("strong"),E9o=o("flaubert"),C9o=o(" \u2014 "),ED=a("a"),w9o=o("FlaubertForMultipleChoice"),A9o=o(" (FlauBERT model)"),y9o=l(),dF=a("li"),mce=a("strong"),L9o=o("fnet"),x9o=o(" \u2014 "),CD=a("a"),$9o=o("FNetForMultipleChoice"),k9o=o(" (FNet model)"),S9o=l(),cF=a("li"),fce=a("strong"),R9o=o("funnel"),B9o=o(" \u2014 "),wD=a("a"),P9o=o("FunnelForMultipleChoice"),I9o=o(" (Funnel Transformer model)"),q9o=l(),mF=a("li"),gce=a("strong"),N9o=o("ibert"),j9o=o(" \u2014 "),AD=a("a"),D9o=o("IBertForMultipleChoice"),G9o=o(" (I-BERT model)"),O9o=l(),fF=a("li"),hce=a("strong"),V9o=o("longformer"),X9o=o(" \u2014 "),yD=a("a"),z9o=o("LongformerForMultipleChoice"),Q9o=o(" (Longformer model)"),W9o=l(),gF=a("li"),uce=a("strong"),H9o=o("megatron-bert"),U9o=o(" \u2014 "),LD=a("a"),J9o=o("MegatronBertForMultipleChoice"),Y9o=o(" (MegatronBert model)"),K9o=l(),hF=a("li"),pce=a("strong"),Z9o=o("mobilebert"),e$o=o(" \u2014 "),xD=a("a"),o$o=o("MobileBertForMultipleChoice"),r$o=o(" (MobileBERT model)"),t$o=l(),uF=a("li"),_ce=a("strong"),a$o=o("mpnet"),n$o=o(" \u2014 "),$D=a("a"),s$o=o("MPNetForMultipleChoice"),l$o=o(" (MPNet model)"),i$o=l(),pF=a("li"),bce=a("strong"),d$o=o("nystromformer"),c$o=o(" \u2014 "),kD=a("a"),m$o=o("NystromformerForMultipleChoice"),f$o=o(" (Nystromformer model)"),g$o=l(),_F=a("li"),Fce=a("strong"),h$o=o("qdqbert"),u$o=o(" \u2014 "),SD=a("a"),p$o=o("QDQBertForMultipleChoice"),_$o=o(" (QDQBert model)"),b$o=l(),bF=a("li"),vce=a("strong"),F$o=o("rembert"),v$o=o(" \u2014 "),RD=a("a"),T$o=o("RemBertForMultipleChoice"),M$o=o(" (RemBERT model)"),E$o=l(),FF=a("li"),Tce=a("strong"),C$o=o("roberta"),w$o=o(" \u2014 "),BD=a("a"),A$o=o("RobertaForMultipleChoice"),y$o=o(" (RoBERTa model)"),L$o=l(),vF=a("li"),Mce=a("strong"),x$o=o("roformer"),$$o=o(" \u2014 "),PD=a("a"),k$o=o("RoFormerForMultipleChoice"),S$o=o(" (RoFormer model)"),R$o=l(),TF=a("li"),Ece=a("strong"),B$o=o("squeezebert"),P$o=o(" \u2014 "),ID=a("a"),I$o=o("SqueezeBertForMultipleChoice"),q$o=o(" (SqueezeBERT model)"),N$o=l(),MF=a("li"),Cce=a("strong"),j$o=o("xlm"),D$o=o(" \u2014 "),qD=a("a"),G$o=o("XLMForMultipleChoice"),O$o=o(" (XLM model)"),V$o=l(),EF=a("li"),wce=a("strong"),X$o=o("xlm-roberta"),z$o=o(" \u2014 "),ND=a("a"),Q$o=o("XLMRobertaForMultipleChoice"),W$o=o(" (XLM-RoBERTa model)"),H$o=l(),CF=a("li"),Ace=a("strong"),U$o=o("xlm-roberta-xl"),J$o=o(" \u2014 "),jD=a("a"),Y$o=o("XLMRobertaXLForMultipleChoice"),K$o=o(" (XLM-RoBERTa-XL model)"),Z$o=l(),wF=a("li"),yce=a("strong"),eko=o("xlnet"),oko=o(" \u2014 "),DD=a("a"),rko=o("XLNetForMultipleChoice"),tko=o(" (XLNet model)"),ako=l(),AF=a("li"),Lce=a("strong"),nko=o("yoso"),sko=o(" \u2014 "),GD=a("a"),lko=o("YosoForMultipleChoice"),iko=o(" (YOSO model)"),dko=l(),yF=a("p"),cko=o("The model is set in evaluation mode by default using "),xce=a("code"),mko=o("model.eval()"),fko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),gko=o("model.train()"),hko=l(),v(LF.$$.fragment),pBe=l(),Ii=a("h2"),xF=a("a"),kce=a("span"),v(Cy.$$.fragment),uko=l(),Sce=a("span"),pko=o("AutoModelForNextSentencePrediction"),_Be=l(),Ro=a("div"),v(wy.$$.fragment),_ko=l(),qi=a("p"),bko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OD=a("a"),Fko=o("from_pretrained()"),vko=o(" class method or the "),VD=a("a"),Tko=o("from_config()"),Mko=o(` class
method.`),Eko=l(),Ay=a("p"),Cko=o("This class cannot be instantiated directly using "),Rce=a("code"),wko=o("__init__()"),Ako=o(" (throws an error)."),yko=l(),nt=a("div"),v(yy.$$.fragment),Lko=l(),Bce=a("p"),xko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$ko=l(),Ni=a("p"),kko=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),Sko=o("not"),Rko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),Bko=o("from_pretrained()"),Pko=o(" to load the model weights."),Iko=l(),v($F.$$.fragment),qko=l(),Ze=a("div"),v(Ly.$$.fragment),Nko=l(),Ice=a("p"),jko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dko=l(),xa=a("p"),Gko=o("The model class to instantiate is selected based on the "),qce=a("code"),Oko=o("model_type"),Vko=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),Qko=o("pretrained_model_name_or_path"),Wko=o(":"),Hko=l(),Wr=a("ul"),kF=a("li"),Dce=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),zD=a("a"),Yko=o("BertForNextSentencePrediction"),Kko=o(" (BERT model)"),Zko=l(),SF=a("li"),Gce=a("strong"),eSo=o("fnet"),oSo=o(" \u2014 "),QD=a("a"),rSo=o("FNetForNextSentencePrediction"),tSo=o(" (FNet model)"),aSo=l(),RF=a("li"),Oce=a("strong"),nSo=o("megatron-bert"),sSo=o(" \u2014 "),WD=a("a"),lSo=o("MegatronBertForNextSentencePrediction"),iSo=o(" (MegatronBert model)"),dSo=l(),BF=a("li"),Vce=a("strong"),cSo=o("mobilebert"),mSo=o(" \u2014 "),HD=a("a"),fSo=o("MobileBertForNextSentencePrediction"),gSo=o(" (MobileBERT model)"),hSo=l(),PF=a("li"),Xce=a("strong"),uSo=o("qdqbert"),pSo=o(" \u2014 "),UD=a("a"),_So=o("QDQBertForNextSentencePrediction"),bSo=o(" (QDQBert model)"),FSo=l(),IF=a("p"),vSo=o("The model is set in evaluation mode by default using "),zce=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),ESo=o("model.train()"),CSo=l(),v(qF.$$.fragment),bBe=l(),ji=a("h2"),NF=a("a"),Wce=a("span"),v(xy.$$.fragment),wSo=l(),Hce=a("span"),ASo=o("AutoModelForTokenClassification"),FBe=l(),Bo=a("div"),v($y.$$.fragment),ySo=l(),Di=a("p"),LSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JD=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),YD=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),ky=a("p"),BSo=o("This class cannot be instantiated directly using "),Uce=a("code"),PSo=o("__init__()"),ISo=o(" (throws an error)."),qSo=l(),st=a("div"),v(Sy.$$.fragment),NSo=l(),Jce=a("p"),jSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DSo=l(),Gi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),QSo=l(),v(jF.$$.fragment),WSo=l(),eo=a("div"),v(Ry.$$.fragment),HSo=l(),Kce=a("p"),USo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JSo=l(),$a=a("p"),YSo=o("The model class to instantiate is selected based on the "),Zce=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),U=a("ul"),DF=a("li"),rme=a("strong"),nRo=o("albert"),sRo=o(" \u2014 "),ZD=a("a"),lRo=o("AlbertForTokenClassification"),iRo=o(" (ALBERT model)"),dRo=l(),GF=a("li"),tme=a("strong"),cRo=o("bert"),mRo=o(" \u2014 "),eG=a("a"),fRo=o("BertForTokenClassification"),gRo=o(" (BERT model)"),hRo=l(),OF=a("li"),ame=a("strong"),uRo=o("big_bird"),pRo=o(" \u2014 "),oG=a("a"),_Ro=o("BigBirdForTokenClassification"),bRo=o(" (BigBird model)"),FRo=l(),VF=a("li"),nme=a("strong"),vRo=o("camembert"),TRo=o(" \u2014 "),rG=a("a"),MRo=o("CamembertForTokenClassification"),ERo=o(" (CamemBERT model)"),CRo=l(),XF=a("li"),sme=a("strong"),wRo=o("canine"),ARo=o(" \u2014 "),tG=a("a"),yRo=o("CanineForTokenClassification"),LRo=o(" (Canine model)"),xRo=l(),zF=a("li"),lme=a("strong"),$Ro=o("convbert"),kRo=o(" \u2014 "),aG=a("a"),SRo=o("ConvBertForTokenClassification"),RRo=o(" (ConvBERT model)"),BRo=l(),QF=a("li"),ime=a("strong"),PRo=o("data2vec-text"),IRo=o(" \u2014 "),nG=a("a"),qRo=o("Data2VecTextForTokenClassification"),NRo=o(" (Data2VecText model)"),jRo=l(),WF=a("li"),dme=a("strong"),DRo=o("deberta"),GRo=o(" \u2014 "),sG=a("a"),ORo=o("DebertaForTokenClassification"),VRo=o(" (DeBERTa model)"),XRo=l(),HF=a("li"),cme=a("strong"),zRo=o("deberta-v2"),QRo=o(" \u2014 "),lG=a("a"),WRo=o("DebertaV2ForTokenClassification"),HRo=o(" (DeBERTa-v2 model)"),URo=l(),UF=a("li"),mme=a("strong"),JRo=o("distilbert"),YRo=o(" \u2014 "),iG=a("a"),KRo=o("DistilBertForTokenClassification"),ZRo=o(" (DistilBERT model)"),eBo=l(),JF=a("li"),fme=a("strong"),oBo=o("electra"),rBo=o(" \u2014 "),dG=a("a"),tBo=o("ElectraForTokenClassification"),aBo=o(" (ELECTRA model)"),nBo=l(),YF=a("li"),gme=a("strong"),sBo=o("flaubert"),lBo=o(" \u2014 "),cG=a("a"),iBo=o("FlaubertForTokenClassification"),dBo=o(" (FlauBERT model)"),cBo=l(),KF=a("li"),hme=a("strong"),mBo=o("fnet"),fBo=o(" \u2014 "),mG=a("a"),gBo=o("FNetForTokenClassification"),hBo=o(" (FNet model)"),uBo=l(),ZF=a("li"),ume=a("strong"),pBo=o("funnel"),_Bo=o(" \u2014 "),fG=a("a"),bBo=o("FunnelForTokenClassification"),FBo=o(" (Funnel Transformer model)"),vBo=l(),ev=a("li"),pme=a("strong"),TBo=o("gpt2"),MBo=o(" \u2014 "),gG=a("a"),EBo=o("GPT2ForTokenClassification"),CBo=o(" (OpenAI GPT-2 model)"),wBo=l(),ov=a("li"),_me=a("strong"),ABo=o("ibert"),yBo=o(" \u2014 "),hG=a("a"),LBo=o("IBertForTokenClassification"),xBo=o(" (I-BERT model)"),$Bo=l(),rv=a("li"),bme=a("strong"),kBo=o("layoutlm"),SBo=o(" \u2014 "),uG=a("a"),RBo=o("LayoutLMForTokenClassification"),BBo=o(" (LayoutLM model)"),PBo=l(),tv=a("li"),Fme=a("strong"),IBo=o("layoutlmv2"),qBo=o(" \u2014 "),pG=a("a"),NBo=o("LayoutLMv2ForTokenClassification"),jBo=o(" (LayoutLMv2 model)"),DBo=l(),av=a("li"),vme=a("strong"),GBo=o("longformer"),OBo=o(" \u2014 "),_G=a("a"),VBo=o("LongformerForTokenClassification"),XBo=o(" (Longformer model)"),zBo=l(),nv=a("li"),Tme=a("strong"),QBo=o("megatron-bert"),WBo=o(" \u2014 "),bG=a("a"),HBo=o("MegatronBertForTokenClassification"),UBo=o(" (MegatronBert model)"),JBo=l(),sv=a("li"),Mme=a("strong"),YBo=o("mobilebert"),KBo=o(" \u2014 "),FG=a("a"),ZBo=o("MobileBertForTokenClassification"),ePo=o(" (MobileBERT model)"),oPo=l(),lv=a("li"),Eme=a("strong"),rPo=o("mpnet"),tPo=o(" \u2014 "),vG=a("a"),aPo=o("MPNetForTokenClassification"),nPo=o(" (MPNet model)"),sPo=l(),iv=a("li"),Cme=a("strong"),lPo=o("nystromformer"),iPo=o(" \u2014 "),TG=a("a"),dPo=o("NystromformerForTokenClassification"),cPo=o(" (Nystromformer model)"),mPo=l(),dv=a("li"),wme=a("strong"),fPo=o("qdqbert"),gPo=o(" \u2014 "),MG=a("a"),hPo=o("QDQBertForTokenClassification"),uPo=o(" (QDQBert model)"),pPo=l(),cv=a("li"),Ame=a("strong"),_Po=o("rembert"),bPo=o(" \u2014 "),EG=a("a"),FPo=o("RemBertForTokenClassification"),vPo=o(" (RemBERT model)"),TPo=l(),mv=a("li"),yme=a("strong"),MPo=o("roberta"),EPo=o(" \u2014 "),CG=a("a"),CPo=o("RobertaForTokenClassification"),wPo=o(" (RoBERTa model)"),APo=l(),fv=a("li"),Lme=a("strong"),yPo=o("roformer"),LPo=o(" \u2014 "),wG=a("a"),xPo=o("RoFormerForTokenClassification"),$Po=o(" (RoFormer model)"),kPo=l(),gv=a("li"),xme=a("strong"),SPo=o("squeezebert"),RPo=o(" \u2014 "),AG=a("a"),BPo=o("SqueezeBertForTokenClassification"),PPo=o(" (SqueezeBERT model)"),IPo=l(),hv=a("li"),$me=a("strong"),qPo=o("xlm"),NPo=o(" \u2014 "),yG=a("a"),jPo=o("XLMForTokenClassification"),DPo=o(" (XLM model)"),GPo=l(),uv=a("li"),kme=a("strong"),OPo=o("xlm-roberta"),VPo=o(" \u2014 "),LG=a("a"),XPo=o("XLMRobertaForTokenClassification"),zPo=o(" (XLM-RoBERTa model)"),QPo=l(),pv=a("li"),Sme=a("strong"),WPo=o("xlm-roberta-xl"),HPo=o(" \u2014 "),xG=a("a"),UPo=o("XLMRobertaXLForTokenClassification"),JPo=o(" (XLM-RoBERTa-XL model)"),YPo=l(),_v=a("li"),Rme=a("strong"),KPo=o("xlnet"),ZPo=o(" \u2014 "),$G=a("a"),eIo=o("XLNetForTokenClassification"),oIo=o(" (XLNet model)"),rIo=l(),bv=a("li"),Bme=a("strong"),tIo=o("yoso"),aIo=o(" \u2014 "),kG=a("a"),nIo=o("YosoForTokenClassification"),sIo=o(" (YOSO model)"),lIo=l(),Fv=a("p"),iIo=o("The model is set in evaluation mode by default using "),Pme=a("code"),dIo=o("model.eval()"),cIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),mIo=o("model.train()"),fIo=l(),v(vv.$$.fragment),vBe=l(),Oi=a("h2"),Tv=a("a"),qme=a("span"),v(By.$$.fragment),gIo=l(),Nme=a("span"),hIo=o("AutoModelForQuestionAnswering"),TBe=l(),Po=a("div"),v(Py.$$.fragment),uIo=l(),Vi=a("p"),pIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SG=a("a"),_Io=o("from_pretrained()"),bIo=o(" class method or the "),RG=a("a"),FIo=o("from_config()"),vIo=o(` class
method.`),TIo=l(),Iy=a("p"),MIo=o("This class cannot be instantiated directly using "),jme=a("code"),EIo=o("__init__()"),CIo=o(" (throws an error)."),wIo=l(),lt=a("div"),v(qy.$$.fragment),AIo=l(),Dme=a("p"),yIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LIo=l(),Xi=a("p"),xIo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),$Io=o("not"),kIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),SIo=o("from_pretrained()"),RIo=o(" to load the model weights."),BIo=l(),v(Mv.$$.fragment),PIo=l(),oo=a("div"),v(Ny.$$.fragment),IIo=l(),Ome=a("p"),qIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NIo=l(),ka=a("p"),jIo=o("The model class to instantiate is selected based on the "),Vme=a("code"),DIo=o("model_type"),GIo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),OIo=o("pretrained_model_name_or_path"),VIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),XIo=o("pretrained_model_name_or_path"),zIo=o(":"),QIo=l(),O=a("ul"),Ev=a("li"),Qme=a("strong"),WIo=o("albert"),HIo=o(" \u2014 "),PG=a("a"),UIo=o("AlbertForQuestionAnswering"),JIo=o(" (ALBERT model)"),YIo=l(),Cv=a("li"),Wme=a("strong"),KIo=o("bart"),ZIo=o(" \u2014 "),IG=a("a"),eqo=o("BartForQuestionAnswering"),oqo=o(" (BART model)"),rqo=l(),wv=a("li"),Hme=a("strong"),tqo=o("bert"),aqo=o(" \u2014 "),qG=a("a"),nqo=o("BertForQuestionAnswering"),sqo=o(" (BERT model)"),lqo=l(),Av=a("li"),Ume=a("strong"),iqo=o("big_bird"),dqo=o(" \u2014 "),NG=a("a"),cqo=o("BigBirdForQuestionAnswering"),mqo=o(" (BigBird model)"),fqo=l(),yv=a("li"),Jme=a("strong"),gqo=o("bigbird_pegasus"),hqo=o(" \u2014 "),jG=a("a"),uqo=o("BigBirdPegasusForQuestionAnswering"),pqo=o(" (BigBirdPegasus model)"),_qo=l(),Lv=a("li"),Yme=a("strong"),bqo=o("camembert"),Fqo=o(" \u2014 "),DG=a("a"),vqo=o("CamembertForQuestionAnswering"),Tqo=o(" (CamemBERT model)"),Mqo=l(),xv=a("li"),Kme=a("strong"),Eqo=o("canine"),Cqo=o(" \u2014 "),GG=a("a"),wqo=o("CanineForQuestionAnswering"),Aqo=o(" (Canine model)"),yqo=l(),$v=a("li"),Zme=a("strong"),Lqo=o("convbert"),xqo=o(" \u2014 "),OG=a("a"),$qo=o("ConvBertForQuestionAnswering"),kqo=o(" (ConvBERT model)"),Sqo=l(),kv=a("li"),efe=a("strong"),Rqo=o("data2vec-text"),Bqo=o(" \u2014 "),VG=a("a"),Pqo=o("Data2VecTextForQuestionAnswering"),Iqo=o(" (Data2VecText model)"),qqo=l(),Sv=a("li"),ofe=a("strong"),Nqo=o("deberta"),jqo=o(" \u2014 "),XG=a("a"),Dqo=o("DebertaForQuestionAnswering"),Gqo=o(" (DeBERTa model)"),Oqo=l(),Rv=a("li"),rfe=a("strong"),Vqo=o("deberta-v2"),Xqo=o(" \u2014 "),zG=a("a"),zqo=o("DebertaV2ForQuestionAnswering"),Qqo=o(" (DeBERTa-v2 model)"),Wqo=l(),Bv=a("li"),tfe=a("strong"),Hqo=o("distilbert"),Uqo=o(" \u2014 "),QG=a("a"),Jqo=o("DistilBertForQuestionAnswering"),Yqo=o(" (DistilBERT model)"),Kqo=l(),Pv=a("li"),afe=a("strong"),Zqo=o("electra"),eNo=o(" \u2014 "),WG=a("a"),oNo=o("ElectraForQuestionAnswering"),rNo=o(" (ELECTRA model)"),tNo=l(),Iv=a("li"),nfe=a("strong"),aNo=o("flaubert"),nNo=o(" \u2014 "),HG=a("a"),sNo=o("FlaubertForQuestionAnsweringSimple"),lNo=o(" (FlauBERT model)"),iNo=l(),qv=a("li"),sfe=a("strong"),dNo=o("fnet"),cNo=o(" \u2014 "),UG=a("a"),mNo=o("FNetForQuestionAnswering"),fNo=o(" (FNet model)"),gNo=l(),Nv=a("li"),lfe=a("strong"),hNo=o("funnel"),uNo=o(" \u2014 "),JG=a("a"),pNo=o("FunnelForQuestionAnswering"),_No=o(" (Funnel Transformer model)"),bNo=l(),jv=a("li"),ife=a("strong"),FNo=o("gptj"),vNo=o(" \u2014 "),YG=a("a"),TNo=o("GPTJForQuestionAnswering"),MNo=o(" (GPT-J model)"),ENo=l(),Dv=a("li"),dfe=a("strong"),CNo=o("ibert"),wNo=o(" \u2014 "),KG=a("a"),ANo=o("IBertForQuestionAnswering"),yNo=o(" (I-BERT model)"),LNo=l(),Gv=a("li"),cfe=a("strong"),xNo=o("layoutlmv2"),$No=o(" \u2014 "),ZG=a("a"),kNo=o("LayoutLMv2ForQuestionAnswering"),SNo=o(" (LayoutLMv2 model)"),RNo=l(),Ov=a("li"),mfe=a("strong"),BNo=o("led"),PNo=o(" \u2014 "),eO=a("a"),INo=o("LEDForQuestionAnswering"),qNo=o(" (LED model)"),NNo=l(),Vv=a("li"),ffe=a("strong"),jNo=o("longformer"),DNo=o(" \u2014 "),oO=a("a"),GNo=o("LongformerForQuestionAnswering"),ONo=o(" (Longformer model)"),VNo=l(),Xv=a("li"),gfe=a("strong"),XNo=o("lxmert"),zNo=o(" \u2014 "),rO=a("a"),QNo=o("LxmertForQuestionAnswering"),WNo=o(" (LXMERT model)"),HNo=l(),zv=a("li"),hfe=a("strong"),UNo=o("mbart"),JNo=o(" \u2014 "),tO=a("a"),YNo=o("MBartForQuestionAnswering"),KNo=o(" (mBART model)"),ZNo=l(),Qv=a("li"),ufe=a("strong"),ejo=o("megatron-bert"),ojo=o(" \u2014 "),aO=a("a"),rjo=o("MegatronBertForQuestionAnswering"),tjo=o(" (MegatronBert model)"),ajo=l(),Wv=a("li"),pfe=a("strong"),njo=o("mobilebert"),sjo=o(" \u2014 "),nO=a("a"),ljo=o("MobileBertForQuestionAnswering"),ijo=o(" (MobileBERT model)"),djo=l(),Hv=a("li"),_fe=a("strong"),cjo=o("mpnet"),mjo=o(" \u2014 "),sO=a("a"),fjo=o("MPNetForQuestionAnswering"),gjo=o(" (MPNet model)"),hjo=l(),Uv=a("li"),bfe=a("strong"),ujo=o("nystromformer"),pjo=o(" \u2014 "),lO=a("a"),_jo=o("NystromformerForQuestionAnswering"),bjo=o(" (Nystromformer model)"),Fjo=l(),Jv=a("li"),Ffe=a("strong"),vjo=o("qdqbert"),Tjo=o(" \u2014 "),iO=a("a"),Mjo=o("QDQBertForQuestionAnswering"),Ejo=o(" (QDQBert model)"),Cjo=l(),Yv=a("li"),vfe=a("strong"),wjo=o("reformer"),Ajo=o(" \u2014 "),dO=a("a"),yjo=o("ReformerForQuestionAnswering"),Ljo=o(" (Reformer model)"),xjo=l(),Kv=a("li"),Tfe=a("strong"),$jo=o("rembert"),kjo=o(" \u2014 "),cO=a("a"),Sjo=o("RemBertForQuestionAnswering"),Rjo=o(" (RemBERT model)"),Bjo=l(),Zv=a("li"),Mfe=a("strong"),Pjo=o("roberta"),Ijo=o(" \u2014 "),mO=a("a"),qjo=o("RobertaForQuestionAnswering"),Njo=o(" (RoBERTa model)"),jjo=l(),e1=a("li"),Efe=a("strong"),Djo=o("roformer"),Gjo=o(" \u2014 "),fO=a("a"),Ojo=o("RoFormerForQuestionAnswering"),Vjo=o(" (RoFormer model)"),Xjo=l(),o1=a("li"),Cfe=a("strong"),zjo=o("splinter"),Qjo=o(" \u2014 "),gO=a("a"),Wjo=o("SplinterForQuestionAnswering"),Hjo=o(" (Splinter model)"),Ujo=l(),r1=a("li"),wfe=a("strong"),Jjo=o("squeezebert"),Yjo=o(" \u2014 "),hO=a("a"),Kjo=o("SqueezeBertForQuestionAnswering"),Zjo=o(" (SqueezeBERT model)"),eDo=l(),t1=a("li"),Afe=a("strong"),oDo=o("xlm"),rDo=o(" \u2014 "),uO=a("a"),tDo=o("XLMForQuestionAnsweringSimple"),aDo=o(" (XLM model)"),nDo=l(),a1=a("li"),yfe=a("strong"),sDo=o("xlm-roberta"),lDo=o(" \u2014 "),pO=a("a"),iDo=o("XLMRobertaForQuestionAnswering"),dDo=o(" (XLM-RoBERTa model)"),cDo=l(),n1=a("li"),Lfe=a("strong"),mDo=o("xlm-roberta-xl"),fDo=o(" \u2014 "),_O=a("a"),gDo=o("XLMRobertaXLForQuestionAnswering"),hDo=o(" (XLM-RoBERTa-XL model)"),uDo=l(),s1=a("li"),xfe=a("strong"),pDo=o("xlnet"),_Do=o(" \u2014 "),bO=a("a"),bDo=o("XLNetForQuestionAnsweringSimple"),FDo=o(" (XLNet model)"),vDo=l(),l1=a("li"),$fe=a("strong"),TDo=o("yoso"),MDo=o(" \u2014 "),FO=a("a"),EDo=o("YosoForQuestionAnswering"),CDo=o(" (YOSO model)"),wDo=l(),i1=a("p"),ADo=o("The model is set in evaluation mode by default using "),kfe=a("code"),yDo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),xDo=o("model.train()"),$Do=l(),v(d1.$$.fragment),MBe=l(),zi=a("h2"),c1=a("a"),Rfe=a("span"),v(jy.$$.fragment),kDo=l(),Bfe=a("span"),SDo=o("AutoModelForTableQuestionAnswering"),EBe=l(),Io=a("div"),v(Dy.$$.fragment),RDo=l(),Qi=a("p"),BDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vO=a("a"),PDo=o("from_pretrained()"),IDo=o(" class method or the "),TO=a("a"),qDo=o("from_config()"),NDo=o(` class
method.`),jDo=l(),Gy=a("p"),DDo=o("This class cannot be instantiated directly using "),Pfe=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),it=a("div"),v(Oy.$$.fragment),XDo=l(),Ife=a("p"),zDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QDo=l(),Wi=a("p"),WDo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),v(m1.$$.fragment),ZDo=l(),ro=a("div"),v(Vy.$$.fragment),eGo=l(),Nfe=a("p"),oGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rGo=l(),Sa=a("p"),tGo=o("The model class to instantiate is selected based on the "),jfe=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),Ofe=a("ul"),f1=a("li"),Vfe=a("strong"),mGo=o("tapas"),fGo=o(" \u2014 "),EO=a("a"),gGo=o("TapasForQuestionAnswering"),hGo=o(" (TAPAS model)"),uGo=l(),g1=a("p"),pGo=o("The model is set in evaluation mode by default using "),Xfe=a("code"),_Go=o("model.eval()"),bGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),FGo=o("model.train()"),vGo=l(),v(h1.$$.fragment),CBe=l(),Hi=a("h2"),u1=a("a"),Qfe=a("span"),v(Xy.$$.fragment),TGo=l(),Wfe=a("span"),MGo=o("AutoModelForImageClassification"),wBe=l(),qo=a("div"),v(zy.$$.fragment),EGo=l(),Ui=a("p"),CGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CO=a("a"),wGo=o("from_pretrained()"),AGo=o(" class method or the "),wO=a("a"),yGo=o("from_config()"),LGo=o(` class
method.`),xGo=l(),Qy=a("p"),$Go=o("This class cannot be instantiated directly using "),Hfe=a("code"),kGo=o("__init__()"),SGo=o(" (throws an error)."),RGo=l(),dt=a("div"),v(Wy.$$.fragment),BGo=l(),Ufe=a("p"),PGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IGo=l(),Ji=a("p"),qGo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),NGo=o("not"),jGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),DGo=o("from_pretrained()"),GGo=o(" to load the model weights."),OGo=l(),v(p1.$$.fragment),VGo=l(),to=a("div"),v(Hy.$$.fragment),XGo=l(),Yfe=a("p"),zGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QGo=l(),Ra=a("p"),WGo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),HGo=o("model_type"),UGo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),KGo=o("pretrained_model_name_or_path"),ZGo=o(":"),eOo=l(),Fe=a("ul"),_1=a("li"),oge=a("strong"),oOo=o("beit"),rOo=o(" \u2014 "),yO=a("a"),tOo=o("BeitForImageClassification"),aOo=o(" (BEiT model)"),nOo=l(),b1=a("li"),rge=a("strong"),sOo=o("convnext"),lOo=o(" \u2014 "),LO=a("a"),iOo=o("ConvNextForImageClassification"),dOo=o(" (ConvNext model)"),cOo=l(),F1=a("li"),tge=a("strong"),mOo=o("data2vec-vision"),fOo=o(" \u2014 "),xO=a("a"),gOo=o("Data2VecVisionForImageClassification"),hOo=o(" (Data2VecVision model)"),uOo=l(),Ls=a("li"),age=a("strong"),pOo=o("deit"),_Oo=o(" \u2014 "),$O=a("a"),bOo=o("DeiTForImageClassification"),FOo=o(" or "),kO=a("a"),vOo=o("DeiTForImageClassificationWithTeacher"),TOo=o(" (DeiT model)"),MOo=l(),v1=a("li"),nge=a("strong"),EOo=o("imagegpt"),COo=o(" \u2014 "),SO=a("a"),wOo=o("ImageGPTForImageClassification"),AOo=o(" (ImageGPT model)"),yOo=l(),ct=a("li"),sge=a("strong"),LOo=o("perceiver"),xOo=o(" \u2014 "),RO=a("a"),$Oo=o("PerceiverForImageClassificationLearned"),kOo=o(" or "),BO=a("a"),SOo=o("PerceiverForImageClassificationFourier"),ROo=o(" or "),PO=a("a"),BOo=o("PerceiverForImageClassificationConvProcessing"),POo=o(" (Perceiver model)"),IOo=l(),T1=a("li"),lge=a("strong"),qOo=o("poolformer"),NOo=o(" \u2014 "),IO=a("a"),jOo=o("PoolFormerForImageClassification"),DOo=o(" (PoolFormer model)"),GOo=l(),M1=a("li"),ige=a("strong"),OOo=o("regnet"),VOo=o(" \u2014 "),qO=a("a"),XOo=o("RegNetForImageClassification"),zOo=o(" (RegNet model)"),QOo=l(),E1=a("li"),dge=a("strong"),WOo=o("resnet"),HOo=o(" \u2014 "),NO=a("a"),UOo=o("ResNetForImageClassification"),JOo=o(" (ResNet model)"),YOo=l(),C1=a("li"),cge=a("strong"),KOo=o("segformer"),ZOo=o(" \u2014 "),jO=a("a"),eVo=o("SegformerForImageClassification"),oVo=o(" (SegFormer model)"),rVo=l(),w1=a("li"),mge=a("strong"),tVo=o("swin"),aVo=o(" \u2014 "),DO=a("a"),nVo=o("SwinForImageClassification"),sVo=o(" (Swin model)"),lVo=l(),A1=a("li"),fge=a("strong"),iVo=o("van"),dVo=o(" \u2014 "),GO=a("a"),cVo=o("VanForImageClassification"),mVo=o(" (VAN model)"),fVo=l(),y1=a("li"),gge=a("strong"),gVo=o("vit"),hVo=o(" \u2014 "),OO=a("a"),uVo=o("ViTForImageClassification"),pVo=o(" (ViT model)"),_Vo=l(),L1=a("p"),bVo=o("The model is set in evaluation mode by default using "),hge=a("code"),FVo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),TVo=o("model.train()"),MVo=l(),v(x1.$$.fragment),ABe=l(),Yi=a("h2"),$1=a("a"),pge=a("span"),v(Uy.$$.fragment),EVo=l(),_ge=a("span"),CVo=o("AutoModelForVision2Seq"),yBe=l(),No=a("div"),v(Jy.$$.fragment),wVo=l(),Ki=a("p"),AVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VO=a("a"),yVo=o("from_pretrained()"),LVo=o(" class method or the "),XO=a("a"),xVo=o("from_config()"),$Vo=o(` class
method.`),kVo=l(),Yy=a("p"),SVo=o("This class cannot be instantiated directly using "),bge=a("code"),RVo=o("__init__()"),BVo=o(" (throws an error)."),PVo=l(),mt=a("div"),v(Ky.$$.fragment),IVo=l(),Fge=a("p"),qVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NVo=l(),Zi=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),DVo=o("not"),GVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),OVo=o("from_pretrained()"),VVo=o(" to load the model weights."),XVo=l(),v(k1.$$.fragment),zVo=l(),ao=a("div"),v(Zy.$$.fragment),QVo=l(),Tge=a("p"),WVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HVo=l(),Ba=a("p"),UVo=o("The model class to instantiate is selected based on the "),Mge=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),wge=a("ul"),S1=a("li"),Age=a("strong"),tXo=o("vision-encoder-decoder"),aXo=o(" \u2014 "),QO=a("a"),nXo=o("VisionEncoderDecoderModel"),sXo=o(" (Vision Encoder decoder model)"),lXo=l(),R1=a("p"),iXo=o("The model is set in evaluation mode by default using "),yge=a("code"),dXo=o("model.eval()"),cXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),mXo=o("model.train()"),fXo=l(),v(B1.$$.fragment),LBe=l(),ed=a("h2"),P1=a("a"),xge=a("span"),v(eL.$$.fragment),gXo=l(),$ge=a("span"),hXo=o("AutoModelForAudioClassification"),xBe=l(),jo=a("div"),v(oL.$$.fragment),uXo=l(),od=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WO=a("a"),_Xo=o("from_pretrained()"),bXo=o(" class method or the "),HO=a("a"),FXo=o("from_config()"),vXo=o(` class
method.`),TXo=l(),rL=a("p"),MXo=o("This class cannot be instantiated directly using "),kge=a("code"),EXo=o("__init__()"),CXo=o(" (throws an error)."),wXo=l(),ft=a("div"),v(tL.$$.fragment),AXo=l(),Sge=a("p"),yXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LXo=l(),rd=a("p"),xXo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),$Xo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),SXo=o("from_pretrained()"),RXo=o(" to load the model weights."),BXo=l(),v(I1.$$.fragment),PXo=l(),no=a("div"),v(aL.$$.fragment),IXo=l(),Bge=a("p"),qXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NXo=l(),Pa=a("p"),jXo=o("The model class to instantiate is selected based on the "),Pge=a("code"),DXo=o("model_type"),GXo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),OXo=o("pretrained_model_name_or_path"),VXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(":"),QXo=l(),qe=a("ul"),q1=a("li"),Nge=a("strong"),WXo=o("data2vec-audio"),HXo=o(" \u2014 "),JO=a("a"),UXo=o("Data2VecAudioForSequenceClassification"),JXo=o(" (Data2VecAudio model)"),YXo=l(),N1=a("li"),jge=a("strong"),KXo=o("hubert"),ZXo=o(" \u2014 "),YO=a("a"),ezo=o("HubertForSequenceClassification"),ozo=o(" (Hubert model)"),rzo=l(),j1=a("li"),Dge=a("strong"),tzo=o("sew"),azo=o(" \u2014 "),KO=a("a"),nzo=o("SEWForSequenceClassification"),szo=o(" (SEW model)"),lzo=l(),D1=a("li"),Gge=a("strong"),izo=o("sew-d"),dzo=o(" \u2014 "),ZO=a("a"),czo=o("SEWDForSequenceClassification"),mzo=o(" (SEW-D model)"),fzo=l(),G1=a("li"),Oge=a("strong"),gzo=o("unispeech"),hzo=o(" \u2014 "),eV=a("a"),uzo=o("UniSpeechForSequenceClassification"),pzo=o(" (UniSpeech model)"),_zo=l(),O1=a("li"),Vge=a("strong"),bzo=o("unispeech-sat"),Fzo=o(" \u2014 "),oV=a("a"),vzo=o("UniSpeechSatForSequenceClassification"),Tzo=o(" (UniSpeechSat model)"),Mzo=l(),V1=a("li"),Xge=a("strong"),Ezo=o("wav2vec2"),Czo=o(" \u2014 "),rV=a("a"),wzo=o("Wav2Vec2ForSequenceClassification"),Azo=o(" (Wav2Vec2 model)"),yzo=l(),X1=a("li"),zge=a("strong"),Lzo=o("wavlm"),xzo=o(" \u2014 "),tV=a("a"),$zo=o("WavLMForSequenceClassification"),kzo=o(" (WavLM model)"),Szo=l(),z1=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Qge=a("code"),Bzo=o("model.eval()"),Pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),Izo=o("model.train()"),qzo=l(),v(Q1.$$.fragment),$Be=l(),td=a("h2"),W1=a("a"),Hge=a("span"),v(nL.$$.fragment),Nzo=l(),Uge=a("span"),jzo=o("AutoModelForAudioFrameClassification"),kBe=l(),Do=a("div"),v(sL.$$.fragment),Dzo=l(),ad=a("p"),Gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aV=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" class method or the "),nV=a("a"),Xzo=o("from_config()"),zzo=o(` class
method.`),Qzo=l(),lL=a("p"),Wzo=o("This class cannot be instantiated directly using "),Jge=a("code"),Hzo=o("__init__()"),Uzo=o(" (throws an error)."),Jzo=l(),gt=a("div"),v(iL.$$.fragment),Yzo=l(),Yge=a("p"),Kzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zzo=l(),nd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),v(H1.$$.fragment),sQo=l(),so=a("div"),v(dL.$$.fragment),lQo=l(),Zge=a("p"),iQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dQo=l(),Ia=a("p"),cQo=o("The model class to instantiate is selected based on the "),ehe=a("code"),mQo=o("model_type"),fQo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),uQo=o("pretrained_model_name_or_path"),pQo=o(":"),_Qo=l(),qa=a("ul"),U1=a("li"),the=a("strong"),bQo=o("data2vec-audio"),FQo=o(" \u2014 "),lV=a("a"),vQo=o("Data2VecAudioForAudioFrameClassification"),TQo=o(" (Data2VecAudio model)"),MQo=l(),J1=a("li"),ahe=a("strong"),EQo=o("unispeech-sat"),CQo=o(" \u2014 "),iV=a("a"),wQo=o("UniSpeechSatForAudioFrameClassification"),AQo=o(" (UniSpeechSat model)"),yQo=l(),Y1=a("li"),nhe=a("strong"),LQo=o("wav2vec2"),xQo=o(" \u2014 "),dV=a("a"),$Qo=o("Wav2Vec2ForAudioFrameClassification"),kQo=o(" (Wav2Vec2 model)"),SQo=l(),K1=a("li"),she=a("strong"),RQo=o("wavlm"),BQo=o(" \u2014 "),cV=a("a"),PQo=o("WavLMForAudioFrameClassification"),IQo=o(" (WavLM model)"),qQo=l(),Z1=a("p"),NQo=o("The model is set in evaluation mode by default using "),lhe=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),GQo=o("model.train()"),OQo=l(),v(eT.$$.fragment),SBe=l(),sd=a("h2"),oT=a("a"),dhe=a("span"),v(cL.$$.fragment),VQo=l(),che=a("span"),XQo=o("AutoModelForCTC"),RBe=l(),Go=a("div"),v(mL.$$.fragment),zQo=l(),ld=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mV=a("a"),WQo=o("from_pretrained()"),HQo=o(" class method or the "),fV=a("a"),UQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),fL=a("p"),KQo=o("This class cannot be instantiated directly using "),mhe=a("code"),ZQo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),ht=a("div"),v(gL.$$.fragment),rWo=l(),fhe=a("p"),tWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aWo=l(),id=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),iWo=o("from_pretrained()"),dWo=o(" to load the model weights."),cWo=l(),v(rT.$$.fragment),mWo=l(),lo=a("div"),v(hL.$$.fragment),fWo=l(),hhe=a("p"),gWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hWo=l(),Na=a("p"),uWo=o("The model class to instantiate is selected based on the "),uhe=a("code"),pWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),bWo=o("pretrained_model_name_or_path"),FWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),vWo=o("pretrained_model_name_or_path"),TWo=o(":"),MWo=l(),Ne=a("ul"),tT=a("li"),bhe=a("strong"),EWo=o("data2vec-audio"),CWo=o(" \u2014 "),hV=a("a"),wWo=o("Data2VecAudioForCTC"),AWo=o(" (Data2VecAudio model)"),yWo=l(),aT=a("li"),Fhe=a("strong"),LWo=o("hubert"),xWo=o(" \u2014 "),uV=a("a"),$Wo=o("HubertForCTC"),kWo=o(" (Hubert model)"),SWo=l(),nT=a("li"),vhe=a("strong"),RWo=o("sew"),BWo=o(" \u2014 "),pV=a("a"),PWo=o("SEWForCTC"),IWo=o(" (SEW model)"),qWo=l(),sT=a("li"),The=a("strong"),NWo=o("sew-d"),jWo=o(" \u2014 "),_V=a("a"),DWo=o("SEWDForCTC"),GWo=o(" (SEW-D model)"),OWo=l(),lT=a("li"),Mhe=a("strong"),VWo=o("unispeech"),XWo=o(" \u2014 "),bV=a("a"),zWo=o("UniSpeechForCTC"),QWo=o(" (UniSpeech model)"),WWo=l(),iT=a("li"),Ehe=a("strong"),HWo=o("unispeech-sat"),UWo=o(" \u2014 "),FV=a("a"),JWo=o("UniSpeechSatForCTC"),YWo=o(" (UniSpeechSat model)"),KWo=l(),dT=a("li"),Che=a("strong"),ZWo=o("wav2vec2"),eHo=o(" \u2014 "),vV=a("a"),oHo=o("Wav2Vec2ForCTC"),rHo=o(" (Wav2Vec2 model)"),tHo=l(),cT=a("li"),whe=a("strong"),aHo=o("wavlm"),nHo=o(" \u2014 "),TV=a("a"),sHo=o("WavLMForCTC"),lHo=o(" (WavLM model)"),iHo=l(),mT=a("p"),dHo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),cHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),fHo=o("model.train()"),gHo=l(),v(fT.$$.fragment),BBe=l(),dd=a("h2"),gT=a("a"),Lhe=a("span"),v(uL.$$.fragment),hHo=l(),xhe=a("span"),uHo=o("AutoModelForSpeechSeq2Seq"),PBe=l(),Oo=a("div"),v(pL.$$.fragment),pHo=l(),cd=a("p"),_Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MV=a("a"),bHo=o("from_pretrained()"),FHo=o(" class method or the "),EV=a("a"),vHo=o("from_config()"),THo=o(` class
method.`),MHo=l(),_L=a("p"),EHo=o("This class cannot be instantiated directly using "),$he=a("code"),CHo=o("__init__()"),wHo=o(" (throws an error)."),AHo=l(),ut=a("div"),v(bL.$$.fragment),yHo=l(),khe=a("p"),LHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xHo=l(),md=a("p"),$Ho=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),kHo=o("not"),SHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),RHo=o("from_pretrained()"),BHo=o(" to load the model weights."),PHo=l(),v(hT.$$.fragment),IHo=l(),io=a("div"),v(FL.$$.fragment),qHo=l(),Rhe=a("p"),NHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jHo=l(),ja=a("p"),DHo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),GHo=o("model_type"),OHo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),VHo=o("pretrained_model_name_or_path"),XHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(":"),WHo=l(),vL=a("ul"),uT=a("li"),qhe=a("strong"),HHo=o("speech-encoder-decoder"),UHo=o(" \u2014 "),wV=a("a"),JHo=o("SpeechEncoderDecoderModel"),YHo=o(" (Speech Encoder decoder model)"),KHo=l(),pT=a("li"),Nhe=a("strong"),ZHo=o("speech_to_text"),eUo=o(" \u2014 "),AV=a("a"),oUo=o("Speech2TextForConditionalGeneration"),rUo=o(" (Speech2Text model)"),tUo=l(),_T=a("p"),aUo=o("The model is set in evaluation mode by default using "),jhe=a("code"),nUo=o("model.eval()"),sUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),lUo=o("model.train()"),iUo=l(),v(bT.$$.fragment),IBe=l(),fd=a("h2"),FT=a("a"),Ghe=a("span"),v(TL.$$.fragment),dUo=l(),Ohe=a("span"),cUo=o("AutoModelForAudioXVector"),qBe=l(),Vo=a("div"),v(ML.$$.fragment),mUo=l(),gd=a("p"),fUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yV=a("a"),gUo=o("from_pretrained()"),hUo=o(" class method or the "),LV=a("a"),uUo=o("from_config()"),pUo=o(` class
method.`),_Uo=l(),EL=a("p"),bUo=o("This class cannot be instantiated directly using "),Vhe=a("code"),FUo=o("__init__()"),vUo=o(" (throws an error)."),TUo=l(),pt=a("div"),v(CL.$$.fragment),MUo=l(),Xhe=a("p"),EUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CUo=l(),hd=a("p"),wUo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),AUo=o("not"),yUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),LUo=o("from_pretrained()"),xUo=o(" to load the model weights."),$Uo=l(),v(vT.$$.fragment),kUo=l(),co=a("div"),v(wL.$$.fragment),SUo=l(),Qhe=a("p"),RUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BUo=l(),Da=a("p"),PUo=o("The model class to instantiate is selected based on the "),Whe=a("code"),IUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),NUo=o("pretrained_model_name_or_path"),jUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(":"),OUo=l(),Ga=a("ul"),TT=a("li"),Jhe=a("strong"),VUo=o("data2vec-audio"),XUo=o(" \u2014 "),$V=a("a"),zUo=o("Data2VecAudioForXVector"),QUo=o(" (Data2VecAudio model)"),WUo=l(),MT=a("li"),Yhe=a("strong"),HUo=o("unispeech-sat"),UUo=o(" \u2014 "),kV=a("a"),JUo=o("UniSpeechSatForXVector"),YUo=o(" (UniSpeechSat model)"),KUo=l(),ET=a("li"),Khe=a("strong"),ZUo=o("wav2vec2"),eJo=o(" \u2014 "),SV=a("a"),oJo=o("Wav2Vec2ForXVector"),rJo=o(" (Wav2Vec2 model)"),tJo=l(),CT=a("li"),Zhe=a("strong"),aJo=o("wavlm"),nJo=o(" \u2014 "),RV=a("a"),sJo=o("WavLMForXVector"),lJo=o(" (WavLM model)"),iJo=l(),wT=a("p"),dJo=o("The model is set in evaluation mode by default using "),eue=a("code"),cJo=o("model.eval()"),mJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),fJo=o("model.train()"),gJo=l(),v(AT.$$.fragment),NBe=l(),ud=a("h2"),yT=a("a"),rue=a("span"),v(AL.$$.fragment),hJo=l(),tue=a("span"),uJo=o("AutoModelForMaskedImageModeling"),jBe=l(),Xo=a("div"),v(yL.$$.fragment),pJo=l(),pd=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BV=a("a"),bJo=o("from_pretrained()"),FJo=o(" class method or the "),PV=a("a"),vJo=o("from_config()"),TJo=o(` class
method.`),MJo=l(),LL=a("p"),EJo=o("This class cannot be instantiated directly using "),aue=a("code"),CJo=o("__init__()"),wJo=o(" (throws an error)."),AJo=l(),_t=a("div"),v(xL.$$.fragment),yJo=l(),nue=a("p"),LJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xJo=l(),_d=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),RJo=o("from_pretrained()"),BJo=o(" to load the model weights."),PJo=l(),v(LT.$$.fragment),IJo=l(),mo=a("div"),v($L.$$.fragment),qJo=l(),lue=a("p"),NJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jJo=l(),Oa=a("p"),DJo=o("The model class to instantiate is selected based on the "),iue=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(":"),WJo=l(),bd=a("ul"),xT=a("li"),mue=a("strong"),HJo=o("deit"),UJo=o(" \u2014 "),qV=a("a"),JJo=o("DeiTForMaskedImageModeling"),YJo=o(" (DeiT model)"),KJo=l(),$T=a("li"),fue=a("strong"),ZJo=o("swin"),eYo=o(" \u2014 "),NV=a("a"),oYo=o("SwinForMaskedImageModeling"),rYo=o(" (Swin model)"),tYo=l(),kT=a("li"),gue=a("strong"),aYo=o("vit"),nYo=o(" \u2014 "),jV=a("a"),sYo=o("ViTForMaskedImageModeling"),lYo=o(" (ViT model)"),iYo=l(),ST=a("p"),dYo=o("The model is set in evaluation mode by default using "),hue=a("code"),cYo=o("model.eval()"),mYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),fYo=o("model.train()"),gYo=l(),v(RT.$$.fragment),DBe=l(),Fd=a("h2"),BT=a("a"),pue=a("span"),v(kL.$$.fragment),hYo=l(),_ue=a("span"),uYo=o("AutoModelForObjectDetection"),GBe=l(),zo=a("div"),v(SL.$$.fragment),pYo=l(),vd=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DV=a("a"),bYo=o("from_pretrained()"),FYo=o(" class method or the "),GV=a("a"),vYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),RL=a("p"),EYo=o("This class cannot be instantiated directly using "),bue=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),bt=a("div"),v(BL.$$.fragment),yYo=l(),Fue=a("p"),LYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xYo=l(),Td=a("p"),$Yo=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),v(PT.$$.fragment),IYo=l(),fo=a("div"),v(PL.$$.fragment),qYo=l(),Tue=a("p"),NYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jYo=l(),Va=a("p"),DYo=o("The model class to instantiate is selected based on the "),Mue=a("code"),GYo=o("model_type"),OYo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(":"),WYo=l(),IL=a("ul"),IT=a("li"),wue=a("strong"),HYo=o("detr"),UYo=o(" \u2014 "),VV=a("a"),JYo=o("DetrForObjectDetection"),YYo=o(" (DETR model)"),KYo=l(),qT=a("li"),Aue=a("strong"),ZYo=o("yolos"),eKo=o(" \u2014 "),XV=a("a"),oKo=o("YolosForObjectDetection"),rKo=o(" (YOLOS model)"),tKo=l(),NT=a("p"),aKo=o("The model is set in evaluation mode by default using "),yue=a("code"),nKo=o("model.eval()"),sKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),lKo=o("model.train()"),iKo=l(),v(jT.$$.fragment),OBe=l(),Md=a("h2"),DT=a("a"),xue=a("span"),v(qL.$$.fragment),dKo=l(),$ue=a("span"),cKo=o("AutoModelForImageSegmentation"),VBe=l(),Qo=a("div"),v(NL.$$.fragment),mKo=l(),Ed=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zV=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),QV=a("a"),uKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),jL=a("p"),bKo=o("This class cannot be instantiated directly using "),kue=a("code"),FKo=o("__init__()"),vKo=o(" (throws an error)."),TKo=l(),Ft=a("div"),v(DL.$$.fragment),MKo=l(),Sue=a("p"),EKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CKo=l(),Cd=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),$Ko=l(),v(GT.$$.fragment),kKo=l(),go=a("div"),v(GL.$$.fragment),SKo=l(),Bue=a("p"),RKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),BKo=l(),Xa=a("p"),PKo=o("The model class to instantiate is selected based on the "),Pue=a("code"),IKo=o("model_type"),qKo=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),NKo=o("pretrained_model_name_or_path"),jKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(":"),OKo=l(),Nue=a("ul"),OT=a("li"),jue=a("strong"),VKo=o("detr"),XKo=o(" \u2014 "),HV=a("a"),zKo=o("DetrForSegmentation"),QKo=o(" (DETR model)"),WKo=l(),VT=a("p"),HKo=o("The model is set in evaluation mode by default using "),Due=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),YKo=o("model.train()"),KKo=l(),v(XT.$$.fragment),XBe=l(),wd=a("h2"),zT=a("a"),Oue=a("span"),v(OL.$$.fragment),ZKo=l(),Vue=a("span"),eZo=o("AutoModelForSemanticSegmentation"),zBe=l(),Wo=a("div"),v(VL.$$.fragment),oZo=l(),Ad=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UV=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),JV=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),XL=a("p"),iZo=o("This class cannot be instantiated directly using "),Xue=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),mZo=l(),vt=a("div"),v(zL.$$.fragment),fZo=l(),zue=a("p"),gZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hZo=l(),yd=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),pZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),bZo=o("from_pretrained()"),FZo=o(" to load the model weights."),vZo=l(),v(QT.$$.fragment),TZo=l(),ho=a("div"),v(QL.$$.fragment),MZo=l(),Wue=a("p"),EZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),CZo=l(),za=a("p"),wZo=o("The model class to instantiate is selected based on the "),Hue=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),Qa=a("ul"),WT=a("li"),Yue=a("strong"),RZo=o("beit"),BZo=o(" \u2014 "),KV=a("a"),PZo=o("BeitForSemanticSegmentation"),IZo=o(" (BEiT model)"),qZo=l(),HT=a("li"),Kue=a("strong"),NZo=o("data2vec-vision"),jZo=o(" \u2014 "),ZV=a("a"),DZo=o("Data2VecVisionForSemanticSegmentation"),GZo=o(" (Data2VecVision model)"),OZo=l(),UT=a("li"),Zue=a("strong"),VZo=o("dpt"),XZo=o(" \u2014 "),eX=a("a"),zZo=o("DPTForSemanticSegmentation"),QZo=o(" (DPT model)"),WZo=l(),JT=a("li"),epe=a("strong"),HZo=o("segformer"),UZo=o(" \u2014 "),oX=a("a"),JZo=o("SegformerForSemanticSegmentation"),YZo=o(" (SegFormer model)"),KZo=l(),YT=a("p"),ZZo=o("The model is set in evaluation mode by default using "),ope=a("code"),eer=o("model.eval()"),oer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),rer=o("model.train()"),ter=l(),v(KT.$$.fragment),QBe=l(),Ld=a("h2"),ZT=a("a"),tpe=a("span"),v(WL.$$.fragment),aer=l(),ape=a("span"),ner=o("AutoModelForInstanceSegmentation"),WBe=l(),Ho=a("div"),v(HL.$$.fragment),ser=l(),xd=a("p"),ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rX=a("a"),ier=o("from_pretrained()"),der=o(" class method or the "),tX=a("a"),cer=o("from_config()"),mer=o(` class
method.`),fer=l(),UL=a("p"),ger=o("This class cannot be instantiated directly using "),npe=a("code"),her=o("__init__()"),uer=o(" (throws an error)."),per=l(),Tt=a("div"),v(JL.$$.fragment),_er=l(),spe=a("p"),ber=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fer=l(),$d=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),Ter=o("not"),Mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),Eer=o("from_pretrained()"),Cer=o(" to load the model weights."),wer=l(),v(eM.$$.fragment),Aer=l(),uo=a("div"),v(YL.$$.fragment),yer=l(),ipe=a("p"),Ler=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xer=l(),Wa=a("p"),$er=o("The model class to instantiate is selected based on the "),dpe=a("code"),ker=o("model_type"),Ser=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),Rer=o("pretrained_model_name_or_path"),Ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),Per=o("pretrained_model_name_or_path"),Ier=o(":"),qer=l(),fpe=a("ul"),oM=a("li"),gpe=a("strong"),Ner=o("maskformer"),jer=o(" \u2014 "),nX=a("a"),Der=o("MaskFormerForInstanceSegmentation"),Ger=o(" (MaskFormer model)"),Oer=l(),rM=a("p"),Ver=o("The model is set in evaluation mode by default using "),hpe=a("code"),Xer=o("model.eval()"),zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),Qer=o("model.train()"),Wer=l(),v(tM.$$.fragment),HBe=l(),kd=a("h2"),aM=a("a"),ppe=a("span"),v(KL.$$.fragment),Her=l(),_pe=a("span"),Uer=o("TFAutoModel"),UBe=l(),Uo=a("div"),v(ZL.$$.fragment),Jer=l(),Sd=a("p"),Yer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sX=a("a"),Ker=o("from_pretrained()"),Zer=o(" class method or the "),lX=a("a"),eor=o("from_config()"),oor=o(` class
method.`),ror=l(),e8=a("p"),tor=o("This class cannot be instantiated directly using "),bpe=a("code"),aor=o("__init__()"),nor=o(" (throws an error)."),sor=l(),Mt=a("div"),v(o8.$$.fragment),lor=l(),Fpe=a("p"),ior=o("Instantiates one of the base model classes of the library from a configuration."),dor=l(),Rd=a("p"),cor=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),mor=o("not"),gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),hor=o("from_pretrained()"),uor=o(" to load the model weights."),por=l(),v(nM.$$.fragment),_or=l(),Mr=a("div"),v(r8.$$.fragment),bor=l(),Tpe=a("p"),For=o("Instantiate one of the base model classes of the library from a pretrained model."),vor=l(),Ha=a("p"),Tor=o("The model class to instantiate is selected based on the "),Mpe=a("code"),Mor=o("model_type"),Eor=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),Cor=o("pretrained_model_name_or_path"),wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),Aor=o("pretrained_model_name_or_path"),yor=o(":"),Lor=l(),j=a("ul"),sM=a("li"),wpe=a("strong"),xor=o("albert"),$or=o(" \u2014 "),dX=a("a"),kor=o("TFAlbertModel"),Sor=o(" (ALBERT model)"),Ror=l(),lM=a("li"),Ape=a("strong"),Bor=o("bart"),Por=o(" \u2014 "),cX=a("a"),Ior=o("TFBartModel"),qor=o(" (BART model)"),Nor=l(),iM=a("li"),ype=a("strong"),jor=o("bert"),Dor=o(" \u2014 "),mX=a("a"),Gor=o("TFBertModel"),Oor=o(" (BERT model)"),Vor=l(),dM=a("li"),Lpe=a("strong"),Xor=o("blenderbot"),zor=o(" \u2014 "),fX=a("a"),Qor=o("TFBlenderbotModel"),Wor=o(" (Blenderbot model)"),Hor=l(),cM=a("li"),xpe=a("strong"),Uor=o("blenderbot-small"),Jor=o(" \u2014 "),gX=a("a"),Yor=o("TFBlenderbotSmallModel"),Kor=o(" (BlenderbotSmall model)"),Zor=l(),mM=a("li"),$pe=a("strong"),err=o("camembert"),orr=o(" \u2014 "),hX=a("a"),rrr=o("TFCamembertModel"),trr=o(" (CamemBERT model)"),arr=l(),fM=a("li"),kpe=a("strong"),nrr=o("clip"),srr=o(" \u2014 "),uX=a("a"),lrr=o("TFCLIPModel"),irr=o(" (CLIP model)"),drr=l(),gM=a("li"),Spe=a("strong"),crr=o("convbert"),mrr=o(" \u2014 "),pX=a("a"),frr=o("TFConvBertModel"),grr=o(" (ConvBERT model)"),hrr=l(),hM=a("li"),Rpe=a("strong"),urr=o("convnext"),prr=o(" \u2014 "),_X=a("a"),_rr=o("TFConvNextModel"),brr=o(" (ConvNext model)"),Frr=l(),uM=a("li"),Bpe=a("strong"),vrr=o("ctrl"),Trr=o(" \u2014 "),bX=a("a"),Mrr=o("TFCTRLModel"),Err=o(" (CTRL model)"),Crr=l(),pM=a("li"),Ppe=a("strong"),wrr=o("deberta"),Arr=o(" \u2014 "),FX=a("a"),yrr=o("TFDebertaModel"),Lrr=o(" (DeBERTa model)"),xrr=l(),_M=a("li"),Ipe=a("strong"),$rr=o("deberta-v2"),krr=o(" \u2014 "),vX=a("a"),Srr=o("TFDebertaV2Model"),Rrr=o(" (DeBERTa-v2 model)"),Brr=l(),bM=a("li"),qpe=a("strong"),Prr=o("distilbert"),Irr=o(" \u2014 "),TX=a("a"),qrr=o("TFDistilBertModel"),Nrr=o(" (DistilBERT model)"),jrr=l(),FM=a("li"),Npe=a("strong"),Drr=o("dpr"),Grr=o(" \u2014 "),MX=a("a"),Orr=o("TFDPRQuestionEncoder"),Vrr=o(" (DPR model)"),Xrr=l(),vM=a("li"),jpe=a("strong"),zrr=o("electra"),Qrr=o(" \u2014 "),EX=a("a"),Wrr=o("TFElectraModel"),Hrr=o(" (ELECTRA model)"),Urr=l(),TM=a("li"),Dpe=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),CX=a("a"),Krr=o("TFFlaubertModel"),Zrr=o(" (FlauBERT model)"),etr=l(),xs=a("li"),Gpe=a("strong"),otr=o("funnel"),rtr=o(" \u2014 "),wX=a("a"),ttr=o("TFFunnelModel"),atr=o(" or "),AX=a("a"),ntr=o("TFFunnelBaseModel"),str=o(" (Funnel Transformer model)"),ltr=l(),MM=a("li"),Ope=a("strong"),itr=o("gpt2"),dtr=o(" \u2014 "),yX=a("a"),ctr=o("TFGPT2Model"),mtr=o(" (OpenAI GPT-2 model)"),ftr=l(),EM=a("li"),Vpe=a("strong"),gtr=o("gptj"),htr=o(" \u2014 "),LX=a("a"),utr=o("TFGPTJModel"),ptr=o(" (GPT-J model)"),_tr=l(),CM=a("li"),Xpe=a("strong"),btr=o("hubert"),Ftr=o(" \u2014 "),xX=a("a"),vtr=o("TFHubertModel"),Ttr=o(" (Hubert model)"),Mtr=l(),wM=a("li"),zpe=a("strong"),Etr=o("layoutlm"),Ctr=o(" \u2014 "),$X=a("a"),wtr=o("TFLayoutLMModel"),Atr=o(" (LayoutLM model)"),ytr=l(),AM=a("li"),Qpe=a("strong"),Ltr=o("led"),xtr=o(" \u2014 "),kX=a("a"),$tr=o("TFLEDModel"),ktr=o(" (LED model)"),Str=l(),yM=a("li"),Wpe=a("strong"),Rtr=o("longformer"),Btr=o(" \u2014 "),SX=a("a"),Ptr=o("TFLongformerModel"),Itr=o(" (Longformer model)"),qtr=l(),LM=a("li"),Hpe=a("strong"),Ntr=o("lxmert"),jtr=o(" \u2014 "),RX=a("a"),Dtr=o("TFLxmertModel"),Gtr=o(" (LXMERT model)"),Otr=l(),xM=a("li"),Upe=a("strong"),Vtr=o("marian"),Xtr=o(" \u2014 "),BX=a("a"),ztr=o("TFMarianModel"),Qtr=o(" (Marian model)"),Wtr=l(),$M=a("li"),Jpe=a("strong"),Htr=o("mbart"),Utr=o(" \u2014 "),PX=a("a"),Jtr=o("TFMBartModel"),Ytr=o(" (mBART model)"),Ktr=l(),kM=a("li"),Ype=a("strong"),Ztr=o("mobilebert"),ear=o(" \u2014 "),IX=a("a"),oar=o("TFMobileBertModel"),rar=o(" (MobileBERT model)"),tar=l(),SM=a("li"),Kpe=a("strong"),aar=o("mpnet"),nar=o(" \u2014 "),qX=a("a"),sar=o("TFMPNetModel"),lar=o(" (MPNet model)"),iar=l(),RM=a("li"),Zpe=a("strong"),dar=o("mt5"),car=o(" \u2014 "),NX=a("a"),mar=o("TFMT5Model"),far=o(" (mT5 model)"),gar=l(),BM=a("li"),e_e=a("strong"),har=o("openai-gpt"),uar=o(" \u2014 "),jX=a("a"),par=o("TFOpenAIGPTModel"),_ar=o(" (OpenAI GPT model)"),bar=l(),PM=a("li"),o_e=a("strong"),Far=o("pegasus"),Tar=o(" \u2014 "),DX=a("a"),Mar=o("TFPegasusModel"),Ear=o(" (Pegasus model)"),Car=l(),IM=a("li"),r_e=a("strong"),war=o("rembert"),Aar=o(" \u2014 "),GX=a("a"),yar=o("TFRemBertModel"),Lar=o(" (RemBERT model)"),xar=l(),qM=a("li"),t_e=a("strong"),$ar=o("roberta"),kar=o(" \u2014 "),OX=a("a"),Sar=o("TFRobertaModel"),Rar=o(" (RoBERTa model)"),Bar=l(),NM=a("li"),a_e=a("strong"),Par=o("roformer"),Iar=o(" \u2014 "),VX=a("a"),qar=o("TFRoFormerModel"),Nar=o(" (RoFormer model)"),jar=l(),jM=a("li"),n_e=a("strong"),Dar=o("speech_to_text"),Gar=o(" \u2014 "),XX=a("a"),Oar=o("TFSpeech2TextModel"),Var=o(" (Speech2Text model)"),Xar=l(),DM=a("li"),s_e=a("strong"),zar=o("t5"),Qar=o(" \u2014 "),zX=a("a"),War=o("TFT5Model"),Har=o(" (T5 model)"),Uar=l(),GM=a("li"),l_e=a("strong"),Jar=o("tapas"),Yar=o(" \u2014 "),QX=a("a"),Kar=o("TFTapasModel"),Zar=o(" (TAPAS model)"),enr=l(),OM=a("li"),i_e=a("strong"),onr=o("transfo-xl"),rnr=o(" \u2014 "),WX=a("a"),tnr=o("TFTransfoXLModel"),anr=o(" (Transformer-XL model)"),nnr=l(),VM=a("li"),d_e=a("strong"),snr=o("vit"),lnr=o(" \u2014 "),HX=a("a"),inr=o("TFViTModel"),dnr=o(" (ViT model)"),cnr=l(),XM=a("li"),c_e=a("strong"),mnr=o("vit_mae"),fnr=o(" \u2014 "),UX=a("a"),gnr=o("TFViTMAEModel"),hnr=o(" (ViTMAE model)"),unr=l(),zM=a("li"),m_e=a("strong"),pnr=o("wav2vec2"),_nr=o(" \u2014 "),JX=a("a"),bnr=o("TFWav2Vec2Model"),Fnr=o(" (Wav2Vec2 model)"),vnr=l(),QM=a("li"),f_e=a("strong"),Tnr=o("xlm"),Mnr=o(" \u2014 "),YX=a("a"),Enr=o("TFXLMModel"),Cnr=o(" (XLM model)"),wnr=l(),WM=a("li"),g_e=a("strong"),Anr=o("xlm-roberta"),ynr=o(" \u2014 "),KX=a("a"),Lnr=o("TFXLMRobertaModel"),xnr=o(" (XLM-RoBERTa model)"),$nr=l(),HM=a("li"),h_e=a("strong"),knr=o("xlnet"),Snr=o(" \u2014 "),ZX=a("a"),Rnr=o("TFXLNetModel"),Bnr=o(" (XLNet model)"),Pnr=l(),v(UM.$$.fragment),JBe=l(),Bd=a("h2"),JM=a("a"),u_e=a("span"),v(t8.$$.fragment),Inr=l(),p_e=a("span"),qnr=o("TFAutoModelForPreTraining"),YBe=l(),Jo=a("div"),v(a8.$$.fragment),Nnr=l(),Pd=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ez=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),oz=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),n8=a("p"),znr=o("This class cannot be instantiated directly using "),__e=a("code"),Qnr=o("__init__()"),Wnr=o(" (throws an error)."),Hnr=l(),Et=a("div"),v(s8.$$.fragment),Unr=l(),b_e=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ynr=l(),Id=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),v(YM.$$.fragment),asr=l(),Er=a("div"),v(l8.$$.fragment),nsr=l(),v_e=a("p"),ssr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lsr=l(),Ua=a("p"),isr=o("The model class to instantiate is selected based on the "),T_e=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),msr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),usr=l(),ne=a("ul"),KM=a("li"),C_e=a("strong"),psr=o("albert"),_sr=o(" \u2014 "),tz=a("a"),bsr=o("TFAlbertForPreTraining"),Fsr=o(" (ALBERT model)"),vsr=l(),ZM=a("li"),w_e=a("strong"),Tsr=o("bart"),Msr=o(" \u2014 "),az=a("a"),Esr=o("TFBartForConditionalGeneration"),Csr=o(" (BART model)"),wsr=l(),e4=a("li"),A_e=a("strong"),Asr=o("bert"),ysr=o(" \u2014 "),nz=a("a"),Lsr=o("TFBertForPreTraining"),xsr=o(" (BERT model)"),$sr=l(),o4=a("li"),y_e=a("strong"),ksr=o("camembert"),Ssr=o(" \u2014 "),sz=a("a"),Rsr=o("TFCamembertForMaskedLM"),Bsr=o(" (CamemBERT model)"),Psr=l(),r4=a("li"),L_e=a("strong"),Isr=o("ctrl"),qsr=o(" \u2014 "),lz=a("a"),Nsr=o("TFCTRLLMHeadModel"),jsr=o(" (CTRL model)"),Dsr=l(),t4=a("li"),x_e=a("strong"),Gsr=o("distilbert"),Osr=o(" \u2014 "),iz=a("a"),Vsr=o("TFDistilBertForMaskedLM"),Xsr=o(" (DistilBERT model)"),zsr=l(),a4=a("li"),$_e=a("strong"),Qsr=o("electra"),Wsr=o(" \u2014 "),dz=a("a"),Hsr=o("TFElectraForPreTraining"),Usr=o(" (ELECTRA model)"),Jsr=l(),n4=a("li"),k_e=a("strong"),Ysr=o("flaubert"),Ksr=o(" \u2014 "),cz=a("a"),Zsr=o("TFFlaubertWithLMHeadModel"),elr=o(" (FlauBERT model)"),olr=l(),s4=a("li"),S_e=a("strong"),rlr=o("funnel"),tlr=o(" \u2014 "),mz=a("a"),alr=o("TFFunnelForPreTraining"),nlr=o(" (Funnel Transformer model)"),slr=l(),l4=a("li"),R_e=a("strong"),llr=o("gpt2"),ilr=o(" \u2014 "),fz=a("a"),dlr=o("TFGPT2LMHeadModel"),clr=o(" (OpenAI GPT-2 model)"),mlr=l(),i4=a("li"),B_e=a("strong"),flr=o("layoutlm"),glr=o(" \u2014 "),gz=a("a"),hlr=o("TFLayoutLMForMaskedLM"),ulr=o(" (LayoutLM model)"),plr=l(),d4=a("li"),P_e=a("strong"),_lr=o("lxmert"),blr=o(" \u2014 "),hz=a("a"),Flr=o("TFLxmertForPreTraining"),vlr=o(" (LXMERT model)"),Tlr=l(),c4=a("li"),I_e=a("strong"),Mlr=o("mobilebert"),Elr=o(" \u2014 "),uz=a("a"),Clr=o("TFMobileBertForPreTraining"),wlr=o(" (MobileBERT model)"),Alr=l(),m4=a("li"),q_e=a("strong"),ylr=o("mpnet"),Llr=o(" \u2014 "),pz=a("a"),xlr=o("TFMPNetForMaskedLM"),$lr=o(" (MPNet model)"),klr=l(),f4=a("li"),N_e=a("strong"),Slr=o("openai-gpt"),Rlr=o(" \u2014 "),_z=a("a"),Blr=o("TFOpenAIGPTLMHeadModel"),Plr=o(" (OpenAI GPT model)"),Ilr=l(),g4=a("li"),j_e=a("strong"),qlr=o("roberta"),Nlr=o(" \u2014 "),bz=a("a"),jlr=o("TFRobertaForMaskedLM"),Dlr=o(" (RoBERTa model)"),Glr=l(),h4=a("li"),D_e=a("strong"),Olr=o("t5"),Vlr=o(" \u2014 "),Fz=a("a"),Xlr=o("TFT5ForConditionalGeneration"),zlr=o(" (T5 model)"),Qlr=l(),u4=a("li"),G_e=a("strong"),Wlr=o("tapas"),Hlr=o(" \u2014 "),vz=a("a"),Ulr=o("TFTapasForMaskedLM"),Jlr=o(" (TAPAS model)"),Ylr=l(),p4=a("li"),O_e=a("strong"),Klr=o("transfo-xl"),Zlr=o(" \u2014 "),Tz=a("a"),eir=o("TFTransfoXLLMHeadModel"),oir=o(" (Transformer-XL model)"),rir=l(),_4=a("li"),V_e=a("strong"),tir=o("vit_mae"),air=o(" \u2014 "),Mz=a("a"),nir=o("TFViTMAEForPreTraining"),sir=o(" (ViTMAE model)"),lir=l(),b4=a("li"),X_e=a("strong"),iir=o("xlm"),dir=o(" \u2014 "),Ez=a("a"),cir=o("TFXLMWithLMHeadModel"),mir=o(" (XLM model)"),fir=l(),F4=a("li"),z_e=a("strong"),gir=o("xlm-roberta"),hir=o(" \u2014 "),Cz=a("a"),uir=o("TFXLMRobertaForMaskedLM"),pir=o(" (XLM-RoBERTa model)"),_ir=l(),v4=a("li"),Q_e=a("strong"),bir=o("xlnet"),Fir=o(" \u2014 "),wz=a("a"),vir=o("TFXLNetLMHeadModel"),Tir=o(" (XLNet model)"),Mir=l(),v(T4.$$.fragment),KBe=l(),qd=a("h2"),M4=a("a"),W_e=a("span"),v(i8.$$.fragment),Eir=l(),H_e=a("span"),Cir=o("TFAutoModelForCausalLM"),ZBe=l(),Yo=a("div"),v(d8.$$.fragment),wir=l(),Nd=a("p"),Air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Az=a("a"),yir=o("from_pretrained()"),Lir=o(" class method or the "),yz=a("a"),xir=o("from_config()"),$ir=o(` class
method.`),kir=l(),c8=a("p"),Sir=o("This class cannot be instantiated directly using "),U_e=a("code"),Rir=o("__init__()"),Bir=o(" (throws an error)."),Pir=l(),Ct=a("div"),v(m8.$$.fragment),Iir=l(),J_e=a("p"),qir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nir=l(),jd=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Dir=o("not"),Gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Oir=o("from_pretrained()"),Vir=o(" to load the model weights."),Xir=l(),v(E4.$$.fragment),zir=l(),Cr=a("div"),v(f8.$$.fragment),Qir=l(),K_e=a("p"),Wir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hir=l(),Ja=a("p"),Uir=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Jir=o("model_type"),Yir=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),edr=o("pretrained_model_name_or_path"),odr=o(":"),rdr=l(),Te=a("ul"),C4=a("li"),rbe=a("strong"),tdr=o("bert"),adr=o(" \u2014 "),xz=a("a"),ndr=o("TFBertLMHeadModel"),sdr=o(" (BERT model)"),ldr=l(),w4=a("li"),tbe=a("strong"),idr=o("camembert"),ddr=o(" \u2014 "),$z=a("a"),cdr=o("TFCamembertForCausalLM"),mdr=o(" (CamemBERT model)"),fdr=l(),A4=a("li"),abe=a("strong"),gdr=o("ctrl"),hdr=o(" \u2014 "),kz=a("a"),udr=o("TFCTRLLMHeadModel"),pdr=o(" (CTRL model)"),_dr=l(),y4=a("li"),nbe=a("strong"),bdr=o("gpt2"),Fdr=o(" \u2014 "),Sz=a("a"),vdr=o("TFGPT2LMHeadModel"),Tdr=o(" (OpenAI GPT-2 model)"),Mdr=l(),L4=a("li"),sbe=a("strong"),Edr=o("gptj"),Cdr=o(" \u2014 "),Rz=a("a"),wdr=o("TFGPTJForCausalLM"),Adr=o(" (GPT-J model)"),ydr=l(),x4=a("li"),lbe=a("strong"),Ldr=o("openai-gpt"),xdr=o(" \u2014 "),Bz=a("a"),$dr=o("TFOpenAIGPTLMHeadModel"),kdr=o(" (OpenAI GPT model)"),Sdr=l(),$4=a("li"),ibe=a("strong"),Rdr=o("rembert"),Bdr=o(" \u2014 "),Pz=a("a"),Pdr=o("TFRemBertForCausalLM"),Idr=o(" (RemBERT model)"),qdr=l(),k4=a("li"),dbe=a("strong"),Ndr=o("roberta"),jdr=o(" \u2014 "),Iz=a("a"),Ddr=o("TFRobertaForCausalLM"),Gdr=o(" (RoBERTa model)"),Odr=l(),S4=a("li"),cbe=a("strong"),Vdr=o("roformer"),Xdr=o(" \u2014 "),qz=a("a"),zdr=o("TFRoFormerForCausalLM"),Qdr=o(" (RoFormer model)"),Wdr=l(),R4=a("li"),mbe=a("strong"),Hdr=o("transfo-xl"),Udr=o(" \u2014 "),Nz=a("a"),Jdr=o("TFTransfoXLLMHeadModel"),Ydr=o(" (Transformer-XL model)"),Kdr=l(),B4=a("li"),fbe=a("strong"),Zdr=o("xlm"),ecr=o(" \u2014 "),jz=a("a"),ocr=o("TFXLMWithLMHeadModel"),rcr=o(" (XLM model)"),tcr=l(),P4=a("li"),gbe=a("strong"),acr=o("xlnet"),ncr=o(" \u2014 "),Dz=a("a"),scr=o("TFXLNetLMHeadModel"),lcr=o(" (XLNet model)"),icr=l(),v(I4.$$.fragment),ePe=l(),Dd=a("h2"),q4=a("a"),hbe=a("span"),v(g8.$$.fragment),dcr=l(),ube=a("span"),ccr=o("TFAutoModelForImageClassification"),oPe=l(),Ko=a("div"),v(h8.$$.fragment),mcr=l(),Gd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),Oz=a("a"),ucr=o("from_config()"),pcr=o(` class
method.`),_cr=l(),u8=a("p"),bcr=o("This class cannot be instantiated directly using "),pbe=a("code"),Fcr=o("__init__()"),vcr=o(" (throws an error)."),Tcr=l(),wt=a("div"),v(p8.$$.fragment),Mcr=l(),_be=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ccr=l(),Od=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),$cr=l(),v(N4.$$.fragment),kcr=l(),wr=a("div"),v(_8.$$.fragment),Scr=l(),Fbe=a("p"),Rcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bcr=l(),Ya=a("p"),Pcr=o("The model class to instantiate is selected based on the "),vbe=a("code"),Icr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Ncr=o("pretrained_model_name_or_path"),jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(":"),Ocr=l(),b8=a("ul"),j4=a("li"),Ebe=a("strong"),Vcr=o("convnext"),Xcr=o(" \u2014 "),Xz=a("a"),zcr=o("TFConvNextForImageClassification"),Qcr=o(" (ConvNext model)"),Wcr=l(),D4=a("li"),Cbe=a("strong"),Hcr=o("vit"),Ucr=o(" \u2014 "),zz=a("a"),Jcr=o("TFViTForImageClassification"),Ycr=o(" (ViT model)"),Kcr=l(),v(G4.$$.fragment),rPe=l(),Vd=a("h2"),O4=a("a"),wbe=a("span"),v(F8.$$.fragment),Zcr=l(),Abe=a("span"),emr=o("TFAutoModelForMaskedLM"),tPe=l(),Zo=a("div"),v(v8.$$.fragment),omr=l(),Xd=a("p"),rmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qz=a("a"),tmr=o("from_pretrained()"),amr=o(" class method or the "),Wz=a("a"),nmr=o("from_config()"),smr=o(` class
method.`),lmr=l(),T8=a("p"),imr=o("This class cannot be instantiated directly using "),ybe=a("code"),dmr=o("__init__()"),cmr=o(" (throws an error)."),mmr=l(),At=a("div"),v(M8.$$.fragment),fmr=l(),Lbe=a("p"),gmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hmr=l(),zd=a("p"),umr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),pmr=o("not"),_mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),bmr=o("from_pretrained()"),Fmr=o(" to load the model weights."),vmr=l(),v(V4.$$.fragment),Tmr=l(),Ar=a("div"),v(E8.$$.fragment),Mmr=l(),$be=a("p"),Emr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cmr=l(),Ka=a("p"),wmr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Amr=o("model_type"),ymr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Lmr=o("pretrained_model_name_or_path"),xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(":"),Smr=l(),ie=a("ul"),X4=a("li"),Bbe=a("strong"),Rmr=o("albert"),Bmr=o(" \u2014 "),Uz=a("a"),Pmr=o("TFAlbertForMaskedLM"),Imr=o(" (ALBERT model)"),qmr=l(),z4=a("li"),Pbe=a("strong"),Nmr=o("bert"),jmr=o(" \u2014 "),Jz=a("a"),Dmr=o("TFBertForMaskedLM"),Gmr=o(" (BERT model)"),Omr=l(),Q4=a("li"),Ibe=a("strong"),Vmr=o("camembert"),Xmr=o(" \u2014 "),Yz=a("a"),zmr=o("TFCamembertForMaskedLM"),Qmr=o(" (CamemBERT model)"),Wmr=l(),W4=a("li"),qbe=a("strong"),Hmr=o("convbert"),Umr=o(" \u2014 "),Kz=a("a"),Jmr=o("TFConvBertForMaskedLM"),Ymr=o(" (ConvBERT model)"),Kmr=l(),H4=a("li"),Nbe=a("strong"),Zmr=o("deberta"),efr=o(" \u2014 "),Zz=a("a"),ofr=o("TFDebertaForMaskedLM"),rfr=o(" (DeBERTa model)"),tfr=l(),U4=a("li"),jbe=a("strong"),afr=o("deberta-v2"),nfr=o(" \u2014 "),eQ=a("a"),sfr=o("TFDebertaV2ForMaskedLM"),lfr=o(" (DeBERTa-v2 model)"),ifr=l(),J4=a("li"),Dbe=a("strong"),dfr=o("distilbert"),cfr=o(" \u2014 "),oQ=a("a"),mfr=o("TFDistilBertForMaskedLM"),ffr=o(" (DistilBERT model)"),gfr=l(),Y4=a("li"),Gbe=a("strong"),hfr=o("electra"),ufr=o(" \u2014 "),rQ=a("a"),pfr=o("TFElectraForMaskedLM"),_fr=o(" (ELECTRA model)"),bfr=l(),K4=a("li"),Obe=a("strong"),Ffr=o("flaubert"),vfr=o(" \u2014 "),tQ=a("a"),Tfr=o("TFFlaubertWithLMHeadModel"),Mfr=o(" (FlauBERT model)"),Efr=l(),Z4=a("li"),Vbe=a("strong"),Cfr=o("funnel"),wfr=o(" \u2014 "),aQ=a("a"),Afr=o("TFFunnelForMaskedLM"),yfr=o(" (Funnel Transformer model)"),Lfr=l(),eE=a("li"),Xbe=a("strong"),xfr=o("layoutlm"),$fr=o(" \u2014 "),nQ=a("a"),kfr=o("TFLayoutLMForMaskedLM"),Sfr=o(" (LayoutLM model)"),Rfr=l(),oE=a("li"),zbe=a("strong"),Bfr=o("longformer"),Pfr=o(" \u2014 "),sQ=a("a"),Ifr=o("TFLongformerForMaskedLM"),qfr=o(" (Longformer model)"),Nfr=l(),rE=a("li"),Qbe=a("strong"),jfr=o("mobilebert"),Dfr=o(" \u2014 "),lQ=a("a"),Gfr=o("TFMobileBertForMaskedLM"),Ofr=o(" (MobileBERT model)"),Vfr=l(),tE=a("li"),Wbe=a("strong"),Xfr=o("mpnet"),zfr=o(" \u2014 "),iQ=a("a"),Qfr=o("TFMPNetForMaskedLM"),Wfr=o(" (MPNet model)"),Hfr=l(),aE=a("li"),Hbe=a("strong"),Ufr=o("rembert"),Jfr=o(" \u2014 "),dQ=a("a"),Yfr=o("TFRemBertForMaskedLM"),Kfr=o(" (RemBERT model)"),Zfr=l(),nE=a("li"),Ube=a("strong"),egr=o("roberta"),ogr=o(" \u2014 "),cQ=a("a"),rgr=o("TFRobertaForMaskedLM"),tgr=o(" (RoBERTa model)"),agr=l(),sE=a("li"),Jbe=a("strong"),ngr=o("roformer"),sgr=o(" \u2014 "),mQ=a("a"),lgr=o("TFRoFormerForMaskedLM"),igr=o(" (RoFormer model)"),dgr=l(),lE=a("li"),Ybe=a("strong"),cgr=o("tapas"),mgr=o(" \u2014 "),fQ=a("a"),fgr=o("TFTapasForMaskedLM"),ggr=o(" (TAPAS model)"),hgr=l(),iE=a("li"),Kbe=a("strong"),ugr=o("xlm"),pgr=o(" \u2014 "),gQ=a("a"),_gr=o("TFXLMWithLMHeadModel"),bgr=o(" (XLM model)"),Fgr=l(),dE=a("li"),Zbe=a("strong"),vgr=o("xlm-roberta"),Tgr=o(" \u2014 "),hQ=a("a"),Mgr=o("TFXLMRobertaForMaskedLM"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),v(cE.$$.fragment),aPe=l(),Qd=a("h2"),mE=a("a"),e2e=a("span"),v(C8.$$.fragment),wgr=l(),o2e=a("span"),Agr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),er=a("div"),v(w8.$$.fragment),ygr=l(),Wd=a("p"),Lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uQ=a("a"),xgr=o("from_pretrained()"),$gr=o(" class method or the "),pQ=a("a"),kgr=o("from_config()"),Sgr=o(` class
method.`),Rgr=l(),A8=a("p"),Bgr=o("This class cannot be instantiated directly using "),r2e=a("code"),Pgr=o("__init__()"),Igr=o(" (throws an error)."),qgr=l(),yt=a("div"),v(y8.$$.fragment),Ngr=l(),t2e=a("p"),jgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dgr=l(),Hd=a("p"),Ggr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),Ogr=o("not"),Vgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Xgr=o("from_pretrained()"),zgr=o(" to load the model weights."),Qgr=l(),v(fE.$$.fragment),Wgr=l(),yr=a("div"),v(L8.$$.fragment),Hgr=l(),n2e=a("p"),Ugr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jgr=l(),Za=a("p"),Ygr=o("The model class to instantiate is selected based on the "),s2e=a("code"),Kgr=o("model_type"),Zgr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(":"),ahr=l(),ye=a("ul"),gE=a("li"),d2e=a("strong"),nhr=o("bart"),shr=o(" \u2014 "),bQ=a("a"),lhr=o("TFBartForConditionalGeneration"),ihr=o(" (BART model)"),dhr=l(),hE=a("li"),c2e=a("strong"),chr=o("blenderbot"),mhr=o(" \u2014 "),FQ=a("a"),fhr=o("TFBlenderbotForConditionalGeneration"),ghr=o(" (Blenderbot model)"),hhr=l(),uE=a("li"),m2e=a("strong"),uhr=o("blenderbot-small"),phr=o(" \u2014 "),vQ=a("a"),_hr=o("TFBlenderbotSmallForConditionalGeneration"),bhr=o(" (BlenderbotSmall model)"),Fhr=l(),pE=a("li"),f2e=a("strong"),vhr=o("encoder-decoder"),Thr=o(" \u2014 "),TQ=a("a"),Mhr=o("TFEncoderDecoderModel"),Ehr=o(" (Encoder decoder model)"),Chr=l(),_E=a("li"),g2e=a("strong"),whr=o("led"),Ahr=o(" \u2014 "),MQ=a("a"),yhr=o("TFLEDForConditionalGeneration"),Lhr=o(" (LED model)"),xhr=l(),bE=a("li"),h2e=a("strong"),$hr=o("marian"),khr=o(" \u2014 "),EQ=a("a"),Shr=o("TFMarianMTModel"),Rhr=o(" (Marian model)"),Bhr=l(),FE=a("li"),u2e=a("strong"),Phr=o("mbart"),Ihr=o(" \u2014 "),CQ=a("a"),qhr=o("TFMBartForConditionalGeneration"),Nhr=o(" (mBART model)"),jhr=l(),vE=a("li"),p2e=a("strong"),Dhr=o("mt5"),Ghr=o(" \u2014 "),wQ=a("a"),Ohr=o("TFMT5ForConditionalGeneration"),Vhr=o(" (mT5 model)"),Xhr=l(),TE=a("li"),_2e=a("strong"),zhr=o("pegasus"),Qhr=o(" \u2014 "),AQ=a("a"),Whr=o("TFPegasusForConditionalGeneration"),Hhr=o(" (Pegasus model)"),Uhr=l(),ME=a("li"),b2e=a("strong"),Jhr=o("t5"),Yhr=o(" \u2014 "),yQ=a("a"),Khr=o("TFT5ForConditionalGeneration"),Zhr=o(" (T5 model)"),eur=l(),v(EE.$$.fragment),sPe=l(),Ud=a("h2"),CE=a("a"),F2e=a("span"),v(x8.$$.fragment),our=l(),v2e=a("span"),rur=o("TFAutoModelForSequenceClassification"),lPe=l(),or=a("div"),v($8.$$.fragment),tur=l(),Jd=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LQ=a("a"),nur=o("from_pretrained()"),sur=o(" class method or the "),xQ=a("a"),lur=o("from_config()"),iur=o(` class
method.`),dur=l(),k8=a("p"),cur=o("This class cannot be instantiated directly using "),T2e=a("code"),mur=o("__init__()"),fur=o(" (throws an error)."),gur=l(),Lt=a("div"),v(S8.$$.fragment),hur=l(),M2e=a("p"),uur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pur=l(),Yd=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),bur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),vur=o("from_pretrained()"),Tur=o(" to load the model weights."),Mur=l(),v(wE.$$.fragment),Eur=l(),Lr=a("div"),v(R8.$$.fragment),Cur=l(),C2e=a("p"),wur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Aur=l(),en=a("p"),yur=o("The model class to instantiate is selected based on the "),w2e=a("code"),Lur=o("model_type"),xur=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(":"),Bur=l(),Z=a("ul"),AE=a("li"),L2e=a("strong"),Pur=o("albert"),Iur=o(" \u2014 "),kQ=a("a"),qur=o("TFAlbertForSequenceClassification"),Nur=o(" (ALBERT model)"),jur=l(),yE=a("li"),x2e=a("strong"),Dur=o("bert"),Gur=o(" \u2014 "),SQ=a("a"),Our=o("TFBertForSequenceClassification"),Vur=o(" (BERT model)"),Xur=l(),LE=a("li"),$2e=a("strong"),zur=o("camembert"),Qur=o(" \u2014 "),RQ=a("a"),Wur=o("TFCamembertForSequenceClassification"),Hur=o(" (CamemBERT model)"),Uur=l(),xE=a("li"),k2e=a("strong"),Jur=o("convbert"),Yur=o(" \u2014 "),BQ=a("a"),Kur=o("TFConvBertForSequenceClassification"),Zur=o(" (ConvBERT model)"),epr=l(),$E=a("li"),S2e=a("strong"),opr=o("ctrl"),rpr=o(" \u2014 "),PQ=a("a"),tpr=o("TFCTRLForSequenceClassification"),apr=o(" (CTRL model)"),npr=l(),kE=a("li"),R2e=a("strong"),spr=o("deberta"),lpr=o(" \u2014 "),IQ=a("a"),ipr=o("TFDebertaForSequenceClassification"),dpr=o(" (DeBERTa model)"),cpr=l(),SE=a("li"),B2e=a("strong"),mpr=o("deberta-v2"),fpr=o(" \u2014 "),qQ=a("a"),gpr=o("TFDebertaV2ForSequenceClassification"),hpr=o(" (DeBERTa-v2 model)"),upr=l(),RE=a("li"),P2e=a("strong"),ppr=o("distilbert"),_pr=o(" \u2014 "),NQ=a("a"),bpr=o("TFDistilBertForSequenceClassification"),Fpr=o(" (DistilBERT model)"),vpr=l(),BE=a("li"),I2e=a("strong"),Tpr=o("electra"),Mpr=o(" \u2014 "),jQ=a("a"),Epr=o("TFElectraForSequenceClassification"),Cpr=o(" (ELECTRA model)"),wpr=l(),PE=a("li"),q2e=a("strong"),Apr=o("flaubert"),ypr=o(" \u2014 "),DQ=a("a"),Lpr=o("TFFlaubertForSequenceClassification"),xpr=o(" (FlauBERT model)"),$pr=l(),IE=a("li"),N2e=a("strong"),kpr=o("funnel"),Spr=o(" \u2014 "),GQ=a("a"),Rpr=o("TFFunnelForSequenceClassification"),Bpr=o(" (Funnel Transformer model)"),Ppr=l(),qE=a("li"),j2e=a("strong"),Ipr=o("gpt2"),qpr=o(" \u2014 "),OQ=a("a"),Npr=o("TFGPT2ForSequenceClassification"),jpr=o(" (OpenAI GPT-2 model)"),Dpr=l(),NE=a("li"),D2e=a("strong"),Gpr=o("gptj"),Opr=o(" \u2014 "),VQ=a("a"),Vpr=o("TFGPTJForSequenceClassification"),Xpr=o(" (GPT-J model)"),zpr=l(),jE=a("li"),G2e=a("strong"),Qpr=o("layoutlm"),Wpr=o(" \u2014 "),XQ=a("a"),Hpr=o("TFLayoutLMForSequenceClassification"),Upr=o(" (LayoutLM model)"),Jpr=l(),DE=a("li"),O2e=a("strong"),Ypr=o("longformer"),Kpr=o(" \u2014 "),zQ=a("a"),Zpr=o("TFLongformerForSequenceClassification"),e_r=o(" (Longformer model)"),o_r=l(),GE=a("li"),V2e=a("strong"),r_r=o("mobilebert"),t_r=o(" \u2014 "),QQ=a("a"),a_r=o("TFMobileBertForSequenceClassification"),n_r=o(" (MobileBERT model)"),s_r=l(),OE=a("li"),X2e=a("strong"),l_r=o("mpnet"),i_r=o(" \u2014 "),WQ=a("a"),d_r=o("TFMPNetForSequenceClassification"),c_r=o(" (MPNet model)"),m_r=l(),VE=a("li"),z2e=a("strong"),f_r=o("openai-gpt"),g_r=o(" \u2014 "),HQ=a("a"),h_r=o("TFOpenAIGPTForSequenceClassification"),u_r=o(" (OpenAI GPT model)"),p_r=l(),XE=a("li"),Q2e=a("strong"),__r=o("rembert"),b_r=o(" \u2014 "),UQ=a("a"),F_r=o("TFRemBertForSequenceClassification"),v_r=o(" (RemBERT model)"),T_r=l(),zE=a("li"),W2e=a("strong"),M_r=o("roberta"),E_r=o(" \u2014 "),JQ=a("a"),C_r=o("TFRobertaForSequenceClassification"),w_r=o(" (RoBERTa model)"),A_r=l(),QE=a("li"),H2e=a("strong"),y_r=o("roformer"),L_r=o(" \u2014 "),YQ=a("a"),x_r=o("TFRoFormerForSequenceClassification"),$_r=o(" (RoFormer model)"),k_r=l(),WE=a("li"),U2e=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),KQ=a("a"),B_r=o("TFTapasForSequenceClassification"),P_r=o(" (TAPAS model)"),I_r=l(),HE=a("li"),J2e=a("strong"),q_r=o("transfo-xl"),N_r=o(" \u2014 "),ZQ=a("a"),j_r=o("TFTransfoXLForSequenceClassification"),D_r=o(" (Transformer-XL model)"),G_r=l(),UE=a("li"),Y2e=a("strong"),O_r=o("xlm"),V_r=o(" \u2014 "),eW=a("a"),X_r=o("TFXLMForSequenceClassification"),z_r=o(" (XLM model)"),Q_r=l(),JE=a("li"),K2e=a("strong"),W_r=o("xlm-roberta"),H_r=o(" \u2014 "),oW=a("a"),U_r=o("TFXLMRobertaForSequenceClassification"),J_r=o(" (XLM-RoBERTa model)"),Y_r=l(),YE=a("li"),Z2e=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),rW=a("a"),ebr=o("TFXLNetForSequenceClassification"),obr=o(" (XLNet model)"),rbr=l(),v(KE.$$.fragment),iPe=l(),Kd=a("h2"),ZE=a("a"),eFe=a("span"),v(B8.$$.fragment),tbr=l(),oFe=a("span"),abr=o("TFAutoModelForMultipleChoice"),dPe=l(),rr=a("div"),v(P8.$$.fragment),nbr=l(),Zd=a("p"),sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tW=a("a"),lbr=o("from_pretrained()"),ibr=o(" class method or the "),aW=a("a"),dbr=o("from_config()"),cbr=o(` class
method.`),mbr=l(),I8=a("p"),fbr=o("This class cannot be instantiated directly using "),rFe=a("code"),gbr=o("__init__()"),hbr=o(" (throws an error)."),ubr=l(),xt=a("div"),v(q8.$$.fragment),pbr=l(),tFe=a("p"),_br=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bbr=l(),ec=a("p"),Fbr=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),vbr=o("not"),Tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),Mbr=o("from_pretrained()"),Ebr=o(" to load the model weights."),Cbr=l(),v(e5.$$.fragment),wbr=l(),xr=a("div"),v(N8.$$.fragment),Abr=l(),nFe=a("p"),ybr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lbr=l(),on=a("p"),xbr=o("The model class to instantiate is selected based on the "),sFe=a("code"),$br=o("model_type"),kbr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),Sbr=o("pretrained_model_name_or_path"),Rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),Bbr=o("pretrained_model_name_or_path"),Pbr=o(":"),Ibr=l(),ue=a("ul"),o5=a("li"),dFe=a("strong"),qbr=o("albert"),Nbr=o(" \u2014 "),sW=a("a"),jbr=o("TFAlbertForMultipleChoice"),Dbr=o(" (ALBERT model)"),Gbr=l(),r5=a("li"),cFe=a("strong"),Obr=o("bert"),Vbr=o(" \u2014 "),lW=a("a"),Xbr=o("TFBertForMultipleChoice"),zbr=o(" (BERT model)"),Qbr=l(),t5=a("li"),mFe=a("strong"),Wbr=o("camembert"),Hbr=o(" \u2014 "),iW=a("a"),Ubr=o("TFCamembertForMultipleChoice"),Jbr=o(" (CamemBERT model)"),Ybr=l(),a5=a("li"),fFe=a("strong"),Kbr=o("convbert"),Zbr=o(" \u2014 "),dW=a("a"),e2r=o("TFConvBertForMultipleChoice"),o2r=o(" (ConvBERT model)"),r2r=l(),n5=a("li"),gFe=a("strong"),t2r=o("distilbert"),a2r=o(" \u2014 "),cW=a("a"),n2r=o("TFDistilBertForMultipleChoice"),s2r=o(" (DistilBERT model)"),l2r=l(),s5=a("li"),hFe=a("strong"),i2r=o("electra"),d2r=o(" \u2014 "),mW=a("a"),c2r=o("TFElectraForMultipleChoice"),m2r=o(" (ELECTRA model)"),f2r=l(),l5=a("li"),uFe=a("strong"),g2r=o("flaubert"),h2r=o(" \u2014 "),fW=a("a"),u2r=o("TFFlaubertForMultipleChoice"),p2r=o(" (FlauBERT model)"),_2r=l(),i5=a("li"),pFe=a("strong"),b2r=o("funnel"),F2r=o(" \u2014 "),gW=a("a"),v2r=o("TFFunnelForMultipleChoice"),T2r=o(" (Funnel Transformer model)"),M2r=l(),d5=a("li"),_Fe=a("strong"),E2r=o("longformer"),C2r=o(" \u2014 "),hW=a("a"),w2r=o("TFLongformerForMultipleChoice"),A2r=o(" (Longformer model)"),y2r=l(),c5=a("li"),bFe=a("strong"),L2r=o("mobilebert"),x2r=o(" \u2014 "),uW=a("a"),$2r=o("TFMobileBertForMultipleChoice"),k2r=o(" (MobileBERT model)"),S2r=l(),m5=a("li"),FFe=a("strong"),R2r=o("mpnet"),B2r=o(" \u2014 "),pW=a("a"),P2r=o("TFMPNetForMultipleChoice"),I2r=o(" (MPNet model)"),q2r=l(),f5=a("li"),vFe=a("strong"),N2r=o("rembert"),j2r=o(" \u2014 "),_W=a("a"),D2r=o("TFRemBertForMultipleChoice"),G2r=o(" (RemBERT model)"),O2r=l(),g5=a("li"),TFe=a("strong"),V2r=o("roberta"),X2r=o(" \u2014 "),bW=a("a"),z2r=o("TFRobertaForMultipleChoice"),Q2r=o(" (RoBERTa model)"),W2r=l(),h5=a("li"),MFe=a("strong"),H2r=o("roformer"),U2r=o(" \u2014 "),FW=a("a"),J2r=o("TFRoFormerForMultipleChoice"),Y2r=o(" (RoFormer model)"),K2r=l(),u5=a("li"),EFe=a("strong"),Z2r=o("xlm"),eFr=o(" \u2014 "),vW=a("a"),oFr=o("TFXLMForMultipleChoice"),rFr=o(" (XLM model)"),tFr=l(),p5=a("li"),CFe=a("strong"),aFr=o("xlm-roberta"),nFr=o(" \u2014 "),TW=a("a"),sFr=o("TFXLMRobertaForMultipleChoice"),lFr=o(" (XLM-RoBERTa model)"),iFr=l(),_5=a("li"),wFe=a("strong"),dFr=o("xlnet"),cFr=o(" \u2014 "),MW=a("a"),mFr=o("TFXLNetForMultipleChoice"),fFr=o(" (XLNet model)"),gFr=l(),v(b5.$$.fragment),cPe=l(),oc=a("h2"),F5=a("a"),AFe=a("span"),v(j8.$$.fragment),hFr=l(),yFe=a("span"),uFr=o("TFAutoModelForTableQuestionAnswering"),mPe=l(),tr=a("div"),v(D8.$$.fragment),pFr=l(),rc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EW=a("a"),bFr=o("from_pretrained()"),FFr=o(" class method or the "),CW=a("a"),vFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),G8=a("p"),EFr=o("This class cannot be instantiated directly using "),LFe=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),$t=a("div"),v(O8.$$.fragment),yFr=l(),xFe=a("p"),LFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xFr=l(),tc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),kFr=o("not"),SFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),RFr=o("from_pretrained()"),BFr=o(" to load the model weights."),PFr=l(),v(v5.$$.fragment),IFr=l(),$r=a("div"),v(V8.$$.fragment),qFr=l(),kFe=a("p"),NFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jFr=l(),rn=a("p"),DFr=o("The model class to instantiate is selected based on the "),SFe=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),VFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(":"),WFr=l(),PFe=a("ul"),T5=a("li"),IFe=a("strong"),HFr=o("tapas"),UFr=o(" \u2014 "),AW=a("a"),JFr=o("TFTapasForQuestionAnswering"),YFr=o(" (TAPAS model)"),KFr=l(),v(M5.$$.fragment),fPe=l(),ac=a("h2"),E5=a("a"),qFe=a("span"),v(X8.$$.fragment),ZFr=l(),NFe=a("span"),evr=o("TFAutoModelForTokenClassification"),gPe=l(),ar=a("div"),v(z8.$$.fragment),ovr=l(),nc=a("p"),rvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yW=a("a"),tvr=o("from_pretrained()"),avr=o(" class method or the "),LW=a("a"),nvr=o("from_config()"),svr=o(` class
method.`),lvr=l(),Q8=a("p"),ivr=o("This class cannot be instantiated directly using "),jFe=a("code"),dvr=o("__init__()"),cvr=o(" (throws an error)."),mvr=l(),kt=a("div"),v(W8.$$.fragment),fvr=l(),DFe=a("p"),gvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hvr=l(),sc=a("p"),uvr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),pvr=o("not"),_vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),bvr=o("from_pretrained()"),Fvr=o(" to load the model weights."),vvr=l(),v(C5.$$.fragment),Tvr=l(),kr=a("div"),v(H8.$$.fragment),Mvr=l(),OFe=a("p"),Evr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cvr=l(),tn=a("p"),wvr=o("The model class to instantiate is selected based on the "),VFe=a("code"),Avr=o("model_type"),yvr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),Lvr=o("pretrained_model_name_or_path"),xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),$vr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),de=a("ul"),w5=a("li"),QFe=a("strong"),Rvr=o("albert"),Bvr=o(" \u2014 "),$W=a("a"),Pvr=o("TFAlbertForTokenClassification"),Ivr=o(" (ALBERT model)"),qvr=l(),A5=a("li"),WFe=a("strong"),Nvr=o("bert"),jvr=o(" \u2014 "),kW=a("a"),Dvr=o("TFBertForTokenClassification"),Gvr=o(" (BERT model)"),Ovr=l(),y5=a("li"),HFe=a("strong"),Vvr=o("camembert"),Xvr=o(" \u2014 "),SW=a("a"),zvr=o("TFCamembertForTokenClassification"),Qvr=o(" (CamemBERT model)"),Wvr=l(),L5=a("li"),UFe=a("strong"),Hvr=o("convbert"),Uvr=o(" \u2014 "),RW=a("a"),Jvr=o("TFConvBertForTokenClassification"),Yvr=o(" (ConvBERT model)"),Kvr=l(),x5=a("li"),JFe=a("strong"),Zvr=o("deberta"),e1r=o(" \u2014 "),BW=a("a"),o1r=o("TFDebertaForTokenClassification"),r1r=o(" (DeBERTa model)"),t1r=l(),$5=a("li"),YFe=a("strong"),a1r=o("deberta-v2"),n1r=o(" \u2014 "),PW=a("a"),s1r=o("TFDebertaV2ForTokenClassification"),l1r=o(" (DeBERTa-v2 model)"),i1r=l(),k5=a("li"),KFe=a("strong"),d1r=o("distilbert"),c1r=o(" \u2014 "),IW=a("a"),m1r=o("TFDistilBertForTokenClassification"),f1r=o(" (DistilBERT model)"),g1r=l(),S5=a("li"),ZFe=a("strong"),h1r=o("electra"),u1r=o(" \u2014 "),qW=a("a"),p1r=o("TFElectraForTokenClassification"),_1r=o(" (ELECTRA model)"),b1r=l(),R5=a("li"),eve=a("strong"),F1r=o("flaubert"),v1r=o(" \u2014 "),NW=a("a"),T1r=o("TFFlaubertForTokenClassification"),M1r=o(" (FlauBERT model)"),E1r=l(),B5=a("li"),ove=a("strong"),C1r=o("funnel"),w1r=o(" \u2014 "),jW=a("a"),A1r=o("TFFunnelForTokenClassification"),y1r=o(" (Funnel Transformer model)"),L1r=l(),P5=a("li"),rve=a("strong"),x1r=o("layoutlm"),$1r=o(" \u2014 "),DW=a("a"),k1r=o("TFLayoutLMForTokenClassification"),S1r=o(" (LayoutLM model)"),R1r=l(),I5=a("li"),tve=a("strong"),B1r=o("longformer"),P1r=o(" \u2014 "),GW=a("a"),I1r=o("TFLongformerForTokenClassification"),q1r=o(" (Longformer model)"),N1r=l(),q5=a("li"),ave=a("strong"),j1r=o("mobilebert"),D1r=o(" \u2014 "),OW=a("a"),G1r=o("TFMobileBertForTokenClassification"),O1r=o(" (MobileBERT model)"),V1r=l(),N5=a("li"),nve=a("strong"),X1r=o("mpnet"),z1r=o(" \u2014 "),VW=a("a"),Q1r=o("TFMPNetForTokenClassification"),W1r=o(" (MPNet model)"),H1r=l(),j5=a("li"),sve=a("strong"),U1r=o("rembert"),J1r=o(" \u2014 "),XW=a("a"),Y1r=o("TFRemBertForTokenClassification"),K1r=o(" (RemBERT model)"),Z1r=l(),D5=a("li"),lve=a("strong"),eTr=o("roberta"),oTr=o(" \u2014 "),zW=a("a"),rTr=o("TFRobertaForTokenClassification"),tTr=o(" (RoBERTa model)"),aTr=l(),G5=a("li"),ive=a("strong"),nTr=o("roformer"),sTr=o(" \u2014 "),QW=a("a"),lTr=o("TFRoFormerForTokenClassification"),iTr=o(" (RoFormer model)"),dTr=l(),O5=a("li"),dve=a("strong"),cTr=o("xlm"),mTr=o(" \u2014 "),WW=a("a"),fTr=o("TFXLMForTokenClassification"),gTr=o(" (XLM model)"),hTr=l(),V5=a("li"),cve=a("strong"),uTr=o("xlm-roberta"),pTr=o(" \u2014 "),HW=a("a"),_Tr=o("TFXLMRobertaForTokenClassification"),bTr=o(" (XLM-RoBERTa model)"),FTr=l(),X5=a("li"),mve=a("strong"),vTr=o("xlnet"),TTr=o(" \u2014 "),UW=a("a"),MTr=o("TFXLNetForTokenClassification"),ETr=o(" (XLNet model)"),CTr=l(),v(z5.$$.fragment),hPe=l(),lc=a("h2"),Q5=a("a"),fve=a("span"),v(U8.$$.fragment),wTr=l(),gve=a("span"),ATr=o("TFAutoModelForQuestionAnswering"),uPe=l(),nr=a("div"),v(J8.$$.fragment),yTr=l(),ic=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),YW=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),Y8=a("p"),BTr=o("This class cannot be instantiated directly using "),hve=a("code"),PTr=o("__init__()"),ITr=o(" (throws an error)."),qTr=l(),St=a("div"),v(K8.$$.fragment),NTr=l(),uve=a("p"),jTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DTr=l(),dc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),QTr=l(),v(W5.$$.fragment),WTr=l(),Sr=a("div"),v(Z8.$$.fragment),HTr=l(),_ve=a("p"),UTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JTr=l(),an=a("p"),YTr=o("The model class to instantiate is selected based on the "),bve=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),ce=a("ul"),H5=a("li"),Tve=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),ZW=a("a"),lMr=o("TFAlbertForQuestionAnswering"),iMr=o(" (ALBERT model)"),dMr=l(),U5=a("li"),Mve=a("strong"),cMr=o("bert"),mMr=o(" \u2014 "),eH=a("a"),fMr=o("TFBertForQuestionAnswering"),gMr=o(" (BERT model)"),hMr=l(),J5=a("li"),Eve=a("strong"),uMr=o("camembert"),pMr=o(" \u2014 "),oH=a("a"),_Mr=o("TFCamembertForQuestionAnswering"),bMr=o(" (CamemBERT model)"),FMr=l(),Y5=a("li"),Cve=a("strong"),vMr=o("convbert"),TMr=o(" \u2014 "),rH=a("a"),MMr=o("TFConvBertForQuestionAnswering"),EMr=o(" (ConvBERT model)"),CMr=l(),K5=a("li"),wve=a("strong"),wMr=o("deberta"),AMr=o(" \u2014 "),tH=a("a"),yMr=o("TFDebertaForQuestionAnswering"),LMr=o(" (DeBERTa model)"),xMr=l(),Z5=a("li"),Ave=a("strong"),$Mr=o("deberta-v2"),kMr=o(" \u2014 "),aH=a("a"),SMr=o("TFDebertaV2ForQuestionAnswering"),RMr=o(" (DeBERTa-v2 model)"),BMr=l(),eC=a("li"),yve=a("strong"),PMr=o("distilbert"),IMr=o(" \u2014 "),nH=a("a"),qMr=o("TFDistilBertForQuestionAnswering"),NMr=o(" (DistilBERT model)"),jMr=l(),oC=a("li"),Lve=a("strong"),DMr=o("electra"),GMr=o(" \u2014 "),sH=a("a"),OMr=o("TFElectraForQuestionAnswering"),VMr=o(" (ELECTRA model)"),XMr=l(),rC=a("li"),xve=a("strong"),zMr=o("flaubert"),QMr=o(" \u2014 "),lH=a("a"),WMr=o("TFFlaubertForQuestionAnsweringSimple"),HMr=o(" (FlauBERT model)"),UMr=l(),tC=a("li"),$ve=a("strong"),JMr=o("funnel"),YMr=o(" \u2014 "),iH=a("a"),KMr=o("TFFunnelForQuestionAnswering"),ZMr=o(" (Funnel Transformer model)"),e4r=l(),aC=a("li"),kve=a("strong"),o4r=o("gptj"),r4r=o(" \u2014 "),dH=a("a"),t4r=o("TFGPTJForQuestionAnswering"),a4r=o(" (GPT-J model)"),n4r=l(),nC=a("li"),Sve=a("strong"),s4r=o("longformer"),l4r=o(" \u2014 "),cH=a("a"),i4r=o("TFLongformerForQuestionAnswering"),d4r=o(" (Longformer model)"),c4r=l(),sC=a("li"),Rve=a("strong"),m4r=o("mobilebert"),f4r=o(" \u2014 "),mH=a("a"),g4r=o("TFMobileBertForQuestionAnswering"),h4r=o(" (MobileBERT model)"),u4r=l(),lC=a("li"),Bve=a("strong"),p4r=o("mpnet"),_4r=o(" \u2014 "),fH=a("a"),b4r=o("TFMPNetForQuestionAnswering"),F4r=o(" (MPNet model)"),v4r=l(),iC=a("li"),Pve=a("strong"),T4r=o("rembert"),M4r=o(" \u2014 "),gH=a("a"),E4r=o("TFRemBertForQuestionAnswering"),C4r=o(" (RemBERT model)"),w4r=l(),dC=a("li"),Ive=a("strong"),A4r=o("roberta"),y4r=o(" \u2014 "),hH=a("a"),L4r=o("TFRobertaForQuestionAnswering"),x4r=o(" (RoBERTa model)"),$4r=l(),cC=a("li"),qve=a("strong"),k4r=o("roformer"),S4r=o(" \u2014 "),uH=a("a"),R4r=o("TFRoFormerForQuestionAnswering"),B4r=o(" (RoFormer model)"),P4r=l(),mC=a("li"),Nve=a("strong"),I4r=o("xlm"),q4r=o(" \u2014 "),pH=a("a"),N4r=o("TFXLMForQuestionAnsweringSimple"),j4r=o(" (XLM model)"),D4r=l(),fC=a("li"),jve=a("strong"),G4r=o("xlm-roberta"),O4r=o(" \u2014 "),_H=a("a"),V4r=o("TFXLMRobertaForQuestionAnswering"),X4r=o(" (XLM-RoBERTa model)"),z4r=l(),gC=a("li"),Dve=a("strong"),Q4r=o("xlnet"),W4r=o(" \u2014 "),bH=a("a"),H4r=o("TFXLNetForQuestionAnsweringSimple"),U4r=o(" (XLNet model)"),J4r=l(),v(hC.$$.fragment),pPe=l(),cc=a("h2"),uC=a("a"),Gve=a("span"),v(e7.$$.fragment),Y4r=l(),Ove=a("span"),K4r=o("TFAutoModelForVision2Seq"),_Pe=l(),sr=a("div"),v(o7.$$.fragment),Z4r=l(),mc=a("p"),eEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FH=a("a"),oEr=o("from_pretrained()"),rEr=o(" class method or the "),vH=a("a"),tEr=o("from_config()"),aEr=o(` class
method.`),nEr=l(),r7=a("p"),sEr=o("This class cannot be instantiated directly using "),Vve=a("code"),lEr=o("__init__()"),iEr=o(" (throws an error)."),dEr=l(),Rt=a("div"),v(t7.$$.fragment),cEr=l(),Xve=a("p"),mEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fEr=l(),fc=a("p"),gEr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),hEr=o("not"),uEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),pEr=o("from_pretrained()"),_Er=o(" to load the model weights."),bEr=l(),v(pC.$$.fragment),FEr=l(),Rr=a("div"),v(a7.$$.fragment),vEr=l(),Qve=a("p"),TEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MEr=l(),nn=a("p"),EEr=o("The model class to instantiate is selected based on the "),Wve=a("code"),CEr=o("model_type"),wEr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),AEr=o("pretrained_model_name_or_path"),yEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),LEr=o("pretrained_model_name_or_path"),xEr=o(":"),$Er=l(),Jve=a("ul"),_C=a("li"),Yve=a("strong"),kEr=o("vision-encoder-decoder"),SEr=o(" \u2014 "),MH=a("a"),REr=o("TFVisionEncoderDecoderModel"),BEr=o(" (Vision Encoder decoder model)"),PEr=l(),v(bC.$$.fragment),bPe=l(),gc=a("h2"),FC=a("a"),Kve=a("span"),v(n7.$$.fragment),IEr=l(),Zve=a("span"),qEr=o("TFAutoModelForSpeechSeq2Seq"),FPe=l(),lr=a("div"),v(s7.$$.fragment),NEr=l(),hc=a("p"),jEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),DEr=o("from_pretrained()"),GEr=o(" class method or the "),CH=a("a"),OEr=o("from_config()"),VEr=o(` class
method.`),XEr=l(),l7=a("p"),zEr=o("This class cannot be instantiated directly using "),e1e=a("code"),QEr=o("__init__()"),WEr=o(" (throws an error)."),HEr=l(),Bt=a("div"),v(i7.$$.fragment),UEr=l(),o1e=a("p"),JEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YEr=l(),uc=a("p"),KEr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),ZEr=o("not"),e5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),o5r=o("from_pretrained()"),r5r=o(" to load the model weights."),t5r=l(),v(vC.$$.fragment),a5r=l(),Br=a("div"),v(d7.$$.fragment),n5r=l(),t1e=a("p"),s5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l5r=l(),sn=a("p"),i5r=o("The model class to instantiate is selected based on the "),a1e=a("code"),d5r=o("model_type"),c5r=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),m5r=o("pretrained_model_name_or_path"),f5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(":"),u5r=l(),l1e=a("ul"),TC=a("li"),i1e=a("strong"),p5r=o("speech_to_text"),_5r=o(" \u2014 "),AH=a("a"),b5r=o("TFSpeech2TextForConditionalGeneration"),F5r=o(" (Speech2Text model)"),v5r=l(),v(MC.$$.fragment),vPe=l(),pc=a("h2"),EC=a("a"),d1e=a("span"),v(c7.$$.fragment),T5r=l(),c1e=a("span"),M5r=o("FlaxAutoModel"),TPe=l(),ir=a("div"),v(m7.$$.fragment),E5r=l(),_c=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=a("a"),w5r=o("from_pretrained()"),A5r=o(" class method or the "),LH=a("a"),y5r=o("from_config()"),L5r=o(` class
method.`),x5r=l(),f7=a("p"),$5r=o("This class cannot be instantiated directly using "),m1e=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),Pt=a("div"),v(g7.$$.fragment),B5r=l(),f1e=a("p"),P5r=o("Instantiates one of the base model classes of the library from a configuration."),I5r=l(),bc=a("p"),q5r=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),N5r=o("not"),j5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),D5r=o("from_pretrained()"),G5r=o(" to load the model weights."),O5r=l(),v(CC.$$.fragment),V5r=l(),Pr=a("div"),v(h7.$$.fragment),X5r=l(),h1e=a("p"),z5r=o("Instantiate one of the base model classes of the library from a pretrained model."),Q5r=l(),ln=a("p"),W5r=o("The model class to instantiate is selected based on the "),u1e=a("code"),H5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),eCr=l(),oe=a("ul"),wC=a("li"),b1e=a("strong"),oCr=o("albert"),rCr=o(" \u2014 "),$H=a("a"),tCr=o("FlaxAlbertModel"),aCr=o(" (ALBERT model)"),nCr=l(),AC=a("li"),F1e=a("strong"),sCr=o("bart"),lCr=o(" \u2014 "),kH=a("a"),iCr=o("FlaxBartModel"),dCr=o(" (BART model)"),cCr=l(),yC=a("li"),v1e=a("strong"),mCr=o("beit"),fCr=o(" \u2014 "),SH=a("a"),gCr=o("FlaxBeitModel"),hCr=o(" (BEiT model)"),uCr=l(),LC=a("li"),T1e=a("strong"),pCr=o("bert"),_Cr=o(" \u2014 "),RH=a("a"),bCr=o("FlaxBertModel"),FCr=o(" (BERT model)"),vCr=l(),xC=a("li"),M1e=a("strong"),TCr=o("big_bird"),MCr=o(" \u2014 "),BH=a("a"),ECr=o("FlaxBigBirdModel"),CCr=o(" (BigBird model)"),wCr=l(),$C=a("li"),E1e=a("strong"),ACr=o("blenderbot"),yCr=o(" \u2014 "),PH=a("a"),LCr=o("FlaxBlenderbotModel"),xCr=o(" (Blenderbot model)"),$Cr=l(),kC=a("li"),C1e=a("strong"),kCr=o("blenderbot-small"),SCr=o(" \u2014 "),IH=a("a"),RCr=o("FlaxBlenderbotSmallModel"),BCr=o(" (BlenderbotSmall model)"),PCr=l(),SC=a("li"),w1e=a("strong"),ICr=o("clip"),qCr=o(" \u2014 "),qH=a("a"),NCr=o("FlaxCLIPModel"),jCr=o(" (CLIP model)"),DCr=l(),RC=a("li"),A1e=a("strong"),GCr=o("distilbert"),OCr=o(" \u2014 "),NH=a("a"),VCr=o("FlaxDistilBertModel"),XCr=o(" (DistilBERT model)"),zCr=l(),BC=a("li"),y1e=a("strong"),QCr=o("electra"),WCr=o(" \u2014 "),jH=a("a"),HCr=o("FlaxElectraModel"),UCr=o(" (ELECTRA model)"),JCr=l(),PC=a("li"),L1e=a("strong"),YCr=o("gpt2"),KCr=o(" \u2014 "),DH=a("a"),ZCr=o("FlaxGPT2Model"),e3r=o(" (OpenAI GPT-2 model)"),o3r=l(),IC=a("li"),x1e=a("strong"),r3r=o("gpt_neo"),t3r=o(" \u2014 "),GH=a("a"),a3r=o("FlaxGPTNeoModel"),n3r=o(" (GPT Neo model)"),s3r=l(),qC=a("li"),$1e=a("strong"),l3r=o("gptj"),i3r=o(" \u2014 "),OH=a("a"),d3r=o("FlaxGPTJModel"),c3r=o(" (GPT-J model)"),m3r=l(),NC=a("li"),k1e=a("strong"),f3r=o("marian"),g3r=o(" \u2014 "),VH=a("a"),h3r=o("FlaxMarianModel"),u3r=o(" (Marian model)"),p3r=l(),jC=a("li"),S1e=a("strong"),_3r=o("mbart"),b3r=o(" \u2014 "),XH=a("a"),F3r=o("FlaxMBartModel"),v3r=o(" (mBART model)"),T3r=l(),DC=a("li"),R1e=a("strong"),M3r=o("mt5"),E3r=o(" \u2014 "),zH=a("a"),C3r=o("FlaxMT5Model"),w3r=o(" (mT5 model)"),A3r=l(),GC=a("li"),B1e=a("strong"),y3r=o("pegasus"),L3r=o(" \u2014 "),QH=a("a"),x3r=o("FlaxPegasusModel"),$3r=o(" (Pegasus model)"),k3r=l(),OC=a("li"),P1e=a("strong"),S3r=o("roberta"),R3r=o(" \u2014 "),WH=a("a"),B3r=o("FlaxRobertaModel"),P3r=o(" (RoBERTa model)"),I3r=l(),VC=a("li"),I1e=a("strong"),q3r=o("roformer"),N3r=o(" \u2014 "),HH=a("a"),j3r=o("FlaxRoFormerModel"),D3r=o(" (RoFormer model)"),G3r=l(),XC=a("li"),q1e=a("strong"),O3r=o("t5"),V3r=o(" \u2014 "),UH=a("a"),X3r=o("FlaxT5Model"),z3r=o(" (T5 model)"),Q3r=l(),zC=a("li"),N1e=a("strong"),W3r=o("vision-text-dual-encoder"),H3r=o(" \u2014 "),JH=a("a"),U3r=o("FlaxVisionTextDualEncoderModel"),J3r=o(" (VisionTextDualEncoder model)"),Y3r=l(),QC=a("li"),j1e=a("strong"),K3r=o("vit"),Z3r=o(" \u2014 "),YH=a("a"),ewr=o("FlaxViTModel"),owr=o(" (ViT model)"),rwr=l(),WC=a("li"),D1e=a("strong"),twr=o("wav2vec2"),awr=o(" \u2014 "),KH=a("a"),nwr=o("FlaxWav2Vec2Model"),swr=o(" (Wav2Vec2 model)"),lwr=l(),HC=a("li"),G1e=a("strong"),iwr=o("xglm"),dwr=o(" \u2014 "),ZH=a("a"),cwr=o("FlaxXGLMModel"),mwr=o(" (XGLM model)"),fwr=l(),UC=a("li"),O1e=a("strong"),gwr=o("xlm-roberta"),hwr=o(" \u2014 "),eU=a("a"),uwr=o("FlaxXLMRobertaModel"),pwr=o(" (XLM-RoBERTa model)"),_wr=l(),v(JC.$$.fragment),MPe=l(),Fc=a("h2"),YC=a("a"),V1e=a("span"),v(u7.$$.fragment),bwr=l(),X1e=a("span"),Fwr=o("FlaxAutoModelForCausalLM"),EPe=l(),dr=a("div"),v(p7.$$.fragment),vwr=l(),vc=a("p"),Twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oU=a("a"),Mwr=o("from_pretrained()"),Ewr=o(" class method or the "),rU=a("a"),Cwr=o("from_config()"),wwr=o(` class
method.`),Awr=l(),_7=a("p"),ywr=o("This class cannot be instantiated directly using "),z1e=a("code"),Lwr=o("__init__()"),xwr=o(" (throws an error)."),$wr=l(),It=a("div"),v(b7.$$.fragment),kwr=l(),Q1e=a("p"),Swr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rwr=l(),Tc=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Pwr=o("not"),Iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),qwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),jwr=l(),v(KC.$$.fragment),Dwr=l(),Ir=a("div"),v(F7.$$.fragment),Gwr=l(),H1e=a("p"),Owr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vwr=l(),dn=a("p"),Xwr=o("The model class to instantiate is selected based on the "),U1e=a("code"),zwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),Wwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),Hr=a("ul"),ZC=a("li"),K1e=a("strong"),Kwr=o("bart"),Zwr=o(" \u2014 "),aU=a("a"),eAr=o("FlaxBartForCausalLM"),oAr=o(" (BART model)"),rAr=l(),e3=a("li"),Z1e=a("strong"),tAr=o("gpt2"),aAr=o(" \u2014 "),nU=a("a"),nAr=o("FlaxGPT2LMHeadModel"),sAr=o(" (OpenAI GPT-2 model)"),lAr=l(),o3=a("li"),eTe=a("strong"),iAr=o("gpt_neo"),dAr=o(" \u2014 "),sU=a("a"),cAr=o("FlaxGPTNeoForCausalLM"),mAr=o(" (GPT Neo model)"),fAr=l(),r3=a("li"),oTe=a("strong"),gAr=o("gptj"),hAr=o(" \u2014 "),lU=a("a"),uAr=o("FlaxGPTJForCausalLM"),pAr=o(" (GPT-J model)"),_Ar=l(),t3=a("li"),rTe=a("strong"),bAr=o("xglm"),FAr=o(" \u2014 "),iU=a("a"),vAr=o("FlaxXGLMForCausalLM"),TAr=o(" (XGLM model)"),MAr=l(),v(a3.$$.fragment),CPe=l(),Mc=a("h2"),n3=a("a"),tTe=a("span"),v(v7.$$.fragment),EAr=l(),aTe=a("span"),CAr=o("FlaxAutoModelForPreTraining"),wPe=l(),cr=a("div"),v(T7.$$.fragment),wAr=l(),Ec=a("p"),AAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=a("a"),yAr=o("from_pretrained()"),LAr=o(" class method or the "),cU=a("a"),xAr=o("from_config()"),$Ar=o(` class
method.`),kAr=l(),M7=a("p"),SAr=o("This class cannot be instantiated directly using "),nTe=a("code"),RAr=o("__init__()"),BAr=o(" (throws an error)."),PAr=l(),qt=a("div"),v(E7.$$.fragment),IAr=l(),sTe=a("p"),qAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NAr=l(),Cc=a("p"),jAr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),DAr=o("not"),GAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),OAr=o("from_pretrained()"),VAr=o(" to load the model weights."),XAr=l(),v(s3.$$.fragment),zAr=l(),qr=a("div"),v(C7.$$.fragment),QAr=l(),iTe=a("p"),WAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),HAr=l(),cn=a("p"),UAr=o("The model class to instantiate is selected based on the "),dTe=a("code"),JAr=o("model_type"),YAr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(":"),r0r=l(),Me=a("ul"),l3=a("li"),fTe=a("strong"),t0r=o("albert"),a0r=o(" \u2014 "),fU=a("a"),n0r=o("FlaxAlbertForPreTraining"),s0r=o(" (ALBERT model)"),l0r=l(),i3=a("li"),gTe=a("strong"),i0r=o("bart"),d0r=o(" \u2014 "),gU=a("a"),c0r=o("FlaxBartForConditionalGeneration"),m0r=o(" (BART model)"),f0r=l(),d3=a("li"),hTe=a("strong"),g0r=o("bert"),h0r=o(" \u2014 "),hU=a("a"),u0r=o("FlaxBertForPreTraining"),p0r=o(" (BERT model)"),_0r=l(),c3=a("li"),uTe=a("strong"),b0r=o("big_bird"),F0r=o(" \u2014 "),uU=a("a"),v0r=o("FlaxBigBirdForPreTraining"),T0r=o(" (BigBird model)"),M0r=l(),m3=a("li"),pTe=a("strong"),E0r=o("electra"),C0r=o(" \u2014 "),pU=a("a"),w0r=o("FlaxElectraForPreTraining"),A0r=o(" (ELECTRA model)"),y0r=l(),f3=a("li"),_Te=a("strong"),L0r=o("mbart"),x0r=o(" \u2014 "),_U=a("a"),$0r=o("FlaxMBartForConditionalGeneration"),k0r=o(" (mBART model)"),S0r=l(),g3=a("li"),bTe=a("strong"),R0r=o("mt5"),B0r=o(" \u2014 "),bU=a("a"),P0r=o("FlaxMT5ForConditionalGeneration"),I0r=o(" (mT5 model)"),q0r=l(),h3=a("li"),FTe=a("strong"),N0r=o("roberta"),j0r=o(" \u2014 "),FU=a("a"),D0r=o("FlaxRobertaForMaskedLM"),G0r=o(" (RoBERTa model)"),O0r=l(),u3=a("li"),vTe=a("strong"),V0r=o("roformer"),X0r=o(" \u2014 "),vU=a("a"),z0r=o("FlaxRoFormerForMaskedLM"),Q0r=o(" (RoFormer model)"),W0r=l(),p3=a("li"),TTe=a("strong"),H0r=o("t5"),U0r=o(" \u2014 "),TU=a("a"),J0r=o("FlaxT5ForConditionalGeneration"),Y0r=o(" (T5 model)"),K0r=l(),_3=a("li"),MTe=a("strong"),Z0r=o("wav2vec2"),e6r=o(" \u2014 "),MU=a("a"),o6r=o("FlaxWav2Vec2ForPreTraining"),r6r=o(" (Wav2Vec2 model)"),t6r=l(),b3=a("li"),ETe=a("strong"),a6r=o("xlm-roberta"),n6r=o(" \u2014 "),EU=a("a"),s6r=o("FlaxXLMRobertaForMaskedLM"),l6r=o(" (XLM-RoBERTa model)"),i6r=l(),v(F3.$$.fragment),APe=l(),wc=a("h2"),v3=a("a"),CTe=a("span"),v(w7.$$.fragment),d6r=l(),wTe=a("span"),c6r=o("FlaxAutoModelForMaskedLM"),yPe=l(),mr=a("div"),v(A7.$$.fragment),m6r=l(),Ac=a("p"),f6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CU=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),wU=a("a"),u6r=o("from_config()"),p6r=o(` class
method.`),_6r=l(),y7=a("p"),b6r=o("This class cannot be instantiated directly using "),ATe=a("code"),F6r=o("__init__()"),v6r=o(" (throws an error)."),T6r=l(),Nt=a("div"),v(L7.$$.fragment),M6r=l(),yTe=a("p"),E6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C6r=l(),yc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),A6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),L6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),v(T3.$$.fragment),k6r=l(),Nr=a("div"),v(x7.$$.fragment),S6r=l(),xTe=a("p"),R6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B6r=l(),mn=a("p"),P6r=o("The model class to instantiate is selected based on the "),$Te=a("code"),I6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),Le=a("ul"),M3=a("li"),RTe=a("strong"),V6r=o("albert"),X6r=o(" \u2014 "),yU=a("a"),z6r=o("FlaxAlbertForMaskedLM"),Q6r=o(" (ALBERT model)"),W6r=l(),E3=a("li"),BTe=a("strong"),H6r=o("bart"),U6r=o(" \u2014 "),LU=a("a"),J6r=o("FlaxBartForConditionalGeneration"),Y6r=o(" (BART model)"),K6r=l(),C3=a("li"),PTe=a("strong"),Z6r=o("bert"),eyr=o(" \u2014 "),xU=a("a"),oyr=o("FlaxBertForMaskedLM"),ryr=o(" (BERT model)"),tyr=l(),w3=a("li"),ITe=a("strong"),ayr=o("big_bird"),nyr=o(" \u2014 "),$U=a("a"),syr=o("FlaxBigBirdForMaskedLM"),lyr=o(" (BigBird model)"),iyr=l(),A3=a("li"),qTe=a("strong"),dyr=o("distilbert"),cyr=o(" \u2014 "),kU=a("a"),myr=o("FlaxDistilBertForMaskedLM"),fyr=o(" (DistilBERT model)"),gyr=l(),y3=a("li"),NTe=a("strong"),hyr=o("electra"),uyr=o(" \u2014 "),SU=a("a"),pyr=o("FlaxElectraForMaskedLM"),_yr=o(" (ELECTRA model)"),byr=l(),L3=a("li"),jTe=a("strong"),Fyr=o("mbart"),vyr=o(" \u2014 "),RU=a("a"),Tyr=o("FlaxMBartForConditionalGeneration"),Myr=o(" (mBART model)"),Eyr=l(),x3=a("li"),DTe=a("strong"),Cyr=o("roberta"),wyr=o(" \u2014 "),BU=a("a"),Ayr=o("FlaxRobertaForMaskedLM"),yyr=o(" (RoBERTa model)"),Lyr=l(),$3=a("li"),GTe=a("strong"),xyr=o("roformer"),$yr=o(" \u2014 "),PU=a("a"),kyr=o("FlaxRoFormerForMaskedLM"),Syr=o(" (RoFormer model)"),Ryr=l(),k3=a("li"),OTe=a("strong"),Byr=o("xlm-roberta"),Pyr=o(" \u2014 "),IU=a("a"),Iyr=o("FlaxXLMRobertaForMaskedLM"),qyr=o(" (XLM-RoBERTa model)"),Nyr=l(),v(S3.$$.fragment),LPe=l(),Lc=a("h2"),R3=a("a"),VTe=a("span"),v($7.$$.fragment),jyr=l(),XTe=a("span"),Dyr=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),fr=a("div"),v(k7.$$.fragment),Gyr=l(),xc=a("p"),Oyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qU=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" class method or the "),NU=a("a"),zyr=o("from_config()"),Qyr=o(` class
method.`),Wyr=l(),S7=a("p"),Hyr=o("This class cannot be instantiated directly using "),zTe=a("code"),Uyr=o("__init__()"),Jyr=o(" (throws an error)."),Yyr=l(),jt=a("div"),v(R7.$$.fragment),Kyr=l(),QTe=a("p"),Zyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eLr=l(),$c=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),aLr=o("from_pretrained()"),nLr=o(" to load the model weights."),sLr=l(),v(B3.$$.fragment),lLr=l(),jr=a("div"),v(B7.$$.fragment),iLr=l(),HTe=a("p"),dLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cLr=l(),fn=a("p"),mLr=o("The model class to instantiate is selected based on the "),UTe=a("code"),fLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),hLr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),ke=a("ul"),P3=a("li"),KTe=a("strong"),FLr=o("bart"),vLr=o(" \u2014 "),DU=a("a"),TLr=o("FlaxBartForConditionalGeneration"),MLr=o(" (BART model)"),ELr=l(),I3=a("li"),ZTe=a("strong"),CLr=o("blenderbot"),wLr=o(" \u2014 "),GU=a("a"),ALr=o("FlaxBlenderbotForConditionalGeneration"),yLr=o(" (Blenderbot model)"),LLr=l(),q3=a("li"),eMe=a("strong"),xLr=o("blenderbot-small"),$Lr=o(" \u2014 "),OU=a("a"),kLr=o("FlaxBlenderbotSmallForConditionalGeneration"),SLr=o(" (BlenderbotSmall model)"),RLr=l(),N3=a("li"),oMe=a("strong"),BLr=o("encoder-decoder"),PLr=o(" \u2014 "),VU=a("a"),ILr=o("FlaxEncoderDecoderModel"),qLr=o(" (Encoder decoder model)"),NLr=l(),j3=a("li"),rMe=a("strong"),jLr=o("marian"),DLr=o(" \u2014 "),XU=a("a"),GLr=o("FlaxMarianMTModel"),OLr=o(" (Marian model)"),VLr=l(),D3=a("li"),tMe=a("strong"),XLr=o("mbart"),zLr=o(" \u2014 "),zU=a("a"),QLr=o("FlaxMBartForConditionalGeneration"),WLr=o(" (mBART model)"),HLr=l(),G3=a("li"),aMe=a("strong"),ULr=o("mt5"),JLr=o(" \u2014 "),QU=a("a"),YLr=o("FlaxMT5ForConditionalGeneration"),KLr=o(" (mT5 model)"),ZLr=l(),O3=a("li"),nMe=a("strong"),e8r=o("pegasus"),o8r=o(" \u2014 "),WU=a("a"),r8r=o("FlaxPegasusForConditionalGeneration"),t8r=o(" (Pegasus model)"),a8r=l(),V3=a("li"),sMe=a("strong"),n8r=o("t5"),s8r=o(" \u2014 "),HU=a("a"),l8r=o("FlaxT5ForConditionalGeneration"),i8r=o(" (T5 model)"),d8r=l(),v(X3.$$.fragment),$Pe=l(),kc=a("h2"),z3=a("a"),lMe=a("span"),v(P7.$$.fragment),c8r=l(),iMe=a("span"),m8r=o("FlaxAutoModelForSequenceClassification"),kPe=l(),gr=a("div"),v(I7.$$.fragment),f8r=l(),Sc=a("p"),g8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=a("a"),h8r=o("from_pretrained()"),u8r=o(" class method or the "),JU=a("a"),p8r=o("from_config()"),_8r=o(` class
method.`),b8r=l(),q7=a("p"),F8r=o("This class cannot be instantiated directly using "),dMe=a("code"),v8r=o("__init__()"),T8r=o(" (throws an error)."),M8r=l(),Dt=a("div"),v(N7.$$.fragment),E8r=l(),cMe=a("p"),C8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w8r=l(),Rc=a("p"),A8r=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),y8r=o("not"),L8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),x8r=o("from_pretrained()"),$8r=o(" to load the model weights."),k8r=l(),v(Q3.$$.fragment),S8r=l(),Dr=a("div"),v(j7.$$.fragment),R8r=l(),fMe=a("p"),B8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P8r=l(),gn=a("p"),I8r=o("The model class to instantiate is selected based on the "),gMe=a("code"),q8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),G8r=o("pretrained_model_name_or_path"),O8r=o(":"),V8r=l(),xe=a("ul"),W3=a("li"),pMe=a("strong"),X8r=o("albert"),z8r=o(" \u2014 "),KU=a("a"),Q8r=o("FlaxAlbertForSequenceClassification"),W8r=o(" (ALBERT model)"),H8r=l(),H3=a("li"),_Me=a("strong"),U8r=o("bart"),J8r=o(" \u2014 "),ZU=a("a"),Y8r=o("FlaxBartForSequenceClassification"),K8r=o(" (BART model)"),Z8r=l(),U3=a("li"),bMe=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),eJ=a("a"),r7r=o("FlaxBertForSequenceClassification"),t7r=o(" (BERT model)"),a7r=l(),J3=a("li"),FMe=a("strong"),n7r=o("big_bird"),s7r=o(" \u2014 "),oJ=a("a"),l7r=o("FlaxBigBirdForSequenceClassification"),i7r=o(" (BigBird model)"),d7r=l(),Y3=a("li"),vMe=a("strong"),c7r=o("distilbert"),m7r=o(" \u2014 "),rJ=a("a"),f7r=o("FlaxDistilBertForSequenceClassification"),g7r=o(" (DistilBERT model)"),h7r=l(),K3=a("li"),TMe=a("strong"),u7r=o("electra"),p7r=o(" \u2014 "),tJ=a("a"),_7r=o("FlaxElectraForSequenceClassification"),b7r=o(" (ELECTRA model)"),F7r=l(),Z3=a("li"),MMe=a("strong"),v7r=o("mbart"),T7r=o(" \u2014 "),aJ=a("a"),M7r=o("FlaxMBartForSequenceClassification"),E7r=o(" (mBART model)"),C7r=l(),ew=a("li"),EMe=a("strong"),w7r=o("roberta"),A7r=o(" \u2014 "),nJ=a("a"),y7r=o("FlaxRobertaForSequenceClassification"),L7r=o(" (RoBERTa model)"),x7r=l(),ow=a("li"),CMe=a("strong"),$7r=o("roformer"),k7r=o(" \u2014 "),sJ=a("a"),S7r=o("FlaxRoFormerForSequenceClassification"),R7r=o(" (RoFormer model)"),B7r=l(),rw=a("li"),wMe=a("strong"),P7r=o("xlm-roberta"),I7r=o(" \u2014 "),lJ=a("a"),q7r=o("FlaxXLMRobertaForSequenceClassification"),N7r=o(" (XLM-RoBERTa model)"),j7r=l(),v(tw.$$.fragment),SPe=l(),Bc=a("h2"),aw=a("a"),AMe=a("span"),v(D7.$$.fragment),D7r=l(),yMe=a("span"),G7r=o("FlaxAutoModelForQuestionAnswering"),RPe=l(),hr=a("div"),v(G7.$$.fragment),O7r=l(),Pc=a("p"),V7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),X7r=o("from_pretrained()"),z7r=o(" class method or the "),dJ=a("a"),Q7r=o("from_config()"),W7r=o(` class
method.`),H7r=l(),O7=a("p"),U7r=o("This class cannot be instantiated directly using "),LMe=a("code"),J7r=o("__init__()"),Y7r=o(" (throws an error)."),K7r=l(),Gt=a("div"),v(V7.$$.fragment),Z7r=l(),xMe=a("p"),exr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oxr=l(),Ic=a("p"),rxr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),txr=o("not"),axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),nxr=o("from_pretrained()"),sxr=o(" to load the model weights."),lxr=l(),v(nw.$$.fragment),ixr=l(),Gr=a("div"),v(X7.$$.fragment),dxr=l(),kMe=a("p"),cxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mxr=l(),hn=a("p"),fxr=o("The model class to instantiate is selected based on the "),SMe=a("code"),gxr=o("model_type"),hxr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),uxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(":"),Fxr=l(),$e=a("ul"),sw=a("li"),PMe=a("strong"),vxr=o("albert"),Txr=o(" \u2014 "),mJ=a("a"),Mxr=o("FlaxAlbertForQuestionAnswering"),Exr=o(" (ALBERT model)"),Cxr=l(),lw=a("li"),IMe=a("strong"),wxr=o("bart"),Axr=o(" \u2014 "),fJ=a("a"),yxr=o("FlaxBartForQuestionAnswering"),Lxr=o(" (BART model)"),xxr=l(),iw=a("li"),qMe=a("strong"),$xr=o("bert"),kxr=o(" \u2014 "),gJ=a("a"),Sxr=o("FlaxBertForQuestionAnswering"),Rxr=o(" (BERT model)"),Bxr=l(),dw=a("li"),NMe=a("strong"),Pxr=o("big_bird"),Ixr=o(" \u2014 "),hJ=a("a"),qxr=o("FlaxBigBirdForQuestionAnswering"),Nxr=o(" (BigBird model)"),jxr=l(),cw=a("li"),jMe=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),uJ=a("a"),Oxr=o("FlaxDistilBertForQuestionAnswering"),Vxr=o(" (DistilBERT model)"),Xxr=l(),mw=a("li"),DMe=a("strong"),zxr=o("electra"),Qxr=o(" \u2014 "),pJ=a("a"),Wxr=o("FlaxElectraForQuestionAnswering"),Hxr=o(" (ELECTRA model)"),Uxr=l(),fw=a("li"),GMe=a("strong"),Jxr=o("mbart"),Yxr=o(" \u2014 "),_J=a("a"),Kxr=o("FlaxMBartForQuestionAnswering"),Zxr=o(" (mBART model)"),e9r=l(),gw=a("li"),OMe=a("strong"),o9r=o("roberta"),r9r=o(" \u2014 "),bJ=a("a"),t9r=o("FlaxRobertaForQuestionAnswering"),a9r=o(" (RoBERTa model)"),n9r=l(),hw=a("li"),VMe=a("strong"),s9r=o("roformer"),l9r=o(" \u2014 "),FJ=a("a"),i9r=o("FlaxRoFormerForQuestionAnswering"),d9r=o(" (RoFormer model)"),c9r=l(),uw=a("li"),XMe=a("strong"),m9r=o("xlm-roberta"),f9r=o(" \u2014 "),vJ=a("a"),g9r=o("FlaxXLMRobertaForQuestionAnswering"),h9r=o(" (XLM-RoBERTa model)"),u9r=l(),v(pw.$$.fragment),BPe=l(),qc=a("h2"),_w=a("a"),zMe=a("span"),v(z7.$$.fragment),p9r=l(),QMe=a("span"),_9r=o("FlaxAutoModelForTokenClassification"),PPe=l(),ur=a("div"),v(Q7.$$.fragment),b9r=l(),Nc=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=a("a"),v9r=o("from_pretrained()"),T9r=o(" class method or the "),MJ=a("a"),M9r=o("from_config()"),E9r=o(` class
method.`),C9r=l(),W7=a("p"),w9r=o("This class cannot be instantiated directly using "),WMe=a("code"),A9r=o("__init__()"),y9r=o(" (throws an error)."),L9r=l(),Ot=a("div"),v(H7.$$.fragment),x9r=l(),HMe=a("p"),$9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k9r=l(),jc=a("p"),S9r=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),R9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),P9r=o("from_pretrained()"),I9r=o(" to load the model weights."),q9r=l(),v(bw.$$.fragment),N9r=l(),Or=a("div"),v(U7.$$.fragment),j9r=l(),JMe=a("p"),D9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G9r=l(),un=a("p"),O9r=o("The model class to instantiate is selected based on the "),YMe=a("code"),V9r=o("model_type"),X9r=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),z9r=o("pretrained_model_name_or_path"),Q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),W9r=o("pretrained_model_name_or_path"),H9r=o(":"),U9r=l(),je=a("ul"),Fw=a("li"),e4e=a("strong"),J9r=o("albert"),Y9r=o(" \u2014 "),CJ=a("a"),K9r=o("FlaxAlbertForTokenClassification"),Z9r=o(" (ALBERT model)"),e$r=l(),vw=a("li"),o4e=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),wJ=a("a"),t$r=o("FlaxBertForTokenClassification"),a$r=o(" (BERT model)"),n$r=l(),Tw=a("li"),r4e=a("strong"),s$r=o("big_bird"),l$r=o(" \u2014 "),AJ=a("a"),i$r=o("FlaxBigBirdForTokenClassification"),d$r=o(" (BigBird model)"),c$r=l(),Mw=a("li"),t4e=a("strong"),m$r=o("distilbert"),f$r=o(" \u2014 "),yJ=a("a"),g$r=o("FlaxDistilBertForTokenClassification"),h$r=o(" (DistilBERT model)"),u$r=l(),Ew=a("li"),a4e=a("strong"),p$r=o("electra"),_$r=o(" \u2014 "),LJ=a("a"),b$r=o("FlaxElectraForTokenClassification"),F$r=o(" (ELECTRA model)"),v$r=l(),Cw=a("li"),n4e=a("strong"),T$r=o("roberta"),M$r=o(" \u2014 "),xJ=a("a"),E$r=o("FlaxRobertaForTokenClassification"),C$r=o(" (RoBERTa model)"),w$r=l(),ww=a("li"),s4e=a("strong"),A$r=o("roformer"),y$r=o(" \u2014 "),$J=a("a"),L$r=o("FlaxRoFormerForTokenClassification"),x$r=o(" (RoFormer model)"),$$r=l(),Aw=a("li"),l4e=a("strong"),k$r=o("xlm-roberta"),S$r=o(" \u2014 "),kJ=a("a"),R$r=o("FlaxXLMRobertaForTokenClassification"),B$r=o(" (XLM-RoBERTa model)"),P$r=l(),v(yw.$$.fragment),IPe=l(),Dc=a("h2"),Lw=a("a"),i4e=a("span"),v(J7.$$.fragment),I$r=l(),d4e=a("span"),q$r=o("FlaxAutoModelForMultipleChoice"),qPe=l(),pr=a("div"),v(Y7.$$.fragment),N$r=l(),Gc=a("p"),j$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SJ=a("a"),D$r=o("from_pretrained()"),G$r=o(" class method or the "),RJ=a("a"),O$r=o("from_config()"),V$r=o(` class
method.`),X$r=l(),K7=a("p"),z$r=o("This class cannot be instantiated directly using "),c4e=a("code"),Q$r=o("__init__()"),W$r=o(" (throws an error)."),H$r=l(),Vt=a("div"),v(Z7.$$.fragment),U$r=l(),m4e=a("p"),J$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y$r=l(),Oc=a("p"),K$r=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),Z$r=o("not"),ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),okr=o("from_pretrained()"),rkr=o(" to load the model weights."),tkr=l(),v(xw.$$.fragment),akr=l(),Vr=a("div"),v(ex.$$.fragment),nkr=l(),g4e=a("p"),skr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lkr=l(),pn=a("p"),ikr=o("The model class to instantiate is selected based on the "),h4e=a("code"),dkr=o("model_type"),ckr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),mkr=o("pretrained_model_name_or_path"),fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),gkr=o("pretrained_model_name_or_path"),hkr=o(":"),ukr=l(),De=a("ul"),$w=a("li"),_4e=a("strong"),pkr=o("albert"),_kr=o(" \u2014 "),PJ=a("a"),bkr=o("FlaxAlbertForMultipleChoice"),Fkr=o(" (ALBERT model)"),vkr=l(),kw=a("li"),b4e=a("strong"),Tkr=o("bert"),Mkr=o(" \u2014 "),IJ=a("a"),Ekr=o("FlaxBertForMultipleChoice"),Ckr=o(" (BERT model)"),wkr=l(),Sw=a("li"),F4e=a("strong"),Akr=o("big_bird"),ykr=o(" \u2014 "),qJ=a("a"),Lkr=o("FlaxBigBirdForMultipleChoice"),xkr=o(" (BigBird model)"),$kr=l(),Rw=a("li"),v4e=a("strong"),kkr=o("distilbert"),Skr=o(" \u2014 "),NJ=a("a"),Rkr=o("FlaxDistilBertForMultipleChoice"),Bkr=o(" (DistilBERT model)"),Pkr=l(),Bw=a("li"),T4e=a("strong"),Ikr=o("electra"),qkr=o(" \u2014 "),jJ=a("a"),Nkr=o("FlaxElectraForMultipleChoice"),jkr=o(" (ELECTRA model)"),Dkr=l(),Pw=a("li"),M4e=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),DJ=a("a"),Vkr=o("FlaxRobertaForMultipleChoice"),Xkr=o(" (RoBERTa model)"),zkr=l(),Iw=a("li"),E4e=a("strong"),Qkr=o("roformer"),Wkr=o(" \u2014 "),GJ=a("a"),Hkr=o("FlaxRoFormerForMultipleChoice"),Ukr=o(" (RoFormer model)"),Jkr=l(),qw=a("li"),C4e=a("strong"),Ykr=o("xlm-roberta"),Kkr=o(" \u2014 "),OJ=a("a"),Zkr=o("FlaxXLMRobertaForMultipleChoice"),eSr=o(" (XLM-RoBERTa model)"),oSr=l(),v(Nw.$$.fragment),NPe=l(),Vc=a("h2"),jw=a("a"),w4e=a("span"),v(ox.$$.fragment),rSr=l(),A4e=a("span"),tSr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),_r=a("div"),v(rx.$$.fragment),aSr=l(),Xc=a("p"),nSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VJ=a("a"),sSr=o("from_pretrained()"),lSr=o(" class method or the "),XJ=a("a"),iSr=o("from_config()"),dSr=o(` class
method.`),cSr=l(),tx=a("p"),mSr=o("This class cannot be instantiated directly using "),y4e=a("code"),fSr=o("__init__()"),gSr=o(" (throws an error)."),hSr=l(),Xt=a("div"),v(ax.$$.fragment),uSr=l(),L4e=a("p"),pSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Sr=l(),zc=a("p"),bSr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),FSr=o("not"),vSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),TSr=o("from_pretrained()"),MSr=o(" to load the model weights."),ESr=l(),v(Dw.$$.fragment),CSr=l(),Xr=a("div"),v(nx.$$.fragment),wSr=l(),$4e=a("p"),ASr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ySr=l(),_n=a("p"),LSr=o("The model class to instantiate is selected based on the "),k4e=a("code"),xSr=o("model_type"),$Sr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),RSr=o("pretrained_model_name_or_path"),BSr=o(":"),PSr=l(),B4e=a("ul"),Gw=a("li"),P4e=a("strong"),ISr=o("bert"),qSr=o(" \u2014 "),QJ=a("a"),NSr=o("FlaxBertForNextSentencePrediction"),jSr=o(" (BERT model)"),DSr=l(),v(Ow.$$.fragment),DPe=l(),Qc=a("h2"),Vw=a("a"),I4e=a("span"),v(sx.$$.fragment),GSr=l(),q4e=a("span"),OSr=o("FlaxAutoModelForImageClassification"),GPe=l(),br=a("div"),v(lx.$$.fragment),VSr=l(),Wc=a("p"),XSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=a("a"),zSr=o("from_pretrained()"),QSr=o(" class method or the "),HJ=a("a"),WSr=o("from_config()"),HSr=o(` class
method.`),USr=l(),ix=a("p"),JSr=o("This class cannot be instantiated directly using "),N4e=a("code"),YSr=o("__init__()"),KSr=o(" (throws an error)."),ZSr=l(),zt=a("div"),v(dx.$$.fragment),eRr=l(),j4e=a("p"),oRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rRr=l(),Hc=a("p"),tRr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),aRr=o("not"),nRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),sRr=o("from_pretrained()"),lRr=o(" to load the model weights."),iRr=l(),v(Xw.$$.fragment),dRr=l(),zr=a("div"),v(cx.$$.fragment),cRr=l(),G4e=a("p"),mRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fRr=l(),bn=a("p"),gRr=o("The model class to instantiate is selected based on the "),O4e=a("code"),hRr=o("model_type"),uRr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),pRr=o("pretrained_model_name_or_path"),_Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),bRr=o("pretrained_model_name_or_path"),FRr=o(":"),vRr=l(),mx=a("ul"),zw=a("li"),z4e=a("strong"),TRr=o("beit"),MRr=o(" \u2014 "),JJ=a("a"),ERr=o("FlaxBeitForImageClassification"),CRr=o(" (BEiT model)"),wRr=l(),Qw=a("li"),Q4e=a("strong"),ARr=o("vit"),yRr=o(" \u2014 "),YJ=a("a"),LRr=o("FlaxViTForImageClassification"),xRr=o(" (ViT model)"),$Rr=l(),v(Ww.$$.fragment),OPe=l(),Uc=a("h2"),Hw=a("a"),W4e=a("span"),v(fx.$$.fragment),kRr=l(),H4e=a("span"),SRr=o("FlaxAutoModelForVision2Seq"),VPe=l(),Fr=a("div"),v(gx.$$.fragment),RRr=l(),Jc=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KJ=a("a"),PRr=o("from_pretrained()"),IRr=o(" class method or the "),ZJ=a("a"),qRr=o("from_config()"),NRr=o(` class
method.`),jRr=l(),hx=a("p"),DRr=o("This class cannot be instantiated directly using "),U4e=a("code"),GRr=o("__init__()"),ORr=o(" (throws an error)."),VRr=l(),Qt=a("div"),v(ux.$$.fragment),XRr=l(),J4e=a("p"),zRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QRr=l(),Yc=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),HRr=o("not"),URr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),JRr=o("from_pretrained()"),YRr=o(" to load the model weights."),KRr=l(),v(Uw.$$.fragment),ZRr=l(),Qr=a("div"),v(px.$$.fragment),eBr=l(),K4e=a("p"),oBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rBr=l(),Fn=a("p"),tBr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),aBr=o("model_type"),nBr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(":"),cBr=l(),rEe=a("ul"),Jw=a("li"),tEe=a("strong"),mBr=o("vision-encoder-decoder"),fBr=o(" \u2014 "),oY=a("a"),gBr=o("FlaxVisionEncoderDecoderModel"),hBr=o(" (Vision Encoder decoder model)"),uBr=l(),v(Yw.$$.fragment),this.h()},l(m){const _=JCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var _x=s(u);f=n(_x,"A",{id:!0,class:!0,href:!0});var aEe=s(f);p=n(aEe,"SPAN",{});var nEe=s(p);T(d.$$.fragment,nEe),nEe.forEach(t),aEe.forEach(t),h=i(_x),vo=n(_x,"SPAN",{});var sEe=s(vo);oi=r(sEe,"Auto Classes"),sEe.forEach(t),_x.forEach(t),om=i(m),Yr=n(m,"P",{});var bx=s(Yr);ri=r(bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(bx,"CODE",{});var lEe=s(ti);g6=r(lEe,"from_pretrained()"),lEe.forEach(t),rm=r(bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bx.forEach(t),Ie=i(m),Oe=n(m,"P",{});var vn=s(Oe);ai=r(vn,"Instantiating one of "),Tn=n(vn,"A",{href:!0});var iEe=s(Tn);h6=r(iEe,"AutoConfig"),iEe.forEach(t),Mn=r(vn,", "),En=n(vn,"A",{href:!0});var dEe=s(En);u6=r(dEe,"AutoModel"),dEe.forEach(t),ni=r(vn,`, and
`),Cn=n(vn,"A",{href:!0});var cEe=s(Cn);p6=r(cEe,"AutoTokenizer"),cEe.forEach(t),si=r(vn," will directly create a class of the relevant architecture. For instance"),vn.forEach(t),tm=i(m),T(ba.$$.fragment,m),Ve=i(m),Ae=n(m,"P",{});var Fx=s(Ae);x9=r(Fx,"will create a model that is an instance of "),li=n(Fx,"A",{href:!0});var mEe=s(li);$9=r(mEe,"BertModel"),mEe.forEach(t),k9=r(Fx,"."),Fx.forEach(t),To=i(m),Fa=n(m,"P",{});var vx=s(Fa);S9=r(vx,"There is one class of "),am=n(vx,"CODE",{});var fEe=s(am);R9=r(fEe,"AutoModel"),fEe.forEach(t),Jqe=r(vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vx.forEach(t),VRe=i(m),ii=n(m,"H2",{class:!0});var Tx=s(ii);nm=n(Tx,"A",{id:!0,class:!0,href:!0});var gEe=s(nm);QK=n(gEe,"SPAN",{});var hEe=s(QK);T(_6.$$.fragment,hEe),hEe.forEach(t),gEe.forEach(t),Yqe=i(Tx),WK=n(Tx,"SPAN",{});var uEe=s(WK);Kqe=r(uEe,"Extending the Auto Classes"),uEe.forEach(t),Tx.forEach(t),XRe=i(m),wn=n(m,"P",{});var Kc=s(wn);Zqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HK=n(Kc,"CODE",{});var pEe=s(HK);eNe=r(pEe,"NewModel"),pEe.forEach(t),oNe=r(Kc,", make sure you have a "),UK=n(Kc,"CODE",{});var _Ee=s(UK);rNe=r(_Ee,"NewModelConfig"),_Ee.forEach(t),tNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),zRe=i(m),T(b6.$$.fragment,m),QRe=i(m),B9=n(m,"P",{});var bEe=s(B9);aNe=r(bEe,"You will then be able to use the auto classes like you would usually do!"),bEe.forEach(t),WRe=i(m),T(sm.$$.fragment,m),HRe=i(m),di=n(m,"H2",{class:!0});var Mx=s(di);lm=n(Mx,"A",{id:!0,class:!0,href:!0});var FEe=s(lm);JK=n(FEe,"SPAN",{});var vEe=s(JK);T(F6.$$.fragment,vEe),vEe.forEach(t),FEe.forEach(t),nNe=i(Mx),YK=n(Mx,"SPAN",{});var TEe=s(YK);sNe=r(TEe,"AutoConfig"),TEe.forEach(t),Mx.forEach(t),URe=i(m),Mo=n(m,"DIV",{class:!0});var Ur=s(Mo);T(v6.$$.fragment,Ur),lNe=i(Ur),T6=n(Ur,"P",{});var Ex=s(T6);iNe=r(Ex,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P9=n(Ex,"A",{href:!0});var MEe=s(P9);dNe=r(MEe,"from_pretrained()"),MEe.forEach(t),cNe=r(Ex," class method."),Ex.forEach(t),mNe=i(Ur),M6=n(Ur,"P",{});var Cx=s(M6);fNe=r(Cx,"This class cannot be instantiated directly using "),KK=n(Cx,"CODE",{});var EEe=s(KK);gNe=r(EEe,"__init__()"),EEe.forEach(t),hNe=r(Cx," (throws an error)."),Cx.forEach(t),uNe=i(Ur),vr=n(Ur,"DIV",{class:!0});var Jr=s(vr);T(E6.$$.fragment,Jr),pNe=i(Jr),ZK=n(Jr,"P",{});var CEe=s(ZK);_Ne=r(CEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CEe.forEach(t),bNe=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);FNe=r(Zc,"The configuration class to instantiate is selected based on the "),eZ=n(Zc,"CODE",{});var wEe=s(eZ);vNe=r(wEe,"model_type"),wEe.forEach(t),TNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oZ=n(Zc,"CODE",{});var AEe=s(oZ);MNe=r(AEe,"pretrained_model_name_or_path"),AEe.forEach(t),ENe=r(Zc,":"),Zc.forEach(t),CNe=i(Jr),A=n(Jr,"UL",{});var y=s(A);im=n(y,"LI",{});var Kw=s(im);rZ=n(Kw,"STRONG",{});var yEe=s(rZ);wNe=r(yEe,"albert"),yEe.forEach(t),ANe=r(Kw," \u2014 "),I9=n(Kw,"A",{href:!0});var LEe=s(I9);yNe=r(LEe,"AlbertConfig"),LEe.forEach(t),LNe=r(Kw," (ALBERT model)"),Kw.forEach(t),xNe=i(y),dm=n(y,"LI",{});var Zw=s(dm);tZ=n(Zw,"STRONG",{});var xEe=s(tZ);$Ne=r(xEe,"bart"),xEe.forEach(t),kNe=r(Zw," \u2014 "),q9=n(Zw,"A",{href:!0});var $Ee=s(q9);SNe=r($Ee,"BartConfig"),$Ee.forEach(t),RNe=r(Zw," (BART model)"),Zw.forEach(t),BNe=i(y),cm=n(y,"LI",{});var eA=s(cm);aZ=n(eA,"STRONG",{});var kEe=s(aZ);PNe=r(kEe,"beit"),kEe.forEach(t),INe=r(eA," \u2014 "),N9=n(eA,"A",{href:!0});var SEe=s(N9);qNe=r(SEe,"BeitConfig"),SEe.forEach(t),NNe=r(eA," (BEiT model)"),eA.forEach(t),jNe=i(y),mm=n(y,"LI",{});var oA=s(mm);nZ=n(oA,"STRONG",{});var REe=s(nZ);DNe=r(REe,"bert"),REe.forEach(t),GNe=r(oA," \u2014 "),j9=n(oA,"A",{href:!0});var BEe=s(j9);ONe=r(BEe,"BertConfig"),BEe.forEach(t),VNe=r(oA," (BERT model)"),oA.forEach(t),XNe=i(y),fm=n(y,"LI",{});var rA=s(fm);sZ=n(rA,"STRONG",{});var PEe=s(sZ);zNe=r(PEe,"bert-generation"),PEe.forEach(t),QNe=r(rA," \u2014 "),D9=n(rA,"A",{href:!0});var IEe=s(D9);WNe=r(IEe,"BertGenerationConfig"),IEe.forEach(t),HNe=r(rA," (Bert Generation model)"),rA.forEach(t),UNe=i(y),gm=n(y,"LI",{});var tA=s(gm);lZ=n(tA,"STRONG",{});var qEe=s(lZ);JNe=r(qEe,"big_bird"),qEe.forEach(t),YNe=r(tA," \u2014 "),G9=n(tA,"A",{href:!0});var NEe=s(G9);KNe=r(NEe,"BigBirdConfig"),NEe.forEach(t),ZNe=r(tA," (BigBird model)"),tA.forEach(t),eje=i(y),hm=n(y,"LI",{});var aA=s(hm);iZ=n(aA,"STRONG",{});var jEe=s(iZ);oje=r(jEe,"bigbird_pegasus"),jEe.forEach(t),rje=r(aA," \u2014 "),O9=n(aA,"A",{href:!0});var DEe=s(O9);tje=r(DEe,"BigBirdPegasusConfig"),DEe.forEach(t),aje=r(aA," (BigBirdPegasus model)"),aA.forEach(t),nje=i(y),um=n(y,"LI",{});var nA=s(um);dZ=n(nA,"STRONG",{});var GEe=s(dZ);sje=r(GEe,"blenderbot"),GEe.forEach(t),lje=r(nA," \u2014 "),V9=n(nA,"A",{href:!0});var OEe=s(V9);ije=r(OEe,"BlenderbotConfig"),OEe.forEach(t),dje=r(nA," (Blenderbot model)"),nA.forEach(t),cje=i(y),pm=n(y,"LI",{});var sA=s(pm);cZ=n(sA,"STRONG",{});var VEe=s(cZ);mje=r(VEe,"blenderbot-small"),VEe.forEach(t),fje=r(sA," \u2014 "),X9=n(sA,"A",{href:!0});var XEe=s(X9);gje=r(XEe,"BlenderbotSmallConfig"),XEe.forEach(t),hje=r(sA," (BlenderbotSmall model)"),sA.forEach(t),uje=i(y),_m=n(y,"LI",{});var lA=s(_m);mZ=n(lA,"STRONG",{});var zEe=s(mZ);pje=r(zEe,"camembert"),zEe.forEach(t),_je=r(lA," \u2014 "),z9=n(lA,"A",{href:!0});var QEe=s(z9);bje=r(QEe,"CamembertConfig"),QEe.forEach(t),Fje=r(lA," (CamemBERT model)"),lA.forEach(t),vje=i(y),bm=n(y,"LI",{});var iA=s(bm);fZ=n(iA,"STRONG",{});var WEe=s(fZ);Tje=r(WEe,"canine"),WEe.forEach(t),Mje=r(iA," \u2014 "),Q9=n(iA,"A",{href:!0});var HEe=s(Q9);Eje=r(HEe,"CanineConfig"),HEe.forEach(t),Cje=r(iA," (Canine model)"),iA.forEach(t),wje=i(y),Fm=n(y,"LI",{});var dA=s(Fm);gZ=n(dA,"STRONG",{});var UEe=s(gZ);Aje=r(UEe,"clip"),UEe.forEach(t),yje=r(dA," \u2014 "),W9=n(dA,"A",{href:!0});var JEe=s(W9);Lje=r(JEe,"CLIPConfig"),JEe.forEach(t),xje=r(dA," (CLIP model)"),dA.forEach(t),$je=i(y),vm=n(y,"LI",{});var cA=s(vm);hZ=n(cA,"STRONG",{});var YEe=s(hZ);kje=r(YEe,"convbert"),YEe.forEach(t),Sje=r(cA," \u2014 "),H9=n(cA,"A",{href:!0});var KEe=s(H9);Rje=r(KEe,"ConvBertConfig"),KEe.forEach(t),Bje=r(cA," (ConvBERT model)"),cA.forEach(t),Pje=i(y),Tm=n(y,"LI",{});var mA=s(Tm);uZ=n(mA,"STRONG",{});var ZEe=s(uZ);Ije=r(ZEe,"convnext"),ZEe.forEach(t),qje=r(mA," \u2014 "),U9=n(mA,"A",{href:!0});var e5e=s(U9);Nje=r(e5e,"ConvNextConfig"),e5e.forEach(t),jje=r(mA," (ConvNext model)"),mA.forEach(t),Dje=i(y),Mm=n(y,"LI",{});var fA=s(Mm);pZ=n(fA,"STRONG",{});var o5e=s(pZ);Gje=r(o5e,"ctrl"),o5e.forEach(t),Oje=r(fA," \u2014 "),J9=n(fA,"A",{href:!0});var r5e=s(J9);Vje=r(r5e,"CTRLConfig"),r5e.forEach(t),Xje=r(fA," (CTRL model)"),fA.forEach(t),zje=i(y),Em=n(y,"LI",{});var gA=s(Em);_Z=n(gA,"STRONG",{});var t5e=s(_Z);Qje=r(t5e,"data2vec-audio"),t5e.forEach(t),Wje=r(gA," \u2014 "),Y9=n(gA,"A",{href:!0});var a5e=s(Y9);Hje=r(a5e,"Data2VecAudioConfig"),a5e.forEach(t),Uje=r(gA," (Data2VecAudio model)"),gA.forEach(t),Jje=i(y),Cm=n(y,"LI",{});var hA=s(Cm);bZ=n(hA,"STRONG",{});var n5e=s(bZ);Yje=r(n5e,"data2vec-text"),n5e.forEach(t),Kje=r(hA," \u2014 "),K9=n(hA,"A",{href:!0});var s5e=s(K9);Zje=r(s5e,"Data2VecTextConfig"),s5e.forEach(t),eDe=r(hA," (Data2VecText model)"),hA.forEach(t),oDe=i(y),wm=n(y,"LI",{});var uA=s(wm);FZ=n(uA,"STRONG",{});var l5e=s(FZ);rDe=r(l5e,"data2vec-vision"),l5e.forEach(t),tDe=r(uA," \u2014 "),Z9=n(uA,"A",{href:!0});var i5e=s(Z9);aDe=r(i5e,"Data2VecVisionConfig"),i5e.forEach(t),nDe=r(uA," (Data2VecVision model)"),uA.forEach(t),sDe=i(y),Am=n(y,"LI",{});var pA=s(Am);vZ=n(pA,"STRONG",{});var d5e=s(vZ);lDe=r(d5e,"deberta"),d5e.forEach(t),iDe=r(pA," \u2014 "),e$=n(pA,"A",{href:!0});var c5e=s(e$);dDe=r(c5e,"DebertaConfig"),c5e.forEach(t),cDe=r(pA," (DeBERTa model)"),pA.forEach(t),mDe=i(y),ym=n(y,"LI",{});var _A=s(ym);TZ=n(_A,"STRONG",{});var m5e=s(TZ);fDe=r(m5e,"deberta-v2"),m5e.forEach(t),gDe=r(_A," \u2014 "),o$=n(_A,"A",{href:!0});var f5e=s(o$);hDe=r(f5e,"DebertaV2Config"),f5e.forEach(t),uDe=r(_A," (DeBERTa-v2 model)"),_A.forEach(t),pDe=i(y),Lm=n(y,"LI",{});var bA=s(Lm);MZ=n(bA,"STRONG",{});var g5e=s(MZ);_De=r(g5e,"decision_transformer"),g5e.forEach(t),bDe=r(bA," \u2014 "),r$=n(bA,"A",{href:!0});var h5e=s(r$);FDe=r(h5e,"DecisionTransformerConfig"),h5e.forEach(t),vDe=r(bA," (Decision Transformer model)"),bA.forEach(t),TDe=i(y),xm=n(y,"LI",{});var FA=s(xm);EZ=n(FA,"STRONG",{});var u5e=s(EZ);MDe=r(u5e,"deit"),u5e.forEach(t),EDe=r(FA," \u2014 "),t$=n(FA,"A",{href:!0});var p5e=s(t$);CDe=r(p5e,"DeiTConfig"),p5e.forEach(t),wDe=r(FA," (DeiT model)"),FA.forEach(t),ADe=i(y),$m=n(y,"LI",{});var _5e=s($m);CZ=n(_5e,"STRONG",{});var _Br=s(CZ);yDe=r(_Br,"detr"),_Br.forEach(t),LDe=r(_5e," \u2014 "),a$=n(_5e,"A",{href:!0});var bBr=s(a$);xDe=r(bBr,"DetrConfig"),bBr.forEach(t),$De=r(_5e," (DETR model)"),_5e.forEach(t),kDe=i(y),km=n(y,"LI",{});var b5e=s(km);wZ=n(b5e,"STRONG",{});var FBr=s(wZ);SDe=r(FBr,"distilbert"),FBr.forEach(t),RDe=r(b5e," \u2014 "),n$=n(b5e,"A",{href:!0});var vBr=s(n$);BDe=r(vBr,"DistilBertConfig"),vBr.forEach(t),PDe=r(b5e," (DistilBERT model)"),b5e.forEach(t),IDe=i(y),Sm=n(y,"LI",{});var F5e=s(Sm);AZ=n(F5e,"STRONG",{});var TBr=s(AZ);qDe=r(TBr,"dpr"),TBr.forEach(t),NDe=r(F5e," \u2014 "),s$=n(F5e,"A",{href:!0});var MBr=s(s$);jDe=r(MBr,"DPRConfig"),MBr.forEach(t),DDe=r(F5e," (DPR model)"),F5e.forEach(t),GDe=i(y),Rm=n(y,"LI",{});var v5e=s(Rm);yZ=n(v5e,"STRONG",{});var EBr=s(yZ);ODe=r(EBr,"dpt"),EBr.forEach(t),VDe=r(v5e," \u2014 "),l$=n(v5e,"A",{href:!0});var CBr=s(l$);XDe=r(CBr,"DPTConfig"),CBr.forEach(t),zDe=r(v5e," (DPT model)"),v5e.forEach(t),QDe=i(y),Bm=n(y,"LI",{});var T5e=s(Bm);LZ=n(T5e,"STRONG",{});var wBr=s(LZ);WDe=r(wBr,"electra"),wBr.forEach(t),HDe=r(T5e," \u2014 "),i$=n(T5e,"A",{href:!0});var ABr=s(i$);UDe=r(ABr,"ElectraConfig"),ABr.forEach(t),JDe=r(T5e," (ELECTRA model)"),T5e.forEach(t),YDe=i(y),Pm=n(y,"LI",{});var M5e=s(Pm);xZ=n(M5e,"STRONG",{});var yBr=s(xZ);KDe=r(yBr,"encoder-decoder"),yBr.forEach(t),ZDe=r(M5e," \u2014 "),d$=n(M5e,"A",{href:!0});var LBr=s(d$);eGe=r(LBr,"EncoderDecoderConfig"),LBr.forEach(t),oGe=r(M5e," (Encoder decoder model)"),M5e.forEach(t),rGe=i(y),Im=n(y,"LI",{});var E5e=s(Im);$Z=n(E5e,"STRONG",{});var xBr=s($Z);tGe=r(xBr,"flaubert"),xBr.forEach(t),aGe=r(E5e," \u2014 "),c$=n(E5e,"A",{href:!0});var $Br=s(c$);nGe=r($Br,"FlaubertConfig"),$Br.forEach(t),sGe=r(E5e," (FlauBERT model)"),E5e.forEach(t),lGe=i(y),qm=n(y,"LI",{});var C5e=s(qm);kZ=n(C5e,"STRONG",{});var kBr=s(kZ);iGe=r(kBr,"fnet"),kBr.forEach(t),dGe=r(C5e," \u2014 "),m$=n(C5e,"A",{href:!0});var SBr=s(m$);cGe=r(SBr,"FNetConfig"),SBr.forEach(t),mGe=r(C5e," (FNet model)"),C5e.forEach(t),fGe=i(y),Nm=n(y,"LI",{});var w5e=s(Nm);SZ=n(w5e,"STRONG",{});var RBr=s(SZ);gGe=r(RBr,"fsmt"),RBr.forEach(t),hGe=r(w5e," \u2014 "),f$=n(w5e,"A",{href:!0});var BBr=s(f$);uGe=r(BBr,"FSMTConfig"),BBr.forEach(t),pGe=r(w5e," (FairSeq Machine-Translation model)"),w5e.forEach(t),_Ge=i(y),jm=n(y,"LI",{});var A5e=s(jm);RZ=n(A5e,"STRONG",{});var PBr=s(RZ);bGe=r(PBr,"funnel"),PBr.forEach(t),FGe=r(A5e," \u2014 "),g$=n(A5e,"A",{href:!0});var IBr=s(g$);vGe=r(IBr,"FunnelConfig"),IBr.forEach(t),TGe=r(A5e," (Funnel Transformer model)"),A5e.forEach(t),MGe=i(y),Dm=n(y,"LI",{});var y5e=s(Dm);BZ=n(y5e,"STRONG",{});var qBr=s(BZ);EGe=r(qBr,"glpn"),qBr.forEach(t),CGe=r(y5e," \u2014 "),h$=n(y5e,"A",{href:!0});var NBr=s(h$);wGe=r(NBr,"GLPNConfig"),NBr.forEach(t),AGe=r(y5e," (GLPN model)"),y5e.forEach(t),yGe=i(y),Gm=n(y,"LI",{});var L5e=s(Gm);PZ=n(L5e,"STRONG",{});var jBr=s(PZ);LGe=r(jBr,"gpt2"),jBr.forEach(t),xGe=r(L5e," \u2014 "),u$=n(L5e,"A",{href:!0});var DBr=s(u$);$Ge=r(DBr,"GPT2Config"),DBr.forEach(t),kGe=r(L5e," (OpenAI GPT-2 model)"),L5e.forEach(t),SGe=i(y),Om=n(y,"LI",{});var x5e=s(Om);IZ=n(x5e,"STRONG",{});var GBr=s(IZ);RGe=r(GBr,"gpt_neo"),GBr.forEach(t),BGe=r(x5e," \u2014 "),p$=n(x5e,"A",{href:!0});var OBr=s(p$);PGe=r(OBr,"GPTNeoConfig"),OBr.forEach(t),IGe=r(x5e," (GPT Neo model)"),x5e.forEach(t),qGe=i(y),Vm=n(y,"LI",{});var $5e=s(Vm);qZ=n($5e,"STRONG",{});var VBr=s(qZ);NGe=r(VBr,"gptj"),VBr.forEach(t),jGe=r($5e," \u2014 "),_$=n($5e,"A",{href:!0});var XBr=s(_$);DGe=r(XBr,"GPTJConfig"),XBr.forEach(t),GGe=r($5e," (GPT-J model)"),$5e.forEach(t),OGe=i(y),Xm=n(y,"LI",{});var k5e=s(Xm);NZ=n(k5e,"STRONG",{});var zBr=s(NZ);VGe=r(zBr,"hubert"),zBr.forEach(t),XGe=r(k5e," \u2014 "),b$=n(k5e,"A",{href:!0});var QBr=s(b$);zGe=r(QBr,"HubertConfig"),QBr.forEach(t),QGe=r(k5e," (Hubert model)"),k5e.forEach(t),WGe=i(y),zm=n(y,"LI",{});var S5e=s(zm);jZ=n(S5e,"STRONG",{});var WBr=s(jZ);HGe=r(WBr,"ibert"),WBr.forEach(t),UGe=r(S5e," \u2014 "),F$=n(S5e,"A",{href:!0});var HBr=s(F$);JGe=r(HBr,"IBertConfig"),HBr.forEach(t),YGe=r(S5e," (I-BERT model)"),S5e.forEach(t),KGe=i(y),Qm=n(y,"LI",{});var R5e=s(Qm);DZ=n(R5e,"STRONG",{});var UBr=s(DZ);ZGe=r(UBr,"imagegpt"),UBr.forEach(t),eOe=r(R5e," \u2014 "),v$=n(R5e,"A",{href:!0});var JBr=s(v$);oOe=r(JBr,"ImageGPTConfig"),JBr.forEach(t),rOe=r(R5e," (ImageGPT model)"),R5e.forEach(t),tOe=i(y),Wm=n(y,"LI",{});var B5e=s(Wm);GZ=n(B5e,"STRONG",{});var YBr=s(GZ);aOe=r(YBr,"layoutlm"),YBr.forEach(t),nOe=r(B5e," \u2014 "),T$=n(B5e,"A",{href:!0});var KBr=s(T$);sOe=r(KBr,"LayoutLMConfig"),KBr.forEach(t),lOe=r(B5e," (LayoutLM model)"),B5e.forEach(t),iOe=i(y),Hm=n(y,"LI",{});var P5e=s(Hm);OZ=n(P5e,"STRONG",{});var ZBr=s(OZ);dOe=r(ZBr,"layoutlmv2"),ZBr.forEach(t),cOe=r(P5e," \u2014 "),M$=n(P5e,"A",{href:!0});var ePr=s(M$);mOe=r(ePr,"LayoutLMv2Config"),ePr.forEach(t),fOe=r(P5e," (LayoutLMv2 model)"),P5e.forEach(t),gOe=i(y),Um=n(y,"LI",{});var I5e=s(Um);VZ=n(I5e,"STRONG",{});var oPr=s(VZ);hOe=r(oPr,"led"),oPr.forEach(t),uOe=r(I5e," \u2014 "),E$=n(I5e,"A",{href:!0});var rPr=s(E$);pOe=r(rPr,"LEDConfig"),rPr.forEach(t),_Oe=r(I5e," (LED model)"),I5e.forEach(t),bOe=i(y),Jm=n(y,"LI",{});var q5e=s(Jm);XZ=n(q5e,"STRONG",{});var tPr=s(XZ);FOe=r(tPr,"longformer"),tPr.forEach(t),vOe=r(q5e," \u2014 "),C$=n(q5e,"A",{href:!0});var aPr=s(C$);TOe=r(aPr,"LongformerConfig"),aPr.forEach(t),MOe=r(q5e," (Longformer model)"),q5e.forEach(t),EOe=i(y),Ym=n(y,"LI",{});var N5e=s(Ym);zZ=n(N5e,"STRONG",{});var nPr=s(zZ);COe=r(nPr,"luke"),nPr.forEach(t),wOe=r(N5e," \u2014 "),w$=n(N5e,"A",{href:!0});var sPr=s(w$);AOe=r(sPr,"LukeConfig"),sPr.forEach(t),yOe=r(N5e," (LUKE model)"),N5e.forEach(t),LOe=i(y),Km=n(y,"LI",{});var j5e=s(Km);QZ=n(j5e,"STRONG",{});var lPr=s(QZ);xOe=r(lPr,"lxmert"),lPr.forEach(t),$Oe=r(j5e," \u2014 "),A$=n(j5e,"A",{href:!0});var iPr=s(A$);kOe=r(iPr,"LxmertConfig"),iPr.forEach(t),SOe=r(j5e," (LXMERT model)"),j5e.forEach(t),ROe=i(y),Zm=n(y,"LI",{});var D5e=s(Zm);WZ=n(D5e,"STRONG",{});var dPr=s(WZ);BOe=r(dPr,"m2m_100"),dPr.forEach(t),POe=r(D5e," \u2014 "),y$=n(D5e,"A",{href:!0});var cPr=s(y$);IOe=r(cPr,"M2M100Config"),cPr.forEach(t),qOe=r(D5e," (M2M100 model)"),D5e.forEach(t),NOe=i(y),ef=n(y,"LI",{});var G5e=s(ef);HZ=n(G5e,"STRONG",{});var mPr=s(HZ);jOe=r(mPr,"marian"),mPr.forEach(t),DOe=r(G5e," \u2014 "),L$=n(G5e,"A",{href:!0});var fPr=s(L$);GOe=r(fPr,"MarianConfig"),fPr.forEach(t),OOe=r(G5e," (Marian model)"),G5e.forEach(t),VOe=i(y),of=n(y,"LI",{});var O5e=s(of);UZ=n(O5e,"STRONG",{});var gPr=s(UZ);XOe=r(gPr,"maskformer"),gPr.forEach(t),zOe=r(O5e," \u2014 "),x$=n(O5e,"A",{href:!0});var hPr=s(x$);QOe=r(hPr,"MaskFormerConfig"),hPr.forEach(t),WOe=r(O5e," (MaskFormer model)"),O5e.forEach(t),HOe=i(y),rf=n(y,"LI",{});var V5e=s(rf);JZ=n(V5e,"STRONG",{});var uPr=s(JZ);UOe=r(uPr,"mbart"),uPr.forEach(t),JOe=r(V5e," \u2014 "),$$=n(V5e,"A",{href:!0});var pPr=s($$);YOe=r(pPr,"MBartConfig"),pPr.forEach(t),KOe=r(V5e," (mBART model)"),V5e.forEach(t),ZOe=i(y),tf=n(y,"LI",{});var X5e=s(tf);YZ=n(X5e,"STRONG",{});var _Pr=s(YZ);eVe=r(_Pr,"megatron-bert"),_Pr.forEach(t),oVe=r(X5e," \u2014 "),k$=n(X5e,"A",{href:!0});var bPr=s(k$);rVe=r(bPr,"MegatronBertConfig"),bPr.forEach(t),tVe=r(X5e," (MegatronBert model)"),X5e.forEach(t),aVe=i(y),af=n(y,"LI",{});var z5e=s(af);KZ=n(z5e,"STRONG",{});var FPr=s(KZ);nVe=r(FPr,"mobilebert"),FPr.forEach(t),sVe=r(z5e," \u2014 "),S$=n(z5e,"A",{href:!0});var vPr=s(S$);lVe=r(vPr,"MobileBertConfig"),vPr.forEach(t),iVe=r(z5e," (MobileBERT model)"),z5e.forEach(t),dVe=i(y),nf=n(y,"LI",{});var Q5e=s(nf);ZZ=n(Q5e,"STRONG",{});var TPr=s(ZZ);cVe=r(TPr,"mpnet"),TPr.forEach(t),mVe=r(Q5e," \u2014 "),R$=n(Q5e,"A",{href:!0});var MPr=s(R$);fVe=r(MPr,"MPNetConfig"),MPr.forEach(t),gVe=r(Q5e," (MPNet model)"),Q5e.forEach(t),hVe=i(y),sf=n(y,"LI",{});var W5e=s(sf);eee=n(W5e,"STRONG",{});var EPr=s(eee);uVe=r(EPr,"mt5"),EPr.forEach(t),pVe=r(W5e," \u2014 "),B$=n(W5e,"A",{href:!0});var CPr=s(B$);_Ve=r(CPr,"MT5Config"),CPr.forEach(t),bVe=r(W5e," (mT5 model)"),W5e.forEach(t),FVe=i(y),lf=n(y,"LI",{});var H5e=s(lf);oee=n(H5e,"STRONG",{});var wPr=s(oee);vVe=r(wPr,"nystromformer"),wPr.forEach(t),TVe=r(H5e," \u2014 "),P$=n(H5e,"A",{href:!0});var APr=s(P$);MVe=r(APr,"NystromformerConfig"),APr.forEach(t),EVe=r(H5e," (Nystromformer model)"),H5e.forEach(t),CVe=i(y),df=n(y,"LI",{});var U5e=s(df);ree=n(U5e,"STRONG",{});var yPr=s(ree);wVe=r(yPr,"openai-gpt"),yPr.forEach(t),AVe=r(U5e," \u2014 "),I$=n(U5e,"A",{href:!0});var LPr=s(I$);yVe=r(LPr,"OpenAIGPTConfig"),LPr.forEach(t),LVe=r(U5e," (OpenAI GPT model)"),U5e.forEach(t),xVe=i(y),cf=n(y,"LI",{});var J5e=s(cf);tee=n(J5e,"STRONG",{});var xPr=s(tee);$Ve=r(xPr,"pegasus"),xPr.forEach(t),kVe=r(J5e," \u2014 "),q$=n(J5e,"A",{href:!0});var $Pr=s(q$);SVe=r($Pr,"PegasusConfig"),$Pr.forEach(t),RVe=r(J5e," (Pegasus model)"),J5e.forEach(t),BVe=i(y),mf=n(y,"LI",{});var Y5e=s(mf);aee=n(Y5e,"STRONG",{});var kPr=s(aee);PVe=r(kPr,"perceiver"),kPr.forEach(t),IVe=r(Y5e," \u2014 "),N$=n(Y5e,"A",{href:!0});var SPr=s(N$);qVe=r(SPr,"PerceiverConfig"),SPr.forEach(t),NVe=r(Y5e," (Perceiver model)"),Y5e.forEach(t),jVe=i(y),ff=n(y,"LI",{});var K5e=s(ff);nee=n(K5e,"STRONG",{});var RPr=s(nee);DVe=r(RPr,"plbart"),RPr.forEach(t),GVe=r(K5e," \u2014 "),j$=n(K5e,"A",{href:!0});var BPr=s(j$);OVe=r(BPr,"PLBartConfig"),BPr.forEach(t),VVe=r(K5e," (PLBart model)"),K5e.forEach(t),XVe=i(y),gf=n(y,"LI",{});var Z5e=s(gf);see=n(Z5e,"STRONG",{});var PPr=s(see);zVe=r(PPr,"poolformer"),PPr.forEach(t),QVe=r(Z5e," \u2014 "),D$=n(Z5e,"A",{href:!0});var IPr=s(D$);WVe=r(IPr,"PoolFormerConfig"),IPr.forEach(t),HVe=r(Z5e," (PoolFormer model)"),Z5e.forEach(t),UVe=i(y),hf=n(y,"LI",{});var eCe=s(hf);lee=n(eCe,"STRONG",{});var qPr=s(lee);JVe=r(qPr,"prophetnet"),qPr.forEach(t),YVe=r(eCe," \u2014 "),G$=n(eCe,"A",{href:!0});var NPr=s(G$);KVe=r(NPr,"ProphetNetConfig"),NPr.forEach(t),ZVe=r(eCe," (ProphetNet model)"),eCe.forEach(t),eXe=i(y),uf=n(y,"LI",{});var oCe=s(uf);iee=n(oCe,"STRONG",{});var jPr=s(iee);oXe=r(jPr,"qdqbert"),jPr.forEach(t),rXe=r(oCe," \u2014 "),O$=n(oCe,"A",{href:!0});var DPr=s(O$);tXe=r(DPr,"QDQBertConfig"),DPr.forEach(t),aXe=r(oCe," (QDQBert model)"),oCe.forEach(t),nXe=i(y),pf=n(y,"LI",{});var rCe=s(pf);dee=n(rCe,"STRONG",{});var GPr=s(dee);sXe=r(GPr,"rag"),GPr.forEach(t),lXe=r(rCe," \u2014 "),V$=n(rCe,"A",{href:!0});var OPr=s(V$);iXe=r(OPr,"RagConfig"),OPr.forEach(t),dXe=r(rCe," (RAG model)"),rCe.forEach(t),cXe=i(y),_f=n(y,"LI",{});var tCe=s(_f);cee=n(tCe,"STRONG",{});var VPr=s(cee);mXe=r(VPr,"realm"),VPr.forEach(t),fXe=r(tCe," \u2014 "),X$=n(tCe,"A",{href:!0});var XPr=s(X$);gXe=r(XPr,"RealmConfig"),XPr.forEach(t),hXe=r(tCe," (Realm model)"),tCe.forEach(t),uXe=i(y),bf=n(y,"LI",{});var aCe=s(bf);mee=n(aCe,"STRONG",{});var zPr=s(mee);pXe=r(zPr,"reformer"),zPr.forEach(t),_Xe=r(aCe," \u2014 "),z$=n(aCe,"A",{href:!0});var QPr=s(z$);bXe=r(QPr,"ReformerConfig"),QPr.forEach(t),FXe=r(aCe," (Reformer model)"),aCe.forEach(t),vXe=i(y),Ff=n(y,"LI",{});var nCe=s(Ff);fee=n(nCe,"STRONG",{});var WPr=s(fee);TXe=r(WPr,"regnet"),WPr.forEach(t),MXe=r(nCe," \u2014 "),Q$=n(nCe,"A",{href:!0});var HPr=s(Q$);EXe=r(HPr,"RegNetConfig"),HPr.forEach(t),CXe=r(nCe," (RegNet model)"),nCe.forEach(t),wXe=i(y),vf=n(y,"LI",{});var sCe=s(vf);gee=n(sCe,"STRONG",{});var UPr=s(gee);AXe=r(UPr,"rembert"),UPr.forEach(t),yXe=r(sCe," \u2014 "),W$=n(sCe,"A",{href:!0});var JPr=s(W$);LXe=r(JPr,"RemBertConfig"),JPr.forEach(t),xXe=r(sCe," (RemBERT model)"),sCe.forEach(t),$Xe=i(y),Tf=n(y,"LI",{});var lCe=s(Tf);hee=n(lCe,"STRONG",{});var YPr=s(hee);kXe=r(YPr,"resnet"),YPr.forEach(t),SXe=r(lCe," \u2014 "),H$=n(lCe,"A",{href:!0});var KPr=s(H$);RXe=r(KPr,"ResNetConfig"),KPr.forEach(t),BXe=r(lCe," (ResNet model)"),lCe.forEach(t),PXe=i(y),Mf=n(y,"LI",{});var iCe=s(Mf);uee=n(iCe,"STRONG",{});var ZPr=s(uee);IXe=r(ZPr,"retribert"),ZPr.forEach(t),qXe=r(iCe," \u2014 "),U$=n(iCe,"A",{href:!0});var eIr=s(U$);NXe=r(eIr,"RetriBertConfig"),eIr.forEach(t),jXe=r(iCe," (RetriBERT model)"),iCe.forEach(t),DXe=i(y),Ef=n(y,"LI",{});var dCe=s(Ef);pee=n(dCe,"STRONG",{});var oIr=s(pee);GXe=r(oIr,"roberta"),oIr.forEach(t),OXe=r(dCe," \u2014 "),J$=n(dCe,"A",{href:!0});var rIr=s(J$);VXe=r(rIr,"RobertaConfig"),rIr.forEach(t),XXe=r(dCe," (RoBERTa model)"),dCe.forEach(t),zXe=i(y),Cf=n(y,"LI",{});var cCe=s(Cf);_ee=n(cCe,"STRONG",{});var tIr=s(_ee);QXe=r(tIr,"roformer"),tIr.forEach(t),WXe=r(cCe," \u2014 "),Y$=n(cCe,"A",{href:!0});var aIr=s(Y$);HXe=r(aIr,"RoFormerConfig"),aIr.forEach(t),UXe=r(cCe," (RoFormer model)"),cCe.forEach(t),JXe=i(y),wf=n(y,"LI",{});var mCe=s(wf);bee=n(mCe,"STRONG",{});var nIr=s(bee);YXe=r(nIr,"segformer"),nIr.forEach(t),KXe=r(mCe," \u2014 "),K$=n(mCe,"A",{href:!0});var sIr=s(K$);ZXe=r(sIr,"SegformerConfig"),sIr.forEach(t),eze=r(mCe," (SegFormer model)"),mCe.forEach(t),oze=i(y),Af=n(y,"LI",{});var fCe=s(Af);Fee=n(fCe,"STRONG",{});var lIr=s(Fee);rze=r(lIr,"sew"),lIr.forEach(t),tze=r(fCe," \u2014 "),Z$=n(fCe,"A",{href:!0});var iIr=s(Z$);aze=r(iIr,"SEWConfig"),iIr.forEach(t),nze=r(fCe," (SEW model)"),fCe.forEach(t),sze=i(y),yf=n(y,"LI",{});var gCe=s(yf);vee=n(gCe,"STRONG",{});var dIr=s(vee);lze=r(dIr,"sew-d"),dIr.forEach(t),ize=r(gCe," \u2014 "),ek=n(gCe,"A",{href:!0});var cIr=s(ek);dze=r(cIr,"SEWDConfig"),cIr.forEach(t),cze=r(gCe," (SEW-D model)"),gCe.forEach(t),mze=i(y),Lf=n(y,"LI",{});var hCe=s(Lf);Tee=n(hCe,"STRONG",{});var mIr=s(Tee);fze=r(mIr,"speech-encoder-decoder"),mIr.forEach(t),gze=r(hCe," \u2014 "),ok=n(hCe,"A",{href:!0});var fIr=s(ok);hze=r(fIr,"SpeechEncoderDecoderConfig"),fIr.forEach(t),uze=r(hCe," (Speech Encoder decoder model)"),hCe.forEach(t),pze=i(y),xf=n(y,"LI",{});var uCe=s(xf);Mee=n(uCe,"STRONG",{});var gIr=s(Mee);_ze=r(gIr,"speech_to_text"),gIr.forEach(t),bze=r(uCe," \u2014 "),rk=n(uCe,"A",{href:!0});var hIr=s(rk);Fze=r(hIr,"Speech2TextConfig"),hIr.forEach(t),vze=r(uCe," (Speech2Text model)"),uCe.forEach(t),Tze=i(y),$f=n(y,"LI",{});var pCe=s($f);Eee=n(pCe,"STRONG",{});var uIr=s(Eee);Mze=r(uIr,"speech_to_text_2"),uIr.forEach(t),Eze=r(pCe," \u2014 "),tk=n(pCe,"A",{href:!0});var pIr=s(tk);Cze=r(pIr,"Speech2Text2Config"),pIr.forEach(t),wze=r(pCe," (Speech2Text2 model)"),pCe.forEach(t),Aze=i(y),kf=n(y,"LI",{});var _Ce=s(kf);Cee=n(_Ce,"STRONG",{});var _Ir=s(Cee);yze=r(_Ir,"splinter"),_Ir.forEach(t),Lze=r(_Ce," \u2014 "),ak=n(_Ce,"A",{href:!0});var bIr=s(ak);xze=r(bIr,"SplinterConfig"),bIr.forEach(t),$ze=r(_Ce," (Splinter model)"),_Ce.forEach(t),kze=i(y),Sf=n(y,"LI",{});var bCe=s(Sf);wee=n(bCe,"STRONG",{});var FIr=s(wee);Sze=r(FIr,"squeezebert"),FIr.forEach(t),Rze=r(bCe," \u2014 "),nk=n(bCe,"A",{href:!0});var vIr=s(nk);Bze=r(vIr,"SqueezeBertConfig"),vIr.forEach(t),Pze=r(bCe," (SqueezeBERT model)"),bCe.forEach(t),Ize=i(y),Rf=n(y,"LI",{});var FCe=s(Rf);Aee=n(FCe,"STRONG",{});var TIr=s(Aee);qze=r(TIr,"swin"),TIr.forEach(t),Nze=r(FCe," \u2014 "),sk=n(FCe,"A",{href:!0});var MIr=s(sk);jze=r(MIr,"SwinConfig"),MIr.forEach(t),Dze=r(FCe," (Swin model)"),FCe.forEach(t),Gze=i(y),Bf=n(y,"LI",{});var vCe=s(Bf);yee=n(vCe,"STRONG",{});var EIr=s(yee);Oze=r(EIr,"t5"),EIr.forEach(t),Vze=r(vCe," \u2014 "),lk=n(vCe,"A",{href:!0});var CIr=s(lk);Xze=r(CIr,"T5Config"),CIr.forEach(t),zze=r(vCe," (T5 model)"),vCe.forEach(t),Qze=i(y),Pf=n(y,"LI",{});var TCe=s(Pf);Lee=n(TCe,"STRONG",{});var wIr=s(Lee);Wze=r(wIr,"tapas"),wIr.forEach(t),Hze=r(TCe," \u2014 "),ik=n(TCe,"A",{href:!0});var AIr=s(ik);Uze=r(AIr,"TapasConfig"),AIr.forEach(t),Jze=r(TCe," (TAPAS model)"),TCe.forEach(t),Yze=i(y),If=n(y,"LI",{});var MCe=s(If);xee=n(MCe,"STRONG",{});var yIr=s(xee);Kze=r(yIr,"tapex"),yIr.forEach(t),Zze=r(MCe," \u2014 "),dk=n(MCe,"A",{href:!0});var LIr=s(dk);eQe=r(LIr,"BartConfig"),LIr.forEach(t),oQe=r(MCe," (TAPEX model)"),MCe.forEach(t),rQe=i(y),qf=n(y,"LI",{});var ECe=s(qf);$ee=n(ECe,"STRONG",{});var xIr=s($ee);tQe=r(xIr,"transfo-xl"),xIr.forEach(t),aQe=r(ECe," \u2014 "),ck=n(ECe,"A",{href:!0});var $Ir=s(ck);nQe=r($Ir,"TransfoXLConfig"),$Ir.forEach(t),sQe=r(ECe," (Transformer-XL model)"),ECe.forEach(t),lQe=i(y),Nf=n(y,"LI",{});var CCe=s(Nf);kee=n(CCe,"STRONG",{});var kIr=s(kee);iQe=r(kIr,"trocr"),kIr.forEach(t),dQe=r(CCe," \u2014 "),mk=n(CCe,"A",{href:!0});var SIr=s(mk);cQe=r(SIr,"TrOCRConfig"),SIr.forEach(t),mQe=r(CCe," (TrOCR model)"),CCe.forEach(t),fQe=i(y),jf=n(y,"LI",{});var wCe=s(jf);See=n(wCe,"STRONG",{});var RIr=s(See);gQe=r(RIr,"unispeech"),RIr.forEach(t),hQe=r(wCe," \u2014 "),fk=n(wCe,"A",{href:!0});var BIr=s(fk);uQe=r(BIr,"UniSpeechConfig"),BIr.forEach(t),pQe=r(wCe," (UniSpeech model)"),wCe.forEach(t),_Qe=i(y),Df=n(y,"LI",{});var ACe=s(Df);Ree=n(ACe,"STRONG",{});var PIr=s(Ree);bQe=r(PIr,"unispeech-sat"),PIr.forEach(t),FQe=r(ACe," \u2014 "),gk=n(ACe,"A",{href:!0});var IIr=s(gk);vQe=r(IIr,"UniSpeechSatConfig"),IIr.forEach(t),TQe=r(ACe," (UniSpeechSat model)"),ACe.forEach(t),MQe=i(y),Gf=n(y,"LI",{});var yCe=s(Gf);Bee=n(yCe,"STRONG",{});var qIr=s(Bee);EQe=r(qIr,"van"),qIr.forEach(t),CQe=r(yCe," \u2014 "),hk=n(yCe,"A",{href:!0});var NIr=s(hk);wQe=r(NIr,"VanConfig"),NIr.forEach(t),AQe=r(yCe," (VAN model)"),yCe.forEach(t),yQe=i(y),Of=n(y,"LI",{});var LCe=s(Of);Pee=n(LCe,"STRONG",{});var jIr=s(Pee);LQe=r(jIr,"vilt"),jIr.forEach(t),xQe=r(LCe," \u2014 "),uk=n(LCe,"A",{href:!0});var DIr=s(uk);$Qe=r(DIr,"ViltConfig"),DIr.forEach(t),kQe=r(LCe," (ViLT model)"),LCe.forEach(t),SQe=i(y),Vf=n(y,"LI",{});var xCe=s(Vf);Iee=n(xCe,"STRONG",{});var GIr=s(Iee);RQe=r(GIr,"vision-encoder-decoder"),GIr.forEach(t),BQe=r(xCe," \u2014 "),pk=n(xCe,"A",{href:!0});var OIr=s(pk);PQe=r(OIr,"VisionEncoderDecoderConfig"),OIr.forEach(t),IQe=r(xCe," (Vision Encoder decoder model)"),xCe.forEach(t),qQe=i(y),Xf=n(y,"LI",{});var $Ce=s(Xf);qee=n($Ce,"STRONG",{});var VIr=s(qee);NQe=r(VIr,"vision-text-dual-encoder"),VIr.forEach(t),jQe=r($Ce," \u2014 "),_k=n($Ce,"A",{href:!0});var XIr=s(_k);DQe=r(XIr,"VisionTextDualEncoderConfig"),XIr.forEach(t),GQe=r($Ce," (VisionTextDualEncoder model)"),$Ce.forEach(t),OQe=i(y),zf=n(y,"LI",{});var kCe=s(zf);Nee=n(kCe,"STRONG",{});var zIr=s(Nee);VQe=r(zIr,"visual_bert"),zIr.forEach(t),XQe=r(kCe," \u2014 "),bk=n(kCe,"A",{href:!0});var QIr=s(bk);zQe=r(QIr,"VisualBertConfig"),QIr.forEach(t),QQe=r(kCe," (VisualBert model)"),kCe.forEach(t),WQe=i(y),Qf=n(y,"LI",{});var SCe=s(Qf);jee=n(SCe,"STRONG",{});var WIr=s(jee);HQe=r(WIr,"vit"),WIr.forEach(t),UQe=r(SCe," \u2014 "),Fk=n(SCe,"A",{href:!0});var HIr=s(Fk);JQe=r(HIr,"ViTConfig"),HIr.forEach(t),YQe=r(SCe," (ViT model)"),SCe.forEach(t),KQe=i(y),Wf=n(y,"LI",{});var RCe=s(Wf);Dee=n(RCe,"STRONG",{});var UIr=s(Dee);ZQe=r(UIr,"vit_mae"),UIr.forEach(t),eWe=r(RCe," \u2014 "),vk=n(RCe,"A",{href:!0});var JIr=s(vk);oWe=r(JIr,"ViTMAEConfig"),JIr.forEach(t),rWe=r(RCe," (ViTMAE model)"),RCe.forEach(t),tWe=i(y),Hf=n(y,"LI",{});var BCe=s(Hf);Gee=n(BCe,"STRONG",{});var YIr=s(Gee);aWe=r(YIr,"wav2vec2"),YIr.forEach(t),nWe=r(BCe," \u2014 "),Tk=n(BCe,"A",{href:!0});var KIr=s(Tk);sWe=r(KIr,"Wav2Vec2Config"),KIr.forEach(t),lWe=r(BCe," (Wav2Vec2 model)"),BCe.forEach(t),iWe=i(y),Uf=n(y,"LI",{});var PCe=s(Uf);Oee=n(PCe,"STRONG",{});var ZIr=s(Oee);dWe=r(ZIr,"wavlm"),ZIr.forEach(t),cWe=r(PCe," \u2014 "),Mk=n(PCe,"A",{href:!0});var eqr=s(Mk);mWe=r(eqr,"WavLMConfig"),eqr.forEach(t),fWe=r(PCe," (WavLM model)"),PCe.forEach(t),gWe=i(y),Jf=n(y,"LI",{});var ICe=s(Jf);Vee=n(ICe,"STRONG",{});var oqr=s(Vee);hWe=r(oqr,"xglm"),oqr.forEach(t),uWe=r(ICe," \u2014 "),Ek=n(ICe,"A",{href:!0});var rqr=s(Ek);pWe=r(rqr,"XGLMConfig"),rqr.forEach(t),_We=r(ICe," (XGLM model)"),ICe.forEach(t),bWe=i(y),Yf=n(y,"LI",{});var qCe=s(Yf);Xee=n(qCe,"STRONG",{});var tqr=s(Xee);FWe=r(tqr,"xlm"),tqr.forEach(t),vWe=r(qCe," \u2014 "),Ck=n(qCe,"A",{href:!0});var aqr=s(Ck);TWe=r(aqr,"XLMConfig"),aqr.forEach(t),MWe=r(qCe," (XLM model)"),qCe.forEach(t),EWe=i(y),Kf=n(y,"LI",{});var NCe=s(Kf);zee=n(NCe,"STRONG",{});var nqr=s(zee);CWe=r(nqr,"xlm-prophetnet"),nqr.forEach(t),wWe=r(NCe," \u2014 "),wk=n(NCe,"A",{href:!0});var sqr=s(wk);AWe=r(sqr,"XLMProphetNetConfig"),sqr.forEach(t),yWe=r(NCe," (XLMProphetNet model)"),NCe.forEach(t),LWe=i(y),Zf=n(y,"LI",{});var jCe=s(Zf);Qee=n(jCe,"STRONG",{});var lqr=s(Qee);xWe=r(lqr,"xlm-roberta"),lqr.forEach(t),$We=r(jCe," \u2014 "),Ak=n(jCe,"A",{href:!0});var iqr=s(Ak);kWe=r(iqr,"XLMRobertaConfig"),iqr.forEach(t),SWe=r(jCe," (XLM-RoBERTa model)"),jCe.forEach(t),RWe=i(y),eg=n(y,"LI",{});var DCe=s(eg);Wee=n(DCe,"STRONG",{});var dqr=s(Wee);BWe=r(dqr,"xlm-roberta-xl"),dqr.forEach(t),PWe=r(DCe," \u2014 "),yk=n(DCe,"A",{href:!0});var cqr=s(yk);IWe=r(cqr,"XLMRobertaXLConfig"),cqr.forEach(t),qWe=r(DCe," (XLM-RoBERTa-XL model)"),DCe.forEach(t),NWe=i(y),og=n(y,"LI",{});var GCe=s(og);Hee=n(GCe,"STRONG",{});var mqr=s(Hee);jWe=r(mqr,"xlnet"),mqr.forEach(t),DWe=r(GCe," \u2014 "),Lk=n(GCe,"A",{href:!0});var fqr=s(Lk);GWe=r(fqr,"XLNetConfig"),fqr.forEach(t),OWe=r(GCe," (XLNet model)"),GCe.forEach(t),VWe=i(y),rg=n(y,"LI",{});var OCe=s(rg);Uee=n(OCe,"STRONG",{});var gqr=s(Uee);XWe=r(gqr,"yolos"),gqr.forEach(t),zWe=r(OCe," \u2014 "),xk=n(OCe,"A",{href:!0});var hqr=s(xk);QWe=r(hqr,"YolosConfig"),hqr.forEach(t),WWe=r(OCe," (YOLOS model)"),OCe.forEach(t),HWe=i(y),tg=n(y,"LI",{});var VCe=s(tg);Jee=n(VCe,"STRONG",{});var uqr=s(Jee);UWe=r(uqr,"yoso"),uqr.forEach(t),JWe=r(VCe," \u2014 "),$k=n(VCe,"A",{href:!0});var pqr=s($k);YWe=r(pqr,"YosoConfig"),pqr.forEach(t),KWe=r(VCe," (YOSO model)"),VCe.forEach(t),y.forEach(t),ZWe=i(Jr),T(ag.$$.fragment,Jr),Jr.forEach(t),eHe=i(Ur),ng=n(Ur,"DIV",{class:!0});var zPe=s(ng);T(C6.$$.fragment,zPe),oHe=i(zPe),Yee=n(zPe,"P",{});var _qr=s(Yee);rHe=r(_qr,"Register a new configuration for this class."),_qr.forEach(t),zPe.forEach(t),Ur.forEach(t),JRe=i(m),mi=n(m,"H2",{class:!0});var QPe=s(mi);sg=n(QPe,"A",{id:!0,class:!0,href:!0});var bqr=s(sg);Kee=n(bqr,"SPAN",{});var Fqr=s(Kee);T(w6.$$.fragment,Fqr),Fqr.forEach(t),bqr.forEach(t),tHe=i(QPe),Zee=n(QPe,"SPAN",{});var vqr=s(Zee);aHe=r(vqr,"AutoTokenizer"),vqr.forEach(t),QPe.forEach(t),YRe=i(m),Eo=n(m,"DIV",{class:!0});var $s=s(Eo);T(A6.$$.fragment,$s),nHe=i($s),y6=n($s,"P",{});var WPe=s(y6);sHe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=n(WPe,"A",{href:!0});var Tqr=s(kk);lHe=r(Tqr,"AutoTokenizer.from_pretrained()"),Tqr.forEach(t),iHe=r(WPe," class method."),WPe.forEach(t),dHe=i($s),L6=n($s,"P",{});var HPe=s(L6);cHe=r(HPe,"This class cannot be instantiated directly using "),eoe=n(HPe,"CODE",{});var Mqr=s(eoe);mHe=r(Mqr,"__init__()"),Mqr.forEach(t),fHe=r(HPe," (throws an error)."),HPe.forEach(t),gHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(x6.$$.fragment,ks),hHe=i(ks),ooe=n(ks,"P",{});var Eqr=s(ooe);uHe=r(Eqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eqr.forEach(t),pHe=i(ks),va=n(ks,"P",{});var vA=s(va);_He=r(vA,"The tokenizer class to instantiate is selected based on the "),roe=n(vA,"CODE",{});var Cqr=s(roe);bHe=r(Cqr,"model_type"),Cqr.forEach(t),FHe=r(vA,` property of the config object (either
passed as an argument or loaded from `),toe=n(vA,"CODE",{});var wqr=s(toe);vHe=r(wqr,"pretrained_model_name_or_path"),wqr.forEach(t),THe=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aoe=n(vA,"CODE",{});var Aqr=s(aoe);MHe=r(Aqr,"pretrained_model_name_or_path"),Aqr.forEach(t),EHe=r(vA,":"),vA.forEach(t),CHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var wx=s(An);noe=n(wx,"STRONG",{});var yqr=s(noe);wHe=r(yqr,"albert"),yqr.forEach(t),AHe=r(wx," \u2014 "),Sk=n(wx,"A",{href:!0});var Lqr=s(Sk);yHe=r(Lqr,"AlbertTokenizer"),Lqr.forEach(t),LHe=r(wx," or "),Rk=n(wx,"A",{href:!0});var xqr=s(Rk);xHe=r(xqr,"AlbertTokenizerFast"),xqr.forEach(t),$He=r(wx," (ALBERT model)"),wx.forEach(t),kHe=i(S),yn=n(S,"LI",{});var Ax=s(yn);soe=n(Ax,"STRONG",{});var $qr=s(soe);SHe=r($qr,"bart"),$qr.forEach(t),RHe=r(Ax," \u2014 "),Bk=n(Ax,"A",{href:!0});var kqr=s(Bk);BHe=r(kqr,"BartTokenizer"),kqr.forEach(t),PHe=r(Ax," or "),Pk=n(Ax,"A",{href:!0});var Sqr=s(Pk);IHe=r(Sqr,"BartTokenizerFast"),Sqr.forEach(t),qHe=r(Ax," (BART model)"),Ax.forEach(t),NHe=i(S),Ln=n(S,"LI",{});var yx=s(Ln);loe=n(yx,"STRONG",{});var Rqr=s(loe);jHe=r(Rqr,"barthez"),Rqr.forEach(t),DHe=r(yx," \u2014 "),Ik=n(yx,"A",{href:!0});var Bqr=s(Ik);GHe=r(Bqr,"BarthezTokenizer"),Bqr.forEach(t),OHe=r(yx," or "),qk=n(yx,"A",{href:!0});var Pqr=s(qk);VHe=r(Pqr,"BarthezTokenizerFast"),Pqr.forEach(t),XHe=r(yx," (BARThez model)"),yx.forEach(t),zHe=i(S),lg=n(S,"LI",{});var XCe=s(lg);ioe=n(XCe,"STRONG",{});var Iqr=s(ioe);QHe=r(Iqr,"bartpho"),Iqr.forEach(t),WHe=r(XCe," \u2014 "),Nk=n(XCe,"A",{href:!0});var qqr=s(Nk);HHe=r(qqr,"BartphoTokenizer"),qqr.forEach(t),UHe=r(XCe," (BARTpho model)"),XCe.forEach(t),JHe=i(S),xn=n(S,"LI",{});var Lx=s(xn);doe=n(Lx,"STRONG",{});var Nqr=s(doe);YHe=r(Nqr,"bert"),Nqr.forEach(t),KHe=r(Lx," \u2014 "),jk=n(Lx,"A",{href:!0});var jqr=s(jk);ZHe=r(jqr,"BertTokenizer"),jqr.forEach(t),eUe=r(Lx," or "),Dk=n(Lx,"A",{href:!0});var Dqr=s(Dk);oUe=r(Dqr,"BertTokenizerFast"),Dqr.forEach(t),rUe=r(Lx," (BERT model)"),Lx.forEach(t),tUe=i(S),ig=n(S,"LI",{});var zCe=s(ig);coe=n(zCe,"STRONG",{});var Gqr=s(coe);aUe=r(Gqr,"bert-generation"),Gqr.forEach(t),nUe=r(zCe," \u2014 "),Gk=n(zCe,"A",{href:!0});var Oqr=s(Gk);sUe=r(Oqr,"BertGenerationTokenizer"),Oqr.forEach(t),lUe=r(zCe," (Bert Generation model)"),zCe.forEach(t),iUe=i(S),dg=n(S,"LI",{});var QCe=s(dg);moe=n(QCe,"STRONG",{});var Vqr=s(moe);dUe=r(Vqr,"bert-japanese"),Vqr.forEach(t),cUe=r(QCe," \u2014 "),Ok=n(QCe,"A",{href:!0});var Xqr=s(Ok);mUe=r(Xqr,"BertJapaneseTokenizer"),Xqr.forEach(t),fUe=r(QCe," (BertJapanese model)"),QCe.forEach(t),gUe=i(S),cg=n(S,"LI",{});var WCe=s(cg);foe=n(WCe,"STRONG",{});var zqr=s(foe);hUe=r(zqr,"bertweet"),zqr.forEach(t),uUe=r(WCe," \u2014 "),Vk=n(WCe,"A",{href:!0});var Qqr=s(Vk);pUe=r(Qqr,"BertweetTokenizer"),Qqr.forEach(t),_Ue=r(WCe," (Bertweet model)"),WCe.forEach(t),bUe=i(S),$n=n(S,"LI",{});var xx=s($n);goe=n(xx,"STRONG",{});var Wqr=s(goe);FUe=r(Wqr,"big_bird"),Wqr.forEach(t),vUe=r(xx," \u2014 "),Xk=n(xx,"A",{href:!0});var Hqr=s(Xk);TUe=r(Hqr,"BigBirdTokenizer"),Hqr.forEach(t),MUe=r(xx," or "),zk=n(xx,"A",{href:!0});var Uqr=s(zk);EUe=r(Uqr,"BigBirdTokenizerFast"),Uqr.forEach(t),CUe=r(xx," (BigBird model)"),xx.forEach(t),wUe=i(S),kn=n(S,"LI",{});var $x=s(kn);hoe=n($x,"STRONG",{});var Jqr=s(hoe);AUe=r(Jqr,"bigbird_pegasus"),Jqr.forEach(t),yUe=r($x," \u2014 "),Qk=n($x,"A",{href:!0});var Yqr=s(Qk);LUe=r(Yqr,"PegasusTokenizer"),Yqr.forEach(t),xUe=r($x," or "),Wk=n($x,"A",{href:!0});var Kqr=s(Wk);$Ue=r(Kqr,"PegasusTokenizerFast"),Kqr.forEach(t),kUe=r($x," (BigBirdPegasus model)"),$x.forEach(t),SUe=i(S),Sn=n(S,"LI",{});var kx=s(Sn);uoe=n(kx,"STRONG",{});var Zqr=s(uoe);RUe=r(Zqr,"blenderbot"),Zqr.forEach(t),BUe=r(kx," \u2014 "),Hk=n(kx,"A",{href:!0});var eNr=s(Hk);PUe=r(eNr,"BlenderbotTokenizer"),eNr.forEach(t),IUe=r(kx," or "),Uk=n(kx,"A",{href:!0});var oNr=s(Uk);qUe=r(oNr,"BlenderbotTokenizerFast"),oNr.forEach(t),NUe=r(kx," (Blenderbot model)"),kx.forEach(t),jUe=i(S),mg=n(S,"LI",{});var HCe=s(mg);poe=n(HCe,"STRONG",{});var rNr=s(poe);DUe=r(rNr,"blenderbot-small"),rNr.forEach(t),GUe=r(HCe," \u2014 "),Jk=n(HCe,"A",{href:!0});var tNr=s(Jk);OUe=r(tNr,"BlenderbotSmallTokenizer"),tNr.forEach(t),VUe=r(HCe," (BlenderbotSmall model)"),HCe.forEach(t),XUe=i(S),fg=n(S,"LI",{});var UCe=s(fg);_oe=n(UCe,"STRONG",{});var aNr=s(_oe);zUe=r(aNr,"byt5"),aNr.forEach(t),QUe=r(UCe," \u2014 "),Yk=n(UCe,"A",{href:!0});var nNr=s(Yk);WUe=r(nNr,"ByT5Tokenizer"),nNr.forEach(t),HUe=r(UCe," (ByT5 model)"),UCe.forEach(t),UUe=i(S),Rn=n(S,"LI",{});var Sx=s(Rn);boe=n(Sx,"STRONG",{});var sNr=s(boe);JUe=r(sNr,"camembert"),sNr.forEach(t),YUe=r(Sx," \u2014 "),Kk=n(Sx,"A",{href:!0});var lNr=s(Kk);KUe=r(lNr,"CamembertTokenizer"),lNr.forEach(t),ZUe=r(Sx," or "),Zk=n(Sx,"A",{href:!0});var iNr=s(Zk);eJe=r(iNr,"CamembertTokenizerFast"),iNr.forEach(t),oJe=r(Sx," (CamemBERT model)"),Sx.forEach(t),rJe=i(S),gg=n(S,"LI",{});var JCe=s(gg);Foe=n(JCe,"STRONG",{});var dNr=s(Foe);tJe=r(dNr,"canine"),dNr.forEach(t),aJe=r(JCe," \u2014 "),eS=n(JCe,"A",{href:!0});var cNr=s(eS);nJe=r(cNr,"CanineTokenizer"),cNr.forEach(t),sJe=r(JCe," (Canine model)"),JCe.forEach(t),lJe=i(S),Bn=n(S,"LI",{});var Rx=s(Bn);voe=n(Rx,"STRONG",{});var mNr=s(voe);iJe=r(mNr,"clip"),mNr.forEach(t),dJe=r(Rx," \u2014 "),oS=n(Rx,"A",{href:!0});var fNr=s(oS);cJe=r(fNr,"CLIPTokenizer"),fNr.forEach(t),mJe=r(Rx," or "),rS=n(Rx,"A",{href:!0});var gNr=s(rS);fJe=r(gNr,"CLIPTokenizerFast"),gNr.forEach(t),gJe=r(Rx," (CLIP model)"),Rx.forEach(t),hJe=i(S),Pn=n(S,"LI",{});var Bx=s(Pn);Toe=n(Bx,"STRONG",{});var hNr=s(Toe);uJe=r(hNr,"convbert"),hNr.forEach(t),pJe=r(Bx," \u2014 "),tS=n(Bx,"A",{href:!0});var uNr=s(tS);_Je=r(uNr,"ConvBertTokenizer"),uNr.forEach(t),bJe=r(Bx," or "),aS=n(Bx,"A",{href:!0});var pNr=s(aS);FJe=r(pNr,"ConvBertTokenizerFast"),pNr.forEach(t),vJe=r(Bx," (ConvBERT model)"),Bx.forEach(t),TJe=i(S),In=n(S,"LI",{});var Px=s(In);Moe=n(Px,"STRONG",{});var _Nr=s(Moe);MJe=r(_Nr,"cpm"),_Nr.forEach(t),EJe=r(Px," \u2014 "),nS=n(Px,"A",{href:!0});var bNr=s(nS);CJe=r(bNr,"CpmTokenizer"),bNr.forEach(t),wJe=r(Px," or "),sS=n(Px,"A",{href:!0});var FNr=s(sS);AJe=r(FNr,"CpmTokenizerFast"),FNr.forEach(t),yJe=r(Px," (CPM model)"),Px.forEach(t),LJe=i(S),hg=n(S,"LI",{});var YCe=s(hg);Eoe=n(YCe,"STRONG",{});var vNr=s(Eoe);xJe=r(vNr,"ctrl"),vNr.forEach(t),$Je=r(YCe," \u2014 "),lS=n(YCe,"A",{href:!0});var TNr=s(lS);kJe=r(TNr,"CTRLTokenizer"),TNr.forEach(t),SJe=r(YCe," (CTRL model)"),YCe.forEach(t),RJe=i(S),qn=n(S,"LI",{});var Ix=s(qn);Coe=n(Ix,"STRONG",{});var MNr=s(Coe);BJe=r(MNr,"data2vec-text"),MNr.forEach(t),PJe=r(Ix," \u2014 "),iS=n(Ix,"A",{href:!0});var ENr=s(iS);IJe=r(ENr,"RobertaTokenizer"),ENr.forEach(t),qJe=r(Ix," or "),dS=n(Ix,"A",{href:!0});var CNr=s(dS);NJe=r(CNr,"RobertaTokenizerFast"),CNr.forEach(t),jJe=r(Ix," (Data2VecText model)"),Ix.forEach(t),DJe=i(S),Nn=n(S,"LI",{});var qx=s(Nn);woe=n(qx,"STRONG",{});var wNr=s(woe);GJe=r(wNr,"deberta"),wNr.forEach(t),OJe=r(qx," \u2014 "),cS=n(qx,"A",{href:!0});var ANr=s(cS);VJe=r(ANr,"DebertaTokenizer"),ANr.forEach(t),XJe=r(qx," or "),mS=n(qx,"A",{href:!0});var yNr=s(mS);zJe=r(yNr,"DebertaTokenizerFast"),yNr.forEach(t),QJe=r(qx," (DeBERTa model)"),qx.forEach(t),WJe=i(S),jn=n(S,"LI",{});var Nx=s(jn);Aoe=n(Nx,"STRONG",{});var LNr=s(Aoe);HJe=r(LNr,"deberta-v2"),LNr.forEach(t),UJe=r(Nx," \u2014 "),fS=n(Nx,"A",{href:!0});var xNr=s(fS);JJe=r(xNr,"DebertaV2Tokenizer"),xNr.forEach(t),YJe=r(Nx," or "),gS=n(Nx,"A",{href:!0});var $Nr=s(gS);KJe=r($Nr,"DebertaV2TokenizerFast"),$Nr.forEach(t),ZJe=r(Nx," (DeBERTa-v2 model)"),Nx.forEach(t),eYe=i(S),Dn=n(S,"LI",{});var jx=s(Dn);yoe=n(jx,"STRONG",{});var kNr=s(yoe);oYe=r(kNr,"distilbert"),kNr.forEach(t),rYe=r(jx," \u2014 "),hS=n(jx,"A",{href:!0});var SNr=s(hS);tYe=r(SNr,"DistilBertTokenizer"),SNr.forEach(t),aYe=r(jx," or "),uS=n(jx,"A",{href:!0});var RNr=s(uS);nYe=r(RNr,"DistilBertTokenizerFast"),RNr.forEach(t),sYe=r(jx," (DistilBERT model)"),jx.forEach(t),lYe=i(S),Gn=n(S,"LI",{});var Dx=s(Gn);Loe=n(Dx,"STRONG",{});var BNr=s(Loe);iYe=r(BNr,"dpr"),BNr.forEach(t),dYe=r(Dx," \u2014 "),pS=n(Dx,"A",{href:!0});var PNr=s(pS);cYe=r(PNr,"DPRQuestionEncoderTokenizer"),PNr.forEach(t),mYe=r(Dx," or "),_S=n(Dx,"A",{href:!0});var INr=s(_S);fYe=r(INr,"DPRQuestionEncoderTokenizerFast"),INr.forEach(t),gYe=r(Dx," (DPR model)"),Dx.forEach(t),hYe=i(S),On=n(S,"LI",{});var Gx=s(On);xoe=n(Gx,"STRONG",{});var qNr=s(xoe);uYe=r(qNr,"electra"),qNr.forEach(t),pYe=r(Gx," \u2014 "),bS=n(Gx,"A",{href:!0});var NNr=s(bS);_Ye=r(NNr,"ElectraTokenizer"),NNr.forEach(t),bYe=r(Gx," or "),FS=n(Gx,"A",{href:!0});var jNr=s(FS);FYe=r(jNr,"ElectraTokenizerFast"),jNr.forEach(t),vYe=r(Gx," (ELECTRA model)"),Gx.forEach(t),TYe=i(S),ug=n(S,"LI",{});var KCe=s(ug);$oe=n(KCe,"STRONG",{});var DNr=s($oe);MYe=r(DNr,"flaubert"),DNr.forEach(t),EYe=r(KCe," \u2014 "),vS=n(KCe,"A",{href:!0});var GNr=s(vS);CYe=r(GNr,"FlaubertTokenizer"),GNr.forEach(t),wYe=r(KCe," (FlauBERT model)"),KCe.forEach(t),AYe=i(S),Vn=n(S,"LI",{});var Ox=s(Vn);koe=n(Ox,"STRONG",{});var ONr=s(koe);yYe=r(ONr,"fnet"),ONr.forEach(t),LYe=r(Ox," \u2014 "),TS=n(Ox,"A",{href:!0});var VNr=s(TS);xYe=r(VNr,"FNetTokenizer"),VNr.forEach(t),$Ye=r(Ox," or "),MS=n(Ox,"A",{href:!0});var XNr=s(MS);kYe=r(XNr,"FNetTokenizerFast"),XNr.forEach(t),SYe=r(Ox," (FNet model)"),Ox.forEach(t),RYe=i(S),pg=n(S,"LI",{});var ZCe=s(pg);Soe=n(ZCe,"STRONG",{});var zNr=s(Soe);BYe=r(zNr,"fsmt"),zNr.forEach(t),PYe=r(ZCe," \u2014 "),ES=n(ZCe,"A",{href:!0});var QNr=s(ES);IYe=r(QNr,"FSMTTokenizer"),QNr.forEach(t),qYe=r(ZCe," (FairSeq Machine-Translation model)"),ZCe.forEach(t),NYe=i(S),Xn=n(S,"LI",{});var Vx=s(Xn);Roe=n(Vx,"STRONG",{});var WNr=s(Roe);jYe=r(WNr,"funnel"),WNr.forEach(t),DYe=r(Vx," \u2014 "),CS=n(Vx,"A",{href:!0});var HNr=s(CS);GYe=r(HNr,"FunnelTokenizer"),HNr.forEach(t),OYe=r(Vx," or "),wS=n(Vx,"A",{href:!0});var UNr=s(wS);VYe=r(UNr,"FunnelTokenizerFast"),UNr.forEach(t),XYe=r(Vx," (Funnel Transformer model)"),Vx.forEach(t),zYe=i(S),zn=n(S,"LI",{});var Xx=s(zn);Boe=n(Xx,"STRONG",{});var JNr=s(Boe);QYe=r(JNr,"gpt2"),JNr.forEach(t),WYe=r(Xx," \u2014 "),AS=n(Xx,"A",{href:!0});var YNr=s(AS);HYe=r(YNr,"GPT2Tokenizer"),YNr.forEach(t),UYe=r(Xx," or "),yS=n(Xx,"A",{href:!0});var KNr=s(yS);JYe=r(KNr,"GPT2TokenizerFast"),KNr.forEach(t),YYe=r(Xx," (OpenAI GPT-2 model)"),Xx.forEach(t),KYe=i(S),Qn=n(S,"LI",{});var zx=s(Qn);Poe=n(zx,"STRONG",{});var ZNr=s(Poe);ZYe=r(ZNr,"gpt_neo"),ZNr.forEach(t),eKe=r(zx," \u2014 "),LS=n(zx,"A",{href:!0});var ejr=s(LS);oKe=r(ejr,"GPT2Tokenizer"),ejr.forEach(t),rKe=r(zx," or "),xS=n(zx,"A",{href:!0});var ojr=s(xS);tKe=r(ojr,"GPT2TokenizerFast"),ojr.forEach(t),aKe=r(zx," (GPT Neo model)"),zx.forEach(t),nKe=i(S),Wn=n(S,"LI",{});var Qx=s(Wn);Ioe=n(Qx,"STRONG",{});var rjr=s(Ioe);sKe=r(rjr,"gptj"),rjr.forEach(t),lKe=r(Qx," \u2014 "),$S=n(Qx,"A",{href:!0});var tjr=s($S);iKe=r(tjr,"GPT2Tokenizer"),tjr.forEach(t),dKe=r(Qx," or "),kS=n(Qx,"A",{href:!0});var ajr=s(kS);cKe=r(ajr,"GPT2TokenizerFast"),ajr.forEach(t),mKe=r(Qx," (GPT-J model)"),Qx.forEach(t),fKe=i(S),Hn=n(S,"LI",{});var Wx=s(Hn);qoe=n(Wx,"STRONG",{});var njr=s(qoe);gKe=r(njr,"herbert"),njr.forEach(t),hKe=r(Wx," \u2014 "),SS=n(Wx,"A",{href:!0});var sjr=s(SS);uKe=r(sjr,"HerbertTokenizer"),sjr.forEach(t),pKe=r(Wx," or "),RS=n(Wx,"A",{href:!0});var ljr=s(RS);_Ke=r(ljr,"HerbertTokenizerFast"),ljr.forEach(t),bKe=r(Wx," (HerBERT model)"),Wx.forEach(t),FKe=i(S),_g=n(S,"LI",{});var e3e=s(_g);Noe=n(e3e,"STRONG",{});var ijr=s(Noe);vKe=r(ijr,"hubert"),ijr.forEach(t),TKe=r(e3e," \u2014 "),BS=n(e3e,"A",{href:!0});var djr=s(BS);MKe=r(djr,"Wav2Vec2CTCTokenizer"),djr.forEach(t),EKe=r(e3e," (Hubert model)"),e3e.forEach(t),CKe=i(S),Un=n(S,"LI",{});var Hx=s(Un);joe=n(Hx,"STRONG",{});var cjr=s(joe);wKe=r(cjr,"ibert"),cjr.forEach(t),AKe=r(Hx," \u2014 "),PS=n(Hx,"A",{href:!0});var mjr=s(PS);yKe=r(mjr,"RobertaTokenizer"),mjr.forEach(t),LKe=r(Hx," or "),IS=n(Hx,"A",{href:!0});var fjr=s(IS);xKe=r(fjr,"RobertaTokenizerFast"),fjr.forEach(t),$Ke=r(Hx," (I-BERT model)"),Hx.forEach(t),kKe=i(S),Jn=n(S,"LI",{});var Ux=s(Jn);Doe=n(Ux,"STRONG",{});var gjr=s(Doe);SKe=r(gjr,"layoutlm"),gjr.forEach(t),RKe=r(Ux," \u2014 "),qS=n(Ux,"A",{href:!0});var hjr=s(qS);BKe=r(hjr,"LayoutLMTokenizer"),hjr.forEach(t),PKe=r(Ux," or "),NS=n(Ux,"A",{href:!0});var ujr=s(NS);IKe=r(ujr,"LayoutLMTokenizerFast"),ujr.forEach(t),qKe=r(Ux," (LayoutLM model)"),Ux.forEach(t),NKe=i(S),Yn=n(S,"LI",{});var Jx=s(Yn);Goe=n(Jx,"STRONG",{});var pjr=s(Goe);jKe=r(pjr,"layoutlmv2"),pjr.forEach(t),DKe=r(Jx," \u2014 "),jS=n(Jx,"A",{href:!0});var _jr=s(jS);GKe=r(_jr,"LayoutLMv2Tokenizer"),_jr.forEach(t),OKe=r(Jx," or "),DS=n(Jx,"A",{href:!0});var bjr=s(DS);VKe=r(bjr,"LayoutLMv2TokenizerFast"),bjr.forEach(t),XKe=r(Jx," (LayoutLMv2 model)"),Jx.forEach(t),zKe=i(S),Kn=n(S,"LI",{});var Yx=s(Kn);Ooe=n(Yx,"STRONG",{});var Fjr=s(Ooe);QKe=r(Fjr,"layoutxlm"),Fjr.forEach(t),WKe=r(Yx," \u2014 "),GS=n(Yx,"A",{href:!0});var vjr=s(GS);HKe=r(vjr,"LayoutXLMTokenizer"),vjr.forEach(t),UKe=r(Yx," or "),OS=n(Yx,"A",{href:!0});var Tjr=s(OS);JKe=r(Tjr,"LayoutXLMTokenizerFast"),Tjr.forEach(t),YKe=r(Yx," (LayoutXLM model)"),Yx.forEach(t),KKe=i(S),Zn=n(S,"LI",{});var Kx=s(Zn);Voe=n(Kx,"STRONG",{});var Mjr=s(Voe);ZKe=r(Mjr,"led"),Mjr.forEach(t),eZe=r(Kx," \u2014 "),VS=n(Kx,"A",{href:!0});var Ejr=s(VS);oZe=r(Ejr,"LEDTokenizer"),Ejr.forEach(t),rZe=r(Kx," or "),XS=n(Kx,"A",{href:!0});var Cjr=s(XS);tZe=r(Cjr,"LEDTokenizerFast"),Cjr.forEach(t),aZe=r(Kx," (LED model)"),Kx.forEach(t),nZe=i(S),es=n(S,"LI",{});var Zx=s(es);Xoe=n(Zx,"STRONG",{});var wjr=s(Xoe);sZe=r(wjr,"longformer"),wjr.forEach(t),lZe=r(Zx," \u2014 "),zS=n(Zx,"A",{href:!0});var Ajr=s(zS);iZe=r(Ajr,"LongformerTokenizer"),Ajr.forEach(t),dZe=r(Zx," or "),QS=n(Zx,"A",{href:!0});var yjr=s(QS);cZe=r(yjr,"LongformerTokenizerFast"),yjr.forEach(t),mZe=r(Zx," (Longformer model)"),Zx.forEach(t),fZe=i(S),bg=n(S,"LI",{});var o3e=s(bg);zoe=n(o3e,"STRONG",{});var Ljr=s(zoe);gZe=r(Ljr,"luke"),Ljr.forEach(t),hZe=r(o3e," \u2014 "),WS=n(o3e,"A",{href:!0});var xjr=s(WS);uZe=r(xjr,"LukeTokenizer"),xjr.forEach(t),pZe=r(o3e," (LUKE model)"),o3e.forEach(t),_Ze=i(S),os=n(S,"LI",{});var e9=s(os);Qoe=n(e9,"STRONG",{});var $jr=s(Qoe);bZe=r($jr,"lxmert"),$jr.forEach(t),FZe=r(e9," \u2014 "),HS=n(e9,"A",{href:!0});var kjr=s(HS);vZe=r(kjr,"LxmertTokenizer"),kjr.forEach(t),TZe=r(e9," or "),US=n(e9,"A",{href:!0});var Sjr=s(US);MZe=r(Sjr,"LxmertTokenizerFast"),Sjr.forEach(t),EZe=r(e9," (LXMERT model)"),e9.forEach(t),CZe=i(S),Fg=n(S,"LI",{});var r3e=s(Fg);Woe=n(r3e,"STRONG",{});var Rjr=s(Woe);wZe=r(Rjr,"m2m_100"),Rjr.forEach(t),AZe=r(r3e," \u2014 "),JS=n(r3e,"A",{href:!0});var Bjr=s(JS);yZe=r(Bjr,"M2M100Tokenizer"),Bjr.forEach(t),LZe=r(r3e," (M2M100 model)"),r3e.forEach(t),xZe=i(S),vg=n(S,"LI",{});var t3e=s(vg);Hoe=n(t3e,"STRONG",{});var Pjr=s(Hoe);$Ze=r(Pjr,"marian"),Pjr.forEach(t),kZe=r(t3e," \u2014 "),YS=n(t3e,"A",{href:!0});var Ijr=s(YS);SZe=r(Ijr,"MarianTokenizer"),Ijr.forEach(t),RZe=r(t3e," (Marian model)"),t3e.forEach(t),BZe=i(S),rs=n(S,"LI",{});var o9=s(rs);Uoe=n(o9,"STRONG",{});var qjr=s(Uoe);PZe=r(qjr,"mbart"),qjr.forEach(t),IZe=r(o9," \u2014 "),KS=n(o9,"A",{href:!0});var Njr=s(KS);qZe=r(Njr,"MBartTokenizer"),Njr.forEach(t),NZe=r(o9," or "),ZS=n(o9,"A",{href:!0});var jjr=s(ZS);jZe=r(jjr,"MBartTokenizerFast"),jjr.forEach(t),DZe=r(o9," (mBART model)"),o9.forEach(t),GZe=i(S),ts=n(S,"LI",{});var r9=s(ts);Joe=n(r9,"STRONG",{});var Djr=s(Joe);OZe=r(Djr,"mbart50"),Djr.forEach(t),VZe=r(r9," \u2014 "),eR=n(r9,"A",{href:!0});var Gjr=s(eR);XZe=r(Gjr,"MBart50Tokenizer"),Gjr.forEach(t),zZe=r(r9," or "),oR=n(r9,"A",{href:!0});var Ojr=s(oR);QZe=r(Ojr,"MBart50TokenizerFast"),Ojr.forEach(t),WZe=r(r9," (mBART-50 model)"),r9.forEach(t),HZe=i(S),as=n(S,"LI",{});var t9=s(as);Yoe=n(t9,"STRONG",{});var Vjr=s(Yoe);UZe=r(Vjr,"megatron-bert"),Vjr.forEach(t),JZe=r(t9," \u2014 "),rR=n(t9,"A",{href:!0});var Xjr=s(rR);YZe=r(Xjr,"BertTokenizer"),Xjr.forEach(t),KZe=r(t9," or "),tR=n(t9,"A",{href:!0});var zjr=s(tR);ZZe=r(zjr,"BertTokenizerFast"),zjr.forEach(t),eeo=r(t9," (MegatronBert model)"),t9.forEach(t),oeo=i(S),Tg=n(S,"LI",{});var a3e=s(Tg);Koe=n(a3e,"STRONG",{});var Qjr=s(Koe);reo=r(Qjr,"mluke"),Qjr.forEach(t),teo=r(a3e," \u2014 "),aR=n(a3e,"A",{href:!0});var Wjr=s(aR);aeo=r(Wjr,"MLukeTokenizer"),Wjr.forEach(t),neo=r(a3e," (mLUKE model)"),a3e.forEach(t),seo=i(S),ns=n(S,"LI",{});var a9=s(ns);Zoe=n(a9,"STRONG",{});var Hjr=s(Zoe);leo=r(Hjr,"mobilebert"),Hjr.forEach(t),ieo=r(a9," \u2014 "),nR=n(a9,"A",{href:!0});var Ujr=s(nR);deo=r(Ujr,"MobileBertTokenizer"),Ujr.forEach(t),ceo=r(a9," or "),sR=n(a9,"A",{href:!0});var Jjr=s(sR);meo=r(Jjr,"MobileBertTokenizerFast"),Jjr.forEach(t),feo=r(a9," (MobileBERT model)"),a9.forEach(t),geo=i(S),ss=n(S,"LI",{});var n9=s(ss);ere=n(n9,"STRONG",{});var Yjr=s(ere);heo=r(Yjr,"mpnet"),Yjr.forEach(t),ueo=r(n9," \u2014 "),lR=n(n9,"A",{href:!0});var Kjr=s(lR);peo=r(Kjr,"MPNetTokenizer"),Kjr.forEach(t),_eo=r(n9," or "),iR=n(n9,"A",{href:!0});var Zjr=s(iR);beo=r(Zjr,"MPNetTokenizerFast"),Zjr.forEach(t),Feo=r(n9," (MPNet model)"),n9.forEach(t),veo=i(S),ls=n(S,"LI",{});var s9=s(ls);ore=n(s9,"STRONG",{});var eDr=s(ore);Teo=r(eDr,"mt5"),eDr.forEach(t),Meo=r(s9," \u2014 "),dR=n(s9,"A",{href:!0});var oDr=s(dR);Eeo=r(oDr,"MT5Tokenizer"),oDr.forEach(t),Ceo=r(s9," or "),cR=n(s9,"A",{href:!0});var rDr=s(cR);weo=r(rDr,"MT5TokenizerFast"),rDr.forEach(t),Aeo=r(s9," (mT5 model)"),s9.forEach(t),yeo=i(S),is=n(S,"LI",{});var l9=s(is);rre=n(l9,"STRONG",{});var tDr=s(rre);Leo=r(tDr,"nystromformer"),tDr.forEach(t),xeo=r(l9," \u2014 "),mR=n(l9,"A",{href:!0});var aDr=s(mR);$eo=r(aDr,"AlbertTokenizer"),aDr.forEach(t),keo=r(l9," or "),fR=n(l9,"A",{href:!0});var nDr=s(fR);Seo=r(nDr,"AlbertTokenizerFast"),nDr.forEach(t),Reo=r(l9," (Nystromformer model)"),l9.forEach(t),Beo=i(S),ds=n(S,"LI",{});var i9=s(ds);tre=n(i9,"STRONG",{});var sDr=s(tre);Peo=r(sDr,"openai-gpt"),sDr.forEach(t),Ieo=r(i9," \u2014 "),gR=n(i9,"A",{href:!0});var lDr=s(gR);qeo=r(lDr,"OpenAIGPTTokenizer"),lDr.forEach(t),Neo=r(i9," or "),hR=n(i9,"A",{href:!0});var iDr=s(hR);jeo=r(iDr,"OpenAIGPTTokenizerFast"),iDr.forEach(t),Deo=r(i9," (OpenAI GPT model)"),i9.forEach(t),Geo=i(S),cs=n(S,"LI",{});var d9=s(cs);are=n(d9,"STRONG",{});var dDr=s(are);Oeo=r(dDr,"pegasus"),dDr.forEach(t),Veo=r(d9," \u2014 "),uR=n(d9,"A",{href:!0});var cDr=s(uR);Xeo=r(cDr,"PegasusTokenizer"),cDr.forEach(t),zeo=r(d9," or "),pR=n(d9,"A",{href:!0});var mDr=s(pR);Qeo=r(mDr,"PegasusTokenizerFast"),mDr.forEach(t),Weo=r(d9," (Pegasus model)"),d9.forEach(t),Heo=i(S),Mg=n(S,"LI",{});var n3e=s(Mg);nre=n(n3e,"STRONG",{});var fDr=s(nre);Ueo=r(fDr,"perceiver"),fDr.forEach(t),Jeo=r(n3e," \u2014 "),_R=n(n3e,"A",{href:!0});var gDr=s(_R);Yeo=r(gDr,"PerceiverTokenizer"),gDr.forEach(t),Keo=r(n3e," (Perceiver model)"),n3e.forEach(t),Zeo=i(S),Eg=n(S,"LI",{});var s3e=s(Eg);sre=n(s3e,"STRONG",{});var hDr=s(sre);eoo=r(hDr,"phobert"),hDr.forEach(t),ooo=r(s3e," \u2014 "),bR=n(s3e,"A",{href:!0});var uDr=s(bR);roo=r(uDr,"PhobertTokenizer"),uDr.forEach(t),too=r(s3e," (PhoBERT model)"),s3e.forEach(t),aoo=i(S),Cg=n(S,"LI",{});var l3e=s(Cg);lre=n(l3e,"STRONG",{});var pDr=s(lre);noo=r(pDr,"plbart"),pDr.forEach(t),soo=r(l3e," \u2014 "),FR=n(l3e,"A",{href:!0});var _Dr=s(FR);loo=r(_Dr,"PLBartTokenizer"),_Dr.forEach(t),ioo=r(l3e," (PLBart model)"),l3e.forEach(t),doo=i(S),wg=n(S,"LI",{});var i3e=s(wg);ire=n(i3e,"STRONG",{});var bDr=s(ire);coo=r(bDr,"prophetnet"),bDr.forEach(t),moo=r(i3e," \u2014 "),vR=n(i3e,"A",{href:!0});var FDr=s(vR);foo=r(FDr,"ProphetNetTokenizer"),FDr.forEach(t),goo=r(i3e," (ProphetNet model)"),i3e.forEach(t),hoo=i(S),ms=n(S,"LI",{});var c9=s(ms);dre=n(c9,"STRONG",{});var vDr=s(dre);uoo=r(vDr,"qdqbert"),vDr.forEach(t),poo=r(c9," \u2014 "),TR=n(c9,"A",{href:!0});var TDr=s(TR);_oo=r(TDr,"BertTokenizer"),TDr.forEach(t),boo=r(c9," or "),MR=n(c9,"A",{href:!0});var MDr=s(MR);Foo=r(MDr,"BertTokenizerFast"),MDr.forEach(t),voo=r(c9," (QDQBert model)"),c9.forEach(t),Too=i(S),Ag=n(S,"LI",{});var d3e=s(Ag);cre=n(d3e,"STRONG",{});var EDr=s(cre);Moo=r(EDr,"rag"),EDr.forEach(t),Eoo=r(d3e," \u2014 "),ER=n(d3e,"A",{href:!0});var CDr=s(ER);Coo=r(CDr,"RagTokenizer"),CDr.forEach(t),woo=r(d3e," (RAG model)"),d3e.forEach(t),Aoo=i(S),fs=n(S,"LI",{});var m9=s(fs);mre=n(m9,"STRONG",{});var wDr=s(mre);yoo=r(wDr,"realm"),wDr.forEach(t),Loo=r(m9," \u2014 "),CR=n(m9,"A",{href:!0});var ADr=s(CR);xoo=r(ADr,"RealmTokenizer"),ADr.forEach(t),$oo=r(m9," or "),wR=n(m9,"A",{href:!0});var yDr=s(wR);koo=r(yDr,"RealmTokenizerFast"),yDr.forEach(t),Soo=r(m9," (Realm model)"),m9.forEach(t),Roo=i(S),gs=n(S,"LI",{});var f9=s(gs);fre=n(f9,"STRONG",{});var LDr=s(fre);Boo=r(LDr,"reformer"),LDr.forEach(t),Poo=r(f9," \u2014 "),AR=n(f9,"A",{href:!0});var xDr=s(AR);Ioo=r(xDr,"ReformerTokenizer"),xDr.forEach(t),qoo=r(f9," or "),yR=n(f9,"A",{href:!0});var $Dr=s(yR);Noo=r($Dr,"ReformerTokenizerFast"),$Dr.forEach(t),joo=r(f9," (Reformer model)"),f9.forEach(t),Doo=i(S),hs=n(S,"LI",{});var g9=s(hs);gre=n(g9,"STRONG",{});var kDr=s(gre);Goo=r(kDr,"rembert"),kDr.forEach(t),Ooo=r(g9," \u2014 "),LR=n(g9,"A",{href:!0});var SDr=s(LR);Voo=r(SDr,"RemBertTokenizer"),SDr.forEach(t),Xoo=r(g9," or "),xR=n(g9,"A",{href:!0});var RDr=s(xR);zoo=r(RDr,"RemBertTokenizerFast"),RDr.forEach(t),Qoo=r(g9," (RemBERT model)"),g9.forEach(t),Woo=i(S),us=n(S,"LI",{});var h9=s(us);hre=n(h9,"STRONG",{});var BDr=s(hre);Hoo=r(BDr,"retribert"),BDr.forEach(t),Uoo=r(h9," \u2014 "),$R=n(h9,"A",{href:!0});var PDr=s($R);Joo=r(PDr,"RetriBertTokenizer"),PDr.forEach(t),Yoo=r(h9," or "),kR=n(h9,"A",{href:!0});var IDr=s(kR);Koo=r(IDr,"RetriBertTokenizerFast"),IDr.forEach(t),Zoo=r(h9," (RetriBERT model)"),h9.forEach(t),ero=i(S),ps=n(S,"LI",{});var u9=s(ps);ure=n(u9,"STRONG",{});var qDr=s(ure);oro=r(qDr,"roberta"),qDr.forEach(t),rro=r(u9," \u2014 "),SR=n(u9,"A",{href:!0});var NDr=s(SR);tro=r(NDr,"RobertaTokenizer"),NDr.forEach(t),aro=r(u9," or "),RR=n(u9,"A",{href:!0});var jDr=s(RR);nro=r(jDr,"RobertaTokenizerFast"),jDr.forEach(t),sro=r(u9," (RoBERTa model)"),u9.forEach(t),lro=i(S),_s=n(S,"LI",{});var p9=s(_s);pre=n(p9,"STRONG",{});var DDr=s(pre);iro=r(DDr,"roformer"),DDr.forEach(t),dro=r(p9," \u2014 "),BR=n(p9,"A",{href:!0});var GDr=s(BR);cro=r(GDr,"RoFormerTokenizer"),GDr.forEach(t),mro=r(p9," or "),PR=n(p9,"A",{href:!0});var ODr=s(PR);fro=r(ODr,"RoFormerTokenizerFast"),ODr.forEach(t),gro=r(p9," (RoFormer model)"),p9.forEach(t),hro=i(S),yg=n(S,"LI",{});var c3e=s(yg);_re=n(c3e,"STRONG",{});var VDr=s(_re);uro=r(VDr,"speech_to_text"),VDr.forEach(t),pro=r(c3e," \u2014 "),IR=n(c3e,"A",{href:!0});var XDr=s(IR);_ro=r(XDr,"Speech2TextTokenizer"),XDr.forEach(t),bro=r(c3e," (Speech2Text model)"),c3e.forEach(t),Fro=i(S),Lg=n(S,"LI",{});var m3e=s(Lg);bre=n(m3e,"STRONG",{});var zDr=s(bre);vro=r(zDr,"speech_to_text_2"),zDr.forEach(t),Tro=r(m3e," \u2014 "),qR=n(m3e,"A",{href:!0});var QDr=s(qR);Mro=r(QDr,"Speech2Text2Tokenizer"),QDr.forEach(t),Ero=r(m3e," (Speech2Text2 model)"),m3e.forEach(t),Cro=i(S),bs=n(S,"LI",{});var _9=s(bs);Fre=n(_9,"STRONG",{});var WDr=s(Fre);wro=r(WDr,"splinter"),WDr.forEach(t),Aro=r(_9," \u2014 "),NR=n(_9,"A",{href:!0});var HDr=s(NR);yro=r(HDr,"SplinterTokenizer"),HDr.forEach(t),Lro=r(_9," or "),jR=n(_9,"A",{href:!0});var UDr=s(jR);xro=r(UDr,"SplinterTokenizerFast"),UDr.forEach(t),$ro=r(_9," (Splinter model)"),_9.forEach(t),kro=i(S),Fs=n(S,"LI",{});var b9=s(Fs);vre=n(b9,"STRONG",{});var JDr=s(vre);Sro=r(JDr,"squeezebert"),JDr.forEach(t),Rro=r(b9," \u2014 "),DR=n(b9,"A",{href:!0});var YDr=s(DR);Bro=r(YDr,"SqueezeBertTokenizer"),YDr.forEach(t),Pro=r(b9," or "),GR=n(b9,"A",{href:!0});var KDr=s(GR);Iro=r(KDr,"SqueezeBertTokenizerFast"),KDr.forEach(t),qro=r(b9," (SqueezeBERT model)"),b9.forEach(t),Nro=i(S),vs=n(S,"LI",{});var F9=s(vs);Tre=n(F9,"STRONG",{});var ZDr=s(Tre);jro=r(ZDr,"t5"),ZDr.forEach(t),Dro=r(F9," \u2014 "),OR=n(F9,"A",{href:!0});var eGr=s(OR);Gro=r(eGr,"T5Tokenizer"),eGr.forEach(t),Oro=r(F9," or "),VR=n(F9,"A",{href:!0});var oGr=s(VR);Vro=r(oGr,"T5TokenizerFast"),oGr.forEach(t),Xro=r(F9," (T5 model)"),F9.forEach(t),zro=i(S),xg=n(S,"LI",{});var f3e=s(xg);Mre=n(f3e,"STRONG",{});var rGr=s(Mre);Qro=r(rGr,"tapas"),rGr.forEach(t),Wro=r(f3e," \u2014 "),XR=n(f3e,"A",{href:!0});var tGr=s(XR);Hro=r(tGr,"TapasTokenizer"),tGr.forEach(t),Uro=r(f3e," (TAPAS model)"),f3e.forEach(t),Jro=i(S),$g=n(S,"LI",{});var g3e=s($g);Ere=n(g3e,"STRONG",{});var aGr=s(Ere);Yro=r(aGr,"tapex"),aGr.forEach(t),Kro=r(g3e," \u2014 "),zR=n(g3e,"A",{href:!0});var nGr=s(zR);Zro=r(nGr,"TapexTokenizer"),nGr.forEach(t),eto=r(g3e," (TAPEX model)"),g3e.forEach(t),oto=i(S),kg=n(S,"LI",{});var h3e=s(kg);Cre=n(h3e,"STRONG",{});var sGr=s(Cre);rto=r(sGr,"transfo-xl"),sGr.forEach(t),tto=r(h3e," \u2014 "),QR=n(h3e,"A",{href:!0});var lGr=s(QR);ato=r(lGr,"TransfoXLTokenizer"),lGr.forEach(t),nto=r(h3e," (Transformer-XL model)"),h3e.forEach(t),sto=i(S),Ts=n(S,"LI",{});var v9=s(Ts);wre=n(v9,"STRONG",{});var iGr=s(wre);lto=r(iGr,"visual_bert"),iGr.forEach(t),ito=r(v9," \u2014 "),WR=n(v9,"A",{href:!0});var dGr=s(WR);dto=r(dGr,"BertTokenizer"),dGr.forEach(t),cto=r(v9," or "),HR=n(v9,"A",{href:!0});var cGr=s(HR);mto=r(cGr,"BertTokenizerFast"),cGr.forEach(t),fto=r(v9," (VisualBert model)"),v9.forEach(t),gto=i(S),Sg=n(S,"LI",{});var u3e=s(Sg);Are=n(u3e,"STRONG",{});var mGr=s(Are);hto=r(mGr,"wav2vec2"),mGr.forEach(t),uto=r(u3e," \u2014 "),UR=n(u3e,"A",{href:!0});var fGr=s(UR);pto=r(fGr,"Wav2Vec2CTCTokenizer"),fGr.forEach(t),_to=r(u3e," (Wav2Vec2 model)"),u3e.forEach(t),bto=i(S),Rg=n(S,"LI",{});var p3e=s(Rg);yre=n(p3e,"STRONG",{});var gGr=s(yre);Fto=r(gGr,"wav2vec2_phoneme"),gGr.forEach(t),vto=r(p3e," \u2014 "),JR=n(p3e,"A",{href:!0});var hGr=s(JR);Tto=r(hGr,"Wav2Vec2PhonemeCTCTokenizer"),hGr.forEach(t),Mto=r(p3e," (Wav2Vec2Phoneme model)"),p3e.forEach(t),Eto=i(S),Ms=n(S,"LI",{});var T9=s(Ms);Lre=n(T9,"STRONG",{});var uGr=s(Lre);Cto=r(uGr,"xglm"),uGr.forEach(t),wto=r(T9," \u2014 "),YR=n(T9,"A",{href:!0});var pGr=s(YR);Ato=r(pGr,"XGLMTokenizer"),pGr.forEach(t),yto=r(T9," or "),KR=n(T9,"A",{href:!0});var _Gr=s(KR);Lto=r(_Gr,"XGLMTokenizerFast"),_Gr.forEach(t),xto=r(T9," (XGLM model)"),T9.forEach(t),$to=i(S),Bg=n(S,"LI",{});var _3e=s(Bg);xre=n(_3e,"STRONG",{});var bGr=s(xre);kto=r(bGr,"xlm"),bGr.forEach(t),Sto=r(_3e," \u2014 "),ZR=n(_3e,"A",{href:!0});var FGr=s(ZR);Rto=r(FGr,"XLMTokenizer"),FGr.forEach(t),Bto=r(_3e," (XLM model)"),_3e.forEach(t),Pto=i(S),Pg=n(S,"LI",{});var b3e=s(Pg);$re=n(b3e,"STRONG",{});var vGr=s($re);Ito=r(vGr,"xlm-prophetnet"),vGr.forEach(t),qto=r(b3e," \u2014 "),eB=n(b3e,"A",{href:!0});var TGr=s(eB);Nto=r(TGr,"XLMProphetNetTokenizer"),TGr.forEach(t),jto=r(b3e," (XLMProphetNet model)"),b3e.forEach(t),Dto=i(S),Es=n(S,"LI",{});var M9=s(Es);kre=n(M9,"STRONG",{});var MGr=s(kre);Gto=r(MGr,"xlm-roberta"),MGr.forEach(t),Oto=r(M9," \u2014 "),oB=n(M9,"A",{href:!0});var EGr=s(oB);Vto=r(EGr,"XLMRobertaTokenizer"),EGr.forEach(t),Xto=r(M9," or "),rB=n(M9,"A",{href:!0});var CGr=s(rB);zto=r(CGr,"XLMRobertaTokenizerFast"),CGr.forEach(t),Qto=r(M9," (XLM-RoBERTa model)"),M9.forEach(t),Wto=i(S),Cs=n(S,"LI",{});var E9=s(Cs);Sre=n(E9,"STRONG",{});var wGr=s(Sre);Hto=r(wGr,"xlm-roberta-xl"),wGr.forEach(t),Uto=r(E9," \u2014 "),tB=n(E9,"A",{href:!0});var AGr=s(tB);Jto=r(AGr,"RobertaTokenizer"),AGr.forEach(t),Yto=r(E9," or "),aB=n(E9,"A",{href:!0});var yGr=s(aB);Kto=r(yGr,"RobertaTokenizerFast"),yGr.forEach(t),Zto=r(E9," (XLM-RoBERTa-XL model)"),E9.forEach(t),eao=i(S),ws=n(S,"LI",{});var C9=s(ws);Rre=n(C9,"STRONG",{});var LGr=s(Rre);oao=r(LGr,"xlnet"),LGr.forEach(t),rao=r(C9," \u2014 "),nB=n(C9,"A",{href:!0});var xGr=s(nB);tao=r(xGr,"XLNetTokenizer"),xGr.forEach(t),aao=r(C9," or "),sB=n(C9,"A",{href:!0});var $Gr=s(sB);nao=r($Gr,"XLNetTokenizerFast"),$Gr.forEach(t),sao=r(C9," (XLNet model)"),C9.forEach(t),lao=i(S),As=n(S,"LI",{});var w9=s(As);Bre=n(w9,"STRONG",{});var kGr=s(Bre);iao=r(kGr,"yoso"),kGr.forEach(t),dao=r(w9," \u2014 "),lB=n(w9,"A",{href:!0});var SGr=s(lB);cao=r(SGr,"AlbertTokenizer"),SGr.forEach(t),mao=r(w9," or "),iB=n(w9,"A",{href:!0});var RGr=s(iB);fao=r(RGr,"AlbertTokenizerFast"),RGr.forEach(t),gao=r(w9," (YOSO model)"),w9.forEach(t),S.forEach(t),hao=i(ks),T(Ig.$$.fragment,ks),ks.forEach(t),uao=i($s),qg=n($s,"DIV",{class:!0});var UPe=s(qg);T($6.$$.fragment,UPe),pao=i(UPe),Pre=n(UPe,"P",{});var BGr=s(Pre);_ao=r(BGr,"Register a new tokenizer in this mapping."),BGr.forEach(t),UPe.forEach(t),$s.forEach(t),KRe=i(m),fi=n(m,"H2",{class:!0});var JPe=s(fi);Ng=n(JPe,"A",{id:!0,class:!0,href:!0});var PGr=s(Ng);Ire=n(PGr,"SPAN",{});var IGr=s(Ire);T(k6.$$.fragment,IGr),IGr.forEach(t),PGr.forEach(t),bao=i(JPe),qre=n(JPe,"SPAN",{});var qGr=s(qre);Fao=r(qGr,"AutoFeatureExtractor"),qGr.forEach(t),JPe.forEach(t),ZRe=i(m),Co=n(m,"DIV",{class:!0});var Ss=s(Co);T(S6.$$.fragment,Ss),vao=i(Ss),R6=n(Ss,"P",{});var YPe=s(R6);Tao=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=n(YPe,"A",{href:!0});var NGr=s(dB);Mao=r(NGr,"AutoFeatureExtractor.from_pretrained()"),NGr.forEach(t),Eao=r(YPe," class method."),YPe.forEach(t),Cao=i(Ss),B6=n(Ss,"P",{});var KPe=s(B6);wao=r(KPe,"This class cannot be instantiated directly using "),Nre=n(KPe,"CODE",{});var jGr=s(Nre);Aao=r(jGr,"__init__()"),jGr.forEach(t),yao=r(KPe," (throws an error)."),KPe.forEach(t),Lao=i(Ss),Xe=n(Ss,"DIV",{class:!0});var Wt=s(Xe);T(P6.$$.fragment,Wt),xao=i(Wt),jre=n(Wt,"P",{});var DGr=s(jre);$ao=r(DGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DGr.forEach(t),kao=i(Wt),Ta=n(Wt,"P",{});var TA=s(Ta);Sao=r(TA,"The feature extractor class to instantiate is selected based on the "),Dre=n(TA,"CODE",{});var GGr=s(Dre);Rao=r(GGr,"model_type"),GGr.forEach(t),Bao=r(TA,` property of the config object
(either passed as an argument or loaded from `),Gre=n(TA,"CODE",{});var OGr=s(Gre);Pao=r(OGr,"pretrained_model_name_or_path"),OGr.forEach(t),Iao=r(TA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=n(TA,"CODE",{});var VGr=s(Ore);qao=r(VGr,"pretrained_model_name_or_path"),VGr.forEach(t),Nao=r(TA,":"),TA.forEach(t),jao=i(Wt),te=n(Wt,"UL",{});var se=s(te);jg=n(se,"LI",{});var F3e=s(jg);Vre=n(F3e,"STRONG",{});var XGr=s(Vre);Dao=r(XGr,"beit"),XGr.forEach(t),Gao=r(F3e," \u2014 "),cB=n(F3e,"A",{href:!0});var zGr=s(cB);Oao=r(zGr,"BeitFeatureExtractor"),zGr.forEach(t),Vao=r(F3e," (BEiT model)"),F3e.forEach(t),Xao=i(se),Dg=n(se,"LI",{});var v3e=s(Dg);Xre=n(v3e,"STRONG",{});var QGr=s(Xre);zao=r(QGr,"clip"),QGr.forEach(t),Qao=r(v3e," \u2014 "),mB=n(v3e,"A",{href:!0});var WGr=s(mB);Wao=r(WGr,"CLIPFeatureExtractor"),WGr.forEach(t),Hao=r(v3e," (CLIP model)"),v3e.forEach(t),Uao=i(se),Gg=n(se,"LI",{});var T3e=s(Gg);zre=n(T3e,"STRONG",{});var HGr=s(zre);Jao=r(HGr,"convnext"),HGr.forEach(t),Yao=r(T3e," \u2014 "),fB=n(T3e,"A",{href:!0});var UGr=s(fB);Kao=r(UGr,"ConvNextFeatureExtractor"),UGr.forEach(t),Zao=r(T3e," (ConvNext model)"),T3e.forEach(t),eno=i(se),Og=n(se,"LI",{});var M3e=s(Og);Qre=n(M3e,"STRONG",{});var JGr=s(Qre);ono=r(JGr,"data2vec-audio"),JGr.forEach(t),rno=r(M3e," \u2014 "),gB=n(M3e,"A",{href:!0});var YGr=s(gB);tno=r(YGr,"Wav2Vec2FeatureExtractor"),YGr.forEach(t),ano=r(M3e," (Data2VecAudio model)"),M3e.forEach(t),nno=i(se),Vg=n(se,"LI",{});var E3e=s(Vg);Wre=n(E3e,"STRONG",{});var KGr=s(Wre);sno=r(KGr,"data2vec-vision"),KGr.forEach(t),lno=r(E3e," \u2014 "),hB=n(E3e,"A",{href:!0});var ZGr=s(hB);ino=r(ZGr,"BeitFeatureExtractor"),ZGr.forEach(t),dno=r(E3e," (Data2VecVision model)"),E3e.forEach(t),cno=i(se),Xg=n(se,"LI",{});var C3e=s(Xg);Hre=n(C3e,"STRONG",{});var eOr=s(Hre);mno=r(eOr,"deit"),eOr.forEach(t),fno=r(C3e," \u2014 "),uB=n(C3e,"A",{href:!0});var oOr=s(uB);gno=r(oOr,"DeiTFeatureExtractor"),oOr.forEach(t),hno=r(C3e," (DeiT model)"),C3e.forEach(t),uno=i(se),zg=n(se,"LI",{});var w3e=s(zg);Ure=n(w3e,"STRONG",{});var rOr=s(Ure);pno=r(rOr,"detr"),rOr.forEach(t),_no=r(w3e," \u2014 "),pB=n(w3e,"A",{href:!0});var tOr=s(pB);bno=r(tOr,"DetrFeatureExtractor"),tOr.forEach(t),Fno=r(w3e," (DETR model)"),w3e.forEach(t),vno=i(se),Qg=n(se,"LI",{});var A3e=s(Qg);Jre=n(A3e,"STRONG",{});var aOr=s(Jre);Tno=r(aOr,"dpt"),aOr.forEach(t),Mno=r(A3e," \u2014 "),_B=n(A3e,"A",{href:!0});var nOr=s(_B);Eno=r(nOr,"DPTFeatureExtractor"),nOr.forEach(t),Cno=r(A3e," (DPT model)"),A3e.forEach(t),wno=i(se),Wg=n(se,"LI",{});var y3e=s(Wg);Yre=n(y3e,"STRONG",{});var sOr=s(Yre);Ano=r(sOr,"glpn"),sOr.forEach(t),yno=r(y3e," \u2014 "),bB=n(y3e,"A",{href:!0});var lOr=s(bB);Lno=r(lOr,"GLPNFeatureExtractor"),lOr.forEach(t),xno=r(y3e," (GLPN model)"),y3e.forEach(t),$no=i(se),Hg=n(se,"LI",{});var L3e=s(Hg);Kre=n(L3e,"STRONG",{});var iOr=s(Kre);kno=r(iOr,"hubert"),iOr.forEach(t),Sno=r(L3e," \u2014 "),FB=n(L3e,"A",{href:!0});var dOr=s(FB);Rno=r(dOr,"Wav2Vec2FeatureExtractor"),dOr.forEach(t),Bno=r(L3e," (Hubert model)"),L3e.forEach(t),Pno=i(se),Ug=n(se,"LI",{});var x3e=s(Ug);Zre=n(x3e,"STRONG",{});var cOr=s(Zre);Ino=r(cOr,"layoutlmv2"),cOr.forEach(t),qno=r(x3e," \u2014 "),vB=n(x3e,"A",{href:!0});var mOr=s(vB);Nno=r(mOr,"LayoutLMv2FeatureExtractor"),mOr.forEach(t),jno=r(x3e," (LayoutLMv2 model)"),x3e.forEach(t),Dno=i(se),Jg=n(se,"LI",{});var $3e=s(Jg);ete=n($3e,"STRONG",{});var fOr=s(ete);Gno=r(fOr,"maskformer"),fOr.forEach(t),Ono=r($3e," \u2014 "),TB=n($3e,"A",{href:!0});var gOr=s(TB);Vno=r(gOr,"MaskFormerFeatureExtractor"),gOr.forEach(t),Xno=r($3e," (MaskFormer model)"),$3e.forEach(t),zno=i(se),Yg=n(se,"LI",{});var k3e=s(Yg);ote=n(k3e,"STRONG",{});var hOr=s(ote);Qno=r(hOr,"perceiver"),hOr.forEach(t),Wno=r(k3e," \u2014 "),MB=n(k3e,"A",{href:!0});var uOr=s(MB);Hno=r(uOr,"PerceiverFeatureExtractor"),uOr.forEach(t),Uno=r(k3e," (Perceiver model)"),k3e.forEach(t),Jno=i(se),Kg=n(se,"LI",{});var S3e=s(Kg);rte=n(S3e,"STRONG",{});var pOr=s(rte);Yno=r(pOr,"poolformer"),pOr.forEach(t),Kno=r(S3e," \u2014 "),EB=n(S3e,"A",{href:!0});var _Or=s(EB);Zno=r(_Or,"PoolFormerFeatureExtractor"),_Or.forEach(t),eso=r(S3e," (PoolFormer model)"),S3e.forEach(t),oso=i(se),Zg=n(se,"LI",{});var R3e=s(Zg);tte=n(R3e,"STRONG",{});var bOr=s(tte);rso=r(bOr,"regnet"),bOr.forEach(t),tso=r(R3e," \u2014 "),CB=n(R3e,"A",{href:!0});var FOr=s(CB);aso=r(FOr,"ConvNextFeatureExtractor"),FOr.forEach(t),nso=r(R3e," (RegNet model)"),R3e.forEach(t),sso=i(se),eh=n(se,"LI",{});var B3e=s(eh);ate=n(B3e,"STRONG",{});var vOr=s(ate);lso=r(vOr,"resnet"),vOr.forEach(t),iso=r(B3e," \u2014 "),wB=n(B3e,"A",{href:!0});var TOr=s(wB);dso=r(TOr,"ConvNextFeatureExtractor"),TOr.forEach(t),cso=r(B3e," (ResNet model)"),B3e.forEach(t),mso=i(se),oh=n(se,"LI",{});var P3e=s(oh);nte=n(P3e,"STRONG",{});var MOr=s(nte);fso=r(MOr,"segformer"),MOr.forEach(t),gso=r(P3e," \u2014 "),AB=n(P3e,"A",{href:!0});var EOr=s(AB);hso=r(EOr,"SegformerFeatureExtractor"),EOr.forEach(t),uso=r(P3e," (SegFormer model)"),P3e.forEach(t),pso=i(se),rh=n(se,"LI",{});var I3e=s(rh);ste=n(I3e,"STRONG",{});var COr=s(ste);_so=r(COr,"speech_to_text"),COr.forEach(t),bso=r(I3e," \u2014 "),yB=n(I3e,"A",{href:!0});var wOr=s(yB);Fso=r(wOr,"Speech2TextFeatureExtractor"),wOr.forEach(t),vso=r(I3e," (Speech2Text model)"),I3e.forEach(t),Tso=i(se),th=n(se,"LI",{});var q3e=s(th);lte=n(q3e,"STRONG",{});var AOr=s(lte);Mso=r(AOr,"swin"),AOr.forEach(t),Eso=r(q3e," \u2014 "),LB=n(q3e,"A",{href:!0});var yOr=s(LB);Cso=r(yOr,"ViTFeatureExtractor"),yOr.forEach(t),wso=r(q3e," (Swin model)"),q3e.forEach(t),Aso=i(se),ah=n(se,"LI",{});var N3e=s(ah);ite=n(N3e,"STRONG",{});var LOr=s(ite);yso=r(LOr,"van"),LOr.forEach(t),Lso=r(N3e," \u2014 "),xB=n(N3e,"A",{href:!0});var xOr=s(xB);xso=r(xOr,"ConvNextFeatureExtractor"),xOr.forEach(t),$so=r(N3e," (VAN model)"),N3e.forEach(t),kso=i(se),nh=n(se,"LI",{});var j3e=s(nh);dte=n(j3e,"STRONG",{});var $Or=s(dte);Sso=r($Or,"vit"),$Or.forEach(t),Rso=r(j3e," \u2014 "),$B=n(j3e,"A",{href:!0});var kOr=s($B);Bso=r(kOr,"ViTFeatureExtractor"),kOr.forEach(t),Pso=r(j3e," (ViT model)"),j3e.forEach(t),Iso=i(se),sh=n(se,"LI",{});var D3e=s(sh);cte=n(D3e,"STRONG",{});var SOr=s(cte);qso=r(SOr,"vit_mae"),SOr.forEach(t),Nso=r(D3e," \u2014 "),kB=n(D3e,"A",{href:!0});var ROr=s(kB);jso=r(ROr,"ViTFeatureExtractor"),ROr.forEach(t),Dso=r(D3e," (ViTMAE model)"),D3e.forEach(t),Gso=i(se),lh=n(se,"LI",{});var G3e=s(lh);mte=n(G3e,"STRONG",{});var BOr=s(mte);Oso=r(BOr,"wav2vec2"),BOr.forEach(t),Vso=r(G3e," \u2014 "),SB=n(G3e,"A",{href:!0});var POr=s(SB);Xso=r(POr,"Wav2Vec2FeatureExtractor"),POr.forEach(t),zso=r(G3e," (Wav2Vec2 model)"),G3e.forEach(t),Qso=i(se),ih=n(se,"LI",{});var O3e=s(ih);fte=n(O3e,"STRONG",{});var IOr=s(fte);Wso=r(IOr,"yolos"),IOr.forEach(t),Hso=r(O3e," \u2014 "),RB=n(O3e,"A",{href:!0});var qOr=s(RB);Uso=r(qOr,"YolosFeatureExtractor"),qOr.forEach(t),Jso=r(O3e," (YOLOS model)"),O3e.forEach(t),se.forEach(t),Yso=i(Wt),T(dh.$$.fragment,Wt),Kso=i(Wt),T(ch.$$.fragment,Wt),Wt.forEach(t),Zso=i(Ss),mh=n(Ss,"DIV",{class:!0});var ZPe=s(mh);T(I6.$$.fragment,ZPe),elo=i(ZPe),gte=n(ZPe,"P",{});var NOr=s(gte);olo=r(NOr,"Register a new feature extractor for this class."),NOr.forEach(t),ZPe.forEach(t),Ss.forEach(t),eBe=i(m),gi=n(m,"H2",{class:!0});var eIe=s(gi);fh=n(eIe,"A",{id:!0,class:!0,href:!0});var jOr=s(fh);hte=n(jOr,"SPAN",{});var DOr=s(hte);T(q6.$$.fragment,DOr),DOr.forEach(t),jOr.forEach(t),rlo=i(eIe),ute=n(eIe,"SPAN",{});var GOr=s(ute);tlo=r(GOr,"AutoProcessor"),GOr.forEach(t),eIe.forEach(t),oBe=i(m),wo=n(m,"DIV",{class:!0});var Rs=s(wo);T(N6.$$.fragment,Rs),alo=i(Rs),j6=n(Rs,"P",{});var oIe=s(j6);nlo=r(oIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=n(oIe,"A",{href:!0});var OOr=s(BB);slo=r(OOr,"AutoProcessor.from_pretrained()"),OOr.forEach(t),llo=r(oIe," class method."),oIe.forEach(t),ilo=i(Rs),D6=n(Rs,"P",{});var rIe=s(D6);dlo=r(rIe,"This class cannot be instantiated directly using "),pte=n(rIe,"CODE",{});var VOr=s(pte);clo=r(VOr,"__init__()"),VOr.forEach(t),mlo=r(rIe," (throws an error)."),rIe.forEach(t),flo=i(Rs),ze=n(Rs,"DIV",{class:!0});var Ht=s(ze);T(G6.$$.fragment,Ht),glo=i(Ht),_te=n(Ht,"P",{});var XOr=s(_te);hlo=r(XOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XOr.forEach(t),ulo=i(Ht),hi=n(Ht,"P",{});var rY=s(hi);plo=r(rY,"The processor class to instantiate is selected based on the "),bte=n(rY,"CODE",{});var zOr=s(bte);_lo=r(zOr,"model_type"),zOr.forEach(t),blo=r(rY,` property of the config object (either
passed as an argument or loaded from `),Fte=n(rY,"CODE",{});var QOr=s(Fte);Flo=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),vlo=r(rY," if possible):"),rY.forEach(t),Tlo=i(Ht),be=n(Ht,"UL",{});var ve=s(be);gh=n(ve,"LI",{});var V3e=s(gh);vte=n(V3e,"STRONG",{});var WOr=s(vte);Mlo=r(WOr,"clip"),WOr.forEach(t),Elo=r(V3e," \u2014 "),PB=n(V3e,"A",{href:!0});var HOr=s(PB);Clo=r(HOr,"CLIPProcessor"),HOr.forEach(t),wlo=r(V3e," (CLIP model)"),V3e.forEach(t),Alo=i(ve),hh=n(ve,"LI",{});var X3e=s(hh);Tte=n(X3e,"STRONG",{});var UOr=s(Tte);ylo=r(UOr,"layoutlmv2"),UOr.forEach(t),Llo=r(X3e," \u2014 "),IB=n(X3e,"A",{href:!0});var JOr=s(IB);xlo=r(JOr,"LayoutLMv2Processor"),JOr.forEach(t),$lo=r(X3e," (LayoutLMv2 model)"),X3e.forEach(t),klo=i(ve),uh=n(ve,"LI",{});var z3e=s(uh);Mte=n(z3e,"STRONG",{});var YOr=s(Mte);Slo=r(YOr,"layoutxlm"),YOr.forEach(t),Rlo=r(z3e," \u2014 "),qB=n(z3e,"A",{href:!0});var KOr=s(qB);Blo=r(KOr,"LayoutXLMProcessor"),KOr.forEach(t),Plo=r(z3e," (LayoutXLM model)"),z3e.forEach(t),Ilo=i(ve),ph=n(ve,"LI",{});var Q3e=s(ph);Ete=n(Q3e,"STRONG",{});var ZOr=s(Ete);qlo=r(ZOr,"sew"),ZOr.forEach(t),Nlo=r(Q3e," \u2014 "),NB=n(Q3e,"A",{href:!0});var eVr=s(NB);jlo=r(eVr,"Wav2Vec2Processor"),eVr.forEach(t),Dlo=r(Q3e," (SEW model)"),Q3e.forEach(t),Glo=i(ve),_h=n(ve,"LI",{});var W3e=s(_h);Cte=n(W3e,"STRONG",{});var oVr=s(Cte);Olo=r(oVr,"sew-d"),oVr.forEach(t),Vlo=r(W3e," \u2014 "),jB=n(W3e,"A",{href:!0});var rVr=s(jB);Xlo=r(rVr,"Wav2Vec2Processor"),rVr.forEach(t),zlo=r(W3e," (SEW-D model)"),W3e.forEach(t),Qlo=i(ve),bh=n(ve,"LI",{});var H3e=s(bh);wte=n(H3e,"STRONG",{});var tVr=s(wte);Wlo=r(tVr,"speech_to_text"),tVr.forEach(t),Hlo=r(H3e," \u2014 "),DB=n(H3e,"A",{href:!0});var aVr=s(DB);Ulo=r(aVr,"Speech2TextProcessor"),aVr.forEach(t),Jlo=r(H3e," (Speech2Text model)"),H3e.forEach(t),Ylo=i(ve),Fh=n(ve,"LI",{});var U3e=s(Fh);Ate=n(U3e,"STRONG",{});var nVr=s(Ate);Klo=r(nVr,"speech_to_text_2"),nVr.forEach(t),Zlo=r(U3e," \u2014 "),GB=n(U3e,"A",{href:!0});var sVr=s(GB);eio=r(sVr,"Speech2Text2Processor"),sVr.forEach(t),oio=r(U3e," (Speech2Text2 model)"),U3e.forEach(t),rio=i(ve),vh=n(ve,"LI",{});var J3e=s(vh);yte=n(J3e,"STRONG",{});var lVr=s(yte);tio=r(lVr,"trocr"),lVr.forEach(t),aio=r(J3e," \u2014 "),OB=n(J3e,"A",{href:!0});var iVr=s(OB);nio=r(iVr,"TrOCRProcessor"),iVr.forEach(t),sio=r(J3e," (TrOCR model)"),J3e.forEach(t),lio=i(ve),Th=n(ve,"LI",{});var Y3e=s(Th);Lte=n(Y3e,"STRONG",{});var dVr=s(Lte);iio=r(dVr,"unispeech"),dVr.forEach(t),dio=r(Y3e," \u2014 "),VB=n(Y3e,"A",{href:!0});var cVr=s(VB);cio=r(cVr,"Wav2Vec2Processor"),cVr.forEach(t),mio=r(Y3e," (UniSpeech model)"),Y3e.forEach(t),fio=i(ve),Mh=n(ve,"LI",{});var K3e=s(Mh);xte=n(K3e,"STRONG",{});var mVr=s(xte);gio=r(mVr,"unispeech-sat"),mVr.forEach(t),hio=r(K3e," \u2014 "),XB=n(K3e,"A",{href:!0});var fVr=s(XB);uio=r(fVr,"Wav2Vec2Processor"),fVr.forEach(t),pio=r(K3e," (UniSpeechSat model)"),K3e.forEach(t),_io=i(ve),Eh=n(ve,"LI",{});var Z3e=s(Eh);$te=n(Z3e,"STRONG",{});var gVr=s($te);bio=r(gVr,"vilt"),gVr.forEach(t),Fio=r(Z3e," \u2014 "),zB=n(Z3e,"A",{href:!0});var hVr=s(zB);vio=r(hVr,"ViltProcessor"),hVr.forEach(t),Tio=r(Z3e," (ViLT model)"),Z3e.forEach(t),Mio=i(ve),Ch=n(ve,"LI",{});var ewe=s(Ch);kte=n(ewe,"STRONG",{});var uVr=s(kte);Eio=r(uVr,"vision-text-dual-encoder"),uVr.forEach(t),Cio=r(ewe," \u2014 "),QB=n(ewe,"A",{href:!0});var pVr=s(QB);wio=r(pVr,"VisionTextDualEncoderProcessor"),pVr.forEach(t),Aio=r(ewe," (VisionTextDualEncoder model)"),ewe.forEach(t),yio=i(ve),wh=n(ve,"LI",{});var owe=s(wh);Ste=n(owe,"STRONG",{});var _Vr=s(Ste);Lio=r(_Vr,"wav2vec2"),_Vr.forEach(t),xio=r(owe," \u2014 "),WB=n(owe,"A",{href:!0});var bVr=s(WB);$io=r(bVr,"Wav2Vec2Processor"),bVr.forEach(t),kio=r(owe," (Wav2Vec2 model)"),owe.forEach(t),Sio=i(ve),Ah=n(ve,"LI",{});var rwe=s(Ah);Rte=n(rwe,"STRONG",{});var FVr=s(Rte);Rio=r(FVr,"wavlm"),FVr.forEach(t),Bio=r(rwe," \u2014 "),HB=n(rwe,"A",{href:!0});var vVr=s(HB);Pio=r(vVr,"Wav2Vec2Processor"),vVr.forEach(t),Iio=r(rwe," (WavLM model)"),rwe.forEach(t),ve.forEach(t),qio=i(Ht),T(yh.$$.fragment,Ht),Nio=i(Ht),T(Lh.$$.fragment,Ht),Ht.forEach(t),jio=i(Rs),xh=n(Rs,"DIV",{class:!0});var tIe=s(xh);T(O6.$$.fragment,tIe),Dio=i(tIe),Bte=n(tIe,"P",{});var TVr=s(Bte);Gio=r(TVr,"Register a new processor for this class."),TVr.forEach(t),tIe.forEach(t),Rs.forEach(t),rBe=i(m),ui=n(m,"H2",{class:!0});var aIe=s(ui);$h=n(aIe,"A",{id:!0,class:!0,href:!0});var MVr=s($h);Pte=n(MVr,"SPAN",{});var EVr=s(Pte);T(V6.$$.fragment,EVr),EVr.forEach(t),MVr.forEach(t),Oio=i(aIe),Ite=n(aIe,"SPAN",{});var CVr=s(Ite);Vio=r(CVr,"AutoModel"),CVr.forEach(t),aIe.forEach(t),tBe=i(m),Ao=n(m,"DIV",{class:!0});var Bs=s(Ao);T(X6.$$.fragment,Bs),Xio=i(Bs),pi=n(Bs,"P",{});var tY=s(pi);zio=r(tY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UB=n(tY,"A",{href:!0});var wVr=s(UB);Qio=r(wVr,"from_pretrained()"),wVr.forEach(t),Wio=r(tY," class method or the "),JB=n(tY,"A",{href:!0});var AVr=s(JB);Hio=r(AVr,"from_config()"),AVr.forEach(t),Uio=r(tY,` class
method.`),tY.forEach(t),Jio=i(Bs),z6=n(Bs,"P",{});var nIe=s(z6);Yio=r(nIe,"This class cannot be instantiated directly using "),qte=n(nIe,"CODE",{});var yVr=s(qte);Kio=r(yVr,"__init__()"),yVr.forEach(t),Zio=r(nIe," (throws an error)."),nIe.forEach(t),edo=i(Bs),Kr=n(Bs,"DIV",{class:!0});var MA=s(Kr);T(Q6.$$.fragment,MA),odo=i(MA),Nte=n(MA,"P",{});var LVr=s(Nte);rdo=r(LVr,"Instantiates one of the base model classes of the library from a configuration."),LVr.forEach(t),tdo=i(MA),_i=n(MA,"P",{});var aY=s(_i);ado=r(aY,`Note:
Loading a model from its configuration file does `),jte=n(aY,"STRONG",{});var xVr=s(jte);ndo=r(xVr,"not"),xVr.forEach(t),sdo=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YB=n(aY,"A",{href:!0});var $Vr=s(YB);ldo=r($Vr,"from_pretrained()"),$Vr.forEach(t),ido=r(aY," to load the model weights."),aY.forEach(t),ddo=i(MA),T(kh.$$.fragment,MA),MA.forEach(t),cdo=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ut=s(Qe);T(W6.$$.fragment,Ut),mdo=i(Ut),Dte=n(Ut,"P",{});var kVr=s(Dte);fdo=r(kVr,"Instantiate one of the base model classes of the library from a pretrained model."),kVr.forEach(t),gdo=i(Ut),Ma=n(Ut,"P",{});var EA=s(Ma);hdo=r(EA,"The model class to instantiate is selected based on the "),Gte=n(EA,"CODE",{});var SVr=s(Gte);udo=r(SVr,"model_type"),SVr.forEach(t),pdo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Ote=n(EA,"CODE",{});var RVr=s(Ote);_do=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),bdo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(EA,"CODE",{});var BVr=s(Vte);Fdo=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),vdo=r(EA,":"),EA.forEach(t),Tdo=i(Ut),x=n(Ut,"UL",{});var $=s(x);Sh=n($,"LI",{});var twe=s(Sh);Xte=n(twe,"STRONG",{});var PVr=s(Xte);Mdo=r(PVr,"albert"),PVr.forEach(t),Edo=r(twe," \u2014 "),KB=n(twe,"A",{href:!0});var IVr=s(KB);Cdo=r(IVr,"AlbertModel"),IVr.forEach(t),wdo=r(twe," (ALBERT model)"),twe.forEach(t),Ado=i($),Rh=n($,"LI",{});var awe=s(Rh);zte=n(awe,"STRONG",{});var qVr=s(zte);ydo=r(qVr,"bart"),qVr.forEach(t),Ldo=r(awe," \u2014 "),ZB=n(awe,"A",{href:!0});var NVr=s(ZB);xdo=r(NVr,"BartModel"),NVr.forEach(t),$do=r(awe," (BART model)"),awe.forEach(t),kdo=i($),Bh=n($,"LI",{});var nwe=s(Bh);Qte=n(nwe,"STRONG",{});var jVr=s(Qte);Sdo=r(jVr,"beit"),jVr.forEach(t),Rdo=r(nwe," \u2014 "),eP=n(nwe,"A",{href:!0});var DVr=s(eP);Bdo=r(DVr,"BeitModel"),DVr.forEach(t),Pdo=r(nwe," (BEiT model)"),nwe.forEach(t),Ido=i($),Ph=n($,"LI",{});var swe=s(Ph);Wte=n(swe,"STRONG",{});var GVr=s(Wte);qdo=r(GVr,"bert"),GVr.forEach(t),Ndo=r(swe," \u2014 "),oP=n(swe,"A",{href:!0});var OVr=s(oP);jdo=r(OVr,"BertModel"),OVr.forEach(t),Ddo=r(swe," (BERT model)"),swe.forEach(t),Gdo=i($),Ih=n($,"LI",{});var lwe=s(Ih);Hte=n(lwe,"STRONG",{});var VVr=s(Hte);Odo=r(VVr,"bert-generation"),VVr.forEach(t),Vdo=r(lwe," \u2014 "),rP=n(lwe,"A",{href:!0});var XVr=s(rP);Xdo=r(XVr,"BertGenerationEncoder"),XVr.forEach(t),zdo=r(lwe," (Bert Generation model)"),lwe.forEach(t),Qdo=i($),qh=n($,"LI",{});var iwe=s(qh);Ute=n(iwe,"STRONG",{});var zVr=s(Ute);Wdo=r(zVr,"big_bird"),zVr.forEach(t),Hdo=r(iwe," \u2014 "),tP=n(iwe,"A",{href:!0});var QVr=s(tP);Udo=r(QVr,"BigBirdModel"),QVr.forEach(t),Jdo=r(iwe," (BigBird model)"),iwe.forEach(t),Ydo=i($),Nh=n($,"LI",{});var dwe=s(Nh);Jte=n(dwe,"STRONG",{});var WVr=s(Jte);Kdo=r(WVr,"bigbird_pegasus"),WVr.forEach(t),Zdo=r(dwe," \u2014 "),aP=n(dwe,"A",{href:!0});var HVr=s(aP);eco=r(HVr,"BigBirdPegasusModel"),HVr.forEach(t),oco=r(dwe," (BigBirdPegasus model)"),dwe.forEach(t),rco=i($),jh=n($,"LI",{});var cwe=s(jh);Yte=n(cwe,"STRONG",{});var UVr=s(Yte);tco=r(UVr,"blenderbot"),UVr.forEach(t),aco=r(cwe," \u2014 "),nP=n(cwe,"A",{href:!0});var JVr=s(nP);nco=r(JVr,"BlenderbotModel"),JVr.forEach(t),sco=r(cwe," (Blenderbot model)"),cwe.forEach(t),lco=i($),Dh=n($,"LI",{});var mwe=s(Dh);Kte=n(mwe,"STRONG",{});var YVr=s(Kte);ico=r(YVr,"blenderbot-small"),YVr.forEach(t),dco=r(mwe," \u2014 "),sP=n(mwe,"A",{href:!0});var KVr=s(sP);cco=r(KVr,"BlenderbotSmallModel"),KVr.forEach(t),mco=r(mwe," (BlenderbotSmall model)"),mwe.forEach(t),fco=i($),Gh=n($,"LI",{});var fwe=s(Gh);Zte=n(fwe,"STRONG",{});var ZVr=s(Zte);gco=r(ZVr,"camembert"),ZVr.forEach(t),hco=r(fwe," \u2014 "),lP=n(fwe,"A",{href:!0});var eXr=s(lP);uco=r(eXr,"CamembertModel"),eXr.forEach(t),pco=r(fwe," (CamemBERT model)"),fwe.forEach(t),_co=i($),Oh=n($,"LI",{});var gwe=s(Oh);eae=n(gwe,"STRONG",{});var oXr=s(eae);bco=r(oXr,"canine"),oXr.forEach(t),Fco=r(gwe," \u2014 "),iP=n(gwe,"A",{href:!0});var rXr=s(iP);vco=r(rXr,"CanineModel"),rXr.forEach(t),Tco=r(gwe," (Canine model)"),gwe.forEach(t),Mco=i($),Vh=n($,"LI",{});var hwe=s(Vh);oae=n(hwe,"STRONG",{});var tXr=s(oae);Eco=r(tXr,"clip"),tXr.forEach(t),Cco=r(hwe," \u2014 "),dP=n(hwe,"A",{href:!0});var aXr=s(dP);wco=r(aXr,"CLIPModel"),aXr.forEach(t),Aco=r(hwe," (CLIP model)"),hwe.forEach(t),yco=i($),Xh=n($,"LI",{});var uwe=s(Xh);rae=n(uwe,"STRONG",{});var nXr=s(rae);Lco=r(nXr,"convbert"),nXr.forEach(t),xco=r(uwe," \u2014 "),cP=n(uwe,"A",{href:!0});var sXr=s(cP);$co=r(sXr,"ConvBertModel"),sXr.forEach(t),kco=r(uwe," (ConvBERT model)"),uwe.forEach(t),Sco=i($),zh=n($,"LI",{});var pwe=s(zh);tae=n(pwe,"STRONG",{});var lXr=s(tae);Rco=r(lXr,"convnext"),lXr.forEach(t),Bco=r(pwe," \u2014 "),mP=n(pwe,"A",{href:!0});var iXr=s(mP);Pco=r(iXr,"ConvNextModel"),iXr.forEach(t),Ico=r(pwe," (ConvNext model)"),pwe.forEach(t),qco=i($),Qh=n($,"LI",{});var _we=s(Qh);aae=n(_we,"STRONG",{});var dXr=s(aae);Nco=r(dXr,"ctrl"),dXr.forEach(t),jco=r(_we," \u2014 "),fP=n(_we,"A",{href:!0});var cXr=s(fP);Dco=r(cXr,"CTRLModel"),cXr.forEach(t),Gco=r(_we," (CTRL model)"),_we.forEach(t),Oco=i($),Wh=n($,"LI",{});var bwe=s(Wh);nae=n(bwe,"STRONG",{});var mXr=s(nae);Vco=r(mXr,"data2vec-audio"),mXr.forEach(t),Xco=r(bwe," \u2014 "),gP=n(bwe,"A",{href:!0});var fXr=s(gP);zco=r(fXr,"Data2VecAudioModel"),fXr.forEach(t),Qco=r(bwe," (Data2VecAudio model)"),bwe.forEach(t),Wco=i($),Hh=n($,"LI",{});var Fwe=s(Hh);sae=n(Fwe,"STRONG",{});var gXr=s(sae);Hco=r(gXr,"data2vec-text"),gXr.forEach(t),Uco=r(Fwe," \u2014 "),hP=n(Fwe,"A",{href:!0});var hXr=s(hP);Jco=r(hXr,"Data2VecTextModel"),hXr.forEach(t),Yco=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),Kco=i($),Uh=n($,"LI",{});var vwe=s(Uh);lae=n(vwe,"STRONG",{});var uXr=s(lae);Zco=r(uXr,"data2vec-vision"),uXr.forEach(t),emo=r(vwe," \u2014 "),uP=n(vwe,"A",{href:!0});var pXr=s(uP);omo=r(pXr,"Data2VecVisionModel"),pXr.forEach(t),rmo=r(vwe," (Data2VecVision model)"),vwe.forEach(t),tmo=i($),Jh=n($,"LI",{});var Twe=s(Jh);iae=n(Twe,"STRONG",{});var _Xr=s(iae);amo=r(_Xr,"deberta"),_Xr.forEach(t),nmo=r(Twe," \u2014 "),pP=n(Twe,"A",{href:!0});var bXr=s(pP);smo=r(bXr,"DebertaModel"),bXr.forEach(t),lmo=r(Twe," (DeBERTa model)"),Twe.forEach(t),imo=i($),Yh=n($,"LI",{});var Mwe=s(Yh);dae=n(Mwe,"STRONG",{});var FXr=s(dae);dmo=r(FXr,"deberta-v2"),FXr.forEach(t),cmo=r(Mwe," \u2014 "),_P=n(Mwe,"A",{href:!0});var vXr=s(_P);mmo=r(vXr,"DebertaV2Model"),vXr.forEach(t),fmo=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),gmo=i($),Kh=n($,"LI",{});var Ewe=s(Kh);cae=n(Ewe,"STRONG",{});var TXr=s(cae);hmo=r(TXr,"decision_transformer"),TXr.forEach(t),umo=r(Ewe," \u2014 "),bP=n(Ewe,"A",{href:!0});var MXr=s(bP);pmo=r(MXr,"DecisionTransformerModel"),MXr.forEach(t),_mo=r(Ewe," (Decision Transformer model)"),Ewe.forEach(t),bmo=i($),Zh=n($,"LI",{});var Cwe=s(Zh);mae=n(Cwe,"STRONG",{});var EXr=s(mae);Fmo=r(EXr,"deit"),EXr.forEach(t),vmo=r(Cwe," \u2014 "),FP=n(Cwe,"A",{href:!0});var CXr=s(FP);Tmo=r(CXr,"DeiTModel"),CXr.forEach(t),Mmo=r(Cwe," (DeiT model)"),Cwe.forEach(t),Emo=i($),eu=n($,"LI",{});var wwe=s(eu);fae=n(wwe,"STRONG",{});var wXr=s(fae);Cmo=r(wXr,"detr"),wXr.forEach(t),wmo=r(wwe," \u2014 "),vP=n(wwe,"A",{href:!0});var AXr=s(vP);Amo=r(AXr,"DetrModel"),AXr.forEach(t),ymo=r(wwe," (DETR model)"),wwe.forEach(t),Lmo=i($),ou=n($,"LI",{});var Awe=s(ou);gae=n(Awe,"STRONG",{});var yXr=s(gae);xmo=r(yXr,"distilbert"),yXr.forEach(t),$mo=r(Awe," \u2014 "),TP=n(Awe,"A",{href:!0});var LXr=s(TP);kmo=r(LXr,"DistilBertModel"),LXr.forEach(t),Smo=r(Awe," (DistilBERT model)"),Awe.forEach(t),Rmo=i($),ru=n($,"LI",{});var ywe=s(ru);hae=n(ywe,"STRONG",{});var xXr=s(hae);Bmo=r(xXr,"dpr"),xXr.forEach(t),Pmo=r(ywe," \u2014 "),MP=n(ywe,"A",{href:!0});var $Xr=s(MP);Imo=r($Xr,"DPRQuestionEncoder"),$Xr.forEach(t),qmo=r(ywe," (DPR model)"),ywe.forEach(t),Nmo=i($),tu=n($,"LI",{});var Lwe=s(tu);uae=n(Lwe,"STRONG",{});var kXr=s(uae);jmo=r(kXr,"dpt"),kXr.forEach(t),Dmo=r(Lwe," \u2014 "),EP=n(Lwe,"A",{href:!0});var SXr=s(EP);Gmo=r(SXr,"DPTModel"),SXr.forEach(t),Omo=r(Lwe," (DPT model)"),Lwe.forEach(t),Vmo=i($),au=n($,"LI",{});var xwe=s(au);pae=n(xwe,"STRONG",{});var RXr=s(pae);Xmo=r(RXr,"electra"),RXr.forEach(t),zmo=r(xwe," \u2014 "),CP=n(xwe,"A",{href:!0});var BXr=s(CP);Qmo=r(BXr,"ElectraModel"),BXr.forEach(t),Wmo=r(xwe," (ELECTRA model)"),xwe.forEach(t),Hmo=i($),nu=n($,"LI",{});var $we=s(nu);_ae=n($we,"STRONG",{});var PXr=s(_ae);Umo=r(PXr,"flaubert"),PXr.forEach(t),Jmo=r($we," \u2014 "),wP=n($we,"A",{href:!0});var IXr=s(wP);Ymo=r(IXr,"FlaubertModel"),IXr.forEach(t),Kmo=r($we," (FlauBERT model)"),$we.forEach(t),Zmo=i($),su=n($,"LI",{});var kwe=s(su);bae=n(kwe,"STRONG",{});var qXr=s(bae);efo=r(qXr,"fnet"),qXr.forEach(t),ofo=r(kwe," \u2014 "),AP=n(kwe,"A",{href:!0});var NXr=s(AP);rfo=r(NXr,"FNetModel"),NXr.forEach(t),tfo=r(kwe," (FNet model)"),kwe.forEach(t),afo=i($),lu=n($,"LI",{});var Swe=s(lu);Fae=n(Swe,"STRONG",{});var jXr=s(Fae);nfo=r(jXr,"fsmt"),jXr.forEach(t),sfo=r(Swe," \u2014 "),yP=n(Swe,"A",{href:!0});var DXr=s(yP);lfo=r(DXr,"FSMTModel"),DXr.forEach(t),ifo=r(Swe," (FairSeq Machine-Translation model)"),Swe.forEach(t),dfo=i($),ys=n($,"LI",{});var A9=s(ys);vae=n(A9,"STRONG",{});var GXr=s(vae);cfo=r(GXr,"funnel"),GXr.forEach(t),mfo=r(A9," \u2014 "),LP=n(A9,"A",{href:!0});var OXr=s(LP);ffo=r(OXr,"FunnelModel"),OXr.forEach(t),gfo=r(A9," or "),xP=n(A9,"A",{href:!0});var VXr=s(xP);hfo=r(VXr,"FunnelBaseModel"),VXr.forEach(t),ufo=r(A9," (Funnel Transformer model)"),A9.forEach(t),pfo=i($),iu=n($,"LI",{});var Rwe=s(iu);Tae=n(Rwe,"STRONG",{});var XXr=s(Tae);_fo=r(XXr,"glpn"),XXr.forEach(t),bfo=r(Rwe," \u2014 "),$P=n(Rwe,"A",{href:!0});var zXr=s($P);Ffo=r(zXr,"GLPNModel"),zXr.forEach(t),vfo=r(Rwe," (GLPN model)"),Rwe.forEach(t),Tfo=i($),du=n($,"LI",{});var Bwe=s(du);Mae=n(Bwe,"STRONG",{});var QXr=s(Mae);Mfo=r(QXr,"gpt2"),QXr.forEach(t),Efo=r(Bwe," \u2014 "),kP=n(Bwe,"A",{href:!0});var WXr=s(kP);Cfo=r(WXr,"GPT2Model"),WXr.forEach(t),wfo=r(Bwe," (OpenAI GPT-2 model)"),Bwe.forEach(t),Afo=i($),cu=n($,"LI",{});var Pwe=s(cu);Eae=n(Pwe,"STRONG",{});var HXr=s(Eae);yfo=r(HXr,"gpt_neo"),HXr.forEach(t),Lfo=r(Pwe," \u2014 "),SP=n(Pwe,"A",{href:!0});var UXr=s(SP);xfo=r(UXr,"GPTNeoModel"),UXr.forEach(t),$fo=r(Pwe," (GPT Neo model)"),Pwe.forEach(t),kfo=i($),mu=n($,"LI",{});var Iwe=s(mu);Cae=n(Iwe,"STRONG",{});var JXr=s(Cae);Sfo=r(JXr,"gptj"),JXr.forEach(t),Rfo=r(Iwe," \u2014 "),RP=n(Iwe,"A",{href:!0});var YXr=s(RP);Bfo=r(YXr,"GPTJModel"),YXr.forEach(t),Pfo=r(Iwe," (GPT-J model)"),Iwe.forEach(t),Ifo=i($),fu=n($,"LI",{});var qwe=s(fu);wae=n(qwe,"STRONG",{});var KXr=s(wae);qfo=r(KXr,"hubert"),KXr.forEach(t),Nfo=r(qwe," \u2014 "),BP=n(qwe,"A",{href:!0});var ZXr=s(BP);jfo=r(ZXr,"HubertModel"),ZXr.forEach(t),Dfo=r(qwe," (Hubert model)"),qwe.forEach(t),Gfo=i($),gu=n($,"LI",{});var Nwe=s(gu);Aae=n(Nwe,"STRONG",{});var ezr=s(Aae);Ofo=r(ezr,"ibert"),ezr.forEach(t),Vfo=r(Nwe," \u2014 "),PP=n(Nwe,"A",{href:!0});var ozr=s(PP);Xfo=r(ozr,"IBertModel"),ozr.forEach(t),zfo=r(Nwe," (I-BERT model)"),Nwe.forEach(t),Qfo=i($),hu=n($,"LI",{});var jwe=s(hu);yae=n(jwe,"STRONG",{});var rzr=s(yae);Wfo=r(rzr,"imagegpt"),rzr.forEach(t),Hfo=r(jwe," \u2014 "),IP=n(jwe,"A",{href:!0});var tzr=s(IP);Ufo=r(tzr,"ImageGPTModel"),tzr.forEach(t),Jfo=r(jwe," (ImageGPT model)"),jwe.forEach(t),Yfo=i($),uu=n($,"LI",{});var Dwe=s(uu);Lae=n(Dwe,"STRONG",{});var azr=s(Lae);Kfo=r(azr,"layoutlm"),azr.forEach(t),Zfo=r(Dwe," \u2014 "),qP=n(Dwe,"A",{href:!0});var nzr=s(qP);ego=r(nzr,"LayoutLMModel"),nzr.forEach(t),ogo=r(Dwe," (LayoutLM model)"),Dwe.forEach(t),rgo=i($),pu=n($,"LI",{});var Gwe=s(pu);xae=n(Gwe,"STRONG",{});var szr=s(xae);tgo=r(szr,"layoutlmv2"),szr.forEach(t),ago=r(Gwe," \u2014 "),NP=n(Gwe,"A",{href:!0});var lzr=s(NP);ngo=r(lzr,"LayoutLMv2Model"),lzr.forEach(t),sgo=r(Gwe," (LayoutLMv2 model)"),Gwe.forEach(t),lgo=i($),_u=n($,"LI",{});var Owe=s(_u);$ae=n(Owe,"STRONG",{});var izr=s($ae);igo=r(izr,"led"),izr.forEach(t),dgo=r(Owe," \u2014 "),jP=n(Owe,"A",{href:!0});var dzr=s(jP);cgo=r(dzr,"LEDModel"),dzr.forEach(t),mgo=r(Owe," (LED model)"),Owe.forEach(t),fgo=i($),bu=n($,"LI",{});var Vwe=s(bu);kae=n(Vwe,"STRONG",{});var czr=s(kae);ggo=r(czr,"longformer"),czr.forEach(t),hgo=r(Vwe," \u2014 "),DP=n(Vwe,"A",{href:!0});var mzr=s(DP);ugo=r(mzr,"LongformerModel"),mzr.forEach(t),pgo=r(Vwe," (Longformer model)"),Vwe.forEach(t),_go=i($),Fu=n($,"LI",{});var Xwe=s(Fu);Sae=n(Xwe,"STRONG",{});var fzr=s(Sae);bgo=r(fzr,"luke"),fzr.forEach(t),Fgo=r(Xwe," \u2014 "),GP=n(Xwe,"A",{href:!0});var gzr=s(GP);vgo=r(gzr,"LukeModel"),gzr.forEach(t),Tgo=r(Xwe," (LUKE model)"),Xwe.forEach(t),Mgo=i($),vu=n($,"LI",{});var zwe=s(vu);Rae=n(zwe,"STRONG",{});var hzr=s(Rae);Ego=r(hzr,"lxmert"),hzr.forEach(t),Cgo=r(zwe," \u2014 "),OP=n(zwe,"A",{href:!0});var uzr=s(OP);wgo=r(uzr,"LxmertModel"),uzr.forEach(t),Ago=r(zwe," (LXMERT model)"),zwe.forEach(t),ygo=i($),Tu=n($,"LI",{});var Qwe=s(Tu);Bae=n(Qwe,"STRONG",{});var pzr=s(Bae);Lgo=r(pzr,"m2m_100"),pzr.forEach(t),xgo=r(Qwe," \u2014 "),VP=n(Qwe,"A",{href:!0});var _zr=s(VP);$go=r(_zr,"M2M100Model"),_zr.forEach(t),kgo=r(Qwe," (M2M100 model)"),Qwe.forEach(t),Sgo=i($),Mu=n($,"LI",{});var Wwe=s(Mu);Pae=n(Wwe,"STRONG",{});var bzr=s(Pae);Rgo=r(bzr,"marian"),bzr.forEach(t),Bgo=r(Wwe," \u2014 "),XP=n(Wwe,"A",{href:!0});var Fzr=s(XP);Pgo=r(Fzr,"MarianModel"),Fzr.forEach(t),Igo=r(Wwe," (Marian model)"),Wwe.forEach(t),qgo=i($),Eu=n($,"LI",{});var Hwe=s(Eu);Iae=n(Hwe,"STRONG",{});var vzr=s(Iae);Ngo=r(vzr,"maskformer"),vzr.forEach(t),jgo=r(Hwe," \u2014 "),zP=n(Hwe,"A",{href:!0});var Tzr=s(zP);Dgo=r(Tzr,"MaskFormerModel"),Tzr.forEach(t),Ggo=r(Hwe," (MaskFormer model)"),Hwe.forEach(t),Ogo=i($),Cu=n($,"LI",{});var Uwe=s(Cu);qae=n(Uwe,"STRONG",{});var Mzr=s(qae);Vgo=r(Mzr,"mbart"),Mzr.forEach(t),Xgo=r(Uwe," \u2014 "),QP=n(Uwe,"A",{href:!0});var Ezr=s(QP);zgo=r(Ezr,"MBartModel"),Ezr.forEach(t),Qgo=r(Uwe," (mBART model)"),Uwe.forEach(t),Wgo=i($),wu=n($,"LI",{});var Jwe=s(wu);Nae=n(Jwe,"STRONG",{});var Czr=s(Nae);Hgo=r(Czr,"megatron-bert"),Czr.forEach(t),Ugo=r(Jwe," \u2014 "),WP=n(Jwe,"A",{href:!0});var wzr=s(WP);Jgo=r(wzr,"MegatronBertModel"),wzr.forEach(t),Ygo=r(Jwe," (MegatronBert model)"),Jwe.forEach(t),Kgo=i($),Au=n($,"LI",{});var Ywe=s(Au);jae=n(Ywe,"STRONG",{});var Azr=s(jae);Zgo=r(Azr,"mobilebert"),Azr.forEach(t),eho=r(Ywe," \u2014 "),HP=n(Ywe,"A",{href:!0});var yzr=s(HP);oho=r(yzr,"MobileBertModel"),yzr.forEach(t),rho=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),tho=i($),yu=n($,"LI",{});var Kwe=s(yu);Dae=n(Kwe,"STRONG",{});var Lzr=s(Dae);aho=r(Lzr,"mpnet"),Lzr.forEach(t),nho=r(Kwe," \u2014 "),UP=n(Kwe,"A",{href:!0});var xzr=s(UP);sho=r(xzr,"MPNetModel"),xzr.forEach(t),lho=r(Kwe," (MPNet model)"),Kwe.forEach(t),iho=i($),Lu=n($,"LI",{});var Zwe=s(Lu);Gae=n(Zwe,"STRONG",{});var $zr=s(Gae);dho=r($zr,"mt5"),$zr.forEach(t),cho=r(Zwe," \u2014 "),JP=n(Zwe,"A",{href:!0});var kzr=s(JP);mho=r(kzr,"MT5Model"),kzr.forEach(t),fho=r(Zwe," (mT5 model)"),Zwe.forEach(t),gho=i($),xu=n($,"LI",{});var eAe=s(xu);Oae=n(eAe,"STRONG",{});var Szr=s(Oae);hho=r(Szr,"nystromformer"),Szr.forEach(t),uho=r(eAe," \u2014 "),YP=n(eAe,"A",{href:!0});var Rzr=s(YP);pho=r(Rzr,"NystromformerModel"),Rzr.forEach(t),_ho=r(eAe," (Nystromformer model)"),eAe.forEach(t),bho=i($),$u=n($,"LI",{});var oAe=s($u);Vae=n(oAe,"STRONG",{});var Bzr=s(Vae);Fho=r(Bzr,"openai-gpt"),Bzr.forEach(t),vho=r(oAe," \u2014 "),KP=n(oAe,"A",{href:!0});var Pzr=s(KP);Tho=r(Pzr,"OpenAIGPTModel"),Pzr.forEach(t),Mho=r(oAe," (OpenAI GPT model)"),oAe.forEach(t),Eho=i($),ku=n($,"LI",{});var rAe=s(ku);Xae=n(rAe,"STRONG",{});var Izr=s(Xae);Cho=r(Izr,"pegasus"),Izr.forEach(t),who=r(rAe," \u2014 "),ZP=n(rAe,"A",{href:!0});var qzr=s(ZP);Aho=r(qzr,"PegasusModel"),qzr.forEach(t),yho=r(rAe," (Pegasus model)"),rAe.forEach(t),Lho=i($),Su=n($,"LI",{});var tAe=s(Su);zae=n(tAe,"STRONG",{});var Nzr=s(zae);xho=r(Nzr,"perceiver"),Nzr.forEach(t),$ho=r(tAe," \u2014 "),eI=n(tAe,"A",{href:!0});var jzr=s(eI);kho=r(jzr,"PerceiverModel"),jzr.forEach(t),Sho=r(tAe," (Perceiver model)"),tAe.forEach(t),Rho=i($),Ru=n($,"LI",{});var aAe=s(Ru);Qae=n(aAe,"STRONG",{});var Dzr=s(Qae);Bho=r(Dzr,"plbart"),Dzr.forEach(t),Pho=r(aAe," \u2014 "),oI=n(aAe,"A",{href:!0});var Gzr=s(oI);Iho=r(Gzr,"PLBartModel"),Gzr.forEach(t),qho=r(aAe," (PLBart model)"),aAe.forEach(t),Nho=i($),Bu=n($,"LI",{});var nAe=s(Bu);Wae=n(nAe,"STRONG",{});var Ozr=s(Wae);jho=r(Ozr,"poolformer"),Ozr.forEach(t),Dho=r(nAe," \u2014 "),rI=n(nAe,"A",{href:!0});var Vzr=s(rI);Gho=r(Vzr,"PoolFormerModel"),Vzr.forEach(t),Oho=r(nAe," (PoolFormer model)"),nAe.forEach(t),Vho=i($),Pu=n($,"LI",{});var sAe=s(Pu);Hae=n(sAe,"STRONG",{});var Xzr=s(Hae);Xho=r(Xzr,"prophetnet"),Xzr.forEach(t),zho=r(sAe," \u2014 "),tI=n(sAe,"A",{href:!0});var zzr=s(tI);Qho=r(zzr,"ProphetNetModel"),zzr.forEach(t),Who=r(sAe," (ProphetNet model)"),sAe.forEach(t),Hho=i($),Iu=n($,"LI",{});var lAe=s(Iu);Uae=n(lAe,"STRONG",{});var Qzr=s(Uae);Uho=r(Qzr,"qdqbert"),Qzr.forEach(t),Jho=r(lAe," \u2014 "),aI=n(lAe,"A",{href:!0});var Wzr=s(aI);Yho=r(Wzr,"QDQBertModel"),Wzr.forEach(t),Kho=r(lAe," (QDQBert model)"),lAe.forEach(t),Zho=i($),qu=n($,"LI",{});var iAe=s(qu);Jae=n(iAe,"STRONG",{});var Hzr=s(Jae);euo=r(Hzr,"reformer"),Hzr.forEach(t),ouo=r(iAe," \u2014 "),nI=n(iAe,"A",{href:!0});var Uzr=s(nI);ruo=r(Uzr,"ReformerModel"),Uzr.forEach(t),tuo=r(iAe," (Reformer model)"),iAe.forEach(t),auo=i($),Nu=n($,"LI",{});var dAe=s(Nu);Yae=n(dAe,"STRONG",{});var Jzr=s(Yae);nuo=r(Jzr,"regnet"),Jzr.forEach(t),suo=r(dAe," \u2014 "),sI=n(dAe,"A",{href:!0});var Yzr=s(sI);luo=r(Yzr,"RegNetModel"),Yzr.forEach(t),iuo=r(dAe," (RegNet model)"),dAe.forEach(t),duo=i($),ju=n($,"LI",{});var cAe=s(ju);Kae=n(cAe,"STRONG",{});var Kzr=s(Kae);cuo=r(Kzr,"rembert"),Kzr.forEach(t),muo=r(cAe," \u2014 "),lI=n(cAe,"A",{href:!0});var Zzr=s(lI);fuo=r(Zzr,"RemBertModel"),Zzr.forEach(t),guo=r(cAe," (RemBERT model)"),cAe.forEach(t),huo=i($),Du=n($,"LI",{});var mAe=s(Du);Zae=n(mAe,"STRONG",{});var eQr=s(Zae);uuo=r(eQr,"resnet"),eQr.forEach(t),puo=r(mAe," \u2014 "),iI=n(mAe,"A",{href:!0});var oQr=s(iI);_uo=r(oQr,"ResNetModel"),oQr.forEach(t),buo=r(mAe," (ResNet model)"),mAe.forEach(t),Fuo=i($),Gu=n($,"LI",{});var fAe=s(Gu);ene=n(fAe,"STRONG",{});var rQr=s(ene);vuo=r(rQr,"retribert"),rQr.forEach(t),Tuo=r(fAe," \u2014 "),dI=n(fAe,"A",{href:!0});var tQr=s(dI);Muo=r(tQr,"RetriBertModel"),tQr.forEach(t),Euo=r(fAe," (RetriBERT model)"),fAe.forEach(t),Cuo=i($),Ou=n($,"LI",{});var gAe=s(Ou);one=n(gAe,"STRONG",{});var aQr=s(one);wuo=r(aQr,"roberta"),aQr.forEach(t),Auo=r(gAe," \u2014 "),cI=n(gAe,"A",{href:!0});var nQr=s(cI);yuo=r(nQr,"RobertaModel"),nQr.forEach(t),Luo=r(gAe," (RoBERTa model)"),gAe.forEach(t),xuo=i($),Vu=n($,"LI",{});var hAe=s(Vu);rne=n(hAe,"STRONG",{});var sQr=s(rne);$uo=r(sQr,"roformer"),sQr.forEach(t),kuo=r(hAe," \u2014 "),mI=n(hAe,"A",{href:!0});var lQr=s(mI);Suo=r(lQr,"RoFormerModel"),lQr.forEach(t),Ruo=r(hAe," (RoFormer model)"),hAe.forEach(t),Buo=i($),Xu=n($,"LI",{});var uAe=s(Xu);tne=n(uAe,"STRONG",{});var iQr=s(tne);Puo=r(iQr,"segformer"),iQr.forEach(t),Iuo=r(uAe," \u2014 "),fI=n(uAe,"A",{href:!0});var dQr=s(fI);quo=r(dQr,"SegformerModel"),dQr.forEach(t),Nuo=r(uAe," (SegFormer model)"),uAe.forEach(t),juo=i($),zu=n($,"LI",{});var pAe=s(zu);ane=n(pAe,"STRONG",{});var cQr=s(ane);Duo=r(cQr,"sew"),cQr.forEach(t),Guo=r(pAe," \u2014 "),gI=n(pAe,"A",{href:!0});var mQr=s(gI);Ouo=r(mQr,"SEWModel"),mQr.forEach(t),Vuo=r(pAe," (SEW model)"),pAe.forEach(t),Xuo=i($),Qu=n($,"LI",{});var _Ae=s(Qu);nne=n(_Ae,"STRONG",{});var fQr=s(nne);zuo=r(fQr,"sew-d"),fQr.forEach(t),Quo=r(_Ae," \u2014 "),hI=n(_Ae,"A",{href:!0});var gQr=s(hI);Wuo=r(gQr,"SEWDModel"),gQr.forEach(t),Huo=r(_Ae," (SEW-D model)"),_Ae.forEach(t),Uuo=i($),Wu=n($,"LI",{});var bAe=s(Wu);sne=n(bAe,"STRONG",{});var hQr=s(sne);Juo=r(hQr,"speech_to_text"),hQr.forEach(t),Yuo=r(bAe," \u2014 "),uI=n(bAe,"A",{href:!0});var uQr=s(uI);Kuo=r(uQr,"Speech2TextModel"),uQr.forEach(t),Zuo=r(bAe," (Speech2Text model)"),bAe.forEach(t),epo=i($),Hu=n($,"LI",{});var FAe=s(Hu);lne=n(FAe,"STRONG",{});var pQr=s(lne);opo=r(pQr,"splinter"),pQr.forEach(t),rpo=r(FAe," \u2014 "),pI=n(FAe,"A",{href:!0});var _Qr=s(pI);tpo=r(_Qr,"SplinterModel"),_Qr.forEach(t),apo=r(FAe," (Splinter model)"),FAe.forEach(t),npo=i($),Uu=n($,"LI",{});var vAe=s(Uu);ine=n(vAe,"STRONG",{});var bQr=s(ine);spo=r(bQr,"squeezebert"),bQr.forEach(t),lpo=r(vAe," \u2014 "),_I=n(vAe,"A",{href:!0});var FQr=s(_I);ipo=r(FQr,"SqueezeBertModel"),FQr.forEach(t),dpo=r(vAe," (SqueezeBERT model)"),vAe.forEach(t),cpo=i($),Ju=n($,"LI",{});var TAe=s(Ju);dne=n(TAe,"STRONG",{});var vQr=s(dne);mpo=r(vQr,"swin"),vQr.forEach(t),fpo=r(TAe," \u2014 "),bI=n(TAe,"A",{href:!0});var TQr=s(bI);gpo=r(TQr,"SwinModel"),TQr.forEach(t),hpo=r(TAe," (Swin model)"),TAe.forEach(t),upo=i($),Yu=n($,"LI",{});var MAe=s(Yu);cne=n(MAe,"STRONG",{});var MQr=s(cne);ppo=r(MQr,"t5"),MQr.forEach(t),_po=r(MAe," \u2014 "),FI=n(MAe,"A",{href:!0});var EQr=s(FI);bpo=r(EQr,"T5Model"),EQr.forEach(t),Fpo=r(MAe," (T5 model)"),MAe.forEach(t),vpo=i($),Ku=n($,"LI",{});var EAe=s(Ku);mne=n(EAe,"STRONG",{});var CQr=s(mne);Tpo=r(CQr,"tapas"),CQr.forEach(t),Mpo=r(EAe," \u2014 "),vI=n(EAe,"A",{href:!0});var wQr=s(vI);Epo=r(wQr,"TapasModel"),wQr.forEach(t),Cpo=r(EAe," (TAPAS model)"),EAe.forEach(t),wpo=i($),Zu=n($,"LI",{});var CAe=s(Zu);fne=n(CAe,"STRONG",{});var AQr=s(fne);Apo=r(AQr,"transfo-xl"),AQr.forEach(t),ypo=r(CAe," \u2014 "),TI=n(CAe,"A",{href:!0});var yQr=s(TI);Lpo=r(yQr,"TransfoXLModel"),yQr.forEach(t),xpo=r(CAe," (Transformer-XL model)"),CAe.forEach(t),$po=i($),ep=n($,"LI",{});var wAe=s(ep);gne=n(wAe,"STRONG",{});var LQr=s(gne);kpo=r(LQr,"unispeech"),LQr.forEach(t),Spo=r(wAe," \u2014 "),MI=n(wAe,"A",{href:!0});var xQr=s(MI);Rpo=r(xQr,"UniSpeechModel"),xQr.forEach(t),Bpo=r(wAe," (UniSpeech model)"),wAe.forEach(t),Ppo=i($),op=n($,"LI",{});var AAe=s(op);hne=n(AAe,"STRONG",{});var $Qr=s(hne);Ipo=r($Qr,"unispeech-sat"),$Qr.forEach(t),qpo=r(AAe," \u2014 "),EI=n(AAe,"A",{href:!0});var kQr=s(EI);Npo=r(kQr,"UniSpeechSatModel"),kQr.forEach(t),jpo=r(AAe," (UniSpeechSat model)"),AAe.forEach(t),Dpo=i($),rp=n($,"LI",{});var yAe=s(rp);une=n(yAe,"STRONG",{});var SQr=s(une);Gpo=r(SQr,"van"),SQr.forEach(t),Opo=r(yAe," \u2014 "),CI=n(yAe,"A",{href:!0});var RQr=s(CI);Vpo=r(RQr,"VanModel"),RQr.forEach(t),Xpo=r(yAe," (VAN model)"),yAe.forEach(t),zpo=i($),tp=n($,"LI",{});var LAe=s(tp);pne=n(LAe,"STRONG",{});var BQr=s(pne);Qpo=r(BQr,"vilt"),BQr.forEach(t),Wpo=r(LAe," \u2014 "),wI=n(LAe,"A",{href:!0});var PQr=s(wI);Hpo=r(PQr,"ViltModel"),PQr.forEach(t),Upo=r(LAe," (ViLT model)"),LAe.forEach(t),Jpo=i($),ap=n($,"LI",{});var xAe=s(ap);_ne=n(xAe,"STRONG",{});var IQr=s(_ne);Ypo=r(IQr,"vision-text-dual-encoder"),IQr.forEach(t),Kpo=r(xAe," \u2014 "),AI=n(xAe,"A",{href:!0});var qQr=s(AI);Zpo=r(qQr,"VisionTextDualEncoderModel"),qQr.forEach(t),e_o=r(xAe," (VisionTextDualEncoder model)"),xAe.forEach(t),o_o=i($),np=n($,"LI",{});var $Ae=s(np);bne=n($Ae,"STRONG",{});var NQr=s(bne);r_o=r(NQr,"visual_bert"),NQr.forEach(t),t_o=r($Ae," \u2014 "),yI=n($Ae,"A",{href:!0});var jQr=s(yI);a_o=r(jQr,"VisualBertModel"),jQr.forEach(t),n_o=r($Ae," (VisualBert model)"),$Ae.forEach(t),s_o=i($),sp=n($,"LI",{});var kAe=s(sp);Fne=n(kAe,"STRONG",{});var DQr=s(Fne);l_o=r(DQr,"vit"),DQr.forEach(t),i_o=r(kAe," \u2014 "),LI=n(kAe,"A",{href:!0});var GQr=s(LI);d_o=r(GQr,"ViTModel"),GQr.forEach(t),c_o=r(kAe," (ViT model)"),kAe.forEach(t),m_o=i($),lp=n($,"LI",{});var SAe=s(lp);vne=n(SAe,"STRONG",{});var OQr=s(vne);f_o=r(OQr,"vit_mae"),OQr.forEach(t),g_o=r(SAe," \u2014 "),xI=n(SAe,"A",{href:!0});var VQr=s(xI);h_o=r(VQr,"ViTMAEModel"),VQr.forEach(t),u_o=r(SAe," (ViTMAE model)"),SAe.forEach(t),p_o=i($),ip=n($,"LI",{});var RAe=s(ip);Tne=n(RAe,"STRONG",{});var XQr=s(Tne);__o=r(XQr,"wav2vec2"),XQr.forEach(t),b_o=r(RAe," \u2014 "),$I=n(RAe,"A",{href:!0});var zQr=s($I);F_o=r(zQr,"Wav2Vec2Model"),zQr.forEach(t),v_o=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),T_o=i($),dp=n($,"LI",{});var BAe=s(dp);Mne=n(BAe,"STRONG",{});var QQr=s(Mne);M_o=r(QQr,"wavlm"),QQr.forEach(t),E_o=r(BAe," \u2014 "),kI=n(BAe,"A",{href:!0});var WQr=s(kI);C_o=r(WQr,"WavLMModel"),WQr.forEach(t),w_o=r(BAe," (WavLM model)"),BAe.forEach(t),A_o=i($),cp=n($,"LI",{});var PAe=s(cp);Ene=n(PAe,"STRONG",{});var HQr=s(Ene);y_o=r(HQr,"xglm"),HQr.forEach(t),L_o=r(PAe," \u2014 "),SI=n(PAe,"A",{href:!0});var UQr=s(SI);x_o=r(UQr,"XGLMModel"),UQr.forEach(t),$_o=r(PAe," (XGLM model)"),PAe.forEach(t),k_o=i($),mp=n($,"LI",{});var IAe=s(mp);Cne=n(IAe,"STRONG",{});var JQr=s(Cne);S_o=r(JQr,"xlm"),JQr.forEach(t),R_o=r(IAe," \u2014 "),RI=n(IAe,"A",{href:!0});var YQr=s(RI);B_o=r(YQr,"XLMModel"),YQr.forEach(t),P_o=r(IAe," (XLM model)"),IAe.forEach(t),I_o=i($),fp=n($,"LI",{});var qAe=s(fp);wne=n(qAe,"STRONG",{});var KQr=s(wne);q_o=r(KQr,"xlm-prophetnet"),KQr.forEach(t),N_o=r(qAe," \u2014 "),BI=n(qAe,"A",{href:!0});var ZQr=s(BI);j_o=r(ZQr,"XLMProphetNetModel"),ZQr.forEach(t),D_o=r(qAe," (XLMProphetNet model)"),qAe.forEach(t),G_o=i($),gp=n($,"LI",{});var NAe=s(gp);Ane=n(NAe,"STRONG",{});var eWr=s(Ane);O_o=r(eWr,"xlm-roberta"),eWr.forEach(t),V_o=r(NAe," \u2014 "),PI=n(NAe,"A",{href:!0});var oWr=s(PI);X_o=r(oWr,"XLMRobertaModel"),oWr.forEach(t),z_o=r(NAe," (XLM-RoBERTa model)"),NAe.forEach(t),Q_o=i($),hp=n($,"LI",{});var jAe=s(hp);yne=n(jAe,"STRONG",{});var rWr=s(yne);W_o=r(rWr,"xlm-roberta-xl"),rWr.forEach(t),H_o=r(jAe," \u2014 "),II=n(jAe,"A",{href:!0});var tWr=s(II);U_o=r(tWr,"XLMRobertaXLModel"),tWr.forEach(t),J_o=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),Y_o=i($),up=n($,"LI",{});var DAe=s(up);Lne=n(DAe,"STRONG",{});var aWr=s(Lne);K_o=r(aWr,"xlnet"),aWr.forEach(t),Z_o=r(DAe," \u2014 "),qI=n(DAe,"A",{href:!0});var nWr=s(qI);ebo=r(nWr,"XLNetModel"),nWr.forEach(t),obo=r(DAe," (XLNet model)"),DAe.forEach(t),rbo=i($),pp=n($,"LI",{});var GAe=s(pp);xne=n(GAe,"STRONG",{});var sWr=s(xne);tbo=r(sWr,"yolos"),sWr.forEach(t),abo=r(GAe," \u2014 "),NI=n(GAe,"A",{href:!0});var lWr=s(NI);nbo=r(lWr,"YolosModel"),lWr.forEach(t),sbo=r(GAe," (YOLOS model)"),GAe.forEach(t),lbo=i($),_p=n($,"LI",{});var OAe=s(_p);$ne=n(OAe,"STRONG",{});var iWr=s($ne);ibo=r(iWr,"yoso"),iWr.forEach(t),dbo=r(OAe," \u2014 "),jI=n(OAe,"A",{href:!0});var dWr=s(jI);cbo=r(dWr,"YosoModel"),dWr.forEach(t),mbo=r(OAe," (YOSO model)"),OAe.forEach(t),$.forEach(t),fbo=i(Ut),bp=n(Ut,"P",{});var VAe=s(bp);gbo=r(VAe,"The model is set in evaluation mode by default using "),kne=n(VAe,"CODE",{});var cWr=s(kne);hbo=r(cWr,"model.eval()"),cWr.forEach(t),ubo=r(VAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=n(VAe,"CODE",{});var mWr=s(Sne);pbo=r(mWr,"model.train()"),mWr.forEach(t),VAe.forEach(t),_bo=i(Ut),T(Fp.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),aBe=i(m),bi=n(m,"H2",{class:!0});var sIe=s(bi);vp=n(sIe,"A",{id:!0,class:!0,href:!0});var fWr=s(vp);Rne=n(fWr,"SPAN",{});var gWr=s(Rne);T(H6.$$.fragment,gWr),gWr.forEach(t),fWr.forEach(t),bbo=i(sIe),Bne=n(sIe,"SPAN",{});var hWr=s(Bne);Fbo=r(hWr,"AutoModelForPreTraining"),hWr.forEach(t),sIe.forEach(t),nBe=i(m),yo=n(m,"DIV",{class:!0});var Ps=s(yo);T(U6.$$.fragment,Ps),vbo=i(Ps),Fi=n(Ps,"P",{});var nY=s(Fi);Tbo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DI=n(nY,"A",{href:!0});var uWr=s(DI);Mbo=r(uWr,"from_pretrained()"),uWr.forEach(t),Ebo=r(nY," class method or the "),GI=n(nY,"A",{href:!0});var pWr=s(GI);Cbo=r(pWr,"from_config()"),pWr.forEach(t),wbo=r(nY,` class
method.`),nY.forEach(t),Abo=i(Ps),J6=n(Ps,"P",{});var lIe=s(J6);ybo=r(lIe,"This class cannot be instantiated directly using "),Pne=n(lIe,"CODE",{});var _Wr=s(Pne);Lbo=r(_Wr,"__init__()"),_Wr.forEach(t),xbo=r(lIe," (throws an error)."),lIe.forEach(t),$bo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var CA=s(Zr);T(Y6.$$.fragment,CA),kbo=i(CA),Ine=n(CA,"P",{});var bWr=s(Ine);Sbo=r(bWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bWr.forEach(t),Rbo=i(CA),vi=n(CA,"P",{});var sY=s(vi);Bbo=r(sY,`Note:
Loading a model from its configuration file does `),qne=n(sY,"STRONG",{});var FWr=s(qne);Pbo=r(FWr,"not"),FWr.forEach(t),Ibo=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(sY,"A",{href:!0});var vWr=s(OI);qbo=r(vWr,"from_pretrained()"),vWr.forEach(t),Nbo=r(sY," to load the model weights."),sY.forEach(t),jbo=i(CA),T(Tp.$$.fragment,CA),CA.forEach(t),Dbo=i(Ps),We=n(Ps,"DIV",{class:!0});var Jt=s(We);T(K6.$$.fragment,Jt),Gbo=i(Jt),Nne=n(Jt,"P",{});var TWr=s(Nne);Obo=r(TWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TWr.forEach(t),Vbo=i(Jt),Ea=n(Jt,"P",{});var wA=s(Ea);Xbo=r(wA,"The model class to instantiate is selected based on the "),jne=n(wA,"CODE",{});var MWr=s(jne);zbo=r(MWr,"model_type"),MWr.forEach(t),Qbo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Dne=n(wA,"CODE",{});var EWr=s(Dne);Wbo=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),Hbo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(wA,"CODE",{});var CWr=s(Gne);Ubo=r(CWr,"pretrained_model_name_or_path"),CWr.forEach(t),Jbo=r(wA,":"),wA.forEach(t),Ybo=i(Jt),G=n(Jt,"UL",{});var V=s(G);Mp=n(V,"LI",{});var XAe=s(Mp);One=n(XAe,"STRONG",{});var wWr=s(One);Kbo=r(wWr,"albert"),wWr.forEach(t),Zbo=r(XAe," \u2014 "),VI=n(XAe,"A",{href:!0});var AWr=s(VI);e2o=r(AWr,"AlbertForPreTraining"),AWr.forEach(t),o2o=r(XAe," (ALBERT model)"),XAe.forEach(t),r2o=i(V),Ep=n(V,"LI",{});var zAe=s(Ep);Vne=n(zAe,"STRONG",{});var yWr=s(Vne);t2o=r(yWr,"bart"),yWr.forEach(t),a2o=r(zAe," \u2014 "),XI=n(zAe,"A",{href:!0});var LWr=s(XI);n2o=r(LWr,"BartForConditionalGeneration"),LWr.forEach(t),s2o=r(zAe," (BART model)"),zAe.forEach(t),l2o=i(V),Cp=n(V,"LI",{});var QAe=s(Cp);Xne=n(QAe,"STRONG",{});var xWr=s(Xne);i2o=r(xWr,"bert"),xWr.forEach(t),d2o=r(QAe," \u2014 "),zI=n(QAe,"A",{href:!0});var $Wr=s(zI);c2o=r($Wr,"BertForPreTraining"),$Wr.forEach(t),m2o=r(QAe," (BERT model)"),QAe.forEach(t),f2o=i(V),wp=n(V,"LI",{});var WAe=s(wp);zne=n(WAe,"STRONG",{});var kWr=s(zne);g2o=r(kWr,"big_bird"),kWr.forEach(t),h2o=r(WAe," \u2014 "),QI=n(WAe,"A",{href:!0});var SWr=s(QI);u2o=r(SWr,"BigBirdForPreTraining"),SWr.forEach(t),p2o=r(WAe," (BigBird model)"),WAe.forEach(t),_2o=i(V),Ap=n(V,"LI",{});var HAe=s(Ap);Qne=n(HAe,"STRONG",{});var RWr=s(Qne);b2o=r(RWr,"camembert"),RWr.forEach(t),F2o=r(HAe," \u2014 "),WI=n(HAe,"A",{href:!0});var BWr=s(WI);v2o=r(BWr,"CamembertForMaskedLM"),BWr.forEach(t),T2o=r(HAe," (CamemBERT model)"),HAe.forEach(t),M2o=i(V),yp=n(V,"LI",{});var UAe=s(yp);Wne=n(UAe,"STRONG",{});var PWr=s(Wne);E2o=r(PWr,"ctrl"),PWr.forEach(t),C2o=r(UAe," \u2014 "),HI=n(UAe,"A",{href:!0});var IWr=s(HI);w2o=r(IWr,"CTRLLMHeadModel"),IWr.forEach(t),A2o=r(UAe," (CTRL model)"),UAe.forEach(t),y2o=i(V),Lp=n(V,"LI",{});var JAe=s(Lp);Hne=n(JAe,"STRONG",{});var qWr=s(Hne);L2o=r(qWr,"data2vec-text"),qWr.forEach(t),x2o=r(JAe," \u2014 "),UI=n(JAe,"A",{href:!0});var NWr=s(UI);$2o=r(NWr,"Data2VecTextForMaskedLM"),NWr.forEach(t),k2o=r(JAe," (Data2VecText model)"),JAe.forEach(t),S2o=i(V),xp=n(V,"LI",{});var YAe=s(xp);Une=n(YAe,"STRONG",{});var jWr=s(Une);R2o=r(jWr,"deberta"),jWr.forEach(t),B2o=r(YAe," \u2014 "),JI=n(YAe,"A",{href:!0});var DWr=s(JI);P2o=r(DWr,"DebertaForMaskedLM"),DWr.forEach(t),I2o=r(YAe," (DeBERTa model)"),YAe.forEach(t),q2o=i(V),$p=n(V,"LI",{});var KAe=s($p);Jne=n(KAe,"STRONG",{});var GWr=s(Jne);N2o=r(GWr,"deberta-v2"),GWr.forEach(t),j2o=r(KAe," \u2014 "),YI=n(KAe,"A",{href:!0});var OWr=s(YI);D2o=r(OWr,"DebertaV2ForMaskedLM"),OWr.forEach(t),G2o=r(KAe," (DeBERTa-v2 model)"),KAe.forEach(t),O2o=i(V),kp=n(V,"LI",{});var ZAe=s(kp);Yne=n(ZAe,"STRONG",{});var VWr=s(Yne);V2o=r(VWr,"distilbert"),VWr.forEach(t),X2o=r(ZAe," \u2014 "),KI=n(ZAe,"A",{href:!0});var XWr=s(KI);z2o=r(XWr,"DistilBertForMaskedLM"),XWr.forEach(t),Q2o=r(ZAe," (DistilBERT model)"),ZAe.forEach(t),W2o=i(V),Sp=n(V,"LI",{});var e0e=s(Sp);Kne=n(e0e,"STRONG",{});var zWr=s(Kne);H2o=r(zWr,"electra"),zWr.forEach(t),U2o=r(e0e," \u2014 "),ZI=n(e0e,"A",{href:!0});var QWr=s(ZI);J2o=r(QWr,"ElectraForPreTraining"),QWr.forEach(t),Y2o=r(e0e," (ELECTRA model)"),e0e.forEach(t),K2o=i(V),Rp=n(V,"LI",{});var o0e=s(Rp);Zne=n(o0e,"STRONG",{});var WWr=s(Zne);Z2o=r(WWr,"flaubert"),WWr.forEach(t),eFo=r(o0e," \u2014 "),eq=n(o0e,"A",{href:!0});var HWr=s(eq);oFo=r(HWr,"FlaubertWithLMHeadModel"),HWr.forEach(t),rFo=r(o0e," (FlauBERT model)"),o0e.forEach(t),tFo=i(V),Bp=n(V,"LI",{});var r0e=s(Bp);ese=n(r0e,"STRONG",{});var UWr=s(ese);aFo=r(UWr,"fnet"),UWr.forEach(t),nFo=r(r0e," \u2014 "),oq=n(r0e,"A",{href:!0});var JWr=s(oq);sFo=r(JWr,"FNetForPreTraining"),JWr.forEach(t),lFo=r(r0e," (FNet model)"),r0e.forEach(t),iFo=i(V),Pp=n(V,"LI",{});var t0e=s(Pp);ose=n(t0e,"STRONG",{});var YWr=s(ose);dFo=r(YWr,"fsmt"),YWr.forEach(t),cFo=r(t0e," \u2014 "),rq=n(t0e,"A",{href:!0});var KWr=s(rq);mFo=r(KWr,"FSMTForConditionalGeneration"),KWr.forEach(t),fFo=r(t0e," (FairSeq Machine-Translation model)"),t0e.forEach(t),gFo=i(V),Ip=n(V,"LI",{});var a0e=s(Ip);rse=n(a0e,"STRONG",{});var ZWr=s(rse);hFo=r(ZWr,"funnel"),ZWr.forEach(t),uFo=r(a0e," \u2014 "),tq=n(a0e,"A",{href:!0});var eHr=s(tq);pFo=r(eHr,"FunnelForPreTraining"),eHr.forEach(t),_Fo=r(a0e," (Funnel Transformer model)"),a0e.forEach(t),bFo=i(V),qp=n(V,"LI",{});var n0e=s(qp);tse=n(n0e,"STRONG",{});var oHr=s(tse);FFo=r(oHr,"gpt2"),oHr.forEach(t),vFo=r(n0e," \u2014 "),aq=n(n0e,"A",{href:!0});var rHr=s(aq);TFo=r(rHr,"GPT2LMHeadModel"),rHr.forEach(t),MFo=r(n0e," (OpenAI GPT-2 model)"),n0e.forEach(t),EFo=i(V),Np=n(V,"LI",{});var s0e=s(Np);ase=n(s0e,"STRONG",{});var tHr=s(ase);CFo=r(tHr,"ibert"),tHr.forEach(t),wFo=r(s0e," \u2014 "),nq=n(s0e,"A",{href:!0});var aHr=s(nq);AFo=r(aHr,"IBertForMaskedLM"),aHr.forEach(t),yFo=r(s0e," (I-BERT model)"),s0e.forEach(t),LFo=i(V),jp=n(V,"LI",{});var l0e=s(jp);nse=n(l0e,"STRONG",{});var nHr=s(nse);xFo=r(nHr,"layoutlm"),nHr.forEach(t),$Fo=r(l0e," \u2014 "),sq=n(l0e,"A",{href:!0});var sHr=s(sq);kFo=r(sHr,"LayoutLMForMaskedLM"),sHr.forEach(t),SFo=r(l0e," (LayoutLM model)"),l0e.forEach(t),RFo=i(V),Dp=n(V,"LI",{});var i0e=s(Dp);sse=n(i0e,"STRONG",{});var lHr=s(sse);BFo=r(lHr,"longformer"),lHr.forEach(t),PFo=r(i0e," \u2014 "),lq=n(i0e,"A",{href:!0});var iHr=s(lq);IFo=r(iHr,"LongformerForMaskedLM"),iHr.forEach(t),qFo=r(i0e," (Longformer model)"),i0e.forEach(t),NFo=i(V),Gp=n(V,"LI",{});var d0e=s(Gp);lse=n(d0e,"STRONG",{});var dHr=s(lse);jFo=r(dHr,"lxmert"),dHr.forEach(t),DFo=r(d0e," \u2014 "),iq=n(d0e,"A",{href:!0});var cHr=s(iq);GFo=r(cHr,"LxmertForPreTraining"),cHr.forEach(t),OFo=r(d0e," (LXMERT model)"),d0e.forEach(t),VFo=i(V),Op=n(V,"LI",{});var c0e=s(Op);ise=n(c0e,"STRONG",{});var mHr=s(ise);XFo=r(mHr,"megatron-bert"),mHr.forEach(t),zFo=r(c0e," \u2014 "),dq=n(c0e,"A",{href:!0});var fHr=s(dq);QFo=r(fHr,"MegatronBertForPreTraining"),fHr.forEach(t),WFo=r(c0e," (MegatronBert model)"),c0e.forEach(t),HFo=i(V),Vp=n(V,"LI",{});var m0e=s(Vp);dse=n(m0e,"STRONG",{});var gHr=s(dse);UFo=r(gHr,"mobilebert"),gHr.forEach(t),JFo=r(m0e," \u2014 "),cq=n(m0e,"A",{href:!0});var hHr=s(cq);YFo=r(hHr,"MobileBertForPreTraining"),hHr.forEach(t),KFo=r(m0e," (MobileBERT model)"),m0e.forEach(t),ZFo=i(V),Xp=n(V,"LI",{});var f0e=s(Xp);cse=n(f0e,"STRONG",{});var uHr=s(cse);evo=r(uHr,"mpnet"),uHr.forEach(t),ovo=r(f0e," \u2014 "),mq=n(f0e,"A",{href:!0});var pHr=s(mq);rvo=r(pHr,"MPNetForMaskedLM"),pHr.forEach(t),tvo=r(f0e," (MPNet model)"),f0e.forEach(t),avo=i(V),zp=n(V,"LI",{});var g0e=s(zp);mse=n(g0e,"STRONG",{});var _Hr=s(mse);nvo=r(_Hr,"openai-gpt"),_Hr.forEach(t),svo=r(g0e," \u2014 "),fq=n(g0e,"A",{href:!0});var bHr=s(fq);lvo=r(bHr,"OpenAIGPTLMHeadModel"),bHr.forEach(t),ivo=r(g0e," (OpenAI GPT model)"),g0e.forEach(t),dvo=i(V),Qp=n(V,"LI",{});var h0e=s(Qp);fse=n(h0e,"STRONG",{});var FHr=s(fse);cvo=r(FHr,"retribert"),FHr.forEach(t),mvo=r(h0e," \u2014 "),gq=n(h0e,"A",{href:!0});var vHr=s(gq);fvo=r(vHr,"RetriBertModel"),vHr.forEach(t),gvo=r(h0e," (RetriBERT model)"),h0e.forEach(t),hvo=i(V),Wp=n(V,"LI",{});var u0e=s(Wp);gse=n(u0e,"STRONG",{});var THr=s(gse);uvo=r(THr,"roberta"),THr.forEach(t),pvo=r(u0e," \u2014 "),hq=n(u0e,"A",{href:!0});var MHr=s(hq);_vo=r(MHr,"RobertaForMaskedLM"),MHr.forEach(t),bvo=r(u0e," (RoBERTa model)"),u0e.forEach(t),Fvo=i(V),Hp=n(V,"LI",{});var p0e=s(Hp);hse=n(p0e,"STRONG",{});var EHr=s(hse);vvo=r(EHr,"squeezebert"),EHr.forEach(t),Tvo=r(p0e," \u2014 "),uq=n(p0e,"A",{href:!0});var CHr=s(uq);Mvo=r(CHr,"SqueezeBertForMaskedLM"),CHr.forEach(t),Evo=r(p0e," (SqueezeBERT model)"),p0e.forEach(t),Cvo=i(V),Up=n(V,"LI",{});var _0e=s(Up);use=n(_0e,"STRONG",{});var wHr=s(use);wvo=r(wHr,"t5"),wHr.forEach(t),Avo=r(_0e," \u2014 "),pq=n(_0e,"A",{href:!0});var AHr=s(pq);yvo=r(AHr,"T5ForConditionalGeneration"),AHr.forEach(t),Lvo=r(_0e," (T5 model)"),_0e.forEach(t),xvo=i(V),Jp=n(V,"LI",{});var b0e=s(Jp);pse=n(b0e,"STRONG",{});var yHr=s(pse);$vo=r(yHr,"tapas"),yHr.forEach(t),kvo=r(b0e," \u2014 "),_q=n(b0e,"A",{href:!0});var LHr=s(_q);Svo=r(LHr,"TapasForMaskedLM"),LHr.forEach(t),Rvo=r(b0e," (TAPAS model)"),b0e.forEach(t),Bvo=i(V),Yp=n(V,"LI",{});var F0e=s(Yp);_se=n(F0e,"STRONG",{});var xHr=s(_se);Pvo=r(xHr,"transfo-xl"),xHr.forEach(t),Ivo=r(F0e," \u2014 "),bq=n(F0e,"A",{href:!0});var $Hr=s(bq);qvo=r($Hr,"TransfoXLLMHeadModel"),$Hr.forEach(t),Nvo=r(F0e," (Transformer-XL model)"),F0e.forEach(t),jvo=i(V),Kp=n(V,"LI",{});var v0e=s(Kp);bse=n(v0e,"STRONG",{});var kHr=s(bse);Dvo=r(kHr,"unispeech"),kHr.forEach(t),Gvo=r(v0e," \u2014 "),Fq=n(v0e,"A",{href:!0});var SHr=s(Fq);Ovo=r(SHr,"UniSpeechForPreTraining"),SHr.forEach(t),Vvo=r(v0e," (UniSpeech model)"),v0e.forEach(t),Xvo=i(V),Zp=n(V,"LI",{});var T0e=s(Zp);Fse=n(T0e,"STRONG",{});var RHr=s(Fse);zvo=r(RHr,"unispeech-sat"),RHr.forEach(t),Qvo=r(T0e," \u2014 "),vq=n(T0e,"A",{href:!0});var BHr=s(vq);Wvo=r(BHr,"UniSpeechSatForPreTraining"),BHr.forEach(t),Hvo=r(T0e," (UniSpeechSat model)"),T0e.forEach(t),Uvo=i(V),e_=n(V,"LI",{});var M0e=s(e_);vse=n(M0e,"STRONG",{});var PHr=s(vse);Jvo=r(PHr,"visual_bert"),PHr.forEach(t),Yvo=r(M0e," \u2014 "),Tq=n(M0e,"A",{href:!0});var IHr=s(Tq);Kvo=r(IHr,"VisualBertForPreTraining"),IHr.forEach(t),Zvo=r(M0e," (VisualBert model)"),M0e.forEach(t),e1o=i(V),o_=n(V,"LI",{});var E0e=s(o_);Tse=n(E0e,"STRONG",{});var qHr=s(Tse);o1o=r(qHr,"vit_mae"),qHr.forEach(t),r1o=r(E0e," \u2014 "),Mq=n(E0e,"A",{href:!0});var NHr=s(Mq);t1o=r(NHr,"ViTMAEForPreTraining"),NHr.forEach(t),a1o=r(E0e," (ViTMAE model)"),E0e.forEach(t),n1o=i(V),r_=n(V,"LI",{});var C0e=s(r_);Mse=n(C0e,"STRONG",{});var jHr=s(Mse);s1o=r(jHr,"wav2vec2"),jHr.forEach(t),l1o=r(C0e," \u2014 "),Eq=n(C0e,"A",{href:!0});var DHr=s(Eq);i1o=r(DHr,"Wav2Vec2ForPreTraining"),DHr.forEach(t),d1o=r(C0e," (Wav2Vec2 model)"),C0e.forEach(t),c1o=i(V),t_=n(V,"LI",{});var w0e=s(t_);Ese=n(w0e,"STRONG",{});var GHr=s(Ese);m1o=r(GHr,"xlm"),GHr.forEach(t),f1o=r(w0e," \u2014 "),Cq=n(w0e,"A",{href:!0});var OHr=s(Cq);g1o=r(OHr,"XLMWithLMHeadModel"),OHr.forEach(t),h1o=r(w0e," (XLM model)"),w0e.forEach(t),u1o=i(V),a_=n(V,"LI",{});var A0e=s(a_);Cse=n(A0e,"STRONG",{});var VHr=s(Cse);p1o=r(VHr,"xlm-roberta"),VHr.forEach(t),_1o=r(A0e," \u2014 "),wq=n(A0e,"A",{href:!0});var XHr=s(wq);b1o=r(XHr,"XLMRobertaForMaskedLM"),XHr.forEach(t),F1o=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),v1o=i(V),n_=n(V,"LI",{});var y0e=s(n_);wse=n(y0e,"STRONG",{});var zHr=s(wse);T1o=r(zHr,"xlm-roberta-xl"),zHr.forEach(t),M1o=r(y0e," \u2014 "),Aq=n(y0e,"A",{href:!0});var QHr=s(Aq);E1o=r(QHr,"XLMRobertaXLForMaskedLM"),QHr.forEach(t),C1o=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),w1o=i(V),s_=n(V,"LI",{});var L0e=s(s_);Ase=n(L0e,"STRONG",{});var WHr=s(Ase);A1o=r(WHr,"xlnet"),WHr.forEach(t),y1o=r(L0e," \u2014 "),yq=n(L0e,"A",{href:!0});var HHr=s(yq);L1o=r(HHr,"XLNetLMHeadModel"),HHr.forEach(t),x1o=r(L0e," (XLNet model)"),L0e.forEach(t),V.forEach(t),$1o=i(Jt),l_=n(Jt,"P",{});var x0e=s(l_);k1o=r(x0e,"The model is set in evaluation mode by default using "),yse=n(x0e,"CODE",{});var UHr=s(yse);S1o=r(UHr,"model.eval()"),UHr.forEach(t),R1o=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=n(x0e,"CODE",{});var JHr=s(Lse);B1o=r(JHr,"model.train()"),JHr.forEach(t),x0e.forEach(t),P1o=i(Jt),T(i_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),sBe=i(m),Ti=n(m,"H2",{class:!0});var iIe=s(Ti);d_=n(iIe,"A",{id:!0,class:!0,href:!0});var YHr=s(d_);xse=n(YHr,"SPAN",{});var KHr=s(xse);T(Z6.$$.fragment,KHr),KHr.forEach(t),YHr.forEach(t),I1o=i(iIe),$se=n(iIe,"SPAN",{});var ZHr=s($se);q1o=r(ZHr,"AutoModelForCausalLM"),ZHr.forEach(t),iIe.forEach(t),lBe=i(m),Lo=n(m,"DIV",{class:!0});var Is=s(Lo);T(ey.$$.fragment,Is),N1o=i(Is),Mi=n(Is,"P",{});var lY=s(Mi);j1o=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lq=n(lY,"A",{href:!0});var eUr=s(Lq);D1o=r(eUr,"from_pretrained()"),eUr.forEach(t),G1o=r(lY," class method or the "),xq=n(lY,"A",{href:!0});var oUr=s(xq);O1o=r(oUr,"from_config()"),oUr.forEach(t),V1o=r(lY,` class
method.`),lY.forEach(t),X1o=i(Is),oy=n(Is,"P",{});var dIe=s(oy);z1o=r(dIe,"This class cannot be instantiated directly using "),kse=n(dIe,"CODE",{});var rUr=s(kse);Q1o=r(rUr,"__init__()"),rUr.forEach(t),W1o=r(dIe," (throws an error)."),dIe.forEach(t),H1o=i(Is),et=n(Is,"DIV",{class:!0});var AA=s(et);T(ry.$$.fragment,AA),U1o=i(AA),Sse=n(AA,"P",{});var tUr=s(Sse);J1o=r(tUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tUr.forEach(t),Y1o=i(AA),Ei=n(AA,"P",{});var iY=s(Ei);K1o=r(iY,`Note:
Loading a model from its configuration file does `),Rse=n(iY,"STRONG",{});var aUr=s(Rse);Z1o=r(aUr,"not"),aUr.forEach(t),eTo=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(iY,"A",{href:!0});var nUr=s($q);oTo=r(nUr,"from_pretrained()"),nUr.forEach(t),rTo=r(iY," to load the model weights."),iY.forEach(t),tTo=i(AA),T(c_.$$.fragment,AA),AA.forEach(t),aTo=i(Is),He=n(Is,"DIV",{class:!0});var Yt=s(He);T(ty.$$.fragment,Yt),nTo=i(Yt),Bse=n(Yt,"P",{});var sUr=s(Bse);sTo=r(sUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sUr.forEach(t),lTo=i(Yt),Ca=n(Yt,"P",{});var yA=s(Ca);iTo=r(yA,"The model class to instantiate is selected based on the "),Pse=n(yA,"CODE",{});var lUr=s(Pse);dTo=r(lUr,"model_type"),lUr.forEach(t),cTo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Ise=n(yA,"CODE",{});var iUr=s(Ise);mTo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),fTo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=n(yA,"CODE",{});var dUr=s(qse);gTo=r(dUr,"pretrained_model_name_or_path"),dUr.forEach(t),hTo=r(yA,":"),yA.forEach(t),uTo=i(Yt),z=n(Yt,"UL",{});var W=s(z);m_=n(W,"LI",{});var $0e=s(m_);Nse=n($0e,"STRONG",{});var cUr=s(Nse);pTo=r(cUr,"bart"),cUr.forEach(t),_To=r($0e," \u2014 "),kq=n($0e,"A",{href:!0});var mUr=s(kq);bTo=r(mUr,"BartForCausalLM"),mUr.forEach(t),FTo=r($0e," (BART model)"),$0e.forEach(t),vTo=i(W),f_=n(W,"LI",{});var k0e=s(f_);jse=n(k0e,"STRONG",{});var fUr=s(jse);TTo=r(fUr,"bert"),fUr.forEach(t),MTo=r(k0e," \u2014 "),Sq=n(k0e,"A",{href:!0});var gUr=s(Sq);ETo=r(gUr,"BertLMHeadModel"),gUr.forEach(t),CTo=r(k0e," (BERT model)"),k0e.forEach(t),wTo=i(W),g_=n(W,"LI",{});var S0e=s(g_);Dse=n(S0e,"STRONG",{});var hUr=s(Dse);ATo=r(hUr,"bert-generation"),hUr.forEach(t),yTo=r(S0e," \u2014 "),Rq=n(S0e,"A",{href:!0});var uUr=s(Rq);LTo=r(uUr,"BertGenerationDecoder"),uUr.forEach(t),xTo=r(S0e," (Bert Generation model)"),S0e.forEach(t),$To=i(W),h_=n(W,"LI",{});var R0e=s(h_);Gse=n(R0e,"STRONG",{});var pUr=s(Gse);kTo=r(pUr,"big_bird"),pUr.forEach(t),STo=r(R0e," \u2014 "),Bq=n(R0e,"A",{href:!0});var _Ur=s(Bq);RTo=r(_Ur,"BigBirdForCausalLM"),_Ur.forEach(t),BTo=r(R0e," (BigBird model)"),R0e.forEach(t),PTo=i(W),u_=n(W,"LI",{});var B0e=s(u_);Ose=n(B0e,"STRONG",{});var bUr=s(Ose);ITo=r(bUr,"bigbird_pegasus"),bUr.forEach(t),qTo=r(B0e," \u2014 "),Pq=n(B0e,"A",{href:!0});var FUr=s(Pq);NTo=r(FUr,"BigBirdPegasusForCausalLM"),FUr.forEach(t),jTo=r(B0e," (BigBirdPegasus model)"),B0e.forEach(t),DTo=i(W),p_=n(W,"LI",{});var P0e=s(p_);Vse=n(P0e,"STRONG",{});var vUr=s(Vse);GTo=r(vUr,"blenderbot"),vUr.forEach(t),OTo=r(P0e," \u2014 "),Iq=n(P0e,"A",{href:!0});var TUr=s(Iq);VTo=r(TUr,"BlenderbotForCausalLM"),TUr.forEach(t),XTo=r(P0e," (Blenderbot model)"),P0e.forEach(t),zTo=i(W),__=n(W,"LI",{});var I0e=s(__);Xse=n(I0e,"STRONG",{});var MUr=s(Xse);QTo=r(MUr,"blenderbot-small"),MUr.forEach(t),WTo=r(I0e," \u2014 "),qq=n(I0e,"A",{href:!0});var EUr=s(qq);HTo=r(EUr,"BlenderbotSmallForCausalLM"),EUr.forEach(t),UTo=r(I0e," (BlenderbotSmall model)"),I0e.forEach(t),JTo=i(W),b_=n(W,"LI",{});var q0e=s(b_);zse=n(q0e,"STRONG",{});var CUr=s(zse);YTo=r(CUr,"camembert"),CUr.forEach(t),KTo=r(q0e," \u2014 "),Nq=n(q0e,"A",{href:!0});var wUr=s(Nq);ZTo=r(wUr,"CamembertForCausalLM"),wUr.forEach(t),eMo=r(q0e," (CamemBERT model)"),q0e.forEach(t),oMo=i(W),F_=n(W,"LI",{});var N0e=s(F_);Qse=n(N0e,"STRONG",{});var AUr=s(Qse);rMo=r(AUr,"ctrl"),AUr.forEach(t),tMo=r(N0e," \u2014 "),jq=n(N0e,"A",{href:!0});var yUr=s(jq);aMo=r(yUr,"CTRLLMHeadModel"),yUr.forEach(t),nMo=r(N0e," (CTRL model)"),N0e.forEach(t),sMo=i(W),v_=n(W,"LI",{});var j0e=s(v_);Wse=n(j0e,"STRONG",{});var LUr=s(Wse);lMo=r(LUr,"data2vec-text"),LUr.forEach(t),iMo=r(j0e," \u2014 "),Dq=n(j0e,"A",{href:!0});var xUr=s(Dq);dMo=r(xUr,"Data2VecTextForCausalLM"),xUr.forEach(t),cMo=r(j0e," (Data2VecText model)"),j0e.forEach(t),mMo=i(W),T_=n(W,"LI",{});var D0e=s(T_);Hse=n(D0e,"STRONG",{});var $Ur=s(Hse);fMo=r($Ur,"electra"),$Ur.forEach(t),gMo=r(D0e," \u2014 "),Gq=n(D0e,"A",{href:!0});var kUr=s(Gq);hMo=r(kUr,"ElectraForCausalLM"),kUr.forEach(t),uMo=r(D0e," (ELECTRA model)"),D0e.forEach(t),pMo=i(W),M_=n(W,"LI",{});var G0e=s(M_);Use=n(G0e,"STRONG",{});var SUr=s(Use);_Mo=r(SUr,"gpt2"),SUr.forEach(t),bMo=r(G0e," \u2014 "),Oq=n(G0e,"A",{href:!0});var RUr=s(Oq);FMo=r(RUr,"GPT2LMHeadModel"),RUr.forEach(t),vMo=r(G0e," (OpenAI GPT-2 model)"),G0e.forEach(t),TMo=i(W),E_=n(W,"LI",{});var O0e=s(E_);Jse=n(O0e,"STRONG",{});var BUr=s(Jse);MMo=r(BUr,"gpt_neo"),BUr.forEach(t),EMo=r(O0e," \u2014 "),Vq=n(O0e,"A",{href:!0});var PUr=s(Vq);CMo=r(PUr,"GPTNeoForCausalLM"),PUr.forEach(t),wMo=r(O0e," (GPT Neo model)"),O0e.forEach(t),AMo=i(W),C_=n(W,"LI",{});var V0e=s(C_);Yse=n(V0e,"STRONG",{});var IUr=s(Yse);yMo=r(IUr,"gptj"),IUr.forEach(t),LMo=r(V0e," \u2014 "),Xq=n(V0e,"A",{href:!0});var qUr=s(Xq);xMo=r(qUr,"GPTJForCausalLM"),qUr.forEach(t),$Mo=r(V0e," (GPT-J model)"),V0e.forEach(t),kMo=i(W),w_=n(W,"LI",{});var X0e=s(w_);Kse=n(X0e,"STRONG",{});var NUr=s(Kse);SMo=r(NUr,"marian"),NUr.forEach(t),RMo=r(X0e," \u2014 "),zq=n(X0e,"A",{href:!0});var jUr=s(zq);BMo=r(jUr,"MarianForCausalLM"),jUr.forEach(t),PMo=r(X0e," (Marian model)"),X0e.forEach(t),IMo=i(W),A_=n(W,"LI",{});var z0e=s(A_);Zse=n(z0e,"STRONG",{});var DUr=s(Zse);qMo=r(DUr,"mbart"),DUr.forEach(t),NMo=r(z0e," \u2014 "),Qq=n(z0e,"A",{href:!0});var GUr=s(Qq);jMo=r(GUr,"MBartForCausalLM"),GUr.forEach(t),DMo=r(z0e," (mBART model)"),z0e.forEach(t),GMo=i(W),y_=n(W,"LI",{});var Q0e=s(y_);ele=n(Q0e,"STRONG",{});var OUr=s(ele);OMo=r(OUr,"megatron-bert"),OUr.forEach(t),VMo=r(Q0e," \u2014 "),Wq=n(Q0e,"A",{href:!0});var VUr=s(Wq);XMo=r(VUr,"MegatronBertForCausalLM"),VUr.forEach(t),zMo=r(Q0e," (MegatronBert model)"),Q0e.forEach(t),QMo=i(W),L_=n(W,"LI",{});var W0e=s(L_);ole=n(W0e,"STRONG",{});var XUr=s(ole);WMo=r(XUr,"openai-gpt"),XUr.forEach(t),HMo=r(W0e," \u2014 "),Hq=n(W0e,"A",{href:!0});var zUr=s(Hq);UMo=r(zUr,"OpenAIGPTLMHeadModel"),zUr.forEach(t),JMo=r(W0e," (OpenAI GPT model)"),W0e.forEach(t),YMo=i(W),x_=n(W,"LI",{});var H0e=s(x_);rle=n(H0e,"STRONG",{});var QUr=s(rle);KMo=r(QUr,"pegasus"),QUr.forEach(t),ZMo=r(H0e," \u2014 "),Uq=n(H0e,"A",{href:!0});var WUr=s(Uq);e4o=r(WUr,"PegasusForCausalLM"),WUr.forEach(t),o4o=r(H0e," (Pegasus model)"),H0e.forEach(t),r4o=i(W),$_=n(W,"LI",{});var U0e=s($_);tle=n(U0e,"STRONG",{});var HUr=s(tle);t4o=r(HUr,"plbart"),HUr.forEach(t),a4o=r(U0e," \u2014 "),Jq=n(U0e,"A",{href:!0});var UUr=s(Jq);n4o=r(UUr,"PLBartForCausalLM"),UUr.forEach(t),s4o=r(U0e," (PLBart model)"),U0e.forEach(t),l4o=i(W),k_=n(W,"LI",{});var J0e=s(k_);ale=n(J0e,"STRONG",{});var JUr=s(ale);i4o=r(JUr,"prophetnet"),JUr.forEach(t),d4o=r(J0e," \u2014 "),Yq=n(J0e,"A",{href:!0});var YUr=s(Yq);c4o=r(YUr,"ProphetNetForCausalLM"),YUr.forEach(t),m4o=r(J0e," (ProphetNet model)"),J0e.forEach(t),f4o=i(W),S_=n(W,"LI",{});var Y0e=s(S_);nle=n(Y0e,"STRONG",{});var KUr=s(nle);g4o=r(KUr,"qdqbert"),KUr.forEach(t),h4o=r(Y0e," \u2014 "),Kq=n(Y0e,"A",{href:!0});var ZUr=s(Kq);u4o=r(ZUr,"QDQBertLMHeadModel"),ZUr.forEach(t),p4o=r(Y0e," (QDQBert model)"),Y0e.forEach(t),_4o=i(W),R_=n(W,"LI",{});var K0e=s(R_);sle=n(K0e,"STRONG",{});var eJr=s(sle);b4o=r(eJr,"reformer"),eJr.forEach(t),F4o=r(K0e," \u2014 "),Zq=n(K0e,"A",{href:!0});var oJr=s(Zq);v4o=r(oJr,"ReformerModelWithLMHead"),oJr.forEach(t),T4o=r(K0e," (Reformer model)"),K0e.forEach(t),M4o=i(W),B_=n(W,"LI",{});var Z0e=s(B_);lle=n(Z0e,"STRONG",{});var rJr=s(lle);E4o=r(rJr,"rembert"),rJr.forEach(t),C4o=r(Z0e," \u2014 "),eN=n(Z0e,"A",{href:!0});var tJr=s(eN);w4o=r(tJr,"RemBertForCausalLM"),tJr.forEach(t),A4o=r(Z0e," (RemBERT model)"),Z0e.forEach(t),y4o=i(W),P_=n(W,"LI",{});var e6e=s(P_);ile=n(e6e,"STRONG",{});var aJr=s(ile);L4o=r(aJr,"roberta"),aJr.forEach(t),x4o=r(e6e," \u2014 "),oN=n(e6e,"A",{href:!0});var nJr=s(oN);$4o=r(nJr,"RobertaForCausalLM"),nJr.forEach(t),k4o=r(e6e," (RoBERTa model)"),e6e.forEach(t),S4o=i(W),I_=n(W,"LI",{});var o6e=s(I_);dle=n(o6e,"STRONG",{});var sJr=s(dle);R4o=r(sJr,"roformer"),sJr.forEach(t),B4o=r(o6e," \u2014 "),rN=n(o6e,"A",{href:!0});var lJr=s(rN);P4o=r(lJr,"RoFormerForCausalLM"),lJr.forEach(t),I4o=r(o6e," (RoFormer model)"),o6e.forEach(t),q4o=i(W),q_=n(W,"LI",{});var r6e=s(q_);cle=n(r6e,"STRONG",{});var iJr=s(cle);N4o=r(iJr,"speech_to_text_2"),iJr.forEach(t),j4o=r(r6e," \u2014 "),tN=n(r6e,"A",{href:!0});var dJr=s(tN);D4o=r(dJr,"Speech2Text2ForCausalLM"),dJr.forEach(t),G4o=r(r6e," (Speech2Text2 model)"),r6e.forEach(t),O4o=i(W),N_=n(W,"LI",{});var t6e=s(N_);mle=n(t6e,"STRONG",{});var cJr=s(mle);V4o=r(cJr,"transfo-xl"),cJr.forEach(t),X4o=r(t6e," \u2014 "),aN=n(t6e,"A",{href:!0});var mJr=s(aN);z4o=r(mJr,"TransfoXLLMHeadModel"),mJr.forEach(t),Q4o=r(t6e," (Transformer-XL model)"),t6e.forEach(t),W4o=i(W),j_=n(W,"LI",{});var a6e=s(j_);fle=n(a6e,"STRONG",{});var fJr=s(fle);H4o=r(fJr,"trocr"),fJr.forEach(t),U4o=r(a6e," \u2014 "),nN=n(a6e,"A",{href:!0});var gJr=s(nN);J4o=r(gJr,"TrOCRForCausalLM"),gJr.forEach(t),Y4o=r(a6e," (TrOCR model)"),a6e.forEach(t),K4o=i(W),D_=n(W,"LI",{});var n6e=s(D_);gle=n(n6e,"STRONG",{});var hJr=s(gle);Z4o=r(hJr,"xglm"),hJr.forEach(t),eEo=r(n6e," \u2014 "),sN=n(n6e,"A",{href:!0});var uJr=s(sN);oEo=r(uJr,"XGLMForCausalLM"),uJr.forEach(t),rEo=r(n6e," (XGLM model)"),n6e.forEach(t),tEo=i(W),G_=n(W,"LI",{});var s6e=s(G_);hle=n(s6e,"STRONG",{});var pJr=s(hle);aEo=r(pJr,"xlm"),pJr.forEach(t),nEo=r(s6e," \u2014 "),lN=n(s6e,"A",{href:!0});var _Jr=s(lN);sEo=r(_Jr,"XLMWithLMHeadModel"),_Jr.forEach(t),lEo=r(s6e," (XLM model)"),s6e.forEach(t),iEo=i(W),O_=n(W,"LI",{});var l6e=s(O_);ule=n(l6e,"STRONG",{});var bJr=s(ule);dEo=r(bJr,"xlm-prophetnet"),bJr.forEach(t),cEo=r(l6e," \u2014 "),iN=n(l6e,"A",{href:!0});var FJr=s(iN);mEo=r(FJr,"XLMProphetNetForCausalLM"),FJr.forEach(t),fEo=r(l6e," (XLMProphetNet model)"),l6e.forEach(t),gEo=i(W),V_=n(W,"LI",{});var i6e=s(V_);ple=n(i6e,"STRONG",{});var vJr=s(ple);hEo=r(vJr,"xlm-roberta"),vJr.forEach(t),uEo=r(i6e," \u2014 "),dN=n(i6e,"A",{href:!0});var TJr=s(dN);pEo=r(TJr,"XLMRobertaForCausalLM"),TJr.forEach(t),_Eo=r(i6e," (XLM-RoBERTa model)"),i6e.forEach(t),bEo=i(W),X_=n(W,"LI",{});var d6e=s(X_);_le=n(d6e,"STRONG",{});var MJr=s(_le);FEo=r(MJr,"xlm-roberta-xl"),MJr.forEach(t),vEo=r(d6e," \u2014 "),cN=n(d6e,"A",{href:!0});var EJr=s(cN);TEo=r(EJr,"XLMRobertaXLForCausalLM"),EJr.forEach(t),MEo=r(d6e," (XLM-RoBERTa-XL model)"),d6e.forEach(t),EEo=i(W),z_=n(W,"LI",{});var c6e=s(z_);ble=n(c6e,"STRONG",{});var CJr=s(ble);CEo=r(CJr,"xlnet"),CJr.forEach(t),wEo=r(c6e," \u2014 "),mN=n(c6e,"A",{href:!0});var wJr=s(mN);AEo=r(wJr,"XLNetLMHeadModel"),wJr.forEach(t),yEo=r(c6e," (XLNet model)"),c6e.forEach(t),W.forEach(t),LEo=i(Yt),Q_=n(Yt,"P",{});var m6e=s(Q_);xEo=r(m6e,"The model is set in evaluation mode by default using "),Fle=n(m6e,"CODE",{});var AJr=s(Fle);$Eo=r(AJr,"model.eval()"),AJr.forEach(t),kEo=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(m6e,"CODE",{});var yJr=s(vle);SEo=r(yJr,"model.train()"),yJr.forEach(t),m6e.forEach(t),REo=i(Yt),T(W_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),iBe=i(m),Ci=n(m,"H2",{class:!0});var cIe=s(Ci);H_=n(cIe,"A",{id:!0,class:!0,href:!0});var LJr=s(H_);Tle=n(LJr,"SPAN",{});var xJr=s(Tle);T(ay.$$.fragment,xJr),xJr.forEach(t),LJr.forEach(t),BEo=i(cIe),Mle=n(cIe,"SPAN",{});var $Jr=s(Mle);PEo=r($Jr,"AutoModelForMaskedLM"),$Jr.forEach(t),cIe.forEach(t),dBe=i(m),xo=n(m,"DIV",{class:!0});var qs=s(xo);T(ny.$$.fragment,qs),IEo=i(qs),wi=n(qs,"P",{});var dY=s(wi);qEo=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fN=n(dY,"A",{href:!0});var kJr=s(fN);NEo=r(kJr,"from_pretrained()"),kJr.forEach(t),jEo=r(dY," class method or the "),gN=n(dY,"A",{href:!0});var SJr=s(gN);DEo=r(SJr,"from_config()"),SJr.forEach(t),GEo=r(dY,` class
method.`),dY.forEach(t),OEo=i(qs),sy=n(qs,"P",{});var mIe=s(sy);VEo=r(mIe,"This class cannot be instantiated directly using "),Ele=n(mIe,"CODE",{});var RJr=s(Ele);XEo=r(RJr,"__init__()"),RJr.forEach(t),zEo=r(mIe," (throws an error)."),mIe.forEach(t),QEo=i(qs),ot=n(qs,"DIV",{class:!0});var LA=s(ot);T(ly.$$.fragment,LA),WEo=i(LA),Cle=n(LA,"P",{});var BJr=s(Cle);HEo=r(BJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BJr.forEach(t),UEo=i(LA),Ai=n(LA,"P",{});var cY=s(Ai);JEo=r(cY,`Note:
Loading a model from its configuration file does `),wle=n(cY,"STRONG",{});var PJr=s(wle);YEo=r(PJr,"not"),PJr.forEach(t),KEo=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=n(cY,"A",{href:!0});var IJr=s(hN);ZEo=r(IJr,"from_pretrained()"),IJr.forEach(t),e5o=r(cY," to load the model weights."),cY.forEach(t),o5o=i(LA),T(U_.$$.fragment,LA),LA.forEach(t),r5o=i(qs),Ue=n(qs,"DIV",{class:!0});var Kt=s(Ue);T(iy.$$.fragment,Kt),t5o=i(Kt),Ale=n(Kt,"P",{});var qJr=s(Ale);a5o=r(qJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qJr.forEach(t),n5o=i(Kt),wa=n(Kt,"P",{});var xA=s(wa);s5o=r(xA,"The model class to instantiate is selected based on the "),yle=n(xA,"CODE",{});var NJr=s(yle);l5o=r(NJr,"model_type"),NJr.forEach(t),i5o=r(xA,` property of the config object (either
passed as an argument or loaded from `),Lle=n(xA,"CODE",{});var jJr=s(Lle);d5o=r(jJr,"pretrained_model_name_or_path"),jJr.forEach(t),c5o=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=n(xA,"CODE",{});var DJr=s(xle);m5o=r(DJr,"pretrained_model_name_or_path"),DJr.forEach(t),f5o=r(xA,":"),xA.forEach(t),g5o=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);J_=n(H,"LI",{});var f6e=s(J_);$le=n(f6e,"STRONG",{});var GJr=s($le);h5o=r(GJr,"albert"),GJr.forEach(t),u5o=r(f6e," \u2014 "),uN=n(f6e,"A",{href:!0});var OJr=s(uN);p5o=r(OJr,"AlbertForMaskedLM"),OJr.forEach(t),_5o=r(f6e," (ALBERT model)"),f6e.forEach(t),b5o=i(H),Y_=n(H,"LI",{});var g6e=s(Y_);kle=n(g6e,"STRONG",{});var VJr=s(kle);F5o=r(VJr,"bart"),VJr.forEach(t),v5o=r(g6e," \u2014 "),pN=n(g6e,"A",{href:!0});var XJr=s(pN);T5o=r(XJr,"BartForConditionalGeneration"),XJr.forEach(t),M5o=r(g6e," (BART model)"),g6e.forEach(t),E5o=i(H),K_=n(H,"LI",{});var h6e=s(K_);Sle=n(h6e,"STRONG",{});var zJr=s(Sle);C5o=r(zJr,"bert"),zJr.forEach(t),w5o=r(h6e," \u2014 "),_N=n(h6e,"A",{href:!0});var QJr=s(_N);A5o=r(QJr,"BertForMaskedLM"),QJr.forEach(t),y5o=r(h6e," (BERT model)"),h6e.forEach(t),L5o=i(H),Z_=n(H,"LI",{});var u6e=s(Z_);Rle=n(u6e,"STRONG",{});var WJr=s(Rle);x5o=r(WJr,"big_bird"),WJr.forEach(t),$5o=r(u6e," \u2014 "),bN=n(u6e,"A",{href:!0});var HJr=s(bN);k5o=r(HJr,"BigBirdForMaskedLM"),HJr.forEach(t),S5o=r(u6e," (BigBird model)"),u6e.forEach(t),R5o=i(H),eb=n(H,"LI",{});var p6e=s(eb);Ble=n(p6e,"STRONG",{});var UJr=s(Ble);B5o=r(UJr,"camembert"),UJr.forEach(t),P5o=r(p6e," \u2014 "),FN=n(p6e,"A",{href:!0});var JJr=s(FN);I5o=r(JJr,"CamembertForMaskedLM"),JJr.forEach(t),q5o=r(p6e," (CamemBERT model)"),p6e.forEach(t),N5o=i(H),ob=n(H,"LI",{});var _6e=s(ob);Ple=n(_6e,"STRONG",{});var YJr=s(Ple);j5o=r(YJr,"convbert"),YJr.forEach(t),D5o=r(_6e," \u2014 "),vN=n(_6e,"A",{href:!0});var KJr=s(vN);G5o=r(KJr,"ConvBertForMaskedLM"),KJr.forEach(t),O5o=r(_6e," (ConvBERT model)"),_6e.forEach(t),V5o=i(H),rb=n(H,"LI",{});var b6e=s(rb);Ile=n(b6e,"STRONG",{});var ZJr=s(Ile);X5o=r(ZJr,"data2vec-text"),ZJr.forEach(t),z5o=r(b6e," \u2014 "),TN=n(b6e,"A",{href:!0});var eYr=s(TN);Q5o=r(eYr,"Data2VecTextForMaskedLM"),eYr.forEach(t),W5o=r(b6e," (Data2VecText model)"),b6e.forEach(t),H5o=i(H),tb=n(H,"LI",{});var F6e=s(tb);qle=n(F6e,"STRONG",{});var oYr=s(qle);U5o=r(oYr,"deberta"),oYr.forEach(t),J5o=r(F6e," \u2014 "),MN=n(F6e,"A",{href:!0});var rYr=s(MN);Y5o=r(rYr,"DebertaForMaskedLM"),rYr.forEach(t),K5o=r(F6e," (DeBERTa model)"),F6e.forEach(t),Z5o=i(H),ab=n(H,"LI",{});var v6e=s(ab);Nle=n(v6e,"STRONG",{});var tYr=s(Nle);eCo=r(tYr,"deberta-v2"),tYr.forEach(t),oCo=r(v6e," \u2014 "),EN=n(v6e,"A",{href:!0});var aYr=s(EN);rCo=r(aYr,"DebertaV2ForMaskedLM"),aYr.forEach(t),tCo=r(v6e," (DeBERTa-v2 model)"),v6e.forEach(t),aCo=i(H),nb=n(H,"LI",{});var T6e=s(nb);jle=n(T6e,"STRONG",{});var nYr=s(jle);nCo=r(nYr,"distilbert"),nYr.forEach(t),sCo=r(T6e," \u2014 "),CN=n(T6e,"A",{href:!0});var sYr=s(CN);lCo=r(sYr,"DistilBertForMaskedLM"),sYr.forEach(t),iCo=r(T6e," (DistilBERT model)"),T6e.forEach(t),dCo=i(H),sb=n(H,"LI",{});var M6e=s(sb);Dle=n(M6e,"STRONG",{});var lYr=s(Dle);cCo=r(lYr,"electra"),lYr.forEach(t),mCo=r(M6e," \u2014 "),wN=n(M6e,"A",{href:!0});var iYr=s(wN);fCo=r(iYr,"ElectraForMaskedLM"),iYr.forEach(t),gCo=r(M6e," (ELECTRA model)"),M6e.forEach(t),hCo=i(H),lb=n(H,"LI",{});var E6e=s(lb);Gle=n(E6e,"STRONG",{});var dYr=s(Gle);uCo=r(dYr,"flaubert"),dYr.forEach(t),pCo=r(E6e," \u2014 "),AN=n(E6e,"A",{href:!0});var cYr=s(AN);_Co=r(cYr,"FlaubertWithLMHeadModel"),cYr.forEach(t),bCo=r(E6e," (FlauBERT model)"),E6e.forEach(t),FCo=i(H),ib=n(H,"LI",{});var C6e=s(ib);Ole=n(C6e,"STRONG",{});var mYr=s(Ole);vCo=r(mYr,"fnet"),mYr.forEach(t),TCo=r(C6e," \u2014 "),yN=n(C6e,"A",{href:!0});var fYr=s(yN);MCo=r(fYr,"FNetForMaskedLM"),fYr.forEach(t),ECo=r(C6e," (FNet model)"),C6e.forEach(t),CCo=i(H),db=n(H,"LI",{});var w6e=s(db);Vle=n(w6e,"STRONG",{});var gYr=s(Vle);wCo=r(gYr,"funnel"),gYr.forEach(t),ACo=r(w6e," \u2014 "),LN=n(w6e,"A",{href:!0});var hYr=s(LN);yCo=r(hYr,"FunnelForMaskedLM"),hYr.forEach(t),LCo=r(w6e," (Funnel Transformer model)"),w6e.forEach(t),xCo=i(H),cb=n(H,"LI",{});var A6e=s(cb);Xle=n(A6e,"STRONG",{});var uYr=s(Xle);$Co=r(uYr,"ibert"),uYr.forEach(t),kCo=r(A6e," \u2014 "),xN=n(A6e,"A",{href:!0});var pYr=s(xN);SCo=r(pYr,"IBertForMaskedLM"),pYr.forEach(t),RCo=r(A6e," (I-BERT model)"),A6e.forEach(t),BCo=i(H),mb=n(H,"LI",{});var y6e=s(mb);zle=n(y6e,"STRONG",{});var _Yr=s(zle);PCo=r(_Yr,"layoutlm"),_Yr.forEach(t),ICo=r(y6e," \u2014 "),$N=n(y6e,"A",{href:!0});var bYr=s($N);qCo=r(bYr,"LayoutLMForMaskedLM"),bYr.forEach(t),NCo=r(y6e," (LayoutLM model)"),y6e.forEach(t),jCo=i(H),fb=n(H,"LI",{});var L6e=s(fb);Qle=n(L6e,"STRONG",{});var FYr=s(Qle);DCo=r(FYr,"longformer"),FYr.forEach(t),GCo=r(L6e," \u2014 "),kN=n(L6e,"A",{href:!0});var vYr=s(kN);OCo=r(vYr,"LongformerForMaskedLM"),vYr.forEach(t),VCo=r(L6e," (Longformer model)"),L6e.forEach(t),XCo=i(H),gb=n(H,"LI",{});var x6e=s(gb);Wle=n(x6e,"STRONG",{});var TYr=s(Wle);zCo=r(TYr,"mbart"),TYr.forEach(t),QCo=r(x6e," \u2014 "),SN=n(x6e,"A",{href:!0});var MYr=s(SN);WCo=r(MYr,"MBartForConditionalGeneration"),MYr.forEach(t),HCo=r(x6e," (mBART model)"),x6e.forEach(t),UCo=i(H),hb=n(H,"LI",{});var $6e=s(hb);Hle=n($6e,"STRONG",{});var EYr=s(Hle);JCo=r(EYr,"megatron-bert"),EYr.forEach(t),YCo=r($6e," \u2014 "),RN=n($6e,"A",{href:!0});var CYr=s(RN);KCo=r(CYr,"MegatronBertForMaskedLM"),CYr.forEach(t),ZCo=r($6e," (MegatronBert model)"),$6e.forEach(t),e3o=i(H),ub=n(H,"LI",{});var k6e=s(ub);Ule=n(k6e,"STRONG",{});var wYr=s(Ule);o3o=r(wYr,"mobilebert"),wYr.forEach(t),r3o=r(k6e," \u2014 "),BN=n(k6e,"A",{href:!0});var AYr=s(BN);t3o=r(AYr,"MobileBertForMaskedLM"),AYr.forEach(t),a3o=r(k6e," (MobileBERT model)"),k6e.forEach(t),n3o=i(H),pb=n(H,"LI",{});var S6e=s(pb);Jle=n(S6e,"STRONG",{});var yYr=s(Jle);s3o=r(yYr,"mpnet"),yYr.forEach(t),l3o=r(S6e," \u2014 "),PN=n(S6e,"A",{href:!0});var LYr=s(PN);i3o=r(LYr,"MPNetForMaskedLM"),LYr.forEach(t),d3o=r(S6e," (MPNet model)"),S6e.forEach(t),c3o=i(H),_b=n(H,"LI",{});var R6e=s(_b);Yle=n(R6e,"STRONG",{});var xYr=s(Yle);m3o=r(xYr,"nystromformer"),xYr.forEach(t),f3o=r(R6e," \u2014 "),IN=n(R6e,"A",{href:!0});var $Yr=s(IN);g3o=r($Yr,"NystromformerForMaskedLM"),$Yr.forEach(t),h3o=r(R6e," (Nystromformer model)"),R6e.forEach(t),u3o=i(H),bb=n(H,"LI",{});var B6e=s(bb);Kle=n(B6e,"STRONG",{});var kYr=s(Kle);p3o=r(kYr,"perceiver"),kYr.forEach(t),_3o=r(B6e," \u2014 "),qN=n(B6e,"A",{href:!0});var SYr=s(qN);b3o=r(SYr,"PerceiverForMaskedLM"),SYr.forEach(t),F3o=r(B6e," (Perceiver model)"),B6e.forEach(t),v3o=i(H),Fb=n(H,"LI",{});var P6e=s(Fb);Zle=n(P6e,"STRONG",{});var RYr=s(Zle);T3o=r(RYr,"qdqbert"),RYr.forEach(t),M3o=r(P6e," \u2014 "),NN=n(P6e,"A",{href:!0});var BYr=s(NN);E3o=r(BYr,"QDQBertForMaskedLM"),BYr.forEach(t),C3o=r(P6e," (QDQBert model)"),P6e.forEach(t),w3o=i(H),vb=n(H,"LI",{});var I6e=s(vb);eie=n(I6e,"STRONG",{});var PYr=s(eie);A3o=r(PYr,"reformer"),PYr.forEach(t),y3o=r(I6e," \u2014 "),jN=n(I6e,"A",{href:!0});var IYr=s(jN);L3o=r(IYr,"ReformerForMaskedLM"),IYr.forEach(t),x3o=r(I6e," (Reformer model)"),I6e.forEach(t),$3o=i(H),Tb=n(H,"LI",{});var q6e=s(Tb);oie=n(q6e,"STRONG",{});var qYr=s(oie);k3o=r(qYr,"rembert"),qYr.forEach(t),S3o=r(q6e," \u2014 "),DN=n(q6e,"A",{href:!0});var NYr=s(DN);R3o=r(NYr,"RemBertForMaskedLM"),NYr.forEach(t),B3o=r(q6e," (RemBERT model)"),q6e.forEach(t),P3o=i(H),Mb=n(H,"LI",{});var N6e=s(Mb);rie=n(N6e,"STRONG",{});var jYr=s(rie);I3o=r(jYr,"roberta"),jYr.forEach(t),q3o=r(N6e," \u2014 "),GN=n(N6e,"A",{href:!0});var DYr=s(GN);N3o=r(DYr,"RobertaForMaskedLM"),DYr.forEach(t),j3o=r(N6e," (RoBERTa model)"),N6e.forEach(t),D3o=i(H),Eb=n(H,"LI",{});var j6e=s(Eb);tie=n(j6e,"STRONG",{});var GYr=s(tie);G3o=r(GYr,"roformer"),GYr.forEach(t),O3o=r(j6e," \u2014 "),ON=n(j6e,"A",{href:!0});var OYr=s(ON);V3o=r(OYr,"RoFormerForMaskedLM"),OYr.forEach(t),X3o=r(j6e," (RoFormer model)"),j6e.forEach(t),z3o=i(H),Cb=n(H,"LI",{});var D6e=s(Cb);aie=n(D6e,"STRONG",{});var VYr=s(aie);Q3o=r(VYr,"squeezebert"),VYr.forEach(t),W3o=r(D6e," \u2014 "),VN=n(D6e,"A",{href:!0});var XYr=s(VN);H3o=r(XYr,"SqueezeBertForMaskedLM"),XYr.forEach(t),U3o=r(D6e," (SqueezeBERT model)"),D6e.forEach(t),J3o=i(H),wb=n(H,"LI",{});var G6e=s(wb);nie=n(G6e,"STRONG",{});var zYr=s(nie);Y3o=r(zYr,"tapas"),zYr.forEach(t),K3o=r(G6e," \u2014 "),XN=n(G6e,"A",{href:!0});var QYr=s(XN);Z3o=r(QYr,"TapasForMaskedLM"),QYr.forEach(t),ewo=r(G6e," (TAPAS model)"),G6e.forEach(t),owo=i(H),Ab=n(H,"LI",{});var O6e=s(Ab);sie=n(O6e,"STRONG",{});var WYr=s(sie);rwo=r(WYr,"wav2vec2"),WYr.forEach(t),two=r(O6e," \u2014 "),lie=n(O6e,"CODE",{});var HYr=s(lie);awo=r(HYr,"Wav2Vec2ForMaskedLM"),HYr.forEach(t),nwo=r(O6e," (Wav2Vec2 model)"),O6e.forEach(t),swo=i(H),yb=n(H,"LI",{});var V6e=s(yb);iie=n(V6e,"STRONG",{});var UYr=s(iie);lwo=r(UYr,"xlm"),UYr.forEach(t),iwo=r(V6e," \u2014 "),zN=n(V6e,"A",{href:!0});var JYr=s(zN);dwo=r(JYr,"XLMWithLMHeadModel"),JYr.forEach(t),cwo=r(V6e," (XLM model)"),V6e.forEach(t),mwo=i(H),Lb=n(H,"LI",{});var X6e=s(Lb);die=n(X6e,"STRONG",{});var YYr=s(die);fwo=r(YYr,"xlm-roberta"),YYr.forEach(t),gwo=r(X6e," \u2014 "),QN=n(X6e,"A",{href:!0});var KYr=s(QN);hwo=r(KYr,"XLMRobertaForMaskedLM"),KYr.forEach(t),uwo=r(X6e," (XLM-RoBERTa model)"),X6e.forEach(t),pwo=i(H),xb=n(H,"LI",{});var z6e=s(xb);cie=n(z6e,"STRONG",{});var ZYr=s(cie);_wo=r(ZYr,"xlm-roberta-xl"),ZYr.forEach(t),bwo=r(z6e," \u2014 "),WN=n(z6e,"A",{href:!0});var eKr=s(WN);Fwo=r(eKr,"XLMRobertaXLForMaskedLM"),eKr.forEach(t),vwo=r(z6e," (XLM-RoBERTa-XL model)"),z6e.forEach(t),Two=i(H),$b=n(H,"LI",{});var Q6e=s($b);mie=n(Q6e,"STRONG",{});var oKr=s(mie);Mwo=r(oKr,"yoso"),oKr.forEach(t),Ewo=r(Q6e," \u2014 "),HN=n(Q6e,"A",{href:!0});var rKr=s(HN);Cwo=r(rKr,"YosoForMaskedLM"),rKr.forEach(t),wwo=r(Q6e," (YOSO model)"),Q6e.forEach(t),H.forEach(t),Awo=i(Kt),kb=n(Kt,"P",{});var W6e=s(kb);ywo=r(W6e,"The model is set in evaluation mode by default using "),fie=n(W6e,"CODE",{});var tKr=s(fie);Lwo=r(tKr,"model.eval()"),tKr.forEach(t),xwo=r(W6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(W6e,"CODE",{});var aKr=s(gie);$wo=r(aKr,"model.train()"),aKr.forEach(t),W6e.forEach(t),kwo=i(Kt),T(Sb.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),cBe=i(m),yi=n(m,"H2",{class:!0});var fIe=s(yi);Rb=n(fIe,"A",{id:!0,class:!0,href:!0});var nKr=s(Rb);hie=n(nKr,"SPAN",{});var sKr=s(hie);T(dy.$$.fragment,sKr),sKr.forEach(t),nKr.forEach(t),Swo=i(fIe),uie=n(fIe,"SPAN",{});var lKr=s(uie);Rwo=r(lKr,"AutoModelForSeq2SeqLM"),lKr.forEach(t),fIe.forEach(t),mBe=i(m),$o=n(m,"DIV",{class:!0});var Ns=s($o);T(cy.$$.fragment,Ns),Bwo=i(Ns),Li=n(Ns,"P",{});var mY=s(Li);Pwo=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UN=n(mY,"A",{href:!0});var iKr=s(UN);Iwo=r(iKr,"from_pretrained()"),iKr.forEach(t),qwo=r(mY," class method or the "),JN=n(mY,"A",{href:!0});var dKr=s(JN);Nwo=r(dKr,"from_config()"),dKr.forEach(t),jwo=r(mY,` class
method.`),mY.forEach(t),Dwo=i(Ns),my=n(Ns,"P",{});var gIe=s(my);Gwo=r(gIe,"This class cannot be instantiated directly using "),pie=n(gIe,"CODE",{});var cKr=s(pie);Owo=r(cKr,"__init__()"),cKr.forEach(t),Vwo=r(gIe," (throws an error)."),gIe.forEach(t),Xwo=i(Ns),rt=n(Ns,"DIV",{class:!0});var $A=s(rt);T(fy.$$.fragment,$A),zwo=i($A),_ie=n($A,"P",{});var mKr=s(_ie);Qwo=r(mKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mKr.forEach(t),Wwo=i($A),xi=n($A,"P",{});var fY=s(xi);Hwo=r(fY,`Note:
Loading a model from its configuration file does `),bie=n(fY,"STRONG",{});var fKr=s(bie);Uwo=r(fKr,"not"),fKr.forEach(t),Jwo=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=n(fY,"A",{href:!0});var gKr=s(YN);Ywo=r(gKr,"from_pretrained()"),gKr.forEach(t),Kwo=r(fY," to load the model weights."),fY.forEach(t),Zwo=i($A),T(Bb.$$.fragment,$A),$A.forEach(t),eAo=i(Ns),Je=n(Ns,"DIV",{class:!0});var Zt=s(Je);T(gy.$$.fragment,Zt),oAo=i(Zt),Fie=n(Zt,"P",{});var hKr=s(Fie);rAo=r(hKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hKr.forEach(t),tAo=i(Zt),Aa=n(Zt,"P",{});var kA=s(Aa);aAo=r(kA,"The model class to instantiate is selected based on the "),vie=n(kA,"CODE",{});var uKr=s(vie);nAo=r(uKr,"model_type"),uKr.forEach(t),sAo=r(kA,` property of the config object (either
passed as an argument or loaded from `),Tie=n(kA,"CODE",{});var pKr=s(Tie);lAo=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),iAo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(kA,"CODE",{});var _Kr=s(Mie);dAo=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),cAo=r(kA,":"),kA.forEach(t),mAo=i(Zt),he=n(Zt,"UL",{});var pe=s(he);Pb=n(pe,"LI",{});var H6e=s(Pb);Eie=n(H6e,"STRONG",{});var bKr=s(Eie);fAo=r(bKr,"bart"),bKr.forEach(t),gAo=r(H6e," \u2014 "),KN=n(H6e,"A",{href:!0});var FKr=s(KN);hAo=r(FKr,"BartForConditionalGeneration"),FKr.forEach(t),uAo=r(H6e," (BART model)"),H6e.forEach(t),pAo=i(pe),Ib=n(pe,"LI",{});var U6e=s(Ib);Cie=n(U6e,"STRONG",{});var vKr=s(Cie);_Ao=r(vKr,"bigbird_pegasus"),vKr.forEach(t),bAo=r(U6e," \u2014 "),ZN=n(U6e,"A",{href:!0});var TKr=s(ZN);FAo=r(TKr,"BigBirdPegasusForConditionalGeneration"),TKr.forEach(t),vAo=r(U6e," (BigBirdPegasus model)"),U6e.forEach(t),TAo=i(pe),qb=n(pe,"LI",{});var J6e=s(qb);wie=n(J6e,"STRONG",{});var MKr=s(wie);MAo=r(MKr,"blenderbot"),MKr.forEach(t),EAo=r(J6e," \u2014 "),ej=n(J6e,"A",{href:!0});var EKr=s(ej);CAo=r(EKr,"BlenderbotForConditionalGeneration"),EKr.forEach(t),wAo=r(J6e," (Blenderbot model)"),J6e.forEach(t),AAo=i(pe),Nb=n(pe,"LI",{});var Y6e=s(Nb);Aie=n(Y6e,"STRONG",{});var CKr=s(Aie);yAo=r(CKr,"blenderbot-small"),CKr.forEach(t),LAo=r(Y6e," \u2014 "),oj=n(Y6e,"A",{href:!0});var wKr=s(oj);xAo=r(wKr,"BlenderbotSmallForConditionalGeneration"),wKr.forEach(t),$Ao=r(Y6e," (BlenderbotSmall model)"),Y6e.forEach(t),kAo=i(pe),jb=n(pe,"LI",{});var K6e=s(jb);yie=n(K6e,"STRONG",{});var AKr=s(yie);SAo=r(AKr,"encoder-decoder"),AKr.forEach(t),RAo=r(K6e," \u2014 "),rj=n(K6e,"A",{href:!0});var yKr=s(rj);BAo=r(yKr,"EncoderDecoderModel"),yKr.forEach(t),PAo=r(K6e," (Encoder decoder model)"),K6e.forEach(t),IAo=i(pe),Db=n(pe,"LI",{});var Z6e=s(Db);Lie=n(Z6e,"STRONG",{});var LKr=s(Lie);qAo=r(LKr,"fsmt"),LKr.forEach(t),NAo=r(Z6e," \u2014 "),tj=n(Z6e,"A",{href:!0});var xKr=s(tj);jAo=r(xKr,"FSMTForConditionalGeneration"),xKr.forEach(t),DAo=r(Z6e," (FairSeq Machine-Translation model)"),Z6e.forEach(t),GAo=i(pe),Gb=n(pe,"LI",{});var eye=s(Gb);xie=n(eye,"STRONG",{});var $Kr=s(xie);OAo=r($Kr,"led"),$Kr.forEach(t),VAo=r(eye," \u2014 "),aj=n(eye,"A",{href:!0});var kKr=s(aj);XAo=r(kKr,"LEDForConditionalGeneration"),kKr.forEach(t),zAo=r(eye," (LED model)"),eye.forEach(t),QAo=i(pe),Ob=n(pe,"LI",{});var oye=s(Ob);$ie=n(oye,"STRONG",{});var SKr=s($ie);WAo=r(SKr,"m2m_100"),SKr.forEach(t),HAo=r(oye," \u2014 "),nj=n(oye,"A",{href:!0});var RKr=s(nj);UAo=r(RKr,"M2M100ForConditionalGeneration"),RKr.forEach(t),JAo=r(oye," (M2M100 model)"),oye.forEach(t),YAo=i(pe),Vb=n(pe,"LI",{});var rye=s(Vb);kie=n(rye,"STRONG",{});var BKr=s(kie);KAo=r(BKr,"marian"),BKr.forEach(t),ZAo=r(rye," \u2014 "),sj=n(rye,"A",{href:!0});var PKr=s(sj);e0o=r(PKr,"MarianMTModel"),PKr.forEach(t),o0o=r(rye," (Marian model)"),rye.forEach(t),r0o=i(pe),Xb=n(pe,"LI",{});var tye=s(Xb);Sie=n(tye,"STRONG",{});var IKr=s(Sie);t0o=r(IKr,"mbart"),IKr.forEach(t),a0o=r(tye," \u2014 "),lj=n(tye,"A",{href:!0});var qKr=s(lj);n0o=r(qKr,"MBartForConditionalGeneration"),qKr.forEach(t),s0o=r(tye," (mBART model)"),tye.forEach(t),l0o=i(pe),zb=n(pe,"LI",{});var aye=s(zb);Rie=n(aye,"STRONG",{});var NKr=s(Rie);i0o=r(NKr,"mt5"),NKr.forEach(t),d0o=r(aye," \u2014 "),ij=n(aye,"A",{href:!0});var jKr=s(ij);c0o=r(jKr,"MT5ForConditionalGeneration"),jKr.forEach(t),m0o=r(aye," (mT5 model)"),aye.forEach(t),f0o=i(pe),Qb=n(pe,"LI",{});var nye=s(Qb);Bie=n(nye,"STRONG",{});var DKr=s(Bie);g0o=r(DKr,"pegasus"),DKr.forEach(t),h0o=r(nye," \u2014 "),dj=n(nye,"A",{href:!0});var GKr=s(dj);u0o=r(GKr,"PegasusForConditionalGeneration"),GKr.forEach(t),p0o=r(nye," (Pegasus model)"),nye.forEach(t),_0o=i(pe),Wb=n(pe,"LI",{});var sye=s(Wb);Pie=n(sye,"STRONG",{});var OKr=s(Pie);b0o=r(OKr,"plbart"),OKr.forEach(t),F0o=r(sye," \u2014 "),cj=n(sye,"A",{href:!0});var VKr=s(cj);v0o=r(VKr,"PLBartForConditionalGeneration"),VKr.forEach(t),T0o=r(sye," (PLBart model)"),sye.forEach(t),M0o=i(pe),Hb=n(pe,"LI",{});var lye=s(Hb);Iie=n(lye,"STRONG",{});var XKr=s(Iie);E0o=r(XKr,"prophetnet"),XKr.forEach(t),C0o=r(lye," \u2014 "),mj=n(lye,"A",{href:!0});var zKr=s(mj);w0o=r(zKr,"ProphetNetForConditionalGeneration"),zKr.forEach(t),A0o=r(lye," (ProphetNet model)"),lye.forEach(t),y0o=i(pe),Ub=n(pe,"LI",{});var iye=s(Ub);qie=n(iye,"STRONG",{});var QKr=s(qie);L0o=r(QKr,"t5"),QKr.forEach(t),x0o=r(iye," \u2014 "),fj=n(iye,"A",{href:!0});var WKr=s(fj);$0o=r(WKr,"T5ForConditionalGeneration"),WKr.forEach(t),k0o=r(iye," (T5 model)"),iye.forEach(t),S0o=i(pe),Jb=n(pe,"LI",{});var dye=s(Jb);Nie=n(dye,"STRONG",{});var HKr=s(Nie);R0o=r(HKr,"tapex"),HKr.forEach(t),B0o=r(dye," \u2014 "),gj=n(dye,"A",{href:!0});var UKr=s(gj);P0o=r(UKr,"BartForConditionalGeneration"),UKr.forEach(t),I0o=r(dye," (TAPEX model)"),dye.forEach(t),q0o=i(pe),Yb=n(pe,"LI",{});var cye=s(Yb);jie=n(cye,"STRONG",{});var JKr=s(jie);N0o=r(JKr,"xlm-prophetnet"),JKr.forEach(t),j0o=r(cye," \u2014 "),hj=n(cye,"A",{href:!0});var YKr=s(hj);D0o=r(YKr,"XLMProphetNetForConditionalGeneration"),YKr.forEach(t),G0o=r(cye," (XLMProphetNet model)"),cye.forEach(t),pe.forEach(t),O0o=i(Zt),Kb=n(Zt,"P",{});var mye=s(Kb);V0o=r(mye,"The model is set in evaluation mode by default using "),Die=n(mye,"CODE",{});var KKr=s(Die);X0o=r(KKr,"model.eval()"),KKr.forEach(t),z0o=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(mye,"CODE",{});var ZKr=s(Gie);Q0o=r(ZKr,"model.train()"),ZKr.forEach(t),mye.forEach(t),W0o=i(Zt),T(Zb.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),fBe=i(m),$i=n(m,"H2",{class:!0});var hIe=s($i);e2=n(hIe,"A",{id:!0,class:!0,href:!0});var eZr=s(e2);Oie=n(eZr,"SPAN",{});var oZr=s(Oie);T(hy.$$.fragment,oZr),oZr.forEach(t),eZr.forEach(t),H0o=i(hIe),Vie=n(hIe,"SPAN",{});var rZr=s(Vie);U0o=r(rZr,"AutoModelForSequenceClassification"),rZr.forEach(t),hIe.forEach(t),gBe=i(m),ko=n(m,"DIV",{class:!0});var js=s(ko);T(uy.$$.fragment,js),J0o=i(js),ki=n(js,"P",{});var gY=s(ki);Y0o=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uj=n(gY,"A",{href:!0});var tZr=s(uj);K0o=r(tZr,"from_pretrained()"),tZr.forEach(t),Z0o=r(gY," class method or the "),pj=n(gY,"A",{href:!0});var aZr=s(pj);e6o=r(aZr,"from_config()"),aZr.forEach(t),o6o=r(gY,` class
method.`),gY.forEach(t),r6o=i(js),py=n(js,"P",{});var uIe=s(py);t6o=r(uIe,"This class cannot be instantiated directly using "),Xie=n(uIe,"CODE",{});var nZr=s(Xie);a6o=r(nZr,"__init__()"),nZr.forEach(t),n6o=r(uIe," (throws an error)."),uIe.forEach(t),s6o=i(js),tt=n(js,"DIV",{class:!0});var SA=s(tt);T(_y.$$.fragment,SA),l6o=i(SA),zie=n(SA,"P",{});var sZr=s(zie);i6o=r(sZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sZr.forEach(t),d6o=i(SA),Si=n(SA,"P",{});var hY=s(Si);c6o=r(hY,`Note:
Loading a model from its configuration file does `),Qie=n(hY,"STRONG",{});var lZr=s(Qie);m6o=r(lZr,"not"),lZr.forEach(t),f6o=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(hY,"A",{href:!0});var iZr=s(_j);g6o=r(iZr,"from_pretrained()"),iZr.forEach(t),h6o=r(hY," to load the model weights."),hY.forEach(t),u6o=i(SA),T(o2.$$.fragment,SA),SA.forEach(t),p6o=i(js),Ye=n(js,"DIV",{class:!0});var ea=s(Ye);T(by.$$.fragment,ea),_6o=i(ea),Wie=n(ea,"P",{});var dZr=s(Wie);b6o=r(dZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dZr.forEach(t),F6o=i(ea),ya=n(ea,"P",{});var RA=s(ya);v6o=r(RA,"The model class to instantiate is selected based on the "),Hie=n(RA,"CODE",{});var cZr=s(Hie);T6o=r(cZr,"model_type"),cZr.forEach(t),M6o=r(RA,` property of the config object (either
passed as an argument or loaded from `),Uie=n(RA,"CODE",{});var mZr=s(Uie);E6o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),C6o=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(RA,"CODE",{});var fZr=s(Jie);w6o=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),A6o=r(RA,":"),RA.forEach(t),y6o=i(ea),q=n(ea,"UL",{});var N=s(q);r2=n(N,"LI",{});var fye=s(r2);Yie=n(fye,"STRONG",{});var gZr=s(Yie);L6o=r(gZr,"albert"),gZr.forEach(t),x6o=r(fye," \u2014 "),bj=n(fye,"A",{href:!0});var hZr=s(bj);$6o=r(hZr,"AlbertForSequenceClassification"),hZr.forEach(t),k6o=r(fye," (ALBERT model)"),fye.forEach(t),S6o=i(N),t2=n(N,"LI",{});var gye=s(t2);Kie=n(gye,"STRONG",{});var uZr=s(Kie);R6o=r(uZr,"bart"),uZr.forEach(t),B6o=r(gye," \u2014 "),Fj=n(gye,"A",{href:!0});var pZr=s(Fj);P6o=r(pZr,"BartForSequenceClassification"),pZr.forEach(t),I6o=r(gye," (BART model)"),gye.forEach(t),q6o=i(N),a2=n(N,"LI",{});var hye=s(a2);Zie=n(hye,"STRONG",{});var _Zr=s(Zie);N6o=r(_Zr,"bert"),_Zr.forEach(t),j6o=r(hye," \u2014 "),vj=n(hye,"A",{href:!0});var bZr=s(vj);D6o=r(bZr,"BertForSequenceClassification"),bZr.forEach(t),G6o=r(hye," (BERT model)"),hye.forEach(t),O6o=i(N),n2=n(N,"LI",{});var uye=s(n2);ede=n(uye,"STRONG",{});var FZr=s(ede);V6o=r(FZr,"big_bird"),FZr.forEach(t),X6o=r(uye," \u2014 "),Tj=n(uye,"A",{href:!0});var vZr=s(Tj);z6o=r(vZr,"BigBirdForSequenceClassification"),vZr.forEach(t),Q6o=r(uye," (BigBird model)"),uye.forEach(t),W6o=i(N),s2=n(N,"LI",{});var pye=s(s2);ode=n(pye,"STRONG",{});var TZr=s(ode);H6o=r(TZr,"bigbird_pegasus"),TZr.forEach(t),U6o=r(pye," \u2014 "),Mj=n(pye,"A",{href:!0});var MZr=s(Mj);J6o=r(MZr,"BigBirdPegasusForSequenceClassification"),MZr.forEach(t),Y6o=r(pye," (BigBirdPegasus model)"),pye.forEach(t),K6o=i(N),l2=n(N,"LI",{});var _ye=s(l2);rde=n(_ye,"STRONG",{});var EZr=s(rde);Z6o=r(EZr,"camembert"),EZr.forEach(t),eyo=r(_ye," \u2014 "),Ej=n(_ye,"A",{href:!0});var CZr=s(Ej);oyo=r(CZr,"CamembertForSequenceClassification"),CZr.forEach(t),ryo=r(_ye," (CamemBERT model)"),_ye.forEach(t),tyo=i(N),i2=n(N,"LI",{});var bye=s(i2);tde=n(bye,"STRONG",{});var wZr=s(tde);ayo=r(wZr,"canine"),wZr.forEach(t),nyo=r(bye," \u2014 "),Cj=n(bye,"A",{href:!0});var AZr=s(Cj);syo=r(AZr,"CanineForSequenceClassification"),AZr.forEach(t),lyo=r(bye," (Canine model)"),bye.forEach(t),iyo=i(N),d2=n(N,"LI",{});var Fye=s(d2);ade=n(Fye,"STRONG",{});var yZr=s(ade);dyo=r(yZr,"convbert"),yZr.forEach(t),cyo=r(Fye," \u2014 "),wj=n(Fye,"A",{href:!0});var LZr=s(wj);myo=r(LZr,"ConvBertForSequenceClassification"),LZr.forEach(t),fyo=r(Fye," (ConvBERT model)"),Fye.forEach(t),gyo=i(N),c2=n(N,"LI",{});var vye=s(c2);nde=n(vye,"STRONG",{});var xZr=s(nde);hyo=r(xZr,"ctrl"),xZr.forEach(t),uyo=r(vye," \u2014 "),Aj=n(vye,"A",{href:!0});var $Zr=s(Aj);pyo=r($Zr,"CTRLForSequenceClassification"),$Zr.forEach(t),_yo=r(vye," (CTRL model)"),vye.forEach(t),byo=i(N),m2=n(N,"LI",{});var Tye=s(m2);sde=n(Tye,"STRONG",{});var kZr=s(sde);Fyo=r(kZr,"data2vec-text"),kZr.forEach(t),vyo=r(Tye," \u2014 "),yj=n(Tye,"A",{href:!0});var SZr=s(yj);Tyo=r(SZr,"Data2VecTextForSequenceClassification"),SZr.forEach(t),Myo=r(Tye," (Data2VecText model)"),Tye.forEach(t),Eyo=i(N),f2=n(N,"LI",{});var Mye=s(f2);lde=n(Mye,"STRONG",{});var RZr=s(lde);Cyo=r(RZr,"deberta"),RZr.forEach(t),wyo=r(Mye," \u2014 "),Lj=n(Mye,"A",{href:!0});var BZr=s(Lj);Ayo=r(BZr,"DebertaForSequenceClassification"),BZr.forEach(t),yyo=r(Mye," (DeBERTa model)"),Mye.forEach(t),Lyo=i(N),g2=n(N,"LI",{});var Eye=s(g2);ide=n(Eye,"STRONG",{});var PZr=s(ide);xyo=r(PZr,"deberta-v2"),PZr.forEach(t),$yo=r(Eye," \u2014 "),xj=n(Eye,"A",{href:!0});var IZr=s(xj);kyo=r(IZr,"DebertaV2ForSequenceClassification"),IZr.forEach(t),Syo=r(Eye," (DeBERTa-v2 model)"),Eye.forEach(t),Ryo=i(N),h2=n(N,"LI",{});var Cye=s(h2);dde=n(Cye,"STRONG",{});var qZr=s(dde);Byo=r(qZr,"distilbert"),qZr.forEach(t),Pyo=r(Cye," \u2014 "),$j=n(Cye,"A",{href:!0});var NZr=s($j);Iyo=r(NZr,"DistilBertForSequenceClassification"),NZr.forEach(t),qyo=r(Cye," (DistilBERT model)"),Cye.forEach(t),Nyo=i(N),u2=n(N,"LI",{});var wye=s(u2);cde=n(wye,"STRONG",{});var jZr=s(cde);jyo=r(jZr,"electra"),jZr.forEach(t),Dyo=r(wye," \u2014 "),kj=n(wye,"A",{href:!0});var DZr=s(kj);Gyo=r(DZr,"ElectraForSequenceClassification"),DZr.forEach(t),Oyo=r(wye," (ELECTRA model)"),wye.forEach(t),Vyo=i(N),p2=n(N,"LI",{});var Aye=s(p2);mde=n(Aye,"STRONG",{});var GZr=s(mde);Xyo=r(GZr,"flaubert"),GZr.forEach(t),zyo=r(Aye," \u2014 "),Sj=n(Aye,"A",{href:!0});var OZr=s(Sj);Qyo=r(OZr,"FlaubertForSequenceClassification"),OZr.forEach(t),Wyo=r(Aye," (FlauBERT model)"),Aye.forEach(t),Hyo=i(N),_2=n(N,"LI",{});var yye=s(_2);fde=n(yye,"STRONG",{});var VZr=s(fde);Uyo=r(VZr,"fnet"),VZr.forEach(t),Jyo=r(yye," \u2014 "),Rj=n(yye,"A",{href:!0});var XZr=s(Rj);Yyo=r(XZr,"FNetForSequenceClassification"),XZr.forEach(t),Kyo=r(yye," (FNet model)"),yye.forEach(t),Zyo=i(N),b2=n(N,"LI",{});var Lye=s(b2);gde=n(Lye,"STRONG",{});var zZr=s(gde);eLo=r(zZr,"funnel"),zZr.forEach(t),oLo=r(Lye," \u2014 "),Bj=n(Lye,"A",{href:!0});var QZr=s(Bj);rLo=r(QZr,"FunnelForSequenceClassification"),QZr.forEach(t),tLo=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),aLo=i(N),F2=n(N,"LI",{});var xye=s(F2);hde=n(xye,"STRONG",{});var WZr=s(hde);nLo=r(WZr,"gpt2"),WZr.forEach(t),sLo=r(xye," \u2014 "),Pj=n(xye,"A",{href:!0});var HZr=s(Pj);lLo=r(HZr,"GPT2ForSequenceClassification"),HZr.forEach(t),iLo=r(xye," (OpenAI GPT-2 model)"),xye.forEach(t),dLo=i(N),v2=n(N,"LI",{});var $ye=s(v2);ude=n($ye,"STRONG",{});var UZr=s(ude);cLo=r(UZr,"gpt_neo"),UZr.forEach(t),mLo=r($ye," \u2014 "),Ij=n($ye,"A",{href:!0});var JZr=s(Ij);fLo=r(JZr,"GPTNeoForSequenceClassification"),JZr.forEach(t),gLo=r($ye," (GPT Neo model)"),$ye.forEach(t),hLo=i(N),T2=n(N,"LI",{});var kye=s(T2);pde=n(kye,"STRONG",{});var YZr=s(pde);uLo=r(YZr,"gptj"),YZr.forEach(t),pLo=r(kye," \u2014 "),qj=n(kye,"A",{href:!0});var KZr=s(qj);_Lo=r(KZr,"GPTJForSequenceClassification"),KZr.forEach(t),bLo=r(kye," (GPT-J model)"),kye.forEach(t),FLo=i(N),M2=n(N,"LI",{});var Sye=s(M2);_de=n(Sye,"STRONG",{});var ZZr=s(_de);vLo=r(ZZr,"ibert"),ZZr.forEach(t),TLo=r(Sye," \u2014 "),Nj=n(Sye,"A",{href:!0});var eet=s(Nj);MLo=r(eet,"IBertForSequenceClassification"),eet.forEach(t),ELo=r(Sye," (I-BERT model)"),Sye.forEach(t),CLo=i(N),E2=n(N,"LI",{});var Rye=s(E2);bde=n(Rye,"STRONG",{});var oet=s(bde);wLo=r(oet,"layoutlm"),oet.forEach(t),ALo=r(Rye," \u2014 "),jj=n(Rye,"A",{href:!0});var ret=s(jj);yLo=r(ret,"LayoutLMForSequenceClassification"),ret.forEach(t),LLo=r(Rye," (LayoutLM model)"),Rye.forEach(t),xLo=i(N),C2=n(N,"LI",{});var Bye=s(C2);Fde=n(Bye,"STRONG",{});var tet=s(Fde);$Lo=r(tet,"layoutlmv2"),tet.forEach(t),kLo=r(Bye," \u2014 "),Dj=n(Bye,"A",{href:!0});var aet=s(Dj);SLo=r(aet,"LayoutLMv2ForSequenceClassification"),aet.forEach(t),RLo=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),BLo=i(N),w2=n(N,"LI",{});var Pye=s(w2);vde=n(Pye,"STRONG",{});var net=s(vde);PLo=r(net,"led"),net.forEach(t),ILo=r(Pye," \u2014 "),Gj=n(Pye,"A",{href:!0});var set=s(Gj);qLo=r(set,"LEDForSequenceClassification"),set.forEach(t),NLo=r(Pye," (LED model)"),Pye.forEach(t),jLo=i(N),A2=n(N,"LI",{});var Iye=s(A2);Tde=n(Iye,"STRONG",{});var iet=s(Tde);DLo=r(iet,"longformer"),iet.forEach(t),GLo=r(Iye," \u2014 "),Oj=n(Iye,"A",{href:!0});var det=s(Oj);OLo=r(det,"LongformerForSequenceClassification"),det.forEach(t),VLo=r(Iye," (Longformer model)"),Iye.forEach(t),XLo=i(N),y2=n(N,"LI",{});var qye=s(y2);Mde=n(qye,"STRONG",{});var cet=s(Mde);zLo=r(cet,"mbart"),cet.forEach(t),QLo=r(qye," \u2014 "),Vj=n(qye,"A",{href:!0});var met=s(Vj);WLo=r(met,"MBartForSequenceClassification"),met.forEach(t),HLo=r(qye," (mBART model)"),qye.forEach(t),ULo=i(N),L2=n(N,"LI",{});var Nye=s(L2);Ede=n(Nye,"STRONG",{});var fet=s(Ede);JLo=r(fet,"megatron-bert"),fet.forEach(t),YLo=r(Nye," \u2014 "),Xj=n(Nye,"A",{href:!0});var get=s(Xj);KLo=r(get,"MegatronBertForSequenceClassification"),get.forEach(t),ZLo=r(Nye," (MegatronBert model)"),Nye.forEach(t),e8o=i(N),x2=n(N,"LI",{});var jye=s(x2);Cde=n(jye,"STRONG",{});var het=s(Cde);o8o=r(het,"mobilebert"),het.forEach(t),r8o=r(jye," \u2014 "),zj=n(jye,"A",{href:!0});var uet=s(zj);t8o=r(uet,"MobileBertForSequenceClassification"),uet.forEach(t),a8o=r(jye," (MobileBERT model)"),jye.forEach(t),n8o=i(N),$2=n(N,"LI",{});var Dye=s($2);wde=n(Dye,"STRONG",{});var pet=s(wde);s8o=r(pet,"mpnet"),pet.forEach(t),l8o=r(Dye," \u2014 "),Qj=n(Dye,"A",{href:!0});var _et=s(Qj);i8o=r(_et,"MPNetForSequenceClassification"),_et.forEach(t),d8o=r(Dye," (MPNet model)"),Dye.forEach(t),c8o=i(N),k2=n(N,"LI",{});var Gye=s(k2);Ade=n(Gye,"STRONG",{});var bet=s(Ade);m8o=r(bet,"nystromformer"),bet.forEach(t),f8o=r(Gye," \u2014 "),Wj=n(Gye,"A",{href:!0});var Fet=s(Wj);g8o=r(Fet,"NystromformerForSequenceClassification"),Fet.forEach(t),h8o=r(Gye," (Nystromformer model)"),Gye.forEach(t),u8o=i(N),S2=n(N,"LI",{});var Oye=s(S2);yde=n(Oye,"STRONG",{});var vet=s(yde);p8o=r(vet,"openai-gpt"),vet.forEach(t),_8o=r(Oye," \u2014 "),Hj=n(Oye,"A",{href:!0});var Tet=s(Hj);b8o=r(Tet,"OpenAIGPTForSequenceClassification"),Tet.forEach(t),F8o=r(Oye," (OpenAI GPT model)"),Oye.forEach(t),v8o=i(N),R2=n(N,"LI",{});var Vye=s(R2);Lde=n(Vye,"STRONG",{});var Met=s(Lde);T8o=r(Met,"perceiver"),Met.forEach(t),M8o=r(Vye," \u2014 "),Uj=n(Vye,"A",{href:!0});var Eet=s(Uj);E8o=r(Eet,"PerceiverForSequenceClassification"),Eet.forEach(t),C8o=r(Vye," (Perceiver model)"),Vye.forEach(t),w8o=i(N),B2=n(N,"LI",{});var Xye=s(B2);xde=n(Xye,"STRONG",{});var Cet=s(xde);A8o=r(Cet,"plbart"),Cet.forEach(t),y8o=r(Xye," \u2014 "),Jj=n(Xye,"A",{href:!0});var wet=s(Jj);L8o=r(wet,"PLBartForSequenceClassification"),wet.forEach(t),x8o=r(Xye," (PLBart model)"),Xye.forEach(t),$8o=i(N),P2=n(N,"LI",{});var zye=s(P2);$de=n(zye,"STRONG",{});var Aet=s($de);k8o=r(Aet,"qdqbert"),Aet.forEach(t),S8o=r(zye," \u2014 "),Yj=n(zye,"A",{href:!0});var yet=s(Yj);R8o=r(yet,"QDQBertForSequenceClassification"),yet.forEach(t),B8o=r(zye," (QDQBert model)"),zye.forEach(t),P8o=i(N),I2=n(N,"LI",{});var Qye=s(I2);kde=n(Qye,"STRONG",{});var Let=s(kde);I8o=r(Let,"reformer"),Let.forEach(t),q8o=r(Qye," \u2014 "),Kj=n(Qye,"A",{href:!0});var xet=s(Kj);N8o=r(xet,"ReformerForSequenceClassification"),xet.forEach(t),j8o=r(Qye," (Reformer model)"),Qye.forEach(t),D8o=i(N),q2=n(N,"LI",{});var Wye=s(q2);Sde=n(Wye,"STRONG",{});var $et=s(Sde);G8o=r($et,"rembert"),$et.forEach(t),O8o=r(Wye," \u2014 "),Zj=n(Wye,"A",{href:!0});var ket=s(Zj);V8o=r(ket,"RemBertForSequenceClassification"),ket.forEach(t),X8o=r(Wye," (RemBERT model)"),Wye.forEach(t),z8o=i(N),N2=n(N,"LI",{});var Hye=s(N2);Rde=n(Hye,"STRONG",{});var Set=s(Rde);Q8o=r(Set,"roberta"),Set.forEach(t),W8o=r(Hye," \u2014 "),eD=n(Hye,"A",{href:!0});var Ret=s(eD);H8o=r(Ret,"RobertaForSequenceClassification"),Ret.forEach(t),U8o=r(Hye," (RoBERTa model)"),Hye.forEach(t),J8o=i(N),j2=n(N,"LI",{});var Uye=s(j2);Bde=n(Uye,"STRONG",{});var Bet=s(Bde);Y8o=r(Bet,"roformer"),Bet.forEach(t),K8o=r(Uye," \u2014 "),oD=n(Uye,"A",{href:!0});var Pet=s(oD);Z8o=r(Pet,"RoFormerForSequenceClassification"),Pet.forEach(t),e7o=r(Uye," (RoFormer model)"),Uye.forEach(t),o7o=i(N),D2=n(N,"LI",{});var Jye=s(D2);Pde=n(Jye,"STRONG",{});var Iet=s(Pde);r7o=r(Iet,"squeezebert"),Iet.forEach(t),t7o=r(Jye," \u2014 "),rD=n(Jye,"A",{href:!0});var qet=s(rD);a7o=r(qet,"SqueezeBertForSequenceClassification"),qet.forEach(t),n7o=r(Jye," (SqueezeBERT model)"),Jye.forEach(t),s7o=i(N),G2=n(N,"LI",{});var Yye=s(G2);Ide=n(Yye,"STRONG",{});var Net=s(Ide);l7o=r(Net,"tapas"),Net.forEach(t),i7o=r(Yye," \u2014 "),tD=n(Yye,"A",{href:!0});var jet=s(tD);d7o=r(jet,"TapasForSequenceClassification"),jet.forEach(t),c7o=r(Yye," (TAPAS model)"),Yye.forEach(t),m7o=i(N),O2=n(N,"LI",{});var Kye=s(O2);qde=n(Kye,"STRONG",{});var Det=s(qde);f7o=r(Det,"tapex"),Det.forEach(t),g7o=r(Kye," \u2014 "),aD=n(Kye,"A",{href:!0});var Get=s(aD);h7o=r(Get,"BartForSequenceClassification"),Get.forEach(t),u7o=r(Kye," (TAPEX model)"),Kye.forEach(t),p7o=i(N),V2=n(N,"LI",{});var Zye=s(V2);Nde=n(Zye,"STRONG",{});var Oet=s(Nde);_7o=r(Oet,"transfo-xl"),Oet.forEach(t),b7o=r(Zye," \u2014 "),nD=n(Zye,"A",{href:!0});var Vet=s(nD);F7o=r(Vet,"TransfoXLForSequenceClassification"),Vet.forEach(t),v7o=r(Zye," (Transformer-XL model)"),Zye.forEach(t),T7o=i(N),X2=n(N,"LI",{});var eLe=s(X2);jde=n(eLe,"STRONG",{});var Xet=s(jde);M7o=r(Xet,"xlm"),Xet.forEach(t),E7o=r(eLe," \u2014 "),sD=n(eLe,"A",{href:!0});var zet=s(sD);C7o=r(zet,"XLMForSequenceClassification"),zet.forEach(t),w7o=r(eLe," (XLM model)"),eLe.forEach(t),A7o=i(N),z2=n(N,"LI",{});var oLe=s(z2);Dde=n(oLe,"STRONG",{});var Qet=s(Dde);y7o=r(Qet,"xlm-roberta"),Qet.forEach(t),L7o=r(oLe," \u2014 "),lD=n(oLe,"A",{href:!0});var Wet=s(lD);x7o=r(Wet,"XLMRobertaForSequenceClassification"),Wet.forEach(t),$7o=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),k7o=i(N),Q2=n(N,"LI",{});var rLe=s(Q2);Gde=n(rLe,"STRONG",{});var Het=s(Gde);S7o=r(Het,"xlm-roberta-xl"),Het.forEach(t),R7o=r(rLe," \u2014 "),iD=n(rLe,"A",{href:!0});var Uet=s(iD);B7o=r(Uet,"XLMRobertaXLForSequenceClassification"),Uet.forEach(t),P7o=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),I7o=i(N),W2=n(N,"LI",{});var tLe=s(W2);Ode=n(tLe,"STRONG",{});var Jet=s(Ode);q7o=r(Jet,"xlnet"),Jet.forEach(t),N7o=r(tLe," \u2014 "),dD=n(tLe,"A",{href:!0});var Yet=s(dD);j7o=r(Yet,"XLNetForSequenceClassification"),Yet.forEach(t),D7o=r(tLe," (XLNet model)"),tLe.forEach(t),G7o=i(N),H2=n(N,"LI",{});var aLe=s(H2);Vde=n(aLe,"STRONG",{});var Ket=s(Vde);O7o=r(Ket,"yoso"),Ket.forEach(t),V7o=r(aLe," \u2014 "),cD=n(aLe,"A",{href:!0});var Zet=s(cD);X7o=r(Zet,"YosoForSequenceClassification"),Zet.forEach(t),z7o=r(aLe," (YOSO model)"),aLe.forEach(t),N.forEach(t),Q7o=i(ea),U2=n(ea,"P",{});var nLe=s(U2);W7o=r(nLe,"The model is set in evaluation mode by default using "),Xde=n(nLe,"CODE",{});var eot=s(Xde);H7o=r(eot,"model.eval()"),eot.forEach(t),U7o=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(nLe,"CODE",{});var oot=s(zde);J7o=r(oot,"model.train()"),oot.forEach(t),nLe.forEach(t),Y7o=i(ea),T(J2.$$.fragment,ea),ea.forEach(t),js.forEach(t),hBe=i(m),Ri=n(m,"H2",{class:!0});var pIe=s(Ri);Y2=n(pIe,"A",{id:!0,class:!0,href:!0});var rot=s(Y2);Qde=n(rot,"SPAN",{});var tot=s(Qde);T(Fy.$$.fragment,tot),tot.forEach(t),rot.forEach(t),K7o=i(pIe),Wde=n(pIe,"SPAN",{});var aot=s(Wde);Z7o=r(aot,"AutoModelForMultipleChoice"),aot.forEach(t),pIe.forEach(t),uBe=i(m),So=n(m,"DIV",{class:!0});var Ds=s(So);T(vy.$$.fragment,Ds),exo=i(Ds),Bi=n(Ds,"P",{});var uY=s(Bi);oxo=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mD=n(uY,"A",{href:!0});var not=s(mD);rxo=r(not,"from_pretrained()"),not.forEach(t),txo=r(uY," class method or the "),fD=n(uY,"A",{href:!0});var sot=s(fD);axo=r(sot,"from_config()"),sot.forEach(t),nxo=r(uY,` class
method.`),uY.forEach(t),sxo=i(Ds),Ty=n(Ds,"P",{});var _Ie=s(Ty);lxo=r(_Ie,"This class cannot be instantiated directly using "),Hde=n(_Ie,"CODE",{});var lot=s(Hde);ixo=r(lot,"__init__()"),lot.forEach(t),dxo=r(_Ie," (throws an error)."),_Ie.forEach(t),cxo=i(Ds),at=n(Ds,"DIV",{class:!0});var BA=s(at);T(My.$$.fragment,BA),mxo=i(BA),Ude=n(BA,"P",{});var iot=s(Ude);fxo=r(iot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iot.forEach(t),gxo=i(BA),Pi=n(BA,"P",{});var pY=s(Pi);hxo=r(pY,`Note:
Loading a model from its configuration file does `),Jde=n(pY,"STRONG",{});var dot=s(Jde);uxo=r(dot,"not"),dot.forEach(t),pxo=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n(pY,"A",{href:!0});var cot=s(gD);_xo=r(cot,"from_pretrained()"),cot.forEach(t),bxo=r(pY," to load the model weights."),pY.forEach(t),Fxo=i(BA),T(K2.$$.fragment,BA),BA.forEach(t),vxo=i(Ds),Ke=n(Ds,"DIV",{class:!0});var oa=s(Ke);T(Ey.$$.fragment,oa),Txo=i(oa),Yde=n(oa,"P",{});var mot=s(Yde);Mxo=r(mot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mot.forEach(t),Exo=i(oa),La=n(oa,"P",{});var PA=s(La);Cxo=r(PA,"The model class to instantiate is selected based on the "),Kde=n(PA,"CODE",{});var fot=s(Kde);wxo=r(fot,"model_type"),fot.forEach(t),Axo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Zde=n(PA,"CODE",{});var got=s(Zde);yxo=r(got,"pretrained_model_name_or_path"),got.forEach(t),Lxo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(PA,"CODE",{});var hot=s(ece);xxo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),$xo=r(PA,":"),PA.forEach(t),kxo=i(oa),Y=n(oa,"UL",{});var K=s(Y);Z2=n(K,"LI",{});var sLe=s(Z2);oce=n(sLe,"STRONG",{});var uot=s(oce);Sxo=r(uot,"albert"),uot.forEach(t),Rxo=r(sLe," \u2014 "),hD=n(sLe,"A",{href:!0});var pot=s(hD);Bxo=r(pot,"AlbertForMultipleChoice"),pot.forEach(t),Pxo=r(sLe," (ALBERT model)"),sLe.forEach(t),Ixo=i(K),eF=n(K,"LI",{});var lLe=s(eF);rce=n(lLe,"STRONG",{});var _ot=s(rce);qxo=r(_ot,"bert"),_ot.forEach(t),Nxo=r(lLe," \u2014 "),uD=n(lLe,"A",{href:!0});var bot=s(uD);jxo=r(bot,"BertForMultipleChoice"),bot.forEach(t),Dxo=r(lLe," (BERT model)"),lLe.forEach(t),Gxo=i(K),oF=n(K,"LI",{});var iLe=s(oF);tce=n(iLe,"STRONG",{});var Fot=s(tce);Oxo=r(Fot,"big_bird"),Fot.forEach(t),Vxo=r(iLe," \u2014 "),pD=n(iLe,"A",{href:!0});var vot=s(pD);Xxo=r(vot,"BigBirdForMultipleChoice"),vot.forEach(t),zxo=r(iLe," (BigBird model)"),iLe.forEach(t),Qxo=i(K),rF=n(K,"LI",{});var dLe=s(rF);ace=n(dLe,"STRONG",{});var Tot=s(ace);Wxo=r(Tot,"camembert"),Tot.forEach(t),Hxo=r(dLe," \u2014 "),_D=n(dLe,"A",{href:!0});var Mot=s(_D);Uxo=r(Mot,"CamembertForMultipleChoice"),Mot.forEach(t),Jxo=r(dLe," (CamemBERT model)"),dLe.forEach(t),Yxo=i(K),tF=n(K,"LI",{});var cLe=s(tF);nce=n(cLe,"STRONG",{});var Eot=s(nce);Kxo=r(Eot,"canine"),Eot.forEach(t),Zxo=r(cLe," \u2014 "),bD=n(cLe,"A",{href:!0});var Cot=s(bD);e9o=r(Cot,"CanineForMultipleChoice"),Cot.forEach(t),o9o=r(cLe," (Canine model)"),cLe.forEach(t),r9o=i(K),aF=n(K,"LI",{});var mLe=s(aF);sce=n(mLe,"STRONG",{});var wot=s(sce);t9o=r(wot,"convbert"),wot.forEach(t),a9o=r(mLe," \u2014 "),FD=n(mLe,"A",{href:!0});var Aot=s(FD);n9o=r(Aot,"ConvBertForMultipleChoice"),Aot.forEach(t),s9o=r(mLe," (ConvBERT model)"),mLe.forEach(t),l9o=i(K),nF=n(K,"LI",{});var fLe=s(nF);lce=n(fLe,"STRONG",{});var yot=s(lce);i9o=r(yot,"data2vec-text"),yot.forEach(t),d9o=r(fLe," \u2014 "),vD=n(fLe,"A",{href:!0});var Lot=s(vD);c9o=r(Lot,"Data2VecTextForMultipleChoice"),Lot.forEach(t),m9o=r(fLe," (Data2VecText model)"),fLe.forEach(t),f9o=i(K),sF=n(K,"LI",{});var gLe=s(sF);ice=n(gLe,"STRONG",{});var xot=s(ice);g9o=r(xot,"distilbert"),xot.forEach(t),h9o=r(gLe," \u2014 "),TD=n(gLe,"A",{href:!0});var $ot=s(TD);u9o=r($ot,"DistilBertForMultipleChoice"),$ot.forEach(t),p9o=r(gLe," (DistilBERT model)"),gLe.forEach(t),_9o=i(K),lF=n(K,"LI",{});var hLe=s(lF);dce=n(hLe,"STRONG",{});var kot=s(dce);b9o=r(kot,"electra"),kot.forEach(t),F9o=r(hLe," \u2014 "),MD=n(hLe,"A",{href:!0});var Sot=s(MD);v9o=r(Sot,"ElectraForMultipleChoice"),Sot.forEach(t),T9o=r(hLe," (ELECTRA model)"),hLe.forEach(t),M9o=i(K),iF=n(K,"LI",{});var uLe=s(iF);cce=n(uLe,"STRONG",{});var Rot=s(cce);E9o=r(Rot,"flaubert"),Rot.forEach(t),C9o=r(uLe," \u2014 "),ED=n(uLe,"A",{href:!0});var Bot=s(ED);w9o=r(Bot,"FlaubertForMultipleChoice"),Bot.forEach(t),A9o=r(uLe," (FlauBERT model)"),uLe.forEach(t),y9o=i(K),dF=n(K,"LI",{});var pLe=s(dF);mce=n(pLe,"STRONG",{});var Pot=s(mce);L9o=r(Pot,"fnet"),Pot.forEach(t),x9o=r(pLe," \u2014 "),CD=n(pLe,"A",{href:!0});var Iot=s(CD);$9o=r(Iot,"FNetForMultipleChoice"),Iot.forEach(t),k9o=r(pLe," (FNet model)"),pLe.forEach(t),S9o=i(K),cF=n(K,"LI",{});var _Le=s(cF);fce=n(_Le,"STRONG",{});var qot=s(fce);R9o=r(qot,"funnel"),qot.forEach(t),B9o=r(_Le," \u2014 "),wD=n(_Le,"A",{href:!0});var Not=s(wD);P9o=r(Not,"FunnelForMultipleChoice"),Not.forEach(t),I9o=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),q9o=i(K),mF=n(K,"LI",{});var bLe=s(mF);gce=n(bLe,"STRONG",{});var jot=s(gce);N9o=r(jot,"ibert"),jot.forEach(t),j9o=r(bLe," \u2014 "),AD=n(bLe,"A",{href:!0});var Dot=s(AD);D9o=r(Dot,"IBertForMultipleChoice"),Dot.forEach(t),G9o=r(bLe," (I-BERT model)"),bLe.forEach(t),O9o=i(K),fF=n(K,"LI",{});var FLe=s(fF);hce=n(FLe,"STRONG",{});var Got=s(hce);V9o=r(Got,"longformer"),Got.forEach(t),X9o=r(FLe," \u2014 "),yD=n(FLe,"A",{href:!0});var Oot=s(yD);z9o=r(Oot,"LongformerForMultipleChoice"),Oot.forEach(t),Q9o=r(FLe," (Longformer model)"),FLe.forEach(t),W9o=i(K),gF=n(K,"LI",{});var vLe=s(gF);uce=n(vLe,"STRONG",{});var Vot=s(uce);H9o=r(Vot,"megatron-bert"),Vot.forEach(t),U9o=r(vLe," \u2014 "),LD=n(vLe,"A",{href:!0});var Xot=s(LD);J9o=r(Xot,"MegatronBertForMultipleChoice"),Xot.forEach(t),Y9o=r(vLe," (MegatronBert model)"),vLe.forEach(t),K9o=i(K),hF=n(K,"LI",{});var TLe=s(hF);pce=n(TLe,"STRONG",{});var zot=s(pce);Z9o=r(zot,"mobilebert"),zot.forEach(t),e$o=r(TLe," \u2014 "),xD=n(TLe,"A",{href:!0});var Qot=s(xD);o$o=r(Qot,"MobileBertForMultipleChoice"),Qot.forEach(t),r$o=r(TLe," (MobileBERT model)"),TLe.forEach(t),t$o=i(K),uF=n(K,"LI",{});var MLe=s(uF);_ce=n(MLe,"STRONG",{});var Wot=s(_ce);a$o=r(Wot,"mpnet"),Wot.forEach(t),n$o=r(MLe," \u2014 "),$D=n(MLe,"A",{href:!0});var Hot=s($D);s$o=r(Hot,"MPNetForMultipleChoice"),Hot.forEach(t),l$o=r(MLe," (MPNet model)"),MLe.forEach(t),i$o=i(K),pF=n(K,"LI",{});var ELe=s(pF);bce=n(ELe,"STRONG",{});var Uot=s(bce);d$o=r(Uot,"nystromformer"),Uot.forEach(t),c$o=r(ELe," \u2014 "),kD=n(ELe,"A",{href:!0});var Jot=s(kD);m$o=r(Jot,"NystromformerForMultipleChoice"),Jot.forEach(t),f$o=r(ELe," (Nystromformer model)"),ELe.forEach(t),g$o=i(K),_F=n(K,"LI",{});var CLe=s(_F);Fce=n(CLe,"STRONG",{});var Yot=s(Fce);h$o=r(Yot,"qdqbert"),Yot.forEach(t),u$o=r(CLe," \u2014 "),SD=n(CLe,"A",{href:!0});var Kot=s(SD);p$o=r(Kot,"QDQBertForMultipleChoice"),Kot.forEach(t),_$o=r(CLe," (QDQBert model)"),CLe.forEach(t),b$o=i(K),bF=n(K,"LI",{});var wLe=s(bF);vce=n(wLe,"STRONG",{});var Zot=s(vce);F$o=r(Zot,"rembert"),Zot.forEach(t),v$o=r(wLe," \u2014 "),RD=n(wLe,"A",{href:!0});var ert=s(RD);T$o=r(ert,"RemBertForMultipleChoice"),ert.forEach(t),M$o=r(wLe," (RemBERT model)"),wLe.forEach(t),E$o=i(K),FF=n(K,"LI",{});var ALe=s(FF);Tce=n(ALe,"STRONG",{});var ort=s(Tce);C$o=r(ort,"roberta"),ort.forEach(t),w$o=r(ALe," \u2014 "),BD=n(ALe,"A",{href:!0});var rrt=s(BD);A$o=r(rrt,"RobertaForMultipleChoice"),rrt.forEach(t),y$o=r(ALe," (RoBERTa model)"),ALe.forEach(t),L$o=i(K),vF=n(K,"LI",{});var yLe=s(vF);Mce=n(yLe,"STRONG",{});var trt=s(Mce);x$o=r(trt,"roformer"),trt.forEach(t),$$o=r(yLe," \u2014 "),PD=n(yLe,"A",{href:!0});var art=s(PD);k$o=r(art,"RoFormerForMultipleChoice"),art.forEach(t),S$o=r(yLe," (RoFormer model)"),yLe.forEach(t),R$o=i(K),TF=n(K,"LI",{});var LLe=s(TF);Ece=n(LLe,"STRONG",{});var nrt=s(Ece);B$o=r(nrt,"squeezebert"),nrt.forEach(t),P$o=r(LLe," \u2014 "),ID=n(LLe,"A",{href:!0});var srt=s(ID);I$o=r(srt,"SqueezeBertForMultipleChoice"),srt.forEach(t),q$o=r(LLe," (SqueezeBERT model)"),LLe.forEach(t),N$o=i(K),MF=n(K,"LI",{});var xLe=s(MF);Cce=n(xLe,"STRONG",{});var lrt=s(Cce);j$o=r(lrt,"xlm"),lrt.forEach(t),D$o=r(xLe," \u2014 "),qD=n(xLe,"A",{href:!0});var irt=s(qD);G$o=r(irt,"XLMForMultipleChoice"),irt.forEach(t),O$o=r(xLe," (XLM model)"),xLe.forEach(t),V$o=i(K),EF=n(K,"LI",{});var $Le=s(EF);wce=n($Le,"STRONG",{});var drt=s(wce);X$o=r(drt,"xlm-roberta"),drt.forEach(t),z$o=r($Le," \u2014 "),ND=n($Le,"A",{href:!0});var crt=s(ND);Q$o=r(crt,"XLMRobertaForMultipleChoice"),crt.forEach(t),W$o=r($Le," (XLM-RoBERTa model)"),$Le.forEach(t),H$o=i(K),CF=n(K,"LI",{});var kLe=s(CF);Ace=n(kLe,"STRONG",{});var mrt=s(Ace);U$o=r(mrt,"xlm-roberta-xl"),mrt.forEach(t),J$o=r(kLe," \u2014 "),jD=n(kLe,"A",{href:!0});var frt=s(jD);Y$o=r(frt,"XLMRobertaXLForMultipleChoice"),frt.forEach(t),K$o=r(kLe," (XLM-RoBERTa-XL model)"),kLe.forEach(t),Z$o=i(K),wF=n(K,"LI",{});var SLe=s(wF);yce=n(SLe,"STRONG",{});var grt=s(yce);eko=r(grt,"xlnet"),grt.forEach(t),oko=r(SLe," \u2014 "),DD=n(SLe,"A",{href:!0});var hrt=s(DD);rko=r(hrt,"XLNetForMultipleChoice"),hrt.forEach(t),tko=r(SLe," (XLNet model)"),SLe.forEach(t),ako=i(K),AF=n(K,"LI",{});var RLe=s(AF);Lce=n(RLe,"STRONG",{});var urt=s(Lce);nko=r(urt,"yoso"),urt.forEach(t),sko=r(RLe," \u2014 "),GD=n(RLe,"A",{href:!0});var prt=s(GD);lko=r(prt,"YosoForMultipleChoice"),prt.forEach(t),iko=r(RLe," (YOSO model)"),RLe.forEach(t),K.forEach(t),dko=i(oa),yF=n(oa,"P",{});var BLe=s(yF);cko=r(BLe,"The model is set in evaluation mode by default using "),xce=n(BLe,"CODE",{});var _rt=s(xce);mko=r(_rt,"model.eval()"),_rt.forEach(t),fko=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(BLe,"CODE",{});var brt=s($ce);gko=r(brt,"model.train()"),brt.forEach(t),BLe.forEach(t),hko=i(oa),T(LF.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),pBe=i(m),Ii=n(m,"H2",{class:!0});var bIe=s(Ii);xF=n(bIe,"A",{id:!0,class:!0,href:!0});var Frt=s(xF);kce=n(Frt,"SPAN",{});var vrt=s(kce);T(Cy.$$.fragment,vrt),vrt.forEach(t),Frt.forEach(t),uko=i(bIe),Sce=n(bIe,"SPAN",{});var Trt=s(Sce);pko=r(Trt,"AutoModelForNextSentencePrediction"),Trt.forEach(t),bIe.forEach(t),_Be=i(m),Ro=n(m,"DIV",{class:!0});var Gs=s(Ro);T(wy.$$.fragment,Gs),_ko=i(Gs),qi=n(Gs,"P",{});var _Y=s(qi);bko=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OD=n(_Y,"A",{href:!0});var Mrt=s(OD);Fko=r(Mrt,"from_pretrained()"),Mrt.forEach(t),vko=r(_Y," class method or the "),VD=n(_Y,"A",{href:!0});var Ert=s(VD);Tko=r(Ert,"from_config()"),Ert.forEach(t),Mko=r(_Y,` class
method.`),_Y.forEach(t),Eko=i(Gs),Ay=n(Gs,"P",{});var FIe=s(Ay);Cko=r(FIe,"This class cannot be instantiated directly using "),Rce=n(FIe,"CODE",{});var Crt=s(Rce);wko=r(Crt,"__init__()"),Crt.forEach(t),Ako=r(FIe," (throws an error)."),FIe.forEach(t),yko=i(Gs),nt=n(Gs,"DIV",{class:!0});var IA=s(nt);T(yy.$$.fragment,IA),Lko=i(IA),Bce=n(IA,"P",{});var wrt=s(Bce);xko=r(wrt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wrt.forEach(t),$ko=i(IA),Ni=n(IA,"P",{});var bY=s(Ni);kko=r(bY,`Note:
Loading a model from its configuration file does `),Pce=n(bY,"STRONG",{});var Art=s(Pce);Sko=r(Art,"not"),Art.forEach(t),Rko=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(bY,"A",{href:!0});var yrt=s(XD);Bko=r(yrt,"from_pretrained()"),yrt.forEach(t),Pko=r(bY," to load the model weights."),bY.forEach(t),Iko=i(IA),T($F.$$.fragment,IA),IA.forEach(t),qko=i(Gs),Ze=n(Gs,"DIV",{class:!0});var ra=s(Ze);T(Ly.$$.fragment,ra),Nko=i(ra),Ice=n(ra,"P",{});var Lrt=s(Ice);jko=r(Lrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lrt.forEach(t),Dko=i(ra),xa=n(ra,"P",{});var qA=s(xa);Gko=r(qA,"The model class to instantiate is selected based on the "),qce=n(qA,"CODE",{});var xrt=s(qce);Oko=r(xrt,"model_type"),xrt.forEach(t),Vko=r(qA,` property of the config object (either
passed as an argument or loaded from `),Nce=n(qA,"CODE",{});var $rt=s(Nce);Xko=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),zko=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(qA,"CODE",{});var krt=s(jce);Qko=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),Wko=r(qA,":"),qA.forEach(t),Hko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);kF=n(Os,"LI",{});var PLe=s(kF);Dce=n(PLe,"STRONG",{});var Srt=s(Dce);Uko=r(Srt,"bert"),Srt.forEach(t),Jko=r(PLe," \u2014 "),zD=n(PLe,"A",{href:!0});var Rrt=s(zD);Yko=r(Rrt,"BertForNextSentencePrediction"),Rrt.forEach(t),Kko=r(PLe," (BERT model)"),PLe.forEach(t),Zko=i(Os),SF=n(Os,"LI",{});var ILe=s(SF);Gce=n(ILe,"STRONG",{});var Brt=s(Gce);eSo=r(Brt,"fnet"),Brt.forEach(t),oSo=r(ILe," \u2014 "),QD=n(ILe,"A",{href:!0});var Prt=s(QD);rSo=r(Prt,"FNetForNextSentencePrediction"),Prt.forEach(t),tSo=r(ILe," (FNet model)"),ILe.forEach(t),aSo=i(Os),RF=n(Os,"LI",{});var qLe=s(RF);Oce=n(qLe,"STRONG",{});var Irt=s(Oce);nSo=r(Irt,"megatron-bert"),Irt.forEach(t),sSo=r(qLe," \u2014 "),WD=n(qLe,"A",{href:!0});var qrt=s(WD);lSo=r(qrt,"MegatronBertForNextSentencePrediction"),qrt.forEach(t),iSo=r(qLe," (MegatronBert model)"),qLe.forEach(t),dSo=i(Os),BF=n(Os,"LI",{});var NLe=s(BF);Vce=n(NLe,"STRONG",{});var Nrt=s(Vce);cSo=r(Nrt,"mobilebert"),Nrt.forEach(t),mSo=r(NLe," \u2014 "),HD=n(NLe,"A",{href:!0});var jrt=s(HD);fSo=r(jrt,"MobileBertForNextSentencePrediction"),jrt.forEach(t),gSo=r(NLe," (MobileBERT model)"),NLe.forEach(t),hSo=i(Os),PF=n(Os,"LI",{});var jLe=s(PF);Xce=n(jLe,"STRONG",{});var Drt=s(Xce);uSo=r(Drt,"qdqbert"),Drt.forEach(t),pSo=r(jLe," \u2014 "),UD=n(jLe,"A",{href:!0});var Grt=s(UD);_So=r(Grt,"QDQBertForNextSentencePrediction"),Grt.forEach(t),bSo=r(jLe," (QDQBert model)"),jLe.forEach(t),Os.forEach(t),FSo=i(ra),IF=n(ra,"P",{});var DLe=s(IF);vSo=r(DLe,"The model is set in evaluation mode by default using "),zce=n(DLe,"CODE",{});var Ort=s(zce);TSo=r(Ort,"model.eval()"),Ort.forEach(t),MSo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(DLe,"CODE",{});var Vrt=s(Qce);ESo=r(Vrt,"model.train()"),Vrt.forEach(t),DLe.forEach(t),CSo=i(ra),T(qF.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),bBe=i(m),ji=n(m,"H2",{class:!0});var vIe=s(ji);NF=n(vIe,"A",{id:!0,class:!0,href:!0});var Xrt=s(NF);Wce=n(Xrt,"SPAN",{});var zrt=s(Wce);T(xy.$$.fragment,zrt),zrt.forEach(t),Xrt.forEach(t),wSo=i(vIe),Hce=n(vIe,"SPAN",{});var Qrt=s(Hce);ASo=r(Qrt,"AutoModelForTokenClassification"),Qrt.forEach(t),vIe.forEach(t),FBe=i(m),Bo=n(m,"DIV",{class:!0});var Vs=s(Bo);T($y.$$.fragment,Vs),ySo=i(Vs),Di=n(Vs,"P",{});var FY=s(Di);LSo=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JD=n(FY,"A",{href:!0});var Wrt=s(JD);xSo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),$So=r(FY," class method or the "),YD=n(FY,"A",{href:!0});var Hrt=s(YD);kSo=r(Hrt,"from_config()"),Hrt.forEach(t),SSo=r(FY,` class
method.`),FY.forEach(t),RSo=i(Vs),ky=n(Vs,"P",{});var TIe=s(ky);BSo=r(TIe,"This class cannot be instantiated directly using "),Uce=n(TIe,"CODE",{});var Urt=s(Uce);PSo=r(Urt,"__init__()"),Urt.forEach(t),ISo=r(TIe," (throws an error)."),TIe.forEach(t),qSo=i(Vs),st=n(Vs,"DIV",{class:!0});var NA=s(st);T(Sy.$$.fragment,NA),NSo=i(NA),Jce=n(NA,"P",{});var Jrt=s(Jce);jSo=r(Jrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jrt.forEach(t),DSo=i(NA),Gi=n(NA,"P",{});var vY=s(Gi);GSo=r(vY,`Note:
Loading a model from its configuration file does `),Yce=n(vY,"STRONG",{});var Yrt=s(Yce);OSo=r(Yrt,"not"),Yrt.forEach(t),VSo=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(vY,"A",{href:!0});var Krt=s(KD);XSo=r(Krt,"from_pretrained()"),Krt.forEach(t),zSo=r(vY," to load the model weights."),vY.forEach(t),QSo=i(NA),T(jF.$$.fragment,NA),NA.forEach(t),WSo=i(Vs),eo=n(Vs,"DIV",{class:!0});var ta=s(eo);T(Ry.$$.fragment,ta),HSo=i(ta),Kce=n(ta,"P",{});var Zrt=s(Kce);USo=r(Zrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zrt.forEach(t),JSo=i(ta),$a=n(ta,"P",{});var jA=s($a);YSo=r(jA,"The model class to instantiate is selected based on the "),Zce=n(jA,"CODE",{});var ett=s(Zce);KSo=r(ett,"model_type"),ett.forEach(t),ZSo=r(jA,` property of the config object (either
passed as an argument or loaded from `),eme=n(jA,"CODE",{});var ott=s(eme);eRo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),oRo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(jA,"CODE",{});var rtt=s(ome);rRo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),tRo=r(jA,":"),jA.forEach(t),aRo=i(ta),U=n(ta,"UL",{});var J=s(U);DF=n(J,"LI",{});var GLe=s(DF);rme=n(GLe,"STRONG",{});var ttt=s(rme);nRo=r(ttt,"albert"),ttt.forEach(t),sRo=r(GLe," \u2014 "),ZD=n(GLe,"A",{href:!0});var att=s(ZD);lRo=r(att,"AlbertForTokenClassification"),att.forEach(t),iRo=r(GLe," (ALBERT model)"),GLe.forEach(t),dRo=i(J),GF=n(J,"LI",{});var OLe=s(GF);tme=n(OLe,"STRONG",{});var ntt=s(tme);cRo=r(ntt,"bert"),ntt.forEach(t),mRo=r(OLe," \u2014 "),eG=n(OLe,"A",{href:!0});var stt=s(eG);fRo=r(stt,"BertForTokenClassification"),stt.forEach(t),gRo=r(OLe," (BERT model)"),OLe.forEach(t),hRo=i(J),OF=n(J,"LI",{});var VLe=s(OF);ame=n(VLe,"STRONG",{});var ltt=s(ame);uRo=r(ltt,"big_bird"),ltt.forEach(t),pRo=r(VLe," \u2014 "),oG=n(VLe,"A",{href:!0});var itt=s(oG);_Ro=r(itt,"BigBirdForTokenClassification"),itt.forEach(t),bRo=r(VLe," (BigBird model)"),VLe.forEach(t),FRo=i(J),VF=n(J,"LI",{});var XLe=s(VF);nme=n(XLe,"STRONG",{});var dtt=s(nme);vRo=r(dtt,"camembert"),dtt.forEach(t),TRo=r(XLe," \u2014 "),rG=n(XLe,"A",{href:!0});var ctt=s(rG);MRo=r(ctt,"CamembertForTokenClassification"),ctt.forEach(t),ERo=r(XLe," (CamemBERT model)"),XLe.forEach(t),CRo=i(J),XF=n(J,"LI",{});var zLe=s(XF);sme=n(zLe,"STRONG",{});var mtt=s(sme);wRo=r(mtt,"canine"),mtt.forEach(t),ARo=r(zLe," \u2014 "),tG=n(zLe,"A",{href:!0});var ftt=s(tG);yRo=r(ftt,"CanineForTokenClassification"),ftt.forEach(t),LRo=r(zLe," (Canine model)"),zLe.forEach(t),xRo=i(J),zF=n(J,"LI",{});var QLe=s(zF);lme=n(QLe,"STRONG",{});var gtt=s(lme);$Ro=r(gtt,"convbert"),gtt.forEach(t),kRo=r(QLe," \u2014 "),aG=n(QLe,"A",{href:!0});var htt=s(aG);SRo=r(htt,"ConvBertForTokenClassification"),htt.forEach(t),RRo=r(QLe," (ConvBERT model)"),QLe.forEach(t),BRo=i(J),QF=n(J,"LI",{});var WLe=s(QF);ime=n(WLe,"STRONG",{});var utt=s(ime);PRo=r(utt,"data2vec-text"),utt.forEach(t),IRo=r(WLe," \u2014 "),nG=n(WLe,"A",{href:!0});var ptt=s(nG);qRo=r(ptt,"Data2VecTextForTokenClassification"),ptt.forEach(t),NRo=r(WLe," (Data2VecText model)"),WLe.forEach(t),jRo=i(J),WF=n(J,"LI",{});var HLe=s(WF);dme=n(HLe,"STRONG",{});var _tt=s(dme);DRo=r(_tt,"deberta"),_tt.forEach(t),GRo=r(HLe," \u2014 "),sG=n(HLe,"A",{href:!0});var btt=s(sG);ORo=r(btt,"DebertaForTokenClassification"),btt.forEach(t),VRo=r(HLe," (DeBERTa model)"),HLe.forEach(t),XRo=i(J),HF=n(J,"LI",{});var ULe=s(HF);cme=n(ULe,"STRONG",{});var Ftt=s(cme);zRo=r(Ftt,"deberta-v2"),Ftt.forEach(t),QRo=r(ULe," \u2014 "),lG=n(ULe,"A",{href:!0});var vtt=s(lG);WRo=r(vtt,"DebertaV2ForTokenClassification"),vtt.forEach(t),HRo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),URo=i(J),UF=n(J,"LI",{});var JLe=s(UF);mme=n(JLe,"STRONG",{});var Ttt=s(mme);JRo=r(Ttt,"distilbert"),Ttt.forEach(t),YRo=r(JLe," \u2014 "),iG=n(JLe,"A",{href:!0});var Mtt=s(iG);KRo=r(Mtt,"DistilBertForTokenClassification"),Mtt.forEach(t),ZRo=r(JLe," (DistilBERT model)"),JLe.forEach(t),eBo=i(J),JF=n(J,"LI",{});var YLe=s(JF);fme=n(YLe,"STRONG",{});var Ett=s(fme);oBo=r(Ett,"electra"),Ett.forEach(t),rBo=r(YLe," \u2014 "),dG=n(YLe,"A",{href:!0});var Ctt=s(dG);tBo=r(Ctt,"ElectraForTokenClassification"),Ctt.forEach(t),aBo=r(YLe," (ELECTRA model)"),YLe.forEach(t),nBo=i(J),YF=n(J,"LI",{});var KLe=s(YF);gme=n(KLe,"STRONG",{});var wtt=s(gme);sBo=r(wtt,"flaubert"),wtt.forEach(t),lBo=r(KLe," \u2014 "),cG=n(KLe,"A",{href:!0});var Att=s(cG);iBo=r(Att,"FlaubertForTokenClassification"),Att.forEach(t),dBo=r(KLe," (FlauBERT model)"),KLe.forEach(t),cBo=i(J),KF=n(J,"LI",{});var ZLe=s(KF);hme=n(ZLe,"STRONG",{});var ytt=s(hme);mBo=r(ytt,"fnet"),ytt.forEach(t),fBo=r(ZLe," \u2014 "),mG=n(ZLe,"A",{href:!0});var Ltt=s(mG);gBo=r(Ltt,"FNetForTokenClassification"),Ltt.forEach(t),hBo=r(ZLe," (FNet model)"),ZLe.forEach(t),uBo=i(J),ZF=n(J,"LI",{});var e8e=s(ZF);ume=n(e8e,"STRONG",{});var xtt=s(ume);pBo=r(xtt,"funnel"),xtt.forEach(t),_Bo=r(e8e," \u2014 "),fG=n(e8e,"A",{href:!0});var $tt=s(fG);bBo=r($tt,"FunnelForTokenClassification"),$tt.forEach(t),FBo=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),vBo=i(J),ev=n(J,"LI",{});var o8e=s(ev);pme=n(o8e,"STRONG",{});var ktt=s(pme);TBo=r(ktt,"gpt2"),ktt.forEach(t),MBo=r(o8e," \u2014 "),gG=n(o8e,"A",{href:!0});var Stt=s(gG);EBo=r(Stt,"GPT2ForTokenClassification"),Stt.forEach(t),CBo=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),wBo=i(J),ov=n(J,"LI",{});var r8e=s(ov);_me=n(r8e,"STRONG",{});var Rtt=s(_me);ABo=r(Rtt,"ibert"),Rtt.forEach(t),yBo=r(r8e," \u2014 "),hG=n(r8e,"A",{href:!0});var Btt=s(hG);LBo=r(Btt,"IBertForTokenClassification"),Btt.forEach(t),xBo=r(r8e," (I-BERT model)"),r8e.forEach(t),$Bo=i(J),rv=n(J,"LI",{});var t8e=s(rv);bme=n(t8e,"STRONG",{});var Ptt=s(bme);kBo=r(Ptt,"layoutlm"),Ptt.forEach(t),SBo=r(t8e," \u2014 "),uG=n(t8e,"A",{href:!0});var Itt=s(uG);RBo=r(Itt,"LayoutLMForTokenClassification"),Itt.forEach(t),BBo=r(t8e," (LayoutLM model)"),t8e.forEach(t),PBo=i(J),tv=n(J,"LI",{});var a8e=s(tv);Fme=n(a8e,"STRONG",{});var qtt=s(Fme);IBo=r(qtt,"layoutlmv2"),qtt.forEach(t),qBo=r(a8e," \u2014 "),pG=n(a8e,"A",{href:!0});var Ntt=s(pG);NBo=r(Ntt,"LayoutLMv2ForTokenClassification"),Ntt.forEach(t),jBo=r(a8e," (LayoutLMv2 model)"),a8e.forEach(t),DBo=i(J),av=n(J,"LI",{});var n8e=s(av);vme=n(n8e,"STRONG",{});var jtt=s(vme);GBo=r(jtt,"longformer"),jtt.forEach(t),OBo=r(n8e," \u2014 "),_G=n(n8e,"A",{href:!0});var Dtt=s(_G);VBo=r(Dtt,"LongformerForTokenClassification"),Dtt.forEach(t),XBo=r(n8e," (Longformer model)"),n8e.forEach(t),zBo=i(J),nv=n(J,"LI",{});var s8e=s(nv);Tme=n(s8e,"STRONG",{});var Gtt=s(Tme);QBo=r(Gtt,"megatron-bert"),Gtt.forEach(t),WBo=r(s8e," \u2014 "),bG=n(s8e,"A",{href:!0});var Ott=s(bG);HBo=r(Ott,"MegatronBertForTokenClassification"),Ott.forEach(t),UBo=r(s8e," (MegatronBert model)"),s8e.forEach(t),JBo=i(J),sv=n(J,"LI",{});var l8e=s(sv);Mme=n(l8e,"STRONG",{});var Vtt=s(Mme);YBo=r(Vtt,"mobilebert"),Vtt.forEach(t),KBo=r(l8e," \u2014 "),FG=n(l8e,"A",{href:!0});var Xtt=s(FG);ZBo=r(Xtt,"MobileBertForTokenClassification"),Xtt.forEach(t),ePo=r(l8e," (MobileBERT model)"),l8e.forEach(t),oPo=i(J),lv=n(J,"LI",{});var i8e=s(lv);Eme=n(i8e,"STRONG",{});var ztt=s(Eme);rPo=r(ztt,"mpnet"),ztt.forEach(t),tPo=r(i8e," \u2014 "),vG=n(i8e,"A",{href:!0});var Qtt=s(vG);aPo=r(Qtt,"MPNetForTokenClassification"),Qtt.forEach(t),nPo=r(i8e," (MPNet model)"),i8e.forEach(t),sPo=i(J),iv=n(J,"LI",{});var d8e=s(iv);Cme=n(d8e,"STRONG",{});var Wtt=s(Cme);lPo=r(Wtt,"nystromformer"),Wtt.forEach(t),iPo=r(d8e," \u2014 "),TG=n(d8e,"A",{href:!0});var Htt=s(TG);dPo=r(Htt,"NystromformerForTokenClassification"),Htt.forEach(t),cPo=r(d8e," (Nystromformer model)"),d8e.forEach(t),mPo=i(J),dv=n(J,"LI",{});var c8e=s(dv);wme=n(c8e,"STRONG",{});var Utt=s(wme);fPo=r(Utt,"qdqbert"),Utt.forEach(t),gPo=r(c8e," \u2014 "),MG=n(c8e,"A",{href:!0});var Jtt=s(MG);hPo=r(Jtt,"QDQBertForTokenClassification"),Jtt.forEach(t),uPo=r(c8e," (QDQBert model)"),c8e.forEach(t),pPo=i(J),cv=n(J,"LI",{});var m8e=s(cv);Ame=n(m8e,"STRONG",{});var Ytt=s(Ame);_Po=r(Ytt,"rembert"),Ytt.forEach(t),bPo=r(m8e," \u2014 "),EG=n(m8e,"A",{href:!0});var Ktt=s(EG);FPo=r(Ktt,"RemBertForTokenClassification"),Ktt.forEach(t),vPo=r(m8e," (RemBERT model)"),m8e.forEach(t),TPo=i(J),mv=n(J,"LI",{});var f8e=s(mv);yme=n(f8e,"STRONG",{});var Ztt=s(yme);MPo=r(Ztt,"roberta"),Ztt.forEach(t),EPo=r(f8e," \u2014 "),CG=n(f8e,"A",{href:!0});var eat=s(CG);CPo=r(eat,"RobertaForTokenClassification"),eat.forEach(t),wPo=r(f8e," (RoBERTa model)"),f8e.forEach(t),APo=i(J),fv=n(J,"LI",{});var g8e=s(fv);Lme=n(g8e,"STRONG",{});var oat=s(Lme);yPo=r(oat,"roformer"),oat.forEach(t),LPo=r(g8e," \u2014 "),wG=n(g8e,"A",{href:!0});var rat=s(wG);xPo=r(rat,"RoFormerForTokenClassification"),rat.forEach(t),$Po=r(g8e," (RoFormer model)"),g8e.forEach(t),kPo=i(J),gv=n(J,"LI",{});var h8e=s(gv);xme=n(h8e,"STRONG",{});var tat=s(xme);SPo=r(tat,"squeezebert"),tat.forEach(t),RPo=r(h8e," \u2014 "),AG=n(h8e,"A",{href:!0});var aat=s(AG);BPo=r(aat,"SqueezeBertForTokenClassification"),aat.forEach(t),PPo=r(h8e," (SqueezeBERT model)"),h8e.forEach(t),IPo=i(J),hv=n(J,"LI",{});var u8e=s(hv);$me=n(u8e,"STRONG",{});var nat=s($me);qPo=r(nat,"xlm"),nat.forEach(t),NPo=r(u8e," \u2014 "),yG=n(u8e,"A",{href:!0});var sat=s(yG);jPo=r(sat,"XLMForTokenClassification"),sat.forEach(t),DPo=r(u8e," (XLM model)"),u8e.forEach(t),GPo=i(J),uv=n(J,"LI",{});var p8e=s(uv);kme=n(p8e,"STRONG",{});var lat=s(kme);OPo=r(lat,"xlm-roberta"),lat.forEach(t),VPo=r(p8e," \u2014 "),LG=n(p8e,"A",{href:!0});var iat=s(LG);XPo=r(iat,"XLMRobertaForTokenClassification"),iat.forEach(t),zPo=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),QPo=i(J),pv=n(J,"LI",{});var _8e=s(pv);Sme=n(_8e,"STRONG",{});var dat=s(Sme);WPo=r(dat,"xlm-roberta-xl"),dat.forEach(t),HPo=r(_8e," \u2014 "),xG=n(_8e,"A",{href:!0});var cat=s(xG);UPo=r(cat,"XLMRobertaXLForTokenClassification"),cat.forEach(t),JPo=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),YPo=i(J),_v=n(J,"LI",{});var b8e=s(_v);Rme=n(b8e,"STRONG",{});var mat=s(Rme);KPo=r(mat,"xlnet"),mat.forEach(t),ZPo=r(b8e," \u2014 "),$G=n(b8e,"A",{href:!0});var fat=s($G);eIo=r(fat,"XLNetForTokenClassification"),fat.forEach(t),oIo=r(b8e," (XLNet model)"),b8e.forEach(t),rIo=i(J),bv=n(J,"LI",{});var F8e=s(bv);Bme=n(F8e,"STRONG",{});var gat=s(Bme);tIo=r(gat,"yoso"),gat.forEach(t),aIo=r(F8e," \u2014 "),kG=n(F8e,"A",{href:!0});var hat=s(kG);nIo=r(hat,"YosoForTokenClassification"),hat.forEach(t),sIo=r(F8e," (YOSO model)"),F8e.forEach(t),J.forEach(t),lIo=i(ta),Fv=n(ta,"P",{});var v8e=s(Fv);iIo=r(v8e,"The model is set in evaluation mode by default using "),Pme=n(v8e,"CODE",{});var uat=s(Pme);dIo=r(uat,"model.eval()"),uat.forEach(t),cIo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(v8e,"CODE",{});var pat=s(Ime);mIo=r(pat,"model.train()"),pat.forEach(t),v8e.forEach(t),fIo=i(ta),T(vv.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),vBe=i(m),Oi=n(m,"H2",{class:!0});var MIe=s(Oi);Tv=n(MIe,"A",{id:!0,class:!0,href:!0});var _at=s(Tv);qme=n(_at,"SPAN",{});var bat=s(qme);T(By.$$.fragment,bat),bat.forEach(t),_at.forEach(t),gIo=i(MIe),Nme=n(MIe,"SPAN",{});var Fat=s(Nme);hIo=r(Fat,"AutoModelForQuestionAnswering"),Fat.forEach(t),MIe.forEach(t),TBe=i(m),Po=n(m,"DIV",{class:!0});var Xs=s(Po);T(Py.$$.fragment,Xs),uIo=i(Xs),Vi=n(Xs,"P",{});var TY=s(Vi);pIo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SG=n(TY,"A",{href:!0});var vat=s(SG);_Io=r(vat,"from_pretrained()"),vat.forEach(t),bIo=r(TY," class method or the "),RG=n(TY,"A",{href:!0});var Tat=s(RG);FIo=r(Tat,"from_config()"),Tat.forEach(t),vIo=r(TY,` class
method.`),TY.forEach(t),TIo=i(Xs),Iy=n(Xs,"P",{});var EIe=s(Iy);MIo=r(EIe,"This class cannot be instantiated directly using "),jme=n(EIe,"CODE",{});var Mat=s(jme);EIo=r(Mat,"__init__()"),Mat.forEach(t),CIo=r(EIe," (throws an error)."),EIe.forEach(t),wIo=i(Xs),lt=n(Xs,"DIV",{class:!0});var DA=s(lt);T(qy.$$.fragment,DA),AIo=i(DA),Dme=n(DA,"P",{});var Eat=s(Dme);yIo=r(Eat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eat.forEach(t),LIo=i(DA),Xi=n(DA,"P",{});var MY=s(Xi);xIo=r(MY,`Note:
Loading a model from its configuration file does `),Gme=n(MY,"STRONG",{});var Cat=s(Gme);$Io=r(Cat,"not"),Cat.forEach(t),kIo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(MY,"A",{href:!0});var wat=s(BG);SIo=r(wat,"from_pretrained()"),wat.forEach(t),RIo=r(MY," to load the model weights."),MY.forEach(t),BIo=i(DA),T(Mv.$$.fragment,DA),DA.forEach(t),PIo=i(Xs),oo=n(Xs,"DIV",{class:!0});var aa=s(oo);T(Ny.$$.fragment,aa),IIo=i(aa),Ome=n(aa,"P",{});var Aat=s(Ome);qIo=r(Aat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aat.forEach(t),NIo=i(aa),ka=n(aa,"P",{});var GA=s(ka);jIo=r(GA,"The model class to instantiate is selected based on the "),Vme=n(GA,"CODE",{});var yat=s(Vme);DIo=r(yat,"model_type"),yat.forEach(t),GIo=r(GA,` property of the config object (either
passed as an argument or loaded from `),Xme=n(GA,"CODE",{});var Lat=s(Xme);OIo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),VIo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(GA,"CODE",{});var xat=s(zme);XIo=r(xat,"pretrained_model_name_or_path"),xat.forEach(t),zIo=r(GA,":"),GA.forEach(t),QIo=i(aa),O=n(aa,"UL",{});var X=s(O);Ev=n(X,"LI",{});var T8e=s(Ev);Qme=n(T8e,"STRONG",{});var $at=s(Qme);WIo=r($at,"albert"),$at.forEach(t),HIo=r(T8e," \u2014 "),PG=n(T8e,"A",{href:!0});var kat=s(PG);UIo=r(kat,"AlbertForQuestionAnswering"),kat.forEach(t),JIo=r(T8e," (ALBERT model)"),T8e.forEach(t),YIo=i(X),Cv=n(X,"LI",{});var M8e=s(Cv);Wme=n(M8e,"STRONG",{});var Sat=s(Wme);KIo=r(Sat,"bart"),Sat.forEach(t),ZIo=r(M8e," \u2014 "),IG=n(M8e,"A",{href:!0});var Rat=s(IG);eqo=r(Rat,"BartForQuestionAnswering"),Rat.forEach(t),oqo=r(M8e," (BART model)"),M8e.forEach(t),rqo=i(X),wv=n(X,"LI",{});var E8e=s(wv);Hme=n(E8e,"STRONG",{});var Bat=s(Hme);tqo=r(Bat,"bert"),Bat.forEach(t),aqo=r(E8e," \u2014 "),qG=n(E8e,"A",{href:!0});var Pat=s(qG);nqo=r(Pat,"BertForQuestionAnswering"),Pat.forEach(t),sqo=r(E8e," (BERT model)"),E8e.forEach(t),lqo=i(X),Av=n(X,"LI",{});var C8e=s(Av);Ume=n(C8e,"STRONG",{});var Iat=s(Ume);iqo=r(Iat,"big_bird"),Iat.forEach(t),dqo=r(C8e," \u2014 "),NG=n(C8e,"A",{href:!0});var qat=s(NG);cqo=r(qat,"BigBirdForQuestionAnswering"),qat.forEach(t),mqo=r(C8e," (BigBird model)"),C8e.forEach(t),fqo=i(X),yv=n(X,"LI",{});var w8e=s(yv);Jme=n(w8e,"STRONG",{});var Nat=s(Jme);gqo=r(Nat,"bigbird_pegasus"),Nat.forEach(t),hqo=r(w8e," \u2014 "),jG=n(w8e,"A",{href:!0});var jat=s(jG);uqo=r(jat,"BigBirdPegasusForQuestionAnswering"),jat.forEach(t),pqo=r(w8e," (BigBirdPegasus model)"),w8e.forEach(t),_qo=i(X),Lv=n(X,"LI",{});var A8e=s(Lv);Yme=n(A8e,"STRONG",{});var Dat=s(Yme);bqo=r(Dat,"camembert"),Dat.forEach(t),Fqo=r(A8e," \u2014 "),DG=n(A8e,"A",{href:!0});var Gat=s(DG);vqo=r(Gat,"CamembertForQuestionAnswering"),Gat.forEach(t),Tqo=r(A8e," (CamemBERT model)"),A8e.forEach(t),Mqo=i(X),xv=n(X,"LI",{});var y8e=s(xv);Kme=n(y8e,"STRONG",{});var Oat=s(Kme);Eqo=r(Oat,"canine"),Oat.forEach(t),Cqo=r(y8e," \u2014 "),GG=n(y8e,"A",{href:!0});var Vat=s(GG);wqo=r(Vat,"CanineForQuestionAnswering"),Vat.forEach(t),Aqo=r(y8e," (Canine model)"),y8e.forEach(t),yqo=i(X),$v=n(X,"LI",{});var L8e=s($v);Zme=n(L8e,"STRONG",{});var Xat=s(Zme);Lqo=r(Xat,"convbert"),Xat.forEach(t),xqo=r(L8e," \u2014 "),OG=n(L8e,"A",{href:!0});var zat=s(OG);$qo=r(zat,"ConvBertForQuestionAnswering"),zat.forEach(t),kqo=r(L8e," (ConvBERT model)"),L8e.forEach(t),Sqo=i(X),kv=n(X,"LI",{});var x8e=s(kv);efe=n(x8e,"STRONG",{});var Qat=s(efe);Rqo=r(Qat,"data2vec-text"),Qat.forEach(t),Bqo=r(x8e," \u2014 "),VG=n(x8e,"A",{href:!0});var Wat=s(VG);Pqo=r(Wat,"Data2VecTextForQuestionAnswering"),Wat.forEach(t),Iqo=r(x8e," (Data2VecText model)"),x8e.forEach(t),qqo=i(X),Sv=n(X,"LI",{});var $8e=s(Sv);ofe=n($8e,"STRONG",{});var Hat=s(ofe);Nqo=r(Hat,"deberta"),Hat.forEach(t),jqo=r($8e," \u2014 "),XG=n($8e,"A",{href:!0});var Uat=s(XG);Dqo=r(Uat,"DebertaForQuestionAnswering"),Uat.forEach(t),Gqo=r($8e," (DeBERTa model)"),$8e.forEach(t),Oqo=i(X),Rv=n(X,"LI",{});var k8e=s(Rv);rfe=n(k8e,"STRONG",{});var Jat=s(rfe);Vqo=r(Jat,"deberta-v2"),Jat.forEach(t),Xqo=r(k8e," \u2014 "),zG=n(k8e,"A",{href:!0});var Yat=s(zG);zqo=r(Yat,"DebertaV2ForQuestionAnswering"),Yat.forEach(t),Qqo=r(k8e," (DeBERTa-v2 model)"),k8e.forEach(t),Wqo=i(X),Bv=n(X,"LI",{});var S8e=s(Bv);tfe=n(S8e,"STRONG",{});var Kat=s(tfe);Hqo=r(Kat,"distilbert"),Kat.forEach(t),Uqo=r(S8e," \u2014 "),QG=n(S8e,"A",{href:!0});var Zat=s(QG);Jqo=r(Zat,"DistilBertForQuestionAnswering"),Zat.forEach(t),Yqo=r(S8e," (DistilBERT model)"),S8e.forEach(t),Kqo=i(X),Pv=n(X,"LI",{});var R8e=s(Pv);afe=n(R8e,"STRONG",{});var ent=s(afe);Zqo=r(ent,"electra"),ent.forEach(t),eNo=r(R8e," \u2014 "),WG=n(R8e,"A",{href:!0});var ont=s(WG);oNo=r(ont,"ElectraForQuestionAnswering"),ont.forEach(t),rNo=r(R8e," (ELECTRA model)"),R8e.forEach(t),tNo=i(X),Iv=n(X,"LI",{});var B8e=s(Iv);nfe=n(B8e,"STRONG",{});var rnt=s(nfe);aNo=r(rnt,"flaubert"),rnt.forEach(t),nNo=r(B8e," \u2014 "),HG=n(B8e,"A",{href:!0});var tnt=s(HG);sNo=r(tnt,"FlaubertForQuestionAnsweringSimple"),tnt.forEach(t),lNo=r(B8e," (FlauBERT model)"),B8e.forEach(t),iNo=i(X),qv=n(X,"LI",{});var P8e=s(qv);sfe=n(P8e,"STRONG",{});var ant=s(sfe);dNo=r(ant,"fnet"),ant.forEach(t),cNo=r(P8e," \u2014 "),UG=n(P8e,"A",{href:!0});var nnt=s(UG);mNo=r(nnt,"FNetForQuestionAnswering"),nnt.forEach(t),fNo=r(P8e," (FNet model)"),P8e.forEach(t),gNo=i(X),Nv=n(X,"LI",{});var I8e=s(Nv);lfe=n(I8e,"STRONG",{});var snt=s(lfe);hNo=r(snt,"funnel"),snt.forEach(t),uNo=r(I8e," \u2014 "),JG=n(I8e,"A",{href:!0});var lnt=s(JG);pNo=r(lnt,"FunnelForQuestionAnswering"),lnt.forEach(t),_No=r(I8e," (Funnel Transformer model)"),I8e.forEach(t),bNo=i(X),jv=n(X,"LI",{});var q8e=s(jv);ife=n(q8e,"STRONG",{});var int=s(ife);FNo=r(int,"gptj"),int.forEach(t),vNo=r(q8e," \u2014 "),YG=n(q8e,"A",{href:!0});var dnt=s(YG);TNo=r(dnt,"GPTJForQuestionAnswering"),dnt.forEach(t),MNo=r(q8e," (GPT-J model)"),q8e.forEach(t),ENo=i(X),Dv=n(X,"LI",{});var N8e=s(Dv);dfe=n(N8e,"STRONG",{});var cnt=s(dfe);CNo=r(cnt,"ibert"),cnt.forEach(t),wNo=r(N8e," \u2014 "),KG=n(N8e,"A",{href:!0});var mnt=s(KG);ANo=r(mnt,"IBertForQuestionAnswering"),mnt.forEach(t),yNo=r(N8e," (I-BERT model)"),N8e.forEach(t),LNo=i(X),Gv=n(X,"LI",{});var j8e=s(Gv);cfe=n(j8e,"STRONG",{});var fnt=s(cfe);xNo=r(fnt,"layoutlmv2"),fnt.forEach(t),$No=r(j8e," \u2014 "),ZG=n(j8e,"A",{href:!0});var gnt=s(ZG);kNo=r(gnt,"LayoutLMv2ForQuestionAnswering"),gnt.forEach(t),SNo=r(j8e," (LayoutLMv2 model)"),j8e.forEach(t),RNo=i(X),Ov=n(X,"LI",{});var D8e=s(Ov);mfe=n(D8e,"STRONG",{});var hnt=s(mfe);BNo=r(hnt,"led"),hnt.forEach(t),PNo=r(D8e," \u2014 "),eO=n(D8e,"A",{href:!0});var unt=s(eO);INo=r(unt,"LEDForQuestionAnswering"),unt.forEach(t),qNo=r(D8e," (LED model)"),D8e.forEach(t),NNo=i(X),Vv=n(X,"LI",{});var G8e=s(Vv);ffe=n(G8e,"STRONG",{});var pnt=s(ffe);jNo=r(pnt,"longformer"),pnt.forEach(t),DNo=r(G8e," \u2014 "),oO=n(G8e,"A",{href:!0});var _nt=s(oO);GNo=r(_nt,"LongformerForQuestionAnswering"),_nt.forEach(t),ONo=r(G8e," (Longformer model)"),G8e.forEach(t),VNo=i(X),Xv=n(X,"LI",{});var O8e=s(Xv);gfe=n(O8e,"STRONG",{});var bnt=s(gfe);XNo=r(bnt,"lxmert"),bnt.forEach(t),zNo=r(O8e," \u2014 "),rO=n(O8e,"A",{href:!0});var Fnt=s(rO);QNo=r(Fnt,"LxmertForQuestionAnswering"),Fnt.forEach(t),WNo=r(O8e," (LXMERT model)"),O8e.forEach(t),HNo=i(X),zv=n(X,"LI",{});var V8e=s(zv);hfe=n(V8e,"STRONG",{});var vnt=s(hfe);UNo=r(vnt,"mbart"),vnt.forEach(t),JNo=r(V8e," \u2014 "),tO=n(V8e,"A",{href:!0});var Tnt=s(tO);YNo=r(Tnt,"MBartForQuestionAnswering"),Tnt.forEach(t),KNo=r(V8e," (mBART model)"),V8e.forEach(t),ZNo=i(X),Qv=n(X,"LI",{});var X8e=s(Qv);ufe=n(X8e,"STRONG",{});var Mnt=s(ufe);ejo=r(Mnt,"megatron-bert"),Mnt.forEach(t),ojo=r(X8e," \u2014 "),aO=n(X8e,"A",{href:!0});var Ent=s(aO);rjo=r(Ent,"MegatronBertForQuestionAnswering"),Ent.forEach(t),tjo=r(X8e," (MegatronBert model)"),X8e.forEach(t),ajo=i(X),Wv=n(X,"LI",{});var z8e=s(Wv);pfe=n(z8e,"STRONG",{});var Cnt=s(pfe);njo=r(Cnt,"mobilebert"),Cnt.forEach(t),sjo=r(z8e," \u2014 "),nO=n(z8e,"A",{href:!0});var wnt=s(nO);ljo=r(wnt,"MobileBertForQuestionAnswering"),wnt.forEach(t),ijo=r(z8e," (MobileBERT model)"),z8e.forEach(t),djo=i(X),Hv=n(X,"LI",{});var Q8e=s(Hv);_fe=n(Q8e,"STRONG",{});var Ant=s(_fe);cjo=r(Ant,"mpnet"),Ant.forEach(t),mjo=r(Q8e," \u2014 "),sO=n(Q8e,"A",{href:!0});var ynt=s(sO);fjo=r(ynt,"MPNetForQuestionAnswering"),ynt.forEach(t),gjo=r(Q8e," (MPNet model)"),Q8e.forEach(t),hjo=i(X),Uv=n(X,"LI",{});var W8e=s(Uv);bfe=n(W8e,"STRONG",{});var Lnt=s(bfe);ujo=r(Lnt,"nystromformer"),Lnt.forEach(t),pjo=r(W8e," \u2014 "),lO=n(W8e,"A",{href:!0});var xnt=s(lO);_jo=r(xnt,"NystromformerForQuestionAnswering"),xnt.forEach(t),bjo=r(W8e," (Nystromformer model)"),W8e.forEach(t),Fjo=i(X),Jv=n(X,"LI",{});var H8e=s(Jv);Ffe=n(H8e,"STRONG",{});var $nt=s(Ffe);vjo=r($nt,"qdqbert"),$nt.forEach(t),Tjo=r(H8e," \u2014 "),iO=n(H8e,"A",{href:!0});var knt=s(iO);Mjo=r(knt,"QDQBertForQuestionAnswering"),knt.forEach(t),Ejo=r(H8e," (QDQBert model)"),H8e.forEach(t),Cjo=i(X),Yv=n(X,"LI",{});var U8e=s(Yv);vfe=n(U8e,"STRONG",{});var Snt=s(vfe);wjo=r(Snt,"reformer"),Snt.forEach(t),Ajo=r(U8e," \u2014 "),dO=n(U8e,"A",{href:!0});var Rnt=s(dO);yjo=r(Rnt,"ReformerForQuestionAnswering"),Rnt.forEach(t),Ljo=r(U8e," (Reformer model)"),U8e.forEach(t),xjo=i(X),Kv=n(X,"LI",{});var J8e=s(Kv);Tfe=n(J8e,"STRONG",{});var Bnt=s(Tfe);$jo=r(Bnt,"rembert"),Bnt.forEach(t),kjo=r(J8e," \u2014 "),cO=n(J8e,"A",{href:!0});var Pnt=s(cO);Sjo=r(Pnt,"RemBertForQuestionAnswering"),Pnt.forEach(t),Rjo=r(J8e," (RemBERT model)"),J8e.forEach(t),Bjo=i(X),Zv=n(X,"LI",{});var Y8e=s(Zv);Mfe=n(Y8e,"STRONG",{});var Int=s(Mfe);Pjo=r(Int,"roberta"),Int.forEach(t),Ijo=r(Y8e," \u2014 "),mO=n(Y8e,"A",{href:!0});var qnt=s(mO);qjo=r(qnt,"RobertaForQuestionAnswering"),qnt.forEach(t),Njo=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),jjo=i(X),e1=n(X,"LI",{});var K8e=s(e1);Efe=n(K8e,"STRONG",{});var Nnt=s(Efe);Djo=r(Nnt,"roformer"),Nnt.forEach(t),Gjo=r(K8e," \u2014 "),fO=n(K8e,"A",{href:!0});var jnt=s(fO);Ojo=r(jnt,"RoFormerForQuestionAnswering"),jnt.forEach(t),Vjo=r(K8e," (RoFormer model)"),K8e.forEach(t),Xjo=i(X),o1=n(X,"LI",{});var Z8e=s(o1);Cfe=n(Z8e,"STRONG",{});var Dnt=s(Cfe);zjo=r(Dnt,"splinter"),Dnt.forEach(t),Qjo=r(Z8e," \u2014 "),gO=n(Z8e,"A",{href:!0});var Gnt=s(gO);Wjo=r(Gnt,"SplinterForQuestionAnswering"),Gnt.forEach(t),Hjo=r(Z8e," (Splinter model)"),Z8e.forEach(t),Ujo=i(X),r1=n(X,"LI",{});var e7e=s(r1);wfe=n(e7e,"STRONG",{});var Ont=s(wfe);Jjo=r(Ont,"squeezebert"),Ont.forEach(t),Yjo=r(e7e," \u2014 "),hO=n(e7e,"A",{href:!0});var Vnt=s(hO);Kjo=r(Vnt,"SqueezeBertForQuestionAnswering"),Vnt.forEach(t),Zjo=r(e7e," (SqueezeBERT model)"),e7e.forEach(t),eDo=i(X),t1=n(X,"LI",{});var o7e=s(t1);Afe=n(o7e,"STRONG",{});var Xnt=s(Afe);oDo=r(Xnt,"xlm"),Xnt.forEach(t),rDo=r(o7e," \u2014 "),uO=n(o7e,"A",{href:!0});var znt=s(uO);tDo=r(znt,"XLMForQuestionAnsweringSimple"),znt.forEach(t),aDo=r(o7e," (XLM model)"),o7e.forEach(t),nDo=i(X),a1=n(X,"LI",{});var r7e=s(a1);yfe=n(r7e,"STRONG",{});var Qnt=s(yfe);sDo=r(Qnt,"xlm-roberta"),Qnt.forEach(t),lDo=r(r7e," \u2014 "),pO=n(r7e,"A",{href:!0});var Wnt=s(pO);iDo=r(Wnt,"XLMRobertaForQuestionAnswering"),Wnt.forEach(t),dDo=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),cDo=i(X),n1=n(X,"LI",{});var t7e=s(n1);Lfe=n(t7e,"STRONG",{});var Hnt=s(Lfe);mDo=r(Hnt,"xlm-roberta-xl"),Hnt.forEach(t),fDo=r(t7e," \u2014 "),_O=n(t7e,"A",{href:!0});var Unt=s(_O);gDo=r(Unt,"XLMRobertaXLForQuestionAnswering"),Unt.forEach(t),hDo=r(t7e," (XLM-RoBERTa-XL model)"),t7e.forEach(t),uDo=i(X),s1=n(X,"LI",{});var a7e=s(s1);xfe=n(a7e,"STRONG",{});var Jnt=s(xfe);pDo=r(Jnt,"xlnet"),Jnt.forEach(t),_Do=r(a7e," \u2014 "),bO=n(a7e,"A",{href:!0});var Ynt=s(bO);bDo=r(Ynt,"XLNetForQuestionAnsweringSimple"),Ynt.forEach(t),FDo=r(a7e," (XLNet model)"),a7e.forEach(t),vDo=i(X),l1=n(X,"LI",{});var n7e=s(l1);$fe=n(n7e,"STRONG",{});var Knt=s($fe);TDo=r(Knt,"yoso"),Knt.forEach(t),MDo=r(n7e," \u2014 "),FO=n(n7e,"A",{href:!0});var Znt=s(FO);EDo=r(Znt,"YosoForQuestionAnswering"),Znt.forEach(t),CDo=r(n7e," (YOSO model)"),n7e.forEach(t),X.forEach(t),wDo=i(aa),i1=n(aa,"P",{});var s7e=s(i1);ADo=r(s7e,"The model is set in evaluation mode by default using "),kfe=n(s7e,"CODE",{});var est=s(kfe);yDo=r(est,"model.eval()"),est.forEach(t),LDo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(s7e,"CODE",{});var ost=s(Sfe);xDo=r(ost,"model.train()"),ost.forEach(t),s7e.forEach(t),$Do=i(aa),T(d1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),MBe=i(m),zi=n(m,"H2",{class:!0});var CIe=s(zi);c1=n(CIe,"A",{id:!0,class:!0,href:!0});var rst=s(c1);Rfe=n(rst,"SPAN",{});var tst=s(Rfe);T(jy.$$.fragment,tst),tst.forEach(t),rst.forEach(t),kDo=i(CIe),Bfe=n(CIe,"SPAN",{});var ast=s(Bfe);SDo=r(ast,"AutoModelForTableQuestionAnswering"),ast.forEach(t),CIe.forEach(t),EBe=i(m),Io=n(m,"DIV",{class:!0});var zs=s(Io);T(Dy.$$.fragment,zs),RDo=i(zs),Qi=n(zs,"P",{});var EY=s(Qi);BDo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vO=n(EY,"A",{href:!0});var nst=s(vO);PDo=r(nst,"from_pretrained()"),nst.forEach(t),IDo=r(EY," class method or the "),TO=n(EY,"A",{href:!0});var sst=s(TO);qDo=r(sst,"from_config()"),sst.forEach(t),NDo=r(EY,` class
method.`),EY.forEach(t),jDo=i(zs),Gy=n(zs,"P",{});var wIe=s(Gy);DDo=r(wIe,"This class cannot be instantiated directly using "),Pfe=n(wIe,"CODE",{});var lst=s(Pfe);GDo=r(lst,"__init__()"),lst.forEach(t),ODo=r(wIe," (throws an error)."),wIe.forEach(t),VDo=i(zs),it=n(zs,"DIV",{class:!0});var OA=s(it);T(Oy.$$.fragment,OA),XDo=i(OA),Ife=n(OA,"P",{});var ist=s(Ife);zDo=r(ist,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ist.forEach(t),QDo=i(OA),Wi=n(OA,"P",{});var CY=s(Wi);WDo=r(CY,`Note:
Loading a model from its configuration file does `),qfe=n(CY,"STRONG",{});var dst=s(qfe);HDo=r(dst,"not"),dst.forEach(t),UDo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(CY,"A",{href:!0});var cst=s(MO);JDo=r(cst,"from_pretrained()"),cst.forEach(t),YDo=r(CY," to load the model weights."),CY.forEach(t),KDo=i(OA),T(m1.$$.fragment,OA),OA.forEach(t),ZDo=i(zs),ro=n(zs,"DIV",{class:!0});var na=s(ro);T(Vy.$$.fragment,na),eGo=i(na),Nfe=n(na,"P",{});var mst=s(Nfe);oGo=r(mst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mst.forEach(t),rGo=i(na),Sa=n(na,"P",{});var VA=s(Sa);tGo=r(VA,"The model class to instantiate is selected based on the "),jfe=n(VA,"CODE",{});var fst=s(jfe);aGo=r(fst,"model_type"),fst.forEach(t),nGo=r(VA,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(VA,"CODE",{});var gst=s(Dfe);sGo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),lGo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(VA,"CODE",{});var hst=s(Gfe);iGo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),dGo=r(VA,":"),VA.forEach(t),cGo=i(na),Ofe=n(na,"UL",{});var ust=s(Ofe);f1=n(ust,"LI",{});var l7e=s(f1);Vfe=n(l7e,"STRONG",{});var pst=s(Vfe);mGo=r(pst,"tapas"),pst.forEach(t),fGo=r(l7e," \u2014 "),EO=n(l7e,"A",{href:!0});var _st=s(EO);gGo=r(_st,"TapasForQuestionAnswering"),_st.forEach(t),hGo=r(l7e," (TAPAS model)"),l7e.forEach(t),ust.forEach(t),uGo=i(na),g1=n(na,"P",{});var i7e=s(g1);pGo=r(i7e,"The model is set in evaluation mode by default using "),Xfe=n(i7e,"CODE",{});var bst=s(Xfe);_Go=r(bst,"model.eval()"),bst.forEach(t),bGo=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(i7e,"CODE",{});var Fst=s(zfe);FGo=r(Fst,"model.train()"),Fst.forEach(t),i7e.forEach(t),vGo=i(na),T(h1.$$.fragment,na),na.forEach(t),zs.forEach(t),CBe=i(m),Hi=n(m,"H2",{class:!0});var AIe=s(Hi);u1=n(AIe,"A",{id:!0,class:!0,href:!0});var vst=s(u1);Qfe=n(vst,"SPAN",{});var Tst=s(Qfe);T(Xy.$$.fragment,Tst),Tst.forEach(t),vst.forEach(t),TGo=i(AIe),Wfe=n(AIe,"SPAN",{});var Mst=s(Wfe);MGo=r(Mst,"AutoModelForImageClassification"),Mst.forEach(t),AIe.forEach(t),wBe=i(m),qo=n(m,"DIV",{class:!0});var Qs=s(qo);T(zy.$$.fragment,Qs),EGo=i(Qs),Ui=n(Qs,"P",{});var wY=s(Ui);CGo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CO=n(wY,"A",{href:!0});var Est=s(CO);wGo=r(Est,"from_pretrained()"),Est.forEach(t),AGo=r(wY," class method or the "),wO=n(wY,"A",{href:!0});var Cst=s(wO);yGo=r(Cst,"from_config()"),Cst.forEach(t),LGo=r(wY,` class
method.`),wY.forEach(t),xGo=i(Qs),Qy=n(Qs,"P",{});var yIe=s(Qy);$Go=r(yIe,"This class cannot be instantiated directly using "),Hfe=n(yIe,"CODE",{});var wst=s(Hfe);kGo=r(wst,"__init__()"),wst.forEach(t),SGo=r(yIe," (throws an error)."),yIe.forEach(t),RGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var XA=s(dt);T(Wy.$$.fragment,XA),BGo=i(XA),Ufe=n(XA,"P",{});var Ast=s(Ufe);PGo=r(Ast,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ast.forEach(t),IGo=i(XA),Ji=n(XA,"P",{});var AY=s(Ji);qGo=r(AY,`Note:
Loading a model from its configuration file does `),Jfe=n(AY,"STRONG",{});var yst=s(Jfe);NGo=r(yst,"not"),yst.forEach(t),jGo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(AY,"A",{href:!0});var Lst=s(AO);DGo=r(Lst,"from_pretrained()"),Lst.forEach(t),GGo=r(AY," to load the model weights."),AY.forEach(t),OGo=i(XA),T(p1.$$.fragment,XA),XA.forEach(t),VGo=i(Qs),to=n(Qs,"DIV",{class:!0});var sa=s(to);T(Hy.$$.fragment,sa),XGo=i(sa),Yfe=n(sa,"P",{});var xst=s(Yfe);zGo=r(xst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xst.forEach(t),QGo=i(sa),Ra=n(sa,"P",{});var zA=s(Ra);WGo=r(zA,"The model class to instantiate is selected based on the "),Kfe=n(zA,"CODE",{});var $st=s(Kfe);HGo=r($st,"model_type"),$st.forEach(t),UGo=r(zA,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(zA,"CODE",{});var kst=s(Zfe);JGo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),YGo=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(zA,"CODE",{});var Sst=s(ege);KGo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),ZGo=r(zA,":"),zA.forEach(t),eOo=i(sa),Fe=n(sa,"UL",{});var Ee=s(Fe);_1=n(Ee,"LI",{});var d7e=s(_1);oge=n(d7e,"STRONG",{});var Rst=s(oge);oOo=r(Rst,"beit"),Rst.forEach(t),rOo=r(d7e," \u2014 "),yO=n(d7e,"A",{href:!0});var Bst=s(yO);tOo=r(Bst,"BeitForImageClassification"),Bst.forEach(t),aOo=r(d7e," (BEiT model)"),d7e.forEach(t),nOo=i(Ee),b1=n(Ee,"LI",{});var c7e=s(b1);rge=n(c7e,"STRONG",{});var Pst=s(rge);sOo=r(Pst,"convnext"),Pst.forEach(t),lOo=r(c7e," \u2014 "),LO=n(c7e,"A",{href:!0});var Ist=s(LO);iOo=r(Ist,"ConvNextForImageClassification"),Ist.forEach(t),dOo=r(c7e," (ConvNext model)"),c7e.forEach(t),cOo=i(Ee),F1=n(Ee,"LI",{});var m7e=s(F1);tge=n(m7e,"STRONG",{});var qst=s(tge);mOo=r(qst,"data2vec-vision"),qst.forEach(t),fOo=r(m7e," \u2014 "),xO=n(m7e,"A",{href:!0});var Nst=s(xO);gOo=r(Nst,"Data2VecVisionForImageClassification"),Nst.forEach(t),hOo=r(m7e," (Data2VecVision model)"),m7e.forEach(t),uOo=i(Ee),Ls=n(Ee,"LI",{});var y9=s(Ls);age=n(y9,"STRONG",{});var jst=s(age);pOo=r(jst,"deit"),jst.forEach(t),_Oo=r(y9," \u2014 "),$O=n(y9,"A",{href:!0});var Dst=s($O);bOo=r(Dst,"DeiTForImageClassification"),Dst.forEach(t),FOo=r(y9," or "),kO=n(y9,"A",{href:!0});var Gst=s(kO);vOo=r(Gst,"DeiTForImageClassificationWithTeacher"),Gst.forEach(t),TOo=r(y9," (DeiT model)"),y9.forEach(t),MOo=i(Ee),v1=n(Ee,"LI",{});var f7e=s(v1);nge=n(f7e,"STRONG",{});var Ost=s(nge);EOo=r(Ost,"imagegpt"),Ost.forEach(t),COo=r(f7e," \u2014 "),SO=n(f7e,"A",{href:!0});var Vst=s(SO);wOo=r(Vst,"ImageGPTForImageClassification"),Vst.forEach(t),AOo=r(f7e," (ImageGPT model)"),f7e.forEach(t),yOo=i(Ee),ct=n(Ee,"LI",{});var em=s(ct);sge=n(em,"STRONG",{});var Xst=s(sge);LOo=r(Xst,"perceiver"),Xst.forEach(t),xOo=r(em," \u2014 "),RO=n(em,"A",{href:!0});var zst=s(RO);$Oo=r(zst,"PerceiverForImageClassificationLearned"),zst.forEach(t),kOo=r(em," or "),BO=n(em,"A",{href:!0});var Qst=s(BO);SOo=r(Qst,"PerceiverForImageClassificationFourier"),Qst.forEach(t),ROo=r(em," or "),PO=n(em,"A",{href:!0});var Wst=s(PO);BOo=r(Wst,"PerceiverForImageClassificationConvProcessing"),Wst.forEach(t),POo=r(em," (Perceiver model)"),em.forEach(t),IOo=i(Ee),T1=n(Ee,"LI",{});var g7e=s(T1);lge=n(g7e,"STRONG",{});var Hst=s(lge);qOo=r(Hst,"poolformer"),Hst.forEach(t),NOo=r(g7e," \u2014 "),IO=n(g7e,"A",{href:!0});var Ust=s(IO);jOo=r(Ust,"PoolFormerForImageClassification"),Ust.forEach(t),DOo=r(g7e," (PoolFormer model)"),g7e.forEach(t),GOo=i(Ee),M1=n(Ee,"LI",{});var h7e=s(M1);ige=n(h7e,"STRONG",{});var Jst=s(ige);OOo=r(Jst,"regnet"),Jst.forEach(t),VOo=r(h7e," \u2014 "),qO=n(h7e,"A",{href:!0});var Yst=s(qO);XOo=r(Yst,"RegNetForImageClassification"),Yst.forEach(t),zOo=r(h7e," (RegNet model)"),h7e.forEach(t),QOo=i(Ee),E1=n(Ee,"LI",{});var u7e=s(E1);dge=n(u7e,"STRONG",{});var Kst=s(dge);WOo=r(Kst,"resnet"),Kst.forEach(t),HOo=r(u7e," \u2014 "),NO=n(u7e,"A",{href:!0});var Zst=s(NO);UOo=r(Zst,"ResNetForImageClassification"),Zst.forEach(t),JOo=r(u7e," (ResNet model)"),u7e.forEach(t),YOo=i(Ee),C1=n(Ee,"LI",{});var p7e=s(C1);cge=n(p7e,"STRONG",{});var elt=s(cge);KOo=r(elt,"segformer"),elt.forEach(t),ZOo=r(p7e," \u2014 "),jO=n(p7e,"A",{href:!0});var olt=s(jO);eVo=r(olt,"SegformerForImageClassification"),olt.forEach(t),oVo=r(p7e," (SegFormer model)"),p7e.forEach(t),rVo=i(Ee),w1=n(Ee,"LI",{});var _7e=s(w1);mge=n(_7e,"STRONG",{});var rlt=s(mge);tVo=r(rlt,"swin"),rlt.forEach(t),aVo=r(_7e," \u2014 "),DO=n(_7e,"A",{href:!0});var tlt=s(DO);nVo=r(tlt,"SwinForImageClassification"),tlt.forEach(t),sVo=r(_7e," (Swin model)"),_7e.forEach(t),lVo=i(Ee),A1=n(Ee,"LI",{});var b7e=s(A1);fge=n(b7e,"STRONG",{});var alt=s(fge);iVo=r(alt,"van"),alt.forEach(t),dVo=r(b7e," \u2014 "),GO=n(b7e,"A",{href:!0});var nlt=s(GO);cVo=r(nlt,"VanForImageClassification"),nlt.forEach(t),mVo=r(b7e," (VAN model)"),b7e.forEach(t),fVo=i(Ee),y1=n(Ee,"LI",{});var F7e=s(y1);gge=n(F7e,"STRONG",{});var slt=s(gge);gVo=r(slt,"vit"),slt.forEach(t),hVo=r(F7e," \u2014 "),OO=n(F7e,"A",{href:!0});var llt=s(OO);uVo=r(llt,"ViTForImageClassification"),llt.forEach(t),pVo=r(F7e," (ViT model)"),F7e.forEach(t),Ee.forEach(t),_Vo=i(sa),L1=n(sa,"P",{});var v7e=s(L1);bVo=r(v7e,"The model is set in evaluation mode by default using "),hge=n(v7e,"CODE",{});var ilt=s(hge);FVo=r(ilt,"model.eval()"),ilt.forEach(t),vVo=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(v7e,"CODE",{});var dlt=s(uge);TVo=r(dlt,"model.train()"),dlt.forEach(t),v7e.forEach(t),MVo=i(sa),T(x1.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),ABe=i(m),Yi=n(m,"H2",{class:!0});var LIe=s(Yi);$1=n(LIe,"A",{id:!0,class:!0,href:!0});var clt=s($1);pge=n(clt,"SPAN",{});var mlt=s(pge);T(Uy.$$.fragment,mlt),mlt.forEach(t),clt.forEach(t),EVo=i(LIe),_ge=n(LIe,"SPAN",{});var flt=s(_ge);CVo=r(flt,"AutoModelForVision2Seq"),flt.forEach(t),LIe.forEach(t),yBe=i(m),No=n(m,"DIV",{class:!0});var Ws=s(No);T(Jy.$$.fragment,Ws),wVo=i(Ws),Ki=n(Ws,"P",{});var yY=s(Ki);AVo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VO=n(yY,"A",{href:!0});var glt=s(VO);yVo=r(glt,"from_pretrained()"),glt.forEach(t),LVo=r(yY," class method or the "),XO=n(yY,"A",{href:!0});var hlt=s(XO);xVo=r(hlt,"from_config()"),hlt.forEach(t),$Vo=r(yY,` class
method.`),yY.forEach(t),kVo=i(Ws),Yy=n(Ws,"P",{});var xIe=s(Yy);SVo=r(xIe,"This class cannot be instantiated directly using "),bge=n(xIe,"CODE",{});var ult=s(bge);RVo=r(ult,"__init__()"),ult.forEach(t),BVo=r(xIe," (throws an error)."),xIe.forEach(t),PVo=i(Ws),mt=n(Ws,"DIV",{class:!0});var QA=s(mt);T(Ky.$$.fragment,QA),IVo=i(QA),Fge=n(QA,"P",{});var plt=s(Fge);qVo=r(plt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),plt.forEach(t),NVo=i(QA),Zi=n(QA,"P",{});var LY=s(Zi);jVo=r(LY,`Note:
Loading a model from its configuration file does `),vge=n(LY,"STRONG",{});var _lt=s(vge);DVo=r(_lt,"not"),_lt.forEach(t),GVo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(LY,"A",{href:!0});var blt=s(zO);OVo=r(blt,"from_pretrained()"),blt.forEach(t),VVo=r(LY," to load the model weights."),LY.forEach(t),XVo=i(QA),T(k1.$$.fragment,QA),QA.forEach(t),zVo=i(Ws),ao=n(Ws,"DIV",{class:!0});var la=s(ao);T(Zy.$$.fragment,la),QVo=i(la),Tge=n(la,"P",{});var Flt=s(Tge);WVo=r(Flt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Flt.forEach(t),HVo=i(la),Ba=n(la,"P",{});var WA=s(Ba);UVo=r(WA,"The model class to instantiate is selected based on the "),Mge=n(WA,"CODE",{});var vlt=s(Mge);JVo=r(vlt,"model_type"),vlt.forEach(t),YVo=r(WA,` property of the config object (either
passed as an argument or loaded from `),Ege=n(WA,"CODE",{});var Tlt=s(Ege);KVo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),ZVo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(WA,"CODE",{});var Mlt=s(Cge);eXo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),oXo=r(WA,":"),WA.forEach(t),rXo=i(la),wge=n(la,"UL",{});var Elt=s(wge);S1=n(Elt,"LI",{});var T7e=s(S1);Age=n(T7e,"STRONG",{});var Clt=s(Age);tXo=r(Clt,"vision-encoder-decoder"),Clt.forEach(t),aXo=r(T7e," \u2014 "),QO=n(T7e,"A",{href:!0});var wlt=s(QO);nXo=r(wlt,"VisionEncoderDecoderModel"),wlt.forEach(t),sXo=r(T7e," (Vision Encoder decoder model)"),T7e.forEach(t),Elt.forEach(t),lXo=i(la),R1=n(la,"P",{});var M7e=s(R1);iXo=r(M7e,"The model is set in evaluation mode by default using "),yge=n(M7e,"CODE",{});var Alt=s(yge);dXo=r(Alt,"model.eval()"),Alt.forEach(t),cXo=r(M7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(M7e,"CODE",{});var ylt=s(Lge);mXo=r(ylt,"model.train()"),ylt.forEach(t),M7e.forEach(t),fXo=i(la),T(B1.$$.fragment,la),la.forEach(t),Ws.forEach(t),LBe=i(m),ed=n(m,"H2",{class:!0});var $Ie=s(ed);P1=n($Ie,"A",{id:!0,class:!0,href:!0});var Llt=s(P1);xge=n(Llt,"SPAN",{});var xlt=s(xge);T(eL.$$.fragment,xlt),xlt.forEach(t),Llt.forEach(t),gXo=i($Ie),$ge=n($Ie,"SPAN",{});var $lt=s($ge);hXo=r($lt,"AutoModelForAudioClassification"),$lt.forEach(t),$Ie.forEach(t),xBe=i(m),jo=n(m,"DIV",{class:!0});var Hs=s(jo);T(oL.$$.fragment,Hs),uXo=i(Hs),od=n(Hs,"P",{});var xY=s(od);pXo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WO=n(xY,"A",{href:!0});var klt=s(WO);_Xo=r(klt,"from_pretrained()"),klt.forEach(t),bXo=r(xY," class method or the "),HO=n(xY,"A",{href:!0});var Slt=s(HO);FXo=r(Slt,"from_config()"),Slt.forEach(t),vXo=r(xY,` class
method.`),xY.forEach(t),TXo=i(Hs),rL=n(Hs,"P",{});var kIe=s(rL);MXo=r(kIe,"This class cannot be instantiated directly using "),kge=n(kIe,"CODE",{});var Rlt=s(kge);EXo=r(Rlt,"__init__()"),Rlt.forEach(t),CXo=r(kIe," (throws an error)."),kIe.forEach(t),wXo=i(Hs),ft=n(Hs,"DIV",{class:!0});var HA=s(ft);T(tL.$$.fragment,HA),AXo=i(HA),Sge=n(HA,"P",{});var Blt=s(Sge);yXo=r(Blt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Blt.forEach(t),LXo=i(HA),rd=n(HA,"P",{});var $Y=s(rd);xXo=r($Y,`Note:
Loading a model from its configuration file does `),Rge=n($Y,"STRONG",{});var Plt=s(Rge);$Xo=r(Plt,"not"),Plt.forEach(t),kXo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n($Y,"A",{href:!0});var Ilt=s(UO);SXo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),RXo=r($Y," to load the model weights."),$Y.forEach(t),BXo=i(HA),T(I1.$$.fragment,HA),HA.forEach(t),PXo=i(Hs),no=n(Hs,"DIV",{class:!0});var ia=s(no);T(aL.$$.fragment,ia),IXo=i(ia),Bge=n(ia,"P",{});var qlt=s(Bge);qXo=r(qlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qlt.forEach(t),NXo=i(ia),Pa=n(ia,"P",{});var UA=s(Pa);jXo=r(UA,"The model class to instantiate is selected based on the "),Pge=n(UA,"CODE",{});var Nlt=s(Pge);DXo=r(Nlt,"model_type"),Nlt.forEach(t),GXo=r(UA,` property of the config object (either
passed as an argument or loaded from `),Ige=n(UA,"CODE",{});var jlt=s(Ige);OXo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),VXo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(UA,"CODE",{});var Dlt=s(qge);XXo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),zXo=r(UA,":"),UA.forEach(t),QXo=i(ia),qe=n(ia,"UL",{});var po=s(qe);q1=n(po,"LI",{});var E7e=s(q1);Nge=n(E7e,"STRONG",{});var Glt=s(Nge);WXo=r(Glt,"data2vec-audio"),Glt.forEach(t),HXo=r(E7e," \u2014 "),JO=n(E7e,"A",{href:!0});var Olt=s(JO);UXo=r(Olt,"Data2VecAudioForSequenceClassification"),Olt.forEach(t),JXo=r(E7e," (Data2VecAudio model)"),E7e.forEach(t),YXo=i(po),N1=n(po,"LI",{});var C7e=s(N1);jge=n(C7e,"STRONG",{});var Vlt=s(jge);KXo=r(Vlt,"hubert"),Vlt.forEach(t),ZXo=r(C7e," \u2014 "),YO=n(C7e,"A",{href:!0});var Xlt=s(YO);ezo=r(Xlt,"HubertForSequenceClassification"),Xlt.forEach(t),ozo=r(C7e," (Hubert model)"),C7e.forEach(t),rzo=i(po),j1=n(po,"LI",{});var w7e=s(j1);Dge=n(w7e,"STRONG",{});var zlt=s(Dge);tzo=r(zlt,"sew"),zlt.forEach(t),azo=r(w7e," \u2014 "),KO=n(w7e,"A",{href:!0});var Qlt=s(KO);nzo=r(Qlt,"SEWForSequenceClassification"),Qlt.forEach(t),szo=r(w7e," (SEW model)"),w7e.forEach(t),lzo=i(po),D1=n(po,"LI",{});var A7e=s(D1);Gge=n(A7e,"STRONG",{});var Wlt=s(Gge);izo=r(Wlt,"sew-d"),Wlt.forEach(t),dzo=r(A7e," \u2014 "),ZO=n(A7e,"A",{href:!0});var Hlt=s(ZO);czo=r(Hlt,"SEWDForSequenceClassification"),Hlt.forEach(t),mzo=r(A7e," (SEW-D model)"),A7e.forEach(t),fzo=i(po),G1=n(po,"LI",{});var y7e=s(G1);Oge=n(y7e,"STRONG",{});var Ult=s(Oge);gzo=r(Ult,"unispeech"),Ult.forEach(t),hzo=r(y7e," \u2014 "),eV=n(y7e,"A",{href:!0});var Jlt=s(eV);uzo=r(Jlt,"UniSpeechForSequenceClassification"),Jlt.forEach(t),pzo=r(y7e," (UniSpeech model)"),y7e.forEach(t),_zo=i(po),O1=n(po,"LI",{});var L7e=s(O1);Vge=n(L7e,"STRONG",{});var Ylt=s(Vge);bzo=r(Ylt,"unispeech-sat"),Ylt.forEach(t),Fzo=r(L7e," \u2014 "),oV=n(L7e,"A",{href:!0});var Klt=s(oV);vzo=r(Klt,"UniSpeechSatForSequenceClassification"),Klt.forEach(t),Tzo=r(L7e," (UniSpeechSat model)"),L7e.forEach(t),Mzo=i(po),V1=n(po,"LI",{});var x7e=s(V1);Xge=n(x7e,"STRONG",{});var Zlt=s(Xge);Ezo=r(Zlt,"wav2vec2"),Zlt.forEach(t),Czo=r(x7e," \u2014 "),rV=n(x7e,"A",{href:!0});var eit=s(rV);wzo=r(eit,"Wav2Vec2ForSequenceClassification"),eit.forEach(t),Azo=r(x7e," (Wav2Vec2 model)"),x7e.forEach(t),yzo=i(po),X1=n(po,"LI",{});var $7e=s(X1);zge=n($7e,"STRONG",{});var oit=s(zge);Lzo=r(oit,"wavlm"),oit.forEach(t),xzo=r($7e," \u2014 "),tV=n($7e,"A",{href:!0});var rit=s(tV);$zo=r(rit,"WavLMForSequenceClassification"),rit.forEach(t),kzo=r($7e," (WavLM model)"),$7e.forEach(t),po.forEach(t),Szo=i(ia),z1=n(ia,"P",{});var k7e=s(z1);Rzo=r(k7e,"The model is set in evaluation mode by default using "),Qge=n(k7e,"CODE",{});var tit=s(Qge);Bzo=r(tit,"model.eval()"),tit.forEach(t),Pzo=r(k7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(k7e,"CODE",{});var ait=s(Wge);Izo=r(ait,"model.train()"),ait.forEach(t),k7e.forEach(t),qzo=i(ia),T(Q1.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),$Be=i(m),td=n(m,"H2",{class:!0});var SIe=s(td);W1=n(SIe,"A",{id:!0,class:!0,href:!0});var nit=s(W1);Hge=n(nit,"SPAN",{});var sit=s(Hge);T(nL.$$.fragment,sit),sit.forEach(t),nit.forEach(t),Nzo=i(SIe),Uge=n(SIe,"SPAN",{});var lit=s(Uge);jzo=r(lit,"AutoModelForAudioFrameClassification"),lit.forEach(t),SIe.forEach(t),kBe=i(m),Do=n(m,"DIV",{class:!0});var Us=s(Do);T(sL.$$.fragment,Us),Dzo=i(Us),ad=n(Us,"P",{});var kY=s(ad);Gzo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aV=n(kY,"A",{href:!0});var iit=s(aV);Ozo=r(iit,"from_pretrained()"),iit.forEach(t),Vzo=r(kY," class method or the "),nV=n(kY,"A",{href:!0});var dit=s(nV);Xzo=r(dit,"from_config()"),dit.forEach(t),zzo=r(kY,` class
method.`),kY.forEach(t),Qzo=i(Us),lL=n(Us,"P",{});var RIe=s(lL);Wzo=r(RIe,"This class cannot be instantiated directly using "),Jge=n(RIe,"CODE",{});var cit=s(Jge);Hzo=r(cit,"__init__()"),cit.forEach(t),Uzo=r(RIe," (throws an error)."),RIe.forEach(t),Jzo=i(Us),gt=n(Us,"DIV",{class:!0});var JA=s(gt);T(iL.$$.fragment,JA),Yzo=i(JA),Yge=n(JA,"P",{});var mit=s(Yge);Kzo=r(mit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mit.forEach(t),Zzo=i(JA),nd=n(JA,"P",{});var SY=s(nd);eQo=r(SY,`Note:
Loading a model from its configuration file does `),Kge=n(SY,"STRONG",{});var fit=s(Kge);oQo=r(fit,"not"),fit.forEach(t),rQo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(SY,"A",{href:!0});var git=s(sV);tQo=r(git,"from_pretrained()"),git.forEach(t),aQo=r(SY," to load the model weights."),SY.forEach(t),nQo=i(JA),T(H1.$$.fragment,JA),JA.forEach(t),sQo=i(Us),so=n(Us,"DIV",{class:!0});var da=s(so);T(dL.$$.fragment,da),lQo=i(da),Zge=n(da,"P",{});var hit=s(Zge);iQo=r(hit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hit.forEach(t),dQo=i(da),Ia=n(da,"P",{});var YA=s(Ia);cQo=r(YA,"The model class to instantiate is selected based on the "),ehe=n(YA,"CODE",{});var uit=s(ehe);mQo=r(uit,"model_type"),uit.forEach(t),fQo=r(YA,` property of the config object (either
passed as an argument or loaded from `),ohe=n(YA,"CODE",{});var pit=s(ohe);gQo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),hQo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(YA,"CODE",{});var _it=s(rhe);uQo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),pQo=r(YA,":"),YA.forEach(t),_Qo=i(da),qa=n(da,"UL",{});var KA=s(qa);U1=n(KA,"LI",{});var S7e=s(U1);the=n(S7e,"STRONG",{});var bit=s(the);bQo=r(bit,"data2vec-audio"),bit.forEach(t),FQo=r(S7e," \u2014 "),lV=n(S7e,"A",{href:!0});var Fit=s(lV);vQo=r(Fit,"Data2VecAudioForAudioFrameClassification"),Fit.forEach(t),TQo=r(S7e," (Data2VecAudio model)"),S7e.forEach(t),MQo=i(KA),J1=n(KA,"LI",{});var R7e=s(J1);ahe=n(R7e,"STRONG",{});var vit=s(ahe);EQo=r(vit,"unispeech-sat"),vit.forEach(t),CQo=r(R7e," \u2014 "),iV=n(R7e,"A",{href:!0});var Tit=s(iV);wQo=r(Tit,"UniSpeechSatForAudioFrameClassification"),Tit.forEach(t),AQo=r(R7e," (UniSpeechSat model)"),R7e.forEach(t),yQo=i(KA),Y1=n(KA,"LI",{});var B7e=s(Y1);nhe=n(B7e,"STRONG",{});var Mit=s(nhe);LQo=r(Mit,"wav2vec2"),Mit.forEach(t),xQo=r(B7e," \u2014 "),dV=n(B7e,"A",{href:!0});var Eit=s(dV);$Qo=r(Eit,"Wav2Vec2ForAudioFrameClassification"),Eit.forEach(t),kQo=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),SQo=i(KA),K1=n(KA,"LI",{});var P7e=s(K1);she=n(P7e,"STRONG",{});var Cit=s(she);RQo=r(Cit,"wavlm"),Cit.forEach(t),BQo=r(P7e," \u2014 "),cV=n(P7e,"A",{href:!0});var wit=s(cV);PQo=r(wit,"WavLMForAudioFrameClassification"),wit.forEach(t),IQo=r(P7e," (WavLM model)"),P7e.forEach(t),KA.forEach(t),qQo=i(da),Z1=n(da,"P",{});var I7e=s(Z1);NQo=r(I7e,"The model is set in evaluation mode by default using "),lhe=n(I7e,"CODE",{});var Ait=s(lhe);jQo=r(Ait,"model.eval()"),Ait.forEach(t),DQo=r(I7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(I7e,"CODE",{});var yit=s(ihe);GQo=r(yit,"model.train()"),yit.forEach(t),I7e.forEach(t),OQo=i(da),T(eT.$$.fragment,da),da.forEach(t),Us.forEach(t),SBe=i(m),sd=n(m,"H2",{class:!0});var BIe=s(sd);oT=n(BIe,"A",{id:!0,class:!0,href:!0});var Lit=s(oT);dhe=n(Lit,"SPAN",{});var xit=s(dhe);T(cL.$$.fragment,xit),xit.forEach(t),Lit.forEach(t),VQo=i(BIe),che=n(BIe,"SPAN",{});var $it=s(che);XQo=r($it,"AutoModelForCTC"),$it.forEach(t),BIe.forEach(t),RBe=i(m),Go=n(m,"DIV",{class:!0});var Js=s(Go);T(mL.$$.fragment,Js),zQo=i(Js),ld=n(Js,"P",{});var RY=s(ld);QQo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mV=n(RY,"A",{href:!0});var kit=s(mV);WQo=r(kit,"from_pretrained()"),kit.forEach(t),HQo=r(RY," class method or the "),fV=n(RY,"A",{href:!0});var Sit=s(fV);UQo=r(Sit,"from_config()"),Sit.forEach(t),JQo=r(RY,` class
method.`),RY.forEach(t),YQo=i(Js),fL=n(Js,"P",{});var PIe=s(fL);KQo=r(PIe,"This class cannot be instantiated directly using "),mhe=n(PIe,"CODE",{});var Rit=s(mhe);ZQo=r(Rit,"__init__()"),Rit.forEach(t),eWo=r(PIe," (throws an error)."),PIe.forEach(t),oWo=i(Js),ht=n(Js,"DIV",{class:!0});var ZA=s(ht);T(gL.$$.fragment,ZA),rWo=i(ZA),fhe=n(ZA,"P",{});var Bit=s(fhe);tWo=r(Bit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bit.forEach(t),aWo=i(ZA),id=n(ZA,"P",{});var BY=s(id);nWo=r(BY,`Note:
Loading a model from its configuration file does `),ghe=n(BY,"STRONG",{});var Pit=s(ghe);sWo=r(Pit,"not"),Pit.forEach(t),lWo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(BY,"A",{href:!0});var Iit=s(gV);iWo=r(Iit,"from_pretrained()"),Iit.forEach(t),dWo=r(BY," to load the model weights."),BY.forEach(t),cWo=i(ZA),T(rT.$$.fragment,ZA),ZA.forEach(t),mWo=i(Js),lo=n(Js,"DIV",{class:!0});var ca=s(lo);T(hL.$$.fragment,ca),fWo=i(ca),hhe=n(ca,"P",{});var qit=s(hhe);gWo=r(qit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qit.forEach(t),hWo=i(ca),Na=n(ca,"P",{});var e0=s(Na);uWo=r(e0,"The model class to instantiate is selected based on the "),uhe=n(e0,"CODE",{});var Nit=s(uhe);pWo=r(Nit,"model_type"),Nit.forEach(t),_Wo=r(e0,` property of the config object (either
passed as an argument or loaded from `),phe=n(e0,"CODE",{});var jit=s(phe);bWo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),FWo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(e0,"CODE",{});var Dit=s(_he);vWo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),TWo=r(e0,":"),e0.forEach(t),MWo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);tT=n(_o,"LI",{});var q7e=s(tT);bhe=n(q7e,"STRONG",{});var Git=s(bhe);EWo=r(Git,"data2vec-audio"),Git.forEach(t),CWo=r(q7e," \u2014 "),hV=n(q7e,"A",{href:!0});var Oit=s(hV);wWo=r(Oit,"Data2VecAudioForCTC"),Oit.forEach(t),AWo=r(q7e," (Data2VecAudio model)"),q7e.forEach(t),yWo=i(_o),aT=n(_o,"LI",{});var N7e=s(aT);Fhe=n(N7e,"STRONG",{});var Vit=s(Fhe);LWo=r(Vit,"hubert"),Vit.forEach(t),xWo=r(N7e," \u2014 "),uV=n(N7e,"A",{href:!0});var Xit=s(uV);$Wo=r(Xit,"HubertForCTC"),Xit.forEach(t),kWo=r(N7e," (Hubert model)"),N7e.forEach(t),SWo=i(_o),nT=n(_o,"LI",{});var j7e=s(nT);vhe=n(j7e,"STRONG",{});var zit=s(vhe);RWo=r(zit,"sew"),zit.forEach(t),BWo=r(j7e," \u2014 "),pV=n(j7e,"A",{href:!0});var Qit=s(pV);PWo=r(Qit,"SEWForCTC"),Qit.forEach(t),IWo=r(j7e," (SEW model)"),j7e.forEach(t),qWo=i(_o),sT=n(_o,"LI",{});var D7e=s(sT);The=n(D7e,"STRONG",{});var Wit=s(The);NWo=r(Wit,"sew-d"),Wit.forEach(t),jWo=r(D7e," \u2014 "),_V=n(D7e,"A",{href:!0});var Hit=s(_V);DWo=r(Hit,"SEWDForCTC"),Hit.forEach(t),GWo=r(D7e," (SEW-D model)"),D7e.forEach(t),OWo=i(_o),lT=n(_o,"LI",{});var G7e=s(lT);Mhe=n(G7e,"STRONG",{});var Uit=s(Mhe);VWo=r(Uit,"unispeech"),Uit.forEach(t),XWo=r(G7e," \u2014 "),bV=n(G7e,"A",{href:!0});var Jit=s(bV);zWo=r(Jit,"UniSpeechForCTC"),Jit.forEach(t),QWo=r(G7e," (UniSpeech model)"),G7e.forEach(t),WWo=i(_o),iT=n(_o,"LI",{});var O7e=s(iT);Ehe=n(O7e,"STRONG",{});var Yit=s(Ehe);HWo=r(Yit,"unispeech-sat"),Yit.forEach(t),UWo=r(O7e," \u2014 "),FV=n(O7e,"A",{href:!0});var Kit=s(FV);JWo=r(Kit,"UniSpeechSatForCTC"),Kit.forEach(t),YWo=r(O7e," (UniSpeechSat model)"),O7e.forEach(t),KWo=i(_o),dT=n(_o,"LI",{});var V7e=s(dT);Che=n(V7e,"STRONG",{});var Zit=s(Che);ZWo=r(Zit,"wav2vec2"),Zit.forEach(t),eHo=r(V7e," \u2014 "),vV=n(V7e,"A",{href:!0});var edt=s(vV);oHo=r(edt,"Wav2Vec2ForCTC"),edt.forEach(t),rHo=r(V7e," (Wav2Vec2 model)"),V7e.forEach(t),tHo=i(_o),cT=n(_o,"LI",{});var X7e=s(cT);whe=n(X7e,"STRONG",{});var odt=s(whe);aHo=r(odt,"wavlm"),odt.forEach(t),nHo=r(X7e," \u2014 "),TV=n(X7e,"A",{href:!0});var rdt=s(TV);sHo=r(rdt,"WavLMForCTC"),rdt.forEach(t),lHo=r(X7e," (WavLM model)"),X7e.forEach(t),_o.forEach(t),iHo=i(ca),mT=n(ca,"P",{});var z7e=s(mT);dHo=r(z7e,"The model is set in evaluation mode by default using "),Ahe=n(z7e,"CODE",{});var tdt=s(Ahe);cHo=r(tdt,"model.eval()"),tdt.forEach(t),mHo=r(z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(z7e,"CODE",{});var adt=s(yhe);fHo=r(adt,"model.train()"),adt.forEach(t),z7e.forEach(t),gHo=i(ca),T(fT.$$.fragment,ca),ca.forEach(t),Js.forEach(t),BBe=i(m),dd=n(m,"H2",{class:!0});var IIe=s(dd);gT=n(IIe,"A",{id:!0,class:!0,href:!0});var ndt=s(gT);Lhe=n(ndt,"SPAN",{});var sdt=s(Lhe);T(uL.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),hHo=i(IIe),xhe=n(IIe,"SPAN",{});var ldt=s(xhe);uHo=r(ldt,"AutoModelForSpeechSeq2Seq"),ldt.forEach(t),IIe.forEach(t),PBe=i(m),Oo=n(m,"DIV",{class:!0});var Ys=s(Oo);T(pL.$$.fragment,Ys),pHo=i(Ys),cd=n(Ys,"P",{});var PY=s(cd);_Ho=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MV=n(PY,"A",{href:!0});var idt=s(MV);bHo=r(idt,"from_pretrained()"),idt.forEach(t),FHo=r(PY," class method or the "),EV=n(PY,"A",{href:!0});var ddt=s(EV);vHo=r(ddt,"from_config()"),ddt.forEach(t),THo=r(PY,` class
method.`),PY.forEach(t),MHo=i(Ys),_L=n(Ys,"P",{});var qIe=s(_L);EHo=r(qIe,"This class cannot be instantiated directly using "),$he=n(qIe,"CODE",{});var cdt=s($he);CHo=r(cdt,"__init__()"),cdt.forEach(t),wHo=r(qIe," (throws an error)."),qIe.forEach(t),AHo=i(Ys),ut=n(Ys,"DIV",{class:!0});var o0=s(ut);T(bL.$$.fragment,o0),yHo=i(o0),khe=n(o0,"P",{});var mdt=s(khe);LHo=r(mdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mdt.forEach(t),xHo=i(o0),md=n(o0,"P",{});var IY=s(md);$Ho=r(IY,`Note:
Loading a model from its configuration file does `),She=n(IY,"STRONG",{});var fdt=s(She);kHo=r(fdt,"not"),fdt.forEach(t),SHo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(IY,"A",{href:!0});var gdt=s(CV);RHo=r(gdt,"from_pretrained()"),gdt.forEach(t),BHo=r(IY," to load the model weights."),IY.forEach(t),PHo=i(o0),T(hT.$$.fragment,o0),o0.forEach(t),IHo=i(Ys),io=n(Ys,"DIV",{class:!0});var ma=s(io);T(FL.$$.fragment,ma),qHo=i(ma),Rhe=n(ma,"P",{});var hdt=s(Rhe);NHo=r(hdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hdt.forEach(t),jHo=i(ma),ja=n(ma,"P",{});var r0=s(ja);DHo=r(r0,"The model class to instantiate is selected based on the "),Bhe=n(r0,"CODE",{});var udt=s(Bhe);GHo=r(udt,"model_type"),udt.forEach(t),OHo=r(r0,` property of the config object (either
passed as an argument or loaded from `),Phe=n(r0,"CODE",{});var pdt=s(Phe);VHo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),XHo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(r0,"CODE",{});var _dt=s(Ihe);zHo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),QHo=r(r0,":"),r0.forEach(t),WHo=i(ma),vL=n(ma,"UL",{});var NIe=s(vL);uT=n(NIe,"LI",{});var Q7e=s(uT);qhe=n(Q7e,"STRONG",{});var bdt=s(qhe);HHo=r(bdt,"speech-encoder-decoder"),bdt.forEach(t),UHo=r(Q7e," \u2014 "),wV=n(Q7e,"A",{href:!0});var Fdt=s(wV);JHo=r(Fdt,"SpeechEncoderDecoderModel"),Fdt.forEach(t),YHo=r(Q7e," (Speech Encoder decoder model)"),Q7e.forEach(t),KHo=i(NIe),pT=n(NIe,"LI",{});var W7e=s(pT);Nhe=n(W7e,"STRONG",{});var vdt=s(Nhe);ZHo=r(vdt,"speech_to_text"),vdt.forEach(t),eUo=r(W7e," \u2014 "),AV=n(W7e,"A",{href:!0});var Tdt=s(AV);oUo=r(Tdt,"Speech2TextForConditionalGeneration"),Tdt.forEach(t),rUo=r(W7e," (Speech2Text model)"),W7e.forEach(t),NIe.forEach(t),tUo=i(ma),_T=n(ma,"P",{});var H7e=s(_T);aUo=r(H7e,"The model is set in evaluation mode by default using "),jhe=n(H7e,"CODE",{});var Mdt=s(jhe);nUo=r(Mdt,"model.eval()"),Mdt.forEach(t),sUo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(H7e,"CODE",{});var Edt=s(Dhe);lUo=r(Edt,"model.train()"),Edt.forEach(t),H7e.forEach(t),iUo=i(ma),T(bT.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),IBe=i(m),fd=n(m,"H2",{class:!0});var jIe=s(fd);FT=n(jIe,"A",{id:!0,class:!0,href:!0});var Cdt=s(FT);Ghe=n(Cdt,"SPAN",{});var wdt=s(Ghe);T(TL.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),dUo=i(jIe),Ohe=n(jIe,"SPAN",{});var Adt=s(Ohe);cUo=r(Adt,"AutoModelForAudioXVector"),Adt.forEach(t),jIe.forEach(t),qBe=i(m),Vo=n(m,"DIV",{class:!0});var Ks=s(Vo);T(ML.$$.fragment,Ks),mUo=i(Ks),gd=n(Ks,"P",{});var qY=s(gd);fUo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yV=n(qY,"A",{href:!0});var ydt=s(yV);gUo=r(ydt,"from_pretrained()"),ydt.forEach(t),hUo=r(qY," class method or the "),LV=n(qY,"A",{href:!0});var Ldt=s(LV);uUo=r(Ldt,"from_config()"),Ldt.forEach(t),pUo=r(qY,` class
method.`),qY.forEach(t),_Uo=i(Ks),EL=n(Ks,"P",{});var DIe=s(EL);bUo=r(DIe,"This class cannot be instantiated directly using "),Vhe=n(DIe,"CODE",{});var xdt=s(Vhe);FUo=r(xdt,"__init__()"),xdt.forEach(t),vUo=r(DIe," (throws an error)."),DIe.forEach(t),TUo=i(Ks),pt=n(Ks,"DIV",{class:!0});var t0=s(pt);T(CL.$$.fragment,t0),MUo=i(t0),Xhe=n(t0,"P",{});var $dt=s(Xhe);EUo=r($dt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$dt.forEach(t),CUo=i(t0),hd=n(t0,"P",{});var NY=s(hd);wUo=r(NY,`Note:
Loading a model from its configuration file does `),zhe=n(NY,"STRONG",{});var kdt=s(zhe);AUo=r(kdt,"not"),kdt.forEach(t),yUo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(NY,"A",{href:!0});var Sdt=s(xV);LUo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),xUo=r(NY," to load the model weights."),NY.forEach(t),$Uo=i(t0),T(vT.$$.fragment,t0),t0.forEach(t),kUo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(wL.$$.fragment,fa),SUo=i(fa),Qhe=n(fa,"P",{});var Rdt=s(Qhe);RUo=r(Rdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rdt.forEach(t),BUo=i(fa),Da=n(fa,"P",{});var a0=s(Da);PUo=r(a0,"The model class to instantiate is selected based on the "),Whe=n(a0,"CODE",{});var Bdt=s(Whe);IUo=r(Bdt,"model_type"),Bdt.forEach(t),qUo=r(a0,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(a0,"CODE",{});var Pdt=s(Hhe);NUo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),jUo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(a0,"CODE",{});var Idt=s(Uhe);DUo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),GUo=r(a0,":"),a0.forEach(t),OUo=i(fa),Ga=n(fa,"UL",{});var n0=s(Ga);TT=n(n0,"LI",{});var U7e=s(TT);Jhe=n(U7e,"STRONG",{});var qdt=s(Jhe);VUo=r(qdt,"data2vec-audio"),qdt.forEach(t),XUo=r(U7e," \u2014 "),$V=n(U7e,"A",{href:!0});var Ndt=s($V);zUo=r(Ndt,"Data2VecAudioForXVector"),Ndt.forEach(t),QUo=r(U7e," (Data2VecAudio model)"),U7e.forEach(t),WUo=i(n0),MT=n(n0,"LI",{});var J7e=s(MT);Yhe=n(J7e,"STRONG",{});var jdt=s(Yhe);HUo=r(jdt,"unispeech-sat"),jdt.forEach(t),UUo=r(J7e," \u2014 "),kV=n(J7e,"A",{href:!0});var Ddt=s(kV);JUo=r(Ddt,"UniSpeechSatForXVector"),Ddt.forEach(t),YUo=r(J7e," (UniSpeechSat model)"),J7e.forEach(t),KUo=i(n0),ET=n(n0,"LI",{});var Y7e=s(ET);Khe=n(Y7e,"STRONG",{});var Gdt=s(Khe);ZUo=r(Gdt,"wav2vec2"),Gdt.forEach(t),eJo=r(Y7e," \u2014 "),SV=n(Y7e,"A",{href:!0});var Odt=s(SV);oJo=r(Odt,"Wav2Vec2ForXVector"),Odt.forEach(t),rJo=r(Y7e," (Wav2Vec2 model)"),Y7e.forEach(t),tJo=i(n0),CT=n(n0,"LI",{});var K7e=s(CT);Zhe=n(K7e,"STRONG",{});var Vdt=s(Zhe);aJo=r(Vdt,"wavlm"),Vdt.forEach(t),nJo=r(K7e," \u2014 "),RV=n(K7e,"A",{href:!0});var Xdt=s(RV);sJo=r(Xdt,"WavLMForXVector"),Xdt.forEach(t),lJo=r(K7e," (WavLM model)"),K7e.forEach(t),n0.forEach(t),iJo=i(fa),wT=n(fa,"P",{});var Z7e=s(wT);dJo=r(Z7e,"The model is set in evaluation mode by default using "),eue=n(Z7e,"CODE",{});var zdt=s(eue);cJo=r(zdt,"model.eval()"),zdt.forEach(t),mJo=r(Z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(Z7e,"CODE",{});var Qdt=s(oue);fJo=r(Qdt,"model.train()"),Qdt.forEach(t),Z7e.forEach(t),gJo=i(fa),T(AT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),NBe=i(m),ud=n(m,"H2",{class:!0});var GIe=s(ud);yT=n(GIe,"A",{id:!0,class:!0,href:!0});var Wdt=s(yT);rue=n(Wdt,"SPAN",{});var Hdt=s(rue);T(AL.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),hJo=i(GIe),tue=n(GIe,"SPAN",{});var Udt=s(tue);uJo=r(Udt,"AutoModelForMaskedImageModeling"),Udt.forEach(t),GIe.forEach(t),jBe=i(m),Xo=n(m,"DIV",{class:!0});var Zs=s(Xo);T(yL.$$.fragment,Zs),pJo=i(Zs),pd=n(Zs,"P",{});var jY=s(pd);_Jo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BV=n(jY,"A",{href:!0});var Jdt=s(BV);bJo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),FJo=r(jY," class method or the "),PV=n(jY,"A",{href:!0});var Ydt=s(PV);vJo=r(Ydt,"from_config()"),Ydt.forEach(t),TJo=r(jY,` class
method.`),jY.forEach(t),MJo=i(Zs),LL=n(Zs,"P",{});var OIe=s(LL);EJo=r(OIe,"This class cannot be instantiated directly using "),aue=n(OIe,"CODE",{});var Kdt=s(aue);CJo=r(Kdt,"__init__()"),Kdt.forEach(t),wJo=r(OIe," (throws an error)."),OIe.forEach(t),AJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var s0=s(_t);T(xL.$$.fragment,s0),yJo=i(s0),nue=n(s0,"P",{});var Zdt=s(nue);LJo=r(Zdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zdt.forEach(t),xJo=i(s0),_d=n(s0,"P",{});var DY=s(_d);$Jo=r(DY,`Note:
Loading a model from its configuration file does `),sue=n(DY,"STRONG",{});var ect=s(sue);kJo=r(ect,"not"),ect.forEach(t),SJo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(DY,"A",{href:!0});var oct=s(IV);RJo=r(oct,"from_pretrained()"),oct.forEach(t),BJo=r(DY," to load the model weights."),DY.forEach(t),PJo=i(s0),T(LT.$$.fragment,s0),s0.forEach(t),IJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T($L.$$.fragment,ga),qJo=i(ga),lue=n(ga,"P",{});var rct=s(lue);NJo=r(rct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rct.forEach(t),jJo=i(ga),Oa=n(ga,"P",{});var l0=s(Oa);DJo=r(l0,"The model class to instantiate is selected based on the "),iue=n(l0,"CODE",{});var tct=s(iue);GJo=r(tct,"model_type"),tct.forEach(t),OJo=r(l0,` property of the config object (either
passed as an argument or loaded from `),due=n(l0,"CODE",{});var act=s(due);VJo=r(act,"pretrained_model_name_or_path"),act.forEach(t),XJo=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(l0,"CODE",{});var nct=s(cue);zJo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),QJo=r(l0,":"),l0.forEach(t),WJo=i(ga),bd=n(ga,"UL",{});var GY=s(bd);xT=n(GY,"LI",{});var exe=s(xT);mue=n(exe,"STRONG",{});var sct=s(mue);HJo=r(sct,"deit"),sct.forEach(t),UJo=r(exe," \u2014 "),qV=n(exe,"A",{href:!0});var lct=s(qV);JJo=r(lct,"DeiTForMaskedImageModeling"),lct.forEach(t),YJo=r(exe," (DeiT model)"),exe.forEach(t),KJo=i(GY),$T=n(GY,"LI",{});var oxe=s($T);fue=n(oxe,"STRONG",{});var ict=s(fue);ZJo=r(ict,"swin"),ict.forEach(t),eYo=r(oxe," \u2014 "),NV=n(oxe,"A",{href:!0});var dct=s(NV);oYo=r(dct,"SwinForMaskedImageModeling"),dct.forEach(t),rYo=r(oxe," (Swin model)"),oxe.forEach(t),tYo=i(GY),kT=n(GY,"LI",{});var rxe=s(kT);gue=n(rxe,"STRONG",{});var cct=s(gue);aYo=r(cct,"vit"),cct.forEach(t),nYo=r(rxe," \u2014 "),jV=n(rxe,"A",{href:!0});var mct=s(jV);sYo=r(mct,"ViTForMaskedImageModeling"),mct.forEach(t),lYo=r(rxe," (ViT model)"),rxe.forEach(t),GY.forEach(t),iYo=i(ga),ST=n(ga,"P",{});var txe=s(ST);dYo=r(txe,"The model is set in evaluation mode by default using "),hue=n(txe,"CODE",{});var fct=s(hue);cYo=r(fct,"model.eval()"),fct.forEach(t),mYo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(txe,"CODE",{});var gct=s(uue);fYo=r(gct,"model.train()"),gct.forEach(t),txe.forEach(t),gYo=i(ga),T(RT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),DBe=i(m),Fd=n(m,"H2",{class:!0});var VIe=s(Fd);BT=n(VIe,"A",{id:!0,class:!0,href:!0});var hct=s(BT);pue=n(hct,"SPAN",{});var uct=s(pue);T(kL.$$.fragment,uct),uct.forEach(t),hct.forEach(t),hYo=i(VIe),_ue=n(VIe,"SPAN",{});var pct=s(_ue);uYo=r(pct,"AutoModelForObjectDetection"),pct.forEach(t),VIe.forEach(t),GBe=i(m),zo=n(m,"DIV",{class:!0});var el=s(zo);T(SL.$$.fragment,el),pYo=i(el),vd=n(el,"P",{});var OY=s(vd);_Yo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DV=n(OY,"A",{href:!0});var _ct=s(DV);bYo=r(_ct,"from_pretrained()"),_ct.forEach(t),FYo=r(OY," class method or the "),GV=n(OY,"A",{href:!0});var bct=s(GV);vYo=r(bct,"from_config()"),bct.forEach(t),TYo=r(OY,` class
method.`),OY.forEach(t),MYo=i(el),RL=n(el,"P",{});var XIe=s(RL);EYo=r(XIe,"This class cannot be instantiated directly using "),bue=n(XIe,"CODE",{});var Fct=s(bue);CYo=r(Fct,"__init__()"),Fct.forEach(t),wYo=r(XIe," (throws an error)."),XIe.forEach(t),AYo=i(el),bt=n(el,"DIV",{class:!0});var i0=s(bt);T(BL.$$.fragment,i0),yYo=i(i0),Fue=n(i0,"P",{});var vct=s(Fue);LYo=r(vct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vct.forEach(t),xYo=i(i0),Td=n(i0,"P",{});var VY=s(Td);$Yo=r(VY,`Note:
Loading a model from its configuration file does `),vue=n(VY,"STRONG",{});var Tct=s(vue);kYo=r(Tct,"not"),Tct.forEach(t),SYo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(VY,"A",{href:!0});var Mct=s(OV);RYo=r(Mct,"from_pretrained()"),Mct.forEach(t),BYo=r(VY," to load the model weights."),VY.forEach(t),PYo=i(i0),T(PT.$$.fragment,i0),i0.forEach(t),IYo=i(el),fo=n(el,"DIV",{class:!0});var ha=s(fo);T(PL.$$.fragment,ha),qYo=i(ha),Tue=n(ha,"P",{});var Ect=s(Tue);NYo=r(Ect,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ect.forEach(t),jYo=i(ha),Va=n(ha,"P",{});var d0=s(Va);DYo=r(d0,"The model class to instantiate is selected based on the "),Mue=n(d0,"CODE",{});var Cct=s(Mue);GYo=r(Cct,"model_type"),Cct.forEach(t),OYo=r(d0,` property of the config object (either
passed as an argument or loaded from `),Eue=n(d0,"CODE",{});var wct=s(Eue);VYo=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),XYo=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(d0,"CODE",{});var Act=s(Cue);zYo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),QYo=r(d0,":"),d0.forEach(t),WYo=i(ha),IL=n(ha,"UL",{});var zIe=s(IL);IT=n(zIe,"LI",{});var axe=s(IT);wue=n(axe,"STRONG",{});var yct=s(wue);HYo=r(yct,"detr"),yct.forEach(t),UYo=r(axe," \u2014 "),VV=n(axe,"A",{href:!0});var Lct=s(VV);JYo=r(Lct,"DetrForObjectDetection"),Lct.forEach(t),YYo=r(axe," (DETR model)"),axe.forEach(t),KYo=i(zIe),qT=n(zIe,"LI",{});var nxe=s(qT);Aue=n(nxe,"STRONG",{});var xct=s(Aue);ZYo=r(xct,"yolos"),xct.forEach(t),eKo=r(nxe," \u2014 "),XV=n(nxe,"A",{href:!0});var $ct=s(XV);oKo=r($ct,"YolosForObjectDetection"),$ct.forEach(t),rKo=r(nxe," (YOLOS model)"),nxe.forEach(t),zIe.forEach(t),tKo=i(ha),NT=n(ha,"P",{});var sxe=s(NT);aKo=r(sxe,"The model is set in evaluation mode by default using "),yue=n(sxe,"CODE",{});var kct=s(yue);nKo=r(kct,"model.eval()"),kct.forEach(t),sKo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(sxe,"CODE",{});var Sct=s(Lue);lKo=r(Sct,"model.train()"),Sct.forEach(t),sxe.forEach(t),iKo=i(ha),T(jT.$$.fragment,ha),ha.forEach(t),el.forEach(t),OBe=i(m),Md=n(m,"H2",{class:!0});var QIe=s(Md);DT=n(QIe,"A",{id:!0,class:!0,href:!0});var Rct=s(DT);xue=n(Rct,"SPAN",{});var Bct=s(xue);T(qL.$$.fragment,Bct),Bct.forEach(t),Rct.forEach(t),dKo=i(QIe),$ue=n(QIe,"SPAN",{});var Pct=s($ue);cKo=r(Pct,"AutoModelForImageSegmentation"),Pct.forEach(t),QIe.forEach(t),VBe=i(m),Qo=n(m,"DIV",{class:!0});var ol=s(Qo);T(NL.$$.fragment,ol),mKo=i(ol),Ed=n(ol,"P",{});var XY=s(Ed);fKo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zV=n(XY,"A",{href:!0});var Ict=s(zV);gKo=r(Ict,"from_pretrained()"),Ict.forEach(t),hKo=r(XY," class method or the "),QV=n(XY,"A",{href:!0});var qct=s(QV);uKo=r(qct,"from_config()"),qct.forEach(t),pKo=r(XY,` class
method.`),XY.forEach(t),_Ko=i(ol),jL=n(ol,"P",{});var WIe=s(jL);bKo=r(WIe,"This class cannot be instantiated directly using "),kue=n(WIe,"CODE",{});var Nct=s(kue);FKo=r(Nct,"__init__()"),Nct.forEach(t),vKo=r(WIe," (throws an error)."),WIe.forEach(t),TKo=i(ol),Ft=n(ol,"DIV",{class:!0});var c0=s(Ft);T(DL.$$.fragment,c0),MKo=i(c0),Sue=n(c0,"P",{});var jct=s(Sue);EKo=r(jct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jct.forEach(t),CKo=i(c0),Cd=n(c0,"P",{});var zY=s(Cd);wKo=r(zY,`Note:
Loading a model from its configuration file does `),Rue=n(zY,"STRONG",{});var Dct=s(Rue);AKo=r(Dct,"not"),Dct.forEach(t),yKo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(zY,"A",{href:!0});var Gct=s(WV);LKo=r(Gct,"from_pretrained()"),Gct.forEach(t),xKo=r(zY," to load the model weights."),zY.forEach(t),$Ko=i(c0),T(GT.$$.fragment,c0),c0.forEach(t),kKo=i(ol),go=n(ol,"DIV",{class:!0});var ua=s(go);T(GL.$$.fragment,ua),SKo=i(ua),Bue=n(ua,"P",{});var Oct=s(Bue);RKo=r(Oct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Oct.forEach(t),BKo=i(ua),Xa=n(ua,"P",{});var m0=s(Xa);PKo=r(m0,"The model class to instantiate is selected based on the "),Pue=n(m0,"CODE",{});var Vct=s(Pue);IKo=r(Vct,"model_type"),Vct.forEach(t),qKo=r(m0,` property of the config object (either
passed as an argument or loaded from `),Iue=n(m0,"CODE",{});var Xct=s(Iue);NKo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),jKo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(m0,"CODE",{});var zct=s(que);DKo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),GKo=r(m0,":"),m0.forEach(t),OKo=i(ua),Nue=n(ua,"UL",{});var Qct=s(Nue);OT=n(Qct,"LI",{});var lxe=s(OT);jue=n(lxe,"STRONG",{});var Wct=s(jue);VKo=r(Wct,"detr"),Wct.forEach(t),XKo=r(lxe," \u2014 "),HV=n(lxe,"A",{href:!0});var Hct=s(HV);zKo=r(Hct,"DetrForSegmentation"),Hct.forEach(t),QKo=r(lxe," (DETR model)"),lxe.forEach(t),Qct.forEach(t),WKo=i(ua),VT=n(ua,"P",{});var ixe=s(VT);HKo=r(ixe,"The model is set in evaluation mode by default using "),Due=n(ixe,"CODE",{});var Uct=s(Due);UKo=r(Uct,"model.eval()"),Uct.forEach(t),JKo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(ixe,"CODE",{});var Jct=s(Gue);YKo=r(Jct,"model.train()"),Jct.forEach(t),ixe.forEach(t),KKo=i(ua),T(XT.$$.fragment,ua),ua.forEach(t),ol.forEach(t),XBe=i(m),wd=n(m,"H2",{class:!0});var HIe=s(wd);zT=n(HIe,"A",{id:!0,class:!0,href:!0});var Yct=s(zT);Oue=n(Yct,"SPAN",{});var Kct=s(Oue);T(OL.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),ZKo=i(HIe),Vue=n(HIe,"SPAN",{});var Zct=s(Vue);eZo=r(Zct,"AutoModelForSemanticSegmentation"),Zct.forEach(t),HIe.forEach(t),zBe=i(m),Wo=n(m,"DIV",{class:!0});var rl=s(Wo);T(VL.$$.fragment,rl),oZo=i(rl),Ad=n(rl,"P",{});var QY=s(Ad);rZo=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UV=n(QY,"A",{href:!0});var emt=s(UV);tZo=r(emt,"from_pretrained()"),emt.forEach(t),aZo=r(QY," class method or the "),JV=n(QY,"A",{href:!0});var omt=s(JV);nZo=r(omt,"from_config()"),omt.forEach(t),sZo=r(QY,` class
method.`),QY.forEach(t),lZo=i(rl),XL=n(rl,"P",{});var UIe=s(XL);iZo=r(UIe,"This class cannot be instantiated directly using "),Xue=n(UIe,"CODE",{});var rmt=s(Xue);dZo=r(rmt,"__init__()"),rmt.forEach(t),cZo=r(UIe," (throws an error)."),UIe.forEach(t),mZo=i(rl),vt=n(rl,"DIV",{class:!0});var f0=s(vt);T(zL.$$.fragment,f0),fZo=i(f0),zue=n(f0,"P",{});var tmt=s(zue);gZo=r(tmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tmt.forEach(t),hZo=i(f0),yd=n(f0,"P",{});var WY=s(yd);uZo=r(WY,`Note:
Loading a model from its configuration file does `),Que=n(WY,"STRONG",{});var amt=s(Que);pZo=r(amt,"not"),amt.forEach(t),_Zo=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(WY,"A",{href:!0});var nmt=s(YV);bZo=r(nmt,"from_pretrained()"),nmt.forEach(t),FZo=r(WY," to load the model weights."),WY.forEach(t),vZo=i(f0),T(QT.$$.fragment,f0),f0.forEach(t),TZo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(QL.$$.fragment,pa),MZo=i(pa),Wue=n(pa,"P",{});var smt=s(Wue);EZo=r(smt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),smt.forEach(t),CZo=i(pa),za=n(pa,"P",{});var g0=s(za);wZo=r(g0,"The model class to instantiate is selected based on the "),Hue=n(g0,"CODE",{});var lmt=s(Hue);AZo=r(lmt,"model_type"),lmt.forEach(t),yZo=r(g0,` property of the config object (either
passed as an argument or loaded from `),Uue=n(g0,"CODE",{});var imt=s(Uue);LZo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),xZo=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(g0,"CODE",{});var dmt=s(Jue);$Zo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),kZo=r(g0,":"),g0.forEach(t),SZo=i(pa),Qa=n(pa,"UL",{});var h0=s(Qa);WT=n(h0,"LI",{});var dxe=s(WT);Yue=n(dxe,"STRONG",{});var cmt=s(Yue);RZo=r(cmt,"beit"),cmt.forEach(t),BZo=r(dxe," \u2014 "),KV=n(dxe,"A",{href:!0});var mmt=s(KV);PZo=r(mmt,"BeitForSemanticSegmentation"),mmt.forEach(t),IZo=r(dxe," (BEiT model)"),dxe.forEach(t),qZo=i(h0),HT=n(h0,"LI",{});var cxe=s(HT);Kue=n(cxe,"STRONG",{});var fmt=s(Kue);NZo=r(fmt,"data2vec-vision"),fmt.forEach(t),jZo=r(cxe," \u2014 "),ZV=n(cxe,"A",{href:!0});var gmt=s(ZV);DZo=r(gmt,"Data2VecVisionForSemanticSegmentation"),gmt.forEach(t),GZo=r(cxe," (Data2VecVision model)"),cxe.forEach(t),OZo=i(h0),UT=n(h0,"LI",{});var mxe=s(UT);Zue=n(mxe,"STRONG",{});var hmt=s(Zue);VZo=r(hmt,"dpt"),hmt.forEach(t),XZo=r(mxe," \u2014 "),eX=n(mxe,"A",{href:!0});var umt=s(eX);zZo=r(umt,"DPTForSemanticSegmentation"),umt.forEach(t),QZo=r(mxe," (DPT model)"),mxe.forEach(t),WZo=i(h0),JT=n(h0,"LI",{});var fxe=s(JT);epe=n(fxe,"STRONG",{});var pmt=s(epe);HZo=r(pmt,"segformer"),pmt.forEach(t),UZo=r(fxe," \u2014 "),oX=n(fxe,"A",{href:!0});var _mt=s(oX);JZo=r(_mt,"SegformerForSemanticSegmentation"),_mt.forEach(t),YZo=r(fxe," (SegFormer model)"),fxe.forEach(t),h0.forEach(t),KZo=i(pa),YT=n(pa,"P",{});var gxe=s(YT);ZZo=r(gxe,"The model is set in evaluation mode by default using "),ope=n(gxe,"CODE",{});var bmt=s(ope);eer=r(bmt,"model.eval()"),bmt.forEach(t),oer=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(gxe,"CODE",{});var Fmt=s(rpe);rer=r(Fmt,"model.train()"),Fmt.forEach(t),gxe.forEach(t),ter=i(pa),T(KT.$$.fragment,pa),pa.forEach(t),rl.forEach(t),QBe=i(m),Ld=n(m,"H2",{class:!0});var JIe=s(Ld);ZT=n(JIe,"A",{id:!0,class:!0,href:!0});var vmt=s(ZT);tpe=n(vmt,"SPAN",{});var Tmt=s(tpe);T(WL.$$.fragment,Tmt),Tmt.forEach(t),vmt.forEach(t),aer=i(JIe),ape=n(JIe,"SPAN",{});var Mmt=s(ape);ner=r(Mmt,"AutoModelForInstanceSegmentation"),Mmt.forEach(t),JIe.forEach(t),WBe=i(m),Ho=n(m,"DIV",{class:!0});var tl=s(Ho);T(HL.$$.fragment,tl),ser=i(tl),xd=n(tl,"P",{});var HY=s(xd);ler=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rX=n(HY,"A",{href:!0});var Emt=s(rX);ier=r(Emt,"from_pretrained()"),Emt.forEach(t),der=r(HY," class method or the "),tX=n(HY,"A",{href:!0});var Cmt=s(tX);cer=r(Cmt,"from_config()"),Cmt.forEach(t),mer=r(HY,` class
method.`),HY.forEach(t),fer=i(tl),UL=n(tl,"P",{});var YIe=s(UL);ger=r(YIe,"This class cannot be instantiated directly using "),npe=n(YIe,"CODE",{});var wmt=s(npe);her=r(wmt,"__init__()"),wmt.forEach(t),uer=r(YIe," (throws an error)."),YIe.forEach(t),per=i(tl),Tt=n(tl,"DIV",{class:!0});var u0=s(Tt);T(JL.$$.fragment,u0),_er=i(u0),spe=n(u0,"P",{});var Amt=s(spe);ber=r(Amt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Amt.forEach(t),Fer=i(u0),$d=n(u0,"P",{});var UY=s($d);ver=r(UY,`Note:
Loading a model from its configuration file does `),lpe=n(UY,"STRONG",{});var ymt=s(lpe);Ter=r(ymt,"not"),ymt.forEach(t),Mer=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(UY,"A",{href:!0});var Lmt=s(aX);Eer=r(Lmt,"from_pretrained()"),Lmt.forEach(t),Cer=r(UY," to load the model weights."),UY.forEach(t),wer=i(u0),T(eM.$$.fragment,u0),u0.forEach(t),Aer=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(YL.$$.fragment,_a),yer=i(_a),ipe=n(_a,"P",{});var xmt=s(ipe);Ler=r(xmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xmt.forEach(t),xer=i(_a),Wa=n(_a,"P",{});var p0=s(Wa);$er=r(p0,"The model class to instantiate is selected based on the "),dpe=n(p0,"CODE",{});var $mt=s(dpe);ker=r($mt,"model_type"),$mt.forEach(t),Ser=r(p0,` property of the config object (either
passed as an argument or loaded from `),cpe=n(p0,"CODE",{});var kmt=s(cpe);Rer=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),Ber=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(p0,"CODE",{});var Smt=s(mpe);Per=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Ier=r(p0,":"),p0.forEach(t),qer=i(_a),fpe=n(_a,"UL",{});var Rmt=s(fpe);oM=n(Rmt,"LI",{});var hxe=s(oM);gpe=n(hxe,"STRONG",{});var Bmt=s(gpe);Ner=r(Bmt,"maskformer"),Bmt.forEach(t),jer=r(hxe," \u2014 "),nX=n(hxe,"A",{href:!0});var Pmt=s(nX);Der=r(Pmt,"MaskFormerForInstanceSegmentation"),Pmt.forEach(t),Ger=r(hxe," (MaskFormer model)"),hxe.forEach(t),Rmt.forEach(t),Oer=i(_a),rM=n(_a,"P",{});var uxe=s(rM);Ver=r(uxe,"The model is set in evaluation mode by default using "),hpe=n(uxe,"CODE",{});var Imt=s(hpe);Xer=r(Imt,"model.eval()"),Imt.forEach(t),zer=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(uxe,"CODE",{});var qmt=s(upe);Qer=r(qmt,"model.train()"),qmt.forEach(t),uxe.forEach(t),Wer=i(_a),T(tM.$$.fragment,_a),_a.forEach(t),tl.forEach(t),HBe=i(m),kd=n(m,"H2",{class:!0});var KIe=s(kd);aM=n(KIe,"A",{id:!0,class:!0,href:!0});var Nmt=s(aM);ppe=n(Nmt,"SPAN",{});var jmt=s(ppe);T(KL.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),Her=i(KIe),_pe=n(KIe,"SPAN",{});var Dmt=s(_pe);Uer=r(Dmt,"TFAutoModel"),Dmt.forEach(t),KIe.forEach(t),UBe=i(m),Uo=n(m,"DIV",{class:!0});var al=s(Uo);T(ZL.$$.fragment,al),Jer=i(al),Sd=n(al,"P",{});var JY=s(Sd);Yer=r(JY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sX=n(JY,"A",{href:!0});var Gmt=s(sX);Ker=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Zer=r(JY," class method or the "),lX=n(JY,"A",{href:!0});var Omt=s(lX);eor=r(Omt,"from_config()"),Omt.forEach(t),oor=r(JY,` class
method.`),JY.forEach(t),ror=i(al),e8=n(al,"P",{});var ZIe=s(e8);tor=r(ZIe,"This class cannot be instantiated directly using "),bpe=n(ZIe,"CODE",{});var Vmt=s(bpe);aor=r(Vmt,"__init__()"),Vmt.forEach(t),nor=r(ZIe," (throws an error)."),ZIe.forEach(t),sor=i(al),Mt=n(al,"DIV",{class:!0});var _0=s(Mt);T(o8.$$.fragment,_0),lor=i(_0),Fpe=n(_0,"P",{});var Xmt=s(Fpe);ior=r(Xmt,"Instantiates one of the base model classes of the library from a configuration."),Xmt.forEach(t),dor=i(_0),Rd=n(_0,"P",{});var YY=s(Rd);cor=r(YY,`Note:
Loading a model from its configuration file does `),vpe=n(YY,"STRONG",{});var zmt=s(vpe);mor=r(zmt,"not"),zmt.forEach(t),gor=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(YY,"A",{href:!0});var Qmt=s(iX);hor=r(Qmt,"from_pretrained()"),Qmt.forEach(t),uor=r(YY," to load the model weights."),YY.forEach(t),por=i(_0),T(nM.$$.fragment,_0),_0.forEach(t),_or=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(r8.$$.fragment,nl),bor=i(nl),Tpe=n(nl,"P",{});var Wmt=s(Tpe);For=r(Wmt,"Instantiate one of the base model classes of the library from a pretrained model."),Wmt.forEach(t),vor=i(nl),Ha=n(nl,"P",{});var b0=s(Ha);Tor=r(b0,"The model class to instantiate is selected based on the "),Mpe=n(b0,"CODE",{});var Hmt=s(Mpe);Mor=r(Hmt,"model_type"),Hmt.forEach(t),Eor=r(b0,` property of the config object (either
passed as an argument or loaded from `),Epe=n(b0,"CODE",{});var Umt=s(Epe);Cor=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),wor=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(b0,"CODE",{});var Jmt=s(Cpe);Aor=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),yor=r(b0,":"),b0.forEach(t),Lor=i(nl),j=n(nl,"UL",{});var D=s(j);sM=n(D,"LI",{});var pxe=s(sM);wpe=n(pxe,"STRONG",{});var Ymt=s(wpe);xor=r(Ymt,"albert"),Ymt.forEach(t),$or=r(pxe," \u2014 "),dX=n(pxe,"A",{href:!0});var Kmt=s(dX);kor=r(Kmt,"TFAlbertModel"),Kmt.forEach(t),Sor=r(pxe," (ALBERT model)"),pxe.forEach(t),Ror=i(D),lM=n(D,"LI",{});var _xe=s(lM);Ape=n(_xe,"STRONG",{});var Zmt=s(Ape);Bor=r(Zmt,"bart"),Zmt.forEach(t),Por=r(_xe," \u2014 "),cX=n(_xe,"A",{href:!0});var eft=s(cX);Ior=r(eft,"TFBartModel"),eft.forEach(t),qor=r(_xe," (BART model)"),_xe.forEach(t),Nor=i(D),iM=n(D,"LI",{});var bxe=s(iM);ype=n(bxe,"STRONG",{});var oft=s(ype);jor=r(oft,"bert"),oft.forEach(t),Dor=r(bxe," \u2014 "),mX=n(bxe,"A",{href:!0});var rft=s(mX);Gor=r(rft,"TFBertModel"),rft.forEach(t),Oor=r(bxe," (BERT model)"),bxe.forEach(t),Vor=i(D),dM=n(D,"LI",{});var Fxe=s(dM);Lpe=n(Fxe,"STRONG",{});var tft=s(Lpe);Xor=r(tft,"blenderbot"),tft.forEach(t),zor=r(Fxe," \u2014 "),fX=n(Fxe,"A",{href:!0});var aft=s(fX);Qor=r(aft,"TFBlenderbotModel"),aft.forEach(t),Wor=r(Fxe," (Blenderbot model)"),Fxe.forEach(t),Hor=i(D),cM=n(D,"LI",{});var vxe=s(cM);xpe=n(vxe,"STRONG",{});var nft=s(xpe);Uor=r(nft,"blenderbot-small"),nft.forEach(t),Jor=r(vxe," \u2014 "),gX=n(vxe,"A",{href:!0});var sft=s(gX);Yor=r(sft,"TFBlenderbotSmallModel"),sft.forEach(t),Kor=r(vxe," (BlenderbotSmall model)"),vxe.forEach(t),Zor=i(D),mM=n(D,"LI",{});var Txe=s(mM);$pe=n(Txe,"STRONG",{});var lft=s($pe);err=r(lft,"camembert"),lft.forEach(t),orr=r(Txe," \u2014 "),hX=n(Txe,"A",{href:!0});var ift=s(hX);rrr=r(ift,"TFCamembertModel"),ift.forEach(t),trr=r(Txe," (CamemBERT model)"),Txe.forEach(t),arr=i(D),fM=n(D,"LI",{});var Mxe=s(fM);kpe=n(Mxe,"STRONG",{});var dft=s(kpe);nrr=r(dft,"clip"),dft.forEach(t),srr=r(Mxe," \u2014 "),uX=n(Mxe,"A",{href:!0});var cft=s(uX);lrr=r(cft,"TFCLIPModel"),cft.forEach(t),irr=r(Mxe," (CLIP model)"),Mxe.forEach(t),drr=i(D),gM=n(D,"LI",{});var Exe=s(gM);Spe=n(Exe,"STRONG",{});var mft=s(Spe);crr=r(mft,"convbert"),mft.forEach(t),mrr=r(Exe," \u2014 "),pX=n(Exe,"A",{href:!0});var fft=s(pX);frr=r(fft,"TFConvBertModel"),fft.forEach(t),grr=r(Exe," (ConvBERT model)"),Exe.forEach(t),hrr=i(D),hM=n(D,"LI",{});var Cxe=s(hM);Rpe=n(Cxe,"STRONG",{});var gft=s(Rpe);urr=r(gft,"convnext"),gft.forEach(t),prr=r(Cxe," \u2014 "),_X=n(Cxe,"A",{href:!0});var hft=s(_X);_rr=r(hft,"TFConvNextModel"),hft.forEach(t),brr=r(Cxe," (ConvNext model)"),Cxe.forEach(t),Frr=i(D),uM=n(D,"LI",{});var wxe=s(uM);Bpe=n(wxe,"STRONG",{});var uft=s(Bpe);vrr=r(uft,"ctrl"),uft.forEach(t),Trr=r(wxe," \u2014 "),bX=n(wxe,"A",{href:!0});var pft=s(bX);Mrr=r(pft,"TFCTRLModel"),pft.forEach(t),Err=r(wxe," (CTRL model)"),wxe.forEach(t),Crr=i(D),pM=n(D,"LI",{});var Axe=s(pM);Ppe=n(Axe,"STRONG",{});var _ft=s(Ppe);wrr=r(_ft,"deberta"),_ft.forEach(t),Arr=r(Axe," \u2014 "),FX=n(Axe,"A",{href:!0});var bft=s(FX);yrr=r(bft,"TFDebertaModel"),bft.forEach(t),Lrr=r(Axe," (DeBERTa model)"),Axe.forEach(t),xrr=i(D),_M=n(D,"LI",{});var yxe=s(_M);Ipe=n(yxe,"STRONG",{});var Fft=s(Ipe);$rr=r(Fft,"deberta-v2"),Fft.forEach(t),krr=r(yxe," \u2014 "),vX=n(yxe,"A",{href:!0});var vft=s(vX);Srr=r(vft,"TFDebertaV2Model"),vft.forEach(t),Rrr=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),Brr=i(D),bM=n(D,"LI",{});var Lxe=s(bM);qpe=n(Lxe,"STRONG",{});var Tft=s(qpe);Prr=r(Tft,"distilbert"),Tft.forEach(t),Irr=r(Lxe," \u2014 "),TX=n(Lxe,"A",{href:!0});var Mft=s(TX);qrr=r(Mft,"TFDistilBertModel"),Mft.forEach(t),Nrr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),jrr=i(D),FM=n(D,"LI",{});var xxe=s(FM);Npe=n(xxe,"STRONG",{});var Eft=s(Npe);Drr=r(Eft,"dpr"),Eft.forEach(t),Grr=r(xxe," \u2014 "),MX=n(xxe,"A",{href:!0});var Cft=s(MX);Orr=r(Cft,"TFDPRQuestionEncoder"),Cft.forEach(t),Vrr=r(xxe," (DPR model)"),xxe.forEach(t),Xrr=i(D),vM=n(D,"LI",{});var $xe=s(vM);jpe=n($xe,"STRONG",{});var wft=s(jpe);zrr=r(wft,"electra"),wft.forEach(t),Qrr=r($xe," \u2014 "),EX=n($xe,"A",{href:!0});var Aft=s(EX);Wrr=r(Aft,"TFElectraModel"),Aft.forEach(t),Hrr=r($xe," (ELECTRA model)"),$xe.forEach(t),Urr=i(D),TM=n(D,"LI",{});var kxe=s(TM);Dpe=n(kxe,"STRONG",{});var yft=s(Dpe);Jrr=r(yft,"flaubert"),yft.forEach(t),Yrr=r(kxe," \u2014 "),CX=n(kxe,"A",{href:!0});var Lft=s(CX);Krr=r(Lft,"TFFlaubertModel"),Lft.forEach(t),Zrr=r(kxe," (FlauBERT model)"),kxe.forEach(t),etr=i(D),xs=n(D,"LI",{});var L9=s(xs);Gpe=n(L9,"STRONG",{});var xft=s(Gpe);otr=r(xft,"funnel"),xft.forEach(t),rtr=r(L9," \u2014 "),wX=n(L9,"A",{href:!0});var $ft=s(wX);ttr=r($ft,"TFFunnelModel"),$ft.forEach(t),atr=r(L9," or "),AX=n(L9,"A",{href:!0});var kft=s(AX);ntr=r(kft,"TFFunnelBaseModel"),kft.forEach(t),str=r(L9," (Funnel Transformer model)"),L9.forEach(t),ltr=i(D),MM=n(D,"LI",{});var Sxe=s(MM);Ope=n(Sxe,"STRONG",{});var Sft=s(Ope);itr=r(Sft,"gpt2"),Sft.forEach(t),dtr=r(Sxe," \u2014 "),yX=n(Sxe,"A",{href:!0});var Rft=s(yX);ctr=r(Rft,"TFGPT2Model"),Rft.forEach(t),mtr=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),ftr=i(D),EM=n(D,"LI",{});var Rxe=s(EM);Vpe=n(Rxe,"STRONG",{});var Bft=s(Vpe);gtr=r(Bft,"gptj"),Bft.forEach(t),htr=r(Rxe," \u2014 "),LX=n(Rxe,"A",{href:!0});var Pft=s(LX);utr=r(Pft,"TFGPTJModel"),Pft.forEach(t),ptr=r(Rxe," (GPT-J model)"),Rxe.forEach(t),_tr=i(D),CM=n(D,"LI",{});var Bxe=s(CM);Xpe=n(Bxe,"STRONG",{});var Ift=s(Xpe);btr=r(Ift,"hubert"),Ift.forEach(t),Ftr=r(Bxe," \u2014 "),xX=n(Bxe,"A",{href:!0});var qft=s(xX);vtr=r(qft,"TFHubertModel"),qft.forEach(t),Ttr=r(Bxe," (Hubert model)"),Bxe.forEach(t),Mtr=i(D),wM=n(D,"LI",{});var Pxe=s(wM);zpe=n(Pxe,"STRONG",{});var Nft=s(zpe);Etr=r(Nft,"layoutlm"),Nft.forEach(t),Ctr=r(Pxe," \u2014 "),$X=n(Pxe,"A",{href:!0});var jft=s($X);wtr=r(jft,"TFLayoutLMModel"),jft.forEach(t),Atr=r(Pxe," (LayoutLM model)"),Pxe.forEach(t),ytr=i(D),AM=n(D,"LI",{});var Ixe=s(AM);Qpe=n(Ixe,"STRONG",{});var Dft=s(Qpe);Ltr=r(Dft,"led"),Dft.forEach(t),xtr=r(Ixe," \u2014 "),kX=n(Ixe,"A",{href:!0});var Gft=s(kX);$tr=r(Gft,"TFLEDModel"),Gft.forEach(t),ktr=r(Ixe," (LED model)"),Ixe.forEach(t),Str=i(D),yM=n(D,"LI",{});var qxe=s(yM);Wpe=n(qxe,"STRONG",{});var Oft=s(Wpe);Rtr=r(Oft,"longformer"),Oft.forEach(t),Btr=r(qxe," \u2014 "),SX=n(qxe,"A",{href:!0});var Vft=s(SX);Ptr=r(Vft,"TFLongformerModel"),Vft.forEach(t),Itr=r(qxe," (Longformer model)"),qxe.forEach(t),qtr=i(D),LM=n(D,"LI",{});var Nxe=s(LM);Hpe=n(Nxe,"STRONG",{});var Xft=s(Hpe);Ntr=r(Xft,"lxmert"),Xft.forEach(t),jtr=r(Nxe," \u2014 "),RX=n(Nxe,"A",{href:!0});var zft=s(RX);Dtr=r(zft,"TFLxmertModel"),zft.forEach(t),Gtr=r(Nxe," (LXMERT model)"),Nxe.forEach(t),Otr=i(D),xM=n(D,"LI",{});var jxe=s(xM);Upe=n(jxe,"STRONG",{});var Qft=s(Upe);Vtr=r(Qft,"marian"),Qft.forEach(t),Xtr=r(jxe," \u2014 "),BX=n(jxe,"A",{href:!0});var Wft=s(BX);ztr=r(Wft,"TFMarianModel"),Wft.forEach(t),Qtr=r(jxe," (Marian model)"),jxe.forEach(t),Wtr=i(D),$M=n(D,"LI",{});var Dxe=s($M);Jpe=n(Dxe,"STRONG",{});var Hft=s(Jpe);Htr=r(Hft,"mbart"),Hft.forEach(t),Utr=r(Dxe," \u2014 "),PX=n(Dxe,"A",{href:!0});var Uft=s(PX);Jtr=r(Uft,"TFMBartModel"),Uft.forEach(t),Ytr=r(Dxe," (mBART model)"),Dxe.forEach(t),Ktr=i(D),kM=n(D,"LI",{});var Gxe=s(kM);Ype=n(Gxe,"STRONG",{});var Jft=s(Ype);Ztr=r(Jft,"mobilebert"),Jft.forEach(t),ear=r(Gxe," \u2014 "),IX=n(Gxe,"A",{href:!0});var Yft=s(IX);oar=r(Yft,"TFMobileBertModel"),Yft.forEach(t),rar=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),tar=i(D),SM=n(D,"LI",{});var Oxe=s(SM);Kpe=n(Oxe,"STRONG",{});var Kft=s(Kpe);aar=r(Kft,"mpnet"),Kft.forEach(t),nar=r(Oxe," \u2014 "),qX=n(Oxe,"A",{href:!0});var Zft=s(qX);sar=r(Zft,"TFMPNetModel"),Zft.forEach(t),lar=r(Oxe," (MPNet model)"),Oxe.forEach(t),iar=i(D),RM=n(D,"LI",{});var Vxe=s(RM);Zpe=n(Vxe,"STRONG",{});var egt=s(Zpe);dar=r(egt,"mt5"),egt.forEach(t),car=r(Vxe," \u2014 "),NX=n(Vxe,"A",{href:!0});var ogt=s(NX);mar=r(ogt,"TFMT5Model"),ogt.forEach(t),far=r(Vxe," (mT5 model)"),Vxe.forEach(t),gar=i(D),BM=n(D,"LI",{});var Xxe=s(BM);e_e=n(Xxe,"STRONG",{});var rgt=s(e_e);har=r(rgt,"openai-gpt"),rgt.forEach(t),uar=r(Xxe," \u2014 "),jX=n(Xxe,"A",{href:!0});var tgt=s(jX);par=r(tgt,"TFOpenAIGPTModel"),tgt.forEach(t),_ar=r(Xxe," (OpenAI GPT model)"),Xxe.forEach(t),bar=i(D),PM=n(D,"LI",{});var zxe=s(PM);o_e=n(zxe,"STRONG",{});var agt=s(o_e);Far=r(agt,"pegasus"),agt.forEach(t),Tar=r(zxe," \u2014 "),DX=n(zxe,"A",{href:!0});var ngt=s(DX);Mar=r(ngt,"TFPegasusModel"),ngt.forEach(t),Ear=r(zxe," (Pegasus model)"),zxe.forEach(t),Car=i(D),IM=n(D,"LI",{});var Qxe=s(IM);r_e=n(Qxe,"STRONG",{});var sgt=s(r_e);war=r(sgt,"rembert"),sgt.forEach(t),Aar=r(Qxe," \u2014 "),GX=n(Qxe,"A",{href:!0});var lgt=s(GX);yar=r(lgt,"TFRemBertModel"),lgt.forEach(t),Lar=r(Qxe," (RemBERT model)"),Qxe.forEach(t),xar=i(D),qM=n(D,"LI",{});var Wxe=s(qM);t_e=n(Wxe,"STRONG",{});var igt=s(t_e);$ar=r(igt,"roberta"),igt.forEach(t),kar=r(Wxe," \u2014 "),OX=n(Wxe,"A",{href:!0});var dgt=s(OX);Sar=r(dgt,"TFRobertaModel"),dgt.forEach(t),Rar=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),Bar=i(D),NM=n(D,"LI",{});var Hxe=s(NM);a_e=n(Hxe,"STRONG",{});var cgt=s(a_e);Par=r(cgt,"roformer"),cgt.forEach(t),Iar=r(Hxe," \u2014 "),VX=n(Hxe,"A",{href:!0});var mgt=s(VX);qar=r(mgt,"TFRoFormerModel"),mgt.forEach(t),Nar=r(Hxe," (RoFormer model)"),Hxe.forEach(t),jar=i(D),jM=n(D,"LI",{});var Uxe=s(jM);n_e=n(Uxe,"STRONG",{});var fgt=s(n_e);Dar=r(fgt,"speech_to_text"),fgt.forEach(t),Gar=r(Uxe," \u2014 "),XX=n(Uxe,"A",{href:!0});var ggt=s(XX);Oar=r(ggt,"TFSpeech2TextModel"),ggt.forEach(t),Var=r(Uxe," (Speech2Text model)"),Uxe.forEach(t),Xar=i(D),DM=n(D,"LI",{});var Jxe=s(DM);s_e=n(Jxe,"STRONG",{});var hgt=s(s_e);zar=r(hgt,"t5"),hgt.forEach(t),Qar=r(Jxe," \u2014 "),zX=n(Jxe,"A",{href:!0});var ugt=s(zX);War=r(ugt,"TFT5Model"),ugt.forEach(t),Har=r(Jxe," (T5 model)"),Jxe.forEach(t),Uar=i(D),GM=n(D,"LI",{});var Yxe=s(GM);l_e=n(Yxe,"STRONG",{});var pgt=s(l_e);Jar=r(pgt,"tapas"),pgt.forEach(t),Yar=r(Yxe," \u2014 "),QX=n(Yxe,"A",{href:!0});var _gt=s(QX);Kar=r(_gt,"TFTapasModel"),_gt.forEach(t),Zar=r(Yxe," (TAPAS model)"),Yxe.forEach(t),enr=i(D),OM=n(D,"LI",{});var Kxe=s(OM);i_e=n(Kxe,"STRONG",{});var bgt=s(i_e);onr=r(bgt,"transfo-xl"),bgt.forEach(t),rnr=r(Kxe," \u2014 "),WX=n(Kxe,"A",{href:!0});var Fgt=s(WX);tnr=r(Fgt,"TFTransfoXLModel"),Fgt.forEach(t),anr=r(Kxe," (Transformer-XL model)"),Kxe.forEach(t),nnr=i(D),VM=n(D,"LI",{});var Zxe=s(VM);d_e=n(Zxe,"STRONG",{});var vgt=s(d_e);snr=r(vgt,"vit"),vgt.forEach(t),lnr=r(Zxe," \u2014 "),HX=n(Zxe,"A",{href:!0});var Tgt=s(HX);inr=r(Tgt,"TFViTModel"),Tgt.forEach(t),dnr=r(Zxe," (ViT model)"),Zxe.forEach(t),cnr=i(D),XM=n(D,"LI",{});var e9e=s(XM);c_e=n(e9e,"STRONG",{});var Mgt=s(c_e);mnr=r(Mgt,"vit_mae"),Mgt.forEach(t),fnr=r(e9e," \u2014 "),UX=n(e9e,"A",{href:!0});var Egt=s(UX);gnr=r(Egt,"TFViTMAEModel"),Egt.forEach(t),hnr=r(e9e," (ViTMAE model)"),e9e.forEach(t),unr=i(D),zM=n(D,"LI",{});var o9e=s(zM);m_e=n(o9e,"STRONG",{});var Cgt=s(m_e);pnr=r(Cgt,"wav2vec2"),Cgt.forEach(t),_nr=r(o9e," \u2014 "),JX=n(o9e,"A",{href:!0});var wgt=s(JX);bnr=r(wgt,"TFWav2Vec2Model"),wgt.forEach(t),Fnr=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),vnr=i(D),QM=n(D,"LI",{});var r9e=s(QM);f_e=n(r9e,"STRONG",{});var Agt=s(f_e);Tnr=r(Agt,"xlm"),Agt.forEach(t),Mnr=r(r9e," \u2014 "),YX=n(r9e,"A",{href:!0});var ygt=s(YX);Enr=r(ygt,"TFXLMModel"),ygt.forEach(t),Cnr=r(r9e," (XLM model)"),r9e.forEach(t),wnr=i(D),WM=n(D,"LI",{});var t9e=s(WM);g_e=n(t9e,"STRONG",{});var Lgt=s(g_e);Anr=r(Lgt,"xlm-roberta"),Lgt.forEach(t),ynr=r(t9e," \u2014 "),KX=n(t9e,"A",{href:!0});var xgt=s(KX);Lnr=r(xgt,"TFXLMRobertaModel"),xgt.forEach(t),xnr=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),$nr=i(D),HM=n(D,"LI",{});var a9e=s(HM);h_e=n(a9e,"STRONG",{});var $gt=s(h_e);knr=r($gt,"xlnet"),$gt.forEach(t),Snr=r(a9e," \u2014 "),ZX=n(a9e,"A",{href:!0});var kgt=s(ZX);Rnr=r(kgt,"TFXLNetModel"),kgt.forEach(t),Bnr=r(a9e," (XLNet model)"),a9e.forEach(t),D.forEach(t),Pnr=i(nl),T(UM.$$.fragment,nl),nl.forEach(t),al.forEach(t),JBe=i(m),Bd=n(m,"H2",{class:!0});var eqe=s(Bd);JM=n(eqe,"A",{id:!0,class:!0,href:!0});var Sgt=s(JM);u_e=n(Sgt,"SPAN",{});var Rgt=s(u_e);T(t8.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Inr=i(eqe),p_e=n(eqe,"SPAN",{});var Bgt=s(p_e);qnr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),eqe.forEach(t),YBe=i(m),Jo=n(m,"DIV",{class:!0});var sl=s(Jo);T(a8.$$.fragment,sl),Nnr=i(sl),Pd=n(sl,"P",{});var KY=s(Pd);jnr=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ez=n(KY,"A",{href:!0});var Pgt=s(ez);Dnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Gnr=r(KY," class method or the "),oz=n(KY,"A",{href:!0});var Igt=s(oz);Onr=r(Igt,"from_config()"),Igt.forEach(t),Vnr=r(KY,` class
method.`),KY.forEach(t),Xnr=i(sl),n8=n(sl,"P",{});var oqe=s(n8);znr=r(oqe,"This class cannot be instantiated directly using "),__e=n(oqe,"CODE",{});var qgt=s(__e);Qnr=r(qgt,"__init__()"),qgt.forEach(t),Wnr=r(oqe," (throws an error)."),oqe.forEach(t),Hnr=i(sl),Et=n(sl,"DIV",{class:!0});var F0=s(Et);T(s8.$$.fragment,F0),Unr=i(F0),b_e=n(F0,"P",{});var Ngt=s(b_e);Jnr=r(Ngt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ngt.forEach(t),Ynr=i(F0),Id=n(F0,"P",{});var ZY=s(Id);Knr=r(ZY,`Note:
Loading a model from its configuration file does `),F_e=n(ZY,"STRONG",{});var jgt=s(F_e);Znr=r(jgt,"not"),jgt.forEach(t),esr=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(ZY,"A",{href:!0});var Dgt=s(rz);osr=r(Dgt,"from_pretrained()"),Dgt.forEach(t),rsr=r(ZY," to load the model weights."),ZY.forEach(t),tsr=i(F0),T(YM.$$.fragment,F0),F0.forEach(t),asr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(l8.$$.fragment,ll),nsr=i(ll),v_e=n(ll,"P",{});var Ggt=s(v_e);ssr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),lsr=i(ll),Ua=n(ll,"P",{});var v0=s(Ua);isr=r(v0,"The model class to instantiate is selected based on the "),T_e=n(v0,"CODE",{});var Ogt=s(T_e);dsr=r(Ogt,"model_type"),Ogt.forEach(t),csr=r(v0,` property of the config object (either
passed as an argument or loaded from `),M_e=n(v0,"CODE",{});var Vgt=s(M_e);msr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),fsr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(v0,"CODE",{});var Xgt=s(E_e);gsr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),hsr=r(v0,":"),v0.forEach(t),usr=i(ll),ne=n(ll,"UL",{});var le=s(ne);KM=n(le,"LI",{});var n9e=s(KM);C_e=n(n9e,"STRONG",{});var zgt=s(C_e);psr=r(zgt,"albert"),zgt.forEach(t),_sr=r(n9e," \u2014 "),tz=n(n9e,"A",{href:!0});var Qgt=s(tz);bsr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),Fsr=r(n9e," (ALBERT model)"),n9e.forEach(t),vsr=i(le),ZM=n(le,"LI",{});var s9e=s(ZM);w_e=n(s9e,"STRONG",{});var Wgt=s(w_e);Tsr=r(Wgt,"bart"),Wgt.forEach(t),Msr=r(s9e," \u2014 "),az=n(s9e,"A",{href:!0});var Hgt=s(az);Esr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Csr=r(s9e," (BART model)"),s9e.forEach(t),wsr=i(le),e4=n(le,"LI",{});var l9e=s(e4);A_e=n(l9e,"STRONG",{});var Ugt=s(A_e);Asr=r(Ugt,"bert"),Ugt.forEach(t),ysr=r(l9e," \u2014 "),nz=n(l9e,"A",{href:!0});var Jgt=s(nz);Lsr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),xsr=r(l9e," (BERT model)"),l9e.forEach(t),$sr=i(le),o4=n(le,"LI",{});var i9e=s(o4);y_e=n(i9e,"STRONG",{});var Ygt=s(y_e);ksr=r(Ygt,"camembert"),Ygt.forEach(t),Ssr=r(i9e," \u2014 "),sz=n(i9e,"A",{href:!0});var Kgt=s(sz);Rsr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Bsr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Psr=i(le),r4=n(le,"LI",{});var d9e=s(r4);L_e=n(d9e,"STRONG",{});var Zgt=s(L_e);Isr=r(Zgt,"ctrl"),Zgt.forEach(t),qsr=r(d9e," \u2014 "),lz=n(d9e,"A",{href:!0});var eht=s(lz);Nsr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),jsr=r(d9e," (CTRL model)"),d9e.forEach(t),Dsr=i(le),t4=n(le,"LI",{});var c9e=s(t4);x_e=n(c9e,"STRONG",{});var oht=s(x_e);Gsr=r(oht,"distilbert"),oht.forEach(t),Osr=r(c9e," \u2014 "),iz=n(c9e,"A",{href:!0});var rht=s(iz);Vsr=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),Xsr=r(c9e," (DistilBERT model)"),c9e.forEach(t),zsr=i(le),a4=n(le,"LI",{});var m9e=s(a4);$_e=n(m9e,"STRONG",{});var tht=s($_e);Qsr=r(tht,"electra"),tht.forEach(t),Wsr=r(m9e," \u2014 "),dz=n(m9e,"A",{href:!0});var aht=s(dz);Hsr=r(aht,"TFElectraForPreTraining"),aht.forEach(t),Usr=r(m9e," (ELECTRA model)"),m9e.forEach(t),Jsr=i(le),n4=n(le,"LI",{});var f9e=s(n4);k_e=n(f9e,"STRONG",{});var nht=s(k_e);Ysr=r(nht,"flaubert"),nht.forEach(t),Ksr=r(f9e," \u2014 "),cz=n(f9e,"A",{href:!0});var sht=s(cz);Zsr=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),elr=r(f9e," (FlauBERT model)"),f9e.forEach(t),olr=i(le),s4=n(le,"LI",{});var g9e=s(s4);S_e=n(g9e,"STRONG",{});var lht=s(S_e);rlr=r(lht,"funnel"),lht.forEach(t),tlr=r(g9e," \u2014 "),mz=n(g9e,"A",{href:!0});var iht=s(mz);alr=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),nlr=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),slr=i(le),l4=n(le,"LI",{});var h9e=s(l4);R_e=n(h9e,"STRONG",{});var dht=s(R_e);llr=r(dht,"gpt2"),dht.forEach(t),ilr=r(h9e," \u2014 "),fz=n(h9e,"A",{href:!0});var cht=s(fz);dlr=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),clr=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),mlr=i(le),i4=n(le,"LI",{});var u9e=s(i4);B_e=n(u9e,"STRONG",{});var mht=s(B_e);flr=r(mht,"layoutlm"),mht.forEach(t),glr=r(u9e," \u2014 "),gz=n(u9e,"A",{href:!0});var fht=s(gz);hlr=r(fht,"TFLayoutLMForMaskedLM"),fht.forEach(t),ulr=r(u9e," (LayoutLM model)"),u9e.forEach(t),plr=i(le),d4=n(le,"LI",{});var p9e=s(d4);P_e=n(p9e,"STRONG",{});var ght=s(P_e);_lr=r(ght,"lxmert"),ght.forEach(t),blr=r(p9e," \u2014 "),hz=n(p9e,"A",{href:!0});var hht=s(hz);Flr=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),vlr=r(p9e," (LXMERT model)"),p9e.forEach(t),Tlr=i(le),c4=n(le,"LI",{});var _9e=s(c4);I_e=n(_9e,"STRONG",{});var uht=s(I_e);Mlr=r(uht,"mobilebert"),uht.forEach(t),Elr=r(_9e," \u2014 "),uz=n(_9e,"A",{href:!0});var pht=s(uz);Clr=r(pht,"TFMobileBertForPreTraining"),pht.forEach(t),wlr=r(_9e," (MobileBERT model)"),_9e.forEach(t),Alr=i(le),m4=n(le,"LI",{});var b9e=s(m4);q_e=n(b9e,"STRONG",{});var _ht=s(q_e);ylr=r(_ht,"mpnet"),_ht.forEach(t),Llr=r(b9e," \u2014 "),pz=n(b9e,"A",{href:!0});var bht=s(pz);xlr=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),$lr=r(b9e," (MPNet model)"),b9e.forEach(t),klr=i(le),f4=n(le,"LI",{});var F9e=s(f4);N_e=n(F9e,"STRONG",{});var Fht=s(N_e);Slr=r(Fht,"openai-gpt"),Fht.forEach(t),Rlr=r(F9e," \u2014 "),_z=n(F9e,"A",{href:!0});var vht=s(_z);Blr=r(vht,"TFOpenAIGPTLMHeadModel"),vht.forEach(t),Plr=r(F9e," (OpenAI GPT model)"),F9e.forEach(t),Ilr=i(le),g4=n(le,"LI",{});var v9e=s(g4);j_e=n(v9e,"STRONG",{});var Tht=s(j_e);qlr=r(Tht,"roberta"),Tht.forEach(t),Nlr=r(v9e," \u2014 "),bz=n(v9e,"A",{href:!0});var Mht=s(bz);jlr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),Dlr=r(v9e," (RoBERTa model)"),v9e.forEach(t),Glr=i(le),h4=n(le,"LI",{});var T9e=s(h4);D_e=n(T9e,"STRONG",{});var Eht=s(D_e);Olr=r(Eht,"t5"),Eht.forEach(t),Vlr=r(T9e," \u2014 "),Fz=n(T9e,"A",{href:!0});var Cht=s(Fz);Xlr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),zlr=r(T9e," (T5 model)"),T9e.forEach(t),Qlr=i(le),u4=n(le,"LI",{});var M9e=s(u4);G_e=n(M9e,"STRONG",{});var wht=s(G_e);Wlr=r(wht,"tapas"),wht.forEach(t),Hlr=r(M9e," \u2014 "),vz=n(M9e,"A",{href:!0});var Aht=s(vz);Ulr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),Jlr=r(M9e," (TAPAS model)"),M9e.forEach(t),Ylr=i(le),p4=n(le,"LI",{});var E9e=s(p4);O_e=n(E9e,"STRONG",{});var yht=s(O_e);Klr=r(yht,"transfo-xl"),yht.forEach(t),Zlr=r(E9e," \u2014 "),Tz=n(E9e,"A",{href:!0});var Lht=s(Tz);eir=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),oir=r(E9e," (Transformer-XL model)"),E9e.forEach(t),rir=i(le),_4=n(le,"LI",{});var C9e=s(_4);V_e=n(C9e,"STRONG",{});var xht=s(V_e);tir=r(xht,"vit_mae"),xht.forEach(t),air=r(C9e," \u2014 "),Mz=n(C9e,"A",{href:!0});var $ht=s(Mz);nir=r($ht,"TFViTMAEForPreTraining"),$ht.forEach(t),sir=r(C9e," (ViTMAE model)"),C9e.forEach(t),lir=i(le),b4=n(le,"LI",{});var w9e=s(b4);X_e=n(w9e,"STRONG",{});var kht=s(X_e);iir=r(kht,"xlm"),kht.forEach(t),dir=r(w9e," \u2014 "),Ez=n(w9e,"A",{href:!0});var Sht=s(Ez);cir=r(Sht,"TFXLMWithLMHeadModel"),Sht.forEach(t),mir=r(w9e," (XLM model)"),w9e.forEach(t),fir=i(le),F4=n(le,"LI",{});var A9e=s(F4);z_e=n(A9e,"STRONG",{});var Rht=s(z_e);gir=r(Rht,"xlm-roberta"),Rht.forEach(t),hir=r(A9e," \u2014 "),Cz=n(A9e,"A",{href:!0});var Bht=s(Cz);uir=r(Bht,"TFXLMRobertaForMaskedLM"),Bht.forEach(t),pir=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),_ir=i(le),v4=n(le,"LI",{});var y9e=s(v4);Q_e=n(y9e,"STRONG",{});var Pht=s(Q_e);bir=r(Pht,"xlnet"),Pht.forEach(t),Fir=r(y9e," \u2014 "),wz=n(y9e,"A",{href:!0});var Iht=s(wz);vir=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Tir=r(y9e," (XLNet model)"),y9e.forEach(t),le.forEach(t),Mir=i(ll),T(T4.$$.fragment,ll),ll.forEach(t),sl.forEach(t),KBe=i(m),qd=n(m,"H2",{class:!0});var rqe=s(qd);M4=n(rqe,"A",{id:!0,class:!0,href:!0});var qht=s(M4);W_e=n(qht,"SPAN",{});var Nht=s(W_e);T(i8.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Eir=i(rqe),H_e=n(rqe,"SPAN",{});var jht=s(H_e);Cir=r(jht,"TFAutoModelForCausalLM"),jht.forEach(t),rqe.forEach(t),ZBe=i(m),Yo=n(m,"DIV",{class:!0});var il=s(Yo);T(d8.$$.fragment,il),wir=i(il),Nd=n(il,"P",{});var eK=s(Nd);Air=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Az=n(eK,"A",{href:!0});var Dht=s(Az);yir=r(Dht,"from_pretrained()"),Dht.forEach(t),Lir=r(eK," class method or the "),yz=n(eK,"A",{href:!0});var Ght=s(yz);xir=r(Ght,"from_config()"),Ght.forEach(t),$ir=r(eK,` class
method.`),eK.forEach(t),kir=i(il),c8=n(il,"P",{});var tqe=s(c8);Sir=r(tqe,"This class cannot be instantiated directly using "),U_e=n(tqe,"CODE",{});var Oht=s(U_e);Rir=r(Oht,"__init__()"),Oht.forEach(t),Bir=r(tqe," (throws an error)."),tqe.forEach(t),Pir=i(il),Ct=n(il,"DIV",{class:!0});var T0=s(Ct);T(m8.$$.fragment,T0),Iir=i(T0),J_e=n(T0,"P",{});var Vht=s(J_e);qir=r(Vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vht.forEach(t),Nir=i(T0),jd=n(T0,"P",{});var oK=s(jd);jir=r(oK,`Note:
Loading a model from its configuration file does `),Y_e=n(oK,"STRONG",{});var Xht=s(Y_e);Dir=r(Xht,"not"),Xht.forEach(t),Gir=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(oK,"A",{href:!0});var zht=s(Lz);Oir=r(zht,"from_pretrained()"),zht.forEach(t),Vir=r(oK," to load the model weights."),oK.forEach(t),Xir=i(T0),T(E4.$$.fragment,T0),T0.forEach(t),zir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(f8.$$.fragment,dl),Qir=i(dl),K_e=n(dl,"P",{});var Qht=s(K_e);Wir=r(Qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qht.forEach(t),Hir=i(dl),Ja=n(dl,"P",{});var M0=s(Ja);Uir=r(M0,"The model class to instantiate is selected based on the "),Z_e=n(M0,"CODE",{});var Wht=s(Z_e);Jir=r(Wht,"model_type"),Wht.forEach(t),Yir=r(M0,` property of the config object (either
passed as an argument or loaded from `),ebe=n(M0,"CODE",{});var Hht=s(ebe);Kir=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),Zir=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(M0,"CODE",{});var Uht=s(obe);edr=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),odr=r(M0,":"),M0.forEach(t),rdr=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);C4=n(Ce,"LI",{});var L9e=s(C4);rbe=n(L9e,"STRONG",{});var Jht=s(rbe);tdr=r(Jht,"bert"),Jht.forEach(t),adr=r(L9e," \u2014 "),xz=n(L9e,"A",{href:!0});var Yht=s(xz);ndr=r(Yht,"TFBertLMHeadModel"),Yht.forEach(t),sdr=r(L9e," (BERT model)"),L9e.forEach(t),ldr=i(Ce),w4=n(Ce,"LI",{});var x9e=s(w4);tbe=n(x9e,"STRONG",{});var Kht=s(tbe);idr=r(Kht,"camembert"),Kht.forEach(t),ddr=r(x9e," \u2014 "),$z=n(x9e,"A",{href:!0});var Zht=s($z);cdr=r(Zht,"TFCamembertForCausalLM"),Zht.forEach(t),mdr=r(x9e," (CamemBERT model)"),x9e.forEach(t),fdr=i(Ce),A4=n(Ce,"LI",{});var $9e=s(A4);abe=n($9e,"STRONG",{});var eut=s(abe);gdr=r(eut,"ctrl"),eut.forEach(t),hdr=r($9e," \u2014 "),kz=n($9e,"A",{href:!0});var out=s(kz);udr=r(out,"TFCTRLLMHeadModel"),out.forEach(t),pdr=r($9e," (CTRL model)"),$9e.forEach(t),_dr=i(Ce),y4=n(Ce,"LI",{});var k9e=s(y4);nbe=n(k9e,"STRONG",{});var rut=s(nbe);bdr=r(rut,"gpt2"),rut.forEach(t),Fdr=r(k9e," \u2014 "),Sz=n(k9e,"A",{href:!0});var tut=s(Sz);vdr=r(tut,"TFGPT2LMHeadModel"),tut.forEach(t),Tdr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),Mdr=i(Ce),L4=n(Ce,"LI",{});var S9e=s(L4);sbe=n(S9e,"STRONG",{});var aut=s(sbe);Edr=r(aut,"gptj"),aut.forEach(t),Cdr=r(S9e," \u2014 "),Rz=n(S9e,"A",{href:!0});var nut=s(Rz);wdr=r(nut,"TFGPTJForCausalLM"),nut.forEach(t),Adr=r(S9e," (GPT-J model)"),S9e.forEach(t),ydr=i(Ce),x4=n(Ce,"LI",{});var R9e=s(x4);lbe=n(R9e,"STRONG",{});var sut=s(lbe);Ldr=r(sut,"openai-gpt"),sut.forEach(t),xdr=r(R9e," \u2014 "),Bz=n(R9e,"A",{href:!0});var lut=s(Bz);$dr=r(lut,"TFOpenAIGPTLMHeadModel"),lut.forEach(t),kdr=r(R9e," (OpenAI GPT model)"),R9e.forEach(t),Sdr=i(Ce),$4=n(Ce,"LI",{});var B9e=s($4);ibe=n(B9e,"STRONG",{});var iut=s(ibe);Rdr=r(iut,"rembert"),iut.forEach(t),Bdr=r(B9e," \u2014 "),Pz=n(B9e,"A",{href:!0});var dut=s(Pz);Pdr=r(dut,"TFRemBertForCausalLM"),dut.forEach(t),Idr=r(B9e," (RemBERT model)"),B9e.forEach(t),qdr=i(Ce),k4=n(Ce,"LI",{});var P9e=s(k4);dbe=n(P9e,"STRONG",{});var cut=s(dbe);Ndr=r(cut,"roberta"),cut.forEach(t),jdr=r(P9e," \u2014 "),Iz=n(P9e,"A",{href:!0});var mut=s(Iz);Ddr=r(mut,"TFRobertaForCausalLM"),mut.forEach(t),Gdr=r(P9e," (RoBERTa model)"),P9e.forEach(t),Odr=i(Ce),S4=n(Ce,"LI",{});var I9e=s(S4);cbe=n(I9e,"STRONG",{});var fut=s(cbe);Vdr=r(fut,"roformer"),fut.forEach(t),Xdr=r(I9e," \u2014 "),qz=n(I9e,"A",{href:!0});var gut=s(qz);zdr=r(gut,"TFRoFormerForCausalLM"),gut.forEach(t),Qdr=r(I9e," (RoFormer model)"),I9e.forEach(t),Wdr=i(Ce),R4=n(Ce,"LI",{});var q9e=s(R4);mbe=n(q9e,"STRONG",{});var hut=s(mbe);Hdr=r(hut,"transfo-xl"),hut.forEach(t),Udr=r(q9e," \u2014 "),Nz=n(q9e,"A",{href:!0});var uut=s(Nz);Jdr=r(uut,"TFTransfoXLLMHeadModel"),uut.forEach(t),Ydr=r(q9e," (Transformer-XL model)"),q9e.forEach(t),Kdr=i(Ce),B4=n(Ce,"LI",{});var N9e=s(B4);fbe=n(N9e,"STRONG",{});var put=s(fbe);Zdr=r(put,"xlm"),put.forEach(t),ecr=r(N9e," \u2014 "),jz=n(N9e,"A",{href:!0});var _ut=s(jz);ocr=r(_ut,"TFXLMWithLMHeadModel"),_ut.forEach(t),rcr=r(N9e," (XLM model)"),N9e.forEach(t),tcr=i(Ce),P4=n(Ce,"LI",{});var j9e=s(P4);gbe=n(j9e,"STRONG",{});var but=s(gbe);acr=r(but,"xlnet"),but.forEach(t),ncr=r(j9e," \u2014 "),Dz=n(j9e,"A",{href:!0});var Fut=s(Dz);scr=r(Fut,"TFXLNetLMHeadModel"),Fut.forEach(t),lcr=r(j9e," (XLNet model)"),j9e.forEach(t),Ce.forEach(t),icr=i(dl),T(I4.$$.fragment,dl),dl.forEach(t),il.forEach(t),ePe=i(m),Dd=n(m,"H2",{class:!0});var aqe=s(Dd);q4=n(aqe,"A",{id:!0,class:!0,href:!0});var vut=s(q4);hbe=n(vut,"SPAN",{});var Tut=s(hbe);T(g8.$$.fragment,Tut),Tut.forEach(t),vut.forEach(t),dcr=i(aqe),ube=n(aqe,"SPAN",{});var Mut=s(ube);ccr=r(Mut,"TFAutoModelForImageClassification"),Mut.forEach(t),aqe.forEach(t),oPe=i(m),Ko=n(m,"DIV",{class:!0});var cl=s(Ko);T(h8.$$.fragment,cl),mcr=i(cl),Gd=n(cl,"P",{});var rK=s(Gd);fcr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=n(rK,"A",{href:!0});var Eut=s(Gz);gcr=r(Eut,"from_pretrained()"),Eut.forEach(t),hcr=r(rK," class method or the "),Oz=n(rK,"A",{href:!0});var Cut=s(Oz);ucr=r(Cut,"from_config()"),Cut.forEach(t),pcr=r(rK,` class
method.`),rK.forEach(t),_cr=i(cl),u8=n(cl,"P",{});var nqe=s(u8);bcr=r(nqe,"This class cannot be instantiated directly using "),pbe=n(nqe,"CODE",{});var wut=s(pbe);Fcr=r(wut,"__init__()"),wut.forEach(t),vcr=r(nqe," (throws an error)."),nqe.forEach(t),Tcr=i(cl),wt=n(cl,"DIV",{class:!0});var E0=s(wt);T(p8.$$.fragment,E0),Mcr=i(E0),_be=n(E0,"P",{});var Aut=s(_be);Ecr=r(Aut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aut.forEach(t),Ccr=i(E0),Od=n(E0,"P",{});var tK=s(Od);wcr=r(tK,`Note:
Loading a model from its configuration file does `),bbe=n(tK,"STRONG",{});var yut=s(bbe);Acr=r(yut,"not"),yut.forEach(t),ycr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(tK,"A",{href:!0});var Lut=s(Vz);Lcr=r(Lut,"from_pretrained()"),Lut.forEach(t),xcr=r(tK," to load the model weights."),tK.forEach(t),$cr=i(E0),T(N4.$$.fragment,E0),E0.forEach(t),kcr=i(cl),wr=n(cl,"DIV",{class:!0});var ml=s(wr);T(_8.$$.fragment,ml),Scr=i(ml),Fbe=n(ml,"P",{});var xut=s(Fbe);Rcr=r(xut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xut.forEach(t),Bcr=i(ml),Ya=n(ml,"P",{});var C0=s(Ya);Pcr=r(C0,"The model class to instantiate is selected based on the "),vbe=n(C0,"CODE",{});var $ut=s(vbe);Icr=r($ut,"model_type"),$ut.forEach(t),qcr=r(C0,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(C0,"CODE",{});var kut=s(Tbe);Ncr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),jcr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(C0,"CODE",{});var Sut=s(Mbe);Dcr=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),Gcr=r(C0,":"),C0.forEach(t),Ocr=i(ml),b8=n(ml,"UL",{});var sqe=s(b8);j4=n(sqe,"LI",{});var D9e=s(j4);Ebe=n(D9e,"STRONG",{});var Rut=s(Ebe);Vcr=r(Rut,"convnext"),Rut.forEach(t),Xcr=r(D9e," \u2014 "),Xz=n(D9e,"A",{href:!0});var But=s(Xz);zcr=r(But,"TFConvNextForImageClassification"),But.forEach(t),Qcr=r(D9e," (ConvNext model)"),D9e.forEach(t),Wcr=i(sqe),D4=n(sqe,"LI",{});var G9e=s(D4);Cbe=n(G9e,"STRONG",{});var Put=s(Cbe);Hcr=r(Put,"vit"),Put.forEach(t),Ucr=r(G9e," \u2014 "),zz=n(G9e,"A",{href:!0});var Iut=s(zz);Jcr=r(Iut,"TFViTForImageClassification"),Iut.forEach(t),Ycr=r(G9e," (ViT model)"),G9e.forEach(t),sqe.forEach(t),Kcr=i(ml),T(G4.$$.fragment,ml),ml.forEach(t),cl.forEach(t),rPe=i(m),Vd=n(m,"H2",{class:!0});var lqe=s(Vd);O4=n(lqe,"A",{id:!0,class:!0,href:!0});var qut=s(O4);wbe=n(qut,"SPAN",{});var Nut=s(wbe);T(F8.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),Zcr=i(lqe),Abe=n(lqe,"SPAN",{});var jut=s(Abe);emr=r(jut,"TFAutoModelForMaskedLM"),jut.forEach(t),lqe.forEach(t),tPe=i(m),Zo=n(m,"DIV",{class:!0});var fl=s(Zo);T(v8.$$.fragment,fl),omr=i(fl),Xd=n(fl,"P",{});var aK=s(Xd);rmr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qz=n(aK,"A",{href:!0});var Dut=s(Qz);tmr=r(Dut,"from_pretrained()"),Dut.forEach(t),amr=r(aK," class method or the "),Wz=n(aK,"A",{href:!0});var Gut=s(Wz);nmr=r(Gut,"from_config()"),Gut.forEach(t),smr=r(aK,` class
method.`),aK.forEach(t),lmr=i(fl),T8=n(fl,"P",{});var iqe=s(T8);imr=r(iqe,"This class cannot be instantiated directly using "),ybe=n(iqe,"CODE",{});var Out=s(ybe);dmr=r(Out,"__init__()"),Out.forEach(t),cmr=r(iqe," (throws an error)."),iqe.forEach(t),mmr=i(fl),At=n(fl,"DIV",{class:!0});var w0=s(At);T(M8.$$.fragment,w0),fmr=i(w0),Lbe=n(w0,"P",{});var Vut=s(Lbe);gmr=r(Vut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vut.forEach(t),hmr=i(w0),zd=n(w0,"P",{});var nK=s(zd);umr=r(nK,`Note:
Loading a model from its configuration file does `),xbe=n(nK,"STRONG",{});var Xut=s(xbe);pmr=r(Xut,"not"),Xut.forEach(t),_mr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(nK,"A",{href:!0});var zut=s(Hz);bmr=r(zut,"from_pretrained()"),zut.forEach(t),Fmr=r(nK," to load the model weights."),nK.forEach(t),vmr=i(w0),T(V4.$$.fragment,w0),w0.forEach(t),Tmr=i(fl),Ar=n(fl,"DIV",{class:!0});var gl=s(Ar);T(E8.$$.fragment,gl),Mmr=i(gl),$be=n(gl,"P",{});var Qut=s($be);Emr=r(Qut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qut.forEach(t),Cmr=i(gl),Ka=n(gl,"P",{});var A0=s(Ka);wmr=r(A0,"The model class to instantiate is selected based on the "),kbe=n(A0,"CODE",{});var Wut=s(kbe);Amr=r(Wut,"model_type"),Wut.forEach(t),ymr=r(A0,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(A0,"CODE",{});var Hut=s(Sbe);Lmr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),xmr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(A0,"CODE",{});var Uut=s(Rbe);$mr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),kmr=r(A0,":"),A0.forEach(t),Smr=i(gl),ie=n(gl,"UL",{});var me=s(ie);X4=n(me,"LI",{});var O9e=s(X4);Bbe=n(O9e,"STRONG",{});var Jut=s(Bbe);Rmr=r(Jut,"albert"),Jut.forEach(t),Bmr=r(O9e," \u2014 "),Uz=n(O9e,"A",{href:!0});var Yut=s(Uz);Pmr=r(Yut,"TFAlbertForMaskedLM"),Yut.forEach(t),Imr=r(O9e," (ALBERT model)"),O9e.forEach(t),qmr=i(me),z4=n(me,"LI",{});var V9e=s(z4);Pbe=n(V9e,"STRONG",{});var Kut=s(Pbe);Nmr=r(Kut,"bert"),Kut.forEach(t),jmr=r(V9e," \u2014 "),Jz=n(V9e,"A",{href:!0});var Zut=s(Jz);Dmr=r(Zut,"TFBertForMaskedLM"),Zut.forEach(t),Gmr=r(V9e," (BERT model)"),V9e.forEach(t),Omr=i(me),Q4=n(me,"LI",{});var X9e=s(Q4);Ibe=n(X9e,"STRONG",{});var ept=s(Ibe);Vmr=r(ept,"camembert"),ept.forEach(t),Xmr=r(X9e," \u2014 "),Yz=n(X9e,"A",{href:!0});var opt=s(Yz);zmr=r(opt,"TFCamembertForMaskedLM"),opt.forEach(t),Qmr=r(X9e," (CamemBERT model)"),X9e.forEach(t),Wmr=i(me),W4=n(me,"LI",{});var z9e=s(W4);qbe=n(z9e,"STRONG",{});var rpt=s(qbe);Hmr=r(rpt,"convbert"),rpt.forEach(t),Umr=r(z9e," \u2014 "),Kz=n(z9e,"A",{href:!0});var tpt=s(Kz);Jmr=r(tpt,"TFConvBertForMaskedLM"),tpt.forEach(t),Ymr=r(z9e," (ConvBERT model)"),z9e.forEach(t),Kmr=i(me),H4=n(me,"LI",{});var Q9e=s(H4);Nbe=n(Q9e,"STRONG",{});var apt=s(Nbe);Zmr=r(apt,"deberta"),apt.forEach(t),efr=r(Q9e," \u2014 "),Zz=n(Q9e,"A",{href:!0});var npt=s(Zz);ofr=r(npt,"TFDebertaForMaskedLM"),npt.forEach(t),rfr=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),tfr=i(me),U4=n(me,"LI",{});var W9e=s(U4);jbe=n(W9e,"STRONG",{});var spt=s(jbe);afr=r(spt,"deberta-v2"),spt.forEach(t),nfr=r(W9e," \u2014 "),eQ=n(W9e,"A",{href:!0});var lpt=s(eQ);sfr=r(lpt,"TFDebertaV2ForMaskedLM"),lpt.forEach(t),lfr=r(W9e," (DeBERTa-v2 model)"),W9e.forEach(t),ifr=i(me),J4=n(me,"LI",{});var H9e=s(J4);Dbe=n(H9e,"STRONG",{});var ipt=s(Dbe);dfr=r(ipt,"distilbert"),ipt.forEach(t),cfr=r(H9e," \u2014 "),oQ=n(H9e,"A",{href:!0});var dpt=s(oQ);mfr=r(dpt,"TFDistilBertForMaskedLM"),dpt.forEach(t),ffr=r(H9e," (DistilBERT model)"),H9e.forEach(t),gfr=i(me),Y4=n(me,"LI",{});var U9e=s(Y4);Gbe=n(U9e,"STRONG",{});var cpt=s(Gbe);hfr=r(cpt,"electra"),cpt.forEach(t),ufr=r(U9e," \u2014 "),rQ=n(U9e,"A",{href:!0});var mpt=s(rQ);pfr=r(mpt,"TFElectraForMaskedLM"),mpt.forEach(t),_fr=r(U9e," (ELECTRA model)"),U9e.forEach(t),bfr=i(me),K4=n(me,"LI",{});var J9e=s(K4);Obe=n(J9e,"STRONG",{});var fpt=s(Obe);Ffr=r(fpt,"flaubert"),fpt.forEach(t),vfr=r(J9e," \u2014 "),tQ=n(J9e,"A",{href:!0});var gpt=s(tQ);Tfr=r(gpt,"TFFlaubertWithLMHeadModel"),gpt.forEach(t),Mfr=r(J9e," (FlauBERT model)"),J9e.forEach(t),Efr=i(me),Z4=n(me,"LI",{});var Y9e=s(Z4);Vbe=n(Y9e,"STRONG",{});var hpt=s(Vbe);Cfr=r(hpt,"funnel"),hpt.forEach(t),wfr=r(Y9e," \u2014 "),aQ=n(Y9e,"A",{href:!0});var upt=s(aQ);Afr=r(upt,"TFFunnelForMaskedLM"),upt.forEach(t),yfr=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),Lfr=i(me),eE=n(me,"LI",{});var K9e=s(eE);Xbe=n(K9e,"STRONG",{});var ppt=s(Xbe);xfr=r(ppt,"layoutlm"),ppt.forEach(t),$fr=r(K9e," \u2014 "),nQ=n(K9e,"A",{href:!0});var _pt=s(nQ);kfr=r(_pt,"TFLayoutLMForMaskedLM"),_pt.forEach(t),Sfr=r(K9e," (LayoutLM model)"),K9e.forEach(t),Rfr=i(me),oE=n(me,"LI",{});var Z9e=s(oE);zbe=n(Z9e,"STRONG",{});var bpt=s(zbe);Bfr=r(bpt,"longformer"),bpt.forEach(t),Pfr=r(Z9e," \u2014 "),sQ=n(Z9e,"A",{href:!0});var Fpt=s(sQ);Ifr=r(Fpt,"TFLongformerForMaskedLM"),Fpt.forEach(t),qfr=r(Z9e," (Longformer model)"),Z9e.forEach(t),Nfr=i(me),rE=n(me,"LI",{});var e$e=s(rE);Qbe=n(e$e,"STRONG",{});var vpt=s(Qbe);jfr=r(vpt,"mobilebert"),vpt.forEach(t),Dfr=r(e$e," \u2014 "),lQ=n(e$e,"A",{href:!0});var Tpt=s(lQ);Gfr=r(Tpt,"TFMobileBertForMaskedLM"),Tpt.forEach(t),Ofr=r(e$e," (MobileBERT model)"),e$e.forEach(t),Vfr=i(me),tE=n(me,"LI",{});var o$e=s(tE);Wbe=n(o$e,"STRONG",{});var Mpt=s(Wbe);Xfr=r(Mpt,"mpnet"),Mpt.forEach(t),zfr=r(o$e," \u2014 "),iQ=n(o$e,"A",{href:!0});var Ept=s(iQ);Qfr=r(Ept,"TFMPNetForMaskedLM"),Ept.forEach(t),Wfr=r(o$e," (MPNet model)"),o$e.forEach(t),Hfr=i(me),aE=n(me,"LI",{});var r$e=s(aE);Hbe=n(r$e,"STRONG",{});var Cpt=s(Hbe);Ufr=r(Cpt,"rembert"),Cpt.forEach(t),Jfr=r(r$e," \u2014 "),dQ=n(r$e,"A",{href:!0});var wpt=s(dQ);Yfr=r(wpt,"TFRemBertForMaskedLM"),wpt.forEach(t),Kfr=r(r$e," (RemBERT model)"),r$e.forEach(t),Zfr=i(me),nE=n(me,"LI",{});var t$e=s(nE);Ube=n(t$e,"STRONG",{});var Apt=s(Ube);egr=r(Apt,"roberta"),Apt.forEach(t),ogr=r(t$e," \u2014 "),cQ=n(t$e,"A",{href:!0});var ypt=s(cQ);rgr=r(ypt,"TFRobertaForMaskedLM"),ypt.forEach(t),tgr=r(t$e," (RoBERTa model)"),t$e.forEach(t),agr=i(me),sE=n(me,"LI",{});var a$e=s(sE);Jbe=n(a$e,"STRONG",{});var Lpt=s(Jbe);ngr=r(Lpt,"roformer"),Lpt.forEach(t),sgr=r(a$e," \u2014 "),mQ=n(a$e,"A",{href:!0});var xpt=s(mQ);lgr=r(xpt,"TFRoFormerForMaskedLM"),xpt.forEach(t),igr=r(a$e," (RoFormer model)"),a$e.forEach(t),dgr=i(me),lE=n(me,"LI",{});var n$e=s(lE);Ybe=n(n$e,"STRONG",{});var $pt=s(Ybe);cgr=r($pt,"tapas"),$pt.forEach(t),mgr=r(n$e," \u2014 "),fQ=n(n$e,"A",{href:!0});var kpt=s(fQ);fgr=r(kpt,"TFTapasForMaskedLM"),kpt.forEach(t),ggr=r(n$e," (TAPAS model)"),n$e.forEach(t),hgr=i(me),iE=n(me,"LI",{});var s$e=s(iE);Kbe=n(s$e,"STRONG",{});var Spt=s(Kbe);ugr=r(Spt,"xlm"),Spt.forEach(t),pgr=r(s$e," \u2014 "),gQ=n(s$e,"A",{href:!0});var Rpt=s(gQ);_gr=r(Rpt,"TFXLMWithLMHeadModel"),Rpt.forEach(t),bgr=r(s$e," (XLM model)"),s$e.forEach(t),Fgr=i(me),dE=n(me,"LI",{});var l$e=s(dE);Zbe=n(l$e,"STRONG",{});var Bpt=s(Zbe);vgr=r(Bpt,"xlm-roberta"),Bpt.forEach(t),Tgr=r(l$e," \u2014 "),hQ=n(l$e,"A",{href:!0});var Ppt=s(hQ);Mgr=r(Ppt,"TFXLMRobertaForMaskedLM"),Ppt.forEach(t),Egr=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),me.forEach(t),Cgr=i(gl),T(cE.$$.fragment,gl),gl.forEach(t),fl.forEach(t),aPe=i(m),Qd=n(m,"H2",{class:!0});var dqe=s(Qd);mE=n(dqe,"A",{id:!0,class:!0,href:!0});var Ipt=s(mE);e2e=n(Ipt,"SPAN",{});var qpt=s(e2e);T(C8.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),wgr=i(dqe),o2e=n(dqe,"SPAN",{});var Npt=s(o2e);Agr=r(Npt,"TFAutoModelForSeq2SeqLM"),Npt.forEach(t),dqe.forEach(t),nPe=i(m),er=n(m,"DIV",{class:!0});var hl=s(er);T(w8.$$.fragment,hl),ygr=i(hl),Wd=n(hl,"P",{});var sK=s(Wd);Lgr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uQ=n(sK,"A",{href:!0});var jpt=s(uQ);xgr=r(jpt,"from_pretrained()"),jpt.forEach(t),$gr=r(sK," class method or the "),pQ=n(sK,"A",{href:!0});var Dpt=s(pQ);kgr=r(Dpt,"from_config()"),Dpt.forEach(t),Sgr=r(sK,` class
method.`),sK.forEach(t),Rgr=i(hl),A8=n(hl,"P",{});var cqe=s(A8);Bgr=r(cqe,"This class cannot be instantiated directly using "),r2e=n(cqe,"CODE",{});var Gpt=s(r2e);Pgr=r(Gpt,"__init__()"),Gpt.forEach(t),Igr=r(cqe," (throws an error)."),cqe.forEach(t),qgr=i(hl),yt=n(hl,"DIV",{class:!0});var y0=s(yt);T(y8.$$.fragment,y0),Ngr=i(y0),t2e=n(y0,"P",{});var Opt=s(t2e);jgr=r(Opt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Opt.forEach(t),Dgr=i(y0),Hd=n(y0,"P",{});var lK=s(Hd);Ggr=r(lK,`Note:
Loading a model from its configuration file does `),a2e=n(lK,"STRONG",{});var Vpt=s(a2e);Ogr=r(Vpt,"not"),Vpt.forEach(t),Vgr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(lK,"A",{href:!0});var Xpt=s(_Q);Xgr=r(Xpt,"from_pretrained()"),Xpt.forEach(t),zgr=r(lK," to load the model weights."),lK.forEach(t),Qgr=i(y0),T(fE.$$.fragment,y0),y0.forEach(t),Wgr=i(hl),yr=n(hl,"DIV",{class:!0});var ul=s(yr);T(L8.$$.fragment,ul),Hgr=i(ul),n2e=n(ul,"P",{});var zpt=s(n2e);Ugr=r(zpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zpt.forEach(t),Jgr=i(ul),Za=n(ul,"P",{});var L0=s(Za);Ygr=r(L0,"The model class to instantiate is selected based on the "),s2e=n(L0,"CODE",{});var Qpt=s(s2e);Kgr=r(Qpt,"model_type"),Qpt.forEach(t),Zgr=r(L0,` property of the config object (either
passed as an argument or loaded from `),l2e=n(L0,"CODE",{});var Wpt=s(l2e);ehr=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),ohr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(L0,"CODE",{});var Hpt=s(i2e);rhr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),thr=r(L0,":"),L0.forEach(t),ahr=i(ul),ye=n(ul,"UL",{});var Se=s(ye);gE=n(Se,"LI",{});var i$e=s(gE);d2e=n(i$e,"STRONG",{});var Upt=s(d2e);nhr=r(Upt,"bart"),Upt.forEach(t),shr=r(i$e," \u2014 "),bQ=n(i$e,"A",{href:!0});var Jpt=s(bQ);lhr=r(Jpt,"TFBartForConditionalGeneration"),Jpt.forEach(t),ihr=r(i$e," (BART model)"),i$e.forEach(t),dhr=i(Se),hE=n(Se,"LI",{});var d$e=s(hE);c2e=n(d$e,"STRONG",{});var Ypt=s(c2e);chr=r(Ypt,"blenderbot"),Ypt.forEach(t),mhr=r(d$e," \u2014 "),FQ=n(d$e,"A",{href:!0});var Kpt=s(FQ);fhr=r(Kpt,"TFBlenderbotForConditionalGeneration"),Kpt.forEach(t),ghr=r(d$e," (Blenderbot model)"),d$e.forEach(t),hhr=i(Se),uE=n(Se,"LI",{});var c$e=s(uE);m2e=n(c$e,"STRONG",{});var Zpt=s(m2e);uhr=r(Zpt,"blenderbot-small"),Zpt.forEach(t),phr=r(c$e," \u2014 "),vQ=n(c$e,"A",{href:!0});var e_t=s(vQ);_hr=r(e_t,"TFBlenderbotSmallForConditionalGeneration"),e_t.forEach(t),bhr=r(c$e," (BlenderbotSmall model)"),c$e.forEach(t),Fhr=i(Se),pE=n(Se,"LI",{});var m$e=s(pE);f2e=n(m$e,"STRONG",{});var o_t=s(f2e);vhr=r(o_t,"encoder-decoder"),o_t.forEach(t),Thr=r(m$e," \u2014 "),TQ=n(m$e,"A",{href:!0});var r_t=s(TQ);Mhr=r(r_t,"TFEncoderDecoderModel"),r_t.forEach(t),Ehr=r(m$e," (Encoder decoder model)"),m$e.forEach(t),Chr=i(Se),_E=n(Se,"LI",{});var f$e=s(_E);g2e=n(f$e,"STRONG",{});var t_t=s(g2e);whr=r(t_t,"led"),t_t.forEach(t),Ahr=r(f$e," \u2014 "),MQ=n(f$e,"A",{href:!0});var a_t=s(MQ);yhr=r(a_t,"TFLEDForConditionalGeneration"),a_t.forEach(t),Lhr=r(f$e," (LED model)"),f$e.forEach(t),xhr=i(Se),bE=n(Se,"LI",{});var g$e=s(bE);h2e=n(g$e,"STRONG",{});var n_t=s(h2e);$hr=r(n_t,"marian"),n_t.forEach(t),khr=r(g$e," \u2014 "),EQ=n(g$e,"A",{href:!0});var s_t=s(EQ);Shr=r(s_t,"TFMarianMTModel"),s_t.forEach(t),Rhr=r(g$e," (Marian model)"),g$e.forEach(t),Bhr=i(Se),FE=n(Se,"LI",{});var h$e=s(FE);u2e=n(h$e,"STRONG",{});var l_t=s(u2e);Phr=r(l_t,"mbart"),l_t.forEach(t),Ihr=r(h$e," \u2014 "),CQ=n(h$e,"A",{href:!0});var i_t=s(CQ);qhr=r(i_t,"TFMBartForConditionalGeneration"),i_t.forEach(t),Nhr=r(h$e," (mBART model)"),h$e.forEach(t),jhr=i(Se),vE=n(Se,"LI",{});var u$e=s(vE);p2e=n(u$e,"STRONG",{});var d_t=s(p2e);Dhr=r(d_t,"mt5"),d_t.forEach(t),Ghr=r(u$e," \u2014 "),wQ=n(u$e,"A",{href:!0});var c_t=s(wQ);Ohr=r(c_t,"TFMT5ForConditionalGeneration"),c_t.forEach(t),Vhr=r(u$e," (mT5 model)"),u$e.forEach(t),Xhr=i(Se),TE=n(Se,"LI",{});var p$e=s(TE);_2e=n(p$e,"STRONG",{});var m_t=s(_2e);zhr=r(m_t,"pegasus"),m_t.forEach(t),Qhr=r(p$e," \u2014 "),AQ=n(p$e,"A",{href:!0});var f_t=s(AQ);Whr=r(f_t,"TFPegasusForConditionalGeneration"),f_t.forEach(t),Hhr=r(p$e," (Pegasus model)"),p$e.forEach(t),Uhr=i(Se),ME=n(Se,"LI",{});var _$e=s(ME);b2e=n(_$e,"STRONG",{});var g_t=s(b2e);Jhr=r(g_t,"t5"),g_t.forEach(t),Yhr=r(_$e," \u2014 "),yQ=n(_$e,"A",{href:!0});var h_t=s(yQ);Khr=r(h_t,"TFT5ForConditionalGeneration"),h_t.forEach(t),Zhr=r(_$e," (T5 model)"),_$e.forEach(t),Se.forEach(t),eur=i(ul),T(EE.$$.fragment,ul),ul.forEach(t),hl.forEach(t),sPe=i(m),Ud=n(m,"H2",{class:!0});var mqe=s(Ud);CE=n(mqe,"A",{id:!0,class:!0,href:!0});var u_t=s(CE);F2e=n(u_t,"SPAN",{});var p_t=s(F2e);T(x8.$$.fragment,p_t),p_t.forEach(t),u_t.forEach(t),our=i(mqe),v2e=n(mqe,"SPAN",{});var __t=s(v2e);rur=r(__t,"TFAutoModelForSequenceClassification"),__t.forEach(t),mqe.forEach(t),lPe=i(m),or=n(m,"DIV",{class:!0});var pl=s(or);T($8.$$.fragment,pl),tur=i(pl),Jd=n(pl,"P",{});var iK=s(Jd);aur=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LQ=n(iK,"A",{href:!0});var b_t=s(LQ);nur=r(b_t,"from_pretrained()"),b_t.forEach(t),sur=r(iK," class method or the "),xQ=n(iK,"A",{href:!0});var F_t=s(xQ);lur=r(F_t,"from_config()"),F_t.forEach(t),iur=r(iK,` class
method.`),iK.forEach(t),dur=i(pl),k8=n(pl,"P",{});var fqe=s(k8);cur=r(fqe,"This class cannot be instantiated directly using "),T2e=n(fqe,"CODE",{});var v_t=s(T2e);mur=r(v_t,"__init__()"),v_t.forEach(t),fur=r(fqe," (throws an error)."),fqe.forEach(t),gur=i(pl),Lt=n(pl,"DIV",{class:!0});var x0=s(Lt);T(S8.$$.fragment,x0),hur=i(x0),M2e=n(x0,"P",{});var T_t=s(M2e);uur=r(T_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T_t.forEach(t),pur=i(x0),Yd=n(x0,"P",{});var dK=s(Yd);_ur=r(dK,`Note:
Loading a model from its configuration file does `),E2e=n(dK,"STRONG",{});var M_t=s(E2e);bur=r(M_t,"not"),M_t.forEach(t),Fur=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(dK,"A",{href:!0});var E_t=s($Q);vur=r(E_t,"from_pretrained()"),E_t.forEach(t),Tur=r(dK," to load the model weights."),dK.forEach(t),Mur=i(x0),T(wE.$$.fragment,x0),x0.forEach(t),Eur=i(pl),Lr=n(pl,"DIV",{class:!0});var _l=s(Lr);T(R8.$$.fragment,_l),Cur=i(_l),C2e=n(_l,"P",{});var C_t=s(C2e);wur=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),Aur=i(_l),en=n(_l,"P",{});var $0=s(en);yur=r($0,"The model class to instantiate is selected based on the "),w2e=n($0,"CODE",{});var w_t=s(w2e);Lur=r(w_t,"model_type"),w_t.forEach(t),xur=r($0,` property of the config object (either
passed as an argument or loaded from `),A2e=n($0,"CODE",{});var A_t=s(A2e);$ur=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),kur=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n($0,"CODE",{});var y_t=s(y2e);Sur=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),Rur=r($0,":"),$0.forEach(t),Bur=i(_l),Z=n(_l,"UL",{});var re=s(Z);AE=n(re,"LI",{});var b$e=s(AE);L2e=n(b$e,"STRONG",{});var L_t=s(L2e);Pur=r(L_t,"albert"),L_t.forEach(t),Iur=r(b$e," \u2014 "),kQ=n(b$e,"A",{href:!0});var x_t=s(kQ);qur=r(x_t,"TFAlbertForSequenceClassification"),x_t.forEach(t),Nur=r(b$e," (ALBERT model)"),b$e.forEach(t),jur=i(re),yE=n(re,"LI",{});var F$e=s(yE);x2e=n(F$e,"STRONG",{});var $_t=s(x2e);Dur=r($_t,"bert"),$_t.forEach(t),Gur=r(F$e," \u2014 "),SQ=n(F$e,"A",{href:!0});var k_t=s(SQ);Our=r(k_t,"TFBertForSequenceClassification"),k_t.forEach(t),Vur=r(F$e," (BERT model)"),F$e.forEach(t),Xur=i(re),LE=n(re,"LI",{});var v$e=s(LE);$2e=n(v$e,"STRONG",{});var S_t=s($2e);zur=r(S_t,"camembert"),S_t.forEach(t),Qur=r(v$e," \u2014 "),RQ=n(v$e,"A",{href:!0});var R_t=s(RQ);Wur=r(R_t,"TFCamembertForSequenceClassification"),R_t.forEach(t),Hur=r(v$e," (CamemBERT model)"),v$e.forEach(t),Uur=i(re),xE=n(re,"LI",{});var T$e=s(xE);k2e=n(T$e,"STRONG",{});var B_t=s(k2e);Jur=r(B_t,"convbert"),B_t.forEach(t),Yur=r(T$e," \u2014 "),BQ=n(T$e,"A",{href:!0});var P_t=s(BQ);Kur=r(P_t,"TFConvBertForSequenceClassification"),P_t.forEach(t),Zur=r(T$e," (ConvBERT model)"),T$e.forEach(t),epr=i(re),$E=n(re,"LI",{});var M$e=s($E);S2e=n(M$e,"STRONG",{});var I_t=s(S2e);opr=r(I_t,"ctrl"),I_t.forEach(t),rpr=r(M$e," \u2014 "),PQ=n(M$e,"A",{href:!0});var q_t=s(PQ);tpr=r(q_t,"TFCTRLForSequenceClassification"),q_t.forEach(t),apr=r(M$e," (CTRL model)"),M$e.forEach(t),npr=i(re),kE=n(re,"LI",{});var E$e=s(kE);R2e=n(E$e,"STRONG",{});var N_t=s(R2e);spr=r(N_t,"deberta"),N_t.forEach(t),lpr=r(E$e," \u2014 "),IQ=n(E$e,"A",{href:!0});var j_t=s(IQ);ipr=r(j_t,"TFDebertaForSequenceClassification"),j_t.forEach(t),dpr=r(E$e," (DeBERTa model)"),E$e.forEach(t),cpr=i(re),SE=n(re,"LI",{});var C$e=s(SE);B2e=n(C$e,"STRONG",{});var D_t=s(B2e);mpr=r(D_t,"deberta-v2"),D_t.forEach(t),fpr=r(C$e," \u2014 "),qQ=n(C$e,"A",{href:!0});var G_t=s(qQ);gpr=r(G_t,"TFDebertaV2ForSequenceClassification"),G_t.forEach(t),hpr=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),upr=i(re),RE=n(re,"LI",{});var w$e=s(RE);P2e=n(w$e,"STRONG",{});var O_t=s(P2e);ppr=r(O_t,"distilbert"),O_t.forEach(t),_pr=r(w$e," \u2014 "),NQ=n(w$e,"A",{href:!0});var V_t=s(NQ);bpr=r(V_t,"TFDistilBertForSequenceClassification"),V_t.forEach(t),Fpr=r(w$e," (DistilBERT model)"),w$e.forEach(t),vpr=i(re),BE=n(re,"LI",{});var A$e=s(BE);I2e=n(A$e,"STRONG",{});var X_t=s(I2e);Tpr=r(X_t,"electra"),X_t.forEach(t),Mpr=r(A$e," \u2014 "),jQ=n(A$e,"A",{href:!0});var z_t=s(jQ);Epr=r(z_t,"TFElectraForSequenceClassification"),z_t.forEach(t),Cpr=r(A$e," (ELECTRA model)"),A$e.forEach(t),wpr=i(re),PE=n(re,"LI",{});var y$e=s(PE);q2e=n(y$e,"STRONG",{});var Q_t=s(q2e);Apr=r(Q_t,"flaubert"),Q_t.forEach(t),ypr=r(y$e," \u2014 "),DQ=n(y$e,"A",{href:!0});var W_t=s(DQ);Lpr=r(W_t,"TFFlaubertForSequenceClassification"),W_t.forEach(t),xpr=r(y$e," (FlauBERT model)"),y$e.forEach(t),$pr=i(re),IE=n(re,"LI",{});var L$e=s(IE);N2e=n(L$e,"STRONG",{});var H_t=s(N2e);kpr=r(H_t,"funnel"),H_t.forEach(t),Spr=r(L$e," \u2014 "),GQ=n(L$e,"A",{href:!0});var U_t=s(GQ);Rpr=r(U_t,"TFFunnelForSequenceClassification"),U_t.forEach(t),Bpr=r(L$e," (Funnel Transformer model)"),L$e.forEach(t),Ppr=i(re),qE=n(re,"LI",{});var x$e=s(qE);j2e=n(x$e,"STRONG",{});var J_t=s(j2e);Ipr=r(J_t,"gpt2"),J_t.forEach(t),qpr=r(x$e," \u2014 "),OQ=n(x$e,"A",{href:!0});var Y_t=s(OQ);Npr=r(Y_t,"TFGPT2ForSequenceClassification"),Y_t.forEach(t),jpr=r(x$e," (OpenAI GPT-2 model)"),x$e.forEach(t),Dpr=i(re),NE=n(re,"LI",{});var $$e=s(NE);D2e=n($$e,"STRONG",{});var K_t=s(D2e);Gpr=r(K_t,"gptj"),K_t.forEach(t),Opr=r($$e," \u2014 "),VQ=n($$e,"A",{href:!0});var Z_t=s(VQ);Vpr=r(Z_t,"TFGPTJForSequenceClassification"),Z_t.forEach(t),Xpr=r($$e," (GPT-J model)"),$$e.forEach(t),zpr=i(re),jE=n(re,"LI",{});var k$e=s(jE);G2e=n(k$e,"STRONG",{});var ebt=s(G2e);Qpr=r(ebt,"layoutlm"),ebt.forEach(t),Wpr=r(k$e," \u2014 "),XQ=n(k$e,"A",{href:!0});var obt=s(XQ);Hpr=r(obt,"TFLayoutLMForSequenceClassification"),obt.forEach(t),Upr=r(k$e," (LayoutLM model)"),k$e.forEach(t),Jpr=i(re),DE=n(re,"LI",{});var S$e=s(DE);O2e=n(S$e,"STRONG",{});var rbt=s(O2e);Ypr=r(rbt,"longformer"),rbt.forEach(t),Kpr=r(S$e," \u2014 "),zQ=n(S$e,"A",{href:!0});var tbt=s(zQ);Zpr=r(tbt,"TFLongformerForSequenceClassification"),tbt.forEach(t),e_r=r(S$e," (Longformer model)"),S$e.forEach(t),o_r=i(re),GE=n(re,"LI",{});var R$e=s(GE);V2e=n(R$e,"STRONG",{});var abt=s(V2e);r_r=r(abt,"mobilebert"),abt.forEach(t),t_r=r(R$e," \u2014 "),QQ=n(R$e,"A",{href:!0});var nbt=s(QQ);a_r=r(nbt,"TFMobileBertForSequenceClassification"),nbt.forEach(t),n_r=r(R$e," (MobileBERT model)"),R$e.forEach(t),s_r=i(re),OE=n(re,"LI",{});var B$e=s(OE);X2e=n(B$e,"STRONG",{});var sbt=s(X2e);l_r=r(sbt,"mpnet"),sbt.forEach(t),i_r=r(B$e," \u2014 "),WQ=n(B$e,"A",{href:!0});var lbt=s(WQ);d_r=r(lbt,"TFMPNetForSequenceClassification"),lbt.forEach(t),c_r=r(B$e," (MPNet model)"),B$e.forEach(t),m_r=i(re),VE=n(re,"LI",{});var P$e=s(VE);z2e=n(P$e,"STRONG",{});var ibt=s(z2e);f_r=r(ibt,"openai-gpt"),ibt.forEach(t),g_r=r(P$e," \u2014 "),HQ=n(P$e,"A",{href:!0});var dbt=s(HQ);h_r=r(dbt,"TFOpenAIGPTForSequenceClassification"),dbt.forEach(t),u_r=r(P$e," (OpenAI GPT model)"),P$e.forEach(t),p_r=i(re),XE=n(re,"LI",{});var I$e=s(XE);Q2e=n(I$e,"STRONG",{});var cbt=s(Q2e);__r=r(cbt,"rembert"),cbt.forEach(t),b_r=r(I$e," \u2014 "),UQ=n(I$e,"A",{href:!0});var mbt=s(UQ);F_r=r(mbt,"TFRemBertForSequenceClassification"),mbt.forEach(t),v_r=r(I$e," (RemBERT model)"),I$e.forEach(t),T_r=i(re),zE=n(re,"LI",{});var q$e=s(zE);W2e=n(q$e,"STRONG",{});var fbt=s(W2e);M_r=r(fbt,"roberta"),fbt.forEach(t),E_r=r(q$e," \u2014 "),JQ=n(q$e,"A",{href:!0});var gbt=s(JQ);C_r=r(gbt,"TFRobertaForSequenceClassification"),gbt.forEach(t),w_r=r(q$e," (RoBERTa model)"),q$e.forEach(t),A_r=i(re),QE=n(re,"LI",{});var N$e=s(QE);H2e=n(N$e,"STRONG",{});var hbt=s(H2e);y_r=r(hbt,"roformer"),hbt.forEach(t),L_r=r(N$e," \u2014 "),YQ=n(N$e,"A",{href:!0});var ubt=s(YQ);x_r=r(ubt,"TFRoFormerForSequenceClassification"),ubt.forEach(t),$_r=r(N$e," (RoFormer model)"),N$e.forEach(t),k_r=i(re),WE=n(re,"LI",{});var j$e=s(WE);U2e=n(j$e,"STRONG",{});var pbt=s(U2e);S_r=r(pbt,"tapas"),pbt.forEach(t),R_r=r(j$e," \u2014 "),KQ=n(j$e,"A",{href:!0});var _bt=s(KQ);B_r=r(_bt,"TFTapasForSequenceClassification"),_bt.forEach(t),P_r=r(j$e," (TAPAS model)"),j$e.forEach(t),I_r=i(re),HE=n(re,"LI",{});var D$e=s(HE);J2e=n(D$e,"STRONG",{});var bbt=s(J2e);q_r=r(bbt,"transfo-xl"),bbt.forEach(t),N_r=r(D$e," \u2014 "),ZQ=n(D$e,"A",{href:!0});var Fbt=s(ZQ);j_r=r(Fbt,"TFTransfoXLForSequenceClassification"),Fbt.forEach(t),D_r=r(D$e," (Transformer-XL model)"),D$e.forEach(t),G_r=i(re),UE=n(re,"LI",{});var G$e=s(UE);Y2e=n(G$e,"STRONG",{});var vbt=s(Y2e);O_r=r(vbt,"xlm"),vbt.forEach(t),V_r=r(G$e," \u2014 "),eW=n(G$e,"A",{href:!0});var Tbt=s(eW);X_r=r(Tbt,"TFXLMForSequenceClassification"),Tbt.forEach(t),z_r=r(G$e," (XLM model)"),G$e.forEach(t),Q_r=i(re),JE=n(re,"LI",{});var O$e=s(JE);K2e=n(O$e,"STRONG",{});var Mbt=s(K2e);W_r=r(Mbt,"xlm-roberta"),Mbt.forEach(t),H_r=r(O$e," \u2014 "),oW=n(O$e,"A",{href:!0});var Ebt=s(oW);U_r=r(Ebt,"TFXLMRobertaForSequenceClassification"),Ebt.forEach(t),J_r=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),Y_r=i(re),YE=n(re,"LI",{});var V$e=s(YE);Z2e=n(V$e,"STRONG",{});var Cbt=s(Z2e);K_r=r(Cbt,"xlnet"),Cbt.forEach(t),Z_r=r(V$e," \u2014 "),rW=n(V$e,"A",{href:!0});var wbt=s(rW);ebr=r(wbt,"TFXLNetForSequenceClassification"),wbt.forEach(t),obr=r(V$e," (XLNet model)"),V$e.forEach(t),re.forEach(t),rbr=i(_l),T(KE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),iPe=i(m),Kd=n(m,"H2",{class:!0});var gqe=s(Kd);ZE=n(gqe,"A",{id:!0,class:!0,href:!0});var Abt=s(ZE);eFe=n(Abt,"SPAN",{});var ybt=s(eFe);T(B8.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),tbr=i(gqe),oFe=n(gqe,"SPAN",{});var Lbt=s(oFe);abr=r(Lbt,"TFAutoModelForMultipleChoice"),Lbt.forEach(t),gqe.forEach(t),dPe=i(m),rr=n(m,"DIV",{class:!0});var bl=s(rr);T(P8.$$.fragment,bl),nbr=i(bl),Zd=n(bl,"P",{});var cK=s(Zd);sbr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tW=n(cK,"A",{href:!0});var xbt=s(tW);lbr=r(xbt,"from_pretrained()"),xbt.forEach(t),ibr=r(cK," class method or the "),aW=n(cK,"A",{href:!0});var $bt=s(aW);dbr=r($bt,"from_config()"),$bt.forEach(t),cbr=r(cK,` class
method.`),cK.forEach(t),mbr=i(bl),I8=n(bl,"P",{});var hqe=s(I8);fbr=r(hqe,"This class cannot be instantiated directly using "),rFe=n(hqe,"CODE",{});var kbt=s(rFe);gbr=r(kbt,"__init__()"),kbt.forEach(t),hbr=r(hqe," (throws an error)."),hqe.forEach(t),ubr=i(bl),xt=n(bl,"DIV",{class:!0});var k0=s(xt);T(q8.$$.fragment,k0),pbr=i(k0),tFe=n(k0,"P",{});var Sbt=s(tFe);_br=r(Sbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sbt.forEach(t),bbr=i(k0),ec=n(k0,"P",{});var mK=s(ec);Fbr=r(mK,`Note:
Loading a model from its configuration file does `),aFe=n(mK,"STRONG",{});var Rbt=s(aFe);vbr=r(Rbt,"not"),Rbt.forEach(t),Tbr=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(mK,"A",{href:!0});var Bbt=s(nW);Mbr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Ebr=r(mK," to load the model weights."),mK.forEach(t),Cbr=i(k0),T(e5.$$.fragment,k0),k0.forEach(t),wbr=i(bl),xr=n(bl,"DIV",{class:!0});var Fl=s(xr);T(N8.$$.fragment,Fl),Abr=i(Fl),nFe=n(Fl,"P",{});var Pbt=s(nFe);ybr=r(Pbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pbt.forEach(t),Lbr=i(Fl),on=n(Fl,"P",{});var S0=s(on);xbr=r(S0,"The model class to instantiate is selected based on the "),sFe=n(S0,"CODE",{});var Ibt=s(sFe);$br=r(Ibt,"model_type"),Ibt.forEach(t),kbr=r(S0,` property of the config object (either
passed as an argument or loaded from `),lFe=n(S0,"CODE",{});var qbt=s(lFe);Sbr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Rbr=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(S0,"CODE",{});var Nbt=s(iFe);Bbr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Pbr=r(S0,":"),S0.forEach(t),Ibr=i(Fl),ue=n(Fl,"UL",{});var _e=s(ue);o5=n(_e,"LI",{});var X$e=s(o5);dFe=n(X$e,"STRONG",{});var jbt=s(dFe);qbr=r(jbt,"albert"),jbt.forEach(t),Nbr=r(X$e," \u2014 "),sW=n(X$e,"A",{href:!0});var Dbt=s(sW);jbr=r(Dbt,"TFAlbertForMultipleChoice"),Dbt.forEach(t),Dbr=r(X$e," (ALBERT model)"),X$e.forEach(t),Gbr=i(_e),r5=n(_e,"LI",{});var z$e=s(r5);cFe=n(z$e,"STRONG",{});var Gbt=s(cFe);Obr=r(Gbt,"bert"),Gbt.forEach(t),Vbr=r(z$e," \u2014 "),lW=n(z$e,"A",{href:!0});var Obt=s(lW);Xbr=r(Obt,"TFBertForMultipleChoice"),Obt.forEach(t),zbr=r(z$e," (BERT model)"),z$e.forEach(t),Qbr=i(_e),t5=n(_e,"LI",{});var Q$e=s(t5);mFe=n(Q$e,"STRONG",{});var Vbt=s(mFe);Wbr=r(Vbt,"camembert"),Vbt.forEach(t),Hbr=r(Q$e," \u2014 "),iW=n(Q$e,"A",{href:!0});var Xbt=s(iW);Ubr=r(Xbt,"TFCamembertForMultipleChoice"),Xbt.forEach(t),Jbr=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),Ybr=i(_e),a5=n(_e,"LI",{});var W$e=s(a5);fFe=n(W$e,"STRONG",{});var zbt=s(fFe);Kbr=r(zbt,"convbert"),zbt.forEach(t),Zbr=r(W$e," \u2014 "),dW=n(W$e,"A",{href:!0});var Qbt=s(dW);e2r=r(Qbt,"TFConvBertForMultipleChoice"),Qbt.forEach(t),o2r=r(W$e," (ConvBERT model)"),W$e.forEach(t),r2r=i(_e),n5=n(_e,"LI",{});var H$e=s(n5);gFe=n(H$e,"STRONG",{});var Wbt=s(gFe);t2r=r(Wbt,"distilbert"),Wbt.forEach(t),a2r=r(H$e," \u2014 "),cW=n(H$e,"A",{href:!0});var Hbt=s(cW);n2r=r(Hbt,"TFDistilBertForMultipleChoice"),Hbt.forEach(t),s2r=r(H$e," (DistilBERT model)"),H$e.forEach(t),l2r=i(_e),s5=n(_e,"LI",{});var U$e=s(s5);hFe=n(U$e,"STRONG",{});var Ubt=s(hFe);i2r=r(Ubt,"electra"),Ubt.forEach(t),d2r=r(U$e," \u2014 "),mW=n(U$e,"A",{href:!0});var Jbt=s(mW);c2r=r(Jbt,"TFElectraForMultipleChoice"),Jbt.forEach(t),m2r=r(U$e," (ELECTRA model)"),U$e.forEach(t),f2r=i(_e),l5=n(_e,"LI",{});var J$e=s(l5);uFe=n(J$e,"STRONG",{});var Ybt=s(uFe);g2r=r(Ybt,"flaubert"),Ybt.forEach(t),h2r=r(J$e," \u2014 "),fW=n(J$e,"A",{href:!0});var Kbt=s(fW);u2r=r(Kbt,"TFFlaubertForMultipleChoice"),Kbt.forEach(t),p2r=r(J$e," (FlauBERT model)"),J$e.forEach(t),_2r=i(_e),i5=n(_e,"LI",{});var Y$e=s(i5);pFe=n(Y$e,"STRONG",{});var Zbt=s(pFe);b2r=r(Zbt,"funnel"),Zbt.forEach(t),F2r=r(Y$e," \u2014 "),gW=n(Y$e,"A",{href:!0});var e2t=s(gW);v2r=r(e2t,"TFFunnelForMultipleChoice"),e2t.forEach(t),T2r=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),M2r=i(_e),d5=n(_e,"LI",{});var K$e=s(d5);_Fe=n(K$e,"STRONG",{});var o2t=s(_Fe);E2r=r(o2t,"longformer"),o2t.forEach(t),C2r=r(K$e," \u2014 "),hW=n(K$e,"A",{href:!0});var r2t=s(hW);w2r=r(r2t,"TFLongformerForMultipleChoice"),r2t.forEach(t),A2r=r(K$e," (Longformer model)"),K$e.forEach(t),y2r=i(_e),c5=n(_e,"LI",{});var Z$e=s(c5);bFe=n(Z$e,"STRONG",{});var t2t=s(bFe);L2r=r(t2t,"mobilebert"),t2t.forEach(t),x2r=r(Z$e," \u2014 "),uW=n(Z$e,"A",{href:!0});var a2t=s(uW);$2r=r(a2t,"TFMobileBertForMultipleChoice"),a2t.forEach(t),k2r=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),S2r=i(_e),m5=n(_e,"LI",{});var eke=s(m5);FFe=n(eke,"STRONG",{});var n2t=s(FFe);R2r=r(n2t,"mpnet"),n2t.forEach(t),B2r=r(eke," \u2014 "),pW=n(eke,"A",{href:!0});var s2t=s(pW);P2r=r(s2t,"TFMPNetForMultipleChoice"),s2t.forEach(t),I2r=r(eke," (MPNet model)"),eke.forEach(t),q2r=i(_e),f5=n(_e,"LI",{});var oke=s(f5);vFe=n(oke,"STRONG",{});var l2t=s(vFe);N2r=r(l2t,"rembert"),l2t.forEach(t),j2r=r(oke," \u2014 "),_W=n(oke,"A",{href:!0});var i2t=s(_W);D2r=r(i2t,"TFRemBertForMultipleChoice"),i2t.forEach(t),G2r=r(oke," (RemBERT model)"),oke.forEach(t),O2r=i(_e),g5=n(_e,"LI",{});var rke=s(g5);TFe=n(rke,"STRONG",{});var d2t=s(TFe);V2r=r(d2t,"roberta"),d2t.forEach(t),X2r=r(rke," \u2014 "),bW=n(rke,"A",{href:!0});var c2t=s(bW);z2r=r(c2t,"TFRobertaForMultipleChoice"),c2t.forEach(t),Q2r=r(rke," (RoBERTa model)"),rke.forEach(t),W2r=i(_e),h5=n(_e,"LI",{});var tke=s(h5);MFe=n(tke,"STRONG",{});var m2t=s(MFe);H2r=r(m2t,"roformer"),m2t.forEach(t),U2r=r(tke," \u2014 "),FW=n(tke,"A",{href:!0});var f2t=s(FW);J2r=r(f2t,"TFRoFormerForMultipleChoice"),f2t.forEach(t),Y2r=r(tke," (RoFormer model)"),tke.forEach(t),K2r=i(_e),u5=n(_e,"LI",{});var ake=s(u5);EFe=n(ake,"STRONG",{});var g2t=s(EFe);Z2r=r(g2t,"xlm"),g2t.forEach(t),eFr=r(ake," \u2014 "),vW=n(ake,"A",{href:!0});var h2t=s(vW);oFr=r(h2t,"TFXLMForMultipleChoice"),h2t.forEach(t),rFr=r(ake," (XLM model)"),ake.forEach(t),tFr=i(_e),p5=n(_e,"LI",{});var nke=s(p5);CFe=n(nke,"STRONG",{});var u2t=s(CFe);aFr=r(u2t,"xlm-roberta"),u2t.forEach(t),nFr=r(nke," \u2014 "),TW=n(nke,"A",{href:!0});var p2t=s(TW);sFr=r(p2t,"TFXLMRobertaForMultipleChoice"),p2t.forEach(t),lFr=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),iFr=i(_e),_5=n(_e,"LI",{});var ske=s(_5);wFe=n(ske,"STRONG",{});var _2t=s(wFe);dFr=r(_2t,"xlnet"),_2t.forEach(t),cFr=r(ske," \u2014 "),MW=n(ske,"A",{href:!0});var b2t=s(MW);mFr=r(b2t,"TFXLNetForMultipleChoice"),b2t.forEach(t),fFr=r(ske," (XLNet model)"),ske.forEach(t),_e.forEach(t),gFr=i(Fl),T(b5.$$.fragment,Fl),Fl.forEach(t),bl.forEach(t),cPe=i(m),oc=n(m,"H2",{class:!0});var uqe=s(oc);F5=n(uqe,"A",{id:!0,class:!0,href:!0});var F2t=s(F5);AFe=n(F2t,"SPAN",{});var v2t=s(AFe);T(j8.$$.fragment,v2t),v2t.forEach(t),F2t.forEach(t),hFr=i(uqe),yFe=n(uqe,"SPAN",{});var T2t=s(yFe);uFr=r(T2t,"TFAutoModelForTableQuestionAnswering"),T2t.forEach(t),uqe.forEach(t),mPe=i(m),tr=n(m,"DIV",{class:!0});var vl=s(tr);T(D8.$$.fragment,vl),pFr=i(vl),rc=n(vl,"P",{});var fK=s(rc);_Fr=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EW=n(fK,"A",{href:!0});var M2t=s(EW);bFr=r(M2t,"from_pretrained()"),M2t.forEach(t),FFr=r(fK," class method or the "),CW=n(fK,"A",{href:!0});var E2t=s(CW);vFr=r(E2t,"from_config()"),E2t.forEach(t),TFr=r(fK,` class
method.`),fK.forEach(t),MFr=i(vl),G8=n(vl,"P",{});var pqe=s(G8);EFr=r(pqe,"This class cannot be instantiated directly using "),LFe=n(pqe,"CODE",{});var C2t=s(LFe);CFr=r(C2t,"__init__()"),C2t.forEach(t),wFr=r(pqe," (throws an error)."),pqe.forEach(t),AFr=i(vl),$t=n(vl,"DIV",{class:!0});var R0=s($t);T(O8.$$.fragment,R0),yFr=i(R0),xFe=n(R0,"P",{});var w2t=s(xFe);LFr=r(w2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w2t.forEach(t),xFr=i(R0),tc=n(R0,"P",{});var gK=s(tc);$Fr=r(gK,`Note:
Loading a model from its configuration file does `),$Fe=n(gK,"STRONG",{});var A2t=s($Fe);kFr=r(A2t,"not"),A2t.forEach(t),SFr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(gK,"A",{href:!0});var y2t=s(wW);RFr=r(y2t,"from_pretrained()"),y2t.forEach(t),BFr=r(gK," to load the model weights."),gK.forEach(t),PFr=i(R0),T(v5.$$.fragment,R0),R0.forEach(t),IFr=i(vl),$r=n(vl,"DIV",{class:!0});var Tl=s($r);T(V8.$$.fragment,Tl),qFr=i(Tl),kFe=n(Tl,"P",{});var L2t=s(kFe);NFr=r(L2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L2t.forEach(t),jFr=i(Tl),rn=n(Tl,"P",{});var B0=s(rn);DFr=r(B0,"The model class to instantiate is selected based on the "),SFe=n(B0,"CODE",{});var x2t=s(SFe);GFr=r(x2t,"model_type"),x2t.forEach(t),OFr=r(B0,` property of the config object (either
passed as an argument or loaded from `),RFe=n(B0,"CODE",{});var $2t=s(RFe);VFr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),XFr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(B0,"CODE",{});var k2t=s(BFe);zFr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),QFr=r(B0,":"),B0.forEach(t),WFr=i(Tl),PFe=n(Tl,"UL",{});var S2t=s(PFe);T5=n(S2t,"LI",{});var lke=s(T5);IFe=n(lke,"STRONG",{});var R2t=s(IFe);HFr=r(R2t,"tapas"),R2t.forEach(t),UFr=r(lke," \u2014 "),AW=n(lke,"A",{href:!0});var B2t=s(AW);JFr=r(B2t,"TFTapasForQuestionAnswering"),B2t.forEach(t),YFr=r(lke," (TAPAS model)"),lke.forEach(t),S2t.forEach(t),KFr=i(Tl),T(M5.$$.fragment,Tl),Tl.forEach(t),vl.forEach(t),fPe=i(m),ac=n(m,"H2",{class:!0});var _qe=s(ac);E5=n(_qe,"A",{id:!0,class:!0,href:!0});var P2t=s(E5);qFe=n(P2t,"SPAN",{});var I2t=s(qFe);T(X8.$$.fragment,I2t),I2t.forEach(t),P2t.forEach(t),ZFr=i(_qe),NFe=n(_qe,"SPAN",{});var q2t=s(NFe);evr=r(q2t,"TFAutoModelForTokenClassification"),q2t.forEach(t),_qe.forEach(t),gPe=i(m),ar=n(m,"DIV",{class:!0});var Ml=s(ar);T(z8.$$.fragment,Ml),ovr=i(Ml),nc=n(Ml,"P",{});var hK=s(nc);rvr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yW=n(hK,"A",{href:!0});var N2t=s(yW);tvr=r(N2t,"from_pretrained()"),N2t.forEach(t),avr=r(hK," class method or the "),LW=n(hK,"A",{href:!0});var j2t=s(LW);nvr=r(j2t,"from_config()"),j2t.forEach(t),svr=r(hK,` class
method.`),hK.forEach(t),lvr=i(Ml),Q8=n(Ml,"P",{});var bqe=s(Q8);ivr=r(bqe,"This class cannot be instantiated directly using "),jFe=n(bqe,"CODE",{});var D2t=s(jFe);dvr=r(D2t,"__init__()"),D2t.forEach(t),cvr=r(bqe," (throws an error)."),bqe.forEach(t),mvr=i(Ml),kt=n(Ml,"DIV",{class:!0});var P0=s(kt);T(W8.$$.fragment,P0),fvr=i(P0),DFe=n(P0,"P",{});var G2t=s(DFe);gvr=r(G2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G2t.forEach(t),hvr=i(P0),sc=n(P0,"P",{});var uK=s(sc);uvr=r(uK,`Note:
Loading a model from its configuration file does `),GFe=n(uK,"STRONG",{});var O2t=s(GFe);pvr=r(O2t,"not"),O2t.forEach(t),_vr=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(uK,"A",{href:!0});var V2t=s(xW);bvr=r(V2t,"from_pretrained()"),V2t.forEach(t),Fvr=r(uK," to load the model weights."),uK.forEach(t),vvr=i(P0),T(C5.$$.fragment,P0),P0.forEach(t),Tvr=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(H8.$$.fragment,El),Mvr=i(El),OFe=n(El,"P",{});var X2t=s(OFe);Evr=r(X2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X2t.forEach(t),Cvr=i(El),tn=n(El,"P",{});var I0=s(tn);wvr=r(I0,"The model class to instantiate is selected based on the "),VFe=n(I0,"CODE",{});var z2t=s(VFe);Avr=r(z2t,"model_type"),z2t.forEach(t),yvr=r(I0,` property of the config object (either
passed as an argument or loaded from `),XFe=n(I0,"CODE",{});var Q2t=s(XFe);Lvr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),xvr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(I0,"CODE",{});var W2t=s(zFe);$vr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),kvr=r(I0,":"),I0.forEach(t),Svr=i(El),de=n(El,"UL",{});var fe=s(de);w5=n(fe,"LI",{});var ike=s(w5);QFe=n(ike,"STRONG",{});var H2t=s(QFe);Rvr=r(H2t,"albert"),H2t.forEach(t),Bvr=r(ike," \u2014 "),$W=n(ike,"A",{href:!0});var U2t=s($W);Pvr=r(U2t,"TFAlbertForTokenClassification"),U2t.forEach(t),Ivr=r(ike," (ALBERT model)"),ike.forEach(t),qvr=i(fe),A5=n(fe,"LI",{});var dke=s(A5);WFe=n(dke,"STRONG",{});var J2t=s(WFe);Nvr=r(J2t,"bert"),J2t.forEach(t),jvr=r(dke," \u2014 "),kW=n(dke,"A",{href:!0});var Y2t=s(kW);Dvr=r(Y2t,"TFBertForTokenClassification"),Y2t.forEach(t),Gvr=r(dke," (BERT model)"),dke.forEach(t),Ovr=i(fe),y5=n(fe,"LI",{});var cke=s(y5);HFe=n(cke,"STRONG",{});var K2t=s(HFe);Vvr=r(K2t,"camembert"),K2t.forEach(t),Xvr=r(cke," \u2014 "),SW=n(cke,"A",{href:!0});var Z2t=s(SW);zvr=r(Z2t,"TFCamembertForTokenClassification"),Z2t.forEach(t),Qvr=r(cke," (CamemBERT model)"),cke.forEach(t),Wvr=i(fe),L5=n(fe,"LI",{});var mke=s(L5);UFe=n(mke,"STRONG",{});var eFt=s(UFe);Hvr=r(eFt,"convbert"),eFt.forEach(t),Uvr=r(mke," \u2014 "),RW=n(mke,"A",{href:!0});var oFt=s(RW);Jvr=r(oFt,"TFConvBertForTokenClassification"),oFt.forEach(t),Yvr=r(mke," (ConvBERT model)"),mke.forEach(t),Kvr=i(fe),x5=n(fe,"LI",{});var fke=s(x5);JFe=n(fke,"STRONG",{});var rFt=s(JFe);Zvr=r(rFt,"deberta"),rFt.forEach(t),e1r=r(fke," \u2014 "),BW=n(fke,"A",{href:!0});var tFt=s(BW);o1r=r(tFt,"TFDebertaForTokenClassification"),tFt.forEach(t),r1r=r(fke," (DeBERTa model)"),fke.forEach(t),t1r=i(fe),$5=n(fe,"LI",{});var gke=s($5);YFe=n(gke,"STRONG",{});var aFt=s(YFe);a1r=r(aFt,"deberta-v2"),aFt.forEach(t),n1r=r(gke," \u2014 "),PW=n(gke,"A",{href:!0});var nFt=s(PW);s1r=r(nFt,"TFDebertaV2ForTokenClassification"),nFt.forEach(t),l1r=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),i1r=i(fe),k5=n(fe,"LI",{});var hke=s(k5);KFe=n(hke,"STRONG",{});var sFt=s(KFe);d1r=r(sFt,"distilbert"),sFt.forEach(t),c1r=r(hke," \u2014 "),IW=n(hke,"A",{href:!0});var lFt=s(IW);m1r=r(lFt,"TFDistilBertForTokenClassification"),lFt.forEach(t),f1r=r(hke," (DistilBERT model)"),hke.forEach(t),g1r=i(fe),S5=n(fe,"LI",{});var uke=s(S5);ZFe=n(uke,"STRONG",{});var iFt=s(ZFe);h1r=r(iFt,"electra"),iFt.forEach(t),u1r=r(uke," \u2014 "),qW=n(uke,"A",{href:!0});var dFt=s(qW);p1r=r(dFt,"TFElectraForTokenClassification"),dFt.forEach(t),_1r=r(uke," (ELECTRA model)"),uke.forEach(t),b1r=i(fe),R5=n(fe,"LI",{});var pke=s(R5);eve=n(pke,"STRONG",{});var cFt=s(eve);F1r=r(cFt,"flaubert"),cFt.forEach(t),v1r=r(pke," \u2014 "),NW=n(pke,"A",{href:!0});var mFt=s(NW);T1r=r(mFt,"TFFlaubertForTokenClassification"),mFt.forEach(t),M1r=r(pke," (FlauBERT model)"),pke.forEach(t),E1r=i(fe),B5=n(fe,"LI",{});var _ke=s(B5);ove=n(_ke,"STRONG",{});var fFt=s(ove);C1r=r(fFt,"funnel"),fFt.forEach(t),w1r=r(_ke," \u2014 "),jW=n(_ke,"A",{href:!0});var gFt=s(jW);A1r=r(gFt,"TFFunnelForTokenClassification"),gFt.forEach(t),y1r=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),L1r=i(fe),P5=n(fe,"LI",{});var bke=s(P5);rve=n(bke,"STRONG",{});var hFt=s(rve);x1r=r(hFt,"layoutlm"),hFt.forEach(t),$1r=r(bke," \u2014 "),DW=n(bke,"A",{href:!0});var uFt=s(DW);k1r=r(uFt,"TFLayoutLMForTokenClassification"),uFt.forEach(t),S1r=r(bke," (LayoutLM model)"),bke.forEach(t),R1r=i(fe),I5=n(fe,"LI",{});var Fke=s(I5);tve=n(Fke,"STRONG",{});var pFt=s(tve);B1r=r(pFt,"longformer"),pFt.forEach(t),P1r=r(Fke," \u2014 "),GW=n(Fke,"A",{href:!0});var _Ft=s(GW);I1r=r(_Ft,"TFLongformerForTokenClassification"),_Ft.forEach(t),q1r=r(Fke," (Longformer model)"),Fke.forEach(t),N1r=i(fe),q5=n(fe,"LI",{});var vke=s(q5);ave=n(vke,"STRONG",{});var bFt=s(ave);j1r=r(bFt,"mobilebert"),bFt.forEach(t),D1r=r(vke," \u2014 "),OW=n(vke,"A",{href:!0});var FFt=s(OW);G1r=r(FFt,"TFMobileBertForTokenClassification"),FFt.forEach(t),O1r=r(vke," (MobileBERT model)"),vke.forEach(t),V1r=i(fe),N5=n(fe,"LI",{});var Tke=s(N5);nve=n(Tke,"STRONG",{});var vFt=s(nve);X1r=r(vFt,"mpnet"),vFt.forEach(t),z1r=r(Tke," \u2014 "),VW=n(Tke,"A",{href:!0});var TFt=s(VW);Q1r=r(TFt,"TFMPNetForTokenClassification"),TFt.forEach(t),W1r=r(Tke," (MPNet model)"),Tke.forEach(t),H1r=i(fe),j5=n(fe,"LI",{});var Mke=s(j5);sve=n(Mke,"STRONG",{});var MFt=s(sve);U1r=r(MFt,"rembert"),MFt.forEach(t),J1r=r(Mke," \u2014 "),XW=n(Mke,"A",{href:!0});var EFt=s(XW);Y1r=r(EFt,"TFRemBertForTokenClassification"),EFt.forEach(t),K1r=r(Mke," (RemBERT model)"),Mke.forEach(t),Z1r=i(fe),D5=n(fe,"LI",{});var Eke=s(D5);lve=n(Eke,"STRONG",{});var CFt=s(lve);eTr=r(CFt,"roberta"),CFt.forEach(t),oTr=r(Eke," \u2014 "),zW=n(Eke,"A",{href:!0});var wFt=s(zW);rTr=r(wFt,"TFRobertaForTokenClassification"),wFt.forEach(t),tTr=r(Eke," (RoBERTa model)"),Eke.forEach(t),aTr=i(fe),G5=n(fe,"LI",{});var Cke=s(G5);ive=n(Cke,"STRONG",{});var AFt=s(ive);nTr=r(AFt,"roformer"),AFt.forEach(t),sTr=r(Cke," \u2014 "),QW=n(Cke,"A",{href:!0});var yFt=s(QW);lTr=r(yFt,"TFRoFormerForTokenClassification"),yFt.forEach(t),iTr=r(Cke," (RoFormer model)"),Cke.forEach(t),dTr=i(fe),O5=n(fe,"LI",{});var wke=s(O5);dve=n(wke,"STRONG",{});var LFt=s(dve);cTr=r(LFt,"xlm"),LFt.forEach(t),mTr=r(wke," \u2014 "),WW=n(wke,"A",{href:!0});var xFt=s(WW);fTr=r(xFt,"TFXLMForTokenClassification"),xFt.forEach(t),gTr=r(wke," (XLM model)"),wke.forEach(t),hTr=i(fe),V5=n(fe,"LI",{});var Ake=s(V5);cve=n(Ake,"STRONG",{});var $Ft=s(cve);uTr=r($Ft,"xlm-roberta"),$Ft.forEach(t),pTr=r(Ake," \u2014 "),HW=n(Ake,"A",{href:!0});var kFt=s(HW);_Tr=r(kFt,"TFXLMRobertaForTokenClassification"),kFt.forEach(t),bTr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),FTr=i(fe),X5=n(fe,"LI",{});var yke=s(X5);mve=n(yke,"STRONG",{});var SFt=s(mve);vTr=r(SFt,"xlnet"),SFt.forEach(t),TTr=r(yke," \u2014 "),UW=n(yke,"A",{href:!0});var RFt=s(UW);MTr=r(RFt,"TFXLNetForTokenClassification"),RFt.forEach(t),ETr=r(yke," (XLNet model)"),yke.forEach(t),fe.forEach(t),CTr=i(El),T(z5.$$.fragment,El),El.forEach(t),Ml.forEach(t),hPe=i(m),lc=n(m,"H2",{class:!0});var Fqe=s(lc);Q5=n(Fqe,"A",{id:!0,class:!0,href:!0});var BFt=s(Q5);fve=n(BFt,"SPAN",{});var PFt=s(fve);T(U8.$$.fragment,PFt),PFt.forEach(t),BFt.forEach(t),wTr=i(Fqe),gve=n(Fqe,"SPAN",{});var IFt=s(gve);ATr=r(IFt,"TFAutoModelForQuestionAnswering"),IFt.forEach(t),Fqe.forEach(t),uPe=i(m),nr=n(m,"DIV",{class:!0});var Cl=s(nr);T(J8.$$.fragment,Cl),yTr=i(Cl),ic=n(Cl,"P",{});var pK=s(ic);LTr=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=n(pK,"A",{href:!0});var qFt=s(JW);xTr=r(qFt,"from_pretrained()"),qFt.forEach(t),$Tr=r(pK," class method or the "),YW=n(pK,"A",{href:!0});var NFt=s(YW);kTr=r(NFt,"from_config()"),NFt.forEach(t),STr=r(pK,` class
method.`),pK.forEach(t),RTr=i(Cl),Y8=n(Cl,"P",{});var vqe=s(Y8);BTr=r(vqe,"This class cannot be instantiated directly using "),hve=n(vqe,"CODE",{});var jFt=s(hve);PTr=r(jFt,"__init__()"),jFt.forEach(t),ITr=r(vqe," (throws an error)."),vqe.forEach(t),qTr=i(Cl),St=n(Cl,"DIV",{class:!0});var q0=s(St);T(K8.$$.fragment,q0),NTr=i(q0),uve=n(q0,"P",{});var DFt=s(uve);jTr=r(DFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DFt.forEach(t),DTr=i(q0),dc=n(q0,"P",{});var _K=s(dc);GTr=r(_K,`Note:
Loading a model from its configuration file does `),pve=n(_K,"STRONG",{});var GFt=s(pve);OTr=r(GFt,"not"),GFt.forEach(t),VTr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(_K,"A",{href:!0});var OFt=s(KW);XTr=r(OFt,"from_pretrained()"),OFt.forEach(t),zTr=r(_K," to load the model weights."),_K.forEach(t),QTr=i(q0),T(W5.$$.fragment,q0),q0.forEach(t),WTr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(Z8.$$.fragment,wl),HTr=i(wl),_ve=n(wl,"P",{});var VFt=s(_ve);UTr=r(VFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VFt.forEach(t),JTr=i(wl),an=n(wl,"P",{});var N0=s(an);YTr=r(N0,"The model class to instantiate is selected based on the "),bve=n(N0,"CODE",{});var XFt=s(bve);KTr=r(XFt,"model_type"),XFt.forEach(t),ZTr=r(N0,` property of the config object (either
passed as an argument or loaded from `),Fve=n(N0,"CODE",{});var zFt=s(Fve);eMr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),oMr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(N0,"CODE",{});var QFt=s(vve);rMr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),tMr=r(N0,":"),N0.forEach(t),aMr=i(wl),ce=n(wl,"UL",{});var ge=s(ce);H5=n(ge,"LI",{});var Lke=s(H5);Tve=n(Lke,"STRONG",{});var WFt=s(Tve);nMr=r(WFt,"albert"),WFt.forEach(t),sMr=r(Lke," \u2014 "),ZW=n(Lke,"A",{href:!0});var HFt=s(ZW);lMr=r(HFt,"TFAlbertForQuestionAnswering"),HFt.forEach(t),iMr=r(Lke," (ALBERT model)"),Lke.forEach(t),dMr=i(ge),U5=n(ge,"LI",{});var xke=s(U5);Mve=n(xke,"STRONG",{});var UFt=s(Mve);cMr=r(UFt,"bert"),UFt.forEach(t),mMr=r(xke," \u2014 "),eH=n(xke,"A",{href:!0});var JFt=s(eH);fMr=r(JFt,"TFBertForQuestionAnswering"),JFt.forEach(t),gMr=r(xke," (BERT model)"),xke.forEach(t),hMr=i(ge),J5=n(ge,"LI",{});var $ke=s(J5);Eve=n($ke,"STRONG",{});var YFt=s(Eve);uMr=r(YFt,"camembert"),YFt.forEach(t),pMr=r($ke," \u2014 "),oH=n($ke,"A",{href:!0});var KFt=s(oH);_Mr=r(KFt,"TFCamembertForQuestionAnswering"),KFt.forEach(t),bMr=r($ke," (CamemBERT model)"),$ke.forEach(t),FMr=i(ge),Y5=n(ge,"LI",{});var kke=s(Y5);Cve=n(kke,"STRONG",{});var ZFt=s(Cve);vMr=r(ZFt,"convbert"),ZFt.forEach(t),TMr=r(kke," \u2014 "),rH=n(kke,"A",{href:!0});var evt=s(rH);MMr=r(evt,"TFConvBertForQuestionAnswering"),evt.forEach(t),EMr=r(kke," (ConvBERT model)"),kke.forEach(t),CMr=i(ge),K5=n(ge,"LI",{});var Ske=s(K5);wve=n(Ske,"STRONG",{});var ovt=s(wve);wMr=r(ovt,"deberta"),ovt.forEach(t),AMr=r(Ske," \u2014 "),tH=n(Ske,"A",{href:!0});var rvt=s(tH);yMr=r(rvt,"TFDebertaForQuestionAnswering"),rvt.forEach(t),LMr=r(Ske," (DeBERTa model)"),Ske.forEach(t),xMr=i(ge),Z5=n(ge,"LI",{});var Rke=s(Z5);Ave=n(Rke,"STRONG",{});var tvt=s(Ave);$Mr=r(tvt,"deberta-v2"),tvt.forEach(t),kMr=r(Rke," \u2014 "),aH=n(Rke,"A",{href:!0});var avt=s(aH);SMr=r(avt,"TFDebertaV2ForQuestionAnswering"),avt.forEach(t),RMr=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),BMr=i(ge),eC=n(ge,"LI",{});var Bke=s(eC);yve=n(Bke,"STRONG",{});var nvt=s(yve);PMr=r(nvt,"distilbert"),nvt.forEach(t),IMr=r(Bke," \u2014 "),nH=n(Bke,"A",{href:!0});var svt=s(nH);qMr=r(svt,"TFDistilBertForQuestionAnswering"),svt.forEach(t),NMr=r(Bke," (DistilBERT model)"),Bke.forEach(t),jMr=i(ge),oC=n(ge,"LI",{});var Pke=s(oC);Lve=n(Pke,"STRONG",{});var lvt=s(Lve);DMr=r(lvt,"electra"),lvt.forEach(t),GMr=r(Pke," \u2014 "),sH=n(Pke,"A",{href:!0});var ivt=s(sH);OMr=r(ivt,"TFElectraForQuestionAnswering"),ivt.forEach(t),VMr=r(Pke," (ELECTRA model)"),Pke.forEach(t),XMr=i(ge),rC=n(ge,"LI",{});var Ike=s(rC);xve=n(Ike,"STRONG",{});var dvt=s(xve);zMr=r(dvt,"flaubert"),dvt.forEach(t),QMr=r(Ike," \u2014 "),lH=n(Ike,"A",{href:!0});var cvt=s(lH);WMr=r(cvt,"TFFlaubertForQuestionAnsweringSimple"),cvt.forEach(t),HMr=r(Ike," (FlauBERT model)"),Ike.forEach(t),UMr=i(ge),tC=n(ge,"LI",{});var qke=s(tC);$ve=n(qke,"STRONG",{});var mvt=s($ve);JMr=r(mvt,"funnel"),mvt.forEach(t),YMr=r(qke," \u2014 "),iH=n(qke,"A",{href:!0});var fvt=s(iH);KMr=r(fvt,"TFFunnelForQuestionAnswering"),fvt.forEach(t),ZMr=r(qke," (Funnel Transformer model)"),qke.forEach(t),e4r=i(ge),aC=n(ge,"LI",{});var Nke=s(aC);kve=n(Nke,"STRONG",{});var gvt=s(kve);o4r=r(gvt,"gptj"),gvt.forEach(t),r4r=r(Nke," \u2014 "),dH=n(Nke,"A",{href:!0});var hvt=s(dH);t4r=r(hvt,"TFGPTJForQuestionAnswering"),hvt.forEach(t),a4r=r(Nke," (GPT-J model)"),Nke.forEach(t),n4r=i(ge),nC=n(ge,"LI",{});var jke=s(nC);Sve=n(jke,"STRONG",{});var uvt=s(Sve);s4r=r(uvt,"longformer"),uvt.forEach(t),l4r=r(jke," \u2014 "),cH=n(jke,"A",{href:!0});var pvt=s(cH);i4r=r(pvt,"TFLongformerForQuestionAnswering"),pvt.forEach(t),d4r=r(jke," (Longformer model)"),jke.forEach(t),c4r=i(ge),sC=n(ge,"LI",{});var Dke=s(sC);Rve=n(Dke,"STRONG",{});var _vt=s(Rve);m4r=r(_vt,"mobilebert"),_vt.forEach(t),f4r=r(Dke," \u2014 "),mH=n(Dke,"A",{href:!0});var bvt=s(mH);g4r=r(bvt,"TFMobileBertForQuestionAnswering"),bvt.forEach(t),h4r=r(Dke," (MobileBERT model)"),Dke.forEach(t),u4r=i(ge),lC=n(ge,"LI",{});var Gke=s(lC);Bve=n(Gke,"STRONG",{});var Fvt=s(Bve);p4r=r(Fvt,"mpnet"),Fvt.forEach(t),_4r=r(Gke," \u2014 "),fH=n(Gke,"A",{href:!0});var vvt=s(fH);b4r=r(vvt,"TFMPNetForQuestionAnswering"),vvt.forEach(t),F4r=r(Gke," (MPNet model)"),Gke.forEach(t),v4r=i(ge),iC=n(ge,"LI",{});var Oke=s(iC);Pve=n(Oke,"STRONG",{});var Tvt=s(Pve);T4r=r(Tvt,"rembert"),Tvt.forEach(t),M4r=r(Oke," \u2014 "),gH=n(Oke,"A",{href:!0});var Mvt=s(gH);E4r=r(Mvt,"TFRemBertForQuestionAnswering"),Mvt.forEach(t),C4r=r(Oke," (RemBERT model)"),Oke.forEach(t),w4r=i(ge),dC=n(ge,"LI",{});var Vke=s(dC);Ive=n(Vke,"STRONG",{});var Evt=s(Ive);A4r=r(Evt,"roberta"),Evt.forEach(t),y4r=r(Vke," \u2014 "),hH=n(Vke,"A",{href:!0});var Cvt=s(hH);L4r=r(Cvt,"TFRobertaForQuestionAnswering"),Cvt.forEach(t),x4r=r(Vke," (RoBERTa model)"),Vke.forEach(t),$4r=i(ge),cC=n(ge,"LI",{});var Xke=s(cC);qve=n(Xke,"STRONG",{});var wvt=s(qve);k4r=r(wvt,"roformer"),wvt.forEach(t),S4r=r(Xke," \u2014 "),uH=n(Xke,"A",{href:!0});var Avt=s(uH);R4r=r(Avt,"TFRoFormerForQuestionAnswering"),Avt.forEach(t),B4r=r(Xke," (RoFormer model)"),Xke.forEach(t),P4r=i(ge),mC=n(ge,"LI",{});var zke=s(mC);Nve=n(zke,"STRONG",{});var yvt=s(Nve);I4r=r(yvt,"xlm"),yvt.forEach(t),q4r=r(zke," \u2014 "),pH=n(zke,"A",{href:!0});var Lvt=s(pH);N4r=r(Lvt,"TFXLMForQuestionAnsweringSimple"),Lvt.forEach(t),j4r=r(zke," (XLM model)"),zke.forEach(t),D4r=i(ge),fC=n(ge,"LI",{});var Qke=s(fC);jve=n(Qke,"STRONG",{});var xvt=s(jve);G4r=r(xvt,"xlm-roberta"),xvt.forEach(t),O4r=r(Qke," \u2014 "),_H=n(Qke,"A",{href:!0});var $vt=s(_H);V4r=r($vt,"TFXLMRobertaForQuestionAnswering"),$vt.forEach(t),X4r=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),z4r=i(ge),gC=n(ge,"LI",{});var Wke=s(gC);Dve=n(Wke,"STRONG",{});var kvt=s(Dve);Q4r=r(kvt,"xlnet"),kvt.forEach(t),W4r=r(Wke," \u2014 "),bH=n(Wke,"A",{href:!0});var Svt=s(bH);H4r=r(Svt,"TFXLNetForQuestionAnsweringSimple"),Svt.forEach(t),U4r=r(Wke," (XLNet model)"),Wke.forEach(t),ge.forEach(t),J4r=i(wl),T(hC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),pPe=i(m),cc=n(m,"H2",{class:!0});var Tqe=s(cc);uC=n(Tqe,"A",{id:!0,class:!0,href:!0});var Rvt=s(uC);Gve=n(Rvt,"SPAN",{});var Bvt=s(Gve);T(e7.$$.fragment,Bvt),Bvt.forEach(t),Rvt.forEach(t),Y4r=i(Tqe),Ove=n(Tqe,"SPAN",{});var Pvt=s(Ove);K4r=r(Pvt,"TFAutoModelForVision2Seq"),Pvt.forEach(t),Tqe.forEach(t),_Pe=i(m),sr=n(m,"DIV",{class:!0});var Al=s(sr);T(o7.$$.fragment,Al),Z4r=i(Al),mc=n(Al,"P",{});var bK=s(mc);eEr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FH=n(bK,"A",{href:!0});var Ivt=s(FH);oEr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),rEr=r(bK," class method or the "),vH=n(bK,"A",{href:!0});var qvt=s(vH);tEr=r(qvt,"from_config()"),qvt.forEach(t),aEr=r(bK,` class
method.`),bK.forEach(t),nEr=i(Al),r7=n(Al,"P",{});var Mqe=s(r7);sEr=r(Mqe,"This class cannot be instantiated directly using "),Vve=n(Mqe,"CODE",{});var Nvt=s(Vve);lEr=r(Nvt,"__init__()"),Nvt.forEach(t),iEr=r(Mqe," (throws an error)."),Mqe.forEach(t),dEr=i(Al),Rt=n(Al,"DIV",{class:!0});var j0=s(Rt);T(t7.$$.fragment,j0),cEr=i(j0),Xve=n(j0,"P",{});var jvt=s(Xve);mEr=r(jvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jvt.forEach(t),fEr=i(j0),fc=n(j0,"P",{});var FK=s(fc);gEr=r(FK,`Note:
Loading a model from its configuration file does `),zve=n(FK,"STRONG",{});var Dvt=s(zve);hEr=r(Dvt,"not"),Dvt.forEach(t),uEr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(FK,"A",{href:!0});var Gvt=s(TH);pEr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),_Er=r(FK," to load the model weights."),FK.forEach(t),bEr=i(j0),T(pC.$$.fragment,j0),j0.forEach(t),FEr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(a7.$$.fragment,yl),vEr=i(yl),Qve=n(yl,"P",{});var Ovt=s(Qve);TEr=r(Ovt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ovt.forEach(t),MEr=i(yl),nn=n(yl,"P",{});var D0=s(nn);EEr=r(D0,"The model class to instantiate is selected based on the "),Wve=n(D0,"CODE",{});var Vvt=s(Wve);CEr=r(Vvt,"model_type"),Vvt.forEach(t),wEr=r(D0,` property of the config object (either
passed as an argument or loaded from `),Hve=n(D0,"CODE",{});var Xvt=s(Hve);AEr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),yEr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(D0,"CODE",{});var zvt=s(Uve);LEr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),xEr=r(D0,":"),D0.forEach(t),$Er=i(yl),Jve=n(yl,"UL",{});var Qvt=s(Jve);_C=n(Qvt,"LI",{});var Hke=s(_C);Yve=n(Hke,"STRONG",{});var Wvt=s(Yve);kEr=r(Wvt,"vision-encoder-decoder"),Wvt.forEach(t),SEr=r(Hke," \u2014 "),MH=n(Hke,"A",{href:!0});var Hvt=s(MH);REr=r(Hvt,"TFVisionEncoderDecoderModel"),Hvt.forEach(t),BEr=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),Qvt.forEach(t),PEr=i(yl),T(bC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),bPe=i(m),gc=n(m,"H2",{class:!0});var Eqe=s(gc);FC=n(Eqe,"A",{id:!0,class:!0,href:!0});var Uvt=s(FC);Kve=n(Uvt,"SPAN",{});var Jvt=s(Kve);T(n7.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),IEr=i(Eqe),Zve=n(Eqe,"SPAN",{});var Yvt=s(Zve);qEr=r(Yvt,"TFAutoModelForSpeechSeq2Seq"),Yvt.forEach(t),Eqe.forEach(t),FPe=i(m),lr=n(m,"DIV",{class:!0});var Ll=s(lr);T(s7.$$.fragment,Ll),NEr=i(Ll),hc=n(Ll,"P",{});var vK=s(hc);jEr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(vK,"A",{href:!0});var Kvt=s(EH);DEr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),GEr=r(vK," class method or the "),CH=n(vK,"A",{href:!0});var Zvt=s(CH);OEr=r(Zvt,"from_config()"),Zvt.forEach(t),VEr=r(vK,` class
method.`),vK.forEach(t),XEr=i(Ll),l7=n(Ll,"P",{});var Cqe=s(l7);zEr=r(Cqe,"This class cannot be instantiated directly using "),e1e=n(Cqe,"CODE",{});var e1t=s(e1e);QEr=r(e1t,"__init__()"),e1t.forEach(t),WEr=r(Cqe," (throws an error)."),Cqe.forEach(t),HEr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var G0=s(Bt);T(i7.$$.fragment,G0),UEr=i(G0),o1e=n(G0,"P",{});var o1t=s(o1e);JEr=r(o1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o1t.forEach(t),YEr=i(G0),uc=n(G0,"P",{});var TK=s(uc);KEr=r(TK,`Note:
Loading a model from its configuration file does `),r1e=n(TK,"STRONG",{});var r1t=s(r1e);ZEr=r(r1t,"not"),r1t.forEach(t),e5r=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(TK,"A",{href:!0});var t1t=s(wH);o5r=r(t1t,"from_pretrained()"),t1t.forEach(t),r5r=r(TK," to load the model weights."),TK.forEach(t),t5r=i(G0),T(vC.$$.fragment,G0),G0.forEach(t),a5r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(d7.$$.fragment,xl),n5r=i(xl),t1e=n(xl,"P",{});var a1t=s(t1e);s5r=r(a1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a1t.forEach(t),l5r=i(xl),sn=n(xl,"P",{});var O0=s(sn);i5r=r(O0,"The model class to instantiate is selected based on the "),a1e=n(O0,"CODE",{});var n1t=s(a1e);d5r=r(n1t,"model_type"),n1t.forEach(t),c5r=r(O0,` property of the config object (either
passed as an argument or loaded from `),n1e=n(O0,"CODE",{});var s1t=s(n1e);m5r=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),f5r=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(O0,"CODE",{});var l1t=s(s1e);g5r=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),h5r=r(O0,":"),O0.forEach(t),u5r=i(xl),l1e=n(xl,"UL",{});var i1t=s(l1e);TC=n(i1t,"LI",{});var Uke=s(TC);i1e=n(Uke,"STRONG",{});var d1t=s(i1e);p5r=r(d1t,"speech_to_text"),d1t.forEach(t),_5r=r(Uke," \u2014 "),AH=n(Uke,"A",{href:!0});var c1t=s(AH);b5r=r(c1t,"TFSpeech2TextForConditionalGeneration"),c1t.forEach(t),F5r=r(Uke," (Speech2Text model)"),Uke.forEach(t),i1t.forEach(t),v5r=i(xl),T(MC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),vPe=i(m),pc=n(m,"H2",{class:!0});var wqe=s(pc);EC=n(wqe,"A",{id:!0,class:!0,href:!0});var m1t=s(EC);d1e=n(m1t,"SPAN",{});var f1t=s(d1e);T(c7.$$.fragment,f1t),f1t.forEach(t),m1t.forEach(t),T5r=i(wqe),c1e=n(wqe,"SPAN",{});var g1t=s(c1e);M5r=r(g1t,"FlaxAutoModel"),g1t.forEach(t),wqe.forEach(t),TPe=i(m),ir=n(m,"DIV",{class:!0});var $l=s(ir);T(m7.$$.fragment,$l),E5r=i($l),_c=n($l,"P",{});var MK=s(_c);C5r=r(MK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=n(MK,"A",{href:!0});var h1t=s(yH);w5r=r(h1t,"from_pretrained()"),h1t.forEach(t),A5r=r(MK," class method or the "),LH=n(MK,"A",{href:!0});var u1t=s(LH);y5r=r(u1t,"from_config()"),u1t.forEach(t),L5r=r(MK,` class
method.`),MK.forEach(t),x5r=i($l),f7=n($l,"P",{});var Aqe=s(f7);$5r=r(Aqe,"This class cannot be instantiated directly using "),m1e=n(Aqe,"CODE",{});var p1t=s(m1e);k5r=r(p1t,"__init__()"),p1t.forEach(t),S5r=r(Aqe," (throws an error)."),Aqe.forEach(t),R5r=i($l),Pt=n($l,"DIV",{class:!0});var V0=s(Pt);T(g7.$$.fragment,V0),B5r=i(V0),f1e=n(V0,"P",{});var _1t=s(f1e);P5r=r(_1t,"Instantiates one of the base model classes of the library from a configuration."),_1t.forEach(t),I5r=i(V0),bc=n(V0,"P",{});var EK=s(bc);q5r=r(EK,`Note:
Loading a model from its configuration file does `),g1e=n(EK,"STRONG",{});var b1t=s(g1e);N5r=r(b1t,"not"),b1t.forEach(t),j5r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(EK,"A",{href:!0});var F1t=s(xH);D5r=r(F1t,"from_pretrained()"),F1t.forEach(t),G5r=r(EK," to load the model weights."),EK.forEach(t),O5r=i(V0),T(CC.$$.fragment,V0),V0.forEach(t),V5r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(h7.$$.fragment,kl),X5r=i(kl),h1e=n(kl,"P",{});var v1t=s(h1e);z5r=r(v1t,"Instantiate one of the base model classes of the library from a pretrained model."),v1t.forEach(t),Q5r=i(kl),ln=n(kl,"P",{});var X0=s(ln);W5r=r(X0,"The model class to instantiate is selected based on the "),u1e=n(X0,"CODE",{});var T1t=s(u1e);H5r=r(T1t,"model_type"),T1t.forEach(t),U5r=r(X0,` property of the config object (either
passed as an argument or loaded from `),p1e=n(X0,"CODE",{});var M1t=s(p1e);J5r=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),Y5r=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(X0,"CODE",{});var E1t=s(_1e);K5r=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),Z5r=r(X0,":"),X0.forEach(t),eCr=i(kl),oe=n(kl,"UL",{});var ae=s(oe);wC=n(ae,"LI",{});var Jke=s(wC);b1e=n(Jke,"STRONG",{});var C1t=s(b1e);oCr=r(C1t,"albert"),C1t.forEach(t),rCr=r(Jke," \u2014 "),$H=n(Jke,"A",{href:!0});var w1t=s($H);tCr=r(w1t,"FlaxAlbertModel"),w1t.forEach(t),aCr=r(Jke," (ALBERT model)"),Jke.forEach(t),nCr=i(ae),AC=n(ae,"LI",{});var Yke=s(AC);F1e=n(Yke,"STRONG",{});var A1t=s(F1e);sCr=r(A1t,"bart"),A1t.forEach(t),lCr=r(Yke," \u2014 "),kH=n(Yke,"A",{href:!0});var y1t=s(kH);iCr=r(y1t,"FlaxBartModel"),y1t.forEach(t),dCr=r(Yke," (BART model)"),Yke.forEach(t),cCr=i(ae),yC=n(ae,"LI",{});var Kke=s(yC);v1e=n(Kke,"STRONG",{});var L1t=s(v1e);mCr=r(L1t,"beit"),L1t.forEach(t),fCr=r(Kke," \u2014 "),SH=n(Kke,"A",{href:!0});var x1t=s(SH);gCr=r(x1t,"FlaxBeitModel"),x1t.forEach(t),hCr=r(Kke," (BEiT model)"),Kke.forEach(t),uCr=i(ae),LC=n(ae,"LI",{});var Zke=s(LC);T1e=n(Zke,"STRONG",{});var $1t=s(T1e);pCr=r($1t,"bert"),$1t.forEach(t),_Cr=r(Zke," \u2014 "),RH=n(Zke,"A",{href:!0});var k1t=s(RH);bCr=r(k1t,"FlaxBertModel"),k1t.forEach(t),FCr=r(Zke," (BERT model)"),Zke.forEach(t),vCr=i(ae),xC=n(ae,"LI",{});var eSe=s(xC);M1e=n(eSe,"STRONG",{});var S1t=s(M1e);TCr=r(S1t,"big_bird"),S1t.forEach(t),MCr=r(eSe," \u2014 "),BH=n(eSe,"A",{href:!0});var R1t=s(BH);ECr=r(R1t,"FlaxBigBirdModel"),R1t.forEach(t),CCr=r(eSe," (BigBird model)"),eSe.forEach(t),wCr=i(ae),$C=n(ae,"LI",{});var oSe=s($C);E1e=n(oSe,"STRONG",{});var B1t=s(E1e);ACr=r(B1t,"blenderbot"),B1t.forEach(t),yCr=r(oSe," \u2014 "),PH=n(oSe,"A",{href:!0});var P1t=s(PH);LCr=r(P1t,"FlaxBlenderbotModel"),P1t.forEach(t),xCr=r(oSe," (Blenderbot model)"),oSe.forEach(t),$Cr=i(ae),kC=n(ae,"LI",{});var rSe=s(kC);C1e=n(rSe,"STRONG",{});var I1t=s(C1e);kCr=r(I1t,"blenderbot-small"),I1t.forEach(t),SCr=r(rSe," \u2014 "),IH=n(rSe,"A",{href:!0});var q1t=s(IH);RCr=r(q1t,"FlaxBlenderbotSmallModel"),q1t.forEach(t),BCr=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),PCr=i(ae),SC=n(ae,"LI",{});var tSe=s(SC);w1e=n(tSe,"STRONG",{});var N1t=s(w1e);ICr=r(N1t,"clip"),N1t.forEach(t),qCr=r(tSe," \u2014 "),qH=n(tSe,"A",{href:!0});var j1t=s(qH);NCr=r(j1t,"FlaxCLIPModel"),j1t.forEach(t),jCr=r(tSe," (CLIP model)"),tSe.forEach(t),DCr=i(ae),RC=n(ae,"LI",{});var aSe=s(RC);A1e=n(aSe,"STRONG",{});var D1t=s(A1e);GCr=r(D1t,"distilbert"),D1t.forEach(t),OCr=r(aSe," \u2014 "),NH=n(aSe,"A",{href:!0});var G1t=s(NH);VCr=r(G1t,"FlaxDistilBertModel"),G1t.forEach(t),XCr=r(aSe," (DistilBERT model)"),aSe.forEach(t),zCr=i(ae),BC=n(ae,"LI",{});var nSe=s(BC);y1e=n(nSe,"STRONG",{});var O1t=s(y1e);QCr=r(O1t,"electra"),O1t.forEach(t),WCr=r(nSe," \u2014 "),jH=n(nSe,"A",{href:!0});var V1t=s(jH);HCr=r(V1t,"FlaxElectraModel"),V1t.forEach(t),UCr=r(nSe," (ELECTRA model)"),nSe.forEach(t),JCr=i(ae),PC=n(ae,"LI",{});var sSe=s(PC);L1e=n(sSe,"STRONG",{});var X1t=s(L1e);YCr=r(X1t,"gpt2"),X1t.forEach(t),KCr=r(sSe," \u2014 "),DH=n(sSe,"A",{href:!0});var z1t=s(DH);ZCr=r(z1t,"FlaxGPT2Model"),z1t.forEach(t),e3r=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),o3r=i(ae),IC=n(ae,"LI",{});var lSe=s(IC);x1e=n(lSe,"STRONG",{});var Q1t=s(x1e);r3r=r(Q1t,"gpt_neo"),Q1t.forEach(t),t3r=r(lSe," \u2014 "),GH=n(lSe,"A",{href:!0});var W1t=s(GH);a3r=r(W1t,"FlaxGPTNeoModel"),W1t.forEach(t),n3r=r(lSe," (GPT Neo model)"),lSe.forEach(t),s3r=i(ae),qC=n(ae,"LI",{});var iSe=s(qC);$1e=n(iSe,"STRONG",{});var H1t=s($1e);l3r=r(H1t,"gptj"),H1t.forEach(t),i3r=r(iSe," \u2014 "),OH=n(iSe,"A",{href:!0});var U1t=s(OH);d3r=r(U1t,"FlaxGPTJModel"),U1t.forEach(t),c3r=r(iSe," (GPT-J model)"),iSe.forEach(t),m3r=i(ae),NC=n(ae,"LI",{});var dSe=s(NC);k1e=n(dSe,"STRONG",{});var J1t=s(k1e);f3r=r(J1t,"marian"),J1t.forEach(t),g3r=r(dSe," \u2014 "),VH=n(dSe,"A",{href:!0});var Y1t=s(VH);h3r=r(Y1t,"FlaxMarianModel"),Y1t.forEach(t),u3r=r(dSe," (Marian model)"),dSe.forEach(t),p3r=i(ae),jC=n(ae,"LI",{});var cSe=s(jC);S1e=n(cSe,"STRONG",{});var K1t=s(S1e);_3r=r(K1t,"mbart"),K1t.forEach(t),b3r=r(cSe," \u2014 "),XH=n(cSe,"A",{href:!0});var Z1t=s(XH);F3r=r(Z1t,"FlaxMBartModel"),Z1t.forEach(t),v3r=r(cSe," (mBART model)"),cSe.forEach(t),T3r=i(ae),DC=n(ae,"LI",{});var mSe=s(DC);R1e=n(mSe,"STRONG",{});var eTt=s(R1e);M3r=r(eTt,"mt5"),eTt.forEach(t),E3r=r(mSe," \u2014 "),zH=n(mSe,"A",{href:!0});var oTt=s(zH);C3r=r(oTt,"FlaxMT5Model"),oTt.forEach(t),w3r=r(mSe," (mT5 model)"),mSe.forEach(t),A3r=i(ae),GC=n(ae,"LI",{});var fSe=s(GC);B1e=n(fSe,"STRONG",{});var rTt=s(B1e);y3r=r(rTt,"pegasus"),rTt.forEach(t),L3r=r(fSe," \u2014 "),QH=n(fSe,"A",{href:!0});var tTt=s(QH);x3r=r(tTt,"FlaxPegasusModel"),tTt.forEach(t),$3r=r(fSe," (Pegasus model)"),fSe.forEach(t),k3r=i(ae),OC=n(ae,"LI",{});var gSe=s(OC);P1e=n(gSe,"STRONG",{});var aTt=s(P1e);S3r=r(aTt,"roberta"),aTt.forEach(t),R3r=r(gSe," \u2014 "),WH=n(gSe,"A",{href:!0});var nTt=s(WH);B3r=r(nTt,"FlaxRobertaModel"),nTt.forEach(t),P3r=r(gSe," (RoBERTa model)"),gSe.forEach(t),I3r=i(ae),VC=n(ae,"LI",{});var hSe=s(VC);I1e=n(hSe,"STRONG",{});var sTt=s(I1e);q3r=r(sTt,"roformer"),sTt.forEach(t),N3r=r(hSe," \u2014 "),HH=n(hSe,"A",{href:!0});var lTt=s(HH);j3r=r(lTt,"FlaxRoFormerModel"),lTt.forEach(t),D3r=r(hSe," (RoFormer model)"),hSe.forEach(t),G3r=i(ae),XC=n(ae,"LI",{});var uSe=s(XC);q1e=n(uSe,"STRONG",{});var iTt=s(q1e);O3r=r(iTt,"t5"),iTt.forEach(t),V3r=r(uSe," \u2014 "),UH=n(uSe,"A",{href:!0});var dTt=s(UH);X3r=r(dTt,"FlaxT5Model"),dTt.forEach(t),z3r=r(uSe," (T5 model)"),uSe.forEach(t),Q3r=i(ae),zC=n(ae,"LI",{});var pSe=s(zC);N1e=n(pSe,"STRONG",{});var cTt=s(N1e);W3r=r(cTt,"vision-text-dual-encoder"),cTt.forEach(t),H3r=r(pSe," \u2014 "),JH=n(pSe,"A",{href:!0});var mTt=s(JH);U3r=r(mTt,"FlaxVisionTextDualEncoderModel"),mTt.forEach(t),J3r=r(pSe," (VisionTextDualEncoder model)"),pSe.forEach(t),Y3r=i(ae),QC=n(ae,"LI",{});var _Se=s(QC);j1e=n(_Se,"STRONG",{});var fTt=s(j1e);K3r=r(fTt,"vit"),fTt.forEach(t),Z3r=r(_Se," \u2014 "),YH=n(_Se,"A",{href:!0});var gTt=s(YH);ewr=r(gTt,"FlaxViTModel"),gTt.forEach(t),owr=r(_Se," (ViT model)"),_Se.forEach(t),rwr=i(ae),WC=n(ae,"LI",{});var bSe=s(WC);D1e=n(bSe,"STRONG",{});var hTt=s(D1e);twr=r(hTt,"wav2vec2"),hTt.forEach(t),awr=r(bSe," \u2014 "),KH=n(bSe,"A",{href:!0});var uTt=s(KH);nwr=r(uTt,"FlaxWav2Vec2Model"),uTt.forEach(t),swr=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),lwr=i(ae),HC=n(ae,"LI",{});var FSe=s(HC);G1e=n(FSe,"STRONG",{});var pTt=s(G1e);iwr=r(pTt,"xglm"),pTt.forEach(t),dwr=r(FSe," \u2014 "),ZH=n(FSe,"A",{href:!0});var _Tt=s(ZH);cwr=r(_Tt,"FlaxXGLMModel"),_Tt.forEach(t),mwr=r(FSe," (XGLM model)"),FSe.forEach(t),fwr=i(ae),UC=n(ae,"LI",{});var vSe=s(UC);O1e=n(vSe,"STRONG",{});var bTt=s(O1e);gwr=r(bTt,"xlm-roberta"),bTt.forEach(t),hwr=r(vSe," \u2014 "),eU=n(vSe,"A",{href:!0});var FTt=s(eU);uwr=r(FTt,"FlaxXLMRobertaModel"),FTt.forEach(t),pwr=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),ae.forEach(t),_wr=i(kl),T(JC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),MPe=i(m),Fc=n(m,"H2",{class:!0});var yqe=s(Fc);YC=n(yqe,"A",{id:!0,class:!0,href:!0});var vTt=s(YC);V1e=n(vTt,"SPAN",{});var TTt=s(V1e);T(u7.$$.fragment,TTt),TTt.forEach(t),vTt.forEach(t),bwr=i(yqe),X1e=n(yqe,"SPAN",{});var MTt=s(X1e);Fwr=r(MTt,"FlaxAutoModelForCausalLM"),MTt.forEach(t),yqe.forEach(t),EPe=i(m),dr=n(m,"DIV",{class:!0});var Sl=s(dr);T(p7.$$.fragment,Sl),vwr=i(Sl),vc=n(Sl,"P",{});var CK=s(vc);Twr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oU=n(CK,"A",{href:!0});var ETt=s(oU);Mwr=r(ETt,"from_pretrained()"),ETt.forEach(t),Ewr=r(CK," class method or the "),rU=n(CK,"A",{href:!0});var CTt=s(rU);Cwr=r(CTt,"from_config()"),CTt.forEach(t),wwr=r(CK,` class
method.`),CK.forEach(t),Awr=i(Sl),_7=n(Sl,"P",{});var Lqe=s(_7);ywr=r(Lqe,"This class cannot be instantiated directly using "),z1e=n(Lqe,"CODE",{});var wTt=s(z1e);Lwr=r(wTt,"__init__()"),wTt.forEach(t),xwr=r(Lqe," (throws an error)."),Lqe.forEach(t),$wr=i(Sl),It=n(Sl,"DIV",{class:!0});var z0=s(It);T(b7.$$.fragment,z0),kwr=i(z0),Q1e=n(z0,"P",{});var ATt=s(Q1e);Swr=r(ATt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ATt.forEach(t),Rwr=i(z0),Tc=n(z0,"P",{});var wK=s(Tc);Bwr=r(wK,`Note:
Loading a model from its configuration file does `),W1e=n(wK,"STRONG",{});var yTt=s(W1e);Pwr=r(yTt,"not"),yTt.forEach(t),Iwr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(wK,"A",{href:!0});var LTt=s(tU);qwr=r(LTt,"from_pretrained()"),LTt.forEach(t),Nwr=r(wK," to load the model weights."),wK.forEach(t),jwr=i(z0),T(KC.$$.fragment,z0),z0.forEach(t),Dwr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(F7.$$.fragment,Rl),Gwr=i(Rl),H1e=n(Rl,"P",{});var xTt=s(H1e);Owr=r(xTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xTt.forEach(t),Vwr=i(Rl),dn=n(Rl,"P",{});var Q0=s(dn);Xwr=r(Q0,"The model class to instantiate is selected based on the "),U1e=n(Q0,"CODE",{});var $Tt=s(U1e);zwr=r($Tt,"model_type"),$Tt.forEach(t),Qwr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),J1e=n(Q0,"CODE",{});var kTt=s(J1e);Wwr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),Hwr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(Q0,"CODE",{});var STt=s(Y1e);Uwr=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),Jwr=r(Q0,":"),Q0.forEach(t),Ywr=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);ZC=n(Bl,"LI",{});var TSe=s(ZC);K1e=n(TSe,"STRONG",{});var RTt=s(K1e);Kwr=r(RTt,"bart"),RTt.forEach(t),Zwr=r(TSe," \u2014 "),aU=n(TSe,"A",{href:!0});var BTt=s(aU);eAr=r(BTt,"FlaxBartForCausalLM"),BTt.forEach(t),oAr=r(TSe," (BART model)"),TSe.forEach(t),rAr=i(Bl),e3=n(Bl,"LI",{});var MSe=s(e3);Z1e=n(MSe,"STRONG",{});var PTt=s(Z1e);tAr=r(PTt,"gpt2"),PTt.forEach(t),aAr=r(MSe," \u2014 "),nU=n(MSe,"A",{href:!0});var ITt=s(nU);nAr=r(ITt,"FlaxGPT2LMHeadModel"),ITt.forEach(t),sAr=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),lAr=i(Bl),o3=n(Bl,"LI",{});var ESe=s(o3);eTe=n(ESe,"STRONG",{});var qTt=s(eTe);iAr=r(qTt,"gpt_neo"),qTt.forEach(t),dAr=r(ESe," \u2014 "),sU=n(ESe,"A",{href:!0});var NTt=s(sU);cAr=r(NTt,"FlaxGPTNeoForCausalLM"),NTt.forEach(t),mAr=r(ESe," (GPT Neo model)"),ESe.forEach(t),fAr=i(Bl),r3=n(Bl,"LI",{});var CSe=s(r3);oTe=n(CSe,"STRONG",{});var jTt=s(oTe);gAr=r(jTt,"gptj"),jTt.forEach(t),hAr=r(CSe," \u2014 "),lU=n(CSe,"A",{href:!0});var DTt=s(lU);uAr=r(DTt,"FlaxGPTJForCausalLM"),DTt.forEach(t),pAr=r(CSe," (GPT-J model)"),CSe.forEach(t),_Ar=i(Bl),t3=n(Bl,"LI",{});var wSe=s(t3);rTe=n(wSe,"STRONG",{});var GTt=s(rTe);bAr=r(GTt,"xglm"),GTt.forEach(t),FAr=r(wSe," \u2014 "),iU=n(wSe,"A",{href:!0});var OTt=s(iU);vAr=r(OTt,"FlaxXGLMForCausalLM"),OTt.forEach(t),TAr=r(wSe," (XGLM model)"),wSe.forEach(t),Bl.forEach(t),MAr=i(Rl),T(a3.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),CPe=i(m),Mc=n(m,"H2",{class:!0});var xqe=s(Mc);n3=n(xqe,"A",{id:!0,class:!0,href:!0});var VTt=s(n3);tTe=n(VTt,"SPAN",{});var XTt=s(tTe);T(v7.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),EAr=i(xqe),aTe=n(xqe,"SPAN",{});var zTt=s(aTe);CAr=r(zTt,"FlaxAutoModelForPreTraining"),zTt.forEach(t),xqe.forEach(t),wPe=i(m),cr=n(m,"DIV",{class:!0});var Pl=s(cr);T(T7.$$.fragment,Pl),wAr=i(Pl),Ec=n(Pl,"P",{});var AK=s(Ec);AAr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=n(AK,"A",{href:!0});var QTt=s(dU);yAr=r(QTt,"from_pretrained()"),QTt.forEach(t),LAr=r(AK," class method or the "),cU=n(AK,"A",{href:!0});var WTt=s(cU);xAr=r(WTt,"from_config()"),WTt.forEach(t),$Ar=r(AK,` class
method.`),AK.forEach(t),kAr=i(Pl),M7=n(Pl,"P",{});var $qe=s(M7);SAr=r($qe,"This class cannot be instantiated directly using "),nTe=n($qe,"CODE",{});var HTt=s(nTe);RAr=r(HTt,"__init__()"),HTt.forEach(t),BAr=r($qe," (throws an error)."),$qe.forEach(t),PAr=i(Pl),qt=n(Pl,"DIV",{class:!0});var W0=s(qt);T(E7.$$.fragment,W0),IAr=i(W0),sTe=n(W0,"P",{});var UTt=s(sTe);qAr=r(UTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UTt.forEach(t),NAr=i(W0),Cc=n(W0,"P",{});var yK=s(Cc);jAr=r(yK,`Note:
Loading a model from its configuration file does `),lTe=n(yK,"STRONG",{});var JTt=s(lTe);DAr=r(JTt,"not"),JTt.forEach(t),GAr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(yK,"A",{href:!0});var YTt=s(mU);OAr=r(YTt,"from_pretrained()"),YTt.forEach(t),VAr=r(yK," to load the model weights."),yK.forEach(t),XAr=i(W0),T(s3.$$.fragment,W0),W0.forEach(t),zAr=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(C7.$$.fragment,Il),QAr=i(Il),iTe=n(Il,"P",{});var KTt=s(iTe);WAr=r(KTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KTt.forEach(t),HAr=i(Il),cn=n(Il,"P",{});var H0=s(cn);UAr=r(H0,"The model class to instantiate is selected based on the "),dTe=n(H0,"CODE",{});var ZTt=s(dTe);JAr=r(ZTt,"model_type"),ZTt.forEach(t),YAr=r(H0,` property of the config object (either
passed as an argument or loaded from `),cTe=n(H0,"CODE",{});var eMt=s(cTe);KAr=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),ZAr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(H0,"CODE",{});var oMt=s(mTe);e0r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),o0r=r(H0,":"),H0.forEach(t),r0r=i(Il),Me=n(Il,"UL",{});var we=s(Me);l3=n(we,"LI",{});var ASe=s(l3);fTe=n(ASe,"STRONG",{});var rMt=s(fTe);t0r=r(rMt,"albert"),rMt.forEach(t),a0r=r(ASe," \u2014 "),fU=n(ASe,"A",{href:!0});var tMt=s(fU);n0r=r(tMt,"FlaxAlbertForPreTraining"),tMt.forEach(t),s0r=r(ASe," (ALBERT model)"),ASe.forEach(t),l0r=i(we),i3=n(we,"LI",{});var ySe=s(i3);gTe=n(ySe,"STRONG",{});var aMt=s(gTe);i0r=r(aMt,"bart"),aMt.forEach(t),d0r=r(ySe," \u2014 "),gU=n(ySe,"A",{href:!0});var nMt=s(gU);c0r=r(nMt,"FlaxBartForConditionalGeneration"),nMt.forEach(t),m0r=r(ySe," (BART model)"),ySe.forEach(t),f0r=i(we),d3=n(we,"LI",{});var LSe=s(d3);hTe=n(LSe,"STRONG",{});var sMt=s(hTe);g0r=r(sMt,"bert"),sMt.forEach(t),h0r=r(LSe," \u2014 "),hU=n(LSe,"A",{href:!0});var lMt=s(hU);u0r=r(lMt,"FlaxBertForPreTraining"),lMt.forEach(t),p0r=r(LSe," (BERT model)"),LSe.forEach(t),_0r=i(we),c3=n(we,"LI",{});var xSe=s(c3);uTe=n(xSe,"STRONG",{});var iMt=s(uTe);b0r=r(iMt,"big_bird"),iMt.forEach(t),F0r=r(xSe," \u2014 "),uU=n(xSe,"A",{href:!0});var dMt=s(uU);v0r=r(dMt,"FlaxBigBirdForPreTraining"),dMt.forEach(t),T0r=r(xSe," (BigBird model)"),xSe.forEach(t),M0r=i(we),m3=n(we,"LI",{});var $Se=s(m3);pTe=n($Se,"STRONG",{});var cMt=s(pTe);E0r=r(cMt,"electra"),cMt.forEach(t),C0r=r($Se," \u2014 "),pU=n($Se,"A",{href:!0});var mMt=s(pU);w0r=r(mMt,"FlaxElectraForPreTraining"),mMt.forEach(t),A0r=r($Se," (ELECTRA model)"),$Se.forEach(t),y0r=i(we),f3=n(we,"LI",{});var kSe=s(f3);_Te=n(kSe,"STRONG",{});var fMt=s(_Te);L0r=r(fMt,"mbart"),fMt.forEach(t),x0r=r(kSe," \u2014 "),_U=n(kSe,"A",{href:!0});var gMt=s(_U);$0r=r(gMt,"FlaxMBartForConditionalGeneration"),gMt.forEach(t),k0r=r(kSe," (mBART model)"),kSe.forEach(t),S0r=i(we),g3=n(we,"LI",{});var SSe=s(g3);bTe=n(SSe,"STRONG",{});var hMt=s(bTe);R0r=r(hMt,"mt5"),hMt.forEach(t),B0r=r(SSe," \u2014 "),bU=n(SSe,"A",{href:!0});var uMt=s(bU);P0r=r(uMt,"FlaxMT5ForConditionalGeneration"),uMt.forEach(t),I0r=r(SSe," (mT5 model)"),SSe.forEach(t),q0r=i(we),h3=n(we,"LI",{});var RSe=s(h3);FTe=n(RSe,"STRONG",{});var pMt=s(FTe);N0r=r(pMt,"roberta"),pMt.forEach(t),j0r=r(RSe," \u2014 "),FU=n(RSe,"A",{href:!0});var _Mt=s(FU);D0r=r(_Mt,"FlaxRobertaForMaskedLM"),_Mt.forEach(t),G0r=r(RSe," (RoBERTa model)"),RSe.forEach(t),O0r=i(we),u3=n(we,"LI",{});var BSe=s(u3);vTe=n(BSe,"STRONG",{});var bMt=s(vTe);V0r=r(bMt,"roformer"),bMt.forEach(t),X0r=r(BSe," \u2014 "),vU=n(BSe,"A",{href:!0});var FMt=s(vU);z0r=r(FMt,"FlaxRoFormerForMaskedLM"),FMt.forEach(t),Q0r=r(BSe," (RoFormer model)"),BSe.forEach(t),W0r=i(we),p3=n(we,"LI",{});var PSe=s(p3);TTe=n(PSe,"STRONG",{});var vMt=s(TTe);H0r=r(vMt,"t5"),vMt.forEach(t),U0r=r(PSe," \u2014 "),TU=n(PSe,"A",{href:!0});var TMt=s(TU);J0r=r(TMt,"FlaxT5ForConditionalGeneration"),TMt.forEach(t),Y0r=r(PSe," (T5 model)"),PSe.forEach(t),K0r=i(we),_3=n(we,"LI",{});var ISe=s(_3);MTe=n(ISe,"STRONG",{});var MMt=s(MTe);Z0r=r(MMt,"wav2vec2"),MMt.forEach(t),e6r=r(ISe," \u2014 "),MU=n(ISe,"A",{href:!0});var EMt=s(MU);o6r=r(EMt,"FlaxWav2Vec2ForPreTraining"),EMt.forEach(t),r6r=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),t6r=i(we),b3=n(we,"LI",{});var qSe=s(b3);ETe=n(qSe,"STRONG",{});var CMt=s(ETe);a6r=r(CMt,"xlm-roberta"),CMt.forEach(t),n6r=r(qSe," \u2014 "),EU=n(qSe,"A",{href:!0});var wMt=s(EU);s6r=r(wMt,"FlaxXLMRobertaForMaskedLM"),wMt.forEach(t),l6r=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),we.forEach(t),i6r=i(Il),T(F3.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),APe=i(m),wc=n(m,"H2",{class:!0});var kqe=s(wc);v3=n(kqe,"A",{id:!0,class:!0,href:!0});var AMt=s(v3);CTe=n(AMt,"SPAN",{});var yMt=s(CTe);T(w7.$$.fragment,yMt),yMt.forEach(t),AMt.forEach(t),d6r=i(kqe),wTe=n(kqe,"SPAN",{});var LMt=s(wTe);c6r=r(LMt,"FlaxAutoModelForMaskedLM"),LMt.forEach(t),kqe.forEach(t),yPe=i(m),mr=n(m,"DIV",{class:!0});var ql=s(mr);T(A7.$$.fragment,ql),m6r=i(ql),Ac=n(ql,"P",{});var LK=s(Ac);f6r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CU=n(LK,"A",{href:!0});var xMt=s(CU);g6r=r(xMt,"from_pretrained()"),xMt.forEach(t),h6r=r(LK," class method or the "),wU=n(LK,"A",{href:!0});var $Mt=s(wU);u6r=r($Mt,"from_config()"),$Mt.forEach(t),p6r=r(LK,` class
method.`),LK.forEach(t),_6r=i(ql),y7=n(ql,"P",{});var Sqe=s(y7);b6r=r(Sqe,"This class cannot be instantiated directly using "),ATe=n(Sqe,"CODE",{});var kMt=s(ATe);F6r=r(kMt,"__init__()"),kMt.forEach(t),v6r=r(Sqe," (throws an error)."),Sqe.forEach(t),T6r=i(ql),Nt=n(ql,"DIV",{class:!0});var U0=s(Nt);T(L7.$$.fragment,U0),M6r=i(U0),yTe=n(U0,"P",{});var SMt=s(yTe);E6r=r(SMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SMt.forEach(t),C6r=i(U0),yc=n(U0,"P",{});var xK=s(yc);w6r=r(xK,`Note:
Loading a model from its configuration file does `),LTe=n(xK,"STRONG",{});var RMt=s(LTe);A6r=r(RMt,"not"),RMt.forEach(t),y6r=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(xK,"A",{href:!0});var BMt=s(AU);L6r=r(BMt,"from_pretrained()"),BMt.forEach(t),x6r=r(xK," to load the model weights."),xK.forEach(t),$6r=i(U0),T(T3.$$.fragment,U0),U0.forEach(t),k6r=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(x7.$$.fragment,Nl),S6r=i(Nl),xTe=n(Nl,"P",{});var PMt=s(xTe);R6r=r(PMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PMt.forEach(t),B6r=i(Nl),mn=n(Nl,"P",{});var J0=s(mn);P6r=r(J0,"The model class to instantiate is selected based on the "),$Te=n(J0,"CODE",{});var IMt=s($Te);I6r=r(IMt,"model_type"),IMt.forEach(t),q6r=r(J0,` property of the config object (either
passed as an argument or loaded from `),kTe=n(J0,"CODE",{});var qMt=s(kTe);N6r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),j6r=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(J0,"CODE",{});var NMt=s(STe);D6r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),G6r=r(J0,":"),J0.forEach(t),O6r=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);M3=n(Re,"LI",{});var NSe=s(M3);RTe=n(NSe,"STRONG",{});var jMt=s(RTe);V6r=r(jMt,"albert"),jMt.forEach(t),X6r=r(NSe," \u2014 "),yU=n(NSe,"A",{href:!0});var DMt=s(yU);z6r=r(DMt,"FlaxAlbertForMaskedLM"),DMt.forEach(t),Q6r=r(NSe," (ALBERT model)"),NSe.forEach(t),W6r=i(Re),E3=n(Re,"LI",{});var jSe=s(E3);BTe=n(jSe,"STRONG",{});var GMt=s(BTe);H6r=r(GMt,"bart"),GMt.forEach(t),U6r=r(jSe," \u2014 "),LU=n(jSe,"A",{href:!0});var OMt=s(LU);J6r=r(OMt,"FlaxBartForConditionalGeneration"),OMt.forEach(t),Y6r=r(jSe," (BART model)"),jSe.forEach(t),K6r=i(Re),C3=n(Re,"LI",{});var DSe=s(C3);PTe=n(DSe,"STRONG",{});var VMt=s(PTe);Z6r=r(VMt,"bert"),VMt.forEach(t),eyr=r(DSe," \u2014 "),xU=n(DSe,"A",{href:!0});var XMt=s(xU);oyr=r(XMt,"FlaxBertForMaskedLM"),XMt.forEach(t),ryr=r(DSe," (BERT model)"),DSe.forEach(t),tyr=i(Re),w3=n(Re,"LI",{});var GSe=s(w3);ITe=n(GSe,"STRONG",{});var zMt=s(ITe);ayr=r(zMt,"big_bird"),zMt.forEach(t),nyr=r(GSe," \u2014 "),$U=n(GSe,"A",{href:!0});var QMt=s($U);syr=r(QMt,"FlaxBigBirdForMaskedLM"),QMt.forEach(t),lyr=r(GSe," (BigBird model)"),GSe.forEach(t),iyr=i(Re),A3=n(Re,"LI",{});var OSe=s(A3);qTe=n(OSe,"STRONG",{});var WMt=s(qTe);dyr=r(WMt,"distilbert"),WMt.forEach(t),cyr=r(OSe," \u2014 "),kU=n(OSe,"A",{href:!0});var HMt=s(kU);myr=r(HMt,"FlaxDistilBertForMaskedLM"),HMt.forEach(t),fyr=r(OSe," (DistilBERT model)"),OSe.forEach(t),gyr=i(Re),y3=n(Re,"LI",{});var VSe=s(y3);NTe=n(VSe,"STRONG",{});var UMt=s(NTe);hyr=r(UMt,"electra"),UMt.forEach(t),uyr=r(VSe," \u2014 "),SU=n(VSe,"A",{href:!0});var JMt=s(SU);pyr=r(JMt,"FlaxElectraForMaskedLM"),JMt.forEach(t),_yr=r(VSe," (ELECTRA model)"),VSe.forEach(t),byr=i(Re),L3=n(Re,"LI",{});var XSe=s(L3);jTe=n(XSe,"STRONG",{});var YMt=s(jTe);Fyr=r(YMt,"mbart"),YMt.forEach(t),vyr=r(XSe," \u2014 "),RU=n(XSe,"A",{href:!0});var KMt=s(RU);Tyr=r(KMt,"FlaxMBartForConditionalGeneration"),KMt.forEach(t),Myr=r(XSe," (mBART model)"),XSe.forEach(t),Eyr=i(Re),x3=n(Re,"LI",{});var zSe=s(x3);DTe=n(zSe,"STRONG",{});var ZMt=s(DTe);Cyr=r(ZMt,"roberta"),ZMt.forEach(t),wyr=r(zSe," \u2014 "),BU=n(zSe,"A",{href:!0});var e4t=s(BU);Ayr=r(e4t,"FlaxRobertaForMaskedLM"),e4t.forEach(t),yyr=r(zSe," (RoBERTa model)"),zSe.forEach(t),Lyr=i(Re),$3=n(Re,"LI",{});var QSe=s($3);GTe=n(QSe,"STRONG",{});var o4t=s(GTe);xyr=r(o4t,"roformer"),o4t.forEach(t),$yr=r(QSe," \u2014 "),PU=n(QSe,"A",{href:!0});var r4t=s(PU);kyr=r(r4t,"FlaxRoFormerForMaskedLM"),r4t.forEach(t),Syr=r(QSe," (RoFormer model)"),QSe.forEach(t),Ryr=i(Re),k3=n(Re,"LI",{});var WSe=s(k3);OTe=n(WSe,"STRONG",{});var t4t=s(OTe);Byr=r(t4t,"xlm-roberta"),t4t.forEach(t),Pyr=r(WSe," \u2014 "),IU=n(WSe,"A",{href:!0});var a4t=s(IU);Iyr=r(a4t,"FlaxXLMRobertaForMaskedLM"),a4t.forEach(t),qyr=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Re.forEach(t),Nyr=i(Nl),T(S3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),LPe=i(m),Lc=n(m,"H2",{class:!0});var Rqe=s(Lc);R3=n(Rqe,"A",{id:!0,class:!0,href:!0});var n4t=s(R3);VTe=n(n4t,"SPAN",{});var s4t=s(VTe);T($7.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),jyr=i(Rqe),XTe=n(Rqe,"SPAN",{});var l4t=s(XTe);Dyr=r(l4t,"FlaxAutoModelForSeq2SeqLM"),l4t.forEach(t),Rqe.forEach(t),xPe=i(m),fr=n(m,"DIV",{class:!0});var jl=s(fr);T(k7.$$.fragment,jl),Gyr=i(jl),xc=n(jl,"P",{});var $K=s(xc);Oyr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qU=n($K,"A",{href:!0});var i4t=s(qU);Vyr=r(i4t,"from_pretrained()"),i4t.forEach(t),Xyr=r($K," class method or the "),NU=n($K,"A",{href:!0});var d4t=s(NU);zyr=r(d4t,"from_config()"),d4t.forEach(t),Qyr=r($K,` class
method.`),$K.forEach(t),Wyr=i(jl),S7=n(jl,"P",{});var Bqe=s(S7);Hyr=r(Bqe,"This class cannot be instantiated directly using "),zTe=n(Bqe,"CODE",{});var c4t=s(zTe);Uyr=r(c4t,"__init__()"),c4t.forEach(t),Jyr=r(Bqe," (throws an error)."),Bqe.forEach(t),Yyr=i(jl),jt=n(jl,"DIV",{class:!0});var Y0=s(jt);T(R7.$$.fragment,Y0),Kyr=i(Y0),QTe=n(Y0,"P",{});var m4t=s(QTe);Zyr=r(m4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m4t.forEach(t),eLr=i(Y0),$c=n(Y0,"P",{});var kK=s($c);oLr=r(kK,`Note:
Loading a model from its configuration file does `),WTe=n(kK,"STRONG",{});var f4t=s(WTe);rLr=r(f4t,"not"),f4t.forEach(t),tLr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(kK,"A",{href:!0});var g4t=s(jU);aLr=r(g4t,"from_pretrained()"),g4t.forEach(t),nLr=r(kK," to load the model weights."),kK.forEach(t),sLr=i(Y0),T(B3.$$.fragment,Y0),Y0.forEach(t),lLr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(B7.$$.fragment,Dl),iLr=i(Dl),HTe=n(Dl,"P",{});var h4t=s(HTe);dLr=r(h4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h4t.forEach(t),cLr=i(Dl),fn=n(Dl,"P",{});var K0=s(fn);mLr=r(K0,"The model class to instantiate is selected based on the "),UTe=n(K0,"CODE",{});var u4t=s(UTe);fLr=r(u4t,"model_type"),u4t.forEach(t),gLr=r(K0,` property of the config object (either
passed as an argument or loaded from `),JTe=n(K0,"CODE",{});var p4t=s(JTe);hLr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),uLr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(K0,"CODE",{});var _4t=s(YTe);pLr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),_Lr=r(K0,":"),K0.forEach(t),bLr=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);P3=n(Ge,"LI",{});var HSe=s(P3);KTe=n(HSe,"STRONG",{});var b4t=s(KTe);FLr=r(b4t,"bart"),b4t.forEach(t),vLr=r(HSe," \u2014 "),DU=n(HSe,"A",{href:!0});var F4t=s(DU);TLr=r(F4t,"FlaxBartForConditionalGeneration"),F4t.forEach(t),MLr=r(HSe," (BART model)"),HSe.forEach(t),ELr=i(Ge),I3=n(Ge,"LI",{});var USe=s(I3);ZTe=n(USe,"STRONG",{});var v4t=s(ZTe);CLr=r(v4t,"blenderbot"),v4t.forEach(t),wLr=r(USe," \u2014 "),GU=n(USe,"A",{href:!0});var T4t=s(GU);ALr=r(T4t,"FlaxBlenderbotForConditionalGeneration"),T4t.forEach(t),yLr=r(USe," (Blenderbot model)"),USe.forEach(t),LLr=i(Ge),q3=n(Ge,"LI",{});var JSe=s(q3);eMe=n(JSe,"STRONG",{});var M4t=s(eMe);xLr=r(M4t,"blenderbot-small"),M4t.forEach(t),$Lr=r(JSe," \u2014 "),OU=n(JSe,"A",{href:!0});var E4t=s(OU);kLr=r(E4t,"FlaxBlenderbotSmallForConditionalGeneration"),E4t.forEach(t),SLr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),RLr=i(Ge),N3=n(Ge,"LI",{});var YSe=s(N3);oMe=n(YSe,"STRONG",{});var C4t=s(oMe);BLr=r(C4t,"encoder-decoder"),C4t.forEach(t),PLr=r(YSe," \u2014 "),VU=n(YSe,"A",{href:!0});var w4t=s(VU);ILr=r(w4t,"FlaxEncoderDecoderModel"),w4t.forEach(t),qLr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),NLr=i(Ge),j3=n(Ge,"LI",{});var KSe=s(j3);rMe=n(KSe,"STRONG",{});var A4t=s(rMe);jLr=r(A4t,"marian"),A4t.forEach(t),DLr=r(KSe," \u2014 "),XU=n(KSe,"A",{href:!0});var y4t=s(XU);GLr=r(y4t,"FlaxMarianMTModel"),y4t.forEach(t),OLr=r(KSe," (Marian model)"),KSe.forEach(t),VLr=i(Ge),D3=n(Ge,"LI",{});var ZSe=s(D3);tMe=n(ZSe,"STRONG",{});var L4t=s(tMe);XLr=r(L4t,"mbart"),L4t.forEach(t),zLr=r(ZSe," \u2014 "),zU=n(ZSe,"A",{href:!0});var x4t=s(zU);QLr=r(x4t,"FlaxMBartForConditionalGeneration"),x4t.forEach(t),WLr=r(ZSe," (mBART model)"),ZSe.forEach(t),HLr=i(Ge),G3=n(Ge,"LI",{});var eRe=s(G3);aMe=n(eRe,"STRONG",{});var $4t=s(aMe);ULr=r($4t,"mt5"),$4t.forEach(t),JLr=r(eRe," \u2014 "),QU=n(eRe,"A",{href:!0});var k4t=s(QU);YLr=r(k4t,"FlaxMT5ForConditionalGeneration"),k4t.forEach(t),KLr=r(eRe," (mT5 model)"),eRe.forEach(t),ZLr=i(Ge),O3=n(Ge,"LI",{});var oRe=s(O3);nMe=n(oRe,"STRONG",{});var S4t=s(nMe);e8r=r(S4t,"pegasus"),S4t.forEach(t),o8r=r(oRe," \u2014 "),WU=n(oRe,"A",{href:!0});var R4t=s(WU);r8r=r(R4t,"FlaxPegasusForConditionalGeneration"),R4t.forEach(t),t8r=r(oRe," (Pegasus model)"),oRe.forEach(t),a8r=i(Ge),V3=n(Ge,"LI",{});var rRe=s(V3);sMe=n(rRe,"STRONG",{});var B4t=s(sMe);n8r=r(B4t,"t5"),B4t.forEach(t),s8r=r(rRe," \u2014 "),HU=n(rRe,"A",{href:!0});var P4t=s(HU);l8r=r(P4t,"FlaxT5ForConditionalGeneration"),P4t.forEach(t),i8r=r(rRe," (T5 model)"),rRe.forEach(t),Ge.forEach(t),d8r=i(Dl),T(X3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),$Pe=i(m),kc=n(m,"H2",{class:!0});var Pqe=s(kc);z3=n(Pqe,"A",{id:!0,class:!0,href:!0});var I4t=s(z3);lMe=n(I4t,"SPAN",{});var q4t=s(lMe);T(P7.$$.fragment,q4t),q4t.forEach(t),I4t.forEach(t),c8r=i(Pqe),iMe=n(Pqe,"SPAN",{});var N4t=s(iMe);m8r=r(N4t,"FlaxAutoModelForSequenceClassification"),N4t.forEach(t),Pqe.forEach(t),kPe=i(m),gr=n(m,"DIV",{class:!0});var Gl=s(gr);T(I7.$$.fragment,Gl),f8r=i(Gl),Sc=n(Gl,"P",{});var SK=s(Sc);g8r=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=n(SK,"A",{href:!0});var j4t=s(UU);h8r=r(j4t,"from_pretrained()"),j4t.forEach(t),u8r=r(SK," class method or the "),JU=n(SK,"A",{href:!0});var D4t=s(JU);p8r=r(D4t,"from_config()"),D4t.forEach(t),_8r=r(SK,` class
method.`),SK.forEach(t),b8r=i(Gl),q7=n(Gl,"P",{});var Iqe=s(q7);F8r=r(Iqe,"This class cannot be instantiated directly using "),dMe=n(Iqe,"CODE",{});var G4t=s(dMe);v8r=r(G4t,"__init__()"),G4t.forEach(t),T8r=r(Iqe," (throws an error)."),Iqe.forEach(t),M8r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Z0=s(Dt);T(N7.$$.fragment,Z0),E8r=i(Z0),cMe=n(Z0,"P",{});var O4t=s(cMe);C8r=r(O4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O4t.forEach(t),w8r=i(Z0),Rc=n(Z0,"P",{});var RK=s(Rc);A8r=r(RK,`Note:
Loading a model from its configuration file does `),mMe=n(RK,"STRONG",{});var V4t=s(mMe);y8r=r(V4t,"not"),V4t.forEach(t),L8r=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(RK,"A",{href:!0});var X4t=s(YU);x8r=r(X4t,"from_pretrained()"),X4t.forEach(t),$8r=r(RK," to load the model weights."),RK.forEach(t),k8r=i(Z0),T(Q3.$$.fragment,Z0),Z0.forEach(t),S8r=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(j7.$$.fragment,Ol),R8r=i(Ol),fMe=n(Ol,"P",{});var z4t=s(fMe);B8r=r(z4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z4t.forEach(t),P8r=i(Ol),gn=n(Ol,"P",{});var e6=s(gn);I8r=r(e6,"The model class to instantiate is selected based on the "),gMe=n(e6,"CODE",{});var Q4t=s(gMe);q8r=r(Q4t,"model_type"),Q4t.forEach(t),N8r=r(e6,` property of the config object (either
passed as an argument or loaded from `),hMe=n(e6,"CODE",{});var W4t=s(hMe);j8r=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),D8r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(e6,"CODE",{});var H4t=s(uMe);G8r=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),O8r=r(e6,":"),e6.forEach(t),V8r=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);W3=n(Be,"LI",{});var tRe=s(W3);pMe=n(tRe,"STRONG",{});var U4t=s(pMe);X8r=r(U4t,"albert"),U4t.forEach(t),z8r=r(tRe," \u2014 "),KU=n(tRe,"A",{href:!0});var J4t=s(KU);Q8r=r(J4t,"FlaxAlbertForSequenceClassification"),J4t.forEach(t),W8r=r(tRe," (ALBERT model)"),tRe.forEach(t),H8r=i(Be),H3=n(Be,"LI",{});var aRe=s(H3);_Me=n(aRe,"STRONG",{});var Y4t=s(_Me);U8r=r(Y4t,"bart"),Y4t.forEach(t),J8r=r(aRe," \u2014 "),ZU=n(aRe,"A",{href:!0});var K4t=s(ZU);Y8r=r(K4t,"FlaxBartForSequenceClassification"),K4t.forEach(t),K8r=r(aRe," (BART model)"),aRe.forEach(t),Z8r=i(Be),U3=n(Be,"LI",{});var nRe=s(U3);bMe=n(nRe,"STRONG",{});var Z4t=s(bMe);e7r=r(Z4t,"bert"),Z4t.forEach(t),o7r=r(nRe," \u2014 "),eJ=n(nRe,"A",{href:!0});var eEt=s(eJ);r7r=r(eEt,"FlaxBertForSequenceClassification"),eEt.forEach(t),t7r=r(nRe," (BERT model)"),nRe.forEach(t),a7r=i(Be),J3=n(Be,"LI",{});var sRe=s(J3);FMe=n(sRe,"STRONG",{});var oEt=s(FMe);n7r=r(oEt,"big_bird"),oEt.forEach(t),s7r=r(sRe," \u2014 "),oJ=n(sRe,"A",{href:!0});var rEt=s(oJ);l7r=r(rEt,"FlaxBigBirdForSequenceClassification"),rEt.forEach(t),i7r=r(sRe," (BigBird model)"),sRe.forEach(t),d7r=i(Be),Y3=n(Be,"LI",{});var lRe=s(Y3);vMe=n(lRe,"STRONG",{});var tEt=s(vMe);c7r=r(tEt,"distilbert"),tEt.forEach(t),m7r=r(lRe," \u2014 "),rJ=n(lRe,"A",{href:!0});var aEt=s(rJ);f7r=r(aEt,"FlaxDistilBertForSequenceClassification"),aEt.forEach(t),g7r=r(lRe," (DistilBERT model)"),lRe.forEach(t),h7r=i(Be),K3=n(Be,"LI",{});var iRe=s(K3);TMe=n(iRe,"STRONG",{});var nEt=s(TMe);u7r=r(nEt,"electra"),nEt.forEach(t),p7r=r(iRe," \u2014 "),tJ=n(iRe,"A",{href:!0});var sEt=s(tJ);_7r=r(sEt,"FlaxElectraForSequenceClassification"),sEt.forEach(t),b7r=r(iRe," (ELECTRA model)"),iRe.forEach(t),F7r=i(Be),Z3=n(Be,"LI",{});var dRe=s(Z3);MMe=n(dRe,"STRONG",{});var lEt=s(MMe);v7r=r(lEt,"mbart"),lEt.forEach(t),T7r=r(dRe," \u2014 "),aJ=n(dRe,"A",{href:!0});var iEt=s(aJ);M7r=r(iEt,"FlaxMBartForSequenceClassification"),iEt.forEach(t),E7r=r(dRe," (mBART model)"),dRe.forEach(t),C7r=i(Be),ew=n(Be,"LI",{});var cRe=s(ew);EMe=n(cRe,"STRONG",{});var dEt=s(EMe);w7r=r(dEt,"roberta"),dEt.forEach(t),A7r=r(cRe," \u2014 "),nJ=n(cRe,"A",{href:!0});var cEt=s(nJ);y7r=r(cEt,"FlaxRobertaForSequenceClassification"),cEt.forEach(t),L7r=r(cRe," (RoBERTa model)"),cRe.forEach(t),x7r=i(Be),ow=n(Be,"LI",{});var mRe=s(ow);CMe=n(mRe,"STRONG",{});var mEt=s(CMe);$7r=r(mEt,"roformer"),mEt.forEach(t),k7r=r(mRe," \u2014 "),sJ=n(mRe,"A",{href:!0});var fEt=s(sJ);S7r=r(fEt,"FlaxRoFormerForSequenceClassification"),fEt.forEach(t),R7r=r(mRe," (RoFormer model)"),mRe.forEach(t),B7r=i(Be),rw=n(Be,"LI",{});var fRe=s(rw);wMe=n(fRe,"STRONG",{});var gEt=s(wMe);P7r=r(gEt,"xlm-roberta"),gEt.forEach(t),I7r=r(fRe," \u2014 "),lJ=n(fRe,"A",{href:!0});var hEt=s(lJ);q7r=r(hEt,"FlaxXLMRobertaForSequenceClassification"),hEt.forEach(t),N7r=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),Be.forEach(t),j7r=i(Ol),T(tw.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),SPe=i(m),Bc=n(m,"H2",{class:!0});var qqe=s(Bc);aw=n(qqe,"A",{id:!0,class:!0,href:!0});var uEt=s(aw);AMe=n(uEt,"SPAN",{});var pEt=s(AMe);T(D7.$$.fragment,pEt),pEt.forEach(t),uEt.forEach(t),D7r=i(qqe),yMe=n(qqe,"SPAN",{});var _Et=s(yMe);G7r=r(_Et,"FlaxAutoModelForQuestionAnswering"),_Et.forEach(t),qqe.forEach(t),RPe=i(m),hr=n(m,"DIV",{class:!0});var Vl=s(hr);T(G7.$$.fragment,Vl),O7r=i(Vl),Pc=n(Vl,"P",{});var BK=s(Pc);V7r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(BK,"A",{href:!0});var bEt=s(iJ);X7r=r(bEt,"from_pretrained()"),bEt.forEach(t),z7r=r(BK," class method or the "),dJ=n(BK,"A",{href:!0});var FEt=s(dJ);Q7r=r(FEt,"from_config()"),FEt.forEach(t),W7r=r(BK,` class
method.`),BK.forEach(t),H7r=i(Vl),O7=n(Vl,"P",{});var Nqe=s(O7);U7r=r(Nqe,"This class cannot be instantiated directly using "),LMe=n(Nqe,"CODE",{});var vEt=s(LMe);J7r=r(vEt,"__init__()"),vEt.forEach(t),Y7r=r(Nqe," (throws an error)."),Nqe.forEach(t),K7r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var o6=s(Gt);T(V7.$$.fragment,o6),Z7r=i(o6),xMe=n(o6,"P",{});var TEt=s(xMe);exr=r(TEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TEt.forEach(t),oxr=i(o6),Ic=n(o6,"P",{});var PK=s(Ic);rxr=r(PK,`Note:
Loading a model from its configuration file does `),$Me=n(PK,"STRONG",{});var MEt=s($Me);txr=r(MEt,"not"),MEt.forEach(t),axr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(PK,"A",{href:!0});var EEt=s(cJ);nxr=r(EEt,"from_pretrained()"),EEt.forEach(t),sxr=r(PK," to load the model weights."),PK.forEach(t),lxr=i(o6),T(nw.$$.fragment,o6),o6.forEach(t),ixr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(X7.$$.fragment,Xl),dxr=i(Xl),kMe=n(Xl,"P",{});var CEt=s(kMe);cxr=r(CEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CEt.forEach(t),mxr=i(Xl),hn=n(Xl,"P",{});var r6=s(hn);fxr=r(r6,"The model class to instantiate is selected based on the "),SMe=n(r6,"CODE",{});var wEt=s(SMe);gxr=r(wEt,"model_type"),wEt.forEach(t),hxr=r(r6,` property of the config object (either
passed as an argument or loaded from `),RMe=n(r6,"CODE",{});var AEt=s(RMe);uxr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),pxr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(r6,"CODE",{});var yEt=s(BMe);_xr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),bxr=r(r6,":"),r6.forEach(t),Fxr=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);sw=n(Pe,"LI",{});var gRe=s(sw);PMe=n(gRe,"STRONG",{});var LEt=s(PMe);vxr=r(LEt,"albert"),LEt.forEach(t),Txr=r(gRe," \u2014 "),mJ=n(gRe,"A",{href:!0});var xEt=s(mJ);Mxr=r(xEt,"FlaxAlbertForQuestionAnswering"),xEt.forEach(t),Exr=r(gRe," (ALBERT model)"),gRe.forEach(t),Cxr=i(Pe),lw=n(Pe,"LI",{});var hRe=s(lw);IMe=n(hRe,"STRONG",{});var $Et=s(IMe);wxr=r($Et,"bart"),$Et.forEach(t),Axr=r(hRe," \u2014 "),fJ=n(hRe,"A",{href:!0});var kEt=s(fJ);yxr=r(kEt,"FlaxBartForQuestionAnswering"),kEt.forEach(t),Lxr=r(hRe," (BART model)"),hRe.forEach(t),xxr=i(Pe),iw=n(Pe,"LI",{});var uRe=s(iw);qMe=n(uRe,"STRONG",{});var SEt=s(qMe);$xr=r(SEt,"bert"),SEt.forEach(t),kxr=r(uRe," \u2014 "),gJ=n(uRe,"A",{href:!0});var REt=s(gJ);Sxr=r(REt,"FlaxBertForQuestionAnswering"),REt.forEach(t),Rxr=r(uRe," (BERT model)"),uRe.forEach(t),Bxr=i(Pe),dw=n(Pe,"LI",{});var pRe=s(dw);NMe=n(pRe,"STRONG",{});var BEt=s(NMe);Pxr=r(BEt,"big_bird"),BEt.forEach(t),Ixr=r(pRe," \u2014 "),hJ=n(pRe,"A",{href:!0});var PEt=s(hJ);qxr=r(PEt,"FlaxBigBirdForQuestionAnswering"),PEt.forEach(t),Nxr=r(pRe," (BigBird model)"),pRe.forEach(t),jxr=i(Pe),cw=n(Pe,"LI",{});var _Re=s(cw);jMe=n(_Re,"STRONG",{});var IEt=s(jMe);Dxr=r(IEt,"distilbert"),IEt.forEach(t),Gxr=r(_Re," \u2014 "),uJ=n(_Re,"A",{href:!0});var qEt=s(uJ);Oxr=r(qEt,"FlaxDistilBertForQuestionAnswering"),qEt.forEach(t),Vxr=r(_Re," (DistilBERT model)"),_Re.forEach(t),Xxr=i(Pe),mw=n(Pe,"LI",{});var bRe=s(mw);DMe=n(bRe,"STRONG",{});var NEt=s(DMe);zxr=r(NEt,"electra"),NEt.forEach(t),Qxr=r(bRe," \u2014 "),pJ=n(bRe,"A",{href:!0});var jEt=s(pJ);Wxr=r(jEt,"FlaxElectraForQuestionAnswering"),jEt.forEach(t),Hxr=r(bRe," (ELECTRA model)"),bRe.forEach(t),Uxr=i(Pe),fw=n(Pe,"LI",{});var FRe=s(fw);GMe=n(FRe,"STRONG",{});var DEt=s(GMe);Jxr=r(DEt,"mbart"),DEt.forEach(t),Yxr=r(FRe," \u2014 "),_J=n(FRe,"A",{href:!0});var GEt=s(_J);Kxr=r(GEt,"FlaxMBartForQuestionAnswering"),GEt.forEach(t),Zxr=r(FRe," (mBART model)"),FRe.forEach(t),e9r=i(Pe),gw=n(Pe,"LI",{});var vRe=s(gw);OMe=n(vRe,"STRONG",{});var OEt=s(OMe);o9r=r(OEt,"roberta"),OEt.forEach(t),r9r=r(vRe," \u2014 "),bJ=n(vRe,"A",{href:!0});var VEt=s(bJ);t9r=r(VEt,"FlaxRobertaForQuestionAnswering"),VEt.forEach(t),a9r=r(vRe," (RoBERTa model)"),vRe.forEach(t),n9r=i(Pe),hw=n(Pe,"LI",{});var TRe=s(hw);VMe=n(TRe,"STRONG",{});var XEt=s(VMe);s9r=r(XEt,"roformer"),XEt.forEach(t),l9r=r(TRe," \u2014 "),FJ=n(TRe,"A",{href:!0});var zEt=s(FJ);i9r=r(zEt,"FlaxRoFormerForQuestionAnswering"),zEt.forEach(t),d9r=r(TRe," (RoFormer model)"),TRe.forEach(t),c9r=i(Pe),uw=n(Pe,"LI",{});var MRe=s(uw);XMe=n(MRe,"STRONG",{});var QEt=s(XMe);m9r=r(QEt,"xlm-roberta"),QEt.forEach(t),f9r=r(MRe," \u2014 "),vJ=n(MRe,"A",{href:!0});var WEt=s(vJ);g9r=r(WEt,"FlaxXLMRobertaForQuestionAnswering"),WEt.forEach(t),h9r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Pe.forEach(t),u9r=i(Xl),T(pw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),BPe=i(m),qc=n(m,"H2",{class:!0});var jqe=s(qc);_w=n(jqe,"A",{id:!0,class:!0,href:!0});var HEt=s(_w);zMe=n(HEt,"SPAN",{});var UEt=s(zMe);T(z7.$$.fragment,UEt),UEt.forEach(t),HEt.forEach(t),p9r=i(jqe),QMe=n(jqe,"SPAN",{});var JEt=s(QMe);_9r=r(JEt,"FlaxAutoModelForTokenClassification"),JEt.forEach(t),jqe.forEach(t),PPe=i(m),ur=n(m,"DIV",{class:!0});var zl=s(ur);T(Q7.$$.fragment,zl),b9r=i(zl),Nc=n(zl,"P",{});var IK=s(Nc);F9r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=n(IK,"A",{href:!0});var YEt=s(TJ);v9r=r(YEt,"from_pretrained()"),YEt.forEach(t),T9r=r(IK," class method or the "),MJ=n(IK,"A",{href:!0});var KEt=s(MJ);M9r=r(KEt,"from_config()"),KEt.forEach(t),E9r=r(IK,` class
method.`),IK.forEach(t),C9r=i(zl),W7=n(zl,"P",{});var Dqe=s(W7);w9r=r(Dqe,"This class cannot be instantiated directly using "),WMe=n(Dqe,"CODE",{});var ZEt=s(WMe);A9r=r(ZEt,"__init__()"),ZEt.forEach(t),y9r=r(Dqe," (throws an error)."),Dqe.forEach(t),L9r=i(zl),Ot=n(zl,"DIV",{class:!0});var t6=s(Ot);T(H7.$$.fragment,t6),x9r=i(t6),HMe=n(t6,"P",{});var e5t=s(HMe);$9r=r(e5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e5t.forEach(t),k9r=i(t6),jc=n(t6,"P",{});var qK=s(jc);S9r=r(qK,`Note:
Loading a model from its configuration file does `),UMe=n(qK,"STRONG",{});var o5t=s(UMe);R9r=r(o5t,"not"),o5t.forEach(t),B9r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(qK,"A",{href:!0});var r5t=s(EJ);P9r=r(r5t,"from_pretrained()"),r5t.forEach(t),I9r=r(qK," to load the model weights."),qK.forEach(t),q9r=i(t6),T(bw.$$.fragment,t6),t6.forEach(t),N9r=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(U7.$$.fragment,Ql),j9r=i(Ql),JMe=n(Ql,"P",{});var t5t=s(JMe);D9r=r(t5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t5t.forEach(t),G9r=i(Ql),un=n(Ql,"P",{});var a6=s(un);O9r=r(a6,"The model class to instantiate is selected based on the "),YMe=n(a6,"CODE",{});var a5t=s(YMe);V9r=r(a5t,"model_type"),a5t.forEach(t),X9r=r(a6,` property of the config object (either
passed as an argument or loaded from `),KMe=n(a6,"CODE",{});var n5t=s(KMe);z9r=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Q9r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(a6,"CODE",{});var s5t=s(ZMe);W9r=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),H9r=r(a6,":"),a6.forEach(t),U9r=i(Ql),je=n(Ql,"UL",{});var bo=s(je);Fw=n(bo,"LI",{});var ERe=s(Fw);e4e=n(ERe,"STRONG",{});var l5t=s(e4e);J9r=r(l5t,"albert"),l5t.forEach(t),Y9r=r(ERe," \u2014 "),CJ=n(ERe,"A",{href:!0});var i5t=s(CJ);K9r=r(i5t,"FlaxAlbertForTokenClassification"),i5t.forEach(t),Z9r=r(ERe," (ALBERT model)"),ERe.forEach(t),e$r=i(bo),vw=n(bo,"LI",{});var CRe=s(vw);o4e=n(CRe,"STRONG",{});var d5t=s(o4e);o$r=r(d5t,"bert"),d5t.forEach(t),r$r=r(CRe," \u2014 "),wJ=n(CRe,"A",{href:!0});var c5t=s(wJ);t$r=r(c5t,"FlaxBertForTokenClassification"),c5t.forEach(t),a$r=r(CRe," (BERT model)"),CRe.forEach(t),n$r=i(bo),Tw=n(bo,"LI",{});var wRe=s(Tw);r4e=n(wRe,"STRONG",{});var m5t=s(r4e);s$r=r(m5t,"big_bird"),m5t.forEach(t),l$r=r(wRe," \u2014 "),AJ=n(wRe,"A",{href:!0});var f5t=s(AJ);i$r=r(f5t,"FlaxBigBirdForTokenClassification"),f5t.forEach(t),d$r=r(wRe," (BigBird model)"),wRe.forEach(t),c$r=i(bo),Mw=n(bo,"LI",{});var ARe=s(Mw);t4e=n(ARe,"STRONG",{});var g5t=s(t4e);m$r=r(g5t,"distilbert"),g5t.forEach(t),f$r=r(ARe," \u2014 "),yJ=n(ARe,"A",{href:!0});var h5t=s(yJ);g$r=r(h5t,"FlaxDistilBertForTokenClassification"),h5t.forEach(t),h$r=r(ARe," (DistilBERT model)"),ARe.forEach(t),u$r=i(bo),Ew=n(bo,"LI",{});var yRe=s(Ew);a4e=n(yRe,"STRONG",{});var u5t=s(a4e);p$r=r(u5t,"electra"),u5t.forEach(t),_$r=r(yRe," \u2014 "),LJ=n(yRe,"A",{href:!0});var p5t=s(LJ);b$r=r(p5t,"FlaxElectraForTokenClassification"),p5t.forEach(t),F$r=r(yRe," (ELECTRA model)"),yRe.forEach(t),v$r=i(bo),Cw=n(bo,"LI",{});var LRe=s(Cw);n4e=n(LRe,"STRONG",{});var _5t=s(n4e);T$r=r(_5t,"roberta"),_5t.forEach(t),M$r=r(LRe," \u2014 "),xJ=n(LRe,"A",{href:!0});var b5t=s(xJ);E$r=r(b5t,"FlaxRobertaForTokenClassification"),b5t.forEach(t),C$r=r(LRe," (RoBERTa model)"),LRe.forEach(t),w$r=i(bo),ww=n(bo,"LI",{});var xRe=s(ww);s4e=n(xRe,"STRONG",{});var F5t=s(s4e);A$r=r(F5t,"roformer"),F5t.forEach(t),y$r=r(xRe," \u2014 "),$J=n(xRe,"A",{href:!0});var v5t=s($J);L$r=r(v5t,"FlaxRoFormerForTokenClassification"),v5t.forEach(t),x$r=r(xRe," (RoFormer model)"),xRe.forEach(t),$$r=i(bo),Aw=n(bo,"LI",{});var $Re=s(Aw);l4e=n($Re,"STRONG",{});var T5t=s(l4e);k$r=r(T5t,"xlm-roberta"),T5t.forEach(t),S$r=r($Re," \u2014 "),kJ=n($Re,"A",{href:!0});var M5t=s(kJ);R$r=r(M5t,"FlaxXLMRobertaForTokenClassification"),M5t.forEach(t),B$r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),bo.forEach(t),P$r=i(Ql),T(yw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),IPe=i(m),Dc=n(m,"H2",{class:!0});var Gqe=s(Dc);Lw=n(Gqe,"A",{id:!0,class:!0,href:!0});var E5t=s(Lw);i4e=n(E5t,"SPAN",{});var C5t=s(i4e);T(J7.$$.fragment,C5t),C5t.forEach(t),E5t.forEach(t),I$r=i(Gqe),d4e=n(Gqe,"SPAN",{});var w5t=s(d4e);q$r=r(w5t,"FlaxAutoModelForMultipleChoice"),w5t.forEach(t),Gqe.forEach(t),qPe=i(m),pr=n(m,"DIV",{class:!0});var Wl=s(pr);T(Y7.$$.fragment,Wl),N$r=i(Wl),Gc=n(Wl,"P",{});var NK=s(Gc);j$r=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SJ=n(NK,"A",{href:!0});var A5t=s(SJ);D$r=r(A5t,"from_pretrained()"),A5t.forEach(t),G$r=r(NK," class method or the "),RJ=n(NK,"A",{href:!0});var y5t=s(RJ);O$r=r(y5t,"from_config()"),y5t.forEach(t),V$r=r(NK,` class
method.`),NK.forEach(t),X$r=i(Wl),K7=n(Wl,"P",{});var Oqe=s(K7);z$r=r(Oqe,"This class cannot be instantiated directly using "),c4e=n(Oqe,"CODE",{});var L5t=s(c4e);Q$r=r(L5t,"__init__()"),L5t.forEach(t),W$r=r(Oqe," (throws an error)."),Oqe.forEach(t),H$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var n6=s(Vt);T(Z7.$$.fragment,n6),U$r=i(n6),m4e=n(n6,"P",{});var x5t=s(m4e);J$r=r(x5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),x5t.forEach(t),Y$r=i(n6),Oc=n(n6,"P",{});var jK=s(Oc);K$r=r(jK,`Note:
Loading a model from its configuration file does `),f4e=n(jK,"STRONG",{});var $5t=s(f4e);Z$r=r($5t,"not"),$5t.forEach(t),ekr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(jK,"A",{href:!0});var k5t=s(BJ);okr=r(k5t,"from_pretrained()"),k5t.forEach(t),rkr=r(jK," to load the model weights."),jK.forEach(t),tkr=i(n6),T(xw.$$.fragment,n6),n6.forEach(t),akr=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(ex.$$.fragment,Hl),nkr=i(Hl),g4e=n(Hl,"P",{});var S5t=s(g4e);skr=r(S5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S5t.forEach(t),lkr=i(Hl),pn=n(Hl,"P",{});var s6=s(pn);ikr=r(s6,"The model class to instantiate is selected based on the "),h4e=n(s6,"CODE",{});var R5t=s(h4e);dkr=r(R5t,"model_type"),R5t.forEach(t),ckr=r(s6,` property of the config object (either
passed as an argument or loaded from `),u4e=n(s6,"CODE",{});var B5t=s(u4e);mkr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),fkr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(s6,"CODE",{});var P5t=s(p4e);gkr=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),hkr=r(s6,":"),s6.forEach(t),ukr=i(Hl),De=n(Hl,"UL",{});var Fo=s(De);$w=n(Fo,"LI",{});var kRe=s($w);_4e=n(kRe,"STRONG",{});var I5t=s(_4e);pkr=r(I5t,"albert"),I5t.forEach(t),_kr=r(kRe," \u2014 "),PJ=n(kRe,"A",{href:!0});var q5t=s(PJ);bkr=r(q5t,"FlaxAlbertForMultipleChoice"),q5t.forEach(t),Fkr=r(kRe," (ALBERT model)"),kRe.forEach(t),vkr=i(Fo),kw=n(Fo,"LI",{});var SRe=s(kw);b4e=n(SRe,"STRONG",{});var N5t=s(b4e);Tkr=r(N5t,"bert"),N5t.forEach(t),Mkr=r(SRe," \u2014 "),IJ=n(SRe,"A",{href:!0});var j5t=s(IJ);Ekr=r(j5t,"FlaxBertForMultipleChoice"),j5t.forEach(t),Ckr=r(SRe," (BERT model)"),SRe.forEach(t),wkr=i(Fo),Sw=n(Fo,"LI",{});var RRe=s(Sw);F4e=n(RRe,"STRONG",{});var D5t=s(F4e);Akr=r(D5t,"big_bird"),D5t.forEach(t),ykr=r(RRe," \u2014 "),qJ=n(RRe,"A",{href:!0});var G5t=s(qJ);Lkr=r(G5t,"FlaxBigBirdForMultipleChoice"),G5t.forEach(t),xkr=r(RRe," (BigBird model)"),RRe.forEach(t),$kr=i(Fo),Rw=n(Fo,"LI",{});var BRe=s(Rw);v4e=n(BRe,"STRONG",{});var O5t=s(v4e);kkr=r(O5t,"distilbert"),O5t.forEach(t),Skr=r(BRe," \u2014 "),NJ=n(BRe,"A",{href:!0});var V5t=s(NJ);Rkr=r(V5t,"FlaxDistilBertForMultipleChoice"),V5t.forEach(t),Bkr=r(BRe," (DistilBERT model)"),BRe.forEach(t),Pkr=i(Fo),Bw=n(Fo,"LI",{});var PRe=s(Bw);T4e=n(PRe,"STRONG",{});var X5t=s(T4e);Ikr=r(X5t,"electra"),X5t.forEach(t),qkr=r(PRe," \u2014 "),jJ=n(PRe,"A",{href:!0});var z5t=s(jJ);Nkr=r(z5t,"FlaxElectraForMultipleChoice"),z5t.forEach(t),jkr=r(PRe," (ELECTRA model)"),PRe.forEach(t),Dkr=i(Fo),Pw=n(Fo,"LI",{});var IRe=s(Pw);M4e=n(IRe,"STRONG",{});var Q5t=s(M4e);Gkr=r(Q5t,"roberta"),Q5t.forEach(t),Okr=r(IRe," \u2014 "),DJ=n(IRe,"A",{href:!0});var W5t=s(DJ);Vkr=r(W5t,"FlaxRobertaForMultipleChoice"),W5t.forEach(t),Xkr=r(IRe," (RoBERTa model)"),IRe.forEach(t),zkr=i(Fo),Iw=n(Fo,"LI",{});var qRe=s(Iw);E4e=n(qRe,"STRONG",{});var H5t=s(E4e);Qkr=r(H5t,"roformer"),H5t.forEach(t),Wkr=r(qRe," \u2014 "),GJ=n(qRe,"A",{href:!0});var U5t=s(GJ);Hkr=r(U5t,"FlaxRoFormerForMultipleChoice"),U5t.forEach(t),Ukr=r(qRe," (RoFormer model)"),qRe.forEach(t),Jkr=i(Fo),qw=n(Fo,"LI",{});var NRe=s(qw);C4e=n(NRe,"STRONG",{});var J5t=s(C4e);Ykr=r(J5t,"xlm-roberta"),J5t.forEach(t),Kkr=r(NRe," \u2014 "),OJ=n(NRe,"A",{href:!0});var Y5t=s(OJ);Zkr=r(Y5t,"FlaxXLMRobertaForMultipleChoice"),Y5t.forEach(t),eSr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Fo.forEach(t),oSr=i(Hl),T(Nw.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),NPe=i(m),Vc=n(m,"H2",{class:!0});var Vqe=s(Vc);jw=n(Vqe,"A",{id:!0,class:!0,href:!0});var K5t=s(jw);w4e=n(K5t,"SPAN",{});var Z5t=s(w4e);T(ox.$$.fragment,Z5t),Z5t.forEach(t),K5t.forEach(t),rSr=i(Vqe),A4e=n(Vqe,"SPAN",{});var eCt=s(A4e);tSr=r(eCt,"FlaxAutoModelForNextSentencePrediction"),eCt.forEach(t),Vqe.forEach(t),jPe=i(m),_r=n(m,"DIV",{class:!0});var Ul=s(_r);T(rx.$$.fragment,Ul),aSr=i(Ul),Xc=n(Ul,"P",{});var DK=s(Xc);nSr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VJ=n(DK,"A",{href:!0});var oCt=s(VJ);sSr=r(oCt,"from_pretrained()"),oCt.forEach(t),lSr=r(DK," class method or the "),XJ=n(DK,"A",{href:!0});var rCt=s(XJ);iSr=r(rCt,"from_config()"),rCt.forEach(t),dSr=r(DK,` class
method.`),DK.forEach(t),cSr=i(Ul),tx=n(Ul,"P",{});var Xqe=s(tx);mSr=r(Xqe,"This class cannot be instantiated directly using "),y4e=n(Xqe,"CODE",{});var tCt=s(y4e);fSr=r(tCt,"__init__()"),tCt.forEach(t),gSr=r(Xqe," (throws an error)."),Xqe.forEach(t),hSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var l6=s(Xt);T(ax.$$.fragment,l6),uSr=i(l6),L4e=n(l6,"P",{});var aCt=s(L4e);pSr=r(aCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aCt.forEach(t),_Sr=i(l6),zc=n(l6,"P",{});var GK=s(zc);bSr=r(GK,`Note:
Loading a model from its configuration file does `),x4e=n(GK,"STRONG",{});var nCt=s(x4e);FSr=r(nCt,"not"),nCt.forEach(t),vSr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(GK,"A",{href:!0});var sCt=s(zJ);TSr=r(sCt,"from_pretrained()"),sCt.forEach(t),MSr=r(GK," to load the model weights."),GK.forEach(t),ESr=i(l6),T(Dw.$$.fragment,l6),l6.forEach(t),CSr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(nx.$$.fragment,Jl),wSr=i(Jl),$4e=n(Jl,"P",{});var lCt=s($4e);ASr=r(lCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lCt.forEach(t),ySr=i(Jl),_n=n(Jl,"P",{});var i6=s(_n);LSr=r(i6,"The model class to instantiate is selected based on the "),k4e=n(i6,"CODE",{});var iCt=s(k4e);xSr=r(iCt,"model_type"),iCt.forEach(t),$Sr=r(i6,` property of the config object (either
passed as an argument or loaded from `),S4e=n(i6,"CODE",{});var dCt=s(S4e);kSr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),SSr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(i6,"CODE",{});var cCt=s(R4e);RSr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),BSr=r(i6,":"),i6.forEach(t),PSr=i(Jl),B4e=n(Jl,"UL",{});var mCt=s(B4e);Gw=n(mCt,"LI",{});var jRe=s(Gw);P4e=n(jRe,"STRONG",{});var fCt=s(P4e);ISr=r(fCt,"bert"),fCt.forEach(t),qSr=r(jRe," \u2014 "),QJ=n(jRe,"A",{href:!0});var gCt=s(QJ);NSr=r(gCt,"FlaxBertForNextSentencePrediction"),gCt.forEach(t),jSr=r(jRe," (BERT model)"),jRe.forEach(t),mCt.forEach(t),DSr=i(Jl),T(Ow.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),DPe=i(m),Qc=n(m,"H2",{class:!0});var zqe=s(Qc);Vw=n(zqe,"A",{id:!0,class:!0,href:!0});var hCt=s(Vw);I4e=n(hCt,"SPAN",{});var uCt=s(I4e);T(sx.$$.fragment,uCt),uCt.forEach(t),hCt.forEach(t),GSr=i(zqe),q4e=n(zqe,"SPAN",{});var pCt=s(q4e);OSr=r(pCt,"FlaxAutoModelForImageClassification"),pCt.forEach(t),zqe.forEach(t),GPe=i(m),br=n(m,"DIV",{class:!0});var Yl=s(br);T(lx.$$.fragment,Yl),VSr=i(Yl),Wc=n(Yl,"P",{});var OK=s(Wc);XSr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=n(OK,"A",{href:!0});var _Ct=s(WJ);zSr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),QSr=r(OK," class method or the "),HJ=n(OK,"A",{href:!0});var bCt=s(HJ);WSr=r(bCt,"from_config()"),bCt.forEach(t),HSr=r(OK,` class
method.`),OK.forEach(t),USr=i(Yl),ix=n(Yl,"P",{});var Qqe=s(ix);JSr=r(Qqe,"This class cannot be instantiated directly using "),N4e=n(Qqe,"CODE",{});var FCt=s(N4e);YSr=r(FCt,"__init__()"),FCt.forEach(t),KSr=r(Qqe," (throws an error)."),Qqe.forEach(t),ZSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var d6=s(zt);T(dx.$$.fragment,d6),eRr=i(d6),j4e=n(d6,"P",{});var vCt=s(j4e);oRr=r(vCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vCt.forEach(t),rRr=i(d6),Hc=n(d6,"P",{});var VK=s(Hc);tRr=r(VK,`Note:
Loading a model from its configuration file does `),D4e=n(VK,"STRONG",{});var TCt=s(D4e);aRr=r(TCt,"not"),TCt.forEach(t),nRr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(VK,"A",{href:!0});var MCt=s(UJ);sRr=r(MCt,"from_pretrained()"),MCt.forEach(t),lRr=r(VK," to load the model weights."),VK.forEach(t),iRr=i(d6),T(Xw.$$.fragment,d6),d6.forEach(t),dRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(cx.$$.fragment,Kl),cRr=i(Kl),G4e=n(Kl,"P",{});var ECt=s(G4e);mRr=r(ECt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ECt.forEach(t),fRr=i(Kl),bn=n(Kl,"P",{});var c6=s(bn);gRr=r(c6,"The model class to instantiate is selected based on the "),O4e=n(c6,"CODE",{});var CCt=s(O4e);hRr=r(CCt,"model_type"),CCt.forEach(t),uRr=r(c6,` property of the config object (either
passed as an argument or loaded from `),V4e=n(c6,"CODE",{});var wCt=s(V4e);pRr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),_Rr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(c6,"CODE",{});var ACt=s(X4e);bRr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),FRr=r(c6,":"),c6.forEach(t),vRr=i(Kl),mx=n(Kl,"UL",{});var Wqe=s(mx);zw=n(Wqe,"LI",{});var DRe=s(zw);z4e=n(DRe,"STRONG",{});var yCt=s(z4e);TRr=r(yCt,"beit"),yCt.forEach(t),MRr=r(DRe," \u2014 "),JJ=n(DRe,"A",{href:!0});var LCt=s(JJ);ERr=r(LCt,"FlaxBeitForImageClassification"),LCt.forEach(t),CRr=r(DRe," (BEiT model)"),DRe.forEach(t),wRr=i(Wqe),Qw=n(Wqe,"LI",{});var GRe=s(Qw);Q4e=n(GRe,"STRONG",{});var xCt=s(Q4e);ARr=r(xCt,"vit"),xCt.forEach(t),yRr=r(GRe," \u2014 "),YJ=n(GRe,"A",{href:!0});var $Ct=s(YJ);LRr=r($Ct,"FlaxViTForImageClassification"),$Ct.forEach(t),xRr=r(GRe," (ViT model)"),GRe.forEach(t),Wqe.forEach(t),$Rr=i(Kl),T(Ww.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),OPe=i(m),Uc=n(m,"H2",{class:!0});var Hqe=s(Uc);Hw=n(Hqe,"A",{id:!0,class:!0,href:!0});var kCt=s(Hw);W4e=n(kCt,"SPAN",{});var SCt=s(W4e);T(fx.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),kRr=i(Hqe),H4e=n(Hqe,"SPAN",{});var RCt=s(H4e);SRr=r(RCt,"FlaxAutoModelForVision2Seq"),RCt.forEach(t),Hqe.forEach(t),VPe=i(m),Fr=n(m,"DIV",{class:!0});var Zl=s(Fr);T(gx.$$.fragment,Zl),RRr=i(Zl),Jc=n(Zl,"P",{});var XK=s(Jc);BRr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KJ=n(XK,"A",{href:!0});var BCt=s(KJ);PRr=r(BCt,"from_pretrained()"),BCt.forEach(t),IRr=r(XK," class method or the "),ZJ=n(XK,"A",{href:!0});var PCt=s(ZJ);qRr=r(PCt,"from_config()"),PCt.forEach(t),NRr=r(XK,` class
method.`),XK.forEach(t),jRr=i(Zl),hx=n(Zl,"P",{});var Uqe=s(hx);DRr=r(Uqe,"This class cannot be instantiated directly using "),U4e=n(Uqe,"CODE",{});var ICt=s(U4e);GRr=r(ICt,"__init__()"),ICt.forEach(t),ORr=r(Uqe," (throws an error)."),Uqe.forEach(t),VRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var m6=s(Qt);T(ux.$$.fragment,m6),XRr=i(m6),J4e=n(m6,"P",{});var qCt=s(J4e);zRr=r(qCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qCt.forEach(t),QRr=i(m6),Yc=n(m6,"P",{});var zK=s(Yc);WRr=r(zK,`Note:
Loading a model from its configuration file does `),Y4e=n(zK,"STRONG",{});var NCt=s(Y4e);HRr=r(NCt,"not"),NCt.forEach(t),URr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(zK,"A",{href:!0});var jCt=s(eY);JRr=r(jCt,"from_pretrained()"),jCt.forEach(t),YRr=r(zK," to load the model weights."),zK.forEach(t),KRr=i(m6),T(Uw.$$.fragment,m6),m6.forEach(t),ZRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(px.$$.fragment,ei),eBr=i(ei),K4e=n(ei,"P",{});var DCt=s(K4e);oBr=r(DCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DCt.forEach(t),rBr=i(ei),Fn=n(ei,"P",{});var f6=s(Fn);tBr=r(f6,"The model class to instantiate is selected based on the "),Z4e=n(f6,"CODE",{});var GCt=s(Z4e);aBr=r(GCt,"model_type"),GCt.forEach(t),nBr=r(f6,` property of the config object (either
passed as an argument or loaded from `),eEe=n(f6,"CODE",{});var OCt=s(eEe);sBr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),lBr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(f6,"CODE",{});var VCt=s(oEe);iBr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),dBr=r(f6,":"),f6.forEach(t),cBr=i(ei),rEe=n(ei,"UL",{});var XCt=s(rEe);Jw=n(XCt,"LI",{});var ORe=s(Jw);tEe=n(ORe,"STRONG",{});var zCt=s(tEe);mBr=r(zCt,"vision-encoder-decoder"),zCt.forEach(t),fBr=r(ORe," \u2014 "),oY=n(ORe,"A",{href:!0});var QCt=s(oY);gBr=r(QCt,"FlaxVisionEncoderDecoderModel"),QCt.forEach(t),hBr=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),XCt.forEach(t),uBr=i(ei),T(Yw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Hwt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Tn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(nm,"id","extending-the-auto-classes"),c(nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nm,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lm,"id","transformers.AutoConfig"),c(lm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lm,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(P9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(I9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(q9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(N9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(j9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(D9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(G9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(O9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(V9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(X9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(z9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(Q9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(W9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(H9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(U9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(J9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(Y9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(K9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Z9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(e$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(o$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(r$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(t$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(a$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(n$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(s$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(l$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(i$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(d$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(c$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(m$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(f$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(g$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(h$,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(u$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(p$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(_$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(b$,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(F$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(v$,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(T$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(E$,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(L$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(P$,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ak,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(ik,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Mk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c($k,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(kk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Sk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Rk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Bk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(Pk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Ik,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(qk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Nk,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(jk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Dk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Gk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Ok,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Vk,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Xk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(zk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Qk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Wk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Hk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Uk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Jk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Yk,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Kk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Zk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(oS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(rS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(sS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_S,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(FS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(MS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ES,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($S,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(RS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(jS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(GS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(VS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(zS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(JS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(lR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(LR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(fi,"class","relative group"),c(dB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_B,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoProcessor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(BB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(PB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(IB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(NB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(GB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(OB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(QB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(WB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(UB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(ZB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(eP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(oP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(rP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(aP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(iP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(dP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(cP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(mP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(fP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(gP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(_P,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(FP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(vP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(TP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(MP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(CP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(wP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(AP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(yP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(LP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(xP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c($P,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(kP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(SP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(RP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(BP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(PP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(IP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(NP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(jP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(DP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(GP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(OP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(VP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(XP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(zP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(QP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(WP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(JP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(YP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(eI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(oI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(rI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(sI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(lI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(iI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(dI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(cI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(mI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(fI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(gI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(hI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(uI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(_I,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(bI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(FI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(vI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(TI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(EI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(wI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(AI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(yI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(LI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(xI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(SI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(RI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(BI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(PI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(II,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(NI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(jI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoModelForPreTraining"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(DI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(XI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(QI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(WI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(HI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(JI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(YI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(KI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ZI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(eq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(iq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(hq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_q,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(vq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Tq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Mq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Eq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Aq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Lq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Sq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Bq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Pq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Iq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(qq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Nq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Xq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(Qq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Wq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Hq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Jq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Yq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Kq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(eN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(oN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(rN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(tN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(aN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(nN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(lN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(dN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(cN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(mN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForMaskedLM"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(fN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(pN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_N,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(bN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(FN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(vN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(TN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(LN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(xN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(BN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(PN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(NN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(jN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(DN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(GN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ON,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(VN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForSeq2SeqLM"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(UN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ej,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(lj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ij,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(mj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e2,"id","transformers.AutoModelForSequenceClassification"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(uj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Fj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(vj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Tj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Mj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Ej,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Cj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(wj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Aj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Lj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(xj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c($j,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(kj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Sj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Rj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Bj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Ij,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Nj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Dj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Gj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Oj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Vj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Xj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Qj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Wj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Hj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Uj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Jj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Yj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Kj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Zj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(eD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(oD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(rD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(tD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(aD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(sD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(lD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(iD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(dD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForMultipleChoice"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(mD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(uD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(pD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(_D,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(bD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(FD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(vD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(TD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(MD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ED,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(CD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(wD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(AD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(yD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(xD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c($D,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(kD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(SD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(RD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(BD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(PD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(ID,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(qD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ND,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(DD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(GD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForNextSentencePrediction"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(QD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForTokenClassification"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(JD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForQuestionAnswering"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(IG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(qG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(NG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(DG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(GG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(OG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(VG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(XG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(zG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(QG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(WG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(HG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(UG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(JG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(YG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(KG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(eO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(oO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(rO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_O,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForTableQuestionAnswering"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(vO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForImageClassification"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($O,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForVision2Seq"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(VO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForAudioClassification"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForAudioFrameClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(aV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForCTC"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(mV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(uV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(pV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(_V,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(FV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForAudioXVector"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForAudioXVector"),c(fd,"class","relative group"),c(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(NV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForObjectDetection"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(XV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(ZV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(eX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(oX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModel"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(cX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(mX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(fX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(uX,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(pX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(_X,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(bX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(vX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(CX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(AX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(xX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c($X,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(SX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(RX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(PX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(IX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(jX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(OX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(VX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(QX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(WX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(HX,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(UX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(JX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(YX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(KX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForPreTraining"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(az,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(sz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(cz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(fz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(pz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_z,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Ez,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(wz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForCausalLM"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c($z,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(kz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Bz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(qz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Nz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForImageClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForMaskedLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Jz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(vQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(TQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(MQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(EQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(wQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(AQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(yQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForSequenceClassification"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(SQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(RQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(PQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForMultipleChoice"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(tW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(mW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(fW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(uW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(pW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_W,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(FW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(vW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(TW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(MW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.TFAutoModelForTokenClassification"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(mH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(uH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.TFAutoModelForVision2Seq"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModel"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModel"),c(pc,"class","relative group"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(SH,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(RH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(BH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qH,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(DH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GH,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VH,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(XH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(JH,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YH,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(KH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZH,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForCausalLM"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForPreTraining"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(uU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(pU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(_U,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(FU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(TU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(MU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(EU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.FlaxAutoModelForMaskedLM"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(SU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(RU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(qU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(VU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(XU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(fJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(uJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(FJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForTokenClassification"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(xJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c($J,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(kJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(SJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(IJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(qJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(NJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(jJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(DJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(GJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(OJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForImageClassification"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,vo),e(vo,oi),b(m,om,_),b(m,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,g6),e(Yr,rm),b(m,Ie,_),b(m,Oe,_),e(Oe,ai),e(Oe,Tn),e(Tn,h6),e(Oe,Mn),e(Oe,En),e(En,u6),e(Oe,ni),e(Oe,Cn),e(Cn,p6),e(Oe,si),b(m,tm,_),M(ba,m,_),b(m,Ve,_),b(m,Ae,_),e(Ae,x9),e(Ae,li),e(li,$9),e(Ae,k9),b(m,To,_),b(m,Fa,_),e(Fa,S9),e(Fa,am),e(am,R9),e(Fa,Jqe),b(m,VRe,_),b(m,ii,_),e(ii,nm),e(nm,QK),M(_6,QK,null),e(ii,Yqe),e(ii,WK),e(WK,Kqe),b(m,XRe,_),b(m,wn,_),e(wn,Zqe),e(wn,HK),e(HK,eNe),e(wn,oNe),e(wn,UK),e(UK,rNe),e(wn,tNe),b(m,zRe,_),M(b6,m,_),b(m,QRe,_),b(m,B9,_),e(B9,aNe),b(m,WRe,_),M(sm,m,_),b(m,HRe,_),b(m,di,_),e(di,lm),e(lm,JK),M(F6,JK,null),e(di,nNe),e(di,YK),e(YK,sNe),b(m,URe,_),b(m,Mo,_),M(v6,Mo,null),e(Mo,lNe),e(Mo,T6),e(T6,iNe),e(T6,P9),e(P9,dNe),e(T6,cNe),e(Mo,mNe),e(Mo,M6),e(M6,fNe),e(M6,KK),e(KK,gNe),e(M6,hNe),e(Mo,uNe),e(Mo,vr),M(E6,vr,null),e(vr,pNe),e(vr,ZK),e(ZK,_Ne),e(vr,bNe),e(vr,ci),e(ci,FNe),e(ci,eZ),e(eZ,vNe),e(ci,TNe),e(ci,oZ),e(oZ,MNe),e(ci,ENe),e(vr,CNe),e(vr,A),e(A,im),e(im,rZ),e(rZ,wNe),e(im,ANe),e(im,I9),e(I9,yNe),e(im,LNe),e(A,xNe),e(A,dm),e(dm,tZ),e(tZ,$Ne),e(dm,kNe),e(dm,q9),e(q9,SNe),e(dm,RNe),e(A,BNe),e(A,cm),e(cm,aZ),e(aZ,PNe),e(cm,INe),e(cm,N9),e(N9,qNe),e(cm,NNe),e(A,jNe),e(A,mm),e(mm,nZ),e(nZ,DNe),e(mm,GNe),e(mm,j9),e(j9,ONe),e(mm,VNe),e(A,XNe),e(A,fm),e(fm,sZ),e(sZ,zNe),e(fm,QNe),e(fm,D9),e(D9,WNe),e(fm,HNe),e(A,UNe),e(A,gm),e(gm,lZ),e(lZ,JNe),e(gm,YNe),e(gm,G9),e(G9,KNe),e(gm,ZNe),e(A,eje),e(A,hm),e(hm,iZ),e(iZ,oje),e(hm,rje),e(hm,O9),e(O9,tje),e(hm,aje),e(A,nje),e(A,um),e(um,dZ),e(dZ,sje),e(um,lje),e(um,V9),e(V9,ije),e(um,dje),e(A,cje),e(A,pm),e(pm,cZ),e(cZ,mje),e(pm,fje),e(pm,X9),e(X9,gje),e(pm,hje),e(A,uje),e(A,_m),e(_m,mZ),e(mZ,pje),e(_m,_je),e(_m,z9),e(z9,bje),e(_m,Fje),e(A,vje),e(A,bm),e(bm,fZ),e(fZ,Tje),e(bm,Mje),e(bm,Q9),e(Q9,Eje),e(bm,Cje),e(A,wje),e(A,Fm),e(Fm,gZ),e(gZ,Aje),e(Fm,yje),e(Fm,W9),e(W9,Lje),e(Fm,xje),e(A,$je),e(A,vm),e(vm,hZ),e(hZ,kje),e(vm,Sje),e(vm,H9),e(H9,Rje),e(vm,Bje),e(A,Pje),e(A,Tm),e(Tm,uZ),e(uZ,Ije),e(Tm,qje),e(Tm,U9),e(U9,Nje),e(Tm,jje),e(A,Dje),e(A,Mm),e(Mm,pZ),e(pZ,Gje),e(Mm,Oje),e(Mm,J9),e(J9,Vje),e(Mm,Xje),e(A,zje),e(A,Em),e(Em,_Z),e(_Z,Qje),e(Em,Wje),e(Em,Y9),e(Y9,Hje),e(Em,Uje),e(A,Jje),e(A,Cm),e(Cm,bZ),e(bZ,Yje),e(Cm,Kje),e(Cm,K9),e(K9,Zje),e(Cm,eDe),e(A,oDe),e(A,wm),e(wm,FZ),e(FZ,rDe),e(wm,tDe),e(wm,Z9),e(Z9,aDe),e(wm,nDe),e(A,sDe),e(A,Am),e(Am,vZ),e(vZ,lDe),e(Am,iDe),e(Am,e$),e(e$,dDe),e(Am,cDe),e(A,mDe),e(A,ym),e(ym,TZ),e(TZ,fDe),e(ym,gDe),e(ym,o$),e(o$,hDe),e(ym,uDe),e(A,pDe),e(A,Lm),e(Lm,MZ),e(MZ,_De),e(Lm,bDe),e(Lm,r$),e(r$,FDe),e(Lm,vDe),e(A,TDe),e(A,xm),e(xm,EZ),e(EZ,MDe),e(xm,EDe),e(xm,t$),e(t$,CDe),e(xm,wDe),e(A,ADe),e(A,$m),e($m,CZ),e(CZ,yDe),e($m,LDe),e($m,a$),e(a$,xDe),e($m,$De),e(A,kDe),e(A,km),e(km,wZ),e(wZ,SDe),e(km,RDe),e(km,n$),e(n$,BDe),e(km,PDe),e(A,IDe),e(A,Sm),e(Sm,AZ),e(AZ,qDe),e(Sm,NDe),e(Sm,s$),e(s$,jDe),e(Sm,DDe),e(A,GDe),e(A,Rm),e(Rm,yZ),e(yZ,ODe),e(Rm,VDe),e(Rm,l$),e(l$,XDe),e(Rm,zDe),e(A,QDe),e(A,Bm),e(Bm,LZ),e(LZ,WDe),e(Bm,HDe),e(Bm,i$),e(i$,UDe),e(Bm,JDe),e(A,YDe),e(A,Pm),e(Pm,xZ),e(xZ,KDe),e(Pm,ZDe),e(Pm,d$),e(d$,eGe),e(Pm,oGe),e(A,rGe),e(A,Im),e(Im,$Z),e($Z,tGe),e(Im,aGe),e(Im,c$),e(c$,nGe),e(Im,sGe),e(A,lGe),e(A,qm),e(qm,kZ),e(kZ,iGe),e(qm,dGe),e(qm,m$),e(m$,cGe),e(qm,mGe),e(A,fGe),e(A,Nm),e(Nm,SZ),e(SZ,gGe),e(Nm,hGe),e(Nm,f$),e(f$,uGe),e(Nm,pGe),e(A,_Ge),e(A,jm),e(jm,RZ),e(RZ,bGe),e(jm,FGe),e(jm,g$),e(g$,vGe),e(jm,TGe),e(A,MGe),e(A,Dm),e(Dm,BZ),e(BZ,EGe),e(Dm,CGe),e(Dm,h$),e(h$,wGe),e(Dm,AGe),e(A,yGe),e(A,Gm),e(Gm,PZ),e(PZ,LGe),e(Gm,xGe),e(Gm,u$),e(u$,$Ge),e(Gm,kGe),e(A,SGe),e(A,Om),e(Om,IZ),e(IZ,RGe),e(Om,BGe),e(Om,p$),e(p$,PGe),e(Om,IGe),e(A,qGe),e(A,Vm),e(Vm,qZ),e(qZ,NGe),e(Vm,jGe),e(Vm,_$),e(_$,DGe),e(Vm,GGe),e(A,OGe),e(A,Xm),e(Xm,NZ),e(NZ,VGe),e(Xm,XGe),e(Xm,b$),e(b$,zGe),e(Xm,QGe),e(A,WGe),e(A,zm),e(zm,jZ),e(jZ,HGe),e(zm,UGe),e(zm,F$),e(F$,JGe),e(zm,YGe),e(A,KGe),e(A,Qm),e(Qm,DZ),e(DZ,ZGe),e(Qm,eOe),e(Qm,v$),e(v$,oOe),e(Qm,rOe),e(A,tOe),e(A,Wm),e(Wm,GZ),e(GZ,aOe),e(Wm,nOe),e(Wm,T$),e(T$,sOe),e(Wm,lOe),e(A,iOe),e(A,Hm),e(Hm,OZ),e(OZ,dOe),e(Hm,cOe),e(Hm,M$),e(M$,mOe),e(Hm,fOe),e(A,gOe),e(A,Um),e(Um,VZ),e(VZ,hOe),e(Um,uOe),e(Um,E$),e(E$,pOe),e(Um,_Oe),e(A,bOe),e(A,Jm),e(Jm,XZ),e(XZ,FOe),e(Jm,vOe),e(Jm,C$),e(C$,TOe),e(Jm,MOe),e(A,EOe),e(A,Ym),e(Ym,zZ),e(zZ,COe),e(Ym,wOe),e(Ym,w$),e(w$,AOe),e(Ym,yOe),e(A,LOe),e(A,Km),e(Km,QZ),e(QZ,xOe),e(Km,$Oe),e(Km,A$),e(A$,kOe),e(Km,SOe),e(A,ROe),e(A,Zm),e(Zm,WZ),e(WZ,BOe),e(Zm,POe),e(Zm,y$),e(y$,IOe),e(Zm,qOe),e(A,NOe),e(A,ef),e(ef,HZ),e(HZ,jOe),e(ef,DOe),e(ef,L$),e(L$,GOe),e(ef,OOe),e(A,VOe),e(A,of),e(of,UZ),e(UZ,XOe),e(of,zOe),e(of,x$),e(x$,QOe),e(of,WOe),e(A,HOe),e(A,rf),e(rf,JZ),e(JZ,UOe),e(rf,JOe),e(rf,$$),e($$,YOe),e(rf,KOe),e(A,ZOe),e(A,tf),e(tf,YZ),e(YZ,eVe),e(tf,oVe),e(tf,k$),e(k$,rVe),e(tf,tVe),e(A,aVe),e(A,af),e(af,KZ),e(KZ,nVe),e(af,sVe),e(af,S$),e(S$,lVe),e(af,iVe),e(A,dVe),e(A,nf),e(nf,ZZ),e(ZZ,cVe),e(nf,mVe),e(nf,R$),e(R$,fVe),e(nf,gVe),e(A,hVe),e(A,sf),e(sf,eee),e(eee,uVe),e(sf,pVe),e(sf,B$),e(B$,_Ve),e(sf,bVe),e(A,FVe),e(A,lf),e(lf,oee),e(oee,vVe),e(lf,TVe),e(lf,P$),e(P$,MVe),e(lf,EVe),e(A,CVe),e(A,df),e(df,ree),e(ree,wVe),e(df,AVe),e(df,I$),e(I$,yVe),e(df,LVe),e(A,xVe),e(A,cf),e(cf,tee),e(tee,$Ve),e(cf,kVe),e(cf,q$),e(q$,SVe),e(cf,RVe),e(A,BVe),e(A,mf),e(mf,aee),e(aee,PVe),e(mf,IVe),e(mf,N$),e(N$,qVe),e(mf,NVe),e(A,jVe),e(A,ff),e(ff,nee),e(nee,DVe),e(ff,GVe),e(ff,j$),e(j$,OVe),e(ff,VVe),e(A,XVe),e(A,gf),e(gf,see),e(see,zVe),e(gf,QVe),e(gf,D$),e(D$,WVe),e(gf,HVe),e(A,UVe),e(A,hf),e(hf,lee),e(lee,JVe),e(hf,YVe),e(hf,G$),e(G$,KVe),e(hf,ZVe),e(A,eXe),e(A,uf),e(uf,iee),e(iee,oXe),e(uf,rXe),e(uf,O$),e(O$,tXe),e(uf,aXe),e(A,nXe),e(A,pf),e(pf,dee),e(dee,sXe),e(pf,lXe),e(pf,V$),e(V$,iXe),e(pf,dXe),e(A,cXe),e(A,_f),e(_f,cee),e(cee,mXe),e(_f,fXe),e(_f,X$),e(X$,gXe),e(_f,hXe),e(A,uXe),e(A,bf),e(bf,mee),e(mee,pXe),e(bf,_Xe),e(bf,z$),e(z$,bXe),e(bf,FXe),e(A,vXe),e(A,Ff),e(Ff,fee),e(fee,TXe),e(Ff,MXe),e(Ff,Q$),e(Q$,EXe),e(Ff,CXe),e(A,wXe),e(A,vf),e(vf,gee),e(gee,AXe),e(vf,yXe),e(vf,W$),e(W$,LXe),e(vf,xXe),e(A,$Xe),e(A,Tf),e(Tf,hee),e(hee,kXe),e(Tf,SXe),e(Tf,H$),e(H$,RXe),e(Tf,BXe),e(A,PXe),e(A,Mf),e(Mf,uee),e(uee,IXe),e(Mf,qXe),e(Mf,U$),e(U$,NXe),e(Mf,jXe),e(A,DXe),e(A,Ef),e(Ef,pee),e(pee,GXe),e(Ef,OXe),e(Ef,J$),e(J$,VXe),e(Ef,XXe),e(A,zXe),e(A,Cf),e(Cf,_ee),e(_ee,QXe),e(Cf,WXe),e(Cf,Y$),e(Y$,HXe),e(Cf,UXe),e(A,JXe),e(A,wf),e(wf,bee),e(bee,YXe),e(wf,KXe),e(wf,K$),e(K$,ZXe),e(wf,eze),e(A,oze),e(A,Af),e(Af,Fee),e(Fee,rze),e(Af,tze),e(Af,Z$),e(Z$,aze),e(Af,nze),e(A,sze),e(A,yf),e(yf,vee),e(vee,lze),e(yf,ize),e(yf,ek),e(ek,dze),e(yf,cze),e(A,mze),e(A,Lf),e(Lf,Tee),e(Tee,fze),e(Lf,gze),e(Lf,ok),e(ok,hze),e(Lf,uze),e(A,pze),e(A,xf),e(xf,Mee),e(Mee,_ze),e(xf,bze),e(xf,rk),e(rk,Fze),e(xf,vze),e(A,Tze),e(A,$f),e($f,Eee),e(Eee,Mze),e($f,Eze),e($f,tk),e(tk,Cze),e($f,wze),e(A,Aze),e(A,kf),e(kf,Cee),e(Cee,yze),e(kf,Lze),e(kf,ak),e(ak,xze),e(kf,$ze),e(A,kze),e(A,Sf),e(Sf,wee),e(wee,Sze),e(Sf,Rze),e(Sf,nk),e(nk,Bze),e(Sf,Pze),e(A,Ize),e(A,Rf),e(Rf,Aee),e(Aee,qze),e(Rf,Nze),e(Rf,sk),e(sk,jze),e(Rf,Dze),e(A,Gze),e(A,Bf),e(Bf,yee),e(yee,Oze),e(Bf,Vze),e(Bf,lk),e(lk,Xze),e(Bf,zze),e(A,Qze),e(A,Pf),e(Pf,Lee),e(Lee,Wze),e(Pf,Hze),e(Pf,ik),e(ik,Uze),e(Pf,Jze),e(A,Yze),e(A,If),e(If,xee),e(xee,Kze),e(If,Zze),e(If,dk),e(dk,eQe),e(If,oQe),e(A,rQe),e(A,qf),e(qf,$ee),e($ee,tQe),e(qf,aQe),e(qf,ck),e(ck,nQe),e(qf,sQe),e(A,lQe),e(A,Nf),e(Nf,kee),e(kee,iQe),e(Nf,dQe),e(Nf,mk),e(mk,cQe),e(Nf,mQe),e(A,fQe),e(A,jf),e(jf,See),e(See,gQe),e(jf,hQe),e(jf,fk),e(fk,uQe),e(jf,pQe),e(A,_Qe),e(A,Df),e(Df,Ree),e(Ree,bQe),e(Df,FQe),e(Df,gk),e(gk,vQe),e(Df,TQe),e(A,MQe),e(A,Gf),e(Gf,Bee),e(Bee,EQe),e(Gf,CQe),e(Gf,hk),e(hk,wQe),e(Gf,AQe),e(A,yQe),e(A,Of),e(Of,Pee),e(Pee,LQe),e(Of,xQe),e(Of,uk),e(uk,$Qe),e(Of,kQe),e(A,SQe),e(A,Vf),e(Vf,Iee),e(Iee,RQe),e(Vf,BQe),e(Vf,pk),e(pk,PQe),e(Vf,IQe),e(A,qQe),e(A,Xf),e(Xf,qee),e(qee,NQe),e(Xf,jQe),e(Xf,_k),e(_k,DQe),e(Xf,GQe),e(A,OQe),e(A,zf),e(zf,Nee),e(Nee,VQe),e(zf,XQe),e(zf,bk),e(bk,zQe),e(zf,QQe),e(A,WQe),e(A,Qf),e(Qf,jee),e(jee,HQe),e(Qf,UQe),e(Qf,Fk),e(Fk,JQe),e(Qf,YQe),e(A,KQe),e(A,Wf),e(Wf,Dee),e(Dee,ZQe),e(Wf,eWe),e(Wf,vk),e(vk,oWe),e(Wf,rWe),e(A,tWe),e(A,Hf),e(Hf,Gee),e(Gee,aWe),e(Hf,nWe),e(Hf,Tk),e(Tk,sWe),e(Hf,lWe),e(A,iWe),e(A,Uf),e(Uf,Oee),e(Oee,dWe),e(Uf,cWe),e(Uf,Mk),e(Mk,mWe),e(Uf,fWe),e(A,gWe),e(A,Jf),e(Jf,Vee),e(Vee,hWe),e(Jf,uWe),e(Jf,Ek),e(Ek,pWe),e(Jf,_We),e(A,bWe),e(A,Yf),e(Yf,Xee),e(Xee,FWe),e(Yf,vWe),e(Yf,Ck),e(Ck,TWe),e(Yf,MWe),e(A,EWe),e(A,Kf),e(Kf,zee),e(zee,CWe),e(Kf,wWe),e(Kf,wk),e(wk,AWe),e(Kf,yWe),e(A,LWe),e(A,Zf),e(Zf,Qee),e(Qee,xWe),e(Zf,$We),e(Zf,Ak),e(Ak,kWe),e(Zf,SWe),e(A,RWe),e(A,eg),e(eg,Wee),e(Wee,BWe),e(eg,PWe),e(eg,yk),e(yk,IWe),e(eg,qWe),e(A,NWe),e(A,og),e(og,Hee),e(Hee,jWe),e(og,DWe),e(og,Lk),e(Lk,GWe),e(og,OWe),e(A,VWe),e(A,rg),e(rg,Uee),e(Uee,XWe),e(rg,zWe),e(rg,xk),e(xk,QWe),e(rg,WWe),e(A,HWe),e(A,tg),e(tg,Jee),e(Jee,UWe),e(tg,JWe),e(tg,$k),e($k,YWe),e(tg,KWe),e(vr,ZWe),M(ag,vr,null),e(Mo,eHe),e(Mo,ng),M(C6,ng,null),e(ng,oHe),e(ng,Yee),e(Yee,rHe),b(m,JRe,_),b(m,mi,_),e(mi,sg),e(sg,Kee),M(w6,Kee,null),e(mi,tHe),e(mi,Zee),e(Zee,aHe),b(m,YRe,_),b(m,Eo,_),M(A6,Eo,null),e(Eo,nHe),e(Eo,y6),e(y6,sHe),e(y6,kk),e(kk,lHe),e(y6,iHe),e(Eo,dHe),e(Eo,L6),e(L6,cHe),e(L6,eoe),e(eoe,mHe),e(L6,fHe),e(Eo,gHe),e(Eo,Tr),M(x6,Tr,null),e(Tr,hHe),e(Tr,ooe),e(ooe,uHe),e(Tr,pHe),e(Tr,va),e(va,_He),e(va,roe),e(roe,bHe),e(va,FHe),e(va,toe),e(toe,vHe),e(va,THe),e(va,aoe),e(aoe,MHe),e(va,EHe),e(Tr,CHe),e(Tr,k),e(k,An),e(An,noe),e(noe,wHe),e(An,AHe),e(An,Sk),e(Sk,yHe),e(An,LHe),e(An,Rk),e(Rk,xHe),e(An,$He),e(k,kHe),e(k,yn),e(yn,soe),e(soe,SHe),e(yn,RHe),e(yn,Bk),e(Bk,BHe),e(yn,PHe),e(yn,Pk),e(Pk,IHe),e(yn,qHe),e(k,NHe),e(k,Ln),e(Ln,loe),e(loe,jHe),e(Ln,DHe),e(Ln,Ik),e(Ik,GHe),e(Ln,OHe),e(Ln,qk),e(qk,VHe),e(Ln,XHe),e(k,zHe),e(k,lg),e(lg,ioe),e(ioe,QHe),e(lg,WHe),e(lg,Nk),e(Nk,HHe),e(lg,UHe),e(k,JHe),e(k,xn),e(xn,doe),e(doe,YHe),e(xn,KHe),e(xn,jk),e(jk,ZHe),e(xn,eUe),e(xn,Dk),e(Dk,oUe),e(xn,rUe),e(k,tUe),e(k,ig),e(ig,coe),e(coe,aUe),e(ig,nUe),e(ig,Gk),e(Gk,sUe),e(ig,lUe),e(k,iUe),e(k,dg),e(dg,moe),e(moe,dUe),e(dg,cUe),e(dg,Ok),e(Ok,mUe),e(dg,fUe),e(k,gUe),e(k,cg),e(cg,foe),e(foe,hUe),e(cg,uUe),e(cg,Vk),e(Vk,pUe),e(cg,_Ue),e(k,bUe),e(k,$n),e($n,goe),e(goe,FUe),e($n,vUe),e($n,Xk),e(Xk,TUe),e($n,MUe),e($n,zk),e(zk,EUe),e($n,CUe),e(k,wUe),e(k,kn),e(kn,hoe),e(hoe,AUe),e(kn,yUe),e(kn,Qk),e(Qk,LUe),e(kn,xUe),e(kn,Wk),e(Wk,$Ue),e(kn,kUe),e(k,SUe),e(k,Sn),e(Sn,uoe),e(uoe,RUe),e(Sn,BUe),e(Sn,Hk),e(Hk,PUe),e(Sn,IUe),e(Sn,Uk),e(Uk,qUe),e(Sn,NUe),e(k,jUe),e(k,mg),e(mg,poe),e(poe,DUe),e(mg,GUe),e(mg,Jk),e(Jk,OUe),e(mg,VUe),e(k,XUe),e(k,fg),e(fg,_oe),e(_oe,zUe),e(fg,QUe),e(fg,Yk),e(Yk,WUe),e(fg,HUe),e(k,UUe),e(k,Rn),e(Rn,boe),e(boe,JUe),e(Rn,YUe),e(Rn,Kk),e(Kk,KUe),e(Rn,ZUe),e(Rn,Zk),e(Zk,eJe),e(Rn,oJe),e(k,rJe),e(k,gg),e(gg,Foe),e(Foe,tJe),e(gg,aJe),e(gg,eS),e(eS,nJe),e(gg,sJe),e(k,lJe),e(k,Bn),e(Bn,voe),e(voe,iJe),e(Bn,dJe),e(Bn,oS),e(oS,cJe),e(Bn,mJe),e(Bn,rS),e(rS,fJe),e(Bn,gJe),e(k,hJe),e(k,Pn),e(Pn,Toe),e(Toe,uJe),e(Pn,pJe),e(Pn,tS),e(tS,_Je),e(Pn,bJe),e(Pn,aS),e(aS,FJe),e(Pn,vJe),e(k,TJe),e(k,In),e(In,Moe),e(Moe,MJe),e(In,EJe),e(In,nS),e(nS,CJe),e(In,wJe),e(In,sS),e(sS,AJe),e(In,yJe),e(k,LJe),e(k,hg),e(hg,Eoe),e(Eoe,xJe),e(hg,$Je),e(hg,lS),e(lS,kJe),e(hg,SJe),e(k,RJe),e(k,qn),e(qn,Coe),e(Coe,BJe),e(qn,PJe),e(qn,iS),e(iS,IJe),e(qn,qJe),e(qn,dS),e(dS,NJe),e(qn,jJe),e(k,DJe),e(k,Nn),e(Nn,woe),e(woe,GJe),e(Nn,OJe),e(Nn,cS),e(cS,VJe),e(Nn,XJe),e(Nn,mS),e(mS,zJe),e(Nn,QJe),e(k,WJe),e(k,jn),e(jn,Aoe),e(Aoe,HJe),e(jn,UJe),e(jn,fS),e(fS,JJe),e(jn,YJe),e(jn,gS),e(gS,KJe),e(jn,ZJe),e(k,eYe),e(k,Dn),e(Dn,yoe),e(yoe,oYe),e(Dn,rYe),e(Dn,hS),e(hS,tYe),e(Dn,aYe),e(Dn,uS),e(uS,nYe),e(Dn,sYe),e(k,lYe),e(k,Gn),e(Gn,Loe),e(Loe,iYe),e(Gn,dYe),e(Gn,pS),e(pS,cYe),e(Gn,mYe),e(Gn,_S),e(_S,fYe),e(Gn,gYe),e(k,hYe),e(k,On),e(On,xoe),e(xoe,uYe),e(On,pYe),e(On,bS),e(bS,_Ye),e(On,bYe),e(On,FS),e(FS,FYe),e(On,vYe),e(k,TYe),e(k,ug),e(ug,$oe),e($oe,MYe),e(ug,EYe),e(ug,vS),e(vS,CYe),e(ug,wYe),e(k,AYe),e(k,Vn),e(Vn,koe),e(koe,yYe),e(Vn,LYe),e(Vn,TS),e(TS,xYe),e(Vn,$Ye),e(Vn,MS),e(MS,kYe),e(Vn,SYe),e(k,RYe),e(k,pg),e(pg,Soe),e(Soe,BYe),e(pg,PYe),e(pg,ES),e(ES,IYe),e(pg,qYe),e(k,NYe),e(k,Xn),e(Xn,Roe),e(Roe,jYe),e(Xn,DYe),e(Xn,CS),e(CS,GYe),e(Xn,OYe),e(Xn,wS),e(wS,VYe),e(Xn,XYe),e(k,zYe),e(k,zn),e(zn,Boe),e(Boe,QYe),e(zn,WYe),e(zn,AS),e(AS,HYe),e(zn,UYe),e(zn,yS),e(yS,JYe),e(zn,YYe),e(k,KYe),e(k,Qn),e(Qn,Poe),e(Poe,ZYe),e(Qn,eKe),e(Qn,LS),e(LS,oKe),e(Qn,rKe),e(Qn,xS),e(xS,tKe),e(Qn,aKe),e(k,nKe),e(k,Wn),e(Wn,Ioe),e(Ioe,sKe),e(Wn,lKe),e(Wn,$S),e($S,iKe),e(Wn,dKe),e(Wn,kS),e(kS,cKe),e(Wn,mKe),e(k,fKe),e(k,Hn),e(Hn,qoe),e(qoe,gKe),e(Hn,hKe),e(Hn,SS),e(SS,uKe),e(Hn,pKe),e(Hn,RS),e(RS,_Ke),e(Hn,bKe),e(k,FKe),e(k,_g),e(_g,Noe),e(Noe,vKe),e(_g,TKe),e(_g,BS),e(BS,MKe),e(_g,EKe),e(k,CKe),e(k,Un),e(Un,joe),e(joe,wKe),e(Un,AKe),e(Un,PS),e(PS,yKe),e(Un,LKe),e(Un,IS),e(IS,xKe),e(Un,$Ke),e(k,kKe),e(k,Jn),e(Jn,Doe),e(Doe,SKe),e(Jn,RKe),e(Jn,qS),e(qS,BKe),e(Jn,PKe),e(Jn,NS),e(NS,IKe),e(Jn,qKe),e(k,NKe),e(k,Yn),e(Yn,Goe),e(Goe,jKe),e(Yn,DKe),e(Yn,jS),e(jS,GKe),e(Yn,OKe),e(Yn,DS),e(DS,VKe),e(Yn,XKe),e(k,zKe),e(k,Kn),e(Kn,Ooe),e(Ooe,QKe),e(Kn,WKe),e(Kn,GS),e(GS,HKe),e(Kn,UKe),e(Kn,OS),e(OS,JKe),e(Kn,YKe),e(k,KKe),e(k,Zn),e(Zn,Voe),e(Voe,ZKe),e(Zn,eZe),e(Zn,VS),e(VS,oZe),e(Zn,rZe),e(Zn,XS),e(XS,tZe),e(Zn,aZe),e(k,nZe),e(k,es),e(es,Xoe),e(Xoe,sZe),e(es,lZe),e(es,zS),e(zS,iZe),e(es,dZe),e(es,QS),e(QS,cZe),e(es,mZe),e(k,fZe),e(k,bg),e(bg,zoe),e(zoe,gZe),e(bg,hZe),e(bg,WS),e(WS,uZe),e(bg,pZe),e(k,_Ze),e(k,os),e(os,Qoe),e(Qoe,bZe),e(os,FZe),e(os,HS),e(HS,vZe),e(os,TZe),e(os,US),e(US,MZe),e(os,EZe),e(k,CZe),e(k,Fg),e(Fg,Woe),e(Woe,wZe),e(Fg,AZe),e(Fg,JS),e(JS,yZe),e(Fg,LZe),e(k,xZe),e(k,vg),e(vg,Hoe),e(Hoe,$Ze),e(vg,kZe),e(vg,YS),e(YS,SZe),e(vg,RZe),e(k,BZe),e(k,rs),e(rs,Uoe),e(Uoe,PZe),e(rs,IZe),e(rs,KS),e(KS,qZe),e(rs,NZe),e(rs,ZS),e(ZS,jZe),e(rs,DZe),e(k,GZe),e(k,ts),e(ts,Joe),e(Joe,OZe),e(ts,VZe),e(ts,eR),e(eR,XZe),e(ts,zZe),e(ts,oR),e(oR,QZe),e(ts,WZe),e(k,HZe),e(k,as),e(as,Yoe),e(Yoe,UZe),e(as,JZe),e(as,rR),e(rR,YZe),e(as,KZe),e(as,tR),e(tR,ZZe),e(as,eeo),e(k,oeo),e(k,Tg),e(Tg,Koe),e(Koe,reo),e(Tg,teo),e(Tg,aR),e(aR,aeo),e(Tg,neo),e(k,seo),e(k,ns),e(ns,Zoe),e(Zoe,leo),e(ns,ieo),e(ns,nR),e(nR,deo),e(ns,ceo),e(ns,sR),e(sR,meo),e(ns,feo),e(k,geo),e(k,ss),e(ss,ere),e(ere,heo),e(ss,ueo),e(ss,lR),e(lR,peo),e(ss,_eo),e(ss,iR),e(iR,beo),e(ss,Feo),e(k,veo),e(k,ls),e(ls,ore),e(ore,Teo),e(ls,Meo),e(ls,dR),e(dR,Eeo),e(ls,Ceo),e(ls,cR),e(cR,weo),e(ls,Aeo),e(k,yeo),e(k,is),e(is,rre),e(rre,Leo),e(is,xeo),e(is,mR),e(mR,$eo),e(is,keo),e(is,fR),e(fR,Seo),e(is,Reo),e(k,Beo),e(k,ds),e(ds,tre),e(tre,Peo),e(ds,Ieo),e(ds,gR),e(gR,qeo),e(ds,Neo),e(ds,hR),e(hR,jeo),e(ds,Deo),e(k,Geo),e(k,cs),e(cs,are),e(are,Oeo),e(cs,Veo),e(cs,uR),e(uR,Xeo),e(cs,zeo),e(cs,pR),e(pR,Qeo),e(cs,Weo),e(k,Heo),e(k,Mg),e(Mg,nre),e(nre,Ueo),e(Mg,Jeo),e(Mg,_R),e(_R,Yeo),e(Mg,Keo),e(k,Zeo),e(k,Eg),e(Eg,sre),e(sre,eoo),e(Eg,ooo),e(Eg,bR),e(bR,roo),e(Eg,too),e(k,aoo),e(k,Cg),e(Cg,lre),e(lre,noo),e(Cg,soo),e(Cg,FR),e(FR,loo),e(Cg,ioo),e(k,doo),e(k,wg),e(wg,ire),e(ire,coo),e(wg,moo),e(wg,vR),e(vR,foo),e(wg,goo),e(k,hoo),e(k,ms),e(ms,dre),e(dre,uoo),e(ms,poo),e(ms,TR),e(TR,_oo),e(ms,boo),e(ms,MR),e(MR,Foo),e(ms,voo),e(k,Too),e(k,Ag),e(Ag,cre),e(cre,Moo),e(Ag,Eoo),e(Ag,ER),e(ER,Coo),e(Ag,woo),e(k,Aoo),e(k,fs),e(fs,mre),e(mre,yoo),e(fs,Loo),e(fs,CR),e(CR,xoo),e(fs,$oo),e(fs,wR),e(wR,koo),e(fs,Soo),e(k,Roo),e(k,gs),e(gs,fre),e(fre,Boo),e(gs,Poo),e(gs,AR),e(AR,Ioo),e(gs,qoo),e(gs,yR),e(yR,Noo),e(gs,joo),e(k,Doo),e(k,hs),e(hs,gre),e(gre,Goo),e(hs,Ooo),e(hs,LR),e(LR,Voo),e(hs,Xoo),e(hs,xR),e(xR,zoo),e(hs,Qoo),e(k,Woo),e(k,us),e(us,hre),e(hre,Hoo),e(us,Uoo),e(us,$R),e($R,Joo),e(us,Yoo),e(us,kR),e(kR,Koo),e(us,Zoo),e(k,ero),e(k,ps),e(ps,ure),e(ure,oro),e(ps,rro),e(ps,SR),e(SR,tro),e(ps,aro),e(ps,RR),e(RR,nro),e(ps,sro),e(k,lro),e(k,_s),e(_s,pre),e(pre,iro),e(_s,dro),e(_s,BR),e(BR,cro),e(_s,mro),e(_s,PR),e(PR,fro),e(_s,gro),e(k,hro),e(k,yg),e(yg,_re),e(_re,uro),e(yg,pro),e(yg,IR),e(IR,_ro),e(yg,bro),e(k,Fro),e(k,Lg),e(Lg,bre),e(bre,vro),e(Lg,Tro),e(Lg,qR),e(qR,Mro),e(Lg,Ero),e(k,Cro),e(k,bs),e(bs,Fre),e(Fre,wro),e(bs,Aro),e(bs,NR),e(NR,yro),e(bs,Lro),e(bs,jR),e(jR,xro),e(bs,$ro),e(k,kro),e(k,Fs),e(Fs,vre),e(vre,Sro),e(Fs,Rro),e(Fs,DR),e(DR,Bro),e(Fs,Pro),e(Fs,GR),e(GR,Iro),e(Fs,qro),e(k,Nro),e(k,vs),e(vs,Tre),e(Tre,jro),e(vs,Dro),e(vs,OR),e(OR,Gro),e(vs,Oro),e(vs,VR),e(VR,Vro),e(vs,Xro),e(k,zro),e(k,xg),e(xg,Mre),e(Mre,Qro),e(xg,Wro),e(xg,XR),e(XR,Hro),e(xg,Uro),e(k,Jro),e(k,$g),e($g,Ere),e(Ere,Yro),e($g,Kro),e($g,zR),e(zR,Zro),e($g,eto),e(k,oto),e(k,kg),e(kg,Cre),e(Cre,rto),e(kg,tto),e(kg,QR),e(QR,ato),e(kg,nto),e(k,sto),e(k,Ts),e(Ts,wre),e(wre,lto),e(Ts,ito),e(Ts,WR),e(WR,dto),e(Ts,cto),e(Ts,HR),e(HR,mto),e(Ts,fto),e(k,gto),e(k,Sg),e(Sg,Are),e(Are,hto),e(Sg,uto),e(Sg,UR),e(UR,pto),e(Sg,_to),e(k,bto),e(k,Rg),e(Rg,yre),e(yre,Fto),e(Rg,vto),e(Rg,JR),e(JR,Tto),e(Rg,Mto),e(k,Eto),e(k,Ms),e(Ms,Lre),e(Lre,Cto),e(Ms,wto),e(Ms,YR),e(YR,Ato),e(Ms,yto),e(Ms,KR),e(KR,Lto),e(Ms,xto),e(k,$to),e(k,Bg),e(Bg,xre),e(xre,kto),e(Bg,Sto),e(Bg,ZR),e(ZR,Rto),e(Bg,Bto),e(k,Pto),e(k,Pg),e(Pg,$re),e($re,Ito),e(Pg,qto),e(Pg,eB),e(eB,Nto),e(Pg,jto),e(k,Dto),e(k,Es),e(Es,kre),e(kre,Gto),e(Es,Oto),e(Es,oB),e(oB,Vto),e(Es,Xto),e(Es,rB),e(rB,zto),e(Es,Qto),e(k,Wto),e(k,Cs),e(Cs,Sre),e(Sre,Hto),e(Cs,Uto),e(Cs,tB),e(tB,Jto),e(Cs,Yto),e(Cs,aB),e(aB,Kto),e(Cs,Zto),e(k,eao),e(k,ws),e(ws,Rre),e(Rre,oao),e(ws,rao),e(ws,nB),e(nB,tao),e(ws,aao),e(ws,sB),e(sB,nao),e(ws,sao),e(k,lao),e(k,As),e(As,Bre),e(Bre,iao),e(As,dao),e(As,lB),e(lB,cao),e(As,mao),e(As,iB),e(iB,fao),e(As,gao),e(Tr,hao),M(Ig,Tr,null),e(Eo,uao),e(Eo,qg),M($6,qg,null),e(qg,pao),e(qg,Pre),e(Pre,_ao),b(m,KRe,_),b(m,fi,_),e(fi,Ng),e(Ng,Ire),M(k6,Ire,null),e(fi,bao),e(fi,qre),e(qre,Fao),b(m,ZRe,_),b(m,Co,_),M(S6,Co,null),e(Co,vao),e(Co,R6),e(R6,Tao),e(R6,dB),e(dB,Mao),e(R6,Eao),e(Co,Cao),e(Co,B6),e(B6,wao),e(B6,Nre),e(Nre,Aao),e(B6,yao),e(Co,Lao),e(Co,Xe),M(P6,Xe,null),e(Xe,xao),e(Xe,jre),e(jre,$ao),e(Xe,kao),e(Xe,Ta),e(Ta,Sao),e(Ta,Dre),e(Dre,Rao),e(Ta,Bao),e(Ta,Gre),e(Gre,Pao),e(Ta,Iao),e(Ta,Ore),e(Ore,qao),e(Ta,Nao),e(Xe,jao),e(Xe,te),e(te,jg),e(jg,Vre),e(Vre,Dao),e(jg,Gao),e(jg,cB),e(cB,Oao),e(jg,Vao),e(te,Xao),e(te,Dg),e(Dg,Xre),e(Xre,zao),e(Dg,Qao),e(Dg,mB),e(mB,Wao),e(Dg,Hao),e(te,Uao),e(te,Gg),e(Gg,zre),e(zre,Jao),e(Gg,Yao),e(Gg,fB),e(fB,Kao),e(Gg,Zao),e(te,eno),e(te,Og),e(Og,Qre),e(Qre,ono),e(Og,rno),e(Og,gB),e(gB,tno),e(Og,ano),e(te,nno),e(te,Vg),e(Vg,Wre),e(Wre,sno),e(Vg,lno),e(Vg,hB),e(hB,ino),e(Vg,dno),e(te,cno),e(te,Xg),e(Xg,Hre),e(Hre,mno),e(Xg,fno),e(Xg,uB),e(uB,gno),e(Xg,hno),e(te,uno),e(te,zg),e(zg,Ure),e(Ure,pno),e(zg,_no),e(zg,pB),e(pB,bno),e(zg,Fno),e(te,vno),e(te,Qg),e(Qg,Jre),e(Jre,Tno),e(Qg,Mno),e(Qg,_B),e(_B,Eno),e(Qg,Cno),e(te,wno),e(te,Wg),e(Wg,Yre),e(Yre,Ano),e(Wg,yno),e(Wg,bB),e(bB,Lno),e(Wg,xno),e(te,$no),e(te,Hg),e(Hg,Kre),e(Kre,kno),e(Hg,Sno),e(Hg,FB),e(FB,Rno),e(Hg,Bno),e(te,Pno),e(te,Ug),e(Ug,Zre),e(Zre,Ino),e(Ug,qno),e(Ug,vB),e(vB,Nno),e(Ug,jno),e(te,Dno),e(te,Jg),e(Jg,ete),e(ete,Gno),e(Jg,Ono),e(Jg,TB),e(TB,Vno),e(Jg,Xno),e(te,zno),e(te,Yg),e(Yg,ote),e(ote,Qno),e(Yg,Wno),e(Yg,MB),e(MB,Hno),e(Yg,Uno),e(te,Jno),e(te,Kg),e(Kg,rte),e(rte,Yno),e(Kg,Kno),e(Kg,EB),e(EB,Zno),e(Kg,eso),e(te,oso),e(te,Zg),e(Zg,tte),e(tte,rso),e(Zg,tso),e(Zg,CB),e(CB,aso),e(Zg,nso),e(te,sso),e(te,eh),e(eh,ate),e(ate,lso),e(eh,iso),e(eh,wB),e(wB,dso),e(eh,cso),e(te,mso),e(te,oh),e(oh,nte),e(nte,fso),e(oh,gso),e(oh,AB),e(AB,hso),e(oh,uso),e(te,pso),e(te,rh),e(rh,ste),e(ste,_so),e(rh,bso),e(rh,yB),e(yB,Fso),e(rh,vso),e(te,Tso),e(te,th),e(th,lte),e(lte,Mso),e(th,Eso),e(th,LB),e(LB,Cso),e(th,wso),e(te,Aso),e(te,ah),e(ah,ite),e(ite,yso),e(ah,Lso),e(ah,xB),e(xB,xso),e(ah,$so),e(te,kso),e(te,nh),e(nh,dte),e(dte,Sso),e(nh,Rso),e(nh,$B),e($B,Bso),e(nh,Pso),e(te,Iso),e(te,sh),e(sh,cte),e(cte,qso),e(sh,Nso),e(sh,kB),e(kB,jso),e(sh,Dso),e(te,Gso),e(te,lh),e(lh,mte),e(mte,Oso),e(lh,Vso),e(lh,SB),e(SB,Xso),e(lh,zso),e(te,Qso),e(te,ih),e(ih,fte),e(fte,Wso),e(ih,Hso),e(ih,RB),e(RB,Uso),e(ih,Jso),e(Xe,Yso),M(dh,Xe,null),e(Xe,Kso),M(ch,Xe,null),e(Co,Zso),e(Co,mh),M(I6,mh,null),e(mh,elo),e(mh,gte),e(gte,olo),b(m,eBe,_),b(m,gi,_),e(gi,fh),e(fh,hte),M(q6,hte,null),e(gi,rlo),e(gi,ute),e(ute,tlo),b(m,oBe,_),b(m,wo,_),M(N6,wo,null),e(wo,alo),e(wo,j6),e(j6,nlo),e(j6,BB),e(BB,slo),e(j6,llo),e(wo,ilo),e(wo,D6),e(D6,dlo),e(D6,pte),e(pte,clo),e(D6,mlo),e(wo,flo),e(wo,ze),M(G6,ze,null),e(ze,glo),e(ze,_te),e(_te,hlo),e(ze,ulo),e(ze,hi),e(hi,plo),e(hi,bte),e(bte,_lo),e(hi,blo),e(hi,Fte),e(Fte,Flo),e(hi,vlo),e(ze,Tlo),e(ze,be),e(be,gh),e(gh,vte),e(vte,Mlo),e(gh,Elo),e(gh,PB),e(PB,Clo),e(gh,wlo),e(be,Alo),e(be,hh),e(hh,Tte),e(Tte,ylo),e(hh,Llo),e(hh,IB),e(IB,xlo),e(hh,$lo),e(be,klo),e(be,uh),e(uh,Mte),e(Mte,Slo),e(uh,Rlo),e(uh,qB),e(qB,Blo),e(uh,Plo),e(be,Ilo),e(be,ph),e(ph,Ete),e(Ete,qlo),e(ph,Nlo),e(ph,NB),e(NB,jlo),e(ph,Dlo),e(be,Glo),e(be,_h),e(_h,Cte),e(Cte,Olo),e(_h,Vlo),e(_h,jB),e(jB,Xlo),e(_h,zlo),e(be,Qlo),e(be,bh),e(bh,wte),e(wte,Wlo),e(bh,Hlo),e(bh,DB),e(DB,Ulo),e(bh,Jlo),e(be,Ylo),e(be,Fh),e(Fh,Ate),e(Ate,Klo),e(Fh,Zlo),e(Fh,GB),e(GB,eio),e(Fh,oio),e(be,rio),e(be,vh),e(vh,yte),e(yte,tio),e(vh,aio),e(vh,OB),e(OB,nio),e(vh,sio),e(be,lio),e(be,Th),e(Th,Lte),e(Lte,iio),e(Th,dio),e(Th,VB),e(VB,cio),e(Th,mio),e(be,fio),e(be,Mh),e(Mh,xte),e(xte,gio),e(Mh,hio),e(Mh,XB),e(XB,uio),e(Mh,pio),e(be,_io),e(be,Eh),e(Eh,$te),e($te,bio),e(Eh,Fio),e(Eh,zB),e(zB,vio),e(Eh,Tio),e(be,Mio),e(be,Ch),e(Ch,kte),e(kte,Eio),e(Ch,Cio),e(Ch,QB),e(QB,wio),e(Ch,Aio),e(be,yio),e(be,wh),e(wh,Ste),e(Ste,Lio),e(wh,xio),e(wh,WB),e(WB,$io),e(wh,kio),e(be,Sio),e(be,Ah),e(Ah,Rte),e(Rte,Rio),e(Ah,Bio),e(Ah,HB),e(HB,Pio),e(Ah,Iio),e(ze,qio),M(yh,ze,null),e(ze,Nio),M(Lh,ze,null),e(wo,jio),e(wo,xh),M(O6,xh,null),e(xh,Dio),e(xh,Bte),e(Bte,Gio),b(m,rBe,_),b(m,ui,_),e(ui,$h),e($h,Pte),M(V6,Pte,null),e(ui,Oio),e(ui,Ite),e(Ite,Vio),b(m,tBe,_),b(m,Ao,_),M(X6,Ao,null),e(Ao,Xio),e(Ao,pi),e(pi,zio),e(pi,UB),e(UB,Qio),e(pi,Wio),e(pi,JB),e(JB,Hio),e(pi,Uio),e(Ao,Jio),e(Ao,z6),e(z6,Yio),e(z6,qte),e(qte,Kio),e(z6,Zio),e(Ao,edo),e(Ao,Kr),M(Q6,Kr,null),e(Kr,odo),e(Kr,Nte),e(Nte,rdo),e(Kr,tdo),e(Kr,_i),e(_i,ado),e(_i,jte),e(jte,ndo),e(_i,sdo),e(_i,YB),e(YB,ldo),e(_i,ido),e(Kr,ddo),M(kh,Kr,null),e(Ao,cdo),e(Ao,Qe),M(W6,Qe,null),e(Qe,mdo),e(Qe,Dte),e(Dte,fdo),e(Qe,gdo),e(Qe,Ma),e(Ma,hdo),e(Ma,Gte),e(Gte,udo),e(Ma,pdo),e(Ma,Ote),e(Ote,_do),e(Ma,bdo),e(Ma,Vte),e(Vte,Fdo),e(Ma,vdo),e(Qe,Tdo),e(Qe,x),e(x,Sh),e(Sh,Xte),e(Xte,Mdo),e(Sh,Edo),e(Sh,KB),e(KB,Cdo),e(Sh,wdo),e(x,Ado),e(x,Rh),e(Rh,zte),e(zte,ydo),e(Rh,Ldo),e(Rh,ZB),e(ZB,xdo),e(Rh,$do),e(x,kdo),e(x,Bh),e(Bh,Qte),e(Qte,Sdo),e(Bh,Rdo),e(Bh,eP),e(eP,Bdo),e(Bh,Pdo),e(x,Ido),e(x,Ph),e(Ph,Wte),e(Wte,qdo),e(Ph,Ndo),e(Ph,oP),e(oP,jdo),e(Ph,Ddo),e(x,Gdo),e(x,Ih),e(Ih,Hte),e(Hte,Odo),e(Ih,Vdo),e(Ih,rP),e(rP,Xdo),e(Ih,zdo),e(x,Qdo),e(x,qh),e(qh,Ute),e(Ute,Wdo),e(qh,Hdo),e(qh,tP),e(tP,Udo),e(qh,Jdo),e(x,Ydo),e(x,Nh),e(Nh,Jte),e(Jte,Kdo),e(Nh,Zdo),e(Nh,aP),e(aP,eco),e(Nh,oco),e(x,rco),e(x,jh),e(jh,Yte),e(Yte,tco),e(jh,aco),e(jh,nP),e(nP,nco),e(jh,sco),e(x,lco),e(x,Dh),e(Dh,Kte),e(Kte,ico),e(Dh,dco),e(Dh,sP),e(sP,cco),e(Dh,mco),e(x,fco),e(x,Gh),e(Gh,Zte),e(Zte,gco),e(Gh,hco),e(Gh,lP),e(lP,uco),e(Gh,pco),e(x,_co),e(x,Oh),e(Oh,eae),e(eae,bco),e(Oh,Fco),e(Oh,iP),e(iP,vco),e(Oh,Tco),e(x,Mco),e(x,Vh),e(Vh,oae),e(oae,Eco),e(Vh,Cco),e(Vh,dP),e(dP,wco),e(Vh,Aco),e(x,yco),e(x,Xh),e(Xh,rae),e(rae,Lco),e(Xh,xco),e(Xh,cP),e(cP,$co),e(Xh,kco),e(x,Sco),e(x,zh),e(zh,tae),e(tae,Rco),e(zh,Bco),e(zh,mP),e(mP,Pco),e(zh,Ico),e(x,qco),e(x,Qh),e(Qh,aae),e(aae,Nco),e(Qh,jco),e(Qh,fP),e(fP,Dco),e(Qh,Gco),e(x,Oco),e(x,Wh),e(Wh,nae),e(nae,Vco),e(Wh,Xco),e(Wh,gP),e(gP,zco),e(Wh,Qco),e(x,Wco),e(x,Hh),e(Hh,sae),e(sae,Hco),e(Hh,Uco),e(Hh,hP),e(hP,Jco),e(Hh,Yco),e(x,Kco),e(x,Uh),e(Uh,lae),e(lae,Zco),e(Uh,emo),e(Uh,uP),e(uP,omo),e(Uh,rmo),e(x,tmo),e(x,Jh),e(Jh,iae),e(iae,amo),e(Jh,nmo),e(Jh,pP),e(pP,smo),e(Jh,lmo),e(x,imo),e(x,Yh),e(Yh,dae),e(dae,dmo),e(Yh,cmo),e(Yh,_P),e(_P,mmo),e(Yh,fmo),e(x,gmo),e(x,Kh),e(Kh,cae),e(cae,hmo),e(Kh,umo),e(Kh,bP),e(bP,pmo),e(Kh,_mo),e(x,bmo),e(x,Zh),e(Zh,mae),e(mae,Fmo),e(Zh,vmo),e(Zh,FP),e(FP,Tmo),e(Zh,Mmo),e(x,Emo),e(x,eu),e(eu,fae),e(fae,Cmo),e(eu,wmo),e(eu,vP),e(vP,Amo),e(eu,ymo),e(x,Lmo),e(x,ou),e(ou,gae),e(gae,xmo),e(ou,$mo),e(ou,TP),e(TP,kmo),e(ou,Smo),e(x,Rmo),e(x,ru),e(ru,hae),e(hae,Bmo),e(ru,Pmo),e(ru,MP),e(MP,Imo),e(ru,qmo),e(x,Nmo),e(x,tu),e(tu,uae),e(uae,jmo),e(tu,Dmo),e(tu,EP),e(EP,Gmo),e(tu,Omo),e(x,Vmo),e(x,au),e(au,pae),e(pae,Xmo),e(au,zmo),e(au,CP),e(CP,Qmo),e(au,Wmo),e(x,Hmo),e(x,nu),e(nu,_ae),e(_ae,Umo),e(nu,Jmo),e(nu,wP),e(wP,Ymo),e(nu,Kmo),e(x,Zmo),e(x,su),e(su,bae),e(bae,efo),e(su,ofo),e(su,AP),e(AP,rfo),e(su,tfo),e(x,afo),e(x,lu),e(lu,Fae),e(Fae,nfo),e(lu,sfo),e(lu,yP),e(yP,lfo),e(lu,ifo),e(x,dfo),e(x,ys),e(ys,vae),e(vae,cfo),e(ys,mfo),e(ys,LP),e(LP,ffo),e(ys,gfo),e(ys,xP),e(xP,hfo),e(ys,ufo),e(x,pfo),e(x,iu),e(iu,Tae),e(Tae,_fo),e(iu,bfo),e(iu,$P),e($P,Ffo),e(iu,vfo),e(x,Tfo),e(x,du),e(du,Mae),e(Mae,Mfo),e(du,Efo),e(du,kP),e(kP,Cfo),e(du,wfo),e(x,Afo),e(x,cu),e(cu,Eae),e(Eae,yfo),e(cu,Lfo),e(cu,SP),e(SP,xfo),e(cu,$fo),e(x,kfo),e(x,mu),e(mu,Cae),e(Cae,Sfo),e(mu,Rfo),e(mu,RP),e(RP,Bfo),e(mu,Pfo),e(x,Ifo),e(x,fu),e(fu,wae),e(wae,qfo),e(fu,Nfo),e(fu,BP),e(BP,jfo),e(fu,Dfo),e(x,Gfo),e(x,gu),e(gu,Aae),e(Aae,Ofo),e(gu,Vfo),e(gu,PP),e(PP,Xfo),e(gu,zfo),e(x,Qfo),e(x,hu),e(hu,yae),e(yae,Wfo),e(hu,Hfo),e(hu,IP),e(IP,Ufo),e(hu,Jfo),e(x,Yfo),e(x,uu),e(uu,Lae),e(Lae,Kfo),e(uu,Zfo),e(uu,qP),e(qP,ego),e(uu,ogo),e(x,rgo),e(x,pu),e(pu,xae),e(xae,tgo),e(pu,ago),e(pu,NP),e(NP,ngo),e(pu,sgo),e(x,lgo),e(x,_u),e(_u,$ae),e($ae,igo),e(_u,dgo),e(_u,jP),e(jP,cgo),e(_u,mgo),e(x,fgo),e(x,bu),e(bu,kae),e(kae,ggo),e(bu,hgo),e(bu,DP),e(DP,ugo),e(bu,pgo),e(x,_go),e(x,Fu),e(Fu,Sae),e(Sae,bgo),e(Fu,Fgo),e(Fu,GP),e(GP,vgo),e(Fu,Tgo),e(x,Mgo),e(x,vu),e(vu,Rae),e(Rae,Ego),e(vu,Cgo),e(vu,OP),e(OP,wgo),e(vu,Ago),e(x,ygo),e(x,Tu),e(Tu,Bae),e(Bae,Lgo),e(Tu,xgo),e(Tu,VP),e(VP,$go),e(Tu,kgo),e(x,Sgo),e(x,Mu),e(Mu,Pae),e(Pae,Rgo),e(Mu,Bgo),e(Mu,XP),e(XP,Pgo),e(Mu,Igo),e(x,qgo),e(x,Eu),e(Eu,Iae),e(Iae,Ngo),e(Eu,jgo),e(Eu,zP),e(zP,Dgo),e(Eu,Ggo),e(x,Ogo),e(x,Cu),e(Cu,qae),e(qae,Vgo),e(Cu,Xgo),e(Cu,QP),e(QP,zgo),e(Cu,Qgo),e(x,Wgo),e(x,wu),e(wu,Nae),e(Nae,Hgo),e(wu,Ugo),e(wu,WP),e(WP,Jgo),e(wu,Ygo),e(x,Kgo),e(x,Au),e(Au,jae),e(jae,Zgo),e(Au,eho),e(Au,HP),e(HP,oho),e(Au,rho),e(x,tho),e(x,yu),e(yu,Dae),e(Dae,aho),e(yu,nho),e(yu,UP),e(UP,sho),e(yu,lho),e(x,iho),e(x,Lu),e(Lu,Gae),e(Gae,dho),e(Lu,cho),e(Lu,JP),e(JP,mho),e(Lu,fho),e(x,gho),e(x,xu),e(xu,Oae),e(Oae,hho),e(xu,uho),e(xu,YP),e(YP,pho),e(xu,_ho),e(x,bho),e(x,$u),e($u,Vae),e(Vae,Fho),e($u,vho),e($u,KP),e(KP,Tho),e($u,Mho),e(x,Eho),e(x,ku),e(ku,Xae),e(Xae,Cho),e(ku,who),e(ku,ZP),e(ZP,Aho),e(ku,yho),e(x,Lho),e(x,Su),e(Su,zae),e(zae,xho),e(Su,$ho),e(Su,eI),e(eI,kho),e(Su,Sho),e(x,Rho),e(x,Ru),e(Ru,Qae),e(Qae,Bho),e(Ru,Pho),e(Ru,oI),e(oI,Iho),e(Ru,qho),e(x,Nho),e(x,Bu),e(Bu,Wae),e(Wae,jho),e(Bu,Dho),e(Bu,rI),e(rI,Gho),e(Bu,Oho),e(x,Vho),e(x,Pu),e(Pu,Hae),e(Hae,Xho),e(Pu,zho),e(Pu,tI),e(tI,Qho),e(Pu,Who),e(x,Hho),e(x,Iu),e(Iu,Uae),e(Uae,Uho),e(Iu,Jho),e(Iu,aI),e(aI,Yho),e(Iu,Kho),e(x,Zho),e(x,qu),e(qu,Jae),e(Jae,euo),e(qu,ouo),e(qu,nI),e(nI,ruo),e(qu,tuo),e(x,auo),e(x,Nu),e(Nu,Yae),e(Yae,nuo),e(Nu,suo),e(Nu,sI),e(sI,luo),e(Nu,iuo),e(x,duo),e(x,ju),e(ju,Kae),e(Kae,cuo),e(ju,muo),e(ju,lI),e(lI,fuo),e(ju,guo),e(x,huo),e(x,Du),e(Du,Zae),e(Zae,uuo),e(Du,puo),e(Du,iI),e(iI,_uo),e(Du,buo),e(x,Fuo),e(x,Gu),e(Gu,ene),e(ene,vuo),e(Gu,Tuo),e(Gu,dI),e(dI,Muo),e(Gu,Euo),e(x,Cuo),e(x,Ou),e(Ou,one),e(one,wuo),e(Ou,Auo),e(Ou,cI),e(cI,yuo),e(Ou,Luo),e(x,xuo),e(x,Vu),e(Vu,rne),e(rne,$uo),e(Vu,kuo),e(Vu,mI),e(mI,Suo),e(Vu,Ruo),e(x,Buo),e(x,Xu),e(Xu,tne),e(tne,Puo),e(Xu,Iuo),e(Xu,fI),e(fI,quo),e(Xu,Nuo),e(x,juo),e(x,zu),e(zu,ane),e(ane,Duo),e(zu,Guo),e(zu,gI),e(gI,Ouo),e(zu,Vuo),e(x,Xuo),e(x,Qu),e(Qu,nne),e(nne,zuo),e(Qu,Quo),e(Qu,hI),e(hI,Wuo),e(Qu,Huo),e(x,Uuo),e(x,Wu),e(Wu,sne),e(sne,Juo),e(Wu,Yuo),e(Wu,uI),e(uI,Kuo),e(Wu,Zuo),e(x,epo),e(x,Hu),e(Hu,lne),e(lne,opo),e(Hu,rpo),e(Hu,pI),e(pI,tpo),e(Hu,apo),e(x,npo),e(x,Uu),e(Uu,ine),e(ine,spo),e(Uu,lpo),e(Uu,_I),e(_I,ipo),e(Uu,dpo),e(x,cpo),e(x,Ju),e(Ju,dne),e(dne,mpo),e(Ju,fpo),e(Ju,bI),e(bI,gpo),e(Ju,hpo),e(x,upo),e(x,Yu),e(Yu,cne),e(cne,ppo),e(Yu,_po),e(Yu,FI),e(FI,bpo),e(Yu,Fpo),e(x,vpo),e(x,Ku),e(Ku,mne),e(mne,Tpo),e(Ku,Mpo),e(Ku,vI),e(vI,Epo),e(Ku,Cpo),e(x,wpo),e(x,Zu),e(Zu,fne),e(fne,Apo),e(Zu,ypo),e(Zu,TI),e(TI,Lpo),e(Zu,xpo),e(x,$po),e(x,ep),e(ep,gne),e(gne,kpo),e(ep,Spo),e(ep,MI),e(MI,Rpo),e(ep,Bpo),e(x,Ppo),e(x,op),e(op,hne),e(hne,Ipo),e(op,qpo),e(op,EI),e(EI,Npo),e(op,jpo),e(x,Dpo),e(x,rp),e(rp,une),e(une,Gpo),e(rp,Opo),e(rp,CI),e(CI,Vpo),e(rp,Xpo),e(x,zpo),e(x,tp),e(tp,pne),e(pne,Qpo),e(tp,Wpo),e(tp,wI),e(wI,Hpo),e(tp,Upo),e(x,Jpo),e(x,ap),e(ap,_ne),e(_ne,Ypo),e(ap,Kpo),e(ap,AI),e(AI,Zpo),e(ap,e_o),e(x,o_o),e(x,np),e(np,bne),e(bne,r_o),e(np,t_o),e(np,yI),e(yI,a_o),e(np,n_o),e(x,s_o),e(x,sp),e(sp,Fne),e(Fne,l_o),e(sp,i_o),e(sp,LI),e(LI,d_o),e(sp,c_o),e(x,m_o),e(x,lp),e(lp,vne),e(vne,f_o),e(lp,g_o),e(lp,xI),e(xI,h_o),e(lp,u_o),e(x,p_o),e(x,ip),e(ip,Tne),e(Tne,__o),e(ip,b_o),e(ip,$I),e($I,F_o),e(ip,v_o),e(x,T_o),e(x,dp),e(dp,Mne),e(Mne,M_o),e(dp,E_o),e(dp,kI),e(kI,C_o),e(dp,w_o),e(x,A_o),e(x,cp),e(cp,Ene),e(Ene,y_o),e(cp,L_o),e(cp,SI),e(SI,x_o),e(cp,$_o),e(x,k_o),e(x,mp),e(mp,Cne),e(Cne,S_o),e(mp,R_o),e(mp,RI),e(RI,B_o),e(mp,P_o),e(x,I_o),e(x,fp),e(fp,wne),e(wne,q_o),e(fp,N_o),e(fp,BI),e(BI,j_o),e(fp,D_o),e(x,G_o),e(x,gp),e(gp,Ane),e(Ane,O_o),e(gp,V_o),e(gp,PI),e(PI,X_o),e(gp,z_o),e(x,Q_o),e(x,hp),e(hp,yne),e(yne,W_o),e(hp,H_o),e(hp,II),e(II,U_o),e(hp,J_o),e(x,Y_o),e(x,up),e(up,Lne),e(Lne,K_o),e(up,Z_o),e(up,qI),e(qI,ebo),e(up,obo),e(x,rbo),e(x,pp),e(pp,xne),e(xne,tbo),e(pp,abo),e(pp,NI),e(NI,nbo),e(pp,sbo),e(x,lbo),e(x,_p),e(_p,$ne),e($ne,ibo),e(_p,dbo),e(_p,jI),e(jI,cbo),e(_p,mbo),e(Qe,fbo),e(Qe,bp),e(bp,gbo),e(bp,kne),e(kne,hbo),e(bp,ubo),e(bp,Sne),e(Sne,pbo),e(Qe,_bo),M(Fp,Qe,null),b(m,aBe,_),b(m,bi,_),e(bi,vp),e(vp,Rne),M(H6,Rne,null),e(bi,bbo),e(bi,Bne),e(Bne,Fbo),b(m,nBe,_),b(m,yo,_),M(U6,yo,null),e(yo,vbo),e(yo,Fi),e(Fi,Tbo),e(Fi,DI),e(DI,Mbo),e(Fi,Ebo),e(Fi,GI),e(GI,Cbo),e(Fi,wbo),e(yo,Abo),e(yo,J6),e(J6,ybo),e(J6,Pne),e(Pne,Lbo),e(J6,xbo),e(yo,$bo),e(yo,Zr),M(Y6,Zr,null),e(Zr,kbo),e(Zr,Ine),e(Ine,Sbo),e(Zr,Rbo),e(Zr,vi),e(vi,Bbo),e(vi,qne),e(qne,Pbo),e(vi,Ibo),e(vi,OI),e(OI,qbo),e(vi,Nbo),e(Zr,jbo),M(Tp,Zr,null),e(yo,Dbo),e(yo,We),M(K6,We,null),e(We,Gbo),e(We,Nne),e(Nne,Obo),e(We,Vbo),e(We,Ea),e(Ea,Xbo),e(Ea,jne),e(jne,zbo),e(Ea,Qbo),e(Ea,Dne),e(Dne,Wbo),e(Ea,Hbo),e(Ea,Gne),e(Gne,Ubo),e(Ea,Jbo),e(We,Ybo),e(We,G),e(G,Mp),e(Mp,One),e(One,Kbo),e(Mp,Zbo),e(Mp,VI),e(VI,e2o),e(Mp,o2o),e(G,r2o),e(G,Ep),e(Ep,Vne),e(Vne,t2o),e(Ep,a2o),e(Ep,XI),e(XI,n2o),e(Ep,s2o),e(G,l2o),e(G,Cp),e(Cp,Xne),e(Xne,i2o),e(Cp,d2o),e(Cp,zI),e(zI,c2o),e(Cp,m2o),e(G,f2o),e(G,wp),e(wp,zne),e(zne,g2o),e(wp,h2o),e(wp,QI),e(QI,u2o),e(wp,p2o),e(G,_2o),e(G,Ap),e(Ap,Qne),e(Qne,b2o),e(Ap,F2o),e(Ap,WI),e(WI,v2o),e(Ap,T2o),e(G,M2o),e(G,yp),e(yp,Wne),e(Wne,E2o),e(yp,C2o),e(yp,HI),e(HI,w2o),e(yp,A2o),e(G,y2o),e(G,Lp),e(Lp,Hne),e(Hne,L2o),e(Lp,x2o),e(Lp,UI),e(UI,$2o),e(Lp,k2o),e(G,S2o),e(G,xp),e(xp,Une),e(Une,R2o),e(xp,B2o),e(xp,JI),e(JI,P2o),e(xp,I2o),e(G,q2o),e(G,$p),e($p,Jne),e(Jne,N2o),e($p,j2o),e($p,YI),e(YI,D2o),e($p,G2o),e(G,O2o),e(G,kp),e(kp,Yne),e(Yne,V2o),e(kp,X2o),e(kp,KI),e(KI,z2o),e(kp,Q2o),e(G,W2o),e(G,Sp),e(Sp,Kne),e(Kne,H2o),e(Sp,U2o),e(Sp,ZI),e(ZI,J2o),e(Sp,Y2o),e(G,K2o),e(G,Rp),e(Rp,Zne),e(Zne,Z2o),e(Rp,eFo),e(Rp,eq),e(eq,oFo),e(Rp,rFo),e(G,tFo),e(G,Bp),e(Bp,ese),e(ese,aFo),e(Bp,nFo),e(Bp,oq),e(oq,sFo),e(Bp,lFo),e(G,iFo),e(G,Pp),e(Pp,ose),e(ose,dFo),e(Pp,cFo),e(Pp,rq),e(rq,mFo),e(Pp,fFo),e(G,gFo),e(G,Ip),e(Ip,rse),e(rse,hFo),e(Ip,uFo),e(Ip,tq),e(tq,pFo),e(Ip,_Fo),e(G,bFo),e(G,qp),e(qp,tse),e(tse,FFo),e(qp,vFo),e(qp,aq),e(aq,TFo),e(qp,MFo),e(G,EFo),e(G,Np),e(Np,ase),e(ase,CFo),e(Np,wFo),e(Np,nq),e(nq,AFo),e(Np,yFo),e(G,LFo),e(G,jp),e(jp,nse),e(nse,xFo),e(jp,$Fo),e(jp,sq),e(sq,kFo),e(jp,SFo),e(G,RFo),e(G,Dp),e(Dp,sse),e(sse,BFo),e(Dp,PFo),e(Dp,lq),e(lq,IFo),e(Dp,qFo),e(G,NFo),e(G,Gp),e(Gp,lse),e(lse,jFo),e(Gp,DFo),e(Gp,iq),e(iq,GFo),e(Gp,OFo),e(G,VFo),e(G,Op),e(Op,ise),e(ise,XFo),e(Op,zFo),e(Op,dq),e(dq,QFo),e(Op,WFo),e(G,HFo),e(G,Vp),e(Vp,dse),e(dse,UFo),e(Vp,JFo),e(Vp,cq),e(cq,YFo),e(Vp,KFo),e(G,ZFo),e(G,Xp),e(Xp,cse),e(cse,evo),e(Xp,ovo),e(Xp,mq),e(mq,rvo),e(Xp,tvo),e(G,avo),e(G,zp),e(zp,mse),e(mse,nvo),e(zp,svo),e(zp,fq),e(fq,lvo),e(zp,ivo),e(G,dvo),e(G,Qp),e(Qp,fse),e(fse,cvo),e(Qp,mvo),e(Qp,gq),e(gq,fvo),e(Qp,gvo),e(G,hvo),e(G,Wp),e(Wp,gse),e(gse,uvo),e(Wp,pvo),e(Wp,hq),e(hq,_vo),e(Wp,bvo),e(G,Fvo),e(G,Hp),e(Hp,hse),e(hse,vvo),e(Hp,Tvo),e(Hp,uq),e(uq,Mvo),e(Hp,Evo),e(G,Cvo),e(G,Up),e(Up,use),e(use,wvo),e(Up,Avo),e(Up,pq),e(pq,yvo),e(Up,Lvo),e(G,xvo),e(G,Jp),e(Jp,pse),e(pse,$vo),e(Jp,kvo),e(Jp,_q),e(_q,Svo),e(Jp,Rvo),e(G,Bvo),e(G,Yp),e(Yp,_se),e(_se,Pvo),e(Yp,Ivo),e(Yp,bq),e(bq,qvo),e(Yp,Nvo),e(G,jvo),e(G,Kp),e(Kp,bse),e(bse,Dvo),e(Kp,Gvo),e(Kp,Fq),e(Fq,Ovo),e(Kp,Vvo),e(G,Xvo),e(G,Zp),e(Zp,Fse),e(Fse,zvo),e(Zp,Qvo),e(Zp,vq),e(vq,Wvo),e(Zp,Hvo),e(G,Uvo),e(G,e_),e(e_,vse),e(vse,Jvo),e(e_,Yvo),e(e_,Tq),e(Tq,Kvo),e(e_,Zvo),e(G,e1o),e(G,o_),e(o_,Tse),e(Tse,o1o),e(o_,r1o),e(o_,Mq),e(Mq,t1o),e(o_,a1o),e(G,n1o),e(G,r_),e(r_,Mse),e(Mse,s1o),e(r_,l1o),e(r_,Eq),e(Eq,i1o),e(r_,d1o),e(G,c1o),e(G,t_),e(t_,Ese),e(Ese,m1o),e(t_,f1o),e(t_,Cq),e(Cq,g1o),e(t_,h1o),e(G,u1o),e(G,a_),e(a_,Cse),e(Cse,p1o),e(a_,_1o),e(a_,wq),e(wq,b1o),e(a_,F1o),e(G,v1o),e(G,n_),e(n_,wse),e(wse,T1o),e(n_,M1o),e(n_,Aq),e(Aq,E1o),e(n_,C1o),e(G,w1o),e(G,s_),e(s_,Ase),e(Ase,A1o),e(s_,y1o),e(s_,yq),e(yq,L1o),e(s_,x1o),e(We,$1o),e(We,l_),e(l_,k1o),e(l_,yse),e(yse,S1o),e(l_,R1o),e(l_,Lse),e(Lse,B1o),e(We,P1o),M(i_,We,null),b(m,sBe,_),b(m,Ti,_),e(Ti,d_),e(d_,xse),M(Z6,xse,null),e(Ti,I1o),e(Ti,$se),e($se,q1o),b(m,lBe,_),b(m,Lo,_),M(ey,Lo,null),e(Lo,N1o),e(Lo,Mi),e(Mi,j1o),e(Mi,Lq),e(Lq,D1o),e(Mi,G1o),e(Mi,xq),e(xq,O1o),e(Mi,V1o),e(Lo,X1o),e(Lo,oy),e(oy,z1o),e(oy,kse),e(kse,Q1o),e(oy,W1o),e(Lo,H1o),e(Lo,et),M(ry,et,null),e(et,U1o),e(et,Sse),e(Sse,J1o),e(et,Y1o),e(et,Ei),e(Ei,K1o),e(Ei,Rse),e(Rse,Z1o),e(Ei,eTo),e(Ei,$q),e($q,oTo),e(Ei,rTo),e(et,tTo),M(c_,et,null),e(Lo,aTo),e(Lo,He),M(ty,He,null),e(He,nTo),e(He,Bse),e(Bse,sTo),e(He,lTo),e(He,Ca),e(Ca,iTo),e(Ca,Pse),e(Pse,dTo),e(Ca,cTo),e(Ca,Ise),e(Ise,mTo),e(Ca,fTo),e(Ca,qse),e(qse,gTo),e(Ca,hTo),e(He,uTo),e(He,z),e(z,m_),e(m_,Nse),e(Nse,pTo),e(m_,_To),e(m_,kq),e(kq,bTo),e(m_,FTo),e(z,vTo),e(z,f_),e(f_,jse),e(jse,TTo),e(f_,MTo),e(f_,Sq),e(Sq,ETo),e(f_,CTo),e(z,wTo),e(z,g_),e(g_,Dse),e(Dse,ATo),e(g_,yTo),e(g_,Rq),e(Rq,LTo),e(g_,xTo),e(z,$To),e(z,h_),e(h_,Gse),e(Gse,kTo),e(h_,STo),e(h_,Bq),e(Bq,RTo),e(h_,BTo),e(z,PTo),e(z,u_),e(u_,Ose),e(Ose,ITo),e(u_,qTo),e(u_,Pq),e(Pq,NTo),e(u_,jTo),e(z,DTo),e(z,p_),e(p_,Vse),e(Vse,GTo),e(p_,OTo),e(p_,Iq),e(Iq,VTo),e(p_,XTo),e(z,zTo),e(z,__),e(__,Xse),e(Xse,QTo),e(__,WTo),e(__,qq),e(qq,HTo),e(__,UTo),e(z,JTo),e(z,b_),e(b_,zse),e(zse,YTo),e(b_,KTo),e(b_,Nq),e(Nq,ZTo),e(b_,eMo),e(z,oMo),e(z,F_),e(F_,Qse),e(Qse,rMo),e(F_,tMo),e(F_,jq),e(jq,aMo),e(F_,nMo),e(z,sMo),e(z,v_),e(v_,Wse),e(Wse,lMo),e(v_,iMo),e(v_,Dq),e(Dq,dMo),e(v_,cMo),e(z,mMo),e(z,T_),e(T_,Hse),e(Hse,fMo),e(T_,gMo),e(T_,Gq),e(Gq,hMo),e(T_,uMo),e(z,pMo),e(z,M_),e(M_,Use),e(Use,_Mo),e(M_,bMo),e(M_,Oq),e(Oq,FMo),e(M_,vMo),e(z,TMo),e(z,E_),e(E_,Jse),e(Jse,MMo),e(E_,EMo),e(E_,Vq),e(Vq,CMo),e(E_,wMo),e(z,AMo),e(z,C_),e(C_,Yse),e(Yse,yMo),e(C_,LMo),e(C_,Xq),e(Xq,xMo),e(C_,$Mo),e(z,kMo),e(z,w_),e(w_,Kse),e(Kse,SMo),e(w_,RMo),e(w_,zq),e(zq,BMo),e(w_,PMo),e(z,IMo),e(z,A_),e(A_,Zse),e(Zse,qMo),e(A_,NMo),e(A_,Qq),e(Qq,jMo),e(A_,DMo),e(z,GMo),e(z,y_),e(y_,ele),e(ele,OMo),e(y_,VMo),e(y_,Wq),e(Wq,XMo),e(y_,zMo),e(z,QMo),e(z,L_),e(L_,ole),e(ole,WMo),e(L_,HMo),e(L_,Hq),e(Hq,UMo),e(L_,JMo),e(z,YMo),e(z,x_),e(x_,rle),e(rle,KMo),e(x_,ZMo),e(x_,Uq),e(Uq,e4o),e(x_,o4o),e(z,r4o),e(z,$_),e($_,tle),e(tle,t4o),e($_,a4o),e($_,Jq),e(Jq,n4o),e($_,s4o),e(z,l4o),e(z,k_),e(k_,ale),e(ale,i4o),e(k_,d4o),e(k_,Yq),e(Yq,c4o),e(k_,m4o),e(z,f4o),e(z,S_),e(S_,nle),e(nle,g4o),e(S_,h4o),e(S_,Kq),e(Kq,u4o),e(S_,p4o),e(z,_4o),e(z,R_),e(R_,sle),e(sle,b4o),e(R_,F4o),e(R_,Zq),e(Zq,v4o),e(R_,T4o),e(z,M4o),e(z,B_),e(B_,lle),e(lle,E4o),e(B_,C4o),e(B_,eN),e(eN,w4o),e(B_,A4o),e(z,y4o),e(z,P_),e(P_,ile),e(ile,L4o),e(P_,x4o),e(P_,oN),e(oN,$4o),e(P_,k4o),e(z,S4o),e(z,I_),e(I_,dle),e(dle,R4o),e(I_,B4o),e(I_,rN),e(rN,P4o),e(I_,I4o),e(z,q4o),e(z,q_),e(q_,cle),e(cle,N4o),e(q_,j4o),e(q_,tN),e(tN,D4o),e(q_,G4o),e(z,O4o),e(z,N_),e(N_,mle),e(mle,V4o),e(N_,X4o),e(N_,aN),e(aN,z4o),e(N_,Q4o),e(z,W4o),e(z,j_),e(j_,fle),e(fle,H4o),e(j_,U4o),e(j_,nN),e(nN,J4o),e(j_,Y4o),e(z,K4o),e(z,D_),e(D_,gle),e(gle,Z4o),e(D_,eEo),e(D_,sN),e(sN,oEo),e(D_,rEo),e(z,tEo),e(z,G_),e(G_,hle),e(hle,aEo),e(G_,nEo),e(G_,lN),e(lN,sEo),e(G_,lEo),e(z,iEo),e(z,O_),e(O_,ule),e(ule,dEo),e(O_,cEo),e(O_,iN),e(iN,mEo),e(O_,fEo),e(z,gEo),e(z,V_),e(V_,ple),e(ple,hEo),e(V_,uEo),e(V_,dN),e(dN,pEo),e(V_,_Eo),e(z,bEo),e(z,X_),e(X_,_le),e(_le,FEo),e(X_,vEo),e(X_,cN),e(cN,TEo),e(X_,MEo),e(z,EEo),e(z,z_),e(z_,ble),e(ble,CEo),e(z_,wEo),e(z_,mN),e(mN,AEo),e(z_,yEo),e(He,LEo),e(He,Q_),e(Q_,xEo),e(Q_,Fle),e(Fle,$Eo),e(Q_,kEo),e(Q_,vle),e(vle,SEo),e(He,REo),M(W_,He,null),b(m,iBe,_),b(m,Ci,_),e(Ci,H_),e(H_,Tle),M(ay,Tle,null),e(Ci,BEo),e(Ci,Mle),e(Mle,PEo),b(m,dBe,_),b(m,xo,_),M(ny,xo,null),e(xo,IEo),e(xo,wi),e(wi,qEo),e(wi,fN),e(fN,NEo),e(wi,jEo),e(wi,gN),e(gN,DEo),e(wi,GEo),e(xo,OEo),e(xo,sy),e(sy,VEo),e(sy,Ele),e(Ele,XEo),e(sy,zEo),e(xo,QEo),e(xo,ot),M(ly,ot,null),e(ot,WEo),e(ot,Cle),e(Cle,HEo),e(ot,UEo),e(ot,Ai),e(Ai,JEo),e(Ai,wle),e(wle,YEo),e(Ai,KEo),e(Ai,hN),e(hN,ZEo),e(Ai,e5o),e(ot,o5o),M(U_,ot,null),e(xo,r5o),e(xo,Ue),M(iy,Ue,null),e(Ue,t5o),e(Ue,Ale),e(Ale,a5o),e(Ue,n5o),e(Ue,wa),e(wa,s5o),e(wa,yle),e(yle,l5o),e(wa,i5o),e(wa,Lle),e(Lle,d5o),e(wa,c5o),e(wa,xle),e(xle,m5o),e(wa,f5o),e(Ue,g5o),e(Ue,Q),e(Q,J_),e(J_,$le),e($le,h5o),e(J_,u5o),e(J_,uN),e(uN,p5o),e(J_,_5o),e(Q,b5o),e(Q,Y_),e(Y_,kle),e(kle,F5o),e(Y_,v5o),e(Y_,pN),e(pN,T5o),e(Y_,M5o),e(Q,E5o),e(Q,K_),e(K_,Sle),e(Sle,C5o),e(K_,w5o),e(K_,_N),e(_N,A5o),e(K_,y5o),e(Q,L5o),e(Q,Z_),e(Z_,Rle),e(Rle,x5o),e(Z_,$5o),e(Z_,bN),e(bN,k5o),e(Z_,S5o),e(Q,R5o),e(Q,eb),e(eb,Ble),e(Ble,B5o),e(eb,P5o),e(eb,FN),e(FN,I5o),e(eb,q5o),e(Q,N5o),e(Q,ob),e(ob,Ple),e(Ple,j5o),e(ob,D5o),e(ob,vN),e(vN,G5o),e(ob,O5o),e(Q,V5o),e(Q,rb),e(rb,Ile),e(Ile,X5o),e(rb,z5o),e(rb,TN),e(TN,Q5o),e(rb,W5o),e(Q,H5o),e(Q,tb),e(tb,qle),e(qle,U5o),e(tb,J5o),e(tb,MN),e(MN,Y5o),e(tb,K5o),e(Q,Z5o),e(Q,ab),e(ab,Nle),e(Nle,eCo),e(ab,oCo),e(ab,EN),e(EN,rCo),e(ab,tCo),e(Q,aCo),e(Q,nb),e(nb,jle),e(jle,nCo),e(nb,sCo),e(nb,CN),e(CN,lCo),e(nb,iCo),e(Q,dCo),e(Q,sb),e(sb,Dle),e(Dle,cCo),e(sb,mCo),e(sb,wN),e(wN,fCo),e(sb,gCo),e(Q,hCo),e(Q,lb),e(lb,Gle),e(Gle,uCo),e(lb,pCo),e(lb,AN),e(AN,_Co),e(lb,bCo),e(Q,FCo),e(Q,ib),e(ib,Ole),e(Ole,vCo),e(ib,TCo),e(ib,yN),e(yN,MCo),e(ib,ECo),e(Q,CCo),e(Q,db),e(db,Vle),e(Vle,wCo),e(db,ACo),e(db,LN),e(LN,yCo),e(db,LCo),e(Q,xCo),e(Q,cb),e(cb,Xle),e(Xle,$Co),e(cb,kCo),e(cb,xN),e(xN,SCo),e(cb,RCo),e(Q,BCo),e(Q,mb),e(mb,zle),e(zle,PCo),e(mb,ICo),e(mb,$N),e($N,qCo),e(mb,NCo),e(Q,jCo),e(Q,fb),e(fb,Qle),e(Qle,DCo),e(fb,GCo),e(fb,kN),e(kN,OCo),e(fb,VCo),e(Q,XCo),e(Q,gb),e(gb,Wle),e(Wle,zCo),e(gb,QCo),e(gb,SN),e(SN,WCo),e(gb,HCo),e(Q,UCo),e(Q,hb),e(hb,Hle),e(Hle,JCo),e(hb,YCo),e(hb,RN),e(RN,KCo),e(hb,ZCo),e(Q,e3o),e(Q,ub),e(ub,Ule),e(Ule,o3o),e(ub,r3o),e(ub,BN),e(BN,t3o),e(ub,a3o),e(Q,n3o),e(Q,pb),e(pb,Jle),e(Jle,s3o),e(pb,l3o),e(pb,PN),e(PN,i3o),e(pb,d3o),e(Q,c3o),e(Q,_b),e(_b,Yle),e(Yle,m3o),e(_b,f3o),e(_b,IN),e(IN,g3o),e(_b,h3o),e(Q,u3o),e(Q,bb),e(bb,Kle),e(Kle,p3o),e(bb,_3o),e(bb,qN),e(qN,b3o),e(bb,F3o),e(Q,v3o),e(Q,Fb),e(Fb,Zle),e(Zle,T3o),e(Fb,M3o),e(Fb,NN),e(NN,E3o),e(Fb,C3o),e(Q,w3o),e(Q,vb),e(vb,eie),e(eie,A3o),e(vb,y3o),e(vb,jN),e(jN,L3o),e(vb,x3o),e(Q,$3o),e(Q,Tb),e(Tb,oie),e(oie,k3o),e(Tb,S3o),e(Tb,DN),e(DN,R3o),e(Tb,B3o),e(Q,P3o),e(Q,Mb),e(Mb,rie),e(rie,I3o),e(Mb,q3o),e(Mb,GN),e(GN,N3o),e(Mb,j3o),e(Q,D3o),e(Q,Eb),e(Eb,tie),e(tie,G3o),e(Eb,O3o),e(Eb,ON),e(ON,V3o),e(Eb,X3o),e(Q,z3o),e(Q,Cb),e(Cb,aie),e(aie,Q3o),e(Cb,W3o),e(Cb,VN),e(VN,H3o),e(Cb,U3o),e(Q,J3o),e(Q,wb),e(wb,nie),e(nie,Y3o),e(wb,K3o),e(wb,XN),e(XN,Z3o),e(wb,ewo),e(Q,owo),e(Q,Ab),e(Ab,sie),e(sie,rwo),e(Ab,two),e(Ab,lie),e(lie,awo),e(Ab,nwo),e(Q,swo),e(Q,yb),e(yb,iie),e(iie,lwo),e(yb,iwo),e(yb,zN),e(zN,dwo),e(yb,cwo),e(Q,mwo),e(Q,Lb),e(Lb,die),e(die,fwo),e(Lb,gwo),e(Lb,QN),e(QN,hwo),e(Lb,uwo),e(Q,pwo),e(Q,xb),e(xb,cie),e(cie,_wo),e(xb,bwo),e(xb,WN),e(WN,Fwo),e(xb,vwo),e(Q,Two),e(Q,$b),e($b,mie),e(mie,Mwo),e($b,Ewo),e($b,HN),e(HN,Cwo),e($b,wwo),e(Ue,Awo),e(Ue,kb),e(kb,ywo),e(kb,fie),e(fie,Lwo),e(kb,xwo),e(kb,gie),e(gie,$wo),e(Ue,kwo),M(Sb,Ue,null),b(m,cBe,_),b(m,yi,_),e(yi,Rb),e(Rb,hie),M(dy,hie,null),e(yi,Swo),e(yi,uie),e(uie,Rwo),b(m,mBe,_),b(m,$o,_),M(cy,$o,null),e($o,Bwo),e($o,Li),e(Li,Pwo),e(Li,UN),e(UN,Iwo),e(Li,qwo),e(Li,JN),e(JN,Nwo),e(Li,jwo),e($o,Dwo),e($o,my),e(my,Gwo),e(my,pie),e(pie,Owo),e(my,Vwo),e($o,Xwo),e($o,rt),M(fy,rt,null),e(rt,zwo),e(rt,_ie),e(_ie,Qwo),e(rt,Wwo),e(rt,xi),e(xi,Hwo),e(xi,bie),e(bie,Uwo),e(xi,Jwo),e(xi,YN),e(YN,Ywo),e(xi,Kwo),e(rt,Zwo),M(Bb,rt,null),e($o,eAo),e($o,Je),M(gy,Je,null),e(Je,oAo),e(Je,Fie),e(Fie,rAo),e(Je,tAo),e(Je,Aa),e(Aa,aAo),e(Aa,vie),e(vie,nAo),e(Aa,sAo),e(Aa,Tie),e(Tie,lAo),e(Aa,iAo),e(Aa,Mie),e(Mie,dAo),e(Aa,cAo),e(Je,mAo),e(Je,he),e(he,Pb),e(Pb,Eie),e(Eie,fAo),e(Pb,gAo),e(Pb,KN),e(KN,hAo),e(Pb,uAo),e(he,pAo),e(he,Ib),e(Ib,Cie),e(Cie,_Ao),e(Ib,bAo),e(Ib,ZN),e(ZN,FAo),e(Ib,vAo),e(he,TAo),e(he,qb),e(qb,wie),e(wie,MAo),e(qb,EAo),e(qb,ej),e(ej,CAo),e(qb,wAo),e(he,AAo),e(he,Nb),e(Nb,Aie),e(Aie,yAo),e(Nb,LAo),e(Nb,oj),e(oj,xAo),e(Nb,$Ao),e(he,kAo),e(he,jb),e(jb,yie),e(yie,SAo),e(jb,RAo),e(jb,rj),e(rj,BAo),e(jb,PAo),e(he,IAo),e(he,Db),e(Db,Lie),e(Lie,qAo),e(Db,NAo),e(Db,tj),e(tj,jAo),e(Db,DAo),e(he,GAo),e(he,Gb),e(Gb,xie),e(xie,OAo),e(Gb,VAo),e(Gb,aj),e(aj,XAo),e(Gb,zAo),e(he,QAo),e(he,Ob),e(Ob,$ie),e($ie,WAo),e(Ob,HAo),e(Ob,nj),e(nj,UAo),e(Ob,JAo),e(he,YAo),e(he,Vb),e(Vb,kie),e(kie,KAo),e(Vb,ZAo),e(Vb,sj),e(sj,e0o),e(Vb,o0o),e(he,r0o),e(he,Xb),e(Xb,Sie),e(Sie,t0o),e(Xb,a0o),e(Xb,lj),e(lj,n0o),e(Xb,s0o),e(he,l0o),e(he,zb),e(zb,Rie),e(Rie,i0o),e(zb,d0o),e(zb,ij),e(ij,c0o),e(zb,m0o),e(he,f0o),e(he,Qb),e(Qb,Bie),e(Bie,g0o),e(Qb,h0o),e(Qb,dj),e(dj,u0o),e(Qb,p0o),e(he,_0o),e(he,Wb),e(Wb,Pie),e(Pie,b0o),e(Wb,F0o),e(Wb,cj),e(cj,v0o),e(Wb,T0o),e(he,M0o),e(he,Hb),e(Hb,Iie),e(Iie,E0o),e(Hb,C0o),e(Hb,mj),e(mj,w0o),e(Hb,A0o),e(he,y0o),e(he,Ub),e(Ub,qie),e(qie,L0o),e(Ub,x0o),e(Ub,fj),e(fj,$0o),e(Ub,k0o),e(he,S0o),e(he,Jb),e(Jb,Nie),e(Nie,R0o),e(Jb,B0o),e(Jb,gj),e(gj,P0o),e(Jb,I0o),e(he,q0o),e(he,Yb),e(Yb,jie),e(jie,N0o),e(Yb,j0o),e(Yb,hj),e(hj,D0o),e(Yb,G0o),e(Je,O0o),e(Je,Kb),e(Kb,V0o),e(Kb,Die),e(Die,X0o),e(Kb,z0o),e(Kb,Gie),e(Gie,Q0o),e(Je,W0o),M(Zb,Je,null),b(m,fBe,_),b(m,$i,_),e($i,e2),e(e2,Oie),M(hy,Oie,null),e($i,H0o),e($i,Vie),e(Vie,U0o),b(m,gBe,_),b(m,ko,_),M(uy,ko,null),e(ko,J0o),e(ko,ki),e(ki,Y0o),e(ki,uj),e(uj,K0o),e(ki,Z0o),e(ki,pj),e(pj,e6o),e(ki,o6o),e(ko,r6o),e(ko,py),e(py,t6o),e(py,Xie),e(Xie,a6o),e(py,n6o),e(ko,s6o),e(ko,tt),M(_y,tt,null),e(tt,l6o),e(tt,zie),e(zie,i6o),e(tt,d6o),e(tt,Si),e(Si,c6o),e(Si,Qie),e(Qie,m6o),e(Si,f6o),e(Si,_j),e(_j,g6o),e(Si,h6o),e(tt,u6o),M(o2,tt,null),e(ko,p6o),e(ko,Ye),M(by,Ye,null),e(Ye,_6o),e(Ye,Wie),e(Wie,b6o),e(Ye,F6o),e(Ye,ya),e(ya,v6o),e(ya,Hie),e(Hie,T6o),e(ya,M6o),e(ya,Uie),e(Uie,E6o),e(ya,C6o),e(ya,Jie),e(Jie,w6o),e(ya,A6o),e(Ye,y6o),e(Ye,q),e(q,r2),e(r2,Yie),e(Yie,L6o),e(r2,x6o),e(r2,bj),e(bj,$6o),e(r2,k6o),e(q,S6o),e(q,t2),e(t2,Kie),e(Kie,R6o),e(t2,B6o),e(t2,Fj),e(Fj,P6o),e(t2,I6o),e(q,q6o),e(q,a2),e(a2,Zie),e(Zie,N6o),e(a2,j6o),e(a2,vj),e(vj,D6o),e(a2,G6o),e(q,O6o),e(q,n2),e(n2,ede),e(ede,V6o),e(n2,X6o),e(n2,Tj),e(Tj,z6o),e(n2,Q6o),e(q,W6o),e(q,s2),e(s2,ode),e(ode,H6o),e(s2,U6o),e(s2,Mj),e(Mj,J6o),e(s2,Y6o),e(q,K6o),e(q,l2),e(l2,rde),e(rde,Z6o),e(l2,eyo),e(l2,Ej),e(Ej,oyo),e(l2,ryo),e(q,tyo),e(q,i2),e(i2,tde),e(tde,ayo),e(i2,nyo),e(i2,Cj),e(Cj,syo),e(i2,lyo),e(q,iyo),e(q,d2),e(d2,ade),e(ade,dyo),e(d2,cyo),e(d2,wj),e(wj,myo),e(d2,fyo),e(q,gyo),e(q,c2),e(c2,nde),e(nde,hyo),e(c2,uyo),e(c2,Aj),e(Aj,pyo),e(c2,_yo),e(q,byo),e(q,m2),e(m2,sde),e(sde,Fyo),e(m2,vyo),e(m2,yj),e(yj,Tyo),e(m2,Myo),e(q,Eyo),e(q,f2),e(f2,lde),e(lde,Cyo),e(f2,wyo),e(f2,Lj),e(Lj,Ayo),e(f2,yyo),e(q,Lyo),e(q,g2),e(g2,ide),e(ide,xyo),e(g2,$yo),e(g2,xj),e(xj,kyo),e(g2,Syo),e(q,Ryo),e(q,h2),e(h2,dde),e(dde,Byo),e(h2,Pyo),e(h2,$j),e($j,Iyo),e(h2,qyo),e(q,Nyo),e(q,u2),e(u2,cde),e(cde,jyo),e(u2,Dyo),e(u2,kj),e(kj,Gyo),e(u2,Oyo),e(q,Vyo),e(q,p2),e(p2,mde),e(mde,Xyo),e(p2,zyo),e(p2,Sj),e(Sj,Qyo),e(p2,Wyo),e(q,Hyo),e(q,_2),e(_2,fde),e(fde,Uyo),e(_2,Jyo),e(_2,Rj),e(Rj,Yyo),e(_2,Kyo),e(q,Zyo),e(q,b2),e(b2,gde),e(gde,eLo),e(b2,oLo),e(b2,Bj),e(Bj,rLo),e(b2,tLo),e(q,aLo),e(q,F2),e(F2,hde),e(hde,nLo),e(F2,sLo),e(F2,Pj),e(Pj,lLo),e(F2,iLo),e(q,dLo),e(q,v2),e(v2,ude),e(ude,cLo),e(v2,mLo),e(v2,Ij),e(Ij,fLo),e(v2,gLo),e(q,hLo),e(q,T2),e(T2,pde),e(pde,uLo),e(T2,pLo),e(T2,qj),e(qj,_Lo),e(T2,bLo),e(q,FLo),e(q,M2),e(M2,_de),e(_de,vLo),e(M2,TLo),e(M2,Nj),e(Nj,MLo),e(M2,ELo),e(q,CLo),e(q,E2),e(E2,bde),e(bde,wLo),e(E2,ALo),e(E2,jj),e(jj,yLo),e(E2,LLo),e(q,xLo),e(q,C2),e(C2,Fde),e(Fde,$Lo),e(C2,kLo),e(C2,Dj),e(Dj,SLo),e(C2,RLo),e(q,BLo),e(q,w2),e(w2,vde),e(vde,PLo),e(w2,ILo),e(w2,Gj),e(Gj,qLo),e(w2,NLo),e(q,jLo),e(q,A2),e(A2,Tde),e(Tde,DLo),e(A2,GLo),e(A2,Oj),e(Oj,OLo),e(A2,VLo),e(q,XLo),e(q,y2),e(y2,Mde),e(Mde,zLo),e(y2,QLo),e(y2,Vj),e(Vj,WLo),e(y2,HLo),e(q,ULo),e(q,L2),e(L2,Ede),e(Ede,JLo),e(L2,YLo),e(L2,Xj),e(Xj,KLo),e(L2,ZLo),e(q,e8o),e(q,x2),e(x2,Cde),e(Cde,o8o),e(x2,r8o),e(x2,zj),e(zj,t8o),e(x2,a8o),e(q,n8o),e(q,$2),e($2,wde),e(wde,s8o),e($2,l8o),e($2,Qj),e(Qj,i8o),e($2,d8o),e(q,c8o),e(q,k2),e(k2,Ade),e(Ade,m8o),e(k2,f8o),e(k2,Wj),e(Wj,g8o),e(k2,h8o),e(q,u8o),e(q,S2),e(S2,yde),e(yde,p8o),e(S2,_8o),e(S2,Hj),e(Hj,b8o),e(S2,F8o),e(q,v8o),e(q,R2),e(R2,Lde),e(Lde,T8o),e(R2,M8o),e(R2,Uj),e(Uj,E8o),e(R2,C8o),e(q,w8o),e(q,B2),e(B2,xde),e(xde,A8o),e(B2,y8o),e(B2,Jj),e(Jj,L8o),e(B2,x8o),e(q,$8o),e(q,P2),e(P2,$de),e($de,k8o),e(P2,S8o),e(P2,Yj),e(Yj,R8o),e(P2,B8o),e(q,P8o),e(q,I2),e(I2,kde),e(kde,I8o),e(I2,q8o),e(I2,Kj),e(Kj,N8o),e(I2,j8o),e(q,D8o),e(q,q2),e(q2,Sde),e(Sde,G8o),e(q2,O8o),e(q2,Zj),e(Zj,V8o),e(q2,X8o),e(q,z8o),e(q,N2),e(N2,Rde),e(Rde,Q8o),e(N2,W8o),e(N2,eD),e(eD,H8o),e(N2,U8o),e(q,J8o),e(q,j2),e(j2,Bde),e(Bde,Y8o),e(j2,K8o),e(j2,oD),e(oD,Z8o),e(j2,e7o),e(q,o7o),e(q,D2),e(D2,Pde),e(Pde,r7o),e(D2,t7o),e(D2,rD),e(rD,a7o),e(D2,n7o),e(q,s7o),e(q,G2),e(G2,Ide),e(Ide,l7o),e(G2,i7o),e(G2,tD),e(tD,d7o),e(G2,c7o),e(q,m7o),e(q,O2),e(O2,qde),e(qde,f7o),e(O2,g7o),e(O2,aD),e(aD,h7o),e(O2,u7o),e(q,p7o),e(q,V2),e(V2,Nde),e(Nde,_7o),e(V2,b7o),e(V2,nD),e(nD,F7o),e(V2,v7o),e(q,T7o),e(q,X2),e(X2,jde),e(jde,M7o),e(X2,E7o),e(X2,sD),e(sD,C7o),e(X2,w7o),e(q,A7o),e(q,z2),e(z2,Dde),e(Dde,y7o),e(z2,L7o),e(z2,lD),e(lD,x7o),e(z2,$7o),e(q,k7o),e(q,Q2),e(Q2,Gde),e(Gde,S7o),e(Q2,R7o),e(Q2,iD),e(iD,B7o),e(Q2,P7o),e(q,I7o),e(q,W2),e(W2,Ode),e(Ode,q7o),e(W2,N7o),e(W2,dD),e(dD,j7o),e(W2,D7o),e(q,G7o),e(q,H2),e(H2,Vde),e(Vde,O7o),e(H2,V7o),e(H2,cD),e(cD,X7o),e(H2,z7o),e(Ye,Q7o),e(Ye,U2),e(U2,W7o),e(U2,Xde),e(Xde,H7o),e(U2,U7o),e(U2,zde),e(zde,J7o),e(Ye,Y7o),M(J2,Ye,null),b(m,hBe,_),b(m,Ri,_),e(Ri,Y2),e(Y2,Qde),M(Fy,Qde,null),e(Ri,K7o),e(Ri,Wde),e(Wde,Z7o),b(m,uBe,_),b(m,So,_),M(vy,So,null),e(So,exo),e(So,Bi),e(Bi,oxo),e(Bi,mD),e(mD,rxo),e(Bi,txo),e(Bi,fD),e(fD,axo),e(Bi,nxo),e(So,sxo),e(So,Ty),e(Ty,lxo),e(Ty,Hde),e(Hde,ixo),e(Ty,dxo),e(So,cxo),e(So,at),M(My,at,null),e(at,mxo),e(at,Ude),e(Ude,fxo),e(at,gxo),e(at,Pi),e(Pi,hxo),e(Pi,Jde),e(Jde,uxo),e(Pi,pxo),e(Pi,gD),e(gD,_xo),e(Pi,bxo),e(at,Fxo),M(K2,at,null),e(So,vxo),e(So,Ke),M(Ey,Ke,null),e(Ke,Txo),e(Ke,Yde),e(Yde,Mxo),e(Ke,Exo),e(Ke,La),e(La,Cxo),e(La,Kde),e(Kde,wxo),e(La,Axo),e(La,Zde),e(Zde,yxo),e(La,Lxo),e(La,ece),e(ece,xxo),e(La,$xo),e(Ke,kxo),e(Ke,Y),e(Y,Z2),e(Z2,oce),e(oce,Sxo),e(Z2,Rxo),e(Z2,hD),e(hD,Bxo),e(Z2,Pxo),e(Y,Ixo),e(Y,eF),e(eF,rce),e(rce,qxo),e(eF,Nxo),e(eF,uD),e(uD,jxo),e(eF,Dxo),e(Y,Gxo),e(Y,oF),e(oF,tce),e(tce,Oxo),e(oF,Vxo),e(oF,pD),e(pD,Xxo),e(oF,zxo),e(Y,Qxo),e(Y,rF),e(rF,ace),e(ace,Wxo),e(rF,Hxo),e(rF,_D),e(_D,Uxo),e(rF,Jxo),e(Y,Yxo),e(Y,tF),e(tF,nce),e(nce,Kxo),e(tF,Zxo),e(tF,bD),e(bD,e9o),e(tF,o9o),e(Y,r9o),e(Y,aF),e(aF,sce),e(sce,t9o),e(aF,a9o),e(aF,FD),e(FD,n9o),e(aF,s9o),e(Y,l9o),e(Y,nF),e(nF,lce),e(lce,i9o),e(nF,d9o),e(nF,vD),e(vD,c9o),e(nF,m9o),e(Y,f9o),e(Y,sF),e(sF,ice),e(ice,g9o),e(sF,h9o),e(sF,TD),e(TD,u9o),e(sF,p9o),e(Y,_9o),e(Y,lF),e(lF,dce),e(dce,b9o),e(lF,F9o),e(lF,MD),e(MD,v9o),e(lF,T9o),e(Y,M9o),e(Y,iF),e(iF,cce),e(cce,E9o),e(iF,C9o),e(iF,ED),e(ED,w9o),e(iF,A9o),e(Y,y9o),e(Y,dF),e(dF,mce),e(mce,L9o),e(dF,x9o),e(dF,CD),e(CD,$9o),e(dF,k9o),e(Y,S9o),e(Y,cF),e(cF,fce),e(fce,R9o),e(cF,B9o),e(cF,wD),e(wD,P9o),e(cF,I9o),e(Y,q9o),e(Y,mF),e(mF,gce),e(gce,N9o),e(mF,j9o),e(mF,AD),e(AD,D9o),e(mF,G9o),e(Y,O9o),e(Y,fF),e(fF,hce),e(hce,V9o),e(fF,X9o),e(fF,yD),e(yD,z9o),e(fF,Q9o),e(Y,W9o),e(Y,gF),e(gF,uce),e(uce,H9o),e(gF,U9o),e(gF,LD),e(LD,J9o),e(gF,Y9o),e(Y,K9o),e(Y,hF),e(hF,pce),e(pce,Z9o),e(hF,e$o),e(hF,xD),e(xD,o$o),e(hF,r$o),e(Y,t$o),e(Y,uF),e(uF,_ce),e(_ce,a$o),e(uF,n$o),e(uF,$D),e($D,s$o),e(uF,l$o),e(Y,i$o),e(Y,pF),e(pF,bce),e(bce,d$o),e(pF,c$o),e(pF,kD),e(kD,m$o),e(pF,f$o),e(Y,g$o),e(Y,_F),e(_F,Fce),e(Fce,h$o),e(_F,u$o),e(_F,SD),e(SD,p$o),e(_F,_$o),e(Y,b$o),e(Y,bF),e(bF,vce),e(vce,F$o),e(bF,v$o),e(bF,RD),e(RD,T$o),e(bF,M$o),e(Y,E$o),e(Y,FF),e(FF,Tce),e(Tce,C$o),e(FF,w$o),e(FF,BD),e(BD,A$o),e(FF,y$o),e(Y,L$o),e(Y,vF),e(vF,Mce),e(Mce,x$o),e(vF,$$o),e(vF,PD),e(PD,k$o),e(vF,S$o),e(Y,R$o),e(Y,TF),e(TF,Ece),e(Ece,B$o),e(TF,P$o),e(TF,ID),e(ID,I$o),e(TF,q$o),e(Y,N$o),e(Y,MF),e(MF,Cce),e(Cce,j$o),e(MF,D$o),e(MF,qD),e(qD,G$o),e(MF,O$o),e(Y,V$o),e(Y,EF),e(EF,wce),e(wce,X$o),e(EF,z$o),e(EF,ND),e(ND,Q$o),e(EF,W$o),e(Y,H$o),e(Y,CF),e(CF,Ace),e(Ace,U$o),e(CF,J$o),e(CF,jD),e(jD,Y$o),e(CF,K$o),e(Y,Z$o),e(Y,wF),e(wF,yce),e(yce,eko),e(wF,oko),e(wF,DD),e(DD,rko),e(wF,tko),e(Y,ako),e(Y,AF),e(AF,Lce),e(Lce,nko),e(AF,sko),e(AF,GD),e(GD,lko),e(AF,iko),e(Ke,dko),e(Ke,yF),e(yF,cko),e(yF,xce),e(xce,mko),e(yF,fko),e(yF,$ce),e($ce,gko),e(Ke,hko),M(LF,Ke,null),b(m,pBe,_),b(m,Ii,_),e(Ii,xF),e(xF,kce),M(Cy,kce,null),e(Ii,uko),e(Ii,Sce),e(Sce,pko),b(m,_Be,_),b(m,Ro,_),M(wy,Ro,null),e(Ro,_ko),e(Ro,qi),e(qi,bko),e(qi,OD),e(OD,Fko),e(qi,vko),e(qi,VD),e(VD,Tko),e(qi,Mko),e(Ro,Eko),e(Ro,Ay),e(Ay,Cko),e(Ay,Rce),e(Rce,wko),e(Ay,Ako),e(Ro,yko),e(Ro,nt),M(yy,nt,null),e(nt,Lko),e(nt,Bce),e(Bce,xko),e(nt,$ko),e(nt,Ni),e(Ni,kko),e(Ni,Pce),e(Pce,Sko),e(Ni,Rko),e(Ni,XD),e(XD,Bko),e(Ni,Pko),e(nt,Iko),M($F,nt,null),e(Ro,qko),e(Ro,Ze),M(Ly,Ze,null),e(Ze,Nko),e(Ze,Ice),e(Ice,jko),e(Ze,Dko),e(Ze,xa),e(xa,Gko),e(xa,qce),e(qce,Oko),e(xa,Vko),e(xa,Nce),e(Nce,Xko),e(xa,zko),e(xa,jce),e(jce,Qko),e(xa,Wko),e(Ze,Hko),e(Ze,Wr),e(Wr,kF),e(kF,Dce),e(Dce,Uko),e(kF,Jko),e(kF,zD),e(zD,Yko),e(kF,Kko),e(Wr,Zko),e(Wr,SF),e(SF,Gce),e(Gce,eSo),e(SF,oSo),e(SF,QD),e(QD,rSo),e(SF,tSo),e(Wr,aSo),e(Wr,RF),e(RF,Oce),e(Oce,nSo),e(RF,sSo),e(RF,WD),e(WD,lSo),e(RF,iSo),e(Wr,dSo),e(Wr,BF),e(BF,Vce),e(Vce,cSo),e(BF,mSo),e(BF,HD),e(HD,fSo),e(BF,gSo),e(Wr,hSo),e(Wr,PF),e(PF,Xce),e(Xce,uSo),e(PF,pSo),e(PF,UD),e(UD,_So),e(PF,bSo),e(Ze,FSo),e(Ze,IF),e(IF,vSo),e(IF,zce),e(zce,TSo),e(IF,MSo),e(IF,Qce),e(Qce,ESo),e(Ze,CSo),M(qF,Ze,null),b(m,bBe,_),b(m,ji,_),e(ji,NF),e(NF,Wce),M(xy,Wce,null),e(ji,wSo),e(ji,Hce),e(Hce,ASo),b(m,FBe,_),b(m,Bo,_),M($y,Bo,null),e(Bo,ySo),e(Bo,Di),e(Di,LSo),e(Di,JD),e(JD,xSo),e(Di,$So),e(Di,YD),e(YD,kSo),e(Di,SSo),e(Bo,RSo),e(Bo,ky),e(ky,BSo),e(ky,Uce),e(Uce,PSo),e(ky,ISo),e(Bo,qSo),e(Bo,st),M(Sy,st,null),e(st,NSo),e(st,Jce),e(Jce,jSo),e(st,DSo),e(st,Gi),e(Gi,GSo),e(Gi,Yce),e(Yce,OSo),e(Gi,VSo),e(Gi,KD),e(KD,XSo),e(Gi,zSo),e(st,QSo),M(jF,st,null),e(Bo,WSo),e(Bo,eo),M(Ry,eo,null),e(eo,HSo),e(eo,Kce),e(Kce,USo),e(eo,JSo),e(eo,$a),e($a,YSo),e($a,Zce),e(Zce,KSo),e($a,ZSo),e($a,eme),e(eme,eRo),e($a,oRo),e($a,ome),e(ome,rRo),e($a,tRo),e(eo,aRo),e(eo,U),e(U,DF),e(DF,rme),e(rme,nRo),e(DF,sRo),e(DF,ZD),e(ZD,lRo),e(DF,iRo),e(U,dRo),e(U,GF),e(GF,tme),e(tme,cRo),e(GF,mRo),e(GF,eG),e(eG,fRo),e(GF,gRo),e(U,hRo),e(U,OF),e(OF,ame),e(ame,uRo),e(OF,pRo),e(OF,oG),e(oG,_Ro),e(OF,bRo),e(U,FRo),e(U,VF),e(VF,nme),e(nme,vRo),e(VF,TRo),e(VF,rG),e(rG,MRo),e(VF,ERo),e(U,CRo),e(U,XF),e(XF,sme),e(sme,wRo),e(XF,ARo),e(XF,tG),e(tG,yRo),e(XF,LRo),e(U,xRo),e(U,zF),e(zF,lme),e(lme,$Ro),e(zF,kRo),e(zF,aG),e(aG,SRo),e(zF,RRo),e(U,BRo),e(U,QF),e(QF,ime),e(ime,PRo),e(QF,IRo),e(QF,nG),e(nG,qRo),e(QF,NRo),e(U,jRo),e(U,WF),e(WF,dme),e(dme,DRo),e(WF,GRo),e(WF,sG),e(sG,ORo),e(WF,VRo),e(U,XRo),e(U,HF),e(HF,cme),e(cme,zRo),e(HF,QRo),e(HF,lG),e(lG,WRo),e(HF,HRo),e(U,URo),e(U,UF),e(UF,mme),e(mme,JRo),e(UF,YRo),e(UF,iG),e(iG,KRo),e(UF,ZRo),e(U,eBo),e(U,JF),e(JF,fme),e(fme,oBo),e(JF,rBo),e(JF,dG),e(dG,tBo),e(JF,aBo),e(U,nBo),e(U,YF),e(YF,gme),e(gme,sBo),e(YF,lBo),e(YF,cG),e(cG,iBo),e(YF,dBo),e(U,cBo),e(U,KF),e(KF,hme),e(hme,mBo),e(KF,fBo),e(KF,mG),e(mG,gBo),e(KF,hBo),e(U,uBo),e(U,ZF),e(ZF,ume),e(ume,pBo),e(ZF,_Bo),e(ZF,fG),e(fG,bBo),e(ZF,FBo),e(U,vBo),e(U,ev),e(ev,pme),e(pme,TBo),e(ev,MBo),e(ev,gG),e(gG,EBo),e(ev,CBo),e(U,wBo),e(U,ov),e(ov,_me),e(_me,ABo),e(ov,yBo),e(ov,hG),e(hG,LBo),e(ov,xBo),e(U,$Bo),e(U,rv),e(rv,bme),e(bme,kBo),e(rv,SBo),e(rv,uG),e(uG,RBo),e(rv,BBo),e(U,PBo),e(U,tv),e(tv,Fme),e(Fme,IBo),e(tv,qBo),e(tv,pG),e(pG,NBo),e(tv,jBo),e(U,DBo),e(U,av),e(av,vme),e(vme,GBo),e(av,OBo),e(av,_G),e(_G,VBo),e(av,XBo),e(U,zBo),e(U,nv),e(nv,Tme),e(Tme,QBo),e(nv,WBo),e(nv,bG),e(bG,HBo),e(nv,UBo),e(U,JBo),e(U,sv),e(sv,Mme),e(Mme,YBo),e(sv,KBo),e(sv,FG),e(FG,ZBo),e(sv,ePo),e(U,oPo),e(U,lv),e(lv,Eme),e(Eme,rPo),e(lv,tPo),e(lv,vG),e(vG,aPo),e(lv,nPo),e(U,sPo),e(U,iv),e(iv,Cme),e(Cme,lPo),e(iv,iPo),e(iv,TG),e(TG,dPo),e(iv,cPo),e(U,mPo),e(U,dv),e(dv,wme),e(wme,fPo),e(dv,gPo),e(dv,MG),e(MG,hPo),e(dv,uPo),e(U,pPo),e(U,cv),e(cv,Ame),e(Ame,_Po),e(cv,bPo),e(cv,EG),e(EG,FPo),e(cv,vPo),e(U,TPo),e(U,mv),e(mv,yme),e(yme,MPo),e(mv,EPo),e(mv,CG),e(CG,CPo),e(mv,wPo),e(U,APo),e(U,fv),e(fv,Lme),e(Lme,yPo),e(fv,LPo),e(fv,wG),e(wG,xPo),e(fv,$Po),e(U,kPo),e(U,gv),e(gv,xme),e(xme,SPo),e(gv,RPo),e(gv,AG),e(AG,BPo),e(gv,PPo),e(U,IPo),e(U,hv),e(hv,$me),e($me,qPo),e(hv,NPo),e(hv,yG),e(yG,jPo),e(hv,DPo),e(U,GPo),e(U,uv),e(uv,kme),e(kme,OPo),e(uv,VPo),e(uv,LG),e(LG,XPo),e(uv,zPo),e(U,QPo),e(U,pv),e(pv,Sme),e(Sme,WPo),e(pv,HPo),e(pv,xG),e(xG,UPo),e(pv,JPo),e(U,YPo),e(U,_v),e(_v,Rme),e(Rme,KPo),e(_v,ZPo),e(_v,$G),e($G,eIo),e(_v,oIo),e(U,rIo),e(U,bv),e(bv,Bme),e(Bme,tIo),e(bv,aIo),e(bv,kG),e(kG,nIo),e(bv,sIo),e(eo,lIo),e(eo,Fv),e(Fv,iIo),e(Fv,Pme),e(Pme,dIo),e(Fv,cIo),e(Fv,Ime),e(Ime,mIo),e(eo,fIo),M(vv,eo,null),b(m,vBe,_),b(m,Oi,_),e(Oi,Tv),e(Tv,qme),M(By,qme,null),e(Oi,gIo),e(Oi,Nme),e(Nme,hIo),b(m,TBe,_),b(m,Po,_),M(Py,Po,null),e(Po,uIo),e(Po,Vi),e(Vi,pIo),e(Vi,SG),e(SG,_Io),e(Vi,bIo),e(Vi,RG),e(RG,FIo),e(Vi,vIo),e(Po,TIo),e(Po,Iy),e(Iy,MIo),e(Iy,jme),e(jme,EIo),e(Iy,CIo),e(Po,wIo),e(Po,lt),M(qy,lt,null),e(lt,AIo),e(lt,Dme),e(Dme,yIo),e(lt,LIo),e(lt,Xi),e(Xi,xIo),e(Xi,Gme),e(Gme,$Io),e(Xi,kIo),e(Xi,BG),e(BG,SIo),e(Xi,RIo),e(lt,BIo),M(Mv,lt,null),e(Po,PIo),e(Po,oo),M(Ny,oo,null),e(oo,IIo),e(oo,Ome),e(Ome,qIo),e(oo,NIo),e(oo,ka),e(ka,jIo),e(ka,Vme),e(Vme,DIo),e(ka,GIo),e(ka,Xme),e(Xme,OIo),e(ka,VIo),e(ka,zme),e(zme,XIo),e(ka,zIo),e(oo,QIo),e(oo,O),e(O,Ev),e(Ev,Qme),e(Qme,WIo),e(Ev,HIo),e(Ev,PG),e(PG,UIo),e(Ev,JIo),e(O,YIo),e(O,Cv),e(Cv,Wme),e(Wme,KIo),e(Cv,ZIo),e(Cv,IG),e(IG,eqo),e(Cv,oqo),e(O,rqo),e(O,wv),e(wv,Hme),e(Hme,tqo),e(wv,aqo),e(wv,qG),e(qG,nqo),e(wv,sqo),e(O,lqo),e(O,Av),e(Av,Ume),e(Ume,iqo),e(Av,dqo),e(Av,NG),e(NG,cqo),e(Av,mqo),e(O,fqo),e(O,yv),e(yv,Jme),e(Jme,gqo),e(yv,hqo),e(yv,jG),e(jG,uqo),e(yv,pqo),e(O,_qo),e(O,Lv),e(Lv,Yme),e(Yme,bqo),e(Lv,Fqo),e(Lv,DG),e(DG,vqo),e(Lv,Tqo),e(O,Mqo),e(O,xv),e(xv,Kme),e(Kme,Eqo),e(xv,Cqo),e(xv,GG),e(GG,wqo),e(xv,Aqo),e(O,yqo),e(O,$v),e($v,Zme),e(Zme,Lqo),e($v,xqo),e($v,OG),e(OG,$qo),e($v,kqo),e(O,Sqo),e(O,kv),e(kv,efe),e(efe,Rqo),e(kv,Bqo),e(kv,VG),e(VG,Pqo),e(kv,Iqo),e(O,qqo),e(O,Sv),e(Sv,ofe),e(ofe,Nqo),e(Sv,jqo),e(Sv,XG),e(XG,Dqo),e(Sv,Gqo),e(O,Oqo),e(O,Rv),e(Rv,rfe),e(rfe,Vqo),e(Rv,Xqo),e(Rv,zG),e(zG,zqo),e(Rv,Qqo),e(O,Wqo),e(O,Bv),e(Bv,tfe),e(tfe,Hqo),e(Bv,Uqo),e(Bv,QG),e(QG,Jqo),e(Bv,Yqo),e(O,Kqo),e(O,Pv),e(Pv,afe),e(afe,Zqo),e(Pv,eNo),e(Pv,WG),e(WG,oNo),e(Pv,rNo),e(O,tNo),e(O,Iv),e(Iv,nfe),e(nfe,aNo),e(Iv,nNo),e(Iv,HG),e(HG,sNo),e(Iv,lNo),e(O,iNo),e(O,qv),e(qv,sfe),e(sfe,dNo),e(qv,cNo),e(qv,UG),e(UG,mNo),e(qv,fNo),e(O,gNo),e(O,Nv),e(Nv,lfe),e(lfe,hNo),e(Nv,uNo),e(Nv,JG),e(JG,pNo),e(Nv,_No),e(O,bNo),e(O,jv),e(jv,ife),e(ife,FNo),e(jv,vNo),e(jv,YG),e(YG,TNo),e(jv,MNo),e(O,ENo),e(O,Dv),e(Dv,dfe),e(dfe,CNo),e(Dv,wNo),e(Dv,KG),e(KG,ANo),e(Dv,yNo),e(O,LNo),e(O,Gv),e(Gv,cfe),e(cfe,xNo),e(Gv,$No),e(Gv,ZG),e(ZG,kNo),e(Gv,SNo),e(O,RNo),e(O,Ov),e(Ov,mfe),e(mfe,BNo),e(Ov,PNo),e(Ov,eO),e(eO,INo),e(Ov,qNo),e(O,NNo),e(O,Vv),e(Vv,ffe),e(ffe,jNo),e(Vv,DNo),e(Vv,oO),e(oO,GNo),e(Vv,ONo),e(O,VNo),e(O,Xv),e(Xv,gfe),e(gfe,XNo),e(Xv,zNo),e(Xv,rO),e(rO,QNo),e(Xv,WNo),e(O,HNo),e(O,zv),e(zv,hfe),e(hfe,UNo),e(zv,JNo),e(zv,tO),e(tO,YNo),e(zv,KNo),e(O,ZNo),e(O,Qv),e(Qv,ufe),e(ufe,ejo),e(Qv,ojo),e(Qv,aO),e(aO,rjo),e(Qv,tjo),e(O,ajo),e(O,Wv),e(Wv,pfe),e(pfe,njo),e(Wv,sjo),e(Wv,nO),e(nO,ljo),e(Wv,ijo),e(O,djo),e(O,Hv),e(Hv,_fe),e(_fe,cjo),e(Hv,mjo),e(Hv,sO),e(sO,fjo),e(Hv,gjo),e(O,hjo),e(O,Uv),e(Uv,bfe),e(bfe,ujo),e(Uv,pjo),e(Uv,lO),e(lO,_jo),e(Uv,bjo),e(O,Fjo),e(O,Jv),e(Jv,Ffe),e(Ffe,vjo),e(Jv,Tjo),e(Jv,iO),e(iO,Mjo),e(Jv,Ejo),e(O,Cjo),e(O,Yv),e(Yv,vfe),e(vfe,wjo),e(Yv,Ajo),e(Yv,dO),e(dO,yjo),e(Yv,Ljo),e(O,xjo),e(O,Kv),e(Kv,Tfe),e(Tfe,$jo),e(Kv,kjo),e(Kv,cO),e(cO,Sjo),e(Kv,Rjo),e(O,Bjo),e(O,Zv),e(Zv,Mfe),e(Mfe,Pjo),e(Zv,Ijo),e(Zv,mO),e(mO,qjo),e(Zv,Njo),e(O,jjo),e(O,e1),e(e1,Efe),e(Efe,Djo),e(e1,Gjo),e(e1,fO),e(fO,Ojo),e(e1,Vjo),e(O,Xjo),e(O,o1),e(o1,Cfe),e(Cfe,zjo),e(o1,Qjo),e(o1,gO),e(gO,Wjo),e(o1,Hjo),e(O,Ujo),e(O,r1),e(r1,wfe),e(wfe,Jjo),e(r1,Yjo),e(r1,hO),e(hO,Kjo),e(r1,Zjo),e(O,eDo),e(O,t1),e(t1,Afe),e(Afe,oDo),e(t1,rDo),e(t1,uO),e(uO,tDo),e(t1,aDo),e(O,nDo),e(O,a1),e(a1,yfe),e(yfe,sDo),e(a1,lDo),e(a1,pO),e(pO,iDo),e(a1,dDo),e(O,cDo),e(O,n1),e(n1,Lfe),e(Lfe,mDo),e(n1,fDo),e(n1,_O),e(_O,gDo),e(n1,hDo),e(O,uDo),e(O,s1),e(s1,xfe),e(xfe,pDo),e(s1,_Do),e(s1,bO),e(bO,bDo),e(s1,FDo),e(O,vDo),e(O,l1),e(l1,$fe),e($fe,TDo),e(l1,MDo),e(l1,FO),e(FO,EDo),e(l1,CDo),e(oo,wDo),e(oo,i1),e(i1,ADo),e(i1,kfe),e(kfe,yDo),e(i1,LDo),e(i1,Sfe),e(Sfe,xDo),e(oo,$Do),M(d1,oo,null),b(m,MBe,_),b(m,zi,_),e(zi,c1),e(c1,Rfe),M(jy,Rfe,null),e(zi,kDo),e(zi,Bfe),e(Bfe,SDo),b(m,EBe,_),b(m,Io,_),M(Dy,Io,null),e(Io,RDo),e(Io,Qi),e(Qi,BDo),e(Qi,vO),e(vO,PDo),e(Qi,IDo),e(Qi,TO),e(TO,qDo),e(Qi,NDo),e(Io,jDo),e(Io,Gy),e(Gy,DDo),e(Gy,Pfe),e(Pfe,GDo),e(Gy,ODo),e(Io,VDo),e(Io,it),M(Oy,it,null),e(it,XDo),e(it,Ife),e(Ife,zDo),e(it,QDo),e(it,Wi),e(Wi,WDo),e(Wi,qfe),e(qfe,HDo),e(Wi,UDo),e(Wi,MO),e(MO,JDo),e(Wi,YDo),e(it,KDo),M(m1,it,null),e(Io,ZDo),e(Io,ro),M(Vy,ro,null),e(ro,eGo),e(ro,Nfe),e(Nfe,oGo),e(ro,rGo),e(ro,Sa),e(Sa,tGo),e(Sa,jfe),e(jfe,aGo),e(Sa,nGo),e(Sa,Dfe),e(Dfe,sGo),e(Sa,lGo),e(Sa,Gfe),e(Gfe,iGo),e(Sa,dGo),e(ro,cGo),e(ro,Ofe),e(Ofe,f1),e(f1,Vfe),e(Vfe,mGo),e(f1,fGo),e(f1,EO),e(EO,gGo),e(f1,hGo),e(ro,uGo),e(ro,g1),e(g1,pGo),e(g1,Xfe),e(Xfe,_Go),e(g1,bGo),e(g1,zfe),e(zfe,FGo),e(ro,vGo),M(h1,ro,null),b(m,CBe,_),b(m,Hi,_),e(Hi,u1),e(u1,Qfe),M(Xy,Qfe,null),e(Hi,TGo),e(Hi,Wfe),e(Wfe,MGo),b(m,wBe,_),b(m,qo,_),M(zy,qo,null),e(qo,EGo),e(qo,Ui),e(Ui,CGo),e(Ui,CO),e(CO,wGo),e(Ui,AGo),e(Ui,wO),e(wO,yGo),e(Ui,LGo),e(qo,xGo),e(qo,Qy),e(Qy,$Go),e(Qy,Hfe),e(Hfe,kGo),e(Qy,SGo),e(qo,RGo),e(qo,dt),M(Wy,dt,null),e(dt,BGo),e(dt,Ufe),e(Ufe,PGo),e(dt,IGo),e(dt,Ji),e(Ji,qGo),e(Ji,Jfe),e(Jfe,NGo),e(Ji,jGo),e(Ji,AO),e(AO,DGo),e(Ji,GGo),e(dt,OGo),M(p1,dt,null),e(qo,VGo),e(qo,to),M(Hy,to,null),e(to,XGo),e(to,Yfe),e(Yfe,zGo),e(to,QGo),e(to,Ra),e(Ra,WGo),e(Ra,Kfe),e(Kfe,HGo),e(Ra,UGo),e(Ra,Zfe),e(Zfe,JGo),e(Ra,YGo),e(Ra,ege),e(ege,KGo),e(Ra,ZGo),e(to,eOo),e(to,Fe),e(Fe,_1),e(_1,oge),e(oge,oOo),e(_1,rOo),e(_1,yO),e(yO,tOo),e(_1,aOo),e(Fe,nOo),e(Fe,b1),e(b1,rge),e(rge,sOo),e(b1,lOo),e(b1,LO),e(LO,iOo),e(b1,dOo),e(Fe,cOo),e(Fe,F1),e(F1,tge),e(tge,mOo),e(F1,fOo),e(F1,xO),e(xO,gOo),e(F1,hOo),e(Fe,uOo),e(Fe,Ls),e(Ls,age),e(age,pOo),e(Ls,_Oo),e(Ls,$O),e($O,bOo),e(Ls,FOo),e(Ls,kO),e(kO,vOo),e(Ls,TOo),e(Fe,MOo),e(Fe,v1),e(v1,nge),e(nge,EOo),e(v1,COo),e(v1,SO),e(SO,wOo),e(v1,AOo),e(Fe,yOo),e(Fe,ct),e(ct,sge),e(sge,LOo),e(ct,xOo),e(ct,RO),e(RO,$Oo),e(ct,kOo),e(ct,BO),e(BO,SOo),e(ct,ROo),e(ct,PO),e(PO,BOo),e(ct,POo),e(Fe,IOo),e(Fe,T1),e(T1,lge),e(lge,qOo),e(T1,NOo),e(T1,IO),e(IO,jOo),e(T1,DOo),e(Fe,GOo),e(Fe,M1),e(M1,ige),e(ige,OOo),e(M1,VOo),e(M1,qO),e(qO,XOo),e(M1,zOo),e(Fe,QOo),e(Fe,E1),e(E1,dge),e(dge,WOo),e(E1,HOo),e(E1,NO),e(NO,UOo),e(E1,JOo),e(Fe,YOo),e(Fe,C1),e(C1,cge),e(cge,KOo),e(C1,ZOo),e(C1,jO),e(jO,eVo),e(C1,oVo),e(Fe,rVo),e(Fe,w1),e(w1,mge),e(mge,tVo),e(w1,aVo),e(w1,DO),e(DO,nVo),e(w1,sVo),e(Fe,lVo),e(Fe,A1),e(A1,fge),e(fge,iVo),e(A1,dVo),e(A1,GO),e(GO,cVo),e(A1,mVo),e(Fe,fVo),e(Fe,y1),e(y1,gge),e(gge,gVo),e(y1,hVo),e(y1,OO),e(OO,uVo),e(y1,pVo),e(to,_Vo),e(to,L1),e(L1,bVo),e(L1,hge),e(hge,FVo),e(L1,vVo),e(L1,uge),e(uge,TVo),e(to,MVo),M(x1,to,null),b(m,ABe,_),b(m,Yi,_),e(Yi,$1),e($1,pge),M(Uy,pge,null),e(Yi,EVo),e(Yi,_ge),e(_ge,CVo),b(m,yBe,_),b(m,No,_),M(Jy,No,null),e(No,wVo),e(No,Ki),e(Ki,AVo),e(Ki,VO),e(VO,yVo),e(Ki,LVo),e(Ki,XO),e(XO,xVo),e(Ki,$Vo),e(No,kVo),e(No,Yy),e(Yy,SVo),e(Yy,bge),e(bge,RVo),e(Yy,BVo),e(No,PVo),e(No,mt),M(Ky,mt,null),e(mt,IVo),e(mt,Fge),e(Fge,qVo),e(mt,NVo),e(mt,Zi),e(Zi,jVo),e(Zi,vge),e(vge,DVo),e(Zi,GVo),e(Zi,zO),e(zO,OVo),e(Zi,VVo),e(mt,XVo),M(k1,mt,null),e(No,zVo),e(No,ao),M(Zy,ao,null),e(ao,QVo),e(ao,Tge),e(Tge,WVo),e(ao,HVo),e(ao,Ba),e(Ba,UVo),e(Ba,Mge),e(Mge,JVo),e(Ba,YVo),e(Ba,Ege),e(Ege,KVo),e(Ba,ZVo),e(Ba,Cge),e(Cge,eXo),e(Ba,oXo),e(ao,rXo),e(ao,wge),e(wge,S1),e(S1,Age),e(Age,tXo),e(S1,aXo),e(S1,QO),e(QO,nXo),e(S1,sXo),e(ao,lXo),e(ao,R1),e(R1,iXo),e(R1,yge),e(yge,dXo),e(R1,cXo),e(R1,Lge),e(Lge,mXo),e(ao,fXo),M(B1,ao,null),b(m,LBe,_),b(m,ed,_),e(ed,P1),e(P1,xge),M(eL,xge,null),e(ed,gXo),e(ed,$ge),e($ge,hXo),b(m,xBe,_),b(m,jo,_),M(oL,jo,null),e(jo,uXo),e(jo,od),e(od,pXo),e(od,WO),e(WO,_Xo),e(od,bXo),e(od,HO),e(HO,FXo),e(od,vXo),e(jo,TXo),e(jo,rL),e(rL,MXo),e(rL,kge),e(kge,EXo),e(rL,CXo),e(jo,wXo),e(jo,ft),M(tL,ft,null),e(ft,AXo),e(ft,Sge),e(Sge,yXo),e(ft,LXo),e(ft,rd),e(rd,xXo),e(rd,Rge),e(Rge,$Xo),e(rd,kXo),e(rd,UO),e(UO,SXo),e(rd,RXo),e(ft,BXo),M(I1,ft,null),e(jo,PXo),e(jo,no),M(aL,no,null),e(no,IXo),e(no,Bge),e(Bge,qXo),e(no,NXo),e(no,Pa),e(Pa,jXo),e(Pa,Pge),e(Pge,DXo),e(Pa,GXo),e(Pa,Ige),e(Ige,OXo),e(Pa,VXo),e(Pa,qge),e(qge,XXo),e(Pa,zXo),e(no,QXo),e(no,qe),e(qe,q1),e(q1,Nge),e(Nge,WXo),e(q1,HXo),e(q1,JO),e(JO,UXo),e(q1,JXo),e(qe,YXo),e(qe,N1),e(N1,jge),e(jge,KXo),e(N1,ZXo),e(N1,YO),e(YO,ezo),e(N1,ozo),e(qe,rzo),e(qe,j1),e(j1,Dge),e(Dge,tzo),e(j1,azo),e(j1,KO),e(KO,nzo),e(j1,szo),e(qe,lzo),e(qe,D1),e(D1,Gge),e(Gge,izo),e(D1,dzo),e(D1,ZO),e(ZO,czo),e(D1,mzo),e(qe,fzo),e(qe,G1),e(G1,Oge),e(Oge,gzo),e(G1,hzo),e(G1,eV),e(eV,uzo),e(G1,pzo),e(qe,_zo),e(qe,O1),e(O1,Vge),e(Vge,bzo),e(O1,Fzo),e(O1,oV),e(oV,vzo),e(O1,Tzo),e(qe,Mzo),e(qe,V1),e(V1,Xge),e(Xge,Ezo),e(V1,Czo),e(V1,rV),e(rV,wzo),e(V1,Azo),e(qe,yzo),e(qe,X1),e(X1,zge),e(zge,Lzo),e(X1,xzo),e(X1,tV),e(tV,$zo),e(X1,kzo),e(no,Szo),e(no,z1),e(z1,Rzo),e(z1,Qge),e(Qge,Bzo),e(z1,Pzo),e(z1,Wge),e(Wge,Izo),e(no,qzo),M(Q1,no,null),b(m,$Be,_),b(m,td,_),e(td,W1),e(W1,Hge),M(nL,Hge,null),e(td,Nzo),e(td,Uge),e(Uge,jzo),b(m,kBe,_),b(m,Do,_),M(sL,Do,null),e(Do,Dzo),e(Do,ad),e(ad,Gzo),e(ad,aV),e(aV,Ozo),e(ad,Vzo),e(ad,nV),e(nV,Xzo),e(ad,zzo),e(Do,Qzo),e(Do,lL),e(lL,Wzo),e(lL,Jge),e(Jge,Hzo),e(lL,Uzo),e(Do,Jzo),e(Do,gt),M(iL,gt,null),e(gt,Yzo),e(gt,Yge),e(Yge,Kzo),e(gt,Zzo),e(gt,nd),e(nd,eQo),e(nd,Kge),e(Kge,oQo),e(nd,rQo),e(nd,sV),e(sV,tQo),e(nd,aQo),e(gt,nQo),M(H1,gt,null),e(Do,sQo),e(Do,so),M(dL,so,null),e(so,lQo),e(so,Zge),e(Zge,iQo),e(so,dQo),e(so,Ia),e(Ia,cQo),e(Ia,ehe),e(ehe,mQo),e(Ia,fQo),e(Ia,ohe),e(ohe,gQo),e(Ia,hQo),e(Ia,rhe),e(rhe,uQo),e(Ia,pQo),e(so,_Qo),e(so,qa),e(qa,U1),e(U1,the),e(the,bQo),e(U1,FQo),e(U1,lV),e(lV,vQo),e(U1,TQo),e(qa,MQo),e(qa,J1),e(J1,ahe),e(ahe,EQo),e(J1,CQo),e(J1,iV),e(iV,wQo),e(J1,AQo),e(qa,yQo),e(qa,Y1),e(Y1,nhe),e(nhe,LQo),e(Y1,xQo),e(Y1,dV),e(dV,$Qo),e(Y1,kQo),e(qa,SQo),e(qa,K1),e(K1,she),e(she,RQo),e(K1,BQo),e(K1,cV),e(cV,PQo),e(K1,IQo),e(so,qQo),e(so,Z1),e(Z1,NQo),e(Z1,lhe),e(lhe,jQo),e(Z1,DQo),e(Z1,ihe),e(ihe,GQo),e(so,OQo),M(eT,so,null),b(m,SBe,_),b(m,sd,_),e(sd,oT),e(oT,dhe),M(cL,dhe,null),e(sd,VQo),e(sd,che),e(che,XQo),b(m,RBe,_),b(m,Go,_),M(mL,Go,null),e(Go,zQo),e(Go,ld),e(ld,QQo),e(ld,mV),e(mV,WQo),e(ld,HQo),e(ld,fV),e(fV,UQo),e(ld,JQo),e(Go,YQo),e(Go,fL),e(fL,KQo),e(fL,mhe),e(mhe,ZQo),e(fL,eWo),e(Go,oWo),e(Go,ht),M(gL,ht,null),e(ht,rWo),e(ht,fhe),e(fhe,tWo),e(ht,aWo),e(ht,id),e(id,nWo),e(id,ghe),e(ghe,sWo),e(id,lWo),e(id,gV),e(gV,iWo),e(id,dWo),e(ht,cWo),M(rT,ht,null),e(Go,mWo),e(Go,lo),M(hL,lo,null),e(lo,fWo),e(lo,hhe),e(hhe,gWo),e(lo,hWo),e(lo,Na),e(Na,uWo),e(Na,uhe),e(uhe,pWo),e(Na,_Wo),e(Na,phe),e(phe,bWo),e(Na,FWo),e(Na,_he),e(_he,vWo),e(Na,TWo),e(lo,MWo),e(lo,Ne),e(Ne,tT),e(tT,bhe),e(bhe,EWo),e(tT,CWo),e(tT,hV),e(hV,wWo),e(tT,AWo),e(Ne,yWo),e(Ne,aT),e(aT,Fhe),e(Fhe,LWo),e(aT,xWo),e(aT,uV),e(uV,$Wo),e(aT,kWo),e(Ne,SWo),e(Ne,nT),e(nT,vhe),e(vhe,RWo),e(nT,BWo),e(nT,pV),e(pV,PWo),e(nT,IWo),e(Ne,qWo),e(Ne,sT),e(sT,The),e(The,NWo),e(sT,jWo),e(sT,_V),e(_V,DWo),e(sT,GWo),e(Ne,OWo),e(Ne,lT),e(lT,Mhe),e(Mhe,VWo),e(lT,XWo),e(lT,bV),e(bV,zWo),e(lT,QWo),e(Ne,WWo),e(Ne,iT),e(iT,Ehe),e(Ehe,HWo),e(iT,UWo),e(iT,FV),e(FV,JWo),e(iT,YWo),e(Ne,KWo),e(Ne,dT),e(dT,Che),e(Che,ZWo),e(dT,eHo),e(dT,vV),e(vV,oHo),e(dT,rHo),e(Ne,tHo),e(Ne,cT),e(cT,whe),e(whe,aHo),e(cT,nHo),e(cT,TV),e(TV,sHo),e(cT,lHo),e(lo,iHo),e(lo,mT),e(mT,dHo),e(mT,Ahe),e(Ahe,cHo),e(mT,mHo),e(mT,yhe),e(yhe,fHo),e(lo,gHo),M(fT,lo,null),b(m,BBe,_),b(m,dd,_),e(dd,gT),e(gT,Lhe),M(uL,Lhe,null),e(dd,hHo),e(dd,xhe),e(xhe,uHo),b(m,PBe,_),b(m,Oo,_),M(pL,Oo,null),e(Oo,pHo),e(Oo,cd),e(cd,_Ho),e(cd,MV),e(MV,bHo),e(cd,FHo),e(cd,EV),e(EV,vHo),e(cd,THo),e(Oo,MHo),e(Oo,_L),e(_L,EHo),e(_L,$he),e($he,CHo),e(_L,wHo),e(Oo,AHo),e(Oo,ut),M(bL,ut,null),e(ut,yHo),e(ut,khe),e(khe,LHo),e(ut,xHo),e(ut,md),e(md,$Ho),e(md,She),e(She,kHo),e(md,SHo),e(md,CV),e(CV,RHo),e(md,BHo),e(ut,PHo),M(hT,ut,null),e(Oo,IHo),e(Oo,io),M(FL,io,null),e(io,qHo),e(io,Rhe),e(Rhe,NHo),e(io,jHo),e(io,ja),e(ja,DHo),e(ja,Bhe),e(Bhe,GHo),e(ja,OHo),e(ja,Phe),e(Phe,VHo),e(ja,XHo),e(ja,Ihe),e(Ihe,zHo),e(ja,QHo),e(io,WHo),e(io,vL),e(vL,uT),e(uT,qhe),e(qhe,HHo),e(uT,UHo),e(uT,wV),e(wV,JHo),e(uT,YHo),e(vL,KHo),e(vL,pT),e(pT,Nhe),e(Nhe,ZHo),e(pT,eUo),e(pT,AV),e(AV,oUo),e(pT,rUo),e(io,tUo),e(io,_T),e(_T,aUo),e(_T,jhe),e(jhe,nUo),e(_T,sUo),e(_T,Dhe),e(Dhe,lUo),e(io,iUo),M(bT,io,null),b(m,IBe,_),b(m,fd,_),e(fd,FT),e(FT,Ghe),M(TL,Ghe,null),e(fd,dUo),e(fd,Ohe),e(Ohe,cUo),b(m,qBe,_),b(m,Vo,_),M(ML,Vo,null),e(Vo,mUo),e(Vo,gd),e(gd,fUo),e(gd,yV),e(yV,gUo),e(gd,hUo),e(gd,LV),e(LV,uUo),e(gd,pUo),e(Vo,_Uo),e(Vo,EL),e(EL,bUo),e(EL,Vhe),e(Vhe,FUo),e(EL,vUo),e(Vo,TUo),e(Vo,pt),M(CL,pt,null),e(pt,MUo),e(pt,Xhe),e(Xhe,EUo),e(pt,CUo),e(pt,hd),e(hd,wUo),e(hd,zhe),e(zhe,AUo),e(hd,yUo),e(hd,xV),e(xV,LUo),e(hd,xUo),e(pt,$Uo),M(vT,pt,null),e(Vo,kUo),e(Vo,co),M(wL,co,null),e(co,SUo),e(co,Qhe),e(Qhe,RUo),e(co,BUo),e(co,Da),e(Da,PUo),e(Da,Whe),e(Whe,IUo),e(Da,qUo),e(Da,Hhe),e(Hhe,NUo),e(Da,jUo),e(Da,Uhe),e(Uhe,DUo),e(Da,GUo),e(co,OUo),e(co,Ga),e(Ga,TT),e(TT,Jhe),e(Jhe,VUo),e(TT,XUo),e(TT,$V),e($V,zUo),e(TT,QUo),e(Ga,WUo),e(Ga,MT),e(MT,Yhe),e(Yhe,HUo),e(MT,UUo),e(MT,kV),e(kV,JUo),e(MT,YUo),e(Ga,KUo),e(Ga,ET),e(ET,Khe),e(Khe,ZUo),e(ET,eJo),e(ET,SV),e(SV,oJo),e(ET,rJo),e(Ga,tJo),e(Ga,CT),e(CT,Zhe),e(Zhe,aJo),e(CT,nJo),e(CT,RV),e(RV,sJo),e(CT,lJo),e(co,iJo),e(co,wT),e(wT,dJo),e(wT,eue),e(eue,cJo),e(wT,mJo),e(wT,oue),e(oue,fJo),e(co,gJo),M(AT,co,null),b(m,NBe,_),b(m,ud,_),e(ud,yT),e(yT,rue),M(AL,rue,null),e(ud,hJo),e(ud,tue),e(tue,uJo),b(m,jBe,_),b(m,Xo,_),M(yL,Xo,null),e(Xo,pJo),e(Xo,pd),e(pd,_Jo),e(pd,BV),e(BV,bJo),e(pd,FJo),e(pd,PV),e(PV,vJo),e(pd,TJo),e(Xo,MJo),e(Xo,LL),e(LL,EJo),e(LL,aue),e(aue,CJo),e(LL,wJo),e(Xo,AJo),e(Xo,_t),M(xL,_t,null),e(_t,yJo),e(_t,nue),e(nue,LJo),e(_t,xJo),e(_t,_d),e(_d,$Jo),e(_d,sue),e(sue,kJo),e(_d,SJo),e(_d,IV),e(IV,RJo),e(_d,BJo),e(_t,PJo),M(LT,_t,null),e(Xo,IJo),e(Xo,mo),M($L,mo,null),e(mo,qJo),e(mo,lue),e(lue,NJo),e(mo,jJo),e(mo,Oa),e(Oa,DJo),e(Oa,iue),e(iue,GJo),e(Oa,OJo),e(Oa,due),e(due,VJo),e(Oa,XJo),e(Oa,cue),e(cue,zJo),e(Oa,QJo),e(mo,WJo),e(mo,bd),e(bd,xT),e(xT,mue),e(mue,HJo),e(xT,UJo),e(xT,qV),e(qV,JJo),e(xT,YJo),e(bd,KJo),e(bd,$T),e($T,fue),e(fue,ZJo),e($T,eYo),e($T,NV),e(NV,oYo),e($T,rYo),e(bd,tYo),e(bd,kT),e(kT,gue),e(gue,aYo),e(kT,nYo),e(kT,jV),e(jV,sYo),e(kT,lYo),e(mo,iYo),e(mo,ST),e(ST,dYo),e(ST,hue),e(hue,cYo),e(ST,mYo),e(ST,uue),e(uue,fYo),e(mo,gYo),M(RT,mo,null),b(m,DBe,_),b(m,Fd,_),e(Fd,BT),e(BT,pue),M(kL,pue,null),e(Fd,hYo),e(Fd,_ue),e(_ue,uYo),b(m,GBe,_),b(m,zo,_),M(SL,zo,null),e(zo,pYo),e(zo,vd),e(vd,_Yo),e(vd,DV),e(DV,bYo),e(vd,FYo),e(vd,GV),e(GV,vYo),e(vd,TYo),e(zo,MYo),e(zo,RL),e(RL,EYo),e(RL,bue),e(bue,CYo),e(RL,wYo),e(zo,AYo),e(zo,bt),M(BL,bt,null),e(bt,yYo),e(bt,Fue),e(Fue,LYo),e(bt,xYo),e(bt,Td),e(Td,$Yo),e(Td,vue),e(vue,kYo),e(Td,SYo),e(Td,OV),e(OV,RYo),e(Td,BYo),e(bt,PYo),M(PT,bt,null),e(zo,IYo),e(zo,fo),M(PL,fo,null),e(fo,qYo),e(fo,Tue),e(Tue,NYo),e(fo,jYo),e(fo,Va),e(Va,DYo),e(Va,Mue),e(Mue,GYo),e(Va,OYo),e(Va,Eue),e(Eue,VYo),e(Va,XYo),e(Va,Cue),e(Cue,zYo),e(Va,QYo),e(fo,WYo),e(fo,IL),e(IL,IT),e(IT,wue),e(wue,HYo),e(IT,UYo),e(IT,VV),e(VV,JYo),e(IT,YYo),e(IL,KYo),e(IL,qT),e(qT,Aue),e(Aue,ZYo),e(qT,eKo),e(qT,XV),e(XV,oKo),e(qT,rKo),e(fo,tKo),e(fo,NT),e(NT,aKo),e(NT,yue),e(yue,nKo),e(NT,sKo),e(NT,Lue),e(Lue,lKo),e(fo,iKo),M(jT,fo,null),b(m,OBe,_),b(m,Md,_),e(Md,DT),e(DT,xue),M(qL,xue,null),e(Md,dKo),e(Md,$ue),e($ue,cKo),b(m,VBe,_),b(m,Qo,_),M(NL,Qo,null),e(Qo,mKo),e(Qo,Ed),e(Ed,fKo),e(Ed,zV),e(zV,gKo),e(Ed,hKo),e(Ed,QV),e(QV,uKo),e(Ed,pKo),e(Qo,_Ko),e(Qo,jL),e(jL,bKo),e(jL,kue),e(kue,FKo),e(jL,vKo),e(Qo,TKo),e(Qo,Ft),M(DL,Ft,null),e(Ft,MKo),e(Ft,Sue),e(Sue,EKo),e(Ft,CKo),e(Ft,Cd),e(Cd,wKo),e(Cd,Rue),e(Rue,AKo),e(Cd,yKo),e(Cd,WV),e(WV,LKo),e(Cd,xKo),e(Ft,$Ko),M(GT,Ft,null),e(Qo,kKo),e(Qo,go),M(GL,go,null),e(go,SKo),e(go,Bue),e(Bue,RKo),e(go,BKo),e(go,Xa),e(Xa,PKo),e(Xa,Pue),e(Pue,IKo),e(Xa,qKo),e(Xa,Iue),e(Iue,NKo),e(Xa,jKo),e(Xa,que),e(que,DKo),e(Xa,GKo),e(go,OKo),e(go,Nue),e(Nue,OT),e(OT,jue),e(jue,VKo),e(OT,XKo),e(OT,HV),e(HV,zKo),e(OT,QKo),e(go,WKo),e(go,VT),e(VT,HKo),e(VT,Due),e(Due,UKo),e(VT,JKo),e(VT,Gue),e(Gue,YKo),e(go,KKo),M(XT,go,null),b(m,XBe,_),b(m,wd,_),e(wd,zT),e(zT,Oue),M(OL,Oue,null),e(wd,ZKo),e(wd,Vue),e(Vue,eZo),b(m,zBe,_),b(m,Wo,_),M(VL,Wo,null),e(Wo,oZo),e(Wo,Ad),e(Ad,rZo),e(Ad,UV),e(UV,tZo),e(Ad,aZo),e(Ad,JV),e(JV,nZo),e(Ad,sZo),e(Wo,lZo),e(Wo,XL),e(XL,iZo),e(XL,Xue),e(Xue,dZo),e(XL,cZo),e(Wo,mZo),e(Wo,vt),M(zL,vt,null),e(vt,fZo),e(vt,zue),e(zue,gZo),e(vt,hZo),e(vt,yd),e(yd,uZo),e(yd,Que),e(Que,pZo),e(yd,_Zo),e(yd,YV),e(YV,bZo),e(yd,FZo),e(vt,vZo),M(QT,vt,null),e(Wo,TZo),e(Wo,ho),M(QL,ho,null),e(ho,MZo),e(ho,Wue),e(Wue,EZo),e(ho,CZo),e(ho,za),e(za,wZo),e(za,Hue),e(Hue,AZo),e(za,yZo),e(za,Uue),e(Uue,LZo),e(za,xZo),e(za,Jue),e(Jue,$Zo),e(za,kZo),e(ho,SZo),e(ho,Qa),e(Qa,WT),e(WT,Yue),e(Yue,RZo),e(WT,BZo),e(WT,KV),e(KV,PZo),e(WT,IZo),e(Qa,qZo),e(Qa,HT),e(HT,Kue),e(Kue,NZo),e(HT,jZo),e(HT,ZV),e(ZV,DZo),e(HT,GZo),e(Qa,OZo),e(Qa,UT),e(UT,Zue),e(Zue,VZo),e(UT,XZo),e(UT,eX),e(eX,zZo),e(UT,QZo),e(Qa,WZo),e(Qa,JT),e(JT,epe),e(epe,HZo),e(JT,UZo),e(JT,oX),e(oX,JZo),e(JT,YZo),e(ho,KZo),e(ho,YT),e(YT,ZZo),e(YT,ope),e(ope,eer),e(YT,oer),e(YT,rpe),e(rpe,rer),e(ho,ter),M(KT,ho,null),b(m,QBe,_),b(m,Ld,_),e(Ld,ZT),e(ZT,tpe),M(WL,tpe,null),e(Ld,aer),e(Ld,ape),e(ape,ner),b(m,WBe,_),b(m,Ho,_),M(HL,Ho,null),e(Ho,ser),e(Ho,xd),e(xd,ler),e(xd,rX),e(rX,ier),e(xd,der),e(xd,tX),e(tX,cer),e(xd,mer),e(Ho,fer),e(Ho,UL),e(UL,ger),e(UL,npe),e(npe,her),e(UL,uer),e(Ho,per),e(Ho,Tt),M(JL,Tt,null),e(Tt,_er),e(Tt,spe),e(spe,ber),e(Tt,Fer),e(Tt,$d),e($d,ver),e($d,lpe),e(lpe,Ter),e($d,Mer),e($d,aX),e(aX,Eer),e($d,Cer),e(Tt,wer),M(eM,Tt,null),e(Ho,Aer),e(Ho,uo),M(YL,uo,null),e(uo,yer),e(uo,ipe),e(ipe,Ler),e(uo,xer),e(uo,Wa),e(Wa,$er),e(Wa,dpe),e(dpe,ker),e(Wa,Ser),e(Wa,cpe),e(cpe,Rer),e(Wa,Ber),e(Wa,mpe),e(mpe,Per),e(Wa,Ier),e(uo,qer),e(uo,fpe),e(fpe,oM),e(oM,gpe),e(gpe,Ner),e(oM,jer),e(oM,nX),e(nX,Der),e(oM,Ger),e(uo,Oer),e(uo,rM),e(rM,Ver),e(rM,hpe),e(hpe,Xer),e(rM,zer),e(rM,upe),e(upe,Qer),e(uo,Wer),M(tM,uo,null),b(m,HBe,_),b(m,kd,_),e(kd,aM),e(aM,ppe),M(KL,ppe,null),e(kd,Her),e(kd,_pe),e(_pe,Uer),b(m,UBe,_),b(m,Uo,_),M(ZL,Uo,null),e(Uo,Jer),e(Uo,Sd),e(Sd,Yer),e(Sd,sX),e(sX,Ker),e(Sd,Zer),e(Sd,lX),e(lX,eor),e(Sd,oor),e(Uo,ror),e(Uo,e8),e(e8,tor),e(e8,bpe),e(bpe,aor),e(e8,nor),e(Uo,sor),e(Uo,Mt),M(o8,Mt,null),e(Mt,lor),e(Mt,Fpe),e(Fpe,ior),e(Mt,dor),e(Mt,Rd),e(Rd,cor),e(Rd,vpe),e(vpe,mor),e(Rd,gor),e(Rd,iX),e(iX,hor),e(Rd,uor),e(Mt,por),M(nM,Mt,null),e(Uo,_or),e(Uo,Mr),M(r8,Mr,null),e(Mr,bor),e(Mr,Tpe),e(Tpe,For),e(Mr,vor),e(Mr,Ha),e(Ha,Tor),e(Ha,Mpe),e(Mpe,Mor),e(Ha,Eor),e(Ha,Epe),e(Epe,Cor),e(Ha,wor),e(Ha,Cpe),e(Cpe,Aor),e(Ha,yor),e(Mr,Lor),e(Mr,j),e(j,sM),e(sM,wpe),e(wpe,xor),e(sM,$or),e(sM,dX),e(dX,kor),e(sM,Sor),e(j,Ror),e(j,lM),e(lM,Ape),e(Ape,Bor),e(lM,Por),e(lM,cX),e(cX,Ior),e(lM,qor),e(j,Nor),e(j,iM),e(iM,ype),e(ype,jor),e(iM,Dor),e(iM,mX),e(mX,Gor),e(iM,Oor),e(j,Vor),e(j,dM),e(dM,Lpe),e(Lpe,Xor),e(dM,zor),e(dM,fX),e(fX,Qor),e(dM,Wor),e(j,Hor),e(j,cM),e(cM,xpe),e(xpe,Uor),e(cM,Jor),e(cM,gX),e(gX,Yor),e(cM,Kor),e(j,Zor),e(j,mM),e(mM,$pe),e($pe,err),e(mM,orr),e(mM,hX),e(hX,rrr),e(mM,trr),e(j,arr),e(j,fM),e(fM,kpe),e(kpe,nrr),e(fM,srr),e(fM,uX),e(uX,lrr),e(fM,irr),e(j,drr),e(j,gM),e(gM,Spe),e(Spe,crr),e(gM,mrr),e(gM,pX),e(pX,frr),e(gM,grr),e(j,hrr),e(j,hM),e(hM,Rpe),e(Rpe,urr),e(hM,prr),e(hM,_X),e(_X,_rr),e(hM,brr),e(j,Frr),e(j,uM),e(uM,Bpe),e(Bpe,vrr),e(uM,Trr),e(uM,bX),e(bX,Mrr),e(uM,Err),e(j,Crr),e(j,pM),e(pM,Ppe),e(Ppe,wrr),e(pM,Arr),e(pM,FX),e(FX,yrr),e(pM,Lrr),e(j,xrr),e(j,_M),e(_M,Ipe),e(Ipe,$rr),e(_M,krr),e(_M,vX),e(vX,Srr),e(_M,Rrr),e(j,Brr),e(j,bM),e(bM,qpe),e(qpe,Prr),e(bM,Irr),e(bM,TX),e(TX,qrr),e(bM,Nrr),e(j,jrr),e(j,FM),e(FM,Npe),e(Npe,Drr),e(FM,Grr),e(FM,MX),e(MX,Orr),e(FM,Vrr),e(j,Xrr),e(j,vM),e(vM,jpe),e(jpe,zrr),e(vM,Qrr),e(vM,EX),e(EX,Wrr),e(vM,Hrr),e(j,Urr),e(j,TM),e(TM,Dpe),e(Dpe,Jrr),e(TM,Yrr),e(TM,CX),e(CX,Krr),e(TM,Zrr),e(j,etr),e(j,xs),e(xs,Gpe),e(Gpe,otr),e(xs,rtr),e(xs,wX),e(wX,ttr),e(xs,atr),e(xs,AX),e(AX,ntr),e(xs,str),e(j,ltr),e(j,MM),e(MM,Ope),e(Ope,itr),e(MM,dtr),e(MM,yX),e(yX,ctr),e(MM,mtr),e(j,ftr),e(j,EM),e(EM,Vpe),e(Vpe,gtr),e(EM,htr),e(EM,LX),e(LX,utr),e(EM,ptr),e(j,_tr),e(j,CM),e(CM,Xpe),e(Xpe,btr),e(CM,Ftr),e(CM,xX),e(xX,vtr),e(CM,Ttr),e(j,Mtr),e(j,wM),e(wM,zpe),e(zpe,Etr),e(wM,Ctr),e(wM,$X),e($X,wtr),e(wM,Atr),e(j,ytr),e(j,AM),e(AM,Qpe),e(Qpe,Ltr),e(AM,xtr),e(AM,kX),e(kX,$tr),e(AM,ktr),e(j,Str),e(j,yM),e(yM,Wpe),e(Wpe,Rtr),e(yM,Btr),e(yM,SX),e(SX,Ptr),e(yM,Itr),e(j,qtr),e(j,LM),e(LM,Hpe),e(Hpe,Ntr),e(LM,jtr),e(LM,RX),e(RX,Dtr),e(LM,Gtr),e(j,Otr),e(j,xM),e(xM,Upe),e(Upe,Vtr),e(xM,Xtr),e(xM,BX),e(BX,ztr),e(xM,Qtr),e(j,Wtr),e(j,$M),e($M,Jpe),e(Jpe,Htr),e($M,Utr),e($M,PX),e(PX,Jtr),e($M,Ytr),e(j,Ktr),e(j,kM),e(kM,Ype),e(Ype,Ztr),e(kM,ear),e(kM,IX),e(IX,oar),e(kM,rar),e(j,tar),e(j,SM),e(SM,Kpe),e(Kpe,aar),e(SM,nar),e(SM,qX),e(qX,sar),e(SM,lar),e(j,iar),e(j,RM),e(RM,Zpe),e(Zpe,dar),e(RM,car),e(RM,NX),e(NX,mar),e(RM,far),e(j,gar),e(j,BM),e(BM,e_e),e(e_e,har),e(BM,uar),e(BM,jX),e(jX,par),e(BM,_ar),e(j,bar),e(j,PM),e(PM,o_e),e(o_e,Far),e(PM,Tar),e(PM,DX),e(DX,Mar),e(PM,Ear),e(j,Car),e(j,IM),e(IM,r_e),e(r_e,war),e(IM,Aar),e(IM,GX),e(GX,yar),e(IM,Lar),e(j,xar),e(j,qM),e(qM,t_e),e(t_e,$ar),e(qM,kar),e(qM,OX),e(OX,Sar),e(qM,Rar),e(j,Bar),e(j,NM),e(NM,a_e),e(a_e,Par),e(NM,Iar),e(NM,VX),e(VX,qar),e(NM,Nar),e(j,jar),e(j,jM),e(jM,n_e),e(n_e,Dar),e(jM,Gar),e(jM,XX),e(XX,Oar),e(jM,Var),e(j,Xar),e(j,DM),e(DM,s_e),e(s_e,zar),e(DM,Qar),e(DM,zX),e(zX,War),e(DM,Har),e(j,Uar),e(j,GM),e(GM,l_e),e(l_e,Jar),e(GM,Yar),e(GM,QX),e(QX,Kar),e(GM,Zar),e(j,enr),e(j,OM),e(OM,i_e),e(i_e,onr),e(OM,rnr),e(OM,WX),e(WX,tnr),e(OM,anr),e(j,nnr),e(j,VM),e(VM,d_e),e(d_e,snr),e(VM,lnr),e(VM,HX),e(HX,inr),e(VM,dnr),e(j,cnr),e(j,XM),e(XM,c_e),e(c_e,mnr),e(XM,fnr),e(XM,UX),e(UX,gnr),e(XM,hnr),e(j,unr),e(j,zM),e(zM,m_e),e(m_e,pnr),e(zM,_nr),e(zM,JX),e(JX,bnr),e(zM,Fnr),e(j,vnr),e(j,QM),e(QM,f_e),e(f_e,Tnr),e(QM,Mnr),e(QM,YX),e(YX,Enr),e(QM,Cnr),e(j,wnr),e(j,WM),e(WM,g_e),e(g_e,Anr),e(WM,ynr),e(WM,KX),e(KX,Lnr),e(WM,xnr),e(j,$nr),e(j,HM),e(HM,h_e),e(h_e,knr),e(HM,Snr),e(HM,ZX),e(ZX,Rnr),e(HM,Bnr),e(Mr,Pnr),M(UM,Mr,null),b(m,JBe,_),b(m,Bd,_),e(Bd,JM),e(JM,u_e),M(t8,u_e,null),e(Bd,Inr),e(Bd,p_e),e(p_e,qnr),b(m,YBe,_),b(m,Jo,_),M(a8,Jo,null),e(Jo,Nnr),e(Jo,Pd),e(Pd,jnr),e(Pd,ez),e(ez,Dnr),e(Pd,Gnr),e(Pd,oz),e(oz,Onr),e(Pd,Vnr),e(Jo,Xnr),e(Jo,n8),e(n8,znr),e(n8,__e),e(__e,Qnr),e(n8,Wnr),e(Jo,Hnr),e(Jo,Et),M(s8,Et,null),e(Et,Unr),e(Et,b_e),e(b_e,Jnr),e(Et,Ynr),e(Et,Id),e(Id,Knr),e(Id,F_e),e(F_e,Znr),e(Id,esr),e(Id,rz),e(rz,osr),e(Id,rsr),e(Et,tsr),M(YM,Et,null),e(Jo,asr),e(Jo,Er),M(l8,Er,null),e(Er,nsr),e(Er,v_e),e(v_e,ssr),e(Er,lsr),e(Er,Ua),e(Ua,isr),e(Ua,T_e),e(T_e,dsr),e(Ua,csr),e(Ua,M_e),e(M_e,msr),e(Ua,fsr),e(Ua,E_e),e(E_e,gsr),e(Ua,hsr),e(Er,usr),e(Er,ne),e(ne,KM),e(KM,C_e),e(C_e,psr),e(KM,_sr),e(KM,tz),e(tz,bsr),e(KM,Fsr),e(ne,vsr),e(ne,ZM),e(ZM,w_e),e(w_e,Tsr),e(ZM,Msr),e(ZM,az),e(az,Esr),e(ZM,Csr),e(ne,wsr),e(ne,e4),e(e4,A_e),e(A_e,Asr),e(e4,ysr),e(e4,nz),e(nz,Lsr),e(e4,xsr),e(ne,$sr),e(ne,o4),e(o4,y_e),e(y_e,ksr),e(o4,Ssr),e(o4,sz),e(sz,Rsr),e(o4,Bsr),e(ne,Psr),e(ne,r4),e(r4,L_e),e(L_e,Isr),e(r4,qsr),e(r4,lz),e(lz,Nsr),e(r4,jsr),e(ne,Dsr),e(ne,t4),e(t4,x_e),e(x_e,Gsr),e(t4,Osr),e(t4,iz),e(iz,Vsr),e(t4,Xsr),e(ne,zsr),e(ne,a4),e(a4,$_e),e($_e,Qsr),e(a4,Wsr),e(a4,dz),e(dz,Hsr),e(a4,Usr),e(ne,Jsr),e(ne,n4),e(n4,k_e),e(k_e,Ysr),e(n4,Ksr),e(n4,cz),e(cz,Zsr),e(n4,elr),e(ne,olr),e(ne,s4),e(s4,S_e),e(S_e,rlr),e(s4,tlr),e(s4,mz),e(mz,alr),e(s4,nlr),e(ne,slr),e(ne,l4),e(l4,R_e),e(R_e,llr),e(l4,ilr),e(l4,fz),e(fz,dlr),e(l4,clr),e(ne,mlr),e(ne,i4),e(i4,B_e),e(B_e,flr),e(i4,glr),e(i4,gz),e(gz,hlr),e(i4,ulr),e(ne,plr),e(ne,d4),e(d4,P_e),e(P_e,_lr),e(d4,blr),e(d4,hz),e(hz,Flr),e(d4,vlr),e(ne,Tlr),e(ne,c4),e(c4,I_e),e(I_e,Mlr),e(c4,Elr),e(c4,uz),e(uz,Clr),e(c4,wlr),e(ne,Alr),e(ne,m4),e(m4,q_e),e(q_e,ylr),e(m4,Llr),e(m4,pz),e(pz,xlr),e(m4,$lr),e(ne,klr),e(ne,f4),e(f4,N_e),e(N_e,Slr),e(f4,Rlr),e(f4,_z),e(_z,Blr),e(f4,Plr),e(ne,Ilr),e(ne,g4),e(g4,j_e),e(j_e,qlr),e(g4,Nlr),e(g4,bz),e(bz,jlr),e(g4,Dlr),e(ne,Glr),e(ne,h4),e(h4,D_e),e(D_e,Olr),e(h4,Vlr),e(h4,Fz),e(Fz,Xlr),e(h4,zlr),e(ne,Qlr),e(ne,u4),e(u4,G_e),e(G_e,Wlr),e(u4,Hlr),e(u4,vz),e(vz,Ulr),e(u4,Jlr),e(ne,Ylr),e(ne,p4),e(p4,O_e),e(O_e,Klr),e(p4,Zlr),e(p4,Tz),e(Tz,eir),e(p4,oir),e(ne,rir),e(ne,_4),e(_4,V_e),e(V_e,tir),e(_4,air),e(_4,Mz),e(Mz,nir),e(_4,sir),e(ne,lir),e(ne,b4),e(b4,X_e),e(X_e,iir),e(b4,dir),e(b4,Ez),e(Ez,cir),e(b4,mir),e(ne,fir),e(ne,F4),e(F4,z_e),e(z_e,gir),e(F4,hir),e(F4,Cz),e(Cz,uir),e(F4,pir),e(ne,_ir),e(ne,v4),e(v4,Q_e),e(Q_e,bir),e(v4,Fir),e(v4,wz),e(wz,vir),e(v4,Tir),e(Er,Mir),M(T4,Er,null),b(m,KBe,_),b(m,qd,_),e(qd,M4),e(M4,W_e),M(i8,W_e,null),e(qd,Eir),e(qd,H_e),e(H_e,Cir),b(m,ZBe,_),b(m,Yo,_),M(d8,Yo,null),e(Yo,wir),e(Yo,Nd),e(Nd,Air),e(Nd,Az),e(Az,yir),e(Nd,Lir),e(Nd,yz),e(yz,xir),e(Nd,$ir),e(Yo,kir),e(Yo,c8),e(c8,Sir),e(c8,U_e),e(U_e,Rir),e(c8,Bir),e(Yo,Pir),e(Yo,Ct),M(m8,Ct,null),e(Ct,Iir),e(Ct,J_e),e(J_e,qir),e(Ct,Nir),e(Ct,jd),e(jd,jir),e(jd,Y_e),e(Y_e,Dir),e(jd,Gir),e(jd,Lz),e(Lz,Oir),e(jd,Vir),e(Ct,Xir),M(E4,Ct,null),e(Yo,zir),e(Yo,Cr),M(f8,Cr,null),e(Cr,Qir),e(Cr,K_e),e(K_e,Wir),e(Cr,Hir),e(Cr,Ja),e(Ja,Uir),e(Ja,Z_e),e(Z_e,Jir),e(Ja,Yir),e(Ja,ebe),e(ebe,Kir),e(Ja,Zir),e(Ja,obe),e(obe,edr),e(Ja,odr),e(Cr,rdr),e(Cr,Te),e(Te,C4),e(C4,rbe),e(rbe,tdr),e(C4,adr),e(C4,xz),e(xz,ndr),e(C4,sdr),e(Te,ldr),e(Te,w4),e(w4,tbe),e(tbe,idr),e(w4,ddr),e(w4,$z),e($z,cdr),e(w4,mdr),e(Te,fdr),e(Te,A4),e(A4,abe),e(abe,gdr),e(A4,hdr),e(A4,kz),e(kz,udr),e(A4,pdr),e(Te,_dr),e(Te,y4),e(y4,nbe),e(nbe,bdr),e(y4,Fdr),e(y4,Sz),e(Sz,vdr),e(y4,Tdr),e(Te,Mdr),e(Te,L4),e(L4,sbe),e(sbe,Edr),e(L4,Cdr),e(L4,Rz),e(Rz,wdr),e(L4,Adr),e(Te,ydr),e(Te,x4),e(x4,lbe),e(lbe,Ldr),e(x4,xdr),e(x4,Bz),e(Bz,$dr),e(x4,kdr),e(Te,Sdr),e(Te,$4),e($4,ibe),e(ibe,Rdr),e($4,Bdr),e($4,Pz),e(Pz,Pdr),e($4,Idr),e(Te,qdr),e(Te,k4),e(k4,dbe),e(dbe,Ndr),e(k4,jdr),e(k4,Iz),e(Iz,Ddr),e(k4,Gdr),e(Te,Odr),e(Te,S4),e(S4,cbe),e(cbe,Vdr),e(S4,Xdr),e(S4,qz),e(qz,zdr),e(S4,Qdr),e(Te,Wdr),e(Te,R4),e(R4,mbe),e(mbe,Hdr),e(R4,Udr),e(R4,Nz),e(Nz,Jdr),e(R4,Ydr),e(Te,Kdr),e(Te,B4),e(B4,fbe),e(fbe,Zdr),e(B4,ecr),e(B4,jz),e(jz,ocr),e(B4,rcr),e(Te,tcr),e(Te,P4),e(P4,gbe),e(gbe,acr),e(P4,ncr),e(P4,Dz),e(Dz,scr),e(P4,lcr),e(Cr,icr),M(I4,Cr,null),b(m,ePe,_),b(m,Dd,_),e(Dd,q4),e(q4,hbe),M(g8,hbe,null),e(Dd,dcr),e(Dd,ube),e(ube,ccr),b(m,oPe,_),b(m,Ko,_),M(h8,Ko,null),e(Ko,mcr),e(Ko,Gd),e(Gd,fcr),e(Gd,Gz),e(Gz,gcr),e(Gd,hcr),e(Gd,Oz),e(Oz,ucr),e(Gd,pcr),e(Ko,_cr),e(Ko,u8),e(u8,bcr),e(u8,pbe),e(pbe,Fcr),e(u8,vcr),e(Ko,Tcr),e(Ko,wt),M(p8,wt,null),e(wt,Mcr),e(wt,_be),e(_be,Ecr),e(wt,Ccr),e(wt,Od),e(Od,wcr),e(Od,bbe),e(bbe,Acr),e(Od,ycr),e(Od,Vz),e(Vz,Lcr),e(Od,xcr),e(wt,$cr),M(N4,wt,null),e(Ko,kcr),e(Ko,wr),M(_8,wr,null),e(wr,Scr),e(wr,Fbe),e(Fbe,Rcr),e(wr,Bcr),e(wr,Ya),e(Ya,Pcr),e(Ya,vbe),e(vbe,Icr),e(Ya,qcr),e(Ya,Tbe),e(Tbe,Ncr),e(Ya,jcr),e(Ya,Mbe),e(Mbe,Dcr),e(Ya,Gcr),e(wr,Ocr),e(wr,b8),e(b8,j4),e(j4,Ebe),e(Ebe,Vcr),e(j4,Xcr),e(j4,Xz),e(Xz,zcr),e(j4,Qcr),e(b8,Wcr),e(b8,D4),e(D4,Cbe),e(Cbe,Hcr),e(D4,Ucr),e(D4,zz),e(zz,Jcr),e(D4,Ycr),e(wr,Kcr),M(G4,wr,null),b(m,rPe,_),b(m,Vd,_),e(Vd,O4),e(O4,wbe),M(F8,wbe,null),e(Vd,Zcr),e(Vd,Abe),e(Abe,emr),b(m,tPe,_),b(m,Zo,_),M(v8,Zo,null),e(Zo,omr),e(Zo,Xd),e(Xd,rmr),e(Xd,Qz),e(Qz,tmr),e(Xd,amr),e(Xd,Wz),e(Wz,nmr),e(Xd,smr),e(Zo,lmr),e(Zo,T8),e(T8,imr),e(T8,ybe),e(ybe,dmr),e(T8,cmr),e(Zo,mmr),e(Zo,At),M(M8,At,null),e(At,fmr),e(At,Lbe),e(Lbe,gmr),e(At,hmr),e(At,zd),e(zd,umr),e(zd,xbe),e(xbe,pmr),e(zd,_mr),e(zd,Hz),e(Hz,bmr),e(zd,Fmr),e(At,vmr),M(V4,At,null),e(Zo,Tmr),e(Zo,Ar),M(E8,Ar,null),e(Ar,Mmr),e(Ar,$be),e($be,Emr),e(Ar,Cmr),e(Ar,Ka),e(Ka,wmr),e(Ka,kbe),e(kbe,Amr),e(Ka,ymr),e(Ka,Sbe),e(Sbe,Lmr),e(Ka,xmr),e(Ka,Rbe),e(Rbe,$mr),e(Ka,kmr),e(Ar,Smr),e(Ar,ie),e(ie,X4),e(X4,Bbe),e(Bbe,Rmr),e(X4,Bmr),e(X4,Uz),e(Uz,Pmr),e(X4,Imr),e(ie,qmr),e(ie,z4),e(z4,Pbe),e(Pbe,Nmr),e(z4,jmr),e(z4,Jz),e(Jz,Dmr),e(z4,Gmr),e(ie,Omr),e(ie,Q4),e(Q4,Ibe),e(Ibe,Vmr),e(Q4,Xmr),e(Q4,Yz),e(Yz,zmr),e(Q4,Qmr),e(ie,Wmr),e(ie,W4),e(W4,qbe),e(qbe,Hmr),e(W4,Umr),e(W4,Kz),e(Kz,Jmr),e(W4,Ymr),e(ie,Kmr),e(ie,H4),e(H4,Nbe),e(Nbe,Zmr),e(H4,efr),e(H4,Zz),e(Zz,ofr),e(H4,rfr),e(ie,tfr),e(ie,U4),e(U4,jbe),e(jbe,afr),e(U4,nfr),e(U4,eQ),e(eQ,sfr),e(U4,lfr),e(ie,ifr),e(ie,J4),e(J4,Dbe),e(Dbe,dfr),e(J4,cfr),e(J4,oQ),e(oQ,mfr),e(J4,ffr),e(ie,gfr),e(ie,Y4),e(Y4,Gbe),e(Gbe,hfr),e(Y4,ufr),e(Y4,rQ),e(rQ,pfr),e(Y4,_fr),e(ie,bfr),e(ie,K4),e(K4,Obe),e(Obe,Ffr),e(K4,vfr),e(K4,tQ),e(tQ,Tfr),e(K4,Mfr),e(ie,Efr),e(ie,Z4),e(Z4,Vbe),e(Vbe,Cfr),e(Z4,wfr),e(Z4,aQ),e(aQ,Afr),e(Z4,yfr),e(ie,Lfr),e(ie,eE),e(eE,Xbe),e(Xbe,xfr),e(eE,$fr),e(eE,nQ),e(nQ,kfr),e(eE,Sfr),e(ie,Rfr),e(ie,oE),e(oE,zbe),e(zbe,Bfr),e(oE,Pfr),e(oE,sQ),e(sQ,Ifr),e(oE,qfr),e(ie,Nfr),e(ie,rE),e(rE,Qbe),e(Qbe,jfr),e(rE,Dfr),e(rE,lQ),e(lQ,Gfr),e(rE,Ofr),e(ie,Vfr),e(ie,tE),e(tE,Wbe),e(Wbe,Xfr),e(tE,zfr),e(tE,iQ),e(iQ,Qfr),e(tE,Wfr),e(ie,Hfr),e(ie,aE),e(aE,Hbe),e(Hbe,Ufr),e(aE,Jfr),e(aE,dQ),e(dQ,Yfr),e(aE,Kfr),e(ie,Zfr),e(ie,nE),e(nE,Ube),e(Ube,egr),e(nE,ogr),e(nE,cQ),e(cQ,rgr),e(nE,tgr),e(ie,agr),e(ie,sE),e(sE,Jbe),e(Jbe,ngr),e(sE,sgr),e(sE,mQ),e(mQ,lgr),e(sE,igr),e(ie,dgr),e(ie,lE),e(lE,Ybe),e(Ybe,cgr),e(lE,mgr),e(lE,fQ),e(fQ,fgr),e(lE,ggr),e(ie,hgr),e(ie,iE),e(iE,Kbe),e(Kbe,ugr),e(iE,pgr),e(iE,gQ),e(gQ,_gr),e(iE,bgr),e(ie,Fgr),e(ie,dE),e(dE,Zbe),e(Zbe,vgr),e(dE,Tgr),e(dE,hQ),e(hQ,Mgr),e(dE,Egr),e(Ar,Cgr),M(cE,Ar,null),b(m,aPe,_),b(m,Qd,_),e(Qd,mE),e(mE,e2e),M(C8,e2e,null),e(Qd,wgr),e(Qd,o2e),e(o2e,Agr),b(m,nPe,_),b(m,er,_),M(w8,er,null),e(er,ygr),e(er,Wd),e(Wd,Lgr),e(Wd,uQ),e(uQ,xgr),e(Wd,$gr),e(Wd,pQ),e(pQ,kgr),e(Wd,Sgr),e(er,Rgr),e(er,A8),e(A8,Bgr),e(A8,r2e),e(r2e,Pgr),e(A8,Igr),e(er,qgr),e(er,yt),M(y8,yt,null),e(yt,Ngr),e(yt,t2e),e(t2e,jgr),e(yt,Dgr),e(yt,Hd),e(Hd,Ggr),e(Hd,a2e),e(a2e,Ogr),e(Hd,Vgr),e(Hd,_Q),e(_Q,Xgr),e(Hd,zgr),e(yt,Qgr),M(fE,yt,null),e(er,Wgr),e(er,yr),M(L8,yr,null),e(yr,Hgr),e(yr,n2e),e(n2e,Ugr),e(yr,Jgr),e(yr,Za),e(Za,Ygr),e(Za,s2e),e(s2e,Kgr),e(Za,Zgr),e(Za,l2e),e(l2e,ehr),e(Za,ohr),e(Za,i2e),e(i2e,rhr),e(Za,thr),e(yr,ahr),e(yr,ye),e(ye,gE),e(gE,d2e),e(d2e,nhr),e(gE,shr),e(gE,bQ),e(bQ,lhr),e(gE,ihr),e(ye,dhr),e(ye,hE),e(hE,c2e),e(c2e,chr),e(hE,mhr),e(hE,FQ),e(FQ,fhr),e(hE,ghr),e(ye,hhr),e(ye,uE),e(uE,m2e),e(m2e,uhr),e(uE,phr),e(uE,vQ),e(vQ,_hr),e(uE,bhr),e(ye,Fhr),e(ye,pE),e(pE,f2e),e(f2e,vhr),e(pE,Thr),e(pE,TQ),e(TQ,Mhr),e(pE,Ehr),e(ye,Chr),e(ye,_E),e(_E,g2e),e(g2e,whr),e(_E,Ahr),e(_E,MQ),e(MQ,yhr),e(_E,Lhr),e(ye,xhr),e(ye,bE),e(bE,h2e),e(h2e,$hr),e(bE,khr),e(bE,EQ),e(EQ,Shr),e(bE,Rhr),e(ye,Bhr),e(ye,FE),e(FE,u2e),e(u2e,Phr),e(FE,Ihr),e(FE,CQ),e(CQ,qhr),e(FE,Nhr),e(ye,jhr),e(ye,vE),e(vE,p2e),e(p2e,Dhr),e(vE,Ghr),e(vE,wQ),e(wQ,Ohr),e(vE,Vhr),e(ye,Xhr),e(ye,TE),e(TE,_2e),e(_2e,zhr),e(TE,Qhr),e(TE,AQ),e(AQ,Whr),e(TE,Hhr),e(ye,Uhr),e(ye,ME),e(ME,b2e),e(b2e,Jhr),e(ME,Yhr),e(ME,yQ),e(yQ,Khr),e(ME,Zhr),e(yr,eur),M(EE,yr,null),b(m,sPe,_),b(m,Ud,_),e(Ud,CE),e(CE,F2e),M(x8,F2e,null),e(Ud,our),e(Ud,v2e),e(v2e,rur),b(m,lPe,_),b(m,or,_),M($8,or,null),e(or,tur),e(or,Jd),e(Jd,aur),e(Jd,LQ),e(LQ,nur),e(Jd,sur),e(Jd,xQ),e(xQ,lur),e(Jd,iur),e(or,dur),e(or,k8),e(k8,cur),e(k8,T2e),e(T2e,mur),e(k8,fur),e(or,gur),e(or,Lt),M(S8,Lt,null),e(Lt,hur),e(Lt,M2e),e(M2e,uur),e(Lt,pur),e(Lt,Yd),e(Yd,_ur),e(Yd,E2e),e(E2e,bur),e(Yd,Fur),e(Yd,$Q),e($Q,vur),e(Yd,Tur),e(Lt,Mur),M(wE,Lt,null),e(or,Eur),e(or,Lr),M(R8,Lr,null),e(Lr,Cur),e(Lr,C2e),e(C2e,wur),e(Lr,Aur),e(Lr,en),e(en,yur),e(en,w2e),e(w2e,Lur),e(en,xur),e(en,A2e),e(A2e,$ur),e(en,kur),e(en,y2e),e(y2e,Sur),e(en,Rur),e(Lr,Bur),e(Lr,Z),e(Z,AE),e(AE,L2e),e(L2e,Pur),e(AE,Iur),e(AE,kQ),e(kQ,qur),e(AE,Nur),e(Z,jur),e(Z,yE),e(yE,x2e),e(x2e,Dur),e(yE,Gur),e(yE,SQ),e(SQ,Our),e(yE,Vur),e(Z,Xur),e(Z,LE),e(LE,$2e),e($2e,zur),e(LE,Qur),e(LE,RQ),e(RQ,Wur),e(LE,Hur),e(Z,Uur),e(Z,xE),e(xE,k2e),e(k2e,Jur),e(xE,Yur),e(xE,BQ),e(BQ,Kur),e(xE,Zur),e(Z,epr),e(Z,$E),e($E,S2e),e(S2e,opr),e($E,rpr),e($E,PQ),e(PQ,tpr),e($E,apr),e(Z,npr),e(Z,kE),e(kE,R2e),e(R2e,spr),e(kE,lpr),e(kE,IQ),e(IQ,ipr),e(kE,dpr),e(Z,cpr),e(Z,SE),e(SE,B2e),e(B2e,mpr),e(SE,fpr),e(SE,qQ),e(qQ,gpr),e(SE,hpr),e(Z,upr),e(Z,RE),e(RE,P2e),e(P2e,ppr),e(RE,_pr),e(RE,NQ),e(NQ,bpr),e(RE,Fpr),e(Z,vpr),e(Z,BE),e(BE,I2e),e(I2e,Tpr),e(BE,Mpr),e(BE,jQ),e(jQ,Epr),e(BE,Cpr),e(Z,wpr),e(Z,PE),e(PE,q2e),e(q2e,Apr),e(PE,ypr),e(PE,DQ),e(DQ,Lpr),e(PE,xpr),e(Z,$pr),e(Z,IE),e(IE,N2e),e(N2e,kpr),e(IE,Spr),e(IE,GQ),e(GQ,Rpr),e(IE,Bpr),e(Z,Ppr),e(Z,qE),e(qE,j2e),e(j2e,Ipr),e(qE,qpr),e(qE,OQ),e(OQ,Npr),e(qE,jpr),e(Z,Dpr),e(Z,NE),e(NE,D2e),e(D2e,Gpr),e(NE,Opr),e(NE,VQ),e(VQ,Vpr),e(NE,Xpr),e(Z,zpr),e(Z,jE),e(jE,G2e),e(G2e,Qpr),e(jE,Wpr),e(jE,XQ),e(XQ,Hpr),e(jE,Upr),e(Z,Jpr),e(Z,DE),e(DE,O2e),e(O2e,Ypr),e(DE,Kpr),e(DE,zQ),e(zQ,Zpr),e(DE,e_r),e(Z,o_r),e(Z,GE),e(GE,V2e),e(V2e,r_r),e(GE,t_r),e(GE,QQ),e(QQ,a_r),e(GE,n_r),e(Z,s_r),e(Z,OE),e(OE,X2e),e(X2e,l_r),e(OE,i_r),e(OE,WQ),e(WQ,d_r),e(OE,c_r),e(Z,m_r),e(Z,VE),e(VE,z2e),e(z2e,f_r),e(VE,g_r),e(VE,HQ),e(HQ,h_r),e(VE,u_r),e(Z,p_r),e(Z,XE),e(XE,Q2e),e(Q2e,__r),e(XE,b_r),e(XE,UQ),e(UQ,F_r),e(XE,v_r),e(Z,T_r),e(Z,zE),e(zE,W2e),e(W2e,M_r),e(zE,E_r),e(zE,JQ),e(JQ,C_r),e(zE,w_r),e(Z,A_r),e(Z,QE),e(QE,H2e),e(H2e,y_r),e(QE,L_r),e(QE,YQ),e(YQ,x_r),e(QE,$_r),e(Z,k_r),e(Z,WE),e(WE,U2e),e(U2e,S_r),e(WE,R_r),e(WE,KQ),e(KQ,B_r),e(WE,P_r),e(Z,I_r),e(Z,HE),e(HE,J2e),e(J2e,q_r),e(HE,N_r),e(HE,ZQ),e(ZQ,j_r),e(HE,D_r),e(Z,G_r),e(Z,UE),e(UE,Y2e),e(Y2e,O_r),e(UE,V_r),e(UE,eW),e(eW,X_r),e(UE,z_r),e(Z,Q_r),e(Z,JE),e(JE,K2e),e(K2e,W_r),e(JE,H_r),e(JE,oW),e(oW,U_r),e(JE,J_r),e(Z,Y_r),e(Z,YE),e(YE,Z2e),e(Z2e,K_r),e(YE,Z_r),e(YE,rW),e(rW,ebr),e(YE,obr),e(Lr,rbr),M(KE,Lr,null),b(m,iPe,_),b(m,Kd,_),e(Kd,ZE),e(ZE,eFe),M(B8,eFe,null),e(Kd,tbr),e(Kd,oFe),e(oFe,abr),b(m,dPe,_),b(m,rr,_),M(P8,rr,null),e(rr,nbr),e(rr,Zd),e(Zd,sbr),e(Zd,tW),e(tW,lbr),e(Zd,ibr),e(Zd,aW),e(aW,dbr),e(Zd,cbr),e(rr,mbr),e(rr,I8),e(I8,fbr),e(I8,rFe),e(rFe,gbr),e(I8,hbr),e(rr,ubr),e(rr,xt),M(q8,xt,null),e(xt,pbr),e(xt,tFe),e(tFe,_br),e(xt,bbr),e(xt,ec),e(ec,Fbr),e(ec,aFe),e(aFe,vbr),e(ec,Tbr),e(ec,nW),e(nW,Mbr),e(ec,Ebr),e(xt,Cbr),M(e5,xt,null),e(rr,wbr),e(rr,xr),M(N8,xr,null),e(xr,Abr),e(xr,nFe),e(nFe,ybr),e(xr,Lbr),e(xr,on),e(on,xbr),e(on,sFe),e(sFe,$br),e(on,kbr),e(on,lFe),e(lFe,Sbr),e(on,Rbr),e(on,iFe),e(iFe,Bbr),e(on,Pbr),e(xr,Ibr),e(xr,ue),e(ue,o5),e(o5,dFe),e(dFe,qbr),e(o5,Nbr),e(o5,sW),e(sW,jbr),e(o5,Dbr),e(ue,Gbr),e(ue,r5),e(r5,cFe),e(cFe,Obr),e(r5,Vbr),e(r5,lW),e(lW,Xbr),e(r5,zbr),e(ue,Qbr),e(ue,t5),e(t5,mFe),e(mFe,Wbr),e(t5,Hbr),e(t5,iW),e(iW,Ubr),e(t5,Jbr),e(ue,Ybr),e(ue,a5),e(a5,fFe),e(fFe,Kbr),e(a5,Zbr),e(a5,dW),e(dW,e2r),e(a5,o2r),e(ue,r2r),e(ue,n5),e(n5,gFe),e(gFe,t2r),e(n5,a2r),e(n5,cW),e(cW,n2r),e(n5,s2r),e(ue,l2r),e(ue,s5),e(s5,hFe),e(hFe,i2r),e(s5,d2r),e(s5,mW),e(mW,c2r),e(s5,m2r),e(ue,f2r),e(ue,l5),e(l5,uFe),e(uFe,g2r),e(l5,h2r),e(l5,fW),e(fW,u2r),e(l5,p2r),e(ue,_2r),e(ue,i5),e(i5,pFe),e(pFe,b2r),e(i5,F2r),e(i5,gW),e(gW,v2r),e(i5,T2r),e(ue,M2r),e(ue,d5),e(d5,_Fe),e(_Fe,E2r),e(d5,C2r),e(d5,hW),e(hW,w2r),e(d5,A2r),e(ue,y2r),e(ue,c5),e(c5,bFe),e(bFe,L2r),e(c5,x2r),e(c5,uW),e(uW,$2r),e(c5,k2r),e(ue,S2r),e(ue,m5),e(m5,FFe),e(FFe,R2r),e(m5,B2r),e(m5,pW),e(pW,P2r),e(m5,I2r),e(ue,q2r),e(ue,f5),e(f5,vFe),e(vFe,N2r),e(f5,j2r),e(f5,_W),e(_W,D2r),e(f5,G2r),e(ue,O2r),e(ue,g5),e(g5,TFe),e(TFe,V2r),e(g5,X2r),e(g5,bW),e(bW,z2r),e(g5,Q2r),e(ue,W2r),e(ue,h5),e(h5,MFe),e(MFe,H2r),e(h5,U2r),e(h5,FW),e(FW,J2r),e(h5,Y2r),e(ue,K2r),e(ue,u5),e(u5,EFe),e(EFe,Z2r),e(u5,eFr),e(u5,vW),e(vW,oFr),e(u5,rFr),e(ue,tFr),e(ue,p5),e(p5,CFe),e(CFe,aFr),e(p5,nFr),e(p5,TW),e(TW,sFr),e(p5,lFr),e(ue,iFr),e(ue,_5),e(_5,wFe),e(wFe,dFr),e(_5,cFr),e(_5,MW),e(MW,mFr),e(_5,fFr),e(xr,gFr),M(b5,xr,null),b(m,cPe,_),b(m,oc,_),e(oc,F5),e(F5,AFe),M(j8,AFe,null),e(oc,hFr),e(oc,yFe),e(yFe,uFr),b(m,mPe,_),b(m,tr,_),M(D8,tr,null),e(tr,pFr),e(tr,rc),e(rc,_Fr),e(rc,EW),e(EW,bFr),e(rc,FFr),e(rc,CW),e(CW,vFr),e(rc,TFr),e(tr,MFr),e(tr,G8),e(G8,EFr),e(G8,LFe),e(LFe,CFr),e(G8,wFr),e(tr,AFr),e(tr,$t),M(O8,$t,null),e($t,yFr),e($t,xFe),e(xFe,LFr),e($t,xFr),e($t,tc),e(tc,$Fr),e(tc,$Fe),e($Fe,kFr),e(tc,SFr),e(tc,wW),e(wW,RFr),e(tc,BFr),e($t,PFr),M(v5,$t,null),e(tr,IFr),e(tr,$r),M(V8,$r,null),e($r,qFr),e($r,kFe),e(kFe,NFr),e($r,jFr),e($r,rn),e(rn,DFr),e(rn,SFe),e(SFe,GFr),e(rn,OFr),e(rn,RFe),e(RFe,VFr),e(rn,XFr),e(rn,BFe),e(BFe,zFr),e(rn,QFr),e($r,WFr),e($r,PFe),e(PFe,T5),e(T5,IFe),e(IFe,HFr),e(T5,UFr),e(T5,AW),e(AW,JFr),e(T5,YFr),e($r,KFr),M(M5,$r,null),b(m,fPe,_),b(m,ac,_),e(ac,E5),e(E5,qFe),M(X8,qFe,null),e(ac,ZFr),e(ac,NFe),e(NFe,evr),b(m,gPe,_),b(m,ar,_),M(z8,ar,null),e(ar,ovr),e(ar,nc),e(nc,rvr),e(nc,yW),e(yW,tvr),e(nc,avr),e(nc,LW),e(LW,nvr),e(nc,svr),e(ar,lvr),e(ar,Q8),e(Q8,ivr),e(Q8,jFe),e(jFe,dvr),e(Q8,cvr),e(ar,mvr),e(ar,kt),M(W8,kt,null),e(kt,fvr),e(kt,DFe),e(DFe,gvr),e(kt,hvr),e(kt,sc),e(sc,uvr),e(sc,GFe),e(GFe,pvr),e(sc,_vr),e(sc,xW),e(xW,bvr),e(sc,Fvr),e(kt,vvr),M(C5,kt,null),e(ar,Tvr),e(ar,kr),M(H8,kr,null),e(kr,Mvr),e(kr,OFe),e(OFe,Evr),e(kr,Cvr),e(kr,tn),e(tn,wvr),e(tn,VFe),e(VFe,Avr),e(tn,yvr),e(tn,XFe),e(XFe,Lvr),e(tn,xvr),e(tn,zFe),e(zFe,$vr),e(tn,kvr),e(kr,Svr),e(kr,de),e(de,w5),e(w5,QFe),e(QFe,Rvr),e(w5,Bvr),e(w5,$W),e($W,Pvr),e(w5,Ivr),e(de,qvr),e(de,A5),e(A5,WFe),e(WFe,Nvr),e(A5,jvr),e(A5,kW),e(kW,Dvr),e(A5,Gvr),e(de,Ovr),e(de,y5),e(y5,HFe),e(HFe,Vvr),e(y5,Xvr),e(y5,SW),e(SW,zvr),e(y5,Qvr),e(de,Wvr),e(de,L5),e(L5,UFe),e(UFe,Hvr),e(L5,Uvr),e(L5,RW),e(RW,Jvr),e(L5,Yvr),e(de,Kvr),e(de,x5),e(x5,JFe),e(JFe,Zvr),e(x5,e1r),e(x5,BW),e(BW,o1r),e(x5,r1r),e(de,t1r),e(de,$5),e($5,YFe),e(YFe,a1r),e($5,n1r),e($5,PW),e(PW,s1r),e($5,l1r),e(de,i1r),e(de,k5),e(k5,KFe),e(KFe,d1r),e(k5,c1r),e(k5,IW),e(IW,m1r),e(k5,f1r),e(de,g1r),e(de,S5),e(S5,ZFe),e(ZFe,h1r),e(S5,u1r),e(S5,qW),e(qW,p1r),e(S5,_1r),e(de,b1r),e(de,R5),e(R5,eve),e(eve,F1r),e(R5,v1r),e(R5,NW),e(NW,T1r),e(R5,M1r),e(de,E1r),e(de,B5),e(B5,ove),e(ove,C1r),e(B5,w1r),e(B5,jW),e(jW,A1r),e(B5,y1r),e(de,L1r),e(de,P5),e(P5,rve),e(rve,x1r),e(P5,$1r),e(P5,DW),e(DW,k1r),e(P5,S1r),e(de,R1r),e(de,I5),e(I5,tve),e(tve,B1r),e(I5,P1r),e(I5,GW),e(GW,I1r),e(I5,q1r),e(de,N1r),e(de,q5),e(q5,ave),e(ave,j1r),e(q5,D1r),e(q5,OW),e(OW,G1r),e(q5,O1r),e(de,V1r),e(de,N5),e(N5,nve),e(nve,X1r),e(N5,z1r),e(N5,VW),e(VW,Q1r),e(N5,W1r),e(de,H1r),e(de,j5),e(j5,sve),e(sve,U1r),e(j5,J1r),e(j5,XW),e(XW,Y1r),e(j5,K1r),e(de,Z1r),e(de,D5),e(D5,lve),e(lve,eTr),e(D5,oTr),e(D5,zW),e(zW,rTr),e(D5,tTr),e(de,aTr),e(de,G5),e(G5,ive),e(ive,nTr),e(G5,sTr),e(G5,QW),e(QW,lTr),e(G5,iTr),e(de,dTr),e(de,O5),e(O5,dve),e(dve,cTr),e(O5,mTr),e(O5,WW),e(WW,fTr),e(O5,gTr),e(de,hTr),e(de,V5),e(V5,cve),e(cve,uTr),e(V5,pTr),e(V5,HW),e(HW,_Tr),e(V5,bTr),e(de,FTr),e(de,X5),e(X5,mve),e(mve,vTr),e(X5,TTr),e(X5,UW),e(UW,MTr),e(X5,ETr),e(kr,CTr),M(z5,kr,null),b(m,hPe,_),b(m,lc,_),e(lc,Q5),e(Q5,fve),M(U8,fve,null),e(lc,wTr),e(lc,gve),e(gve,ATr),b(m,uPe,_),b(m,nr,_),M(J8,nr,null),e(nr,yTr),e(nr,ic),e(ic,LTr),e(ic,JW),e(JW,xTr),e(ic,$Tr),e(ic,YW),e(YW,kTr),e(ic,STr),e(nr,RTr),e(nr,Y8),e(Y8,BTr),e(Y8,hve),e(hve,PTr),e(Y8,ITr),e(nr,qTr),e(nr,St),M(K8,St,null),e(St,NTr),e(St,uve),e(uve,jTr),e(St,DTr),e(St,dc),e(dc,GTr),e(dc,pve),e(pve,OTr),e(dc,VTr),e(dc,KW),e(KW,XTr),e(dc,zTr),e(St,QTr),M(W5,St,null),e(nr,WTr),e(nr,Sr),M(Z8,Sr,null),e(Sr,HTr),e(Sr,_ve),e(_ve,UTr),e(Sr,JTr),e(Sr,an),e(an,YTr),e(an,bve),e(bve,KTr),e(an,ZTr),e(an,Fve),e(Fve,eMr),e(an,oMr),e(an,vve),e(vve,rMr),e(an,tMr),e(Sr,aMr),e(Sr,ce),e(ce,H5),e(H5,Tve),e(Tve,nMr),e(H5,sMr),e(H5,ZW),e(ZW,lMr),e(H5,iMr),e(ce,dMr),e(ce,U5),e(U5,Mve),e(Mve,cMr),e(U5,mMr),e(U5,eH),e(eH,fMr),e(U5,gMr),e(ce,hMr),e(ce,J5),e(J5,Eve),e(Eve,uMr),e(J5,pMr),e(J5,oH),e(oH,_Mr),e(J5,bMr),e(ce,FMr),e(ce,Y5),e(Y5,Cve),e(Cve,vMr),e(Y5,TMr),e(Y5,rH),e(rH,MMr),e(Y5,EMr),e(ce,CMr),e(ce,K5),e(K5,wve),e(wve,wMr),e(K5,AMr),e(K5,tH),e(tH,yMr),e(K5,LMr),e(ce,xMr),e(ce,Z5),e(Z5,Ave),e(Ave,$Mr),e(Z5,kMr),e(Z5,aH),e(aH,SMr),e(Z5,RMr),e(ce,BMr),e(ce,eC),e(eC,yve),e(yve,PMr),e(eC,IMr),e(eC,nH),e(nH,qMr),e(eC,NMr),e(ce,jMr),e(ce,oC),e(oC,Lve),e(Lve,DMr),e(oC,GMr),e(oC,sH),e(sH,OMr),e(oC,VMr),e(ce,XMr),e(ce,rC),e(rC,xve),e(xve,zMr),e(rC,QMr),e(rC,lH),e(lH,WMr),e(rC,HMr),e(ce,UMr),e(ce,tC),e(tC,$ve),e($ve,JMr),e(tC,YMr),e(tC,iH),e(iH,KMr),e(tC,ZMr),e(ce,e4r),e(ce,aC),e(aC,kve),e(kve,o4r),e(aC,r4r),e(aC,dH),e(dH,t4r),e(aC,a4r),e(ce,n4r),e(ce,nC),e(nC,Sve),e(Sve,s4r),e(nC,l4r),e(nC,cH),e(cH,i4r),e(nC,d4r),e(ce,c4r),e(ce,sC),e(sC,Rve),e(Rve,m4r),e(sC,f4r),e(sC,mH),e(mH,g4r),e(sC,h4r),e(ce,u4r),e(ce,lC),e(lC,Bve),e(Bve,p4r),e(lC,_4r),e(lC,fH),e(fH,b4r),e(lC,F4r),e(ce,v4r),e(ce,iC),e(iC,Pve),e(Pve,T4r),e(iC,M4r),e(iC,gH),e(gH,E4r),e(iC,C4r),e(ce,w4r),e(ce,dC),e(dC,Ive),e(Ive,A4r),e(dC,y4r),e(dC,hH),e(hH,L4r),e(dC,x4r),e(ce,$4r),e(ce,cC),e(cC,qve),e(qve,k4r),e(cC,S4r),e(cC,uH),e(uH,R4r),e(cC,B4r),e(ce,P4r),e(ce,mC),e(mC,Nve),e(Nve,I4r),e(mC,q4r),e(mC,pH),e(pH,N4r),e(mC,j4r),e(ce,D4r),e(ce,fC),e(fC,jve),e(jve,G4r),e(fC,O4r),e(fC,_H),e(_H,V4r),e(fC,X4r),e(ce,z4r),e(ce,gC),e(gC,Dve),e(Dve,Q4r),e(gC,W4r),e(gC,bH),e(bH,H4r),e(gC,U4r),e(Sr,J4r),M(hC,Sr,null),b(m,pPe,_),b(m,cc,_),e(cc,uC),e(uC,Gve),M(e7,Gve,null),e(cc,Y4r),e(cc,Ove),e(Ove,K4r),b(m,_Pe,_),b(m,sr,_),M(o7,sr,null),e(sr,Z4r),e(sr,mc),e(mc,eEr),e(mc,FH),e(FH,oEr),e(mc,rEr),e(mc,vH),e(vH,tEr),e(mc,aEr),e(sr,nEr),e(sr,r7),e(r7,sEr),e(r7,Vve),e(Vve,lEr),e(r7,iEr),e(sr,dEr),e(sr,Rt),M(t7,Rt,null),e(Rt,cEr),e(Rt,Xve),e(Xve,mEr),e(Rt,fEr),e(Rt,fc),e(fc,gEr),e(fc,zve),e(zve,hEr),e(fc,uEr),e(fc,TH),e(TH,pEr),e(fc,_Er),e(Rt,bEr),M(pC,Rt,null),e(sr,FEr),e(sr,Rr),M(a7,Rr,null),e(Rr,vEr),e(Rr,Qve),e(Qve,TEr),e(Rr,MEr),e(Rr,nn),e(nn,EEr),e(nn,Wve),e(Wve,CEr),e(nn,wEr),e(nn,Hve),e(Hve,AEr),e(nn,yEr),e(nn,Uve),e(Uve,LEr),e(nn,xEr),e(Rr,$Er),e(Rr,Jve),e(Jve,_C),e(_C,Yve),e(Yve,kEr),e(_C,SEr),e(_C,MH),e(MH,REr),e(_C,BEr),e(Rr,PEr),M(bC,Rr,null),b(m,bPe,_),b(m,gc,_),e(gc,FC),e(FC,Kve),M(n7,Kve,null),e(gc,IEr),e(gc,Zve),e(Zve,qEr),b(m,FPe,_),b(m,lr,_),M(s7,lr,null),e(lr,NEr),e(lr,hc),e(hc,jEr),e(hc,EH),e(EH,DEr),e(hc,GEr),e(hc,CH),e(CH,OEr),e(hc,VEr),e(lr,XEr),e(lr,l7),e(l7,zEr),e(l7,e1e),e(e1e,QEr),e(l7,WEr),e(lr,HEr),e(lr,Bt),M(i7,Bt,null),e(Bt,UEr),e(Bt,o1e),e(o1e,JEr),e(Bt,YEr),e(Bt,uc),e(uc,KEr),e(uc,r1e),e(r1e,ZEr),e(uc,e5r),e(uc,wH),e(wH,o5r),e(uc,r5r),e(Bt,t5r),M(vC,Bt,null),e(lr,a5r),e(lr,Br),M(d7,Br,null),e(Br,n5r),e(Br,t1e),e(t1e,s5r),e(Br,l5r),e(Br,sn),e(sn,i5r),e(sn,a1e),e(a1e,d5r),e(sn,c5r),e(sn,n1e),e(n1e,m5r),e(sn,f5r),e(sn,s1e),e(s1e,g5r),e(sn,h5r),e(Br,u5r),e(Br,l1e),e(l1e,TC),e(TC,i1e),e(i1e,p5r),e(TC,_5r),e(TC,AH),e(AH,b5r),e(TC,F5r),e(Br,v5r),M(MC,Br,null),b(m,vPe,_),b(m,pc,_),e(pc,EC),e(EC,d1e),M(c7,d1e,null),e(pc,T5r),e(pc,c1e),e(c1e,M5r),b(m,TPe,_),b(m,ir,_),M(m7,ir,null),e(ir,E5r),e(ir,_c),e(_c,C5r),e(_c,yH),e(yH,w5r),e(_c,A5r),e(_c,LH),e(LH,y5r),e(_c,L5r),e(ir,x5r),e(ir,f7),e(f7,$5r),e(f7,m1e),e(m1e,k5r),e(f7,S5r),e(ir,R5r),e(ir,Pt),M(g7,Pt,null),e(Pt,B5r),e(Pt,f1e),e(f1e,P5r),e(Pt,I5r),e(Pt,bc),e(bc,q5r),e(bc,g1e),e(g1e,N5r),e(bc,j5r),e(bc,xH),e(xH,D5r),e(bc,G5r),e(Pt,O5r),M(CC,Pt,null),e(ir,V5r),e(ir,Pr),M(h7,Pr,null),e(Pr,X5r),e(Pr,h1e),e(h1e,z5r),e(Pr,Q5r),e(Pr,ln),e(ln,W5r),e(ln,u1e),e(u1e,H5r),e(ln,U5r),e(ln,p1e),e(p1e,J5r),e(ln,Y5r),e(ln,_1e),e(_1e,K5r),e(ln,Z5r),e(Pr,eCr),e(Pr,oe),e(oe,wC),e(wC,b1e),e(b1e,oCr),e(wC,rCr),e(wC,$H),e($H,tCr),e(wC,aCr),e(oe,nCr),e(oe,AC),e(AC,F1e),e(F1e,sCr),e(AC,lCr),e(AC,kH),e(kH,iCr),e(AC,dCr),e(oe,cCr),e(oe,yC),e(yC,v1e),e(v1e,mCr),e(yC,fCr),e(yC,SH),e(SH,gCr),e(yC,hCr),e(oe,uCr),e(oe,LC),e(LC,T1e),e(T1e,pCr),e(LC,_Cr),e(LC,RH),e(RH,bCr),e(LC,FCr),e(oe,vCr),e(oe,xC),e(xC,M1e),e(M1e,TCr),e(xC,MCr),e(xC,BH),e(BH,ECr),e(xC,CCr),e(oe,wCr),e(oe,$C),e($C,E1e),e(E1e,ACr),e($C,yCr),e($C,PH),e(PH,LCr),e($C,xCr),e(oe,$Cr),e(oe,kC),e(kC,C1e),e(C1e,kCr),e(kC,SCr),e(kC,IH),e(IH,RCr),e(kC,BCr),e(oe,PCr),e(oe,SC),e(SC,w1e),e(w1e,ICr),e(SC,qCr),e(SC,qH),e(qH,NCr),e(SC,jCr),e(oe,DCr),e(oe,RC),e(RC,A1e),e(A1e,GCr),e(RC,OCr),e(RC,NH),e(NH,VCr),e(RC,XCr),e(oe,zCr),e(oe,BC),e(BC,y1e),e(y1e,QCr),e(BC,WCr),e(BC,jH),e(jH,HCr),e(BC,UCr),e(oe,JCr),e(oe,PC),e(PC,L1e),e(L1e,YCr),e(PC,KCr),e(PC,DH),e(DH,ZCr),e(PC,e3r),e(oe,o3r),e(oe,IC),e(IC,x1e),e(x1e,r3r),e(IC,t3r),e(IC,GH),e(GH,a3r),e(IC,n3r),e(oe,s3r),e(oe,qC),e(qC,$1e),e($1e,l3r),e(qC,i3r),e(qC,OH),e(OH,d3r),e(qC,c3r),e(oe,m3r),e(oe,NC),e(NC,k1e),e(k1e,f3r),e(NC,g3r),e(NC,VH),e(VH,h3r),e(NC,u3r),e(oe,p3r),e(oe,jC),e(jC,S1e),e(S1e,_3r),e(jC,b3r),e(jC,XH),e(XH,F3r),e(jC,v3r),e(oe,T3r),e(oe,DC),e(DC,R1e),e(R1e,M3r),e(DC,E3r),e(DC,zH),e(zH,C3r),e(DC,w3r),e(oe,A3r),e(oe,GC),e(GC,B1e),e(B1e,y3r),e(GC,L3r),e(GC,QH),e(QH,x3r),e(GC,$3r),e(oe,k3r),e(oe,OC),e(OC,P1e),e(P1e,S3r),e(OC,R3r),e(OC,WH),e(WH,B3r),e(OC,P3r),e(oe,I3r),e(oe,VC),e(VC,I1e),e(I1e,q3r),e(VC,N3r),e(VC,HH),e(HH,j3r),e(VC,D3r),e(oe,G3r),e(oe,XC),e(XC,q1e),e(q1e,O3r),e(XC,V3r),e(XC,UH),e(UH,X3r),e(XC,z3r),e(oe,Q3r),e(oe,zC),e(zC,N1e),e(N1e,W3r),e(zC,H3r),e(zC,JH),e(JH,U3r),e(zC,J3r),e(oe,Y3r),e(oe,QC),e(QC,j1e),e(j1e,K3r),e(QC,Z3r),e(QC,YH),e(YH,ewr),e(QC,owr),e(oe,rwr),e(oe,WC),e(WC,D1e),e(D1e,twr),e(WC,awr),e(WC,KH),e(KH,nwr),e(WC,swr),e(oe,lwr),e(oe,HC),e(HC,G1e),e(G1e,iwr),e(HC,dwr),e(HC,ZH),e(ZH,cwr),e(HC,mwr),e(oe,fwr),e(oe,UC),e(UC,O1e),e(O1e,gwr),e(UC,hwr),e(UC,eU),e(eU,uwr),e(UC,pwr),e(Pr,_wr),M(JC,Pr,null),b(m,MPe,_),b(m,Fc,_),e(Fc,YC),e(YC,V1e),M(u7,V1e,null),e(Fc,bwr),e(Fc,X1e),e(X1e,Fwr),b(m,EPe,_),b(m,dr,_),M(p7,dr,null),e(dr,vwr),e(dr,vc),e(vc,Twr),e(vc,oU),e(oU,Mwr),e(vc,Ewr),e(vc,rU),e(rU,Cwr),e(vc,wwr),e(dr,Awr),e(dr,_7),e(_7,ywr),e(_7,z1e),e(z1e,Lwr),e(_7,xwr),e(dr,$wr),e(dr,It),M(b7,It,null),e(It,kwr),e(It,Q1e),e(Q1e,Swr),e(It,Rwr),e(It,Tc),e(Tc,Bwr),e(Tc,W1e),e(W1e,Pwr),e(Tc,Iwr),e(Tc,tU),e(tU,qwr),e(Tc,Nwr),e(It,jwr),M(KC,It,null),e(dr,Dwr),e(dr,Ir),M(F7,Ir,null),e(Ir,Gwr),e(Ir,H1e),e(H1e,Owr),e(Ir,Vwr),e(Ir,dn),e(dn,Xwr),e(dn,U1e),e(U1e,zwr),e(dn,Qwr),e(dn,J1e),e(J1e,Wwr),e(dn,Hwr),e(dn,Y1e),e(Y1e,Uwr),e(dn,Jwr),e(Ir,Ywr),e(Ir,Hr),e(Hr,ZC),e(ZC,K1e),e(K1e,Kwr),e(ZC,Zwr),e(ZC,aU),e(aU,eAr),e(ZC,oAr),e(Hr,rAr),e(Hr,e3),e(e3,Z1e),e(Z1e,tAr),e(e3,aAr),e(e3,nU),e(nU,nAr),e(e3,sAr),e(Hr,lAr),e(Hr,o3),e(o3,eTe),e(eTe,iAr),e(o3,dAr),e(o3,sU),e(sU,cAr),e(o3,mAr),e(Hr,fAr),e(Hr,r3),e(r3,oTe),e(oTe,gAr),e(r3,hAr),e(r3,lU),e(lU,uAr),e(r3,pAr),e(Hr,_Ar),e(Hr,t3),e(t3,rTe),e(rTe,bAr),e(t3,FAr),e(t3,iU),e(iU,vAr),e(t3,TAr),e(Ir,MAr),M(a3,Ir,null),b(m,CPe,_),b(m,Mc,_),e(Mc,n3),e(n3,tTe),M(v7,tTe,null),e(Mc,EAr),e(Mc,aTe),e(aTe,CAr),b(m,wPe,_),b(m,cr,_),M(T7,cr,null),e(cr,wAr),e(cr,Ec),e(Ec,AAr),e(Ec,dU),e(dU,yAr),e(Ec,LAr),e(Ec,cU),e(cU,xAr),e(Ec,$Ar),e(cr,kAr),e(cr,M7),e(M7,SAr),e(M7,nTe),e(nTe,RAr),e(M7,BAr),e(cr,PAr),e(cr,qt),M(E7,qt,null),e(qt,IAr),e(qt,sTe),e(sTe,qAr),e(qt,NAr),e(qt,Cc),e(Cc,jAr),e(Cc,lTe),e(lTe,DAr),e(Cc,GAr),e(Cc,mU),e(mU,OAr),e(Cc,VAr),e(qt,XAr),M(s3,qt,null),e(cr,zAr),e(cr,qr),M(C7,qr,null),e(qr,QAr),e(qr,iTe),e(iTe,WAr),e(qr,HAr),e(qr,cn),e(cn,UAr),e(cn,dTe),e(dTe,JAr),e(cn,YAr),e(cn,cTe),e(cTe,KAr),e(cn,ZAr),e(cn,mTe),e(mTe,e0r),e(cn,o0r),e(qr,r0r),e(qr,Me),e(Me,l3),e(l3,fTe),e(fTe,t0r),e(l3,a0r),e(l3,fU),e(fU,n0r),e(l3,s0r),e(Me,l0r),e(Me,i3),e(i3,gTe),e(gTe,i0r),e(i3,d0r),e(i3,gU),e(gU,c0r),e(i3,m0r),e(Me,f0r),e(Me,d3),e(d3,hTe),e(hTe,g0r),e(d3,h0r),e(d3,hU),e(hU,u0r),e(d3,p0r),e(Me,_0r),e(Me,c3),e(c3,uTe),e(uTe,b0r),e(c3,F0r),e(c3,uU),e(uU,v0r),e(c3,T0r),e(Me,M0r),e(Me,m3),e(m3,pTe),e(pTe,E0r),e(m3,C0r),e(m3,pU),e(pU,w0r),e(m3,A0r),e(Me,y0r),e(Me,f3),e(f3,_Te),e(_Te,L0r),e(f3,x0r),e(f3,_U),e(_U,$0r),e(f3,k0r),e(Me,S0r),e(Me,g3),e(g3,bTe),e(bTe,R0r),e(g3,B0r),e(g3,bU),e(bU,P0r),e(g3,I0r),e(Me,q0r),e(Me,h3),e(h3,FTe),e(FTe,N0r),e(h3,j0r),e(h3,FU),e(FU,D0r),e(h3,G0r),e(Me,O0r),e(Me,u3),e(u3,vTe),e(vTe,V0r),e(u3,X0r),e(u3,vU),e(vU,z0r),e(u3,Q0r),e(Me,W0r),e(Me,p3),e(p3,TTe),e(TTe,H0r),e(p3,U0r),e(p3,TU),e(TU,J0r),e(p3,Y0r),e(Me,K0r),e(Me,_3),e(_3,MTe),e(MTe,Z0r),e(_3,e6r),e(_3,MU),e(MU,o6r),e(_3,r6r),e(Me,t6r),e(Me,b3),e(b3,ETe),e(ETe,a6r),e(b3,n6r),e(b3,EU),e(EU,s6r),e(b3,l6r),e(qr,i6r),M(F3,qr,null),b(m,APe,_),b(m,wc,_),e(wc,v3),e(v3,CTe),M(w7,CTe,null),e(wc,d6r),e(wc,wTe),e(wTe,c6r),b(m,yPe,_),b(m,mr,_),M(A7,mr,null),e(mr,m6r),e(mr,Ac),e(Ac,f6r),e(Ac,CU),e(CU,g6r),e(Ac,h6r),e(Ac,wU),e(wU,u6r),e(Ac,p6r),e(mr,_6r),e(mr,y7),e(y7,b6r),e(y7,ATe),e(ATe,F6r),e(y7,v6r),e(mr,T6r),e(mr,Nt),M(L7,Nt,null),e(Nt,M6r),e(Nt,yTe),e(yTe,E6r),e(Nt,C6r),e(Nt,yc),e(yc,w6r),e(yc,LTe),e(LTe,A6r),e(yc,y6r),e(yc,AU),e(AU,L6r),e(yc,x6r),e(Nt,$6r),M(T3,Nt,null),e(mr,k6r),e(mr,Nr),M(x7,Nr,null),e(Nr,S6r),e(Nr,xTe),e(xTe,R6r),e(Nr,B6r),e(Nr,mn),e(mn,P6r),e(mn,$Te),e($Te,I6r),e(mn,q6r),e(mn,kTe),e(kTe,N6r),e(mn,j6r),e(mn,STe),e(STe,D6r),e(mn,G6r),e(Nr,O6r),e(Nr,Le),e(Le,M3),e(M3,RTe),e(RTe,V6r),e(M3,X6r),e(M3,yU),e(yU,z6r),e(M3,Q6r),e(Le,W6r),e(Le,E3),e(E3,BTe),e(BTe,H6r),e(E3,U6r),e(E3,LU),e(LU,J6r),e(E3,Y6r),e(Le,K6r),e(Le,C3),e(C3,PTe),e(PTe,Z6r),e(C3,eyr),e(C3,xU),e(xU,oyr),e(C3,ryr),e(Le,tyr),e(Le,w3),e(w3,ITe),e(ITe,ayr),e(w3,nyr),e(w3,$U),e($U,syr),e(w3,lyr),e(Le,iyr),e(Le,A3),e(A3,qTe),e(qTe,dyr),e(A3,cyr),e(A3,kU),e(kU,myr),e(A3,fyr),e(Le,gyr),e(Le,y3),e(y3,NTe),e(NTe,hyr),e(y3,uyr),e(y3,SU),e(SU,pyr),e(y3,_yr),e(Le,byr),e(Le,L3),e(L3,jTe),e(jTe,Fyr),e(L3,vyr),e(L3,RU),e(RU,Tyr),e(L3,Myr),e(Le,Eyr),e(Le,x3),e(x3,DTe),e(DTe,Cyr),e(x3,wyr),e(x3,BU),e(BU,Ayr),e(x3,yyr),e(Le,Lyr),e(Le,$3),e($3,GTe),e(GTe,xyr),e($3,$yr),e($3,PU),e(PU,kyr),e($3,Syr),e(Le,Ryr),e(Le,k3),e(k3,OTe),e(OTe,Byr),e(k3,Pyr),e(k3,IU),e(IU,Iyr),e(k3,qyr),e(Nr,Nyr),M(S3,Nr,null),b(m,LPe,_),b(m,Lc,_),e(Lc,R3),e(R3,VTe),M($7,VTe,null),e(Lc,jyr),e(Lc,XTe),e(XTe,Dyr),b(m,xPe,_),b(m,fr,_),M(k7,fr,null),e(fr,Gyr),e(fr,xc),e(xc,Oyr),e(xc,qU),e(qU,Vyr),e(xc,Xyr),e(xc,NU),e(NU,zyr),e(xc,Qyr),e(fr,Wyr),e(fr,S7),e(S7,Hyr),e(S7,zTe),e(zTe,Uyr),e(S7,Jyr),e(fr,Yyr),e(fr,jt),M(R7,jt,null),e(jt,Kyr),e(jt,QTe),e(QTe,Zyr),e(jt,eLr),e(jt,$c),e($c,oLr),e($c,WTe),e(WTe,rLr),e($c,tLr),e($c,jU),e(jU,aLr),e($c,nLr),e(jt,sLr),M(B3,jt,null),e(fr,lLr),e(fr,jr),M(B7,jr,null),e(jr,iLr),e(jr,HTe),e(HTe,dLr),e(jr,cLr),e(jr,fn),e(fn,mLr),e(fn,UTe),e(UTe,fLr),e(fn,gLr),e(fn,JTe),e(JTe,hLr),e(fn,uLr),e(fn,YTe),e(YTe,pLr),e(fn,_Lr),e(jr,bLr),e(jr,ke),e(ke,P3),e(P3,KTe),e(KTe,FLr),e(P3,vLr),e(P3,DU),e(DU,TLr),e(P3,MLr),e(ke,ELr),e(ke,I3),e(I3,ZTe),e(ZTe,CLr),e(I3,wLr),e(I3,GU),e(GU,ALr),e(I3,yLr),e(ke,LLr),e(ke,q3),e(q3,eMe),e(eMe,xLr),e(q3,$Lr),e(q3,OU),e(OU,kLr),e(q3,SLr),e(ke,RLr),e(ke,N3),e(N3,oMe),e(oMe,BLr),e(N3,PLr),e(N3,VU),e(VU,ILr),e(N3,qLr),e(ke,NLr),e(ke,j3),e(j3,rMe),e(rMe,jLr),e(j3,DLr),e(j3,XU),e(XU,GLr),e(j3,OLr),e(ke,VLr),e(ke,D3),e(D3,tMe),e(tMe,XLr),e(D3,zLr),e(D3,zU),e(zU,QLr),e(D3,WLr),e(ke,HLr),e(ke,G3),e(G3,aMe),e(aMe,ULr),e(G3,JLr),e(G3,QU),e(QU,YLr),e(G3,KLr),e(ke,ZLr),e(ke,O3),e(O3,nMe),e(nMe,e8r),e(O3,o8r),e(O3,WU),e(WU,r8r),e(O3,t8r),e(ke,a8r),e(ke,V3),e(V3,sMe),e(sMe,n8r),e(V3,s8r),e(V3,HU),e(HU,l8r),e(V3,i8r),e(jr,d8r),M(X3,jr,null),b(m,$Pe,_),b(m,kc,_),e(kc,z3),e(z3,lMe),M(P7,lMe,null),e(kc,c8r),e(kc,iMe),e(iMe,m8r),b(m,kPe,_),b(m,gr,_),M(I7,gr,null),e(gr,f8r),e(gr,Sc),e(Sc,g8r),e(Sc,UU),e(UU,h8r),e(Sc,u8r),e(Sc,JU),e(JU,p8r),e(Sc,_8r),e(gr,b8r),e(gr,q7),e(q7,F8r),e(q7,dMe),e(dMe,v8r),e(q7,T8r),e(gr,M8r),e(gr,Dt),M(N7,Dt,null),e(Dt,E8r),e(Dt,cMe),e(cMe,C8r),e(Dt,w8r),e(Dt,Rc),e(Rc,A8r),e(Rc,mMe),e(mMe,y8r),e(Rc,L8r),e(Rc,YU),e(YU,x8r),e(Rc,$8r),e(Dt,k8r),M(Q3,Dt,null),e(gr,S8r),e(gr,Dr),M(j7,Dr,null),e(Dr,R8r),e(Dr,fMe),e(fMe,B8r),e(Dr,P8r),e(Dr,gn),e(gn,I8r),e(gn,gMe),e(gMe,q8r),e(gn,N8r),e(gn,hMe),e(hMe,j8r),e(gn,D8r),e(gn,uMe),e(uMe,G8r),e(gn,O8r),e(Dr,V8r),e(Dr,xe),e(xe,W3),e(W3,pMe),e(pMe,X8r),e(W3,z8r),e(W3,KU),e(KU,Q8r),e(W3,W8r),e(xe,H8r),e(xe,H3),e(H3,_Me),e(_Me,U8r),e(H3,J8r),e(H3,ZU),e(ZU,Y8r),e(H3,K8r),e(xe,Z8r),e(xe,U3),e(U3,bMe),e(bMe,e7r),e(U3,o7r),e(U3,eJ),e(eJ,r7r),e(U3,t7r),e(xe,a7r),e(xe,J3),e(J3,FMe),e(FMe,n7r),e(J3,s7r),e(J3,oJ),e(oJ,l7r),e(J3,i7r),e(xe,d7r),e(xe,Y3),e(Y3,vMe),e(vMe,c7r),e(Y3,m7r),e(Y3,rJ),e(rJ,f7r),e(Y3,g7r),e(xe,h7r),e(xe,K3),e(K3,TMe),e(TMe,u7r),e(K3,p7r),e(K3,tJ),e(tJ,_7r),e(K3,b7r),e(xe,F7r),e(xe,Z3),e(Z3,MMe),e(MMe,v7r),e(Z3,T7r),e(Z3,aJ),e(aJ,M7r),e(Z3,E7r),e(xe,C7r),e(xe,ew),e(ew,EMe),e(EMe,w7r),e(ew,A7r),e(ew,nJ),e(nJ,y7r),e(ew,L7r),e(xe,x7r),e(xe,ow),e(ow,CMe),e(CMe,$7r),e(ow,k7r),e(ow,sJ),e(sJ,S7r),e(ow,R7r),e(xe,B7r),e(xe,rw),e(rw,wMe),e(wMe,P7r),e(rw,I7r),e(rw,lJ),e(lJ,q7r),e(rw,N7r),e(Dr,j7r),M(tw,Dr,null),b(m,SPe,_),b(m,Bc,_),e(Bc,aw),e(aw,AMe),M(D7,AMe,null),e(Bc,D7r),e(Bc,yMe),e(yMe,G7r),b(m,RPe,_),b(m,hr,_),M(G7,hr,null),e(hr,O7r),e(hr,Pc),e(Pc,V7r),e(Pc,iJ),e(iJ,X7r),e(Pc,z7r),e(Pc,dJ),e(dJ,Q7r),e(Pc,W7r),e(hr,H7r),e(hr,O7),e(O7,U7r),e(O7,LMe),e(LMe,J7r),e(O7,Y7r),e(hr,K7r),e(hr,Gt),M(V7,Gt,null),e(Gt,Z7r),e(Gt,xMe),e(xMe,exr),e(Gt,oxr),e(Gt,Ic),e(Ic,rxr),e(Ic,$Me),e($Me,txr),e(Ic,axr),e(Ic,cJ),e(cJ,nxr),e(Ic,sxr),e(Gt,lxr),M(nw,Gt,null),e(hr,ixr),e(hr,Gr),M(X7,Gr,null),e(Gr,dxr),e(Gr,kMe),e(kMe,cxr),e(Gr,mxr),e(Gr,hn),e(hn,fxr),e(hn,SMe),e(SMe,gxr),e(hn,hxr),e(hn,RMe),e(RMe,uxr),e(hn,pxr),e(hn,BMe),e(BMe,_xr),e(hn,bxr),e(Gr,Fxr),e(Gr,$e),e($e,sw),e(sw,PMe),e(PMe,vxr),e(sw,Txr),e(sw,mJ),e(mJ,Mxr),e(sw,Exr),e($e,Cxr),e($e,lw),e(lw,IMe),e(IMe,wxr),e(lw,Axr),e(lw,fJ),e(fJ,yxr),e(lw,Lxr),e($e,xxr),e($e,iw),e(iw,qMe),e(qMe,$xr),e(iw,kxr),e(iw,gJ),e(gJ,Sxr),e(iw,Rxr),e($e,Bxr),e($e,dw),e(dw,NMe),e(NMe,Pxr),e(dw,Ixr),e(dw,hJ),e(hJ,qxr),e(dw,Nxr),e($e,jxr),e($e,cw),e(cw,jMe),e(jMe,Dxr),e(cw,Gxr),e(cw,uJ),e(uJ,Oxr),e(cw,Vxr),e($e,Xxr),e($e,mw),e(mw,DMe),e(DMe,zxr),e(mw,Qxr),e(mw,pJ),e(pJ,Wxr),e(mw,Hxr),e($e,Uxr),e($e,fw),e(fw,GMe),e(GMe,Jxr),e(fw,Yxr),e(fw,_J),e(_J,Kxr),e(fw,Zxr),e($e,e9r),e($e,gw),e(gw,OMe),e(OMe,o9r),e(gw,r9r),e(gw,bJ),e(bJ,t9r),e(gw,a9r),e($e,n9r),e($e,hw),e(hw,VMe),e(VMe,s9r),e(hw,l9r),e(hw,FJ),e(FJ,i9r),e(hw,d9r),e($e,c9r),e($e,uw),e(uw,XMe),e(XMe,m9r),e(uw,f9r),e(uw,vJ),e(vJ,g9r),e(uw,h9r),e(Gr,u9r),M(pw,Gr,null),b(m,BPe,_),b(m,qc,_),e(qc,_w),e(_w,zMe),M(z7,zMe,null),e(qc,p9r),e(qc,QMe),e(QMe,_9r),b(m,PPe,_),b(m,ur,_),M(Q7,ur,null),e(ur,b9r),e(ur,Nc),e(Nc,F9r),e(Nc,TJ),e(TJ,v9r),e(Nc,T9r),e(Nc,MJ),e(MJ,M9r),e(Nc,E9r),e(ur,C9r),e(ur,W7),e(W7,w9r),e(W7,WMe),e(WMe,A9r),e(W7,y9r),e(ur,L9r),e(ur,Ot),M(H7,Ot,null),e(Ot,x9r),e(Ot,HMe),e(HMe,$9r),e(Ot,k9r),e(Ot,jc),e(jc,S9r),e(jc,UMe),e(UMe,R9r),e(jc,B9r),e(jc,EJ),e(EJ,P9r),e(jc,I9r),e(Ot,q9r),M(bw,Ot,null),e(ur,N9r),e(ur,Or),M(U7,Or,null),e(Or,j9r),e(Or,JMe),e(JMe,D9r),e(Or,G9r),e(Or,un),e(un,O9r),e(un,YMe),e(YMe,V9r),e(un,X9r),e(un,KMe),e(KMe,z9r),e(un,Q9r),e(un,ZMe),e(ZMe,W9r),e(un,H9r),e(Or,U9r),e(Or,je),e(je,Fw),e(Fw,e4e),e(e4e,J9r),e(Fw,Y9r),e(Fw,CJ),e(CJ,K9r),e(Fw,Z9r),e(je,e$r),e(je,vw),e(vw,o4e),e(o4e,o$r),e(vw,r$r),e(vw,wJ),e(wJ,t$r),e(vw,a$r),e(je,n$r),e(je,Tw),e(Tw,r4e),e(r4e,s$r),e(Tw,l$r),e(Tw,AJ),e(AJ,i$r),e(Tw,d$r),e(je,c$r),e(je,Mw),e(Mw,t4e),e(t4e,m$r),e(Mw,f$r),e(Mw,yJ),e(yJ,g$r),e(Mw,h$r),e(je,u$r),e(je,Ew),e(Ew,a4e),e(a4e,p$r),e(Ew,_$r),e(Ew,LJ),e(LJ,b$r),e(Ew,F$r),e(je,v$r),e(je,Cw),e(Cw,n4e),e(n4e,T$r),e(Cw,M$r),e(Cw,xJ),e(xJ,E$r),e(Cw,C$r),e(je,w$r),e(je,ww),e(ww,s4e),e(s4e,A$r),e(ww,y$r),e(ww,$J),e($J,L$r),e(ww,x$r),e(je,$$r),e(je,Aw),e(Aw,l4e),e(l4e,k$r),e(Aw,S$r),e(Aw,kJ),e(kJ,R$r),e(Aw,B$r),e(Or,P$r),M(yw,Or,null),b(m,IPe,_),b(m,Dc,_),e(Dc,Lw),e(Lw,i4e),M(J7,i4e,null),e(Dc,I$r),e(Dc,d4e),e(d4e,q$r),b(m,qPe,_),b(m,pr,_),M(Y7,pr,null),e(pr,N$r),e(pr,Gc),e(Gc,j$r),e(Gc,SJ),e(SJ,D$r),e(Gc,G$r),e(Gc,RJ),e(RJ,O$r),e(Gc,V$r),e(pr,X$r),e(pr,K7),e(K7,z$r),e(K7,c4e),e(c4e,Q$r),e(K7,W$r),e(pr,H$r),e(pr,Vt),M(Z7,Vt,null),e(Vt,U$r),e(Vt,m4e),e(m4e,J$r),e(Vt,Y$r),e(Vt,Oc),e(Oc,K$r),e(Oc,f4e),e(f4e,Z$r),e(Oc,ekr),e(Oc,BJ),e(BJ,okr),e(Oc,rkr),e(Vt,tkr),M(xw,Vt,null),e(pr,akr),e(pr,Vr),M(ex,Vr,null),e(Vr,nkr),e(Vr,g4e),e(g4e,skr),e(Vr,lkr),e(Vr,pn),e(pn,ikr),e(pn,h4e),e(h4e,dkr),e(pn,ckr),e(pn,u4e),e(u4e,mkr),e(pn,fkr),e(pn,p4e),e(p4e,gkr),e(pn,hkr),e(Vr,ukr),e(Vr,De),e(De,$w),e($w,_4e),e(_4e,pkr),e($w,_kr),e($w,PJ),e(PJ,bkr),e($w,Fkr),e(De,vkr),e(De,kw),e(kw,b4e),e(b4e,Tkr),e(kw,Mkr),e(kw,IJ),e(IJ,Ekr),e(kw,Ckr),e(De,wkr),e(De,Sw),e(Sw,F4e),e(F4e,Akr),e(Sw,ykr),e(Sw,qJ),e(qJ,Lkr),e(Sw,xkr),e(De,$kr),e(De,Rw),e(Rw,v4e),e(v4e,kkr),e(Rw,Skr),e(Rw,NJ),e(NJ,Rkr),e(Rw,Bkr),e(De,Pkr),e(De,Bw),e(Bw,T4e),e(T4e,Ikr),e(Bw,qkr),e(Bw,jJ),e(jJ,Nkr),e(Bw,jkr),e(De,Dkr),e(De,Pw),e(Pw,M4e),e(M4e,Gkr),e(Pw,Okr),e(Pw,DJ),e(DJ,Vkr),e(Pw,Xkr),e(De,zkr),e(De,Iw),e(Iw,E4e),e(E4e,Qkr),e(Iw,Wkr),e(Iw,GJ),e(GJ,Hkr),e(Iw,Ukr),e(De,Jkr),e(De,qw),e(qw,C4e),e(C4e,Ykr),e(qw,Kkr),e(qw,OJ),e(OJ,Zkr),e(qw,eSr),e(Vr,oSr),M(Nw,Vr,null),b(m,NPe,_),b(m,Vc,_),e(Vc,jw),e(jw,w4e),M(ox,w4e,null),e(Vc,rSr),e(Vc,A4e),e(A4e,tSr),b(m,jPe,_),b(m,_r,_),M(rx,_r,null),e(_r,aSr),e(_r,Xc),e(Xc,nSr),e(Xc,VJ),e(VJ,sSr),e(Xc,lSr),e(Xc,XJ),e(XJ,iSr),e(Xc,dSr),e(_r,cSr),e(_r,tx),e(tx,mSr),e(tx,y4e),e(y4e,fSr),e(tx,gSr),e(_r,hSr),e(_r,Xt),M(ax,Xt,null),e(Xt,uSr),e(Xt,L4e),e(L4e,pSr),e(Xt,_Sr),e(Xt,zc),e(zc,bSr),e(zc,x4e),e(x4e,FSr),e(zc,vSr),e(zc,zJ),e(zJ,TSr),e(zc,MSr),e(Xt,ESr),M(Dw,Xt,null),e(_r,CSr),e(_r,Xr),M(nx,Xr,null),e(Xr,wSr),e(Xr,$4e),e($4e,ASr),e(Xr,ySr),e(Xr,_n),e(_n,LSr),e(_n,k4e),e(k4e,xSr),e(_n,$Sr),e(_n,S4e),e(S4e,kSr),e(_n,SSr),e(_n,R4e),e(R4e,RSr),e(_n,BSr),e(Xr,PSr),e(Xr,B4e),e(B4e,Gw),e(Gw,P4e),e(P4e,ISr),e(Gw,qSr),e(Gw,QJ),e(QJ,NSr),e(Gw,jSr),e(Xr,DSr),M(Ow,Xr,null),b(m,DPe,_),b(m,Qc,_),e(Qc,Vw),e(Vw,I4e),M(sx,I4e,null),e(Qc,GSr),e(Qc,q4e),e(q4e,OSr),b(m,GPe,_),b(m,br,_),M(lx,br,null),e(br,VSr),e(br,Wc),e(Wc,XSr),e(Wc,WJ),e(WJ,zSr),e(Wc,QSr),e(Wc,HJ),e(HJ,WSr),e(Wc,HSr),e(br,USr),e(br,ix),e(ix,JSr),e(ix,N4e),e(N4e,YSr),e(ix,KSr),e(br,ZSr),e(br,zt),M(dx,zt,null),e(zt,eRr),e(zt,j4e),e(j4e,oRr),e(zt,rRr),e(zt,Hc),e(Hc,tRr),e(Hc,D4e),e(D4e,aRr),e(Hc,nRr),e(Hc,UJ),e(UJ,sRr),e(Hc,lRr),e(zt,iRr),M(Xw,zt,null),e(br,dRr),e(br,zr),M(cx,zr,null),e(zr,cRr),e(zr,G4e),e(G4e,mRr),e(zr,fRr),e(zr,bn),e(bn,gRr),e(bn,O4e),e(O4e,hRr),e(bn,uRr),e(bn,V4e),e(V4e,pRr),e(bn,_Rr),e(bn,X4e),e(X4e,bRr),e(bn,FRr),e(zr,vRr),e(zr,mx),e(mx,zw),e(zw,z4e),e(z4e,TRr),e(zw,MRr),e(zw,JJ),e(JJ,ERr),e(zw,CRr),e(mx,wRr),e(mx,Qw),e(Qw,Q4e),e(Q4e,ARr),e(Qw,yRr),e(Qw,YJ),e(YJ,LRr),e(Qw,xRr),e(zr,$Rr),M(Ww,zr,null),b(m,OPe,_),b(m,Uc,_),e(Uc,Hw),e(Hw,W4e),M(fx,W4e,null),e(Uc,kRr),e(Uc,H4e),e(H4e,SRr),b(m,VPe,_),b(m,Fr,_),M(gx,Fr,null),e(Fr,RRr),e(Fr,Jc),e(Jc,BRr),e(Jc,KJ),e(KJ,PRr),e(Jc,IRr),e(Jc,ZJ),e(ZJ,qRr),e(Jc,NRr),e(Fr,jRr),e(Fr,hx),e(hx,DRr),e(hx,U4e),e(U4e,GRr),e(hx,ORr),e(Fr,VRr),e(Fr,Qt),M(ux,Qt,null),e(Qt,XRr),e(Qt,J4e),e(J4e,zRr),e(Qt,QRr),e(Qt,Yc),e(Yc,WRr),e(Yc,Y4e),e(Y4e,HRr),e(Yc,URr),e(Yc,eY),e(eY,JRr),e(Yc,YRr),e(Qt,KRr),M(Uw,Qt,null),e(Fr,ZRr),e(Fr,Qr),M(px,Qr,null),e(Qr,eBr),e(Qr,K4e),e(K4e,oBr),e(Qr,rBr),e(Qr,Fn),e(Fn,tBr),e(Fn,Z4e),e(Z4e,aBr),e(Fn,nBr),e(Fn,eEe),e(eEe,sBr),e(Fn,lBr),e(Fn,oEe),e(oEe,iBr),e(Fn,dBr),e(Qr,cBr),e(Qr,rEe),e(rEe,Jw),e(Jw,tEe),e(tEe,mBr),e(Jw,fBr),e(Jw,oY),e(oY,gBr),e(Jw,hBr),e(Qr,uBr),M(Yw,Qr,null),XPe=!0},p(m,[_]){const _x={};_&2&&(_x.$$scope={dirty:_,ctx:m}),sm.$set(_x);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:m}),ag.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:m}),Ig.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:m}),dh.$set(sEe);const bx={};_&2&&(bx.$$scope={dirty:_,ctx:m}),ch.$set(bx);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:m}),yh.$set(lEe);const vn={};_&2&&(vn.$$scope={dirty:_,ctx:m}),Lh.$set(vn);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:m}),kh.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:m}),Fp.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:m}),Tp.$set(cEe);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:m}),i_.$set(Fx);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:m}),c_.$set(mEe);const vx={};_&2&&(vx.$$scope={dirty:_,ctx:m}),W_.$set(vx);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:m}),U_.$set(fEe);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:m}),Sb.$set(Tx);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:m}),Bb.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:m}),Zb.$set(hEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:m}),o2.$set(uEe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:m}),J2.$set(Kc);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:m}),K2.$set(pEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:m}),LF.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:m}),$F.$set(bEe);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:m}),qF.$set(Mx);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:m}),jF.$set(FEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:m}),vv.$set(vEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:m}),Mv.$set(TEe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:m}),d1.$set(Ur);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:m}),m1.$set(Ex);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:m}),h1.$set(MEe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:m}),p1.$set(Cx);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:m}),x1.$set(EEe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:m}),k1.$set(Jr);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:m}),B1.$set(CEe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:m}),I1.$set(Zc);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:m}),Q1.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:m}),H1.$set(AEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),eT.$set(y);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:m}),rT.$set(Kw);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:m}),fT.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:m}),hT.$set(LEe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:m}),bT.$set(Zw);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:m}),vT.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:m}),AT.$set($Ee);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:m}),LT.$set(eA);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:m}),RT.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:m}),PT.$set(SEe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:m}),jT.$set(oA);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:m}),GT.$set(REe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:m}),XT.$set(BEe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:m}),QT.$set(rA);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:m}),KT.$set(PEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:m}),eM.$set(IEe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:m}),tM.$set(tA);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:m}),nM.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:m}),UM.$set(NEe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:m}),YM.$set(aA);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:m}),T4.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:m}),E4.$set(DEe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:m}),I4.$set(nA);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:m}),N4.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:m}),G4.$set(OEe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),V4.$set(sA);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:m}),cE.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:m}),fE.$set(XEe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),EE.$set(lA);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:m}),wE.$set(zEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:m}),KE.$set(QEe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),e5.$set(iA);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:m}),b5.$set(WEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:m}),v5.$set(HEe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),M5.$set(dA);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:m}),C5.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:m}),z5.$set(JEe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),W5.$set(cA);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:m}),hC.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:m}),pC.$set(KEe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),bC.$set(mA);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:m}),vC.$set(ZEe);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:m}),MC.$set(e5e);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),CC.$set(fA);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:m}),JC.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:m}),KC.$set(r5e);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),a3.$set(gA);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:m}),s3.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:m}),F3.$set(a5e);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),T3.$set(hA);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:m}),S3.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:m}),B3.$set(s5e);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),X3.$set(uA);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:m}),Q3.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:m}),tw.$set(i5e);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:m}),nw.$set(pA);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:m}),pw.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:m}),bw.$set(c5e);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:m}),yw.$set(_A);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:m}),xw.$set(m5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:m}),Nw.$set(f5e);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:m}),Dw.$set(bA);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:m}),Ow.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:m}),Xw.$set(h5e);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),Ww.$set(FA);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:m}),Uw.$set(u5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),Yw.$set(p5e)},i(m){XPe||(E(d.$$.fragment,m),E(ba.$$.fragment,m),E(_6.$$.fragment,m),E(b6.$$.fragment,m),E(sm.$$.fragment,m),E(F6.$$.fragment,m),E(v6.$$.fragment,m),E(E6.$$.fragment,m),E(ag.$$.fragment,m),E(C6.$$.fragment,m),E(w6.$$.fragment,m),E(A6.$$.fragment,m),E(x6.$$.fragment,m),E(Ig.$$.fragment,m),E($6.$$.fragment,m),E(k6.$$.fragment,m),E(S6.$$.fragment,m),E(P6.$$.fragment,m),E(dh.$$.fragment,m),E(ch.$$.fragment,m),E(I6.$$.fragment,m),E(q6.$$.fragment,m),E(N6.$$.fragment,m),E(G6.$$.fragment,m),E(yh.$$.fragment,m),E(Lh.$$.fragment,m),E(O6.$$.fragment,m),E(V6.$$.fragment,m),E(X6.$$.fragment,m),E(Q6.$$.fragment,m),E(kh.$$.fragment,m),E(W6.$$.fragment,m),E(Fp.$$.fragment,m),E(H6.$$.fragment,m),E(U6.$$.fragment,m),E(Y6.$$.fragment,m),E(Tp.$$.fragment,m),E(K6.$$.fragment,m),E(i_.$$.fragment,m),E(Z6.$$.fragment,m),E(ey.$$.fragment,m),E(ry.$$.fragment,m),E(c_.$$.fragment,m),E(ty.$$.fragment,m),E(W_.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(ly.$$.fragment,m),E(U_.$$.fragment,m),E(iy.$$.fragment,m),E(Sb.$$.fragment,m),E(dy.$$.fragment,m),E(cy.$$.fragment,m),E(fy.$$.fragment,m),E(Bb.$$.fragment,m),E(gy.$$.fragment,m),E(Zb.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(_y.$$.fragment,m),E(o2.$$.fragment,m),E(by.$$.fragment,m),E(J2.$$.fragment,m),E(Fy.$$.fragment,m),E(vy.$$.fragment,m),E(My.$$.fragment,m),E(K2.$$.fragment,m),E(Ey.$$.fragment,m),E(LF.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(yy.$$.fragment,m),E($F.$$.fragment,m),E(Ly.$$.fragment,m),E(qF.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(Sy.$$.fragment,m),E(jF.$$.fragment,m),E(Ry.$$.fragment,m),E(vv.$$.fragment,m),E(By.$$.fragment,m),E(Py.$$.fragment,m),E(qy.$$.fragment,m),E(Mv.$$.fragment,m),E(Ny.$$.fragment,m),E(d1.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Oy.$$.fragment,m),E(m1.$$.fragment,m),E(Vy.$$.fragment,m),E(h1.$$.fragment,m),E(Xy.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(p1.$$.fragment,m),E(Hy.$$.fragment,m),E(x1.$$.fragment,m),E(Uy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ky.$$.fragment,m),E(k1.$$.fragment,m),E(Zy.$$.fragment,m),E(B1.$$.fragment,m),E(eL.$$.fragment,m),E(oL.$$.fragment,m),E(tL.$$.fragment,m),E(I1.$$.fragment,m),E(aL.$$.fragment,m),E(Q1.$$.fragment,m),E(nL.$$.fragment,m),E(sL.$$.fragment,m),E(iL.$$.fragment,m),E(H1.$$.fragment,m),E(dL.$$.fragment,m),E(eT.$$.fragment,m),E(cL.$$.fragment,m),E(mL.$$.fragment,m),E(gL.$$.fragment,m),E(rT.$$.fragment,m),E(hL.$$.fragment,m),E(fT.$$.fragment,m),E(uL.$$.fragment,m),E(pL.$$.fragment,m),E(bL.$$.fragment,m),E(hT.$$.fragment,m),E(FL.$$.fragment,m),E(bT.$$.fragment,m),E(TL.$$.fragment,m),E(ML.$$.fragment,m),E(CL.$$.fragment,m),E(vT.$$.fragment,m),E(wL.$$.fragment,m),E(AT.$$.fragment,m),E(AL.$$.fragment,m),E(yL.$$.fragment,m),E(xL.$$.fragment,m),E(LT.$$.fragment,m),E($L.$$.fragment,m),E(RT.$$.fragment,m),E(kL.$$.fragment,m),E(SL.$$.fragment,m),E(BL.$$.fragment,m),E(PT.$$.fragment,m),E(PL.$$.fragment,m),E(jT.$$.fragment,m),E(qL.$$.fragment,m),E(NL.$$.fragment,m),E(DL.$$.fragment,m),E(GT.$$.fragment,m),E(GL.$$.fragment,m),E(XT.$$.fragment,m),E(OL.$$.fragment,m),E(VL.$$.fragment,m),E(zL.$$.fragment,m),E(QT.$$.fragment,m),E(QL.$$.fragment,m),E(KT.$$.fragment,m),E(WL.$$.fragment,m),E(HL.$$.fragment,m),E(JL.$$.fragment,m),E(eM.$$.fragment,m),E(YL.$$.fragment,m),E(tM.$$.fragment,m),E(KL.$$.fragment,m),E(ZL.$$.fragment,m),E(o8.$$.fragment,m),E(nM.$$.fragment,m),E(r8.$$.fragment,m),E(UM.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(YM.$$.fragment,m),E(l8.$$.fragment,m),E(T4.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(E4.$$.fragment,m),E(f8.$$.fragment,m),E(I4.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(N4.$$.fragment,m),E(_8.$$.fragment,m),E(G4.$$.fragment,m),E(F8.$$.fragment,m),E(v8.$$.fragment,m),E(M8.$$.fragment,m),E(V4.$$.fragment,m),E(E8.$$.fragment,m),E(cE.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(y8.$$.fragment,m),E(fE.$$.fragment,m),E(L8.$$.fragment,m),E(EE.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(wE.$$.fragment,m),E(R8.$$.fragment,m),E(KE.$$.fragment,m),E(B8.$$.fragment,m),E(P8.$$.fragment,m),E(q8.$$.fragment,m),E(e5.$$.fragment,m),E(N8.$$.fragment,m),E(b5.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(O8.$$.fragment,m),E(v5.$$.fragment,m),E(V8.$$.fragment,m),E(M5.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(C5.$$.fragment,m),E(H8.$$.fragment,m),E(z5.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(W5.$$.fragment,m),E(Z8.$$.fragment,m),E(hC.$$.fragment,m),E(e7.$$.fragment,m),E(o7.$$.fragment,m),E(t7.$$.fragment,m),E(pC.$$.fragment,m),E(a7.$$.fragment,m),E(bC.$$.fragment,m),E(n7.$$.fragment,m),E(s7.$$.fragment,m),E(i7.$$.fragment,m),E(vC.$$.fragment,m),E(d7.$$.fragment,m),E(MC.$$.fragment,m),E(c7.$$.fragment,m),E(m7.$$.fragment,m),E(g7.$$.fragment,m),E(CC.$$.fragment,m),E(h7.$$.fragment,m),E(JC.$$.fragment,m),E(u7.$$.fragment,m),E(p7.$$.fragment,m),E(b7.$$.fragment,m),E(KC.$$.fragment,m),E(F7.$$.fragment,m),E(a3.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(E7.$$.fragment,m),E(s3.$$.fragment,m),E(C7.$$.fragment,m),E(F3.$$.fragment,m),E(w7.$$.fragment,m),E(A7.$$.fragment,m),E(L7.$$.fragment,m),E(T3.$$.fragment,m),E(x7.$$.fragment,m),E(S3.$$.fragment,m),E($7.$$.fragment,m),E(k7.$$.fragment,m),E(R7.$$.fragment,m),E(B3.$$.fragment,m),E(B7.$$.fragment,m),E(X3.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(N7.$$.fragment,m),E(Q3.$$.fragment,m),E(j7.$$.fragment,m),E(tw.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(V7.$$.fragment,m),E(nw.$$.fragment,m),E(X7.$$.fragment,m),E(pw.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(bw.$$.fragment,m),E(U7.$$.fragment,m),E(yw.$$.fragment,m),E(J7.$$.fragment,m),E(Y7.$$.fragment,m),E(Z7.$$.fragment,m),E(xw.$$.fragment,m),E(ex.$$.fragment,m),E(Nw.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(Dw.$$.fragment,m),E(nx.$$.fragment,m),E(Ow.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(Xw.$$.fragment,m),E(cx.$$.fragment,m),E(Ww.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(Uw.$$.fragment,m),E(px.$$.fragment,m),E(Yw.$$.fragment,m),XPe=!0)},o(m){C(d.$$.fragment,m),C(ba.$$.fragment,m),C(_6.$$.fragment,m),C(b6.$$.fragment,m),C(sm.$$.fragment,m),C(F6.$$.fragment,m),C(v6.$$.fragment,m),C(E6.$$.fragment,m),C(ag.$$.fragment,m),C(C6.$$.fragment,m),C(w6.$$.fragment,m),C(A6.$$.fragment,m),C(x6.$$.fragment,m),C(Ig.$$.fragment,m),C($6.$$.fragment,m),C(k6.$$.fragment,m),C(S6.$$.fragment,m),C(P6.$$.fragment,m),C(dh.$$.fragment,m),C(ch.$$.fragment,m),C(I6.$$.fragment,m),C(q6.$$.fragment,m),C(N6.$$.fragment,m),C(G6.$$.fragment,m),C(yh.$$.fragment,m),C(Lh.$$.fragment,m),C(O6.$$.fragment,m),C(V6.$$.fragment,m),C(X6.$$.fragment,m),C(Q6.$$.fragment,m),C(kh.$$.fragment,m),C(W6.$$.fragment,m),C(Fp.$$.fragment,m),C(H6.$$.fragment,m),C(U6.$$.fragment,m),C(Y6.$$.fragment,m),C(Tp.$$.fragment,m),C(K6.$$.fragment,m),C(i_.$$.fragment,m),C(Z6.$$.fragment,m),C(ey.$$.fragment,m),C(ry.$$.fragment,m),C(c_.$$.fragment,m),C(ty.$$.fragment,m),C(W_.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(ly.$$.fragment,m),C(U_.$$.fragment,m),C(iy.$$.fragment,m),C(Sb.$$.fragment,m),C(dy.$$.fragment,m),C(cy.$$.fragment,m),C(fy.$$.fragment,m),C(Bb.$$.fragment,m),C(gy.$$.fragment,m),C(Zb.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(_y.$$.fragment,m),C(o2.$$.fragment,m),C(by.$$.fragment,m),C(J2.$$.fragment,m),C(Fy.$$.fragment,m),C(vy.$$.fragment,m),C(My.$$.fragment,m),C(K2.$$.fragment,m),C(Ey.$$.fragment,m),C(LF.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(yy.$$.fragment,m),C($F.$$.fragment,m),C(Ly.$$.fragment,m),C(qF.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(Sy.$$.fragment,m),C(jF.$$.fragment,m),C(Ry.$$.fragment,m),C(vv.$$.fragment,m),C(By.$$.fragment,m),C(Py.$$.fragment,m),C(qy.$$.fragment,m),C(Mv.$$.fragment,m),C(Ny.$$.fragment,m),C(d1.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Oy.$$.fragment,m),C(m1.$$.fragment,m),C(Vy.$$.fragment,m),C(h1.$$.fragment,m),C(Xy.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(p1.$$.fragment,m),C(Hy.$$.fragment,m),C(x1.$$.fragment,m),C(Uy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ky.$$.fragment,m),C(k1.$$.fragment,m),C(Zy.$$.fragment,m),C(B1.$$.fragment,m),C(eL.$$.fragment,m),C(oL.$$.fragment,m),C(tL.$$.fragment,m),C(I1.$$.fragment,m),C(aL.$$.fragment,m),C(Q1.$$.fragment,m),C(nL.$$.fragment,m),C(sL.$$.fragment,m),C(iL.$$.fragment,m),C(H1.$$.fragment,m),C(dL.$$.fragment,m),C(eT.$$.fragment,m),C(cL.$$.fragment,m),C(mL.$$.fragment,m),C(gL.$$.fragment,m),C(rT.$$.fragment,m),C(hL.$$.fragment,m),C(fT.$$.fragment,m),C(uL.$$.fragment,m),C(pL.$$.fragment,m),C(bL.$$.fragment,m),C(hT.$$.fragment,m),C(FL.$$.fragment,m),C(bT.$$.fragment,m),C(TL.$$.fragment,m),C(ML.$$.fragment,m),C(CL.$$.fragment,m),C(vT.$$.fragment,m),C(wL.$$.fragment,m),C(AT.$$.fragment,m),C(AL.$$.fragment,m),C(yL.$$.fragment,m),C(xL.$$.fragment,m),C(LT.$$.fragment,m),C($L.$$.fragment,m),C(RT.$$.fragment,m),C(kL.$$.fragment,m),C(SL.$$.fragment,m),C(BL.$$.fragment,m),C(PT.$$.fragment,m),C(PL.$$.fragment,m),C(jT.$$.fragment,m),C(qL.$$.fragment,m),C(NL.$$.fragment,m),C(DL.$$.fragment,m),C(GT.$$.fragment,m),C(GL.$$.fragment,m),C(XT.$$.fragment,m),C(OL.$$.fragment,m),C(VL.$$.fragment,m),C(zL.$$.fragment,m),C(QT.$$.fragment,m),C(QL.$$.fragment,m),C(KT.$$.fragment,m),C(WL.$$.fragment,m),C(HL.$$.fragment,m),C(JL.$$.fragment,m),C(eM.$$.fragment,m),C(YL.$$.fragment,m),C(tM.$$.fragment,m),C(KL.$$.fragment,m),C(ZL.$$.fragment,m),C(o8.$$.fragment,m),C(nM.$$.fragment,m),C(r8.$$.fragment,m),C(UM.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(YM.$$.fragment,m),C(l8.$$.fragment,m),C(T4.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(E4.$$.fragment,m),C(f8.$$.fragment,m),C(I4.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(N4.$$.fragment,m),C(_8.$$.fragment,m),C(G4.$$.fragment,m),C(F8.$$.fragment,m),C(v8.$$.fragment,m),C(M8.$$.fragment,m),C(V4.$$.fragment,m),C(E8.$$.fragment,m),C(cE.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(y8.$$.fragment,m),C(fE.$$.fragment,m),C(L8.$$.fragment,m),C(EE.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(wE.$$.fragment,m),C(R8.$$.fragment,m),C(KE.$$.fragment,m),C(B8.$$.fragment,m),C(P8.$$.fragment,m),C(q8.$$.fragment,m),C(e5.$$.fragment,m),C(N8.$$.fragment,m),C(b5.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(O8.$$.fragment,m),C(v5.$$.fragment,m),C(V8.$$.fragment,m),C(M5.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(C5.$$.fragment,m),C(H8.$$.fragment,m),C(z5.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(W5.$$.fragment,m),C(Z8.$$.fragment,m),C(hC.$$.fragment,m),C(e7.$$.fragment,m),C(o7.$$.fragment,m),C(t7.$$.fragment,m),C(pC.$$.fragment,m),C(a7.$$.fragment,m),C(bC.$$.fragment,m),C(n7.$$.fragment,m),C(s7.$$.fragment,m),C(i7.$$.fragment,m),C(vC.$$.fragment,m),C(d7.$$.fragment,m),C(MC.$$.fragment,m),C(c7.$$.fragment,m),C(m7.$$.fragment,m),C(g7.$$.fragment,m),C(CC.$$.fragment,m),C(h7.$$.fragment,m),C(JC.$$.fragment,m),C(u7.$$.fragment,m),C(p7.$$.fragment,m),C(b7.$$.fragment,m),C(KC.$$.fragment,m),C(F7.$$.fragment,m),C(a3.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(E7.$$.fragment,m),C(s3.$$.fragment,m),C(C7.$$.fragment,m),C(F3.$$.fragment,m),C(w7.$$.fragment,m),C(A7.$$.fragment,m),C(L7.$$.fragment,m),C(T3.$$.fragment,m),C(x7.$$.fragment,m),C(S3.$$.fragment,m),C($7.$$.fragment,m),C(k7.$$.fragment,m),C(R7.$$.fragment,m),C(B3.$$.fragment,m),C(B7.$$.fragment,m),C(X3.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(N7.$$.fragment,m),C(Q3.$$.fragment,m),C(j7.$$.fragment,m),C(tw.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(V7.$$.fragment,m),C(nw.$$.fragment,m),C(X7.$$.fragment,m),C(pw.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(bw.$$.fragment,m),C(U7.$$.fragment,m),C(yw.$$.fragment,m),C(J7.$$.fragment,m),C(Y7.$$.fragment,m),C(Z7.$$.fragment,m),C(xw.$$.fragment,m),C(ex.$$.fragment,m),C(Nw.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(Dw.$$.fragment,m),C(nx.$$.fragment,m),C(Ow.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(Xw.$$.fragment,m),C(cx.$$.fragment,m),C(Ww.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(Uw.$$.fragment,m),C(px.$$.fragment,m),C(Yw.$$.fragment,m),XPe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(om),m&&t(Yr),m&&t(Ie),m&&t(Oe),m&&t(tm),w(ba,m),m&&t(Ve),m&&t(Ae),m&&t(To),m&&t(Fa),m&&t(VRe),m&&t(ii),w(_6),m&&t(XRe),m&&t(wn),m&&t(zRe),w(b6,m),m&&t(QRe),m&&t(B9),m&&t(WRe),w(sm,m),m&&t(HRe),m&&t(di),w(F6),m&&t(URe),m&&t(Mo),w(v6),w(E6),w(ag),w(C6),m&&t(JRe),m&&t(mi),w(w6),m&&t(YRe),m&&t(Eo),w(A6),w(x6),w(Ig),w($6),m&&t(KRe),m&&t(fi),w(k6),m&&t(ZRe),m&&t(Co),w(S6),w(P6),w(dh),w(ch),w(I6),m&&t(eBe),m&&t(gi),w(q6),m&&t(oBe),m&&t(wo),w(N6),w(G6),w(yh),w(Lh),w(O6),m&&t(rBe),m&&t(ui),w(V6),m&&t(tBe),m&&t(Ao),w(X6),w(Q6),w(kh),w(W6),w(Fp),m&&t(aBe),m&&t(bi),w(H6),m&&t(nBe),m&&t(yo),w(U6),w(Y6),w(Tp),w(K6),w(i_),m&&t(sBe),m&&t(Ti),w(Z6),m&&t(lBe),m&&t(Lo),w(ey),w(ry),w(c_),w(ty),w(W_),m&&t(iBe),m&&t(Ci),w(ay),m&&t(dBe),m&&t(xo),w(ny),w(ly),w(U_),w(iy),w(Sb),m&&t(cBe),m&&t(yi),w(dy),m&&t(mBe),m&&t($o),w(cy),w(fy),w(Bb),w(gy),w(Zb),m&&t(fBe),m&&t($i),w(hy),m&&t(gBe),m&&t(ko),w(uy),w(_y),w(o2),w(by),w(J2),m&&t(hBe),m&&t(Ri),w(Fy),m&&t(uBe),m&&t(So),w(vy),w(My),w(K2),w(Ey),w(LF),m&&t(pBe),m&&t(Ii),w(Cy),m&&t(_Be),m&&t(Ro),w(wy),w(yy),w($F),w(Ly),w(qF),m&&t(bBe),m&&t(ji),w(xy),m&&t(FBe),m&&t(Bo),w($y),w(Sy),w(jF),w(Ry),w(vv),m&&t(vBe),m&&t(Oi),w(By),m&&t(TBe),m&&t(Po),w(Py),w(qy),w(Mv),w(Ny),w(d1),m&&t(MBe),m&&t(zi),w(jy),m&&t(EBe),m&&t(Io),w(Dy),w(Oy),w(m1),w(Vy),w(h1),m&&t(CBe),m&&t(Hi),w(Xy),m&&t(wBe),m&&t(qo),w(zy),w(Wy),w(p1),w(Hy),w(x1),m&&t(ABe),m&&t(Yi),w(Uy),m&&t(yBe),m&&t(No),w(Jy),w(Ky),w(k1),w(Zy),w(B1),m&&t(LBe),m&&t(ed),w(eL),m&&t(xBe),m&&t(jo),w(oL),w(tL),w(I1),w(aL),w(Q1),m&&t($Be),m&&t(td),w(nL),m&&t(kBe),m&&t(Do),w(sL),w(iL),w(H1),w(dL),w(eT),m&&t(SBe),m&&t(sd),w(cL),m&&t(RBe),m&&t(Go),w(mL),w(gL),w(rT),w(hL),w(fT),m&&t(BBe),m&&t(dd),w(uL),m&&t(PBe),m&&t(Oo),w(pL),w(bL),w(hT),w(FL),w(bT),m&&t(IBe),m&&t(fd),w(TL),m&&t(qBe),m&&t(Vo),w(ML),w(CL),w(vT),w(wL),w(AT),m&&t(NBe),m&&t(ud),w(AL),m&&t(jBe),m&&t(Xo),w(yL),w(xL),w(LT),w($L),w(RT),m&&t(DBe),m&&t(Fd),w(kL),m&&t(GBe),m&&t(zo),w(SL),w(BL),w(PT),w(PL),w(jT),m&&t(OBe),m&&t(Md),w(qL),m&&t(VBe),m&&t(Qo),w(NL),w(DL),w(GT),w(GL),w(XT),m&&t(XBe),m&&t(wd),w(OL),m&&t(zBe),m&&t(Wo),w(VL),w(zL),w(QT),w(QL),w(KT),m&&t(QBe),m&&t(Ld),w(WL),m&&t(WBe),m&&t(Ho),w(HL),w(JL),w(eM),w(YL),w(tM),m&&t(HBe),m&&t(kd),w(KL),m&&t(UBe),m&&t(Uo),w(ZL),w(o8),w(nM),w(r8),w(UM),m&&t(JBe),m&&t(Bd),w(t8),m&&t(YBe),m&&t(Jo),w(a8),w(s8),w(YM),w(l8),w(T4),m&&t(KBe),m&&t(qd),w(i8),m&&t(ZBe),m&&t(Yo),w(d8),w(m8),w(E4),w(f8),w(I4),m&&t(ePe),m&&t(Dd),w(g8),m&&t(oPe),m&&t(Ko),w(h8),w(p8),w(N4),w(_8),w(G4),m&&t(rPe),m&&t(Vd),w(F8),m&&t(tPe),m&&t(Zo),w(v8),w(M8),w(V4),w(E8),w(cE),m&&t(aPe),m&&t(Qd),w(C8),m&&t(nPe),m&&t(er),w(w8),w(y8),w(fE),w(L8),w(EE),m&&t(sPe),m&&t(Ud),w(x8),m&&t(lPe),m&&t(or),w($8),w(S8),w(wE),w(R8),w(KE),m&&t(iPe),m&&t(Kd),w(B8),m&&t(dPe),m&&t(rr),w(P8),w(q8),w(e5),w(N8),w(b5),m&&t(cPe),m&&t(oc),w(j8),m&&t(mPe),m&&t(tr),w(D8),w(O8),w(v5),w(V8),w(M5),m&&t(fPe),m&&t(ac),w(X8),m&&t(gPe),m&&t(ar),w(z8),w(W8),w(C5),w(H8),w(z5),m&&t(hPe),m&&t(lc),w(U8),m&&t(uPe),m&&t(nr),w(J8),w(K8),w(W5),w(Z8),w(hC),m&&t(pPe),m&&t(cc),w(e7),m&&t(_Pe),m&&t(sr),w(o7),w(t7),w(pC),w(a7),w(bC),m&&t(bPe),m&&t(gc),w(n7),m&&t(FPe),m&&t(lr),w(s7),w(i7),w(vC),w(d7),w(MC),m&&t(vPe),m&&t(pc),w(c7),m&&t(TPe),m&&t(ir),w(m7),w(g7),w(CC),w(h7),w(JC),m&&t(MPe),m&&t(Fc),w(u7),m&&t(EPe),m&&t(dr),w(p7),w(b7),w(KC),w(F7),w(a3),m&&t(CPe),m&&t(Mc),w(v7),m&&t(wPe),m&&t(cr),w(T7),w(E7),w(s3),w(C7),w(F3),m&&t(APe),m&&t(wc),w(w7),m&&t(yPe),m&&t(mr),w(A7),w(L7),w(T3),w(x7),w(S3),m&&t(LPe),m&&t(Lc),w($7),m&&t(xPe),m&&t(fr),w(k7),w(R7),w(B3),w(B7),w(X3),m&&t($Pe),m&&t(kc),w(P7),m&&t(kPe),m&&t(gr),w(I7),w(N7),w(Q3),w(j7),w(tw),m&&t(SPe),m&&t(Bc),w(D7),m&&t(RPe),m&&t(hr),w(G7),w(V7),w(nw),w(X7),w(pw),m&&t(BPe),m&&t(qc),w(z7),m&&t(PPe),m&&t(ur),w(Q7),w(H7),w(bw),w(U7),w(yw),m&&t(IPe),m&&t(Dc),w(J7),m&&t(qPe),m&&t(pr),w(Y7),w(Z7),w(xw),w(ex),w(Nw),m&&t(NPe),m&&t(Vc),w(ox),m&&t(jPe),m&&t(_r),w(rx),w(ax),w(Dw),w(nx),w(Ow),m&&t(DPe),m&&t(Qc),w(sx),m&&t(GPe),m&&t(br),w(lx),w(dx),w(Xw),w(cx),w(Ww),m&&t(OPe),m&&t(Uc),w(fx),m&&t(VPe),m&&t(Fr),w(gx),w(ux),w(Uw),w(px),w(Yw)}}}const Hwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Uwt(L){return YCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rAt extends WCt{constructor(g){super();HCt(this,g,Uwt,Wwt,UCt,{})}}export{rAt as default,Hwt as metadata};
