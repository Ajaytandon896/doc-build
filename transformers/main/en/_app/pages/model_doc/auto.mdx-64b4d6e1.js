import{S as T7t,i as M7t,s as E7t,e as a,k as l,w as F,t as o,M as C7t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as w7t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function A7t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,cy,hm,je,We,gi,yn,my,Ln,xn,fy,hi,$n,gy,ui,um,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),gm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),fi=o('"new-model"'),cy=o(")."),hm=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),my=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),fy=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),gy=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),um=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var k$=s(u);f=r(k$,"NewModelConfig"),k$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var S$=s(ci);gm=r(S$,"model_type"),S$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var R$=s(mi);fi=r(R$,'"new-model"'),R$.forEach(t),cy=r(Ae,")."),Ae.forEach(t),hm=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),my=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var P$=s(Ln);xn=r(P$,"PreTrainedModel"),P$.forEach(t),fy=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var pm=s(hi);$n=r(pm,"config_class"),pm.forEach(t),gy=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var B$=s(ui);um=r(B$,"NewModelConfig"),B$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,gm),e(g,rt),e(g,mi),e(mi,fi),e(g,cy),b(Qe,hm,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,my),e(je,Ln),e(Ln,xn),e(je,fy),e(je,hi),e(hi,$n),e(je,gy),e(je,ui),e(ui,um),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(hm),Qe&&t(je)}}}function y7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x7t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function $7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k7t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function S7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z9t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,cy,hm,je,We,gi,yn,my,Ln,xn,fy,hi,$n,gy,ui,um,Ca,Qe,Ae,k$,pi,S$,R$,Eo,wa,P$,pm,B$,cGe,ZIe,_i,_m,See,hy,mGe,Ree,fGe,eqe,kn,gGe,Pee,hGe,uGe,Bee,pGe,_Ge,oqe,uy,rqe,I$,bGe,tqe,bm,aqe,bi,vm,Iee,py,vGe,qee,FGe,nqe,Co,_y,TGe,by,MGe,q$,EGe,CGe,wGe,vy,AGe,Nee,yGe,LGe,xGe,Er,Fy,$Ge,jee,kGe,SGe,vi,RGe,Dee,PGe,BGe,Gee,IGe,qGe,NGe,A,Fm,Oee,jGe,DGe,N$,GGe,OGe,VGe,Tm,Vee,XGe,zGe,j$,WGe,QGe,HGe,Mm,Xee,UGe,JGe,D$,YGe,KGe,ZGe,Em,zee,eOe,oOe,G$,rOe,tOe,aOe,Cm,Wee,nOe,sOe,O$,lOe,iOe,dOe,wm,Qee,cOe,mOe,V$,fOe,gOe,hOe,Am,Hee,uOe,pOe,X$,_Oe,bOe,vOe,ym,Uee,FOe,TOe,z$,MOe,EOe,COe,Lm,Jee,wOe,AOe,W$,yOe,LOe,xOe,xm,Yee,$Oe,kOe,Q$,SOe,ROe,POe,$m,Kee,BOe,IOe,H$,qOe,NOe,jOe,km,Zee,DOe,GOe,U$,OOe,VOe,XOe,Sm,eoe,zOe,WOe,J$,QOe,HOe,UOe,Rm,ooe,JOe,YOe,Y$,KOe,ZOe,eVe,Pm,roe,oVe,rVe,K$,tVe,aVe,nVe,Bm,toe,sVe,lVe,Z$,iVe,dVe,cVe,Im,aoe,mVe,fVe,ek,gVe,hVe,uVe,qm,noe,pVe,_Ve,ok,bVe,vVe,FVe,Nm,soe,TVe,MVe,rk,EVe,CVe,wVe,jm,loe,AVe,yVe,tk,LVe,xVe,$Ve,Dm,ioe,kVe,SVe,ak,RVe,PVe,BVe,Gm,doe,IVe,qVe,nk,NVe,jVe,DVe,Om,coe,GVe,OVe,sk,VVe,XVe,zVe,Vm,moe,WVe,QVe,lk,HVe,UVe,JVe,Xm,foe,YVe,KVe,ik,ZVe,eXe,oXe,zm,goe,rXe,tXe,dk,aXe,nXe,sXe,Wm,hoe,lXe,iXe,ck,dXe,cXe,mXe,Qm,uoe,fXe,gXe,mk,hXe,uXe,pXe,Hm,poe,_Xe,bXe,fk,vXe,FXe,TXe,Um,_oe,MXe,EXe,gk,CXe,wXe,AXe,Jm,boe,yXe,LXe,hk,xXe,$Xe,kXe,Ym,voe,SXe,RXe,uk,PXe,BXe,IXe,Km,Foe,qXe,NXe,pk,jXe,DXe,GXe,Zm,Toe,OXe,VXe,_k,XXe,zXe,WXe,ef,Moe,QXe,HXe,bk,UXe,JXe,YXe,of,Eoe,KXe,ZXe,vk,eze,oze,rze,rf,Coe,tze,aze,Fk,nze,sze,lze,tf,woe,ize,dze,Tk,cze,mze,fze,af,Aoe,gze,hze,Mk,uze,pze,_ze,nf,yoe,bze,vze,Ek,Fze,Tze,Mze,sf,Loe,Eze,Cze,Ck,wze,Aze,yze,lf,xoe,Lze,xze,wk,$ze,kze,Sze,df,$oe,Rze,Pze,Ak,Bze,Ize,qze,cf,koe,Nze,jze,yk,Dze,Gze,Oze,mf,Soe,Vze,Xze,Lk,zze,Wze,Qze,ff,Roe,Hze,Uze,xk,Jze,Yze,Kze,gf,Poe,Zze,eWe,$k,oWe,rWe,tWe,hf,Boe,aWe,nWe,kk,sWe,lWe,iWe,uf,Ioe,dWe,cWe,Sk,mWe,fWe,gWe,pf,qoe,hWe,uWe,Rk,pWe,_We,bWe,_f,Noe,vWe,FWe,Pk,TWe,MWe,EWe,bf,joe,CWe,wWe,Bk,AWe,yWe,LWe,vf,Doe,xWe,$We,Ik,kWe,SWe,RWe,Ff,Goe,PWe,BWe,qk,IWe,qWe,NWe,Tf,Ooe,jWe,DWe,Nk,GWe,OWe,VWe,Mf,Voe,XWe,zWe,jk,WWe,QWe,HWe,Ef,Xoe,UWe,JWe,Dk,YWe,KWe,ZWe,Cf,zoe,eQe,oQe,Gk,rQe,tQe,aQe,wf,Woe,nQe,sQe,Ok,lQe,iQe,dQe,Af,Qoe,cQe,mQe,Vk,fQe,gQe,hQe,yf,Hoe,uQe,pQe,Xk,_Qe,bQe,vQe,Lf,Uoe,FQe,TQe,zk,MQe,EQe,CQe,xf,Joe,wQe,AQe,Wk,yQe,LQe,xQe,$f,Yoe,$Qe,kQe,Qk,SQe,RQe,PQe,kf,Koe,BQe,IQe,Hk,qQe,NQe,jQe,Sf,Zoe,DQe,GQe,Uk,OQe,VQe,XQe,Rf,ere,zQe,WQe,Jk,QQe,HQe,UQe,Pf,ore,JQe,YQe,Yk,KQe,ZQe,eHe,Bf,rre,oHe,rHe,Kk,tHe,aHe,nHe,If,tre,sHe,lHe,Zk,iHe,dHe,cHe,qf,are,mHe,fHe,eS,gHe,hHe,uHe,Nf,nre,pHe,_He,oS,bHe,vHe,FHe,jf,sre,THe,MHe,rS,EHe,CHe,wHe,Df,lre,AHe,yHe,tS,LHe,xHe,$He,Gf,ire,kHe,SHe,aS,RHe,PHe,BHe,Of,dre,IHe,qHe,nS,NHe,jHe,DHe,Vf,cre,GHe,OHe,sS,VHe,XHe,zHe,Xf,mre,WHe,QHe,lS,HHe,UHe,JHe,zf,fre,YHe,KHe,iS,ZHe,eUe,oUe,Wf,gre,rUe,tUe,dS,aUe,nUe,sUe,Qf,hre,lUe,iUe,cS,dUe,cUe,mUe,Hf,ure,fUe,gUe,mS,hUe,uUe,pUe,Uf,pre,_Ue,bUe,fS,vUe,FUe,TUe,Jf,_re,MUe,EUe,gS,CUe,wUe,AUe,Yf,bre,yUe,LUe,hS,xUe,$Ue,kUe,Kf,vre,SUe,RUe,uS,PUe,BUe,IUe,Zf,Fre,qUe,NUe,pS,jUe,DUe,GUe,eg,Tre,OUe,VUe,_S,XUe,zUe,WUe,og,Mre,QUe,HUe,bS,UUe,JUe,YUe,rg,Ere,KUe,ZUe,vS,eJe,oJe,rJe,tg,Cre,tJe,aJe,FS,nJe,sJe,lJe,ag,wre,iJe,dJe,TS,cJe,mJe,fJe,ng,Are,gJe,hJe,MS,uJe,pJe,_Je,sg,yre,bJe,vJe,ES,FJe,TJe,MJe,lg,Lre,EJe,CJe,CS,wJe,AJe,yJe,ig,xre,LJe,xJe,wS,$Je,kJe,SJe,dg,$re,RJe,PJe,AS,BJe,IJe,qJe,cg,kre,NJe,jJe,yS,DJe,GJe,OJe,mg,Sre,VJe,XJe,LS,zJe,WJe,QJe,fg,Rre,HJe,UJe,xS,JJe,YJe,KJe,gg,Pre,ZJe,eYe,$S,oYe,rYe,tYe,hg,Bre,aYe,nYe,kS,sYe,lYe,iYe,ug,Ire,dYe,cYe,SS,mYe,fYe,gYe,pg,qre,hYe,uYe,RS,pYe,_Ye,bYe,_g,Nre,vYe,FYe,PS,TYe,MYe,EYe,bg,jre,CYe,wYe,BS,AYe,yYe,LYe,vg,Dre,xYe,$Ye,IS,kYe,SYe,RYe,Fg,PYe,Tg,Ty,BYe,Gre,IYe,sqe,Fi,Mg,Ore,My,qYe,Vre,NYe,lqe,wo,Ey,jYe,Cy,DYe,qS,GYe,OYe,VYe,wy,XYe,Xre,zYe,WYe,QYe,Cr,Ay,HYe,zre,UYe,JYe,Aa,YYe,Wre,KYe,ZYe,Qre,eKe,oKe,Hre,rKe,tKe,aKe,k,Sn,Ure,nKe,sKe,NS,lKe,iKe,jS,dKe,cKe,mKe,Rn,Jre,fKe,gKe,DS,hKe,uKe,GS,pKe,_Ke,bKe,Pn,Yre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,Eg,Kre,AKe,yKe,XS,LKe,xKe,$Ke,Bn,Zre,kKe,SKe,zS,RKe,PKe,WS,BKe,IKe,qKe,Cg,ete,NKe,jKe,QS,DKe,GKe,OKe,wg,ote,VKe,XKe,HS,zKe,WKe,QKe,Ag,rte,HKe,UKe,US,JKe,YKe,KKe,In,tte,ZKe,eZe,JS,oZe,rZe,YS,tZe,aZe,nZe,qn,ate,sZe,lZe,KS,iZe,dZe,ZS,cZe,mZe,fZe,Nn,nte,gZe,hZe,eR,uZe,pZe,oR,_Ze,bZe,vZe,yg,ste,FZe,TZe,rR,MZe,EZe,CZe,Lg,lte,wZe,AZe,tR,yZe,LZe,xZe,jn,ite,$Ze,kZe,aR,SZe,RZe,nR,PZe,BZe,IZe,xg,dte,qZe,NZe,sR,jZe,DZe,GZe,Dn,cte,OZe,VZe,lR,XZe,zZe,iR,WZe,QZe,HZe,Gn,mte,UZe,JZe,dR,YZe,KZe,cR,ZZe,eeo,oeo,On,fte,reo,teo,mR,aeo,neo,fR,seo,leo,ieo,$g,gte,deo,ceo,gR,meo,feo,geo,Vn,hte,heo,ueo,hR,peo,_eo,uR,beo,veo,Feo,Xn,ute,Teo,Meo,pR,Eeo,Ceo,_R,weo,Aeo,yeo,zn,pte,Leo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,Wn,_te,Beo,Ieo,FR,qeo,Neo,TR,jeo,Deo,Geo,Qn,bte,Oeo,Veo,MR,Xeo,zeo,ER,Weo,Qeo,Heo,Hn,vte,Ueo,Jeo,CR,Yeo,Keo,wR,Zeo,eoo,ooo,kg,Fte,roo,too,AR,aoo,noo,soo,Un,Tte,loo,ioo,yR,doo,coo,LR,moo,foo,goo,Sg,Mte,hoo,uoo,xR,poo,_oo,boo,Jn,Ete,voo,Foo,$R,Too,Moo,kR,Eoo,Coo,woo,Yn,Cte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,Kn,wte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Zn,Ate,Doo,Goo,IR,Ooo,Voo,qR,Xoo,zoo,Woo,es,yte,Qoo,Hoo,NR,Uoo,Joo,jR,Yoo,Koo,Zoo,Rg,Lte,ero,oro,DR,rro,tro,aro,os,xte,nro,sro,GR,lro,iro,OR,dro,cro,mro,rs,$te,fro,gro,VR,hro,uro,XR,pro,_ro,bro,ts,kte,vro,Fro,zR,Tro,Mro,WR,Ero,Cro,wro,as,Ste,Aro,yro,QR,Lro,xro,HR,$ro,kro,Sro,ns,Rte,Rro,Pro,UR,Bro,Iro,JR,qro,Nro,jro,ss,Pte,Dro,Gro,YR,Oro,Vro,KR,Xro,zro,Wro,Pg,Bte,Qro,Hro,ZR,Uro,Jro,Yro,ls,Ite,Kro,Zro,eP,eto,oto,oP,rto,tto,ato,Bg,qte,nto,sto,rP,lto,ito,dto,Ig,Nte,cto,mto,tP,fto,gto,hto,is,jte,uto,pto,aP,_to,bto,nP,vto,Fto,Tto,ds,Dte,Mto,Eto,sP,Cto,wto,lP,Ato,yto,Lto,cs,Gte,xto,$to,iP,kto,Sto,dP,Rto,Pto,Bto,qg,Ote,Ito,qto,cP,Nto,jto,Dto,ms,Vte,Gto,Oto,mP,Vto,Xto,fP,zto,Wto,Qto,fs,Xte,Hto,Uto,gP,Jto,Yto,hP,Kto,Zto,eao,gs,zte,oao,rao,uP,tao,aao,pP,nao,sao,lao,hs,Wte,iao,dao,_P,cao,mao,bP,fao,gao,hao,us,Qte,uao,pao,vP,_ao,bao,FP,vao,Fao,Tao,Ng,Hte,Mao,Eao,TP,Cao,wao,Aao,ps,Ute,yao,Lao,MP,xao,$ao,EP,kao,Sao,Rao,jg,Jte,Pao,Bao,CP,Iao,qao,Nao,Dg,Yte,jao,Dao,wP,Gao,Oao,Vao,Gg,Kte,Xao,zao,AP,Wao,Qao,Hao,Og,Zte,Uao,Jao,yP,Yao,Kao,Zao,_s,eae,eno,ono,LP,rno,tno,xP,ano,nno,sno,Vg,oae,lno,ino,$P,dno,cno,mno,bs,rae,fno,gno,kP,hno,uno,SP,pno,_no,bno,vs,tae,vno,Fno,RP,Tno,Mno,PP,Eno,Cno,wno,Fs,aae,Ano,yno,BP,Lno,xno,IP,$no,kno,Sno,Ts,nae,Rno,Pno,qP,Bno,Ino,NP,qno,Nno,jno,Ms,sae,Dno,Gno,jP,Ono,Vno,DP,Xno,zno,Wno,Es,lae,Qno,Hno,GP,Uno,Jno,OP,Yno,Kno,Zno,Xg,iae,eso,oso,VP,rso,tso,aso,zg,dae,nso,sso,XP,lso,iso,dso,Cs,cae,cso,mso,zP,fso,gso,WP,hso,uso,pso,ws,mae,_so,bso,QP,vso,Fso,HP,Tso,Mso,Eso,As,fae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Wg,gae,kso,Sso,YP,Rso,Pso,Bso,Qg,hae,Iso,qso,KP,Nso,jso,Dso,Hg,uae,Gso,Oso,ZP,Vso,Xso,zso,ys,pae,Wso,Qso,eB,Hso,Uso,oB,Jso,Yso,Kso,Ug,_ae,Zso,elo,rB,olo,rlo,tlo,Jg,bae,alo,nlo,tB,slo,llo,ilo,Yg,vae,dlo,clo,aB,mlo,flo,glo,Ls,Fae,hlo,ulo,nB,plo,_lo,sB,blo,vlo,Flo,Kg,Tae,Tlo,Mlo,lB,Elo,Clo,wlo,Zg,Mae,Alo,ylo,iB,Llo,xlo,$lo,xs,Eae,klo,Slo,dB,Rlo,Plo,cB,Blo,Ilo,qlo,$s,Cae,Nlo,jlo,mB,Dlo,Glo,fB,Olo,Vlo,Xlo,ks,wae,zlo,Wlo,gB,Qlo,Hlo,hB,Ulo,Jlo,Ylo,Ss,Aae,Klo,Zlo,uB,eio,oio,pB,rio,tio,aio,eh,nio,oh,yy,sio,yae,lio,iqe,Ti,rh,Lae,Ly,iio,xae,dio,dqe,Ao,xy,cio,$y,mio,_B,fio,gio,hio,ky,uio,$ae,pio,_io,bio,He,Sy,vio,kae,Fio,Tio,ya,Mio,Sae,Eio,Cio,Rae,wio,Aio,Pae,yio,Lio,xio,Z,th,Bae,$io,kio,bB,Sio,Rio,Pio,ah,Iae,Bio,Iio,vB,qio,Nio,jio,nh,qae,Dio,Gio,FB,Oio,Vio,Xio,sh,Nae,zio,Wio,TB,Qio,Hio,Uio,lh,jae,Jio,Yio,MB,Kio,Zio,edo,ih,Dae,odo,rdo,EB,tdo,ado,ndo,dh,Gae,sdo,ldo,CB,ido,ddo,cdo,ch,Oae,mdo,fdo,wB,gdo,hdo,udo,mh,Vae,pdo,_do,AB,bdo,vdo,Fdo,fh,Xae,Tdo,Mdo,yB,Edo,Cdo,wdo,gh,zae,Ado,ydo,LB,Ldo,xdo,$do,hh,Wae,kdo,Sdo,xB,Rdo,Pdo,Bdo,uh,Qae,Ido,qdo,$B,Ndo,jdo,Ddo,ph,Hae,Gdo,Odo,kB,Vdo,Xdo,zdo,_h,Uae,Wdo,Qdo,SB,Hdo,Udo,Jdo,bh,Jae,Ydo,Kdo,RB,Zdo,eco,oco,vh,Yae,rco,tco,PB,aco,nco,sco,Fh,Kae,lco,ico,BB,dco,cco,mco,Th,Zae,fco,gco,IB,hco,uco,pco,Mh,ene,_co,bco,qB,vco,Fco,Tco,Eh,one,Mco,Eco,NB,Cco,wco,Aco,Ch,rne,yco,Lco,jB,xco,$co,kco,wh,tne,Sco,Rco,DB,Pco,Bco,Ico,Ah,ane,qco,Nco,GB,jco,Dco,Gco,yh,nne,Oco,Vco,OB,Xco,zco,Wco,Lh,sne,Qco,Hco,VB,Uco,Jco,Yco,xh,lne,Kco,Zco,XB,emo,omo,rmo,$h,tmo,kh,amo,Sh,Ry,nmo,ine,smo,cqe,Mi,Rh,dne,Py,lmo,cne,imo,mqe,yo,By,dmo,Iy,cmo,zB,mmo,fmo,gmo,qy,hmo,mne,umo,pmo,_mo,Ue,Ny,bmo,fne,vmo,Fmo,Ei,Tmo,gne,Mmo,Emo,hne,Cmo,wmo,Amo,ue,Ph,une,ymo,Lmo,WB,xmo,$mo,kmo,Bh,pne,Smo,Rmo,_ne,Pmo,Bmo,Imo,Ih,bne,qmo,Nmo,QB,jmo,Dmo,Gmo,qh,vne,Omo,Vmo,HB,Xmo,zmo,Wmo,Nh,Fne,Qmo,Hmo,UB,Umo,Jmo,Ymo,jh,Tne,Kmo,Zmo,JB,efo,ofo,rfo,Dh,Mne,tfo,afo,YB,nfo,sfo,lfo,Gh,Ene,ifo,dfo,KB,cfo,mfo,ffo,Oh,Cne,gfo,hfo,ZB,ufo,pfo,_fo,Vh,wne,bfo,vfo,eI,Ffo,Tfo,Mfo,Xh,Ane,Efo,Cfo,oI,wfo,Afo,yfo,zh,yne,Lfo,xfo,rI,$fo,kfo,Sfo,Wh,Lne,Rfo,Pfo,tI,Bfo,Ifo,qfo,Qh,xne,Nfo,jfo,aI,Dfo,Gfo,Ofo,Hh,$ne,Vfo,Xfo,nI,zfo,Wfo,Qfo,Uh,kne,Hfo,Ufo,sI,Jfo,Yfo,Kfo,Jh,Zfo,Yh,ego,Kh,jy,ogo,Sne,rgo,fqe,Ci,Zh,Rne,Dy,tgo,Pne,ago,gqe,Lo,Gy,ngo,wi,sgo,lI,lgo,igo,iI,dgo,cgo,mgo,Oy,fgo,Bne,ggo,hgo,ugo,tt,Vy,pgo,Ine,_go,bgo,Ai,vgo,qne,Fgo,Tgo,dI,Mgo,Ego,Cgo,eu,wgo,Je,Xy,Ago,Nne,ygo,Lgo,La,xgo,jne,$go,kgo,Dne,Sgo,Rgo,Gne,Pgo,Bgo,Igo,x,ou,One,qgo,Ngo,cI,jgo,Dgo,Ggo,ru,Vne,Ogo,Vgo,mI,Xgo,zgo,Wgo,tu,Xne,Qgo,Hgo,fI,Ugo,Jgo,Ygo,au,zne,Kgo,Zgo,gI,eho,oho,rho,nu,Wne,tho,aho,hI,nho,sho,lho,su,Qne,iho,dho,uI,cho,mho,fho,lu,Hne,gho,hho,pI,uho,pho,_ho,iu,Une,bho,vho,_I,Fho,Tho,Mho,du,Jne,Eho,Cho,bI,who,Aho,yho,cu,Yne,Lho,xho,vI,$ho,kho,Sho,mu,Kne,Rho,Pho,FI,Bho,Iho,qho,fu,Zne,Nho,jho,TI,Dho,Gho,Oho,gu,ese,Vho,Xho,MI,zho,Who,Qho,hu,ose,Hho,Uho,EI,Jho,Yho,Kho,uu,rse,Zho,euo,CI,ouo,ruo,tuo,pu,tse,auo,nuo,wI,suo,luo,iuo,_u,ase,duo,cuo,AI,muo,fuo,guo,bu,nse,huo,uuo,yI,puo,_uo,buo,vu,sse,vuo,Fuo,LI,Tuo,Muo,Euo,Fu,lse,Cuo,wuo,xI,Auo,yuo,Luo,Tu,ise,xuo,$uo,$I,kuo,Suo,Ruo,Mu,dse,Puo,Buo,kI,Iuo,quo,Nuo,Eu,cse,juo,Duo,SI,Guo,Ouo,Vuo,Cu,mse,Xuo,zuo,RI,Wuo,Quo,Huo,wu,fse,Uuo,Juo,PI,Yuo,Kuo,Zuo,Au,gse,epo,opo,BI,rpo,tpo,apo,yu,hse,npo,spo,II,lpo,ipo,dpo,Lu,use,cpo,mpo,qI,fpo,gpo,hpo,xu,pse,upo,ppo,NI,_po,bpo,vpo,$u,_se,Fpo,Tpo,jI,Mpo,Epo,Cpo,ku,bse,wpo,Apo,DI,ypo,Lpo,xpo,Su,vse,$po,kpo,GI,Spo,Rpo,Ppo,Rs,Fse,Bpo,Ipo,OI,qpo,Npo,VI,jpo,Dpo,Gpo,Ru,Tse,Opo,Vpo,XI,Xpo,zpo,Wpo,Pu,Mse,Qpo,Hpo,zI,Upo,Jpo,Ypo,Bu,Ese,Kpo,Zpo,WI,e_o,o_o,r_o,Iu,Cse,t_o,a_o,QI,n_o,s_o,l_o,qu,wse,i_o,d_o,HI,c_o,m_o,f_o,Nu,Ase,g_o,h_o,UI,u_o,p_o,__o,ju,yse,b_o,v_o,JI,F_o,T_o,M_o,Du,Lse,E_o,C_o,YI,w_o,A_o,y_o,Gu,xse,L_o,x_o,KI,$_o,k_o,S_o,Ou,$se,R_o,P_o,ZI,B_o,I_o,q_o,Vu,kse,N_o,j_o,eq,D_o,G_o,O_o,Xu,Sse,V_o,X_o,oq,z_o,W_o,Q_o,zu,Rse,H_o,U_o,rq,J_o,Y_o,K_o,Wu,Pse,Z_o,ebo,tq,obo,rbo,tbo,Qu,Bse,abo,nbo,aq,sbo,lbo,ibo,Hu,Ise,dbo,cbo,nq,mbo,fbo,gbo,Uu,qse,hbo,ubo,sq,pbo,_bo,bbo,Ju,Nse,vbo,Fbo,lq,Tbo,Mbo,Ebo,Yu,jse,Cbo,wbo,iq,Abo,ybo,Lbo,Ku,Dse,xbo,$bo,dq,kbo,Sbo,Rbo,Zu,Gse,Pbo,Bbo,cq,Ibo,qbo,Nbo,ep,Ose,jbo,Dbo,mq,Gbo,Obo,Vbo,op,Vse,Xbo,zbo,fq,Wbo,Qbo,Hbo,rp,Xse,Ubo,Jbo,gq,Ybo,Kbo,Zbo,tp,zse,e2o,o2o,hq,r2o,t2o,a2o,ap,Wse,n2o,s2o,uq,l2o,i2o,d2o,np,Qse,c2o,m2o,pq,f2o,g2o,h2o,sp,Hse,u2o,p2o,_q,_2o,b2o,v2o,lp,Use,F2o,T2o,bq,M2o,E2o,C2o,ip,Jse,w2o,A2o,vq,y2o,L2o,x2o,dp,Yse,$2o,k2o,Fq,S2o,R2o,P2o,cp,Kse,B2o,I2o,Tq,q2o,N2o,j2o,mp,Zse,D2o,G2o,Mq,O2o,V2o,X2o,fp,ele,z2o,W2o,Eq,Q2o,H2o,U2o,gp,ole,J2o,Y2o,Cq,K2o,Z2o,evo,hp,rle,ovo,rvo,wq,tvo,avo,nvo,up,tle,svo,lvo,Aq,ivo,dvo,cvo,pp,ale,mvo,fvo,yq,gvo,hvo,uvo,_p,nle,pvo,_vo,Lq,bvo,vvo,Fvo,bp,sle,Tvo,Mvo,xq,Evo,Cvo,wvo,vp,lle,Avo,yvo,$q,Lvo,xvo,$vo,Fp,ile,kvo,Svo,kq,Rvo,Pvo,Bvo,Tp,dle,Ivo,qvo,Sq,Nvo,jvo,Dvo,Mp,cle,Gvo,Ovo,Rq,Vvo,Xvo,zvo,Ep,mle,Wvo,Qvo,Pq,Hvo,Uvo,Jvo,Cp,fle,Yvo,Kvo,Bq,Zvo,eFo,oFo,wp,gle,rFo,tFo,Iq,aFo,nFo,sFo,Ap,hle,lFo,iFo,qq,dFo,cFo,mFo,yp,ule,fFo,gFo,Nq,hFo,uFo,pFo,Lp,ple,_Fo,bFo,jq,vFo,FFo,TFo,xp,_le,MFo,EFo,Dq,CFo,wFo,AFo,$p,ble,yFo,LFo,Gq,xFo,$Fo,kFo,kp,vle,SFo,RFo,Oq,PFo,BFo,IFo,Sp,Fle,qFo,NFo,Vq,jFo,DFo,GFo,Rp,Tle,OFo,VFo,Xq,XFo,zFo,WFo,Pp,Mle,QFo,HFo,zq,UFo,JFo,YFo,Bp,Ele,KFo,ZFo,Wq,e1o,o1o,r1o,Ip,Cle,t1o,a1o,Qq,n1o,s1o,l1o,qp,wle,i1o,d1o,Hq,c1o,m1o,f1o,Np,Ale,g1o,h1o,Uq,u1o,p1o,_1o,jp,yle,b1o,v1o,Jq,F1o,T1o,M1o,Dp,Lle,E1o,C1o,Yq,w1o,A1o,y1o,Gp,xle,L1o,x1o,Kq,$1o,k1o,S1o,Op,$le,R1o,P1o,Zq,B1o,I1o,q1o,Vp,kle,N1o,j1o,eN,D1o,G1o,O1o,Xp,Sle,V1o,X1o,oN,z1o,W1o,Q1o,zp,Rle,H1o,U1o,rN,J1o,Y1o,K1o,Wp,Z1o,Ple,eTo,oTo,Ble,rTo,tTo,Qp,hqe,yi,Hp,Ile,zy,aTo,qle,nTo,uqe,xo,Wy,sTo,Li,lTo,tN,iTo,dTo,aN,cTo,mTo,fTo,Qy,gTo,Nle,hTo,uTo,pTo,at,Hy,_To,jle,bTo,vTo,xi,FTo,Dle,TTo,MTo,nN,ETo,CTo,wTo,Up,ATo,Ye,Uy,yTo,Gle,LTo,xTo,xa,$To,Ole,kTo,STo,Vle,RTo,PTo,Xle,BTo,ITo,qTo,G,Jp,zle,NTo,jTo,sN,DTo,GTo,OTo,Yp,Wle,VTo,XTo,lN,zTo,WTo,QTo,Kp,Qle,HTo,UTo,iN,JTo,YTo,KTo,Zp,Hle,ZTo,eMo,dN,oMo,rMo,tMo,e_,Ule,aMo,nMo,cN,sMo,lMo,iMo,o_,Jle,dMo,cMo,mN,mMo,fMo,gMo,r_,Yle,hMo,uMo,fN,pMo,_Mo,bMo,t_,Kle,vMo,FMo,gN,TMo,MMo,EMo,a_,Zle,CMo,wMo,hN,AMo,yMo,LMo,n_,eie,xMo,$Mo,uN,kMo,SMo,RMo,s_,oie,PMo,BMo,pN,IMo,qMo,NMo,l_,rie,jMo,DMo,_N,GMo,OMo,VMo,i_,tie,XMo,zMo,bN,WMo,QMo,HMo,d_,aie,UMo,JMo,vN,YMo,KMo,ZMo,c_,nie,e4o,o4o,FN,r4o,t4o,a4o,m_,sie,n4o,s4o,TN,l4o,i4o,d4o,f_,lie,c4o,m4o,MN,f4o,g4o,h4o,g_,iie,u4o,p4o,EN,_4o,b4o,v4o,h_,die,F4o,T4o,CN,M4o,E4o,C4o,u_,cie,w4o,A4o,wN,y4o,L4o,x4o,p_,mie,$4o,k4o,AN,S4o,R4o,P4o,__,fie,B4o,I4o,yN,q4o,N4o,j4o,b_,gie,D4o,G4o,LN,O4o,V4o,X4o,v_,hie,z4o,W4o,xN,Q4o,H4o,U4o,F_,uie,J4o,Y4o,$N,K4o,Z4o,eEo,T_,pie,oEo,rEo,kN,tEo,aEo,nEo,M_,_ie,sEo,lEo,SN,iEo,dEo,cEo,E_,bie,mEo,fEo,RN,gEo,hEo,uEo,C_,vie,pEo,_Eo,PN,bEo,vEo,FEo,w_,Fie,TEo,MEo,BN,EEo,CEo,wEo,A_,Tie,AEo,yEo,IN,LEo,xEo,$Eo,y_,Mie,kEo,SEo,qN,REo,PEo,BEo,L_,Eie,IEo,qEo,NN,NEo,jEo,DEo,x_,Cie,GEo,OEo,jN,VEo,XEo,zEo,$_,wie,WEo,QEo,DN,HEo,UEo,JEo,k_,Aie,YEo,KEo,GN,ZEo,eCo,oCo,S_,yie,rCo,tCo,ON,aCo,nCo,sCo,R_,Lie,lCo,iCo,VN,dCo,cCo,mCo,P_,xie,fCo,gCo,XN,hCo,uCo,pCo,B_,$ie,_Co,bCo,zN,vCo,FCo,TCo,I_,kie,MCo,ECo,WN,CCo,wCo,ACo,q_,Sie,yCo,LCo,QN,xCo,$Co,kCo,N_,SCo,Rie,RCo,PCo,Pie,BCo,ICo,j_,pqe,$i,D_,Bie,Jy,qCo,Iie,NCo,_qe,$o,Yy,jCo,ki,DCo,HN,GCo,OCo,UN,VCo,XCo,zCo,Ky,WCo,qie,QCo,HCo,UCo,nt,Zy,JCo,Nie,YCo,KCo,Si,ZCo,jie,e5o,o5o,JN,r5o,t5o,a5o,G_,n5o,Ke,eL,s5o,Die,l5o,i5o,$a,d5o,Gie,c5o,m5o,Oie,f5o,g5o,Vie,h5o,u5o,p5o,z,O_,Xie,_5o,b5o,YN,v5o,F5o,T5o,V_,zie,M5o,E5o,KN,C5o,w5o,A5o,X_,Wie,y5o,L5o,ZN,x5o,$5o,k5o,z_,Qie,S5o,R5o,ej,P5o,B5o,I5o,W_,Hie,q5o,N5o,oj,j5o,D5o,G5o,Q_,Uie,O5o,V5o,rj,X5o,z5o,W5o,H_,Jie,Q5o,H5o,tj,U5o,J5o,Y5o,U_,Yie,K5o,Z5o,aj,e3o,o3o,r3o,J_,Kie,t3o,a3o,nj,n3o,s3o,l3o,Y_,Zie,i3o,d3o,sj,c3o,m3o,f3o,K_,ede,g3o,h3o,lj,u3o,p3o,_3o,Z_,ode,b3o,v3o,ij,F3o,T3o,M3o,eb,rde,E3o,C3o,dj,w3o,A3o,y3o,ob,tde,L3o,x3o,cj,$3o,k3o,S3o,rb,ade,R3o,P3o,mj,B3o,I3o,q3o,tb,nde,N3o,j3o,fj,D3o,G3o,O3o,ab,sde,V3o,X3o,gj,z3o,W3o,Q3o,nb,lde,H3o,U3o,hj,J3o,Y3o,K3o,sb,ide,Z3o,ewo,uj,owo,rwo,two,lb,dde,awo,nwo,pj,swo,lwo,iwo,ib,cde,dwo,cwo,_j,mwo,fwo,gwo,db,mde,hwo,uwo,bj,pwo,_wo,bwo,cb,fde,vwo,Fwo,vj,Two,Mwo,Ewo,mb,gde,Cwo,wwo,Fj,Awo,ywo,Lwo,fb,hde,xwo,$wo,Tj,kwo,Swo,Rwo,gb,ude,Pwo,Bwo,Mj,Iwo,qwo,Nwo,hb,pde,jwo,Dwo,Ej,Gwo,Owo,Vwo,ub,_de,Xwo,zwo,Cj,Wwo,Qwo,Hwo,pb,bde,Uwo,Jwo,wj,Ywo,Kwo,Zwo,_b,vde,e0o,o0o,Aj,r0o,t0o,a0o,bb,Fde,n0o,s0o,yj,l0o,i0o,d0o,vb,Tde,c0o,m0o,Lj,f0o,g0o,h0o,Fb,Mde,u0o,p0o,xj,_0o,b0o,v0o,Tb,Ede,F0o,T0o,$j,M0o,E0o,C0o,Mb,Cde,w0o,A0o,kj,y0o,L0o,x0o,Eb,wde,$0o,k0o,Sj,S0o,R0o,P0o,Cb,B0o,Ade,I0o,q0o,yde,N0o,j0o,wb,bqe,Ri,Ab,Lde,oL,D0o,xde,G0o,vqe,ko,rL,O0o,Pi,V0o,Rj,X0o,z0o,Pj,W0o,Q0o,H0o,tL,U0o,$de,J0o,Y0o,K0o,st,aL,Z0o,kde,eAo,oAo,Bi,rAo,Sde,tAo,aAo,Bj,nAo,sAo,lAo,yb,iAo,Ze,nL,dAo,Rde,cAo,mAo,ka,fAo,Pde,gAo,hAo,Bde,uAo,pAo,Ide,_Ao,bAo,vAo,W,Lb,qde,FAo,TAo,Ij,MAo,EAo,CAo,xb,Nde,wAo,AAo,qj,yAo,LAo,xAo,$b,jde,$Ao,kAo,Nj,SAo,RAo,PAo,kb,Dde,BAo,IAo,jj,qAo,NAo,jAo,Sb,Gde,DAo,GAo,Dj,OAo,VAo,XAo,Rb,Ode,zAo,WAo,Gj,QAo,HAo,UAo,Pb,Vde,JAo,YAo,Oj,KAo,ZAo,e6o,Bb,Xde,o6o,r6o,Vj,t6o,a6o,n6o,Ib,zde,s6o,l6o,Xj,i6o,d6o,c6o,qb,Wde,m6o,f6o,zj,g6o,h6o,u6o,Nb,Qde,p6o,_6o,Wj,b6o,v6o,F6o,jb,Hde,T6o,M6o,Qj,E6o,C6o,w6o,Db,Ude,A6o,y6o,Hj,L6o,x6o,$6o,Gb,Jde,k6o,S6o,Uj,R6o,P6o,B6o,Ob,Yde,I6o,q6o,Jj,N6o,j6o,D6o,Vb,Kde,G6o,O6o,Yj,V6o,X6o,z6o,Xb,Zde,W6o,Q6o,Kj,H6o,U6o,J6o,zb,ece,Y6o,K6o,Zj,Z6o,eyo,oyo,Wb,oce,ryo,tyo,eD,ayo,nyo,syo,Qb,rce,lyo,iyo,oD,dyo,cyo,myo,Hb,tce,fyo,gyo,rD,hyo,uyo,pyo,Ub,ace,_yo,byo,tD,vyo,Fyo,Tyo,Jb,nce,Myo,Eyo,aD,Cyo,wyo,Ayo,Yb,sce,yyo,Lyo,nD,xyo,$yo,kyo,Kb,lce,Syo,Ryo,sD,Pyo,Byo,Iyo,Zb,ice,qyo,Nyo,lD,jyo,Dyo,Gyo,e2,dce,Oyo,Vyo,iD,Xyo,zyo,Wyo,o2,cce,Qyo,Hyo,dD,Uyo,Jyo,Yyo,r2,mce,Kyo,Zyo,cD,eLo,oLo,rLo,t2,fce,tLo,aLo,mD,nLo,sLo,lLo,a2,gce,iLo,dLo,hce,cLo,mLo,fLo,n2,uce,gLo,hLo,fD,uLo,pLo,_Lo,s2,pce,bLo,vLo,gD,FLo,TLo,MLo,l2,_ce,ELo,CLo,hD,wLo,ALo,yLo,i2,bce,LLo,xLo,uD,$Lo,kLo,SLo,d2,RLo,vce,PLo,BLo,Fce,ILo,qLo,c2,Fqe,Ii,m2,Tce,sL,NLo,Mce,jLo,Tqe,So,lL,DLo,qi,GLo,pD,OLo,VLo,_D,XLo,zLo,WLo,iL,QLo,Ece,HLo,ULo,JLo,lt,dL,YLo,Cce,KLo,ZLo,Ni,e8o,wce,o8o,r8o,bD,t8o,a8o,n8o,f2,s8o,eo,cL,l8o,Ace,i8o,d8o,Sa,c8o,yce,m8o,f8o,Lce,g8o,h8o,xce,u8o,p8o,_8o,pe,g2,$ce,b8o,v8o,vD,F8o,T8o,M8o,h2,kce,E8o,C8o,FD,w8o,A8o,y8o,u2,Sce,L8o,x8o,TD,$8o,k8o,S8o,p2,Rce,R8o,P8o,MD,B8o,I8o,q8o,_2,Pce,N8o,j8o,ED,D8o,G8o,O8o,b2,Bce,V8o,X8o,CD,z8o,W8o,Q8o,v2,Ice,H8o,U8o,wD,J8o,Y8o,K8o,F2,qce,Z8o,e7o,AD,o7o,r7o,t7o,T2,Nce,a7o,n7o,yD,s7o,l7o,i7o,M2,jce,d7o,c7o,LD,m7o,f7o,g7o,E2,Dce,h7o,u7o,xD,p7o,_7o,b7o,C2,Gce,v7o,F7o,$D,T7o,M7o,E7o,w2,Oce,C7o,w7o,kD,A7o,y7o,L7o,A2,Vce,x7o,$7o,SD,k7o,S7o,R7o,y2,Xce,P7o,B7o,RD,I7o,q7o,N7o,L2,zce,j7o,D7o,PD,G7o,O7o,V7o,x2,X7o,Wce,z7o,W7o,Qce,Q7o,H7o,$2,Mqe,ji,k2,Hce,mL,U7o,Uce,J7o,Eqe,Ro,fL,Y7o,Di,K7o,BD,Z7o,e9o,ID,o9o,r9o,t9o,gL,a9o,Jce,n9o,s9o,l9o,it,hL,i9o,Yce,d9o,c9o,Gi,m9o,Kce,f9o,g9o,qD,h9o,u9o,p9o,S2,_9o,oo,uL,b9o,Zce,v9o,F9o,Ra,T9o,eme,M9o,E9o,ome,C9o,w9o,rme,A9o,y9o,L9o,q,R2,tme,x9o,$9o,ND,k9o,S9o,R9o,P2,ame,P9o,B9o,jD,I9o,q9o,N9o,B2,nme,j9o,D9o,DD,G9o,O9o,V9o,I2,sme,X9o,z9o,GD,W9o,Q9o,H9o,q2,lme,U9o,J9o,OD,Y9o,K9o,Z9o,N2,ime,exo,oxo,VD,rxo,txo,axo,j2,dme,nxo,sxo,XD,lxo,ixo,dxo,D2,cme,cxo,mxo,zD,fxo,gxo,hxo,G2,mme,uxo,pxo,WD,_xo,bxo,vxo,O2,fme,Fxo,Txo,QD,Mxo,Exo,Cxo,V2,gme,wxo,Axo,HD,yxo,Lxo,xxo,X2,hme,$xo,kxo,UD,Sxo,Rxo,Pxo,z2,ume,Bxo,Ixo,JD,qxo,Nxo,jxo,W2,pme,Dxo,Gxo,YD,Oxo,Vxo,Xxo,Q2,_me,zxo,Wxo,KD,Qxo,Hxo,Uxo,H2,bme,Jxo,Yxo,ZD,Kxo,Zxo,e$o,U2,vme,o$o,r$o,eG,t$o,a$o,n$o,J2,Fme,s$o,l$o,oG,i$o,d$o,c$o,Y2,Tme,m$o,f$o,rG,g$o,h$o,u$o,K2,Mme,p$o,_$o,tG,b$o,v$o,F$o,Z2,Eme,T$o,M$o,aG,E$o,C$o,w$o,ev,Cme,A$o,y$o,nG,L$o,x$o,$$o,ov,wme,k$o,S$o,sG,R$o,P$o,B$o,rv,Ame,I$o,q$o,lG,N$o,j$o,D$o,tv,yme,G$o,O$o,iG,V$o,X$o,z$o,av,Lme,W$o,Q$o,dG,H$o,U$o,J$o,nv,xme,Y$o,K$o,cG,Z$o,eko,oko,sv,$me,rko,tko,mG,ako,nko,sko,lv,kme,lko,iko,fG,dko,cko,mko,iv,Sme,fko,gko,gG,hko,uko,pko,dv,Rme,_ko,bko,hG,vko,Fko,Tko,cv,Pme,Mko,Eko,uG,Cko,wko,Ako,mv,Bme,yko,Lko,pG,xko,$ko,kko,fv,Ime,Sko,Rko,_G,Pko,Bko,Iko,gv,qme,qko,Nko,bG,jko,Dko,Gko,hv,Nme,Oko,Vko,vG,Xko,zko,Wko,uv,jme,Qko,Hko,FG,Uko,Jko,Yko,pv,Dme,Kko,Zko,TG,eSo,oSo,rSo,_v,Gme,tSo,aSo,MG,nSo,sSo,lSo,bv,Ome,iSo,dSo,EG,cSo,mSo,fSo,vv,Vme,gSo,hSo,CG,uSo,pSo,_So,Fv,Xme,bSo,vSo,wG,FSo,TSo,MSo,Tv,zme,ESo,CSo,AG,wSo,ASo,ySo,Mv,Wme,LSo,xSo,yG,$So,kSo,SSo,Ev,Qme,RSo,PSo,LG,BSo,ISo,qSo,Cv,Hme,NSo,jSo,xG,DSo,GSo,OSo,wv,VSo,Ume,XSo,zSo,Jme,WSo,QSo,Av,Cqe,Oi,yv,Yme,pL,HSo,Kme,USo,wqe,Po,_L,JSo,Vi,YSo,$G,KSo,ZSo,kG,eRo,oRo,rRo,bL,tRo,Zme,aRo,nRo,sRo,dt,vL,lRo,efe,iRo,dRo,Xi,cRo,ofe,mRo,fRo,SG,gRo,hRo,uRo,Lv,pRo,ro,FL,_Ro,rfe,bRo,vRo,Pa,FRo,tfe,TRo,MRo,afe,ERo,CRo,nfe,wRo,ARo,yRo,Y,xv,sfe,LRo,xRo,RG,$Ro,kRo,SRo,$v,lfe,RRo,PRo,PG,BRo,IRo,qRo,kv,ife,NRo,jRo,BG,DRo,GRo,ORo,Sv,dfe,VRo,XRo,IG,zRo,WRo,QRo,Rv,cfe,HRo,URo,qG,JRo,YRo,KRo,Pv,mfe,ZRo,ePo,NG,oPo,rPo,tPo,Bv,ffe,aPo,nPo,jG,sPo,lPo,iPo,Iv,gfe,dPo,cPo,DG,mPo,fPo,gPo,qv,hfe,hPo,uPo,GG,pPo,_Po,bPo,Nv,ufe,vPo,FPo,OG,TPo,MPo,EPo,jv,pfe,CPo,wPo,VG,APo,yPo,LPo,Dv,_fe,xPo,$Po,XG,kPo,SPo,RPo,Gv,bfe,PPo,BPo,zG,IPo,qPo,NPo,Ov,vfe,jPo,DPo,WG,GPo,OPo,VPo,Vv,Ffe,XPo,zPo,QG,WPo,QPo,HPo,Xv,Tfe,UPo,JPo,HG,YPo,KPo,ZPo,zv,Mfe,eBo,oBo,UG,rBo,tBo,aBo,Wv,Efe,nBo,sBo,JG,lBo,iBo,dBo,Qv,Cfe,cBo,mBo,YG,fBo,gBo,hBo,Hv,wfe,uBo,pBo,KG,_Bo,bBo,vBo,Uv,Afe,FBo,TBo,ZG,MBo,EBo,CBo,Jv,yfe,wBo,ABo,eO,yBo,LBo,xBo,Yv,Lfe,$Bo,kBo,oO,SBo,RBo,PBo,Kv,xfe,BBo,IBo,rO,qBo,NBo,jBo,Zv,$fe,DBo,GBo,tO,OBo,VBo,XBo,eF,kfe,zBo,WBo,aO,QBo,HBo,UBo,oF,Sfe,JBo,YBo,nO,KBo,ZBo,eIo,rF,Rfe,oIo,rIo,sO,tIo,aIo,nIo,tF,Pfe,sIo,lIo,lO,iIo,dIo,cIo,aF,mIo,Bfe,fIo,gIo,Ife,hIo,uIo,nF,Aqe,zi,sF,qfe,TL,pIo,Nfe,_Io,yqe,Bo,ML,bIo,Wi,vIo,iO,FIo,TIo,dO,MIo,EIo,CIo,EL,wIo,jfe,AIo,yIo,LIo,ct,CL,xIo,Dfe,$Io,kIo,Qi,SIo,Gfe,RIo,PIo,cO,BIo,IIo,qIo,lF,NIo,to,wL,jIo,Ofe,DIo,GIo,Ba,OIo,Vfe,VIo,XIo,Xfe,zIo,WIo,zfe,QIo,HIo,UIo,Yr,iF,Wfe,JIo,YIo,mO,KIo,ZIo,eqo,dF,Qfe,oqo,rqo,fO,tqo,aqo,nqo,cF,Hfe,sqo,lqo,gO,iqo,dqo,cqo,mF,Ufe,mqo,fqo,hO,gqo,hqo,uqo,fF,Jfe,pqo,_qo,uO,bqo,vqo,Fqo,gF,Tqo,Yfe,Mqo,Eqo,Kfe,Cqo,wqo,hF,Lqe,Hi,uF,Zfe,AL,Aqo,ege,yqo,xqe,Io,yL,Lqo,Ui,xqo,pO,$qo,kqo,_O,Sqo,Rqo,Pqo,LL,Bqo,oge,Iqo,qqo,Nqo,mt,xL,jqo,rge,Dqo,Gqo,Ji,Oqo,tge,Vqo,Xqo,bO,zqo,Wqo,Qqo,pF,Hqo,ao,$L,Uqo,age,Jqo,Yqo,Ia,Kqo,nge,Zqo,eNo,sge,oNo,rNo,lge,tNo,aNo,nNo,U,_F,ige,sNo,lNo,vO,iNo,dNo,cNo,bF,dge,mNo,fNo,FO,gNo,hNo,uNo,vF,cge,pNo,_No,TO,bNo,vNo,FNo,FF,mge,TNo,MNo,MO,ENo,CNo,wNo,TF,fge,ANo,yNo,EO,LNo,xNo,$No,MF,gge,kNo,SNo,CO,RNo,PNo,BNo,EF,hge,INo,qNo,wO,NNo,jNo,DNo,CF,uge,GNo,ONo,AO,VNo,XNo,zNo,wF,pge,WNo,QNo,yO,HNo,UNo,JNo,AF,_ge,YNo,KNo,LO,ZNo,ejo,ojo,yF,bge,rjo,tjo,xO,ajo,njo,sjo,LF,vge,ljo,ijo,$O,djo,cjo,mjo,xF,Fge,fjo,gjo,kO,hjo,ujo,pjo,$F,Tge,_jo,bjo,SO,vjo,Fjo,Tjo,kF,Mge,Mjo,Ejo,RO,Cjo,wjo,Ajo,SF,Ege,yjo,Ljo,PO,xjo,$jo,kjo,RF,Cge,Sjo,Rjo,BO,Pjo,Bjo,Ijo,PF,wge,qjo,Njo,IO,jjo,Djo,Gjo,BF,Age,Ojo,Vjo,qO,Xjo,zjo,Wjo,IF,yge,Qjo,Hjo,NO,Ujo,Jjo,Yjo,qF,Lge,Kjo,Zjo,jO,eDo,oDo,rDo,NF,xge,tDo,aDo,DO,nDo,sDo,lDo,jF,$ge,iDo,dDo,GO,cDo,mDo,fDo,DF,kge,gDo,hDo,OO,uDo,pDo,_Do,GF,Sge,bDo,vDo,VO,FDo,TDo,MDo,OF,Rge,EDo,CDo,XO,wDo,ADo,yDo,VF,Pge,LDo,xDo,zO,$Do,kDo,SDo,XF,Bge,RDo,PDo,WO,BDo,IDo,qDo,zF,Ige,NDo,jDo,QO,DDo,GDo,ODo,WF,qge,VDo,XDo,HO,zDo,WDo,QDo,QF,Nge,HDo,UDo,UO,JDo,YDo,KDo,HF,jge,ZDo,eGo,JO,oGo,rGo,tGo,UF,Dge,aGo,nGo,YO,sGo,lGo,iGo,JF,dGo,Gge,cGo,mGo,Oge,fGo,gGo,YF,$qe,Yi,KF,Vge,kL,hGo,Xge,uGo,kqe,qo,SL,pGo,Ki,_Go,KO,bGo,vGo,ZO,FGo,TGo,MGo,RL,EGo,zge,CGo,wGo,AGo,ft,PL,yGo,Wge,LGo,xGo,Zi,$Go,Qge,kGo,SGo,eV,RGo,PGo,BGo,ZF,IGo,no,BL,qGo,Hge,NGo,jGo,qa,DGo,Uge,GGo,OGo,Jge,VGo,XGo,Yge,zGo,WGo,QGo,V,e1,Kge,HGo,UGo,oV,JGo,YGo,KGo,o1,Zge,ZGo,eOo,rV,oOo,rOo,tOo,r1,ehe,aOo,nOo,tV,sOo,lOo,iOo,t1,ohe,dOo,cOo,aV,mOo,fOo,gOo,a1,rhe,hOo,uOo,nV,pOo,_Oo,bOo,n1,the,vOo,FOo,sV,TOo,MOo,EOo,s1,ahe,COo,wOo,lV,AOo,yOo,LOo,l1,nhe,xOo,$Oo,iV,kOo,SOo,ROo,i1,she,POo,BOo,dV,IOo,qOo,NOo,d1,lhe,jOo,DOo,cV,GOo,OOo,VOo,c1,ihe,XOo,zOo,mV,WOo,QOo,HOo,m1,dhe,UOo,JOo,fV,YOo,KOo,ZOo,f1,che,eVo,oVo,gV,rVo,tVo,aVo,g1,mhe,nVo,sVo,hV,lVo,iVo,dVo,h1,fhe,cVo,mVo,uV,fVo,gVo,hVo,u1,ghe,uVo,pVo,pV,_Vo,bVo,vVo,p1,hhe,FVo,TVo,_V,MVo,EVo,CVo,_1,uhe,wVo,AVo,bV,yVo,LVo,xVo,b1,phe,$Vo,kVo,vV,SVo,RVo,PVo,v1,_he,BVo,IVo,FV,qVo,NVo,jVo,F1,bhe,DVo,GVo,TV,OVo,VVo,XVo,T1,vhe,zVo,WVo,MV,QVo,HVo,UVo,M1,Fhe,JVo,YVo,EV,KVo,ZVo,eXo,E1,The,oXo,rXo,CV,tXo,aXo,nXo,C1,Mhe,sXo,lXo,wV,iXo,dXo,cXo,w1,Ehe,mXo,fXo,AV,gXo,hXo,uXo,A1,Che,pXo,_Xo,yV,bXo,vXo,FXo,y1,whe,TXo,MXo,LV,EXo,CXo,wXo,L1,Ahe,AXo,yXo,xV,LXo,xXo,$Xo,x1,yhe,kXo,SXo,$V,RXo,PXo,BXo,$1,Lhe,IXo,qXo,kV,NXo,jXo,DXo,k1,xhe,GXo,OXo,SV,VXo,XXo,zXo,S1,$he,WXo,QXo,RV,HXo,UXo,JXo,R1,khe,YXo,KXo,PV,ZXo,ezo,ozo,P1,She,rzo,tzo,BV,azo,nzo,szo,B1,Rhe,lzo,izo,IV,dzo,czo,mzo,I1,Phe,fzo,gzo,qV,hzo,uzo,pzo,q1,Bhe,_zo,bzo,NV,vzo,Fzo,Tzo,N1,Ihe,Mzo,Ezo,jV,Czo,wzo,Azo,j1,yzo,qhe,Lzo,xzo,Nhe,$zo,kzo,D1,Sqe,ed,G1,jhe,IL,Szo,Dhe,Rzo,Rqe,No,qL,Pzo,od,Bzo,DV,Izo,qzo,GV,Nzo,jzo,Dzo,NL,Gzo,Ghe,Ozo,Vzo,Xzo,gt,jL,zzo,Ohe,Wzo,Qzo,rd,Hzo,Vhe,Uzo,Jzo,OV,Yzo,Kzo,Zzo,O1,eWo,so,DL,oWo,Xhe,rWo,tWo,Na,aWo,zhe,nWo,sWo,Whe,lWo,iWo,Qhe,dWo,cWo,mWo,Hhe,V1,Uhe,fWo,gWo,VV,hWo,uWo,pWo,X1,_Wo,Jhe,bWo,vWo,Yhe,FWo,TWo,z1,Pqe,td,W1,Khe,GL,MWo,Zhe,EWo,Bqe,jo,OL,CWo,ad,wWo,XV,AWo,yWo,zV,LWo,xWo,$Wo,VL,kWo,eue,SWo,RWo,PWo,ht,XL,BWo,oue,IWo,qWo,nd,NWo,rue,jWo,DWo,WV,GWo,OWo,VWo,Q1,XWo,lo,zL,zWo,tue,WWo,QWo,ja,HWo,aue,UWo,JWo,nue,YWo,KWo,sue,ZWo,eQo,oQo,Fe,H1,lue,rQo,tQo,QV,aQo,nQo,sQo,U1,iue,lQo,iQo,HV,dQo,cQo,mQo,J1,due,fQo,gQo,UV,hQo,uQo,pQo,Y1,cue,_Qo,bQo,JV,vQo,FQo,TQo,Ps,mue,MQo,EQo,YV,CQo,wQo,KV,AQo,yQo,LQo,K1,fue,xQo,$Qo,ZV,kQo,SQo,RQo,ut,gue,PQo,BQo,eX,IQo,qQo,oX,NQo,jQo,rX,DQo,GQo,OQo,Z1,hue,VQo,XQo,tX,zQo,WQo,QQo,eT,uue,HQo,UQo,aX,JQo,YQo,KQo,oT,pue,ZQo,eHo,nX,oHo,rHo,tHo,rT,_ue,aHo,nHo,sX,sHo,lHo,iHo,tT,bue,dHo,cHo,lX,mHo,fHo,gHo,aT,vue,hHo,uHo,iX,pHo,_Ho,bHo,nT,Fue,vHo,FHo,dX,THo,MHo,EHo,sT,CHo,Tue,wHo,AHo,Mue,yHo,LHo,lT,Iqe,sd,iT,Eue,WL,xHo,Cue,$Ho,qqe,Do,QL,kHo,ld,SHo,cX,RHo,PHo,mX,BHo,IHo,qHo,HL,NHo,wue,jHo,DHo,GHo,pt,UL,OHo,Aue,VHo,XHo,id,zHo,yue,WHo,QHo,fX,HHo,UHo,JHo,dT,YHo,io,JL,KHo,Lue,ZHo,eUo,Da,oUo,xue,rUo,tUo,$ue,aUo,nUo,kue,sUo,lUo,iUo,Sue,cT,Rue,dUo,cUo,gX,mUo,fUo,gUo,mT,hUo,Pue,uUo,pUo,Bue,_Uo,bUo,fT,Nqe,dd,gT,Iue,YL,vUo,que,FUo,jqe,Go,KL,TUo,cd,MUo,hX,EUo,CUo,uX,wUo,AUo,yUo,ZL,LUo,Nue,xUo,$Uo,kUo,_t,e8,SUo,jue,RUo,PUo,md,BUo,Due,IUo,qUo,pX,NUo,jUo,DUo,hT,GUo,co,o8,OUo,Gue,VUo,XUo,Ga,zUo,Oue,WUo,QUo,Vue,HUo,UUo,Xue,JUo,YUo,KUo,ke,uT,zue,ZUo,eJo,_X,oJo,rJo,tJo,pT,Wue,aJo,nJo,bX,sJo,lJo,iJo,_T,Que,dJo,cJo,vX,mJo,fJo,gJo,bT,Hue,hJo,uJo,FX,pJo,_Jo,bJo,vT,Uue,vJo,FJo,TX,TJo,MJo,EJo,FT,Jue,CJo,wJo,MX,AJo,yJo,LJo,TT,Yue,xJo,$Jo,EX,kJo,SJo,RJo,MT,Kue,PJo,BJo,CX,IJo,qJo,NJo,ET,Zue,jJo,DJo,wX,GJo,OJo,VJo,CT,XJo,epe,zJo,WJo,ope,QJo,HJo,wT,Dqe,fd,AT,rpe,r8,UJo,tpe,JJo,Gqe,Oo,t8,YJo,gd,KJo,AX,ZJo,eYo,yX,oYo,rYo,tYo,a8,aYo,ape,nYo,sYo,lYo,bt,n8,iYo,npe,dYo,cYo,hd,mYo,spe,fYo,gYo,LX,hYo,uYo,pYo,yT,_Yo,mo,s8,bYo,lpe,vYo,FYo,Oa,TYo,ipe,MYo,EYo,dpe,CYo,wYo,cpe,AYo,yYo,LYo,Kr,LT,mpe,xYo,$Yo,xX,kYo,SYo,RYo,xT,fpe,PYo,BYo,$X,IYo,qYo,NYo,$T,gpe,jYo,DYo,kX,GYo,OYo,VYo,kT,hpe,XYo,zYo,SX,WYo,QYo,HYo,ST,upe,UYo,JYo,RX,YYo,KYo,ZYo,RT,eKo,ppe,oKo,rKo,_pe,tKo,aKo,PT,Oqe,ud,BT,bpe,l8,nKo,vpe,sKo,Vqe,Vo,i8,lKo,pd,iKo,PX,dKo,cKo,BX,mKo,fKo,gKo,d8,hKo,Fpe,uKo,pKo,_Ko,vt,c8,bKo,Tpe,vKo,FKo,_d,TKo,Mpe,MKo,EKo,IX,CKo,wKo,AKo,IT,yKo,fo,m8,LKo,Epe,xKo,$Ko,Va,kKo,Cpe,SKo,RKo,wpe,PKo,BKo,Ape,IKo,qKo,NKo,Se,qT,ype,jKo,DKo,qX,GKo,OKo,VKo,NT,Lpe,XKo,zKo,NX,WKo,QKo,HKo,jT,xpe,UKo,JKo,jX,YKo,KKo,ZKo,DT,$pe,eZo,oZo,DX,rZo,tZo,aZo,GT,kpe,nZo,sZo,GX,lZo,iZo,dZo,OT,Spe,cZo,mZo,OX,fZo,gZo,hZo,VT,Rpe,uZo,pZo,VX,_Zo,bZo,vZo,XT,Ppe,FZo,TZo,XX,MZo,EZo,CZo,zT,Bpe,wZo,AZo,zX,yZo,LZo,xZo,WT,$Zo,Ipe,kZo,SZo,qpe,RZo,PZo,QT,Xqe,bd,HT,Npe,f8,BZo,jpe,IZo,zqe,Xo,g8,qZo,vd,NZo,WX,jZo,DZo,QX,GZo,OZo,VZo,h8,XZo,Dpe,zZo,WZo,QZo,Ft,u8,HZo,Gpe,UZo,JZo,Fd,YZo,Ope,KZo,ZZo,HX,eer,oer,rer,UT,ter,go,p8,aer,Vpe,ner,ser,Xa,ler,Xpe,ier,der,zpe,cer,mer,Wpe,fer,ger,her,_8,JT,Qpe,uer,per,UX,_er,ber,ver,YT,Hpe,Fer,Ter,JX,Mer,Eer,Cer,KT,wer,Upe,Aer,yer,Jpe,Ler,xer,ZT,Wqe,Td,eM,Ype,b8,$er,Kpe,ker,Qqe,zo,v8,Ser,Md,Rer,YX,Per,Ber,KX,Ier,qer,Ner,F8,jer,Zpe,Der,Ger,Oer,Tt,T8,Ver,e_e,Xer,zer,Ed,Wer,o_e,Qer,Her,ZX,Uer,Jer,Yer,oM,Ker,ho,M8,Zer,r_e,eor,oor,za,ror,t_e,tor,aor,a_e,nor,sor,n_e,lor,ior,dor,Zr,rM,s_e,cor,mor,ez,gor,hor,uor,tM,l_e,por,_or,oz,bor,vor,For,aM,i_e,Tor,Mor,rz,Eor,Cor,wor,nM,d_e,Aor,yor,tz,Lor,xor,$or,sM,c_e,kor,Sor,az,Ror,Por,Bor,lM,Ior,m_e,qor,Nor,f_e,jor,Dor,iM,Hqe,Cd,dM,g_e,E8,Gor,h_e,Oor,Uqe,Wo,C8,Vor,wd,Xor,nz,zor,Wor,sz,Qor,Hor,Uor,w8,Jor,u_e,Yor,Kor,Zor,Mt,A8,err,p_e,orr,rrr,Ad,trr,__e,arr,nrr,lz,srr,lrr,irr,cM,drr,uo,y8,crr,b_e,mrr,frr,Wa,grr,v_e,hrr,urr,F_e,prr,_rr,T_e,brr,vrr,Frr,yd,mM,M_e,Trr,Mrr,iz,Err,Crr,wrr,fM,E_e,Arr,yrr,dz,Lrr,xrr,$rr,gM,C_e,krr,Srr,cz,Rrr,Prr,Brr,hM,Irr,w_e,qrr,Nrr,A_e,jrr,Drr,uM,Jqe,Ld,pM,y_e,L8,Grr,L_e,Orr,Yqe,Qo,x8,Vrr,xd,Xrr,mz,zrr,Wrr,fz,Qrr,Hrr,Urr,$8,Jrr,x_e,Yrr,Krr,Zrr,Et,k8,etr,$_e,otr,rtr,$d,ttr,k_e,atr,ntr,gz,str,ltr,itr,_M,dtr,po,S8,ctr,S_e,mtr,ftr,Qa,gtr,R_e,htr,utr,P_e,ptr,_tr,B_e,btr,vtr,Ftr,R8,bM,I_e,Ttr,Mtr,hz,Etr,Ctr,wtr,vM,q_e,Atr,ytr,uz,Ltr,xtr,$tr,FM,ktr,N_e,Str,Rtr,j_e,Ptr,Btr,TM,Kqe,kd,MM,D_e,P8,Itr,G_e,qtr,Zqe,Ho,B8,Ntr,Sd,jtr,pz,Dtr,Gtr,_z,Otr,Vtr,Xtr,I8,ztr,O_e,Wtr,Qtr,Htr,Ct,q8,Utr,V_e,Jtr,Ytr,Rd,Ktr,X_e,Ztr,ear,bz,oar,rar,tar,EM,aar,_o,N8,nar,z_e,sar,lar,Ha,iar,W_e,dar,car,Q_e,mar,far,H_e,gar,har,uar,U_e,CM,J_e,par,_ar,vz,bar,Far,Tar,wM,Mar,Y_e,Ear,Car,K_e,war,Aar,AM,eNe,Pd,yM,Z_e,j8,yar,ebe,Lar,oNe,Uo,D8,xar,Bd,$ar,Fz,kar,Sar,Tz,Rar,Par,Bar,G8,Iar,obe,qar,Nar,jar,wt,O8,Dar,rbe,Gar,Oar,Id,Var,tbe,Xar,zar,Mz,War,Qar,Har,LM,Uar,bo,V8,Jar,abe,Yar,Kar,Ua,Zar,nbe,enr,onr,sbe,rnr,tnr,lbe,anr,nnr,snr,Ja,xM,ibe,lnr,inr,Ez,dnr,cnr,mnr,$M,dbe,fnr,gnr,Cz,hnr,unr,pnr,kM,cbe,_nr,bnr,wz,vnr,Fnr,Tnr,SM,mbe,Mnr,Enr,Az,Cnr,wnr,Anr,RM,ynr,fbe,Lnr,xnr,gbe,$nr,knr,PM,rNe,qd,BM,hbe,X8,Snr,ube,Rnr,tNe,Jo,z8,Pnr,Nd,Bnr,yz,Inr,qnr,Lz,Nnr,jnr,Dnr,W8,Gnr,pbe,Onr,Vnr,Xnr,At,Q8,znr,_be,Wnr,Qnr,jd,Hnr,bbe,Unr,Jnr,xz,Ynr,Knr,Znr,IM,esr,vo,H8,osr,vbe,rsr,tsr,Ya,asr,Fbe,nsr,ssr,Tbe,lsr,isr,Mbe,dsr,csr,msr,Ebe,qM,Cbe,fsr,gsr,$z,hsr,usr,psr,NM,_sr,wbe,bsr,vsr,Abe,Fsr,Tsr,jM,aNe,Dd,DM,ybe,U8,Msr,Lbe,Esr,nNe,Yo,J8,Csr,Gd,wsr,kz,Asr,ysr,Sz,Lsr,xsr,$sr,Y8,ksr,xbe,Ssr,Rsr,Psr,yt,K8,Bsr,$be,Isr,qsr,Od,Nsr,kbe,jsr,Dsr,Rz,Gsr,Osr,Vsr,GM,Xsr,wr,Z8,zsr,Sbe,Wsr,Qsr,Ka,Hsr,Rbe,Usr,Jsr,Pbe,Ysr,Ksr,Bbe,Zsr,elr,olr,N,OM,Ibe,rlr,tlr,Pz,alr,nlr,slr,VM,qbe,llr,ilr,Bz,dlr,clr,mlr,XM,Nbe,flr,glr,Iz,hlr,ulr,plr,zM,jbe,_lr,blr,qz,vlr,Flr,Tlr,WM,Dbe,Mlr,Elr,Nz,Clr,wlr,Alr,QM,Gbe,ylr,Llr,jz,xlr,$lr,klr,HM,Obe,Slr,Rlr,Dz,Plr,Blr,Ilr,UM,Vbe,qlr,Nlr,Gz,jlr,Dlr,Glr,JM,Xbe,Olr,Vlr,Oz,Xlr,zlr,Wlr,YM,zbe,Qlr,Hlr,Vz,Ulr,Jlr,Ylr,KM,Wbe,Klr,Zlr,Xz,eir,oir,rir,ZM,Qbe,tir,air,zz,nir,sir,lir,e4,Hbe,iir,dir,Wz,cir,mir,fir,o4,Ube,gir,hir,Qz,uir,pir,_ir,r4,Jbe,bir,vir,Hz,Fir,Tir,Mir,t4,Ybe,Eir,Cir,Uz,wir,Air,yir,a4,Kbe,Lir,xir,Jz,$ir,kir,Sir,Bs,Zbe,Rir,Pir,Yz,Bir,Iir,Kz,qir,Nir,jir,n4,e2e,Dir,Gir,Zz,Oir,Vir,Xir,s4,o2e,zir,Wir,eW,Qir,Hir,Uir,l4,r2e,Jir,Yir,oW,Kir,Zir,edr,i4,t2e,odr,rdr,rW,tdr,adr,ndr,d4,a2e,sdr,ldr,tW,idr,ddr,cdr,c4,n2e,mdr,fdr,aW,gdr,hdr,udr,m4,s2e,pdr,_dr,nW,bdr,vdr,Fdr,f4,l2e,Tdr,Mdr,sW,Edr,Cdr,wdr,g4,i2e,Adr,ydr,lW,Ldr,xdr,$dr,h4,d2e,kdr,Sdr,iW,Rdr,Pdr,Bdr,u4,c2e,Idr,qdr,dW,Ndr,jdr,Ddr,p4,m2e,Gdr,Odr,cW,Vdr,Xdr,zdr,_4,f2e,Wdr,Qdr,mW,Hdr,Udr,Jdr,b4,g2e,Ydr,Kdr,fW,Zdr,ecr,ocr,v4,h2e,rcr,tcr,gW,acr,ncr,scr,F4,u2e,lcr,icr,hW,dcr,ccr,mcr,T4,p2e,fcr,gcr,uW,hcr,ucr,pcr,M4,_2e,_cr,bcr,pW,vcr,Fcr,Tcr,E4,b2e,Mcr,Ecr,_W,Ccr,wcr,Acr,C4,v2e,ycr,Lcr,bW,xcr,$cr,kcr,w4,F2e,Scr,Rcr,vW,Pcr,Bcr,Icr,A4,T2e,qcr,Ncr,FW,jcr,Dcr,Gcr,y4,M2e,Ocr,Vcr,TW,Xcr,zcr,Wcr,L4,E2e,Qcr,Hcr,MW,Ucr,Jcr,Ycr,x4,C2e,Kcr,Zcr,EW,emr,omr,rmr,$4,w2e,tmr,amr,CW,nmr,smr,lmr,k4,A2e,imr,dmr,wW,cmr,mmr,fmr,S4,y2e,gmr,hmr,AW,umr,pmr,_mr,R4,sNe,Vd,P4,L2e,e7,bmr,x2e,vmr,lNe,Ko,o7,Fmr,Xd,Tmr,yW,Mmr,Emr,LW,Cmr,wmr,Amr,r7,ymr,$2e,Lmr,xmr,$mr,Lt,t7,kmr,k2e,Smr,Rmr,zd,Pmr,S2e,Bmr,Imr,xW,qmr,Nmr,jmr,B4,Dmr,Ar,a7,Gmr,R2e,Omr,Vmr,Za,Xmr,P2e,zmr,Wmr,B2e,Qmr,Hmr,I2e,Umr,Jmr,Ymr,se,I4,q2e,Kmr,Zmr,$W,efr,ofr,rfr,q4,N2e,tfr,afr,kW,nfr,sfr,lfr,N4,j2e,ifr,dfr,SW,cfr,mfr,ffr,j4,D2e,gfr,hfr,RW,ufr,pfr,_fr,D4,G2e,bfr,vfr,PW,Ffr,Tfr,Mfr,G4,O2e,Efr,Cfr,BW,wfr,Afr,yfr,O4,V2e,Lfr,xfr,IW,$fr,kfr,Sfr,V4,X2e,Rfr,Pfr,qW,Bfr,Ifr,qfr,X4,z2e,Nfr,jfr,NW,Dfr,Gfr,Ofr,z4,W2e,Vfr,Xfr,jW,zfr,Wfr,Qfr,W4,Q2e,Hfr,Ufr,DW,Jfr,Yfr,Kfr,Q4,H2e,Zfr,egr,GW,ogr,rgr,tgr,H4,U2e,agr,ngr,OW,sgr,lgr,igr,U4,J2e,dgr,cgr,VW,mgr,fgr,ggr,J4,Y2e,hgr,ugr,XW,pgr,_gr,bgr,Y4,K2e,vgr,Fgr,zW,Tgr,Mgr,Egr,K4,Z2e,Cgr,wgr,WW,Agr,ygr,Lgr,Z4,eve,xgr,$gr,QW,kgr,Sgr,Rgr,eE,ove,Pgr,Bgr,HW,Igr,qgr,Ngr,oE,rve,jgr,Dgr,UW,Ggr,Ogr,Vgr,rE,tve,Xgr,zgr,JW,Wgr,Qgr,Hgr,tE,ave,Ugr,Jgr,YW,Ygr,Kgr,Zgr,aE,nve,ehr,ohr,KW,rhr,thr,ahr,nE,iNe,Wd,sE,sve,n7,nhr,lve,shr,dNe,Zo,s7,lhr,Qd,ihr,ZW,dhr,chr,eQ,mhr,fhr,ghr,l7,hhr,ive,uhr,phr,_hr,xt,i7,bhr,dve,vhr,Fhr,Hd,Thr,cve,Mhr,Ehr,oQ,Chr,whr,Ahr,lE,yhr,yr,d7,Lhr,mve,xhr,$hr,en,khr,fve,Shr,Rhr,gve,Phr,Bhr,hve,Ihr,qhr,Nhr,Me,iE,uve,jhr,Dhr,rQ,Ghr,Ohr,Vhr,dE,pve,Xhr,zhr,tQ,Whr,Qhr,Hhr,cE,_ve,Uhr,Jhr,aQ,Yhr,Khr,Zhr,mE,bve,eur,our,nQ,rur,tur,aur,fE,vve,nur,sur,sQ,lur,iur,dur,gE,Fve,cur,mur,lQ,fur,gur,hur,hE,Tve,uur,pur,iQ,_ur,bur,vur,uE,Mve,Fur,Tur,dQ,Mur,Eur,Cur,pE,Eve,wur,Aur,cQ,yur,Lur,xur,_E,Cve,$ur,kur,mQ,Sur,Rur,Pur,bE,wve,Bur,Iur,fQ,qur,Nur,jur,vE,Ave,Dur,Gur,gQ,Our,Vur,Xur,FE,cNe,Ud,TE,yve,c7,zur,Lve,Wur,mNe,er,m7,Qur,Jd,Hur,hQ,Uur,Jur,uQ,Yur,Kur,Zur,f7,epr,xve,opr,rpr,tpr,$t,g7,apr,$ve,npr,spr,Yd,lpr,kve,ipr,dpr,pQ,cpr,mpr,fpr,ME,gpr,Lr,h7,hpr,Sve,upr,ppr,on,_pr,Rve,bpr,vpr,Pve,Fpr,Tpr,Bve,Mpr,Epr,Cpr,rn,EE,Ive,wpr,Apr,_Q,ypr,Lpr,xpr,CE,qve,$pr,kpr,bQ,Spr,Rpr,Ppr,wE,Nve,Bpr,Ipr,vQ,qpr,Npr,jpr,AE,jve,Dpr,Gpr,FQ,Opr,Vpr,Xpr,yE,fNe,Kd,LE,Dve,u7,zpr,Gve,Wpr,gNe,or,p7,Qpr,Zd,Hpr,TQ,Upr,Jpr,MQ,Ypr,Kpr,Zpr,_7,e_r,Ove,o_r,r_r,t_r,kt,b7,a_r,Vve,n_r,s_r,ec,l_r,Xve,i_r,d_r,EQ,c_r,m_r,f_r,xE,g_r,xr,v7,h_r,zve,u_r,p_r,tn,__r,Wve,b_r,v_r,Qve,F_r,T_r,Hve,M_r,E_r,C_r,ie,$E,Uve,w_r,A_r,CQ,y_r,L_r,x_r,kE,Jve,$_r,k_r,wQ,S_r,R_r,P_r,SE,Yve,B_r,I_r,AQ,q_r,N_r,j_r,RE,Kve,D_r,G_r,yQ,O_r,V_r,X_r,PE,Zve,z_r,W_r,LQ,Q_r,H_r,U_r,BE,eFe,J_r,Y_r,xQ,K_r,Z_r,ebr,IE,oFe,obr,rbr,$Q,tbr,abr,nbr,qE,rFe,sbr,lbr,kQ,ibr,dbr,cbr,NE,tFe,mbr,fbr,SQ,gbr,hbr,ubr,jE,aFe,pbr,_br,RQ,bbr,vbr,Fbr,DE,nFe,Tbr,Mbr,PQ,Ebr,Cbr,wbr,GE,sFe,Abr,ybr,BQ,Lbr,xbr,$br,OE,lFe,kbr,Sbr,IQ,Rbr,Pbr,Bbr,VE,iFe,Ibr,qbr,qQ,Nbr,jbr,Dbr,XE,dFe,Gbr,Obr,NQ,Vbr,Xbr,zbr,zE,cFe,Wbr,Qbr,jQ,Hbr,Ubr,Jbr,WE,mFe,Ybr,Kbr,DQ,Zbr,e2r,o2r,QE,fFe,r2r,t2r,GQ,a2r,n2r,s2r,HE,gFe,l2r,i2r,OQ,d2r,c2r,m2r,UE,hFe,f2r,g2r,VQ,h2r,u2r,p2r,JE,hNe,oc,YE,uFe,F7,_2r,pFe,b2r,uNe,rr,T7,v2r,rc,F2r,XQ,T2r,M2r,zQ,E2r,C2r,w2r,M7,A2r,_Fe,y2r,L2r,x2r,St,E7,$2r,bFe,k2r,S2r,tc,R2r,vFe,P2r,B2r,WQ,I2r,q2r,N2r,KE,j2r,$r,C7,D2r,FFe,G2r,O2r,an,V2r,TFe,X2r,z2r,MFe,W2r,Q2r,EFe,H2r,U2r,J2r,ye,ZE,CFe,Y2r,K2r,QQ,Z2r,evr,ovr,eC,wFe,rvr,tvr,HQ,avr,nvr,svr,oC,AFe,lvr,ivr,UQ,dvr,cvr,mvr,rC,yFe,fvr,gvr,JQ,hvr,uvr,pvr,tC,LFe,_vr,bvr,YQ,vvr,Fvr,Tvr,aC,xFe,Mvr,Evr,KQ,Cvr,wvr,Avr,nC,$Fe,yvr,Lvr,ZQ,xvr,$vr,kvr,sC,kFe,Svr,Rvr,eH,Pvr,Bvr,Ivr,lC,SFe,qvr,Nvr,oH,jvr,Dvr,Gvr,iC,RFe,Ovr,Vvr,rH,Xvr,zvr,Wvr,dC,pNe,ac,cC,PFe,w7,Qvr,BFe,Hvr,_Ne,tr,A7,Uvr,nc,Jvr,tH,Yvr,Kvr,aH,Zvr,eFr,oFr,y7,rFr,IFe,tFr,aFr,nFr,Rt,L7,sFr,qFe,lFr,iFr,sc,dFr,NFe,cFr,mFr,nH,fFr,gFr,hFr,mC,uFr,kr,x7,pFr,jFe,_Fr,bFr,nn,vFr,DFe,FFr,TFr,GFe,MFr,EFr,OFe,CFr,wFr,AFr,ee,fC,VFe,yFr,LFr,sH,xFr,$Fr,kFr,gC,XFe,SFr,RFr,lH,PFr,BFr,IFr,hC,zFe,qFr,NFr,iH,jFr,DFr,GFr,uC,WFe,OFr,VFr,dH,XFr,zFr,WFr,pC,QFe,QFr,HFr,cH,UFr,JFr,YFr,_C,HFe,KFr,ZFr,mH,e1r,o1r,r1r,bC,UFe,t1r,a1r,fH,n1r,s1r,l1r,vC,JFe,i1r,d1r,gH,c1r,m1r,f1r,FC,YFe,g1r,h1r,hH,u1r,p1r,_1r,TC,KFe,b1r,v1r,uH,F1r,T1r,M1r,MC,ZFe,E1r,C1r,pH,w1r,A1r,y1r,EC,e1e,L1r,x1r,_H,$1r,k1r,S1r,CC,o1e,R1r,P1r,bH,B1r,I1r,q1r,wC,r1e,N1r,j1r,vH,D1r,G1r,O1r,AC,t1e,V1r,X1r,FH,z1r,W1r,Q1r,yC,a1e,H1r,U1r,TH,J1r,Y1r,K1r,LC,n1e,Z1r,eTr,MH,oTr,rTr,tTr,xC,s1e,aTr,nTr,EH,sTr,lTr,iTr,$C,l1e,dTr,cTr,CH,mTr,fTr,gTr,kC,i1e,hTr,uTr,wH,pTr,_Tr,bTr,SC,d1e,vTr,FTr,AH,TTr,MTr,ETr,RC,c1e,CTr,wTr,yH,ATr,yTr,LTr,PC,m1e,xTr,$Tr,LH,kTr,STr,RTr,BC,f1e,PTr,BTr,xH,ITr,qTr,NTr,IC,g1e,jTr,DTr,$H,GTr,OTr,VTr,qC,h1e,XTr,zTr,kH,WTr,QTr,HTr,NC,bNe,lc,jC,u1e,$7,UTr,p1e,JTr,vNe,ar,k7,YTr,ic,KTr,SH,ZTr,eMr,RH,oMr,rMr,tMr,S7,aMr,_1e,nMr,sMr,lMr,Pt,R7,iMr,b1e,dMr,cMr,dc,mMr,v1e,fMr,gMr,PH,hMr,uMr,pMr,DC,_Mr,Sr,P7,bMr,F1e,vMr,FMr,sn,TMr,T1e,MMr,EMr,M1e,CMr,wMr,E1e,AMr,yMr,LMr,he,GC,C1e,xMr,$Mr,BH,kMr,SMr,RMr,OC,w1e,PMr,BMr,IH,IMr,qMr,NMr,VC,A1e,jMr,DMr,qH,GMr,OMr,VMr,XC,y1e,XMr,zMr,NH,WMr,QMr,HMr,zC,L1e,UMr,JMr,jH,YMr,KMr,ZMr,WC,x1e,e4r,o4r,DH,r4r,t4r,a4r,QC,$1e,n4r,s4r,GH,l4r,i4r,d4r,HC,k1e,c4r,m4r,OH,f4r,g4r,h4r,UC,S1e,u4r,p4r,VH,_4r,b4r,v4r,JC,R1e,F4r,T4r,XH,M4r,E4r,C4r,YC,P1e,w4r,A4r,zH,y4r,L4r,x4r,KC,B1e,$4r,k4r,WH,S4r,R4r,P4r,ZC,I1e,B4r,I4r,QH,q4r,N4r,j4r,e5,q1e,D4r,G4r,HH,O4r,V4r,X4r,o5,N1e,z4r,W4r,UH,Q4r,H4r,U4r,r5,j1e,J4r,Y4r,JH,K4r,Z4r,eEr,t5,D1e,oEr,rEr,YH,tEr,aEr,nEr,a5,FNe,cc,n5,G1e,B7,sEr,O1e,lEr,TNe,nr,I7,iEr,mc,dEr,KH,cEr,mEr,ZH,fEr,gEr,hEr,q7,uEr,V1e,pEr,_Er,bEr,Bt,N7,vEr,X1e,FEr,TEr,fc,MEr,z1e,EEr,CEr,eU,wEr,AEr,yEr,s5,LEr,Rr,j7,xEr,W1e,$Er,kEr,ln,SEr,Q1e,REr,PEr,H1e,BEr,IEr,U1e,qEr,NEr,jEr,D7,l5,J1e,DEr,GEr,oU,OEr,VEr,XEr,i5,Y1e,zEr,WEr,rU,QEr,HEr,UEr,d5,MNe,gc,c5,K1e,G7,JEr,Z1e,YEr,ENe,sr,O7,KEr,hc,ZEr,tU,eCr,oCr,aU,rCr,tCr,aCr,V7,nCr,eTe,sCr,lCr,iCr,It,X7,dCr,oTe,cCr,mCr,uc,fCr,rTe,gCr,hCr,nU,uCr,pCr,_Cr,m5,bCr,Pr,z7,vCr,tTe,FCr,TCr,dn,MCr,aTe,ECr,CCr,nTe,wCr,ACr,sTe,yCr,LCr,xCr,lTe,f5,iTe,$Cr,kCr,sU,SCr,RCr,PCr,g5,CNe,pc,h5,dTe,W7,BCr,cTe,ICr,wNe,lr,Q7,qCr,_c,NCr,lU,jCr,DCr,iU,GCr,OCr,VCr,H7,XCr,mTe,zCr,WCr,QCr,qt,U7,HCr,fTe,UCr,JCr,bc,YCr,gTe,KCr,ZCr,dU,e5r,o5r,r5r,u5,t5r,Br,J7,a5r,hTe,n5r,s5r,cn,l5r,uTe,i5r,d5r,pTe,c5r,m5r,_Te,f5r,g5r,h5r,de,p5,bTe,u5r,p5r,cU,_5r,b5r,v5r,_5,vTe,F5r,T5r,mU,M5r,E5r,C5r,b5,FTe,w5r,A5r,fU,y5r,L5r,x5r,v5,TTe,$5r,k5r,gU,S5r,R5r,P5r,F5,MTe,B5r,I5r,hU,q5r,N5r,j5r,T5,ETe,D5r,G5r,uU,O5r,V5r,X5r,M5,CTe,z5r,W5r,pU,Q5r,H5r,U5r,E5,wTe,J5r,Y5r,_U,K5r,Z5r,e3r,C5,ATe,o3r,r3r,bU,t3r,a3r,n3r,w5,yTe,s3r,l3r,vU,i3r,d3r,c3r,A5,LTe,m3r,f3r,FU,g3r,h3r,u3r,y5,xTe,p3r,_3r,TU,b3r,v3r,F3r,L5,$Te,T3r,M3r,MU,E3r,C3r,w3r,x5,kTe,A3r,y3r,EU,L3r,x3r,$3r,$5,STe,k3r,S3r,CU,R3r,P3r,B3r,k5,RTe,I3r,q3r,wU,N3r,j3r,D3r,S5,PTe,G3r,O3r,AU,V3r,X3r,z3r,R5,BTe,W3r,Q3r,yU,H3r,U3r,J3r,P5,ITe,Y3r,K3r,LU,Z3r,ewr,owr,B5,qTe,rwr,twr,xU,awr,nwr,swr,I5,ANe,vc,q5,NTe,Y7,lwr,jTe,iwr,yNe,ir,K7,dwr,Fc,cwr,$U,mwr,fwr,kU,gwr,hwr,uwr,Z7,pwr,DTe,_wr,bwr,vwr,Nt,e9,Fwr,GTe,Twr,Mwr,Tc,Ewr,OTe,Cwr,wwr,SU,Awr,ywr,Lwr,N5,xwr,Ir,o9,$wr,VTe,kwr,Swr,mn,Rwr,XTe,Pwr,Bwr,zTe,Iwr,qwr,WTe,Nwr,jwr,Dwr,ce,j5,QTe,Gwr,Owr,RU,Vwr,Xwr,zwr,D5,HTe,Wwr,Qwr,PU,Hwr,Uwr,Jwr,G5,UTe,Ywr,Kwr,BU,Zwr,e0r,o0r,O5,JTe,r0r,t0r,IU,a0r,n0r,s0r,V5,YTe,l0r,i0r,qU,d0r,c0r,m0r,X5,KTe,f0r,g0r,NU,h0r,u0r,p0r,z5,ZTe,_0r,b0r,jU,v0r,F0r,T0r,W5,eMe,M0r,E0r,DU,C0r,w0r,A0r,Q5,oMe,y0r,L0r,GU,x0r,$0r,k0r,H5,rMe,S0r,R0r,OU,P0r,B0r,I0r,U5,tMe,q0r,N0r,VU,j0r,D0r,G0r,J5,aMe,O0r,V0r,XU,X0r,z0r,W0r,Y5,nMe,Q0r,H0r,zU,U0r,J0r,Y0r,K5,sMe,K0r,Z0r,WU,eAr,oAr,rAr,Z5,lMe,tAr,aAr,QU,nAr,sAr,lAr,e3,iMe,iAr,dAr,HU,cAr,mAr,fAr,o3,dMe,gAr,hAr,UU,uAr,pAr,_Ar,r3,cMe,bAr,vAr,JU,FAr,TAr,MAr,t3,mMe,EAr,CAr,YU,wAr,AAr,yAr,a3,fMe,LAr,xAr,KU,$Ar,kAr,SAr,n3,LNe,Mc,s3,gMe,r9,RAr,hMe,PAr,xNe,dr,t9,BAr,Ec,IAr,ZU,qAr,NAr,eJ,jAr,DAr,GAr,a9,OAr,uMe,VAr,XAr,zAr,jt,n9,WAr,pMe,QAr,HAr,Cc,UAr,_Me,JAr,YAr,oJ,KAr,ZAr,e6r,l3,o6r,qr,s9,r6r,bMe,t6r,a6r,fn,n6r,vMe,s6r,l6r,FMe,i6r,d6r,TMe,c6r,m6r,f6r,MMe,i3,EMe,g6r,h6r,rJ,u6r,p6r,_6r,d3,$Ne,wc,c3,CMe,l9,b6r,wMe,v6r,kNe,cr,i9,F6r,Ac,T6r,tJ,M6r,E6r,aJ,C6r,w6r,A6r,d9,y6r,AMe,L6r,x6r,$6r,Dt,c9,k6r,yMe,S6r,R6r,yc,P6r,LMe,B6r,I6r,nJ,q6r,N6r,j6r,m3,D6r,Nr,m9,G6r,xMe,O6r,V6r,gn,X6r,$Me,z6r,W6r,kMe,Q6r,H6r,SMe,U6r,J6r,Y6r,RMe,f3,PMe,K6r,Z6r,sJ,eyr,oyr,ryr,g3,SNe,Lc,h3,BMe,f9,tyr,IMe,ayr,RNe,mr,g9,nyr,xc,syr,lJ,lyr,iyr,iJ,dyr,cyr,myr,h9,fyr,qMe,gyr,hyr,uyr,Gt,u9,pyr,NMe,_yr,byr,$c,vyr,jMe,Fyr,Tyr,dJ,Myr,Eyr,Cyr,u3,wyr,jr,p9,Ayr,DMe,yyr,Lyr,hn,xyr,GMe,$yr,kyr,OMe,Syr,Ryr,VMe,Pyr,Byr,Iyr,te,p3,XMe,qyr,Nyr,cJ,jyr,Dyr,Gyr,_3,zMe,Oyr,Vyr,mJ,Xyr,zyr,Wyr,b3,WMe,Qyr,Hyr,fJ,Uyr,Jyr,Yyr,v3,QMe,Kyr,Zyr,gJ,eLr,oLr,rLr,F3,HMe,tLr,aLr,hJ,nLr,sLr,lLr,T3,UMe,iLr,dLr,uJ,cLr,mLr,fLr,M3,JMe,gLr,hLr,pJ,uLr,pLr,_Lr,E3,YMe,bLr,vLr,_J,FLr,TLr,MLr,C3,KMe,ELr,CLr,bJ,wLr,ALr,yLr,w3,ZMe,LLr,xLr,vJ,$Lr,kLr,SLr,A3,e4e,RLr,PLr,FJ,BLr,ILr,qLr,y3,o4e,NLr,jLr,TJ,DLr,GLr,OLr,L3,r4e,VLr,XLr,MJ,zLr,WLr,QLr,x3,t4e,HLr,ULr,EJ,JLr,YLr,KLr,$3,a4e,ZLr,e8r,CJ,o8r,r8r,t8r,k3,n4e,a8r,n8r,wJ,s8r,l8r,i8r,S3,s4e,d8r,c8r,AJ,m8r,f8r,g8r,R3,l4e,h8r,u8r,yJ,p8r,_8r,b8r,P3,i4e,v8r,F8r,LJ,T8r,M8r,E8r,B3,d4e,C8r,w8r,xJ,A8r,y8r,L8r,I3,c4e,x8r,$8r,$J,k8r,S8r,R8r,q3,m4e,P8r,B8r,kJ,I8r,q8r,N8r,N3,f4e,j8r,D8r,SJ,G8r,O8r,V8r,j3,g4e,X8r,z8r,RJ,W8r,Q8r,H8r,D3,h4e,U8r,J8r,PJ,Y8r,K8r,Z8r,G3,PNe,kc,O3,u4e,_9,e7r,p4e,o7r,BNe,fr,b9,r7r,Sc,t7r,BJ,a7r,n7r,IJ,s7r,l7r,i7r,v9,d7r,_4e,c7r,m7r,f7r,Ot,F9,g7r,b4e,h7r,u7r,Rc,p7r,v4e,_7r,b7r,qJ,v7r,F7r,T7r,V3,M7r,Dr,T9,E7r,F4e,C7r,w7r,un,A7r,T4e,y7r,L7r,M4e,x7r,$7r,E4e,k7r,S7r,R7r,Re,X3,C4e,P7r,B7r,NJ,I7r,q7r,N7r,z3,w4e,j7r,D7r,jJ,G7r,O7r,V7r,W3,A4e,X7r,z7r,DJ,W7r,Q7r,H7r,Q3,y4e,U7r,J7r,GJ,Y7r,K7r,Z7r,H3,L4e,e9r,o9r,OJ,r9r,t9r,a9r,U3,x4e,n9r,s9r,VJ,l9r,i9r,d9r,J3,$4e,c9r,m9r,XJ,f9r,g9r,h9r,Y3,k4e,u9r,p9r,zJ,_9r,b9r,v9r,K3,S4e,F9r,T9r,WJ,M9r,E9r,C9r,Z3,INe,Pc,ew,R4e,M9,w9r,P4e,A9r,qNe,gr,E9,y9r,Bc,L9r,QJ,x9r,$9r,HJ,k9r,S9r,R9r,C9,P9r,B4e,B9r,I9r,q9r,Vt,w9,N9r,I4e,j9r,D9r,Ic,G9r,q4e,O9r,V9r,UJ,X9r,z9r,W9r,ow,Q9r,Gr,A9,H9r,N4e,U9r,J9r,pn,Y9r,j4e,K9r,Z9r,D4e,exr,oxr,G4e,rxr,txr,axr,Ee,rw,O4e,nxr,sxr,JJ,lxr,ixr,dxr,tw,V4e,cxr,mxr,YJ,fxr,gxr,hxr,aw,X4e,uxr,pxr,KJ,_xr,bxr,vxr,nw,z4e,Fxr,Txr,ZJ,Mxr,Exr,Cxr,sw,W4e,wxr,Axr,eY,yxr,Lxr,xxr,lw,Q4e,$xr,kxr,oY,Sxr,Rxr,Pxr,iw,H4e,Bxr,Ixr,rY,qxr,Nxr,jxr,dw,U4e,Dxr,Gxr,tY,Oxr,Vxr,Xxr,cw,J4e,zxr,Wxr,aY,Qxr,Hxr,Uxr,mw,Y4e,Jxr,Yxr,nY,Kxr,Zxr,e$r,fw,K4e,o$r,r$r,sY,t$r,a$r,n$r,gw,Z4e,s$r,l$r,lY,i$r,d$r,c$r,hw,NNe,qc,uw,eEe,y9,m$r,oEe,f$r,jNe,hr,L9,g$r,Nc,h$r,iY,u$r,p$r,dY,_$r,b$r,v$r,x9,F$r,rEe,T$r,M$r,E$r,Xt,$9,C$r,tEe,w$r,A$r,jc,y$r,aEe,L$r,x$r,cY,$$r,k$r,S$r,pw,R$r,Or,k9,P$r,nEe,B$r,I$r,_n,q$r,sEe,N$r,j$r,lEe,D$r,G$r,iEe,O$r,V$r,X$r,Le,_w,dEe,z$r,W$r,mY,Q$r,H$r,U$r,bw,cEe,J$r,Y$r,fY,K$r,Z$r,ekr,vw,mEe,okr,rkr,gY,tkr,akr,nkr,Fw,fEe,skr,lkr,hY,ikr,dkr,ckr,Tw,gEe,mkr,fkr,uY,gkr,hkr,ukr,Mw,hEe,pkr,_kr,pY,bkr,vkr,Fkr,Ew,uEe,Tkr,Mkr,_Y,Ekr,Ckr,wkr,Cw,pEe,Akr,ykr,bY,Lkr,xkr,$kr,ww,_Ee,kkr,Skr,vY,Rkr,Pkr,Bkr,Aw,bEe,Ikr,qkr,FY,Nkr,jkr,Dkr,yw,DNe,Dc,Lw,vEe,S9,Gkr,FEe,Okr,GNe,ur,R9,Vkr,Gc,Xkr,TY,zkr,Wkr,MY,Qkr,Hkr,Ukr,P9,Jkr,TEe,Ykr,Kkr,Zkr,zt,B9,eSr,MEe,oSr,rSr,Oc,tSr,EEe,aSr,nSr,EY,sSr,lSr,iSr,xw,dSr,Vr,I9,cSr,CEe,mSr,fSr,bn,gSr,wEe,hSr,uSr,AEe,pSr,_Sr,yEe,bSr,vSr,FSr,Pe,$w,LEe,TSr,MSr,CY,ESr,CSr,wSr,kw,xEe,ASr,ySr,wY,LSr,xSr,$Sr,Sw,$Ee,kSr,SSr,AY,RSr,PSr,BSr,Rw,kEe,ISr,qSr,yY,NSr,jSr,DSr,Pw,SEe,GSr,OSr,LY,VSr,XSr,zSr,Bw,REe,WSr,QSr,xY,HSr,USr,JSr,Iw,PEe,YSr,KSr,$Y,ZSr,eRr,oRr,qw,BEe,rRr,tRr,kY,aRr,nRr,sRr,Nw,IEe,lRr,iRr,SY,dRr,cRr,mRr,jw,ONe,Vc,Dw,qEe,q9,fRr,NEe,gRr,VNe,pr,N9,hRr,Xc,uRr,RY,pRr,_Rr,PY,bRr,vRr,FRr,j9,TRr,jEe,MRr,ERr,CRr,Wt,D9,wRr,DEe,ARr,yRr,zc,LRr,GEe,xRr,$Rr,BY,kRr,SRr,RRr,Gw,PRr,Xr,G9,BRr,OEe,IRr,qRr,vn,NRr,VEe,jRr,DRr,XEe,GRr,ORr,zEe,VRr,XRr,zRr,xe,Ow,WEe,WRr,QRr,IY,HRr,URr,JRr,Vw,QEe,YRr,KRr,qY,ZRr,ePr,oPr,Xw,HEe,rPr,tPr,NY,aPr,nPr,sPr,zw,UEe,lPr,iPr,jY,dPr,cPr,mPr,Ww,JEe,fPr,gPr,DY,hPr,uPr,pPr,Qw,YEe,_Pr,bPr,GY,vPr,FPr,TPr,Hw,KEe,MPr,EPr,OY,CPr,wPr,APr,Uw,ZEe,yPr,LPr,VY,xPr,$Pr,kPr,Jw,eCe,SPr,RPr,XY,PPr,BPr,IPr,Yw,oCe,qPr,NPr,zY,jPr,DPr,GPr,Kw,XNe,Wc,Zw,rCe,O9,OPr,tCe,VPr,zNe,_r,V9,XPr,Qc,zPr,WY,WPr,QPr,QY,HPr,UPr,JPr,X9,YPr,aCe,KPr,ZPr,eBr,Qt,z9,oBr,nCe,rBr,tBr,Hc,aBr,sCe,nBr,sBr,HY,lBr,iBr,dBr,e0,cBr,zr,W9,mBr,lCe,fBr,gBr,Fn,hBr,iCe,uBr,pBr,dCe,_Br,bBr,cCe,vBr,FBr,TBr,$e,o0,mCe,MBr,EBr,UY,CBr,wBr,ABr,r0,fCe,yBr,LBr,JY,xBr,$Br,kBr,t0,gCe,SBr,RBr,YY,PBr,BBr,IBr,a0,hCe,qBr,NBr,KY,jBr,DBr,GBr,n0,uCe,OBr,VBr,ZY,XBr,zBr,WBr,s0,pCe,QBr,HBr,eK,UBr,JBr,YBr,l0,_Ce,KBr,ZBr,oK,eIr,oIr,rIr,i0,bCe,tIr,aIr,rK,nIr,sIr,lIr,d0,vCe,iIr,dIr,tK,cIr,mIr,fIr,c0,FCe,gIr,hIr,aK,uIr,pIr,_Ir,m0,WNe,Uc,f0,TCe,Q9,bIr,MCe,vIr,QNe,br,H9,FIr,Jc,TIr,nK,MIr,EIr,sK,CIr,wIr,AIr,U9,yIr,ECe,LIr,xIr,$Ir,Ht,J9,kIr,CCe,SIr,RIr,Yc,PIr,wCe,BIr,IIr,lK,qIr,NIr,jIr,g0,DIr,Wr,Y9,GIr,ACe,OIr,VIr,Tn,XIr,yCe,zIr,WIr,LCe,QIr,HIr,xCe,UIr,JIr,YIr,De,h0,$Ce,KIr,ZIr,iK,eqr,oqr,rqr,u0,kCe,tqr,aqr,dK,nqr,sqr,lqr,p0,SCe,iqr,dqr,cK,cqr,mqr,fqr,_0,RCe,gqr,hqr,mK,uqr,pqr,_qr,b0,PCe,bqr,vqr,fK,Fqr,Tqr,Mqr,v0,BCe,Eqr,Cqr,gK,wqr,Aqr,yqr,F0,ICe,Lqr,xqr,hK,$qr,kqr,Sqr,T0,qCe,Rqr,Pqr,uK,Bqr,Iqr,qqr,M0,HNe,Kc,E0,NCe,K9,Nqr,jCe,jqr,UNe,vr,Z9,Dqr,Zc,Gqr,pK,Oqr,Vqr,_K,Xqr,zqr,Wqr,ex,Qqr,DCe,Hqr,Uqr,Jqr,Ut,ox,Yqr,GCe,Kqr,Zqr,em,eNr,OCe,oNr,rNr,bK,tNr,aNr,nNr,C0,sNr,Qr,rx,lNr,VCe,iNr,dNr,Mn,cNr,XCe,mNr,fNr,zCe,gNr,hNr,WCe,uNr,pNr,_Nr,Ge,w0,QCe,bNr,vNr,vK,FNr,TNr,MNr,A0,HCe,ENr,CNr,FK,wNr,ANr,yNr,y0,UCe,LNr,xNr,TK,$Nr,kNr,SNr,L0,JCe,RNr,PNr,MK,BNr,INr,qNr,x0,YCe,NNr,jNr,EK,DNr,GNr,ONr,$0,KCe,VNr,XNr,CK,zNr,WNr,QNr,k0,ZCe,HNr,UNr,wK,JNr,YNr,KNr,S0,e5e,ZNr,ejr,AK,ojr,rjr,tjr,R0,JNe,om,P0,o5e,tx,ajr,r5e,njr,YNe,Fr,ax,sjr,rm,ljr,yK,ijr,djr,LK,cjr,mjr,fjr,nx,gjr,t5e,hjr,ujr,pjr,Jt,sx,_jr,a5e,bjr,vjr,tm,Fjr,n5e,Tjr,Mjr,xK,Ejr,Cjr,wjr,B0,Ajr,Hr,lx,yjr,s5e,Ljr,xjr,En,$jr,l5e,kjr,Sjr,i5e,Rjr,Pjr,d5e,Bjr,Ijr,qjr,c5e,I0,m5e,Njr,jjr,$K,Djr,Gjr,Ojr,q0,KNe,am,N0,f5e,ix,Vjr,g5e,Xjr,ZNe,Tr,dx,zjr,nm,Wjr,kK,Qjr,Hjr,SK,Ujr,Jjr,Yjr,cx,Kjr,h5e,Zjr,eDr,oDr,Yt,mx,rDr,u5e,tDr,aDr,sm,nDr,p5e,sDr,lDr,RK,iDr,dDr,cDr,j0,mDr,Ur,fx,fDr,_5e,gDr,hDr,Cn,uDr,b5e,pDr,_Dr,v5e,bDr,vDr,F5e,FDr,TDr,MDr,gx,D0,T5e,EDr,CDr,PK,wDr,ADr,yDr,G0,M5e,LDr,xDr,BK,$Dr,kDr,SDr,O0,eje,lm,V0,E5e,hx,RDr,C5e,PDr,oje,Mr,ux,BDr,im,IDr,IK,qDr,NDr,qK,jDr,DDr,GDr,px,ODr,w5e,VDr,XDr,zDr,Kt,_x,WDr,A5e,QDr,HDr,dm,UDr,y5e,JDr,YDr,NK,KDr,ZDr,eGr,X0,oGr,Jr,bx,rGr,L5e,tGr,aGr,wn,nGr,x5e,sGr,lGr,$5e,iGr,dGr,k5e,cGr,mGr,fGr,S5e,z0,R5e,gGr,hGr,jK,uGr,pGr,_Gr,W0,rje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),hy=new oe({}),uy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bm=new bGr({props:{warning:!0,$$slots:{default:[A7t]},$$scope:{ctx:L}}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L578"}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L601"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[y7t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L724"}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L388"}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[L7t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L598"}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new bGr({props:{$$slots:{default:[x7t]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[$7t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L87"}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new bGr({props:{$$slots:{default:[k7t]},$$scope:{ctx:L}}}),Yh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[S7t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L254"}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L729"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[R7t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qp=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[P7t]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Up=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[B7t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[I7t]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L751"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[q7t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[N7t]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L758"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[j7t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[D7t]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L765"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[G7t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[O7t]},$$scope:{ctx:L}}}),mL=new oe({}),fL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L774"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[V7t]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[X7t]},$$scope:{ctx:L}}}),pL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[z7t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[W7t]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Q7t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[H7t]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L801"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[U7t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[J7t]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L783"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Y7t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[K7t]},$$scope:{ctx:L}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L790"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Z7t]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L824"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L863"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L870"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),r8=new oe({}),t8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L893"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),l8=new oe({}),i8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),f8=new oe({}),g8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L902"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L856"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L838"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L847"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),e7=new oe({}),o7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),t7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),n7=new oe({}),s7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),i7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),c7=new oe({}),m7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),g7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),u7=new oe({}),p7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),b7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),F7=new oe({}),T7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),E7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),w7=new oe({}),A7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),L7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),$7=new oe({}),k7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),R7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),B7=new oe({}),I7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),N7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),G7=new oe({}),O7=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),X7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),W7=new oe({}),Q7=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),U7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),Y7=new oe({}),K7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),f9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),u9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),_9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),gm=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),cy=o("from_pretrained()"),hm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),my=o("AutoConfig"),Ln=o(", "),xn=a("a"),fy=o("AutoModel"),hi=o(`, and
`),$n=a("a"),gy=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),um=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),k$=o("will create a model that is an instance of "),pi=a("a"),S$=o("BertModel"),R$=o("."),Eo=l(),wa=a("p"),P$=o("There is one class of "),pm=a("code"),B$=o("AutoModel"),cGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZIe=l(),_i=a("h2"),_m=a("a"),See=a("span"),F(hy.$$.fragment),mGe=l(),Ree=a("span"),fGe=o("Extending the Auto Classes"),eqe=l(),kn=a("p"),gGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pee=a("code"),hGe=o("NewModel"),uGe=o(", make sure you have a "),Bee=a("code"),pGe=o("NewModelConfig"),_Ge=o(` then you can add those to the auto
classes like this:`),oqe=l(),F(uy.$$.fragment),rqe=l(),I$=a("p"),bGe=o("You will then be able to use the auto classes like you would usually do!"),tqe=l(),F(bm.$$.fragment),aqe=l(),bi=a("h2"),vm=a("a"),Iee=a("span"),F(py.$$.fragment),vGe=l(),qee=a("span"),FGe=o("AutoConfig"),nqe=l(),Co=a("div"),F(_y.$$.fragment),TGe=l(),by=a("p"),MGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=a("a"),EGe=o("from_pretrained()"),CGe=o(" class method."),wGe=l(),vy=a("p"),AGe=o("This class cannot be instantiated directly using "),Nee=a("code"),yGe=o("__init__()"),LGe=o(" (throws an error)."),xGe=l(),Er=a("div"),F(Fy.$$.fragment),$Ge=l(),jee=a("p"),kGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SGe=l(),vi=a("p"),RGe=o("The configuration class to instantiate is selected based on the "),Dee=a("code"),PGe=o("model_type"),BGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gee=a("code"),IGe=o("pretrained_model_name_or_path"),qGe=o(":"),NGe=l(),A=a("ul"),Fm=a("li"),Oee=a("strong"),jGe=o("albert"),DGe=o(" \u2014 "),N$=a("a"),GGe=o("AlbertConfig"),OGe=o(" (ALBERT model)"),VGe=l(),Tm=a("li"),Vee=a("strong"),XGe=o("bart"),zGe=o(" \u2014 "),j$=a("a"),WGe=o("BartConfig"),QGe=o(" (BART model)"),HGe=l(),Mm=a("li"),Xee=a("strong"),UGe=o("beit"),JGe=o(" \u2014 "),D$=a("a"),YGe=o("BeitConfig"),KGe=o(" (BEiT model)"),ZGe=l(),Em=a("li"),zee=a("strong"),eOe=o("bert"),oOe=o(" \u2014 "),G$=a("a"),rOe=o("BertConfig"),tOe=o(" (BERT model)"),aOe=l(),Cm=a("li"),Wee=a("strong"),nOe=o("bert-generation"),sOe=o(" \u2014 "),O$=a("a"),lOe=o("BertGenerationConfig"),iOe=o(" (Bert Generation model)"),dOe=l(),wm=a("li"),Qee=a("strong"),cOe=o("big_bird"),mOe=o(" \u2014 "),V$=a("a"),fOe=o("BigBirdConfig"),gOe=o(" (BigBird model)"),hOe=l(),Am=a("li"),Hee=a("strong"),uOe=o("bigbird_pegasus"),pOe=o(" \u2014 "),X$=a("a"),_Oe=o("BigBirdPegasusConfig"),bOe=o(" (BigBirdPegasus model)"),vOe=l(),ym=a("li"),Uee=a("strong"),FOe=o("blenderbot"),TOe=o(" \u2014 "),z$=a("a"),MOe=o("BlenderbotConfig"),EOe=o(" (Blenderbot model)"),COe=l(),Lm=a("li"),Jee=a("strong"),wOe=o("blenderbot-small"),AOe=o(" \u2014 "),W$=a("a"),yOe=o("BlenderbotSmallConfig"),LOe=o(" (BlenderbotSmall model)"),xOe=l(),xm=a("li"),Yee=a("strong"),$Oe=o("camembert"),kOe=o(" \u2014 "),Q$=a("a"),SOe=o("CamembertConfig"),ROe=o(" (CamemBERT model)"),POe=l(),$m=a("li"),Kee=a("strong"),BOe=o("canine"),IOe=o(" \u2014 "),H$=a("a"),qOe=o("CanineConfig"),NOe=o(" (Canine model)"),jOe=l(),km=a("li"),Zee=a("strong"),DOe=o("clip"),GOe=o(" \u2014 "),U$=a("a"),OOe=o("CLIPConfig"),VOe=o(" (CLIP model)"),XOe=l(),Sm=a("li"),eoe=a("strong"),zOe=o("convbert"),WOe=o(" \u2014 "),J$=a("a"),QOe=o("ConvBertConfig"),HOe=o(" (ConvBERT model)"),UOe=l(),Rm=a("li"),ooe=a("strong"),JOe=o("convnext"),YOe=o(" \u2014 "),Y$=a("a"),KOe=o("ConvNextConfig"),ZOe=o(" (ConvNext model)"),eVe=l(),Pm=a("li"),roe=a("strong"),oVe=o("ctrl"),rVe=o(" \u2014 "),K$=a("a"),tVe=o("CTRLConfig"),aVe=o(" (CTRL model)"),nVe=l(),Bm=a("li"),toe=a("strong"),sVe=o("cvt"),lVe=o(" \u2014 "),Z$=a("a"),iVe=o("CvtConfig"),dVe=o(" (CvT model)"),cVe=l(),Im=a("li"),aoe=a("strong"),mVe=o("data2vec-audio"),fVe=o(" \u2014 "),ek=a("a"),gVe=o("Data2VecAudioConfig"),hVe=o(" (Data2VecAudio model)"),uVe=l(),qm=a("li"),noe=a("strong"),pVe=o("data2vec-text"),_Ve=o(" \u2014 "),ok=a("a"),bVe=o("Data2VecTextConfig"),vVe=o(" (Data2VecText model)"),FVe=l(),Nm=a("li"),soe=a("strong"),TVe=o("data2vec-vision"),MVe=o(" \u2014 "),rk=a("a"),EVe=o("Data2VecVisionConfig"),CVe=o(" (Data2VecVision model)"),wVe=l(),jm=a("li"),loe=a("strong"),AVe=o("deberta"),yVe=o(" \u2014 "),tk=a("a"),LVe=o("DebertaConfig"),xVe=o(" (DeBERTa model)"),$Ve=l(),Dm=a("li"),ioe=a("strong"),kVe=o("deberta-v2"),SVe=o(" \u2014 "),ak=a("a"),RVe=o("DebertaV2Config"),PVe=o(" (DeBERTa-v2 model)"),BVe=l(),Gm=a("li"),doe=a("strong"),IVe=o("decision_transformer"),qVe=o(" \u2014 "),nk=a("a"),NVe=o("DecisionTransformerConfig"),jVe=o(" (Decision Transformer model)"),DVe=l(),Om=a("li"),coe=a("strong"),GVe=o("deit"),OVe=o(" \u2014 "),sk=a("a"),VVe=o("DeiTConfig"),XVe=o(" (DeiT model)"),zVe=l(),Vm=a("li"),moe=a("strong"),WVe=o("detr"),QVe=o(" \u2014 "),lk=a("a"),HVe=o("DetrConfig"),UVe=o(" (DETR model)"),JVe=l(),Xm=a("li"),foe=a("strong"),YVe=o("distilbert"),KVe=o(" \u2014 "),ik=a("a"),ZVe=o("DistilBertConfig"),eXe=o(" (DistilBERT model)"),oXe=l(),zm=a("li"),goe=a("strong"),rXe=o("dpr"),tXe=o(" \u2014 "),dk=a("a"),aXe=o("DPRConfig"),nXe=o(" (DPR model)"),sXe=l(),Wm=a("li"),hoe=a("strong"),lXe=o("dpt"),iXe=o(" \u2014 "),ck=a("a"),dXe=o("DPTConfig"),cXe=o(" (DPT model)"),mXe=l(),Qm=a("li"),uoe=a("strong"),fXe=o("electra"),gXe=o(" \u2014 "),mk=a("a"),hXe=o("ElectraConfig"),uXe=o(" (ELECTRA model)"),pXe=l(),Hm=a("li"),poe=a("strong"),_Xe=o("encoder-decoder"),bXe=o(" \u2014 "),fk=a("a"),vXe=o("EncoderDecoderConfig"),FXe=o(" (Encoder decoder model)"),TXe=l(),Um=a("li"),_oe=a("strong"),MXe=o("flaubert"),EXe=o(" \u2014 "),gk=a("a"),CXe=o("FlaubertConfig"),wXe=o(" (FlauBERT model)"),AXe=l(),Jm=a("li"),boe=a("strong"),yXe=o("flava"),LXe=o(" \u2014 "),hk=a("a"),xXe=o("FlavaConfig"),$Xe=o(" (Flava model)"),kXe=l(),Ym=a("li"),voe=a("strong"),SXe=o("fnet"),RXe=o(" \u2014 "),uk=a("a"),PXe=o("FNetConfig"),BXe=o(" (FNet model)"),IXe=l(),Km=a("li"),Foe=a("strong"),qXe=o("fsmt"),NXe=o(" \u2014 "),pk=a("a"),jXe=o("FSMTConfig"),DXe=o(" (FairSeq Machine-Translation model)"),GXe=l(),Zm=a("li"),Toe=a("strong"),OXe=o("funnel"),VXe=o(" \u2014 "),_k=a("a"),XXe=o("FunnelConfig"),zXe=o(" (Funnel Transformer model)"),WXe=l(),ef=a("li"),Moe=a("strong"),QXe=o("glpn"),HXe=o(" \u2014 "),bk=a("a"),UXe=o("GLPNConfig"),JXe=o(" (GLPN model)"),YXe=l(),of=a("li"),Eoe=a("strong"),KXe=o("gpt2"),ZXe=o(" \u2014 "),vk=a("a"),eze=o("GPT2Config"),oze=o(" (OpenAI GPT-2 model)"),rze=l(),rf=a("li"),Coe=a("strong"),tze=o("gpt_neo"),aze=o(" \u2014 "),Fk=a("a"),nze=o("GPTNeoConfig"),sze=o(" (GPT Neo model)"),lze=l(),tf=a("li"),woe=a("strong"),ize=o("gptj"),dze=o(" \u2014 "),Tk=a("a"),cze=o("GPTJConfig"),mze=o(" (GPT-J model)"),fze=l(),af=a("li"),Aoe=a("strong"),gze=o("hubert"),hze=o(" \u2014 "),Mk=a("a"),uze=o("HubertConfig"),pze=o(" (Hubert model)"),_ze=l(),nf=a("li"),yoe=a("strong"),bze=o("ibert"),vze=o(" \u2014 "),Ek=a("a"),Fze=o("IBertConfig"),Tze=o(" (I-BERT model)"),Mze=l(),sf=a("li"),Loe=a("strong"),Eze=o("imagegpt"),Cze=o(" \u2014 "),Ck=a("a"),wze=o("ImageGPTConfig"),Aze=o(" (ImageGPT model)"),yze=l(),lf=a("li"),xoe=a("strong"),Lze=o("layoutlm"),xze=o(" \u2014 "),wk=a("a"),$ze=o("LayoutLMConfig"),kze=o(" (LayoutLM model)"),Sze=l(),df=a("li"),$oe=a("strong"),Rze=o("layoutlmv2"),Pze=o(" \u2014 "),Ak=a("a"),Bze=o("LayoutLMv2Config"),Ize=o(" (LayoutLMv2 model)"),qze=l(),cf=a("li"),koe=a("strong"),Nze=o("led"),jze=o(" \u2014 "),yk=a("a"),Dze=o("LEDConfig"),Gze=o(" (LED model)"),Oze=l(),mf=a("li"),Soe=a("strong"),Vze=o("longformer"),Xze=o(" \u2014 "),Lk=a("a"),zze=o("LongformerConfig"),Wze=o(" (Longformer model)"),Qze=l(),ff=a("li"),Roe=a("strong"),Hze=o("luke"),Uze=o(" \u2014 "),xk=a("a"),Jze=o("LukeConfig"),Yze=o(" (LUKE model)"),Kze=l(),gf=a("li"),Poe=a("strong"),Zze=o("lxmert"),eWe=o(" \u2014 "),$k=a("a"),oWe=o("LxmertConfig"),rWe=o(" (LXMERT model)"),tWe=l(),hf=a("li"),Boe=a("strong"),aWe=o("m2m_100"),nWe=o(" \u2014 "),kk=a("a"),sWe=o("M2M100Config"),lWe=o(" (M2M100 model)"),iWe=l(),uf=a("li"),Ioe=a("strong"),dWe=o("marian"),cWe=o(" \u2014 "),Sk=a("a"),mWe=o("MarianConfig"),fWe=o(" (Marian model)"),gWe=l(),pf=a("li"),qoe=a("strong"),hWe=o("maskformer"),uWe=o(" \u2014 "),Rk=a("a"),pWe=o("MaskFormerConfig"),_We=o(" (MaskFormer model)"),bWe=l(),_f=a("li"),Noe=a("strong"),vWe=o("mbart"),FWe=o(" \u2014 "),Pk=a("a"),TWe=o("MBartConfig"),MWe=o(" (mBART model)"),EWe=l(),bf=a("li"),joe=a("strong"),CWe=o("megatron-bert"),wWe=o(" \u2014 "),Bk=a("a"),AWe=o("MegatronBertConfig"),yWe=o(" (MegatronBert model)"),LWe=l(),vf=a("li"),Doe=a("strong"),xWe=o("mobilebert"),$We=o(" \u2014 "),Ik=a("a"),kWe=o("MobileBertConfig"),SWe=o(" (MobileBERT model)"),RWe=l(),Ff=a("li"),Goe=a("strong"),PWe=o("mpnet"),BWe=o(" \u2014 "),qk=a("a"),IWe=o("MPNetConfig"),qWe=o(" (MPNet model)"),NWe=l(),Tf=a("li"),Ooe=a("strong"),jWe=o("mt5"),DWe=o(" \u2014 "),Nk=a("a"),GWe=o("MT5Config"),OWe=o(" (mT5 model)"),VWe=l(),Mf=a("li"),Voe=a("strong"),XWe=o("nystromformer"),zWe=o(" \u2014 "),jk=a("a"),WWe=o("NystromformerConfig"),QWe=o(" (Nystromformer model)"),HWe=l(),Ef=a("li"),Xoe=a("strong"),UWe=o("openai-gpt"),JWe=o(" \u2014 "),Dk=a("a"),YWe=o("OpenAIGPTConfig"),KWe=o(" (OpenAI GPT model)"),ZWe=l(),Cf=a("li"),zoe=a("strong"),eQe=o("opt"),oQe=o(" \u2014 "),Gk=a("a"),rQe=o("OPTConfig"),tQe=o(" (OPT model)"),aQe=l(),wf=a("li"),Woe=a("strong"),nQe=o("pegasus"),sQe=o(" \u2014 "),Ok=a("a"),lQe=o("PegasusConfig"),iQe=o(" (Pegasus model)"),dQe=l(),Af=a("li"),Qoe=a("strong"),cQe=o("perceiver"),mQe=o(" \u2014 "),Vk=a("a"),fQe=o("PerceiverConfig"),gQe=o(" (Perceiver model)"),hQe=l(),yf=a("li"),Hoe=a("strong"),uQe=o("plbart"),pQe=o(" \u2014 "),Xk=a("a"),_Qe=o("PLBartConfig"),bQe=o(" (PLBart model)"),vQe=l(),Lf=a("li"),Uoe=a("strong"),FQe=o("poolformer"),TQe=o(" \u2014 "),zk=a("a"),MQe=o("PoolFormerConfig"),EQe=o(" (PoolFormer model)"),CQe=l(),xf=a("li"),Joe=a("strong"),wQe=o("prophetnet"),AQe=o(" \u2014 "),Wk=a("a"),yQe=o("ProphetNetConfig"),LQe=o(" (ProphetNet model)"),xQe=l(),$f=a("li"),Yoe=a("strong"),$Qe=o("qdqbert"),kQe=o(" \u2014 "),Qk=a("a"),SQe=o("QDQBertConfig"),RQe=o(" (QDQBert model)"),PQe=l(),kf=a("li"),Koe=a("strong"),BQe=o("rag"),IQe=o(" \u2014 "),Hk=a("a"),qQe=o("RagConfig"),NQe=o(" (RAG model)"),jQe=l(),Sf=a("li"),Zoe=a("strong"),DQe=o("realm"),GQe=o(" \u2014 "),Uk=a("a"),OQe=o("RealmConfig"),VQe=o(" (Realm model)"),XQe=l(),Rf=a("li"),ere=a("strong"),zQe=o("reformer"),WQe=o(" \u2014 "),Jk=a("a"),QQe=o("ReformerConfig"),HQe=o(" (Reformer model)"),UQe=l(),Pf=a("li"),ore=a("strong"),JQe=o("regnet"),YQe=o(" \u2014 "),Yk=a("a"),KQe=o("RegNetConfig"),ZQe=o(" (RegNet model)"),eHe=l(),Bf=a("li"),rre=a("strong"),oHe=o("rembert"),rHe=o(" \u2014 "),Kk=a("a"),tHe=o("RemBertConfig"),aHe=o(" (RemBERT model)"),nHe=l(),If=a("li"),tre=a("strong"),sHe=o("resnet"),lHe=o(" \u2014 "),Zk=a("a"),iHe=o("ResNetConfig"),dHe=o(" (ResNet model)"),cHe=l(),qf=a("li"),are=a("strong"),mHe=o("retribert"),fHe=o(" \u2014 "),eS=a("a"),gHe=o("RetriBertConfig"),hHe=o(" (RetriBERT model)"),uHe=l(),Nf=a("li"),nre=a("strong"),pHe=o("roberta"),_He=o(" \u2014 "),oS=a("a"),bHe=o("RobertaConfig"),vHe=o(" (RoBERTa model)"),FHe=l(),jf=a("li"),sre=a("strong"),THe=o("roformer"),MHe=o(" \u2014 "),rS=a("a"),EHe=o("RoFormerConfig"),CHe=o(" (RoFormer model)"),wHe=l(),Df=a("li"),lre=a("strong"),AHe=o("segformer"),yHe=o(" \u2014 "),tS=a("a"),LHe=o("SegformerConfig"),xHe=o(" (SegFormer model)"),$He=l(),Gf=a("li"),ire=a("strong"),kHe=o("sew"),SHe=o(" \u2014 "),aS=a("a"),RHe=o("SEWConfig"),PHe=o(" (SEW model)"),BHe=l(),Of=a("li"),dre=a("strong"),IHe=o("sew-d"),qHe=o(" \u2014 "),nS=a("a"),NHe=o("SEWDConfig"),jHe=o(" (SEW-D model)"),DHe=l(),Vf=a("li"),cre=a("strong"),GHe=o("speech-encoder-decoder"),OHe=o(" \u2014 "),sS=a("a"),VHe=o("SpeechEncoderDecoderConfig"),XHe=o(" (Speech Encoder decoder model)"),zHe=l(),Xf=a("li"),mre=a("strong"),WHe=o("speech_to_text"),QHe=o(" \u2014 "),lS=a("a"),HHe=o("Speech2TextConfig"),UHe=o(" (Speech2Text model)"),JHe=l(),zf=a("li"),fre=a("strong"),YHe=o("speech_to_text_2"),KHe=o(" \u2014 "),iS=a("a"),ZHe=o("Speech2Text2Config"),eUe=o(" (Speech2Text2 model)"),oUe=l(),Wf=a("li"),gre=a("strong"),rUe=o("splinter"),tUe=o(" \u2014 "),dS=a("a"),aUe=o("SplinterConfig"),nUe=o(" (Splinter model)"),sUe=l(),Qf=a("li"),hre=a("strong"),lUe=o("squeezebert"),iUe=o(" \u2014 "),cS=a("a"),dUe=o("SqueezeBertConfig"),cUe=o(" (SqueezeBERT model)"),mUe=l(),Hf=a("li"),ure=a("strong"),fUe=o("swin"),gUe=o(" \u2014 "),mS=a("a"),hUe=o("SwinConfig"),uUe=o(" (Swin model)"),pUe=l(),Uf=a("li"),pre=a("strong"),_Ue=o("t5"),bUe=o(" \u2014 "),fS=a("a"),vUe=o("T5Config"),FUe=o(" (T5 model)"),TUe=l(),Jf=a("li"),_re=a("strong"),MUe=o("tapas"),EUe=o(" \u2014 "),gS=a("a"),CUe=o("TapasConfig"),wUe=o(" (TAPAS model)"),AUe=l(),Yf=a("li"),bre=a("strong"),yUe=o("trajectory_transformer"),LUe=o(" \u2014 "),hS=a("a"),xUe=o("TrajectoryTransformerConfig"),$Ue=o(" (Trajectory Transformer model)"),kUe=l(),Kf=a("li"),vre=a("strong"),SUe=o("transfo-xl"),RUe=o(" \u2014 "),uS=a("a"),PUe=o("TransfoXLConfig"),BUe=o(" (Transformer-XL model)"),IUe=l(),Zf=a("li"),Fre=a("strong"),qUe=o("trocr"),NUe=o(" \u2014 "),pS=a("a"),jUe=o("TrOCRConfig"),DUe=o(" (TrOCR model)"),GUe=l(),eg=a("li"),Tre=a("strong"),OUe=o("unispeech"),VUe=o(" \u2014 "),_S=a("a"),XUe=o("UniSpeechConfig"),zUe=o(" (UniSpeech model)"),WUe=l(),og=a("li"),Mre=a("strong"),QUe=o("unispeech-sat"),HUe=o(" \u2014 "),bS=a("a"),UUe=o("UniSpeechSatConfig"),JUe=o(" (UniSpeechSat model)"),YUe=l(),rg=a("li"),Ere=a("strong"),KUe=o("van"),ZUe=o(" \u2014 "),vS=a("a"),eJe=o("VanConfig"),oJe=o(" (VAN model)"),rJe=l(),tg=a("li"),Cre=a("strong"),tJe=o("vilt"),aJe=o(" \u2014 "),FS=a("a"),nJe=o("ViltConfig"),sJe=o(" (ViLT model)"),lJe=l(),ag=a("li"),wre=a("strong"),iJe=o("vision-encoder-decoder"),dJe=o(" \u2014 "),TS=a("a"),cJe=o("VisionEncoderDecoderConfig"),mJe=o(" (Vision Encoder decoder model)"),fJe=l(),ng=a("li"),Are=a("strong"),gJe=o("vision-text-dual-encoder"),hJe=o(" \u2014 "),MS=a("a"),uJe=o("VisionTextDualEncoderConfig"),pJe=o(" (VisionTextDualEncoder model)"),_Je=l(),sg=a("li"),yre=a("strong"),bJe=o("visual_bert"),vJe=o(" \u2014 "),ES=a("a"),FJe=o("VisualBertConfig"),TJe=o(" (VisualBert model)"),MJe=l(),lg=a("li"),Lre=a("strong"),EJe=o("vit"),CJe=o(" \u2014 "),CS=a("a"),wJe=o("ViTConfig"),AJe=o(" (ViT model)"),yJe=l(),ig=a("li"),xre=a("strong"),LJe=o("vit_mae"),xJe=o(" \u2014 "),wS=a("a"),$Je=o("ViTMAEConfig"),kJe=o(" (ViTMAE model)"),SJe=l(),dg=a("li"),$re=a("strong"),RJe=o("wav2vec2"),PJe=o(" \u2014 "),AS=a("a"),BJe=o("Wav2Vec2Config"),IJe=o(" (Wav2Vec2 model)"),qJe=l(),cg=a("li"),kre=a("strong"),NJe=o("wav2vec2-conformer"),jJe=o(" \u2014 "),yS=a("a"),DJe=o("Wav2Vec2ConformerConfig"),GJe=o(" (Wav2Vec2-Conformer model)"),OJe=l(),mg=a("li"),Sre=a("strong"),VJe=o("wavlm"),XJe=o(" \u2014 "),LS=a("a"),zJe=o("WavLMConfig"),WJe=o(" (WavLM model)"),QJe=l(),fg=a("li"),Rre=a("strong"),HJe=o("xglm"),UJe=o(" \u2014 "),xS=a("a"),JJe=o("XGLMConfig"),YJe=o(" (XGLM model)"),KJe=l(),gg=a("li"),Pre=a("strong"),ZJe=o("xlm"),eYe=o(" \u2014 "),$S=a("a"),oYe=o("XLMConfig"),rYe=o(" (XLM model)"),tYe=l(),hg=a("li"),Bre=a("strong"),aYe=o("xlm-prophetnet"),nYe=o(" \u2014 "),kS=a("a"),sYe=o("XLMProphetNetConfig"),lYe=o(" (XLMProphetNet model)"),iYe=l(),ug=a("li"),Ire=a("strong"),dYe=o("xlm-roberta"),cYe=o(" \u2014 "),SS=a("a"),mYe=o("XLMRobertaConfig"),fYe=o(" (XLM-RoBERTa model)"),gYe=l(),pg=a("li"),qre=a("strong"),hYe=o("xlm-roberta-xl"),uYe=o(" \u2014 "),RS=a("a"),pYe=o("XLMRobertaXLConfig"),_Ye=o(" (XLM-RoBERTa-XL model)"),bYe=l(),_g=a("li"),Nre=a("strong"),vYe=o("xlnet"),FYe=o(" \u2014 "),PS=a("a"),TYe=o("XLNetConfig"),MYe=o(" (XLNet model)"),EYe=l(),bg=a("li"),jre=a("strong"),CYe=o("yolos"),wYe=o(" \u2014 "),BS=a("a"),AYe=o("YolosConfig"),yYe=o(" (YOLOS model)"),LYe=l(),vg=a("li"),Dre=a("strong"),xYe=o("yoso"),$Ye=o(" \u2014 "),IS=a("a"),kYe=o("YosoConfig"),SYe=o(" (YOSO model)"),RYe=l(),F(Fg.$$.fragment),PYe=l(),Tg=a("div"),F(Ty.$$.fragment),BYe=l(),Gre=a("p"),IYe=o("Register a new configuration for this class."),sqe=l(),Fi=a("h2"),Mg=a("a"),Ore=a("span"),F(My.$$.fragment),qYe=l(),Vre=a("span"),NYe=o("AutoTokenizer"),lqe=l(),wo=a("div"),F(Ey.$$.fragment),jYe=l(),Cy=a("p"),DYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qS=a("a"),GYe=o("AutoTokenizer.from_pretrained()"),OYe=o(" class method."),VYe=l(),wy=a("p"),XYe=o("This class cannot be instantiated directly using "),Xre=a("code"),zYe=o("__init__()"),WYe=o(" (throws an error)."),QYe=l(),Cr=a("div"),F(Ay.$$.fragment),HYe=l(),zre=a("p"),UYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JYe=l(),Aa=a("p"),YYe=o("The tokenizer class to instantiate is selected based on the "),Wre=a("code"),KYe=o("model_type"),ZYe=o(` property of the config object (either
passed as an argument or loaded from `),Qre=a("code"),eKe=o("pretrained_model_name_or_path"),oKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=a("code"),rKe=o("pretrained_model_name_or_path"),tKe=o(":"),aKe=l(),k=a("ul"),Sn=a("li"),Ure=a("strong"),nKe=o("albert"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("AlbertTokenizer"),iKe=o(" or "),jS=a("a"),dKe=o("AlbertTokenizerFast"),cKe=o(" (ALBERT model)"),mKe=l(),Rn=a("li"),Jre=a("strong"),fKe=o("bart"),gKe=o(" \u2014 "),DS=a("a"),hKe=o("BartTokenizer"),uKe=o(" or "),GS=a("a"),pKe=o("BartTokenizerFast"),_Ke=o(" (BART model)"),bKe=l(),Pn=a("li"),Yre=a("strong"),vKe=o("barthez"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("BarthezTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("BarthezTokenizerFast"),CKe=o(" (BARThez model)"),wKe=l(),Eg=a("li"),Kre=a("strong"),AKe=o("bartpho"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BartphoTokenizer"),xKe=o(" (BARTpho model)"),$Ke=l(),Bn=a("li"),Zre=a("strong"),kKe=o("bert"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("BertTokenizer"),PKe=o(" or "),WS=a("a"),BKe=o("BertTokenizerFast"),IKe=o(" (BERT model)"),qKe=l(),Cg=a("li"),ete=a("strong"),NKe=o("bert-generation"),jKe=o(" \u2014 "),QS=a("a"),DKe=o("BertGenerationTokenizer"),GKe=o(" (Bert Generation model)"),OKe=l(),wg=a("li"),ote=a("strong"),VKe=o("bert-japanese"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("BertJapaneseTokenizer"),WKe=o(" (BertJapanese model)"),QKe=l(),Ag=a("li"),rte=a("strong"),HKe=o("bertweet"),UKe=o(" \u2014 "),US=a("a"),JKe=o("BertweetTokenizer"),YKe=o(" (Bertweet model)"),KKe=l(),In=a("li"),tte=a("strong"),ZKe=o("big_bird"),eZe=o(" \u2014 "),JS=a("a"),oZe=o("BigBirdTokenizer"),rZe=o(" or "),YS=a("a"),tZe=o("BigBirdTokenizerFast"),aZe=o(" (BigBird model)"),nZe=l(),qn=a("li"),ate=a("strong"),sZe=o("bigbird_pegasus"),lZe=o(" \u2014 "),KS=a("a"),iZe=o("PegasusTokenizer"),dZe=o(" or "),ZS=a("a"),cZe=o("PegasusTokenizerFast"),mZe=o(" (BigBirdPegasus model)"),fZe=l(),Nn=a("li"),nte=a("strong"),gZe=o("blenderbot"),hZe=o(" \u2014 "),eR=a("a"),uZe=o("BlenderbotTokenizer"),pZe=o(" or "),oR=a("a"),_Ze=o("BlenderbotTokenizerFast"),bZe=o(" (Blenderbot model)"),vZe=l(),yg=a("li"),ste=a("strong"),FZe=o("blenderbot-small"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("BlenderbotSmallTokenizer"),EZe=o(" (BlenderbotSmall model)"),CZe=l(),Lg=a("li"),lte=a("strong"),wZe=o("byt5"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("ByT5Tokenizer"),LZe=o(" (ByT5 model)"),xZe=l(),jn=a("li"),ite=a("strong"),$Ze=o("camembert"),kZe=o(" \u2014 "),aR=a("a"),SZe=o("CamembertTokenizer"),RZe=o(" or "),nR=a("a"),PZe=o("CamembertTokenizerFast"),BZe=o(" (CamemBERT model)"),IZe=l(),xg=a("li"),dte=a("strong"),qZe=o("canine"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("CanineTokenizer"),DZe=o(" (Canine model)"),GZe=l(),Dn=a("li"),cte=a("strong"),OZe=o("clip"),VZe=o(" \u2014 "),lR=a("a"),XZe=o("CLIPTokenizer"),zZe=o(" or "),iR=a("a"),WZe=o("CLIPTokenizerFast"),QZe=o(" (CLIP model)"),HZe=l(),Gn=a("li"),mte=a("strong"),UZe=o("convbert"),JZe=o(" \u2014 "),dR=a("a"),YZe=o("ConvBertTokenizer"),KZe=o(" or "),cR=a("a"),ZZe=o("ConvBertTokenizerFast"),eeo=o(" (ConvBERT model)"),oeo=l(),On=a("li"),fte=a("strong"),reo=o("cpm"),teo=o(" \u2014 "),mR=a("a"),aeo=o("CpmTokenizer"),neo=o(" or "),fR=a("a"),seo=o("CpmTokenizerFast"),leo=o(" (CPM model)"),ieo=l(),$g=a("li"),gte=a("strong"),deo=o("ctrl"),ceo=o(" \u2014 "),gR=a("a"),meo=o("CTRLTokenizer"),feo=o(" (CTRL model)"),geo=l(),Vn=a("li"),hte=a("strong"),heo=o("data2vec-text"),ueo=o(" \u2014 "),hR=a("a"),peo=o("RobertaTokenizer"),_eo=o(" or "),uR=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (Data2VecText model)"),Feo=l(),Xn=a("li"),ute=a("strong"),Teo=o("deberta"),Meo=o(" \u2014 "),pR=a("a"),Eeo=o("DebertaTokenizer"),Ceo=o(" or "),_R=a("a"),weo=o("DebertaTokenizerFast"),Aeo=o(" (DeBERTa model)"),yeo=l(),zn=a("li"),pte=a("strong"),Leo=o("deberta-v2"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("DebertaV2Tokenizer"),keo=o(" or "),vR=a("a"),Seo=o("DebertaV2TokenizerFast"),Reo=o(" (DeBERTa-v2 model)"),Peo=l(),Wn=a("li"),_te=a("strong"),Beo=o("distilbert"),Ieo=o(" \u2014 "),FR=a("a"),qeo=o("DistilBertTokenizer"),Neo=o(" or "),TR=a("a"),jeo=o("DistilBertTokenizerFast"),Deo=o(" (DistilBERT model)"),Geo=l(),Qn=a("li"),bte=a("strong"),Oeo=o("dpr"),Veo=o(" \u2014 "),MR=a("a"),Xeo=o("DPRQuestionEncoderTokenizer"),zeo=o(" or "),ER=a("a"),Weo=o("DPRQuestionEncoderTokenizerFast"),Qeo=o(" (DPR model)"),Heo=l(),Hn=a("li"),vte=a("strong"),Ueo=o("electra"),Jeo=o(" \u2014 "),CR=a("a"),Yeo=o("ElectraTokenizer"),Keo=o(" or "),wR=a("a"),Zeo=o("ElectraTokenizerFast"),eoo=o(" (ELECTRA model)"),ooo=l(),kg=a("li"),Fte=a("strong"),roo=o("flaubert"),too=o(" \u2014 "),AR=a("a"),aoo=o("FlaubertTokenizer"),noo=o(" (FlauBERT model)"),soo=l(),Un=a("li"),Tte=a("strong"),loo=o("fnet"),ioo=o(" \u2014 "),yR=a("a"),doo=o("FNetTokenizer"),coo=o(" or "),LR=a("a"),moo=o("FNetTokenizerFast"),foo=o(" (FNet model)"),goo=l(),Sg=a("li"),Mte=a("strong"),hoo=o("fsmt"),uoo=o(" \u2014 "),xR=a("a"),poo=o("FSMTTokenizer"),_oo=o(" (FairSeq Machine-Translation model)"),boo=l(),Jn=a("li"),Ete=a("strong"),voo=o("funnel"),Foo=o(" \u2014 "),$R=a("a"),Too=o("FunnelTokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("FunnelTokenizerFast"),Coo=o(" (Funnel Transformer model)"),woo=l(),Yn=a("li"),Cte=a("strong"),Aoo=o("gpt2"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("GPT2Tokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("GPT2TokenizerFast"),koo=o(" (OpenAI GPT-2 model)"),Soo=l(),Kn=a("li"),wte=a("strong"),Roo=o("gpt_neo"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("GPT2Tokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("GPT2TokenizerFast"),Noo=o(" (GPT Neo model)"),joo=l(),Zn=a("li"),Ate=a("strong"),Doo=o("gptj"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("GPT2Tokenizer"),Voo=o(" or "),qR=a("a"),Xoo=o("GPT2TokenizerFast"),zoo=o(" (GPT-J model)"),Woo=l(),es=a("li"),yte=a("strong"),Qoo=o("herbert"),Hoo=o(" \u2014 "),NR=a("a"),Uoo=o("HerbertTokenizer"),Joo=o(" or "),jR=a("a"),Yoo=o("HerbertTokenizerFast"),Koo=o(" (HerBERT model)"),Zoo=l(),Rg=a("li"),Lte=a("strong"),ero=o("hubert"),oro=o(" \u2014 "),DR=a("a"),rro=o("Wav2Vec2CTCTokenizer"),tro=o(" (Hubert model)"),aro=l(),os=a("li"),xte=a("strong"),nro=o("ibert"),sro=o(" \u2014 "),GR=a("a"),lro=o("RobertaTokenizer"),iro=o(" or "),OR=a("a"),dro=o("RobertaTokenizerFast"),cro=o(" (I-BERT model)"),mro=l(),rs=a("li"),$te=a("strong"),fro=o("layoutlm"),gro=o(" \u2014 "),VR=a("a"),hro=o("LayoutLMTokenizer"),uro=o(" or "),XR=a("a"),pro=o("LayoutLMTokenizerFast"),_ro=o(" (LayoutLM model)"),bro=l(),ts=a("li"),kte=a("strong"),vro=o("layoutlmv2"),Fro=o(" \u2014 "),zR=a("a"),Tro=o("LayoutLMv2Tokenizer"),Mro=o(" or "),WR=a("a"),Ero=o("LayoutLMv2TokenizerFast"),Cro=o(" (LayoutLMv2 model)"),wro=l(),as=a("li"),Ste=a("strong"),Aro=o("layoutxlm"),yro=o(" \u2014 "),QR=a("a"),Lro=o("LayoutXLMTokenizer"),xro=o(" or "),HR=a("a"),$ro=o("LayoutXLMTokenizerFast"),kro=o(" (LayoutXLM model)"),Sro=l(),ns=a("li"),Rte=a("strong"),Rro=o("led"),Pro=o(" \u2014 "),UR=a("a"),Bro=o("LEDTokenizer"),Iro=o(" or "),JR=a("a"),qro=o("LEDTokenizerFast"),Nro=o(" (LED model)"),jro=l(),ss=a("li"),Pte=a("strong"),Dro=o("longformer"),Gro=o(" \u2014 "),YR=a("a"),Oro=o("LongformerTokenizer"),Vro=o(" or "),KR=a("a"),Xro=o("LongformerTokenizerFast"),zro=o(" (Longformer model)"),Wro=l(),Pg=a("li"),Bte=a("strong"),Qro=o("luke"),Hro=o(" \u2014 "),ZR=a("a"),Uro=o("LukeTokenizer"),Jro=o(" (LUKE model)"),Yro=l(),ls=a("li"),Ite=a("strong"),Kro=o("lxmert"),Zro=o(" \u2014 "),eP=a("a"),eto=o("LxmertTokenizer"),oto=o(" or "),oP=a("a"),rto=o("LxmertTokenizerFast"),tto=o(" (LXMERT model)"),ato=l(),Bg=a("li"),qte=a("strong"),nto=o("m2m_100"),sto=o(" \u2014 "),rP=a("a"),lto=o("M2M100Tokenizer"),ito=o(" (M2M100 model)"),dto=l(),Ig=a("li"),Nte=a("strong"),cto=o("marian"),mto=o(" \u2014 "),tP=a("a"),fto=o("MarianTokenizer"),gto=o(" (Marian model)"),hto=l(),is=a("li"),jte=a("strong"),uto=o("mbart"),pto=o(" \u2014 "),aP=a("a"),_to=o("MBartTokenizer"),bto=o(" or "),nP=a("a"),vto=o("MBartTokenizerFast"),Fto=o(" (mBART model)"),Tto=l(),ds=a("li"),Dte=a("strong"),Mto=o("mbart50"),Eto=o(" \u2014 "),sP=a("a"),Cto=o("MBart50Tokenizer"),wto=o(" or "),lP=a("a"),Ato=o("MBart50TokenizerFast"),yto=o(" (mBART-50 model)"),Lto=l(),cs=a("li"),Gte=a("strong"),xto=o("megatron-bert"),$to=o(" \u2014 "),iP=a("a"),kto=o("BertTokenizer"),Sto=o(" or "),dP=a("a"),Rto=o("BertTokenizerFast"),Pto=o(" (MegatronBert model)"),Bto=l(),qg=a("li"),Ote=a("strong"),Ito=o("mluke"),qto=o(" \u2014 "),cP=a("a"),Nto=o("MLukeTokenizer"),jto=o(" (mLUKE model)"),Dto=l(),ms=a("li"),Vte=a("strong"),Gto=o("mobilebert"),Oto=o(" \u2014 "),mP=a("a"),Vto=o("MobileBertTokenizer"),Xto=o(" or "),fP=a("a"),zto=o("MobileBertTokenizerFast"),Wto=o(" (MobileBERT model)"),Qto=l(),fs=a("li"),Xte=a("strong"),Hto=o("mpnet"),Uto=o(" \u2014 "),gP=a("a"),Jto=o("MPNetTokenizer"),Yto=o(" or "),hP=a("a"),Kto=o("MPNetTokenizerFast"),Zto=o(" (MPNet model)"),eao=l(),gs=a("li"),zte=a("strong"),oao=o("mt5"),rao=o(" \u2014 "),uP=a("a"),tao=o("MT5Tokenizer"),aao=o(" or "),pP=a("a"),nao=o("MT5TokenizerFast"),sao=o(" (mT5 model)"),lao=l(),hs=a("li"),Wte=a("strong"),iao=o("nystromformer"),dao=o(" \u2014 "),_P=a("a"),cao=o("AlbertTokenizer"),mao=o(" or "),bP=a("a"),fao=o("AlbertTokenizerFast"),gao=o(" (Nystromformer model)"),hao=l(),us=a("li"),Qte=a("strong"),uao=o("openai-gpt"),pao=o(" \u2014 "),vP=a("a"),_ao=o("OpenAIGPTTokenizer"),bao=o(" or "),FP=a("a"),vao=o("OpenAIGPTTokenizerFast"),Fao=o(" (OpenAI GPT model)"),Tao=l(),Ng=a("li"),Hte=a("strong"),Mao=o("opt"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("GPT2Tokenizer"),wao=o(" (OPT model)"),Aao=l(),ps=a("li"),Ute=a("strong"),yao=o("pegasus"),Lao=o(" \u2014 "),MP=a("a"),xao=o("PegasusTokenizer"),$ao=o(" or "),EP=a("a"),kao=o("PegasusTokenizerFast"),Sao=o(" (Pegasus model)"),Rao=l(),jg=a("li"),Jte=a("strong"),Pao=o("perceiver"),Bao=o(" \u2014 "),CP=a("a"),Iao=o("PerceiverTokenizer"),qao=o(" (Perceiver model)"),Nao=l(),Dg=a("li"),Yte=a("strong"),jao=o("phobert"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("PhobertTokenizer"),Oao=o(" (PhoBERT model)"),Vao=l(),Gg=a("li"),Kte=a("strong"),Xao=o("plbart"),zao=o(" \u2014 "),AP=a("a"),Wao=o("PLBartTokenizer"),Qao=o(" (PLBart model)"),Hao=l(),Og=a("li"),Zte=a("strong"),Uao=o("prophetnet"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("ProphetNetTokenizer"),Kao=o(" (ProphetNet model)"),Zao=l(),_s=a("li"),eae=a("strong"),eno=o("qdqbert"),ono=o(" \u2014 "),LP=a("a"),rno=o("BertTokenizer"),tno=o(" or "),xP=a("a"),ano=o("BertTokenizerFast"),nno=o(" (QDQBert model)"),sno=l(),Vg=a("li"),oae=a("strong"),lno=o("rag"),ino=o(" \u2014 "),$P=a("a"),dno=o("RagTokenizer"),cno=o(" (RAG model)"),mno=l(),bs=a("li"),rae=a("strong"),fno=o("realm"),gno=o(" \u2014 "),kP=a("a"),hno=o("RealmTokenizer"),uno=o(" or "),SP=a("a"),pno=o("RealmTokenizerFast"),_no=o(" (Realm model)"),bno=l(),vs=a("li"),tae=a("strong"),vno=o("reformer"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("ReformerTokenizer"),Mno=o(" or "),PP=a("a"),Eno=o("ReformerTokenizerFast"),Cno=o(" (Reformer model)"),wno=l(),Fs=a("li"),aae=a("strong"),Ano=o("rembert"),yno=o(" \u2014 "),BP=a("a"),Lno=o("RemBertTokenizer"),xno=o(" or "),IP=a("a"),$no=o("RemBertTokenizerFast"),kno=o(" (RemBERT model)"),Sno=l(),Ts=a("li"),nae=a("strong"),Rno=o("retribert"),Pno=o(" \u2014 "),qP=a("a"),Bno=o("RetriBertTokenizer"),Ino=o(" or "),NP=a("a"),qno=o("RetriBertTokenizerFast"),Nno=o(" (RetriBERT model)"),jno=l(),Ms=a("li"),sae=a("strong"),Dno=o("roberta"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("RobertaTokenizer"),Vno=o(" or "),DP=a("a"),Xno=o("RobertaTokenizerFast"),zno=o(" (RoBERTa model)"),Wno=l(),Es=a("li"),lae=a("strong"),Qno=o("roformer"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("RoFormerTokenizer"),Jno=o(" or "),OP=a("a"),Yno=o("RoFormerTokenizerFast"),Kno=o(" (RoFormer model)"),Zno=l(),Xg=a("li"),iae=a("strong"),eso=o("speech_to_text"),oso=o(" \u2014 "),VP=a("a"),rso=o("Speech2TextTokenizer"),tso=o(" (Speech2Text model)"),aso=l(),zg=a("li"),dae=a("strong"),nso=o("speech_to_text_2"),sso=o(" \u2014 "),XP=a("a"),lso=o("Speech2Text2Tokenizer"),iso=o(" (Speech2Text2 model)"),dso=l(),Cs=a("li"),cae=a("strong"),cso=o("splinter"),mso=o(" \u2014 "),zP=a("a"),fso=o("SplinterTokenizer"),gso=o(" or "),WP=a("a"),hso=o("SplinterTokenizerFast"),uso=o(" (Splinter model)"),pso=l(),ws=a("li"),mae=a("strong"),_so=o("squeezebert"),bso=o(" \u2014 "),QP=a("a"),vso=o("SqueezeBertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("SqueezeBertTokenizerFast"),Mso=o(" (SqueezeBERT model)"),Eso=l(),As=a("li"),fae=a("strong"),Cso=o("t5"),wso=o(" \u2014 "),UP=a("a"),Aso=o("T5Tokenizer"),yso=o(" or "),JP=a("a"),Lso=o("T5TokenizerFast"),xso=o(" (T5 model)"),$so=l(),Wg=a("li"),gae=a("strong"),kso=o("tapas"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("TapasTokenizer"),Pso=o(" (TAPAS model)"),Bso=l(),Qg=a("li"),hae=a("strong"),Iso=o("tapex"),qso=o(" \u2014 "),KP=a("a"),Nso=o("TapexTokenizer"),jso=o(" (TAPEX model)"),Dso=l(),Hg=a("li"),uae=a("strong"),Gso=o("transfo-xl"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("TransfoXLTokenizer"),Xso=o(" (Transformer-XL model)"),zso=l(),ys=a("li"),pae=a("strong"),Wso=o("visual_bert"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("BertTokenizer"),Uso=o(" or "),oB=a("a"),Jso=o("BertTokenizerFast"),Yso=o(" (VisualBert model)"),Kso=l(),Ug=a("li"),_ae=a("strong"),Zso=o("wav2vec2"),elo=o(" \u2014 "),rB=a("a"),olo=o("Wav2Vec2CTCTokenizer"),rlo=o(" (Wav2Vec2 model)"),tlo=l(),Jg=a("li"),bae=a("strong"),alo=o("wav2vec2-conformer"),nlo=o(" \u2014 "),tB=a("a"),slo=o("Wav2Vec2CTCTokenizer"),llo=o(" (Wav2Vec2-Conformer model)"),ilo=l(),Yg=a("li"),vae=a("strong"),dlo=o("wav2vec2_phoneme"),clo=o(" \u2014 "),aB=a("a"),mlo=o("Wav2Vec2PhonemeCTCTokenizer"),flo=o(" (Wav2Vec2Phoneme model)"),glo=l(),Ls=a("li"),Fae=a("strong"),hlo=o("xglm"),ulo=o(" \u2014 "),nB=a("a"),plo=o("XGLMTokenizer"),_lo=o(" or "),sB=a("a"),blo=o("XGLMTokenizerFast"),vlo=o(" (XGLM model)"),Flo=l(),Kg=a("li"),Tae=a("strong"),Tlo=o("xlm"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("XLMTokenizer"),Clo=o(" (XLM model)"),wlo=l(),Zg=a("li"),Mae=a("strong"),Alo=o("xlm-prophetnet"),ylo=o(" \u2014 "),iB=a("a"),Llo=o("XLMProphetNetTokenizer"),xlo=o(" (XLMProphetNet model)"),$lo=l(),xs=a("li"),Eae=a("strong"),klo=o("xlm-roberta"),Slo=o(" \u2014 "),dB=a("a"),Rlo=o("XLMRobertaTokenizer"),Plo=o(" or "),cB=a("a"),Blo=o("XLMRobertaTokenizerFast"),Ilo=o(" (XLM-RoBERTa model)"),qlo=l(),$s=a("li"),Cae=a("strong"),Nlo=o("xlm-roberta-xl"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("RobertaTokenizer"),Glo=o(" or "),fB=a("a"),Olo=o("RobertaTokenizerFast"),Vlo=o(" (XLM-RoBERTa-XL model)"),Xlo=l(),ks=a("li"),wae=a("strong"),zlo=o("xlnet"),Wlo=o(" \u2014 "),gB=a("a"),Qlo=o("XLNetTokenizer"),Hlo=o(" or "),hB=a("a"),Ulo=o("XLNetTokenizerFast"),Jlo=o(" (XLNet model)"),Ylo=l(),Ss=a("li"),Aae=a("strong"),Klo=o("yoso"),Zlo=o(" \u2014 "),uB=a("a"),eio=o("AlbertTokenizer"),oio=o(" or "),pB=a("a"),rio=o("AlbertTokenizerFast"),tio=o(" (YOSO model)"),aio=l(),F(eh.$$.fragment),nio=l(),oh=a("div"),F(yy.$$.fragment),sio=l(),yae=a("p"),lio=o("Register a new tokenizer in this mapping."),iqe=l(),Ti=a("h2"),rh=a("a"),Lae=a("span"),F(Ly.$$.fragment),iio=l(),xae=a("span"),dio=o("AutoFeatureExtractor"),dqe=l(),Ao=a("div"),F(xy.$$.fragment),cio=l(),$y=a("p"),mio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_B=a("a"),fio=o("AutoFeatureExtractor.from_pretrained()"),gio=o(" class method."),hio=l(),ky=a("p"),uio=o("This class cannot be instantiated directly using "),$ae=a("code"),pio=o("__init__()"),_io=o(" (throws an error)."),bio=l(),He=a("div"),F(Sy.$$.fragment),vio=l(),kae=a("p"),Fio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tio=l(),ya=a("p"),Mio=o("The feature extractor class to instantiate is selected based on the "),Sae=a("code"),Eio=o("model_type"),Cio=o(` property of the config object
(either passed as an argument or loaded from `),Rae=a("code"),wio=o("pretrained_model_name_or_path"),Aio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pae=a("code"),yio=o("pretrained_model_name_or_path"),Lio=o(":"),xio=l(),Z=a("ul"),th=a("li"),Bae=a("strong"),$io=o("beit"),kio=o(" \u2014 "),bB=a("a"),Sio=o("BeitFeatureExtractor"),Rio=o(" (BEiT model)"),Pio=l(),ah=a("li"),Iae=a("strong"),Bio=o("clip"),Iio=o(" \u2014 "),vB=a("a"),qio=o("CLIPFeatureExtractor"),Nio=o(" (CLIP model)"),jio=l(),nh=a("li"),qae=a("strong"),Dio=o("convnext"),Gio=o(" \u2014 "),FB=a("a"),Oio=o("ConvNextFeatureExtractor"),Vio=o(" (ConvNext model)"),Xio=l(),sh=a("li"),Nae=a("strong"),zio=o("cvt"),Wio=o(" \u2014 "),TB=a("a"),Qio=o("ConvNextFeatureExtractor"),Hio=o(" (CvT model)"),Uio=l(),lh=a("li"),jae=a("strong"),Jio=o("data2vec-audio"),Yio=o(" \u2014 "),MB=a("a"),Kio=o("Wav2Vec2FeatureExtractor"),Zio=o(" (Data2VecAudio model)"),edo=l(),ih=a("li"),Dae=a("strong"),odo=o("data2vec-vision"),rdo=o(" \u2014 "),EB=a("a"),tdo=o("BeitFeatureExtractor"),ado=o(" (Data2VecVision model)"),ndo=l(),dh=a("li"),Gae=a("strong"),sdo=o("deit"),ldo=o(" \u2014 "),CB=a("a"),ido=o("DeiTFeatureExtractor"),ddo=o(" (DeiT model)"),cdo=l(),ch=a("li"),Oae=a("strong"),mdo=o("detr"),fdo=o(" \u2014 "),wB=a("a"),gdo=o("DetrFeatureExtractor"),hdo=o(" (DETR model)"),udo=l(),mh=a("li"),Vae=a("strong"),pdo=o("dpt"),_do=o(" \u2014 "),AB=a("a"),bdo=o("DPTFeatureExtractor"),vdo=o(" (DPT model)"),Fdo=l(),fh=a("li"),Xae=a("strong"),Tdo=o("flava"),Mdo=o(" \u2014 "),yB=a("a"),Edo=o("FlavaFeatureExtractor"),Cdo=o(" (Flava model)"),wdo=l(),gh=a("li"),zae=a("strong"),Ado=o("glpn"),ydo=o(" \u2014 "),LB=a("a"),Ldo=o("GLPNFeatureExtractor"),xdo=o(" (GLPN model)"),$do=l(),hh=a("li"),Wae=a("strong"),kdo=o("hubert"),Sdo=o(" \u2014 "),xB=a("a"),Rdo=o("Wav2Vec2FeatureExtractor"),Pdo=o(" (Hubert model)"),Bdo=l(),uh=a("li"),Qae=a("strong"),Ido=o("layoutlmv2"),qdo=o(" \u2014 "),$B=a("a"),Ndo=o("LayoutLMv2FeatureExtractor"),jdo=o(" (LayoutLMv2 model)"),Ddo=l(),ph=a("li"),Hae=a("strong"),Gdo=o("maskformer"),Odo=o(" \u2014 "),kB=a("a"),Vdo=o("MaskFormerFeatureExtractor"),Xdo=o(" (MaskFormer model)"),zdo=l(),_h=a("li"),Uae=a("strong"),Wdo=o("perceiver"),Qdo=o(" \u2014 "),SB=a("a"),Hdo=o("PerceiverFeatureExtractor"),Udo=o(" (Perceiver model)"),Jdo=l(),bh=a("li"),Jae=a("strong"),Ydo=o("poolformer"),Kdo=o(" \u2014 "),RB=a("a"),Zdo=o("PoolFormerFeatureExtractor"),eco=o(" (PoolFormer model)"),oco=l(),vh=a("li"),Yae=a("strong"),rco=o("regnet"),tco=o(" \u2014 "),PB=a("a"),aco=o("ConvNextFeatureExtractor"),nco=o(" (RegNet model)"),sco=l(),Fh=a("li"),Kae=a("strong"),lco=o("resnet"),ico=o(" \u2014 "),BB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ResNet model)"),mco=l(),Th=a("li"),Zae=a("strong"),fco=o("segformer"),gco=o(" \u2014 "),IB=a("a"),hco=o("SegformerFeatureExtractor"),uco=o(" (SegFormer model)"),pco=l(),Mh=a("li"),ene=a("strong"),_co=o("speech_to_text"),bco=o(" \u2014 "),qB=a("a"),vco=o("Speech2TextFeatureExtractor"),Fco=o(" (Speech2Text model)"),Tco=l(),Eh=a("li"),one=a("strong"),Mco=o("swin"),Eco=o(" \u2014 "),NB=a("a"),Cco=o("ViTFeatureExtractor"),wco=o(" (Swin model)"),Aco=l(),Ch=a("li"),rne=a("strong"),yco=o("van"),Lco=o(" \u2014 "),jB=a("a"),xco=o("ConvNextFeatureExtractor"),$co=o(" (VAN model)"),kco=l(),wh=a("li"),tne=a("strong"),Sco=o("vit"),Rco=o(" \u2014 "),DB=a("a"),Pco=o("ViTFeatureExtractor"),Bco=o(" (ViT model)"),Ico=l(),Ah=a("li"),ane=a("strong"),qco=o("vit_mae"),Nco=o(" \u2014 "),GB=a("a"),jco=o("ViTFeatureExtractor"),Dco=o(" (ViTMAE model)"),Gco=l(),yh=a("li"),nne=a("strong"),Oco=o("wav2vec2"),Vco=o(" \u2014 "),OB=a("a"),Xco=o("Wav2Vec2FeatureExtractor"),zco=o(" (Wav2Vec2 model)"),Wco=l(),Lh=a("li"),sne=a("strong"),Qco=o("wav2vec2-conformer"),Hco=o(" \u2014 "),VB=a("a"),Uco=o("Wav2Vec2FeatureExtractor"),Jco=o(" (Wav2Vec2-Conformer model)"),Yco=l(),xh=a("li"),lne=a("strong"),Kco=o("yolos"),Zco=o(" \u2014 "),XB=a("a"),emo=o("YolosFeatureExtractor"),omo=o(" (YOLOS model)"),rmo=l(),F($h.$$.fragment),tmo=l(),F(kh.$$.fragment),amo=l(),Sh=a("div"),F(Ry.$$.fragment),nmo=l(),ine=a("p"),smo=o("Register a new feature extractor for this class."),cqe=l(),Mi=a("h2"),Rh=a("a"),dne=a("span"),F(Py.$$.fragment),lmo=l(),cne=a("span"),imo=o("AutoProcessor"),mqe=l(),yo=a("div"),F(By.$$.fragment),dmo=l(),Iy=a("p"),cmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zB=a("a"),mmo=o("AutoProcessor.from_pretrained()"),fmo=o(" class method."),gmo=l(),qy=a("p"),hmo=o("This class cannot be instantiated directly using "),mne=a("code"),umo=o("__init__()"),pmo=o(" (throws an error)."),_mo=l(),Ue=a("div"),F(Ny.$$.fragment),bmo=l(),fne=a("p"),vmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fmo=l(),Ei=a("p"),Tmo=o("The processor class to instantiate is selected based on the "),gne=a("code"),Mmo=o("model_type"),Emo=o(` property of the config object (either
passed as an argument or loaded from `),hne=a("code"),Cmo=o("pretrained_model_name_or_path"),wmo=o(" if possible):"),Amo=l(),ue=a("ul"),Ph=a("li"),une=a("strong"),ymo=o("clip"),Lmo=o(" \u2014 "),WB=a("a"),xmo=o("CLIPProcessor"),$mo=o(" (CLIP model)"),kmo=l(),Bh=a("li"),pne=a("strong"),Smo=o("flava"),Rmo=o(" \u2014 "),_ne=a("code"),Pmo=o("FLAVAProcessor"),Bmo=o(" (Flava model)"),Imo=l(),Ih=a("li"),bne=a("strong"),qmo=o("layoutlmv2"),Nmo=o(" \u2014 "),QB=a("a"),jmo=o("LayoutLMv2Processor"),Dmo=o(" (LayoutLMv2 model)"),Gmo=l(),qh=a("li"),vne=a("strong"),Omo=o("layoutxlm"),Vmo=o(" \u2014 "),HB=a("a"),Xmo=o("LayoutXLMProcessor"),zmo=o(" (LayoutXLM model)"),Wmo=l(),Nh=a("li"),Fne=a("strong"),Qmo=o("sew"),Hmo=o(" \u2014 "),UB=a("a"),Umo=o("Wav2Vec2Processor"),Jmo=o(" (SEW model)"),Ymo=l(),jh=a("li"),Tne=a("strong"),Kmo=o("sew-d"),Zmo=o(" \u2014 "),JB=a("a"),efo=o("Wav2Vec2Processor"),ofo=o(" (SEW-D model)"),rfo=l(),Dh=a("li"),Mne=a("strong"),tfo=o("speech_to_text"),afo=o(" \u2014 "),YB=a("a"),nfo=o("Speech2TextProcessor"),sfo=o(" (Speech2Text model)"),lfo=l(),Gh=a("li"),Ene=a("strong"),ifo=o("speech_to_text_2"),dfo=o(" \u2014 "),KB=a("a"),cfo=o("Speech2Text2Processor"),mfo=o(" (Speech2Text2 model)"),ffo=l(),Oh=a("li"),Cne=a("strong"),gfo=o("trocr"),hfo=o(" \u2014 "),ZB=a("a"),ufo=o("TrOCRProcessor"),pfo=o(" (TrOCR model)"),_fo=l(),Vh=a("li"),wne=a("strong"),bfo=o("unispeech"),vfo=o(" \u2014 "),eI=a("a"),Ffo=o("Wav2Vec2Processor"),Tfo=o(" (UniSpeech model)"),Mfo=l(),Xh=a("li"),Ane=a("strong"),Efo=o("unispeech-sat"),Cfo=o(" \u2014 "),oI=a("a"),wfo=o("Wav2Vec2Processor"),Afo=o(" (UniSpeechSat model)"),yfo=l(),zh=a("li"),yne=a("strong"),Lfo=o("vilt"),xfo=o(" \u2014 "),rI=a("a"),$fo=o("ViltProcessor"),kfo=o(" (ViLT model)"),Sfo=l(),Wh=a("li"),Lne=a("strong"),Rfo=o("vision-text-dual-encoder"),Pfo=o(" \u2014 "),tI=a("a"),Bfo=o("VisionTextDualEncoderProcessor"),Ifo=o(" (VisionTextDualEncoder model)"),qfo=l(),Qh=a("li"),xne=a("strong"),Nfo=o("wav2vec2"),jfo=o(" \u2014 "),aI=a("a"),Dfo=o("Wav2Vec2Processor"),Gfo=o(" (Wav2Vec2 model)"),Ofo=l(),Hh=a("li"),$ne=a("strong"),Vfo=o("wav2vec2-conformer"),Xfo=o(" \u2014 "),nI=a("a"),zfo=o("Wav2Vec2Processor"),Wfo=o(" (Wav2Vec2-Conformer model)"),Qfo=l(),Uh=a("li"),kne=a("strong"),Hfo=o("wavlm"),Ufo=o(" \u2014 "),sI=a("a"),Jfo=o("Wav2Vec2Processor"),Yfo=o(" (WavLM model)"),Kfo=l(),F(Jh.$$.fragment),Zfo=l(),F(Yh.$$.fragment),ego=l(),Kh=a("div"),F(jy.$$.fragment),ogo=l(),Sne=a("p"),rgo=o("Register a new processor for this class."),fqe=l(),Ci=a("h2"),Zh=a("a"),Rne=a("span"),F(Dy.$$.fragment),tgo=l(),Pne=a("span"),ago=o("AutoModel"),gqe=l(),Lo=a("div"),F(Gy.$$.fragment),ngo=l(),wi=a("p"),sgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lI=a("a"),lgo=o("from_pretrained()"),igo=o(" class method or the "),iI=a("a"),dgo=o("from_config()"),cgo=o(` class
method.`),mgo=l(),Oy=a("p"),fgo=o("This class cannot be instantiated directly using "),Bne=a("code"),ggo=o("__init__()"),hgo=o(" (throws an error)."),ugo=l(),tt=a("div"),F(Vy.$$.fragment),pgo=l(),Ine=a("p"),_go=o("Instantiates one of the base model classes of the library from a configuration."),bgo=l(),Ai=a("p"),vgo=o(`Note:
Loading a model from its configuration file does `),qne=a("strong"),Fgo=o("not"),Tgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dI=a("a"),Mgo=o("from_pretrained()"),Ego=o(" to load the model weights."),Cgo=l(),F(eu.$$.fragment),wgo=l(),Je=a("div"),F(Xy.$$.fragment),Ago=l(),Nne=a("p"),ygo=o("Instantiate one of the base model classes of the library from a pretrained model."),Lgo=l(),La=a("p"),xgo=o("The model class to instantiate is selected based on the "),jne=a("code"),$go=o("model_type"),kgo=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),Sgo=o("pretrained_model_name_or_path"),Rgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),Pgo=o("pretrained_model_name_or_path"),Bgo=o(":"),Igo=l(),x=a("ul"),ou=a("li"),One=a("strong"),qgo=o("albert"),Ngo=o(" \u2014 "),cI=a("a"),jgo=o("AlbertModel"),Dgo=o(" (ALBERT model)"),Ggo=l(),ru=a("li"),Vne=a("strong"),Ogo=o("bart"),Vgo=o(" \u2014 "),mI=a("a"),Xgo=o("BartModel"),zgo=o(" (BART model)"),Wgo=l(),tu=a("li"),Xne=a("strong"),Qgo=o("beit"),Hgo=o(" \u2014 "),fI=a("a"),Ugo=o("BeitModel"),Jgo=o(" (BEiT model)"),Ygo=l(),au=a("li"),zne=a("strong"),Kgo=o("bert"),Zgo=o(" \u2014 "),gI=a("a"),eho=o("BertModel"),oho=o(" (BERT model)"),rho=l(),nu=a("li"),Wne=a("strong"),tho=o("bert-generation"),aho=o(" \u2014 "),hI=a("a"),nho=o("BertGenerationEncoder"),sho=o(" (Bert Generation model)"),lho=l(),su=a("li"),Qne=a("strong"),iho=o("big_bird"),dho=o(" \u2014 "),uI=a("a"),cho=o("BigBirdModel"),mho=o(" (BigBird model)"),fho=l(),lu=a("li"),Hne=a("strong"),gho=o("bigbird_pegasus"),hho=o(" \u2014 "),pI=a("a"),uho=o("BigBirdPegasusModel"),pho=o(" (BigBirdPegasus model)"),_ho=l(),iu=a("li"),Une=a("strong"),bho=o("blenderbot"),vho=o(" \u2014 "),_I=a("a"),Fho=o("BlenderbotModel"),Tho=o(" (Blenderbot model)"),Mho=l(),du=a("li"),Jne=a("strong"),Eho=o("blenderbot-small"),Cho=o(" \u2014 "),bI=a("a"),who=o("BlenderbotSmallModel"),Aho=o(" (BlenderbotSmall model)"),yho=l(),cu=a("li"),Yne=a("strong"),Lho=o("camembert"),xho=o(" \u2014 "),vI=a("a"),$ho=o("CamembertModel"),kho=o(" (CamemBERT model)"),Sho=l(),mu=a("li"),Kne=a("strong"),Rho=o("canine"),Pho=o(" \u2014 "),FI=a("a"),Bho=o("CanineModel"),Iho=o(" (Canine model)"),qho=l(),fu=a("li"),Zne=a("strong"),Nho=o("clip"),jho=o(" \u2014 "),TI=a("a"),Dho=o("CLIPModel"),Gho=o(" (CLIP model)"),Oho=l(),gu=a("li"),ese=a("strong"),Vho=o("convbert"),Xho=o(" \u2014 "),MI=a("a"),zho=o("ConvBertModel"),Who=o(" (ConvBERT model)"),Qho=l(),hu=a("li"),ose=a("strong"),Hho=o("convnext"),Uho=o(" \u2014 "),EI=a("a"),Jho=o("ConvNextModel"),Yho=o(" (ConvNext model)"),Kho=l(),uu=a("li"),rse=a("strong"),Zho=o("ctrl"),euo=o(" \u2014 "),CI=a("a"),ouo=o("CTRLModel"),ruo=o(" (CTRL model)"),tuo=l(),pu=a("li"),tse=a("strong"),auo=o("cvt"),nuo=o(" \u2014 "),wI=a("a"),suo=o("CvtModel"),luo=o(" (CvT model)"),iuo=l(),_u=a("li"),ase=a("strong"),duo=o("data2vec-audio"),cuo=o(" \u2014 "),AI=a("a"),muo=o("Data2VecAudioModel"),fuo=o(" (Data2VecAudio model)"),guo=l(),bu=a("li"),nse=a("strong"),huo=o("data2vec-text"),uuo=o(" \u2014 "),yI=a("a"),puo=o("Data2VecTextModel"),_uo=o(" (Data2VecText model)"),buo=l(),vu=a("li"),sse=a("strong"),vuo=o("data2vec-vision"),Fuo=o(" \u2014 "),LI=a("a"),Tuo=o("Data2VecVisionModel"),Muo=o(" (Data2VecVision model)"),Euo=l(),Fu=a("li"),lse=a("strong"),Cuo=o("deberta"),wuo=o(" \u2014 "),xI=a("a"),Auo=o("DebertaModel"),yuo=o(" (DeBERTa model)"),Luo=l(),Tu=a("li"),ise=a("strong"),xuo=o("deberta-v2"),$uo=o(" \u2014 "),$I=a("a"),kuo=o("DebertaV2Model"),Suo=o(" (DeBERTa-v2 model)"),Ruo=l(),Mu=a("li"),dse=a("strong"),Puo=o("decision_transformer"),Buo=o(" \u2014 "),kI=a("a"),Iuo=o("DecisionTransformerModel"),quo=o(" (Decision Transformer model)"),Nuo=l(),Eu=a("li"),cse=a("strong"),juo=o("deit"),Duo=o(" \u2014 "),SI=a("a"),Guo=o("DeiTModel"),Ouo=o(" (DeiT model)"),Vuo=l(),Cu=a("li"),mse=a("strong"),Xuo=o("detr"),zuo=o(" \u2014 "),RI=a("a"),Wuo=o("DetrModel"),Quo=o(" (DETR model)"),Huo=l(),wu=a("li"),fse=a("strong"),Uuo=o("distilbert"),Juo=o(" \u2014 "),PI=a("a"),Yuo=o("DistilBertModel"),Kuo=o(" (DistilBERT model)"),Zuo=l(),Au=a("li"),gse=a("strong"),epo=o("dpr"),opo=o(" \u2014 "),BI=a("a"),rpo=o("DPRQuestionEncoder"),tpo=o(" (DPR model)"),apo=l(),yu=a("li"),hse=a("strong"),npo=o("dpt"),spo=o(" \u2014 "),II=a("a"),lpo=o("DPTModel"),ipo=o(" (DPT model)"),dpo=l(),Lu=a("li"),use=a("strong"),cpo=o("electra"),mpo=o(" \u2014 "),qI=a("a"),fpo=o("ElectraModel"),gpo=o(" (ELECTRA model)"),hpo=l(),xu=a("li"),pse=a("strong"),upo=o("flaubert"),ppo=o(" \u2014 "),NI=a("a"),_po=o("FlaubertModel"),bpo=o(" (FlauBERT model)"),vpo=l(),$u=a("li"),_se=a("strong"),Fpo=o("flava"),Tpo=o(" \u2014 "),jI=a("a"),Mpo=o("FlavaModel"),Epo=o(" (Flava model)"),Cpo=l(),ku=a("li"),bse=a("strong"),wpo=o("fnet"),Apo=o(" \u2014 "),DI=a("a"),ypo=o("FNetModel"),Lpo=o(" (FNet model)"),xpo=l(),Su=a("li"),vse=a("strong"),$po=o("fsmt"),kpo=o(" \u2014 "),GI=a("a"),Spo=o("FSMTModel"),Rpo=o(" (FairSeq Machine-Translation model)"),Ppo=l(),Rs=a("li"),Fse=a("strong"),Bpo=o("funnel"),Ipo=o(" \u2014 "),OI=a("a"),qpo=o("FunnelModel"),Npo=o(" or "),VI=a("a"),jpo=o("FunnelBaseModel"),Dpo=o(" (Funnel Transformer model)"),Gpo=l(),Ru=a("li"),Tse=a("strong"),Opo=o("glpn"),Vpo=o(" \u2014 "),XI=a("a"),Xpo=o("GLPNModel"),zpo=o(" (GLPN model)"),Wpo=l(),Pu=a("li"),Mse=a("strong"),Qpo=o("gpt2"),Hpo=o(" \u2014 "),zI=a("a"),Upo=o("GPT2Model"),Jpo=o(" (OpenAI GPT-2 model)"),Ypo=l(),Bu=a("li"),Ese=a("strong"),Kpo=o("gpt_neo"),Zpo=o(" \u2014 "),WI=a("a"),e_o=o("GPTNeoModel"),o_o=o(" (GPT Neo model)"),r_o=l(),Iu=a("li"),Cse=a("strong"),t_o=o("gptj"),a_o=o(" \u2014 "),QI=a("a"),n_o=o("GPTJModel"),s_o=o(" (GPT-J model)"),l_o=l(),qu=a("li"),wse=a("strong"),i_o=o("hubert"),d_o=o(" \u2014 "),HI=a("a"),c_o=o("HubertModel"),m_o=o(" (Hubert model)"),f_o=l(),Nu=a("li"),Ase=a("strong"),g_o=o("ibert"),h_o=o(" \u2014 "),UI=a("a"),u_o=o("IBertModel"),p_o=o(" (I-BERT model)"),__o=l(),ju=a("li"),yse=a("strong"),b_o=o("imagegpt"),v_o=o(" \u2014 "),JI=a("a"),F_o=o("ImageGPTModel"),T_o=o(" (ImageGPT model)"),M_o=l(),Du=a("li"),Lse=a("strong"),E_o=o("layoutlm"),C_o=o(" \u2014 "),YI=a("a"),w_o=o("LayoutLMModel"),A_o=o(" (LayoutLM model)"),y_o=l(),Gu=a("li"),xse=a("strong"),L_o=o("layoutlmv2"),x_o=o(" \u2014 "),KI=a("a"),$_o=o("LayoutLMv2Model"),k_o=o(" (LayoutLMv2 model)"),S_o=l(),Ou=a("li"),$se=a("strong"),R_o=o("led"),P_o=o(" \u2014 "),ZI=a("a"),B_o=o("LEDModel"),I_o=o(" (LED model)"),q_o=l(),Vu=a("li"),kse=a("strong"),N_o=o("longformer"),j_o=o(" \u2014 "),eq=a("a"),D_o=o("LongformerModel"),G_o=o(" (Longformer model)"),O_o=l(),Xu=a("li"),Sse=a("strong"),V_o=o("luke"),X_o=o(" \u2014 "),oq=a("a"),z_o=o("LukeModel"),W_o=o(" (LUKE model)"),Q_o=l(),zu=a("li"),Rse=a("strong"),H_o=o("lxmert"),U_o=o(" \u2014 "),rq=a("a"),J_o=o("LxmertModel"),Y_o=o(" (LXMERT model)"),K_o=l(),Wu=a("li"),Pse=a("strong"),Z_o=o("m2m_100"),ebo=o(" \u2014 "),tq=a("a"),obo=o("M2M100Model"),rbo=o(" (M2M100 model)"),tbo=l(),Qu=a("li"),Bse=a("strong"),abo=o("marian"),nbo=o(" \u2014 "),aq=a("a"),sbo=o("MarianModel"),lbo=o(" (Marian model)"),ibo=l(),Hu=a("li"),Ise=a("strong"),dbo=o("maskformer"),cbo=o(" \u2014 "),nq=a("a"),mbo=o("MaskFormerModel"),fbo=o(" (MaskFormer model)"),gbo=l(),Uu=a("li"),qse=a("strong"),hbo=o("mbart"),ubo=o(" \u2014 "),sq=a("a"),pbo=o("MBartModel"),_bo=o(" (mBART model)"),bbo=l(),Ju=a("li"),Nse=a("strong"),vbo=o("megatron-bert"),Fbo=o(" \u2014 "),lq=a("a"),Tbo=o("MegatronBertModel"),Mbo=o(" (MegatronBert model)"),Ebo=l(),Yu=a("li"),jse=a("strong"),Cbo=o("mobilebert"),wbo=o(" \u2014 "),iq=a("a"),Abo=o("MobileBertModel"),ybo=o(" (MobileBERT model)"),Lbo=l(),Ku=a("li"),Dse=a("strong"),xbo=o("mpnet"),$bo=o(" \u2014 "),dq=a("a"),kbo=o("MPNetModel"),Sbo=o(" (MPNet model)"),Rbo=l(),Zu=a("li"),Gse=a("strong"),Pbo=o("mt5"),Bbo=o(" \u2014 "),cq=a("a"),Ibo=o("MT5Model"),qbo=o(" (mT5 model)"),Nbo=l(),ep=a("li"),Ose=a("strong"),jbo=o("nystromformer"),Dbo=o(" \u2014 "),mq=a("a"),Gbo=o("NystromformerModel"),Obo=o(" (Nystromformer model)"),Vbo=l(),op=a("li"),Vse=a("strong"),Xbo=o("openai-gpt"),zbo=o(" \u2014 "),fq=a("a"),Wbo=o("OpenAIGPTModel"),Qbo=o(" (OpenAI GPT model)"),Hbo=l(),rp=a("li"),Xse=a("strong"),Ubo=o("opt"),Jbo=o(" \u2014 "),gq=a("a"),Ybo=o("OPTModel"),Kbo=o(" (OPT model)"),Zbo=l(),tp=a("li"),zse=a("strong"),e2o=o("pegasus"),o2o=o(" \u2014 "),hq=a("a"),r2o=o("PegasusModel"),t2o=o(" (Pegasus model)"),a2o=l(),ap=a("li"),Wse=a("strong"),n2o=o("perceiver"),s2o=o(" \u2014 "),uq=a("a"),l2o=o("PerceiverModel"),i2o=o(" (Perceiver model)"),d2o=l(),np=a("li"),Qse=a("strong"),c2o=o("plbart"),m2o=o(" \u2014 "),pq=a("a"),f2o=o("PLBartModel"),g2o=o(" (PLBart model)"),h2o=l(),sp=a("li"),Hse=a("strong"),u2o=o("poolformer"),p2o=o(" \u2014 "),_q=a("a"),_2o=o("PoolFormerModel"),b2o=o(" (PoolFormer model)"),v2o=l(),lp=a("li"),Use=a("strong"),F2o=o("prophetnet"),T2o=o(" \u2014 "),bq=a("a"),M2o=o("ProphetNetModel"),E2o=o(" (ProphetNet model)"),C2o=l(),ip=a("li"),Jse=a("strong"),w2o=o("qdqbert"),A2o=o(" \u2014 "),vq=a("a"),y2o=o("QDQBertModel"),L2o=o(" (QDQBert model)"),x2o=l(),dp=a("li"),Yse=a("strong"),$2o=o("reformer"),k2o=o(" \u2014 "),Fq=a("a"),S2o=o("ReformerModel"),R2o=o(" (Reformer model)"),P2o=l(),cp=a("li"),Kse=a("strong"),B2o=o("regnet"),I2o=o(" \u2014 "),Tq=a("a"),q2o=o("RegNetModel"),N2o=o(" (RegNet model)"),j2o=l(),mp=a("li"),Zse=a("strong"),D2o=o("rembert"),G2o=o(" \u2014 "),Mq=a("a"),O2o=o("RemBertModel"),V2o=o(" (RemBERT model)"),X2o=l(),fp=a("li"),ele=a("strong"),z2o=o("resnet"),W2o=o(" \u2014 "),Eq=a("a"),Q2o=o("ResNetModel"),H2o=o(" (ResNet model)"),U2o=l(),gp=a("li"),ole=a("strong"),J2o=o("retribert"),Y2o=o(" \u2014 "),Cq=a("a"),K2o=o("RetriBertModel"),Z2o=o(" (RetriBERT model)"),evo=l(),hp=a("li"),rle=a("strong"),ovo=o("roberta"),rvo=o(" \u2014 "),wq=a("a"),tvo=o("RobertaModel"),avo=o(" (RoBERTa model)"),nvo=l(),up=a("li"),tle=a("strong"),svo=o("roformer"),lvo=o(" \u2014 "),Aq=a("a"),ivo=o("RoFormerModel"),dvo=o(" (RoFormer model)"),cvo=l(),pp=a("li"),ale=a("strong"),mvo=o("segformer"),fvo=o(" \u2014 "),yq=a("a"),gvo=o("SegformerModel"),hvo=o(" (SegFormer model)"),uvo=l(),_p=a("li"),nle=a("strong"),pvo=o("sew"),_vo=o(" \u2014 "),Lq=a("a"),bvo=o("SEWModel"),vvo=o(" (SEW model)"),Fvo=l(),bp=a("li"),sle=a("strong"),Tvo=o("sew-d"),Mvo=o(" \u2014 "),xq=a("a"),Evo=o("SEWDModel"),Cvo=o(" (SEW-D model)"),wvo=l(),vp=a("li"),lle=a("strong"),Avo=o("speech_to_text"),yvo=o(" \u2014 "),$q=a("a"),Lvo=o("Speech2TextModel"),xvo=o(" (Speech2Text model)"),$vo=l(),Fp=a("li"),ile=a("strong"),kvo=o("splinter"),Svo=o(" \u2014 "),kq=a("a"),Rvo=o("SplinterModel"),Pvo=o(" (Splinter model)"),Bvo=l(),Tp=a("li"),dle=a("strong"),Ivo=o("squeezebert"),qvo=o(" \u2014 "),Sq=a("a"),Nvo=o("SqueezeBertModel"),jvo=o(" (SqueezeBERT model)"),Dvo=l(),Mp=a("li"),cle=a("strong"),Gvo=o("swin"),Ovo=o(" \u2014 "),Rq=a("a"),Vvo=o("SwinModel"),Xvo=o(" (Swin model)"),zvo=l(),Ep=a("li"),mle=a("strong"),Wvo=o("t5"),Qvo=o(" \u2014 "),Pq=a("a"),Hvo=o("T5Model"),Uvo=o(" (T5 model)"),Jvo=l(),Cp=a("li"),fle=a("strong"),Yvo=o("tapas"),Kvo=o(" \u2014 "),Bq=a("a"),Zvo=o("TapasModel"),eFo=o(" (TAPAS model)"),oFo=l(),wp=a("li"),gle=a("strong"),rFo=o("trajectory_transformer"),tFo=o(" \u2014 "),Iq=a("a"),aFo=o("TrajectoryTransformerModel"),nFo=o(" (Trajectory Transformer model)"),sFo=l(),Ap=a("li"),hle=a("strong"),lFo=o("transfo-xl"),iFo=o(" \u2014 "),qq=a("a"),dFo=o("TransfoXLModel"),cFo=o(" (Transformer-XL model)"),mFo=l(),yp=a("li"),ule=a("strong"),fFo=o("unispeech"),gFo=o(" \u2014 "),Nq=a("a"),hFo=o("UniSpeechModel"),uFo=o(" (UniSpeech model)"),pFo=l(),Lp=a("li"),ple=a("strong"),_Fo=o("unispeech-sat"),bFo=o(" \u2014 "),jq=a("a"),vFo=o("UniSpeechSatModel"),FFo=o(" (UniSpeechSat model)"),TFo=l(),xp=a("li"),_le=a("strong"),MFo=o("van"),EFo=o(" \u2014 "),Dq=a("a"),CFo=o("VanModel"),wFo=o(" (VAN model)"),AFo=l(),$p=a("li"),ble=a("strong"),yFo=o("vilt"),LFo=o(" \u2014 "),Gq=a("a"),xFo=o("ViltModel"),$Fo=o(" (ViLT model)"),kFo=l(),kp=a("li"),vle=a("strong"),SFo=o("vision-text-dual-encoder"),RFo=o(" \u2014 "),Oq=a("a"),PFo=o("VisionTextDualEncoderModel"),BFo=o(" (VisionTextDualEncoder model)"),IFo=l(),Sp=a("li"),Fle=a("strong"),qFo=o("visual_bert"),NFo=o(" \u2014 "),Vq=a("a"),jFo=o("VisualBertModel"),DFo=o(" (VisualBert model)"),GFo=l(),Rp=a("li"),Tle=a("strong"),OFo=o("vit"),VFo=o(" \u2014 "),Xq=a("a"),XFo=o("ViTModel"),zFo=o(" (ViT model)"),WFo=l(),Pp=a("li"),Mle=a("strong"),QFo=o("vit_mae"),HFo=o(" \u2014 "),zq=a("a"),UFo=o("ViTMAEModel"),JFo=o(" (ViTMAE model)"),YFo=l(),Bp=a("li"),Ele=a("strong"),KFo=o("wav2vec2"),ZFo=o(" \u2014 "),Wq=a("a"),e1o=o("Wav2Vec2Model"),o1o=o(" (Wav2Vec2 model)"),r1o=l(),Ip=a("li"),Cle=a("strong"),t1o=o("wav2vec2-conformer"),a1o=o(" \u2014 "),Qq=a("a"),n1o=o("Wav2Vec2ConformerModel"),s1o=o(" (Wav2Vec2-Conformer model)"),l1o=l(),qp=a("li"),wle=a("strong"),i1o=o("wavlm"),d1o=o(" \u2014 "),Hq=a("a"),c1o=o("WavLMModel"),m1o=o(" (WavLM model)"),f1o=l(),Np=a("li"),Ale=a("strong"),g1o=o("xglm"),h1o=o(" \u2014 "),Uq=a("a"),u1o=o("XGLMModel"),p1o=o(" (XGLM model)"),_1o=l(),jp=a("li"),yle=a("strong"),b1o=o("xlm"),v1o=o(" \u2014 "),Jq=a("a"),F1o=o("XLMModel"),T1o=o(" (XLM model)"),M1o=l(),Dp=a("li"),Lle=a("strong"),E1o=o("xlm-prophetnet"),C1o=o(" \u2014 "),Yq=a("a"),w1o=o("XLMProphetNetModel"),A1o=o(" (XLMProphetNet model)"),y1o=l(),Gp=a("li"),xle=a("strong"),L1o=o("xlm-roberta"),x1o=o(" \u2014 "),Kq=a("a"),$1o=o("XLMRobertaModel"),k1o=o(" (XLM-RoBERTa model)"),S1o=l(),Op=a("li"),$le=a("strong"),R1o=o("xlm-roberta-xl"),P1o=o(" \u2014 "),Zq=a("a"),B1o=o("XLMRobertaXLModel"),I1o=o(" (XLM-RoBERTa-XL model)"),q1o=l(),Vp=a("li"),kle=a("strong"),N1o=o("xlnet"),j1o=o(" \u2014 "),eN=a("a"),D1o=o("XLNetModel"),G1o=o(" (XLNet model)"),O1o=l(),Xp=a("li"),Sle=a("strong"),V1o=o("yolos"),X1o=o(" \u2014 "),oN=a("a"),z1o=o("YolosModel"),W1o=o(" (YOLOS model)"),Q1o=l(),zp=a("li"),Rle=a("strong"),H1o=o("yoso"),U1o=o(" \u2014 "),rN=a("a"),J1o=o("YosoModel"),Y1o=o(" (YOSO model)"),K1o=l(),Wp=a("p"),Z1o=o("The model is set in evaluation mode by default using "),Ple=a("code"),eTo=o("model.eval()"),oTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),rTo=o("model.train()"),tTo=l(),F(Qp.$$.fragment),hqe=l(),yi=a("h2"),Hp=a("a"),Ile=a("span"),F(zy.$$.fragment),aTo=l(),qle=a("span"),nTo=o("AutoModelForPreTraining"),uqe=l(),xo=a("div"),F(Wy.$$.fragment),sTo=l(),Li=a("p"),lTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tN=a("a"),iTo=o("from_pretrained()"),dTo=o(" class method or the "),aN=a("a"),cTo=o("from_config()"),mTo=o(` class
method.`),fTo=l(),Qy=a("p"),gTo=o("This class cannot be instantiated directly using "),Nle=a("code"),hTo=o("__init__()"),uTo=o(" (throws an error)."),pTo=l(),at=a("div"),F(Hy.$$.fragment),_To=l(),jle=a("p"),bTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vTo=l(),xi=a("p"),FTo=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),TTo=o("not"),MTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),ETo=o("from_pretrained()"),CTo=o(" to load the model weights."),wTo=l(),F(Up.$$.fragment),ATo=l(),Ye=a("div"),F(Uy.$$.fragment),yTo=l(),Gle=a("p"),LTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xTo=l(),xa=a("p"),$To=o("The model class to instantiate is selected based on the "),Ole=a("code"),kTo=o("model_type"),STo=o(` property of the config object (either
passed as an argument or loaded from `),Vle=a("code"),RTo=o("pretrained_model_name_or_path"),PTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),BTo=o("pretrained_model_name_or_path"),ITo=o(":"),qTo=l(),G=a("ul"),Jp=a("li"),zle=a("strong"),NTo=o("albert"),jTo=o(" \u2014 "),sN=a("a"),DTo=o("AlbertForPreTraining"),GTo=o(" (ALBERT model)"),OTo=l(),Yp=a("li"),Wle=a("strong"),VTo=o("bart"),XTo=o(" \u2014 "),lN=a("a"),zTo=o("BartForConditionalGeneration"),WTo=o(" (BART model)"),QTo=l(),Kp=a("li"),Qle=a("strong"),HTo=o("bert"),UTo=o(" \u2014 "),iN=a("a"),JTo=o("BertForPreTraining"),YTo=o(" (BERT model)"),KTo=l(),Zp=a("li"),Hle=a("strong"),ZTo=o("big_bird"),eMo=o(" \u2014 "),dN=a("a"),oMo=o("BigBirdForPreTraining"),rMo=o(" (BigBird model)"),tMo=l(),e_=a("li"),Ule=a("strong"),aMo=o("camembert"),nMo=o(" \u2014 "),cN=a("a"),sMo=o("CamembertForMaskedLM"),lMo=o(" (CamemBERT model)"),iMo=l(),o_=a("li"),Jle=a("strong"),dMo=o("ctrl"),cMo=o(" \u2014 "),mN=a("a"),mMo=o("CTRLLMHeadModel"),fMo=o(" (CTRL model)"),gMo=l(),r_=a("li"),Yle=a("strong"),hMo=o("data2vec-text"),uMo=o(" \u2014 "),fN=a("a"),pMo=o("Data2VecTextForMaskedLM"),_Mo=o(" (Data2VecText model)"),bMo=l(),t_=a("li"),Kle=a("strong"),vMo=o("deberta"),FMo=o(" \u2014 "),gN=a("a"),TMo=o("DebertaForMaskedLM"),MMo=o(" (DeBERTa model)"),EMo=l(),a_=a("li"),Zle=a("strong"),CMo=o("deberta-v2"),wMo=o(" \u2014 "),hN=a("a"),AMo=o("DebertaV2ForMaskedLM"),yMo=o(" (DeBERTa-v2 model)"),LMo=l(),n_=a("li"),eie=a("strong"),xMo=o("distilbert"),$Mo=o(" \u2014 "),uN=a("a"),kMo=o("DistilBertForMaskedLM"),SMo=o(" (DistilBERT model)"),RMo=l(),s_=a("li"),oie=a("strong"),PMo=o("electra"),BMo=o(" \u2014 "),pN=a("a"),IMo=o("ElectraForPreTraining"),qMo=o(" (ELECTRA model)"),NMo=l(),l_=a("li"),rie=a("strong"),jMo=o("flaubert"),DMo=o(" \u2014 "),_N=a("a"),GMo=o("FlaubertWithLMHeadModel"),OMo=o(" (FlauBERT model)"),VMo=l(),i_=a("li"),tie=a("strong"),XMo=o("flava"),zMo=o(" \u2014 "),bN=a("a"),WMo=o("FlavaForPreTraining"),QMo=o(" (Flava model)"),HMo=l(),d_=a("li"),aie=a("strong"),UMo=o("fnet"),JMo=o(" \u2014 "),vN=a("a"),YMo=o("FNetForPreTraining"),KMo=o(" (FNet model)"),ZMo=l(),c_=a("li"),nie=a("strong"),e4o=o("fsmt"),o4o=o(" \u2014 "),FN=a("a"),r4o=o("FSMTForConditionalGeneration"),t4o=o(" (FairSeq Machine-Translation model)"),a4o=l(),m_=a("li"),sie=a("strong"),n4o=o("funnel"),s4o=o(" \u2014 "),TN=a("a"),l4o=o("FunnelForPreTraining"),i4o=o(" (Funnel Transformer model)"),d4o=l(),f_=a("li"),lie=a("strong"),c4o=o("gpt2"),m4o=o(" \u2014 "),MN=a("a"),f4o=o("GPT2LMHeadModel"),g4o=o(" (OpenAI GPT-2 model)"),h4o=l(),g_=a("li"),iie=a("strong"),u4o=o("ibert"),p4o=o(" \u2014 "),EN=a("a"),_4o=o("IBertForMaskedLM"),b4o=o(" (I-BERT model)"),v4o=l(),h_=a("li"),die=a("strong"),F4o=o("layoutlm"),T4o=o(" \u2014 "),CN=a("a"),M4o=o("LayoutLMForMaskedLM"),E4o=o(" (LayoutLM model)"),C4o=l(),u_=a("li"),cie=a("strong"),w4o=o("longformer"),A4o=o(" \u2014 "),wN=a("a"),y4o=o("LongformerForMaskedLM"),L4o=o(" (Longformer model)"),x4o=l(),p_=a("li"),mie=a("strong"),$4o=o("lxmert"),k4o=o(" \u2014 "),AN=a("a"),S4o=o("LxmertForPreTraining"),R4o=o(" (LXMERT model)"),P4o=l(),__=a("li"),fie=a("strong"),B4o=o("megatron-bert"),I4o=o(" \u2014 "),yN=a("a"),q4o=o("MegatronBertForPreTraining"),N4o=o(" (MegatronBert model)"),j4o=l(),b_=a("li"),gie=a("strong"),D4o=o("mobilebert"),G4o=o(" \u2014 "),LN=a("a"),O4o=o("MobileBertForPreTraining"),V4o=o(" (MobileBERT model)"),X4o=l(),v_=a("li"),hie=a("strong"),z4o=o("mpnet"),W4o=o(" \u2014 "),xN=a("a"),Q4o=o("MPNetForMaskedLM"),H4o=o(" (MPNet model)"),U4o=l(),F_=a("li"),uie=a("strong"),J4o=o("openai-gpt"),Y4o=o(" \u2014 "),$N=a("a"),K4o=o("OpenAIGPTLMHeadModel"),Z4o=o(" (OpenAI GPT model)"),eEo=l(),T_=a("li"),pie=a("strong"),oEo=o("retribert"),rEo=o(" \u2014 "),kN=a("a"),tEo=o("RetriBertModel"),aEo=o(" (RetriBERT model)"),nEo=l(),M_=a("li"),_ie=a("strong"),sEo=o("roberta"),lEo=o(" \u2014 "),SN=a("a"),iEo=o("RobertaForMaskedLM"),dEo=o(" (RoBERTa model)"),cEo=l(),E_=a("li"),bie=a("strong"),mEo=o("splinter"),fEo=o(" \u2014 "),RN=a("a"),gEo=o("SplinterForPreTraining"),hEo=o(" (Splinter model)"),uEo=l(),C_=a("li"),vie=a("strong"),pEo=o("squeezebert"),_Eo=o(" \u2014 "),PN=a("a"),bEo=o("SqueezeBertForMaskedLM"),vEo=o(" (SqueezeBERT model)"),FEo=l(),w_=a("li"),Fie=a("strong"),TEo=o("t5"),MEo=o(" \u2014 "),BN=a("a"),EEo=o("T5ForConditionalGeneration"),CEo=o(" (T5 model)"),wEo=l(),A_=a("li"),Tie=a("strong"),AEo=o("tapas"),yEo=o(" \u2014 "),IN=a("a"),LEo=o("TapasForMaskedLM"),xEo=o(" (TAPAS model)"),$Eo=l(),y_=a("li"),Mie=a("strong"),kEo=o("transfo-xl"),SEo=o(" \u2014 "),qN=a("a"),REo=o("TransfoXLLMHeadModel"),PEo=o(" (Transformer-XL model)"),BEo=l(),L_=a("li"),Eie=a("strong"),IEo=o("unispeech"),qEo=o(" \u2014 "),NN=a("a"),NEo=o("UniSpeechForPreTraining"),jEo=o(" (UniSpeech model)"),DEo=l(),x_=a("li"),Cie=a("strong"),GEo=o("unispeech-sat"),OEo=o(" \u2014 "),jN=a("a"),VEo=o("UniSpeechSatForPreTraining"),XEo=o(" (UniSpeechSat model)"),zEo=l(),$_=a("li"),wie=a("strong"),WEo=o("visual_bert"),QEo=o(" \u2014 "),DN=a("a"),HEo=o("VisualBertForPreTraining"),UEo=o(" (VisualBert model)"),JEo=l(),k_=a("li"),Aie=a("strong"),YEo=o("vit_mae"),KEo=o(" \u2014 "),GN=a("a"),ZEo=o("ViTMAEForPreTraining"),eCo=o(" (ViTMAE model)"),oCo=l(),S_=a("li"),yie=a("strong"),rCo=o("wav2vec2"),tCo=o(" \u2014 "),ON=a("a"),aCo=o("Wav2Vec2ForPreTraining"),nCo=o(" (Wav2Vec2 model)"),sCo=l(),R_=a("li"),Lie=a("strong"),lCo=o("wav2vec2-conformer"),iCo=o(" \u2014 "),VN=a("a"),dCo=o("Wav2Vec2ConformerForPreTraining"),cCo=o(" (Wav2Vec2-Conformer model)"),mCo=l(),P_=a("li"),xie=a("strong"),fCo=o("xlm"),gCo=o(" \u2014 "),XN=a("a"),hCo=o("XLMWithLMHeadModel"),uCo=o(" (XLM model)"),pCo=l(),B_=a("li"),$ie=a("strong"),_Co=o("xlm-roberta"),bCo=o(" \u2014 "),zN=a("a"),vCo=o("XLMRobertaForMaskedLM"),FCo=o(" (XLM-RoBERTa model)"),TCo=l(),I_=a("li"),kie=a("strong"),MCo=o("xlm-roberta-xl"),ECo=o(" \u2014 "),WN=a("a"),CCo=o("XLMRobertaXLForMaskedLM"),wCo=o(" (XLM-RoBERTa-XL model)"),ACo=l(),q_=a("li"),Sie=a("strong"),yCo=o("xlnet"),LCo=o(" \u2014 "),QN=a("a"),xCo=o("XLNetLMHeadModel"),$Co=o(" (XLNet model)"),kCo=l(),N_=a("p"),SCo=o("The model is set in evaluation mode by default using "),Rie=a("code"),RCo=o("model.eval()"),PCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),BCo=o("model.train()"),ICo=l(),F(j_.$$.fragment),pqe=l(),$i=a("h2"),D_=a("a"),Bie=a("span"),F(Jy.$$.fragment),qCo=l(),Iie=a("span"),NCo=o("AutoModelForCausalLM"),_qe=l(),$o=a("div"),F(Yy.$$.fragment),jCo=l(),ki=a("p"),DCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HN=a("a"),GCo=o("from_pretrained()"),OCo=o(" class method or the "),UN=a("a"),VCo=o("from_config()"),XCo=o(` class
method.`),zCo=l(),Ky=a("p"),WCo=o("This class cannot be instantiated directly using "),qie=a("code"),QCo=o("__init__()"),HCo=o(" (throws an error)."),UCo=l(),nt=a("div"),F(Zy.$$.fragment),JCo=l(),Nie=a("p"),YCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KCo=l(),Si=a("p"),ZCo=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),e5o=o("not"),o5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),r5o=o("from_pretrained()"),t5o=o(" to load the model weights."),a5o=l(),F(G_.$$.fragment),n5o=l(),Ke=a("div"),F(eL.$$.fragment),s5o=l(),Die=a("p"),l5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i5o=l(),$a=a("p"),d5o=o("The model class to instantiate is selected based on the "),Gie=a("code"),c5o=o("model_type"),m5o=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),f5o=o("pretrained_model_name_or_path"),g5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),h5o=o("pretrained_model_name_or_path"),u5o=o(":"),p5o=l(),z=a("ul"),O_=a("li"),Xie=a("strong"),_5o=o("bart"),b5o=o(" \u2014 "),YN=a("a"),v5o=o("BartForCausalLM"),F5o=o(" (BART model)"),T5o=l(),V_=a("li"),zie=a("strong"),M5o=o("bert"),E5o=o(" \u2014 "),KN=a("a"),C5o=o("BertLMHeadModel"),w5o=o(" (BERT model)"),A5o=l(),X_=a("li"),Wie=a("strong"),y5o=o("bert-generation"),L5o=o(" \u2014 "),ZN=a("a"),x5o=o("BertGenerationDecoder"),$5o=o(" (Bert Generation model)"),k5o=l(),z_=a("li"),Qie=a("strong"),S5o=o("big_bird"),R5o=o(" \u2014 "),ej=a("a"),P5o=o("BigBirdForCausalLM"),B5o=o(" (BigBird model)"),I5o=l(),W_=a("li"),Hie=a("strong"),q5o=o("bigbird_pegasus"),N5o=o(" \u2014 "),oj=a("a"),j5o=o("BigBirdPegasusForCausalLM"),D5o=o(" (BigBirdPegasus model)"),G5o=l(),Q_=a("li"),Uie=a("strong"),O5o=o("blenderbot"),V5o=o(" \u2014 "),rj=a("a"),X5o=o("BlenderbotForCausalLM"),z5o=o(" (Blenderbot model)"),W5o=l(),H_=a("li"),Jie=a("strong"),Q5o=o("blenderbot-small"),H5o=o(" \u2014 "),tj=a("a"),U5o=o("BlenderbotSmallForCausalLM"),J5o=o(" (BlenderbotSmall model)"),Y5o=l(),U_=a("li"),Yie=a("strong"),K5o=o("camembert"),Z5o=o(" \u2014 "),aj=a("a"),e3o=o("CamembertForCausalLM"),o3o=o(" (CamemBERT model)"),r3o=l(),J_=a("li"),Kie=a("strong"),t3o=o("ctrl"),a3o=o(" \u2014 "),nj=a("a"),n3o=o("CTRLLMHeadModel"),s3o=o(" (CTRL model)"),l3o=l(),Y_=a("li"),Zie=a("strong"),i3o=o("data2vec-text"),d3o=o(" \u2014 "),sj=a("a"),c3o=o("Data2VecTextForCausalLM"),m3o=o(" (Data2VecText model)"),f3o=l(),K_=a("li"),ede=a("strong"),g3o=o("electra"),h3o=o(" \u2014 "),lj=a("a"),u3o=o("ElectraForCausalLM"),p3o=o(" (ELECTRA model)"),_3o=l(),Z_=a("li"),ode=a("strong"),b3o=o("gpt2"),v3o=o(" \u2014 "),ij=a("a"),F3o=o("GPT2LMHeadModel"),T3o=o(" (OpenAI GPT-2 model)"),M3o=l(),eb=a("li"),rde=a("strong"),E3o=o("gpt_neo"),C3o=o(" \u2014 "),dj=a("a"),w3o=o("GPTNeoForCausalLM"),A3o=o(" (GPT Neo model)"),y3o=l(),ob=a("li"),tde=a("strong"),L3o=o("gptj"),x3o=o(" \u2014 "),cj=a("a"),$3o=o("GPTJForCausalLM"),k3o=o(" (GPT-J model)"),S3o=l(),rb=a("li"),ade=a("strong"),R3o=o("marian"),P3o=o(" \u2014 "),mj=a("a"),B3o=o("MarianForCausalLM"),I3o=o(" (Marian model)"),q3o=l(),tb=a("li"),nde=a("strong"),N3o=o("mbart"),j3o=o(" \u2014 "),fj=a("a"),D3o=o("MBartForCausalLM"),G3o=o(" (mBART model)"),O3o=l(),ab=a("li"),sde=a("strong"),V3o=o("megatron-bert"),X3o=o(" \u2014 "),gj=a("a"),z3o=o("MegatronBertForCausalLM"),W3o=o(" (MegatronBert model)"),Q3o=l(),nb=a("li"),lde=a("strong"),H3o=o("openai-gpt"),U3o=o(" \u2014 "),hj=a("a"),J3o=o("OpenAIGPTLMHeadModel"),Y3o=o(" (OpenAI GPT model)"),K3o=l(),sb=a("li"),ide=a("strong"),Z3o=o("opt"),ewo=o(" \u2014 "),uj=a("a"),owo=o("OPTForCausalLM"),rwo=o(" (OPT model)"),two=l(),lb=a("li"),dde=a("strong"),awo=o("pegasus"),nwo=o(" \u2014 "),pj=a("a"),swo=o("PegasusForCausalLM"),lwo=o(" (Pegasus model)"),iwo=l(),ib=a("li"),cde=a("strong"),dwo=o("plbart"),cwo=o(" \u2014 "),_j=a("a"),mwo=o("PLBartForCausalLM"),fwo=o(" (PLBart model)"),gwo=l(),db=a("li"),mde=a("strong"),hwo=o("prophetnet"),uwo=o(" \u2014 "),bj=a("a"),pwo=o("ProphetNetForCausalLM"),_wo=o(" (ProphetNet model)"),bwo=l(),cb=a("li"),fde=a("strong"),vwo=o("qdqbert"),Fwo=o(" \u2014 "),vj=a("a"),Two=o("QDQBertLMHeadModel"),Mwo=o(" (QDQBert model)"),Ewo=l(),mb=a("li"),gde=a("strong"),Cwo=o("reformer"),wwo=o(" \u2014 "),Fj=a("a"),Awo=o("ReformerModelWithLMHead"),ywo=o(" (Reformer model)"),Lwo=l(),fb=a("li"),hde=a("strong"),xwo=o("rembert"),$wo=o(" \u2014 "),Tj=a("a"),kwo=o("RemBertForCausalLM"),Swo=o(" (RemBERT model)"),Rwo=l(),gb=a("li"),ude=a("strong"),Pwo=o("roberta"),Bwo=o(" \u2014 "),Mj=a("a"),Iwo=o("RobertaForCausalLM"),qwo=o(" (RoBERTa model)"),Nwo=l(),hb=a("li"),pde=a("strong"),jwo=o("roformer"),Dwo=o(" \u2014 "),Ej=a("a"),Gwo=o("RoFormerForCausalLM"),Owo=o(" (RoFormer model)"),Vwo=l(),ub=a("li"),_de=a("strong"),Xwo=o("speech_to_text_2"),zwo=o(" \u2014 "),Cj=a("a"),Wwo=o("Speech2Text2ForCausalLM"),Qwo=o(" (Speech2Text2 model)"),Hwo=l(),pb=a("li"),bde=a("strong"),Uwo=o("transfo-xl"),Jwo=o(" \u2014 "),wj=a("a"),Ywo=o("TransfoXLLMHeadModel"),Kwo=o(" (Transformer-XL model)"),Zwo=l(),_b=a("li"),vde=a("strong"),e0o=o("trocr"),o0o=o(" \u2014 "),Aj=a("a"),r0o=o("TrOCRForCausalLM"),t0o=o(" (TrOCR model)"),a0o=l(),bb=a("li"),Fde=a("strong"),n0o=o("xglm"),s0o=o(" \u2014 "),yj=a("a"),l0o=o("XGLMForCausalLM"),i0o=o(" (XGLM model)"),d0o=l(),vb=a("li"),Tde=a("strong"),c0o=o("xlm"),m0o=o(" \u2014 "),Lj=a("a"),f0o=o("XLMWithLMHeadModel"),g0o=o(" (XLM model)"),h0o=l(),Fb=a("li"),Mde=a("strong"),u0o=o("xlm-prophetnet"),p0o=o(" \u2014 "),xj=a("a"),_0o=o("XLMProphetNetForCausalLM"),b0o=o(" (XLMProphetNet model)"),v0o=l(),Tb=a("li"),Ede=a("strong"),F0o=o("xlm-roberta"),T0o=o(" \u2014 "),$j=a("a"),M0o=o("XLMRobertaForCausalLM"),E0o=o(" (XLM-RoBERTa model)"),C0o=l(),Mb=a("li"),Cde=a("strong"),w0o=o("xlm-roberta-xl"),A0o=o(" \u2014 "),kj=a("a"),y0o=o("XLMRobertaXLForCausalLM"),L0o=o(" (XLM-RoBERTa-XL model)"),x0o=l(),Eb=a("li"),wde=a("strong"),$0o=o("xlnet"),k0o=o(" \u2014 "),Sj=a("a"),S0o=o("XLNetLMHeadModel"),R0o=o(" (XLNet model)"),P0o=l(),Cb=a("p"),B0o=o("The model is set in evaluation mode by default using "),Ade=a("code"),I0o=o("model.eval()"),q0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),N0o=o("model.train()"),j0o=l(),F(wb.$$.fragment),bqe=l(),Ri=a("h2"),Ab=a("a"),Lde=a("span"),F(oL.$$.fragment),D0o=l(),xde=a("span"),G0o=o("AutoModelForMaskedLM"),vqe=l(),ko=a("div"),F(rL.$$.fragment),O0o=l(),Pi=a("p"),V0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rj=a("a"),X0o=o("from_pretrained()"),z0o=o(" class method or the "),Pj=a("a"),W0o=o("from_config()"),Q0o=o(` class
method.`),H0o=l(),tL=a("p"),U0o=o("This class cannot be instantiated directly using "),$de=a("code"),J0o=o("__init__()"),Y0o=o(" (throws an error)."),K0o=l(),st=a("div"),F(aL.$$.fragment),Z0o=l(),kde=a("p"),eAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oAo=l(),Bi=a("p"),rAo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),tAo=o("not"),aAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=a("a"),nAo=o("from_pretrained()"),sAo=o(" to load the model weights."),lAo=l(),F(yb.$$.fragment),iAo=l(),Ze=a("div"),F(nL.$$.fragment),dAo=l(),Rde=a("p"),cAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mAo=l(),ka=a("p"),fAo=o("The model class to instantiate is selected based on the "),Pde=a("code"),gAo=o("model_type"),hAo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),uAo=o("pretrained_model_name_or_path"),pAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),_Ao=o("pretrained_model_name_or_path"),bAo=o(":"),vAo=l(),W=a("ul"),Lb=a("li"),qde=a("strong"),FAo=o("albert"),TAo=o(" \u2014 "),Ij=a("a"),MAo=o("AlbertForMaskedLM"),EAo=o(" (ALBERT model)"),CAo=l(),xb=a("li"),Nde=a("strong"),wAo=o("bart"),AAo=o(" \u2014 "),qj=a("a"),yAo=o("BartForConditionalGeneration"),LAo=o(" (BART model)"),xAo=l(),$b=a("li"),jde=a("strong"),$Ao=o("bert"),kAo=o(" \u2014 "),Nj=a("a"),SAo=o("BertForMaskedLM"),RAo=o(" (BERT model)"),PAo=l(),kb=a("li"),Dde=a("strong"),BAo=o("big_bird"),IAo=o(" \u2014 "),jj=a("a"),qAo=o("BigBirdForMaskedLM"),NAo=o(" (BigBird model)"),jAo=l(),Sb=a("li"),Gde=a("strong"),DAo=o("camembert"),GAo=o(" \u2014 "),Dj=a("a"),OAo=o("CamembertForMaskedLM"),VAo=o(" (CamemBERT model)"),XAo=l(),Rb=a("li"),Ode=a("strong"),zAo=o("convbert"),WAo=o(" \u2014 "),Gj=a("a"),QAo=o("ConvBertForMaskedLM"),HAo=o(" (ConvBERT model)"),UAo=l(),Pb=a("li"),Vde=a("strong"),JAo=o("data2vec-text"),YAo=o(" \u2014 "),Oj=a("a"),KAo=o("Data2VecTextForMaskedLM"),ZAo=o(" (Data2VecText model)"),e6o=l(),Bb=a("li"),Xde=a("strong"),o6o=o("deberta"),r6o=o(" \u2014 "),Vj=a("a"),t6o=o("DebertaForMaskedLM"),a6o=o(" (DeBERTa model)"),n6o=l(),Ib=a("li"),zde=a("strong"),s6o=o("deberta-v2"),l6o=o(" \u2014 "),Xj=a("a"),i6o=o("DebertaV2ForMaskedLM"),d6o=o(" (DeBERTa-v2 model)"),c6o=l(),qb=a("li"),Wde=a("strong"),m6o=o("distilbert"),f6o=o(" \u2014 "),zj=a("a"),g6o=o("DistilBertForMaskedLM"),h6o=o(" (DistilBERT model)"),u6o=l(),Nb=a("li"),Qde=a("strong"),p6o=o("electra"),_6o=o(" \u2014 "),Wj=a("a"),b6o=o("ElectraForMaskedLM"),v6o=o(" (ELECTRA model)"),F6o=l(),jb=a("li"),Hde=a("strong"),T6o=o("flaubert"),M6o=o(" \u2014 "),Qj=a("a"),E6o=o("FlaubertWithLMHeadModel"),C6o=o(" (FlauBERT model)"),w6o=l(),Db=a("li"),Ude=a("strong"),A6o=o("fnet"),y6o=o(" \u2014 "),Hj=a("a"),L6o=o("FNetForMaskedLM"),x6o=o(" (FNet model)"),$6o=l(),Gb=a("li"),Jde=a("strong"),k6o=o("funnel"),S6o=o(" \u2014 "),Uj=a("a"),R6o=o("FunnelForMaskedLM"),P6o=o(" (Funnel Transformer model)"),B6o=l(),Ob=a("li"),Yde=a("strong"),I6o=o("ibert"),q6o=o(" \u2014 "),Jj=a("a"),N6o=o("IBertForMaskedLM"),j6o=o(" (I-BERT model)"),D6o=l(),Vb=a("li"),Kde=a("strong"),G6o=o("layoutlm"),O6o=o(" \u2014 "),Yj=a("a"),V6o=o("LayoutLMForMaskedLM"),X6o=o(" (LayoutLM model)"),z6o=l(),Xb=a("li"),Zde=a("strong"),W6o=o("longformer"),Q6o=o(" \u2014 "),Kj=a("a"),H6o=o("LongformerForMaskedLM"),U6o=o(" (Longformer model)"),J6o=l(),zb=a("li"),ece=a("strong"),Y6o=o("mbart"),K6o=o(" \u2014 "),Zj=a("a"),Z6o=o("MBartForConditionalGeneration"),eyo=o(" (mBART model)"),oyo=l(),Wb=a("li"),oce=a("strong"),ryo=o("megatron-bert"),tyo=o(" \u2014 "),eD=a("a"),ayo=o("MegatronBertForMaskedLM"),nyo=o(" (MegatronBert model)"),syo=l(),Qb=a("li"),rce=a("strong"),lyo=o("mobilebert"),iyo=o(" \u2014 "),oD=a("a"),dyo=o("MobileBertForMaskedLM"),cyo=o(" (MobileBERT model)"),myo=l(),Hb=a("li"),tce=a("strong"),fyo=o("mpnet"),gyo=o(" \u2014 "),rD=a("a"),hyo=o("MPNetForMaskedLM"),uyo=o(" (MPNet model)"),pyo=l(),Ub=a("li"),ace=a("strong"),_yo=o("nystromformer"),byo=o(" \u2014 "),tD=a("a"),vyo=o("NystromformerForMaskedLM"),Fyo=o(" (Nystromformer model)"),Tyo=l(),Jb=a("li"),nce=a("strong"),Myo=o("perceiver"),Eyo=o(" \u2014 "),aD=a("a"),Cyo=o("PerceiverForMaskedLM"),wyo=o(" (Perceiver model)"),Ayo=l(),Yb=a("li"),sce=a("strong"),yyo=o("qdqbert"),Lyo=o(" \u2014 "),nD=a("a"),xyo=o("QDQBertForMaskedLM"),$yo=o(" (QDQBert model)"),kyo=l(),Kb=a("li"),lce=a("strong"),Syo=o("reformer"),Ryo=o(" \u2014 "),sD=a("a"),Pyo=o("ReformerForMaskedLM"),Byo=o(" (Reformer model)"),Iyo=l(),Zb=a("li"),ice=a("strong"),qyo=o("rembert"),Nyo=o(" \u2014 "),lD=a("a"),jyo=o("RemBertForMaskedLM"),Dyo=o(" (RemBERT model)"),Gyo=l(),e2=a("li"),dce=a("strong"),Oyo=o("roberta"),Vyo=o(" \u2014 "),iD=a("a"),Xyo=o("RobertaForMaskedLM"),zyo=o(" (RoBERTa model)"),Wyo=l(),o2=a("li"),cce=a("strong"),Qyo=o("roformer"),Hyo=o(" \u2014 "),dD=a("a"),Uyo=o("RoFormerForMaskedLM"),Jyo=o(" (RoFormer model)"),Yyo=l(),r2=a("li"),mce=a("strong"),Kyo=o("squeezebert"),Zyo=o(" \u2014 "),cD=a("a"),eLo=o("SqueezeBertForMaskedLM"),oLo=o(" (SqueezeBERT model)"),rLo=l(),t2=a("li"),fce=a("strong"),tLo=o("tapas"),aLo=o(" \u2014 "),mD=a("a"),nLo=o("TapasForMaskedLM"),sLo=o(" (TAPAS model)"),lLo=l(),a2=a("li"),gce=a("strong"),iLo=o("wav2vec2"),dLo=o(" \u2014 "),hce=a("code"),cLo=o("Wav2Vec2ForMaskedLM"),mLo=o(" (Wav2Vec2 model)"),fLo=l(),n2=a("li"),uce=a("strong"),gLo=o("xlm"),hLo=o(" \u2014 "),fD=a("a"),uLo=o("XLMWithLMHeadModel"),pLo=o(" (XLM model)"),_Lo=l(),s2=a("li"),pce=a("strong"),bLo=o("xlm-roberta"),vLo=o(" \u2014 "),gD=a("a"),FLo=o("XLMRobertaForMaskedLM"),TLo=o(" (XLM-RoBERTa model)"),MLo=l(),l2=a("li"),_ce=a("strong"),ELo=o("xlm-roberta-xl"),CLo=o(" \u2014 "),hD=a("a"),wLo=o("XLMRobertaXLForMaskedLM"),ALo=o(" (XLM-RoBERTa-XL model)"),yLo=l(),i2=a("li"),bce=a("strong"),LLo=o("yoso"),xLo=o(" \u2014 "),uD=a("a"),$Lo=o("YosoForMaskedLM"),kLo=o(" (YOSO model)"),SLo=l(),d2=a("p"),RLo=o("The model is set in evaluation mode by default using "),vce=a("code"),PLo=o("model.eval()"),BLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),ILo=o("model.train()"),qLo=l(),F(c2.$$.fragment),Fqe=l(),Ii=a("h2"),m2=a("a"),Tce=a("span"),F(sL.$$.fragment),NLo=l(),Mce=a("span"),jLo=o("AutoModelForSeq2SeqLM"),Tqe=l(),So=a("div"),F(lL.$$.fragment),DLo=l(),qi=a("p"),GLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pD=a("a"),OLo=o("from_pretrained()"),VLo=o(" class method or the "),_D=a("a"),XLo=o("from_config()"),zLo=o(` class
method.`),WLo=l(),iL=a("p"),QLo=o("This class cannot be instantiated directly using "),Ece=a("code"),HLo=o("__init__()"),ULo=o(" (throws an error)."),JLo=l(),lt=a("div"),F(dL.$$.fragment),YLo=l(),Cce=a("p"),KLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZLo=l(),Ni=a("p"),e8o=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),o8o=o("not"),r8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),t8o=o("from_pretrained()"),a8o=o(" to load the model weights."),n8o=l(),F(f2.$$.fragment),s8o=l(),eo=a("div"),F(cL.$$.fragment),l8o=l(),Ace=a("p"),i8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d8o=l(),Sa=a("p"),c8o=o("The model class to instantiate is selected based on the "),yce=a("code"),m8o=o("model_type"),f8o=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),g8o=o("pretrained_model_name_or_path"),h8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),u8o=o("pretrained_model_name_or_path"),p8o=o(":"),_8o=l(),pe=a("ul"),g2=a("li"),$ce=a("strong"),b8o=o("bart"),v8o=o(" \u2014 "),vD=a("a"),F8o=o("BartForConditionalGeneration"),T8o=o(" (BART model)"),M8o=l(),h2=a("li"),kce=a("strong"),E8o=o("bigbird_pegasus"),C8o=o(" \u2014 "),FD=a("a"),w8o=o("BigBirdPegasusForConditionalGeneration"),A8o=o(" (BigBirdPegasus model)"),y8o=l(),u2=a("li"),Sce=a("strong"),L8o=o("blenderbot"),x8o=o(" \u2014 "),TD=a("a"),$8o=o("BlenderbotForConditionalGeneration"),k8o=o(" (Blenderbot model)"),S8o=l(),p2=a("li"),Rce=a("strong"),R8o=o("blenderbot-small"),P8o=o(" \u2014 "),MD=a("a"),B8o=o("BlenderbotSmallForConditionalGeneration"),I8o=o(" (BlenderbotSmall model)"),q8o=l(),_2=a("li"),Pce=a("strong"),N8o=o("encoder-decoder"),j8o=o(" \u2014 "),ED=a("a"),D8o=o("EncoderDecoderModel"),G8o=o(" (Encoder decoder model)"),O8o=l(),b2=a("li"),Bce=a("strong"),V8o=o("fsmt"),X8o=o(" \u2014 "),CD=a("a"),z8o=o("FSMTForConditionalGeneration"),W8o=o(" (FairSeq Machine-Translation model)"),Q8o=l(),v2=a("li"),Ice=a("strong"),H8o=o("led"),U8o=o(" \u2014 "),wD=a("a"),J8o=o("LEDForConditionalGeneration"),Y8o=o(" (LED model)"),K8o=l(),F2=a("li"),qce=a("strong"),Z8o=o("m2m_100"),e7o=o(" \u2014 "),AD=a("a"),o7o=o("M2M100ForConditionalGeneration"),r7o=o(" (M2M100 model)"),t7o=l(),T2=a("li"),Nce=a("strong"),a7o=o("marian"),n7o=o(" \u2014 "),yD=a("a"),s7o=o("MarianMTModel"),l7o=o(" (Marian model)"),i7o=l(),M2=a("li"),jce=a("strong"),d7o=o("mbart"),c7o=o(" \u2014 "),LD=a("a"),m7o=o("MBartForConditionalGeneration"),f7o=o(" (mBART model)"),g7o=l(),E2=a("li"),Dce=a("strong"),h7o=o("mt5"),u7o=o(" \u2014 "),xD=a("a"),p7o=o("MT5ForConditionalGeneration"),_7o=o(" (mT5 model)"),b7o=l(),C2=a("li"),Gce=a("strong"),v7o=o("pegasus"),F7o=o(" \u2014 "),$D=a("a"),T7o=o("PegasusForConditionalGeneration"),M7o=o(" (Pegasus model)"),E7o=l(),w2=a("li"),Oce=a("strong"),C7o=o("plbart"),w7o=o(" \u2014 "),kD=a("a"),A7o=o("PLBartForConditionalGeneration"),y7o=o(" (PLBart model)"),L7o=l(),A2=a("li"),Vce=a("strong"),x7o=o("prophetnet"),$7o=o(" \u2014 "),SD=a("a"),k7o=o("ProphetNetForConditionalGeneration"),S7o=o(" (ProphetNet model)"),R7o=l(),y2=a("li"),Xce=a("strong"),P7o=o("t5"),B7o=o(" \u2014 "),RD=a("a"),I7o=o("T5ForConditionalGeneration"),q7o=o(" (T5 model)"),N7o=l(),L2=a("li"),zce=a("strong"),j7o=o("xlm-prophetnet"),D7o=o(" \u2014 "),PD=a("a"),G7o=o("XLMProphetNetForConditionalGeneration"),O7o=o(" (XLMProphetNet model)"),V7o=l(),x2=a("p"),X7o=o("The model is set in evaluation mode by default using "),Wce=a("code"),z7o=o("model.eval()"),W7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),Q7o=o("model.train()"),H7o=l(),F($2.$$.fragment),Mqe=l(),ji=a("h2"),k2=a("a"),Hce=a("span"),F(mL.$$.fragment),U7o=l(),Uce=a("span"),J7o=o("AutoModelForSequenceClassification"),Eqe=l(),Ro=a("div"),F(fL.$$.fragment),Y7o=l(),Di=a("p"),K7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BD=a("a"),Z7o=o("from_pretrained()"),e9o=o(" class method or the "),ID=a("a"),o9o=o("from_config()"),r9o=o(` class
method.`),t9o=l(),gL=a("p"),a9o=o("This class cannot be instantiated directly using "),Jce=a("code"),n9o=o("__init__()"),s9o=o(" (throws an error)."),l9o=l(),it=a("div"),F(hL.$$.fragment),i9o=l(),Yce=a("p"),d9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c9o=l(),Gi=a("p"),m9o=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),f9o=o("not"),g9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),h9o=o("from_pretrained()"),u9o=o(" to load the model weights."),p9o=l(),F(S2.$$.fragment),_9o=l(),oo=a("div"),F(uL.$$.fragment),b9o=l(),Zce=a("p"),v9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F9o=l(),Ra=a("p"),T9o=o("The model class to instantiate is selected based on the "),eme=a("code"),M9o=o("model_type"),E9o=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),C9o=o("pretrained_model_name_or_path"),w9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),A9o=o("pretrained_model_name_or_path"),y9o=o(":"),L9o=l(),q=a("ul"),R2=a("li"),tme=a("strong"),x9o=o("albert"),$9o=o(" \u2014 "),ND=a("a"),k9o=o("AlbertForSequenceClassification"),S9o=o(" (ALBERT model)"),R9o=l(),P2=a("li"),ame=a("strong"),P9o=o("bart"),B9o=o(" \u2014 "),jD=a("a"),I9o=o("BartForSequenceClassification"),q9o=o(" (BART model)"),N9o=l(),B2=a("li"),nme=a("strong"),j9o=o("bert"),D9o=o(" \u2014 "),DD=a("a"),G9o=o("BertForSequenceClassification"),O9o=o(" (BERT model)"),V9o=l(),I2=a("li"),sme=a("strong"),X9o=o("big_bird"),z9o=o(" \u2014 "),GD=a("a"),W9o=o("BigBirdForSequenceClassification"),Q9o=o(" (BigBird model)"),H9o=l(),q2=a("li"),lme=a("strong"),U9o=o("bigbird_pegasus"),J9o=o(" \u2014 "),OD=a("a"),Y9o=o("BigBirdPegasusForSequenceClassification"),K9o=o(" (BigBirdPegasus model)"),Z9o=l(),N2=a("li"),ime=a("strong"),exo=o("camembert"),oxo=o(" \u2014 "),VD=a("a"),rxo=o("CamembertForSequenceClassification"),txo=o(" (CamemBERT model)"),axo=l(),j2=a("li"),dme=a("strong"),nxo=o("canine"),sxo=o(" \u2014 "),XD=a("a"),lxo=o("CanineForSequenceClassification"),ixo=o(" (Canine model)"),dxo=l(),D2=a("li"),cme=a("strong"),cxo=o("convbert"),mxo=o(" \u2014 "),zD=a("a"),fxo=o("ConvBertForSequenceClassification"),gxo=o(" (ConvBERT model)"),hxo=l(),G2=a("li"),mme=a("strong"),uxo=o("ctrl"),pxo=o(" \u2014 "),WD=a("a"),_xo=o("CTRLForSequenceClassification"),bxo=o(" (CTRL model)"),vxo=l(),O2=a("li"),fme=a("strong"),Fxo=o("data2vec-text"),Txo=o(" \u2014 "),QD=a("a"),Mxo=o("Data2VecTextForSequenceClassification"),Exo=o(" (Data2VecText model)"),Cxo=l(),V2=a("li"),gme=a("strong"),wxo=o("deberta"),Axo=o(" \u2014 "),HD=a("a"),yxo=o("DebertaForSequenceClassification"),Lxo=o(" (DeBERTa model)"),xxo=l(),X2=a("li"),hme=a("strong"),$xo=o("deberta-v2"),kxo=o(" \u2014 "),UD=a("a"),Sxo=o("DebertaV2ForSequenceClassification"),Rxo=o(" (DeBERTa-v2 model)"),Pxo=l(),z2=a("li"),ume=a("strong"),Bxo=o("distilbert"),Ixo=o(" \u2014 "),JD=a("a"),qxo=o("DistilBertForSequenceClassification"),Nxo=o(" (DistilBERT model)"),jxo=l(),W2=a("li"),pme=a("strong"),Dxo=o("electra"),Gxo=o(" \u2014 "),YD=a("a"),Oxo=o("ElectraForSequenceClassification"),Vxo=o(" (ELECTRA model)"),Xxo=l(),Q2=a("li"),_me=a("strong"),zxo=o("flaubert"),Wxo=o(" \u2014 "),KD=a("a"),Qxo=o("FlaubertForSequenceClassification"),Hxo=o(" (FlauBERT model)"),Uxo=l(),H2=a("li"),bme=a("strong"),Jxo=o("fnet"),Yxo=o(" \u2014 "),ZD=a("a"),Kxo=o("FNetForSequenceClassification"),Zxo=o(" (FNet model)"),e$o=l(),U2=a("li"),vme=a("strong"),o$o=o("funnel"),r$o=o(" \u2014 "),eG=a("a"),t$o=o("FunnelForSequenceClassification"),a$o=o(" (Funnel Transformer model)"),n$o=l(),J2=a("li"),Fme=a("strong"),s$o=o("gpt2"),l$o=o(" \u2014 "),oG=a("a"),i$o=o("GPT2ForSequenceClassification"),d$o=o(" (OpenAI GPT-2 model)"),c$o=l(),Y2=a("li"),Tme=a("strong"),m$o=o("gpt_neo"),f$o=o(" \u2014 "),rG=a("a"),g$o=o("GPTNeoForSequenceClassification"),h$o=o(" (GPT Neo model)"),u$o=l(),K2=a("li"),Mme=a("strong"),p$o=o("gptj"),_$o=o(" \u2014 "),tG=a("a"),b$o=o("GPTJForSequenceClassification"),v$o=o(" (GPT-J model)"),F$o=l(),Z2=a("li"),Eme=a("strong"),T$o=o("ibert"),M$o=o(" \u2014 "),aG=a("a"),E$o=o("IBertForSequenceClassification"),C$o=o(" (I-BERT model)"),w$o=l(),ev=a("li"),Cme=a("strong"),A$o=o("layoutlm"),y$o=o(" \u2014 "),nG=a("a"),L$o=o("LayoutLMForSequenceClassification"),x$o=o(" (LayoutLM model)"),$$o=l(),ov=a("li"),wme=a("strong"),k$o=o("layoutlmv2"),S$o=o(" \u2014 "),sG=a("a"),R$o=o("LayoutLMv2ForSequenceClassification"),P$o=o(" (LayoutLMv2 model)"),B$o=l(),rv=a("li"),Ame=a("strong"),I$o=o("led"),q$o=o(" \u2014 "),lG=a("a"),N$o=o("LEDForSequenceClassification"),j$o=o(" (LED model)"),D$o=l(),tv=a("li"),yme=a("strong"),G$o=o("longformer"),O$o=o(" \u2014 "),iG=a("a"),V$o=o("LongformerForSequenceClassification"),X$o=o(" (Longformer model)"),z$o=l(),av=a("li"),Lme=a("strong"),W$o=o("mbart"),Q$o=o(" \u2014 "),dG=a("a"),H$o=o("MBartForSequenceClassification"),U$o=o(" (mBART model)"),J$o=l(),nv=a("li"),xme=a("strong"),Y$o=o("megatron-bert"),K$o=o(" \u2014 "),cG=a("a"),Z$o=o("MegatronBertForSequenceClassification"),eko=o(" (MegatronBert model)"),oko=l(),sv=a("li"),$me=a("strong"),rko=o("mobilebert"),tko=o(" \u2014 "),mG=a("a"),ako=o("MobileBertForSequenceClassification"),nko=o(" (MobileBERT model)"),sko=l(),lv=a("li"),kme=a("strong"),lko=o("mpnet"),iko=o(" \u2014 "),fG=a("a"),dko=o("MPNetForSequenceClassification"),cko=o(" (MPNet model)"),mko=l(),iv=a("li"),Sme=a("strong"),fko=o("nystromformer"),gko=o(" \u2014 "),gG=a("a"),hko=o("NystromformerForSequenceClassification"),uko=o(" (Nystromformer model)"),pko=l(),dv=a("li"),Rme=a("strong"),_ko=o("openai-gpt"),bko=o(" \u2014 "),hG=a("a"),vko=o("OpenAIGPTForSequenceClassification"),Fko=o(" (OpenAI GPT model)"),Tko=l(),cv=a("li"),Pme=a("strong"),Mko=o("perceiver"),Eko=o(" \u2014 "),uG=a("a"),Cko=o("PerceiverForSequenceClassification"),wko=o(" (Perceiver model)"),Ako=l(),mv=a("li"),Bme=a("strong"),yko=o("plbart"),Lko=o(" \u2014 "),pG=a("a"),xko=o("PLBartForSequenceClassification"),$ko=o(" (PLBart model)"),kko=l(),fv=a("li"),Ime=a("strong"),Sko=o("qdqbert"),Rko=o(" \u2014 "),_G=a("a"),Pko=o("QDQBertForSequenceClassification"),Bko=o(" (QDQBert model)"),Iko=l(),gv=a("li"),qme=a("strong"),qko=o("reformer"),Nko=o(" \u2014 "),bG=a("a"),jko=o("ReformerForSequenceClassification"),Dko=o(" (Reformer model)"),Gko=l(),hv=a("li"),Nme=a("strong"),Oko=o("rembert"),Vko=o(" \u2014 "),vG=a("a"),Xko=o("RemBertForSequenceClassification"),zko=o(" (RemBERT model)"),Wko=l(),uv=a("li"),jme=a("strong"),Qko=o("roberta"),Hko=o(" \u2014 "),FG=a("a"),Uko=o("RobertaForSequenceClassification"),Jko=o(" (RoBERTa model)"),Yko=l(),pv=a("li"),Dme=a("strong"),Kko=o("roformer"),Zko=o(" \u2014 "),TG=a("a"),eSo=o("RoFormerForSequenceClassification"),oSo=o(" (RoFormer model)"),rSo=l(),_v=a("li"),Gme=a("strong"),tSo=o("squeezebert"),aSo=o(" \u2014 "),MG=a("a"),nSo=o("SqueezeBertForSequenceClassification"),sSo=o(" (SqueezeBERT model)"),lSo=l(),bv=a("li"),Ome=a("strong"),iSo=o("tapas"),dSo=o(" \u2014 "),EG=a("a"),cSo=o("TapasForSequenceClassification"),mSo=o(" (TAPAS model)"),fSo=l(),vv=a("li"),Vme=a("strong"),gSo=o("transfo-xl"),hSo=o(" \u2014 "),CG=a("a"),uSo=o("TransfoXLForSequenceClassification"),pSo=o(" (Transformer-XL model)"),_So=l(),Fv=a("li"),Xme=a("strong"),bSo=o("xlm"),vSo=o(" \u2014 "),wG=a("a"),FSo=o("XLMForSequenceClassification"),TSo=o(" (XLM model)"),MSo=l(),Tv=a("li"),zme=a("strong"),ESo=o("xlm-roberta"),CSo=o(" \u2014 "),AG=a("a"),wSo=o("XLMRobertaForSequenceClassification"),ASo=o(" (XLM-RoBERTa model)"),ySo=l(),Mv=a("li"),Wme=a("strong"),LSo=o("xlm-roberta-xl"),xSo=o(" \u2014 "),yG=a("a"),$So=o("XLMRobertaXLForSequenceClassification"),kSo=o(" (XLM-RoBERTa-XL model)"),SSo=l(),Ev=a("li"),Qme=a("strong"),RSo=o("xlnet"),PSo=o(" \u2014 "),LG=a("a"),BSo=o("XLNetForSequenceClassification"),ISo=o(" (XLNet model)"),qSo=l(),Cv=a("li"),Hme=a("strong"),NSo=o("yoso"),jSo=o(" \u2014 "),xG=a("a"),DSo=o("YosoForSequenceClassification"),GSo=o(" (YOSO model)"),OSo=l(),wv=a("p"),VSo=o("The model is set in evaluation mode by default using "),Ume=a("code"),XSo=o("model.eval()"),zSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),WSo=o("model.train()"),QSo=l(),F(Av.$$.fragment),Cqe=l(),Oi=a("h2"),yv=a("a"),Yme=a("span"),F(pL.$$.fragment),HSo=l(),Kme=a("span"),USo=o("AutoModelForMultipleChoice"),wqe=l(),Po=a("div"),F(_L.$$.fragment),JSo=l(),Vi=a("p"),YSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$G=a("a"),KSo=o("from_pretrained()"),ZSo=o(" class method or the "),kG=a("a"),eRo=o("from_config()"),oRo=o(` class
method.`),rRo=l(),bL=a("p"),tRo=o("This class cannot be instantiated directly using "),Zme=a("code"),aRo=o("__init__()"),nRo=o(" (throws an error)."),sRo=l(),dt=a("div"),F(vL.$$.fragment),lRo=l(),efe=a("p"),iRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dRo=l(),Xi=a("p"),cRo=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),mRo=o("not"),fRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),gRo=o("from_pretrained()"),hRo=o(" to load the model weights."),uRo=l(),F(Lv.$$.fragment),pRo=l(),ro=a("div"),F(FL.$$.fragment),_Ro=l(),rfe=a("p"),bRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vRo=l(),Pa=a("p"),FRo=o("The model class to instantiate is selected based on the "),tfe=a("code"),TRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),ERo=o("pretrained_model_name_or_path"),CRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),yRo=l(),Y=a("ul"),xv=a("li"),sfe=a("strong"),LRo=o("albert"),xRo=o(" \u2014 "),RG=a("a"),$Ro=o("AlbertForMultipleChoice"),kRo=o(" (ALBERT model)"),SRo=l(),$v=a("li"),lfe=a("strong"),RRo=o("bert"),PRo=o(" \u2014 "),PG=a("a"),BRo=o("BertForMultipleChoice"),IRo=o(" (BERT model)"),qRo=l(),kv=a("li"),ife=a("strong"),NRo=o("big_bird"),jRo=o(" \u2014 "),BG=a("a"),DRo=o("BigBirdForMultipleChoice"),GRo=o(" (BigBird model)"),ORo=l(),Sv=a("li"),dfe=a("strong"),VRo=o("camembert"),XRo=o(" \u2014 "),IG=a("a"),zRo=o("CamembertForMultipleChoice"),WRo=o(" (CamemBERT model)"),QRo=l(),Rv=a("li"),cfe=a("strong"),HRo=o("canine"),URo=o(" \u2014 "),qG=a("a"),JRo=o("CanineForMultipleChoice"),YRo=o(" (Canine model)"),KRo=l(),Pv=a("li"),mfe=a("strong"),ZRo=o("convbert"),ePo=o(" \u2014 "),NG=a("a"),oPo=o("ConvBertForMultipleChoice"),rPo=o(" (ConvBERT model)"),tPo=l(),Bv=a("li"),ffe=a("strong"),aPo=o("data2vec-text"),nPo=o(" \u2014 "),jG=a("a"),sPo=o("Data2VecTextForMultipleChoice"),lPo=o(" (Data2VecText model)"),iPo=l(),Iv=a("li"),gfe=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),DG=a("a"),mPo=o("DebertaV2ForMultipleChoice"),fPo=o(" (DeBERTa-v2 model)"),gPo=l(),qv=a("li"),hfe=a("strong"),hPo=o("distilbert"),uPo=o(" \u2014 "),GG=a("a"),pPo=o("DistilBertForMultipleChoice"),_Po=o(" (DistilBERT model)"),bPo=l(),Nv=a("li"),ufe=a("strong"),vPo=o("electra"),FPo=o(" \u2014 "),OG=a("a"),TPo=o("ElectraForMultipleChoice"),MPo=o(" (ELECTRA model)"),EPo=l(),jv=a("li"),pfe=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),VG=a("a"),APo=o("FlaubertForMultipleChoice"),yPo=o(" (FlauBERT model)"),LPo=l(),Dv=a("li"),_fe=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),XG=a("a"),kPo=o("FNetForMultipleChoice"),SPo=o(" (FNet model)"),RPo=l(),Gv=a("li"),bfe=a("strong"),PPo=o("funnel"),BPo=o(" \u2014 "),zG=a("a"),IPo=o("FunnelForMultipleChoice"),qPo=o(" (Funnel Transformer model)"),NPo=l(),Ov=a("li"),vfe=a("strong"),jPo=o("ibert"),DPo=o(" \u2014 "),WG=a("a"),GPo=o("IBertForMultipleChoice"),OPo=o(" (I-BERT model)"),VPo=l(),Vv=a("li"),Ffe=a("strong"),XPo=o("longformer"),zPo=o(" \u2014 "),QG=a("a"),WPo=o("LongformerForMultipleChoice"),QPo=o(" (Longformer model)"),HPo=l(),Xv=a("li"),Tfe=a("strong"),UPo=o("megatron-bert"),JPo=o(" \u2014 "),HG=a("a"),YPo=o("MegatronBertForMultipleChoice"),KPo=o(" (MegatronBert model)"),ZPo=l(),zv=a("li"),Mfe=a("strong"),eBo=o("mobilebert"),oBo=o(" \u2014 "),UG=a("a"),rBo=o("MobileBertForMultipleChoice"),tBo=o(" (MobileBERT model)"),aBo=l(),Wv=a("li"),Efe=a("strong"),nBo=o("mpnet"),sBo=o(" \u2014 "),JG=a("a"),lBo=o("MPNetForMultipleChoice"),iBo=o(" (MPNet model)"),dBo=l(),Qv=a("li"),Cfe=a("strong"),cBo=o("nystromformer"),mBo=o(" \u2014 "),YG=a("a"),fBo=o("NystromformerForMultipleChoice"),gBo=o(" (Nystromformer model)"),hBo=l(),Hv=a("li"),wfe=a("strong"),uBo=o("qdqbert"),pBo=o(" \u2014 "),KG=a("a"),_Bo=o("QDQBertForMultipleChoice"),bBo=o(" (QDQBert model)"),vBo=l(),Uv=a("li"),Afe=a("strong"),FBo=o("rembert"),TBo=o(" \u2014 "),ZG=a("a"),MBo=o("RemBertForMultipleChoice"),EBo=o(" (RemBERT model)"),CBo=l(),Jv=a("li"),yfe=a("strong"),wBo=o("roberta"),ABo=o(" \u2014 "),eO=a("a"),yBo=o("RobertaForMultipleChoice"),LBo=o(" (RoBERTa model)"),xBo=l(),Yv=a("li"),Lfe=a("strong"),$Bo=o("roformer"),kBo=o(" \u2014 "),oO=a("a"),SBo=o("RoFormerForMultipleChoice"),RBo=o(" (RoFormer model)"),PBo=l(),Kv=a("li"),xfe=a("strong"),BBo=o("squeezebert"),IBo=o(" \u2014 "),rO=a("a"),qBo=o("SqueezeBertForMultipleChoice"),NBo=o(" (SqueezeBERT model)"),jBo=l(),Zv=a("li"),$fe=a("strong"),DBo=o("xlm"),GBo=o(" \u2014 "),tO=a("a"),OBo=o("XLMForMultipleChoice"),VBo=o(" (XLM model)"),XBo=l(),eF=a("li"),kfe=a("strong"),zBo=o("xlm-roberta"),WBo=o(" \u2014 "),aO=a("a"),QBo=o("XLMRobertaForMultipleChoice"),HBo=o(" (XLM-RoBERTa model)"),UBo=l(),oF=a("li"),Sfe=a("strong"),JBo=o("xlm-roberta-xl"),YBo=o(" \u2014 "),nO=a("a"),KBo=o("XLMRobertaXLForMultipleChoice"),ZBo=o(" (XLM-RoBERTa-XL model)"),eIo=l(),rF=a("li"),Rfe=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),sO=a("a"),tIo=o("XLNetForMultipleChoice"),aIo=o(" (XLNet model)"),nIo=l(),tF=a("li"),Pfe=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),lO=a("a"),iIo=o("YosoForMultipleChoice"),dIo=o(" (YOSO model)"),cIo=l(),aF=a("p"),mIo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),fIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),hIo=o("model.train()"),uIo=l(),F(nF.$$.fragment),Aqe=l(),zi=a("h2"),sF=a("a"),qfe=a("span"),F(TL.$$.fragment),pIo=l(),Nfe=a("span"),_Io=o("AutoModelForNextSentencePrediction"),yqe=l(),Bo=a("div"),F(ML.$$.fragment),bIo=l(),Wi=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iO=a("a"),FIo=o("from_pretrained()"),TIo=o(" class method or the "),dO=a("a"),MIo=o("from_config()"),EIo=o(` class
method.`),CIo=l(),EL=a("p"),wIo=o("This class cannot be instantiated directly using "),jfe=a("code"),AIo=o("__init__()"),yIo=o(" (throws an error)."),LIo=l(),ct=a("div"),F(CL.$$.fragment),xIo=l(),Dfe=a("p"),$Io=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kIo=l(),Qi=a("p"),SIo=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),RIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),BIo=o("from_pretrained()"),IIo=o(" to load the model weights."),qIo=l(),F(lF.$$.fragment),NIo=l(),to=a("div"),F(wL.$$.fragment),jIo=l(),Ofe=a("p"),DIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GIo=l(),Ba=a("p"),OIo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),VIo=o("model_type"),XIo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),zIo=o("pretrained_model_name_or_path"),WIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),QIo=o("pretrained_model_name_or_path"),HIo=o(":"),UIo=l(),Yr=a("ul"),iF=a("li"),Wfe=a("strong"),JIo=o("bert"),YIo=o(" \u2014 "),mO=a("a"),KIo=o("BertForNextSentencePrediction"),ZIo=o(" (BERT model)"),eqo=l(),dF=a("li"),Qfe=a("strong"),oqo=o("fnet"),rqo=o(" \u2014 "),fO=a("a"),tqo=o("FNetForNextSentencePrediction"),aqo=o(" (FNet model)"),nqo=l(),cF=a("li"),Hfe=a("strong"),sqo=o("megatron-bert"),lqo=o(" \u2014 "),gO=a("a"),iqo=o("MegatronBertForNextSentencePrediction"),dqo=o(" (MegatronBert model)"),cqo=l(),mF=a("li"),Ufe=a("strong"),mqo=o("mobilebert"),fqo=o(" \u2014 "),hO=a("a"),gqo=o("MobileBertForNextSentencePrediction"),hqo=o(" (MobileBERT model)"),uqo=l(),fF=a("li"),Jfe=a("strong"),pqo=o("qdqbert"),_qo=o(" \u2014 "),uO=a("a"),bqo=o("QDQBertForNextSentencePrediction"),vqo=o(" (QDQBert model)"),Fqo=l(),gF=a("p"),Tqo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),Cqo=o("model.train()"),wqo=l(),F(hF.$$.fragment),Lqe=l(),Hi=a("h2"),uF=a("a"),Zfe=a("span"),F(AL.$$.fragment),Aqo=l(),ege=a("span"),yqo=o("AutoModelForTokenClassification"),xqe=l(),Io=a("div"),F(yL.$$.fragment),Lqo=l(),Ui=a("p"),xqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pO=a("a"),$qo=o("from_pretrained()"),kqo=o(" class method or the "),_O=a("a"),Sqo=o("from_config()"),Rqo=o(` class
method.`),Pqo=l(),LL=a("p"),Bqo=o("This class cannot be instantiated directly using "),oge=a("code"),Iqo=o("__init__()"),qqo=o(" (throws an error)."),Nqo=l(),mt=a("div"),F(xL.$$.fragment),jqo=l(),rge=a("p"),Dqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gqo=l(),Ji=a("p"),Oqo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Vqo=o("not"),Xqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),zqo=o("from_pretrained()"),Wqo=o(" to load the model weights."),Qqo=l(),F(pF.$$.fragment),Hqo=l(),ao=a("div"),F($L.$$.fragment),Uqo=l(),age=a("p"),Jqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yqo=l(),Ia=a("p"),Kqo=o("The model class to instantiate is selected based on the "),nge=a("code"),Zqo=o("model_type"),eNo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),oNo=o("pretrained_model_name_or_path"),rNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),tNo=o("pretrained_model_name_or_path"),aNo=o(":"),nNo=l(),U=a("ul"),_F=a("li"),ige=a("strong"),sNo=o("albert"),lNo=o(" \u2014 "),vO=a("a"),iNo=o("AlbertForTokenClassification"),dNo=o(" (ALBERT model)"),cNo=l(),bF=a("li"),dge=a("strong"),mNo=o("bert"),fNo=o(" \u2014 "),FO=a("a"),gNo=o("BertForTokenClassification"),hNo=o(" (BERT model)"),uNo=l(),vF=a("li"),cge=a("strong"),pNo=o("big_bird"),_No=o(" \u2014 "),TO=a("a"),bNo=o("BigBirdForTokenClassification"),vNo=o(" (BigBird model)"),FNo=l(),FF=a("li"),mge=a("strong"),TNo=o("camembert"),MNo=o(" \u2014 "),MO=a("a"),ENo=o("CamembertForTokenClassification"),CNo=o(" (CamemBERT model)"),wNo=l(),TF=a("li"),fge=a("strong"),ANo=o("canine"),yNo=o(" \u2014 "),EO=a("a"),LNo=o("CanineForTokenClassification"),xNo=o(" (Canine model)"),$No=l(),MF=a("li"),gge=a("strong"),kNo=o("convbert"),SNo=o(" \u2014 "),CO=a("a"),RNo=o("ConvBertForTokenClassification"),PNo=o(" (ConvBERT model)"),BNo=l(),EF=a("li"),hge=a("strong"),INo=o("data2vec-text"),qNo=o(" \u2014 "),wO=a("a"),NNo=o("Data2VecTextForTokenClassification"),jNo=o(" (Data2VecText model)"),DNo=l(),CF=a("li"),uge=a("strong"),GNo=o("deberta"),ONo=o(" \u2014 "),AO=a("a"),VNo=o("DebertaForTokenClassification"),XNo=o(" (DeBERTa model)"),zNo=l(),wF=a("li"),pge=a("strong"),WNo=o("deberta-v2"),QNo=o(" \u2014 "),yO=a("a"),HNo=o("DebertaV2ForTokenClassification"),UNo=o(" (DeBERTa-v2 model)"),JNo=l(),AF=a("li"),_ge=a("strong"),YNo=o("distilbert"),KNo=o(" \u2014 "),LO=a("a"),ZNo=o("DistilBertForTokenClassification"),ejo=o(" (DistilBERT model)"),ojo=l(),yF=a("li"),bge=a("strong"),rjo=o("electra"),tjo=o(" \u2014 "),xO=a("a"),ajo=o("ElectraForTokenClassification"),njo=o(" (ELECTRA model)"),sjo=l(),LF=a("li"),vge=a("strong"),ljo=o("flaubert"),ijo=o(" \u2014 "),$O=a("a"),djo=o("FlaubertForTokenClassification"),cjo=o(" (FlauBERT model)"),mjo=l(),xF=a("li"),Fge=a("strong"),fjo=o("fnet"),gjo=o(" \u2014 "),kO=a("a"),hjo=o("FNetForTokenClassification"),ujo=o(" (FNet model)"),pjo=l(),$F=a("li"),Tge=a("strong"),_jo=o("funnel"),bjo=o(" \u2014 "),SO=a("a"),vjo=o("FunnelForTokenClassification"),Fjo=o(" (Funnel Transformer model)"),Tjo=l(),kF=a("li"),Mge=a("strong"),Mjo=o("gpt2"),Ejo=o(" \u2014 "),RO=a("a"),Cjo=o("GPT2ForTokenClassification"),wjo=o(" (OpenAI GPT-2 model)"),Ajo=l(),SF=a("li"),Ege=a("strong"),yjo=o("ibert"),Ljo=o(" \u2014 "),PO=a("a"),xjo=o("IBertForTokenClassification"),$jo=o(" (I-BERT model)"),kjo=l(),RF=a("li"),Cge=a("strong"),Sjo=o("layoutlm"),Rjo=o(" \u2014 "),BO=a("a"),Pjo=o("LayoutLMForTokenClassification"),Bjo=o(" (LayoutLM model)"),Ijo=l(),PF=a("li"),wge=a("strong"),qjo=o("layoutlmv2"),Njo=o(" \u2014 "),IO=a("a"),jjo=o("LayoutLMv2ForTokenClassification"),Djo=o(" (LayoutLMv2 model)"),Gjo=l(),BF=a("li"),Age=a("strong"),Ojo=o("longformer"),Vjo=o(" \u2014 "),qO=a("a"),Xjo=o("LongformerForTokenClassification"),zjo=o(" (Longformer model)"),Wjo=l(),IF=a("li"),yge=a("strong"),Qjo=o("megatron-bert"),Hjo=o(" \u2014 "),NO=a("a"),Ujo=o("MegatronBertForTokenClassification"),Jjo=o(" (MegatronBert model)"),Yjo=l(),qF=a("li"),Lge=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),jO=a("a"),eDo=o("MobileBertForTokenClassification"),oDo=o(" (MobileBERT model)"),rDo=l(),NF=a("li"),xge=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),DO=a("a"),nDo=o("MPNetForTokenClassification"),sDo=o(" (MPNet model)"),lDo=l(),jF=a("li"),$ge=a("strong"),iDo=o("nystromformer"),dDo=o(" \u2014 "),GO=a("a"),cDo=o("NystromformerForTokenClassification"),mDo=o(" (Nystromformer model)"),fDo=l(),DF=a("li"),kge=a("strong"),gDo=o("qdqbert"),hDo=o(" \u2014 "),OO=a("a"),uDo=o("QDQBertForTokenClassification"),pDo=o(" (QDQBert model)"),_Do=l(),GF=a("li"),Sge=a("strong"),bDo=o("rembert"),vDo=o(" \u2014 "),VO=a("a"),FDo=o("RemBertForTokenClassification"),TDo=o(" (RemBERT model)"),MDo=l(),OF=a("li"),Rge=a("strong"),EDo=o("roberta"),CDo=o(" \u2014 "),XO=a("a"),wDo=o("RobertaForTokenClassification"),ADo=o(" (RoBERTa model)"),yDo=l(),VF=a("li"),Pge=a("strong"),LDo=o("roformer"),xDo=o(" \u2014 "),zO=a("a"),$Do=o("RoFormerForTokenClassification"),kDo=o(" (RoFormer model)"),SDo=l(),XF=a("li"),Bge=a("strong"),RDo=o("squeezebert"),PDo=o(" \u2014 "),WO=a("a"),BDo=o("SqueezeBertForTokenClassification"),IDo=o(" (SqueezeBERT model)"),qDo=l(),zF=a("li"),Ige=a("strong"),NDo=o("xlm"),jDo=o(" \u2014 "),QO=a("a"),DDo=o("XLMForTokenClassification"),GDo=o(" (XLM model)"),ODo=l(),WF=a("li"),qge=a("strong"),VDo=o("xlm-roberta"),XDo=o(" \u2014 "),HO=a("a"),zDo=o("XLMRobertaForTokenClassification"),WDo=o(" (XLM-RoBERTa model)"),QDo=l(),QF=a("li"),Nge=a("strong"),HDo=o("xlm-roberta-xl"),UDo=o(" \u2014 "),UO=a("a"),JDo=o("XLMRobertaXLForTokenClassification"),YDo=o(" (XLM-RoBERTa-XL model)"),KDo=l(),HF=a("li"),jge=a("strong"),ZDo=o("xlnet"),eGo=o(" \u2014 "),JO=a("a"),oGo=o("XLNetForTokenClassification"),rGo=o(" (XLNet model)"),tGo=l(),UF=a("li"),Dge=a("strong"),aGo=o("yoso"),nGo=o(" \u2014 "),YO=a("a"),sGo=o("YosoForTokenClassification"),lGo=o(" (YOSO model)"),iGo=l(),JF=a("p"),dGo=o("The model is set in evaluation mode by default using "),Gge=a("code"),cGo=o("model.eval()"),mGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),fGo=o("model.train()"),gGo=l(),F(YF.$$.fragment),$qe=l(),Yi=a("h2"),KF=a("a"),Vge=a("span"),F(kL.$$.fragment),hGo=l(),Xge=a("span"),uGo=o("AutoModelForQuestionAnswering"),kqe=l(),qo=a("div"),F(SL.$$.fragment),pGo=l(),Ki=a("p"),_Go=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KO=a("a"),bGo=o("from_pretrained()"),vGo=o(" class method or the "),ZO=a("a"),FGo=o("from_config()"),TGo=o(` class
method.`),MGo=l(),RL=a("p"),EGo=o("This class cannot be instantiated directly using "),zge=a("code"),CGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),ft=a("div"),F(PL.$$.fragment),yGo=l(),Wge=a("p"),LGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xGo=l(),Zi=a("p"),$Go=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),kGo=o("not"),SGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),RGo=o("from_pretrained()"),PGo=o(" to load the model weights."),BGo=l(),F(ZF.$$.fragment),IGo=l(),no=a("div"),F(BL.$$.fragment),qGo=l(),Hge=a("p"),NGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jGo=l(),qa=a("p"),DGo=o("The model class to instantiate is selected based on the "),Uge=a("code"),GGo=o("model_type"),OGo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),VGo=o("pretrained_model_name_or_path"),XGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),zGo=o("pretrained_model_name_or_path"),WGo=o(":"),QGo=l(),V=a("ul"),e1=a("li"),Kge=a("strong"),HGo=o("albert"),UGo=o(" \u2014 "),oV=a("a"),JGo=o("AlbertForQuestionAnswering"),YGo=o(" (ALBERT model)"),KGo=l(),o1=a("li"),Zge=a("strong"),ZGo=o("bart"),eOo=o(" \u2014 "),rV=a("a"),oOo=o("BartForQuestionAnswering"),rOo=o(" (BART model)"),tOo=l(),r1=a("li"),ehe=a("strong"),aOo=o("bert"),nOo=o(" \u2014 "),tV=a("a"),sOo=o("BertForQuestionAnswering"),lOo=o(" (BERT model)"),iOo=l(),t1=a("li"),ohe=a("strong"),dOo=o("big_bird"),cOo=o(" \u2014 "),aV=a("a"),mOo=o("BigBirdForQuestionAnswering"),fOo=o(" (BigBird model)"),gOo=l(),a1=a("li"),rhe=a("strong"),hOo=o("bigbird_pegasus"),uOo=o(" \u2014 "),nV=a("a"),pOo=o("BigBirdPegasusForQuestionAnswering"),_Oo=o(" (BigBirdPegasus model)"),bOo=l(),n1=a("li"),the=a("strong"),vOo=o("camembert"),FOo=o(" \u2014 "),sV=a("a"),TOo=o("CamembertForQuestionAnswering"),MOo=o(" (CamemBERT model)"),EOo=l(),s1=a("li"),ahe=a("strong"),COo=o("canine"),wOo=o(" \u2014 "),lV=a("a"),AOo=o("CanineForQuestionAnswering"),yOo=o(" (Canine model)"),LOo=l(),l1=a("li"),nhe=a("strong"),xOo=o("convbert"),$Oo=o(" \u2014 "),iV=a("a"),kOo=o("ConvBertForQuestionAnswering"),SOo=o(" (ConvBERT model)"),ROo=l(),i1=a("li"),she=a("strong"),POo=o("data2vec-text"),BOo=o(" \u2014 "),dV=a("a"),IOo=o("Data2VecTextForQuestionAnswering"),qOo=o(" (Data2VecText model)"),NOo=l(),d1=a("li"),lhe=a("strong"),jOo=o("deberta"),DOo=o(" \u2014 "),cV=a("a"),GOo=o("DebertaForQuestionAnswering"),OOo=o(" (DeBERTa model)"),VOo=l(),c1=a("li"),ihe=a("strong"),XOo=o("deberta-v2"),zOo=o(" \u2014 "),mV=a("a"),WOo=o("DebertaV2ForQuestionAnswering"),QOo=o(" (DeBERTa-v2 model)"),HOo=l(),m1=a("li"),dhe=a("strong"),UOo=o("distilbert"),JOo=o(" \u2014 "),fV=a("a"),YOo=o("DistilBertForQuestionAnswering"),KOo=o(" (DistilBERT model)"),ZOo=l(),f1=a("li"),che=a("strong"),eVo=o("electra"),oVo=o(" \u2014 "),gV=a("a"),rVo=o("ElectraForQuestionAnswering"),tVo=o(" (ELECTRA model)"),aVo=l(),g1=a("li"),mhe=a("strong"),nVo=o("flaubert"),sVo=o(" \u2014 "),hV=a("a"),lVo=o("FlaubertForQuestionAnsweringSimple"),iVo=o(" (FlauBERT model)"),dVo=l(),h1=a("li"),fhe=a("strong"),cVo=o("fnet"),mVo=o(" \u2014 "),uV=a("a"),fVo=o("FNetForQuestionAnswering"),gVo=o(" (FNet model)"),hVo=l(),u1=a("li"),ghe=a("strong"),uVo=o("funnel"),pVo=o(" \u2014 "),pV=a("a"),_Vo=o("FunnelForQuestionAnswering"),bVo=o(" (Funnel Transformer model)"),vVo=l(),p1=a("li"),hhe=a("strong"),FVo=o("gptj"),TVo=o(" \u2014 "),_V=a("a"),MVo=o("GPTJForQuestionAnswering"),EVo=o(" (GPT-J model)"),CVo=l(),_1=a("li"),uhe=a("strong"),wVo=o("ibert"),AVo=o(" \u2014 "),bV=a("a"),yVo=o("IBertForQuestionAnswering"),LVo=o(" (I-BERT model)"),xVo=l(),b1=a("li"),phe=a("strong"),$Vo=o("layoutlmv2"),kVo=o(" \u2014 "),vV=a("a"),SVo=o("LayoutLMv2ForQuestionAnswering"),RVo=o(" (LayoutLMv2 model)"),PVo=l(),v1=a("li"),_he=a("strong"),BVo=o("led"),IVo=o(" \u2014 "),FV=a("a"),qVo=o("LEDForQuestionAnswering"),NVo=o(" (LED model)"),jVo=l(),F1=a("li"),bhe=a("strong"),DVo=o("longformer"),GVo=o(" \u2014 "),TV=a("a"),OVo=o("LongformerForQuestionAnswering"),VVo=o(" (Longformer model)"),XVo=l(),T1=a("li"),vhe=a("strong"),zVo=o("lxmert"),WVo=o(" \u2014 "),MV=a("a"),QVo=o("LxmertForQuestionAnswering"),HVo=o(" (LXMERT model)"),UVo=l(),M1=a("li"),Fhe=a("strong"),JVo=o("mbart"),YVo=o(" \u2014 "),EV=a("a"),KVo=o("MBartForQuestionAnswering"),ZVo=o(" (mBART model)"),eXo=l(),E1=a("li"),The=a("strong"),oXo=o("megatron-bert"),rXo=o(" \u2014 "),CV=a("a"),tXo=o("MegatronBertForQuestionAnswering"),aXo=o(" (MegatronBert model)"),nXo=l(),C1=a("li"),Mhe=a("strong"),sXo=o("mobilebert"),lXo=o(" \u2014 "),wV=a("a"),iXo=o("MobileBertForQuestionAnswering"),dXo=o(" (MobileBERT model)"),cXo=l(),w1=a("li"),Ehe=a("strong"),mXo=o("mpnet"),fXo=o(" \u2014 "),AV=a("a"),gXo=o("MPNetForQuestionAnswering"),hXo=o(" (MPNet model)"),uXo=l(),A1=a("li"),Che=a("strong"),pXo=o("nystromformer"),_Xo=o(" \u2014 "),yV=a("a"),bXo=o("NystromformerForQuestionAnswering"),vXo=o(" (Nystromformer model)"),FXo=l(),y1=a("li"),whe=a("strong"),TXo=o("qdqbert"),MXo=o(" \u2014 "),LV=a("a"),EXo=o("QDQBertForQuestionAnswering"),CXo=o(" (QDQBert model)"),wXo=l(),L1=a("li"),Ahe=a("strong"),AXo=o("reformer"),yXo=o(" \u2014 "),xV=a("a"),LXo=o("ReformerForQuestionAnswering"),xXo=o(" (Reformer model)"),$Xo=l(),x1=a("li"),yhe=a("strong"),kXo=o("rembert"),SXo=o(" \u2014 "),$V=a("a"),RXo=o("RemBertForQuestionAnswering"),PXo=o(" (RemBERT model)"),BXo=l(),$1=a("li"),Lhe=a("strong"),IXo=o("roberta"),qXo=o(" \u2014 "),kV=a("a"),NXo=o("RobertaForQuestionAnswering"),jXo=o(" (RoBERTa model)"),DXo=l(),k1=a("li"),xhe=a("strong"),GXo=o("roformer"),OXo=o(" \u2014 "),SV=a("a"),VXo=o("RoFormerForQuestionAnswering"),XXo=o(" (RoFormer model)"),zXo=l(),S1=a("li"),$he=a("strong"),WXo=o("splinter"),QXo=o(" \u2014 "),RV=a("a"),HXo=o("SplinterForQuestionAnswering"),UXo=o(" (Splinter model)"),JXo=l(),R1=a("li"),khe=a("strong"),YXo=o("squeezebert"),KXo=o(" \u2014 "),PV=a("a"),ZXo=o("SqueezeBertForQuestionAnswering"),ezo=o(" (SqueezeBERT model)"),ozo=l(),P1=a("li"),She=a("strong"),rzo=o("xlm"),tzo=o(" \u2014 "),BV=a("a"),azo=o("XLMForQuestionAnsweringSimple"),nzo=o(" (XLM model)"),szo=l(),B1=a("li"),Rhe=a("strong"),lzo=o("xlm-roberta"),izo=o(" \u2014 "),IV=a("a"),dzo=o("XLMRobertaForQuestionAnswering"),czo=o(" (XLM-RoBERTa model)"),mzo=l(),I1=a("li"),Phe=a("strong"),fzo=o("xlm-roberta-xl"),gzo=o(" \u2014 "),qV=a("a"),hzo=o("XLMRobertaXLForQuestionAnswering"),uzo=o(" (XLM-RoBERTa-XL model)"),pzo=l(),q1=a("li"),Bhe=a("strong"),_zo=o("xlnet"),bzo=o(" \u2014 "),NV=a("a"),vzo=o("XLNetForQuestionAnsweringSimple"),Fzo=o(" (XLNet model)"),Tzo=l(),N1=a("li"),Ihe=a("strong"),Mzo=o("yoso"),Ezo=o(" \u2014 "),jV=a("a"),Czo=o("YosoForQuestionAnswering"),wzo=o(" (YOSO model)"),Azo=l(),j1=a("p"),yzo=o("The model is set in evaluation mode by default using "),qhe=a("code"),Lzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),$zo=o("model.train()"),kzo=l(),F(D1.$$.fragment),Sqe=l(),ed=a("h2"),G1=a("a"),jhe=a("span"),F(IL.$$.fragment),Szo=l(),Dhe=a("span"),Rzo=o("AutoModelForTableQuestionAnswering"),Rqe=l(),No=a("div"),F(qL.$$.fragment),Pzo=l(),od=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DV=a("a"),Izo=o("from_pretrained()"),qzo=o(" class method or the "),GV=a("a"),Nzo=o("from_config()"),jzo=o(` class
method.`),Dzo=l(),NL=a("p"),Gzo=o("This class cannot be instantiated directly using "),Ghe=a("code"),Ozo=o("__init__()"),Vzo=o(" (throws an error)."),Xzo=l(),gt=a("div"),F(jL.$$.fragment),zzo=l(),Ohe=a("p"),Wzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qzo=l(),rd=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" to load the model weights."),Zzo=l(),F(O1.$$.fragment),eWo=l(),so=a("div"),F(DL.$$.fragment),oWo=l(),Xhe=a("p"),rWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tWo=l(),Na=a("p"),aWo=o("The model class to instantiate is selected based on the "),zhe=a("code"),nWo=o("model_type"),sWo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),lWo=o("pretrained_model_name_or_path"),iWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(":"),mWo=l(),Hhe=a("ul"),V1=a("li"),Uhe=a("strong"),fWo=o("tapas"),gWo=o(" \u2014 "),VV=a("a"),hWo=o("TapasForQuestionAnswering"),uWo=o(" (TAPAS model)"),pWo=l(),X1=a("p"),_Wo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),bWo=o("model.eval()"),vWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),FWo=o("model.train()"),TWo=l(),F(z1.$$.fragment),Pqe=l(),td=a("h2"),W1=a("a"),Khe=a("span"),F(GL.$$.fragment),MWo=l(),Zhe=a("span"),EWo=o("AutoModelForImageClassification"),Bqe=l(),jo=a("div"),F(OL.$$.fragment),CWo=l(),ad=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XV=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),zV=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),$Wo=l(),VL=a("p"),kWo=o("This class cannot be instantiated directly using "),eue=a("code"),SWo=o("__init__()"),RWo=o(" (throws an error)."),PWo=l(),ht=a("div"),F(XL.$$.fragment),BWo=l(),oue=a("p"),IWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qWo=l(),nd=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),F(Q1.$$.fragment),XWo=l(),lo=a("div"),F(zL.$$.fragment),zWo=l(),tue=a("p"),WWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QWo=l(),ja=a("p"),HWo=o("The model class to instantiate is selected based on the "),aue=a("code"),UWo=o("model_type"),JWo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),ZWo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),Fe=a("ul"),H1=a("li"),lue=a("strong"),rQo=o("beit"),tQo=o(" \u2014 "),QV=a("a"),aQo=o("BeitForImageClassification"),nQo=o(" (BEiT model)"),sQo=l(),U1=a("li"),iue=a("strong"),lQo=o("convnext"),iQo=o(" \u2014 "),HV=a("a"),dQo=o("ConvNextForImageClassification"),cQo=o(" (ConvNext model)"),mQo=l(),J1=a("li"),due=a("strong"),fQo=o("cvt"),gQo=o(" \u2014 "),UV=a("a"),hQo=o("CvtForImageClassification"),uQo=o(" (CvT model)"),pQo=l(),Y1=a("li"),cue=a("strong"),_Qo=o("data2vec-vision"),bQo=o(" \u2014 "),JV=a("a"),vQo=o("Data2VecVisionForImageClassification"),FQo=o(" (Data2VecVision model)"),TQo=l(),Ps=a("li"),mue=a("strong"),MQo=o("deit"),EQo=o(" \u2014 "),YV=a("a"),CQo=o("DeiTForImageClassification"),wQo=o(" or "),KV=a("a"),AQo=o("DeiTForImageClassificationWithTeacher"),yQo=o(" (DeiT model)"),LQo=l(),K1=a("li"),fue=a("strong"),xQo=o("imagegpt"),$Qo=o(" \u2014 "),ZV=a("a"),kQo=o("ImageGPTForImageClassification"),SQo=o(" (ImageGPT model)"),RQo=l(),ut=a("li"),gue=a("strong"),PQo=o("perceiver"),BQo=o(" \u2014 "),eX=a("a"),IQo=o("PerceiverForImageClassificationLearned"),qQo=o(" or "),oX=a("a"),NQo=o("PerceiverForImageClassificationFourier"),jQo=o(" or "),rX=a("a"),DQo=o("PerceiverForImageClassificationConvProcessing"),GQo=o(" (Perceiver model)"),OQo=l(),Z1=a("li"),hue=a("strong"),VQo=o("poolformer"),XQo=o(" \u2014 "),tX=a("a"),zQo=o("PoolFormerForImageClassification"),WQo=o(" (PoolFormer model)"),QQo=l(),eT=a("li"),uue=a("strong"),HQo=o("regnet"),UQo=o(" \u2014 "),aX=a("a"),JQo=o("RegNetForImageClassification"),YQo=o(" (RegNet model)"),KQo=l(),oT=a("li"),pue=a("strong"),ZQo=o("resnet"),eHo=o(" \u2014 "),nX=a("a"),oHo=o("ResNetForImageClassification"),rHo=o(" (ResNet model)"),tHo=l(),rT=a("li"),_ue=a("strong"),aHo=o("segformer"),nHo=o(" \u2014 "),sX=a("a"),sHo=o("SegformerForImageClassification"),lHo=o(" (SegFormer model)"),iHo=l(),tT=a("li"),bue=a("strong"),dHo=o("swin"),cHo=o(" \u2014 "),lX=a("a"),mHo=o("SwinForImageClassification"),fHo=o(" (Swin model)"),gHo=l(),aT=a("li"),vue=a("strong"),hHo=o("van"),uHo=o(" \u2014 "),iX=a("a"),pHo=o("VanForImageClassification"),_Ho=o(" (VAN model)"),bHo=l(),nT=a("li"),Fue=a("strong"),vHo=o("vit"),FHo=o(" \u2014 "),dX=a("a"),THo=o("ViTForImageClassification"),MHo=o(" (ViT model)"),EHo=l(),sT=a("p"),CHo=o("The model is set in evaluation mode by default using "),Tue=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),yHo=o("model.train()"),LHo=l(),F(lT.$$.fragment),Iqe=l(),sd=a("h2"),iT=a("a"),Eue=a("span"),F(WL.$$.fragment),xHo=l(),Cue=a("span"),$Ho=o("AutoModelForVision2Seq"),qqe=l(),Do=a("div"),F(QL.$$.fragment),kHo=l(),ld=a("p"),SHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cX=a("a"),RHo=o("from_pretrained()"),PHo=o(" class method or the "),mX=a("a"),BHo=o("from_config()"),IHo=o(` class
method.`),qHo=l(),HL=a("p"),NHo=o("This class cannot be instantiated directly using "),wue=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),pt=a("div"),F(UL.$$.fragment),OHo=l(),Aue=a("p"),VHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XHo=l(),id=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),WHo=o("not"),QHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),F(dT.$$.fragment),YHo=l(),io=a("div"),F(JL.$$.fragment),KHo=l(),Lue=a("p"),ZHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eUo=l(),Da=a("p"),oUo=o("The model class to instantiate is selected based on the "),xue=a("code"),rUo=o("model_type"),tUo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(":"),iUo=l(),Sue=a("ul"),cT=a("li"),Rue=a("strong"),dUo=o("vision-encoder-decoder"),cUo=o(" \u2014 "),gX=a("a"),mUo=o("VisionEncoderDecoderModel"),fUo=o(" (Vision Encoder decoder model)"),gUo=l(),mT=a("p"),hUo=o("The model is set in evaluation mode by default using "),Pue=a("code"),uUo=o("model.eval()"),pUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),_Uo=o("model.train()"),bUo=l(),F(fT.$$.fragment),Nqe=l(),dd=a("h2"),gT=a("a"),Iue=a("span"),F(YL.$$.fragment),vUo=l(),que=a("span"),FUo=o("AutoModelForAudioClassification"),jqe=l(),Go=a("div"),F(KL.$$.fragment),TUo=l(),cd=a("p"),MUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hX=a("a"),EUo=o("from_pretrained()"),CUo=o(" class method or the "),uX=a("a"),wUo=o("from_config()"),AUo=o(` class
method.`),yUo=l(),ZL=a("p"),LUo=o("This class cannot be instantiated directly using "),Nue=a("code"),xUo=o("__init__()"),$Uo=o(" (throws an error)."),kUo=l(),_t=a("div"),F(e8.$$.fragment),SUo=l(),jue=a("p"),RUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PUo=l(),md=a("p"),BUo=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),IUo=o("not"),qUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),NUo=o("from_pretrained()"),jUo=o(" to load the model weights."),DUo=l(),F(hT.$$.fragment),GUo=l(),co=a("div"),F(o8.$$.fragment),OUo=l(),Gue=a("p"),VUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XUo=l(),Ga=a("p"),zUo=o("The model class to instantiate is selected based on the "),Oue=a("code"),WUo=o("model_type"),QUo=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),JUo=o("pretrained_model_name_or_path"),YUo=o(":"),KUo=l(),ke=a("ul"),uT=a("li"),zue=a("strong"),ZUo=o("data2vec-audio"),eJo=o(" \u2014 "),_X=a("a"),oJo=o("Data2VecAudioForSequenceClassification"),rJo=o(" (Data2VecAudio model)"),tJo=l(),pT=a("li"),Wue=a("strong"),aJo=o("hubert"),nJo=o(" \u2014 "),bX=a("a"),sJo=o("HubertForSequenceClassification"),lJo=o(" (Hubert model)"),iJo=l(),_T=a("li"),Que=a("strong"),dJo=o("sew"),cJo=o(" \u2014 "),vX=a("a"),mJo=o("SEWForSequenceClassification"),fJo=o(" (SEW model)"),gJo=l(),bT=a("li"),Hue=a("strong"),hJo=o("sew-d"),uJo=o(" \u2014 "),FX=a("a"),pJo=o("SEWDForSequenceClassification"),_Jo=o(" (SEW-D model)"),bJo=l(),vT=a("li"),Uue=a("strong"),vJo=o("unispeech"),FJo=o(" \u2014 "),TX=a("a"),TJo=o("UniSpeechForSequenceClassification"),MJo=o(" (UniSpeech model)"),EJo=l(),FT=a("li"),Jue=a("strong"),CJo=o("unispeech-sat"),wJo=o(" \u2014 "),MX=a("a"),AJo=o("UniSpeechSatForSequenceClassification"),yJo=o(" (UniSpeechSat model)"),LJo=l(),TT=a("li"),Yue=a("strong"),xJo=o("wav2vec2"),$Jo=o(" \u2014 "),EX=a("a"),kJo=o("Wav2Vec2ForSequenceClassification"),SJo=o(" (Wav2Vec2 model)"),RJo=l(),MT=a("li"),Kue=a("strong"),PJo=o("wav2vec2-conformer"),BJo=o(" \u2014 "),CX=a("a"),IJo=o("Wav2Vec2ConformerForSequenceClassification"),qJo=o(" (Wav2Vec2-Conformer model)"),NJo=l(),ET=a("li"),Zue=a("strong"),jJo=o("wavlm"),DJo=o(" \u2014 "),wX=a("a"),GJo=o("WavLMForSequenceClassification"),OJo=o(" (WavLM model)"),VJo=l(),CT=a("p"),XJo=o("The model is set in evaluation mode by default using "),epe=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),QJo=o("model.train()"),HJo=l(),F(wT.$$.fragment),Dqe=l(),fd=a("h2"),AT=a("a"),rpe=a("span"),F(r8.$$.fragment),UJo=l(),tpe=a("span"),JJo=o("AutoModelForAudioFrameClassification"),Gqe=l(),Oo=a("div"),F(t8.$$.fragment),YJo=l(),gd=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),yX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),a8=a("p"),aYo=o("This class cannot be instantiated directly using "),ape=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),bt=a("div"),F(n8.$$.fragment),iYo=l(),npe=a("p"),dYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cYo=l(),hd=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),fYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),hYo=o("from_pretrained()"),uYo=o(" to load the model weights."),pYo=l(),F(yT.$$.fragment),_Yo=l(),mo=a("div"),F(s8.$$.fragment),bYo=l(),lpe=a("p"),vYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),FYo=l(),Oa=a("p"),TYo=o("The model class to instantiate is selected based on the "),ipe=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),Kr=a("ul"),LT=a("li"),mpe=a("strong"),xYo=o("data2vec-audio"),$Yo=o(" \u2014 "),xX=a("a"),kYo=o("Data2VecAudioForAudioFrameClassification"),SYo=o(" (Data2VecAudio model)"),RYo=l(),xT=a("li"),fpe=a("strong"),PYo=o("unispeech-sat"),BYo=o(" \u2014 "),$X=a("a"),IYo=o("UniSpeechSatForAudioFrameClassification"),qYo=o(" (UniSpeechSat model)"),NYo=l(),$T=a("li"),gpe=a("strong"),jYo=o("wav2vec2"),DYo=o(" \u2014 "),kX=a("a"),GYo=o("Wav2Vec2ForAudioFrameClassification"),OYo=o(" (Wav2Vec2 model)"),VYo=l(),kT=a("li"),hpe=a("strong"),XYo=o("wav2vec2-conformer"),zYo=o(" \u2014 "),SX=a("a"),WYo=o("Wav2Vec2ConformerForAudioFrameClassification"),QYo=o(" (Wav2Vec2-Conformer model)"),HYo=l(),ST=a("li"),upe=a("strong"),UYo=o("wavlm"),JYo=o(" \u2014 "),RX=a("a"),YYo=o("WavLMForAudioFrameClassification"),KYo=o(" (WavLM model)"),ZYo=l(),RT=a("p"),eKo=o("The model is set in evaluation mode by default using "),ppe=a("code"),oKo=o("model.eval()"),rKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),tKo=o("model.train()"),aKo=l(),F(PT.$$.fragment),Oqe=l(),ud=a("h2"),BT=a("a"),bpe=a("span"),F(l8.$$.fragment),nKo=l(),vpe=a("span"),sKo=o("AutoModelForCTC"),Vqe=l(),Vo=a("div"),F(i8.$$.fragment),lKo=l(),pd=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PX=a("a"),dKo=o("from_pretrained()"),cKo=o(" class method or the "),BX=a("a"),mKo=o("from_config()"),fKo=o(` class
method.`),gKo=l(),d8=a("p"),hKo=o("This class cannot be instantiated directly using "),Fpe=a("code"),uKo=o("__init__()"),pKo=o(" (throws an error)."),_Ko=l(),vt=a("div"),F(c8.$$.fragment),bKo=l(),Tpe=a("p"),vKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FKo=l(),_d=a("p"),TKo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),MKo=o("not"),EKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),CKo=o("from_pretrained()"),wKo=o(" to load the model weights."),AKo=l(),F(IT.$$.fragment),yKo=l(),fo=a("div"),F(m8.$$.fragment),LKo=l(),Epe=a("p"),xKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Ko=l(),Va=a("p"),kKo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),SKo=o("model_type"),RKo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),PKo=o("pretrained_model_name_or_path"),BKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),Se=a("ul"),qT=a("li"),ype=a("strong"),jKo=o("data2vec-audio"),DKo=o(" \u2014 "),qX=a("a"),GKo=o("Data2VecAudioForCTC"),OKo=o(" (Data2VecAudio model)"),VKo=l(),NT=a("li"),Lpe=a("strong"),XKo=o("hubert"),zKo=o(" \u2014 "),NX=a("a"),WKo=o("HubertForCTC"),QKo=o(" (Hubert model)"),HKo=l(),jT=a("li"),xpe=a("strong"),UKo=o("sew"),JKo=o(" \u2014 "),jX=a("a"),YKo=o("SEWForCTC"),KKo=o(" (SEW model)"),ZKo=l(),DT=a("li"),$pe=a("strong"),eZo=o("sew-d"),oZo=o(" \u2014 "),DX=a("a"),rZo=o("SEWDForCTC"),tZo=o(" (SEW-D model)"),aZo=l(),GT=a("li"),kpe=a("strong"),nZo=o("unispeech"),sZo=o(" \u2014 "),GX=a("a"),lZo=o("UniSpeechForCTC"),iZo=o(" (UniSpeech model)"),dZo=l(),OT=a("li"),Spe=a("strong"),cZo=o("unispeech-sat"),mZo=o(" \u2014 "),OX=a("a"),fZo=o("UniSpeechSatForCTC"),gZo=o(" (UniSpeechSat model)"),hZo=l(),VT=a("li"),Rpe=a("strong"),uZo=o("wav2vec2"),pZo=o(" \u2014 "),VX=a("a"),_Zo=o("Wav2Vec2ForCTC"),bZo=o(" (Wav2Vec2 model)"),vZo=l(),XT=a("li"),Ppe=a("strong"),FZo=o("wav2vec2-conformer"),TZo=o(" \u2014 "),XX=a("a"),MZo=o("Wav2Vec2ConformerForCTC"),EZo=o(" (Wav2Vec2-Conformer model)"),CZo=l(),zT=a("li"),Bpe=a("strong"),wZo=o("wavlm"),AZo=o(" \u2014 "),zX=a("a"),yZo=o("WavLMForCTC"),LZo=o(" (WavLM model)"),xZo=l(),WT=a("p"),$Zo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),RZo=o("model.train()"),PZo=l(),F(QT.$$.fragment),Xqe=l(),bd=a("h2"),HT=a("a"),Npe=a("span"),F(f8.$$.fragment),BZo=l(),jpe=a("span"),IZo=o("AutoModelForSpeechSeq2Seq"),zqe=l(),Xo=a("div"),F(g8.$$.fragment),qZo=l(),vd=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WX=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),QX=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),h8=a("p"),XZo=o("This class cannot be instantiated directly using "),Dpe=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),Ft=a("div"),F(u8.$$.fragment),HZo=l(),Gpe=a("p"),UZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JZo=l(),Fd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(UT.$$.fragment),ter=l(),go=a("div"),F(p8.$$.fragment),aer=l(),Vpe=a("p"),ner=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ser=l(),Xa=a("p"),ler=o("The model class to instantiate is selected based on the "),Xpe=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),cer=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),fer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),_8=a("ul"),JT=a("li"),Qpe=a("strong"),uer=o("speech-encoder-decoder"),per=o(" \u2014 "),UX=a("a"),_er=o("SpeechEncoderDecoderModel"),ber=o(" (Speech Encoder decoder model)"),ver=l(),YT=a("li"),Hpe=a("strong"),Fer=o("speech_to_text"),Ter=o(" \u2014 "),JX=a("a"),Mer=o("Speech2TextForConditionalGeneration"),Eer=o(" (Speech2Text model)"),Cer=l(),KT=a("p"),wer=o("The model is set in evaluation mode by default using "),Upe=a("code"),Aer=o("model.eval()"),yer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),Ler=o("model.train()"),xer=l(),F(ZT.$$.fragment),Wqe=l(),Td=a("h2"),eM=a("a"),Ype=a("span"),F(b8.$$.fragment),$er=l(),Kpe=a("span"),ker=o("AutoModelForAudioXVector"),Qqe=l(),zo=a("div"),F(v8.$$.fragment),Ser=l(),Md=a("p"),Rer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YX=a("a"),Per=o("from_pretrained()"),Ber=o(" class method or the "),KX=a("a"),Ier=o("from_config()"),qer=o(` class
method.`),Ner=l(),F8=a("p"),jer=o("This class cannot be instantiated directly using "),Zpe=a("code"),Der=o("__init__()"),Ger=o(" (throws an error)."),Oer=l(),Tt=a("div"),F(T8.$$.fragment),Ver=l(),e_e=a("p"),Xer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zer=l(),Ed=a("p"),Wer=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),Qer=o("not"),Her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Uer=o("from_pretrained()"),Jer=o(" to load the model weights."),Yer=l(),F(oM.$$.fragment),Ker=l(),ho=a("div"),F(M8.$$.fragment),Zer=l(),r_e=a("p"),eor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oor=l(),za=a("p"),ror=o("The model class to instantiate is selected based on the "),t_e=a("code"),tor=o("model_type"),aor=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),nor=o("pretrained_model_name_or_path"),sor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(":"),dor=l(),Zr=a("ul"),rM=a("li"),s_e=a("strong"),cor=o("data2vec-audio"),mor=o(" \u2014 "),ez=a("a"),gor=o("Data2VecAudioForXVector"),hor=o(" (Data2VecAudio model)"),uor=l(),tM=a("li"),l_e=a("strong"),por=o("unispeech-sat"),_or=o(" \u2014 "),oz=a("a"),bor=o("UniSpeechSatForXVector"),vor=o(" (UniSpeechSat model)"),For=l(),aM=a("li"),i_e=a("strong"),Tor=o("wav2vec2"),Mor=o(" \u2014 "),rz=a("a"),Eor=o("Wav2Vec2ForXVector"),Cor=o(" (Wav2Vec2 model)"),wor=l(),nM=a("li"),d_e=a("strong"),Aor=o("wav2vec2-conformer"),yor=o(" \u2014 "),tz=a("a"),Lor=o("Wav2Vec2ConformerForXVector"),xor=o(" (Wav2Vec2-Conformer model)"),$or=l(),sM=a("li"),c_e=a("strong"),kor=o("wavlm"),Sor=o(" \u2014 "),az=a("a"),Ror=o("WavLMForXVector"),Por=o(" (WavLM model)"),Bor=l(),lM=a("p"),Ior=o("The model is set in evaluation mode by default using "),m_e=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),jor=o("model.train()"),Dor=l(),F(iM.$$.fragment),Hqe=l(),Cd=a("h2"),dM=a("a"),g_e=a("span"),F(E8.$$.fragment),Gor=l(),h_e=a("span"),Oor=o("AutoModelForMaskedImageModeling"),Uqe=l(),Wo=a("div"),F(C8.$$.fragment),Vor=l(),wd=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nz=a("a"),zor=o("from_pretrained()"),Wor=o(" class method or the "),sz=a("a"),Qor=o("from_config()"),Hor=o(` class
method.`),Uor=l(),w8=a("p"),Jor=o("This class cannot be instantiated directly using "),u_e=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),Mt=a("div"),F(A8.$$.fragment),err=l(),p_e=a("p"),orr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rrr=l(),Ad=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),srr=o("from_pretrained()"),lrr=o(" to load the model weights."),irr=l(),F(cM.$$.fragment),drr=l(),uo=a("div"),F(y8.$$.fragment),crr=l(),b_e=a("p"),mrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),frr=l(),Wa=a("p"),grr=o("The model class to instantiate is selected based on the "),v_e=a("code"),hrr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(":"),Frr=l(),yd=a("ul"),mM=a("li"),M_e=a("strong"),Trr=o("deit"),Mrr=o(" \u2014 "),iz=a("a"),Err=o("DeiTForMaskedImageModeling"),Crr=o(" (DeiT model)"),wrr=l(),fM=a("li"),E_e=a("strong"),Arr=o("swin"),yrr=o(" \u2014 "),dz=a("a"),Lrr=o("SwinForMaskedImageModeling"),xrr=o(" (Swin model)"),$rr=l(),gM=a("li"),C_e=a("strong"),krr=o("vit"),Srr=o(" \u2014 "),cz=a("a"),Rrr=o("ViTForMaskedImageModeling"),Prr=o(" (ViT model)"),Brr=l(),hM=a("p"),Irr=o("The model is set in evaluation mode by default using "),w_e=a("code"),qrr=o("model.eval()"),Nrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),jrr=o("model.train()"),Drr=l(),F(uM.$$.fragment),Jqe=l(),Ld=a("h2"),pM=a("a"),y_e=a("span"),F(L8.$$.fragment),Grr=l(),L_e=a("span"),Orr=o("AutoModelForObjectDetection"),Yqe=l(),Qo=a("div"),F(x8.$$.fragment),Vrr=l(),xd=a("p"),Xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mz=a("a"),zrr=o("from_pretrained()"),Wrr=o(" class method or the "),fz=a("a"),Qrr=o("from_config()"),Hrr=o(` class
method.`),Urr=l(),$8=a("p"),Jrr=o("This class cannot be instantiated directly using "),x_e=a("code"),Yrr=o("__init__()"),Krr=o(" (throws an error)."),Zrr=l(),Et=a("div"),F(k8.$$.fragment),etr=l(),$_e=a("p"),otr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rtr=l(),$d=a("p"),ttr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),atr=o("not"),ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),str=o("from_pretrained()"),ltr=o(" to load the model weights."),itr=l(),F(_M.$$.fragment),dtr=l(),po=a("div"),F(S8.$$.fragment),ctr=l(),S_e=a("p"),mtr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ftr=l(),Qa=a("p"),gtr=o("The model class to instantiate is selected based on the "),R_e=a("code"),htr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),ptr=o("pretrained_model_name_or_path"),_tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(":"),Ftr=l(),R8=a("ul"),bM=a("li"),I_e=a("strong"),Ttr=o("detr"),Mtr=o(" \u2014 "),hz=a("a"),Etr=o("DetrForObjectDetection"),Ctr=o(" (DETR model)"),wtr=l(),vM=a("li"),q_e=a("strong"),Atr=o("yolos"),ytr=o(" \u2014 "),uz=a("a"),Ltr=o("YolosForObjectDetection"),xtr=o(" (YOLOS model)"),$tr=l(),FM=a("p"),ktr=o("The model is set in evaluation mode by default using "),N_e=a("code"),Str=o("model.eval()"),Rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),Ptr=o("model.train()"),Btr=l(),F(TM.$$.fragment),Kqe=l(),kd=a("h2"),MM=a("a"),D_e=a("span"),F(P8.$$.fragment),Itr=l(),G_e=a("span"),qtr=o("AutoModelForImageSegmentation"),Zqe=l(),Ho=a("div"),F(B8.$$.fragment),Ntr=l(),Sd=a("p"),jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pz=a("a"),Dtr=o("from_pretrained()"),Gtr=o(" class method or the "),_z=a("a"),Otr=o("from_config()"),Vtr=o(` class
method.`),Xtr=l(),I8=a("p"),ztr=o("This class cannot be instantiated directly using "),O_e=a("code"),Wtr=o("__init__()"),Qtr=o(" (throws an error)."),Htr=l(),Ct=a("div"),F(q8.$$.fragment),Utr=l(),V_e=a("p"),Jtr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ytr=l(),Rd=a("p"),Ktr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),Ztr=o("not"),ear=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),oar=o("from_pretrained()"),rar=o(" to load the model weights."),tar=l(),F(EM.$$.fragment),aar=l(),_o=a("div"),F(N8.$$.fragment),nar=l(),z_e=a("p"),sar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lar=l(),Ha=a("p"),iar=o("The model class to instantiate is selected based on the "),W_e=a("code"),dar=o("model_type"),car=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),mar=o("pretrained_model_name_or_path"),far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),gar=o("pretrained_model_name_or_path"),har=o(":"),uar=l(),U_e=a("ul"),CM=a("li"),J_e=a("strong"),par=o("detr"),_ar=o(" \u2014 "),vz=a("a"),bar=o("DetrForSegmentation"),Far=o(" (DETR model)"),Tar=l(),wM=a("p"),Mar=o("The model is set in evaluation mode by default using "),Y_e=a("code"),Ear=o("model.eval()"),Car=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),war=o("model.train()"),Aar=l(),F(AM.$$.fragment),eNe=l(),Pd=a("h2"),yM=a("a"),Z_e=a("span"),F(j8.$$.fragment),yar=l(),ebe=a("span"),Lar=o("AutoModelForSemanticSegmentation"),oNe=l(),Uo=a("div"),F(D8.$$.fragment),xar=l(),Bd=a("p"),$ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fz=a("a"),kar=o("from_pretrained()"),Sar=o(" class method or the "),Tz=a("a"),Rar=o("from_config()"),Par=o(` class
method.`),Bar=l(),G8=a("p"),Iar=o("This class cannot be instantiated directly using "),obe=a("code"),qar=o("__init__()"),Nar=o(" (throws an error)."),jar=l(),wt=a("div"),F(O8.$$.fragment),Dar=l(),rbe=a("p"),Gar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oar=l(),Id=a("p"),Var=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Xar=o("not"),zar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),War=o("from_pretrained()"),Qar=o(" to load the model weights."),Har=l(),F(LM.$$.fragment),Uar=l(),bo=a("div"),F(V8.$$.fragment),Jar=l(),abe=a("p"),Yar=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kar=l(),Ua=a("p"),Zar=o("The model class to instantiate is selected based on the "),nbe=a("code"),enr=o("model_type"),onr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(":"),snr=l(),Ja=a("ul"),xM=a("li"),ibe=a("strong"),lnr=o("beit"),inr=o(" \u2014 "),Ez=a("a"),dnr=o("BeitForSemanticSegmentation"),cnr=o(" (BEiT model)"),mnr=l(),$M=a("li"),dbe=a("strong"),fnr=o("data2vec-vision"),gnr=o(" \u2014 "),Cz=a("a"),hnr=o("Data2VecVisionForSemanticSegmentation"),unr=o(" (Data2VecVision model)"),pnr=l(),kM=a("li"),cbe=a("strong"),_nr=o("dpt"),bnr=o(" \u2014 "),wz=a("a"),vnr=o("DPTForSemanticSegmentation"),Fnr=o(" (DPT model)"),Tnr=l(),SM=a("li"),mbe=a("strong"),Mnr=o("segformer"),Enr=o(" \u2014 "),Az=a("a"),Cnr=o("SegformerForSemanticSegmentation"),wnr=o(" (SegFormer model)"),Anr=l(),RM=a("p"),ynr=o("The model is set in evaluation mode by default using "),fbe=a("code"),Lnr=o("model.eval()"),xnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),$nr=o("model.train()"),knr=l(),F(PM.$$.fragment),rNe=l(),qd=a("h2"),BM=a("a"),hbe=a("span"),F(X8.$$.fragment),Snr=l(),ube=a("span"),Rnr=o("AutoModelForInstanceSegmentation"),tNe=l(),Jo=a("div"),F(z8.$$.fragment),Pnr=l(),Nd=a("p"),Bnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yz=a("a"),Inr=o("from_pretrained()"),qnr=o(" class method or the "),Lz=a("a"),Nnr=o("from_config()"),jnr=o(` class
method.`),Dnr=l(),W8=a("p"),Gnr=o("This class cannot be instantiated directly using "),pbe=a("code"),Onr=o("__init__()"),Vnr=o(" (throws an error)."),Xnr=l(),At=a("div"),F(Q8.$$.fragment),znr=l(),_be=a("p"),Wnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qnr=l(),jd=a("p"),Hnr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Unr=o("not"),Jnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Ynr=o("from_pretrained()"),Knr=o(" to load the model weights."),Znr=l(),F(IM.$$.fragment),esr=l(),vo=a("div"),F(H8.$$.fragment),osr=l(),vbe=a("p"),rsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tsr=l(),Ya=a("p"),asr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),nsr=o("model_type"),ssr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),lsr=o("pretrained_model_name_or_path"),isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),dsr=o("pretrained_model_name_or_path"),csr=o(":"),msr=l(),Ebe=a("ul"),qM=a("li"),Cbe=a("strong"),fsr=o("maskformer"),gsr=o(" \u2014 "),$z=a("a"),hsr=o("MaskFormerForInstanceSegmentation"),usr=o(" (MaskFormer model)"),psr=l(),NM=a("p"),_sr=o("The model is set in evaluation mode by default using "),wbe=a("code"),bsr=o("model.eval()"),vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Fsr=o("model.train()"),Tsr=l(),F(jM.$$.fragment),aNe=l(),Dd=a("h2"),DM=a("a"),ybe=a("span"),F(U8.$$.fragment),Msr=l(),Lbe=a("span"),Esr=o("TFAutoModel"),nNe=l(),Yo=a("div"),F(J8.$$.fragment),Csr=l(),Gd=a("p"),wsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kz=a("a"),Asr=o("from_pretrained()"),ysr=o(" class method or the "),Sz=a("a"),Lsr=o("from_config()"),xsr=o(` class
method.`),$sr=l(),Y8=a("p"),ksr=o("This class cannot be instantiated directly using "),xbe=a("code"),Ssr=o("__init__()"),Rsr=o(" (throws an error)."),Psr=l(),yt=a("div"),F(K8.$$.fragment),Bsr=l(),$be=a("p"),Isr=o("Instantiates one of the base model classes of the library from a configuration."),qsr=l(),Od=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),jsr=o("not"),Dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Gsr=o("from_pretrained()"),Osr=o(" to load the model weights."),Vsr=l(),F(GM.$$.fragment),Xsr=l(),wr=a("div"),F(Z8.$$.fragment),zsr=l(),Sbe=a("p"),Wsr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qsr=l(),Ka=a("p"),Hsr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Usr=o("model_type"),Jsr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(":"),olr=l(),N=a("ul"),OM=a("li"),Ibe=a("strong"),rlr=o("albert"),tlr=o(" \u2014 "),Pz=a("a"),alr=o("TFAlbertModel"),nlr=o(" (ALBERT model)"),slr=l(),VM=a("li"),qbe=a("strong"),llr=o("bart"),ilr=o(" \u2014 "),Bz=a("a"),dlr=o("TFBartModel"),clr=o(" (BART model)"),mlr=l(),XM=a("li"),Nbe=a("strong"),flr=o("bert"),glr=o(" \u2014 "),Iz=a("a"),hlr=o("TFBertModel"),ulr=o(" (BERT model)"),plr=l(),zM=a("li"),jbe=a("strong"),_lr=o("blenderbot"),blr=o(" \u2014 "),qz=a("a"),vlr=o("TFBlenderbotModel"),Flr=o(" (Blenderbot model)"),Tlr=l(),WM=a("li"),Dbe=a("strong"),Mlr=o("blenderbot-small"),Elr=o(" \u2014 "),Nz=a("a"),Clr=o("TFBlenderbotSmallModel"),wlr=o(" (BlenderbotSmall model)"),Alr=l(),QM=a("li"),Gbe=a("strong"),ylr=o("camembert"),Llr=o(" \u2014 "),jz=a("a"),xlr=o("TFCamembertModel"),$lr=o(" (CamemBERT model)"),klr=l(),HM=a("li"),Obe=a("strong"),Slr=o("clip"),Rlr=o(" \u2014 "),Dz=a("a"),Plr=o("TFCLIPModel"),Blr=o(" (CLIP model)"),Ilr=l(),UM=a("li"),Vbe=a("strong"),qlr=o("convbert"),Nlr=o(" \u2014 "),Gz=a("a"),jlr=o("TFConvBertModel"),Dlr=o(" (ConvBERT model)"),Glr=l(),JM=a("li"),Xbe=a("strong"),Olr=o("convnext"),Vlr=o(" \u2014 "),Oz=a("a"),Xlr=o("TFConvNextModel"),zlr=o(" (ConvNext model)"),Wlr=l(),YM=a("li"),zbe=a("strong"),Qlr=o("ctrl"),Hlr=o(" \u2014 "),Vz=a("a"),Ulr=o("TFCTRLModel"),Jlr=o(" (CTRL model)"),Ylr=l(),KM=a("li"),Wbe=a("strong"),Klr=o("data2vec-vision"),Zlr=o(" \u2014 "),Xz=a("a"),eir=o("TFData2VecVisionModel"),oir=o(" (Data2VecVision model)"),rir=l(),ZM=a("li"),Qbe=a("strong"),tir=o("deberta"),air=o(" \u2014 "),zz=a("a"),nir=o("TFDebertaModel"),sir=o(" (DeBERTa model)"),lir=l(),e4=a("li"),Hbe=a("strong"),iir=o("deberta-v2"),dir=o(" \u2014 "),Wz=a("a"),cir=o("TFDebertaV2Model"),mir=o(" (DeBERTa-v2 model)"),fir=l(),o4=a("li"),Ube=a("strong"),gir=o("distilbert"),hir=o(" \u2014 "),Qz=a("a"),uir=o("TFDistilBertModel"),pir=o(" (DistilBERT model)"),_ir=l(),r4=a("li"),Jbe=a("strong"),bir=o("dpr"),vir=o(" \u2014 "),Hz=a("a"),Fir=o("TFDPRQuestionEncoder"),Tir=o(" (DPR model)"),Mir=l(),t4=a("li"),Ybe=a("strong"),Eir=o("electra"),Cir=o(" \u2014 "),Uz=a("a"),wir=o("TFElectraModel"),Air=o(" (ELECTRA model)"),yir=l(),a4=a("li"),Kbe=a("strong"),Lir=o("flaubert"),xir=o(" \u2014 "),Jz=a("a"),$ir=o("TFFlaubertModel"),kir=o(" (FlauBERT model)"),Sir=l(),Bs=a("li"),Zbe=a("strong"),Rir=o("funnel"),Pir=o(" \u2014 "),Yz=a("a"),Bir=o("TFFunnelModel"),Iir=o(" or "),Kz=a("a"),qir=o("TFFunnelBaseModel"),Nir=o(" (Funnel Transformer model)"),jir=l(),n4=a("li"),e2e=a("strong"),Dir=o("gpt2"),Gir=o(" \u2014 "),Zz=a("a"),Oir=o("TFGPT2Model"),Vir=o(" (OpenAI GPT-2 model)"),Xir=l(),s4=a("li"),o2e=a("strong"),zir=o("gptj"),Wir=o(" \u2014 "),eW=a("a"),Qir=o("TFGPTJModel"),Hir=o(" (GPT-J model)"),Uir=l(),l4=a("li"),r2e=a("strong"),Jir=o("hubert"),Yir=o(" \u2014 "),oW=a("a"),Kir=o("TFHubertModel"),Zir=o(" (Hubert model)"),edr=l(),i4=a("li"),t2e=a("strong"),odr=o("layoutlm"),rdr=o(" \u2014 "),rW=a("a"),tdr=o("TFLayoutLMModel"),adr=o(" (LayoutLM model)"),ndr=l(),d4=a("li"),a2e=a("strong"),sdr=o("led"),ldr=o(" \u2014 "),tW=a("a"),idr=o("TFLEDModel"),ddr=o(" (LED model)"),cdr=l(),c4=a("li"),n2e=a("strong"),mdr=o("longformer"),fdr=o(" \u2014 "),aW=a("a"),gdr=o("TFLongformerModel"),hdr=o(" (Longformer model)"),udr=l(),m4=a("li"),s2e=a("strong"),pdr=o("lxmert"),_dr=o(" \u2014 "),nW=a("a"),bdr=o("TFLxmertModel"),vdr=o(" (LXMERT model)"),Fdr=l(),f4=a("li"),l2e=a("strong"),Tdr=o("marian"),Mdr=o(" \u2014 "),sW=a("a"),Edr=o("TFMarianModel"),Cdr=o(" (Marian model)"),wdr=l(),g4=a("li"),i2e=a("strong"),Adr=o("mbart"),ydr=o(" \u2014 "),lW=a("a"),Ldr=o("TFMBartModel"),xdr=o(" (mBART model)"),$dr=l(),h4=a("li"),d2e=a("strong"),kdr=o("mobilebert"),Sdr=o(" \u2014 "),iW=a("a"),Rdr=o("TFMobileBertModel"),Pdr=o(" (MobileBERT model)"),Bdr=l(),u4=a("li"),c2e=a("strong"),Idr=o("mpnet"),qdr=o(" \u2014 "),dW=a("a"),Ndr=o("TFMPNetModel"),jdr=o(" (MPNet model)"),Ddr=l(),p4=a("li"),m2e=a("strong"),Gdr=o("mt5"),Odr=o(" \u2014 "),cW=a("a"),Vdr=o("TFMT5Model"),Xdr=o(" (mT5 model)"),zdr=l(),_4=a("li"),f2e=a("strong"),Wdr=o("openai-gpt"),Qdr=o(" \u2014 "),mW=a("a"),Hdr=o("TFOpenAIGPTModel"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),b4=a("li"),g2e=a("strong"),Ydr=o("pegasus"),Kdr=o(" \u2014 "),fW=a("a"),Zdr=o("TFPegasusModel"),ecr=o(" (Pegasus model)"),ocr=l(),v4=a("li"),h2e=a("strong"),rcr=o("rembert"),tcr=o(" \u2014 "),gW=a("a"),acr=o("TFRemBertModel"),ncr=o(" (RemBERT model)"),scr=l(),F4=a("li"),u2e=a("strong"),lcr=o("roberta"),icr=o(" \u2014 "),hW=a("a"),dcr=o("TFRobertaModel"),ccr=o(" (RoBERTa model)"),mcr=l(),T4=a("li"),p2e=a("strong"),fcr=o("roformer"),gcr=o(" \u2014 "),uW=a("a"),hcr=o("TFRoFormerModel"),ucr=o(" (RoFormer model)"),pcr=l(),M4=a("li"),_2e=a("strong"),_cr=o("speech_to_text"),bcr=o(" \u2014 "),pW=a("a"),vcr=o("TFSpeech2TextModel"),Fcr=o(" (Speech2Text model)"),Tcr=l(),E4=a("li"),b2e=a("strong"),Mcr=o("swin"),Ecr=o(" \u2014 "),_W=a("a"),Ccr=o("TFSwinModel"),wcr=o(" (Swin model)"),Acr=l(),C4=a("li"),v2e=a("strong"),ycr=o("t5"),Lcr=o(" \u2014 "),bW=a("a"),xcr=o("TFT5Model"),$cr=o(" (T5 model)"),kcr=l(),w4=a("li"),F2e=a("strong"),Scr=o("tapas"),Rcr=o(" \u2014 "),vW=a("a"),Pcr=o("TFTapasModel"),Bcr=o(" (TAPAS model)"),Icr=l(),A4=a("li"),T2e=a("strong"),qcr=o("transfo-xl"),Ncr=o(" \u2014 "),FW=a("a"),jcr=o("TFTransfoXLModel"),Dcr=o(" (Transformer-XL model)"),Gcr=l(),y4=a("li"),M2e=a("strong"),Ocr=o("vit"),Vcr=o(" \u2014 "),TW=a("a"),Xcr=o("TFViTModel"),zcr=o(" (ViT model)"),Wcr=l(),L4=a("li"),E2e=a("strong"),Qcr=o("vit_mae"),Hcr=o(" \u2014 "),MW=a("a"),Ucr=o("TFViTMAEModel"),Jcr=o(" (ViTMAE model)"),Ycr=l(),x4=a("li"),C2e=a("strong"),Kcr=o("wav2vec2"),Zcr=o(" \u2014 "),EW=a("a"),emr=o("TFWav2Vec2Model"),omr=o(" (Wav2Vec2 model)"),rmr=l(),$4=a("li"),w2e=a("strong"),tmr=o("xlm"),amr=o(" \u2014 "),CW=a("a"),nmr=o("TFXLMModel"),smr=o(" (XLM model)"),lmr=l(),k4=a("li"),A2e=a("strong"),imr=o("xlm-roberta"),dmr=o(" \u2014 "),wW=a("a"),cmr=o("TFXLMRobertaModel"),mmr=o(" (XLM-RoBERTa model)"),fmr=l(),S4=a("li"),y2e=a("strong"),gmr=o("xlnet"),hmr=o(" \u2014 "),AW=a("a"),umr=o("TFXLNetModel"),pmr=o(" (XLNet model)"),_mr=l(),F(R4.$$.fragment),sNe=l(),Vd=a("h2"),P4=a("a"),L2e=a("span"),F(e7.$$.fragment),bmr=l(),x2e=a("span"),vmr=o("TFAutoModelForPreTraining"),lNe=l(),Ko=a("div"),F(o7.$$.fragment),Fmr=l(),Xd=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yW=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),LW=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),r7=a("p"),ymr=o("This class cannot be instantiated directly using "),$2e=a("code"),Lmr=o("__init__()"),xmr=o(" (throws an error)."),$mr=l(),Lt=a("div"),F(t7.$$.fragment),kmr=l(),k2e=a("p"),Smr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rmr=l(),zd=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),Bmr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),qmr=o("from_pretrained()"),Nmr=o(" to load the model weights."),jmr=l(),F(B4.$$.fragment),Dmr=l(),Ar=a("div"),F(a7.$$.fragment),Gmr=l(),R2e=a("p"),Omr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vmr=l(),Za=a("p"),Xmr=o("The model class to instantiate is selected based on the "),P2e=a("code"),zmr=o("model_type"),Wmr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),Qmr=o("pretrained_model_name_or_path"),Hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(":"),Ymr=l(),se=a("ul"),I4=a("li"),q2e=a("strong"),Kmr=o("albert"),Zmr=o(" \u2014 "),$W=a("a"),efr=o("TFAlbertForPreTraining"),ofr=o(" (ALBERT model)"),rfr=l(),q4=a("li"),N2e=a("strong"),tfr=o("bart"),afr=o(" \u2014 "),kW=a("a"),nfr=o("TFBartForConditionalGeneration"),sfr=o(" (BART model)"),lfr=l(),N4=a("li"),j2e=a("strong"),ifr=o("bert"),dfr=o(" \u2014 "),SW=a("a"),cfr=o("TFBertForPreTraining"),mfr=o(" (BERT model)"),ffr=l(),j4=a("li"),D2e=a("strong"),gfr=o("camembert"),hfr=o(" \u2014 "),RW=a("a"),ufr=o("TFCamembertForMaskedLM"),pfr=o(" (CamemBERT model)"),_fr=l(),D4=a("li"),G2e=a("strong"),bfr=o("ctrl"),vfr=o(" \u2014 "),PW=a("a"),Ffr=o("TFCTRLLMHeadModel"),Tfr=o(" (CTRL model)"),Mfr=l(),G4=a("li"),O2e=a("strong"),Efr=o("distilbert"),Cfr=o(" \u2014 "),BW=a("a"),wfr=o("TFDistilBertForMaskedLM"),Afr=o(" (DistilBERT model)"),yfr=l(),O4=a("li"),V2e=a("strong"),Lfr=o("electra"),xfr=o(" \u2014 "),IW=a("a"),$fr=o("TFElectraForPreTraining"),kfr=o(" (ELECTRA model)"),Sfr=l(),V4=a("li"),X2e=a("strong"),Rfr=o("flaubert"),Pfr=o(" \u2014 "),qW=a("a"),Bfr=o("TFFlaubertWithLMHeadModel"),Ifr=o(" (FlauBERT model)"),qfr=l(),X4=a("li"),z2e=a("strong"),Nfr=o("funnel"),jfr=o(" \u2014 "),NW=a("a"),Dfr=o("TFFunnelForPreTraining"),Gfr=o(" (Funnel Transformer model)"),Ofr=l(),z4=a("li"),W2e=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),jW=a("a"),zfr=o("TFGPT2LMHeadModel"),Wfr=o(" (OpenAI GPT-2 model)"),Qfr=l(),W4=a("li"),Q2e=a("strong"),Hfr=o("layoutlm"),Ufr=o(" \u2014 "),DW=a("a"),Jfr=o("TFLayoutLMForMaskedLM"),Yfr=o(" (LayoutLM model)"),Kfr=l(),Q4=a("li"),H2e=a("strong"),Zfr=o("lxmert"),egr=o(" \u2014 "),GW=a("a"),ogr=o("TFLxmertForPreTraining"),rgr=o(" (LXMERT model)"),tgr=l(),H4=a("li"),U2e=a("strong"),agr=o("mobilebert"),ngr=o(" \u2014 "),OW=a("a"),sgr=o("TFMobileBertForPreTraining"),lgr=o(" (MobileBERT model)"),igr=l(),U4=a("li"),J2e=a("strong"),dgr=o("mpnet"),cgr=o(" \u2014 "),VW=a("a"),mgr=o("TFMPNetForMaskedLM"),fgr=o(" (MPNet model)"),ggr=l(),J4=a("li"),Y2e=a("strong"),hgr=o("openai-gpt"),ugr=o(" \u2014 "),XW=a("a"),pgr=o("TFOpenAIGPTLMHeadModel"),_gr=o(" (OpenAI GPT model)"),bgr=l(),Y4=a("li"),K2e=a("strong"),vgr=o("roberta"),Fgr=o(" \u2014 "),zW=a("a"),Tgr=o("TFRobertaForMaskedLM"),Mgr=o(" (RoBERTa model)"),Egr=l(),K4=a("li"),Z2e=a("strong"),Cgr=o("t5"),wgr=o(" \u2014 "),WW=a("a"),Agr=o("TFT5ForConditionalGeneration"),ygr=o(" (T5 model)"),Lgr=l(),Z4=a("li"),eve=a("strong"),xgr=o("tapas"),$gr=o(" \u2014 "),QW=a("a"),kgr=o("TFTapasForMaskedLM"),Sgr=o(" (TAPAS model)"),Rgr=l(),eE=a("li"),ove=a("strong"),Pgr=o("transfo-xl"),Bgr=o(" \u2014 "),HW=a("a"),Igr=o("TFTransfoXLLMHeadModel"),qgr=o(" (Transformer-XL model)"),Ngr=l(),oE=a("li"),rve=a("strong"),jgr=o("vit_mae"),Dgr=o(" \u2014 "),UW=a("a"),Ggr=o("TFViTMAEForPreTraining"),Ogr=o(" (ViTMAE model)"),Vgr=l(),rE=a("li"),tve=a("strong"),Xgr=o("xlm"),zgr=o(" \u2014 "),JW=a("a"),Wgr=o("TFXLMWithLMHeadModel"),Qgr=o(" (XLM model)"),Hgr=l(),tE=a("li"),ave=a("strong"),Ugr=o("xlm-roberta"),Jgr=o(" \u2014 "),YW=a("a"),Ygr=o("TFXLMRobertaForMaskedLM"),Kgr=o(" (XLM-RoBERTa model)"),Zgr=l(),aE=a("li"),nve=a("strong"),ehr=o("xlnet"),ohr=o(" \u2014 "),KW=a("a"),rhr=o("TFXLNetLMHeadModel"),thr=o(" (XLNet model)"),ahr=l(),F(nE.$$.fragment),iNe=l(),Wd=a("h2"),sE=a("a"),sve=a("span"),F(n7.$$.fragment),nhr=l(),lve=a("span"),shr=o("TFAutoModelForCausalLM"),dNe=l(),Zo=a("div"),F(s7.$$.fragment),lhr=l(),Qd=a("p"),ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZW=a("a"),dhr=o("from_pretrained()"),chr=o(" class method or the "),eQ=a("a"),mhr=o("from_config()"),fhr=o(` class
method.`),ghr=l(),l7=a("p"),hhr=o("This class cannot be instantiated directly using "),ive=a("code"),uhr=o("__init__()"),phr=o(" (throws an error)."),_hr=l(),xt=a("div"),F(i7.$$.fragment),bhr=l(),dve=a("p"),vhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fhr=l(),Hd=a("p"),Thr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),Mhr=o("not"),Ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Chr=o("from_pretrained()"),whr=o(" to load the model weights."),Ahr=l(),F(lE.$$.fragment),yhr=l(),yr=a("div"),F(d7.$$.fragment),Lhr=l(),mve=a("p"),xhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$hr=l(),en=a("p"),khr=o("The model class to instantiate is selected based on the "),fve=a("code"),Shr=o("model_type"),Rhr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),Phr=o("pretrained_model_name_or_path"),Bhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),Ihr=o("pretrained_model_name_or_path"),qhr=o(":"),Nhr=l(),Me=a("ul"),iE=a("li"),uve=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),rQ=a("a"),Ghr=o("TFBertLMHeadModel"),Ohr=o(" (BERT model)"),Vhr=l(),dE=a("li"),pve=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),tQ=a("a"),Whr=o("TFCamembertForCausalLM"),Qhr=o(" (CamemBERT model)"),Hhr=l(),cE=a("li"),_ve=a("strong"),Uhr=o("ctrl"),Jhr=o(" \u2014 "),aQ=a("a"),Yhr=o("TFCTRLLMHeadModel"),Khr=o(" (CTRL model)"),Zhr=l(),mE=a("li"),bve=a("strong"),eur=o("gpt2"),our=o(" \u2014 "),nQ=a("a"),rur=o("TFGPT2LMHeadModel"),tur=o(" (OpenAI GPT-2 model)"),aur=l(),fE=a("li"),vve=a("strong"),nur=o("gptj"),sur=o(" \u2014 "),sQ=a("a"),lur=o("TFGPTJForCausalLM"),iur=o(" (GPT-J model)"),dur=l(),gE=a("li"),Fve=a("strong"),cur=o("openai-gpt"),mur=o(" \u2014 "),lQ=a("a"),fur=o("TFOpenAIGPTLMHeadModel"),gur=o(" (OpenAI GPT model)"),hur=l(),hE=a("li"),Tve=a("strong"),uur=o("rembert"),pur=o(" \u2014 "),iQ=a("a"),_ur=o("TFRemBertForCausalLM"),bur=o(" (RemBERT model)"),vur=l(),uE=a("li"),Mve=a("strong"),Fur=o("roberta"),Tur=o(" \u2014 "),dQ=a("a"),Mur=o("TFRobertaForCausalLM"),Eur=o(" (RoBERTa model)"),Cur=l(),pE=a("li"),Eve=a("strong"),wur=o("roformer"),Aur=o(" \u2014 "),cQ=a("a"),yur=o("TFRoFormerForCausalLM"),Lur=o(" (RoFormer model)"),xur=l(),_E=a("li"),Cve=a("strong"),$ur=o("transfo-xl"),kur=o(" \u2014 "),mQ=a("a"),Sur=o("TFTransfoXLLMHeadModel"),Rur=o(" (Transformer-XL model)"),Pur=l(),bE=a("li"),wve=a("strong"),Bur=o("xlm"),Iur=o(" \u2014 "),fQ=a("a"),qur=o("TFXLMWithLMHeadModel"),Nur=o(" (XLM model)"),jur=l(),vE=a("li"),Ave=a("strong"),Dur=o("xlnet"),Gur=o(" \u2014 "),gQ=a("a"),Our=o("TFXLNetLMHeadModel"),Vur=o(" (XLNet model)"),Xur=l(),F(FE.$$.fragment),cNe=l(),Ud=a("h2"),TE=a("a"),yve=a("span"),F(c7.$$.fragment),zur=l(),Lve=a("span"),Wur=o("TFAutoModelForImageClassification"),mNe=l(),er=a("div"),F(m7.$$.fragment),Qur=l(),Jd=a("p"),Hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=a("a"),Uur=o("from_pretrained()"),Jur=o(" class method or the "),uQ=a("a"),Yur=o("from_config()"),Kur=o(` class
method.`),Zur=l(),f7=a("p"),epr=o("This class cannot be instantiated directly using "),xve=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),$t=a("div"),F(g7.$$.fragment),apr=l(),$ve=a("p"),npr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),spr=l(),Yd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),cpr=o("from_pretrained()"),mpr=o(" to load the model weights."),fpr=l(),F(ME.$$.fragment),gpr=l(),Lr=a("div"),F(h7.$$.fragment),hpr=l(),Sve=a("p"),upr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ppr=l(),on=a("p"),_pr=o("The model class to instantiate is selected based on the "),Rve=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),rn=a("ul"),EE=a("li"),Ive=a("strong"),wpr=o("convnext"),Apr=o(" \u2014 "),_Q=a("a"),ypr=o("TFConvNextForImageClassification"),Lpr=o(" (ConvNext model)"),xpr=l(),CE=a("li"),qve=a("strong"),$pr=o("data2vec-vision"),kpr=o(" \u2014 "),bQ=a("a"),Spr=o("TFData2VecVisionForImageClassification"),Rpr=o(" (Data2VecVision model)"),Ppr=l(),wE=a("li"),Nve=a("strong"),Bpr=o("swin"),Ipr=o(" \u2014 "),vQ=a("a"),qpr=o("TFSwinForImageClassification"),Npr=o(" (Swin model)"),jpr=l(),AE=a("li"),jve=a("strong"),Dpr=o("vit"),Gpr=o(" \u2014 "),FQ=a("a"),Opr=o("TFViTForImageClassification"),Vpr=o(" (ViT model)"),Xpr=l(),F(yE.$$.fragment),fNe=l(),Kd=a("h2"),LE=a("a"),Dve=a("span"),F(u7.$$.fragment),zpr=l(),Gve=a("span"),Wpr=o("TFAutoModelForMaskedLM"),gNe=l(),or=a("div"),F(p7.$$.fragment),Qpr=l(),Zd=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TQ=a("a"),Upr=o("from_pretrained()"),Jpr=o(" class method or the "),MQ=a("a"),Ypr=o("from_config()"),Kpr=o(` class
method.`),Zpr=l(),_7=a("p"),e_r=o("This class cannot be instantiated directly using "),Ove=a("code"),o_r=o("__init__()"),r_r=o(" (throws an error)."),t_r=l(),kt=a("div"),F(b7.$$.fragment),a_r=l(),Vve=a("p"),n_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s_r=l(),ec=a("p"),l_r=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),i_r=o("not"),d_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),c_r=o("from_pretrained()"),m_r=o(" to load the model weights."),f_r=l(),F(xE.$$.fragment),g_r=l(),xr=a("div"),F(v7.$$.fragment),h_r=l(),zve=a("p"),u_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p_r=l(),tn=a("p"),__r=o("The model class to instantiate is selected based on the "),Wve=a("code"),b_r=o("model_type"),v_r=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),F_r=o("pretrained_model_name_or_path"),T_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(":"),C_r=l(),ie=a("ul"),$E=a("li"),Uve=a("strong"),w_r=o("albert"),A_r=o(" \u2014 "),CQ=a("a"),y_r=o("TFAlbertForMaskedLM"),L_r=o(" (ALBERT model)"),x_r=l(),kE=a("li"),Jve=a("strong"),$_r=o("bert"),k_r=o(" \u2014 "),wQ=a("a"),S_r=o("TFBertForMaskedLM"),R_r=o(" (BERT model)"),P_r=l(),SE=a("li"),Yve=a("strong"),B_r=o("camembert"),I_r=o(" \u2014 "),AQ=a("a"),q_r=o("TFCamembertForMaskedLM"),N_r=o(" (CamemBERT model)"),j_r=l(),RE=a("li"),Kve=a("strong"),D_r=o("convbert"),G_r=o(" \u2014 "),yQ=a("a"),O_r=o("TFConvBertForMaskedLM"),V_r=o(" (ConvBERT model)"),X_r=l(),PE=a("li"),Zve=a("strong"),z_r=o("deberta"),W_r=o(" \u2014 "),LQ=a("a"),Q_r=o("TFDebertaForMaskedLM"),H_r=o(" (DeBERTa model)"),U_r=l(),BE=a("li"),eFe=a("strong"),J_r=o("deberta-v2"),Y_r=o(" \u2014 "),xQ=a("a"),K_r=o("TFDebertaV2ForMaskedLM"),Z_r=o(" (DeBERTa-v2 model)"),ebr=l(),IE=a("li"),oFe=a("strong"),obr=o("distilbert"),rbr=o(" \u2014 "),$Q=a("a"),tbr=o("TFDistilBertForMaskedLM"),abr=o(" (DistilBERT model)"),nbr=l(),qE=a("li"),rFe=a("strong"),sbr=o("electra"),lbr=o(" \u2014 "),kQ=a("a"),ibr=o("TFElectraForMaskedLM"),dbr=o(" (ELECTRA model)"),cbr=l(),NE=a("li"),tFe=a("strong"),mbr=o("flaubert"),fbr=o(" \u2014 "),SQ=a("a"),gbr=o("TFFlaubertWithLMHeadModel"),hbr=o(" (FlauBERT model)"),ubr=l(),jE=a("li"),aFe=a("strong"),pbr=o("funnel"),_br=o(" \u2014 "),RQ=a("a"),bbr=o("TFFunnelForMaskedLM"),vbr=o(" (Funnel Transformer model)"),Fbr=l(),DE=a("li"),nFe=a("strong"),Tbr=o("layoutlm"),Mbr=o(" \u2014 "),PQ=a("a"),Ebr=o("TFLayoutLMForMaskedLM"),Cbr=o(" (LayoutLM model)"),wbr=l(),GE=a("li"),sFe=a("strong"),Abr=o("longformer"),ybr=o(" \u2014 "),BQ=a("a"),Lbr=o("TFLongformerForMaskedLM"),xbr=o(" (Longformer model)"),$br=l(),OE=a("li"),lFe=a("strong"),kbr=o("mobilebert"),Sbr=o(" \u2014 "),IQ=a("a"),Rbr=o("TFMobileBertForMaskedLM"),Pbr=o(" (MobileBERT model)"),Bbr=l(),VE=a("li"),iFe=a("strong"),Ibr=o("mpnet"),qbr=o(" \u2014 "),qQ=a("a"),Nbr=o("TFMPNetForMaskedLM"),jbr=o(" (MPNet model)"),Dbr=l(),XE=a("li"),dFe=a("strong"),Gbr=o("rembert"),Obr=o(" \u2014 "),NQ=a("a"),Vbr=o("TFRemBertForMaskedLM"),Xbr=o(" (RemBERT model)"),zbr=l(),zE=a("li"),cFe=a("strong"),Wbr=o("roberta"),Qbr=o(" \u2014 "),jQ=a("a"),Hbr=o("TFRobertaForMaskedLM"),Ubr=o(" (RoBERTa model)"),Jbr=l(),WE=a("li"),mFe=a("strong"),Ybr=o("roformer"),Kbr=o(" \u2014 "),DQ=a("a"),Zbr=o("TFRoFormerForMaskedLM"),e2r=o(" (RoFormer model)"),o2r=l(),QE=a("li"),fFe=a("strong"),r2r=o("tapas"),t2r=o(" \u2014 "),GQ=a("a"),a2r=o("TFTapasForMaskedLM"),n2r=o(" (TAPAS model)"),s2r=l(),HE=a("li"),gFe=a("strong"),l2r=o("xlm"),i2r=o(" \u2014 "),OQ=a("a"),d2r=o("TFXLMWithLMHeadModel"),c2r=o(" (XLM model)"),m2r=l(),UE=a("li"),hFe=a("strong"),f2r=o("xlm-roberta"),g2r=o(" \u2014 "),VQ=a("a"),h2r=o("TFXLMRobertaForMaskedLM"),u2r=o(" (XLM-RoBERTa model)"),p2r=l(),F(JE.$$.fragment),hNe=l(),oc=a("h2"),YE=a("a"),uFe=a("span"),F(F7.$$.fragment),_2r=l(),pFe=a("span"),b2r=o("TFAutoModelForSeq2SeqLM"),uNe=l(),rr=a("div"),F(T7.$$.fragment),v2r=l(),rc=a("p"),F2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XQ=a("a"),T2r=o("from_pretrained()"),M2r=o(" class method or the "),zQ=a("a"),E2r=o("from_config()"),C2r=o(` class
method.`),w2r=l(),M7=a("p"),A2r=o("This class cannot be instantiated directly using "),_Fe=a("code"),y2r=o("__init__()"),L2r=o(" (throws an error)."),x2r=l(),St=a("div"),F(E7.$$.fragment),$2r=l(),bFe=a("p"),k2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S2r=l(),tc=a("p"),R2r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),P2r=o("not"),B2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),I2r=o("from_pretrained()"),q2r=o(" to load the model weights."),N2r=l(),F(KE.$$.fragment),j2r=l(),$r=a("div"),F(C7.$$.fragment),D2r=l(),FFe=a("p"),G2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O2r=l(),an=a("p"),V2r=o("The model class to instantiate is selected based on the "),TFe=a("code"),X2r=o("model_type"),z2r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),W2r=o("pretrained_model_name_or_path"),Q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(":"),J2r=l(),ye=a("ul"),ZE=a("li"),CFe=a("strong"),Y2r=o("bart"),K2r=o(" \u2014 "),QQ=a("a"),Z2r=o("TFBartForConditionalGeneration"),evr=o(" (BART model)"),ovr=l(),eC=a("li"),wFe=a("strong"),rvr=o("blenderbot"),tvr=o(" \u2014 "),HQ=a("a"),avr=o("TFBlenderbotForConditionalGeneration"),nvr=o(" (Blenderbot model)"),svr=l(),oC=a("li"),AFe=a("strong"),lvr=o("blenderbot-small"),ivr=o(" \u2014 "),UQ=a("a"),dvr=o("TFBlenderbotSmallForConditionalGeneration"),cvr=o(" (BlenderbotSmall model)"),mvr=l(),rC=a("li"),yFe=a("strong"),fvr=o("encoder-decoder"),gvr=o(" \u2014 "),JQ=a("a"),hvr=o("TFEncoderDecoderModel"),uvr=o(" (Encoder decoder model)"),pvr=l(),tC=a("li"),LFe=a("strong"),_vr=o("led"),bvr=o(" \u2014 "),YQ=a("a"),vvr=o("TFLEDForConditionalGeneration"),Fvr=o(" (LED model)"),Tvr=l(),aC=a("li"),xFe=a("strong"),Mvr=o("marian"),Evr=o(" \u2014 "),KQ=a("a"),Cvr=o("TFMarianMTModel"),wvr=o(" (Marian model)"),Avr=l(),nC=a("li"),$Fe=a("strong"),yvr=o("mbart"),Lvr=o(" \u2014 "),ZQ=a("a"),xvr=o("TFMBartForConditionalGeneration"),$vr=o(" (mBART model)"),kvr=l(),sC=a("li"),kFe=a("strong"),Svr=o("mt5"),Rvr=o(" \u2014 "),eH=a("a"),Pvr=o("TFMT5ForConditionalGeneration"),Bvr=o(" (mT5 model)"),Ivr=l(),lC=a("li"),SFe=a("strong"),qvr=o("pegasus"),Nvr=o(" \u2014 "),oH=a("a"),jvr=o("TFPegasusForConditionalGeneration"),Dvr=o(" (Pegasus model)"),Gvr=l(),iC=a("li"),RFe=a("strong"),Ovr=o("t5"),Vvr=o(" \u2014 "),rH=a("a"),Xvr=o("TFT5ForConditionalGeneration"),zvr=o(" (T5 model)"),Wvr=l(),F(dC.$$.fragment),pNe=l(),ac=a("h2"),cC=a("a"),PFe=a("span"),F(w7.$$.fragment),Qvr=l(),BFe=a("span"),Hvr=o("TFAutoModelForSequenceClassification"),_Ne=l(),tr=a("div"),F(A7.$$.fragment),Uvr=l(),nc=a("p"),Jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" class method or the "),aH=a("a"),Zvr=o("from_config()"),eFr=o(` class
method.`),oFr=l(),y7=a("p"),rFr=o("This class cannot be instantiated directly using "),IFe=a("code"),tFr=o("__init__()"),aFr=o(" (throws an error)."),nFr=l(),Rt=a("div"),F(L7.$$.fragment),sFr=l(),qFe=a("p"),lFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iFr=l(),sc=a("p"),dFr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),cFr=o("not"),mFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),fFr=o("from_pretrained()"),gFr=o(" to load the model weights."),hFr=l(),F(mC.$$.fragment),uFr=l(),kr=a("div"),F(x7.$$.fragment),pFr=l(),jFe=a("p"),_Fr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bFr=l(),nn=a("p"),vFr=o("The model class to instantiate is selected based on the "),DFe=a("code"),FFr=o("model_type"),TFr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),MFr=o("pretrained_model_name_or_path"),EFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(":"),AFr=l(),ee=a("ul"),fC=a("li"),VFe=a("strong"),yFr=o("albert"),LFr=o(" \u2014 "),sH=a("a"),xFr=o("TFAlbertForSequenceClassification"),$Fr=o(" (ALBERT model)"),kFr=l(),gC=a("li"),XFe=a("strong"),SFr=o("bert"),RFr=o(" \u2014 "),lH=a("a"),PFr=o("TFBertForSequenceClassification"),BFr=o(" (BERT model)"),IFr=l(),hC=a("li"),zFe=a("strong"),qFr=o("camembert"),NFr=o(" \u2014 "),iH=a("a"),jFr=o("TFCamembertForSequenceClassification"),DFr=o(" (CamemBERT model)"),GFr=l(),uC=a("li"),WFe=a("strong"),OFr=o("convbert"),VFr=o(" \u2014 "),dH=a("a"),XFr=o("TFConvBertForSequenceClassification"),zFr=o(" (ConvBERT model)"),WFr=l(),pC=a("li"),QFe=a("strong"),QFr=o("ctrl"),HFr=o(" \u2014 "),cH=a("a"),UFr=o("TFCTRLForSequenceClassification"),JFr=o(" (CTRL model)"),YFr=l(),_C=a("li"),HFe=a("strong"),KFr=o("deberta"),ZFr=o(" \u2014 "),mH=a("a"),e1r=o("TFDebertaForSequenceClassification"),o1r=o(" (DeBERTa model)"),r1r=l(),bC=a("li"),UFe=a("strong"),t1r=o("deberta-v2"),a1r=o(" \u2014 "),fH=a("a"),n1r=o("TFDebertaV2ForSequenceClassification"),s1r=o(" (DeBERTa-v2 model)"),l1r=l(),vC=a("li"),JFe=a("strong"),i1r=o("distilbert"),d1r=o(" \u2014 "),gH=a("a"),c1r=o("TFDistilBertForSequenceClassification"),m1r=o(" (DistilBERT model)"),f1r=l(),FC=a("li"),YFe=a("strong"),g1r=o("electra"),h1r=o(" \u2014 "),hH=a("a"),u1r=o("TFElectraForSequenceClassification"),p1r=o(" (ELECTRA model)"),_1r=l(),TC=a("li"),KFe=a("strong"),b1r=o("flaubert"),v1r=o(" \u2014 "),uH=a("a"),F1r=o("TFFlaubertForSequenceClassification"),T1r=o(" (FlauBERT model)"),M1r=l(),MC=a("li"),ZFe=a("strong"),E1r=o("funnel"),C1r=o(" \u2014 "),pH=a("a"),w1r=o("TFFunnelForSequenceClassification"),A1r=o(" (Funnel Transformer model)"),y1r=l(),EC=a("li"),e1e=a("strong"),L1r=o("gpt2"),x1r=o(" \u2014 "),_H=a("a"),$1r=o("TFGPT2ForSequenceClassification"),k1r=o(" (OpenAI GPT-2 model)"),S1r=l(),CC=a("li"),o1e=a("strong"),R1r=o("gptj"),P1r=o(" \u2014 "),bH=a("a"),B1r=o("TFGPTJForSequenceClassification"),I1r=o(" (GPT-J model)"),q1r=l(),wC=a("li"),r1e=a("strong"),N1r=o("layoutlm"),j1r=o(" \u2014 "),vH=a("a"),D1r=o("TFLayoutLMForSequenceClassification"),G1r=o(" (LayoutLM model)"),O1r=l(),AC=a("li"),t1e=a("strong"),V1r=o("longformer"),X1r=o(" \u2014 "),FH=a("a"),z1r=o("TFLongformerForSequenceClassification"),W1r=o(" (Longformer model)"),Q1r=l(),yC=a("li"),a1e=a("strong"),H1r=o("mobilebert"),U1r=o(" \u2014 "),TH=a("a"),J1r=o("TFMobileBertForSequenceClassification"),Y1r=o(" (MobileBERT model)"),K1r=l(),LC=a("li"),n1e=a("strong"),Z1r=o("mpnet"),eTr=o(" \u2014 "),MH=a("a"),oTr=o("TFMPNetForSequenceClassification"),rTr=o(" (MPNet model)"),tTr=l(),xC=a("li"),s1e=a("strong"),aTr=o("openai-gpt"),nTr=o(" \u2014 "),EH=a("a"),sTr=o("TFOpenAIGPTForSequenceClassification"),lTr=o(" (OpenAI GPT model)"),iTr=l(),$C=a("li"),l1e=a("strong"),dTr=o("rembert"),cTr=o(" \u2014 "),CH=a("a"),mTr=o("TFRemBertForSequenceClassification"),fTr=o(" (RemBERT model)"),gTr=l(),kC=a("li"),i1e=a("strong"),hTr=o("roberta"),uTr=o(" \u2014 "),wH=a("a"),pTr=o("TFRobertaForSequenceClassification"),_Tr=o(" (RoBERTa model)"),bTr=l(),SC=a("li"),d1e=a("strong"),vTr=o("roformer"),FTr=o(" \u2014 "),AH=a("a"),TTr=o("TFRoFormerForSequenceClassification"),MTr=o(" (RoFormer model)"),ETr=l(),RC=a("li"),c1e=a("strong"),CTr=o("tapas"),wTr=o(" \u2014 "),yH=a("a"),ATr=o("TFTapasForSequenceClassification"),yTr=o(" (TAPAS model)"),LTr=l(),PC=a("li"),m1e=a("strong"),xTr=o("transfo-xl"),$Tr=o(" \u2014 "),LH=a("a"),kTr=o("TFTransfoXLForSequenceClassification"),STr=o(" (Transformer-XL model)"),RTr=l(),BC=a("li"),f1e=a("strong"),PTr=o("xlm"),BTr=o(" \u2014 "),xH=a("a"),ITr=o("TFXLMForSequenceClassification"),qTr=o(" (XLM model)"),NTr=l(),IC=a("li"),g1e=a("strong"),jTr=o("xlm-roberta"),DTr=o(" \u2014 "),$H=a("a"),GTr=o("TFXLMRobertaForSequenceClassification"),OTr=o(" (XLM-RoBERTa model)"),VTr=l(),qC=a("li"),h1e=a("strong"),XTr=o("xlnet"),zTr=o(" \u2014 "),kH=a("a"),WTr=o("TFXLNetForSequenceClassification"),QTr=o(" (XLNet model)"),HTr=l(),F(NC.$$.fragment),bNe=l(),lc=a("h2"),jC=a("a"),u1e=a("span"),F($7.$$.fragment),UTr=l(),p1e=a("span"),JTr=o("TFAutoModelForMultipleChoice"),vNe=l(),ar=a("div"),F(k7.$$.fragment),YTr=l(),ic=a("p"),KTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SH=a("a"),ZTr=o("from_pretrained()"),eMr=o(" class method or the "),RH=a("a"),oMr=o("from_config()"),rMr=o(` class
method.`),tMr=l(),S7=a("p"),aMr=o("This class cannot be instantiated directly using "),_1e=a("code"),nMr=o("__init__()"),sMr=o(" (throws an error)."),lMr=l(),Pt=a("div"),F(R7.$$.fragment),iMr=l(),b1e=a("p"),dMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cMr=l(),dc=a("p"),mMr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),fMr=o("not"),gMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),hMr=o("from_pretrained()"),uMr=o(" to load the model weights."),pMr=l(),F(DC.$$.fragment),_Mr=l(),Sr=a("div"),F(P7.$$.fragment),bMr=l(),F1e=a("p"),vMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FMr=l(),sn=a("p"),TMr=o("The model class to instantiate is selected based on the "),T1e=a("code"),MMr=o("model_type"),EMr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),AMr=o("pretrained_model_name_or_path"),yMr=o(":"),LMr=l(),he=a("ul"),GC=a("li"),C1e=a("strong"),xMr=o("albert"),$Mr=o(" \u2014 "),BH=a("a"),kMr=o("TFAlbertForMultipleChoice"),SMr=o(" (ALBERT model)"),RMr=l(),OC=a("li"),w1e=a("strong"),PMr=o("bert"),BMr=o(" \u2014 "),IH=a("a"),IMr=o("TFBertForMultipleChoice"),qMr=o(" (BERT model)"),NMr=l(),VC=a("li"),A1e=a("strong"),jMr=o("camembert"),DMr=o(" \u2014 "),qH=a("a"),GMr=o("TFCamembertForMultipleChoice"),OMr=o(" (CamemBERT model)"),VMr=l(),XC=a("li"),y1e=a("strong"),XMr=o("convbert"),zMr=o(" \u2014 "),NH=a("a"),WMr=o("TFConvBertForMultipleChoice"),QMr=o(" (ConvBERT model)"),HMr=l(),zC=a("li"),L1e=a("strong"),UMr=o("distilbert"),JMr=o(" \u2014 "),jH=a("a"),YMr=o("TFDistilBertForMultipleChoice"),KMr=o(" (DistilBERT model)"),ZMr=l(),WC=a("li"),x1e=a("strong"),e4r=o("electra"),o4r=o(" \u2014 "),DH=a("a"),r4r=o("TFElectraForMultipleChoice"),t4r=o(" (ELECTRA model)"),a4r=l(),QC=a("li"),$1e=a("strong"),n4r=o("flaubert"),s4r=o(" \u2014 "),GH=a("a"),l4r=o("TFFlaubertForMultipleChoice"),i4r=o(" (FlauBERT model)"),d4r=l(),HC=a("li"),k1e=a("strong"),c4r=o("funnel"),m4r=o(" \u2014 "),OH=a("a"),f4r=o("TFFunnelForMultipleChoice"),g4r=o(" (Funnel Transformer model)"),h4r=l(),UC=a("li"),S1e=a("strong"),u4r=o("longformer"),p4r=o(" \u2014 "),VH=a("a"),_4r=o("TFLongformerForMultipleChoice"),b4r=o(" (Longformer model)"),v4r=l(),JC=a("li"),R1e=a("strong"),F4r=o("mobilebert"),T4r=o(" \u2014 "),XH=a("a"),M4r=o("TFMobileBertForMultipleChoice"),E4r=o(" (MobileBERT model)"),C4r=l(),YC=a("li"),P1e=a("strong"),w4r=o("mpnet"),A4r=o(" \u2014 "),zH=a("a"),y4r=o("TFMPNetForMultipleChoice"),L4r=o(" (MPNet model)"),x4r=l(),KC=a("li"),B1e=a("strong"),$4r=o("rembert"),k4r=o(" \u2014 "),WH=a("a"),S4r=o("TFRemBertForMultipleChoice"),R4r=o(" (RemBERT model)"),P4r=l(),ZC=a("li"),I1e=a("strong"),B4r=o("roberta"),I4r=o(" \u2014 "),QH=a("a"),q4r=o("TFRobertaForMultipleChoice"),N4r=o(" (RoBERTa model)"),j4r=l(),e5=a("li"),q1e=a("strong"),D4r=o("roformer"),G4r=o(" \u2014 "),HH=a("a"),O4r=o("TFRoFormerForMultipleChoice"),V4r=o(" (RoFormer model)"),X4r=l(),o5=a("li"),N1e=a("strong"),z4r=o("xlm"),W4r=o(" \u2014 "),UH=a("a"),Q4r=o("TFXLMForMultipleChoice"),H4r=o(" (XLM model)"),U4r=l(),r5=a("li"),j1e=a("strong"),J4r=o("xlm-roberta"),Y4r=o(" \u2014 "),JH=a("a"),K4r=o("TFXLMRobertaForMultipleChoice"),Z4r=o(" (XLM-RoBERTa model)"),eEr=l(),t5=a("li"),D1e=a("strong"),oEr=o("xlnet"),rEr=o(" \u2014 "),YH=a("a"),tEr=o("TFXLNetForMultipleChoice"),aEr=o(" (XLNet model)"),nEr=l(),F(a5.$$.fragment),FNe=l(),cc=a("h2"),n5=a("a"),G1e=a("span"),F(B7.$$.fragment),sEr=l(),O1e=a("span"),lEr=o("TFAutoModelForNextSentencePrediction"),TNe=l(),nr=a("div"),F(I7.$$.fragment),iEr=l(),mc=a("p"),dEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KH=a("a"),cEr=o("from_pretrained()"),mEr=o(" class method or the "),ZH=a("a"),fEr=o("from_config()"),gEr=o(` class
method.`),hEr=l(),q7=a("p"),uEr=o("This class cannot be instantiated directly using "),V1e=a("code"),pEr=o("__init__()"),_Er=o(" (throws an error)."),bEr=l(),Bt=a("div"),F(N7.$$.fragment),vEr=l(),X1e=a("p"),FEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TEr=l(),fc=a("p"),MEr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),EEr=o("not"),CEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),wEr=o("from_pretrained()"),AEr=o(" to load the model weights."),yEr=l(),F(s5.$$.fragment),LEr=l(),Rr=a("div"),F(j7.$$.fragment),xEr=l(),W1e=a("p"),$Er=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kEr=l(),ln=a("p"),SEr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),REr=o("model_type"),PEr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),BEr=o("pretrained_model_name_or_path"),IEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),qEr=o("pretrained_model_name_or_path"),NEr=o(":"),jEr=l(),D7=a("ul"),l5=a("li"),J1e=a("strong"),DEr=o("bert"),GEr=o(" \u2014 "),oU=a("a"),OEr=o("TFBertForNextSentencePrediction"),VEr=o(" (BERT model)"),XEr=l(),i5=a("li"),Y1e=a("strong"),zEr=o("mobilebert"),WEr=o(" \u2014 "),rU=a("a"),QEr=o("TFMobileBertForNextSentencePrediction"),HEr=o(" (MobileBERT model)"),UEr=l(),F(d5.$$.fragment),MNe=l(),gc=a("h2"),c5=a("a"),K1e=a("span"),F(G7.$$.fragment),JEr=l(),Z1e=a("span"),YEr=o("TFAutoModelForTableQuestionAnswering"),ENe=l(),sr=a("div"),F(O7.$$.fragment),KEr=l(),hc=a("p"),ZEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tU=a("a"),eCr=o("from_pretrained()"),oCr=o(" class method or the "),aU=a("a"),rCr=o("from_config()"),tCr=o(` class
method.`),aCr=l(),V7=a("p"),nCr=o("This class cannot be instantiated directly using "),eTe=a("code"),sCr=o("__init__()"),lCr=o(" (throws an error)."),iCr=l(),It=a("div"),F(X7.$$.fragment),dCr=l(),oTe=a("p"),cCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mCr=l(),uc=a("p"),fCr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),gCr=o("not"),hCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),uCr=o("from_pretrained()"),pCr=o(" to load the model weights."),_Cr=l(),F(m5.$$.fragment),bCr=l(),Pr=a("div"),F(z7.$$.fragment),vCr=l(),tTe=a("p"),FCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TCr=l(),dn=a("p"),MCr=o("The model class to instantiate is selected based on the "),aTe=a("code"),ECr=o("model_type"),CCr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),yCr=o("pretrained_model_name_or_path"),LCr=o(":"),xCr=l(),lTe=a("ul"),f5=a("li"),iTe=a("strong"),$Cr=o("tapas"),kCr=o(" \u2014 "),sU=a("a"),SCr=o("TFTapasForQuestionAnswering"),RCr=o(" (TAPAS model)"),PCr=l(),F(g5.$$.fragment),CNe=l(),pc=a("h2"),h5=a("a"),dTe=a("span"),F(W7.$$.fragment),BCr=l(),cTe=a("span"),ICr=o("TFAutoModelForTokenClassification"),wNe=l(),lr=a("div"),F(Q7.$$.fragment),qCr=l(),_c=a("p"),NCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lU=a("a"),jCr=o("from_pretrained()"),DCr=o(" class method or the "),iU=a("a"),GCr=o("from_config()"),OCr=o(` class
method.`),VCr=l(),H7=a("p"),XCr=o("This class cannot be instantiated directly using "),mTe=a("code"),zCr=o("__init__()"),WCr=o(" (throws an error)."),QCr=l(),qt=a("div"),F(U7.$$.fragment),HCr=l(),fTe=a("p"),UCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JCr=l(),bc=a("p"),YCr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),KCr=o("not"),ZCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),e5r=o("from_pretrained()"),o5r=o(" to load the model weights."),r5r=l(),F(u5.$$.fragment),t5r=l(),Br=a("div"),F(J7.$$.fragment),a5r=l(),hTe=a("p"),n5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s5r=l(),cn=a("p"),l5r=o("The model class to instantiate is selected based on the "),uTe=a("code"),i5r=o("model_type"),d5r=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),c5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),f5r=o("pretrained_model_name_or_path"),g5r=o(":"),h5r=l(),de=a("ul"),p5=a("li"),bTe=a("strong"),u5r=o("albert"),p5r=o(" \u2014 "),cU=a("a"),_5r=o("TFAlbertForTokenClassification"),b5r=o(" (ALBERT model)"),v5r=l(),_5=a("li"),vTe=a("strong"),F5r=o("bert"),T5r=o(" \u2014 "),mU=a("a"),M5r=o("TFBertForTokenClassification"),E5r=o(" (BERT model)"),C5r=l(),b5=a("li"),FTe=a("strong"),w5r=o("camembert"),A5r=o(" \u2014 "),fU=a("a"),y5r=o("TFCamembertForTokenClassification"),L5r=o(" (CamemBERT model)"),x5r=l(),v5=a("li"),TTe=a("strong"),$5r=o("convbert"),k5r=o(" \u2014 "),gU=a("a"),S5r=o("TFConvBertForTokenClassification"),R5r=o(" (ConvBERT model)"),P5r=l(),F5=a("li"),MTe=a("strong"),B5r=o("deberta"),I5r=o(" \u2014 "),hU=a("a"),q5r=o("TFDebertaForTokenClassification"),N5r=o(" (DeBERTa model)"),j5r=l(),T5=a("li"),ETe=a("strong"),D5r=o("deberta-v2"),G5r=o(" \u2014 "),uU=a("a"),O5r=o("TFDebertaV2ForTokenClassification"),V5r=o(" (DeBERTa-v2 model)"),X5r=l(),M5=a("li"),CTe=a("strong"),z5r=o("distilbert"),W5r=o(" \u2014 "),pU=a("a"),Q5r=o("TFDistilBertForTokenClassification"),H5r=o(" (DistilBERT model)"),U5r=l(),E5=a("li"),wTe=a("strong"),J5r=o("electra"),Y5r=o(" \u2014 "),_U=a("a"),K5r=o("TFElectraForTokenClassification"),Z5r=o(" (ELECTRA model)"),e3r=l(),C5=a("li"),ATe=a("strong"),o3r=o("flaubert"),r3r=o(" \u2014 "),bU=a("a"),t3r=o("TFFlaubertForTokenClassification"),a3r=o(" (FlauBERT model)"),n3r=l(),w5=a("li"),yTe=a("strong"),s3r=o("funnel"),l3r=o(" \u2014 "),vU=a("a"),i3r=o("TFFunnelForTokenClassification"),d3r=o(" (Funnel Transformer model)"),c3r=l(),A5=a("li"),LTe=a("strong"),m3r=o("layoutlm"),f3r=o(" \u2014 "),FU=a("a"),g3r=o("TFLayoutLMForTokenClassification"),h3r=o(" (LayoutLM model)"),u3r=l(),y5=a("li"),xTe=a("strong"),p3r=o("longformer"),_3r=o(" \u2014 "),TU=a("a"),b3r=o("TFLongformerForTokenClassification"),v3r=o(" (Longformer model)"),F3r=l(),L5=a("li"),$Te=a("strong"),T3r=o("mobilebert"),M3r=o(" \u2014 "),MU=a("a"),E3r=o("TFMobileBertForTokenClassification"),C3r=o(" (MobileBERT model)"),w3r=l(),x5=a("li"),kTe=a("strong"),A3r=o("mpnet"),y3r=o(" \u2014 "),EU=a("a"),L3r=o("TFMPNetForTokenClassification"),x3r=o(" (MPNet model)"),$3r=l(),$5=a("li"),STe=a("strong"),k3r=o("rembert"),S3r=o(" \u2014 "),CU=a("a"),R3r=o("TFRemBertForTokenClassification"),P3r=o(" (RemBERT model)"),B3r=l(),k5=a("li"),RTe=a("strong"),I3r=o("roberta"),q3r=o(" \u2014 "),wU=a("a"),N3r=o("TFRobertaForTokenClassification"),j3r=o(" (RoBERTa model)"),D3r=l(),S5=a("li"),PTe=a("strong"),G3r=o("roformer"),O3r=o(" \u2014 "),AU=a("a"),V3r=o("TFRoFormerForTokenClassification"),X3r=o(" (RoFormer model)"),z3r=l(),R5=a("li"),BTe=a("strong"),W3r=o("xlm"),Q3r=o(" \u2014 "),yU=a("a"),H3r=o("TFXLMForTokenClassification"),U3r=o(" (XLM model)"),J3r=l(),P5=a("li"),ITe=a("strong"),Y3r=o("xlm-roberta"),K3r=o(" \u2014 "),LU=a("a"),Z3r=o("TFXLMRobertaForTokenClassification"),ewr=o(" (XLM-RoBERTa model)"),owr=l(),B5=a("li"),qTe=a("strong"),rwr=o("xlnet"),twr=o(" \u2014 "),xU=a("a"),awr=o("TFXLNetForTokenClassification"),nwr=o(" (XLNet model)"),swr=l(),F(I5.$$.fragment),ANe=l(),vc=a("h2"),q5=a("a"),NTe=a("span"),F(Y7.$$.fragment),lwr=l(),jTe=a("span"),iwr=o("TFAutoModelForQuestionAnswering"),yNe=l(),ir=a("div"),F(K7.$$.fragment),dwr=l(),Fc=a("p"),cwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$U=a("a"),mwr=o("from_pretrained()"),fwr=o(" class method or the "),kU=a("a"),gwr=o("from_config()"),hwr=o(` class
method.`),uwr=l(),Z7=a("p"),pwr=o("This class cannot be instantiated directly using "),DTe=a("code"),_wr=o("__init__()"),bwr=o(" (throws an error)."),vwr=l(),Nt=a("div"),F(e9.$$.fragment),Fwr=l(),GTe=a("p"),Twr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mwr=l(),Tc=a("p"),Ewr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),Cwr=o("not"),wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),Awr=o("from_pretrained()"),ywr=o(" to load the model weights."),Lwr=l(),F(N5.$$.fragment),xwr=l(),Ir=a("div"),F(o9.$$.fragment),$wr=l(),VTe=a("p"),kwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Swr=l(),mn=a("p"),Rwr=o("The model class to instantiate is selected based on the "),XTe=a("code"),Pwr=o("model_type"),Bwr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),Iwr=o("pretrained_model_name_or_path"),qwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),Nwr=o("pretrained_model_name_or_path"),jwr=o(":"),Dwr=l(),ce=a("ul"),j5=a("li"),QTe=a("strong"),Gwr=o("albert"),Owr=o(" \u2014 "),RU=a("a"),Vwr=o("TFAlbertForQuestionAnswering"),Xwr=o(" (ALBERT model)"),zwr=l(),D5=a("li"),HTe=a("strong"),Wwr=o("bert"),Qwr=o(" \u2014 "),PU=a("a"),Hwr=o("TFBertForQuestionAnswering"),Uwr=o(" (BERT model)"),Jwr=l(),G5=a("li"),UTe=a("strong"),Ywr=o("camembert"),Kwr=o(" \u2014 "),BU=a("a"),Zwr=o("TFCamembertForQuestionAnswering"),e0r=o(" (CamemBERT model)"),o0r=l(),O5=a("li"),JTe=a("strong"),r0r=o("convbert"),t0r=o(" \u2014 "),IU=a("a"),a0r=o("TFConvBertForQuestionAnswering"),n0r=o(" (ConvBERT model)"),s0r=l(),V5=a("li"),YTe=a("strong"),l0r=o("deberta"),i0r=o(" \u2014 "),qU=a("a"),d0r=o("TFDebertaForQuestionAnswering"),c0r=o(" (DeBERTa model)"),m0r=l(),X5=a("li"),KTe=a("strong"),f0r=o("deberta-v2"),g0r=o(" \u2014 "),NU=a("a"),h0r=o("TFDebertaV2ForQuestionAnswering"),u0r=o(" (DeBERTa-v2 model)"),p0r=l(),z5=a("li"),ZTe=a("strong"),_0r=o("distilbert"),b0r=o(" \u2014 "),jU=a("a"),v0r=o("TFDistilBertForQuestionAnswering"),F0r=o(" (DistilBERT model)"),T0r=l(),W5=a("li"),eMe=a("strong"),M0r=o("electra"),E0r=o(" \u2014 "),DU=a("a"),C0r=o("TFElectraForQuestionAnswering"),w0r=o(" (ELECTRA model)"),A0r=l(),Q5=a("li"),oMe=a("strong"),y0r=o("flaubert"),L0r=o(" \u2014 "),GU=a("a"),x0r=o("TFFlaubertForQuestionAnsweringSimple"),$0r=o(" (FlauBERT model)"),k0r=l(),H5=a("li"),rMe=a("strong"),S0r=o("funnel"),R0r=o(" \u2014 "),OU=a("a"),P0r=o("TFFunnelForQuestionAnswering"),B0r=o(" (Funnel Transformer model)"),I0r=l(),U5=a("li"),tMe=a("strong"),q0r=o("gptj"),N0r=o(" \u2014 "),VU=a("a"),j0r=o("TFGPTJForQuestionAnswering"),D0r=o(" (GPT-J model)"),G0r=l(),J5=a("li"),aMe=a("strong"),O0r=o("longformer"),V0r=o(" \u2014 "),XU=a("a"),X0r=o("TFLongformerForQuestionAnswering"),z0r=o(" (Longformer model)"),W0r=l(),Y5=a("li"),nMe=a("strong"),Q0r=o("mobilebert"),H0r=o(" \u2014 "),zU=a("a"),U0r=o("TFMobileBertForQuestionAnswering"),J0r=o(" (MobileBERT model)"),Y0r=l(),K5=a("li"),sMe=a("strong"),K0r=o("mpnet"),Z0r=o(" \u2014 "),WU=a("a"),eAr=o("TFMPNetForQuestionAnswering"),oAr=o(" (MPNet model)"),rAr=l(),Z5=a("li"),lMe=a("strong"),tAr=o("rembert"),aAr=o(" \u2014 "),QU=a("a"),nAr=o("TFRemBertForQuestionAnswering"),sAr=o(" (RemBERT model)"),lAr=l(),e3=a("li"),iMe=a("strong"),iAr=o("roberta"),dAr=o(" \u2014 "),HU=a("a"),cAr=o("TFRobertaForQuestionAnswering"),mAr=o(" (RoBERTa model)"),fAr=l(),o3=a("li"),dMe=a("strong"),gAr=o("roformer"),hAr=o(" \u2014 "),UU=a("a"),uAr=o("TFRoFormerForQuestionAnswering"),pAr=o(" (RoFormer model)"),_Ar=l(),r3=a("li"),cMe=a("strong"),bAr=o("xlm"),vAr=o(" \u2014 "),JU=a("a"),FAr=o("TFXLMForQuestionAnsweringSimple"),TAr=o(" (XLM model)"),MAr=l(),t3=a("li"),mMe=a("strong"),EAr=o("xlm-roberta"),CAr=o(" \u2014 "),YU=a("a"),wAr=o("TFXLMRobertaForQuestionAnswering"),AAr=o(" (XLM-RoBERTa model)"),yAr=l(),a3=a("li"),fMe=a("strong"),LAr=o("xlnet"),xAr=o(" \u2014 "),KU=a("a"),$Ar=o("TFXLNetForQuestionAnsweringSimple"),kAr=o(" (XLNet model)"),SAr=l(),F(n3.$$.fragment),LNe=l(),Mc=a("h2"),s3=a("a"),gMe=a("span"),F(r9.$$.fragment),RAr=l(),hMe=a("span"),PAr=o("TFAutoModelForVision2Seq"),xNe=l(),dr=a("div"),F(t9.$$.fragment),BAr=l(),Ec=a("p"),IAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZU=a("a"),qAr=o("from_pretrained()"),NAr=o(" class method or the "),eJ=a("a"),jAr=o("from_config()"),DAr=o(` class
method.`),GAr=l(),a9=a("p"),OAr=o("This class cannot be instantiated directly using "),uMe=a("code"),VAr=o("__init__()"),XAr=o(" (throws an error)."),zAr=l(),jt=a("div"),F(n9.$$.fragment),WAr=l(),pMe=a("p"),QAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HAr=l(),Cc=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),JAr=o("not"),YAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" to load the model weights."),e6r=l(),F(l3.$$.fragment),o6r=l(),qr=a("div"),F(s9.$$.fragment),r6r=l(),bMe=a("p"),t6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a6r=l(),fn=a("p"),n6r=o("The model class to instantiate is selected based on the "),vMe=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),c6r=o("pretrained_model_name_or_path"),m6r=o(":"),f6r=l(),MMe=a("ul"),i3=a("li"),EMe=a("strong"),g6r=o("vision-encoder-decoder"),h6r=o(" \u2014 "),rJ=a("a"),u6r=o("TFVisionEncoderDecoderModel"),p6r=o(" (Vision Encoder decoder model)"),_6r=l(),F(d3.$$.fragment),$Ne=l(),wc=a("h2"),c3=a("a"),CMe=a("span"),F(l9.$$.fragment),b6r=l(),wMe=a("span"),v6r=o("TFAutoModelForSpeechSeq2Seq"),kNe=l(),cr=a("div"),F(i9.$$.fragment),F6r=l(),Ac=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tJ=a("a"),M6r=o("from_pretrained()"),E6r=o(" class method or the "),aJ=a("a"),C6r=o("from_config()"),w6r=o(` class
method.`),A6r=l(),d9=a("p"),y6r=o("This class cannot be instantiated directly using "),AMe=a("code"),L6r=o("__init__()"),x6r=o(" (throws an error)."),$6r=l(),Dt=a("div"),F(c9.$$.fragment),k6r=l(),yMe=a("p"),S6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R6r=l(),yc=a("p"),P6r=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),B6r=o("not"),I6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),q6r=o("from_pretrained()"),N6r=o(" to load the model weights."),j6r=l(),F(m3.$$.fragment),D6r=l(),Nr=a("div"),F(m9.$$.fragment),G6r=l(),xMe=a("p"),O6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V6r=l(),gn=a("p"),X6r=o("The model class to instantiate is selected based on the "),$Me=a("code"),z6r=o("model_type"),W6r=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),Q6r=o("pretrained_model_name_or_path"),H6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),U6r=o("pretrained_model_name_or_path"),J6r=o(":"),Y6r=l(),RMe=a("ul"),f3=a("li"),PMe=a("strong"),K6r=o("speech_to_text"),Z6r=o(" \u2014 "),sJ=a("a"),eyr=o("TFSpeech2TextForConditionalGeneration"),oyr=o(" (Speech2Text model)"),ryr=l(),F(g3.$$.fragment),SNe=l(),Lc=a("h2"),h3=a("a"),BMe=a("span"),F(f9.$$.fragment),tyr=l(),IMe=a("span"),ayr=o("FlaxAutoModel"),RNe=l(),mr=a("div"),F(g9.$$.fragment),nyr=l(),xc=a("p"),syr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" class method or the "),iJ=a("a"),dyr=o("from_config()"),cyr=o(` class
method.`),myr=l(),h9=a("p"),fyr=o("This class cannot be instantiated directly using "),qMe=a("code"),gyr=o("__init__()"),hyr=o(" (throws an error)."),uyr=l(),Gt=a("div"),F(u9.$$.fragment),pyr=l(),NMe=a("p"),_yr=o("Instantiates one of the base model classes of the library from a configuration."),byr=l(),$c=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),Fyr=o("not"),Tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" to load the model weights."),Cyr=l(),F(u3.$$.fragment),wyr=l(),jr=a("div"),F(p9.$$.fragment),Ayr=l(),DMe=a("p"),yyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Lyr=l(),hn=a("p"),xyr=o("The model class to instantiate is selected based on the "),GMe=a("code"),$yr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(":"),Iyr=l(),te=a("ul"),p3=a("li"),XMe=a("strong"),qyr=o("albert"),Nyr=o(" \u2014 "),cJ=a("a"),jyr=o("FlaxAlbertModel"),Dyr=o(" (ALBERT model)"),Gyr=l(),_3=a("li"),zMe=a("strong"),Oyr=o("bart"),Vyr=o(" \u2014 "),mJ=a("a"),Xyr=o("FlaxBartModel"),zyr=o(" (BART model)"),Wyr=l(),b3=a("li"),WMe=a("strong"),Qyr=o("beit"),Hyr=o(" \u2014 "),fJ=a("a"),Uyr=o("FlaxBeitModel"),Jyr=o(" (BEiT model)"),Yyr=l(),v3=a("li"),QMe=a("strong"),Kyr=o("bert"),Zyr=o(" \u2014 "),gJ=a("a"),eLr=o("FlaxBertModel"),oLr=o(" (BERT model)"),rLr=l(),F3=a("li"),HMe=a("strong"),tLr=o("big_bird"),aLr=o(" \u2014 "),hJ=a("a"),nLr=o("FlaxBigBirdModel"),sLr=o(" (BigBird model)"),lLr=l(),T3=a("li"),UMe=a("strong"),iLr=o("blenderbot"),dLr=o(" \u2014 "),uJ=a("a"),cLr=o("FlaxBlenderbotModel"),mLr=o(" (Blenderbot model)"),fLr=l(),M3=a("li"),JMe=a("strong"),gLr=o("blenderbot-small"),hLr=o(" \u2014 "),pJ=a("a"),uLr=o("FlaxBlenderbotSmallModel"),pLr=o(" (BlenderbotSmall model)"),_Lr=l(),E3=a("li"),YMe=a("strong"),bLr=o("clip"),vLr=o(" \u2014 "),_J=a("a"),FLr=o("FlaxCLIPModel"),TLr=o(" (CLIP model)"),MLr=l(),C3=a("li"),KMe=a("strong"),ELr=o("distilbert"),CLr=o(" \u2014 "),bJ=a("a"),wLr=o("FlaxDistilBertModel"),ALr=o(" (DistilBERT model)"),yLr=l(),w3=a("li"),ZMe=a("strong"),LLr=o("electra"),xLr=o(" \u2014 "),vJ=a("a"),$Lr=o("FlaxElectraModel"),kLr=o(" (ELECTRA model)"),SLr=l(),A3=a("li"),e4e=a("strong"),RLr=o("gpt2"),PLr=o(" \u2014 "),FJ=a("a"),BLr=o("FlaxGPT2Model"),ILr=o(" (OpenAI GPT-2 model)"),qLr=l(),y3=a("li"),o4e=a("strong"),NLr=o("gpt_neo"),jLr=o(" \u2014 "),TJ=a("a"),DLr=o("FlaxGPTNeoModel"),GLr=o(" (GPT Neo model)"),OLr=l(),L3=a("li"),r4e=a("strong"),VLr=o("gptj"),XLr=o(" \u2014 "),MJ=a("a"),zLr=o("FlaxGPTJModel"),WLr=o(" (GPT-J model)"),QLr=l(),x3=a("li"),t4e=a("strong"),HLr=o("marian"),ULr=o(" \u2014 "),EJ=a("a"),JLr=o("FlaxMarianModel"),YLr=o(" (Marian model)"),KLr=l(),$3=a("li"),a4e=a("strong"),ZLr=o("mbart"),e8r=o(" \u2014 "),CJ=a("a"),o8r=o("FlaxMBartModel"),r8r=o(" (mBART model)"),t8r=l(),k3=a("li"),n4e=a("strong"),a8r=o("mt5"),n8r=o(" \u2014 "),wJ=a("a"),s8r=o("FlaxMT5Model"),l8r=o(" (mT5 model)"),i8r=l(),S3=a("li"),s4e=a("strong"),d8r=o("pegasus"),c8r=o(" \u2014 "),AJ=a("a"),m8r=o("FlaxPegasusModel"),f8r=o(" (Pegasus model)"),g8r=l(),R3=a("li"),l4e=a("strong"),h8r=o("roberta"),u8r=o(" \u2014 "),yJ=a("a"),p8r=o("FlaxRobertaModel"),_8r=o(" (RoBERTa model)"),b8r=l(),P3=a("li"),i4e=a("strong"),v8r=o("roformer"),F8r=o(" \u2014 "),LJ=a("a"),T8r=o("FlaxRoFormerModel"),M8r=o(" (RoFormer model)"),E8r=l(),B3=a("li"),d4e=a("strong"),C8r=o("t5"),w8r=o(" \u2014 "),xJ=a("a"),A8r=o("FlaxT5Model"),y8r=o(" (T5 model)"),L8r=l(),I3=a("li"),c4e=a("strong"),x8r=o("vision-text-dual-encoder"),$8r=o(" \u2014 "),$J=a("a"),k8r=o("FlaxVisionTextDualEncoderModel"),S8r=o(" (VisionTextDualEncoder model)"),R8r=l(),q3=a("li"),m4e=a("strong"),P8r=o("vit"),B8r=o(" \u2014 "),kJ=a("a"),I8r=o("FlaxViTModel"),q8r=o(" (ViT model)"),N8r=l(),N3=a("li"),f4e=a("strong"),j8r=o("wav2vec2"),D8r=o(" \u2014 "),SJ=a("a"),G8r=o("FlaxWav2Vec2Model"),O8r=o(" (Wav2Vec2 model)"),V8r=l(),j3=a("li"),g4e=a("strong"),X8r=o("xglm"),z8r=o(" \u2014 "),RJ=a("a"),W8r=o("FlaxXGLMModel"),Q8r=o(" (XGLM model)"),H8r=l(),D3=a("li"),h4e=a("strong"),U8r=o("xlm-roberta"),J8r=o(" \u2014 "),PJ=a("a"),Y8r=o("FlaxXLMRobertaModel"),K8r=o(" (XLM-RoBERTa model)"),Z8r=l(),F(G3.$$.fragment),PNe=l(),kc=a("h2"),O3=a("a"),u4e=a("span"),F(_9.$$.fragment),e7r=l(),p4e=a("span"),o7r=o("FlaxAutoModelForCausalLM"),BNe=l(),fr=a("div"),F(b9.$$.fragment),r7r=l(),Sc=a("p"),t7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=a("a"),a7r=o("from_pretrained()"),n7r=o(" class method or the "),IJ=a("a"),s7r=o("from_config()"),l7r=o(` class
method.`),i7r=l(),v9=a("p"),d7r=o("This class cannot be instantiated directly using "),_4e=a("code"),c7r=o("__init__()"),m7r=o(" (throws an error)."),f7r=l(),Ot=a("div"),F(F9.$$.fragment),g7r=l(),b4e=a("p"),h7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u7r=l(),Rc=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),_7r=o("not"),b7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),v7r=o("from_pretrained()"),F7r=o(" to load the model weights."),T7r=l(),F(V3.$$.fragment),M7r=l(),Dr=a("div"),F(T9.$$.fragment),E7r=l(),F4e=a("p"),C7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w7r=l(),un=a("p"),A7r=o("The model class to instantiate is selected based on the "),T4e=a("code"),y7r=o("model_type"),L7r=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(":"),R7r=l(),Re=a("ul"),X3=a("li"),C4e=a("strong"),P7r=o("bart"),B7r=o(" \u2014 "),NJ=a("a"),I7r=o("FlaxBartForCausalLM"),q7r=o(" (BART model)"),N7r=l(),z3=a("li"),w4e=a("strong"),j7r=o("bert"),D7r=o(" \u2014 "),jJ=a("a"),G7r=o("FlaxBertForCausalLM"),O7r=o(" (BERT model)"),V7r=l(),W3=a("li"),A4e=a("strong"),X7r=o("big_bird"),z7r=o(" \u2014 "),DJ=a("a"),W7r=o("FlaxBigBirdForCausalLM"),Q7r=o(" (BigBird model)"),H7r=l(),Q3=a("li"),y4e=a("strong"),U7r=o("electra"),J7r=o(" \u2014 "),GJ=a("a"),Y7r=o("FlaxElectraForCausalLM"),K7r=o(" (ELECTRA model)"),Z7r=l(),H3=a("li"),L4e=a("strong"),e9r=o("gpt2"),o9r=o(" \u2014 "),OJ=a("a"),r9r=o("FlaxGPT2LMHeadModel"),t9r=o(" (OpenAI GPT-2 model)"),a9r=l(),U3=a("li"),x4e=a("strong"),n9r=o("gpt_neo"),s9r=o(" \u2014 "),VJ=a("a"),l9r=o("FlaxGPTNeoForCausalLM"),i9r=o(" (GPT Neo model)"),d9r=l(),J3=a("li"),$4e=a("strong"),c9r=o("gptj"),m9r=o(" \u2014 "),XJ=a("a"),f9r=o("FlaxGPTJForCausalLM"),g9r=o(" (GPT-J model)"),h9r=l(),Y3=a("li"),k4e=a("strong"),u9r=o("roberta"),p9r=o(" \u2014 "),zJ=a("a"),_9r=o("FlaxRobertaForCausalLM"),b9r=o(" (RoBERTa model)"),v9r=l(),K3=a("li"),S4e=a("strong"),F9r=o("xglm"),T9r=o(" \u2014 "),WJ=a("a"),M9r=o("FlaxXGLMForCausalLM"),E9r=o(" (XGLM model)"),C9r=l(),F(Z3.$$.fragment),INe=l(),Pc=a("h2"),ew=a("a"),R4e=a("span"),F(M9.$$.fragment),w9r=l(),P4e=a("span"),A9r=o("FlaxAutoModelForPreTraining"),qNe=l(),gr=a("div"),F(E9.$$.fragment),y9r=l(),Bc=a("p"),L9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QJ=a("a"),x9r=o("from_pretrained()"),$9r=o(" class method or the "),HJ=a("a"),k9r=o("from_config()"),S9r=o(` class
method.`),R9r=l(),C9=a("p"),P9r=o("This class cannot be instantiated directly using "),B4e=a("code"),B9r=o("__init__()"),I9r=o(" (throws an error)."),q9r=l(),Vt=a("div"),F(w9.$$.fragment),N9r=l(),I4e=a("p"),j9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D9r=l(),Ic=a("p"),G9r=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),O9r=o("not"),V9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),X9r=o("from_pretrained()"),z9r=o(" to load the model weights."),W9r=l(),F(ow.$$.fragment),Q9r=l(),Gr=a("div"),F(A9.$$.fragment),H9r=l(),N4e=a("p"),U9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J9r=l(),pn=a("p"),Y9r=o("The model class to instantiate is selected based on the "),j4e=a("code"),K9r=o("model_type"),Z9r=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(":"),axr=l(),Ee=a("ul"),rw=a("li"),O4e=a("strong"),nxr=o("albert"),sxr=o(" \u2014 "),JJ=a("a"),lxr=o("FlaxAlbertForPreTraining"),ixr=o(" (ALBERT model)"),dxr=l(),tw=a("li"),V4e=a("strong"),cxr=o("bart"),mxr=o(" \u2014 "),YJ=a("a"),fxr=o("FlaxBartForConditionalGeneration"),gxr=o(" (BART model)"),hxr=l(),aw=a("li"),X4e=a("strong"),uxr=o("bert"),pxr=o(" \u2014 "),KJ=a("a"),_xr=o("FlaxBertForPreTraining"),bxr=o(" (BERT model)"),vxr=l(),nw=a("li"),z4e=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),ZJ=a("a"),Mxr=o("FlaxBigBirdForPreTraining"),Exr=o(" (BigBird model)"),Cxr=l(),sw=a("li"),W4e=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),eY=a("a"),yxr=o("FlaxElectraForPreTraining"),Lxr=o(" (ELECTRA model)"),xxr=l(),lw=a("li"),Q4e=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),oY=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Pxr=l(),iw=a("li"),H4e=a("strong"),Bxr=o("mt5"),Ixr=o(" \u2014 "),rY=a("a"),qxr=o("FlaxMT5ForConditionalGeneration"),Nxr=o(" (mT5 model)"),jxr=l(),dw=a("li"),U4e=a("strong"),Dxr=o("roberta"),Gxr=o(" \u2014 "),tY=a("a"),Oxr=o("FlaxRobertaForMaskedLM"),Vxr=o(" (RoBERTa model)"),Xxr=l(),cw=a("li"),J4e=a("strong"),zxr=o("roformer"),Wxr=o(" \u2014 "),aY=a("a"),Qxr=o("FlaxRoFormerForMaskedLM"),Hxr=o(" (RoFormer model)"),Uxr=l(),mw=a("li"),Y4e=a("strong"),Jxr=o("t5"),Yxr=o(" \u2014 "),nY=a("a"),Kxr=o("FlaxT5ForConditionalGeneration"),Zxr=o(" (T5 model)"),e$r=l(),fw=a("li"),K4e=a("strong"),o$r=o("wav2vec2"),r$r=o(" \u2014 "),sY=a("a"),t$r=o("FlaxWav2Vec2ForPreTraining"),a$r=o(" (Wav2Vec2 model)"),n$r=l(),gw=a("li"),Z4e=a("strong"),s$r=o("xlm-roberta"),l$r=o(" \u2014 "),lY=a("a"),i$r=o("FlaxXLMRobertaForMaskedLM"),d$r=o(" (XLM-RoBERTa model)"),c$r=l(),F(hw.$$.fragment),NNe=l(),qc=a("h2"),uw=a("a"),eEe=a("span"),F(y9.$$.fragment),m$r=l(),oEe=a("span"),f$r=o("FlaxAutoModelForMaskedLM"),jNe=l(),hr=a("div"),F(L9.$$.fragment),g$r=l(),Nc=a("p"),h$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=a("a"),u$r=o("from_pretrained()"),p$r=o(" class method or the "),dY=a("a"),_$r=o("from_config()"),b$r=o(` class
method.`),v$r=l(),x9=a("p"),F$r=o("This class cannot be instantiated directly using "),rEe=a("code"),T$r=o("__init__()"),M$r=o(" (throws an error)."),E$r=l(),Xt=a("div"),F($9.$$.fragment),C$r=l(),tEe=a("p"),w$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A$r=l(),jc=a("p"),y$r=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),L$r=o("not"),x$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),$$r=o("from_pretrained()"),k$r=o(" to load the model weights."),S$r=l(),F(pw.$$.fragment),R$r=l(),Or=a("div"),F(k9.$$.fragment),P$r=l(),nEe=a("p"),B$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I$r=l(),_n=a("p"),q$r=o("The model class to instantiate is selected based on the "),sEe=a("code"),N$r=o("model_type"),j$r=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),D$r=o("pretrained_model_name_or_path"),G$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),O$r=o("pretrained_model_name_or_path"),V$r=o(":"),X$r=l(),Le=a("ul"),_w=a("li"),dEe=a("strong"),z$r=o("albert"),W$r=o(" \u2014 "),mY=a("a"),Q$r=o("FlaxAlbertForMaskedLM"),H$r=o(" (ALBERT model)"),U$r=l(),bw=a("li"),cEe=a("strong"),J$r=o("bart"),Y$r=o(" \u2014 "),fY=a("a"),K$r=o("FlaxBartForConditionalGeneration"),Z$r=o(" (BART model)"),ekr=l(),vw=a("li"),mEe=a("strong"),okr=o("bert"),rkr=o(" \u2014 "),gY=a("a"),tkr=o("FlaxBertForMaskedLM"),akr=o(" (BERT model)"),nkr=l(),Fw=a("li"),fEe=a("strong"),skr=o("big_bird"),lkr=o(" \u2014 "),hY=a("a"),ikr=o("FlaxBigBirdForMaskedLM"),dkr=o(" (BigBird model)"),ckr=l(),Tw=a("li"),gEe=a("strong"),mkr=o("distilbert"),fkr=o(" \u2014 "),uY=a("a"),gkr=o("FlaxDistilBertForMaskedLM"),hkr=o(" (DistilBERT model)"),ukr=l(),Mw=a("li"),hEe=a("strong"),pkr=o("electra"),_kr=o(" \u2014 "),pY=a("a"),bkr=o("FlaxElectraForMaskedLM"),vkr=o(" (ELECTRA model)"),Fkr=l(),Ew=a("li"),uEe=a("strong"),Tkr=o("mbart"),Mkr=o(" \u2014 "),_Y=a("a"),Ekr=o("FlaxMBartForConditionalGeneration"),Ckr=o(" (mBART model)"),wkr=l(),Cw=a("li"),pEe=a("strong"),Akr=o("roberta"),ykr=o(" \u2014 "),bY=a("a"),Lkr=o("FlaxRobertaForMaskedLM"),xkr=o(" (RoBERTa model)"),$kr=l(),ww=a("li"),_Ee=a("strong"),kkr=o("roformer"),Skr=o(" \u2014 "),vY=a("a"),Rkr=o("FlaxRoFormerForMaskedLM"),Pkr=o(" (RoFormer model)"),Bkr=l(),Aw=a("li"),bEe=a("strong"),Ikr=o("xlm-roberta"),qkr=o(" \u2014 "),FY=a("a"),Nkr=o("FlaxXLMRobertaForMaskedLM"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),F(yw.$$.fragment),DNe=l(),Dc=a("h2"),Lw=a("a"),vEe=a("span"),F(S9.$$.fragment),Gkr=l(),FEe=a("span"),Okr=o("FlaxAutoModelForSeq2SeqLM"),GNe=l(),ur=a("div"),F(R9.$$.fragment),Vkr=l(),Gc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TY=a("a"),zkr=o("from_pretrained()"),Wkr=o(" class method or the "),MY=a("a"),Qkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),P9=a("p"),Jkr=o("This class cannot be instantiated directly using "),TEe=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),zt=a("div"),F(B9.$$.fragment),eSr=l(),MEe=a("p"),oSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rSr=l(),Oc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(xw.$$.fragment),dSr=l(),Vr=a("div"),F(I9.$$.fragment),cSr=l(),CEe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fSr=l(),bn=a("p"),gSr=o("The model class to instantiate is selected based on the "),wEe=a("code"),hSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Pe=a("ul"),$w=a("li"),LEe=a("strong"),TSr=o("bart"),MSr=o(" \u2014 "),CY=a("a"),ESr=o("FlaxBartForConditionalGeneration"),CSr=o(" (BART model)"),wSr=l(),kw=a("li"),xEe=a("strong"),ASr=o("blenderbot"),ySr=o(" \u2014 "),wY=a("a"),LSr=o("FlaxBlenderbotForConditionalGeneration"),xSr=o(" (Blenderbot model)"),$Sr=l(),Sw=a("li"),$Ee=a("strong"),kSr=o("blenderbot-small"),SSr=o(" \u2014 "),AY=a("a"),RSr=o("FlaxBlenderbotSmallForConditionalGeneration"),PSr=o(" (BlenderbotSmall model)"),BSr=l(),Rw=a("li"),kEe=a("strong"),ISr=o("encoder-decoder"),qSr=o(" \u2014 "),yY=a("a"),NSr=o("FlaxEncoderDecoderModel"),jSr=o(" (Encoder decoder model)"),DSr=l(),Pw=a("li"),SEe=a("strong"),GSr=o("marian"),OSr=o(" \u2014 "),LY=a("a"),VSr=o("FlaxMarianMTModel"),XSr=o(" (Marian model)"),zSr=l(),Bw=a("li"),REe=a("strong"),WSr=o("mbart"),QSr=o(" \u2014 "),xY=a("a"),HSr=o("FlaxMBartForConditionalGeneration"),USr=o(" (mBART model)"),JSr=l(),Iw=a("li"),PEe=a("strong"),YSr=o("mt5"),KSr=o(" \u2014 "),$Y=a("a"),ZSr=o("FlaxMT5ForConditionalGeneration"),eRr=o(" (mT5 model)"),oRr=l(),qw=a("li"),BEe=a("strong"),rRr=o("pegasus"),tRr=o(" \u2014 "),kY=a("a"),aRr=o("FlaxPegasusForConditionalGeneration"),nRr=o(" (Pegasus model)"),sRr=l(),Nw=a("li"),IEe=a("strong"),lRr=o("t5"),iRr=o(" \u2014 "),SY=a("a"),dRr=o("FlaxT5ForConditionalGeneration"),cRr=o(" (T5 model)"),mRr=l(),F(jw.$$.fragment),ONe=l(),Vc=a("h2"),Dw=a("a"),qEe=a("span"),F(q9.$$.fragment),fRr=l(),NEe=a("span"),gRr=o("FlaxAutoModelForSequenceClassification"),VNe=l(),pr=a("div"),F(N9.$$.fragment),hRr=l(),Xc=a("p"),uRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RY=a("a"),pRr=o("from_pretrained()"),_Rr=o(" class method or the "),PY=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),j9=a("p"),TRr=o("This class cannot be instantiated directly using "),jEe=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Wt=a("div"),F(D9.$$.fragment),wRr=l(),DEe=a("p"),ARr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yRr=l(),zc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(Gw.$$.fragment),PRr=l(),Xr=a("div"),F(G9.$$.fragment),BRr=l(),OEe=a("p"),IRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qRr=l(),vn=a("p"),NRr=o("The model class to instantiate is selected based on the "),VEe=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),xe=a("ul"),Ow=a("li"),WEe=a("strong"),WRr=o("albert"),QRr=o(" \u2014 "),IY=a("a"),HRr=o("FlaxAlbertForSequenceClassification"),URr=o(" (ALBERT model)"),JRr=l(),Vw=a("li"),QEe=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),qY=a("a"),ZRr=o("FlaxBartForSequenceClassification"),ePr=o(" (BART model)"),oPr=l(),Xw=a("li"),HEe=a("strong"),rPr=o("bert"),tPr=o(" \u2014 "),NY=a("a"),aPr=o("FlaxBertForSequenceClassification"),nPr=o(" (BERT model)"),sPr=l(),zw=a("li"),UEe=a("strong"),lPr=o("big_bird"),iPr=o(" \u2014 "),jY=a("a"),dPr=o("FlaxBigBirdForSequenceClassification"),cPr=o(" (BigBird model)"),mPr=l(),Ww=a("li"),JEe=a("strong"),fPr=o("distilbert"),gPr=o(" \u2014 "),DY=a("a"),hPr=o("FlaxDistilBertForSequenceClassification"),uPr=o(" (DistilBERT model)"),pPr=l(),Qw=a("li"),YEe=a("strong"),_Pr=o("electra"),bPr=o(" \u2014 "),GY=a("a"),vPr=o("FlaxElectraForSequenceClassification"),FPr=o(" (ELECTRA model)"),TPr=l(),Hw=a("li"),KEe=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),OY=a("a"),CPr=o("FlaxMBartForSequenceClassification"),wPr=o(" (mBART model)"),APr=l(),Uw=a("li"),ZEe=a("strong"),yPr=o("roberta"),LPr=o(" \u2014 "),VY=a("a"),xPr=o("FlaxRobertaForSequenceClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),Jw=a("li"),eCe=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),XY=a("a"),PPr=o("FlaxRoFormerForSequenceClassification"),BPr=o(" (RoFormer model)"),IPr=l(),Yw=a("li"),oCe=a("strong"),qPr=o("xlm-roberta"),NPr=o(" \u2014 "),zY=a("a"),jPr=o("FlaxXLMRobertaForSequenceClassification"),DPr=o(" (XLM-RoBERTa model)"),GPr=l(),F(Kw.$$.fragment),XNe=l(),Wc=a("h2"),Zw=a("a"),rCe=a("span"),F(O9.$$.fragment),OPr=l(),tCe=a("span"),VPr=o("FlaxAutoModelForQuestionAnswering"),zNe=l(),_r=a("div"),F(V9.$$.fragment),XPr=l(),Qc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WY=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),QY=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),X9=a("p"),YPr=o("This class cannot be instantiated directly using "),aCe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Qt=a("div"),F(z9.$$.fragment),oBr=l(),nCe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tBr=l(),Hc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(e0.$$.fragment),cBr=l(),zr=a("div"),F(W9.$$.fragment),mBr=l(),lCe=a("p"),fBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gBr=l(),Fn=a("p"),hBr=o("The model class to instantiate is selected based on the "),iCe=a("code"),uBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),_Br=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),$e=a("ul"),o0=a("li"),mCe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),UY=a("a"),CBr=o("FlaxAlbertForQuestionAnswering"),wBr=o(" (ALBERT model)"),ABr=l(),r0=a("li"),fCe=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),JY=a("a"),xBr=o("FlaxBartForQuestionAnswering"),$Br=o(" (BART model)"),kBr=l(),t0=a("li"),gCe=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),YY=a("a"),PBr=o("FlaxBertForQuestionAnswering"),BBr=o(" (BERT model)"),IBr=l(),a0=a("li"),hCe=a("strong"),qBr=o("big_bird"),NBr=o(" \u2014 "),KY=a("a"),jBr=o("FlaxBigBirdForQuestionAnswering"),DBr=o(" (BigBird model)"),GBr=l(),n0=a("li"),uCe=a("strong"),OBr=o("distilbert"),VBr=o(" \u2014 "),ZY=a("a"),XBr=o("FlaxDistilBertForQuestionAnswering"),zBr=o(" (DistilBERT model)"),WBr=l(),s0=a("li"),pCe=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),eK=a("a"),UBr=o("FlaxElectraForQuestionAnswering"),JBr=o(" (ELECTRA model)"),YBr=l(),l0=a("li"),_Ce=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),oK=a("a"),eIr=o("FlaxMBartForQuestionAnswering"),oIr=o(" (mBART model)"),rIr=l(),i0=a("li"),bCe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),rK=a("a"),nIr=o("FlaxRobertaForQuestionAnswering"),sIr=o(" (RoBERTa model)"),lIr=l(),d0=a("li"),vCe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),tK=a("a"),cIr=o("FlaxRoFormerForQuestionAnswering"),mIr=o(" (RoFormer model)"),fIr=l(),c0=a("li"),FCe=a("strong"),gIr=o("xlm-roberta"),hIr=o(" \u2014 "),aK=a("a"),uIr=o("FlaxXLMRobertaForQuestionAnswering"),pIr=o(" (XLM-RoBERTa model)"),_Ir=l(),F(m0.$$.fragment),WNe=l(),Uc=a("h2"),f0=a("a"),TCe=a("span"),F(Q9.$$.fragment),bIr=l(),MCe=a("span"),vIr=o("FlaxAutoModelForTokenClassification"),QNe=l(),br=a("div"),F(H9.$$.fragment),FIr=l(),Jc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),sK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),U9=a("p"),yIr=o("This class cannot be instantiated directly using "),ECe=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Ht=a("div"),F(J9.$$.fragment),kIr=l(),CCe=a("p"),SIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RIr=l(),Yc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),qIr=o("from_pretrained()"),NIr=o(" to load the model weights."),jIr=l(),F(g0.$$.fragment),DIr=l(),Wr=a("div"),F(Y9.$$.fragment),GIr=l(),ACe=a("p"),OIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VIr=l(),Tn=a("p"),XIr=o("The model class to instantiate is selected based on the "),yCe=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),De=a("ul"),h0=a("li"),$Ce=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),iK=a("a"),eqr=o("FlaxAlbertForTokenClassification"),oqr=o(" (ALBERT model)"),rqr=l(),u0=a("li"),kCe=a("strong"),tqr=o("bert"),aqr=o(" \u2014 "),dK=a("a"),nqr=o("FlaxBertForTokenClassification"),sqr=o(" (BERT model)"),lqr=l(),p0=a("li"),SCe=a("strong"),iqr=o("big_bird"),dqr=o(" \u2014 "),cK=a("a"),cqr=o("FlaxBigBirdForTokenClassification"),mqr=o(" (BigBird model)"),fqr=l(),_0=a("li"),RCe=a("strong"),gqr=o("distilbert"),hqr=o(" \u2014 "),mK=a("a"),uqr=o("FlaxDistilBertForTokenClassification"),pqr=o(" (DistilBERT model)"),_qr=l(),b0=a("li"),PCe=a("strong"),bqr=o("electra"),vqr=o(" \u2014 "),fK=a("a"),Fqr=o("FlaxElectraForTokenClassification"),Tqr=o(" (ELECTRA model)"),Mqr=l(),v0=a("li"),BCe=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),gK=a("a"),wqr=o("FlaxRobertaForTokenClassification"),Aqr=o(" (RoBERTa model)"),yqr=l(),F0=a("li"),ICe=a("strong"),Lqr=o("roformer"),xqr=o(" \u2014 "),hK=a("a"),$qr=o("FlaxRoFormerForTokenClassification"),kqr=o(" (RoFormer model)"),Sqr=l(),T0=a("li"),qCe=a("strong"),Rqr=o("xlm-roberta"),Pqr=o(" \u2014 "),uK=a("a"),Bqr=o("FlaxXLMRobertaForTokenClassification"),Iqr=o(" (XLM-RoBERTa model)"),qqr=l(),F(M0.$$.fragment),HNe=l(),Kc=a("h2"),E0=a("a"),NCe=a("span"),F(K9.$$.fragment),Nqr=l(),jCe=a("span"),jqr=o("FlaxAutoModelForMultipleChoice"),UNe=l(),vr=a("div"),F(Z9.$$.fragment),Dqr=l(),Zc=a("p"),Gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=a("a"),Oqr=o("from_pretrained()"),Vqr=o(" class method or the "),_K=a("a"),Xqr=o("from_config()"),zqr=o(` class
method.`),Wqr=l(),ex=a("p"),Qqr=o("This class cannot be instantiated directly using "),DCe=a("code"),Hqr=o("__init__()"),Uqr=o(" (throws an error)."),Jqr=l(),Ut=a("div"),F(ox.$$.fragment),Yqr=l(),GCe=a("p"),Kqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zqr=l(),em=a("p"),eNr=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),oNr=o("not"),rNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),tNr=o("from_pretrained()"),aNr=o(" to load the model weights."),nNr=l(),F(C0.$$.fragment),sNr=l(),Qr=a("div"),F(rx.$$.fragment),lNr=l(),VCe=a("p"),iNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNr=l(),Mn=a("p"),cNr=o("The model class to instantiate is selected based on the "),XCe=a("code"),mNr=o("model_type"),fNr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),uNr=o("pretrained_model_name_or_path"),pNr=o(":"),_Nr=l(),Ge=a("ul"),w0=a("li"),QCe=a("strong"),bNr=o("albert"),vNr=o(" \u2014 "),vK=a("a"),FNr=o("FlaxAlbertForMultipleChoice"),TNr=o(" (ALBERT model)"),MNr=l(),A0=a("li"),HCe=a("strong"),ENr=o("bert"),CNr=o(" \u2014 "),FK=a("a"),wNr=o("FlaxBertForMultipleChoice"),ANr=o(" (BERT model)"),yNr=l(),y0=a("li"),UCe=a("strong"),LNr=o("big_bird"),xNr=o(" \u2014 "),TK=a("a"),$Nr=o("FlaxBigBirdForMultipleChoice"),kNr=o(" (BigBird model)"),SNr=l(),L0=a("li"),JCe=a("strong"),RNr=o("distilbert"),PNr=o(" \u2014 "),MK=a("a"),BNr=o("FlaxDistilBertForMultipleChoice"),INr=o(" (DistilBERT model)"),qNr=l(),x0=a("li"),YCe=a("strong"),NNr=o("electra"),jNr=o(" \u2014 "),EK=a("a"),DNr=o("FlaxElectraForMultipleChoice"),GNr=o(" (ELECTRA model)"),ONr=l(),$0=a("li"),KCe=a("strong"),VNr=o("roberta"),XNr=o(" \u2014 "),CK=a("a"),zNr=o("FlaxRobertaForMultipleChoice"),WNr=o(" (RoBERTa model)"),QNr=l(),k0=a("li"),ZCe=a("strong"),HNr=o("roformer"),UNr=o(" \u2014 "),wK=a("a"),JNr=o("FlaxRoFormerForMultipleChoice"),YNr=o(" (RoFormer model)"),KNr=l(),S0=a("li"),e5e=a("strong"),ZNr=o("xlm-roberta"),ejr=o(" \u2014 "),AK=a("a"),ojr=o("FlaxXLMRobertaForMultipleChoice"),rjr=o(" (XLM-RoBERTa model)"),tjr=l(),F(R0.$$.fragment),JNe=l(),om=a("h2"),P0=a("a"),o5e=a("span"),F(tx.$$.fragment),ajr=l(),r5e=a("span"),njr=o("FlaxAutoModelForNextSentencePrediction"),YNe=l(),Fr=a("div"),F(ax.$$.fragment),sjr=l(),rm=a("p"),ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yK=a("a"),ijr=o("from_pretrained()"),djr=o(" class method or the "),LK=a("a"),cjr=o("from_config()"),mjr=o(` class
method.`),fjr=l(),nx=a("p"),gjr=o("This class cannot be instantiated directly using "),t5e=a("code"),hjr=o("__init__()"),ujr=o(" (throws an error)."),pjr=l(),Jt=a("div"),F(sx.$$.fragment),_jr=l(),a5e=a("p"),bjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vjr=l(),tm=a("p"),Fjr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),Tjr=o("not"),Mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" to load the model weights."),wjr=l(),F(B0.$$.fragment),Ajr=l(),Hr=a("div"),F(lx.$$.fragment),yjr=l(),s5e=a("p"),Ljr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xjr=l(),En=a("p"),$jr=o("The model class to instantiate is selected based on the "),l5e=a("code"),kjr=o("model_type"),Sjr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),Rjr=o("pretrained_model_name_or_path"),Pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(":"),qjr=l(),c5e=a("ul"),I0=a("li"),m5e=a("strong"),Njr=o("bert"),jjr=o(" \u2014 "),$K=a("a"),Djr=o("FlaxBertForNextSentencePrediction"),Gjr=o(" (BERT model)"),Ojr=l(),F(q0.$$.fragment),KNe=l(),am=a("h2"),N0=a("a"),f5e=a("span"),F(ix.$$.fragment),Vjr=l(),g5e=a("span"),Xjr=o("FlaxAutoModelForImageClassification"),ZNe=l(),Tr=a("div"),F(dx.$$.fragment),zjr=l(),nm=a("p"),Wjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kK=a("a"),Qjr=o("from_pretrained()"),Hjr=o(" class method or the "),SK=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),cx=a("p"),Kjr=o("This class cannot be instantiated directly using "),h5e=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Yt=a("div"),F(mx.$$.fragment),rDr=l(),u5e=a("p"),tDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aDr=l(),sm=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(j0.$$.fragment),mDr=l(),Ur=a("div"),F(fx.$$.fragment),fDr=l(),_5e=a("p"),gDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hDr=l(),Cn=a("p"),uDr=o("The model class to instantiate is selected based on the "),b5e=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),gx=a("ul"),D0=a("li"),T5e=a("strong"),EDr=o("beit"),CDr=o(" \u2014 "),PK=a("a"),wDr=o("FlaxBeitForImageClassification"),ADr=o(" (BEiT model)"),yDr=l(),G0=a("li"),M5e=a("strong"),LDr=o("vit"),xDr=o(" \u2014 "),BK=a("a"),$Dr=o("FlaxViTForImageClassification"),kDr=o(" (ViT model)"),SDr=l(),F(O0.$$.fragment),eje=l(),lm=a("h2"),V0=a("a"),E5e=a("span"),F(hx.$$.fragment),RDr=l(),C5e=a("span"),PDr=o("FlaxAutoModelForVision2Seq"),oje=l(),Mr=a("div"),F(ux.$$.fragment),BDr=l(),im=a("p"),IDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=a("a"),qDr=o("from_pretrained()"),NDr=o(" class method or the "),qK=a("a"),jDr=o("from_config()"),DDr=o(` class
method.`),GDr=l(),px=a("p"),ODr=o("This class cannot be instantiated directly using "),w5e=a("code"),VDr=o("__init__()"),XDr=o(" (throws an error)."),zDr=l(),Kt=a("div"),F(_x.$$.fragment),WDr=l(),A5e=a("p"),QDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HDr=l(),dm=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),JDr=o("not"),YDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),KDr=o("from_pretrained()"),ZDr=o(" to load the model weights."),eGr=l(),F(X0.$$.fragment),oGr=l(),Jr=a("div"),F(bx.$$.fragment),rGr=l(),L5e=a("p"),tGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aGr=l(),wn=a("p"),nGr=o("The model class to instantiate is selected based on the "),x5e=a("code"),sGr=o("model_type"),lGr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),cGr=o("pretrained_model_name_or_path"),mGr=o(":"),fGr=l(),S5e=a("ul"),z0=a("li"),R5e=a("strong"),gGr=o("vision-encoder-decoder"),hGr=o(" \u2014 "),jK=a("a"),uGr=o("FlaxVisionEncoderDecoderModel"),pGr=o(" (Vision Encoder decoder model)"),_Gr=l(),F(W0.$$.fragment),this.h()},l(m){const _=C7t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var vx=s(u);f=n(vx,"A",{id:!0,class:!0,href:!0});var P5e=s(f);p=n(P5e,"SPAN",{});var B5e=s(p);T(d.$$.fragment,B5e),B5e.forEach(t),P5e.forEach(t),h=i(vx),Mo=n(vx,"SPAN",{});var I5e=s(Mo);ci=r(I5e,"Auto Classes"),I5e.forEach(t),vx.forEach(t),gm=i(m),rt=n(m,"P",{});var Fx=s(rt);mi=r(Fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(Fx,"CODE",{});var q5e=s(fi);cy=r(q5e,"from_pretrained()"),q5e.forEach(t),hm=r(Fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fx.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var N5e=s(yn);my=r(N5e,"AutoConfig"),N5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var j5e=s(xn);fy=r(j5e,"AutoModel"),j5e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var D5e=s($n);gy=r(D5e,"AutoTokenizer"),D5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),um=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var Tx=s(Ae);k$=r(Tx,"will create a model that is an instance of "),pi=n(Tx,"A",{href:!0});var G5e=s(pi);S$=r(G5e,"BertModel"),G5e.forEach(t),R$=r(Tx,"."),Tx.forEach(t),Eo=i(m),wa=n(m,"P",{});var Mx=s(wa);P$=r(Mx,"There is one class of "),pm=n(Mx,"CODE",{});var O5e=s(pm);B$=r(O5e,"AutoModel"),O5e.forEach(t),cGe=r(Mx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mx.forEach(t),ZIe=i(m),_i=n(m,"H2",{class:!0});var Ex=s(_i);_m=n(Ex,"A",{id:!0,class:!0,href:!0});var V5e=s(_m);See=n(V5e,"SPAN",{});var X5e=s(See);T(hy.$$.fragment,X5e),X5e.forEach(t),V5e.forEach(t),mGe=i(Ex),Ree=n(Ex,"SPAN",{});var z5e=s(Ree);fGe=r(z5e,"Extending the Auto Classes"),z5e.forEach(t),Ex.forEach(t),eqe=i(m),kn=n(m,"P",{});var cm=s(kn);gGe=r(cm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pee=n(cm,"CODE",{});var W5e=s(Pee);hGe=r(W5e,"NewModel"),W5e.forEach(t),uGe=r(cm,", make sure you have a "),Bee=n(cm,"CODE",{});var Q5e=s(Bee);pGe=r(Q5e,"NewModelConfig"),Q5e.forEach(t),_Ge=r(cm,` then you can add those to the auto
classes like this:`),cm.forEach(t),oqe=i(m),T(uy.$$.fragment,m),rqe=i(m),I$=n(m,"P",{});var H5e=s(I$);bGe=r(H5e,"You will then be able to use the auto classes like you would usually do!"),H5e.forEach(t),tqe=i(m),T(bm.$$.fragment,m),aqe=i(m),bi=n(m,"H2",{class:!0});var Cx=s(bi);vm=n(Cx,"A",{id:!0,class:!0,href:!0});var U5e=s(vm);Iee=n(U5e,"SPAN",{});var J5e=s(Iee);T(py.$$.fragment,J5e),J5e.forEach(t),U5e.forEach(t),vGe=i(Cx),qee=n(Cx,"SPAN",{});var Y5e=s(qee);FGe=r(Y5e,"AutoConfig"),Y5e.forEach(t),Cx.forEach(t),nqe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(_y.$$.fragment,et),TGe=i(et),by=n(et,"P",{});var wx=s(by);MGe=r(wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=n(wx,"A",{href:!0});var K5e=s(q$);EGe=r(K5e,"from_pretrained()"),K5e.forEach(t),CGe=r(wx," class method."),wx.forEach(t),wGe=i(et),vy=n(et,"P",{});var Ax=s(vy);AGe=r(Ax,"This class cannot be instantiated directly using "),Nee=n(Ax,"CODE",{});var Z5e=s(Nee);yGe=r(Z5e,"__init__()"),Z5e.forEach(t),LGe=r(Ax," (throws an error)."),Ax.forEach(t),xGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Fy.$$.fragment,ot),$Ge=i(ot),jee=n(ot,"P",{});var e3e=s(jee);kGe=r(e3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e3e.forEach(t),SGe=i(ot),vi=n(ot,"P",{});var mm=s(vi);RGe=r(mm,"The configuration class to instantiate is selected based on the "),Dee=n(mm,"CODE",{});var o3e=s(Dee);PGe=r(o3e,"model_type"),o3e.forEach(t),BGe=r(mm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gee=n(mm,"CODE",{});var r3e=s(Gee);IGe=r(r3e,"pretrained_model_name_or_path"),r3e.forEach(t),qGe=r(mm,":"),mm.forEach(t),NGe=i(ot),A=n(ot,"UL",{});var y=s(A);Fm=n(y,"LI",{});var Q0=s(Fm);Oee=n(Q0,"STRONG",{});var t3e=s(Oee);jGe=r(t3e,"albert"),t3e.forEach(t),DGe=r(Q0," \u2014 "),N$=n(Q0,"A",{href:!0});var a3e=s(N$);GGe=r(a3e,"AlbertConfig"),a3e.forEach(t),OGe=r(Q0," (ALBERT model)"),Q0.forEach(t),VGe=i(y),Tm=n(y,"LI",{});var H0=s(Tm);Vee=n(H0,"STRONG",{});var n3e=s(Vee);XGe=r(n3e,"bart"),n3e.forEach(t),zGe=r(H0," \u2014 "),j$=n(H0,"A",{href:!0});var s3e=s(j$);WGe=r(s3e,"BartConfig"),s3e.forEach(t),QGe=r(H0," (BART model)"),H0.forEach(t),HGe=i(y),Mm=n(y,"LI",{});var U0=s(Mm);Xee=n(U0,"STRONG",{});var l3e=s(Xee);UGe=r(l3e,"beit"),l3e.forEach(t),JGe=r(U0," \u2014 "),D$=n(U0,"A",{href:!0});var i3e=s(D$);YGe=r(i3e,"BeitConfig"),i3e.forEach(t),KGe=r(U0," (BEiT model)"),U0.forEach(t),ZGe=i(y),Em=n(y,"LI",{});var J0=s(Em);zee=n(J0,"STRONG",{});var d3e=s(zee);eOe=r(d3e,"bert"),d3e.forEach(t),oOe=r(J0," \u2014 "),G$=n(J0,"A",{href:!0});var c3e=s(G$);rOe=r(c3e,"BertConfig"),c3e.forEach(t),tOe=r(J0," (BERT model)"),J0.forEach(t),aOe=i(y),Cm=n(y,"LI",{});var Y0=s(Cm);Wee=n(Y0,"STRONG",{});var m3e=s(Wee);nOe=r(m3e,"bert-generation"),m3e.forEach(t),sOe=r(Y0," \u2014 "),O$=n(Y0,"A",{href:!0});var f3e=s(O$);lOe=r(f3e,"BertGenerationConfig"),f3e.forEach(t),iOe=r(Y0," (Bert Generation model)"),Y0.forEach(t),dOe=i(y),wm=n(y,"LI",{});var K0=s(wm);Qee=n(K0,"STRONG",{});var g3e=s(Qee);cOe=r(g3e,"big_bird"),g3e.forEach(t),mOe=r(K0," \u2014 "),V$=n(K0,"A",{href:!0});var h3e=s(V$);fOe=r(h3e,"BigBirdConfig"),h3e.forEach(t),gOe=r(K0," (BigBird model)"),K0.forEach(t),hOe=i(y),Am=n(y,"LI",{});var Z0=s(Am);Hee=n(Z0,"STRONG",{});var u3e=s(Hee);uOe=r(u3e,"bigbird_pegasus"),u3e.forEach(t),pOe=r(Z0," \u2014 "),X$=n(Z0,"A",{href:!0});var p3e=s(X$);_Oe=r(p3e,"BigBirdPegasusConfig"),p3e.forEach(t),bOe=r(Z0," (BigBirdPegasus model)"),Z0.forEach(t),vOe=i(y),ym=n(y,"LI",{});var eA=s(ym);Uee=n(eA,"STRONG",{});var _3e=s(Uee);FOe=r(_3e,"blenderbot"),_3e.forEach(t),TOe=r(eA," \u2014 "),z$=n(eA,"A",{href:!0});var b3e=s(z$);MOe=r(b3e,"BlenderbotConfig"),b3e.forEach(t),EOe=r(eA," (Blenderbot model)"),eA.forEach(t),COe=i(y),Lm=n(y,"LI",{});var oA=s(Lm);Jee=n(oA,"STRONG",{});var v3e=s(Jee);wOe=r(v3e,"blenderbot-small"),v3e.forEach(t),AOe=r(oA," \u2014 "),W$=n(oA,"A",{href:!0});var F3e=s(W$);yOe=r(F3e,"BlenderbotSmallConfig"),F3e.forEach(t),LOe=r(oA," (BlenderbotSmall model)"),oA.forEach(t),xOe=i(y),xm=n(y,"LI",{});var rA=s(xm);Yee=n(rA,"STRONG",{});var T3e=s(Yee);$Oe=r(T3e,"camembert"),T3e.forEach(t),kOe=r(rA," \u2014 "),Q$=n(rA,"A",{href:!0});var M3e=s(Q$);SOe=r(M3e,"CamembertConfig"),M3e.forEach(t),ROe=r(rA," (CamemBERT model)"),rA.forEach(t),POe=i(y),$m=n(y,"LI",{});var tA=s($m);Kee=n(tA,"STRONG",{});var E3e=s(Kee);BOe=r(E3e,"canine"),E3e.forEach(t),IOe=r(tA," \u2014 "),H$=n(tA,"A",{href:!0});var C3e=s(H$);qOe=r(C3e,"CanineConfig"),C3e.forEach(t),NOe=r(tA," (Canine model)"),tA.forEach(t),jOe=i(y),km=n(y,"LI",{});var aA=s(km);Zee=n(aA,"STRONG",{});var w3e=s(Zee);DOe=r(w3e,"clip"),w3e.forEach(t),GOe=r(aA," \u2014 "),U$=n(aA,"A",{href:!0});var A3e=s(U$);OOe=r(A3e,"CLIPConfig"),A3e.forEach(t),VOe=r(aA," (CLIP model)"),aA.forEach(t),XOe=i(y),Sm=n(y,"LI",{});var nA=s(Sm);eoe=n(nA,"STRONG",{});var y3e=s(eoe);zOe=r(y3e,"convbert"),y3e.forEach(t),WOe=r(nA," \u2014 "),J$=n(nA,"A",{href:!0});var L3e=s(J$);QOe=r(L3e,"ConvBertConfig"),L3e.forEach(t),HOe=r(nA," (ConvBERT model)"),nA.forEach(t),UOe=i(y),Rm=n(y,"LI",{});var sA=s(Rm);ooe=n(sA,"STRONG",{});var x3e=s(ooe);JOe=r(x3e,"convnext"),x3e.forEach(t),YOe=r(sA," \u2014 "),Y$=n(sA,"A",{href:!0});var $3e=s(Y$);KOe=r($3e,"ConvNextConfig"),$3e.forEach(t),ZOe=r(sA," (ConvNext model)"),sA.forEach(t),eVe=i(y),Pm=n(y,"LI",{});var lA=s(Pm);roe=n(lA,"STRONG",{});var k3e=s(roe);oVe=r(k3e,"ctrl"),k3e.forEach(t),rVe=r(lA," \u2014 "),K$=n(lA,"A",{href:!0});var S3e=s(K$);tVe=r(S3e,"CTRLConfig"),S3e.forEach(t),aVe=r(lA," (CTRL model)"),lA.forEach(t),nVe=i(y),Bm=n(y,"LI",{});var iA=s(Bm);toe=n(iA,"STRONG",{});var R3e=s(toe);sVe=r(R3e,"cvt"),R3e.forEach(t),lVe=r(iA," \u2014 "),Z$=n(iA,"A",{href:!0});var P3e=s(Z$);iVe=r(P3e,"CvtConfig"),P3e.forEach(t),dVe=r(iA," (CvT model)"),iA.forEach(t),cVe=i(y),Im=n(y,"LI",{});var dA=s(Im);aoe=n(dA,"STRONG",{});var B3e=s(aoe);mVe=r(B3e,"data2vec-audio"),B3e.forEach(t),fVe=r(dA," \u2014 "),ek=n(dA,"A",{href:!0});var I3e=s(ek);gVe=r(I3e,"Data2VecAudioConfig"),I3e.forEach(t),hVe=r(dA," (Data2VecAudio model)"),dA.forEach(t),uVe=i(y),qm=n(y,"LI",{});var cA=s(qm);noe=n(cA,"STRONG",{});var q3e=s(noe);pVe=r(q3e,"data2vec-text"),q3e.forEach(t),_Ve=r(cA," \u2014 "),ok=n(cA,"A",{href:!0});var N3e=s(ok);bVe=r(N3e,"Data2VecTextConfig"),N3e.forEach(t),vVe=r(cA," (Data2VecText model)"),cA.forEach(t),FVe=i(y),Nm=n(y,"LI",{});var mA=s(Nm);soe=n(mA,"STRONG",{});var j3e=s(soe);TVe=r(j3e,"data2vec-vision"),j3e.forEach(t),MVe=r(mA," \u2014 "),rk=n(mA,"A",{href:!0});var D3e=s(rk);EVe=r(D3e,"Data2VecVisionConfig"),D3e.forEach(t),CVe=r(mA," (Data2VecVision model)"),mA.forEach(t),wVe=i(y),jm=n(y,"LI",{});var fA=s(jm);loe=n(fA,"STRONG",{});var G3e=s(loe);AVe=r(G3e,"deberta"),G3e.forEach(t),yVe=r(fA," \u2014 "),tk=n(fA,"A",{href:!0});var O3e=s(tk);LVe=r(O3e,"DebertaConfig"),O3e.forEach(t),xVe=r(fA," (DeBERTa model)"),fA.forEach(t),$Ve=i(y),Dm=n(y,"LI",{});var gA=s(Dm);ioe=n(gA,"STRONG",{});var V3e=s(ioe);kVe=r(V3e,"deberta-v2"),V3e.forEach(t),SVe=r(gA," \u2014 "),ak=n(gA,"A",{href:!0});var X3e=s(ak);RVe=r(X3e,"DebertaV2Config"),X3e.forEach(t),PVe=r(gA," (DeBERTa-v2 model)"),gA.forEach(t),BVe=i(y),Gm=n(y,"LI",{});var hA=s(Gm);doe=n(hA,"STRONG",{});var z3e=s(doe);IVe=r(z3e,"decision_transformer"),z3e.forEach(t),qVe=r(hA," \u2014 "),nk=n(hA,"A",{href:!0});var W3e=s(nk);NVe=r(W3e,"DecisionTransformerConfig"),W3e.forEach(t),jVe=r(hA," (Decision Transformer model)"),hA.forEach(t),DVe=i(y),Om=n(y,"LI",{});var uA=s(Om);coe=n(uA,"STRONG",{});var Q3e=s(coe);GVe=r(Q3e,"deit"),Q3e.forEach(t),OVe=r(uA," \u2014 "),sk=n(uA,"A",{href:!0});var vGr=s(sk);VVe=r(vGr,"DeiTConfig"),vGr.forEach(t),XVe=r(uA," (DeiT model)"),uA.forEach(t),zVe=i(y),Vm=n(y,"LI",{});var H3e=s(Vm);moe=n(H3e,"STRONG",{});var FGr=s(moe);WVe=r(FGr,"detr"),FGr.forEach(t),QVe=r(H3e," \u2014 "),lk=n(H3e,"A",{href:!0});var TGr=s(lk);HVe=r(TGr,"DetrConfig"),TGr.forEach(t),UVe=r(H3e," (DETR model)"),H3e.forEach(t),JVe=i(y),Xm=n(y,"LI",{});var U3e=s(Xm);foe=n(U3e,"STRONG",{});var MGr=s(foe);YVe=r(MGr,"distilbert"),MGr.forEach(t),KVe=r(U3e," \u2014 "),ik=n(U3e,"A",{href:!0});var EGr=s(ik);ZVe=r(EGr,"DistilBertConfig"),EGr.forEach(t),eXe=r(U3e," (DistilBERT model)"),U3e.forEach(t),oXe=i(y),zm=n(y,"LI",{});var J3e=s(zm);goe=n(J3e,"STRONG",{});var CGr=s(goe);rXe=r(CGr,"dpr"),CGr.forEach(t),tXe=r(J3e," \u2014 "),dk=n(J3e,"A",{href:!0});var wGr=s(dk);aXe=r(wGr,"DPRConfig"),wGr.forEach(t),nXe=r(J3e," (DPR model)"),J3e.forEach(t),sXe=i(y),Wm=n(y,"LI",{});var Y3e=s(Wm);hoe=n(Y3e,"STRONG",{});var AGr=s(hoe);lXe=r(AGr,"dpt"),AGr.forEach(t),iXe=r(Y3e," \u2014 "),ck=n(Y3e,"A",{href:!0});var yGr=s(ck);dXe=r(yGr,"DPTConfig"),yGr.forEach(t),cXe=r(Y3e," (DPT model)"),Y3e.forEach(t),mXe=i(y),Qm=n(y,"LI",{});var K3e=s(Qm);uoe=n(K3e,"STRONG",{});var LGr=s(uoe);fXe=r(LGr,"electra"),LGr.forEach(t),gXe=r(K3e," \u2014 "),mk=n(K3e,"A",{href:!0});var xGr=s(mk);hXe=r(xGr,"ElectraConfig"),xGr.forEach(t),uXe=r(K3e," (ELECTRA model)"),K3e.forEach(t),pXe=i(y),Hm=n(y,"LI",{});var Z3e=s(Hm);poe=n(Z3e,"STRONG",{});var $Gr=s(poe);_Xe=r($Gr,"encoder-decoder"),$Gr.forEach(t),bXe=r(Z3e," \u2014 "),fk=n(Z3e,"A",{href:!0});var kGr=s(fk);vXe=r(kGr,"EncoderDecoderConfig"),kGr.forEach(t),FXe=r(Z3e," (Encoder decoder model)"),Z3e.forEach(t),TXe=i(y),Um=n(y,"LI",{});var ewe=s(Um);_oe=n(ewe,"STRONG",{});var SGr=s(_oe);MXe=r(SGr,"flaubert"),SGr.forEach(t),EXe=r(ewe," \u2014 "),gk=n(ewe,"A",{href:!0});var RGr=s(gk);CXe=r(RGr,"FlaubertConfig"),RGr.forEach(t),wXe=r(ewe," (FlauBERT model)"),ewe.forEach(t),AXe=i(y),Jm=n(y,"LI",{});var owe=s(Jm);boe=n(owe,"STRONG",{});var PGr=s(boe);yXe=r(PGr,"flava"),PGr.forEach(t),LXe=r(owe," \u2014 "),hk=n(owe,"A",{href:!0});var BGr=s(hk);xXe=r(BGr,"FlavaConfig"),BGr.forEach(t),$Xe=r(owe," (Flava model)"),owe.forEach(t),kXe=i(y),Ym=n(y,"LI",{});var rwe=s(Ym);voe=n(rwe,"STRONG",{});var IGr=s(voe);SXe=r(IGr,"fnet"),IGr.forEach(t),RXe=r(rwe," \u2014 "),uk=n(rwe,"A",{href:!0});var qGr=s(uk);PXe=r(qGr,"FNetConfig"),qGr.forEach(t),BXe=r(rwe," (FNet model)"),rwe.forEach(t),IXe=i(y),Km=n(y,"LI",{});var twe=s(Km);Foe=n(twe,"STRONG",{});var NGr=s(Foe);qXe=r(NGr,"fsmt"),NGr.forEach(t),NXe=r(twe," \u2014 "),pk=n(twe,"A",{href:!0});var jGr=s(pk);jXe=r(jGr,"FSMTConfig"),jGr.forEach(t),DXe=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),GXe=i(y),Zm=n(y,"LI",{});var awe=s(Zm);Toe=n(awe,"STRONG",{});var DGr=s(Toe);OXe=r(DGr,"funnel"),DGr.forEach(t),VXe=r(awe," \u2014 "),_k=n(awe,"A",{href:!0});var GGr=s(_k);XXe=r(GGr,"FunnelConfig"),GGr.forEach(t),zXe=r(awe," (Funnel Transformer model)"),awe.forEach(t),WXe=i(y),ef=n(y,"LI",{});var nwe=s(ef);Moe=n(nwe,"STRONG",{});var OGr=s(Moe);QXe=r(OGr,"glpn"),OGr.forEach(t),HXe=r(nwe," \u2014 "),bk=n(nwe,"A",{href:!0});var VGr=s(bk);UXe=r(VGr,"GLPNConfig"),VGr.forEach(t),JXe=r(nwe," (GLPN model)"),nwe.forEach(t),YXe=i(y),of=n(y,"LI",{});var swe=s(of);Eoe=n(swe,"STRONG",{});var XGr=s(Eoe);KXe=r(XGr,"gpt2"),XGr.forEach(t),ZXe=r(swe," \u2014 "),vk=n(swe,"A",{href:!0});var zGr=s(vk);eze=r(zGr,"GPT2Config"),zGr.forEach(t),oze=r(swe," (OpenAI GPT-2 model)"),swe.forEach(t),rze=i(y),rf=n(y,"LI",{});var lwe=s(rf);Coe=n(lwe,"STRONG",{});var WGr=s(Coe);tze=r(WGr,"gpt_neo"),WGr.forEach(t),aze=r(lwe," \u2014 "),Fk=n(lwe,"A",{href:!0});var QGr=s(Fk);nze=r(QGr,"GPTNeoConfig"),QGr.forEach(t),sze=r(lwe," (GPT Neo model)"),lwe.forEach(t),lze=i(y),tf=n(y,"LI",{});var iwe=s(tf);woe=n(iwe,"STRONG",{});var HGr=s(woe);ize=r(HGr,"gptj"),HGr.forEach(t),dze=r(iwe," \u2014 "),Tk=n(iwe,"A",{href:!0});var UGr=s(Tk);cze=r(UGr,"GPTJConfig"),UGr.forEach(t),mze=r(iwe," (GPT-J model)"),iwe.forEach(t),fze=i(y),af=n(y,"LI",{});var dwe=s(af);Aoe=n(dwe,"STRONG",{});var JGr=s(Aoe);gze=r(JGr,"hubert"),JGr.forEach(t),hze=r(dwe," \u2014 "),Mk=n(dwe,"A",{href:!0});var YGr=s(Mk);uze=r(YGr,"HubertConfig"),YGr.forEach(t),pze=r(dwe," (Hubert model)"),dwe.forEach(t),_ze=i(y),nf=n(y,"LI",{});var cwe=s(nf);yoe=n(cwe,"STRONG",{});var KGr=s(yoe);bze=r(KGr,"ibert"),KGr.forEach(t),vze=r(cwe," \u2014 "),Ek=n(cwe,"A",{href:!0});var ZGr=s(Ek);Fze=r(ZGr,"IBertConfig"),ZGr.forEach(t),Tze=r(cwe," (I-BERT model)"),cwe.forEach(t),Mze=i(y),sf=n(y,"LI",{});var mwe=s(sf);Loe=n(mwe,"STRONG",{});var eOr=s(Loe);Eze=r(eOr,"imagegpt"),eOr.forEach(t),Cze=r(mwe," \u2014 "),Ck=n(mwe,"A",{href:!0});var oOr=s(Ck);wze=r(oOr,"ImageGPTConfig"),oOr.forEach(t),Aze=r(mwe," (ImageGPT model)"),mwe.forEach(t),yze=i(y),lf=n(y,"LI",{});var fwe=s(lf);xoe=n(fwe,"STRONG",{});var rOr=s(xoe);Lze=r(rOr,"layoutlm"),rOr.forEach(t),xze=r(fwe," \u2014 "),wk=n(fwe,"A",{href:!0});var tOr=s(wk);$ze=r(tOr,"LayoutLMConfig"),tOr.forEach(t),kze=r(fwe," (LayoutLM model)"),fwe.forEach(t),Sze=i(y),df=n(y,"LI",{});var gwe=s(df);$oe=n(gwe,"STRONG",{});var aOr=s($oe);Rze=r(aOr,"layoutlmv2"),aOr.forEach(t),Pze=r(gwe," \u2014 "),Ak=n(gwe,"A",{href:!0});var nOr=s(Ak);Bze=r(nOr,"LayoutLMv2Config"),nOr.forEach(t),Ize=r(gwe," (LayoutLMv2 model)"),gwe.forEach(t),qze=i(y),cf=n(y,"LI",{});var hwe=s(cf);koe=n(hwe,"STRONG",{});var sOr=s(koe);Nze=r(sOr,"led"),sOr.forEach(t),jze=r(hwe," \u2014 "),yk=n(hwe,"A",{href:!0});var lOr=s(yk);Dze=r(lOr,"LEDConfig"),lOr.forEach(t),Gze=r(hwe," (LED model)"),hwe.forEach(t),Oze=i(y),mf=n(y,"LI",{});var uwe=s(mf);Soe=n(uwe,"STRONG",{});var iOr=s(Soe);Vze=r(iOr,"longformer"),iOr.forEach(t),Xze=r(uwe," \u2014 "),Lk=n(uwe,"A",{href:!0});var dOr=s(Lk);zze=r(dOr,"LongformerConfig"),dOr.forEach(t),Wze=r(uwe," (Longformer model)"),uwe.forEach(t),Qze=i(y),ff=n(y,"LI",{});var pwe=s(ff);Roe=n(pwe,"STRONG",{});var cOr=s(Roe);Hze=r(cOr,"luke"),cOr.forEach(t),Uze=r(pwe," \u2014 "),xk=n(pwe,"A",{href:!0});var mOr=s(xk);Jze=r(mOr,"LukeConfig"),mOr.forEach(t),Yze=r(pwe," (LUKE model)"),pwe.forEach(t),Kze=i(y),gf=n(y,"LI",{});var _we=s(gf);Poe=n(_we,"STRONG",{});var fOr=s(Poe);Zze=r(fOr,"lxmert"),fOr.forEach(t),eWe=r(_we," \u2014 "),$k=n(_we,"A",{href:!0});var gOr=s($k);oWe=r(gOr,"LxmertConfig"),gOr.forEach(t),rWe=r(_we," (LXMERT model)"),_we.forEach(t),tWe=i(y),hf=n(y,"LI",{});var bwe=s(hf);Boe=n(bwe,"STRONG",{});var hOr=s(Boe);aWe=r(hOr,"m2m_100"),hOr.forEach(t),nWe=r(bwe," \u2014 "),kk=n(bwe,"A",{href:!0});var uOr=s(kk);sWe=r(uOr,"M2M100Config"),uOr.forEach(t),lWe=r(bwe," (M2M100 model)"),bwe.forEach(t),iWe=i(y),uf=n(y,"LI",{});var vwe=s(uf);Ioe=n(vwe,"STRONG",{});var pOr=s(Ioe);dWe=r(pOr,"marian"),pOr.forEach(t),cWe=r(vwe," \u2014 "),Sk=n(vwe,"A",{href:!0});var _Or=s(Sk);mWe=r(_Or,"MarianConfig"),_Or.forEach(t),fWe=r(vwe," (Marian model)"),vwe.forEach(t),gWe=i(y),pf=n(y,"LI",{});var Fwe=s(pf);qoe=n(Fwe,"STRONG",{});var bOr=s(qoe);hWe=r(bOr,"maskformer"),bOr.forEach(t),uWe=r(Fwe," \u2014 "),Rk=n(Fwe,"A",{href:!0});var vOr=s(Rk);pWe=r(vOr,"MaskFormerConfig"),vOr.forEach(t),_We=r(Fwe," (MaskFormer model)"),Fwe.forEach(t),bWe=i(y),_f=n(y,"LI",{});var Twe=s(_f);Noe=n(Twe,"STRONG",{});var FOr=s(Noe);vWe=r(FOr,"mbart"),FOr.forEach(t),FWe=r(Twe," \u2014 "),Pk=n(Twe,"A",{href:!0});var TOr=s(Pk);TWe=r(TOr,"MBartConfig"),TOr.forEach(t),MWe=r(Twe," (mBART model)"),Twe.forEach(t),EWe=i(y),bf=n(y,"LI",{});var Mwe=s(bf);joe=n(Mwe,"STRONG",{});var MOr=s(joe);CWe=r(MOr,"megatron-bert"),MOr.forEach(t),wWe=r(Mwe," \u2014 "),Bk=n(Mwe,"A",{href:!0});var EOr=s(Bk);AWe=r(EOr,"MegatronBertConfig"),EOr.forEach(t),yWe=r(Mwe," (MegatronBert model)"),Mwe.forEach(t),LWe=i(y),vf=n(y,"LI",{});var Ewe=s(vf);Doe=n(Ewe,"STRONG",{});var COr=s(Doe);xWe=r(COr,"mobilebert"),COr.forEach(t),$We=r(Ewe," \u2014 "),Ik=n(Ewe,"A",{href:!0});var wOr=s(Ik);kWe=r(wOr,"MobileBertConfig"),wOr.forEach(t),SWe=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),RWe=i(y),Ff=n(y,"LI",{});var Cwe=s(Ff);Goe=n(Cwe,"STRONG",{});var AOr=s(Goe);PWe=r(AOr,"mpnet"),AOr.forEach(t),BWe=r(Cwe," \u2014 "),qk=n(Cwe,"A",{href:!0});var yOr=s(qk);IWe=r(yOr,"MPNetConfig"),yOr.forEach(t),qWe=r(Cwe," (MPNet model)"),Cwe.forEach(t),NWe=i(y),Tf=n(y,"LI",{});var wwe=s(Tf);Ooe=n(wwe,"STRONG",{});var LOr=s(Ooe);jWe=r(LOr,"mt5"),LOr.forEach(t),DWe=r(wwe," \u2014 "),Nk=n(wwe,"A",{href:!0});var xOr=s(Nk);GWe=r(xOr,"MT5Config"),xOr.forEach(t),OWe=r(wwe," (mT5 model)"),wwe.forEach(t),VWe=i(y),Mf=n(y,"LI",{});var Awe=s(Mf);Voe=n(Awe,"STRONG",{});var $Or=s(Voe);XWe=r($Or,"nystromformer"),$Or.forEach(t),zWe=r(Awe," \u2014 "),jk=n(Awe,"A",{href:!0});var kOr=s(jk);WWe=r(kOr,"NystromformerConfig"),kOr.forEach(t),QWe=r(Awe," (Nystromformer model)"),Awe.forEach(t),HWe=i(y),Ef=n(y,"LI",{});var ywe=s(Ef);Xoe=n(ywe,"STRONG",{});var SOr=s(Xoe);UWe=r(SOr,"openai-gpt"),SOr.forEach(t),JWe=r(ywe," \u2014 "),Dk=n(ywe,"A",{href:!0});var ROr=s(Dk);YWe=r(ROr,"OpenAIGPTConfig"),ROr.forEach(t),KWe=r(ywe," (OpenAI GPT model)"),ywe.forEach(t),ZWe=i(y),Cf=n(y,"LI",{});var Lwe=s(Cf);zoe=n(Lwe,"STRONG",{});var POr=s(zoe);eQe=r(POr,"opt"),POr.forEach(t),oQe=r(Lwe," \u2014 "),Gk=n(Lwe,"A",{href:!0});var BOr=s(Gk);rQe=r(BOr,"OPTConfig"),BOr.forEach(t),tQe=r(Lwe," (OPT model)"),Lwe.forEach(t),aQe=i(y),wf=n(y,"LI",{});var xwe=s(wf);Woe=n(xwe,"STRONG",{});var IOr=s(Woe);nQe=r(IOr,"pegasus"),IOr.forEach(t),sQe=r(xwe," \u2014 "),Ok=n(xwe,"A",{href:!0});var qOr=s(Ok);lQe=r(qOr,"PegasusConfig"),qOr.forEach(t),iQe=r(xwe," (Pegasus model)"),xwe.forEach(t),dQe=i(y),Af=n(y,"LI",{});var $we=s(Af);Qoe=n($we,"STRONG",{});var NOr=s(Qoe);cQe=r(NOr,"perceiver"),NOr.forEach(t),mQe=r($we," \u2014 "),Vk=n($we,"A",{href:!0});var jOr=s(Vk);fQe=r(jOr,"PerceiverConfig"),jOr.forEach(t),gQe=r($we," (Perceiver model)"),$we.forEach(t),hQe=i(y),yf=n(y,"LI",{});var kwe=s(yf);Hoe=n(kwe,"STRONG",{});var DOr=s(Hoe);uQe=r(DOr,"plbart"),DOr.forEach(t),pQe=r(kwe," \u2014 "),Xk=n(kwe,"A",{href:!0});var GOr=s(Xk);_Qe=r(GOr,"PLBartConfig"),GOr.forEach(t),bQe=r(kwe," (PLBart model)"),kwe.forEach(t),vQe=i(y),Lf=n(y,"LI",{});var Swe=s(Lf);Uoe=n(Swe,"STRONG",{});var OOr=s(Uoe);FQe=r(OOr,"poolformer"),OOr.forEach(t),TQe=r(Swe," \u2014 "),zk=n(Swe,"A",{href:!0});var VOr=s(zk);MQe=r(VOr,"PoolFormerConfig"),VOr.forEach(t),EQe=r(Swe," (PoolFormer model)"),Swe.forEach(t),CQe=i(y),xf=n(y,"LI",{});var Rwe=s(xf);Joe=n(Rwe,"STRONG",{});var XOr=s(Joe);wQe=r(XOr,"prophetnet"),XOr.forEach(t),AQe=r(Rwe," \u2014 "),Wk=n(Rwe,"A",{href:!0});var zOr=s(Wk);yQe=r(zOr,"ProphetNetConfig"),zOr.forEach(t),LQe=r(Rwe," (ProphetNet model)"),Rwe.forEach(t),xQe=i(y),$f=n(y,"LI",{});var Pwe=s($f);Yoe=n(Pwe,"STRONG",{});var WOr=s(Yoe);$Qe=r(WOr,"qdqbert"),WOr.forEach(t),kQe=r(Pwe," \u2014 "),Qk=n(Pwe,"A",{href:!0});var QOr=s(Qk);SQe=r(QOr,"QDQBertConfig"),QOr.forEach(t),RQe=r(Pwe," (QDQBert model)"),Pwe.forEach(t),PQe=i(y),kf=n(y,"LI",{});var Bwe=s(kf);Koe=n(Bwe,"STRONG",{});var HOr=s(Koe);BQe=r(HOr,"rag"),HOr.forEach(t),IQe=r(Bwe," \u2014 "),Hk=n(Bwe,"A",{href:!0});var UOr=s(Hk);qQe=r(UOr,"RagConfig"),UOr.forEach(t),NQe=r(Bwe," (RAG model)"),Bwe.forEach(t),jQe=i(y),Sf=n(y,"LI",{});var Iwe=s(Sf);Zoe=n(Iwe,"STRONG",{});var JOr=s(Zoe);DQe=r(JOr,"realm"),JOr.forEach(t),GQe=r(Iwe," \u2014 "),Uk=n(Iwe,"A",{href:!0});var YOr=s(Uk);OQe=r(YOr,"RealmConfig"),YOr.forEach(t),VQe=r(Iwe," (Realm model)"),Iwe.forEach(t),XQe=i(y),Rf=n(y,"LI",{});var qwe=s(Rf);ere=n(qwe,"STRONG",{});var KOr=s(ere);zQe=r(KOr,"reformer"),KOr.forEach(t),WQe=r(qwe," \u2014 "),Jk=n(qwe,"A",{href:!0});var ZOr=s(Jk);QQe=r(ZOr,"ReformerConfig"),ZOr.forEach(t),HQe=r(qwe," (Reformer model)"),qwe.forEach(t),UQe=i(y),Pf=n(y,"LI",{});var Nwe=s(Pf);ore=n(Nwe,"STRONG",{});var eVr=s(ore);JQe=r(eVr,"regnet"),eVr.forEach(t),YQe=r(Nwe," \u2014 "),Yk=n(Nwe,"A",{href:!0});var oVr=s(Yk);KQe=r(oVr,"RegNetConfig"),oVr.forEach(t),ZQe=r(Nwe," (RegNet model)"),Nwe.forEach(t),eHe=i(y),Bf=n(y,"LI",{});var jwe=s(Bf);rre=n(jwe,"STRONG",{});var rVr=s(rre);oHe=r(rVr,"rembert"),rVr.forEach(t),rHe=r(jwe," \u2014 "),Kk=n(jwe,"A",{href:!0});var tVr=s(Kk);tHe=r(tVr,"RemBertConfig"),tVr.forEach(t),aHe=r(jwe," (RemBERT model)"),jwe.forEach(t),nHe=i(y),If=n(y,"LI",{});var Dwe=s(If);tre=n(Dwe,"STRONG",{});var aVr=s(tre);sHe=r(aVr,"resnet"),aVr.forEach(t),lHe=r(Dwe," \u2014 "),Zk=n(Dwe,"A",{href:!0});var nVr=s(Zk);iHe=r(nVr,"ResNetConfig"),nVr.forEach(t),dHe=r(Dwe," (ResNet model)"),Dwe.forEach(t),cHe=i(y),qf=n(y,"LI",{});var Gwe=s(qf);are=n(Gwe,"STRONG",{});var sVr=s(are);mHe=r(sVr,"retribert"),sVr.forEach(t),fHe=r(Gwe," \u2014 "),eS=n(Gwe,"A",{href:!0});var lVr=s(eS);gHe=r(lVr,"RetriBertConfig"),lVr.forEach(t),hHe=r(Gwe," (RetriBERT model)"),Gwe.forEach(t),uHe=i(y),Nf=n(y,"LI",{});var Owe=s(Nf);nre=n(Owe,"STRONG",{});var iVr=s(nre);pHe=r(iVr,"roberta"),iVr.forEach(t),_He=r(Owe," \u2014 "),oS=n(Owe,"A",{href:!0});var dVr=s(oS);bHe=r(dVr,"RobertaConfig"),dVr.forEach(t),vHe=r(Owe," (RoBERTa model)"),Owe.forEach(t),FHe=i(y),jf=n(y,"LI",{});var Vwe=s(jf);sre=n(Vwe,"STRONG",{});var cVr=s(sre);THe=r(cVr,"roformer"),cVr.forEach(t),MHe=r(Vwe," \u2014 "),rS=n(Vwe,"A",{href:!0});var mVr=s(rS);EHe=r(mVr,"RoFormerConfig"),mVr.forEach(t),CHe=r(Vwe," (RoFormer model)"),Vwe.forEach(t),wHe=i(y),Df=n(y,"LI",{});var Xwe=s(Df);lre=n(Xwe,"STRONG",{});var fVr=s(lre);AHe=r(fVr,"segformer"),fVr.forEach(t),yHe=r(Xwe," \u2014 "),tS=n(Xwe,"A",{href:!0});var gVr=s(tS);LHe=r(gVr,"SegformerConfig"),gVr.forEach(t),xHe=r(Xwe," (SegFormer model)"),Xwe.forEach(t),$He=i(y),Gf=n(y,"LI",{});var zwe=s(Gf);ire=n(zwe,"STRONG",{});var hVr=s(ire);kHe=r(hVr,"sew"),hVr.forEach(t),SHe=r(zwe," \u2014 "),aS=n(zwe,"A",{href:!0});var uVr=s(aS);RHe=r(uVr,"SEWConfig"),uVr.forEach(t),PHe=r(zwe," (SEW model)"),zwe.forEach(t),BHe=i(y),Of=n(y,"LI",{});var Wwe=s(Of);dre=n(Wwe,"STRONG",{});var pVr=s(dre);IHe=r(pVr,"sew-d"),pVr.forEach(t),qHe=r(Wwe," \u2014 "),nS=n(Wwe,"A",{href:!0});var _Vr=s(nS);NHe=r(_Vr,"SEWDConfig"),_Vr.forEach(t),jHe=r(Wwe," (SEW-D model)"),Wwe.forEach(t),DHe=i(y),Vf=n(y,"LI",{});var Qwe=s(Vf);cre=n(Qwe,"STRONG",{});var bVr=s(cre);GHe=r(bVr,"speech-encoder-decoder"),bVr.forEach(t),OHe=r(Qwe," \u2014 "),sS=n(Qwe,"A",{href:!0});var vVr=s(sS);VHe=r(vVr,"SpeechEncoderDecoderConfig"),vVr.forEach(t),XHe=r(Qwe," (Speech Encoder decoder model)"),Qwe.forEach(t),zHe=i(y),Xf=n(y,"LI",{});var Hwe=s(Xf);mre=n(Hwe,"STRONG",{});var FVr=s(mre);WHe=r(FVr,"speech_to_text"),FVr.forEach(t),QHe=r(Hwe," \u2014 "),lS=n(Hwe,"A",{href:!0});var TVr=s(lS);HHe=r(TVr,"Speech2TextConfig"),TVr.forEach(t),UHe=r(Hwe," (Speech2Text model)"),Hwe.forEach(t),JHe=i(y),zf=n(y,"LI",{});var Uwe=s(zf);fre=n(Uwe,"STRONG",{});var MVr=s(fre);YHe=r(MVr,"speech_to_text_2"),MVr.forEach(t),KHe=r(Uwe," \u2014 "),iS=n(Uwe,"A",{href:!0});var EVr=s(iS);ZHe=r(EVr,"Speech2Text2Config"),EVr.forEach(t),eUe=r(Uwe," (Speech2Text2 model)"),Uwe.forEach(t),oUe=i(y),Wf=n(y,"LI",{});var Jwe=s(Wf);gre=n(Jwe,"STRONG",{});var CVr=s(gre);rUe=r(CVr,"splinter"),CVr.forEach(t),tUe=r(Jwe," \u2014 "),dS=n(Jwe,"A",{href:!0});var wVr=s(dS);aUe=r(wVr,"SplinterConfig"),wVr.forEach(t),nUe=r(Jwe," (Splinter model)"),Jwe.forEach(t),sUe=i(y),Qf=n(y,"LI",{});var Ywe=s(Qf);hre=n(Ywe,"STRONG",{});var AVr=s(hre);lUe=r(AVr,"squeezebert"),AVr.forEach(t),iUe=r(Ywe," \u2014 "),cS=n(Ywe,"A",{href:!0});var yVr=s(cS);dUe=r(yVr,"SqueezeBertConfig"),yVr.forEach(t),cUe=r(Ywe," (SqueezeBERT model)"),Ywe.forEach(t),mUe=i(y),Hf=n(y,"LI",{});var Kwe=s(Hf);ure=n(Kwe,"STRONG",{});var LVr=s(ure);fUe=r(LVr,"swin"),LVr.forEach(t),gUe=r(Kwe," \u2014 "),mS=n(Kwe,"A",{href:!0});var xVr=s(mS);hUe=r(xVr,"SwinConfig"),xVr.forEach(t),uUe=r(Kwe," (Swin model)"),Kwe.forEach(t),pUe=i(y),Uf=n(y,"LI",{});var Zwe=s(Uf);pre=n(Zwe,"STRONG",{});var $Vr=s(pre);_Ue=r($Vr,"t5"),$Vr.forEach(t),bUe=r(Zwe," \u2014 "),fS=n(Zwe,"A",{href:!0});var kVr=s(fS);vUe=r(kVr,"T5Config"),kVr.forEach(t),FUe=r(Zwe," (T5 model)"),Zwe.forEach(t),TUe=i(y),Jf=n(y,"LI",{});var e0e=s(Jf);_re=n(e0e,"STRONG",{});var SVr=s(_re);MUe=r(SVr,"tapas"),SVr.forEach(t),EUe=r(e0e," \u2014 "),gS=n(e0e,"A",{href:!0});var RVr=s(gS);CUe=r(RVr,"TapasConfig"),RVr.forEach(t),wUe=r(e0e," (TAPAS model)"),e0e.forEach(t),AUe=i(y),Yf=n(y,"LI",{});var o0e=s(Yf);bre=n(o0e,"STRONG",{});var PVr=s(bre);yUe=r(PVr,"trajectory_transformer"),PVr.forEach(t),LUe=r(o0e," \u2014 "),hS=n(o0e,"A",{href:!0});var BVr=s(hS);xUe=r(BVr,"TrajectoryTransformerConfig"),BVr.forEach(t),$Ue=r(o0e," (Trajectory Transformer model)"),o0e.forEach(t),kUe=i(y),Kf=n(y,"LI",{});var r0e=s(Kf);vre=n(r0e,"STRONG",{});var IVr=s(vre);SUe=r(IVr,"transfo-xl"),IVr.forEach(t),RUe=r(r0e," \u2014 "),uS=n(r0e,"A",{href:!0});var qVr=s(uS);PUe=r(qVr,"TransfoXLConfig"),qVr.forEach(t),BUe=r(r0e," (Transformer-XL model)"),r0e.forEach(t),IUe=i(y),Zf=n(y,"LI",{});var t0e=s(Zf);Fre=n(t0e,"STRONG",{});var NVr=s(Fre);qUe=r(NVr,"trocr"),NVr.forEach(t),NUe=r(t0e," \u2014 "),pS=n(t0e,"A",{href:!0});var jVr=s(pS);jUe=r(jVr,"TrOCRConfig"),jVr.forEach(t),DUe=r(t0e," (TrOCR model)"),t0e.forEach(t),GUe=i(y),eg=n(y,"LI",{});var a0e=s(eg);Tre=n(a0e,"STRONG",{});var DVr=s(Tre);OUe=r(DVr,"unispeech"),DVr.forEach(t),VUe=r(a0e," \u2014 "),_S=n(a0e,"A",{href:!0});var GVr=s(_S);XUe=r(GVr,"UniSpeechConfig"),GVr.forEach(t),zUe=r(a0e," (UniSpeech model)"),a0e.forEach(t),WUe=i(y),og=n(y,"LI",{});var n0e=s(og);Mre=n(n0e,"STRONG",{});var OVr=s(Mre);QUe=r(OVr,"unispeech-sat"),OVr.forEach(t),HUe=r(n0e," \u2014 "),bS=n(n0e,"A",{href:!0});var VVr=s(bS);UUe=r(VVr,"UniSpeechSatConfig"),VVr.forEach(t),JUe=r(n0e," (UniSpeechSat model)"),n0e.forEach(t),YUe=i(y),rg=n(y,"LI",{});var s0e=s(rg);Ere=n(s0e,"STRONG",{});var XVr=s(Ere);KUe=r(XVr,"van"),XVr.forEach(t),ZUe=r(s0e," \u2014 "),vS=n(s0e,"A",{href:!0});var zVr=s(vS);eJe=r(zVr,"VanConfig"),zVr.forEach(t),oJe=r(s0e," (VAN model)"),s0e.forEach(t),rJe=i(y),tg=n(y,"LI",{});var l0e=s(tg);Cre=n(l0e,"STRONG",{});var WVr=s(Cre);tJe=r(WVr,"vilt"),WVr.forEach(t),aJe=r(l0e," \u2014 "),FS=n(l0e,"A",{href:!0});var QVr=s(FS);nJe=r(QVr,"ViltConfig"),QVr.forEach(t),sJe=r(l0e," (ViLT model)"),l0e.forEach(t),lJe=i(y),ag=n(y,"LI",{});var i0e=s(ag);wre=n(i0e,"STRONG",{});var HVr=s(wre);iJe=r(HVr,"vision-encoder-decoder"),HVr.forEach(t),dJe=r(i0e," \u2014 "),TS=n(i0e,"A",{href:!0});var UVr=s(TS);cJe=r(UVr,"VisionEncoderDecoderConfig"),UVr.forEach(t),mJe=r(i0e," (Vision Encoder decoder model)"),i0e.forEach(t),fJe=i(y),ng=n(y,"LI",{});var d0e=s(ng);Are=n(d0e,"STRONG",{});var JVr=s(Are);gJe=r(JVr,"vision-text-dual-encoder"),JVr.forEach(t),hJe=r(d0e," \u2014 "),MS=n(d0e,"A",{href:!0});var YVr=s(MS);uJe=r(YVr,"VisionTextDualEncoderConfig"),YVr.forEach(t),pJe=r(d0e," (VisionTextDualEncoder model)"),d0e.forEach(t),_Je=i(y),sg=n(y,"LI",{});var c0e=s(sg);yre=n(c0e,"STRONG",{});var KVr=s(yre);bJe=r(KVr,"visual_bert"),KVr.forEach(t),vJe=r(c0e," \u2014 "),ES=n(c0e,"A",{href:!0});var ZVr=s(ES);FJe=r(ZVr,"VisualBertConfig"),ZVr.forEach(t),TJe=r(c0e," (VisualBert model)"),c0e.forEach(t),MJe=i(y),lg=n(y,"LI",{});var m0e=s(lg);Lre=n(m0e,"STRONG",{});var eXr=s(Lre);EJe=r(eXr,"vit"),eXr.forEach(t),CJe=r(m0e," \u2014 "),CS=n(m0e,"A",{href:!0});var oXr=s(CS);wJe=r(oXr,"ViTConfig"),oXr.forEach(t),AJe=r(m0e," (ViT model)"),m0e.forEach(t),yJe=i(y),ig=n(y,"LI",{});var f0e=s(ig);xre=n(f0e,"STRONG",{});var rXr=s(xre);LJe=r(rXr,"vit_mae"),rXr.forEach(t),xJe=r(f0e," \u2014 "),wS=n(f0e,"A",{href:!0});var tXr=s(wS);$Je=r(tXr,"ViTMAEConfig"),tXr.forEach(t),kJe=r(f0e," (ViTMAE model)"),f0e.forEach(t),SJe=i(y),dg=n(y,"LI",{});var g0e=s(dg);$re=n(g0e,"STRONG",{});var aXr=s($re);RJe=r(aXr,"wav2vec2"),aXr.forEach(t),PJe=r(g0e," \u2014 "),AS=n(g0e,"A",{href:!0});var nXr=s(AS);BJe=r(nXr,"Wav2Vec2Config"),nXr.forEach(t),IJe=r(g0e," (Wav2Vec2 model)"),g0e.forEach(t),qJe=i(y),cg=n(y,"LI",{});var h0e=s(cg);kre=n(h0e,"STRONG",{});var sXr=s(kre);NJe=r(sXr,"wav2vec2-conformer"),sXr.forEach(t),jJe=r(h0e," \u2014 "),yS=n(h0e,"A",{href:!0});var lXr=s(yS);DJe=r(lXr,"Wav2Vec2ConformerConfig"),lXr.forEach(t),GJe=r(h0e," (Wav2Vec2-Conformer model)"),h0e.forEach(t),OJe=i(y),mg=n(y,"LI",{});var u0e=s(mg);Sre=n(u0e,"STRONG",{});var iXr=s(Sre);VJe=r(iXr,"wavlm"),iXr.forEach(t),XJe=r(u0e," \u2014 "),LS=n(u0e,"A",{href:!0});var dXr=s(LS);zJe=r(dXr,"WavLMConfig"),dXr.forEach(t),WJe=r(u0e," (WavLM model)"),u0e.forEach(t),QJe=i(y),fg=n(y,"LI",{});var p0e=s(fg);Rre=n(p0e,"STRONG",{});var cXr=s(Rre);HJe=r(cXr,"xglm"),cXr.forEach(t),UJe=r(p0e," \u2014 "),xS=n(p0e,"A",{href:!0});var mXr=s(xS);JJe=r(mXr,"XGLMConfig"),mXr.forEach(t),YJe=r(p0e," (XGLM model)"),p0e.forEach(t),KJe=i(y),gg=n(y,"LI",{});var _0e=s(gg);Pre=n(_0e,"STRONG",{});var fXr=s(Pre);ZJe=r(fXr,"xlm"),fXr.forEach(t),eYe=r(_0e," \u2014 "),$S=n(_0e,"A",{href:!0});var gXr=s($S);oYe=r(gXr,"XLMConfig"),gXr.forEach(t),rYe=r(_0e," (XLM model)"),_0e.forEach(t),tYe=i(y),hg=n(y,"LI",{});var b0e=s(hg);Bre=n(b0e,"STRONG",{});var hXr=s(Bre);aYe=r(hXr,"xlm-prophetnet"),hXr.forEach(t),nYe=r(b0e," \u2014 "),kS=n(b0e,"A",{href:!0});var uXr=s(kS);sYe=r(uXr,"XLMProphetNetConfig"),uXr.forEach(t),lYe=r(b0e," (XLMProphetNet model)"),b0e.forEach(t),iYe=i(y),ug=n(y,"LI",{});var v0e=s(ug);Ire=n(v0e,"STRONG",{});var pXr=s(Ire);dYe=r(pXr,"xlm-roberta"),pXr.forEach(t),cYe=r(v0e," \u2014 "),SS=n(v0e,"A",{href:!0});var _Xr=s(SS);mYe=r(_Xr,"XLMRobertaConfig"),_Xr.forEach(t),fYe=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),gYe=i(y),pg=n(y,"LI",{});var F0e=s(pg);qre=n(F0e,"STRONG",{});var bXr=s(qre);hYe=r(bXr,"xlm-roberta-xl"),bXr.forEach(t),uYe=r(F0e," \u2014 "),RS=n(F0e,"A",{href:!0});var vXr=s(RS);pYe=r(vXr,"XLMRobertaXLConfig"),vXr.forEach(t),_Ye=r(F0e," (XLM-RoBERTa-XL model)"),F0e.forEach(t),bYe=i(y),_g=n(y,"LI",{});var T0e=s(_g);Nre=n(T0e,"STRONG",{});var FXr=s(Nre);vYe=r(FXr,"xlnet"),FXr.forEach(t),FYe=r(T0e," \u2014 "),PS=n(T0e,"A",{href:!0});var TXr=s(PS);TYe=r(TXr,"XLNetConfig"),TXr.forEach(t),MYe=r(T0e," (XLNet model)"),T0e.forEach(t),EYe=i(y),bg=n(y,"LI",{});var M0e=s(bg);jre=n(M0e,"STRONG",{});var MXr=s(jre);CYe=r(MXr,"yolos"),MXr.forEach(t),wYe=r(M0e," \u2014 "),BS=n(M0e,"A",{href:!0});var EXr=s(BS);AYe=r(EXr,"YolosConfig"),EXr.forEach(t),yYe=r(M0e," (YOLOS model)"),M0e.forEach(t),LYe=i(y),vg=n(y,"LI",{});var E0e=s(vg);Dre=n(E0e,"STRONG",{});var CXr=s(Dre);xYe=r(CXr,"yoso"),CXr.forEach(t),$Ye=r(E0e," \u2014 "),IS=n(E0e,"A",{href:!0});var wXr=s(IS);kYe=r(wXr,"YosoConfig"),wXr.forEach(t),SYe=r(E0e," (YOSO model)"),E0e.forEach(t),y.forEach(t),RYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),PYe=i(et),Tg=n(et,"DIV",{class:!0});var tje=s(Tg);T(Ty.$$.fragment,tje),BYe=i(tje),Gre=n(tje,"P",{});var AXr=s(Gre);IYe=r(AXr,"Register a new configuration for this class."),AXr.forEach(t),tje.forEach(t),et.forEach(t),sqe=i(m),Fi=n(m,"H2",{class:!0});var aje=s(Fi);Mg=n(aje,"A",{id:!0,class:!0,href:!0});var yXr=s(Mg);Ore=n(yXr,"SPAN",{});var LXr=s(Ore);T(My.$$.fragment,LXr),LXr.forEach(t),yXr.forEach(t),qYe=i(aje),Vre=n(aje,"SPAN",{});var xXr=s(Vre);NYe=r(xXr,"AutoTokenizer"),xXr.forEach(t),aje.forEach(t),lqe=i(m),wo=n(m,"DIV",{class:!0});var Is=s(wo);T(Ey.$$.fragment,Is),jYe=i(Is),Cy=n(Is,"P",{});var nje=s(Cy);DYe=r(nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qS=n(nje,"A",{href:!0});var $Xr=s(qS);GYe=r($Xr,"AutoTokenizer.from_pretrained()"),$Xr.forEach(t),OYe=r(nje," class method."),nje.forEach(t),VYe=i(Is),wy=n(Is,"P",{});var sje=s(wy);XYe=r(sje,"This class cannot be instantiated directly using "),Xre=n(sje,"CODE",{});var kXr=s(Xre);zYe=r(kXr,"__init__()"),kXr.forEach(t),WYe=r(sje," (throws an error)."),sje.forEach(t),QYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(Ay.$$.fragment,qs),HYe=i(qs),zre=n(qs,"P",{});var SXr=s(zre);UYe=r(SXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SXr.forEach(t),JYe=i(qs),Aa=n(qs,"P",{});var pA=s(Aa);YYe=r(pA,"The tokenizer class to instantiate is selected based on the "),Wre=n(pA,"CODE",{});var RXr=s(Wre);KYe=r(RXr,"model_type"),RXr.forEach(t),ZYe=r(pA,` property of the config object (either
passed as an argument or loaded from `),Qre=n(pA,"CODE",{});var PXr=s(Qre);eKe=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),oKe=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=n(pA,"CODE",{});var BXr=s(Hre);rKe=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),tKe=r(pA,":"),pA.forEach(t),aKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var yx=s(Sn);Ure=n(yx,"STRONG",{});var IXr=s(Ure);nKe=r(IXr,"albert"),IXr.forEach(t),sKe=r(yx," \u2014 "),NS=n(yx,"A",{href:!0});var qXr=s(NS);lKe=r(qXr,"AlbertTokenizer"),qXr.forEach(t),iKe=r(yx," or "),jS=n(yx,"A",{href:!0});var NXr=s(jS);dKe=r(NXr,"AlbertTokenizerFast"),NXr.forEach(t),cKe=r(yx," (ALBERT model)"),yx.forEach(t),mKe=i(S),Rn=n(S,"LI",{});var Lx=s(Rn);Jre=n(Lx,"STRONG",{});var jXr=s(Jre);fKe=r(jXr,"bart"),jXr.forEach(t),gKe=r(Lx," \u2014 "),DS=n(Lx,"A",{href:!0});var DXr=s(DS);hKe=r(DXr,"BartTokenizer"),DXr.forEach(t),uKe=r(Lx," or "),GS=n(Lx,"A",{href:!0});var GXr=s(GS);pKe=r(GXr,"BartTokenizerFast"),GXr.forEach(t),_Ke=r(Lx," (BART model)"),Lx.forEach(t),bKe=i(S),Pn=n(S,"LI",{});var xx=s(Pn);Yre=n(xx,"STRONG",{});var OXr=s(Yre);vKe=r(OXr,"barthez"),OXr.forEach(t),FKe=r(xx," \u2014 "),OS=n(xx,"A",{href:!0});var VXr=s(OS);TKe=r(VXr,"BarthezTokenizer"),VXr.forEach(t),MKe=r(xx," or "),VS=n(xx,"A",{href:!0});var XXr=s(VS);EKe=r(XXr,"BarthezTokenizerFast"),XXr.forEach(t),CKe=r(xx," (BARThez model)"),xx.forEach(t),wKe=i(S),Eg=n(S,"LI",{});var C0e=s(Eg);Kre=n(C0e,"STRONG",{});var zXr=s(Kre);AKe=r(zXr,"bartpho"),zXr.forEach(t),yKe=r(C0e," \u2014 "),XS=n(C0e,"A",{href:!0});var WXr=s(XS);LKe=r(WXr,"BartphoTokenizer"),WXr.forEach(t),xKe=r(C0e," (BARTpho model)"),C0e.forEach(t),$Ke=i(S),Bn=n(S,"LI",{});var $x=s(Bn);Zre=n($x,"STRONG",{});var QXr=s(Zre);kKe=r(QXr,"bert"),QXr.forEach(t),SKe=r($x," \u2014 "),zS=n($x,"A",{href:!0});var HXr=s(zS);RKe=r(HXr,"BertTokenizer"),HXr.forEach(t),PKe=r($x," or "),WS=n($x,"A",{href:!0});var UXr=s(WS);BKe=r(UXr,"BertTokenizerFast"),UXr.forEach(t),IKe=r($x," (BERT model)"),$x.forEach(t),qKe=i(S),Cg=n(S,"LI",{});var w0e=s(Cg);ete=n(w0e,"STRONG",{});var JXr=s(ete);NKe=r(JXr,"bert-generation"),JXr.forEach(t),jKe=r(w0e," \u2014 "),QS=n(w0e,"A",{href:!0});var YXr=s(QS);DKe=r(YXr,"BertGenerationTokenizer"),YXr.forEach(t),GKe=r(w0e," (Bert Generation model)"),w0e.forEach(t),OKe=i(S),wg=n(S,"LI",{});var A0e=s(wg);ote=n(A0e,"STRONG",{});var KXr=s(ote);VKe=r(KXr,"bert-japanese"),KXr.forEach(t),XKe=r(A0e," \u2014 "),HS=n(A0e,"A",{href:!0});var ZXr=s(HS);zKe=r(ZXr,"BertJapaneseTokenizer"),ZXr.forEach(t),WKe=r(A0e," (BertJapanese model)"),A0e.forEach(t),QKe=i(S),Ag=n(S,"LI",{});var y0e=s(Ag);rte=n(y0e,"STRONG",{});var ezr=s(rte);HKe=r(ezr,"bertweet"),ezr.forEach(t),UKe=r(y0e," \u2014 "),US=n(y0e,"A",{href:!0});var ozr=s(US);JKe=r(ozr,"BertweetTokenizer"),ozr.forEach(t),YKe=r(y0e," (Bertweet model)"),y0e.forEach(t),KKe=i(S),In=n(S,"LI",{});var kx=s(In);tte=n(kx,"STRONG",{});var rzr=s(tte);ZKe=r(rzr,"big_bird"),rzr.forEach(t),eZe=r(kx," \u2014 "),JS=n(kx,"A",{href:!0});var tzr=s(JS);oZe=r(tzr,"BigBirdTokenizer"),tzr.forEach(t),rZe=r(kx," or "),YS=n(kx,"A",{href:!0});var azr=s(YS);tZe=r(azr,"BigBirdTokenizerFast"),azr.forEach(t),aZe=r(kx," (BigBird model)"),kx.forEach(t),nZe=i(S),qn=n(S,"LI",{});var Sx=s(qn);ate=n(Sx,"STRONG",{});var nzr=s(ate);sZe=r(nzr,"bigbird_pegasus"),nzr.forEach(t),lZe=r(Sx," \u2014 "),KS=n(Sx,"A",{href:!0});var szr=s(KS);iZe=r(szr,"PegasusTokenizer"),szr.forEach(t),dZe=r(Sx," or "),ZS=n(Sx,"A",{href:!0});var lzr=s(ZS);cZe=r(lzr,"PegasusTokenizerFast"),lzr.forEach(t),mZe=r(Sx," (BigBirdPegasus model)"),Sx.forEach(t),fZe=i(S),Nn=n(S,"LI",{});var Rx=s(Nn);nte=n(Rx,"STRONG",{});var izr=s(nte);gZe=r(izr,"blenderbot"),izr.forEach(t),hZe=r(Rx," \u2014 "),eR=n(Rx,"A",{href:!0});var dzr=s(eR);uZe=r(dzr,"BlenderbotTokenizer"),dzr.forEach(t),pZe=r(Rx," or "),oR=n(Rx,"A",{href:!0});var czr=s(oR);_Ze=r(czr,"BlenderbotTokenizerFast"),czr.forEach(t),bZe=r(Rx," (Blenderbot model)"),Rx.forEach(t),vZe=i(S),yg=n(S,"LI",{});var L0e=s(yg);ste=n(L0e,"STRONG",{});var mzr=s(ste);FZe=r(mzr,"blenderbot-small"),mzr.forEach(t),TZe=r(L0e," \u2014 "),rR=n(L0e,"A",{href:!0});var fzr=s(rR);MZe=r(fzr,"BlenderbotSmallTokenizer"),fzr.forEach(t),EZe=r(L0e," (BlenderbotSmall model)"),L0e.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var x0e=s(Lg);lte=n(x0e,"STRONG",{});var gzr=s(lte);wZe=r(gzr,"byt5"),gzr.forEach(t),AZe=r(x0e," \u2014 "),tR=n(x0e,"A",{href:!0});var hzr=s(tR);yZe=r(hzr,"ByT5Tokenizer"),hzr.forEach(t),LZe=r(x0e," (ByT5 model)"),x0e.forEach(t),xZe=i(S),jn=n(S,"LI",{});var Px=s(jn);ite=n(Px,"STRONG",{});var uzr=s(ite);$Ze=r(uzr,"camembert"),uzr.forEach(t),kZe=r(Px," \u2014 "),aR=n(Px,"A",{href:!0});var pzr=s(aR);SZe=r(pzr,"CamembertTokenizer"),pzr.forEach(t),RZe=r(Px," or "),nR=n(Px,"A",{href:!0});var _zr=s(nR);PZe=r(_zr,"CamembertTokenizerFast"),_zr.forEach(t),BZe=r(Px," (CamemBERT model)"),Px.forEach(t),IZe=i(S),xg=n(S,"LI",{});var $0e=s(xg);dte=n($0e,"STRONG",{});var bzr=s(dte);qZe=r(bzr,"canine"),bzr.forEach(t),NZe=r($0e," \u2014 "),sR=n($0e,"A",{href:!0});var vzr=s(sR);jZe=r(vzr,"CanineTokenizer"),vzr.forEach(t),DZe=r($0e," (Canine model)"),$0e.forEach(t),GZe=i(S),Dn=n(S,"LI",{});var Bx=s(Dn);cte=n(Bx,"STRONG",{});var Fzr=s(cte);OZe=r(Fzr,"clip"),Fzr.forEach(t),VZe=r(Bx," \u2014 "),lR=n(Bx,"A",{href:!0});var Tzr=s(lR);XZe=r(Tzr,"CLIPTokenizer"),Tzr.forEach(t),zZe=r(Bx," or "),iR=n(Bx,"A",{href:!0});var Mzr=s(iR);WZe=r(Mzr,"CLIPTokenizerFast"),Mzr.forEach(t),QZe=r(Bx," (CLIP model)"),Bx.forEach(t),HZe=i(S),Gn=n(S,"LI",{});var Ix=s(Gn);mte=n(Ix,"STRONG",{});var Ezr=s(mte);UZe=r(Ezr,"convbert"),Ezr.forEach(t),JZe=r(Ix," \u2014 "),dR=n(Ix,"A",{href:!0});var Czr=s(dR);YZe=r(Czr,"ConvBertTokenizer"),Czr.forEach(t),KZe=r(Ix," or "),cR=n(Ix,"A",{href:!0});var wzr=s(cR);ZZe=r(wzr,"ConvBertTokenizerFast"),wzr.forEach(t),eeo=r(Ix," (ConvBERT model)"),Ix.forEach(t),oeo=i(S),On=n(S,"LI",{});var qx=s(On);fte=n(qx,"STRONG",{});var Azr=s(fte);reo=r(Azr,"cpm"),Azr.forEach(t),teo=r(qx," \u2014 "),mR=n(qx,"A",{href:!0});var yzr=s(mR);aeo=r(yzr,"CpmTokenizer"),yzr.forEach(t),neo=r(qx," or "),fR=n(qx,"A",{href:!0});var Lzr=s(fR);seo=r(Lzr,"CpmTokenizerFast"),Lzr.forEach(t),leo=r(qx," (CPM model)"),qx.forEach(t),ieo=i(S),$g=n(S,"LI",{});var k0e=s($g);gte=n(k0e,"STRONG",{});var xzr=s(gte);deo=r(xzr,"ctrl"),xzr.forEach(t),ceo=r(k0e," \u2014 "),gR=n(k0e,"A",{href:!0});var $zr=s(gR);meo=r($zr,"CTRLTokenizer"),$zr.forEach(t),feo=r(k0e," (CTRL model)"),k0e.forEach(t),geo=i(S),Vn=n(S,"LI",{});var Nx=s(Vn);hte=n(Nx,"STRONG",{});var kzr=s(hte);heo=r(kzr,"data2vec-text"),kzr.forEach(t),ueo=r(Nx," \u2014 "),hR=n(Nx,"A",{href:!0});var Szr=s(hR);peo=r(Szr,"RobertaTokenizer"),Szr.forEach(t),_eo=r(Nx," or "),uR=n(Nx,"A",{href:!0});var Rzr=s(uR);beo=r(Rzr,"RobertaTokenizerFast"),Rzr.forEach(t),veo=r(Nx," (Data2VecText model)"),Nx.forEach(t),Feo=i(S),Xn=n(S,"LI",{});var jx=s(Xn);ute=n(jx,"STRONG",{});var Pzr=s(ute);Teo=r(Pzr,"deberta"),Pzr.forEach(t),Meo=r(jx," \u2014 "),pR=n(jx,"A",{href:!0});var Bzr=s(pR);Eeo=r(Bzr,"DebertaTokenizer"),Bzr.forEach(t),Ceo=r(jx," or "),_R=n(jx,"A",{href:!0});var Izr=s(_R);weo=r(Izr,"DebertaTokenizerFast"),Izr.forEach(t),Aeo=r(jx," (DeBERTa model)"),jx.forEach(t),yeo=i(S),zn=n(S,"LI",{});var Dx=s(zn);pte=n(Dx,"STRONG",{});var qzr=s(pte);Leo=r(qzr,"deberta-v2"),qzr.forEach(t),xeo=r(Dx," \u2014 "),bR=n(Dx,"A",{href:!0});var Nzr=s(bR);$eo=r(Nzr,"DebertaV2Tokenizer"),Nzr.forEach(t),keo=r(Dx," or "),vR=n(Dx,"A",{href:!0});var jzr=s(vR);Seo=r(jzr,"DebertaV2TokenizerFast"),jzr.forEach(t),Reo=r(Dx," (DeBERTa-v2 model)"),Dx.forEach(t),Peo=i(S),Wn=n(S,"LI",{});var Gx=s(Wn);_te=n(Gx,"STRONG",{});var Dzr=s(_te);Beo=r(Dzr,"distilbert"),Dzr.forEach(t),Ieo=r(Gx," \u2014 "),FR=n(Gx,"A",{href:!0});var Gzr=s(FR);qeo=r(Gzr,"DistilBertTokenizer"),Gzr.forEach(t),Neo=r(Gx," or "),TR=n(Gx,"A",{href:!0});var Ozr=s(TR);jeo=r(Ozr,"DistilBertTokenizerFast"),Ozr.forEach(t),Deo=r(Gx," (DistilBERT model)"),Gx.forEach(t),Geo=i(S),Qn=n(S,"LI",{});var Ox=s(Qn);bte=n(Ox,"STRONG",{});var Vzr=s(bte);Oeo=r(Vzr,"dpr"),Vzr.forEach(t),Veo=r(Ox," \u2014 "),MR=n(Ox,"A",{href:!0});var Xzr=s(MR);Xeo=r(Xzr,"DPRQuestionEncoderTokenizer"),Xzr.forEach(t),zeo=r(Ox," or "),ER=n(Ox,"A",{href:!0});var zzr=s(ER);Weo=r(zzr,"DPRQuestionEncoderTokenizerFast"),zzr.forEach(t),Qeo=r(Ox," (DPR model)"),Ox.forEach(t),Heo=i(S),Hn=n(S,"LI",{});var Vx=s(Hn);vte=n(Vx,"STRONG",{});var Wzr=s(vte);Ueo=r(Wzr,"electra"),Wzr.forEach(t),Jeo=r(Vx," \u2014 "),CR=n(Vx,"A",{href:!0});var Qzr=s(CR);Yeo=r(Qzr,"ElectraTokenizer"),Qzr.forEach(t),Keo=r(Vx," or "),wR=n(Vx,"A",{href:!0});var Hzr=s(wR);Zeo=r(Hzr,"ElectraTokenizerFast"),Hzr.forEach(t),eoo=r(Vx," (ELECTRA model)"),Vx.forEach(t),ooo=i(S),kg=n(S,"LI",{});var S0e=s(kg);Fte=n(S0e,"STRONG",{});var Uzr=s(Fte);roo=r(Uzr,"flaubert"),Uzr.forEach(t),too=r(S0e," \u2014 "),AR=n(S0e,"A",{href:!0});var Jzr=s(AR);aoo=r(Jzr,"FlaubertTokenizer"),Jzr.forEach(t),noo=r(S0e," (FlauBERT model)"),S0e.forEach(t),soo=i(S),Un=n(S,"LI",{});var Xx=s(Un);Tte=n(Xx,"STRONG",{});var Yzr=s(Tte);loo=r(Yzr,"fnet"),Yzr.forEach(t),ioo=r(Xx," \u2014 "),yR=n(Xx,"A",{href:!0});var Kzr=s(yR);doo=r(Kzr,"FNetTokenizer"),Kzr.forEach(t),coo=r(Xx," or "),LR=n(Xx,"A",{href:!0});var Zzr=s(LR);moo=r(Zzr,"FNetTokenizerFast"),Zzr.forEach(t),foo=r(Xx," (FNet model)"),Xx.forEach(t),goo=i(S),Sg=n(S,"LI",{});var R0e=s(Sg);Mte=n(R0e,"STRONG",{});var eWr=s(Mte);hoo=r(eWr,"fsmt"),eWr.forEach(t),uoo=r(R0e," \u2014 "),xR=n(R0e,"A",{href:!0});var oWr=s(xR);poo=r(oWr,"FSMTTokenizer"),oWr.forEach(t),_oo=r(R0e," (FairSeq Machine-Translation model)"),R0e.forEach(t),boo=i(S),Jn=n(S,"LI",{});var zx=s(Jn);Ete=n(zx,"STRONG",{});var rWr=s(Ete);voo=r(rWr,"funnel"),rWr.forEach(t),Foo=r(zx," \u2014 "),$R=n(zx,"A",{href:!0});var tWr=s($R);Too=r(tWr,"FunnelTokenizer"),tWr.forEach(t),Moo=r(zx," or "),kR=n(zx,"A",{href:!0});var aWr=s(kR);Eoo=r(aWr,"FunnelTokenizerFast"),aWr.forEach(t),Coo=r(zx," (Funnel Transformer model)"),zx.forEach(t),woo=i(S),Yn=n(S,"LI",{});var Wx=s(Yn);Cte=n(Wx,"STRONG",{});var nWr=s(Cte);Aoo=r(nWr,"gpt2"),nWr.forEach(t),yoo=r(Wx," \u2014 "),SR=n(Wx,"A",{href:!0});var sWr=s(SR);Loo=r(sWr,"GPT2Tokenizer"),sWr.forEach(t),xoo=r(Wx," or "),RR=n(Wx,"A",{href:!0});var lWr=s(RR);$oo=r(lWr,"GPT2TokenizerFast"),lWr.forEach(t),koo=r(Wx," (OpenAI GPT-2 model)"),Wx.forEach(t),Soo=i(S),Kn=n(S,"LI",{});var Qx=s(Kn);wte=n(Qx,"STRONG",{});var iWr=s(wte);Roo=r(iWr,"gpt_neo"),iWr.forEach(t),Poo=r(Qx," \u2014 "),PR=n(Qx,"A",{href:!0});var dWr=s(PR);Boo=r(dWr,"GPT2Tokenizer"),dWr.forEach(t),Ioo=r(Qx," or "),BR=n(Qx,"A",{href:!0});var cWr=s(BR);qoo=r(cWr,"GPT2TokenizerFast"),cWr.forEach(t),Noo=r(Qx," (GPT Neo model)"),Qx.forEach(t),joo=i(S),Zn=n(S,"LI",{});var Hx=s(Zn);Ate=n(Hx,"STRONG",{});var mWr=s(Ate);Doo=r(mWr,"gptj"),mWr.forEach(t),Goo=r(Hx," \u2014 "),IR=n(Hx,"A",{href:!0});var fWr=s(IR);Ooo=r(fWr,"GPT2Tokenizer"),fWr.forEach(t),Voo=r(Hx," or "),qR=n(Hx,"A",{href:!0});var gWr=s(qR);Xoo=r(gWr,"GPT2TokenizerFast"),gWr.forEach(t),zoo=r(Hx," (GPT-J model)"),Hx.forEach(t),Woo=i(S),es=n(S,"LI",{});var Ux=s(es);yte=n(Ux,"STRONG",{});var hWr=s(yte);Qoo=r(hWr,"herbert"),hWr.forEach(t),Hoo=r(Ux," \u2014 "),NR=n(Ux,"A",{href:!0});var uWr=s(NR);Uoo=r(uWr,"HerbertTokenizer"),uWr.forEach(t),Joo=r(Ux," or "),jR=n(Ux,"A",{href:!0});var pWr=s(jR);Yoo=r(pWr,"HerbertTokenizerFast"),pWr.forEach(t),Koo=r(Ux," (HerBERT model)"),Ux.forEach(t),Zoo=i(S),Rg=n(S,"LI",{});var P0e=s(Rg);Lte=n(P0e,"STRONG",{});var _Wr=s(Lte);ero=r(_Wr,"hubert"),_Wr.forEach(t),oro=r(P0e," \u2014 "),DR=n(P0e,"A",{href:!0});var bWr=s(DR);rro=r(bWr,"Wav2Vec2CTCTokenizer"),bWr.forEach(t),tro=r(P0e," (Hubert model)"),P0e.forEach(t),aro=i(S),os=n(S,"LI",{});var Jx=s(os);xte=n(Jx,"STRONG",{});var vWr=s(xte);nro=r(vWr,"ibert"),vWr.forEach(t),sro=r(Jx," \u2014 "),GR=n(Jx,"A",{href:!0});var FWr=s(GR);lro=r(FWr,"RobertaTokenizer"),FWr.forEach(t),iro=r(Jx," or "),OR=n(Jx,"A",{href:!0});var TWr=s(OR);dro=r(TWr,"RobertaTokenizerFast"),TWr.forEach(t),cro=r(Jx," (I-BERT model)"),Jx.forEach(t),mro=i(S),rs=n(S,"LI",{});var Yx=s(rs);$te=n(Yx,"STRONG",{});var MWr=s($te);fro=r(MWr,"layoutlm"),MWr.forEach(t),gro=r(Yx," \u2014 "),VR=n(Yx,"A",{href:!0});var EWr=s(VR);hro=r(EWr,"LayoutLMTokenizer"),EWr.forEach(t),uro=r(Yx," or "),XR=n(Yx,"A",{href:!0});var CWr=s(XR);pro=r(CWr,"LayoutLMTokenizerFast"),CWr.forEach(t),_ro=r(Yx," (LayoutLM model)"),Yx.forEach(t),bro=i(S),ts=n(S,"LI",{});var Kx=s(ts);kte=n(Kx,"STRONG",{});var wWr=s(kte);vro=r(wWr,"layoutlmv2"),wWr.forEach(t),Fro=r(Kx," \u2014 "),zR=n(Kx,"A",{href:!0});var AWr=s(zR);Tro=r(AWr,"LayoutLMv2Tokenizer"),AWr.forEach(t),Mro=r(Kx," or "),WR=n(Kx,"A",{href:!0});var yWr=s(WR);Ero=r(yWr,"LayoutLMv2TokenizerFast"),yWr.forEach(t),Cro=r(Kx," (LayoutLMv2 model)"),Kx.forEach(t),wro=i(S),as=n(S,"LI",{});var Zx=s(as);Ste=n(Zx,"STRONG",{});var LWr=s(Ste);Aro=r(LWr,"layoutxlm"),LWr.forEach(t),yro=r(Zx," \u2014 "),QR=n(Zx,"A",{href:!0});var xWr=s(QR);Lro=r(xWr,"LayoutXLMTokenizer"),xWr.forEach(t),xro=r(Zx," or "),HR=n(Zx,"A",{href:!0});var $Wr=s(HR);$ro=r($Wr,"LayoutXLMTokenizerFast"),$Wr.forEach(t),kro=r(Zx," (LayoutXLM model)"),Zx.forEach(t),Sro=i(S),ns=n(S,"LI",{});var e$=s(ns);Rte=n(e$,"STRONG",{});var kWr=s(Rte);Rro=r(kWr,"led"),kWr.forEach(t),Pro=r(e$," \u2014 "),UR=n(e$,"A",{href:!0});var SWr=s(UR);Bro=r(SWr,"LEDTokenizer"),SWr.forEach(t),Iro=r(e$," or "),JR=n(e$,"A",{href:!0});var RWr=s(JR);qro=r(RWr,"LEDTokenizerFast"),RWr.forEach(t),Nro=r(e$," (LED model)"),e$.forEach(t),jro=i(S),ss=n(S,"LI",{});var o$=s(ss);Pte=n(o$,"STRONG",{});var PWr=s(Pte);Dro=r(PWr,"longformer"),PWr.forEach(t),Gro=r(o$," \u2014 "),YR=n(o$,"A",{href:!0});var BWr=s(YR);Oro=r(BWr,"LongformerTokenizer"),BWr.forEach(t),Vro=r(o$," or "),KR=n(o$,"A",{href:!0});var IWr=s(KR);Xro=r(IWr,"LongformerTokenizerFast"),IWr.forEach(t),zro=r(o$," (Longformer model)"),o$.forEach(t),Wro=i(S),Pg=n(S,"LI",{});var B0e=s(Pg);Bte=n(B0e,"STRONG",{});var qWr=s(Bte);Qro=r(qWr,"luke"),qWr.forEach(t),Hro=r(B0e," \u2014 "),ZR=n(B0e,"A",{href:!0});var NWr=s(ZR);Uro=r(NWr,"LukeTokenizer"),NWr.forEach(t),Jro=r(B0e," (LUKE model)"),B0e.forEach(t),Yro=i(S),ls=n(S,"LI",{});var r$=s(ls);Ite=n(r$,"STRONG",{});var jWr=s(Ite);Kro=r(jWr,"lxmert"),jWr.forEach(t),Zro=r(r$," \u2014 "),eP=n(r$,"A",{href:!0});var DWr=s(eP);eto=r(DWr,"LxmertTokenizer"),DWr.forEach(t),oto=r(r$," or "),oP=n(r$,"A",{href:!0});var GWr=s(oP);rto=r(GWr,"LxmertTokenizerFast"),GWr.forEach(t),tto=r(r$," (LXMERT model)"),r$.forEach(t),ato=i(S),Bg=n(S,"LI",{});var I0e=s(Bg);qte=n(I0e,"STRONG",{});var OWr=s(qte);nto=r(OWr,"m2m_100"),OWr.forEach(t),sto=r(I0e," \u2014 "),rP=n(I0e,"A",{href:!0});var VWr=s(rP);lto=r(VWr,"M2M100Tokenizer"),VWr.forEach(t),ito=r(I0e," (M2M100 model)"),I0e.forEach(t),dto=i(S),Ig=n(S,"LI",{});var q0e=s(Ig);Nte=n(q0e,"STRONG",{});var XWr=s(Nte);cto=r(XWr,"marian"),XWr.forEach(t),mto=r(q0e," \u2014 "),tP=n(q0e,"A",{href:!0});var zWr=s(tP);fto=r(zWr,"MarianTokenizer"),zWr.forEach(t),gto=r(q0e," (Marian model)"),q0e.forEach(t),hto=i(S),is=n(S,"LI",{});var t$=s(is);jte=n(t$,"STRONG",{});var WWr=s(jte);uto=r(WWr,"mbart"),WWr.forEach(t),pto=r(t$," \u2014 "),aP=n(t$,"A",{href:!0});var QWr=s(aP);_to=r(QWr,"MBartTokenizer"),QWr.forEach(t),bto=r(t$," or "),nP=n(t$,"A",{href:!0});var HWr=s(nP);vto=r(HWr,"MBartTokenizerFast"),HWr.forEach(t),Fto=r(t$," (mBART model)"),t$.forEach(t),Tto=i(S),ds=n(S,"LI",{});var a$=s(ds);Dte=n(a$,"STRONG",{});var UWr=s(Dte);Mto=r(UWr,"mbart50"),UWr.forEach(t),Eto=r(a$," \u2014 "),sP=n(a$,"A",{href:!0});var JWr=s(sP);Cto=r(JWr,"MBart50Tokenizer"),JWr.forEach(t),wto=r(a$," or "),lP=n(a$,"A",{href:!0});var YWr=s(lP);Ato=r(YWr,"MBart50TokenizerFast"),YWr.forEach(t),yto=r(a$," (mBART-50 model)"),a$.forEach(t),Lto=i(S),cs=n(S,"LI",{});var n$=s(cs);Gte=n(n$,"STRONG",{});var KWr=s(Gte);xto=r(KWr,"megatron-bert"),KWr.forEach(t),$to=r(n$," \u2014 "),iP=n(n$,"A",{href:!0});var ZWr=s(iP);kto=r(ZWr,"BertTokenizer"),ZWr.forEach(t),Sto=r(n$," or "),dP=n(n$,"A",{href:!0});var eQr=s(dP);Rto=r(eQr,"BertTokenizerFast"),eQr.forEach(t),Pto=r(n$," (MegatronBert model)"),n$.forEach(t),Bto=i(S),qg=n(S,"LI",{});var N0e=s(qg);Ote=n(N0e,"STRONG",{});var oQr=s(Ote);Ito=r(oQr,"mluke"),oQr.forEach(t),qto=r(N0e," \u2014 "),cP=n(N0e,"A",{href:!0});var rQr=s(cP);Nto=r(rQr,"MLukeTokenizer"),rQr.forEach(t),jto=r(N0e," (mLUKE model)"),N0e.forEach(t),Dto=i(S),ms=n(S,"LI",{});var s$=s(ms);Vte=n(s$,"STRONG",{});var tQr=s(Vte);Gto=r(tQr,"mobilebert"),tQr.forEach(t),Oto=r(s$," \u2014 "),mP=n(s$,"A",{href:!0});var aQr=s(mP);Vto=r(aQr,"MobileBertTokenizer"),aQr.forEach(t),Xto=r(s$," or "),fP=n(s$,"A",{href:!0});var nQr=s(fP);zto=r(nQr,"MobileBertTokenizerFast"),nQr.forEach(t),Wto=r(s$," (MobileBERT model)"),s$.forEach(t),Qto=i(S),fs=n(S,"LI",{});var l$=s(fs);Xte=n(l$,"STRONG",{});var sQr=s(Xte);Hto=r(sQr,"mpnet"),sQr.forEach(t),Uto=r(l$," \u2014 "),gP=n(l$,"A",{href:!0});var lQr=s(gP);Jto=r(lQr,"MPNetTokenizer"),lQr.forEach(t),Yto=r(l$," or "),hP=n(l$,"A",{href:!0});var iQr=s(hP);Kto=r(iQr,"MPNetTokenizerFast"),iQr.forEach(t),Zto=r(l$," (MPNet model)"),l$.forEach(t),eao=i(S),gs=n(S,"LI",{});var i$=s(gs);zte=n(i$,"STRONG",{});var dQr=s(zte);oao=r(dQr,"mt5"),dQr.forEach(t),rao=r(i$," \u2014 "),uP=n(i$,"A",{href:!0});var cQr=s(uP);tao=r(cQr,"MT5Tokenizer"),cQr.forEach(t),aao=r(i$," or "),pP=n(i$,"A",{href:!0});var mQr=s(pP);nao=r(mQr,"MT5TokenizerFast"),mQr.forEach(t),sao=r(i$," (mT5 model)"),i$.forEach(t),lao=i(S),hs=n(S,"LI",{});var d$=s(hs);Wte=n(d$,"STRONG",{});var fQr=s(Wte);iao=r(fQr,"nystromformer"),fQr.forEach(t),dao=r(d$," \u2014 "),_P=n(d$,"A",{href:!0});var gQr=s(_P);cao=r(gQr,"AlbertTokenizer"),gQr.forEach(t),mao=r(d$," or "),bP=n(d$,"A",{href:!0});var hQr=s(bP);fao=r(hQr,"AlbertTokenizerFast"),hQr.forEach(t),gao=r(d$," (Nystromformer model)"),d$.forEach(t),hao=i(S),us=n(S,"LI",{});var c$=s(us);Qte=n(c$,"STRONG",{});var uQr=s(Qte);uao=r(uQr,"openai-gpt"),uQr.forEach(t),pao=r(c$," \u2014 "),vP=n(c$,"A",{href:!0});var pQr=s(vP);_ao=r(pQr,"OpenAIGPTTokenizer"),pQr.forEach(t),bao=r(c$," or "),FP=n(c$,"A",{href:!0});var _Qr=s(FP);vao=r(_Qr,"OpenAIGPTTokenizerFast"),_Qr.forEach(t),Fao=r(c$," (OpenAI GPT model)"),c$.forEach(t),Tao=i(S),Ng=n(S,"LI",{});var j0e=s(Ng);Hte=n(j0e,"STRONG",{});var bQr=s(Hte);Mao=r(bQr,"opt"),bQr.forEach(t),Eao=r(j0e," \u2014 "),TP=n(j0e,"A",{href:!0});var vQr=s(TP);Cao=r(vQr,"GPT2Tokenizer"),vQr.forEach(t),wao=r(j0e," (OPT model)"),j0e.forEach(t),Aao=i(S),ps=n(S,"LI",{});var m$=s(ps);Ute=n(m$,"STRONG",{});var FQr=s(Ute);yao=r(FQr,"pegasus"),FQr.forEach(t),Lao=r(m$," \u2014 "),MP=n(m$,"A",{href:!0});var TQr=s(MP);xao=r(TQr,"PegasusTokenizer"),TQr.forEach(t),$ao=r(m$," or "),EP=n(m$,"A",{href:!0});var MQr=s(EP);kao=r(MQr,"PegasusTokenizerFast"),MQr.forEach(t),Sao=r(m$," (Pegasus model)"),m$.forEach(t),Rao=i(S),jg=n(S,"LI",{});var D0e=s(jg);Jte=n(D0e,"STRONG",{});var EQr=s(Jte);Pao=r(EQr,"perceiver"),EQr.forEach(t),Bao=r(D0e," \u2014 "),CP=n(D0e,"A",{href:!0});var CQr=s(CP);Iao=r(CQr,"PerceiverTokenizer"),CQr.forEach(t),qao=r(D0e," (Perceiver model)"),D0e.forEach(t),Nao=i(S),Dg=n(S,"LI",{});var G0e=s(Dg);Yte=n(G0e,"STRONG",{});var wQr=s(Yte);jao=r(wQr,"phobert"),wQr.forEach(t),Dao=r(G0e," \u2014 "),wP=n(G0e,"A",{href:!0});var AQr=s(wP);Gao=r(AQr,"PhobertTokenizer"),AQr.forEach(t),Oao=r(G0e," (PhoBERT model)"),G0e.forEach(t),Vao=i(S),Gg=n(S,"LI",{});var O0e=s(Gg);Kte=n(O0e,"STRONG",{});var yQr=s(Kte);Xao=r(yQr,"plbart"),yQr.forEach(t),zao=r(O0e," \u2014 "),AP=n(O0e,"A",{href:!0});var LQr=s(AP);Wao=r(LQr,"PLBartTokenizer"),LQr.forEach(t),Qao=r(O0e," (PLBart model)"),O0e.forEach(t),Hao=i(S),Og=n(S,"LI",{});var V0e=s(Og);Zte=n(V0e,"STRONG",{});var xQr=s(Zte);Uao=r(xQr,"prophetnet"),xQr.forEach(t),Jao=r(V0e," \u2014 "),yP=n(V0e,"A",{href:!0});var $Qr=s(yP);Yao=r($Qr,"ProphetNetTokenizer"),$Qr.forEach(t),Kao=r(V0e," (ProphetNet model)"),V0e.forEach(t),Zao=i(S),_s=n(S,"LI",{});var f$=s(_s);eae=n(f$,"STRONG",{});var kQr=s(eae);eno=r(kQr,"qdqbert"),kQr.forEach(t),ono=r(f$," \u2014 "),LP=n(f$,"A",{href:!0});var SQr=s(LP);rno=r(SQr,"BertTokenizer"),SQr.forEach(t),tno=r(f$," or "),xP=n(f$,"A",{href:!0});var RQr=s(xP);ano=r(RQr,"BertTokenizerFast"),RQr.forEach(t),nno=r(f$," (QDQBert model)"),f$.forEach(t),sno=i(S),Vg=n(S,"LI",{});var X0e=s(Vg);oae=n(X0e,"STRONG",{});var PQr=s(oae);lno=r(PQr,"rag"),PQr.forEach(t),ino=r(X0e," \u2014 "),$P=n(X0e,"A",{href:!0});var BQr=s($P);dno=r(BQr,"RagTokenizer"),BQr.forEach(t),cno=r(X0e," (RAG model)"),X0e.forEach(t),mno=i(S),bs=n(S,"LI",{});var g$=s(bs);rae=n(g$,"STRONG",{});var IQr=s(rae);fno=r(IQr,"realm"),IQr.forEach(t),gno=r(g$," \u2014 "),kP=n(g$,"A",{href:!0});var qQr=s(kP);hno=r(qQr,"RealmTokenizer"),qQr.forEach(t),uno=r(g$," or "),SP=n(g$,"A",{href:!0});var NQr=s(SP);pno=r(NQr,"RealmTokenizerFast"),NQr.forEach(t),_no=r(g$," (Realm model)"),g$.forEach(t),bno=i(S),vs=n(S,"LI",{});var h$=s(vs);tae=n(h$,"STRONG",{});var jQr=s(tae);vno=r(jQr,"reformer"),jQr.forEach(t),Fno=r(h$," \u2014 "),RP=n(h$,"A",{href:!0});var DQr=s(RP);Tno=r(DQr,"ReformerTokenizer"),DQr.forEach(t),Mno=r(h$," or "),PP=n(h$,"A",{href:!0});var GQr=s(PP);Eno=r(GQr,"ReformerTokenizerFast"),GQr.forEach(t),Cno=r(h$," (Reformer model)"),h$.forEach(t),wno=i(S),Fs=n(S,"LI",{});var u$=s(Fs);aae=n(u$,"STRONG",{});var OQr=s(aae);Ano=r(OQr,"rembert"),OQr.forEach(t),yno=r(u$," \u2014 "),BP=n(u$,"A",{href:!0});var VQr=s(BP);Lno=r(VQr,"RemBertTokenizer"),VQr.forEach(t),xno=r(u$," or "),IP=n(u$,"A",{href:!0});var XQr=s(IP);$no=r(XQr,"RemBertTokenizerFast"),XQr.forEach(t),kno=r(u$," (RemBERT model)"),u$.forEach(t),Sno=i(S),Ts=n(S,"LI",{});var p$=s(Ts);nae=n(p$,"STRONG",{});var zQr=s(nae);Rno=r(zQr,"retribert"),zQr.forEach(t),Pno=r(p$," \u2014 "),qP=n(p$,"A",{href:!0});var WQr=s(qP);Bno=r(WQr,"RetriBertTokenizer"),WQr.forEach(t),Ino=r(p$," or "),NP=n(p$,"A",{href:!0});var QQr=s(NP);qno=r(QQr,"RetriBertTokenizerFast"),QQr.forEach(t),Nno=r(p$," (RetriBERT model)"),p$.forEach(t),jno=i(S),Ms=n(S,"LI",{});var _$=s(Ms);sae=n(_$,"STRONG",{});var HQr=s(sae);Dno=r(HQr,"roberta"),HQr.forEach(t),Gno=r(_$," \u2014 "),jP=n(_$,"A",{href:!0});var UQr=s(jP);Ono=r(UQr,"RobertaTokenizer"),UQr.forEach(t),Vno=r(_$," or "),DP=n(_$,"A",{href:!0});var JQr=s(DP);Xno=r(JQr,"RobertaTokenizerFast"),JQr.forEach(t),zno=r(_$," (RoBERTa model)"),_$.forEach(t),Wno=i(S),Es=n(S,"LI",{});var b$=s(Es);lae=n(b$,"STRONG",{});var YQr=s(lae);Qno=r(YQr,"roformer"),YQr.forEach(t),Hno=r(b$," \u2014 "),GP=n(b$,"A",{href:!0});var KQr=s(GP);Uno=r(KQr,"RoFormerTokenizer"),KQr.forEach(t),Jno=r(b$," or "),OP=n(b$,"A",{href:!0});var ZQr=s(OP);Yno=r(ZQr,"RoFormerTokenizerFast"),ZQr.forEach(t),Kno=r(b$," (RoFormer model)"),b$.forEach(t),Zno=i(S),Xg=n(S,"LI",{});var z0e=s(Xg);iae=n(z0e,"STRONG",{});var eHr=s(iae);eso=r(eHr,"speech_to_text"),eHr.forEach(t),oso=r(z0e," \u2014 "),VP=n(z0e,"A",{href:!0});var oHr=s(VP);rso=r(oHr,"Speech2TextTokenizer"),oHr.forEach(t),tso=r(z0e," (Speech2Text model)"),z0e.forEach(t),aso=i(S),zg=n(S,"LI",{});var W0e=s(zg);dae=n(W0e,"STRONG",{});var rHr=s(dae);nso=r(rHr,"speech_to_text_2"),rHr.forEach(t),sso=r(W0e," \u2014 "),XP=n(W0e,"A",{href:!0});var tHr=s(XP);lso=r(tHr,"Speech2Text2Tokenizer"),tHr.forEach(t),iso=r(W0e," (Speech2Text2 model)"),W0e.forEach(t),dso=i(S),Cs=n(S,"LI",{});var v$=s(Cs);cae=n(v$,"STRONG",{});var aHr=s(cae);cso=r(aHr,"splinter"),aHr.forEach(t),mso=r(v$," \u2014 "),zP=n(v$,"A",{href:!0});var nHr=s(zP);fso=r(nHr,"SplinterTokenizer"),nHr.forEach(t),gso=r(v$," or "),WP=n(v$,"A",{href:!0});var sHr=s(WP);hso=r(sHr,"SplinterTokenizerFast"),sHr.forEach(t),uso=r(v$," (Splinter model)"),v$.forEach(t),pso=i(S),ws=n(S,"LI",{});var F$=s(ws);mae=n(F$,"STRONG",{});var lHr=s(mae);_so=r(lHr,"squeezebert"),lHr.forEach(t),bso=r(F$," \u2014 "),QP=n(F$,"A",{href:!0});var iHr=s(QP);vso=r(iHr,"SqueezeBertTokenizer"),iHr.forEach(t),Fso=r(F$," or "),HP=n(F$,"A",{href:!0});var dHr=s(HP);Tso=r(dHr,"SqueezeBertTokenizerFast"),dHr.forEach(t),Mso=r(F$," (SqueezeBERT model)"),F$.forEach(t),Eso=i(S),As=n(S,"LI",{});var T$=s(As);fae=n(T$,"STRONG",{});var cHr=s(fae);Cso=r(cHr,"t5"),cHr.forEach(t),wso=r(T$," \u2014 "),UP=n(T$,"A",{href:!0});var mHr=s(UP);Aso=r(mHr,"T5Tokenizer"),mHr.forEach(t),yso=r(T$," or "),JP=n(T$,"A",{href:!0});var fHr=s(JP);Lso=r(fHr,"T5TokenizerFast"),fHr.forEach(t),xso=r(T$," (T5 model)"),T$.forEach(t),$so=i(S),Wg=n(S,"LI",{});var Q0e=s(Wg);gae=n(Q0e,"STRONG",{});var gHr=s(gae);kso=r(gHr,"tapas"),gHr.forEach(t),Sso=r(Q0e," \u2014 "),YP=n(Q0e,"A",{href:!0});var hHr=s(YP);Rso=r(hHr,"TapasTokenizer"),hHr.forEach(t),Pso=r(Q0e," (TAPAS model)"),Q0e.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var H0e=s(Qg);hae=n(H0e,"STRONG",{});var uHr=s(hae);Iso=r(uHr,"tapex"),uHr.forEach(t),qso=r(H0e," \u2014 "),KP=n(H0e,"A",{href:!0});var pHr=s(KP);Nso=r(pHr,"TapexTokenizer"),pHr.forEach(t),jso=r(H0e," (TAPEX model)"),H0e.forEach(t),Dso=i(S),Hg=n(S,"LI",{});var U0e=s(Hg);uae=n(U0e,"STRONG",{});var _Hr=s(uae);Gso=r(_Hr,"transfo-xl"),_Hr.forEach(t),Oso=r(U0e," \u2014 "),ZP=n(U0e,"A",{href:!0});var bHr=s(ZP);Vso=r(bHr,"TransfoXLTokenizer"),bHr.forEach(t),Xso=r(U0e," (Transformer-XL model)"),U0e.forEach(t),zso=i(S),ys=n(S,"LI",{});var M$=s(ys);pae=n(M$,"STRONG",{});var vHr=s(pae);Wso=r(vHr,"visual_bert"),vHr.forEach(t),Qso=r(M$," \u2014 "),eB=n(M$,"A",{href:!0});var FHr=s(eB);Hso=r(FHr,"BertTokenizer"),FHr.forEach(t),Uso=r(M$," or "),oB=n(M$,"A",{href:!0});var THr=s(oB);Jso=r(THr,"BertTokenizerFast"),THr.forEach(t),Yso=r(M$," (VisualBert model)"),M$.forEach(t),Kso=i(S),Ug=n(S,"LI",{});var J0e=s(Ug);_ae=n(J0e,"STRONG",{});var MHr=s(_ae);Zso=r(MHr,"wav2vec2"),MHr.forEach(t),elo=r(J0e," \u2014 "),rB=n(J0e,"A",{href:!0});var EHr=s(rB);olo=r(EHr,"Wav2Vec2CTCTokenizer"),EHr.forEach(t),rlo=r(J0e," (Wav2Vec2 model)"),J0e.forEach(t),tlo=i(S),Jg=n(S,"LI",{});var Y0e=s(Jg);bae=n(Y0e,"STRONG",{});var CHr=s(bae);alo=r(CHr,"wav2vec2-conformer"),CHr.forEach(t),nlo=r(Y0e," \u2014 "),tB=n(Y0e,"A",{href:!0});var wHr=s(tB);slo=r(wHr,"Wav2Vec2CTCTokenizer"),wHr.forEach(t),llo=r(Y0e," (Wav2Vec2-Conformer model)"),Y0e.forEach(t),ilo=i(S),Yg=n(S,"LI",{});var K0e=s(Yg);vae=n(K0e,"STRONG",{});var AHr=s(vae);dlo=r(AHr,"wav2vec2_phoneme"),AHr.forEach(t),clo=r(K0e," \u2014 "),aB=n(K0e,"A",{href:!0});var yHr=s(aB);mlo=r(yHr,"Wav2Vec2PhonemeCTCTokenizer"),yHr.forEach(t),flo=r(K0e," (Wav2Vec2Phoneme model)"),K0e.forEach(t),glo=i(S),Ls=n(S,"LI",{});var E$=s(Ls);Fae=n(E$,"STRONG",{});var LHr=s(Fae);hlo=r(LHr,"xglm"),LHr.forEach(t),ulo=r(E$," \u2014 "),nB=n(E$,"A",{href:!0});var xHr=s(nB);plo=r(xHr,"XGLMTokenizer"),xHr.forEach(t),_lo=r(E$," or "),sB=n(E$,"A",{href:!0});var $Hr=s(sB);blo=r($Hr,"XGLMTokenizerFast"),$Hr.forEach(t),vlo=r(E$," (XGLM model)"),E$.forEach(t),Flo=i(S),Kg=n(S,"LI",{});var Z0e=s(Kg);Tae=n(Z0e,"STRONG",{});var kHr=s(Tae);Tlo=r(kHr,"xlm"),kHr.forEach(t),Mlo=r(Z0e," \u2014 "),lB=n(Z0e,"A",{href:!0});var SHr=s(lB);Elo=r(SHr,"XLMTokenizer"),SHr.forEach(t),Clo=r(Z0e," (XLM model)"),Z0e.forEach(t),wlo=i(S),Zg=n(S,"LI",{});var eAe=s(Zg);Mae=n(eAe,"STRONG",{});var RHr=s(Mae);Alo=r(RHr,"xlm-prophetnet"),RHr.forEach(t),ylo=r(eAe," \u2014 "),iB=n(eAe,"A",{href:!0});var PHr=s(iB);Llo=r(PHr,"XLMProphetNetTokenizer"),PHr.forEach(t),xlo=r(eAe," (XLMProphetNet model)"),eAe.forEach(t),$lo=i(S),xs=n(S,"LI",{});var C$=s(xs);Eae=n(C$,"STRONG",{});var BHr=s(Eae);klo=r(BHr,"xlm-roberta"),BHr.forEach(t),Slo=r(C$," \u2014 "),dB=n(C$,"A",{href:!0});var IHr=s(dB);Rlo=r(IHr,"XLMRobertaTokenizer"),IHr.forEach(t),Plo=r(C$," or "),cB=n(C$,"A",{href:!0});var qHr=s(cB);Blo=r(qHr,"XLMRobertaTokenizerFast"),qHr.forEach(t),Ilo=r(C$," (XLM-RoBERTa model)"),C$.forEach(t),qlo=i(S),$s=n(S,"LI",{});var w$=s($s);Cae=n(w$,"STRONG",{});var NHr=s(Cae);Nlo=r(NHr,"xlm-roberta-xl"),NHr.forEach(t),jlo=r(w$," \u2014 "),mB=n(w$,"A",{href:!0});var jHr=s(mB);Dlo=r(jHr,"RobertaTokenizer"),jHr.forEach(t),Glo=r(w$," or "),fB=n(w$,"A",{href:!0});var DHr=s(fB);Olo=r(DHr,"RobertaTokenizerFast"),DHr.forEach(t),Vlo=r(w$," (XLM-RoBERTa-XL model)"),w$.forEach(t),Xlo=i(S),ks=n(S,"LI",{});var A$=s(ks);wae=n(A$,"STRONG",{});var GHr=s(wae);zlo=r(GHr,"xlnet"),GHr.forEach(t),Wlo=r(A$," \u2014 "),gB=n(A$,"A",{href:!0});var OHr=s(gB);Qlo=r(OHr,"XLNetTokenizer"),OHr.forEach(t),Hlo=r(A$," or "),hB=n(A$,"A",{href:!0});var VHr=s(hB);Ulo=r(VHr,"XLNetTokenizerFast"),VHr.forEach(t),Jlo=r(A$," (XLNet model)"),A$.forEach(t),Ylo=i(S),Ss=n(S,"LI",{});var y$=s(Ss);Aae=n(y$,"STRONG",{});var XHr=s(Aae);Klo=r(XHr,"yoso"),XHr.forEach(t),Zlo=r(y$," \u2014 "),uB=n(y$,"A",{href:!0});var zHr=s(uB);eio=r(zHr,"AlbertTokenizer"),zHr.forEach(t),oio=r(y$," or "),pB=n(y$,"A",{href:!0});var WHr=s(pB);rio=r(WHr,"AlbertTokenizerFast"),WHr.forEach(t),tio=r(y$," (YOSO model)"),y$.forEach(t),S.forEach(t),aio=i(qs),T(eh.$$.fragment,qs),qs.forEach(t),nio=i(Is),oh=n(Is,"DIV",{class:!0});var lje=s(oh);T(yy.$$.fragment,lje),sio=i(lje),yae=n(lje,"P",{});var QHr=s(yae);lio=r(QHr,"Register a new tokenizer in this mapping."),QHr.forEach(t),lje.forEach(t),Is.forEach(t),iqe=i(m),Ti=n(m,"H2",{class:!0});var ije=s(Ti);rh=n(ije,"A",{id:!0,class:!0,href:!0});var HHr=s(rh);Lae=n(HHr,"SPAN",{});var UHr=s(Lae);T(Ly.$$.fragment,UHr),UHr.forEach(t),HHr.forEach(t),iio=i(ije),xae=n(ije,"SPAN",{});var JHr=s(xae);dio=r(JHr,"AutoFeatureExtractor"),JHr.forEach(t),ije.forEach(t),dqe=i(m),Ao=n(m,"DIV",{class:!0});var Ns=s(Ao);T(xy.$$.fragment,Ns),cio=i(Ns),$y=n(Ns,"P",{});var dje=s($y);mio=r(dje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_B=n(dje,"A",{href:!0});var YHr=s(_B);fio=r(YHr,"AutoFeatureExtractor.from_pretrained()"),YHr.forEach(t),gio=r(dje," class method."),dje.forEach(t),hio=i(Ns),ky=n(Ns,"P",{});var cje=s(ky);uio=r(cje,"This class cannot be instantiated directly using "),$ae=n(cje,"CODE",{});var KHr=s($ae);pio=r(KHr,"__init__()"),KHr.forEach(t),_io=r(cje," (throws an error)."),cje.forEach(t),bio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(Sy.$$.fragment,Zt),vio=i(Zt),kae=n(Zt,"P",{});var ZHr=s(kae);Fio=r(ZHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ZHr.forEach(t),Tio=i(Zt),ya=n(Zt,"P",{});var _A=s(ya);Mio=r(_A,"The feature extractor class to instantiate is selected based on the "),Sae=n(_A,"CODE",{});var eUr=s(Sae);Eio=r(eUr,"model_type"),eUr.forEach(t),Cio=r(_A,` property of the config object
(either passed as an argument or loaded from `),Rae=n(_A,"CODE",{});var oUr=s(Rae);wio=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),Aio=r(_A,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pae=n(_A,"CODE",{});var rUr=s(Pae);yio=r(rUr,"pretrained_model_name_or_path"),rUr.forEach(t),Lio=r(_A,":"),_A.forEach(t),xio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);th=n(re,"LI",{});var oAe=s(th);Bae=n(oAe,"STRONG",{});var tUr=s(Bae);$io=r(tUr,"beit"),tUr.forEach(t),kio=r(oAe," \u2014 "),bB=n(oAe,"A",{href:!0});var aUr=s(bB);Sio=r(aUr,"BeitFeatureExtractor"),aUr.forEach(t),Rio=r(oAe," (BEiT model)"),oAe.forEach(t),Pio=i(re),ah=n(re,"LI",{});var rAe=s(ah);Iae=n(rAe,"STRONG",{});var nUr=s(Iae);Bio=r(nUr,"clip"),nUr.forEach(t),Iio=r(rAe," \u2014 "),vB=n(rAe,"A",{href:!0});var sUr=s(vB);qio=r(sUr,"CLIPFeatureExtractor"),sUr.forEach(t),Nio=r(rAe," (CLIP model)"),rAe.forEach(t),jio=i(re),nh=n(re,"LI",{});var tAe=s(nh);qae=n(tAe,"STRONG",{});var lUr=s(qae);Dio=r(lUr,"convnext"),lUr.forEach(t),Gio=r(tAe," \u2014 "),FB=n(tAe,"A",{href:!0});var iUr=s(FB);Oio=r(iUr,"ConvNextFeatureExtractor"),iUr.forEach(t),Vio=r(tAe," (ConvNext model)"),tAe.forEach(t),Xio=i(re),sh=n(re,"LI",{});var aAe=s(sh);Nae=n(aAe,"STRONG",{});var dUr=s(Nae);zio=r(dUr,"cvt"),dUr.forEach(t),Wio=r(aAe," \u2014 "),TB=n(aAe,"A",{href:!0});var cUr=s(TB);Qio=r(cUr,"ConvNextFeatureExtractor"),cUr.forEach(t),Hio=r(aAe," (CvT model)"),aAe.forEach(t),Uio=i(re),lh=n(re,"LI",{});var nAe=s(lh);jae=n(nAe,"STRONG",{});var mUr=s(jae);Jio=r(mUr,"data2vec-audio"),mUr.forEach(t),Yio=r(nAe," \u2014 "),MB=n(nAe,"A",{href:!0});var fUr=s(MB);Kio=r(fUr,"Wav2Vec2FeatureExtractor"),fUr.forEach(t),Zio=r(nAe," (Data2VecAudio model)"),nAe.forEach(t),edo=i(re),ih=n(re,"LI",{});var sAe=s(ih);Dae=n(sAe,"STRONG",{});var gUr=s(Dae);odo=r(gUr,"data2vec-vision"),gUr.forEach(t),rdo=r(sAe," \u2014 "),EB=n(sAe,"A",{href:!0});var hUr=s(EB);tdo=r(hUr,"BeitFeatureExtractor"),hUr.forEach(t),ado=r(sAe," (Data2VecVision model)"),sAe.forEach(t),ndo=i(re),dh=n(re,"LI",{});var lAe=s(dh);Gae=n(lAe,"STRONG",{});var uUr=s(Gae);sdo=r(uUr,"deit"),uUr.forEach(t),ldo=r(lAe," \u2014 "),CB=n(lAe,"A",{href:!0});var pUr=s(CB);ido=r(pUr,"DeiTFeatureExtractor"),pUr.forEach(t),ddo=r(lAe," (DeiT model)"),lAe.forEach(t),cdo=i(re),ch=n(re,"LI",{});var iAe=s(ch);Oae=n(iAe,"STRONG",{});var _Ur=s(Oae);mdo=r(_Ur,"detr"),_Ur.forEach(t),fdo=r(iAe," \u2014 "),wB=n(iAe,"A",{href:!0});var bUr=s(wB);gdo=r(bUr,"DetrFeatureExtractor"),bUr.forEach(t),hdo=r(iAe," (DETR model)"),iAe.forEach(t),udo=i(re),mh=n(re,"LI",{});var dAe=s(mh);Vae=n(dAe,"STRONG",{});var vUr=s(Vae);pdo=r(vUr,"dpt"),vUr.forEach(t),_do=r(dAe," \u2014 "),AB=n(dAe,"A",{href:!0});var FUr=s(AB);bdo=r(FUr,"DPTFeatureExtractor"),FUr.forEach(t),vdo=r(dAe," (DPT model)"),dAe.forEach(t),Fdo=i(re),fh=n(re,"LI",{});var cAe=s(fh);Xae=n(cAe,"STRONG",{});var TUr=s(Xae);Tdo=r(TUr,"flava"),TUr.forEach(t),Mdo=r(cAe," \u2014 "),yB=n(cAe,"A",{href:!0});var MUr=s(yB);Edo=r(MUr,"FlavaFeatureExtractor"),MUr.forEach(t),Cdo=r(cAe," (Flava model)"),cAe.forEach(t),wdo=i(re),gh=n(re,"LI",{});var mAe=s(gh);zae=n(mAe,"STRONG",{});var EUr=s(zae);Ado=r(EUr,"glpn"),EUr.forEach(t),ydo=r(mAe," \u2014 "),LB=n(mAe,"A",{href:!0});var CUr=s(LB);Ldo=r(CUr,"GLPNFeatureExtractor"),CUr.forEach(t),xdo=r(mAe," (GLPN model)"),mAe.forEach(t),$do=i(re),hh=n(re,"LI",{});var fAe=s(hh);Wae=n(fAe,"STRONG",{});var wUr=s(Wae);kdo=r(wUr,"hubert"),wUr.forEach(t),Sdo=r(fAe," \u2014 "),xB=n(fAe,"A",{href:!0});var AUr=s(xB);Rdo=r(AUr,"Wav2Vec2FeatureExtractor"),AUr.forEach(t),Pdo=r(fAe," (Hubert model)"),fAe.forEach(t),Bdo=i(re),uh=n(re,"LI",{});var gAe=s(uh);Qae=n(gAe,"STRONG",{});var yUr=s(Qae);Ido=r(yUr,"layoutlmv2"),yUr.forEach(t),qdo=r(gAe," \u2014 "),$B=n(gAe,"A",{href:!0});var LUr=s($B);Ndo=r(LUr,"LayoutLMv2FeatureExtractor"),LUr.forEach(t),jdo=r(gAe," (LayoutLMv2 model)"),gAe.forEach(t),Ddo=i(re),ph=n(re,"LI",{});var hAe=s(ph);Hae=n(hAe,"STRONG",{});var xUr=s(Hae);Gdo=r(xUr,"maskformer"),xUr.forEach(t),Odo=r(hAe," \u2014 "),kB=n(hAe,"A",{href:!0});var $Ur=s(kB);Vdo=r($Ur,"MaskFormerFeatureExtractor"),$Ur.forEach(t),Xdo=r(hAe," (MaskFormer model)"),hAe.forEach(t),zdo=i(re),_h=n(re,"LI",{});var uAe=s(_h);Uae=n(uAe,"STRONG",{});var kUr=s(Uae);Wdo=r(kUr,"perceiver"),kUr.forEach(t),Qdo=r(uAe," \u2014 "),SB=n(uAe,"A",{href:!0});var SUr=s(SB);Hdo=r(SUr,"PerceiverFeatureExtractor"),SUr.forEach(t),Udo=r(uAe," (Perceiver model)"),uAe.forEach(t),Jdo=i(re),bh=n(re,"LI",{});var pAe=s(bh);Jae=n(pAe,"STRONG",{});var RUr=s(Jae);Ydo=r(RUr,"poolformer"),RUr.forEach(t),Kdo=r(pAe," \u2014 "),RB=n(pAe,"A",{href:!0});var PUr=s(RB);Zdo=r(PUr,"PoolFormerFeatureExtractor"),PUr.forEach(t),eco=r(pAe," (PoolFormer model)"),pAe.forEach(t),oco=i(re),vh=n(re,"LI",{});var _Ae=s(vh);Yae=n(_Ae,"STRONG",{});var BUr=s(Yae);rco=r(BUr,"regnet"),BUr.forEach(t),tco=r(_Ae," \u2014 "),PB=n(_Ae,"A",{href:!0});var IUr=s(PB);aco=r(IUr,"ConvNextFeatureExtractor"),IUr.forEach(t),nco=r(_Ae," (RegNet model)"),_Ae.forEach(t),sco=i(re),Fh=n(re,"LI",{});var bAe=s(Fh);Kae=n(bAe,"STRONG",{});var qUr=s(Kae);lco=r(qUr,"resnet"),qUr.forEach(t),ico=r(bAe," \u2014 "),BB=n(bAe,"A",{href:!0});var NUr=s(BB);dco=r(NUr,"ConvNextFeatureExtractor"),NUr.forEach(t),cco=r(bAe," (ResNet model)"),bAe.forEach(t),mco=i(re),Th=n(re,"LI",{});var vAe=s(Th);Zae=n(vAe,"STRONG",{});var jUr=s(Zae);fco=r(jUr,"segformer"),jUr.forEach(t),gco=r(vAe," \u2014 "),IB=n(vAe,"A",{href:!0});var DUr=s(IB);hco=r(DUr,"SegformerFeatureExtractor"),DUr.forEach(t),uco=r(vAe," (SegFormer model)"),vAe.forEach(t),pco=i(re),Mh=n(re,"LI",{});var FAe=s(Mh);ene=n(FAe,"STRONG",{});var GUr=s(ene);_co=r(GUr,"speech_to_text"),GUr.forEach(t),bco=r(FAe," \u2014 "),qB=n(FAe,"A",{href:!0});var OUr=s(qB);vco=r(OUr,"Speech2TextFeatureExtractor"),OUr.forEach(t),Fco=r(FAe," (Speech2Text model)"),FAe.forEach(t),Tco=i(re),Eh=n(re,"LI",{});var TAe=s(Eh);one=n(TAe,"STRONG",{});var VUr=s(one);Mco=r(VUr,"swin"),VUr.forEach(t),Eco=r(TAe," \u2014 "),NB=n(TAe,"A",{href:!0});var XUr=s(NB);Cco=r(XUr,"ViTFeatureExtractor"),XUr.forEach(t),wco=r(TAe," (Swin model)"),TAe.forEach(t),Aco=i(re),Ch=n(re,"LI",{});var MAe=s(Ch);rne=n(MAe,"STRONG",{});var zUr=s(rne);yco=r(zUr,"van"),zUr.forEach(t),Lco=r(MAe," \u2014 "),jB=n(MAe,"A",{href:!0});var WUr=s(jB);xco=r(WUr,"ConvNextFeatureExtractor"),WUr.forEach(t),$co=r(MAe," (VAN model)"),MAe.forEach(t),kco=i(re),wh=n(re,"LI",{});var EAe=s(wh);tne=n(EAe,"STRONG",{});var QUr=s(tne);Sco=r(QUr,"vit"),QUr.forEach(t),Rco=r(EAe," \u2014 "),DB=n(EAe,"A",{href:!0});var HUr=s(DB);Pco=r(HUr,"ViTFeatureExtractor"),HUr.forEach(t),Bco=r(EAe," (ViT model)"),EAe.forEach(t),Ico=i(re),Ah=n(re,"LI",{});var CAe=s(Ah);ane=n(CAe,"STRONG",{});var UUr=s(ane);qco=r(UUr,"vit_mae"),UUr.forEach(t),Nco=r(CAe," \u2014 "),GB=n(CAe,"A",{href:!0});var JUr=s(GB);jco=r(JUr,"ViTFeatureExtractor"),JUr.forEach(t),Dco=r(CAe," (ViTMAE model)"),CAe.forEach(t),Gco=i(re),yh=n(re,"LI",{});var wAe=s(yh);nne=n(wAe,"STRONG",{});var YUr=s(nne);Oco=r(YUr,"wav2vec2"),YUr.forEach(t),Vco=r(wAe," \u2014 "),OB=n(wAe,"A",{href:!0});var KUr=s(OB);Xco=r(KUr,"Wav2Vec2FeatureExtractor"),KUr.forEach(t),zco=r(wAe," (Wav2Vec2 model)"),wAe.forEach(t),Wco=i(re),Lh=n(re,"LI",{});var AAe=s(Lh);sne=n(AAe,"STRONG",{});var ZUr=s(sne);Qco=r(ZUr,"wav2vec2-conformer"),ZUr.forEach(t),Hco=r(AAe," \u2014 "),VB=n(AAe,"A",{href:!0});var eJr=s(VB);Uco=r(eJr,"Wav2Vec2FeatureExtractor"),eJr.forEach(t),Jco=r(AAe," (Wav2Vec2-Conformer model)"),AAe.forEach(t),Yco=i(re),xh=n(re,"LI",{});var yAe=s(xh);lne=n(yAe,"STRONG",{});var oJr=s(lne);Kco=r(oJr,"yolos"),oJr.forEach(t),Zco=r(yAe," \u2014 "),XB=n(yAe,"A",{href:!0});var rJr=s(XB);emo=r(rJr,"YolosFeatureExtractor"),rJr.forEach(t),omo=r(yAe," (YOLOS model)"),yAe.forEach(t),re.forEach(t),rmo=i(Zt),T($h.$$.fragment,Zt),tmo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),amo=i(Ns),Sh=n(Ns,"DIV",{class:!0});var mje=s(Sh);T(Ry.$$.fragment,mje),nmo=i(mje),ine=n(mje,"P",{});var tJr=s(ine);smo=r(tJr,"Register a new feature extractor for this class."),tJr.forEach(t),mje.forEach(t),Ns.forEach(t),cqe=i(m),Mi=n(m,"H2",{class:!0});var fje=s(Mi);Rh=n(fje,"A",{id:!0,class:!0,href:!0});var aJr=s(Rh);dne=n(aJr,"SPAN",{});var nJr=s(dne);T(Py.$$.fragment,nJr),nJr.forEach(t),aJr.forEach(t),lmo=i(fje),cne=n(fje,"SPAN",{});var sJr=s(cne);imo=r(sJr,"AutoProcessor"),sJr.forEach(t),fje.forEach(t),mqe=i(m),yo=n(m,"DIV",{class:!0});var js=s(yo);T(By.$$.fragment,js),dmo=i(js),Iy=n(js,"P",{});var gje=s(Iy);cmo=r(gje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zB=n(gje,"A",{href:!0});var lJr=s(zB);mmo=r(lJr,"AutoProcessor.from_pretrained()"),lJr.forEach(t),fmo=r(gje," class method."),gje.forEach(t),gmo=i(js),qy=n(js,"P",{});var hje=s(qy);hmo=r(hje,"This class cannot be instantiated directly using "),mne=n(hje,"CODE",{});var iJr=s(mne);umo=r(iJr,"__init__()"),iJr.forEach(t),pmo=r(hje," (throws an error)."),hje.forEach(t),_mo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(Ny.$$.fragment,ea),bmo=i(ea),fne=n(ea,"P",{});var dJr=s(fne);vmo=r(dJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dJr.forEach(t),Fmo=i(ea),Ei=n(ea,"P",{});var DK=s(Ei);Tmo=r(DK,"The processor class to instantiate is selected based on the "),gne=n(DK,"CODE",{});var cJr=s(gne);Mmo=r(cJr,"model_type"),cJr.forEach(t),Emo=r(DK,` property of the config object (either
passed as an argument or loaded from `),hne=n(DK,"CODE",{});var mJr=s(hne);Cmo=r(mJr,"pretrained_model_name_or_path"),mJr.forEach(t),wmo=r(DK," if possible):"),DK.forEach(t),Amo=i(ea),ue=n(ea,"UL",{});var be=s(ue);Ph=n(be,"LI",{});var LAe=s(Ph);une=n(LAe,"STRONG",{});var fJr=s(une);ymo=r(fJr,"clip"),fJr.forEach(t),Lmo=r(LAe," \u2014 "),WB=n(LAe,"A",{href:!0});var gJr=s(WB);xmo=r(gJr,"CLIPProcessor"),gJr.forEach(t),$mo=r(LAe," (CLIP model)"),LAe.forEach(t),kmo=i(be),Bh=n(be,"LI",{});var xAe=s(Bh);pne=n(xAe,"STRONG",{});var hJr=s(pne);Smo=r(hJr,"flava"),hJr.forEach(t),Rmo=r(xAe," \u2014 "),_ne=n(xAe,"CODE",{});var uJr=s(_ne);Pmo=r(uJr,"FLAVAProcessor"),uJr.forEach(t),Bmo=r(xAe," (Flava model)"),xAe.forEach(t),Imo=i(be),Ih=n(be,"LI",{});var $Ae=s(Ih);bne=n($Ae,"STRONG",{});var pJr=s(bne);qmo=r(pJr,"layoutlmv2"),pJr.forEach(t),Nmo=r($Ae," \u2014 "),QB=n($Ae,"A",{href:!0});var _Jr=s(QB);jmo=r(_Jr,"LayoutLMv2Processor"),_Jr.forEach(t),Dmo=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),Gmo=i(be),qh=n(be,"LI",{});var kAe=s(qh);vne=n(kAe,"STRONG",{});var bJr=s(vne);Omo=r(bJr,"layoutxlm"),bJr.forEach(t),Vmo=r(kAe," \u2014 "),HB=n(kAe,"A",{href:!0});var vJr=s(HB);Xmo=r(vJr,"LayoutXLMProcessor"),vJr.forEach(t),zmo=r(kAe," (LayoutXLM model)"),kAe.forEach(t),Wmo=i(be),Nh=n(be,"LI",{});var SAe=s(Nh);Fne=n(SAe,"STRONG",{});var FJr=s(Fne);Qmo=r(FJr,"sew"),FJr.forEach(t),Hmo=r(SAe," \u2014 "),UB=n(SAe,"A",{href:!0});var TJr=s(UB);Umo=r(TJr,"Wav2Vec2Processor"),TJr.forEach(t),Jmo=r(SAe," (SEW model)"),SAe.forEach(t),Ymo=i(be),jh=n(be,"LI",{});var RAe=s(jh);Tne=n(RAe,"STRONG",{});var MJr=s(Tne);Kmo=r(MJr,"sew-d"),MJr.forEach(t),Zmo=r(RAe," \u2014 "),JB=n(RAe,"A",{href:!0});var EJr=s(JB);efo=r(EJr,"Wav2Vec2Processor"),EJr.forEach(t),ofo=r(RAe," (SEW-D model)"),RAe.forEach(t),rfo=i(be),Dh=n(be,"LI",{});var PAe=s(Dh);Mne=n(PAe,"STRONG",{});var CJr=s(Mne);tfo=r(CJr,"speech_to_text"),CJr.forEach(t),afo=r(PAe," \u2014 "),YB=n(PAe,"A",{href:!0});var wJr=s(YB);nfo=r(wJr,"Speech2TextProcessor"),wJr.forEach(t),sfo=r(PAe," (Speech2Text model)"),PAe.forEach(t),lfo=i(be),Gh=n(be,"LI",{});var BAe=s(Gh);Ene=n(BAe,"STRONG",{});var AJr=s(Ene);ifo=r(AJr,"speech_to_text_2"),AJr.forEach(t),dfo=r(BAe," \u2014 "),KB=n(BAe,"A",{href:!0});var yJr=s(KB);cfo=r(yJr,"Speech2Text2Processor"),yJr.forEach(t),mfo=r(BAe," (Speech2Text2 model)"),BAe.forEach(t),ffo=i(be),Oh=n(be,"LI",{});var IAe=s(Oh);Cne=n(IAe,"STRONG",{});var LJr=s(Cne);gfo=r(LJr,"trocr"),LJr.forEach(t),hfo=r(IAe," \u2014 "),ZB=n(IAe,"A",{href:!0});var xJr=s(ZB);ufo=r(xJr,"TrOCRProcessor"),xJr.forEach(t),pfo=r(IAe," (TrOCR model)"),IAe.forEach(t),_fo=i(be),Vh=n(be,"LI",{});var qAe=s(Vh);wne=n(qAe,"STRONG",{});var $Jr=s(wne);bfo=r($Jr,"unispeech"),$Jr.forEach(t),vfo=r(qAe," \u2014 "),eI=n(qAe,"A",{href:!0});var kJr=s(eI);Ffo=r(kJr,"Wav2Vec2Processor"),kJr.forEach(t),Tfo=r(qAe," (UniSpeech model)"),qAe.forEach(t),Mfo=i(be),Xh=n(be,"LI",{});var NAe=s(Xh);Ane=n(NAe,"STRONG",{});var SJr=s(Ane);Efo=r(SJr,"unispeech-sat"),SJr.forEach(t),Cfo=r(NAe," \u2014 "),oI=n(NAe,"A",{href:!0});var RJr=s(oI);wfo=r(RJr,"Wav2Vec2Processor"),RJr.forEach(t),Afo=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),yfo=i(be),zh=n(be,"LI",{});var jAe=s(zh);yne=n(jAe,"STRONG",{});var PJr=s(yne);Lfo=r(PJr,"vilt"),PJr.forEach(t),xfo=r(jAe," \u2014 "),rI=n(jAe,"A",{href:!0});var BJr=s(rI);$fo=r(BJr,"ViltProcessor"),BJr.forEach(t),kfo=r(jAe," (ViLT model)"),jAe.forEach(t),Sfo=i(be),Wh=n(be,"LI",{});var DAe=s(Wh);Lne=n(DAe,"STRONG",{});var IJr=s(Lne);Rfo=r(IJr,"vision-text-dual-encoder"),IJr.forEach(t),Pfo=r(DAe," \u2014 "),tI=n(DAe,"A",{href:!0});var qJr=s(tI);Bfo=r(qJr,"VisionTextDualEncoderProcessor"),qJr.forEach(t),Ifo=r(DAe," (VisionTextDualEncoder model)"),DAe.forEach(t),qfo=i(be),Qh=n(be,"LI",{});var GAe=s(Qh);xne=n(GAe,"STRONG",{});var NJr=s(xne);Nfo=r(NJr,"wav2vec2"),NJr.forEach(t),jfo=r(GAe," \u2014 "),aI=n(GAe,"A",{href:!0});var jJr=s(aI);Dfo=r(jJr,"Wav2Vec2Processor"),jJr.forEach(t),Gfo=r(GAe," (Wav2Vec2 model)"),GAe.forEach(t),Ofo=i(be),Hh=n(be,"LI",{});var OAe=s(Hh);$ne=n(OAe,"STRONG",{});var DJr=s($ne);Vfo=r(DJr,"wav2vec2-conformer"),DJr.forEach(t),Xfo=r(OAe," \u2014 "),nI=n(OAe,"A",{href:!0});var GJr=s(nI);zfo=r(GJr,"Wav2Vec2Processor"),GJr.forEach(t),Wfo=r(OAe," (Wav2Vec2-Conformer model)"),OAe.forEach(t),Qfo=i(be),Uh=n(be,"LI",{});var VAe=s(Uh);kne=n(VAe,"STRONG",{});var OJr=s(kne);Hfo=r(OJr,"wavlm"),OJr.forEach(t),Ufo=r(VAe," \u2014 "),sI=n(VAe,"A",{href:!0});var VJr=s(sI);Jfo=r(VJr,"Wav2Vec2Processor"),VJr.forEach(t),Yfo=r(VAe," (WavLM model)"),VAe.forEach(t),be.forEach(t),Kfo=i(ea),T(Jh.$$.fragment,ea),Zfo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),ego=i(js),Kh=n(js,"DIV",{class:!0});var uje=s(Kh);T(jy.$$.fragment,uje),ogo=i(uje),Sne=n(uje,"P",{});var XJr=s(Sne);rgo=r(XJr,"Register a new processor for this class."),XJr.forEach(t),uje.forEach(t),js.forEach(t),fqe=i(m),Ci=n(m,"H2",{class:!0});var pje=s(Ci);Zh=n(pje,"A",{id:!0,class:!0,href:!0});var zJr=s(Zh);Rne=n(zJr,"SPAN",{});var WJr=s(Rne);T(Dy.$$.fragment,WJr),WJr.forEach(t),zJr.forEach(t),tgo=i(pje),Pne=n(pje,"SPAN",{});var QJr=s(Pne);ago=r(QJr,"AutoModel"),QJr.forEach(t),pje.forEach(t),gqe=i(m),Lo=n(m,"DIV",{class:!0});var Ds=s(Lo);T(Gy.$$.fragment,Ds),ngo=i(Ds),wi=n(Ds,"P",{});var GK=s(wi);sgo=r(GK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lI=n(GK,"A",{href:!0});var HJr=s(lI);lgo=r(HJr,"from_pretrained()"),HJr.forEach(t),igo=r(GK," class method or the "),iI=n(GK,"A",{href:!0});var UJr=s(iI);dgo=r(UJr,"from_config()"),UJr.forEach(t),cgo=r(GK,` class
method.`),GK.forEach(t),mgo=i(Ds),Oy=n(Ds,"P",{});var _je=s(Oy);fgo=r(_je,"This class cannot be instantiated directly using "),Bne=n(_je,"CODE",{});var JJr=s(Bne);ggo=r(JJr,"__init__()"),JJr.forEach(t),hgo=r(_je," (throws an error)."),_je.forEach(t),ugo=i(Ds),tt=n(Ds,"DIV",{class:!0});var bA=s(tt);T(Vy.$$.fragment,bA),pgo=i(bA),Ine=n(bA,"P",{});var YJr=s(Ine);_go=r(YJr,"Instantiates one of the base model classes of the library from a configuration."),YJr.forEach(t),bgo=i(bA),Ai=n(bA,"P",{});var OK=s(Ai);vgo=r(OK,`Note:
Loading a model from its configuration file does `),qne=n(OK,"STRONG",{});var KJr=s(qne);Fgo=r(KJr,"not"),KJr.forEach(t),Tgo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dI=n(OK,"A",{href:!0});var ZJr=s(dI);Mgo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),Ego=r(OK," to load the model weights."),OK.forEach(t),Cgo=i(bA),T(eu.$$.fragment,bA),bA.forEach(t),wgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(Xy.$$.fragment,oa),Ago=i(oa),Nne=n(oa,"P",{});var eYr=s(Nne);ygo=r(eYr,"Instantiate one of the base model classes of the library from a pretrained model."),eYr.forEach(t),Lgo=i(oa),La=n(oa,"P",{});var vA=s(La);xgo=r(vA,"The model class to instantiate is selected based on the "),jne=n(vA,"CODE",{});var oYr=s(jne);$go=r(oYr,"model_type"),oYr.forEach(t),kgo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Dne=n(vA,"CODE",{});var rYr=s(Dne);Sgo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),Rgo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(vA,"CODE",{});var tYr=s(Gne);Pgo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),Bgo=r(vA,":"),vA.forEach(t),Igo=i(oa),x=n(oa,"UL",{});var $=s(x);ou=n($,"LI",{});var XAe=s(ou);One=n(XAe,"STRONG",{});var aYr=s(One);qgo=r(aYr,"albert"),aYr.forEach(t),Ngo=r(XAe," \u2014 "),cI=n(XAe,"A",{href:!0});var nYr=s(cI);jgo=r(nYr,"AlbertModel"),nYr.forEach(t),Dgo=r(XAe," (ALBERT model)"),XAe.forEach(t),Ggo=i($),ru=n($,"LI",{});var zAe=s(ru);Vne=n(zAe,"STRONG",{});var sYr=s(Vne);Ogo=r(sYr,"bart"),sYr.forEach(t),Vgo=r(zAe," \u2014 "),mI=n(zAe,"A",{href:!0});var lYr=s(mI);Xgo=r(lYr,"BartModel"),lYr.forEach(t),zgo=r(zAe," (BART model)"),zAe.forEach(t),Wgo=i($),tu=n($,"LI",{});var WAe=s(tu);Xne=n(WAe,"STRONG",{});var iYr=s(Xne);Qgo=r(iYr,"beit"),iYr.forEach(t),Hgo=r(WAe," \u2014 "),fI=n(WAe,"A",{href:!0});var dYr=s(fI);Ugo=r(dYr,"BeitModel"),dYr.forEach(t),Jgo=r(WAe," (BEiT model)"),WAe.forEach(t),Ygo=i($),au=n($,"LI",{});var QAe=s(au);zne=n(QAe,"STRONG",{});var cYr=s(zne);Kgo=r(cYr,"bert"),cYr.forEach(t),Zgo=r(QAe," \u2014 "),gI=n(QAe,"A",{href:!0});var mYr=s(gI);eho=r(mYr,"BertModel"),mYr.forEach(t),oho=r(QAe," (BERT model)"),QAe.forEach(t),rho=i($),nu=n($,"LI",{});var HAe=s(nu);Wne=n(HAe,"STRONG",{});var fYr=s(Wne);tho=r(fYr,"bert-generation"),fYr.forEach(t),aho=r(HAe," \u2014 "),hI=n(HAe,"A",{href:!0});var gYr=s(hI);nho=r(gYr,"BertGenerationEncoder"),gYr.forEach(t),sho=r(HAe," (Bert Generation model)"),HAe.forEach(t),lho=i($),su=n($,"LI",{});var UAe=s(su);Qne=n(UAe,"STRONG",{});var hYr=s(Qne);iho=r(hYr,"big_bird"),hYr.forEach(t),dho=r(UAe," \u2014 "),uI=n(UAe,"A",{href:!0});var uYr=s(uI);cho=r(uYr,"BigBirdModel"),uYr.forEach(t),mho=r(UAe," (BigBird model)"),UAe.forEach(t),fho=i($),lu=n($,"LI",{});var JAe=s(lu);Hne=n(JAe,"STRONG",{});var pYr=s(Hne);gho=r(pYr,"bigbird_pegasus"),pYr.forEach(t),hho=r(JAe," \u2014 "),pI=n(JAe,"A",{href:!0});var _Yr=s(pI);uho=r(_Yr,"BigBirdPegasusModel"),_Yr.forEach(t),pho=r(JAe," (BigBirdPegasus model)"),JAe.forEach(t),_ho=i($),iu=n($,"LI",{});var YAe=s(iu);Une=n(YAe,"STRONG",{});var bYr=s(Une);bho=r(bYr,"blenderbot"),bYr.forEach(t),vho=r(YAe," \u2014 "),_I=n(YAe,"A",{href:!0});var vYr=s(_I);Fho=r(vYr,"BlenderbotModel"),vYr.forEach(t),Tho=r(YAe," (Blenderbot model)"),YAe.forEach(t),Mho=i($),du=n($,"LI",{});var KAe=s(du);Jne=n(KAe,"STRONG",{});var FYr=s(Jne);Eho=r(FYr,"blenderbot-small"),FYr.forEach(t),Cho=r(KAe," \u2014 "),bI=n(KAe,"A",{href:!0});var TYr=s(bI);who=r(TYr,"BlenderbotSmallModel"),TYr.forEach(t),Aho=r(KAe," (BlenderbotSmall model)"),KAe.forEach(t),yho=i($),cu=n($,"LI",{});var ZAe=s(cu);Yne=n(ZAe,"STRONG",{});var MYr=s(Yne);Lho=r(MYr,"camembert"),MYr.forEach(t),xho=r(ZAe," \u2014 "),vI=n(ZAe,"A",{href:!0});var EYr=s(vI);$ho=r(EYr,"CamembertModel"),EYr.forEach(t),kho=r(ZAe," (CamemBERT model)"),ZAe.forEach(t),Sho=i($),mu=n($,"LI",{});var e6e=s(mu);Kne=n(e6e,"STRONG",{});var CYr=s(Kne);Rho=r(CYr,"canine"),CYr.forEach(t),Pho=r(e6e," \u2014 "),FI=n(e6e,"A",{href:!0});var wYr=s(FI);Bho=r(wYr,"CanineModel"),wYr.forEach(t),Iho=r(e6e," (Canine model)"),e6e.forEach(t),qho=i($),fu=n($,"LI",{});var o6e=s(fu);Zne=n(o6e,"STRONG",{});var AYr=s(Zne);Nho=r(AYr,"clip"),AYr.forEach(t),jho=r(o6e," \u2014 "),TI=n(o6e,"A",{href:!0});var yYr=s(TI);Dho=r(yYr,"CLIPModel"),yYr.forEach(t),Gho=r(o6e," (CLIP model)"),o6e.forEach(t),Oho=i($),gu=n($,"LI",{});var r6e=s(gu);ese=n(r6e,"STRONG",{});var LYr=s(ese);Vho=r(LYr,"convbert"),LYr.forEach(t),Xho=r(r6e," \u2014 "),MI=n(r6e,"A",{href:!0});var xYr=s(MI);zho=r(xYr,"ConvBertModel"),xYr.forEach(t),Who=r(r6e," (ConvBERT model)"),r6e.forEach(t),Qho=i($),hu=n($,"LI",{});var t6e=s(hu);ose=n(t6e,"STRONG",{});var $Yr=s(ose);Hho=r($Yr,"convnext"),$Yr.forEach(t),Uho=r(t6e," \u2014 "),EI=n(t6e,"A",{href:!0});var kYr=s(EI);Jho=r(kYr,"ConvNextModel"),kYr.forEach(t),Yho=r(t6e," (ConvNext model)"),t6e.forEach(t),Kho=i($),uu=n($,"LI",{});var a6e=s(uu);rse=n(a6e,"STRONG",{});var SYr=s(rse);Zho=r(SYr,"ctrl"),SYr.forEach(t),euo=r(a6e," \u2014 "),CI=n(a6e,"A",{href:!0});var RYr=s(CI);ouo=r(RYr,"CTRLModel"),RYr.forEach(t),ruo=r(a6e," (CTRL model)"),a6e.forEach(t),tuo=i($),pu=n($,"LI",{});var n6e=s(pu);tse=n(n6e,"STRONG",{});var PYr=s(tse);auo=r(PYr,"cvt"),PYr.forEach(t),nuo=r(n6e," \u2014 "),wI=n(n6e,"A",{href:!0});var BYr=s(wI);suo=r(BYr,"CvtModel"),BYr.forEach(t),luo=r(n6e," (CvT model)"),n6e.forEach(t),iuo=i($),_u=n($,"LI",{});var s6e=s(_u);ase=n(s6e,"STRONG",{});var IYr=s(ase);duo=r(IYr,"data2vec-audio"),IYr.forEach(t),cuo=r(s6e," \u2014 "),AI=n(s6e,"A",{href:!0});var qYr=s(AI);muo=r(qYr,"Data2VecAudioModel"),qYr.forEach(t),fuo=r(s6e," (Data2VecAudio model)"),s6e.forEach(t),guo=i($),bu=n($,"LI",{});var l6e=s(bu);nse=n(l6e,"STRONG",{});var NYr=s(nse);huo=r(NYr,"data2vec-text"),NYr.forEach(t),uuo=r(l6e," \u2014 "),yI=n(l6e,"A",{href:!0});var jYr=s(yI);puo=r(jYr,"Data2VecTextModel"),jYr.forEach(t),_uo=r(l6e," (Data2VecText model)"),l6e.forEach(t),buo=i($),vu=n($,"LI",{});var i6e=s(vu);sse=n(i6e,"STRONG",{});var DYr=s(sse);vuo=r(DYr,"data2vec-vision"),DYr.forEach(t),Fuo=r(i6e," \u2014 "),LI=n(i6e,"A",{href:!0});var GYr=s(LI);Tuo=r(GYr,"Data2VecVisionModel"),GYr.forEach(t),Muo=r(i6e," (Data2VecVision model)"),i6e.forEach(t),Euo=i($),Fu=n($,"LI",{});var d6e=s(Fu);lse=n(d6e,"STRONG",{});var OYr=s(lse);Cuo=r(OYr,"deberta"),OYr.forEach(t),wuo=r(d6e," \u2014 "),xI=n(d6e,"A",{href:!0});var VYr=s(xI);Auo=r(VYr,"DebertaModel"),VYr.forEach(t),yuo=r(d6e," (DeBERTa model)"),d6e.forEach(t),Luo=i($),Tu=n($,"LI",{});var c6e=s(Tu);ise=n(c6e,"STRONG",{});var XYr=s(ise);xuo=r(XYr,"deberta-v2"),XYr.forEach(t),$uo=r(c6e," \u2014 "),$I=n(c6e,"A",{href:!0});var zYr=s($I);kuo=r(zYr,"DebertaV2Model"),zYr.forEach(t),Suo=r(c6e," (DeBERTa-v2 model)"),c6e.forEach(t),Ruo=i($),Mu=n($,"LI",{});var m6e=s(Mu);dse=n(m6e,"STRONG",{});var WYr=s(dse);Puo=r(WYr,"decision_transformer"),WYr.forEach(t),Buo=r(m6e," \u2014 "),kI=n(m6e,"A",{href:!0});var QYr=s(kI);Iuo=r(QYr,"DecisionTransformerModel"),QYr.forEach(t),quo=r(m6e," (Decision Transformer model)"),m6e.forEach(t),Nuo=i($),Eu=n($,"LI",{});var f6e=s(Eu);cse=n(f6e,"STRONG",{});var HYr=s(cse);juo=r(HYr,"deit"),HYr.forEach(t),Duo=r(f6e," \u2014 "),SI=n(f6e,"A",{href:!0});var UYr=s(SI);Guo=r(UYr,"DeiTModel"),UYr.forEach(t),Ouo=r(f6e," (DeiT model)"),f6e.forEach(t),Vuo=i($),Cu=n($,"LI",{});var g6e=s(Cu);mse=n(g6e,"STRONG",{});var JYr=s(mse);Xuo=r(JYr,"detr"),JYr.forEach(t),zuo=r(g6e," \u2014 "),RI=n(g6e,"A",{href:!0});var YYr=s(RI);Wuo=r(YYr,"DetrModel"),YYr.forEach(t),Quo=r(g6e," (DETR model)"),g6e.forEach(t),Huo=i($),wu=n($,"LI",{});var h6e=s(wu);fse=n(h6e,"STRONG",{});var KYr=s(fse);Uuo=r(KYr,"distilbert"),KYr.forEach(t),Juo=r(h6e," \u2014 "),PI=n(h6e,"A",{href:!0});var ZYr=s(PI);Yuo=r(ZYr,"DistilBertModel"),ZYr.forEach(t),Kuo=r(h6e," (DistilBERT model)"),h6e.forEach(t),Zuo=i($),Au=n($,"LI",{});var u6e=s(Au);gse=n(u6e,"STRONG",{});var eKr=s(gse);epo=r(eKr,"dpr"),eKr.forEach(t),opo=r(u6e," \u2014 "),BI=n(u6e,"A",{href:!0});var oKr=s(BI);rpo=r(oKr,"DPRQuestionEncoder"),oKr.forEach(t),tpo=r(u6e," (DPR model)"),u6e.forEach(t),apo=i($),yu=n($,"LI",{});var p6e=s(yu);hse=n(p6e,"STRONG",{});var rKr=s(hse);npo=r(rKr,"dpt"),rKr.forEach(t),spo=r(p6e," \u2014 "),II=n(p6e,"A",{href:!0});var tKr=s(II);lpo=r(tKr,"DPTModel"),tKr.forEach(t),ipo=r(p6e," (DPT model)"),p6e.forEach(t),dpo=i($),Lu=n($,"LI",{});var _6e=s(Lu);use=n(_6e,"STRONG",{});var aKr=s(use);cpo=r(aKr,"electra"),aKr.forEach(t),mpo=r(_6e," \u2014 "),qI=n(_6e,"A",{href:!0});var nKr=s(qI);fpo=r(nKr,"ElectraModel"),nKr.forEach(t),gpo=r(_6e," (ELECTRA model)"),_6e.forEach(t),hpo=i($),xu=n($,"LI",{});var b6e=s(xu);pse=n(b6e,"STRONG",{});var sKr=s(pse);upo=r(sKr,"flaubert"),sKr.forEach(t),ppo=r(b6e," \u2014 "),NI=n(b6e,"A",{href:!0});var lKr=s(NI);_po=r(lKr,"FlaubertModel"),lKr.forEach(t),bpo=r(b6e," (FlauBERT model)"),b6e.forEach(t),vpo=i($),$u=n($,"LI",{});var v6e=s($u);_se=n(v6e,"STRONG",{});var iKr=s(_se);Fpo=r(iKr,"flava"),iKr.forEach(t),Tpo=r(v6e," \u2014 "),jI=n(v6e,"A",{href:!0});var dKr=s(jI);Mpo=r(dKr,"FlavaModel"),dKr.forEach(t),Epo=r(v6e," (Flava model)"),v6e.forEach(t),Cpo=i($),ku=n($,"LI",{});var F6e=s(ku);bse=n(F6e,"STRONG",{});var cKr=s(bse);wpo=r(cKr,"fnet"),cKr.forEach(t),Apo=r(F6e," \u2014 "),DI=n(F6e,"A",{href:!0});var mKr=s(DI);ypo=r(mKr,"FNetModel"),mKr.forEach(t),Lpo=r(F6e," (FNet model)"),F6e.forEach(t),xpo=i($),Su=n($,"LI",{});var T6e=s(Su);vse=n(T6e,"STRONG",{});var fKr=s(vse);$po=r(fKr,"fsmt"),fKr.forEach(t),kpo=r(T6e," \u2014 "),GI=n(T6e,"A",{href:!0});var gKr=s(GI);Spo=r(gKr,"FSMTModel"),gKr.forEach(t),Rpo=r(T6e," (FairSeq Machine-Translation model)"),T6e.forEach(t),Ppo=i($),Rs=n($,"LI",{});var L$=s(Rs);Fse=n(L$,"STRONG",{});var hKr=s(Fse);Bpo=r(hKr,"funnel"),hKr.forEach(t),Ipo=r(L$," \u2014 "),OI=n(L$,"A",{href:!0});var uKr=s(OI);qpo=r(uKr,"FunnelModel"),uKr.forEach(t),Npo=r(L$," or "),VI=n(L$,"A",{href:!0});var pKr=s(VI);jpo=r(pKr,"FunnelBaseModel"),pKr.forEach(t),Dpo=r(L$," (Funnel Transformer model)"),L$.forEach(t),Gpo=i($),Ru=n($,"LI",{});var M6e=s(Ru);Tse=n(M6e,"STRONG",{});var _Kr=s(Tse);Opo=r(_Kr,"glpn"),_Kr.forEach(t),Vpo=r(M6e," \u2014 "),XI=n(M6e,"A",{href:!0});var bKr=s(XI);Xpo=r(bKr,"GLPNModel"),bKr.forEach(t),zpo=r(M6e," (GLPN model)"),M6e.forEach(t),Wpo=i($),Pu=n($,"LI",{});var E6e=s(Pu);Mse=n(E6e,"STRONG",{});var vKr=s(Mse);Qpo=r(vKr,"gpt2"),vKr.forEach(t),Hpo=r(E6e," \u2014 "),zI=n(E6e,"A",{href:!0});var FKr=s(zI);Upo=r(FKr,"GPT2Model"),FKr.forEach(t),Jpo=r(E6e," (OpenAI GPT-2 model)"),E6e.forEach(t),Ypo=i($),Bu=n($,"LI",{});var C6e=s(Bu);Ese=n(C6e,"STRONG",{});var TKr=s(Ese);Kpo=r(TKr,"gpt_neo"),TKr.forEach(t),Zpo=r(C6e," \u2014 "),WI=n(C6e,"A",{href:!0});var MKr=s(WI);e_o=r(MKr,"GPTNeoModel"),MKr.forEach(t),o_o=r(C6e," (GPT Neo model)"),C6e.forEach(t),r_o=i($),Iu=n($,"LI",{});var w6e=s(Iu);Cse=n(w6e,"STRONG",{});var EKr=s(Cse);t_o=r(EKr,"gptj"),EKr.forEach(t),a_o=r(w6e," \u2014 "),QI=n(w6e,"A",{href:!0});var CKr=s(QI);n_o=r(CKr,"GPTJModel"),CKr.forEach(t),s_o=r(w6e," (GPT-J model)"),w6e.forEach(t),l_o=i($),qu=n($,"LI",{});var A6e=s(qu);wse=n(A6e,"STRONG",{});var wKr=s(wse);i_o=r(wKr,"hubert"),wKr.forEach(t),d_o=r(A6e," \u2014 "),HI=n(A6e,"A",{href:!0});var AKr=s(HI);c_o=r(AKr,"HubertModel"),AKr.forEach(t),m_o=r(A6e," (Hubert model)"),A6e.forEach(t),f_o=i($),Nu=n($,"LI",{});var y6e=s(Nu);Ase=n(y6e,"STRONG",{});var yKr=s(Ase);g_o=r(yKr,"ibert"),yKr.forEach(t),h_o=r(y6e," \u2014 "),UI=n(y6e,"A",{href:!0});var LKr=s(UI);u_o=r(LKr,"IBertModel"),LKr.forEach(t),p_o=r(y6e," (I-BERT model)"),y6e.forEach(t),__o=i($),ju=n($,"LI",{});var L6e=s(ju);yse=n(L6e,"STRONG",{});var xKr=s(yse);b_o=r(xKr,"imagegpt"),xKr.forEach(t),v_o=r(L6e," \u2014 "),JI=n(L6e,"A",{href:!0});var $Kr=s(JI);F_o=r($Kr,"ImageGPTModel"),$Kr.forEach(t),T_o=r(L6e," (ImageGPT model)"),L6e.forEach(t),M_o=i($),Du=n($,"LI",{});var x6e=s(Du);Lse=n(x6e,"STRONG",{});var kKr=s(Lse);E_o=r(kKr,"layoutlm"),kKr.forEach(t),C_o=r(x6e," \u2014 "),YI=n(x6e,"A",{href:!0});var SKr=s(YI);w_o=r(SKr,"LayoutLMModel"),SKr.forEach(t),A_o=r(x6e," (LayoutLM model)"),x6e.forEach(t),y_o=i($),Gu=n($,"LI",{});var $6e=s(Gu);xse=n($6e,"STRONG",{});var RKr=s(xse);L_o=r(RKr,"layoutlmv2"),RKr.forEach(t),x_o=r($6e," \u2014 "),KI=n($6e,"A",{href:!0});var PKr=s(KI);$_o=r(PKr,"LayoutLMv2Model"),PKr.forEach(t),k_o=r($6e," (LayoutLMv2 model)"),$6e.forEach(t),S_o=i($),Ou=n($,"LI",{});var k6e=s(Ou);$se=n(k6e,"STRONG",{});var BKr=s($se);R_o=r(BKr,"led"),BKr.forEach(t),P_o=r(k6e," \u2014 "),ZI=n(k6e,"A",{href:!0});var IKr=s(ZI);B_o=r(IKr,"LEDModel"),IKr.forEach(t),I_o=r(k6e," (LED model)"),k6e.forEach(t),q_o=i($),Vu=n($,"LI",{});var S6e=s(Vu);kse=n(S6e,"STRONG",{});var qKr=s(kse);N_o=r(qKr,"longformer"),qKr.forEach(t),j_o=r(S6e," \u2014 "),eq=n(S6e,"A",{href:!0});var NKr=s(eq);D_o=r(NKr,"LongformerModel"),NKr.forEach(t),G_o=r(S6e," (Longformer model)"),S6e.forEach(t),O_o=i($),Xu=n($,"LI",{});var R6e=s(Xu);Sse=n(R6e,"STRONG",{});var jKr=s(Sse);V_o=r(jKr,"luke"),jKr.forEach(t),X_o=r(R6e," \u2014 "),oq=n(R6e,"A",{href:!0});var DKr=s(oq);z_o=r(DKr,"LukeModel"),DKr.forEach(t),W_o=r(R6e," (LUKE model)"),R6e.forEach(t),Q_o=i($),zu=n($,"LI",{});var P6e=s(zu);Rse=n(P6e,"STRONG",{});var GKr=s(Rse);H_o=r(GKr,"lxmert"),GKr.forEach(t),U_o=r(P6e," \u2014 "),rq=n(P6e,"A",{href:!0});var OKr=s(rq);J_o=r(OKr,"LxmertModel"),OKr.forEach(t),Y_o=r(P6e," (LXMERT model)"),P6e.forEach(t),K_o=i($),Wu=n($,"LI",{});var B6e=s(Wu);Pse=n(B6e,"STRONG",{});var VKr=s(Pse);Z_o=r(VKr,"m2m_100"),VKr.forEach(t),ebo=r(B6e," \u2014 "),tq=n(B6e,"A",{href:!0});var XKr=s(tq);obo=r(XKr,"M2M100Model"),XKr.forEach(t),rbo=r(B6e," (M2M100 model)"),B6e.forEach(t),tbo=i($),Qu=n($,"LI",{});var I6e=s(Qu);Bse=n(I6e,"STRONG",{});var zKr=s(Bse);abo=r(zKr,"marian"),zKr.forEach(t),nbo=r(I6e," \u2014 "),aq=n(I6e,"A",{href:!0});var WKr=s(aq);sbo=r(WKr,"MarianModel"),WKr.forEach(t),lbo=r(I6e," (Marian model)"),I6e.forEach(t),ibo=i($),Hu=n($,"LI",{});var q6e=s(Hu);Ise=n(q6e,"STRONG",{});var QKr=s(Ise);dbo=r(QKr,"maskformer"),QKr.forEach(t),cbo=r(q6e," \u2014 "),nq=n(q6e,"A",{href:!0});var HKr=s(nq);mbo=r(HKr,"MaskFormerModel"),HKr.forEach(t),fbo=r(q6e," (MaskFormer model)"),q6e.forEach(t),gbo=i($),Uu=n($,"LI",{});var N6e=s(Uu);qse=n(N6e,"STRONG",{});var UKr=s(qse);hbo=r(UKr,"mbart"),UKr.forEach(t),ubo=r(N6e," \u2014 "),sq=n(N6e,"A",{href:!0});var JKr=s(sq);pbo=r(JKr,"MBartModel"),JKr.forEach(t),_bo=r(N6e," (mBART model)"),N6e.forEach(t),bbo=i($),Ju=n($,"LI",{});var j6e=s(Ju);Nse=n(j6e,"STRONG",{});var YKr=s(Nse);vbo=r(YKr,"megatron-bert"),YKr.forEach(t),Fbo=r(j6e," \u2014 "),lq=n(j6e,"A",{href:!0});var KKr=s(lq);Tbo=r(KKr,"MegatronBertModel"),KKr.forEach(t),Mbo=r(j6e," (MegatronBert model)"),j6e.forEach(t),Ebo=i($),Yu=n($,"LI",{});var D6e=s(Yu);jse=n(D6e,"STRONG",{});var ZKr=s(jse);Cbo=r(ZKr,"mobilebert"),ZKr.forEach(t),wbo=r(D6e," \u2014 "),iq=n(D6e,"A",{href:!0});var eZr=s(iq);Abo=r(eZr,"MobileBertModel"),eZr.forEach(t),ybo=r(D6e," (MobileBERT model)"),D6e.forEach(t),Lbo=i($),Ku=n($,"LI",{});var G6e=s(Ku);Dse=n(G6e,"STRONG",{});var oZr=s(Dse);xbo=r(oZr,"mpnet"),oZr.forEach(t),$bo=r(G6e," \u2014 "),dq=n(G6e,"A",{href:!0});var rZr=s(dq);kbo=r(rZr,"MPNetModel"),rZr.forEach(t),Sbo=r(G6e," (MPNet model)"),G6e.forEach(t),Rbo=i($),Zu=n($,"LI",{});var O6e=s(Zu);Gse=n(O6e,"STRONG",{});var tZr=s(Gse);Pbo=r(tZr,"mt5"),tZr.forEach(t),Bbo=r(O6e," \u2014 "),cq=n(O6e,"A",{href:!0});var aZr=s(cq);Ibo=r(aZr,"MT5Model"),aZr.forEach(t),qbo=r(O6e," (mT5 model)"),O6e.forEach(t),Nbo=i($),ep=n($,"LI",{});var V6e=s(ep);Ose=n(V6e,"STRONG",{});var nZr=s(Ose);jbo=r(nZr,"nystromformer"),nZr.forEach(t),Dbo=r(V6e," \u2014 "),mq=n(V6e,"A",{href:!0});var sZr=s(mq);Gbo=r(sZr,"NystromformerModel"),sZr.forEach(t),Obo=r(V6e," (Nystromformer model)"),V6e.forEach(t),Vbo=i($),op=n($,"LI",{});var X6e=s(op);Vse=n(X6e,"STRONG",{});var lZr=s(Vse);Xbo=r(lZr,"openai-gpt"),lZr.forEach(t),zbo=r(X6e," \u2014 "),fq=n(X6e,"A",{href:!0});var iZr=s(fq);Wbo=r(iZr,"OpenAIGPTModel"),iZr.forEach(t),Qbo=r(X6e," (OpenAI GPT model)"),X6e.forEach(t),Hbo=i($),rp=n($,"LI",{});var z6e=s(rp);Xse=n(z6e,"STRONG",{});var dZr=s(Xse);Ubo=r(dZr,"opt"),dZr.forEach(t),Jbo=r(z6e," \u2014 "),gq=n(z6e,"A",{href:!0});var cZr=s(gq);Ybo=r(cZr,"OPTModel"),cZr.forEach(t),Kbo=r(z6e," (OPT model)"),z6e.forEach(t),Zbo=i($),tp=n($,"LI",{});var W6e=s(tp);zse=n(W6e,"STRONG",{});var mZr=s(zse);e2o=r(mZr,"pegasus"),mZr.forEach(t),o2o=r(W6e," \u2014 "),hq=n(W6e,"A",{href:!0});var fZr=s(hq);r2o=r(fZr,"PegasusModel"),fZr.forEach(t),t2o=r(W6e," (Pegasus model)"),W6e.forEach(t),a2o=i($),ap=n($,"LI",{});var Q6e=s(ap);Wse=n(Q6e,"STRONG",{});var gZr=s(Wse);n2o=r(gZr,"perceiver"),gZr.forEach(t),s2o=r(Q6e," \u2014 "),uq=n(Q6e,"A",{href:!0});var hZr=s(uq);l2o=r(hZr,"PerceiverModel"),hZr.forEach(t),i2o=r(Q6e," (Perceiver model)"),Q6e.forEach(t),d2o=i($),np=n($,"LI",{});var H6e=s(np);Qse=n(H6e,"STRONG",{});var uZr=s(Qse);c2o=r(uZr,"plbart"),uZr.forEach(t),m2o=r(H6e," \u2014 "),pq=n(H6e,"A",{href:!0});var pZr=s(pq);f2o=r(pZr,"PLBartModel"),pZr.forEach(t),g2o=r(H6e," (PLBart model)"),H6e.forEach(t),h2o=i($),sp=n($,"LI",{});var U6e=s(sp);Hse=n(U6e,"STRONG",{});var _Zr=s(Hse);u2o=r(_Zr,"poolformer"),_Zr.forEach(t),p2o=r(U6e," \u2014 "),_q=n(U6e,"A",{href:!0});var bZr=s(_q);_2o=r(bZr,"PoolFormerModel"),bZr.forEach(t),b2o=r(U6e," (PoolFormer model)"),U6e.forEach(t),v2o=i($),lp=n($,"LI",{});var J6e=s(lp);Use=n(J6e,"STRONG",{});var vZr=s(Use);F2o=r(vZr,"prophetnet"),vZr.forEach(t),T2o=r(J6e," \u2014 "),bq=n(J6e,"A",{href:!0});var FZr=s(bq);M2o=r(FZr,"ProphetNetModel"),FZr.forEach(t),E2o=r(J6e," (ProphetNet model)"),J6e.forEach(t),C2o=i($),ip=n($,"LI",{});var Y6e=s(ip);Jse=n(Y6e,"STRONG",{});var TZr=s(Jse);w2o=r(TZr,"qdqbert"),TZr.forEach(t),A2o=r(Y6e," \u2014 "),vq=n(Y6e,"A",{href:!0});var MZr=s(vq);y2o=r(MZr,"QDQBertModel"),MZr.forEach(t),L2o=r(Y6e," (QDQBert model)"),Y6e.forEach(t),x2o=i($),dp=n($,"LI",{});var K6e=s(dp);Yse=n(K6e,"STRONG",{});var EZr=s(Yse);$2o=r(EZr,"reformer"),EZr.forEach(t),k2o=r(K6e," \u2014 "),Fq=n(K6e,"A",{href:!0});var CZr=s(Fq);S2o=r(CZr,"ReformerModel"),CZr.forEach(t),R2o=r(K6e," (Reformer model)"),K6e.forEach(t),P2o=i($),cp=n($,"LI",{});var Z6e=s(cp);Kse=n(Z6e,"STRONG",{});var wZr=s(Kse);B2o=r(wZr,"regnet"),wZr.forEach(t),I2o=r(Z6e," \u2014 "),Tq=n(Z6e,"A",{href:!0});var AZr=s(Tq);q2o=r(AZr,"RegNetModel"),AZr.forEach(t),N2o=r(Z6e," (RegNet model)"),Z6e.forEach(t),j2o=i($),mp=n($,"LI",{});var eye=s(mp);Zse=n(eye,"STRONG",{});var yZr=s(Zse);D2o=r(yZr,"rembert"),yZr.forEach(t),G2o=r(eye," \u2014 "),Mq=n(eye,"A",{href:!0});var LZr=s(Mq);O2o=r(LZr,"RemBertModel"),LZr.forEach(t),V2o=r(eye," (RemBERT model)"),eye.forEach(t),X2o=i($),fp=n($,"LI",{});var oye=s(fp);ele=n(oye,"STRONG",{});var xZr=s(ele);z2o=r(xZr,"resnet"),xZr.forEach(t),W2o=r(oye," \u2014 "),Eq=n(oye,"A",{href:!0});var $Zr=s(Eq);Q2o=r($Zr,"ResNetModel"),$Zr.forEach(t),H2o=r(oye," (ResNet model)"),oye.forEach(t),U2o=i($),gp=n($,"LI",{});var rye=s(gp);ole=n(rye,"STRONG",{});var kZr=s(ole);J2o=r(kZr,"retribert"),kZr.forEach(t),Y2o=r(rye," \u2014 "),Cq=n(rye,"A",{href:!0});var SZr=s(Cq);K2o=r(SZr,"RetriBertModel"),SZr.forEach(t),Z2o=r(rye," (RetriBERT model)"),rye.forEach(t),evo=i($),hp=n($,"LI",{});var tye=s(hp);rle=n(tye,"STRONG",{});var RZr=s(rle);ovo=r(RZr,"roberta"),RZr.forEach(t),rvo=r(tye," \u2014 "),wq=n(tye,"A",{href:!0});var PZr=s(wq);tvo=r(PZr,"RobertaModel"),PZr.forEach(t),avo=r(tye," (RoBERTa model)"),tye.forEach(t),nvo=i($),up=n($,"LI",{});var aye=s(up);tle=n(aye,"STRONG",{});var BZr=s(tle);svo=r(BZr,"roformer"),BZr.forEach(t),lvo=r(aye," \u2014 "),Aq=n(aye,"A",{href:!0});var IZr=s(Aq);ivo=r(IZr,"RoFormerModel"),IZr.forEach(t),dvo=r(aye," (RoFormer model)"),aye.forEach(t),cvo=i($),pp=n($,"LI",{});var nye=s(pp);ale=n(nye,"STRONG",{});var qZr=s(ale);mvo=r(qZr,"segformer"),qZr.forEach(t),fvo=r(nye," \u2014 "),yq=n(nye,"A",{href:!0});var NZr=s(yq);gvo=r(NZr,"SegformerModel"),NZr.forEach(t),hvo=r(nye," (SegFormer model)"),nye.forEach(t),uvo=i($),_p=n($,"LI",{});var sye=s(_p);nle=n(sye,"STRONG",{});var jZr=s(nle);pvo=r(jZr,"sew"),jZr.forEach(t),_vo=r(sye," \u2014 "),Lq=n(sye,"A",{href:!0});var DZr=s(Lq);bvo=r(DZr,"SEWModel"),DZr.forEach(t),vvo=r(sye," (SEW model)"),sye.forEach(t),Fvo=i($),bp=n($,"LI",{});var lye=s(bp);sle=n(lye,"STRONG",{});var GZr=s(sle);Tvo=r(GZr,"sew-d"),GZr.forEach(t),Mvo=r(lye," \u2014 "),xq=n(lye,"A",{href:!0});var OZr=s(xq);Evo=r(OZr,"SEWDModel"),OZr.forEach(t),Cvo=r(lye," (SEW-D model)"),lye.forEach(t),wvo=i($),vp=n($,"LI",{});var iye=s(vp);lle=n(iye,"STRONG",{});var VZr=s(lle);Avo=r(VZr,"speech_to_text"),VZr.forEach(t),yvo=r(iye," \u2014 "),$q=n(iye,"A",{href:!0});var XZr=s($q);Lvo=r(XZr,"Speech2TextModel"),XZr.forEach(t),xvo=r(iye," (Speech2Text model)"),iye.forEach(t),$vo=i($),Fp=n($,"LI",{});var dye=s(Fp);ile=n(dye,"STRONG",{});var zZr=s(ile);kvo=r(zZr,"splinter"),zZr.forEach(t),Svo=r(dye," \u2014 "),kq=n(dye,"A",{href:!0});var WZr=s(kq);Rvo=r(WZr,"SplinterModel"),WZr.forEach(t),Pvo=r(dye," (Splinter model)"),dye.forEach(t),Bvo=i($),Tp=n($,"LI",{});var cye=s(Tp);dle=n(cye,"STRONG",{});var QZr=s(dle);Ivo=r(QZr,"squeezebert"),QZr.forEach(t),qvo=r(cye," \u2014 "),Sq=n(cye,"A",{href:!0});var HZr=s(Sq);Nvo=r(HZr,"SqueezeBertModel"),HZr.forEach(t),jvo=r(cye," (SqueezeBERT model)"),cye.forEach(t),Dvo=i($),Mp=n($,"LI",{});var mye=s(Mp);cle=n(mye,"STRONG",{});var UZr=s(cle);Gvo=r(UZr,"swin"),UZr.forEach(t),Ovo=r(mye," \u2014 "),Rq=n(mye,"A",{href:!0});var JZr=s(Rq);Vvo=r(JZr,"SwinModel"),JZr.forEach(t),Xvo=r(mye," (Swin model)"),mye.forEach(t),zvo=i($),Ep=n($,"LI",{});var fye=s(Ep);mle=n(fye,"STRONG",{});var YZr=s(mle);Wvo=r(YZr,"t5"),YZr.forEach(t),Qvo=r(fye," \u2014 "),Pq=n(fye,"A",{href:!0});var KZr=s(Pq);Hvo=r(KZr,"T5Model"),KZr.forEach(t),Uvo=r(fye," (T5 model)"),fye.forEach(t),Jvo=i($),Cp=n($,"LI",{});var gye=s(Cp);fle=n(gye,"STRONG",{});var ZZr=s(fle);Yvo=r(ZZr,"tapas"),ZZr.forEach(t),Kvo=r(gye," \u2014 "),Bq=n(gye,"A",{href:!0});var eet=s(Bq);Zvo=r(eet,"TapasModel"),eet.forEach(t),eFo=r(gye," (TAPAS model)"),gye.forEach(t),oFo=i($),wp=n($,"LI",{});var hye=s(wp);gle=n(hye,"STRONG",{});var oet=s(gle);rFo=r(oet,"trajectory_transformer"),oet.forEach(t),tFo=r(hye," \u2014 "),Iq=n(hye,"A",{href:!0});var ret=s(Iq);aFo=r(ret,"TrajectoryTransformerModel"),ret.forEach(t),nFo=r(hye," (Trajectory Transformer model)"),hye.forEach(t),sFo=i($),Ap=n($,"LI",{});var uye=s(Ap);hle=n(uye,"STRONG",{});var tet=s(hle);lFo=r(tet,"transfo-xl"),tet.forEach(t),iFo=r(uye," \u2014 "),qq=n(uye,"A",{href:!0});var aet=s(qq);dFo=r(aet,"TransfoXLModel"),aet.forEach(t),cFo=r(uye," (Transformer-XL model)"),uye.forEach(t),mFo=i($),yp=n($,"LI",{});var pye=s(yp);ule=n(pye,"STRONG",{});var net=s(ule);fFo=r(net,"unispeech"),net.forEach(t),gFo=r(pye," \u2014 "),Nq=n(pye,"A",{href:!0});var set=s(Nq);hFo=r(set,"UniSpeechModel"),set.forEach(t),uFo=r(pye," (UniSpeech model)"),pye.forEach(t),pFo=i($),Lp=n($,"LI",{});var _ye=s(Lp);ple=n(_ye,"STRONG",{});var iet=s(ple);_Fo=r(iet,"unispeech-sat"),iet.forEach(t),bFo=r(_ye," \u2014 "),jq=n(_ye,"A",{href:!0});var det=s(jq);vFo=r(det,"UniSpeechSatModel"),det.forEach(t),FFo=r(_ye," (UniSpeechSat model)"),_ye.forEach(t),TFo=i($),xp=n($,"LI",{});var bye=s(xp);_le=n(bye,"STRONG",{});var cet=s(_le);MFo=r(cet,"van"),cet.forEach(t),EFo=r(bye," \u2014 "),Dq=n(bye,"A",{href:!0});var met=s(Dq);CFo=r(met,"VanModel"),met.forEach(t),wFo=r(bye," (VAN model)"),bye.forEach(t),AFo=i($),$p=n($,"LI",{});var vye=s($p);ble=n(vye,"STRONG",{});var fet=s(ble);yFo=r(fet,"vilt"),fet.forEach(t),LFo=r(vye," \u2014 "),Gq=n(vye,"A",{href:!0});var get=s(Gq);xFo=r(get,"ViltModel"),get.forEach(t),$Fo=r(vye," (ViLT model)"),vye.forEach(t),kFo=i($),kp=n($,"LI",{});var Fye=s(kp);vle=n(Fye,"STRONG",{});var het=s(vle);SFo=r(het,"vision-text-dual-encoder"),het.forEach(t),RFo=r(Fye," \u2014 "),Oq=n(Fye,"A",{href:!0});var uet=s(Oq);PFo=r(uet,"VisionTextDualEncoderModel"),uet.forEach(t),BFo=r(Fye," (VisionTextDualEncoder model)"),Fye.forEach(t),IFo=i($),Sp=n($,"LI",{});var Tye=s(Sp);Fle=n(Tye,"STRONG",{});var pet=s(Fle);qFo=r(pet,"visual_bert"),pet.forEach(t),NFo=r(Tye," \u2014 "),Vq=n(Tye,"A",{href:!0});var _et=s(Vq);jFo=r(_et,"VisualBertModel"),_et.forEach(t),DFo=r(Tye," (VisualBert model)"),Tye.forEach(t),GFo=i($),Rp=n($,"LI",{});var Mye=s(Rp);Tle=n(Mye,"STRONG",{});var bet=s(Tle);OFo=r(bet,"vit"),bet.forEach(t),VFo=r(Mye," \u2014 "),Xq=n(Mye,"A",{href:!0});var vet=s(Xq);XFo=r(vet,"ViTModel"),vet.forEach(t),zFo=r(Mye," (ViT model)"),Mye.forEach(t),WFo=i($),Pp=n($,"LI",{});var Eye=s(Pp);Mle=n(Eye,"STRONG",{});var Fet=s(Mle);QFo=r(Fet,"vit_mae"),Fet.forEach(t),HFo=r(Eye," \u2014 "),zq=n(Eye,"A",{href:!0});var Tet=s(zq);UFo=r(Tet,"ViTMAEModel"),Tet.forEach(t),JFo=r(Eye," (ViTMAE model)"),Eye.forEach(t),YFo=i($),Bp=n($,"LI",{});var Cye=s(Bp);Ele=n(Cye,"STRONG",{});var Met=s(Ele);KFo=r(Met,"wav2vec2"),Met.forEach(t),ZFo=r(Cye," \u2014 "),Wq=n(Cye,"A",{href:!0});var Eet=s(Wq);e1o=r(Eet,"Wav2Vec2Model"),Eet.forEach(t),o1o=r(Cye," (Wav2Vec2 model)"),Cye.forEach(t),r1o=i($),Ip=n($,"LI",{});var wye=s(Ip);Cle=n(wye,"STRONG",{});var Cet=s(Cle);t1o=r(Cet,"wav2vec2-conformer"),Cet.forEach(t),a1o=r(wye," \u2014 "),Qq=n(wye,"A",{href:!0});var wet=s(Qq);n1o=r(wet,"Wav2Vec2ConformerModel"),wet.forEach(t),s1o=r(wye," (Wav2Vec2-Conformer model)"),wye.forEach(t),l1o=i($),qp=n($,"LI",{});var Aye=s(qp);wle=n(Aye,"STRONG",{});var Aet=s(wle);i1o=r(Aet,"wavlm"),Aet.forEach(t),d1o=r(Aye," \u2014 "),Hq=n(Aye,"A",{href:!0});var yet=s(Hq);c1o=r(yet,"WavLMModel"),yet.forEach(t),m1o=r(Aye," (WavLM model)"),Aye.forEach(t),f1o=i($),Np=n($,"LI",{});var yye=s(Np);Ale=n(yye,"STRONG",{});var Let=s(Ale);g1o=r(Let,"xglm"),Let.forEach(t),h1o=r(yye," \u2014 "),Uq=n(yye,"A",{href:!0});var xet=s(Uq);u1o=r(xet,"XGLMModel"),xet.forEach(t),p1o=r(yye," (XGLM model)"),yye.forEach(t),_1o=i($),jp=n($,"LI",{});var Lye=s(jp);yle=n(Lye,"STRONG",{});var $et=s(yle);b1o=r($et,"xlm"),$et.forEach(t),v1o=r(Lye," \u2014 "),Jq=n(Lye,"A",{href:!0});var ket=s(Jq);F1o=r(ket,"XLMModel"),ket.forEach(t),T1o=r(Lye," (XLM model)"),Lye.forEach(t),M1o=i($),Dp=n($,"LI",{});var xye=s(Dp);Lle=n(xye,"STRONG",{});var Set=s(Lle);E1o=r(Set,"xlm-prophetnet"),Set.forEach(t),C1o=r(xye," \u2014 "),Yq=n(xye,"A",{href:!0});var Ret=s(Yq);w1o=r(Ret,"XLMProphetNetModel"),Ret.forEach(t),A1o=r(xye," (XLMProphetNet model)"),xye.forEach(t),y1o=i($),Gp=n($,"LI",{});var $ye=s(Gp);xle=n($ye,"STRONG",{});var Pet=s(xle);L1o=r(Pet,"xlm-roberta"),Pet.forEach(t),x1o=r($ye," \u2014 "),Kq=n($ye,"A",{href:!0});var Bet=s(Kq);$1o=r(Bet,"XLMRobertaModel"),Bet.forEach(t),k1o=r($ye," (XLM-RoBERTa model)"),$ye.forEach(t),S1o=i($),Op=n($,"LI",{});var kye=s(Op);$le=n(kye,"STRONG",{});var Iet=s($le);R1o=r(Iet,"xlm-roberta-xl"),Iet.forEach(t),P1o=r(kye," \u2014 "),Zq=n(kye,"A",{href:!0});var qet=s(Zq);B1o=r(qet,"XLMRobertaXLModel"),qet.forEach(t),I1o=r(kye," (XLM-RoBERTa-XL model)"),kye.forEach(t),q1o=i($),Vp=n($,"LI",{});var Sye=s(Vp);kle=n(Sye,"STRONG",{});var Net=s(kle);N1o=r(Net,"xlnet"),Net.forEach(t),j1o=r(Sye," \u2014 "),eN=n(Sye,"A",{href:!0});var jet=s(eN);D1o=r(jet,"XLNetModel"),jet.forEach(t),G1o=r(Sye," (XLNet model)"),Sye.forEach(t),O1o=i($),Xp=n($,"LI",{});var Rye=s(Xp);Sle=n(Rye,"STRONG",{});var Det=s(Sle);V1o=r(Det,"yolos"),Det.forEach(t),X1o=r(Rye," \u2014 "),oN=n(Rye,"A",{href:!0});var Get=s(oN);z1o=r(Get,"YolosModel"),Get.forEach(t),W1o=r(Rye," (YOLOS model)"),Rye.forEach(t),Q1o=i($),zp=n($,"LI",{});var Pye=s(zp);Rle=n(Pye,"STRONG",{});var Oet=s(Rle);H1o=r(Oet,"yoso"),Oet.forEach(t),U1o=r(Pye," \u2014 "),rN=n(Pye,"A",{href:!0});var Vet=s(rN);J1o=r(Vet,"YosoModel"),Vet.forEach(t),Y1o=r(Pye," (YOSO model)"),Pye.forEach(t),$.forEach(t),K1o=i(oa),Wp=n(oa,"P",{});var Bye=s(Wp);Z1o=r(Bye,"The model is set in evaluation mode by default using "),Ple=n(Bye,"CODE",{});var Xet=s(Ple);eTo=r(Xet,"model.eval()"),Xet.forEach(t),oTo=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(Bye,"CODE",{});var zet=s(Ble);rTo=r(zet,"model.train()"),zet.forEach(t),Bye.forEach(t),tTo=i(oa),T(Qp.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),hqe=i(m),yi=n(m,"H2",{class:!0});var bje=s(yi);Hp=n(bje,"A",{id:!0,class:!0,href:!0});var Wet=s(Hp);Ile=n(Wet,"SPAN",{});var Qet=s(Ile);T(zy.$$.fragment,Qet),Qet.forEach(t),Wet.forEach(t),aTo=i(bje),qle=n(bje,"SPAN",{});var Het=s(qle);nTo=r(Het,"AutoModelForPreTraining"),Het.forEach(t),bje.forEach(t),uqe=i(m),xo=n(m,"DIV",{class:!0});var Gs=s(xo);T(Wy.$$.fragment,Gs),sTo=i(Gs),Li=n(Gs,"P",{});var VK=s(Li);lTo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tN=n(VK,"A",{href:!0});var Uet=s(tN);iTo=r(Uet,"from_pretrained()"),Uet.forEach(t),dTo=r(VK," class method or the "),aN=n(VK,"A",{href:!0});var Jet=s(aN);cTo=r(Jet,"from_config()"),Jet.forEach(t),mTo=r(VK,` class
method.`),VK.forEach(t),fTo=i(Gs),Qy=n(Gs,"P",{});var vje=s(Qy);gTo=r(vje,"This class cannot be instantiated directly using "),Nle=n(vje,"CODE",{});var Yet=s(Nle);hTo=r(Yet,"__init__()"),Yet.forEach(t),uTo=r(vje," (throws an error)."),vje.forEach(t),pTo=i(Gs),at=n(Gs,"DIV",{class:!0});var FA=s(at);T(Hy.$$.fragment,FA),_To=i(FA),jle=n(FA,"P",{});var Ket=s(jle);bTo=r(Ket,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ket.forEach(t),vTo=i(FA),xi=n(FA,"P",{});var XK=s(xi);FTo=r(XK,`Note:
Loading a model from its configuration file does `),Dle=n(XK,"STRONG",{});var Zet=s(Dle);TTo=r(Zet,"not"),Zet.forEach(t),MTo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(XK,"A",{href:!0});var eot=s(nN);ETo=r(eot,"from_pretrained()"),eot.forEach(t),CTo=r(XK," to load the model weights."),XK.forEach(t),wTo=i(FA),T(Up.$$.fragment,FA),FA.forEach(t),ATo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Uy.$$.fragment,ra),yTo=i(ra),Gle=n(ra,"P",{});var oot=s(Gle);LTo=r(oot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oot.forEach(t),xTo=i(ra),xa=n(ra,"P",{});var TA=s(xa);$To=r(TA,"The model class to instantiate is selected based on the "),Ole=n(TA,"CODE",{});var rot=s(Ole);kTo=r(rot,"model_type"),rot.forEach(t),STo=r(TA,` property of the config object (either
passed as an argument or loaded from `),Vle=n(TA,"CODE",{});var tot=s(Vle);RTo=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),PTo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(TA,"CODE",{});var aot=s(Xle);BTo=r(aot,"pretrained_model_name_or_path"),aot.forEach(t),ITo=r(TA,":"),TA.forEach(t),qTo=i(ra),G=n(ra,"UL",{});var O=s(G);Jp=n(O,"LI",{});var Iye=s(Jp);zle=n(Iye,"STRONG",{});var not=s(zle);NTo=r(not,"albert"),not.forEach(t),jTo=r(Iye," \u2014 "),sN=n(Iye,"A",{href:!0});var sot=s(sN);DTo=r(sot,"AlbertForPreTraining"),sot.forEach(t),GTo=r(Iye," (ALBERT model)"),Iye.forEach(t),OTo=i(O),Yp=n(O,"LI",{});var qye=s(Yp);Wle=n(qye,"STRONG",{});var lot=s(Wle);VTo=r(lot,"bart"),lot.forEach(t),XTo=r(qye," \u2014 "),lN=n(qye,"A",{href:!0});var iot=s(lN);zTo=r(iot,"BartForConditionalGeneration"),iot.forEach(t),WTo=r(qye," (BART model)"),qye.forEach(t),QTo=i(O),Kp=n(O,"LI",{});var Nye=s(Kp);Qle=n(Nye,"STRONG",{});var dot=s(Qle);HTo=r(dot,"bert"),dot.forEach(t),UTo=r(Nye," \u2014 "),iN=n(Nye,"A",{href:!0});var cot=s(iN);JTo=r(cot,"BertForPreTraining"),cot.forEach(t),YTo=r(Nye," (BERT model)"),Nye.forEach(t),KTo=i(O),Zp=n(O,"LI",{});var jye=s(Zp);Hle=n(jye,"STRONG",{});var mot=s(Hle);ZTo=r(mot,"big_bird"),mot.forEach(t),eMo=r(jye," \u2014 "),dN=n(jye,"A",{href:!0});var fot=s(dN);oMo=r(fot,"BigBirdForPreTraining"),fot.forEach(t),rMo=r(jye," (BigBird model)"),jye.forEach(t),tMo=i(O),e_=n(O,"LI",{});var Dye=s(e_);Ule=n(Dye,"STRONG",{});var got=s(Ule);aMo=r(got,"camembert"),got.forEach(t),nMo=r(Dye," \u2014 "),cN=n(Dye,"A",{href:!0});var hot=s(cN);sMo=r(hot,"CamembertForMaskedLM"),hot.forEach(t),lMo=r(Dye," (CamemBERT model)"),Dye.forEach(t),iMo=i(O),o_=n(O,"LI",{});var Gye=s(o_);Jle=n(Gye,"STRONG",{});var uot=s(Jle);dMo=r(uot,"ctrl"),uot.forEach(t),cMo=r(Gye," \u2014 "),mN=n(Gye,"A",{href:!0});var pot=s(mN);mMo=r(pot,"CTRLLMHeadModel"),pot.forEach(t),fMo=r(Gye," (CTRL model)"),Gye.forEach(t),gMo=i(O),r_=n(O,"LI",{});var Oye=s(r_);Yle=n(Oye,"STRONG",{});var _ot=s(Yle);hMo=r(_ot,"data2vec-text"),_ot.forEach(t),uMo=r(Oye," \u2014 "),fN=n(Oye,"A",{href:!0});var bot=s(fN);pMo=r(bot,"Data2VecTextForMaskedLM"),bot.forEach(t),_Mo=r(Oye," (Data2VecText model)"),Oye.forEach(t),bMo=i(O),t_=n(O,"LI",{});var Vye=s(t_);Kle=n(Vye,"STRONG",{});var vot=s(Kle);vMo=r(vot,"deberta"),vot.forEach(t),FMo=r(Vye," \u2014 "),gN=n(Vye,"A",{href:!0});var Fot=s(gN);TMo=r(Fot,"DebertaForMaskedLM"),Fot.forEach(t),MMo=r(Vye," (DeBERTa model)"),Vye.forEach(t),EMo=i(O),a_=n(O,"LI",{});var Xye=s(a_);Zle=n(Xye,"STRONG",{});var Tot=s(Zle);CMo=r(Tot,"deberta-v2"),Tot.forEach(t),wMo=r(Xye," \u2014 "),hN=n(Xye,"A",{href:!0});var Mot=s(hN);AMo=r(Mot,"DebertaV2ForMaskedLM"),Mot.forEach(t),yMo=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),LMo=i(O),n_=n(O,"LI",{});var zye=s(n_);eie=n(zye,"STRONG",{});var Eot=s(eie);xMo=r(Eot,"distilbert"),Eot.forEach(t),$Mo=r(zye," \u2014 "),uN=n(zye,"A",{href:!0});var Cot=s(uN);kMo=r(Cot,"DistilBertForMaskedLM"),Cot.forEach(t),SMo=r(zye," (DistilBERT model)"),zye.forEach(t),RMo=i(O),s_=n(O,"LI",{});var Wye=s(s_);oie=n(Wye,"STRONG",{});var wot=s(oie);PMo=r(wot,"electra"),wot.forEach(t),BMo=r(Wye," \u2014 "),pN=n(Wye,"A",{href:!0});var Aot=s(pN);IMo=r(Aot,"ElectraForPreTraining"),Aot.forEach(t),qMo=r(Wye," (ELECTRA model)"),Wye.forEach(t),NMo=i(O),l_=n(O,"LI",{});var Qye=s(l_);rie=n(Qye,"STRONG",{});var yot=s(rie);jMo=r(yot,"flaubert"),yot.forEach(t),DMo=r(Qye," \u2014 "),_N=n(Qye,"A",{href:!0});var Lot=s(_N);GMo=r(Lot,"FlaubertWithLMHeadModel"),Lot.forEach(t),OMo=r(Qye," (FlauBERT model)"),Qye.forEach(t),VMo=i(O),i_=n(O,"LI",{});var Hye=s(i_);tie=n(Hye,"STRONG",{});var xot=s(tie);XMo=r(xot,"flava"),xot.forEach(t),zMo=r(Hye," \u2014 "),bN=n(Hye,"A",{href:!0});var $ot=s(bN);WMo=r($ot,"FlavaForPreTraining"),$ot.forEach(t),QMo=r(Hye," (Flava model)"),Hye.forEach(t),HMo=i(O),d_=n(O,"LI",{});var Uye=s(d_);aie=n(Uye,"STRONG",{});var kot=s(aie);UMo=r(kot,"fnet"),kot.forEach(t),JMo=r(Uye," \u2014 "),vN=n(Uye,"A",{href:!0});var Sot=s(vN);YMo=r(Sot,"FNetForPreTraining"),Sot.forEach(t),KMo=r(Uye," (FNet model)"),Uye.forEach(t),ZMo=i(O),c_=n(O,"LI",{});var Jye=s(c_);nie=n(Jye,"STRONG",{});var Rot=s(nie);e4o=r(Rot,"fsmt"),Rot.forEach(t),o4o=r(Jye," \u2014 "),FN=n(Jye,"A",{href:!0});var Pot=s(FN);r4o=r(Pot,"FSMTForConditionalGeneration"),Pot.forEach(t),t4o=r(Jye," (FairSeq Machine-Translation model)"),Jye.forEach(t),a4o=i(O),m_=n(O,"LI",{});var Yye=s(m_);sie=n(Yye,"STRONG",{});var Bot=s(sie);n4o=r(Bot,"funnel"),Bot.forEach(t),s4o=r(Yye," \u2014 "),TN=n(Yye,"A",{href:!0});var Iot=s(TN);l4o=r(Iot,"FunnelForPreTraining"),Iot.forEach(t),i4o=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),d4o=i(O),f_=n(O,"LI",{});var Kye=s(f_);lie=n(Kye,"STRONG",{});var qot=s(lie);c4o=r(qot,"gpt2"),qot.forEach(t),m4o=r(Kye," \u2014 "),MN=n(Kye,"A",{href:!0});var Not=s(MN);f4o=r(Not,"GPT2LMHeadModel"),Not.forEach(t),g4o=r(Kye," (OpenAI GPT-2 model)"),Kye.forEach(t),h4o=i(O),g_=n(O,"LI",{});var Zye=s(g_);iie=n(Zye,"STRONG",{});var jot=s(iie);u4o=r(jot,"ibert"),jot.forEach(t),p4o=r(Zye," \u2014 "),EN=n(Zye,"A",{href:!0});var Dot=s(EN);_4o=r(Dot,"IBertForMaskedLM"),Dot.forEach(t),b4o=r(Zye," (I-BERT model)"),Zye.forEach(t),v4o=i(O),h_=n(O,"LI",{});var eLe=s(h_);die=n(eLe,"STRONG",{});var Got=s(die);F4o=r(Got,"layoutlm"),Got.forEach(t),T4o=r(eLe," \u2014 "),CN=n(eLe,"A",{href:!0});var Oot=s(CN);M4o=r(Oot,"LayoutLMForMaskedLM"),Oot.forEach(t),E4o=r(eLe," (LayoutLM model)"),eLe.forEach(t),C4o=i(O),u_=n(O,"LI",{});var oLe=s(u_);cie=n(oLe,"STRONG",{});var Vot=s(cie);w4o=r(Vot,"longformer"),Vot.forEach(t),A4o=r(oLe," \u2014 "),wN=n(oLe,"A",{href:!0});var Xot=s(wN);y4o=r(Xot,"LongformerForMaskedLM"),Xot.forEach(t),L4o=r(oLe," (Longformer model)"),oLe.forEach(t),x4o=i(O),p_=n(O,"LI",{});var rLe=s(p_);mie=n(rLe,"STRONG",{});var zot=s(mie);$4o=r(zot,"lxmert"),zot.forEach(t),k4o=r(rLe," \u2014 "),AN=n(rLe,"A",{href:!0});var Wot=s(AN);S4o=r(Wot,"LxmertForPreTraining"),Wot.forEach(t),R4o=r(rLe," (LXMERT model)"),rLe.forEach(t),P4o=i(O),__=n(O,"LI",{});var tLe=s(__);fie=n(tLe,"STRONG",{});var Qot=s(fie);B4o=r(Qot,"megatron-bert"),Qot.forEach(t),I4o=r(tLe," \u2014 "),yN=n(tLe,"A",{href:!0});var Hot=s(yN);q4o=r(Hot,"MegatronBertForPreTraining"),Hot.forEach(t),N4o=r(tLe," (MegatronBert model)"),tLe.forEach(t),j4o=i(O),b_=n(O,"LI",{});var aLe=s(b_);gie=n(aLe,"STRONG",{});var Uot=s(gie);D4o=r(Uot,"mobilebert"),Uot.forEach(t),G4o=r(aLe," \u2014 "),LN=n(aLe,"A",{href:!0});var Jot=s(LN);O4o=r(Jot,"MobileBertForPreTraining"),Jot.forEach(t),V4o=r(aLe," (MobileBERT model)"),aLe.forEach(t),X4o=i(O),v_=n(O,"LI",{});var nLe=s(v_);hie=n(nLe,"STRONG",{});var Yot=s(hie);z4o=r(Yot,"mpnet"),Yot.forEach(t),W4o=r(nLe," \u2014 "),xN=n(nLe,"A",{href:!0});var Kot=s(xN);Q4o=r(Kot,"MPNetForMaskedLM"),Kot.forEach(t),H4o=r(nLe," (MPNet model)"),nLe.forEach(t),U4o=i(O),F_=n(O,"LI",{});var sLe=s(F_);uie=n(sLe,"STRONG",{});var Zot=s(uie);J4o=r(Zot,"openai-gpt"),Zot.forEach(t),Y4o=r(sLe," \u2014 "),$N=n(sLe,"A",{href:!0});var ert=s($N);K4o=r(ert,"OpenAIGPTLMHeadModel"),ert.forEach(t),Z4o=r(sLe," (OpenAI GPT model)"),sLe.forEach(t),eEo=i(O),T_=n(O,"LI",{});var lLe=s(T_);pie=n(lLe,"STRONG",{});var ort=s(pie);oEo=r(ort,"retribert"),ort.forEach(t),rEo=r(lLe," \u2014 "),kN=n(lLe,"A",{href:!0});var rrt=s(kN);tEo=r(rrt,"RetriBertModel"),rrt.forEach(t),aEo=r(lLe," (RetriBERT model)"),lLe.forEach(t),nEo=i(O),M_=n(O,"LI",{});var iLe=s(M_);_ie=n(iLe,"STRONG",{});var trt=s(_ie);sEo=r(trt,"roberta"),trt.forEach(t),lEo=r(iLe," \u2014 "),SN=n(iLe,"A",{href:!0});var art=s(SN);iEo=r(art,"RobertaForMaskedLM"),art.forEach(t),dEo=r(iLe," (RoBERTa model)"),iLe.forEach(t),cEo=i(O),E_=n(O,"LI",{});var dLe=s(E_);bie=n(dLe,"STRONG",{});var nrt=s(bie);mEo=r(nrt,"splinter"),nrt.forEach(t),fEo=r(dLe," \u2014 "),RN=n(dLe,"A",{href:!0});var srt=s(RN);gEo=r(srt,"SplinterForPreTraining"),srt.forEach(t),hEo=r(dLe," (Splinter model)"),dLe.forEach(t),uEo=i(O),C_=n(O,"LI",{});var cLe=s(C_);vie=n(cLe,"STRONG",{});var lrt=s(vie);pEo=r(lrt,"squeezebert"),lrt.forEach(t),_Eo=r(cLe," \u2014 "),PN=n(cLe,"A",{href:!0});var irt=s(PN);bEo=r(irt,"SqueezeBertForMaskedLM"),irt.forEach(t),vEo=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),FEo=i(O),w_=n(O,"LI",{});var mLe=s(w_);Fie=n(mLe,"STRONG",{});var drt=s(Fie);TEo=r(drt,"t5"),drt.forEach(t),MEo=r(mLe," \u2014 "),BN=n(mLe,"A",{href:!0});var crt=s(BN);EEo=r(crt,"T5ForConditionalGeneration"),crt.forEach(t),CEo=r(mLe," (T5 model)"),mLe.forEach(t),wEo=i(O),A_=n(O,"LI",{});var fLe=s(A_);Tie=n(fLe,"STRONG",{});var mrt=s(Tie);AEo=r(mrt,"tapas"),mrt.forEach(t),yEo=r(fLe," \u2014 "),IN=n(fLe,"A",{href:!0});var frt=s(IN);LEo=r(frt,"TapasForMaskedLM"),frt.forEach(t),xEo=r(fLe," (TAPAS model)"),fLe.forEach(t),$Eo=i(O),y_=n(O,"LI",{});var gLe=s(y_);Mie=n(gLe,"STRONG",{});var grt=s(Mie);kEo=r(grt,"transfo-xl"),grt.forEach(t),SEo=r(gLe," \u2014 "),qN=n(gLe,"A",{href:!0});var hrt=s(qN);REo=r(hrt,"TransfoXLLMHeadModel"),hrt.forEach(t),PEo=r(gLe," (Transformer-XL model)"),gLe.forEach(t),BEo=i(O),L_=n(O,"LI",{});var hLe=s(L_);Eie=n(hLe,"STRONG",{});var urt=s(Eie);IEo=r(urt,"unispeech"),urt.forEach(t),qEo=r(hLe," \u2014 "),NN=n(hLe,"A",{href:!0});var prt=s(NN);NEo=r(prt,"UniSpeechForPreTraining"),prt.forEach(t),jEo=r(hLe," (UniSpeech model)"),hLe.forEach(t),DEo=i(O),x_=n(O,"LI",{});var uLe=s(x_);Cie=n(uLe,"STRONG",{});var _rt=s(Cie);GEo=r(_rt,"unispeech-sat"),_rt.forEach(t),OEo=r(uLe," \u2014 "),jN=n(uLe,"A",{href:!0});var brt=s(jN);VEo=r(brt,"UniSpeechSatForPreTraining"),brt.forEach(t),XEo=r(uLe," (UniSpeechSat model)"),uLe.forEach(t),zEo=i(O),$_=n(O,"LI",{});var pLe=s($_);wie=n(pLe,"STRONG",{});var vrt=s(wie);WEo=r(vrt,"visual_bert"),vrt.forEach(t),QEo=r(pLe," \u2014 "),DN=n(pLe,"A",{href:!0});var Frt=s(DN);HEo=r(Frt,"VisualBertForPreTraining"),Frt.forEach(t),UEo=r(pLe," (VisualBert model)"),pLe.forEach(t),JEo=i(O),k_=n(O,"LI",{});var _Le=s(k_);Aie=n(_Le,"STRONG",{});var Trt=s(Aie);YEo=r(Trt,"vit_mae"),Trt.forEach(t),KEo=r(_Le," \u2014 "),GN=n(_Le,"A",{href:!0});var Mrt=s(GN);ZEo=r(Mrt,"ViTMAEForPreTraining"),Mrt.forEach(t),eCo=r(_Le," (ViTMAE model)"),_Le.forEach(t),oCo=i(O),S_=n(O,"LI",{});var bLe=s(S_);yie=n(bLe,"STRONG",{});var Ert=s(yie);rCo=r(Ert,"wav2vec2"),Ert.forEach(t),tCo=r(bLe," \u2014 "),ON=n(bLe,"A",{href:!0});var Crt=s(ON);aCo=r(Crt,"Wav2Vec2ForPreTraining"),Crt.forEach(t),nCo=r(bLe," (Wav2Vec2 model)"),bLe.forEach(t),sCo=i(O),R_=n(O,"LI",{});var vLe=s(R_);Lie=n(vLe,"STRONG",{});var wrt=s(Lie);lCo=r(wrt,"wav2vec2-conformer"),wrt.forEach(t),iCo=r(vLe," \u2014 "),VN=n(vLe,"A",{href:!0});var Art=s(VN);dCo=r(Art,"Wav2Vec2ConformerForPreTraining"),Art.forEach(t),cCo=r(vLe," (Wav2Vec2-Conformer model)"),vLe.forEach(t),mCo=i(O),P_=n(O,"LI",{});var FLe=s(P_);xie=n(FLe,"STRONG",{});var yrt=s(xie);fCo=r(yrt,"xlm"),yrt.forEach(t),gCo=r(FLe," \u2014 "),XN=n(FLe,"A",{href:!0});var Lrt=s(XN);hCo=r(Lrt,"XLMWithLMHeadModel"),Lrt.forEach(t),uCo=r(FLe," (XLM model)"),FLe.forEach(t),pCo=i(O),B_=n(O,"LI",{});var TLe=s(B_);$ie=n(TLe,"STRONG",{});var xrt=s($ie);_Co=r(xrt,"xlm-roberta"),xrt.forEach(t),bCo=r(TLe," \u2014 "),zN=n(TLe,"A",{href:!0});var $rt=s(zN);vCo=r($rt,"XLMRobertaForMaskedLM"),$rt.forEach(t),FCo=r(TLe," (XLM-RoBERTa model)"),TLe.forEach(t),TCo=i(O),I_=n(O,"LI",{});var MLe=s(I_);kie=n(MLe,"STRONG",{});var krt=s(kie);MCo=r(krt,"xlm-roberta-xl"),krt.forEach(t),ECo=r(MLe," \u2014 "),WN=n(MLe,"A",{href:!0});var Srt=s(WN);CCo=r(Srt,"XLMRobertaXLForMaskedLM"),Srt.forEach(t),wCo=r(MLe," (XLM-RoBERTa-XL model)"),MLe.forEach(t),ACo=i(O),q_=n(O,"LI",{});var ELe=s(q_);Sie=n(ELe,"STRONG",{});var Rrt=s(Sie);yCo=r(Rrt,"xlnet"),Rrt.forEach(t),LCo=r(ELe," \u2014 "),QN=n(ELe,"A",{href:!0});var Prt=s(QN);xCo=r(Prt,"XLNetLMHeadModel"),Prt.forEach(t),$Co=r(ELe," (XLNet model)"),ELe.forEach(t),O.forEach(t),kCo=i(ra),N_=n(ra,"P",{});var CLe=s(N_);SCo=r(CLe,"The model is set in evaluation mode by default using "),Rie=n(CLe,"CODE",{});var Brt=s(Rie);RCo=r(Brt,"model.eval()"),Brt.forEach(t),PCo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(CLe,"CODE",{});var Irt=s(Pie);BCo=r(Irt,"model.train()"),Irt.forEach(t),CLe.forEach(t),ICo=i(ra),T(j_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),pqe=i(m),$i=n(m,"H2",{class:!0});var Fje=s($i);D_=n(Fje,"A",{id:!0,class:!0,href:!0});var qrt=s(D_);Bie=n(qrt,"SPAN",{});var Nrt=s(Bie);T(Jy.$$.fragment,Nrt),Nrt.forEach(t),qrt.forEach(t),qCo=i(Fje),Iie=n(Fje,"SPAN",{});var jrt=s(Iie);NCo=r(jrt,"AutoModelForCausalLM"),jrt.forEach(t),Fje.forEach(t),_qe=i(m),$o=n(m,"DIV",{class:!0});var Os=s($o);T(Yy.$$.fragment,Os),jCo=i(Os),ki=n(Os,"P",{});var zK=s(ki);DCo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HN=n(zK,"A",{href:!0});var Drt=s(HN);GCo=r(Drt,"from_pretrained()"),Drt.forEach(t),OCo=r(zK," class method or the "),UN=n(zK,"A",{href:!0});var Grt=s(UN);VCo=r(Grt,"from_config()"),Grt.forEach(t),XCo=r(zK,` class
method.`),zK.forEach(t),zCo=i(Os),Ky=n(Os,"P",{});var Tje=s(Ky);WCo=r(Tje,"This class cannot be instantiated directly using "),qie=n(Tje,"CODE",{});var Ort=s(qie);QCo=r(Ort,"__init__()"),Ort.forEach(t),HCo=r(Tje," (throws an error)."),Tje.forEach(t),UCo=i(Os),nt=n(Os,"DIV",{class:!0});var MA=s(nt);T(Zy.$$.fragment,MA),JCo=i(MA),Nie=n(MA,"P",{});var Vrt=s(Nie);YCo=r(Vrt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vrt.forEach(t),KCo=i(MA),Si=n(MA,"P",{});var WK=s(Si);ZCo=r(WK,`Note:
Loading a model from its configuration file does `),jie=n(WK,"STRONG",{});var Xrt=s(jie);e5o=r(Xrt,"not"),Xrt.forEach(t),o5o=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(WK,"A",{href:!0});var zrt=s(JN);r5o=r(zrt,"from_pretrained()"),zrt.forEach(t),t5o=r(WK," to load the model weights."),WK.forEach(t),a5o=i(MA),T(G_.$$.fragment,MA),MA.forEach(t),n5o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(eL.$$.fragment,ta),s5o=i(ta),Die=n(ta,"P",{});var Wrt=s(Die);l5o=r(Wrt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wrt.forEach(t),i5o=i(ta),$a=n(ta,"P",{});var EA=s($a);d5o=r(EA,"The model class to instantiate is selected based on the "),Gie=n(EA,"CODE",{});var Qrt=s(Gie);c5o=r(Qrt,"model_type"),Qrt.forEach(t),m5o=r(EA,` property of the config object (either
passed as an argument or loaded from `),Oie=n(EA,"CODE",{});var Hrt=s(Oie);f5o=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),g5o=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(EA,"CODE",{});var Urt=s(Vie);h5o=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),u5o=r(EA,":"),EA.forEach(t),p5o=i(ta),z=n(ta,"UL",{});var Q=s(z);O_=n(Q,"LI",{});var wLe=s(O_);Xie=n(wLe,"STRONG",{});var Jrt=s(Xie);_5o=r(Jrt,"bart"),Jrt.forEach(t),b5o=r(wLe," \u2014 "),YN=n(wLe,"A",{href:!0});var Yrt=s(YN);v5o=r(Yrt,"BartForCausalLM"),Yrt.forEach(t),F5o=r(wLe," (BART model)"),wLe.forEach(t),T5o=i(Q),V_=n(Q,"LI",{});var ALe=s(V_);zie=n(ALe,"STRONG",{});var Krt=s(zie);M5o=r(Krt,"bert"),Krt.forEach(t),E5o=r(ALe," \u2014 "),KN=n(ALe,"A",{href:!0});var Zrt=s(KN);C5o=r(Zrt,"BertLMHeadModel"),Zrt.forEach(t),w5o=r(ALe," (BERT model)"),ALe.forEach(t),A5o=i(Q),X_=n(Q,"LI",{});var yLe=s(X_);Wie=n(yLe,"STRONG",{});var ett=s(Wie);y5o=r(ett,"bert-generation"),ett.forEach(t),L5o=r(yLe," \u2014 "),ZN=n(yLe,"A",{href:!0});var ott=s(ZN);x5o=r(ott,"BertGenerationDecoder"),ott.forEach(t),$5o=r(yLe," (Bert Generation model)"),yLe.forEach(t),k5o=i(Q),z_=n(Q,"LI",{});var LLe=s(z_);Qie=n(LLe,"STRONG",{});var rtt=s(Qie);S5o=r(rtt,"big_bird"),rtt.forEach(t),R5o=r(LLe," \u2014 "),ej=n(LLe,"A",{href:!0});var ttt=s(ej);P5o=r(ttt,"BigBirdForCausalLM"),ttt.forEach(t),B5o=r(LLe," (BigBird model)"),LLe.forEach(t),I5o=i(Q),W_=n(Q,"LI",{});var xLe=s(W_);Hie=n(xLe,"STRONG",{});var att=s(Hie);q5o=r(att,"bigbird_pegasus"),att.forEach(t),N5o=r(xLe," \u2014 "),oj=n(xLe,"A",{href:!0});var ntt=s(oj);j5o=r(ntt,"BigBirdPegasusForCausalLM"),ntt.forEach(t),D5o=r(xLe," (BigBirdPegasus model)"),xLe.forEach(t),G5o=i(Q),Q_=n(Q,"LI",{});var $Le=s(Q_);Uie=n($Le,"STRONG",{});var stt=s(Uie);O5o=r(stt,"blenderbot"),stt.forEach(t),V5o=r($Le," \u2014 "),rj=n($Le,"A",{href:!0});var ltt=s(rj);X5o=r(ltt,"BlenderbotForCausalLM"),ltt.forEach(t),z5o=r($Le," (Blenderbot model)"),$Le.forEach(t),W5o=i(Q),H_=n(Q,"LI",{});var kLe=s(H_);Jie=n(kLe,"STRONG",{});var itt=s(Jie);Q5o=r(itt,"blenderbot-small"),itt.forEach(t),H5o=r(kLe," \u2014 "),tj=n(kLe,"A",{href:!0});var dtt=s(tj);U5o=r(dtt,"BlenderbotSmallForCausalLM"),dtt.forEach(t),J5o=r(kLe," (BlenderbotSmall model)"),kLe.forEach(t),Y5o=i(Q),U_=n(Q,"LI",{});var SLe=s(U_);Yie=n(SLe,"STRONG",{});var ctt=s(Yie);K5o=r(ctt,"camembert"),ctt.forEach(t),Z5o=r(SLe," \u2014 "),aj=n(SLe,"A",{href:!0});var mtt=s(aj);e3o=r(mtt,"CamembertForCausalLM"),mtt.forEach(t),o3o=r(SLe," (CamemBERT model)"),SLe.forEach(t),r3o=i(Q),J_=n(Q,"LI",{});var RLe=s(J_);Kie=n(RLe,"STRONG",{});var ftt=s(Kie);t3o=r(ftt,"ctrl"),ftt.forEach(t),a3o=r(RLe," \u2014 "),nj=n(RLe,"A",{href:!0});var gtt=s(nj);n3o=r(gtt,"CTRLLMHeadModel"),gtt.forEach(t),s3o=r(RLe," (CTRL model)"),RLe.forEach(t),l3o=i(Q),Y_=n(Q,"LI",{});var PLe=s(Y_);Zie=n(PLe,"STRONG",{});var htt=s(Zie);i3o=r(htt,"data2vec-text"),htt.forEach(t),d3o=r(PLe," \u2014 "),sj=n(PLe,"A",{href:!0});var utt=s(sj);c3o=r(utt,"Data2VecTextForCausalLM"),utt.forEach(t),m3o=r(PLe," (Data2VecText model)"),PLe.forEach(t),f3o=i(Q),K_=n(Q,"LI",{});var BLe=s(K_);ede=n(BLe,"STRONG",{});var ptt=s(ede);g3o=r(ptt,"electra"),ptt.forEach(t),h3o=r(BLe," \u2014 "),lj=n(BLe,"A",{href:!0});var _tt=s(lj);u3o=r(_tt,"ElectraForCausalLM"),_tt.forEach(t),p3o=r(BLe," (ELECTRA model)"),BLe.forEach(t),_3o=i(Q),Z_=n(Q,"LI",{});var ILe=s(Z_);ode=n(ILe,"STRONG",{});var btt=s(ode);b3o=r(btt,"gpt2"),btt.forEach(t),v3o=r(ILe," \u2014 "),ij=n(ILe,"A",{href:!0});var vtt=s(ij);F3o=r(vtt,"GPT2LMHeadModel"),vtt.forEach(t),T3o=r(ILe," (OpenAI GPT-2 model)"),ILe.forEach(t),M3o=i(Q),eb=n(Q,"LI",{});var qLe=s(eb);rde=n(qLe,"STRONG",{});var Ftt=s(rde);E3o=r(Ftt,"gpt_neo"),Ftt.forEach(t),C3o=r(qLe," \u2014 "),dj=n(qLe,"A",{href:!0});var Ttt=s(dj);w3o=r(Ttt,"GPTNeoForCausalLM"),Ttt.forEach(t),A3o=r(qLe," (GPT Neo model)"),qLe.forEach(t),y3o=i(Q),ob=n(Q,"LI",{});var NLe=s(ob);tde=n(NLe,"STRONG",{});var Mtt=s(tde);L3o=r(Mtt,"gptj"),Mtt.forEach(t),x3o=r(NLe," \u2014 "),cj=n(NLe,"A",{href:!0});var Ett=s(cj);$3o=r(Ett,"GPTJForCausalLM"),Ett.forEach(t),k3o=r(NLe," (GPT-J model)"),NLe.forEach(t),S3o=i(Q),rb=n(Q,"LI",{});var jLe=s(rb);ade=n(jLe,"STRONG",{});var Ctt=s(ade);R3o=r(Ctt,"marian"),Ctt.forEach(t),P3o=r(jLe," \u2014 "),mj=n(jLe,"A",{href:!0});var wtt=s(mj);B3o=r(wtt,"MarianForCausalLM"),wtt.forEach(t),I3o=r(jLe," (Marian model)"),jLe.forEach(t),q3o=i(Q),tb=n(Q,"LI",{});var DLe=s(tb);nde=n(DLe,"STRONG",{});var Att=s(nde);N3o=r(Att,"mbart"),Att.forEach(t),j3o=r(DLe," \u2014 "),fj=n(DLe,"A",{href:!0});var ytt=s(fj);D3o=r(ytt,"MBartForCausalLM"),ytt.forEach(t),G3o=r(DLe," (mBART model)"),DLe.forEach(t),O3o=i(Q),ab=n(Q,"LI",{});var GLe=s(ab);sde=n(GLe,"STRONG",{});var Ltt=s(sde);V3o=r(Ltt,"megatron-bert"),Ltt.forEach(t),X3o=r(GLe," \u2014 "),gj=n(GLe,"A",{href:!0});var xtt=s(gj);z3o=r(xtt,"MegatronBertForCausalLM"),xtt.forEach(t),W3o=r(GLe," (MegatronBert model)"),GLe.forEach(t),Q3o=i(Q),nb=n(Q,"LI",{});var OLe=s(nb);lde=n(OLe,"STRONG",{});var $tt=s(lde);H3o=r($tt,"openai-gpt"),$tt.forEach(t),U3o=r(OLe," \u2014 "),hj=n(OLe,"A",{href:!0});var ktt=s(hj);J3o=r(ktt,"OpenAIGPTLMHeadModel"),ktt.forEach(t),Y3o=r(OLe," (OpenAI GPT model)"),OLe.forEach(t),K3o=i(Q),sb=n(Q,"LI",{});var VLe=s(sb);ide=n(VLe,"STRONG",{});var Stt=s(ide);Z3o=r(Stt,"opt"),Stt.forEach(t),ewo=r(VLe," \u2014 "),uj=n(VLe,"A",{href:!0});var Rtt=s(uj);owo=r(Rtt,"OPTForCausalLM"),Rtt.forEach(t),rwo=r(VLe," (OPT model)"),VLe.forEach(t),two=i(Q),lb=n(Q,"LI",{});var XLe=s(lb);dde=n(XLe,"STRONG",{});var Ptt=s(dde);awo=r(Ptt,"pegasus"),Ptt.forEach(t),nwo=r(XLe," \u2014 "),pj=n(XLe,"A",{href:!0});var Btt=s(pj);swo=r(Btt,"PegasusForCausalLM"),Btt.forEach(t),lwo=r(XLe," (Pegasus model)"),XLe.forEach(t),iwo=i(Q),ib=n(Q,"LI",{});var zLe=s(ib);cde=n(zLe,"STRONG",{});var Itt=s(cde);dwo=r(Itt,"plbart"),Itt.forEach(t),cwo=r(zLe," \u2014 "),_j=n(zLe,"A",{href:!0});var qtt=s(_j);mwo=r(qtt,"PLBartForCausalLM"),qtt.forEach(t),fwo=r(zLe," (PLBart model)"),zLe.forEach(t),gwo=i(Q),db=n(Q,"LI",{});var WLe=s(db);mde=n(WLe,"STRONG",{});var Ntt=s(mde);hwo=r(Ntt,"prophetnet"),Ntt.forEach(t),uwo=r(WLe," \u2014 "),bj=n(WLe,"A",{href:!0});var jtt=s(bj);pwo=r(jtt,"ProphetNetForCausalLM"),jtt.forEach(t),_wo=r(WLe," (ProphetNet model)"),WLe.forEach(t),bwo=i(Q),cb=n(Q,"LI",{});var QLe=s(cb);fde=n(QLe,"STRONG",{});var Dtt=s(fde);vwo=r(Dtt,"qdqbert"),Dtt.forEach(t),Fwo=r(QLe," \u2014 "),vj=n(QLe,"A",{href:!0});var Gtt=s(vj);Two=r(Gtt,"QDQBertLMHeadModel"),Gtt.forEach(t),Mwo=r(QLe," (QDQBert model)"),QLe.forEach(t),Ewo=i(Q),mb=n(Q,"LI",{});var HLe=s(mb);gde=n(HLe,"STRONG",{});var Ott=s(gde);Cwo=r(Ott,"reformer"),Ott.forEach(t),wwo=r(HLe," \u2014 "),Fj=n(HLe,"A",{href:!0});var Vtt=s(Fj);Awo=r(Vtt,"ReformerModelWithLMHead"),Vtt.forEach(t),ywo=r(HLe," (Reformer model)"),HLe.forEach(t),Lwo=i(Q),fb=n(Q,"LI",{});var ULe=s(fb);hde=n(ULe,"STRONG",{});var Xtt=s(hde);xwo=r(Xtt,"rembert"),Xtt.forEach(t),$wo=r(ULe," \u2014 "),Tj=n(ULe,"A",{href:!0});var ztt=s(Tj);kwo=r(ztt,"RemBertForCausalLM"),ztt.forEach(t),Swo=r(ULe," (RemBERT model)"),ULe.forEach(t),Rwo=i(Q),gb=n(Q,"LI",{});var JLe=s(gb);ude=n(JLe,"STRONG",{});var Wtt=s(ude);Pwo=r(Wtt,"roberta"),Wtt.forEach(t),Bwo=r(JLe," \u2014 "),Mj=n(JLe,"A",{href:!0});var Qtt=s(Mj);Iwo=r(Qtt,"RobertaForCausalLM"),Qtt.forEach(t),qwo=r(JLe," (RoBERTa model)"),JLe.forEach(t),Nwo=i(Q),hb=n(Q,"LI",{});var YLe=s(hb);pde=n(YLe,"STRONG",{});var Htt=s(pde);jwo=r(Htt,"roformer"),Htt.forEach(t),Dwo=r(YLe," \u2014 "),Ej=n(YLe,"A",{href:!0});var Utt=s(Ej);Gwo=r(Utt,"RoFormerForCausalLM"),Utt.forEach(t),Owo=r(YLe," (RoFormer model)"),YLe.forEach(t),Vwo=i(Q),ub=n(Q,"LI",{});var KLe=s(ub);_de=n(KLe,"STRONG",{});var Jtt=s(_de);Xwo=r(Jtt,"speech_to_text_2"),Jtt.forEach(t),zwo=r(KLe," \u2014 "),Cj=n(KLe,"A",{href:!0});var Ytt=s(Cj);Wwo=r(Ytt,"Speech2Text2ForCausalLM"),Ytt.forEach(t),Qwo=r(KLe," (Speech2Text2 model)"),KLe.forEach(t),Hwo=i(Q),pb=n(Q,"LI",{});var ZLe=s(pb);bde=n(ZLe,"STRONG",{});var Ktt=s(bde);Uwo=r(Ktt,"transfo-xl"),Ktt.forEach(t),Jwo=r(ZLe," \u2014 "),wj=n(ZLe,"A",{href:!0});var Ztt=s(wj);Ywo=r(Ztt,"TransfoXLLMHeadModel"),Ztt.forEach(t),Kwo=r(ZLe," (Transformer-XL model)"),ZLe.forEach(t),Zwo=i(Q),_b=n(Q,"LI",{});var e8e=s(_b);vde=n(e8e,"STRONG",{});var eat=s(vde);e0o=r(eat,"trocr"),eat.forEach(t),o0o=r(e8e," \u2014 "),Aj=n(e8e,"A",{href:!0});var oat=s(Aj);r0o=r(oat,"TrOCRForCausalLM"),oat.forEach(t),t0o=r(e8e," (TrOCR model)"),e8e.forEach(t),a0o=i(Q),bb=n(Q,"LI",{});var o8e=s(bb);Fde=n(o8e,"STRONG",{});var rat=s(Fde);n0o=r(rat,"xglm"),rat.forEach(t),s0o=r(o8e," \u2014 "),yj=n(o8e,"A",{href:!0});var tat=s(yj);l0o=r(tat,"XGLMForCausalLM"),tat.forEach(t),i0o=r(o8e," (XGLM model)"),o8e.forEach(t),d0o=i(Q),vb=n(Q,"LI",{});var r8e=s(vb);Tde=n(r8e,"STRONG",{});var aat=s(Tde);c0o=r(aat,"xlm"),aat.forEach(t),m0o=r(r8e," \u2014 "),Lj=n(r8e,"A",{href:!0});var nat=s(Lj);f0o=r(nat,"XLMWithLMHeadModel"),nat.forEach(t),g0o=r(r8e," (XLM model)"),r8e.forEach(t),h0o=i(Q),Fb=n(Q,"LI",{});var t8e=s(Fb);Mde=n(t8e,"STRONG",{});var sat=s(Mde);u0o=r(sat,"xlm-prophetnet"),sat.forEach(t),p0o=r(t8e," \u2014 "),xj=n(t8e,"A",{href:!0});var lat=s(xj);_0o=r(lat,"XLMProphetNetForCausalLM"),lat.forEach(t),b0o=r(t8e," (XLMProphetNet model)"),t8e.forEach(t),v0o=i(Q),Tb=n(Q,"LI",{});var a8e=s(Tb);Ede=n(a8e,"STRONG",{});var iat=s(Ede);F0o=r(iat,"xlm-roberta"),iat.forEach(t),T0o=r(a8e," \u2014 "),$j=n(a8e,"A",{href:!0});var dat=s($j);M0o=r(dat,"XLMRobertaForCausalLM"),dat.forEach(t),E0o=r(a8e," (XLM-RoBERTa model)"),a8e.forEach(t),C0o=i(Q),Mb=n(Q,"LI",{});var n8e=s(Mb);Cde=n(n8e,"STRONG",{});var cat=s(Cde);w0o=r(cat,"xlm-roberta-xl"),cat.forEach(t),A0o=r(n8e," \u2014 "),kj=n(n8e,"A",{href:!0});var mat=s(kj);y0o=r(mat,"XLMRobertaXLForCausalLM"),mat.forEach(t),L0o=r(n8e," (XLM-RoBERTa-XL model)"),n8e.forEach(t),x0o=i(Q),Eb=n(Q,"LI",{});var s8e=s(Eb);wde=n(s8e,"STRONG",{});var fat=s(wde);$0o=r(fat,"xlnet"),fat.forEach(t),k0o=r(s8e," \u2014 "),Sj=n(s8e,"A",{href:!0});var gat=s(Sj);S0o=r(gat,"XLNetLMHeadModel"),gat.forEach(t),R0o=r(s8e," (XLNet model)"),s8e.forEach(t),Q.forEach(t),P0o=i(ta),Cb=n(ta,"P",{});var l8e=s(Cb);B0o=r(l8e,"The model is set in evaluation mode by default using "),Ade=n(l8e,"CODE",{});var hat=s(Ade);I0o=r(hat,"model.eval()"),hat.forEach(t),q0o=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(l8e,"CODE",{});var uat=s(yde);N0o=r(uat,"model.train()"),uat.forEach(t),l8e.forEach(t),j0o=i(ta),T(wb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),bqe=i(m),Ri=n(m,"H2",{class:!0});var Mje=s(Ri);Ab=n(Mje,"A",{id:!0,class:!0,href:!0});var pat=s(Ab);Lde=n(pat,"SPAN",{});var _at=s(Lde);T(oL.$$.fragment,_at),_at.forEach(t),pat.forEach(t),D0o=i(Mje),xde=n(Mje,"SPAN",{});var bat=s(xde);G0o=r(bat,"AutoModelForMaskedLM"),bat.forEach(t),Mje.forEach(t),vqe=i(m),ko=n(m,"DIV",{class:!0});var Vs=s(ko);T(rL.$$.fragment,Vs),O0o=i(Vs),Pi=n(Vs,"P",{});var QK=s(Pi);V0o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rj=n(QK,"A",{href:!0});var vat=s(Rj);X0o=r(vat,"from_pretrained()"),vat.forEach(t),z0o=r(QK," class method or the "),Pj=n(QK,"A",{href:!0});var Fat=s(Pj);W0o=r(Fat,"from_config()"),Fat.forEach(t),Q0o=r(QK,` class
method.`),QK.forEach(t),H0o=i(Vs),tL=n(Vs,"P",{});var Eje=s(tL);U0o=r(Eje,"This class cannot be instantiated directly using "),$de=n(Eje,"CODE",{});var Tat=s($de);J0o=r(Tat,"__init__()"),Tat.forEach(t),Y0o=r(Eje," (throws an error)."),Eje.forEach(t),K0o=i(Vs),st=n(Vs,"DIV",{class:!0});var CA=s(st);T(aL.$$.fragment,CA),Z0o=i(CA),kde=n(CA,"P",{});var Mat=s(kde);eAo=r(Mat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Mat.forEach(t),oAo=i(CA),Bi=n(CA,"P",{});var HK=s(Bi);rAo=r(HK,`Note:
Loading a model from its configuration file does `),Sde=n(HK,"STRONG",{});var Eat=s(Sde);tAo=r(Eat,"not"),Eat.forEach(t),aAo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=n(HK,"A",{href:!0});var Cat=s(Bj);nAo=r(Cat,"from_pretrained()"),Cat.forEach(t),sAo=r(HK," to load the model weights."),HK.forEach(t),lAo=i(CA),T(yb.$$.fragment,CA),CA.forEach(t),iAo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(nL.$$.fragment,aa),dAo=i(aa),Rde=n(aa,"P",{});var wat=s(Rde);cAo=r(wat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wat.forEach(t),mAo=i(aa),ka=n(aa,"P",{});var wA=s(ka);fAo=r(wA,"The model class to instantiate is selected based on the "),Pde=n(wA,"CODE",{});var Aat=s(Pde);gAo=r(Aat,"model_type"),Aat.forEach(t),hAo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Bde=n(wA,"CODE",{});var yat=s(Bde);uAo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),pAo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(wA,"CODE",{});var Lat=s(Ide);_Ao=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),bAo=r(wA,":"),wA.forEach(t),vAo=i(aa),W=n(aa,"UL",{});var H=s(W);Lb=n(H,"LI",{});var i8e=s(Lb);qde=n(i8e,"STRONG",{});var xat=s(qde);FAo=r(xat,"albert"),xat.forEach(t),TAo=r(i8e," \u2014 "),Ij=n(i8e,"A",{href:!0});var $at=s(Ij);MAo=r($at,"AlbertForMaskedLM"),$at.forEach(t),EAo=r(i8e," (ALBERT model)"),i8e.forEach(t),CAo=i(H),xb=n(H,"LI",{});var d8e=s(xb);Nde=n(d8e,"STRONG",{});var kat=s(Nde);wAo=r(kat,"bart"),kat.forEach(t),AAo=r(d8e," \u2014 "),qj=n(d8e,"A",{href:!0});var Sat=s(qj);yAo=r(Sat,"BartForConditionalGeneration"),Sat.forEach(t),LAo=r(d8e," (BART model)"),d8e.forEach(t),xAo=i(H),$b=n(H,"LI",{});var c8e=s($b);jde=n(c8e,"STRONG",{});var Rat=s(jde);$Ao=r(Rat,"bert"),Rat.forEach(t),kAo=r(c8e," \u2014 "),Nj=n(c8e,"A",{href:!0});var Pat=s(Nj);SAo=r(Pat,"BertForMaskedLM"),Pat.forEach(t),RAo=r(c8e," (BERT model)"),c8e.forEach(t),PAo=i(H),kb=n(H,"LI",{});var m8e=s(kb);Dde=n(m8e,"STRONG",{});var Bat=s(Dde);BAo=r(Bat,"big_bird"),Bat.forEach(t),IAo=r(m8e," \u2014 "),jj=n(m8e,"A",{href:!0});var Iat=s(jj);qAo=r(Iat,"BigBirdForMaskedLM"),Iat.forEach(t),NAo=r(m8e," (BigBird model)"),m8e.forEach(t),jAo=i(H),Sb=n(H,"LI",{});var f8e=s(Sb);Gde=n(f8e,"STRONG",{});var qat=s(Gde);DAo=r(qat,"camembert"),qat.forEach(t),GAo=r(f8e," \u2014 "),Dj=n(f8e,"A",{href:!0});var Nat=s(Dj);OAo=r(Nat,"CamembertForMaskedLM"),Nat.forEach(t),VAo=r(f8e," (CamemBERT model)"),f8e.forEach(t),XAo=i(H),Rb=n(H,"LI",{});var g8e=s(Rb);Ode=n(g8e,"STRONG",{});var jat=s(Ode);zAo=r(jat,"convbert"),jat.forEach(t),WAo=r(g8e," \u2014 "),Gj=n(g8e,"A",{href:!0});var Dat=s(Gj);QAo=r(Dat,"ConvBertForMaskedLM"),Dat.forEach(t),HAo=r(g8e," (ConvBERT model)"),g8e.forEach(t),UAo=i(H),Pb=n(H,"LI",{});var h8e=s(Pb);Vde=n(h8e,"STRONG",{});var Gat=s(Vde);JAo=r(Gat,"data2vec-text"),Gat.forEach(t),YAo=r(h8e," \u2014 "),Oj=n(h8e,"A",{href:!0});var Oat=s(Oj);KAo=r(Oat,"Data2VecTextForMaskedLM"),Oat.forEach(t),ZAo=r(h8e," (Data2VecText model)"),h8e.forEach(t),e6o=i(H),Bb=n(H,"LI",{});var u8e=s(Bb);Xde=n(u8e,"STRONG",{});var Vat=s(Xde);o6o=r(Vat,"deberta"),Vat.forEach(t),r6o=r(u8e," \u2014 "),Vj=n(u8e,"A",{href:!0});var Xat=s(Vj);t6o=r(Xat,"DebertaForMaskedLM"),Xat.forEach(t),a6o=r(u8e," (DeBERTa model)"),u8e.forEach(t),n6o=i(H),Ib=n(H,"LI",{});var p8e=s(Ib);zde=n(p8e,"STRONG",{});var zat=s(zde);s6o=r(zat,"deberta-v2"),zat.forEach(t),l6o=r(p8e," \u2014 "),Xj=n(p8e,"A",{href:!0});var Wat=s(Xj);i6o=r(Wat,"DebertaV2ForMaskedLM"),Wat.forEach(t),d6o=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),c6o=i(H),qb=n(H,"LI",{});var _8e=s(qb);Wde=n(_8e,"STRONG",{});var Qat=s(Wde);m6o=r(Qat,"distilbert"),Qat.forEach(t),f6o=r(_8e," \u2014 "),zj=n(_8e,"A",{href:!0});var Hat=s(zj);g6o=r(Hat,"DistilBertForMaskedLM"),Hat.forEach(t),h6o=r(_8e," (DistilBERT model)"),_8e.forEach(t),u6o=i(H),Nb=n(H,"LI",{});var b8e=s(Nb);Qde=n(b8e,"STRONG",{});var Uat=s(Qde);p6o=r(Uat,"electra"),Uat.forEach(t),_6o=r(b8e," \u2014 "),Wj=n(b8e,"A",{href:!0});var Jat=s(Wj);b6o=r(Jat,"ElectraForMaskedLM"),Jat.forEach(t),v6o=r(b8e," (ELECTRA model)"),b8e.forEach(t),F6o=i(H),jb=n(H,"LI",{});var v8e=s(jb);Hde=n(v8e,"STRONG",{});var Yat=s(Hde);T6o=r(Yat,"flaubert"),Yat.forEach(t),M6o=r(v8e," \u2014 "),Qj=n(v8e,"A",{href:!0});var Kat=s(Qj);E6o=r(Kat,"FlaubertWithLMHeadModel"),Kat.forEach(t),C6o=r(v8e," (FlauBERT model)"),v8e.forEach(t),w6o=i(H),Db=n(H,"LI",{});var F8e=s(Db);Ude=n(F8e,"STRONG",{});var Zat=s(Ude);A6o=r(Zat,"fnet"),Zat.forEach(t),y6o=r(F8e," \u2014 "),Hj=n(F8e,"A",{href:!0});var ent=s(Hj);L6o=r(ent,"FNetForMaskedLM"),ent.forEach(t),x6o=r(F8e," (FNet model)"),F8e.forEach(t),$6o=i(H),Gb=n(H,"LI",{});var T8e=s(Gb);Jde=n(T8e,"STRONG",{});var ont=s(Jde);k6o=r(ont,"funnel"),ont.forEach(t),S6o=r(T8e," \u2014 "),Uj=n(T8e,"A",{href:!0});var rnt=s(Uj);R6o=r(rnt,"FunnelForMaskedLM"),rnt.forEach(t),P6o=r(T8e," (Funnel Transformer model)"),T8e.forEach(t),B6o=i(H),Ob=n(H,"LI",{});var M8e=s(Ob);Yde=n(M8e,"STRONG",{});var tnt=s(Yde);I6o=r(tnt,"ibert"),tnt.forEach(t),q6o=r(M8e," \u2014 "),Jj=n(M8e,"A",{href:!0});var ant=s(Jj);N6o=r(ant,"IBertForMaskedLM"),ant.forEach(t),j6o=r(M8e," (I-BERT model)"),M8e.forEach(t),D6o=i(H),Vb=n(H,"LI",{});var E8e=s(Vb);Kde=n(E8e,"STRONG",{});var nnt=s(Kde);G6o=r(nnt,"layoutlm"),nnt.forEach(t),O6o=r(E8e," \u2014 "),Yj=n(E8e,"A",{href:!0});var snt=s(Yj);V6o=r(snt,"LayoutLMForMaskedLM"),snt.forEach(t),X6o=r(E8e," (LayoutLM model)"),E8e.forEach(t),z6o=i(H),Xb=n(H,"LI",{});var C8e=s(Xb);Zde=n(C8e,"STRONG",{});var lnt=s(Zde);W6o=r(lnt,"longformer"),lnt.forEach(t),Q6o=r(C8e," \u2014 "),Kj=n(C8e,"A",{href:!0});var int=s(Kj);H6o=r(int,"LongformerForMaskedLM"),int.forEach(t),U6o=r(C8e," (Longformer model)"),C8e.forEach(t),J6o=i(H),zb=n(H,"LI",{});var w8e=s(zb);ece=n(w8e,"STRONG",{});var dnt=s(ece);Y6o=r(dnt,"mbart"),dnt.forEach(t),K6o=r(w8e," \u2014 "),Zj=n(w8e,"A",{href:!0});var cnt=s(Zj);Z6o=r(cnt,"MBartForConditionalGeneration"),cnt.forEach(t),eyo=r(w8e," (mBART model)"),w8e.forEach(t),oyo=i(H),Wb=n(H,"LI",{});var A8e=s(Wb);oce=n(A8e,"STRONG",{});var mnt=s(oce);ryo=r(mnt,"megatron-bert"),mnt.forEach(t),tyo=r(A8e," \u2014 "),eD=n(A8e,"A",{href:!0});var fnt=s(eD);ayo=r(fnt,"MegatronBertForMaskedLM"),fnt.forEach(t),nyo=r(A8e," (MegatronBert model)"),A8e.forEach(t),syo=i(H),Qb=n(H,"LI",{});var y8e=s(Qb);rce=n(y8e,"STRONG",{});var gnt=s(rce);lyo=r(gnt,"mobilebert"),gnt.forEach(t),iyo=r(y8e," \u2014 "),oD=n(y8e,"A",{href:!0});var hnt=s(oD);dyo=r(hnt,"MobileBertForMaskedLM"),hnt.forEach(t),cyo=r(y8e," (MobileBERT model)"),y8e.forEach(t),myo=i(H),Hb=n(H,"LI",{});var L8e=s(Hb);tce=n(L8e,"STRONG",{});var unt=s(tce);fyo=r(unt,"mpnet"),unt.forEach(t),gyo=r(L8e," \u2014 "),rD=n(L8e,"A",{href:!0});var pnt=s(rD);hyo=r(pnt,"MPNetForMaskedLM"),pnt.forEach(t),uyo=r(L8e," (MPNet model)"),L8e.forEach(t),pyo=i(H),Ub=n(H,"LI",{});var x8e=s(Ub);ace=n(x8e,"STRONG",{});var _nt=s(ace);_yo=r(_nt,"nystromformer"),_nt.forEach(t),byo=r(x8e," \u2014 "),tD=n(x8e,"A",{href:!0});var bnt=s(tD);vyo=r(bnt,"NystromformerForMaskedLM"),bnt.forEach(t),Fyo=r(x8e," (Nystromformer model)"),x8e.forEach(t),Tyo=i(H),Jb=n(H,"LI",{});var $8e=s(Jb);nce=n($8e,"STRONG",{});var vnt=s(nce);Myo=r(vnt,"perceiver"),vnt.forEach(t),Eyo=r($8e," \u2014 "),aD=n($8e,"A",{href:!0});var Fnt=s(aD);Cyo=r(Fnt,"PerceiverForMaskedLM"),Fnt.forEach(t),wyo=r($8e," (Perceiver model)"),$8e.forEach(t),Ayo=i(H),Yb=n(H,"LI",{});var k8e=s(Yb);sce=n(k8e,"STRONG",{});var Tnt=s(sce);yyo=r(Tnt,"qdqbert"),Tnt.forEach(t),Lyo=r(k8e," \u2014 "),nD=n(k8e,"A",{href:!0});var Mnt=s(nD);xyo=r(Mnt,"QDQBertForMaskedLM"),Mnt.forEach(t),$yo=r(k8e," (QDQBert model)"),k8e.forEach(t),kyo=i(H),Kb=n(H,"LI",{});var S8e=s(Kb);lce=n(S8e,"STRONG",{});var Ent=s(lce);Syo=r(Ent,"reformer"),Ent.forEach(t),Ryo=r(S8e," \u2014 "),sD=n(S8e,"A",{href:!0});var Cnt=s(sD);Pyo=r(Cnt,"ReformerForMaskedLM"),Cnt.forEach(t),Byo=r(S8e," (Reformer model)"),S8e.forEach(t),Iyo=i(H),Zb=n(H,"LI",{});var R8e=s(Zb);ice=n(R8e,"STRONG",{});var wnt=s(ice);qyo=r(wnt,"rembert"),wnt.forEach(t),Nyo=r(R8e," \u2014 "),lD=n(R8e,"A",{href:!0});var Ant=s(lD);jyo=r(Ant,"RemBertForMaskedLM"),Ant.forEach(t),Dyo=r(R8e," (RemBERT model)"),R8e.forEach(t),Gyo=i(H),e2=n(H,"LI",{});var P8e=s(e2);dce=n(P8e,"STRONG",{});var ynt=s(dce);Oyo=r(ynt,"roberta"),ynt.forEach(t),Vyo=r(P8e," \u2014 "),iD=n(P8e,"A",{href:!0});var Lnt=s(iD);Xyo=r(Lnt,"RobertaForMaskedLM"),Lnt.forEach(t),zyo=r(P8e," (RoBERTa model)"),P8e.forEach(t),Wyo=i(H),o2=n(H,"LI",{});var B8e=s(o2);cce=n(B8e,"STRONG",{});var xnt=s(cce);Qyo=r(xnt,"roformer"),xnt.forEach(t),Hyo=r(B8e," \u2014 "),dD=n(B8e,"A",{href:!0});var $nt=s(dD);Uyo=r($nt,"RoFormerForMaskedLM"),$nt.forEach(t),Jyo=r(B8e," (RoFormer model)"),B8e.forEach(t),Yyo=i(H),r2=n(H,"LI",{});var I8e=s(r2);mce=n(I8e,"STRONG",{});var knt=s(mce);Kyo=r(knt,"squeezebert"),knt.forEach(t),Zyo=r(I8e," \u2014 "),cD=n(I8e,"A",{href:!0});var Snt=s(cD);eLo=r(Snt,"SqueezeBertForMaskedLM"),Snt.forEach(t),oLo=r(I8e," (SqueezeBERT model)"),I8e.forEach(t),rLo=i(H),t2=n(H,"LI",{});var q8e=s(t2);fce=n(q8e,"STRONG",{});var Rnt=s(fce);tLo=r(Rnt,"tapas"),Rnt.forEach(t),aLo=r(q8e," \u2014 "),mD=n(q8e,"A",{href:!0});var Pnt=s(mD);nLo=r(Pnt,"TapasForMaskedLM"),Pnt.forEach(t),sLo=r(q8e," (TAPAS model)"),q8e.forEach(t),lLo=i(H),a2=n(H,"LI",{});var N8e=s(a2);gce=n(N8e,"STRONG",{});var Bnt=s(gce);iLo=r(Bnt,"wav2vec2"),Bnt.forEach(t),dLo=r(N8e," \u2014 "),hce=n(N8e,"CODE",{});var Int=s(hce);cLo=r(Int,"Wav2Vec2ForMaskedLM"),Int.forEach(t),mLo=r(N8e," (Wav2Vec2 model)"),N8e.forEach(t),fLo=i(H),n2=n(H,"LI",{});var j8e=s(n2);uce=n(j8e,"STRONG",{});var qnt=s(uce);gLo=r(qnt,"xlm"),qnt.forEach(t),hLo=r(j8e," \u2014 "),fD=n(j8e,"A",{href:!0});var Nnt=s(fD);uLo=r(Nnt,"XLMWithLMHeadModel"),Nnt.forEach(t),pLo=r(j8e," (XLM model)"),j8e.forEach(t),_Lo=i(H),s2=n(H,"LI",{});var D8e=s(s2);pce=n(D8e,"STRONG",{});var jnt=s(pce);bLo=r(jnt,"xlm-roberta"),jnt.forEach(t),vLo=r(D8e," \u2014 "),gD=n(D8e,"A",{href:!0});var Dnt=s(gD);FLo=r(Dnt,"XLMRobertaForMaskedLM"),Dnt.forEach(t),TLo=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),MLo=i(H),l2=n(H,"LI",{});var G8e=s(l2);_ce=n(G8e,"STRONG",{});var Gnt=s(_ce);ELo=r(Gnt,"xlm-roberta-xl"),Gnt.forEach(t),CLo=r(G8e," \u2014 "),hD=n(G8e,"A",{href:!0});var Ont=s(hD);wLo=r(Ont,"XLMRobertaXLForMaskedLM"),Ont.forEach(t),ALo=r(G8e," (XLM-RoBERTa-XL model)"),G8e.forEach(t),yLo=i(H),i2=n(H,"LI",{});var O8e=s(i2);bce=n(O8e,"STRONG",{});var Vnt=s(bce);LLo=r(Vnt,"yoso"),Vnt.forEach(t),xLo=r(O8e," \u2014 "),uD=n(O8e,"A",{href:!0});var Xnt=s(uD);$Lo=r(Xnt,"YosoForMaskedLM"),Xnt.forEach(t),kLo=r(O8e," (YOSO model)"),O8e.forEach(t),H.forEach(t),SLo=i(aa),d2=n(aa,"P",{});var V8e=s(d2);RLo=r(V8e,"The model is set in evaluation mode by default using "),vce=n(V8e,"CODE",{});var znt=s(vce);PLo=r(znt,"model.eval()"),znt.forEach(t),BLo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(V8e,"CODE",{});var Wnt=s(Fce);ILo=r(Wnt,"model.train()"),Wnt.forEach(t),V8e.forEach(t),qLo=i(aa),T(c2.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Fqe=i(m),Ii=n(m,"H2",{class:!0});var Cje=s(Ii);m2=n(Cje,"A",{id:!0,class:!0,href:!0});var Qnt=s(m2);Tce=n(Qnt,"SPAN",{});var Hnt=s(Tce);T(sL.$$.fragment,Hnt),Hnt.forEach(t),Qnt.forEach(t),NLo=i(Cje),Mce=n(Cje,"SPAN",{});var Unt=s(Mce);jLo=r(Unt,"AutoModelForSeq2SeqLM"),Unt.forEach(t),Cje.forEach(t),Tqe=i(m),So=n(m,"DIV",{class:!0});var Xs=s(So);T(lL.$$.fragment,Xs),DLo=i(Xs),qi=n(Xs,"P",{});var UK=s(qi);GLo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pD=n(UK,"A",{href:!0});var Jnt=s(pD);OLo=r(Jnt,"from_pretrained()"),Jnt.forEach(t),VLo=r(UK," class method or the "),_D=n(UK,"A",{href:!0});var Ynt=s(_D);XLo=r(Ynt,"from_config()"),Ynt.forEach(t),zLo=r(UK,` class
method.`),UK.forEach(t),WLo=i(Xs),iL=n(Xs,"P",{});var wje=s(iL);QLo=r(wje,"This class cannot be instantiated directly using "),Ece=n(wje,"CODE",{});var Knt=s(Ece);HLo=r(Knt,"__init__()"),Knt.forEach(t),ULo=r(wje," (throws an error)."),wje.forEach(t),JLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var AA=s(lt);T(dL.$$.fragment,AA),YLo=i(AA),Cce=n(AA,"P",{});var Znt=s(Cce);KLo=r(Znt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Znt.forEach(t),ZLo=i(AA),Ni=n(AA,"P",{});var JK=s(Ni);e8o=r(JK,`Note:
Loading a model from its configuration file does `),wce=n(JK,"STRONG",{});var est=s(wce);o8o=r(est,"not"),est.forEach(t),r8o=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(JK,"A",{href:!0});var ost=s(bD);t8o=r(ost,"from_pretrained()"),ost.forEach(t),a8o=r(JK," to load the model weights."),JK.forEach(t),n8o=i(AA),T(f2.$$.fragment,AA),AA.forEach(t),s8o=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(cL.$$.fragment,na),l8o=i(na),Ace=n(na,"P",{});var rst=s(Ace);i8o=r(rst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rst.forEach(t),d8o=i(na),Sa=n(na,"P",{});var yA=s(Sa);c8o=r(yA,"The model class to instantiate is selected based on the "),yce=n(yA,"CODE",{});var tst=s(yce);m8o=r(tst,"model_type"),tst.forEach(t),f8o=r(yA,` property of the config object (either
passed as an argument or loaded from `),Lce=n(yA,"CODE",{});var ast=s(Lce);g8o=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),h8o=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(yA,"CODE",{});var nst=s(xce);u8o=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),p8o=r(yA,":"),yA.forEach(t),_8o=i(na),pe=n(na,"UL",{});var ve=s(pe);g2=n(ve,"LI",{});var X8e=s(g2);$ce=n(X8e,"STRONG",{});var sst=s($ce);b8o=r(sst,"bart"),sst.forEach(t),v8o=r(X8e," \u2014 "),vD=n(X8e,"A",{href:!0});var lst=s(vD);F8o=r(lst,"BartForConditionalGeneration"),lst.forEach(t),T8o=r(X8e," (BART model)"),X8e.forEach(t),M8o=i(ve),h2=n(ve,"LI",{});var z8e=s(h2);kce=n(z8e,"STRONG",{});var ist=s(kce);E8o=r(ist,"bigbird_pegasus"),ist.forEach(t),C8o=r(z8e," \u2014 "),FD=n(z8e,"A",{href:!0});var dst=s(FD);w8o=r(dst,"BigBirdPegasusForConditionalGeneration"),dst.forEach(t),A8o=r(z8e," (BigBirdPegasus model)"),z8e.forEach(t),y8o=i(ve),u2=n(ve,"LI",{});var W8e=s(u2);Sce=n(W8e,"STRONG",{});var cst=s(Sce);L8o=r(cst,"blenderbot"),cst.forEach(t),x8o=r(W8e," \u2014 "),TD=n(W8e,"A",{href:!0});var mst=s(TD);$8o=r(mst,"BlenderbotForConditionalGeneration"),mst.forEach(t),k8o=r(W8e," (Blenderbot model)"),W8e.forEach(t),S8o=i(ve),p2=n(ve,"LI",{});var Q8e=s(p2);Rce=n(Q8e,"STRONG",{});var fst=s(Rce);R8o=r(fst,"blenderbot-small"),fst.forEach(t),P8o=r(Q8e," \u2014 "),MD=n(Q8e,"A",{href:!0});var gst=s(MD);B8o=r(gst,"BlenderbotSmallForConditionalGeneration"),gst.forEach(t),I8o=r(Q8e," (BlenderbotSmall model)"),Q8e.forEach(t),q8o=i(ve),_2=n(ve,"LI",{});var H8e=s(_2);Pce=n(H8e,"STRONG",{});var hst=s(Pce);N8o=r(hst,"encoder-decoder"),hst.forEach(t),j8o=r(H8e," \u2014 "),ED=n(H8e,"A",{href:!0});var ust=s(ED);D8o=r(ust,"EncoderDecoderModel"),ust.forEach(t),G8o=r(H8e," (Encoder decoder model)"),H8e.forEach(t),O8o=i(ve),b2=n(ve,"LI",{});var U8e=s(b2);Bce=n(U8e,"STRONG",{});var pst=s(Bce);V8o=r(pst,"fsmt"),pst.forEach(t),X8o=r(U8e," \u2014 "),CD=n(U8e,"A",{href:!0});var _st=s(CD);z8o=r(_st,"FSMTForConditionalGeneration"),_st.forEach(t),W8o=r(U8e," (FairSeq Machine-Translation model)"),U8e.forEach(t),Q8o=i(ve),v2=n(ve,"LI",{});var J8e=s(v2);Ice=n(J8e,"STRONG",{});var bst=s(Ice);H8o=r(bst,"led"),bst.forEach(t),U8o=r(J8e," \u2014 "),wD=n(J8e,"A",{href:!0});var vst=s(wD);J8o=r(vst,"LEDForConditionalGeneration"),vst.forEach(t),Y8o=r(J8e," (LED model)"),J8e.forEach(t),K8o=i(ve),F2=n(ve,"LI",{});var Y8e=s(F2);qce=n(Y8e,"STRONG",{});var Fst=s(qce);Z8o=r(Fst,"m2m_100"),Fst.forEach(t),e7o=r(Y8e," \u2014 "),AD=n(Y8e,"A",{href:!0});var Tst=s(AD);o7o=r(Tst,"M2M100ForConditionalGeneration"),Tst.forEach(t),r7o=r(Y8e," (M2M100 model)"),Y8e.forEach(t),t7o=i(ve),T2=n(ve,"LI",{});var K8e=s(T2);Nce=n(K8e,"STRONG",{});var Mst=s(Nce);a7o=r(Mst,"marian"),Mst.forEach(t),n7o=r(K8e," \u2014 "),yD=n(K8e,"A",{href:!0});var Est=s(yD);s7o=r(Est,"MarianMTModel"),Est.forEach(t),l7o=r(K8e," (Marian model)"),K8e.forEach(t),i7o=i(ve),M2=n(ve,"LI",{});var Z8e=s(M2);jce=n(Z8e,"STRONG",{});var Cst=s(jce);d7o=r(Cst,"mbart"),Cst.forEach(t),c7o=r(Z8e," \u2014 "),LD=n(Z8e,"A",{href:!0});var wst=s(LD);m7o=r(wst,"MBartForConditionalGeneration"),wst.forEach(t),f7o=r(Z8e," (mBART model)"),Z8e.forEach(t),g7o=i(ve),E2=n(ve,"LI",{});var e7e=s(E2);Dce=n(e7e,"STRONG",{});var Ast=s(Dce);h7o=r(Ast,"mt5"),Ast.forEach(t),u7o=r(e7e," \u2014 "),xD=n(e7e,"A",{href:!0});var yst=s(xD);p7o=r(yst,"MT5ForConditionalGeneration"),yst.forEach(t),_7o=r(e7e," (mT5 model)"),e7e.forEach(t),b7o=i(ve),C2=n(ve,"LI",{});var o7e=s(C2);Gce=n(o7e,"STRONG",{});var Lst=s(Gce);v7o=r(Lst,"pegasus"),Lst.forEach(t),F7o=r(o7e," \u2014 "),$D=n(o7e,"A",{href:!0});var xst=s($D);T7o=r(xst,"PegasusForConditionalGeneration"),xst.forEach(t),M7o=r(o7e," (Pegasus model)"),o7e.forEach(t),E7o=i(ve),w2=n(ve,"LI",{});var r7e=s(w2);Oce=n(r7e,"STRONG",{});var $st=s(Oce);C7o=r($st,"plbart"),$st.forEach(t),w7o=r(r7e," \u2014 "),kD=n(r7e,"A",{href:!0});var kst=s(kD);A7o=r(kst,"PLBartForConditionalGeneration"),kst.forEach(t),y7o=r(r7e," (PLBart model)"),r7e.forEach(t),L7o=i(ve),A2=n(ve,"LI",{});var t7e=s(A2);Vce=n(t7e,"STRONG",{});var Sst=s(Vce);x7o=r(Sst,"prophetnet"),Sst.forEach(t),$7o=r(t7e," \u2014 "),SD=n(t7e,"A",{href:!0});var Rst=s(SD);k7o=r(Rst,"ProphetNetForConditionalGeneration"),Rst.forEach(t),S7o=r(t7e," (ProphetNet model)"),t7e.forEach(t),R7o=i(ve),y2=n(ve,"LI",{});var a7e=s(y2);Xce=n(a7e,"STRONG",{});var Pst=s(Xce);P7o=r(Pst,"t5"),Pst.forEach(t),B7o=r(a7e," \u2014 "),RD=n(a7e,"A",{href:!0});var Bst=s(RD);I7o=r(Bst,"T5ForConditionalGeneration"),Bst.forEach(t),q7o=r(a7e," (T5 model)"),a7e.forEach(t),N7o=i(ve),L2=n(ve,"LI",{});var n7e=s(L2);zce=n(n7e,"STRONG",{});var Ist=s(zce);j7o=r(Ist,"xlm-prophetnet"),Ist.forEach(t),D7o=r(n7e," \u2014 "),PD=n(n7e,"A",{href:!0});var qst=s(PD);G7o=r(qst,"XLMProphetNetForConditionalGeneration"),qst.forEach(t),O7o=r(n7e," (XLMProphetNet model)"),n7e.forEach(t),ve.forEach(t),V7o=i(na),x2=n(na,"P",{});var s7e=s(x2);X7o=r(s7e,"The model is set in evaluation mode by default using "),Wce=n(s7e,"CODE",{});var Nst=s(Wce);z7o=r(Nst,"model.eval()"),Nst.forEach(t),W7o=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(s7e,"CODE",{});var jst=s(Qce);Q7o=r(jst,"model.train()"),jst.forEach(t),s7e.forEach(t),H7o=i(na),T($2.$$.fragment,na),na.forEach(t),Xs.forEach(t),Mqe=i(m),ji=n(m,"H2",{class:!0});var Aje=s(ji);k2=n(Aje,"A",{id:!0,class:!0,href:!0});var Dst=s(k2);Hce=n(Dst,"SPAN",{});var Gst=s(Hce);T(mL.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),U7o=i(Aje),Uce=n(Aje,"SPAN",{});var Ost=s(Uce);J7o=r(Ost,"AutoModelForSequenceClassification"),Ost.forEach(t),Aje.forEach(t),Eqe=i(m),Ro=n(m,"DIV",{class:!0});var zs=s(Ro);T(fL.$$.fragment,zs),Y7o=i(zs),Di=n(zs,"P",{});var YK=s(Di);K7o=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BD=n(YK,"A",{href:!0});var Vst=s(BD);Z7o=r(Vst,"from_pretrained()"),Vst.forEach(t),e9o=r(YK," class method or the "),ID=n(YK,"A",{href:!0});var Xst=s(ID);o9o=r(Xst,"from_config()"),Xst.forEach(t),r9o=r(YK,` class
method.`),YK.forEach(t),t9o=i(zs),gL=n(zs,"P",{});var yje=s(gL);a9o=r(yje,"This class cannot be instantiated directly using "),Jce=n(yje,"CODE",{});var zst=s(Jce);n9o=r(zst,"__init__()"),zst.forEach(t),s9o=r(yje," (throws an error)."),yje.forEach(t),l9o=i(zs),it=n(zs,"DIV",{class:!0});var LA=s(it);T(hL.$$.fragment,LA),i9o=i(LA),Yce=n(LA,"P",{});var Wst=s(Yce);d9o=r(Wst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wst.forEach(t),c9o=i(LA),Gi=n(LA,"P",{});var KK=s(Gi);m9o=r(KK,`Note:
Loading a model from its configuration file does `),Kce=n(KK,"STRONG",{});var Qst=s(Kce);f9o=r(Qst,"not"),Qst.forEach(t),g9o=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(KK,"A",{href:!0});var Hst=s(qD);h9o=r(Hst,"from_pretrained()"),Hst.forEach(t),u9o=r(KK," to load the model weights."),KK.forEach(t),p9o=i(LA),T(S2.$$.fragment,LA),LA.forEach(t),_9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(uL.$$.fragment,sa),b9o=i(sa),Zce=n(sa,"P",{});var Ust=s(Zce);v9o=r(Ust,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ust.forEach(t),F9o=i(sa),Ra=n(sa,"P",{});var xA=s(Ra);T9o=r(xA,"The model class to instantiate is selected based on the "),eme=n(xA,"CODE",{});var Jst=s(eme);M9o=r(Jst,"model_type"),Jst.forEach(t),E9o=r(xA,` property of the config object (either
passed as an argument or loaded from `),ome=n(xA,"CODE",{});var Yst=s(ome);C9o=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),w9o=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(xA,"CODE",{});var Kst=s(rme);A9o=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),y9o=r(xA,":"),xA.forEach(t),L9o=i(sa),q=n(sa,"UL",{});var j=s(q);R2=n(j,"LI",{});var l7e=s(R2);tme=n(l7e,"STRONG",{});var Zst=s(tme);x9o=r(Zst,"albert"),Zst.forEach(t),$9o=r(l7e," \u2014 "),ND=n(l7e,"A",{href:!0});var elt=s(ND);k9o=r(elt,"AlbertForSequenceClassification"),elt.forEach(t),S9o=r(l7e," (ALBERT model)"),l7e.forEach(t),R9o=i(j),P2=n(j,"LI",{});var i7e=s(P2);ame=n(i7e,"STRONG",{});var olt=s(ame);P9o=r(olt,"bart"),olt.forEach(t),B9o=r(i7e," \u2014 "),jD=n(i7e,"A",{href:!0});var rlt=s(jD);I9o=r(rlt,"BartForSequenceClassification"),rlt.forEach(t),q9o=r(i7e," (BART model)"),i7e.forEach(t),N9o=i(j),B2=n(j,"LI",{});var d7e=s(B2);nme=n(d7e,"STRONG",{});var tlt=s(nme);j9o=r(tlt,"bert"),tlt.forEach(t),D9o=r(d7e," \u2014 "),DD=n(d7e,"A",{href:!0});var alt=s(DD);G9o=r(alt,"BertForSequenceClassification"),alt.forEach(t),O9o=r(d7e," (BERT model)"),d7e.forEach(t),V9o=i(j),I2=n(j,"LI",{});var c7e=s(I2);sme=n(c7e,"STRONG",{});var nlt=s(sme);X9o=r(nlt,"big_bird"),nlt.forEach(t),z9o=r(c7e," \u2014 "),GD=n(c7e,"A",{href:!0});var slt=s(GD);W9o=r(slt,"BigBirdForSequenceClassification"),slt.forEach(t),Q9o=r(c7e," (BigBird model)"),c7e.forEach(t),H9o=i(j),q2=n(j,"LI",{});var m7e=s(q2);lme=n(m7e,"STRONG",{});var llt=s(lme);U9o=r(llt,"bigbird_pegasus"),llt.forEach(t),J9o=r(m7e," \u2014 "),OD=n(m7e,"A",{href:!0});var ilt=s(OD);Y9o=r(ilt,"BigBirdPegasusForSequenceClassification"),ilt.forEach(t),K9o=r(m7e," (BigBirdPegasus model)"),m7e.forEach(t),Z9o=i(j),N2=n(j,"LI",{});var f7e=s(N2);ime=n(f7e,"STRONG",{});var dlt=s(ime);exo=r(dlt,"camembert"),dlt.forEach(t),oxo=r(f7e," \u2014 "),VD=n(f7e,"A",{href:!0});var clt=s(VD);rxo=r(clt,"CamembertForSequenceClassification"),clt.forEach(t),txo=r(f7e," (CamemBERT model)"),f7e.forEach(t),axo=i(j),j2=n(j,"LI",{});var g7e=s(j2);dme=n(g7e,"STRONG",{});var mlt=s(dme);nxo=r(mlt,"canine"),mlt.forEach(t),sxo=r(g7e," \u2014 "),XD=n(g7e,"A",{href:!0});var flt=s(XD);lxo=r(flt,"CanineForSequenceClassification"),flt.forEach(t),ixo=r(g7e," (Canine model)"),g7e.forEach(t),dxo=i(j),D2=n(j,"LI",{});var h7e=s(D2);cme=n(h7e,"STRONG",{});var glt=s(cme);cxo=r(glt,"convbert"),glt.forEach(t),mxo=r(h7e," \u2014 "),zD=n(h7e,"A",{href:!0});var hlt=s(zD);fxo=r(hlt,"ConvBertForSequenceClassification"),hlt.forEach(t),gxo=r(h7e," (ConvBERT model)"),h7e.forEach(t),hxo=i(j),G2=n(j,"LI",{});var u7e=s(G2);mme=n(u7e,"STRONG",{});var ult=s(mme);uxo=r(ult,"ctrl"),ult.forEach(t),pxo=r(u7e," \u2014 "),WD=n(u7e,"A",{href:!0});var plt=s(WD);_xo=r(plt,"CTRLForSequenceClassification"),plt.forEach(t),bxo=r(u7e," (CTRL model)"),u7e.forEach(t),vxo=i(j),O2=n(j,"LI",{});var p7e=s(O2);fme=n(p7e,"STRONG",{});var _lt=s(fme);Fxo=r(_lt,"data2vec-text"),_lt.forEach(t),Txo=r(p7e," \u2014 "),QD=n(p7e,"A",{href:!0});var blt=s(QD);Mxo=r(blt,"Data2VecTextForSequenceClassification"),blt.forEach(t),Exo=r(p7e," (Data2VecText model)"),p7e.forEach(t),Cxo=i(j),V2=n(j,"LI",{});var _7e=s(V2);gme=n(_7e,"STRONG",{});var vlt=s(gme);wxo=r(vlt,"deberta"),vlt.forEach(t),Axo=r(_7e," \u2014 "),HD=n(_7e,"A",{href:!0});var Flt=s(HD);yxo=r(Flt,"DebertaForSequenceClassification"),Flt.forEach(t),Lxo=r(_7e," (DeBERTa model)"),_7e.forEach(t),xxo=i(j),X2=n(j,"LI",{});var b7e=s(X2);hme=n(b7e,"STRONG",{});var Tlt=s(hme);$xo=r(Tlt,"deberta-v2"),Tlt.forEach(t),kxo=r(b7e," \u2014 "),UD=n(b7e,"A",{href:!0});var Mlt=s(UD);Sxo=r(Mlt,"DebertaV2ForSequenceClassification"),Mlt.forEach(t),Rxo=r(b7e," (DeBERTa-v2 model)"),b7e.forEach(t),Pxo=i(j),z2=n(j,"LI",{});var v7e=s(z2);ume=n(v7e,"STRONG",{});var Elt=s(ume);Bxo=r(Elt,"distilbert"),Elt.forEach(t),Ixo=r(v7e," \u2014 "),JD=n(v7e,"A",{href:!0});var Clt=s(JD);qxo=r(Clt,"DistilBertForSequenceClassification"),Clt.forEach(t),Nxo=r(v7e," (DistilBERT model)"),v7e.forEach(t),jxo=i(j),W2=n(j,"LI",{});var F7e=s(W2);pme=n(F7e,"STRONG",{});var wlt=s(pme);Dxo=r(wlt,"electra"),wlt.forEach(t),Gxo=r(F7e," \u2014 "),YD=n(F7e,"A",{href:!0});var Alt=s(YD);Oxo=r(Alt,"ElectraForSequenceClassification"),Alt.forEach(t),Vxo=r(F7e," (ELECTRA model)"),F7e.forEach(t),Xxo=i(j),Q2=n(j,"LI",{});var T7e=s(Q2);_me=n(T7e,"STRONG",{});var ylt=s(_me);zxo=r(ylt,"flaubert"),ylt.forEach(t),Wxo=r(T7e," \u2014 "),KD=n(T7e,"A",{href:!0});var Llt=s(KD);Qxo=r(Llt,"FlaubertForSequenceClassification"),Llt.forEach(t),Hxo=r(T7e," (FlauBERT model)"),T7e.forEach(t),Uxo=i(j),H2=n(j,"LI",{});var M7e=s(H2);bme=n(M7e,"STRONG",{});var xlt=s(bme);Jxo=r(xlt,"fnet"),xlt.forEach(t),Yxo=r(M7e," \u2014 "),ZD=n(M7e,"A",{href:!0});var $lt=s(ZD);Kxo=r($lt,"FNetForSequenceClassification"),$lt.forEach(t),Zxo=r(M7e," (FNet model)"),M7e.forEach(t),e$o=i(j),U2=n(j,"LI",{});var E7e=s(U2);vme=n(E7e,"STRONG",{});var klt=s(vme);o$o=r(klt,"funnel"),klt.forEach(t),r$o=r(E7e," \u2014 "),eG=n(E7e,"A",{href:!0});var Slt=s(eG);t$o=r(Slt,"FunnelForSequenceClassification"),Slt.forEach(t),a$o=r(E7e," (Funnel Transformer model)"),E7e.forEach(t),n$o=i(j),J2=n(j,"LI",{});var C7e=s(J2);Fme=n(C7e,"STRONG",{});var Rlt=s(Fme);s$o=r(Rlt,"gpt2"),Rlt.forEach(t),l$o=r(C7e," \u2014 "),oG=n(C7e,"A",{href:!0});var Plt=s(oG);i$o=r(Plt,"GPT2ForSequenceClassification"),Plt.forEach(t),d$o=r(C7e," (OpenAI GPT-2 model)"),C7e.forEach(t),c$o=i(j),Y2=n(j,"LI",{});var w7e=s(Y2);Tme=n(w7e,"STRONG",{});var Blt=s(Tme);m$o=r(Blt,"gpt_neo"),Blt.forEach(t),f$o=r(w7e," \u2014 "),rG=n(w7e,"A",{href:!0});var Ilt=s(rG);g$o=r(Ilt,"GPTNeoForSequenceClassification"),Ilt.forEach(t),h$o=r(w7e," (GPT Neo model)"),w7e.forEach(t),u$o=i(j),K2=n(j,"LI",{});var A7e=s(K2);Mme=n(A7e,"STRONG",{});var qlt=s(Mme);p$o=r(qlt,"gptj"),qlt.forEach(t),_$o=r(A7e," \u2014 "),tG=n(A7e,"A",{href:!0});var Nlt=s(tG);b$o=r(Nlt,"GPTJForSequenceClassification"),Nlt.forEach(t),v$o=r(A7e," (GPT-J model)"),A7e.forEach(t),F$o=i(j),Z2=n(j,"LI",{});var y7e=s(Z2);Eme=n(y7e,"STRONG",{});var jlt=s(Eme);T$o=r(jlt,"ibert"),jlt.forEach(t),M$o=r(y7e," \u2014 "),aG=n(y7e,"A",{href:!0});var Dlt=s(aG);E$o=r(Dlt,"IBertForSequenceClassification"),Dlt.forEach(t),C$o=r(y7e," (I-BERT model)"),y7e.forEach(t),w$o=i(j),ev=n(j,"LI",{});var L7e=s(ev);Cme=n(L7e,"STRONG",{});var Glt=s(Cme);A$o=r(Glt,"layoutlm"),Glt.forEach(t),y$o=r(L7e," \u2014 "),nG=n(L7e,"A",{href:!0});var Olt=s(nG);L$o=r(Olt,"LayoutLMForSequenceClassification"),Olt.forEach(t),x$o=r(L7e," (LayoutLM model)"),L7e.forEach(t),$$o=i(j),ov=n(j,"LI",{});var x7e=s(ov);wme=n(x7e,"STRONG",{});var Vlt=s(wme);k$o=r(Vlt,"layoutlmv2"),Vlt.forEach(t),S$o=r(x7e," \u2014 "),sG=n(x7e,"A",{href:!0});var Xlt=s(sG);R$o=r(Xlt,"LayoutLMv2ForSequenceClassification"),Xlt.forEach(t),P$o=r(x7e," (LayoutLMv2 model)"),x7e.forEach(t),B$o=i(j),rv=n(j,"LI",{});var $7e=s(rv);Ame=n($7e,"STRONG",{});var zlt=s(Ame);I$o=r(zlt,"led"),zlt.forEach(t),q$o=r($7e," \u2014 "),lG=n($7e,"A",{href:!0});var Wlt=s(lG);N$o=r(Wlt,"LEDForSequenceClassification"),Wlt.forEach(t),j$o=r($7e," (LED model)"),$7e.forEach(t),D$o=i(j),tv=n(j,"LI",{});var k7e=s(tv);yme=n(k7e,"STRONG",{});var Qlt=s(yme);G$o=r(Qlt,"longformer"),Qlt.forEach(t),O$o=r(k7e," \u2014 "),iG=n(k7e,"A",{href:!0});var Hlt=s(iG);V$o=r(Hlt,"LongformerForSequenceClassification"),Hlt.forEach(t),X$o=r(k7e," (Longformer model)"),k7e.forEach(t),z$o=i(j),av=n(j,"LI",{});var S7e=s(av);Lme=n(S7e,"STRONG",{});var Ult=s(Lme);W$o=r(Ult,"mbart"),Ult.forEach(t),Q$o=r(S7e," \u2014 "),dG=n(S7e,"A",{href:!0});var Jlt=s(dG);H$o=r(Jlt,"MBartForSequenceClassification"),Jlt.forEach(t),U$o=r(S7e," (mBART model)"),S7e.forEach(t),J$o=i(j),nv=n(j,"LI",{});var R7e=s(nv);xme=n(R7e,"STRONG",{});var Ylt=s(xme);Y$o=r(Ylt,"megatron-bert"),Ylt.forEach(t),K$o=r(R7e," \u2014 "),cG=n(R7e,"A",{href:!0});var Klt=s(cG);Z$o=r(Klt,"MegatronBertForSequenceClassification"),Klt.forEach(t),eko=r(R7e," (MegatronBert model)"),R7e.forEach(t),oko=i(j),sv=n(j,"LI",{});var P7e=s(sv);$me=n(P7e,"STRONG",{});var Zlt=s($me);rko=r(Zlt,"mobilebert"),Zlt.forEach(t),tko=r(P7e," \u2014 "),mG=n(P7e,"A",{href:!0});var eit=s(mG);ako=r(eit,"MobileBertForSequenceClassification"),eit.forEach(t),nko=r(P7e," (MobileBERT model)"),P7e.forEach(t),sko=i(j),lv=n(j,"LI",{});var B7e=s(lv);kme=n(B7e,"STRONG",{});var oit=s(kme);lko=r(oit,"mpnet"),oit.forEach(t),iko=r(B7e," \u2014 "),fG=n(B7e,"A",{href:!0});var rit=s(fG);dko=r(rit,"MPNetForSequenceClassification"),rit.forEach(t),cko=r(B7e," (MPNet model)"),B7e.forEach(t),mko=i(j),iv=n(j,"LI",{});var I7e=s(iv);Sme=n(I7e,"STRONG",{});var tit=s(Sme);fko=r(tit,"nystromformer"),tit.forEach(t),gko=r(I7e," \u2014 "),gG=n(I7e,"A",{href:!0});var ait=s(gG);hko=r(ait,"NystromformerForSequenceClassification"),ait.forEach(t),uko=r(I7e," (Nystromformer model)"),I7e.forEach(t),pko=i(j),dv=n(j,"LI",{});var q7e=s(dv);Rme=n(q7e,"STRONG",{});var nit=s(Rme);_ko=r(nit,"openai-gpt"),nit.forEach(t),bko=r(q7e," \u2014 "),hG=n(q7e,"A",{href:!0});var sit=s(hG);vko=r(sit,"OpenAIGPTForSequenceClassification"),sit.forEach(t),Fko=r(q7e," (OpenAI GPT model)"),q7e.forEach(t),Tko=i(j),cv=n(j,"LI",{});var N7e=s(cv);Pme=n(N7e,"STRONG",{});var lit=s(Pme);Mko=r(lit,"perceiver"),lit.forEach(t),Eko=r(N7e," \u2014 "),uG=n(N7e,"A",{href:!0});var iit=s(uG);Cko=r(iit,"PerceiverForSequenceClassification"),iit.forEach(t),wko=r(N7e," (Perceiver model)"),N7e.forEach(t),Ako=i(j),mv=n(j,"LI",{});var j7e=s(mv);Bme=n(j7e,"STRONG",{});var dit=s(Bme);yko=r(dit,"plbart"),dit.forEach(t),Lko=r(j7e," \u2014 "),pG=n(j7e,"A",{href:!0});var cit=s(pG);xko=r(cit,"PLBartForSequenceClassification"),cit.forEach(t),$ko=r(j7e," (PLBart model)"),j7e.forEach(t),kko=i(j),fv=n(j,"LI",{});var D7e=s(fv);Ime=n(D7e,"STRONG",{});var mit=s(Ime);Sko=r(mit,"qdqbert"),mit.forEach(t),Rko=r(D7e," \u2014 "),_G=n(D7e,"A",{href:!0});var fit=s(_G);Pko=r(fit,"QDQBertForSequenceClassification"),fit.forEach(t),Bko=r(D7e," (QDQBert model)"),D7e.forEach(t),Iko=i(j),gv=n(j,"LI",{});var G7e=s(gv);qme=n(G7e,"STRONG",{});var git=s(qme);qko=r(git,"reformer"),git.forEach(t),Nko=r(G7e," \u2014 "),bG=n(G7e,"A",{href:!0});var hit=s(bG);jko=r(hit,"ReformerForSequenceClassification"),hit.forEach(t),Dko=r(G7e," (Reformer model)"),G7e.forEach(t),Gko=i(j),hv=n(j,"LI",{});var O7e=s(hv);Nme=n(O7e,"STRONG",{});var uit=s(Nme);Oko=r(uit,"rembert"),uit.forEach(t),Vko=r(O7e," \u2014 "),vG=n(O7e,"A",{href:!0});var pit=s(vG);Xko=r(pit,"RemBertForSequenceClassification"),pit.forEach(t),zko=r(O7e," (RemBERT model)"),O7e.forEach(t),Wko=i(j),uv=n(j,"LI",{});var V7e=s(uv);jme=n(V7e,"STRONG",{});var _it=s(jme);Qko=r(_it,"roberta"),_it.forEach(t),Hko=r(V7e," \u2014 "),FG=n(V7e,"A",{href:!0});var bit=s(FG);Uko=r(bit,"RobertaForSequenceClassification"),bit.forEach(t),Jko=r(V7e," (RoBERTa model)"),V7e.forEach(t),Yko=i(j),pv=n(j,"LI",{});var X7e=s(pv);Dme=n(X7e,"STRONG",{});var vit=s(Dme);Kko=r(vit,"roformer"),vit.forEach(t),Zko=r(X7e," \u2014 "),TG=n(X7e,"A",{href:!0});var Fit=s(TG);eSo=r(Fit,"RoFormerForSequenceClassification"),Fit.forEach(t),oSo=r(X7e," (RoFormer model)"),X7e.forEach(t),rSo=i(j),_v=n(j,"LI",{});var z7e=s(_v);Gme=n(z7e,"STRONG",{});var Tit=s(Gme);tSo=r(Tit,"squeezebert"),Tit.forEach(t),aSo=r(z7e," \u2014 "),MG=n(z7e,"A",{href:!0});var Mit=s(MG);nSo=r(Mit,"SqueezeBertForSequenceClassification"),Mit.forEach(t),sSo=r(z7e," (SqueezeBERT model)"),z7e.forEach(t),lSo=i(j),bv=n(j,"LI",{});var W7e=s(bv);Ome=n(W7e,"STRONG",{});var Eit=s(Ome);iSo=r(Eit,"tapas"),Eit.forEach(t),dSo=r(W7e," \u2014 "),EG=n(W7e,"A",{href:!0});var Cit=s(EG);cSo=r(Cit,"TapasForSequenceClassification"),Cit.forEach(t),mSo=r(W7e," (TAPAS model)"),W7e.forEach(t),fSo=i(j),vv=n(j,"LI",{});var Q7e=s(vv);Vme=n(Q7e,"STRONG",{});var wit=s(Vme);gSo=r(wit,"transfo-xl"),wit.forEach(t),hSo=r(Q7e," \u2014 "),CG=n(Q7e,"A",{href:!0});var Ait=s(CG);uSo=r(Ait,"TransfoXLForSequenceClassification"),Ait.forEach(t),pSo=r(Q7e," (Transformer-XL model)"),Q7e.forEach(t),_So=i(j),Fv=n(j,"LI",{});var H7e=s(Fv);Xme=n(H7e,"STRONG",{});var yit=s(Xme);bSo=r(yit,"xlm"),yit.forEach(t),vSo=r(H7e," \u2014 "),wG=n(H7e,"A",{href:!0});var Lit=s(wG);FSo=r(Lit,"XLMForSequenceClassification"),Lit.forEach(t),TSo=r(H7e," (XLM model)"),H7e.forEach(t),MSo=i(j),Tv=n(j,"LI",{});var U7e=s(Tv);zme=n(U7e,"STRONG",{});var xit=s(zme);ESo=r(xit,"xlm-roberta"),xit.forEach(t),CSo=r(U7e," \u2014 "),AG=n(U7e,"A",{href:!0});var $it=s(AG);wSo=r($it,"XLMRobertaForSequenceClassification"),$it.forEach(t),ASo=r(U7e," (XLM-RoBERTa model)"),U7e.forEach(t),ySo=i(j),Mv=n(j,"LI",{});var J7e=s(Mv);Wme=n(J7e,"STRONG",{});var kit=s(Wme);LSo=r(kit,"xlm-roberta-xl"),kit.forEach(t),xSo=r(J7e," \u2014 "),yG=n(J7e,"A",{href:!0});var Sit=s(yG);$So=r(Sit,"XLMRobertaXLForSequenceClassification"),Sit.forEach(t),kSo=r(J7e," (XLM-RoBERTa-XL model)"),J7e.forEach(t),SSo=i(j),Ev=n(j,"LI",{});var Y7e=s(Ev);Qme=n(Y7e,"STRONG",{});var Rit=s(Qme);RSo=r(Rit,"xlnet"),Rit.forEach(t),PSo=r(Y7e," \u2014 "),LG=n(Y7e,"A",{href:!0});var Pit=s(LG);BSo=r(Pit,"XLNetForSequenceClassification"),Pit.forEach(t),ISo=r(Y7e," (XLNet model)"),Y7e.forEach(t),qSo=i(j),Cv=n(j,"LI",{});var K7e=s(Cv);Hme=n(K7e,"STRONG",{});var Bit=s(Hme);NSo=r(Bit,"yoso"),Bit.forEach(t),jSo=r(K7e," \u2014 "),xG=n(K7e,"A",{href:!0});var Iit=s(xG);DSo=r(Iit,"YosoForSequenceClassification"),Iit.forEach(t),GSo=r(K7e," (YOSO model)"),K7e.forEach(t),j.forEach(t),OSo=i(sa),wv=n(sa,"P",{});var Z7e=s(wv);VSo=r(Z7e,"The model is set in evaluation mode by default using "),Ume=n(Z7e,"CODE",{});var qit=s(Ume);XSo=r(qit,"model.eval()"),qit.forEach(t),zSo=r(Z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(Z7e,"CODE",{});var Nit=s(Jme);WSo=r(Nit,"model.train()"),Nit.forEach(t),Z7e.forEach(t),QSo=i(sa),T(Av.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Cqe=i(m),Oi=n(m,"H2",{class:!0});var Lje=s(Oi);yv=n(Lje,"A",{id:!0,class:!0,href:!0});var jit=s(yv);Yme=n(jit,"SPAN",{});var Dit=s(Yme);T(pL.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),HSo=i(Lje),Kme=n(Lje,"SPAN",{});var Git=s(Kme);USo=r(Git,"AutoModelForMultipleChoice"),Git.forEach(t),Lje.forEach(t),wqe=i(m),Po=n(m,"DIV",{class:!0});var Ws=s(Po);T(_L.$$.fragment,Ws),JSo=i(Ws),Vi=n(Ws,"P",{});var ZK=s(Vi);YSo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$G=n(ZK,"A",{href:!0});var Oit=s($G);KSo=r(Oit,"from_pretrained()"),Oit.forEach(t),ZSo=r(ZK," class method or the "),kG=n(ZK,"A",{href:!0});var Vit=s(kG);eRo=r(Vit,"from_config()"),Vit.forEach(t),oRo=r(ZK,` class
method.`),ZK.forEach(t),rRo=i(Ws),bL=n(Ws,"P",{});var xje=s(bL);tRo=r(xje,"This class cannot be instantiated directly using "),Zme=n(xje,"CODE",{});var Xit=s(Zme);aRo=r(Xit,"__init__()"),Xit.forEach(t),nRo=r(xje," (throws an error)."),xje.forEach(t),sRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var $A=s(dt);T(vL.$$.fragment,$A),lRo=i($A),efe=n($A,"P",{});var zit=s(efe);iRo=r(zit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zit.forEach(t),dRo=i($A),Xi=n($A,"P",{});var eZ=s(Xi);cRo=r(eZ,`Note:
Loading a model from its configuration file does `),ofe=n(eZ,"STRONG",{});var Wit=s(ofe);mRo=r(Wit,"not"),Wit.forEach(t),fRo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(eZ,"A",{href:!0});var Qit=s(SG);gRo=r(Qit,"from_pretrained()"),Qit.forEach(t),hRo=r(eZ," to load the model weights."),eZ.forEach(t),uRo=i($A),T(Lv.$$.fragment,$A),$A.forEach(t),pRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(FL.$$.fragment,la),_Ro=i(la),rfe=n(la,"P",{});var Hit=s(rfe);bRo=r(Hit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hit.forEach(t),vRo=i(la),Pa=n(la,"P",{});var kA=s(Pa);FRo=r(kA,"The model class to instantiate is selected based on the "),tfe=n(kA,"CODE",{});var Uit=s(tfe);TRo=r(Uit,"model_type"),Uit.forEach(t),MRo=r(kA,` property of the config object (either
passed as an argument or loaded from `),afe=n(kA,"CODE",{});var Jit=s(afe);ERo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),CRo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n(kA,"CODE",{});var Yit=s(nfe);wRo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),ARo=r(kA,":"),kA.forEach(t),yRo=i(la),Y=n(la,"UL",{});var K=s(Y);xv=n(K,"LI",{});var e9e=s(xv);sfe=n(e9e,"STRONG",{});var Kit=s(sfe);LRo=r(Kit,"albert"),Kit.forEach(t),xRo=r(e9e," \u2014 "),RG=n(e9e,"A",{href:!0});var Zit=s(RG);$Ro=r(Zit,"AlbertForMultipleChoice"),Zit.forEach(t),kRo=r(e9e," (ALBERT model)"),e9e.forEach(t),SRo=i(K),$v=n(K,"LI",{});var o9e=s($v);lfe=n(o9e,"STRONG",{});var edt=s(lfe);RRo=r(edt,"bert"),edt.forEach(t),PRo=r(o9e," \u2014 "),PG=n(o9e,"A",{href:!0});var odt=s(PG);BRo=r(odt,"BertForMultipleChoice"),odt.forEach(t),IRo=r(o9e," (BERT model)"),o9e.forEach(t),qRo=i(K),kv=n(K,"LI",{});var r9e=s(kv);ife=n(r9e,"STRONG",{});var rdt=s(ife);NRo=r(rdt,"big_bird"),rdt.forEach(t),jRo=r(r9e," \u2014 "),BG=n(r9e,"A",{href:!0});var tdt=s(BG);DRo=r(tdt,"BigBirdForMultipleChoice"),tdt.forEach(t),GRo=r(r9e," (BigBird model)"),r9e.forEach(t),ORo=i(K),Sv=n(K,"LI",{});var t9e=s(Sv);dfe=n(t9e,"STRONG",{});var adt=s(dfe);VRo=r(adt,"camembert"),adt.forEach(t),XRo=r(t9e," \u2014 "),IG=n(t9e,"A",{href:!0});var ndt=s(IG);zRo=r(ndt,"CamembertForMultipleChoice"),ndt.forEach(t),WRo=r(t9e," (CamemBERT model)"),t9e.forEach(t),QRo=i(K),Rv=n(K,"LI",{});var a9e=s(Rv);cfe=n(a9e,"STRONG",{});var sdt=s(cfe);HRo=r(sdt,"canine"),sdt.forEach(t),URo=r(a9e," \u2014 "),qG=n(a9e,"A",{href:!0});var ldt=s(qG);JRo=r(ldt,"CanineForMultipleChoice"),ldt.forEach(t),YRo=r(a9e," (Canine model)"),a9e.forEach(t),KRo=i(K),Pv=n(K,"LI",{});var n9e=s(Pv);mfe=n(n9e,"STRONG",{});var idt=s(mfe);ZRo=r(idt,"convbert"),idt.forEach(t),ePo=r(n9e," \u2014 "),NG=n(n9e,"A",{href:!0});var ddt=s(NG);oPo=r(ddt,"ConvBertForMultipleChoice"),ddt.forEach(t),rPo=r(n9e," (ConvBERT model)"),n9e.forEach(t),tPo=i(K),Bv=n(K,"LI",{});var s9e=s(Bv);ffe=n(s9e,"STRONG",{});var cdt=s(ffe);aPo=r(cdt,"data2vec-text"),cdt.forEach(t),nPo=r(s9e," \u2014 "),jG=n(s9e,"A",{href:!0});var mdt=s(jG);sPo=r(mdt,"Data2VecTextForMultipleChoice"),mdt.forEach(t),lPo=r(s9e," (Data2VecText model)"),s9e.forEach(t),iPo=i(K),Iv=n(K,"LI",{});var l9e=s(Iv);gfe=n(l9e,"STRONG",{});var fdt=s(gfe);dPo=r(fdt,"deberta-v2"),fdt.forEach(t),cPo=r(l9e," \u2014 "),DG=n(l9e,"A",{href:!0});var gdt=s(DG);mPo=r(gdt,"DebertaV2ForMultipleChoice"),gdt.forEach(t),fPo=r(l9e," (DeBERTa-v2 model)"),l9e.forEach(t),gPo=i(K),qv=n(K,"LI",{});var i9e=s(qv);hfe=n(i9e,"STRONG",{});var hdt=s(hfe);hPo=r(hdt,"distilbert"),hdt.forEach(t),uPo=r(i9e," \u2014 "),GG=n(i9e,"A",{href:!0});var udt=s(GG);pPo=r(udt,"DistilBertForMultipleChoice"),udt.forEach(t),_Po=r(i9e," (DistilBERT model)"),i9e.forEach(t),bPo=i(K),Nv=n(K,"LI",{});var d9e=s(Nv);ufe=n(d9e,"STRONG",{});var pdt=s(ufe);vPo=r(pdt,"electra"),pdt.forEach(t),FPo=r(d9e," \u2014 "),OG=n(d9e,"A",{href:!0});var _dt=s(OG);TPo=r(_dt,"ElectraForMultipleChoice"),_dt.forEach(t),MPo=r(d9e," (ELECTRA model)"),d9e.forEach(t),EPo=i(K),jv=n(K,"LI",{});var c9e=s(jv);pfe=n(c9e,"STRONG",{});var bdt=s(pfe);CPo=r(bdt,"flaubert"),bdt.forEach(t),wPo=r(c9e," \u2014 "),VG=n(c9e,"A",{href:!0});var vdt=s(VG);APo=r(vdt,"FlaubertForMultipleChoice"),vdt.forEach(t),yPo=r(c9e," (FlauBERT model)"),c9e.forEach(t),LPo=i(K),Dv=n(K,"LI",{});var m9e=s(Dv);_fe=n(m9e,"STRONG",{});var Fdt=s(_fe);xPo=r(Fdt,"fnet"),Fdt.forEach(t),$Po=r(m9e," \u2014 "),XG=n(m9e,"A",{href:!0});var Tdt=s(XG);kPo=r(Tdt,"FNetForMultipleChoice"),Tdt.forEach(t),SPo=r(m9e," (FNet model)"),m9e.forEach(t),RPo=i(K),Gv=n(K,"LI",{});var f9e=s(Gv);bfe=n(f9e,"STRONG",{});var Mdt=s(bfe);PPo=r(Mdt,"funnel"),Mdt.forEach(t),BPo=r(f9e," \u2014 "),zG=n(f9e,"A",{href:!0});var Edt=s(zG);IPo=r(Edt,"FunnelForMultipleChoice"),Edt.forEach(t),qPo=r(f9e," (Funnel Transformer model)"),f9e.forEach(t),NPo=i(K),Ov=n(K,"LI",{});var g9e=s(Ov);vfe=n(g9e,"STRONG",{});var Cdt=s(vfe);jPo=r(Cdt,"ibert"),Cdt.forEach(t),DPo=r(g9e," \u2014 "),WG=n(g9e,"A",{href:!0});var wdt=s(WG);GPo=r(wdt,"IBertForMultipleChoice"),wdt.forEach(t),OPo=r(g9e," (I-BERT model)"),g9e.forEach(t),VPo=i(K),Vv=n(K,"LI",{});var h9e=s(Vv);Ffe=n(h9e,"STRONG",{});var Adt=s(Ffe);XPo=r(Adt,"longformer"),Adt.forEach(t),zPo=r(h9e," \u2014 "),QG=n(h9e,"A",{href:!0});var ydt=s(QG);WPo=r(ydt,"LongformerForMultipleChoice"),ydt.forEach(t),QPo=r(h9e," (Longformer model)"),h9e.forEach(t),HPo=i(K),Xv=n(K,"LI",{});var u9e=s(Xv);Tfe=n(u9e,"STRONG",{});var Ldt=s(Tfe);UPo=r(Ldt,"megatron-bert"),Ldt.forEach(t),JPo=r(u9e," \u2014 "),HG=n(u9e,"A",{href:!0});var xdt=s(HG);YPo=r(xdt,"MegatronBertForMultipleChoice"),xdt.forEach(t),KPo=r(u9e," (MegatronBert model)"),u9e.forEach(t),ZPo=i(K),zv=n(K,"LI",{});var p9e=s(zv);Mfe=n(p9e,"STRONG",{});var $dt=s(Mfe);eBo=r($dt,"mobilebert"),$dt.forEach(t),oBo=r(p9e," \u2014 "),UG=n(p9e,"A",{href:!0});var kdt=s(UG);rBo=r(kdt,"MobileBertForMultipleChoice"),kdt.forEach(t),tBo=r(p9e," (MobileBERT model)"),p9e.forEach(t),aBo=i(K),Wv=n(K,"LI",{});var _9e=s(Wv);Efe=n(_9e,"STRONG",{});var Sdt=s(Efe);nBo=r(Sdt,"mpnet"),Sdt.forEach(t),sBo=r(_9e," \u2014 "),JG=n(_9e,"A",{href:!0});var Rdt=s(JG);lBo=r(Rdt,"MPNetForMultipleChoice"),Rdt.forEach(t),iBo=r(_9e," (MPNet model)"),_9e.forEach(t),dBo=i(K),Qv=n(K,"LI",{});var b9e=s(Qv);Cfe=n(b9e,"STRONG",{});var Pdt=s(Cfe);cBo=r(Pdt,"nystromformer"),Pdt.forEach(t),mBo=r(b9e," \u2014 "),YG=n(b9e,"A",{href:!0});var Bdt=s(YG);fBo=r(Bdt,"NystromformerForMultipleChoice"),Bdt.forEach(t),gBo=r(b9e," (Nystromformer model)"),b9e.forEach(t),hBo=i(K),Hv=n(K,"LI",{});var v9e=s(Hv);wfe=n(v9e,"STRONG",{});var Idt=s(wfe);uBo=r(Idt,"qdqbert"),Idt.forEach(t),pBo=r(v9e," \u2014 "),KG=n(v9e,"A",{href:!0});var qdt=s(KG);_Bo=r(qdt,"QDQBertForMultipleChoice"),qdt.forEach(t),bBo=r(v9e," (QDQBert model)"),v9e.forEach(t),vBo=i(K),Uv=n(K,"LI",{});var F9e=s(Uv);Afe=n(F9e,"STRONG",{});var Ndt=s(Afe);FBo=r(Ndt,"rembert"),Ndt.forEach(t),TBo=r(F9e," \u2014 "),ZG=n(F9e,"A",{href:!0});var jdt=s(ZG);MBo=r(jdt,"RemBertForMultipleChoice"),jdt.forEach(t),EBo=r(F9e," (RemBERT model)"),F9e.forEach(t),CBo=i(K),Jv=n(K,"LI",{});var T9e=s(Jv);yfe=n(T9e,"STRONG",{});var Ddt=s(yfe);wBo=r(Ddt,"roberta"),Ddt.forEach(t),ABo=r(T9e," \u2014 "),eO=n(T9e,"A",{href:!0});var Gdt=s(eO);yBo=r(Gdt,"RobertaForMultipleChoice"),Gdt.forEach(t),LBo=r(T9e," (RoBERTa model)"),T9e.forEach(t),xBo=i(K),Yv=n(K,"LI",{});var M9e=s(Yv);Lfe=n(M9e,"STRONG",{});var Odt=s(Lfe);$Bo=r(Odt,"roformer"),Odt.forEach(t),kBo=r(M9e," \u2014 "),oO=n(M9e,"A",{href:!0});var Vdt=s(oO);SBo=r(Vdt,"RoFormerForMultipleChoice"),Vdt.forEach(t),RBo=r(M9e," (RoFormer model)"),M9e.forEach(t),PBo=i(K),Kv=n(K,"LI",{});var E9e=s(Kv);xfe=n(E9e,"STRONG",{});var Xdt=s(xfe);BBo=r(Xdt,"squeezebert"),Xdt.forEach(t),IBo=r(E9e," \u2014 "),rO=n(E9e,"A",{href:!0});var zdt=s(rO);qBo=r(zdt,"SqueezeBertForMultipleChoice"),zdt.forEach(t),NBo=r(E9e," (SqueezeBERT model)"),E9e.forEach(t),jBo=i(K),Zv=n(K,"LI",{});var C9e=s(Zv);$fe=n(C9e,"STRONG",{});var Wdt=s($fe);DBo=r(Wdt,"xlm"),Wdt.forEach(t),GBo=r(C9e," \u2014 "),tO=n(C9e,"A",{href:!0});var Qdt=s(tO);OBo=r(Qdt,"XLMForMultipleChoice"),Qdt.forEach(t),VBo=r(C9e," (XLM model)"),C9e.forEach(t),XBo=i(K),eF=n(K,"LI",{});var w9e=s(eF);kfe=n(w9e,"STRONG",{});var Hdt=s(kfe);zBo=r(Hdt,"xlm-roberta"),Hdt.forEach(t),WBo=r(w9e," \u2014 "),aO=n(w9e,"A",{href:!0});var Udt=s(aO);QBo=r(Udt,"XLMRobertaForMultipleChoice"),Udt.forEach(t),HBo=r(w9e," (XLM-RoBERTa model)"),w9e.forEach(t),UBo=i(K),oF=n(K,"LI",{});var A9e=s(oF);Sfe=n(A9e,"STRONG",{});var Jdt=s(Sfe);JBo=r(Jdt,"xlm-roberta-xl"),Jdt.forEach(t),YBo=r(A9e," \u2014 "),nO=n(A9e,"A",{href:!0});var Ydt=s(nO);KBo=r(Ydt,"XLMRobertaXLForMultipleChoice"),Ydt.forEach(t),ZBo=r(A9e," (XLM-RoBERTa-XL model)"),A9e.forEach(t),eIo=i(K),rF=n(K,"LI",{});var y9e=s(rF);Rfe=n(y9e,"STRONG",{});var Kdt=s(Rfe);oIo=r(Kdt,"xlnet"),Kdt.forEach(t),rIo=r(y9e," \u2014 "),sO=n(y9e,"A",{href:!0});var Zdt=s(sO);tIo=r(Zdt,"XLNetForMultipleChoice"),Zdt.forEach(t),aIo=r(y9e," (XLNet model)"),y9e.forEach(t),nIo=i(K),tF=n(K,"LI",{});var L9e=s(tF);Pfe=n(L9e,"STRONG",{});var ect=s(Pfe);sIo=r(ect,"yoso"),ect.forEach(t),lIo=r(L9e," \u2014 "),lO=n(L9e,"A",{href:!0});var oct=s(lO);iIo=r(oct,"YosoForMultipleChoice"),oct.forEach(t),dIo=r(L9e," (YOSO model)"),L9e.forEach(t),K.forEach(t),cIo=i(la),aF=n(la,"P",{});var x9e=s(aF);mIo=r(x9e,"The model is set in evaluation mode by default using "),Bfe=n(x9e,"CODE",{});var rct=s(Bfe);fIo=r(rct,"model.eval()"),rct.forEach(t),gIo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(x9e,"CODE",{});var tct=s(Ife);hIo=r(tct,"model.train()"),tct.forEach(t),x9e.forEach(t),uIo=i(la),T(nF.$$.fragment,la),la.forEach(t),Ws.forEach(t),Aqe=i(m),zi=n(m,"H2",{class:!0});var $je=s(zi);sF=n($je,"A",{id:!0,class:!0,href:!0});var act=s(sF);qfe=n(act,"SPAN",{});var nct=s(qfe);T(TL.$$.fragment,nct),nct.forEach(t),act.forEach(t),pIo=i($je),Nfe=n($je,"SPAN",{});var sct=s(Nfe);_Io=r(sct,"AutoModelForNextSentencePrediction"),sct.forEach(t),$je.forEach(t),yqe=i(m),Bo=n(m,"DIV",{class:!0});var Qs=s(Bo);T(ML.$$.fragment,Qs),bIo=i(Qs),Wi=n(Qs,"P",{});var oZ=s(Wi);vIo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iO=n(oZ,"A",{href:!0});var lct=s(iO);FIo=r(lct,"from_pretrained()"),lct.forEach(t),TIo=r(oZ," class method or the "),dO=n(oZ,"A",{href:!0});var ict=s(dO);MIo=r(ict,"from_config()"),ict.forEach(t),EIo=r(oZ,` class
method.`),oZ.forEach(t),CIo=i(Qs),EL=n(Qs,"P",{});var kje=s(EL);wIo=r(kje,"This class cannot be instantiated directly using "),jfe=n(kje,"CODE",{});var dct=s(jfe);AIo=r(dct,"__init__()"),dct.forEach(t),yIo=r(kje," (throws an error)."),kje.forEach(t),LIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var SA=s(ct);T(CL.$$.fragment,SA),xIo=i(SA),Dfe=n(SA,"P",{});var cct=s(Dfe);$Io=r(cct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cct.forEach(t),kIo=i(SA),Qi=n(SA,"P",{});var rZ=s(Qi);SIo=r(rZ,`Note:
Loading a model from its configuration file does `),Gfe=n(rZ,"STRONG",{});var mct=s(Gfe);RIo=r(mct,"not"),mct.forEach(t),PIo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(rZ,"A",{href:!0});var fct=s(cO);BIo=r(fct,"from_pretrained()"),fct.forEach(t),IIo=r(rZ," to load the model weights."),rZ.forEach(t),qIo=i(SA),T(lF.$$.fragment,SA),SA.forEach(t),NIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(wL.$$.fragment,ia),jIo=i(ia),Ofe=n(ia,"P",{});var gct=s(Ofe);DIo=r(gct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gct.forEach(t),GIo=i(ia),Ba=n(ia,"P",{});var RA=s(Ba);OIo=r(RA,"The model class to instantiate is selected based on the "),Vfe=n(RA,"CODE",{});var hct=s(Vfe);VIo=r(hct,"model_type"),hct.forEach(t),XIo=r(RA,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(RA,"CODE",{});var uct=s(Xfe);zIo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),WIo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(RA,"CODE",{});var pct=s(zfe);QIo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),HIo=r(RA,":"),RA.forEach(t),UIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);iF=n(Hs,"LI",{});var $9e=s(iF);Wfe=n($9e,"STRONG",{});var _ct=s(Wfe);JIo=r(_ct,"bert"),_ct.forEach(t),YIo=r($9e," \u2014 "),mO=n($9e,"A",{href:!0});var bct=s(mO);KIo=r(bct,"BertForNextSentencePrediction"),bct.forEach(t),ZIo=r($9e," (BERT model)"),$9e.forEach(t),eqo=i(Hs),dF=n(Hs,"LI",{});var k9e=s(dF);Qfe=n(k9e,"STRONG",{});var vct=s(Qfe);oqo=r(vct,"fnet"),vct.forEach(t),rqo=r(k9e," \u2014 "),fO=n(k9e,"A",{href:!0});var Fct=s(fO);tqo=r(Fct,"FNetForNextSentencePrediction"),Fct.forEach(t),aqo=r(k9e," (FNet model)"),k9e.forEach(t),nqo=i(Hs),cF=n(Hs,"LI",{});var S9e=s(cF);Hfe=n(S9e,"STRONG",{});var Tct=s(Hfe);sqo=r(Tct,"megatron-bert"),Tct.forEach(t),lqo=r(S9e," \u2014 "),gO=n(S9e,"A",{href:!0});var Mct=s(gO);iqo=r(Mct,"MegatronBertForNextSentencePrediction"),Mct.forEach(t),dqo=r(S9e," (MegatronBert model)"),S9e.forEach(t),cqo=i(Hs),mF=n(Hs,"LI",{});var R9e=s(mF);Ufe=n(R9e,"STRONG",{});var Ect=s(Ufe);mqo=r(Ect,"mobilebert"),Ect.forEach(t),fqo=r(R9e," \u2014 "),hO=n(R9e,"A",{href:!0});var Cct=s(hO);gqo=r(Cct,"MobileBertForNextSentencePrediction"),Cct.forEach(t),hqo=r(R9e," (MobileBERT model)"),R9e.forEach(t),uqo=i(Hs),fF=n(Hs,"LI",{});var P9e=s(fF);Jfe=n(P9e,"STRONG",{});var wct=s(Jfe);pqo=r(wct,"qdqbert"),wct.forEach(t),_qo=r(P9e," \u2014 "),uO=n(P9e,"A",{href:!0});var Act=s(uO);bqo=r(Act,"QDQBertForNextSentencePrediction"),Act.forEach(t),vqo=r(P9e," (QDQBert model)"),P9e.forEach(t),Hs.forEach(t),Fqo=i(ia),gF=n(ia,"P",{});var B9e=s(gF);Tqo=r(B9e,"The model is set in evaluation mode by default using "),Yfe=n(B9e,"CODE",{});var yct=s(Yfe);Mqo=r(yct,"model.eval()"),yct.forEach(t),Eqo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(B9e,"CODE",{});var Lct=s(Kfe);Cqo=r(Lct,"model.train()"),Lct.forEach(t),B9e.forEach(t),wqo=i(ia),T(hF.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Lqe=i(m),Hi=n(m,"H2",{class:!0});var Sje=s(Hi);uF=n(Sje,"A",{id:!0,class:!0,href:!0});var xct=s(uF);Zfe=n(xct,"SPAN",{});var $ct=s(Zfe);T(AL.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),Aqo=i(Sje),ege=n(Sje,"SPAN",{});var kct=s(ege);yqo=r(kct,"AutoModelForTokenClassification"),kct.forEach(t),Sje.forEach(t),xqe=i(m),Io=n(m,"DIV",{class:!0});var Us=s(Io);T(yL.$$.fragment,Us),Lqo=i(Us),Ui=n(Us,"P",{});var tZ=s(Ui);xqo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pO=n(tZ,"A",{href:!0});var Sct=s(pO);$qo=r(Sct,"from_pretrained()"),Sct.forEach(t),kqo=r(tZ," class method or the "),_O=n(tZ,"A",{href:!0});var Rct=s(_O);Sqo=r(Rct,"from_config()"),Rct.forEach(t),Rqo=r(tZ,` class
method.`),tZ.forEach(t),Pqo=i(Us),LL=n(Us,"P",{});var Rje=s(LL);Bqo=r(Rje,"This class cannot be instantiated directly using "),oge=n(Rje,"CODE",{});var Pct=s(oge);Iqo=r(Pct,"__init__()"),Pct.forEach(t),qqo=r(Rje," (throws an error)."),Rje.forEach(t),Nqo=i(Us),mt=n(Us,"DIV",{class:!0});var PA=s(mt);T(xL.$$.fragment,PA),jqo=i(PA),rge=n(PA,"P",{});var Bct=s(rge);Dqo=r(Bct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bct.forEach(t),Gqo=i(PA),Ji=n(PA,"P",{});var aZ=s(Ji);Oqo=r(aZ,`Note:
Loading a model from its configuration file does `),tge=n(aZ,"STRONG",{});var Ict=s(tge);Vqo=r(Ict,"not"),Ict.forEach(t),Xqo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(aZ,"A",{href:!0});var qct=s(bO);zqo=r(qct,"from_pretrained()"),qct.forEach(t),Wqo=r(aZ," to load the model weights."),aZ.forEach(t),Qqo=i(PA),T(pF.$$.fragment,PA),PA.forEach(t),Hqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T($L.$$.fragment,da),Uqo=i(da),age=n(da,"P",{});var Nct=s(age);Jqo=r(Nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nct.forEach(t),Yqo=i(da),Ia=n(da,"P",{});var BA=s(Ia);Kqo=r(BA,"The model class to instantiate is selected based on the "),nge=n(BA,"CODE",{});var jct=s(nge);Zqo=r(jct,"model_type"),jct.forEach(t),eNo=r(BA,` property of the config object (either
passed as an argument or loaded from `),sge=n(BA,"CODE",{});var Dct=s(sge);oNo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),rNo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(BA,"CODE",{});var Gct=s(lge);tNo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),aNo=r(BA,":"),BA.forEach(t),nNo=i(da),U=n(da,"UL",{});var J=s(U);_F=n(J,"LI",{});var I9e=s(_F);ige=n(I9e,"STRONG",{});var Oct=s(ige);sNo=r(Oct,"albert"),Oct.forEach(t),lNo=r(I9e," \u2014 "),vO=n(I9e,"A",{href:!0});var Vct=s(vO);iNo=r(Vct,"AlbertForTokenClassification"),Vct.forEach(t),dNo=r(I9e," (ALBERT model)"),I9e.forEach(t),cNo=i(J),bF=n(J,"LI",{});var q9e=s(bF);dge=n(q9e,"STRONG",{});var Xct=s(dge);mNo=r(Xct,"bert"),Xct.forEach(t),fNo=r(q9e," \u2014 "),FO=n(q9e,"A",{href:!0});var zct=s(FO);gNo=r(zct,"BertForTokenClassification"),zct.forEach(t),hNo=r(q9e," (BERT model)"),q9e.forEach(t),uNo=i(J),vF=n(J,"LI",{});var N9e=s(vF);cge=n(N9e,"STRONG",{});var Wct=s(cge);pNo=r(Wct,"big_bird"),Wct.forEach(t),_No=r(N9e," \u2014 "),TO=n(N9e,"A",{href:!0});var Qct=s(TO);bNo=r(Qct,"BigBirdForTokenClassification"),Qct.forEach(t),vNo=r(N9e," (BigBird model)"),N9e.forEach(t),FNo=i(J),FF=n(J,"LI",{});var j9e=s(FF);mge=n(j9e,"STRONG",{});var Hct=s(mge);TNo=r(Hct,"camembert"),Hct.forEach(t),MNo=r(j9e," \u2014 "),MO=n(j9e,"A",{href:!0});var Uct=s(MO);ENo=r(Uct,"CamembertForTokenClassification"),Uct.forEach(t),CNo=r(j9e," (CamemBERT model)"),j9e.forEach(t),wNo=i(J),TF=n(J,"LI",{});var D9e=s(TF);fge=n(D9e,"STRONG",{});var Jct=s(fge);ANo=r(Jct,"canine"),Jct.forEach(t),yNo=r(D9e," \u2014 "),EO=n(D9e,"A",{href:!0});var Yct=s(EO);LNo=r(Yct,"CanineForTokenClassification"),Yct.forEach(t),xNo=r(D9e," (Canine model)"),D9e.forEach(t),$No=i(J),MF=n(J,"LI",{});var G9e=s(MF);gge=n(G9e,"STRONG",{});var Kct=s(gge);kNo=r(Kct,"convbert"),Kct.forEach(t),SNo=r(G9e," \u2014 "),CO=n(G9e,"A",{href:!0});var Zct=s(CO);RNo=r(Zct,"ConvBertForTokenClassification"),Zct.forEach(t),PNo=r(G9e," (ConvBERT model)"),G9e.forEach(t),BNo=i(J),EF=n(J,"LI",{});var O9e=s(EF);hge=n(O9e,"STRONG",{});var emt=s(hge);INo=r(emt,"data2vec-text"),emt.forEach(t),qNo=r(O9e," \u2014 "),wO=n(O9e,"A",{href:!0});var omt=s(wO);NNo=r(omt,"Data2VecTextForTokenClassification"),omt.forEach(t),jNo=r(O9e," (Data2VecText model)"),O9e.forEach(t),DNo=i(J),CF=n(J,"LI",{});var V9e=s(CF);uge=n(V9e,"STRONG",{});var rmt=s(uge);GNo=r(rmt,"deberta"),rmt.forEach(t),ONo=r(V9e," \u2014 "),AO=n(V9e,"A",{href:!0});var tmt=s(AO);VNo=r(tmt,"DebertaForTokenClassification"),tmt.forEach(t),XNo=r(V9e," (DeBERTa model)"),V9e.forEach(t),zNo=i(J),wF=n(J,"LI",{});var X9e=s(wF);pge=n(X9e,"STRONG",{});var amt=s(pge);WNo=r(amt,"deberta-v2"),amt.forEach(t),QNo=r(X9e," \u2014 "),yO=n(X9e,"A",{href:!0});var nmt=s(yO);HNo=r(nmt,"DebertaV2ForTokenClassification"),nmt.forEach(t),UNo=r(X9e," (DeBERTa-v2 model)"),X9e.forEach(t),JNo=i(J),AF=n(J,"LI",{});var z9e=s(AF);_ge=n(z9e,"STRONG",{});var smt=s(_ge);YNo=r(smt,"distilbert"),smt.forEach(t),KNo=r(z9e," \u2014 "),LO=n(z9e,"A",{href:!0});var lmt=s(LO);ZNo=r(lmt,"DistilBertForTokenClassification"),lmt.forEach(t),ejo=r(z9e," (DistilBERT model)"),z9e.forEach(t),ojo=i(J),yF=n(J,"LI",{});var W9e=s(yF);bge=n(W9e,"STRONG",{});var imt=s(bge);rjo=r(imt,"electra"),imt.forEach(t),tjo=r(W9e," \u2014 "),xO=n(W9e,"A",{href:!0});var dmt=s(xO);ajo=r(dmt,"ElectraForTokenClassification"),dmt.forEach(t),njo=r(W9e," (ELECTRA model)"),W9e.forEach(t),sjo=i(J),LF=n(J,"LI",{});var Q9e=s(LF);vge=n(Q9e,"STRONG",{});var cmt=s(vge);ljo=r(cmt,"flaubert"),cmt.forEach(t),ijo=r(Q9e," \u2014 "),$O=n(Q9e,"A",{href:!0});var mmt=s($O);djo=r(mmt,"FlaubertForTokenClassification"),mmt.forEach(t),cjo=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),mjo=i(J),xF=n(J,"LI",{});var H9e=s(xF);Fge=n(H9e,"STRONG",{});var fmt=s(Fge);fjo=r(fmt,"fnet"),fmt.forEach(t),gjo=r(H9e," \u2014 "),kO=n(H9e,"A",{href:!0});var gmt=s(kO);hjo=r(gmt,"FNetForTokenClassification"),gmt.forEach(t),ujo=r(H9e," (FNet model)"),H9e.forEach(t),pjo=i(J),$F=n(J,"LI",{});var U9e=s($F);Tge=n(U9e,"STRONG",{});var hmt=s(Tge);_jo=r(hmt,"funnel"),hmt.forEach(t),bjo=r(U9e," \u2014 "),SO=n(U9e,"A",{href:!0});var umt=s(SO);vjo=r(umt,"FunnelForTokenClassification"),umt.forEach(t),Fjo=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),Tjo=i(J),kF=n(J,"LI",{});var J9e=s(kF);Mge=n(J9e,"STRONG",{});var pmt=s(Mge);Mjo=r(pmt,"gpt2"),pmt.forEach(t),Ejo=r(J9e," \u2014 "),RO=n(J9e,"A",{href:!0});var _mt=s(RO);Cjo=r(_mt,"GPT2ForTokenClassification"),_mt.forEach(t),wjo=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),Ajo=i(J),SF=n(J,"LI",{});var Y9e=s(SF);Ege=n(Y9e,"STRONG",{});var bmt=s(Ege);yjo=r(bmt,"ibert"),bmt.forEach(t),Ljo=r(Y9e," \u2014 "),PO=n(Y9e,"A",{href:!0});var vmt=s(PO);xjo=r(vmt,"IBertForTokenClassification"),vmt.forEach(t),$jo=r(Y9e," (I-BERT model)"),Y9e.forEach(t),kjo=i(J),RF=n(J,"LI",{});var K9e=s(RF);Cge=n(K9e,"STRONG",{});var Fmt=s(Cge);Sjo=r(Fmt,"layoutlm"),Fmt.forEach(t),Rjo=r(K9e," \u2014 "),BO=n(K9e,"A",{href:!0});var Tmt=s(BO);Pjo=r(Tmt,"LayoutLMForTokenClassification"),Tmt.forEach(t),Bjo=r(K9e," (LayoutLM model)"),K9e.forEach(t),Ijo=i(J),PF=n(J,"LI",{});var Z9e=s(PF);wge=n(Z9e,"STRONG",{});var Mmt=s(wge);qjo=r(Mmt,"layoutlmv2"),Mmt.forEach(t),Njo=r(Z9e," \u2014 "),IO=n(Z9e,"A",{href:!0});var Emt=s(IO);jjo=r(Emt,"LayoutLMv2ForTokenClassification"),Emt.forEach(t),Djo=r(Z9e," (LayoutLMv2 model)"),Z9e.forEach(t),Gjo=i(J),BF=n(J,"LI",{});var exe=s(BF);Age=n(exe,"STRONG",{});var Cmt=s(Age);Ojo=r(Cmt,"longformer"),Cmt.forEach(t),Vjo=r(exe," \u2014 "),qO=n(exe,"A",{href:!0});var wmt=s(qO);Xjo=r(wmt,"LongformerForTokenClassification"),wmt.forEach(t),zjo=r(exe," (Longformer model)"),exe.forEach(t),Wjo=i(J),IF=n(J,"LI",{});var oxe=s(IF);yge=n(oxe,"STRONG",{});var Amt=s(yge);Qjo=r(Amt,"megatron-bert"),Amt.forEach(t),Hjo=r(oxe," \u2014 "),NO=n(oxe,"A",{href:!0});var ymt=s(NO);Ujo=r(ymt,"MegatronBertForTokenClassification"),ymt.forEach(t),Jjo=r(oxe," (MegatronBert model)"),oxe.forEach(t),Yjo=i(J),qF=n(J,"LI",{});var rxe=s(qF);Lge=n(rxe,"STRONG",{});var Lmt=s(Lge);Kjo=r(Lmt,"mobilebert"),Lmt.forEach(t),Zjo=r(rxe," \u2014 "),jO=n(rxe,"A",{href:!0});var xmt=s(jO);eDo=r(xmt,"MobileBertForTokenClassification"),xmt.forEach(t),oDo=r(rxe," (MobileBERT model)"),rxe.forEach(t),rDo=i(J),NF=n(J,"LI",{});var txe=s(NF);xge=n(txe,"STRONG",{});var $mt=s(xge);tDo=r($mt,"mpnet"),$mt.forEach(t),aDo=r(txe," \u2014 "),DO=n(txe,"A",{href:!0});var kmt=s(DO);nDo=r(kmt,"MPNetForTokenClassification"),kmt.forEach(t),sDo=r(txe," (MPNet model)"),txe.forEach(t),lDo=i(J),jF=n(J,"LI",{});var axe=s(jF);$ge=n(axe,"STRONG",{});var Smt=s($ge);iDo=r(Smt,"nystromformer"),Smt.forEach(t),dDo=r(axe," \u2014 "),GO=n(axe,"A",{href:!0});var Rmt=s(GO);cDo=r(Rmt,"NystromformerForTokenClassification"),Rmt.forEach(t),mDo=r(axe," (Nystromformer model)"),axe.forEach(t),fDo=i(J),DF=n(J,"LI",{});var nxe=s(DF);kge=n(nxe,"STRONG",{});var Pmt=s(kge);gDo=r(Pmt,"qdqbert"),Pmt.forEach(t),hDo=r(nxe," \u2014 "),OO=n(nxe,"A",{href:!0});var Bmt=s(OO);uDo=r(Bmt,"QDQBertForTokenClassification"),Bmt.forEach(t),pDo=r(nxe," (QDQBert model)"),nxe.forEach(t),_Do=i(J),GF=n(J,"LI",{});var sxe=s(GF);Sge=n(sxe,"STRONG",{});var Imt=s(Sge);bDo=r(Imt,"rembert"),Imt.forEach(t),vDo=r(sxe," \u2014 "),VO=n(sxe,"A",{href:!0});var qmt=s(VO);FDo=r(qmt,"RemBertForTokenClassification"),qmt.forEach(t),TDo=r(sxe," (RemBERT model)"),sxe.forEach(t),MDo=i(J),OF=n(J,"LI",{});var lxe=s(OF);Rge=n(lxe,"STRONG",{});var Nmt=s(Rge);EDo=r(Nmt,"roberta"),Nmt.forEach(t),CDo=r(lxe," \u2014 "),XO=n(lxe,"A",{href:!0});var jmt=s(XO);wDo=r(jmt,"RobertaForTokenClassification"),jmt.forEach(t),ADo=r(lxe," (RoBERTa model)"),lxe.forEach(t),yDo=i(J),VF=n(J,"LI",{});var ixe=s(VF);Pge=n(ixe,"STRONG",{});var Dmt=s(Pge);LDo=r(Dmt,"roformer"),Dmt.forEach(t),xDo=r(ixe," \u2014 "),zO=n(ixe,"A",{href:!0});var Gmt=s(zO);$Do=r(Gmt,"RoFormerForTokenClassification"),Gmt.forEach(t),kDo=r(ixe," (RoFormer model)"),ixe.forEach(t),SDo=i(J),XF=n(J,"LI",{});var dxe=s(XF);Bge=n(dxe,"STRONG",{});var Omt=s(Bge);RDo=r(Omt,"squeezebert"),Omt.forEach(t),PDo=r(dxe," \u2014 "),WO=n(dxe,"A",{href:!0});var Vmt=s(WO);BDo=r(Vmt,"SqueezeBertForTokenClassification"),Vmt.forEach(t),IDo=r(dxe," (SqueezeBERT model)"),dxe.forEach(t),qDo=i(J),zF=n(J,"LI",{});var cxe=s(zF);Ige=n(cxe,"STRONG",{});var Xmt=s(Ige);NDo=r(Xmt,"xlm"),Xmt.forEach(t),jDo=r(cxe," \u2014 "),QO=n(cxe,"A",{href:!0});var zmt=s(QO);DDo=r(zmt,"XLMForTokenClassification"),zmt.forEach(t),GDo=r(cxe," (XLM model)"),cxe.forEach(t),ODo=i(J),WF=n(J,"LI",{});var mxe=s(WF);qge=n(mxe,"STRONG",{});var Wmt=s(qge);VDo=r(Wmt,"xlm-roberta"),Wmt.forEach(t),XDo=r(mxe," \u2014 "),HO=n(mxe,"A",{href:!0});var Qmt=s(HO);zDo=r(Qmt,"XLMRobertaForTokenClassification"),Qmt.forEach(t),WDo=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),QDo=i(J),QF=n(J,"LI",{});var fxe=s(QF);Nge=n(fxe,"STRONG",{});var Hmt=s(Nge);HDo=r(Hmt,"xlm-roberta-xl"),Hmt.forEach(t),UDo=r(fxe," \u2014 "),UO=n(fxe,"A",{href:!0});var Umt=s(UO);JDo=r(Umt,"XLMRobertaXLForTokenClassification"),Umt.forEach(t),YDo=r(fxe," (XLM-RoBERTa-XL model)"),fxe.forEach(t),KDo=i(J),HF=n(J,"LI",{});var gxe=s(HF);jge=n(gxe,"STRONG",{});var Jmt=s(jge);ZDo=r(Jmt,"xlnet"),Jmt.forEach(t),eGo=r(gxe," \u2014 "),JO=n(gxe,"A",{href:!0});var Ymt=s(JO);oGo=r(Ymt,"XLNetForTokenClassification"),Ymt.forEach(t),rGo=r(gxe," (XLNet model)"),gxe.forEach(t),tGo=i(J),UF=n(J,"LI",{});var hxe=s(UF);Dge=n(hxe,"STRONG",{});var Kmt=s(Dge);aGo=r(Kmt,"yoso"),Kmt.forEach(t),nGo=r(hxe," \u2014 "),YO=n(hxe,"A",{href:!0});var Zmt=s(YO);sGo=r(Zmt,"YosoForTokenClassification"),Zmt.forEach(t),lGo=r(hxe," (YOSO model)"),hxe.forEach(t),J.forEach(t),iGo=i(da),JF=n(da,"P",{});var uxe=s(JF);dGo=r(uxe,"The model is set in evaluation mode by default using "),Gge=n(uxe,"CODE",{});var eft=s(Gge);cGo=r(eft,"model.eval()"),eft.forEach(t),mGo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(uxe,"CODE",{});var oft=s(Oge);fGo=r(oft,"model.train()"),oft.forEach(t),uxe.forEach(t),gGo=i(da),T(YF.$$.fragment,da),da.forEach(t),Us.forEach(t),$qe=i(m),Yi=n(m,"H2",{class:!0});var Pje=s(Yi);KF=n(Pje,"A",{id:!0,class:!0,href:!0});var rft=s(KF);Vge=n(rft,"SPAN",{});var tft=s(Vge);T(kL.$$.fragment,tft),tft.forEach(t),rft.forEach(t),hGo=i(Pje),Xge=n(Pje,"SPAN",{});var aft=s(Xge);uGo=r(aft,"AutoModelForQuestionAnswering"),aft.forEach(t),Pje.forEach(t),kqe=i(m),qo=n(m,"DIV",{class:!0});var Js=s(qo);T(SL.$$.fragment,Js),pGo=i(Js),Ki=n(Js,"P",{});var nZ=s(Ki);_Go=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KO=n(nZ,"A",{href:!0});var nft=s(KO);bGo=r(nft,"from_pretrained()"),nft.forEach(t),vGo=r(nZ," class method or the "),ZO=n(nZ,"A",{href:!0});var sft=s(ZO);FGo=r(sft,"from_config()"),sft.forEach(t),TGo=r(nZ,` class
method.`),nZ.forEach(t),MGo=i(Js),RL=n(Js,"P",{});var Bje=s(RL);EGo=r(Bje,"This class cannot be instantiated directly using "),zge=n(Bje,"CODE",{});var lft=s(zge);CGo=r(lft,"__init__()"),lft.forEach(t),wGo=r(Bje," (throws an error)."),Bje.forEach(t),AGo=i(Js),ft=n(Js,"DIV",{class:!0});var IA=s(ft);T(PL.$$.fragment,IA),yGo=i(IA),Wge=n(IA,"P",{});var ift=s(Wge);LGo=r(ift,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ift.forEach(t),xGo=i(IA),Zi=n(IA,"P",{});var sZ=s(Zi);$Go=r(sZ,`Note:
Loading a model from its configuration file does `),Qge=n(sZ,"STRONG",{});var dft=s(Qge);kGo=r(dft,"not"),dft.forEach(t),SGo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(sZ,"A",{href:!0});var cft=s(eV);RGo=r(cft,"from_pretrained()"),cft.forEach(t),PGo=r(sZ," to load the model weights."),sZ.forEach(t),BGo=i(IA),T(ZF.$$.fragment,IA),IA.forEach(t),IGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(BL.$$.fragment,ca),qGo=i(ca),Hge=n(ca,"P",{});var mft=s(Hge);NGo=r(mft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mft.forEach(t),jGo=i(ca),qa=n(ca,"P",{});var qA=s(qa);DGo=r(qA,"The model class to instantiate is selected based on the "),Uge=n(qA,"CODE",{});var fft=s(Uge);GGo=r(fft,"model_type"),fft.forEach(t),OGo=r(qA,` property of the config object (either
passed as an argument or loaded from `),Jge=n(qA,"CODE",{});var gft=s(Jge);VGo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),XGo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(qA,"CODE",{});var hft=s(Yge);zGo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),WGo=r(qA,":"),qA.forEach(t),QGo=i(ca),V=n(ca,"UL",{});var X=s(V);e1=n(X,"LI",{});var pxe=s(e1);Kge=n(pxe,"STRONG",{});var uft=s(Kge);HGo=r(uft,"albert"),uft.forEach(t),UGo=r(pxe," \u2014 "),oV=n(pxe,"A",{href:!0});var pft=s(oV);JGo=r(pft,"AlbertForQuestionAnswering"),pft.forEach(t),YGo=r(pxe," (ALBERT model)"),pxe.forEach(t),KGo=i(X),o1=n(X,"LI",{});var _xe=s(o1);Zge=n(_xe,"STRONG",{});var _ft=s(Zge);ZGo=r(_ft,"bart"),_ft.forEach(t),eOo=r(_xe," \u2014 "),rV=n(_xe,"A",{href:!0});var bft=s(rV);oOo=r(bft,"BartForQuestionAnswering"),bft.forEach(t),rOo=r(_xe," (BART model)"),_xe.forEach(t),tOo=i(X),r1=n(X,"LI",{});var bxe=s(r1);ehe=n(bxe,"STRONG",{});var vft=s(ehe);aOo=r(vft,"bert"),vft.forEach(t),nOo=r(bxe," \u2014 "),tV=n(bxe,"A",{href:!0});var Fft=s(tV);sOo=r(Fft,"BertForQuestionAnswering"),Fft.forEach(t),lOo=r(bxe," (BERT model)"),bxe.forEach(t),iOo=i(X),t1=n(X,"LI",{});var vxe=s(t1);ohe=n(vxe,"STRONG",{});var Tft=s(ohe);dOo=r(Tft,"big_bird"),Tft.forEach(t),cOo=r(vxe," \u2014 "),aV=n(vxe,"A",{href:!0});var Mft=s(aV);mOo=r(Mft,"BigBirdForQuestionAnswering"),Mft.forEach(t),fOo=r(vxe," (BigBird model)"),vxe.forEach(t),gOo=i(X),a1=n(X,"LI",{});var Fxe=s(a1);rhe=n(Fxe,"STRONG",{});var Eft=s(rhe);hOo=r(Eft,"bigbird_pegasus"),Eft.forEach(t),uOo=r(Fxe," \u2014 "),nV=n(Fxe,"A",{href:!0});var Cft=s(nV);pOo=r(Cft,"BigBirdPegasusForQuestionAnswering"),Cft.forEach(t),_Oo=r(Fxe," (BigBirdPegasus model)"),Fxe.forEach(t),bOo=i(X),n1=n(X,"LI",{});var Txe=s(n1);the=n(Txe,"STRONG",{});var wft=s(the);vOo=r(wft,"camembert"),wft.forEach(t),FOo=r(Txe," \u2014 "),sV=n(Txe,"A",{href:!0});var Aft=s(sV);TOo=r(Aft,"CamembertForQuestionAnswering"),Aft.forEach(t),MOo=r(Txe," (CamemBERT model)"),Txe.forEach(t),EOo=i(X),s1=n(X,"LI",{});var Mxe=s(s1);ahe=n(Mxe,"STRONG",{});var yft=s(ahe);COo=r(yft,"canine"),yft.forEach(t),wOo=r(Mxe," \u2014 "),lV=n(Mxe,"A",{href:!0});var Lft=s(lV);AOo=r(Lft,"CanineForQuestionAnswering"),Lft.forEach(t),yOo=r(Mxe," (Canine model)"),Mxe.forEach(t),LOo=i(X),l1=n(X,"LI",{});var Exe=s(l1);nhe=n(Exe,"STRONG",{});var xft=s(nhe);xOo=r(xft,"convbert"),xft.forEach(t),$Oo=r(Exe," \u2014 "),iV=n(Exe,"A",{href:!0});var $ft=s(iV);kOo=r($ft,"ConvBertForQuestionAnswering"),$ft.forEach(t),SOo=r(Exe," (ConvBERT model)"),Exe.forEach(t),ROo=i(X),i1=n(X,"LI",{});var Cxe=s(i1);she=n(Cxe,"STRONG",{});var kft=s(she);POo=r(kft,"data2vec-text"),kft.forEach(t),BOo=r(Cxe," \u2014 "),dV=n(Cxe,"A",{href:!0});var Sft=s(dV);IOo=r(Sft,"Data2VecTextForQuestionAnswering"),Sft.forEach(t),qOo=r(Cxe," (Data2VecText model)"),Cxe.forEach(t),NOo=i(X),d1=n(X,"LI",{});var wxe=s(d1);lhe=n(wxe,"STRONG",{});var Rft=s(lhe);jOo=r(Rft,"deberta"),Rft.forEach(t),DOo=r(wxe," \u2014 "),cV=n(wxe,"A",{href:!0});var Pft=s(cV);GOo=r(Pft,"DebertaForQuestionAnswering"),Pft.forEach(t),OOo=r(wxe," (DeBERTa model)"),wxe.forEach(t),VOo=i(X),c1=n(X,"LI",{});var Axe=s(c1);ihe=n(Axe,"STRONG",{});var Bft=s(ihe);XOo=r(Bft,"deberta-v2"),Bft.forEach(t),zOo=r(Axe," \u2014 "),mV=n(Axe,"A",{href:!0});var Ift=s(mV);WOo=r(Ift,"DebertaV2ForQuestionAnswering"),Ift.forEach(t),QOo=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),HOo=i(X),m1=n(X,"LI",{});var yxe=s(m1);dhe=n(yxe,"STRONG",{});var qft=s(dhe);UOo=r(qft,"distilbert"),qft.forEach(t),JOo=r(yxe," \u2014 "),fV=n(yxe,"A",{href:!0});var Nft=s(fV);YOo=r(Nft,"DistilBertForQuestionAnswering"),Nft.forEach(t),KOo=r(yxe," (DistilBERT model)"),yxe.forEach(t),ZOo=i(X),f1=n(X,"LI",{});var Lxe=s(f1);che=n(Lxe,"STRONG",{});var jft=s(che);eVo=r(jft,"electra"),jft.forEach(t),oVo=r(Lxe," \u2014 "),gV=n(Lxe,"A",{href:!0});var Dft=s(gV);rVo=r(Dft,"ElectraForQuestionAnswering"),Dft.forEach(t),tVo=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),aVo=i(X),g1=n(X,"LI",{});var xxe=s(g1);mhe=n(xxe,"STRONG",{});var Gft=s(mhe);nVo=r(Gft,"flaubert"),Gft.forEach(t),sVo=r(xxe," \u2014 "),hV=n(xxe,"A",{href:!0});var Oft=s(hV);lVo=r(Oft,"FlaubertForQuestionAnsweringSimple"),Oft.forEach(t),iVo=r(xxe," (FlauBERT model)"),xxe.forEach(t),dVo=i(X),h1=n(X,"LI",{});var $xe=s(h1);fhe=n($xe,"STRONG",{});var Vft=s(fhe);cVo=r(Vft,"fnet"),Vft.forEach(t),mVo=r($xe," \u2014 "),uV=n($xe,"A",{href:!0});var Xft=s(uV);fVo=r(Xft,"FNetForQuestionAnswering"),Xft.forEach(t),gVo=r($xe," (FNet model)"),$xe.forEach(t),hVo=i(X),u1=n(X,"LI",{});var kxe=s(u1);ghe=n(kxe,"STRONG",{});var zft=s(ghe);uVo=r(zft,"funnel"),zft.forEach(t),pVo=r(kxe," \u2014 "),pV=n(kxe,"A",{href:!0});var Wft=s(pV);_Vo=r(Wft,"FunnelForQuestionAnswering"),Wft.forEach(t),bVo=r(kxe," (Funnel Transformer model)"),kxe.forEach(t),vVo=i(X),p1=n(X,"LI",{});var Sxe=s(p1);hhe=n(Sxe,"STRONG",{});var Qft=s(hhe);FVo=r(Qft,"gptj"),Qft.forEach(t),TVo=r(Sxe," \u2014 "),_V=n(Sxe,"A",{href:!0});var Hft=s(_V);MVo=r(Hft,"GPTJForQuestionAnswering"),Hft.forEach(t),EVo=r(Sxe," (GPT-J model)"),Sxe.forEach(t),CVo=i(X),_1=n(X,"LI",{});var Rxe=s(_1);uhe=n(Rxe,"STRONG",{});var Uft=s(uhe);wVo=r(Uft,"ibert"),Uft.forEach(t),AVo=r(Rxe," \u2014 "),bV=n(Rxe,"A",{href:!0});var Jft=s(bV);yVo=r(Jft,"IBertForQuestionAnswering"),Jft.forEach(t),LVo=r(Rxe," (I-BERT model)"),Rxe.forEach(t),xVo=i(X),b1=n(X,"LI",{});var Pxe=s(b1);phe=n(Pxe,"STRONG",{});var Yft=s(phe);$Vo=r(Yft,"layoutlmv2"),Yft.forEach(t),kVo=r(Pxe," \u2014 "),vV=n(Pxe,"A",{href:!0});var Kft=s(vV);SVo=r(Kft,"LayoutLMv2ForQuestionAnswering"),Kft.forEach(t),RVo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),PVo=i(X),v1=n(X,"LI",{});var Bxe=s(v1);_he=n(Bxe,"STRONG",{});var Zft=s(_he);BVo=r(Zft,"led"),Zft.forEach(t),IVo=r(Bxe," \u2014 "),FV=n(Bxe,"A",{href:!0});var egt=s(FV);qVo=r(egt,"LEDForQuestionAnswering"),egt.forEach(t),NVo=r(Bxe," (LED model)"),Bxe.forEach(t),jVo=i(X),F1=n(X,"LI",{});var Ixe=s(F1);bhe=n(Ixe,"STRONG",{});var ogt=s(bhe);DVo=r(ogt,"longformer"),ogt.forEach(t),GVo=r(Ixe," \u2014 "),TV=n(Ixe,"A",{href:!0});var rgt=s(TV);OVo=r(rgt,"LongformerForQuestionAnswering"),rgt.forEach(t),VVo=r(Ixe," (Longformer model)"),Ixe.forEach(t),XVo=i(X),T1=n(X,"LI",{});var qxe=s(T1);vhe=n(qxe,"STRONG",{});var tgt=s(vhe);zVo=r(tgt,"lxmert"),tgt.forEach(t),WVo=r(qxe," \u2014 "),MV=n(qxe,"A",{href:!0});var agt=s(MV);QVo=r(agt,"LxmertForQuestionAnswering"),agt.forEach(t),HVo=r(qxe," (LXMERT model)"),qxe.forEach(t),UVo=i(X),M1=n(X,"LI",{});var Nxe=s(M1);Fhe=n(Nxe,"STRONG",{});var ngt=s(Fhe);JVo=r(ngt,"mbart"),ngt.forEach(t),YVo=r(Nxe," \u2014 "),EV=n(Nxe,"A",{href:!0});var sgt=s(EV);KVo=r(sgt,"MBartForQuestionAnswering"),sgt.forEach(t),ZVo=r(Nxe," (mBART model)"),Nxe.forEach(t),eXo=i(X),E1=n(X,"LI",{});var jxe=s(E1);The=n(jxe,"STRONG",{});var lgt=s(The);oXo=r(lgt,"megatron-bert"),lgt.forEach(t),rXo=r(jxe," \u2014 "),CV=n(jxe,"A",{href:!0});var igt=s(CV);tXo=r(igt,"MegatronBertForQuestionAnswering"),igt.forEach(t),aXo=r(jxe," (MegatronBert model)"),jxe.forEach(t),nXo=i(X),C1=n(X,"LI",{});var Dxe=s(C1);Mhe=n(Dxe,"STRONG",{});var dgt=s(Mhe);sXo=r(dgt,"mobilebert"),dgt.forEach(t),lXo=r(Dxe," \u2014 "),wV=n(Dxe,"A",{href:!0});var cgt=s(wV);iXo=r(cgt,"MobileBertForQuestionAnswering"),cgt.forEach(t),dXo=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),cXo=i(X),w1=n(X,"LI",{});var Gxe=s(w1);Ehe=n(Gxe,"STRONG",{});var mgt=s(Ehe);mXo=r(mgt,"mpnet"),mgt.forEach(t),fXo=r(Gxe," \u2014 "),AV=n(Gxe,"A",{href:!0});var fgt=s(AV);gXo=r(fgt,"MPNetForQuestionAnswering"),fgt.forEach(t),hXo=r(Gxe," (MPNet model)"),Gxe.forEach(t),uXo=i(X),A1=n(X,"LI",{});var Oxe=s(A1);Che=n(Oxe,"STRONG",{});var ggt=s(Che);pXo=r(ggt,"nystromformer"),ggt.forEach(t),_Xo=r(Oxe," \u2014 "),yV=n(Oxe,"A",{href:!0});var hgt=s(yV);bXo=r(hgt,"NystromformerForQuestionAnswering"),hgt.forEach(t),vXo=r(Oxe," (Nystromformer model)"),Oxe.forEach(t),FXo=i(X),y1=n(X,"LI",{});var Vxe=s(y1);whe=n(Vxe,"STRONG",{});var ugt=s(whe);TXo=r(ugt,"qdqbert"),ugt.forEach(t),MXo=r(Vxe," \u2014 "),LV=n(Vxe,"A",{href:!0});var pgt=s(LV);EXo=r(pgt,"QDQBertForQuestionAnswering"),pgt.forEach(t),CXo=r(Vxe," (QDQBert model)"),Vxe.forEach(t),wXo=i(X),L1=n(X,"LI",{});var Xxe=s(L1);Ahe=n(Xxe,"STRONG",{});var _gt=s(Ahe);AXo=r(_gt,"reformer"),_gt.forEach(t),yXo=r(Xxe," \u2014 "),xV=n(Xxe,"A",{href:!0});var bgt=s(xV);LXo=r(bgt,"ReformerForQuestionAnswering"),bgt.forEach(t),xXo=r(Xxe," (Reformer model)"),Xxe.forEach(t),$Xo=i(X),x1=n(X,"LI",{});var zxe=s(x1);yhe=n(zxe,"STRONG",{});var vgt=s(yhe);kXo=r(vgt,"rembert"),vgt.forEach(t),SXo=r(zxe," \u2014 "),$V=n(zxe,"A",{href:!0});var Fgt=s($V);RXo=r(Fgt,"RemBertForQuestionAnswering"),Fgt.forEach(t),PXo=r(zxe," (RemBERT model)"),zxe.forEach(t),BXo=i(X),$1=n(X,"LI",{});var Wxe=s($1);Lhe=n(Wxe,"STRONG",{});var Tgt=s(Lhe);IXo=r(Tgt,"roberta"),Tgt.forEach(t),qXo=r(Wxe," \u2014 "),kV=n(Wxe,"A",{href:!0});var Mgt=s(kV);NXo=r(Mgt,"RobertaForQuestionAnswering"),Mgt.forEach(t),jXo=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),DXo=i(X),k1=n(X,"LI",{});var Qxe=s(k1);xhe=n(Qxe,"STRONG",{});var Egt=s(xhe);GXo=r(Egt,"roformer"),Egt.forEach(t),OXo=r(Qxe," \u2014 "),SV=n(Qxe,"A",{href:!0});var Cgt=s(SV);VXo=r(Cgt,"RoFormerForQuestionAnswering"),Cgt.forEach(t),XXo=r(Qxe," (RoFormer model)"),Qxe.forEach(t),zXo=i(X),S1=n(X,"LI",{});var Hxe=s(S1);$he=n(Hxe,"STRONG",{});var wgt=s($he);WXo=r(wgt,"splinter"),wgt.forEach(t),QXo=r(Hxe," \u2014 "),RV=n(Hxe,"A",{href:!0});var Agt=s(RV);HXo=r(Agt,"SplinterForQuestionAnswering"),Agt.forEach(t),UXo=r(Hxe," (Splinter model)"),Hxe.forEach(t),JXo=i(X),R1=n(X,"LI",{});var Uxe=s(R1);khe=n(Uxe,"STRONG",{});var ygt=s(khe);YXo=r(ygt,"squeezebert"),ygt.forEach(t),KXo=r(Uxe," \u2014 "),PV=n(Uxe,"A",{href:!0});var Lgt=s(PV);ZXo=r(Lgt,"SqueezeBertForQuestionAnswering"),Lgt.forEach(t),ezo=r(Uxe," (SqueezeBERT model)"),Uxe.forEach(t),ozo=i(X),P1=n(X,"LI",{});var Jxe=s(P1);She=n(Jxe,"STRONG",{});var xgt=s(She);rzo=r(xgt,"xlm"),xgt.forEach(t),tzo=r(Jxe," \u2014 "),BV=n(Jxe,"A",{href:!0});var $gt=s(BV);azo=r($gt,"XLMForQuestionAnsweringSimple"),$gt.forEach(t),nzo=r(Jxe," (XLM model)"),Jxe.forEach(t),szo=i(X),B1=n(X,"LI",{});var Yxe=s(B1);Rhe=n(Yxe,"STRONG",{});var kgt=s(Rhe);lzo=r(kgt,"xlm-roberta"),kgt.forEach(t),izo=r(Yxe," \u2014 "),IV=n(Yxe,"A",{href:!0});var Sgt=s(IV);dzo=r(Sgt,"XLMRobertaForQuestionAnswering"),Sgt.forEach(t),czo=r(Yxe," (XLM-RoBERTa model)"),Yxe.forEach(t),mzo=i(X),I1=n(X,"LI",{});var Kxe=s(I1);Phe=n(Kxe,"STRONG",{});var Rgt=s(Phe);fzo=r(Rgt,"xlm-roberta-xl"),Rgt.forEach(t),gzo=r(Kxe," \u2014 "),qV=n(Kxe,"A",{href:!0});var Pgt=s(qV);hzo=r(Pgt,"XLMRobertaXLForQuestionAnswering"),Pgt.forEach(t),uzo=r(Kxe," (XLM-RoBERTa-XL model)"),Kxe.forEach(t),pzo=i(X),q1=n(X,"LI",{});var Zxe=s(q1);Bhe=n(Zxe,"STRONG",{});var Bgt=s(Bhe);_zo=r(Bgt,"xlnet"),Bgt.forEach(t),bzo=r(Zxe," \u2014 "),NV=n(Zxe,"A",{href:!0});var Igt=s(NV);vzo=r(Igt,"XLNetForQuestionAnsweringSimple"),Igt.forEach(t),Fzo=r(Zxe," (XLNet model)"),Zxe.forEach(t),Tzo=i(X),N1=n(X,"LI",{});var e$e=s(N1);Ihe=n(e$e,"STRONG",{});var qgt=s(Ihe);Mzo=r(qgt,"yoso"),qgt.forEach(t),Ezo=r(e$e," \u2014 "),jV=n(e$e,"A",{href:!0});var Ngt=s(jV);Czo=r(Ngt,"YosoForQuestionAnswering"),Ngt.forEach(t),wzo=r(e$e," (YOSO model)"),e$e.forEach(t),X.forEach(t),Azo=i(ca),j1=n(ca,"P",{});var o$e=s(j1);yzo=r(o$e,"The model is set in evaluation mode by default using "),qhe=n(o$e,"CODE",{});var jgt=s(qhe);Lzo=r(jgt,"model.eval()"),jgt.forEach(t),xzo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(o$e,"CODE",{});var Dgt=s(Nhe);$zo=r(Dgt,"model.train()"),Dgt.forEach(t),o$e.forEach(t),kzo=i(ca),T(D1.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Sqe=i(m),ed=n(m,"H2",{class:!0});var Ije=s(ed);G1=n(Ije,"A",{id:!0,class:!0,href:!0});var Ggt=s(G1);jhe=n(Ggt,"SPAN",{});var Ogt=s(jhe);T(IL.$$.fragment,Ogt),Ogt.forEach(t),Ggt.forEach(t),Szo=i(Ije),Dhe=n(Ije,"SPAN",{});var Vgt=s(Dhe);Rzo=r(Vgt,"AutoModelForTableQuestionAnswering"),Vgt.forEach(t),Ije.forEach(t),Rqe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(qL.$$.fragment,Ys),Pzo=i(Ys),od=n(Ys,"P",{});var lZ=s(od);Bzo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DV=n(lZ,"A",{href:!0});var Xgt=s(DV);Izo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),qzo=r(lZ," class method or the "),GV=n(lZ,"A",{href:!0});var zgt=s(GV);Nzo=r(zgt,"from_config()"),zgt.forEach(t),jzo=r(lZ,` class
method.`),lZ.forEach(t),Dzo=i(Ys),NL=n(Ys,"P",{});var qje=s(NL);Gzo=r(qje,"This class cannot be instantiated directly using "),Ghe=n(qje,"CODE",{});var Wgt=s(Ghe);Ozo=r(Wgt,"__init__()"),Wgt.forEach(t),Vzo=r(qje," (throws an error)."),qje.forEach(t),Xzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var NA=s(gt);T(jL.$$.fragment,NA),zzo=i(NA),Ohe=n(NA,"P",{});var Qgt=s(Ohe);Wzo=r(Qgt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qgt.forEach(t),Qzo=i(NA),rd=n(NA,"P",{});var iZ=s(rd);Hzo=r(iZ,`Note:
Loading a model from its configuration file does `),Vhe=n(iZ,"STRONG",{});var Hgt=s(Vhe);Uzo=r(Hgt,"not"),Hgt.forEach(t),Jzo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(iZ,"A",{href:!0});var Ugt=s(OV);Yzo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),Kzo=r(iZ," to load the model weights."),iZ.forEach(t),Zzo=i(NA),T(O1.$$.fragment,NA),NA.forEach(t),eWo=i(Ys),so=n(Ys,"DIV",{class:!0});var ma=s(so);T(DL.$$.fragment,ma),oWo=i(ma),Xhe=n(ma,"P",{});var Jgt=s(Xhe);rWo=r(Jgt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jgt.forEach(t),tWo=i(ma),Na=n(ma,"P",{});var jA=s(Na);aWo=r(jA,"The model class to instantiate is selected based on the "),zhe=n(jA,"CODE",{});var Ygt=s(zhe);nWo=r(Ygt,"model_type"),Ygt.forEach(t),sWo=r(jA,` property of the config object (either
passed as an argument or loaded from `),Whe=n(jA,"CODE",{});var Kgt=s(Whe);lWo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),iWo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(jA,"CODE",{});var Zgt=s(Qhe);dWo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),cWo=r(jA,":"),jA.forEach(t),mWo=i(ma),Hhe=n(ma,"UL",{});var eht=s(Hhe);V1=n(eht,"LI",{});var r$e=s(V1);Uhe=n(r$e,"STRONG",{});var oht=s(Uhe);fWo=r(oht,"tapas"),oht.forEach(t),gWo=r(r$e," \u2014 "),VV=n(r$e,"A",{href:!0});var rht=s(VV);hWo=r(rht,"TapasForQuestionAnswering"),rht.forEach(t),uWo=r(r$e," (TAPAS model)"),r$e.forEach(t),eht.forEach(t),pWo=i(ma),X1=n(ma,"P",{});var t$e=s(X1);_Wo=r(t$e,"The model is set in evaluation mode by default using "),Jhe=n(t$e,"CODE",{});var tht=s(Jhe);bWo=r(tht,"model.eval()"),tht.forEach(t),vWo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(t$e,"CODE",{});var aht=s(Yhe);FWo=r(aht,"model.train()"),aht.forEach(t),t$e.forEach(t),TWo=i(ma),T(z1.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),Pqe=i(m),td=n(m,"H2",{class:!0});var Nje=s(td);W1=n(Nje,"A",{id:!0,class:!0,href:!0});var nht=s(W1);Khe=n(nht,"SPAN",{});var sht=s(Khe);T(GL.$$.fragment,sht),sht.forEach(t),nht.forEach(t),MWo=i(Nje),Zhe=n(Nje,"SPAN",{});var lht=s(Zhe);EWo=r(lht,"AutoModelForImageClassification"),lht.forEach(t),Nje.forEach(t),Bqe=i(m),jo=n(m,"DIV",{class:!0});var Ks=s(jo);T(OL.$$.fragment,Ks),CWo=i(Ks),ad=n(Ks,"P",{});var dZ=s(ad);wWo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XV=n(dZ,"A",{href:!0});var iht=s(XV);AWo=r(iht,"from_pretrained()"),iht.forEach(t),yWo=r(dZ," class method or the "),zV=n(dZ,"A",{href:!0});var dht=s(zV);LWo=r(dht,"from_config()"),dht.forEach(t),xWo=r(dZ,` class
method.`),dZ.forEach(t),$Wo=i(Ks),VL=n(Ks,"P",{});var jje=s(VL);kWo=r(jje,"This class cannot be instantiated directly using "),eue=n(jje,"CODE",{});var cht=s(eue);SWo=r(cht,"__init__()"),cht.forEach(t),RWo=r(jje," (throws an error)."),jje.forEach(t),PWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var DA=s(ht);T(XL.$$.fragment,DA),BWo=i(DA),oue=n(DA,"P",{});var mht=s(oue);IWo=r(mht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mht.forEach(t),qWo=i(DA),nd=n(DA,"P",{});var cZ=s(nd);NWo=r(cZ,`Note:
Loading a model from its configuration file does `),rue=n(cZ,"STRONG",{});var fht=s(rue);jWo=r(fht,"not"),fht.forEach(t),DWo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(cZ,"A",{href:!0});var ght=s(WV);GWo=r(ght,"from_pretrained()"),ght.forEach(t),OWo=r(cZ," to load the model weights."),cZ.forEach(t),VWo=i(DA),T(Q1.$$.fragment,DA),DA.forEach(t),XWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var fa=s(lo);T(zL.$$.fragment,fa),zWo=i(fa),tue=n(fa,"P",{});var hht=s(tue);WWo=r(hht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hht.forEach(t),QWo=i(fa),ja=n(fa,"P",{});var GA=s(ja);HWo=r(GA,"The model class to instantiate is selected based on the "),aue=n(GA,"CODE",{});var uht=s(aue);UWo=r(uht,"model_type"),uht.forEach(t),JWo=r(GA,` property of the config object (either
passed as an argument or loaded from `),nue=n(GA,"CODE",{});var pht=s(nue);YWo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),KWo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(GA,"CODE",{});var _ht=s(sue);ZWo=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),eQo=r(GA,":"),GA.forEach(t),oQo=i(fa),Fe=n(fa,"UL",{});var Te=s(Fe);H1=n(Te,"LI",{});var a$e=s(H1);lue=n(a$e,"STRONG",{});var bht=s(lue);rQo=r(bht,"beit"),bht.forEach(t),tQo=r(a$e," \u2014 "),QV=n(a$e,"A",{href:!0});var vht=s(QV);aQo=r(vht,"BeitForImageClassification"),vht.forEach(t),nQo=r(a$e," (BEiT model)"),a$e.forEach(t),sQo=i(Te),U1=n(Te,"LI",{});var n$e=s(U1);iue=n(n$e,"STRONG",{});var Fht=s(iue);lQo=r(Fht,"convnext"),Fht.forEach(t),iQo=r(n$e," \u2014 "),HV=n(n$e,"A",{href:!0});var Tht=s(HV);dQo=r(Tht,"ConvNextForImageClassification"),Tht.forEach(t),cQo=r(n$e," (ConvNext model)"),n$e.forEach(t),mQo=i(Te),J1=n(Te,"LI",{});var s$e=s(J1);due=n(s$e,"STRONG",{});var Mht=s(due);fQo=r(Mht,"cvt"),Mht.forEach(t),gQo=r(s$e," \u2014 "),UV=n(s$e,"A",{href:!0});var Eht=s(UV);hQo=r(Eht,"CvtForImageClassification"),Eht.forEach(t),uQo=r(s$e," (CvT model)"),s$e.forEach(t),pQo=i(Te),Y1=n(Te,"LI",{});var l$e=s(Y1);cue=n(l$e,"STRONG",{});var Cht=s(cue);_Qo=r(Cht,"data2vec-vision"),Cht.forEach(t),bQo=r(l$e," \u2014 "),JV=n(l$e,"A",{href:!0});var wht=s(JV);vQo=r(wht,"Data2VecVisionForImageClassification"),wht.forEach(t),FQo=r(l$e," (Data2VecVision model)"),l$e.forEach(t),TQo=i(Te),Ps=n(Te,"LI",{});var x$=s(Ps);mue=n(x$,"STRONG",{});var Aht=s(mue);MQo=r(Aht,"deit"),Aht.forEach(t),EQo=r(x$," \u2014 "),YV=n(x$,"A",{href:!0});var yht=s(YV);CQo=r(yht,"DeiTForImageClassification"),yht.forEach(t),wQo=r(x$," or "),KV=n(x$,"A",{href:!0});var Lht=s(KV);AQo=r(Lht,"DeiTForImageClassificationWithTeacher"),Lht.forEach(t),yQo=r(x$," (DeiT model)"),x$.forEach(t),LQo=i(Te),K1=n(Te,"LI",{});var i$e=s(K1);fue=n(i$e,"STRONG",{});var xht=s(fue);xQo=r(xht,"imagegpt"),xht.forEach(t),$Qo=r(i$e," \u2014 "),ZV=n(i$e,"A",{href:!0});var $ht=s(ZV);kQo=r($ht,"ImageGPTForImageClassification"),$ht.forEach(t),SQo=r(i$e," (ImageGPT model)"),i$e.forEach(t),RQo=i(Te),ut=n(Te,"LI",{});var fm=s(ut);gue=n(fm,"STRONG",{});var kht=s(gue);PQo=r(kht,"perceiver"),kht.forEach(t),BQo=r(fm," \u2014 "),eX=n(fm,"A",{href:!0});var Sht=s(eX);IQo=r(Sht,"PerceiverForImageClassificationLearned"),Sht.forEach(t),qQo=r(fm," or "),oX=n(fm,"A",{href:!0});var Rht=s(oX);NQo=r(Rht,"PerceiverForImageClassificationFourier"),Rht.forEach(t),jQo=r(fm," or "),rX=n(fm,"A",{href:!0});var Pht=s(rX);DQo=r(Pht,"PerceiverForImageClassificationConvProcessing"),Pht.forEach(t),GQo=r(fm," (Perceiver model)"),fm.forEach(t),OQo=i(Te),Z1=n(Te,"LI",{});var d$e=s(Z1);hue=n(d$e,"STRONG",{});var Bht=s(hue);VQo=r(Bht,"poolformer"),Bht.forEach(t),XQo=r(d$e," \u2014 "),tX=n(d$e,"A",{href:!0});var Iht=s(tX);zQo=r(Iht,"PoolFormerForImageClassification"),Iht.forEach(t),WQo=r(d$e," (PoolFormer model)"),d$e.forEach(t),QQo=i(Te),eT=n(Te,"LI",{});var c$e=s(eT);uue=n(c$e,"STRONG",{});var qht=s(uue);HQo=r(qht,"regnet"),qht.forEach(t),UQo=r(c$e," \u2014 "),aX=n(c$e,"A",{href:!0});var Nht=s(aX);JQo=r(Nht,"RegNetForImageClassification"),Nht.forEach(t),YQo=r(c$e," (RegNet model)"),c$e.forEach(t),KQo=i(Te),oT=n(Te,"LI",{});var m$e=s(oT);pue=n(m$e,"STRONG",{});var jht=s(pue);ZQo=r(jht,"resnet"),jht.forEach(t),eHo=r(m$e," \u2014 "),nX=n(m$e,"A",{href:!0});var Dht=s(nX);oHo=r(Dht,"ResNetForImageClassification"),Dht.forEach(t),rHo=r(m$e," (ResNet model)"),m$e.forEach(t),tHo=i(Te),rT=n(Te,"LI",{});var f$e=s(rT);_ue=n(f$e,"STRONG",{});var Ght=s(_ue);aHo=r(Ght,"segformer"),Ght.forEach(t),nHo=r(f$e," \u2014 "),sX=n(f$e,"A",{href:!0});var Oht=s(sX);sHo=r(Oht,"SegformerForImageClassification"),Oht.forEach(t),lHo=r(f$e," (SegFormer model)"),f$e.forEach(t),iHo=i(Te),tT=n(Te,"LI",{});var g$e=s(tT);bue=n(g$e,"STRONG",{});var Vht=s(bue);dHo=r(Vht,"swin"),Vht.forEach(t),cHo=r(g$e," \u2014 "),lX=n(g$e,"A",{href:!0});var Xht=s(lX);mHo=r(Xht,"SwinForImageClassification"),Xht.forEach(t),fHo=r(g$e," (Swin model)"),g$e.forEach(t),gHo=i(Te),aT=n(Te,"LI",{});var h$e=s(aT);vue=n(h$e,"STRONG",{});var zht=s(vue);hHo=r(zht,"van"),zht.forEach(t),uHo=r(h$e," \u2014 "),iX=n(h$e,"A",{href:!0});var Wht=s(iX);pHo=r(Wht,"VanForImageClassification"),Wht.forEach(t),_Ho=r(h$e," (VAN model)"),h$e.forEach(t),bHo=i(Te),nT=n(Te,"LI",{});var u$e=s(nT);Fue=n(u$e,"STRONG",{});var Qht=s(Fue);vHo=r(Qht,"vit"),Qht.forEach(t),FHo=r(u$e," \u2014 "),dX=n(u$e,"A",{href:!0});var Hht=s(dX);THo=r(Hht,"ViTForImageClassification"),Hht.forEach(t),MHo=r(u$e," (ViT model)"),u$e.forEach(t),Te.forEach(t),EHo=i(fa),sT=n(fa,"P",{});var p$e=s(sT);CHo=r(p$e,"The model is set in evaluation mode by default using "),Tue=n(p$e,"CODE",{});var Uht=s(Tue);wHo=r(Uht,"model.eval()"),Uht.forEach(t),AHo=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(p$e,"CODE",{});var Jht=s(Mue);yHo=r(Jht,"model.train()"),Jht.forEach(t),p$e.forEach(t),LHo=i(fa),T(lT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Iqe=i(m),sd=n(m,"H2",{class:!0});var Dje=s(sd);iT=n(Dje,"A",{id:!0,class:!0,href:!0});var Yht=s(iT);Eue=n(Yht,"SPAN",{});var Kht=s(Eue);T(WL.$$.fragment,Kht),Kht.forEach(t),Yht.forEach(t),xHo=i(Dje),Cue=n(Dje,"SPAN",{});var Zht=s(Cue);$Ho=r(Zht,"AutoModelForVision2Seq"),Zht.forEach(t),Dje.forEach(t),qqe=i(m),Do=n(m,"DIV",{class:!0});var Zs=s(Do);T(QL.$$.fragment,Zs),kHo=i(Zs),ld=n(Zs,"P",{});var mZ=s(ld);SHo=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cX=n(mZ,"A",{href:!0});var eut=s(cX);RHo=r(eut,"from_pretrained()"),eut.forEach(t),PHo=r(mZ," class method or the "),mX=n(mZ,"A",{href:!0});var out=s(mX);BHo=r(out,"from_config()"),out.forEach(t),IHo=r(mZ,` class
method.`),mZ.forEach(t),qHo=i(Zs),HL=n(Zs,"P",{});var Gje=s(HL);NHo=r(Gje,"This class cannot be instantiated directly using "),wue=n(Gje,"CODE",{});var rut=s(wue);jHo=r(rut,"__init__()"),rut.forEach(t),DHo=r(Gje," (throws an error)."),Gje.forEach(t),GHo=i(Zs),pt=n(Zs,"DIV",{class:!0});var OA=s(pt);T(UL.$$.fragment,OA),OHo=i(OA),Aue=n(OA,"P",{});var tut=s(Aue);VHo=r(tut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tut.forEach(t),XHo=i(OA),id=n(OA,"P",{});var fZ=s(id);zHo=r(fZ,`Note:
Loading a model from its configuration file does `),yue=n(fZ,"STRONG",{});var aut=s(yue);WHo=r(aut,"not"),aut.forEach(t),QHo=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(fZ,"A",{href:!0});var nut=s(fX);HHo=r(nut,"from_pretrained()"),nut.forEach(t),UHo=r(fZ," to load the model weights."),fZ.forEach(t),JHo=i(OA),T(dT.$$.fragment,OA),OA.forEach(t),YHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(JL.$$.fragment,ga),KHo=i(ga),Lue=n(ga,"P",{});var sut=s(Lue);ZHo=r(sut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sut.forEach(t),eUo=i(ga),Da=n(ga,"P",{});var VA=s(Da);oUo=r(VA,"The model class to instantiate is selected based on the "),xue=n(VA,"CODE",{});var lut=s(xue);rUo=r(lut,"model_type"),lut.forEach(t),tUo=r(VA,` property of the config object (either
passed as an argument or loaded from `),$ue=n(VA,"CODE",{});var iut=s($ue);aUo=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),nUo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(VA,"CODE",{});var dut=s(kue);sUo=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),lUo=r(VA,":"),VA.forEach(t),iUo=i(ga),Sue=n(ga,"UL",{});var cut=s(Sue);cT=n(cut,"LI",{});var _$e=s(cT);Rue=n(_$e,"STRONG",{});var mut=s(Rue);dUo=r(mut,"vision-encoder-decoder"),mut.forEach(t),cUo=r(_$e," \u2014 "),gX=n(_$e,"A",{href:!0});var fut=s(gX);mUo=r(fut,"VisionEncoderDecoderModel"),fut.forEach(t),fUo=r(_$e," (Vision Encoder decoder model)"),_$e.forEach(t),cut.forEach(t),gUo=i(ga),mT=n(ga,"P",{});var b$e=s(mT);hUo=r(b$e,"The model is set in evaluation mode by default using "),Pue=n(b$e,"CODE",{});var gut=s(Pue);uUo=r(gut,"model.eval()"),gut.forEach(t),pUo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(b$e,"CODE",{});var hut=s(Bue);_Uo=r(hut,"model.train()"),hut.forEach(t),b$e.forEach(t),bUo=i(ga),T(fT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Nqe=i(m),dd=n(m,"H2",{class:!0});var Oje=s(dd);gT=n(Oje,"A",{id:!0,class:!0,href:!0});var uut=s(gT);Iue=n(uut,"SPAN",{});var put=s(Iue);T(YL.$$.fragment,put),put.forEach(t),uut.forEach(t),vUo=i(Oje),que=n(Oje,"SPAN",{});var _ut=s(que);FUo=r(_ut,"AutoModelForAudioClassification"),_ut.forEach(t),Oje.forEach(t),jqe=i(m),Go=n(m,"DIV",{class:!0});var el=s(Go);T(KL.$$.fragment,el),TUo=i(el),cd=n(el,"P",{});var gZ=s(cd);MUo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hX=n(gZ,"A",{href:!0});var but=s(hX);EUo=r(but,"from_pretrained()"),but.forEach(t),CUo=r(gZ," class method or the "),uX=n(gZ,"A",{href:!0});var vut=s(uX);wUo=r(vut,"from_config()"),vut.forEach(t),AUo=r(gZ,` class
method.`),gZ.forEach(t),yUo=i(el),ZL=n(el,"P",{});var Vje=s(ZL);LUo=r(Vje,"This class cannot be instantiated directly using "),Nue=n(Vje,"CODE",{});var Fut=s(Nue);xUo=r(Fut,"__init__()"),Fut.forEach(t),$Uo=r(Vje," (throws an error)."),Vje.forEach(t),kUo=i(el),_t=n(el,"DIV",{class:!0});var XA=s(_t);T(e8.$$.fragment,XA),SUo=i(XA),jue=n(XA,"P",{});var Tut=s(jue);RUo=r(Tut,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Tut.forEach(t),PUo=i(XA),md=n(XA,"P",{});var hZ=s(md);BUo=r(hZ,`Note:
Loading a model from its configuration file does `),Due=n(hZ,"STRONG",{});var Mut=s(Due);IUo=r(Mut,"not"),Mut.forEach(t),qUo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(hZ,"A",{href:!0});var Eut=s(pX);NUo=r(Eut,"from_pretrained()"),Eut.forEach(t),jUo=r(hZ," to load the model weights."),hZ.forEach(t),DUo=i(XA),T(hT.$$.fragment,XA),XA.forEach(t),GUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(o8.$$.fragment,ha),OUo=i(ha),Gue=n(ha,"P",{});var Cut=s(Gue);VUo=r(Cut,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cut.forEach(t),XUo=i(ha),Ga=n(ha,"P",{});var zA=s(Ga);zUo=r(zA,"The model class to instantiate is selected based on the "),Oue=n(zA,"CODE",{});var wut=s(Oue);WUo=r(wut,"model_type"),wut.forEach(t),QUo=r(zA,` property of the config object (either
passed as an argument or loaded from `),Vue=n(zA,"CODE",{});var Aut=s(Vue);HUo=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),UUo=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(zA,"CODE",{});var yut=s(Xue);JUo=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),YUo=r(zA,":"),zA.forEach(t),KUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);uT=n(Oe,"LI",{});var v$e=s(uT);zue=n(v$e,"STRONG",{});var Lut=s(zue);ZUo=r(Lut,"data2vec-audio"),Lut.forEach(t),eJo=r(v$e," \u2014 "),_X=n(v$e,"A",{href:!0});var xut=s(_X);oJo=r(xut,"Data2VecAudioForSequenceClassification"),xut.forEach(t),rJo=r(v$e," (Data2VecAudio model)"),v$e.forEach(t),tJo=i(Oe),pT=n(Oe,"LI",{});var F$e=s(pT);Wue=n(F$e,"STRONG",{});var $ut=s(Wue);aJo=r($ut,"hubert"),$ut.forEach(t),nJo=r(F$e," \u2014 "),bX=n(F$e,"A",{href:!0});var kut=s(bX);sJo=r(kut,"HubertForSequenceClassification"),kut.forEach(t),lJo=r(F$e," (Hubert model)"),F$e.forEach(t),iJo=i(Oe),_T=n(Oe,"LI",{});var T$e=s(_T);Que=n(T$e,"STRONG",{});var Sut=s(Que);dJo=r(Sut,"sew"),Sut.forEach(t),cJo=r(T$e," \u2014 "),vX=n(T$e,"A",{href:!0});var Rut=s(vX);mJo=r(Rut,"SEWForSequenceClassification"),Rut.forEach(t),fJo=r(T$e," (SEW model)"),T$e.forEach(t),gJo=i(Oe),bT=n(Oe,"LI",{});var M$e=s(bT);Hue=n(M$e,"STRONG",{});var Put=s(Hue);hJo=r(Put,"sew-d"),Put.forEach(t),uJo=r(M$e," \u2014 "),FX=n(M$e,"A",{href:!0});var But=s(FX);pJo=r(But,"SEWDForSequenceClassification"),But.forEach(t),_Jo=r(M$e," (SEW-D model)"),M$e.forEach(t),bJo=i(Oe),vT=n(Oe,"LI",{});var E$e=s(vT);Uue=n(E$e,"STRONG",{});var Iut=s(Uue);vJo=r(Iut,"unispeech"),Iut.forEach(t),FJo=r(E$e," \u2014 "),TX=n(E$e,"A",{href:!0});var qut=s(TX);TJo=r(qut,"UniSpeechForSequenceClassification"),qut.forEach(t),MJo=r(E$e," (UniSpeech model)"),E$e.forEach(t),EJo=i(Oe),FT=n(Oe,"LI",{});var C$e=s(FT);Jue=n(C$e,"STRONG",{});var Nut=s(Jue);CJo=r(Nut,"unispeech-sat"),Nut.forEach(t),wJo=r(C$e," \u2014 "),MX=n(C$e,"A",{href:!0});var jut=s(MX);AJo=r(jut,"UniSpeechSatForSequenceClassification"),jut.forEach(t),yJo=r(C$e," (UniSpeechSat model)"),C$e.forEach(t),LJo=i(Oe),TT=n(Oe,"LI",{});var w$e=s(TT);Yue=n(w$e,"STRONG",{});var Dut=s(Yue);xJo=r(Dut,"wav2vec2"),Dut.forEach(t),$Jo=r(w$e," \u2014 "),EX=n(w$e,"A",{href:!0});var Gut=s(EX);kJo=r(Gut,"Wav2Vec2ForSequenceClassification"),Gut.forEach(t),SJo=r(w$e," (Wav2Vec2 model)"),w$e.forEach(t),RJo=i(Oe),MT=n(Oe,"LI",{});var A$e=s(MT);Kue=n(A$e,"STRONG",{});var Out=s(Kue);PJo=r(Out,"wav2vec2-conformer"),Out.forEach(t),BJo=r(A$e," \u2014 "),CX=n(A$e,"A",{href:!0});var Vut=s(CX);IJo=r(Vut,"Wav2Vec2ConformerForSequenceClassification"),Vut.forEach(t),qJo=r(A$e," (Wav2Vec2-Conformer model)"),A$e.forEach(t),NJo=i(Oe),ET=n(Oe,"LI",{});var y$e=s(ET);Zue=n(y$e,"STRONG",{});var Xut=s(Zue);jJo=r(Xut,"wavlm"),Xut.forEach(t),DJo=r(y$e," \u2014 "),wX=n(y$e,"A",{href:!0});var zut=s(wX);GJo=r(zut,"WavLMForSequenceClassification"),zut.forEach(t),OJo=r(y$e," (WavLM model)"),y$e.forEach(t),Oe.forEach(t),VJo=i(ha),CT=n(ha,"P",{});var L$e=s(CT);XJo=r(L$e,"The model is set in evaluation mode by default using "),epe=n(L$e,"CODE",{});var Wut=s(epe);zJo=r(Wut,"model.eval()"),Wut.forEach(t),WJo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(L$e,"CODE",{});var Qut=s(ope);QJo=r(Qut,"model.train()"),Qut.forEach(t),L$e.forEach(t),HJo=i(ha),T(wT.$$.fragment,ha),ha.forEach(t),el.forEach(t),Dqe=i(m),fd=n(m,"H2",{class:!0});var Xje=s(fd);AT=n(Xje,"A",{id:!0,class:!0,href:!0});var Hut=s(AT);rpe=n(Hut,"SPAN",{});var Uut=s(rpe);T(r8.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),UJo=i(Xje),tpe=n(Xje,"SPAN",{});var Jut=s(tpe);JJo=r(Jut,"AutoModelForAudioFrameClassification"),Jut.forEach(t),Xje.forEach(t),Gqe=i(m),Oo=n(m,"DIV",{class:!0});var ol=s(Oo);T(t8.$$.fragment,ol),YJo=i(ol),gd=n(ol,"P",{});var uZ=s(gd);KJo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AX=n(uZ,"A",{href:!0});var Yut=s(AX);ZJo=r(Yut,"from_pretrained()"),Yut.forEach(t),eYo=r(uZ," class method or the "),yX=n(uZ,"A",{href:!0});var Kut=s(yX);oYo=r(Kut,"from_config()"),Kut.forEach(t),rYo=r(uZ,` class
method.`),uZ.forEach(t),tYo=i(ol),a8=n(ol,"P",{});var zje=s(a8);aYo=r(zje,"This class cannot be instantiated directly using "),ape=n(zje,"CODE",{});var Zut=s(ape);nYo=r(Zut,"__init__()"),Zut.forEach(t),sYo=r(zje," (throws an error)."),zje.forEach(t),lYo=i(ol),bt=n(ol,"DIV",{class:!0});var WA=s(bt);T(n8.$$.fragment,WA),iYo=i(WA),npe=n(WA,"P",{});var ept=s(npe);dYo=r(ept,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ept.forEach(t),cYo=i(WA),hd=n(WA,"P",{});var pZ=s(hd);mYo=r(pZ,`Note:
Loading a model from its configuration file does `),spe=n(pZ,"STRONG",{});var opt=s(spe);fYo=r(opt,"not"),opt.forEach(t),gYo=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(pZ,"A",{href:!0});var rpt=s(LX);hYo=r(rpt,"from_pretrained()"),rpt.forEach(t),uYo=r(pZ," to load the model weights."),pZ.forEach(t),pYo=i(WA),T(yT.$$.fragment,WA),WA.forEach(t),_Yo=i(ol),mo=n(ol,"DIV",{class:!0});var ua=s(mo);T(s8.$$.fragment,ua),bYo=i(ua),lpe=n(ua,"P",{});var tpt=s(lpe);vYo=r(tpt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tpt.forEach(t),FYo=i(ua),Oa=n(ua,"P",{});var QA=s(Oa);TYo=r(QA,"The model class to instantiate is selected based on the "),ipe=n(QA,"CODE",{});var apt=s(ipe);MYo=r(apt,"model_type"),apt.forEach(t),EYo=r(QA,` property of the config object (either
passed as an argument or loaded from `),dpe=n(QA,"CODE",{});var npt=s(dpe);CYo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),wYo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(QA,"CODE",{});var spt=s(cpe);AYo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),yYo=r(QA,":"),QA.forEach(t),LYo=i(ua),Kr=n(ua,"UL",{});var rl=s(Kr);LT=n(rl,"LI",{});var x$e=s(LT);mpe=n(x$e,"STRONG",{});var lpt=s(mpe);xYo=r(lpt,"data2vec-audio"),lpt.forEach(t),$Yo=r(x$e," \u2014 "),xX=n(x$e,"A",{href:!0});var ipt=s(xX);kYo=r(ipt,"Data2VecAudioForAudioFrameClassification"),ipt.forEach(t),SYo=r(x$e," (Data2VecAudio model)"),x$e.forEach(t),RYo=i(rl),xT=n(rl,"LI",{});var $$e=s(xT);fpe=n($$e,"STRONG",{});var dpt=s(fpe);PYo=r(dpt,"unispeech-sat"),dpt.forEach(t),BYo=r($$e," \u2014 "),$X=n($$e,"A",{href:!0});var cpt=s($X);IYo=r(cpt,"UniSpeechSatForAudioFrameClassification"),cpt.forEach(t),qYo=r($$e," (UniSpeechSat model)"),$$e.forEach(t),NYo=i(rl),$T=n(rl,"LI",{});var k$e=s($T);gpe=n(k$e,"STRONG",{});var mpt=s(gpe);jYo=r(mpt,"wav2vec2"),mpt.forEach(t),DYo=r(k$e," \u2014 "),kX=n(k$e,"A",{href:!0});var fpt=s(kX);GYo=r(fpt,"Wav2Vec2ForAudioFrameClassification"),fpt.forEach(t),OYo=r(k$e," (Wav2Vec2 model)"),k$e.forEach(t),VYo=i(rl),kT=n(rl,"LI",{});var S$e=s(kT);hpe=n(S$e,"STRONG",{});var gpt=s(hpe);XYo=r(gpt,"wav2vec2-conformer"),gpt.forEach(t),zYo=r(S$e," \u2014 "),SX=n(S$e,"A",{href:!0});var hpt=s(SX);WYo=r(hpt,"Wav2Vec2ConformerForAudioFrameClassification"),hpt.forEach(t),QYo=r(S$e," (Wav2Vec2-Conformer model)"),S$e.forEach(t),HYo=i(rl),ST=n(rl,"LI",{});var R$e=s(ST);upe=n(R$e,"STRONG",{});var upt=s(upe);UYo=r(upt,"wavlm"),upt.forEach(t),JYo=r(R$e," \u2014 "),RX=n(R$e,"A",{href:!0});var ppt=s(RX);YYo=r(ppt,"WavLMForAudioFrameClassification"),ppt.forEach(t),KYo=r(R$e," (WavLM model)"),R$e.forEach(t),rl.forEach(t),ZYo=i(ua),RT=n(ua,"P",{});var P$e=s(RT);eKo=r(P$e,"The model is set in evaluation mode by default using "),ppe=n(P$e,"CODE",{});var _pt=s(ppe);oKo=r(_pt,"model.eval()"),_pt.forEach(t),rKo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(P$e,"CODE",{});var bpt=s(_pe);tKo=r(bpt,"model.train()"),bpt.forEach(t),P$e.forEach(t),aKo=i(ua),T(PT.$$.fragment,ua),ua.forEach(t),ol.forEach(t),Oqe=i(m),ud=n(m,"H2",{class:!0});var Wje=s(ud);BT=n(Wje,"A",{id:!0,class:!0,href:!0});var vpt=s(BT);bpe=n(vpt,"SPAN",{});var Fpt=s(bpe);T(l8.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),nKo=i(Wje),vpe=n(Wje,"SPAN",{});var Tpt=s(vpe);sKo=r(Tpt,"AutoModelForCTC"),Tpt.forEach(t),Wje.forEach(t),Vqe=i(m),Vo=n(m,"DIV",{class:!0});var tl=s(Vo);T(i8.$$.fragment,tl),lKo=i(tl),pd=n(tl,"P",{});var _Z=s(pd);iKo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PX=n(_Z,"A",{href:!0});var Mpt=s(PX);dKo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),cKo=r(_Z," class method or the "),BX=n(_Z,"A",{href:!0});var Ept=s(BX);mKo=r(Ept,"from_config()"),Ept.forEach(t),fKo=r(_Z,` class
method.`),_Z.forEach(t),gKo=i(tl),d8=n(tl,"P",{});var Qje=s(d8);hKo=r(Qje,"This class cannot be instantiated directly using "),Fpe=n(Qje,"CODE",{});var Cpt=s(Fpe);uKo=r(Cpt,"__init__()"),Cpt.forEach(t),pKo=r(Qje," (throws an error)."),Qje.forEach(t),_Ko=i(tl),vt=n(tl,"DIV",{class:!0});var HA=s(vt);T(c8.$$.fragment,HA),bKo=i(HA),Tpe=n(HA,"P",{});var wpt=s(Tpe);vKo=r(wpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),wpt.forEach(t),FKo=i(HA),_d=n(HA,"P",{});var bZ=s(_d);TKo=r(bZ,`Note:
Loading a model from its configuration file does `),Mpe=n(bZ,"STRONG",{});var Apt=s(Mpe);MKo=r(Apt,"not"),Apt.forEach(t),EKo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(bZ,"A",{href:!0});var ypt=s(IX);CKo=r(ypt,"from_pretrained()"),ypt.forEach(t),wKo=r(bZ," to load the model weights."),bZ.forEach(t),AKo=i(HA),T(IT.$$.fragment,HA),HA.forEach(t),yKo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(m8.$$.fragment,pa),LKo=i(pa),Epe=n(pa,"P",{});var Lpt=s(Epe);xKo=r(Lpt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Lpt.forEach(t),$Ko=i(pa),Va=n(pa,"P",{});var UA=s(Va);kKo=r(UA,"The model class to instantiate is selected based on the "),Cpe=n(UA,"CODE",{});var xpt=s(Cpe);SKo=r(xpt,"model_type"),xpt.forEach(t),RKo=r(UA,` property of the config object (either
passed as an argument or loaded from `),wpe=n(UA,"CODE",{});var $pt=s(wpe);PKo=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),BKo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(UA,"CODE",{});var kpt=s(Ape);IKo=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),qKo=r(UA,":"),UA.forEach(t),NKo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);qT=n(Ve,"LI",{});var B$e=s(qT);ype=n(B$e,"STRONG",{});var Spt=s(ype);jKo=r(Spt,"data2vec-audio"),Spt.forEach(t),DKo=r(B$e," \u2014 "),qX=n(B$e,"A",{href:!0});var Rpt=s(qX);GKo=r(Rpt,"Data2VecAudioForCTC"),Rpt.forEach(t),OKo=r(B$e," (Data2VecAudio model)"),B$e.forEach(t),VKo=i(Ve),NT=n(Ve,"LI",{});var I$e=s(NT);Lpe=n(I$e,"STRONG",{});var Ppt=s(Lpe);XKo=r(Ppt,"hubert"),Ppt.forEach(t),zKo=r(I$e," \u2014 "),NX=n(I$e,"A",{href:!0});var Bpt=s(NX);WKo=r(Bpt,"HubertForCTC"),Bpt.forEach(t),QKo=r(I$e," (Hubert model)"),I$e.forEach(t),HKo=i(Ve),jT=n(Ve,"LI",{});var q$e=s(jT);xpe=n(q$e,"STRONG",{});var Ipt=s(xpe);UKo=r(Ipt,"sew"),Ipt.forEach(t),JKo=r(q$e," \u2014 "),jX=n(q$e,"A",{href:!0});var qpt=s(jX);YKo=r(qpt,"SEWForCTC"),qpt.forEach(t),KKo=r(q$e," (SEW model)"),q$e.forEach(t),ZKo=i(Ve),DT=n(Ve,"LI",{});var N$e=s(DT);$pe=n(N$e,"STRONG",{});var Npt=s($pe);eZo=r(Npt,"sew-d"),Npt.forEach(t),oZo=r(N$e," \u2014 "),DX=n(N$e,"A",{href:!0});var jpt=s(DX);rZo=r(jpt,"SEWDForCTC"),jpt.forEach(t),tZo=r(N$e," (SEW-D model)"),N$e.forEach(t),aZo=i(Ve),GT=n(Ve,"LI",{});var j$e=s(GT);kpe=n(j$e,"STRONG",{});var Dpt=s(kpe);nZo=r(Dpt,"unispeech"),Dpt.forEach(t),sZo=r(j$e," \u2014 "),GX=n(j$e,"A",{href:!0});var Gpt=s(GX);lZo=r(Gpt,"UniSpeechForCTC"),Gpt.forEach(t),iZo=r(j$e," (UniSpeech model)"),j$e.forEach(t),dZo=i(Ve),OT=n(Ve,"LI",{});var D$e=s(OT);Spe=n(D$e,"STRONG",{});var Opt=s(Spe);cZo=r(Opt,"unispeech-sat"),Opt.forEach(t),mZo=r(D$e," \u2014 "),OX=n(D$e,"A",{href:!0});var Vpt=s(OX);fZo=r(Vpt,"UniSpeechSatForCTC"),Vpt.forEach(t),gZo=r(D$e," (UniSpeechSat model)"),D$e.forEach(t),hZo=i(Ve),VT=n(Ve,"LI",{});var G$e=s(VT);Rpe=n(G$e,"STRONG",{});var Xpt=s(Rpe);uZo=r(Xpt,"wav2vec2"),Xpt.forEach(t),pZo=r(G$e," \u2014 "),VX=n(G$e,"A",{href:!0});var zpt=s(VX);_Zo=r(zpt,"Wav2Vec2ForCTC"),zpt.forEach(t),bZo=r(G$e," (Wav2Vec2 model)"),G$e.forEach(t),vZo=i(Ve),XT=n(Ve,"LI",{});var O$e=s(XT);Ppe=n(O$e,"STRONG",{});var Wpt=s(Ppe);FZo=r(Wpt,"wav2vec2-conformer"),Wpt.forEach(t),TZo=r(O$e," \u2014 "),XX=n(O$e,"A",{href:!0});var Qpt=s(XX);MZo=r(Qpt,"Wav2Vec2ConformerForCTC"),Qpt.forEach(t),EZo=r(O$e," (Wav2Vec2-Conformer model)"),O$e.forEach(t),CZo=i(Ve),zT=n(Ve,"LI",{});var V$e=s(zT);Bpe=n(V$e,"STRONG",{});var Hpt=s(Bpe);wZo=r(Hpt,"wavlm"),Hpt.forEach(t),AZo=r(V$e," \u2014 "),zX=n(V$e,"A",{href:!0});var Upt=s(zX);yZo=r(Upt,"WavLMForCTC"),Upt.forEach(t),LZo=r(V$e," (WavLM model)"),V$e.forEach(t),Ve.forEach(t),xZo=i(pa),WT=n(pa,"P",{});var X$e=s(WT);$Zo=r(X$e,"The model is set in evaluation mode by default using "),Ipe=n(X$e,"CODE",{});var Jpt=s(Ipe);kZo=r(Jpt,"model.eval()"),Jpt.forEach(t),SZo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(X$e,"CODE",{});var Ypt=s(qpe);RZo=r(Ypt,"model.train()"),Ypt.forEach(t),X$e.forEach(t),PZo=i(pa),T(QT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Xqe=i(m),bd=n(m,"H2",{class:!0});var Hje=s(bd);HT=n(Hje,"A",{id:!0,class:!0,href:!0});var Kpt=s(HT);Npe=n(Kpt,"SPAN",{});var Zpt=s(Npe);T(f8.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),BZo=i(Hje),jpe=n(Hje,"SPAN",{});var e_t=s(jpe);IZo=r(e_t,"AutoModelForSpeechSeq2Seq"),e_t.forEach(t),Hje.forEach(t),zqe=i(m),Xo=n(m,"DIV",{class:!0});var al=s(Xo);T(g8.$$.fragment,al),qZo=i(al),vd=n(al,"P",{});var vZ=s(vd);NZo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WX=n(vZ,"A",{href:!0});var o_t=s(WX);jZo=r(o_t,"from_pretrained()"),o_t.forEach(t),DZo=r(vZ," class method or the "),QX=n(vZ,"A",{href:!0});var r_t=s(QX);GZo=r(r_t,"from_config()"),r_t.forEach(t),OZo=r(vZ,` class
method.`),vZ.forEach(t),VZo=i(al),h8=n(al,"P",{});var Uje=s(h8);XZo=r(Uje,"This class cannot be instantiated directly using "),Dpe=n(Uje,"CODE",{});var t_t=s(Dpe);zZo=r(t_t,"__init__()"),t_t.forEach(t),WZo=r(Uje," (throws an error)."),Uje.forEach(t),QZo=i(al),Ft=n(al,"DIV",{class:!0});var JA=s(Ft);T(u8.$$.fragment,JA),HZo=i(JA),Gpe=n(JA,"P",{});var a_t=s(Gpe);UZo=r(a_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),a_t.forEach(t),JZo=i(JA),Fd=n(JA,"P",{});var FZ=s(Fd);YZo=r(FZ,`Note:
Loading a model from its configuration file does `),Ope=n(FZ,"STRONG",{});var n_t=s(Ope);KZo=r(n_t,"not"),n_t.forEach(t),ZZo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(FZ,"A",{href:!0});var s_t=s(HX);eer=r(s_t,"from_pretrained()"),s_t.forEach(t),oer=r(FZ," to load the model weights."),FZ.forEach(t),rer=i(JA),T(UT.$$.fragment,JA),JA.forEach(t),ter=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(p8.$$.fragment,_a),aer=i(_a),Vpe=n(_a,"P",{});var l_t=s(Vpe);ner=r(l_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l_t.forEach(t),ser=i(_a),Xa=n(_a,"P",{});var YA=s(Xa);ler=r(YA,"The model class to instantiate is selected based on the "),Xpe=n(YA,"CODE",{});var i_t=s(Xpe);ier=r(i_t,"model_type"),i_t.forEach(t),der=r(YA,` property of the config object (either
passed as an argument or loaded from `),zpe=n(YA,"CODE",{});var d_t=s(zpe);cer=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),mer=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(YA,"CODE",{});var c_t=s(Wpe);fer=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),ger=r(YA,":"),YA.forEach(t),her=i(_a),_8=n(_a,"UL",{});var Jje=s(_8);JT=n(Jje,"LI",{});var z$e=s(JT);Qpe=n(z$e,"STRONG",{});var m_t=s(Qpe);uer=r(m_t,"speech-encoder-decoder"),m_t.forEach(t),per=r(z$e," \u2014 "),UX=n(z$e,"A",{href:!0});var f_t=s(UX);_er=r(f_t,"SpeechEncoderDecoderModel"),f_t.forEach(t),ber=r(z$e," (Speech Encoder decoder model)"),z$e.forEach(t),ver=i(Jje),YT=n(Jje,"LI",{});var W$e=s(YT);Hpe=n(W$e,"STRONG",{});var g_t=s(Hpe);Fer=r(g_t,"speech_to_text"),g_t.forEach(t),Ter=r(W$e," \u2014 "),JX=n(W$e,"A",{href:!0});var h_t=s(JX);Mer=r(h_t,"Speech2TextForConditionalGeneration"),h_t.forEach(t),Eer=r(W$e," (Speech2Text model)"),W$e.forEach(t),Jje.forEach(t),Cer=i(_a),KT=n(_a,"P",{});var Q$e=s(KT);wer=r(Q$e,"The model is set in evaluation mode by default using "),Upe=n(Q$e,"CODE",{});var u_t=s(Upe);Aer=r(u_t,"model.eval()"),u_t.forEach(t),yer=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(Q$e,"CODE",{});var p_t=s(Jpe);Ler=r(p_t,"model.train()"),p_t.forEach(t),Q$e.forEach(t),xer=i(_a),T(ZT.$$.fragment,_a),_a.forEach(t),al.forEach(t),Wqe=i(m),Td=n(m,"H2",{class:!0});var Yje=s(Td);eM=n(Yje,"A",{id:!0,class:!0,href:!0});var __t=s(eM);Ype=n(__t,"SPAN",{});var b_t=s(Ype);T(b8.$$.fragment,b_t),b_t.forEach(t),__t.forEach(t),$er=i(Yje),Kpe=n(Yje,"SPAN",{});var v_t=s(Kpe);ker=r(v_t,"AutoModelForAudioXVector"),v_t.forEach(t),Yje.forEach(t),Qqe=i(m),zo=n(m,"DIV",{class:!0});var nl=s(zo);T(v8.$$.fragment,nl),Ser=i(nl),Md=n(nl,"P",{});var TZ=s(Md);Rer=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YX=n(TZ,"A",{href:!0});var F_t=s(YX);Per=r(F_t,"from_pretrained()"),F_t.forEach(t),Ber=r(TZ," class method or the "),KX=n(TZ,"A",{href:!0});var T_t=s(KX);Ier=r(T_t,"from_config()"),T_t.forEach(t),qer=r(TZ,` class
method.`),TZ.forEach(t),Ner=i(nl),F8=n(nl,"P",{});var Kje=s(F8);jer=r(Kje,"This class cannot be instantiated directly using "),Zpe=n(Kje,"CODE",{});var M_t=s(Zpe);Der=r(M_t,"__init__()"),M_t.forEach(t),Ger=r(Kje," (throws an error)."),Kje.forEach(t),Oer=i(nl),Tt=n(nl,"DIV",{class:!0});var KA=s(Tt);T(T8.$$.fragment,KA),Ver=i(KA),e_e=n(KA,"P",{});var E_t=s(e_e);Xer=r(E_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),E_t.forEach(t),zer=i(KA),Ed=n(KA,"P",{});var MZ=s(Ed);Wer=r(MZ,`Note:
Loading a model from its configuration file does `),o_e=n(MZ,"STRONG",{});var C_t=s(o_e);Qer=r(C_t,"not"),C_t.forEach(t),Her=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(MZ,"A",{href:!0});var w_t=s(ZX);Uer=r(w_t,"from_pretrained()"),w_t.forEach(t),Jer=r(MZ," to load the model weights."),MZ.forEach(t),Yer=i(KA),T(oM.$$.fragment,KA),KA.forEach(t),Ker=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(M8.$$.fragment,ba),Zer=i(ba),r_e=n(ba,"P",{});var A_t=s(r_e);eor=r(A_t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),A_t.forEach(t),oor=i(ba),za=n(ba,"P",{});var ZA=s(za);ror=r(ZA,"The model class to instantiate is selected based on the "),t_e=n(ZA,"CODE",{});var y_t=s(t_e);tor=r(y_t,"model_type"),y_t.forEach(t),aor=r(ZA,` property of the config object (either
passed as an argument or loaded from `),a_e=n(ZA,"CODE",{});var L_t=s(a_e);nor=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),sor=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(ZA,"CODE",{});var x_t=s(n_e);lor=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),ior=r(ZA,":"),ZA.forEach(t),dor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);rM=n(sl,"LI",{});var H$e=s(rM);s_e=n(H$e,"STRONG",{});var $_t=s(s_e);cor=r($_t,"data2vec-audio"),$_t.forEach(t),mor=r(H$e," \u2014 "),ez=n(H$e,"A",{href:!0});var k_t=s(ez);gor=r(k_t,"Data2VecAudioForXVector"),k_t.forEach(t),hor=r(H$e," (Data2VecAudio model)"),H$e.forEach(t),uor=i(sl),tM=n(sl,"LI",{});var U$e=s(tM);l_e=n(U$e,"STRONG",{});var S_t=s(l_e);por=r(S_t,"unispeech-sat"),S_t.forEach(t),_or=r(U$e," \u2014 "),oz=n(U$e,"A",{href:!0});var R_t=s(oz);bor=r(R_t,"UniSpeechSatForXVector"),R_t.forEach(t),vor=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),For=i(sl),aM=n(sl,"LI",{});var J$e=s(aM);i_e=n(J$e,"STRONG",{});var P_t=s(i_e);Tor=r(P_t,"wav2vec2"),P_t.forEach(t),Mor=r(J$e," \u2014 "),rz=n(J$e,"A",{href:!0});var B_t=s(rz);Eor=r(B_t,"Wav2Vec2ForXVector"),B_t.forEach(t),Cor=r(J$e," (Wav2Vec2 model)"),J$e.forEach(t),wor=i(sl),nM=n(sl,"LI",{});var Y$e=s(nM);d_e=n(Y$e,"STRONG",{});var I_t=s(d_e);Aor=r(I_t,"wav2vec2-conformer"),I_t.forEach(t),yor=r(Y$e," \u2014 "),tz=n(Y$e,"A",{href:!0});var q_t=s(tz);Lor=r(q_t,"Wav2Vec2ConformerForXVector"),q_t.forEach(t),xor=r(Y$e," (Wav2Vec2-Conformer model)"),Y$e.forEach(t),$or=i(sl),sM=n(sl,"LI",{});var K$e=s(sM);c_e=n(K$e,"STRONG",{});var N_t=s(c_e);kor=r(N_t,"wavlm"),N_t.forEach(t),Sor=r(K$e," \u2014 "),az=n(K$e,"A",{href:!0});var j_t=s(az);Ror=r(j_t,"WavLMForXVector"),j_t.forEach(t),Por=r(K$e," (WavLM model)"),K$e.forEach(t),sl.forEach(t),Bor=i(ba),lM=n(ba,"P",{});var Z$e=s(lM);Ior=r(Z$e,"The model is set in evaluation mode by default using "),m_e=n(Z$e,"CODE",{});var D_t=s(m_e);qor=r(D_t,"model.eval()"),D_t.forEach(t),Nor=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(Z$e,"CODE",{});var G_t=s(f_e);jor=r(G_t,"model.train()"),G_t.forEach(t),Z$e.forEach(t),Dor=i(ba),T(iM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Hqe=i(m),Cd=n(m,"H2",{class:!0});var Zje=s(Cd);dM=n(Zje,"A",{id:!0,class:!0,href:!0});var O_t=s(dM);g_e=n(O_t,"SPAN",{});var V_t=s(g_e);T(E8.$$.fragment,V_t),V_t.forEach(t),O_t.forEach(t),Gor=i(Zje),h_e=n(Zje,"SPAN",{});var X_t=s(h_e);Oor=r(X_t,"AutoModelForMaskedImageModeling"),X_t.forEach(t),Zje.forEach(t),Uqe=i(m),Wo=n(m,"DIV",{class:!0});var ll=s(Wo);T(C8.$$.fragment,ll),Vor=i(ll),wd=n(ll,"P",{});var EZ=s(wd);Xor=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nz=n(EZ,"A",{href:!0});var z_t=s(nz);zor=r(z_t,"from_pretrained()"),z_t.forEach(t),Wor=r(EZ," class method or the "),sz=n(EZ,"A",{href:!0});var W_t=s(sz);Qor=r(W_t,"from_config()"),W_t.forEach(t),Hor=r(EZ,` class
method.`),EZ.forEach(t),Uor=i(ll),w8=n(ll,"P",{});var eDe=s(w8);Jor=r(eDe,"This class cannot be instantiated directly using "),u_e=n(eDe,"CODE",{});var Q_t=s(u_e);Yor=r(Q_t,"__init__()"),Q_t.forEach(t),Kor=r(eDe," (throws an error)."),eDe.forEach(t),Zor=i(ll),Mt=n(ll,"DIV",{class:!0});var e6=s(Mt);T(A8.$$.fragment,e6),err=i(e6),p_e=n(e6,"P",{});var H_t=s(p_e);orr=r(H_t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),H_t.forEach(t),rrr=i(e6),Ad=n(e6,"P",{});var CZ=s(Ad);trr=r(CZ,`Note:
Loading a model from its configuration file does `),__e=n(CZ,"STRONG",{});var U_t=s(__e);arr=r(U_t,"not"),U_t.forEach(t),nrr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(CZ,"A",{href:!0});var J_t=s(lz);srr=r(J_t,"from_pretrained()"),J_t.forEach(t),lrr=r(CZ," to load the model weights."),CZ.forEach(t),irr=i(e6),T(cM.$$.fragment,e6),e6.forEach(t),drr=i(ll),uo=n(ll,"DIV",{class:!0});var va=s(uo);T(y8.$$.fragment,va),crr=i(va),b_e=n(va,"P",{});var Y_t=s(b_e);mrr=r(Y_t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Y_t.forEach(t),frr=i(va),Wa=n(va,"P",{});var o6=s(Wa);grr=r(o6,"The model class to instantiate is selected based on the "),v_e=n(o6,"CODE",{});var K_t=s(v_e);hrr=r(K_t,"model_type"),K_t.forEach(t),urr=r(o6,` property of the config object (either
passed as an argument or loaded from `),F_e=n(o6,"CODE",{});var Z_t=s(F_e);prr=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),_rr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(o6,"CODE",{});var ebt=s(T_e);brr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),vrr=r(o6,":"),o6.forEach(t),Frr=i(va),yd=n(va,"UL",{});var wZ=s(yd);mM=n(wZ,"LI",{});var eke=s(mM);M_e=n(eke,"STRONG",{});var obt=s(M_e);Trr=r(obt,"deit"),obt.forEach(t),Mrr=r(eke," \u2014 "),iz=n(eke,"A",{href:!0});var rbt=s(iz);Err=r(rbt,"DeiTForMaskedImageModeling"),rbt.forEach(t),Crr=r(eke," (DeiT model)"),eke.forEach(t),wrr=i(wZ),fM=n(wZ,"LI",{});var oke=s(fM);E_e=n(oke,"STRONG",{});var tbt=s(E_e);Arr=r(tbt,"swin"),tbt.forEach(t),yrr=r(oke," \u2014 "),dz=n(oke,"A",{href:!0});var abt=s(dz);Lrr=r(abt,"SwinForMaskedImageModeling"),abt.forEach(t),xrr=r(oke," (Swin model)"),oke.forEach(t),$rr=i(wZ),gM=n(wZ,"LI",{});var rke=s(gM);C_e=n(rke,"STRONG",{});var nbt=s(C_e);krr=r(nbt,"vit"),nbt.forEach(t),Srr=r(rke," \u2014 "),cz=n(rke,"A",{href:!0});var sbt=s(cz);Rrr=r(sbt,"ViTForMaskedImageModeling"),sbt.forEach(t),Prr=r(rke," (ViT model)"),rke.forEach(t),wZ.forEach(t),Brr=i(va),hM=n(va,"P",{});var tke=s(hM);Irr=r(tke,"The model is set in evaluation mode by default using "),w_e=n(tke,"CODE",{});var lbt=s(w_e);qrr=r(lbt,"model.eval()"),lbt.forEach(t),Nrr=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(tke,"CODE",{});var ibt=s(A_e);jrr=r(ibt,"model.train()"),ibt.forEach(t),tke.forEach(t),Drr=i(va),T(uM.$$.fragment,va),va.forEach(t),ll.forEach(t),Jqe=i(m),Ld=n(m,"H2",{class:!0});var oDe=s(Ld);pM=n(oDe,"A",{id:!0,class:!0,href:!0});var dbt=s(pM);y_e=n(dbt,"SPAN",{});var cbt=s(y_e);T(L8.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),Grr=i(oDe),L_e=n(oDe,"SPAN",{});var mbt=s(L_e);Orr=r(mbt,"AutoModelForObjectDetection"),mbt.forEach(t),oDe.forEach(t),Yqe=i(m),Qo=n(m,"DIV",{class:!0});var il=s(Qo);T(x8.$$.fragment,il),Vrr=i(il),xd=n(il,"P",{});var AZ=s(xd);Xrr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mz=n(AZ,"A",{href:!0});var fbt=s(mz);zrr=r(fbt,"from_pretrained()"),fbt.forEach(t),Wrr=r(AZ," class method or the "),fz=n(AZ,"A",{href:!0});var gbt=s(fz);Qrr=r(gbt,"from_config()"),gbt.forEach(t),Hrr=r(AZ,` class
method.`),AZ.forEach(t),Urr=i(il),$8=n(il,"P",{});var rDe=s($8);Jrr=r(rDe,"This class cannot be instantiated directly using "),x_e=n(rDe,"CODE",{});var hbt=s(x_e);Yrr=r(hbt,"__init__()"),hbt.forEach(t),Krr=r(rDe," (throws an error)."),rDe.forEach(t),Zrr=i(il),Et=n(il,"DIV",{class:!0});var r6=s(Et);T(k8.$$.fragment,r6),etr=i(r6),$_e=n(r6,"P",{});var ubt=s($_e);otr=r(ubt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ubt.forEach(t),rtr=i(r6),$d=n(r6,"P",{});var yZ=s($d);ttr=r(yZ,`Note:
Loading a model from its configuration file does `),k_e=n(yZ,"STRONG",{});var pbt=s(k_e);atr=r(pbt,"not"),pbt.forEach(t),ntr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(yZ,"A",{href:!0});var _bt=s(gz);str=r(_bt,"from_pretrained()"),_bt.forEach(t),ltr=r(yZ," to load the model weights."),yZ.forEach(t),itr=i(r6),T(_M.$$.fragment,r6),r6.forEach(t),dtr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(S8.$$.fragment,Fa),ctr=i(Fa),S_e=n(Fa,"P",{});var bbt=s(S_e);mtr=r(bbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bbt.forEach(t),ftr=i(Fa),Qa=n(Fa,"P",{});var t6=s(Qa);gtr=r(t6,"The model class to instantiate is selected based on the "),R_e=n(t6,"CODE",{});var vbt=s(R_e);htr=r(vbt,"model_type"),vbt.forEach(t),utr=r(t6,` property of the config object (either
passed as an argument or loaded from `),P_e=n(t6,"CODE",{});var Fbt=s(P_e);ptr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),_tr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(t6,"CODE",{});var Tbt=s(B_e);btr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),vtr=r(t6,":"),t6.forEach(t),Ftr=i(Fa),R8=n(Fa,"UL",{});var tDe=s(R8);bM=n(tDe,"LI",{});var ake=s(bM);I_e=n(ake,"STRONG",{});var Mbt=s(I_e);Ttr=r(Mbt,"detr"),Mbt.forEach(t),Mtr=r(ake," \u2014 "),hz=n(ake,"A",{href:!0});var Ebt=s(hz);Etr=r(Ebt,"DetrForObjectDetection"),Ebt.forEach(t),Ctr=r(ake," (DETR model)"),ake.forEach(t),wtr=i(tDe),vM=n(tDe,"LI",{});var nke=s(vM);q_e=n(nke,"STRONG",{});var Cbt=s(q_e);Atr=r(Cbt,"yolos"),Cbt.forEach(t),ytr=r(nke," \u2014 "),uz=n(nke,"A",{href:!0});var wbt=s(uz);Ltr=r(wbt,"YolosForObjectDetection"),wbt.forEach(t),xtr=r(nke," (YOLOS model)"),nke.forEach(t),tDe.forEach(t),$tr=i(Fa),FM=n(Fa,"P",{});var ske=s(FM);ktr=r(ske,"The model is set in evaluation mode by default using "),N_e=n(ske,"CODE",{});var Abt=s(N_e);Str=r(Abt,"model.eval()"),Abt.forEach(t),Rtr=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(ske,"CODE",{});var ybt=s(j_e);Ptr=r(ybt,"model.train()"),ybt.forEach(t),ske.forEach(t),Btr=i(Fa),T(TM.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Kqe=i(m),kd=n(m,"H2",{class:!0});var aDe=s(kd);MM=n(aDe,"A",{id:!0,class:!0,href:!0});var Lbt=s(MM);D_e=n(Lbt,"SPAN",{});var xbt=s(D_e);T(P8.$$.fragment,xbt),xbt.forEach(t),Lbt.forEach(t),Itr=i(aDe),G_e=n(aDe,"SPAN",{});var $bt=s(G_e);qtr=r($bt,"AutoModelForImageSegmentation"),$bt.forEach(t),aDe.forEach(t),Zqe=i(m),Ho=n(m,"DIV",{class:!0});var dl=s(Ho);T(B8.$$.fragment,dl),Ntr=i(dl),Sd=n(dl,"P",{});var LZ=s(Sd);jtr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pz=n(LZ,"A",{href:!0});var kbt=s(pz);Dtr=r(kbt,"from_pretrained()"),kbt.forEach(t),Gtr=r(LZ," class method or the "),_z=n(LZ,"A",{href:!0});var Sbt=s(_z);Otr=r(Sbt,"from_config()"),Sbt.forEach(t),Vtr=r(LZ,` class
method.`),LZ.forEach(t),Xtr=i(dl),I8=n(dl,"P",{});var nDe=s(I8);ztr=r(nDe,"This class cannot be instantiated directly using "),O_e=n(nDe,"CODE",{});var Rbt=s(O_e);Wtr=r(Rbt,"__init__()"),Rbt.forEach(t),Qtr=r(nDe," (throws an error)."),nDe.forEach(t),Htr=i(dl),Ct=n(dl,"DIV",{class:!0});var a6=s(Ct);T(q8.$$.fragment,a6),Utr=i(a6),V_e=n(a6,"P",{});var Pbt=s(V_e);Jtr=r(Pbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Pbt.forEach(t),Ytr=i(a6),Rd=n(a6,"P",{});var xZ=s(Rd);Ktr=r(xZ,`Note:
Loading a model from its configuration file does `),X_e=n(xZ,"STRONG",{});var Bbt=s(X_e);Ztr=r(Bbt,"not"),Bbt.forEach(t),ear=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(xZ,"A",{href:!0});var Ibt=s(bz);oar=r(Ibt,"from_pretrained()"),Ibt.forEach(t),rar=r(xZ," to load the model weights."),xZ.forEach(t),tar=i(a6),T(EM.$$.fragment,a6),a6.forEach(t),aar=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(N8.$$.fragment,Ta),nar=i(Ta),z_e=n(Ta,"P",{});var qbt=s(z_e);sar=r(qbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qbt.forEach(t),lar=i(Ta),Ha=n(Ta,"P",{});var n6=s(Ha);iar=r(n6,"The model class to instantiate is selected based on the "),W_e=n(n6,"CODE",{});var Nbt=s(W_e);dar=r(Nbt,"model_type"),Nbt.forEach(t),car=r(n6,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(n6,"CODE",{});var jbt=s(Q_e);mar=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),far=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(n6,"CODE",{});var Dbt=s(H_e);gar=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),har=r(n6,":"),n6.forEach(t),uar=i(Ta),U_e=n(Ta,"UL",{});var Gbt=s(U_e);CM=n(Gbt,"LI",{});var lke=s(CM);J_e=n(lke,"STRONG",{});var Obt=s(J_e);par=r(Obt,"detr"),Obt.forEach(t),_ar=r(lke," \u2014 "),vz=n(lke,"A",{href:!0});var Vbt=s(vz);bar=r(Vbt,"DetrForSegmentation"),Vbt.forEach(t),Far=r(lke," (DETR model)"),lke.forEach(t),Gbt.forEach(t),Tar=i(Ta),wM=n(Ta,"P",{});var ike=s(wM);Mar=r(ike,"The model is set in evaluation mode by default using "),Y_e=n(ike,"CODE",{});var Xbt=s(Y_e);Ear=r(Xbt,"model.eval()"),Xbt.forEach(t),Car=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(ike,"CODE",{});var zbt=s(K_e);war=r(zbt,"model.train()"),zbt.forEach(t),ike.forEach(t),Aar=i(Ta),T(AM.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),eNe=i(m),Pd=n(m,"H2",{class:!0});var sDe=s(Pd);yM=n(sDe,"A",{id:!0,class:!0,href:!0});var Wbt=s(yM);Z_e=n(Wbt,"SPAN",{});var Qbt=s(Z_e);T(j8.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),yar=i(sDe),ebe=n(sDe,"SPAN",{});var Hbt=s(ebe);Lar=r(Hbt,"AutoModelForSemanticSegmentation"),Hbt.forEach(t),sDe.forEach(t),oNe=i(m),Uo=n(m,"DIV",{class:!0});var cl=s(Uo);T(D8.$$.fragment,cl),xar=i(cl),Bd=n(cl,"P",{});var $Z=s(Bd);$ar=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fz=n($Z,"A",{href:!0});var Ubt=s(Fz);kar=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Sar=r($Z," class method or the "),Tz=n($Z,"A",{href:!0});var Jbt=s(Tz);Rar=r(Jbt,"from_config()"),Jbt.forEach(t),Par=r($Z,` class
method.`),$Z.forEach(t),Bar=i(cl),G8=n(cl,"P",{});var lDe=s(G8);Iar=r(lDe,"This class cannot be instantiated directly using "),obe=n(lDe,"CODE",{});var Ybt=s(obe);qar=r(Ybt,"__init__()"),Ybt.forEach(t),Nar=r(lDe," (throws an error)."),lDe.forEach(t),jar=i(cl),wt=n(cl,"DIV",{class:!0});var s6=s(wt);T(O8.$$.fragment,s6),Dar=i(s6),rbe=n(s6,"P",{});var Kbt=s(rbe);Gar=r(Kbt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kbt.forEach(t),Oar=i(s6),Id=n(s6,"P",{});var kZ=s(Id);Var=r(kZ,`Note:
Loading a model from its configuration file does `),tbe=n(kZ,"STRONG",{});var Zbt=s(tbe);Xar=r(Zbt,"not"),Zbt.forEach(t),zar=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(kZ,"A",{href:!0});var e2t=s(Mz);War=r(e2t,"from_pretrained()"),e2t.forEach(t),Qar=r(kZ," to load the model weights."),kZ.forEach(t),Har=i(s6),T(LM.$$.fragment,s6),s6.forEach(t),Uar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(V8.$$.fragment,Ma),Jar=i(Ma),abe=n(Ma,"P",{});var o2t=s(abe);Yar=r(o2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),o2t.forEach(t),Kar=i(Ma),Ua=n(Ma,"P",{});var l6=s(Ua);Zar=r(l6,"The model class to instantiate is selected based on the "),nbe=n(l6,"CODE",{});var r2t=s(nbe);enr=r(r2t,"model_type"),r2t.forEach(t),onr=r(l6,` property of the config object (either
passed as an argument or loaded from `),sbe=n(l6,"CODE",{});var t2t=s(sbe);rnr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),tnr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(l6,"CODE",{});var a2t=s(lbe);anr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),nnr=r(l6,":"),l6.forEach(t),snr=i(Ma),Ja=n(Ma,"UL",{});var i6=s(Ja);xM=n(i6,"LI",{});var dke=s(xM);ibe=n(dke,"STRONG",{});var n2t=s(ibe);lnr=r(n2t,"beit"),n2t.forEach(t),inr=r(dke," \u2014 "),Ez=n(dke,"A",{href:!0});var s2t=s(Ez);dnr=r(s2t,"BeitForSemanticSegmentation"),s2t.forEach(t),cnr=r(dke," (BEiT model)"),dke.forEach(t),mnr=i(i6),$M=n(i6,"LI",{});var cke=s($M);dbe=n(cke,"STRONG",{});var l2t=s(dbe);fnr=r(l2t,"data2vec-vision"),l2t.forEach(t),gnr=r(cke," \u2014 "),Cz=n(cke,"A",{href:!0});var i2t=s(Cz);hnr=r(i2t,"Data2VecVisionForSemanticSegmentation"),i2t.forEach(t),unr=r(cke," (Data2VecVision model)"),cke.forEach(t),pnr=i(i6),kM=n(i6,"LI",{});var mke=s(kM);cbe=n(mke,"STRONG",{});var d2t=s(cbe);_nr=r(d2t,"dpt"),d2t.forEach(t),bnr=r(mke," \u2014 "),wz=n(mke,"A",{href:!0});var c2t=s(wz);vnr=r(c2t,"DPTForSemanticSegmentation"),c2t.forEach(t),Fnr=r(mke," (DPT model)"),mke.forEach(t),Tnr=i(i6),SM=n(i6,"LI",{});var fke=s(SM);mbe=n(fke,"STRONG",{});var m2t=s(mbe);Mnr=r(m2t,"segformer"),m2t.forEach(t),Enr=r(fke," \u2014 "),Az=n(fke,"A",{href:!0});var f2t=s(Az);Cnr=r(f2t,"SegformerForSemanticSegmentation"),f2t.forEach(t),wnr=r(fke," (SegFormer model)"),fke.forEach(t),i6.forEach(t),Anr=i(Ma),RM=n(Ma,"P",{});var gke=s(RM);ynr=r(gke,"The model is set in evaluation mode by default using "),fbe=n(gke,"CODE",{});var g2t=s(fbe);Lnr=r(g2t,"model.eval()"),g2t.forEach(t),xnr=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(gke,"CODE",{});var h2t=s(gbe);$nr=r(h2t,"model.train()"),h2t.forEach(t),gke.forEach(t),knr=i(Ma),T(PM.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),rNe=i(m),qd=n(m,"H2",{class:!0});var iDe=s(qd);BM=n(iDe,"A",{id:!0,class:!0,href:!0});var u2t=s(BM);hbe=n(u2t,"SPAN",{});var p2t=s(hbe);T(X8.$$.fragment,p2t),p2t.forEach(t),u2t.forEach(t),Snr=i(iDe),ube=n(iDe,"SPAN",{});var _2t=s(ube);Rnr=r(_2t,"AutoModelForInstanceSegmentation"),_2t.forEach(t),iDe.forEach(t),tNe=i(m),Jo=n(m,"DIV",{class:!0});var ml=s(Jo);T(z8.$$.fragment,ml),Pnr=i(ml),Nd=n(ml,"P",{});var SZ=s(Nd);Bnr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yz=n(SZ,"A",{href:!0});var b2t=s(yz);Inr=r(b2t,"from_pretrained()"),b2t.forEach(t),qnr=r(SZ," class method or the "),Lz=n(SZ,"A",{href:!0});var v2t=s(Lz);Nnr=r(v2t,"from_config()"),v2t.forEach(t),jnr=r(SZ,` class
method.`),SZ.forEach(t),Dnr=i(ml),W8=n(ml,"P",{});var dDe=s(W8);Gnr=r(dDe,"This class cannot be instantiated directly using "),pbe=n(dDe,"CODE",{});var F2t=s(pbe);Onr=r(F2t,"__init__()"),F2t.forEach(t),Vnr=r(dDe," (throws an error)."),dDe.forEach(t),Xnr=i(ml),At=n(ml,"DIV",{class:!0});var d6=s(At);T(Q8.$$.fragment,d6),znr=i(d6),_be=n(d6,"P",{});var T2t=s(_be);Wnr=r(T2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),T2t.forEach(t),Qnr=i(d6),jd=n(d6,"P",{});var RZ=s(jd);Hnr=r(RZ,`Note:
Loading a model from its configuration file does `),bbe=n(RZ,"STRONG",{});var M2t=s(bbe);Unr=r(M2t,"not"),M2t.forEach(t),Jnr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(RZ,"A",{href:!0});var E2t=s(xz);Ynr=r(E2t,"from_pretrained()"),E2t.forEach(t),Knr=r(RZ," to load the model weights."),RZ.forEach(t),Znr=i(d6),T(IM.$$.fragment,d6),d6.forEach(t),esr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(H8.$$.fragment,Ea),osr=i(Ea),vbe=n(Ea,"P",{});var C2t=s(vbe);rsr=r(C2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),C2t.forEach(t),tsr=i(Ea),Ya=n(Ea,"P",{});var c6=s(Ya);asr=r(c6,"The model class to instantiate is selected based on the "),Fbe=n(c6,"CODE",{});var w2t=s(Fbe);nsr=r(w2t,"model_type"),w2t.forEach(t),ssr=r(c6,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(c6,"CODE",{});var A2t=s(Tbe);lsr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),isr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(c6,"CODE",{});var y2t=s(Mbe);dsr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),csr=r(c6,":"),c6.forEach(t),msr=i(Ea),Ebe=n(Ea,"UL",{});var L2t=s(Ebe);qM=n(L2t,"LI",{});var hke=s(qM);Cbe=n(hke,"STRONG",{});var x2t=s(Cbe);fsr=r(x2t,"maskformer"),x2t.forEach(t),gsr=r(hke," \u2014 "),$z=n(hke,"A",{href:!0});var $2t=s($z);hsr=r($2t,"MaskFormerForInstanceSegmentation"),$2t.forEach(t),usr=r(hke," (MaskFormer model)"),hke.forEach(t),L2t.forEach(t),psr=i(Ea),NM=n(Ea,"P",{});var uke=s(NM);_sr=r(uke,"The model is set in evaluation mode by default using "),wbe=n(uke,"CODE",{});var k2t=s(wbe);bsr=r(k2t,"model.eval()"),k2t.forEach(t),vsr=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(uke,"CODE",{});var S2t=s(Abe);Fsr=r(S2t,"model.train()"),S2t.forEach(t),uke.forEach(t),Tsr=i(Ea),T(jM.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),aNe=i(m),Dd=n(m,"H2",{class:!0});var cDe=s(Dd);DM=n(cDe,"A",{id:!0,class:!0,href:!0});var R2t=s(DM);ybe=n(R2t,"SPAN",{});var P2t=s(ybe);T(U8.$$.fragment,P2t),P2t.forEach(t),R2t.forEach(t),Msr=i(cDe),Lbe=n(cDe,"SPAN",{});var B2t=s(Lbe);Esr=r(B2t,"TFAutoModel"),B2t.forEach(t),cDe.forEach(t),nNe=i(m),Yo=n(m,"DIV",{class:!0});var fl=s(Yo);T(J8.$$.fragment,fl),Csr=i(fl),Gd=n(fl,"P",{});var PZ=s(Gd);wsr=r(PZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kz=n(PZ,"A",{href:!0});var I2t=s(kz);Asr=r(I2t,"from_pretrained()"),I2t.forEach(t),ysr=r(PZ," class method or the "),Sz=n(PZ,"A",{href:!0});var q2t=s(Sz);Lsr=r(q2t,"from_config()"),q2t.forEach(t),xsr=r(PZ,` class
method.`),PZ.forEach(t),$sr=i(fl),Y8=n(fl,"P",{});var mDe=s(Y8);ksr=r(mDe,"This class cannot be instantiated directly using "),xbe=n(mDe,"CODE",{});var N2t=s(xbe);Ssr=r(N2t,"__init__()"),N2t.forEach(t),Rsr=r(mDe," (throws an error)."),mDe.forEach(t),Psr=i(fl),yt=n(fl,"DIV",{class:!0});var m6=s(yt);T(K8.$$.fragment,m6),Bsr=i(m6),$be=n(m6,"P",{});var j2t=s($be);Isr=r(j2t,"Instantiates one of the base model classes of the library from a configuration."),j2t.forEach(t),qsr=i(m6),Od=n(m6,"P",{});var BZ=s(Od);Nsr=r(BZ,`Note:
Loading a model from its configuration file does `),kbe=n(BZ,"STRONG",{});var D2t=s(kbe);jsr=r(D2t,"not"),D2t.forEach(t),Dsr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(BZ,"A",{href:!0});var G2t=s(Rz);Gsr=r(G2t,"from_pretrained()"),G2t.forEach(t),Osr=r(BZ," to load the model weights."),BZ.forEach(t),Vsr=i(m6),T(GM.$$.fragment,m6),m6.forEach(t),Xsr=i(fl),wr=n(fl,"DIV",{class:!0});var gl=s(wr);T(Z8.$$.fragment,gl),zsr=i(gl),Sbe=n(gl,"P",{});var O2t=s(Sbe);Wsr=r(O2t,"Instantiate one of the base model classes of the library from a pretrained model."),O2t.forEach(t),Qsr=i(gl),Ka=n(gl,"P",{});var f6=s(Ka);Hsr=r(f6,"The model class to instantiate is selected based on the "),Rbe=n(f6,"CODE",{});var V2t=s(Rbe);Usr=r(V2t,"model_type"),V2t.forEach(t),Jsr=r(f6,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(f6,"CODE",{});var X2t=s(Pbe);Ysr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Ksr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(f6,"CODE",{});var z2t=s(Bbe);Zsr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),elr=r(f6,":"),f6.forEach(t),olr=i(gl),N=n(gl,"UL",{});var D=s(N);OM=n(D,"LI",{});var pke=s(OM);Ibe=n(pke,"STRONG",{});var W2t=s(Ibe);rlr=r(W2t,"albert"),W2t.forEach(t),tlr=r(pke," \u2014 "),Pz=n(pke,"A",{href:!0});var Q2t=s(Pz);alr=r(Q2t,"TFAlbertModel"),Q2t.forEach(t),nlr=r(pke," (ALBERT model)"),pke.forEach(t),slr=i(D),VM=n(D,"LI",{});var _ke=s(VM);qbe=n(_ke,"STRONG",{});var H2t=s(qbe);llr=r(H2t,"bart"),H2t.forEach(t),ilr=r(_ke," \u2014 "),Bz=n(_ke,"A",{href:!0});var U2t=s(Bz);dlr=r(U2t,"TFBartModel"),U2t.forEach(t),clr=r(_ke," (BART model)"),_ke.forEach(t),mlr=i(D),XM=n(D,"LI",{});var bke=s(XM);Nbe=n(bke,"STRONG",{});var J2t=s(Nbe);flr=r(J2t,"bert"),J2t.forEach(t),glr=r(bke," \u2014 "),Iz=n(bke,"A",{href:!0});var Y2t=s(Iz);hlr=r(Y2t,"TFBertModel"),Y2t.forEach(t),ulr=r(bke," (BERT model)"),bke.forEach(t),plr=i(D),zM=n(D,"LI",{});var vke=s(zM);jbe=n(vke,"STRONG",{});var K2t=s(jbe);_lr=r(K2t,"blenderbot"),K2t.forEach(t),blr=r(vke," \u2014 "),qz=n(vke,"A",{href:!0});var Z2t=s(qz);vlr=r(Z2t,"TFBlenderbotModel"),Z2t.forEach(t),Flr=r(vke," (Blenderbot model)"),vke.forEach(t),Tlr=i(D),WM=n(D,"LI",{});var Fke=s(WM);Dbe=n(Fke,"STRONG",{});var evt=s(Dbe);Mlr=r(evt,"blenderbot-small"),evt.forEach(t),Elr=r(Fke," \u2014 "),Nz=n(Fke,"A",{href:!0});var ovt=s(Nz);Clr=r(ovt,"TFBlenderbotSmallModel"),ovt.forEach(t),wlr=r(Fke," (BlenderbotSmall model)"),Fke.forEach(t),Alr=i(D),QM=n(D,"LI",{});var Tke=s(QM);Gbe=n(Tke,"STRONG",{});var rvt=s(Gbe);ylr=r(rvt,"camembert"),rvt.forEach(t),Llr=r(Tke," \u2014 "),jz=n(Tke,"A",{href:!0});var tvt=s(jz);xlr=r(tvt,"TFCamembertModel"),tvt.forEach(t),$lr=r(Tke," (CamemBERT model)"),Tke.forEach(t),klr=i(D),HM=n(D,"LI",{});var Mke=s(HM);Obe=n(Mke,"STRONG",{});var avt=s(Obe);Slr=r(avt,"clip"),avt.forEach(t),Rlr=r(Mke," \u2014 "),Dz=n(Mke,"A",{href:!0});var nvt=s(Dz);Plr=r(nvt,"TFCLIPModel"),nvt.forEach(t),Blr=r(Mke," (CLIP model)"),Mke.forEach(t),Ilr=i(D),UM=n(D,"LI",{});var Eke=s(UM);Vbe=n(Eke,"STRONG",{});var svt=s(Vbe);qlr=r(svt,"convbert"),svt.forEach(t),Nlr=r(Eke," \u2014 "),Gz=n(Eke,"A",{href:!0});var lvt=s(Gz);jlr=r(lvt,"TFConvBertModel"),lvt.forEach(t),Dlr=r(Eke," (ConvBERT model)"),Eke.forEach(t),Glr=i(D),JM=n(D,"LI",{});var Cke=s(JM);Xbe=n(Cke,"STRONG",{});var ivt=s(Xbe);Olr=r(ivt,"convnext"),ivt.forEach(t),Vlr=r(Cke," \u2014 "),Oz=n(Cke,"A",{href:!0});var dvt=s(Oz);Xlr=r(dvt,"TFConvNextModel"),dvt.forEach(t),zlr=r(Cke," (ConvNext model)"),Cke.forEach(t),Wlr=i(D),YM=n(D,"LI",{});var wke=s(YM);zbe=n(wke,"STRONG",{});var cvt=s(zbe);Qlr=r(cvt,"ctrl"),cvt.forEach(t),Hlr=r(wke," \u2014 "),Vz=n(wke,"A",{href:!0});var mvt=s(Vz);Ulr=r(mvt,"TFCTRLModel"),mvt.forEach(t),Jlr=r(wke," (CTRL model)"),wke.forEach(t),Ylr=i(D),KM=n(D,"LI",{});var Ake=s(KM);Wbe=n(Ake,"STRONG",{});var fvt=s(Wbe);Klr=r(fvt,"data2vec-vision"),fvt.forEach(t),Zlr=r(Ake," \u2014 "),Xz=n(Ake,"A",{href:!0});var gvt=s(Xz);eir=r(gvt,"TFData2VecVisionModel"),gvt.forEach(t),oir=r(Ake," (Data2VecVision model)"),Ake.forEach(t),rir=i(D),ZM=n(D,"LI",{});var yke=s(ZM);Qbe=n(yke,"STRONG",{});var hvt=s(Qbe);tir=r(hvt,"deberta"),hvt.forEach(t),air=r(yke," \u2014 "),zz=n(yke,"A",{href:!0});var uvt=s(zz);nir=r(uvt,"TFDebertaModel"),uvt.forEach(t),sir=r(yke," (DeBERTa model)"),yke.forEach(t),lir=i(D),e4=n(D,"LI",{});var Lke=s(e4);Hbe=n(Lke,"STRONG",{});var pvt=s(Hbe);iir=r(pvt,"deberta-v2"),pvt.forEach(t),dir=r(Lke," \u2014 "),Wz=n(Lke,"A",{href:!0});var _vt=s(Wz);cir=r(_vt,"TFDebertaV2Model"),_vt.forEach(t),mir=r(Lke," (DeBERTa-v2 model)"),Lke.forEach(t),fir=i(D),o4=n(D,"LI",{});var xke=s(o4);Ube=n(xke,"STRONG",{});var bvt=s(Ube);gir=r(bvt,"distilbert"),bvt.forEach(t),hir=r(xke," \u2014 "),Qz=n(xke,"A",{href:!0});var vvt=s(Qz);uir=r(vvt,"TFDistilBertModel"),vvt.forEach(t),pir=r(xke," (DistilBERT model)"),xke.forEach(t),_ir=i(D),r4=n(D,"LI",{});var $ke=s(r4);Jbe=n($ke,"STRONG",{});var Fvt=s(Jbe);bir=r(Fvt,"dpr"),Fvt.forEach(t),vir=r($ke," \u2014 "),Hz=n($ke,"A",{href:!0});var Tvt=s(Hz);Fir=r(Tvt,"TFDPRQuestionEncoder"),Tvt.forEach(t),Tir=r($ke," (DPR model)"),$ke.forEach(t),Mir=i(D),t4=n(D,"LI",{});var kke=s(t4);Ybe=n(kke,"STRONG",{});var Mvt=s(Ybe);Eir=r(Mvt,"electra"),Mvt.forEach(t),Cir=r(kke," \u2014 "),Uz=n(kke,"A",{href:!0});var Evt=s(Uz);wir=r(Evt,"TFElectraModel"),Evt.forEach(t),Air=r(kke," (ELECTRA model)"),kke.forEach(t),yir=i(D),a4=n(D,"LI",{});var Ske=s(a4);Kbe=n(Ske,"STRONG",{});var Cvt=s(Kbe);Lir=r(Cvt,"flaubert"),Cvt.forEach(t),xir=r(Ske," \u2014 "),Jz=n(Ske,"A",{href:!0});var wvt=s(Jz);$ir=r(wvt,"TFFlaubertModel"),wvt.forEach(t),kir=r(Ske," (FlauBERT model)"),Ske.forEach(t),Sir=i(D),Bs=n(D,"LI",{});var $$=s(Bs);Zbe=n($$,"STRONG",{});var Avt=s(Zbe);Rir=r(Avt,"funnel"),Avt.forEach(t),Pir=r($$," \u2014 "),Yz=n($$,"A",{href:!0});var yvt=s(Yz);Bir=r(yvt,"TFFunnelModel"),yvt.forEach(t),Iir=r($$," or "),Kz=n($$,"A",{href:!0});var Lvt=s(Kz);qir=r(Lvt,"TFFunnelBaseModel"),Lvt.forEach(t),Nir=r($$," (Funnel Transformer model)"),$$.forEach(t),jir=i(D),n4=n(D,"LI",{});var Rke=s(n4);e2e=n(Rke,"STRONG",{});var xvt=s(e2e);Dir=r(xvt,"gpt2"),xvt.forEach(t),Gir=r(Rke," \u2014 "),Zz=n(Rke,"A",{href:!0});var $vt=s(Zz);Oir=r($vt,"TFGPT2Model"),$vt.forEach(t),Vir=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),Xir=i(D),s4=n(D,"LI",{});var Pke=s(s4);o2e=n(Pke,"STRONG",{});var kvt=s(o2e);zir=r(kvt,"gptj"),kvt.forEach(t),Wir=r(Pke," \u2014 "),eW=n(Pke,"A",{href:!0});var Svt=s(eW);Qir=r(Svt,"TFGPTJModel"),Svt.forEach(t),Hir=r(Pke," (GPT-J model)"),Pke.forEach(t),Uir=i(D),l4=n(D,"LI",{});var Bke=s(l4);r2e=n(Bke,"STRONG",{});var Rvt=s(r2e);Jir=r(Rvt,"hubert"),Rvt.forEach(t),Yir=r(Bke," \u2014 "),oW=n(Bke,"A",{href:!0});var Pvt=s(oW);Kir=r(Pvt,"TFHubertModel"),Pvt.forEach(t),Zir=r(Bke," (Hubert model)"),Bke.forEach(t),edr=i(D),i4=n(D,"LI",{});var Ike=s(i4);t2e=n(Ike,"STRONG",{});var Bvt=s(t2e);odr=r(Bvt,"layoutlm"),Bvt.forEach(t),rdr=r(Ike," \u2014 "),rW=n(Ike,"A",{href:!0});var Ivt=s(rW);tdr=r(Ivt,"TFLayoutLMModel"),Ivt.forEach(t),adr=r(Ike," (LayoutLM model)"),Ike.forEach(t),ndr=i(D),d4=n(D,"LI",{});var qke=s(d4);a2e=n(qke,"STRONG",{});var qvt=s(a2e);sdr=r(qvt,"led"),qvt.forEach(t),ldr=r(qke," \u2014 "),tW=n(qke,"A",{href:!0});var Nvt=s(tW);idr=r(Nvt,"TFLEDModel"),Nvt.forEach(t),ddr=r(qke," (LED model)"),qke.forEach(t),cdr=i(D),c4=n(D,"LI",{});var Nke=s(c4);n2e=n(Nke,"STRONG",{});var jvt=s(n2e);mdr=r(jvt,"longformer"),jvt.forEach(t),fdr=r(Nke," \u2014 "),aW=n(Nke,"A",{href:!0});var Dvt=s(aW);gdr=r(Dvt,"TFLongformerModel"),Dvt.forEach(t),hdr=r(Nke," (Longformer model)"),Nke.forEach(t),udr=i(D),m4=n(D,"LI",{});var jke=s(m4);s2e=n(jke,"STRONG",{});var Gvt=s(s2e);pdr=r(Gvt,"lxmert"),Gvt.forEach(t),_dr=r(jke," \u2014 "),nW=n(jke,"A",{href:!0});var Ovt=s(nW);bdr=r(Ovt,"TFLxmertModel"),Ovt.forEach(t),vdr=r(jke," (LXMERT model)"),jke.forEach(t),Fdr=i(D),f4=n(D,"LI",{});var Dke=s(f4);l2e=n(Dke,"STRONG",{});var Vvt=s(l2e);Tdr=r(Vvt,"marian"),Vvt.forEach(t),Mdr=r(Dke," \u2014 "),sW=n(Dke,"A",{href:!0});var Xvt=s(sW);Edr=r(Xvt,"TFMarianModel"),Xvt.forEach(t),Cdr=r(Dke," (Marian model)"),Dke.forEach(t),wdr=i(D),g4=n(D,"LI",{});var Gke=s(g4);i2e=n(Gke,"STRONG",{});var zvt=s(i2e);Adr=r(zvt,"mbart"),zvt.forEach(t),ydr=r(Gke," \u2014 "),lW=n(Gke,"A",{href:!0});var Wvt=s(lW);Ldr=r(Wvt,"TFMBartModel"),Wvt.forEach(t),xdr=r(Gke," (mBART model)"),Gke.forEach(t),$dr=i(D),h4=n(D,"LI",{});var Oke=s(h4);d2e=n(Oke,"STRONG",{});var Qvt=s(d2e);kdr=r(Qvt,"mobilebert"),Qvt.forEach(t),Sdr=r(Oke," \u2014 "),iW=n(Oke,"A",{href:!0});var Hvt=s(iW);Rdr=r(Hvt,"TFMobileBertModel"),Hvt.forEach(t),Pdr=r(Oke," (MobileBERT model)"),Oke.forEach(t),Bdr=i(D),u4=n(D,"LI",{});var Vke=s(u4);c2e=n(Vke,"STRONG",{});var Uvt=s(c2e);Idr=r(Uvt,"mpnet"),Uvt.forEach(t),qdr=r(Vke," \u2014 "),dW=n(Vke,"A",{href:!0});var Jvt=s(dW);Ndr=r(Jvt,"TFMPNetModel"),Jvt.forEach(t),jdr=r(Vke," (MPNet model)"),Vke.forEach(t),Ddr=i(D),p4=n(D,"LI",{});var Xke=s(p4);m2e=n(Xke,"STRONG",{});var Yvt=s(m2e);Gdr=r(Yvt,"mt5"),Yvt.forEach(t),Odr=r(Xke," \u2014 "),cW=n(Xke,"A",{href:!0});var Kvt=s(cW);Vdr=r(Kvt,"TFMT5Model"),Kvt.forEach(t),Xdr=r(Xke," (mT5 model)"),Xke.forEach(t),zdr=i(D),_4=n(D,"LI",{});var zke=s(_4);f2e=n(zke,"STRONG",{});var Zvt=s(f2e);Wdr=r(Zvt,"openai-gpt"),Zvt.forEach(t),Qdr=r(zke," \u2014 "),mW=n(zke,"A",{href:!0});var eFt=s(mW);Hdr=r(eFt,"TFOpenAIGPTModel"),eFt.forEach(t),Udr=r(zke," (OpenAI GPT model)"),zke.forEach(t),Jdr=i(D),b4=n(D,"LI",{});var Wke=s(b4);g2e=n(Wke,"STRONG",{});var oFt=s(g2e);Ydr=r(oFt,"pegasus"),oFt.forEach(t),Kdr=r(Wke," \u2014 "),fW=n(Wke,"A",{href:!0});var rFt=s(fW);Zdr=r(rFt,"TFPegasusModel"),rFt.forEach(t),ecr=r(Wke," (Pegasus model)"),Wke.forEach(t),ocr=i(D),v4=n(D,"LI",{});var Qke=s(v4);h2e=n(Qke,"STRONG",{});var tFt=s(h2e);rcr=r(tFt,"rembert"),tFt.forEach(t),tcr=r(Qke," \u2014 "),gW=n(Qke,"A",{href:!0});var aFt=s(gW);acr=r(aFt,"TFRemBertModel"),aFt.forEach(t),ncr=r(Qke," (RemBERT model)"),Qke.forEach(t),scr=i(D),F4=n(D,"LI",{});var Hke=s(F4);u2e=n(Hke,"STRONG",{});var nFt=s(u2e);lcr=r(nFt,"roberta"),nFt.forEach(t),icr=r(Hke," \u2014 "),hW=n(Hke,"A",{href:!0});var sFt=s(hW);dcr=r(sFt,"TFRobertaModel"),sFt.forEach(t),ccr=r(Hke," (RoBERTa model)"),Hke.forEach(t),mcr=i(D),T4=n(D,"LI",{});var Uke=s(T4);p2e=n(Uke,"STRONG",{});var lFt=s(p2e);fcr=r(lFt,"roformer"),lFt.forEach(t),gcr=r(Uke," \u2014 "),uW=n(Uke,"A",{href:!0});var iFt=s(uW);hcr=r(iFt,"TFRoFormerModel"),iFt.forEach(t),ucr=r(Uke," (RoFormer model)"),Uke.forEach(t),pcr=i(D),M4=n(D,"LI",{});var Jke=s(M4);_2e=n(Jke,"STRONG",{});var dFt=s(_2e);_cr=r(dFt,"speech_to_text"),dFt.forEach(t),bcr=r(Jke," \u2014 "),pW=n(Jke,"A",{href:!0});var cFt=s(pW);vcr=r(cFt,"TFSpeech2TextModel"),cFt.forEach(t),Fcr=r(Jke," (Speech2Text model)"),Jke.forEach(t),Tcr=i(D),E4=n(D,"LI",{});var Yke=s(E4);b2e=n(Yke,"STRONG",{});var mFt=s(b2e);Mcr=r(mFt,"swin"),mFt.forEach(t),Ecr=r(Yke," \u2014 "),_W=n(Yke,"A",{href:!0});var fFt=s(_W);Ccr=r(fFt,"TFSwinModel"),fFt.forEach(t),wcr=r(Yke," (Swin model)"),Yke.forEach(t),Acr=i(D),C4=n(D,"LI",{});var Kke=s(C4);v2e=n(Kke,"STRONG",{});var gFt=s(v2e);ycr=r(gFt,"t5"),gFt.forEach(t),Lcr=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var hFt=s(bW);xcr=r(hFt,"TFT5Model"),hFt.forEach(t),$cr=r(Kke," (T5 model)"),Kke.forEach(t),kcr=i(D),w4=n(D,"LI",{});var Zke=s(w4);F2e=n(Zke,"STRONG",{});var uFt=s(F2e);Scr=r(uFt,"tapas"),uFt.forEach(t),Rcr=r(Zke," \u2014 "),vW=n(Zke,"A",{href:!0});var pFt=s(vW);Pcr=r(pFt,"TFTapasModel"),pFt.forEach(t),Bcr=r(Zke," (TAPAS model)"),Zke.forEach(t),Icr=i(D),A4=n(D,"LI",{});var eSe=s(A4);T2e=n(eSe,"STRONG",{});var _Ft=s(T2e);qcr=r(_Ft,"transfo-xl"),_Ft.forEach(t),Ncr=r(eSe," \u2014 "),FW=n(eSe,"A",{href:!0});var bFt=s(FW);jcr=r(bFt,"TFTransfoXLModel"),bFt.forEach(t),Dcr=r(eSe," (Transformer-XL model)"),eSe.forEach(t),Gcr=i(D),y4=n(D,"LI",{});var oSe=s(y4);M2e=n(oSe,"STRONG",{});var vFt=s(M2e);Ocr=r(vFt,"vit"),vFt.forEach(t),Vcr=r(oSe," \u2014 "),TW=n(oSe,"A",{href:!0});var FFt=s(TW);Xcr=r(FFt,"TFViTModel"),FFt.forEach(t),zcr=r(oSe," (ViT model)"),oSe.forEach(t),Wcr=i(D),L4=n(D,"LI",{});var rSe=s(L4);E2e=n(rSe,"STRONG",{});var TFt=s(E2e);Qcr=r(TFt,"vit_mae"),TFt.forEach(t),Hcr=r(rSe," \u2014 "),MW=n(rSe,"A",{href:!0});var MFt=s(MW);Ucr=r(MFt,"TFViTMAEModel"),MFt.forEach(t),Jcr=r(rSe," (ViTMAE model)"),rSe.forEach(t),Ycr=i(D),x4=n(D,"LI",{});var tSe=s(x4);C2e=n(tSe,"STRONG",{});var EFt=s(C2e);Kcr=r(EFt,"wav2vec2"),EFt.forEach(t),Zcr=r(tSe," \u2014 "),EW=n(tSe,"A",{href:!0});var CFt=s(EW);emr=r(CFt,"TFWav2Vec2Model"),CFt.forEach(t),omr=r(tSe," (Wav2Vec2 model)"),tSe.forEach(t),rmr=i(D),$4=n(D,"LI",{});var aSe=s($4);w2e=n(aSe,"STRONG",{});var wFt=s(w2e);tmr=r(wFt,"xlm"),wFt.forEach(t),amr=r(aSe," \u2014 "),CW=n(aSe,"A",{href:!0});var AFt=s(CW);nmr=r(AFt,"TFXLMModel"),AFt.forEach(t),smr=r(aSe," (XLM model)"),aSe.forEach(t),lmr=i(D),k4=n(D,"LI",{});var nSe=s(k4);A2e=n(nSe,"STRONG",{});var yFt=s(A2e);imr=r(yFt,"xlm-roberta"),yFt.forEach(t),dmr=r(nSe," \u2014 "),wW=n(nSe,"A",{href:!0});var LFt=s(wW);cmr=r(LFt,"TFXLMRobertaModel"),LFt.forEach(t),mmr=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),fmr=i(D),S4=n(D,"LI",{});var sSe=s(S4);y2e=n(sSe,"STRONG",{});var xFt=s(y2e);gmr=r(xFt,"xlnet"),xFt.forEach(t),hmr=r(sSe," \u2014 "),AW=n(sSe,"A",{href:!0});var $Ft=s(AW);umr=r($Ft,"TFXLNetModel"),$Ft.forEach(t),pmr=r(sSe," (XLNet model)"),sSe.forEach(t),D.forEach(t),_mr=i(gl),T(R4.$$.fragment,gl),gl.forEach(t),fl.forEach(t),sNe=i(m),Vd=n(m,"H2",{class:!0});var fDe=s(Vd);P4=n(fDe,"A",{id:!0,class:!0,href:!0});var kFt=s(P4);L2e=n(kFt,"SPAN",{});var SFt=s(L2e);T(e7.$$.fragment,SFt),SFt.forEach(t),kFt.forEach(t),bmr=i(fDe),x2e=n(fDe,"SPAN",{});var RFt=s(x2e);vmr=r(RFt,"TFAutoModelForPreTraining"),RFt.forEach(t),fDe.forEach(t),lNe=i(m),Ko=n(m,"DIV",{class:!0});var hl=s(Ko);T(o7.$$.fragment,hl),Fmr=i(hl),Xd=n(hl,"P",{});var IZ=s(Xd);Tmr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yW=n(IZ,"A",{href:!0});var PFt=s(yW);Mmr=r(PFt,"from_pretrained()"),PFt.forEach(t),Emr=r(IZ," class method or the "),LW=n(IZ,"A",{href:!0});var BFt=s(LW);Cmr=r(BFt,"from_config()"),BFt.forEach(t),wmr=r(IZ,` class
method.`),IZ.forEach(t),Amr=i(hl),r7=n(hl,"P",{});var gDe=s(r7);ymr=r(gDe,"This class cannot be instantiated directly using "),$2e=n(gDe,"CODE",{});var IFt=s($2e);Lmr=r(IFt,"__init__()"),IFt.forEach(t),xmr=r(gDe," (throws an error)."),gDe.forEach(t),$mr=i(hl),Lt=n(hl,"DIV",{class:!0});var g6=s(Lt);T(t7.$$.fragment,g6),kmr=i(g6),k2e=n(g6,"P",{});var qFt=s(k2e);Smr=r(qFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qFt.forEach(t),Rmr=i(g6),zd=n(g6,"P",{});var qZ=s(zd);Pmr=r(qZ,`Note:
Loading a model from its configuration file does `),S2e=n(qZ,"STRONG",{});var NFt=s(S2e);Bmr=r(NFt,"not"),NFt.forEach(t),Imr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(qZ,"A",{href:!0});var jFt=s(xW);qmr=r(jFt,"from_pretrained()"),jFt.forEach(t),Nmr=r(qZ," to load the model weights."),qZ.forEach(t),jmr=i(g6),T(B4.$$.fragment,g6),g6.forEach(t),Dmr=i(hl),Ar=n(hl,"DIV",{class:!0});var ul=s(Ar);T(a7.$$.fragment,ul),Gmr=i(ul),R2e=n(ul,"P",{});var DFt=s(R2e);Omr=r(DFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DFt.forEach(t),Vmr=i(ul),Za=n(ul,"P",{});var h6=s(Za);Xmr=r(h6,"The model class to instantiate is selected based on the "),P2e=n(h6,"CODE",{});var GFt=s(P2e);zmr=r(GFt,"model_type"),GFt.forEach(t),Wmr=r(h6,` property of the config object (either
passed as an argument or loaded from `),B2e=n(h6,"CODE",{});var OFt=s(B2e);Qmr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),Hmr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(h6,"CODE",{});var VFt=s(I2e);Umr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),Jmr=r(h6,":"),h6.forEach(t),Ymr=i(ul),se=n(ul,"UL",{});var le=s(se);I4=n(le,"LI",{});var lSe=s(I4);q2e=n(lSe,"STRONG",{});var XFt=s(q2e);Kmr=r(XFt,"albert"),XFt.forEach(t),Zmr=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var zFt=s($W);efr=r(zFt,"TFAlbertForPreTraining"),zFt.forEach(t),ofr=r(lSe," (ALBERT model)"),lSe.forEach(t),rfr=i(le),q4=n(le,"LI",{});var iSe=s(q4);N2e=n(iSe,"STRONG",{});var WFt=s(N2e);tfr=r(WFt,"bart"),WFt.forEach(t),afr=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var QFt=s(kW);nfr=r(QFt,"TFBartForConditionalGeneration"),QFt.forEach(t),sfr=r(iSe," (BART model)"),iSe.forEach(t),lfr=i(le),N4=n(le,"LI",{});var dSe=s(N4);j2e=n(dSe,"STRONG",{});var HFt=s(j2e);ifr=r(HFt,"bert"),HFt.forEach(t),dfr=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var UFt=s(SW);cfr=r(UFt,"TFBertForPreTraining"),UFt.forEach(t),mfr=r(dSe," (BERT model)"),dSe.forEach(t),ffr=i(le),j4=n(le,"LI",{});var cSe=s(j4);D2e=n(cSe,"STRONG",{});var JFt=s(D2e);gfr=r(JFt,"camembert"),JFt.forEach(t),hfr=r(cSe," \u2014 "),RW=n(cSe,"A",{href:!0});var YFt=s(RW);ufr=r(YFt,"TFCamembertForMaskedLM"),YFt.forEach(t),pfr=r(cSe," (CamemBERT model)"),cSe.forEach(t),_fr=i(le),D4=n(le,"LI",{});var mSe=s(D4);G2e=n(mSe,"STRONG",{});var KFt=s(G2e);bfr=r(KFt,"ctrl"),KFt.forEach(t),vfr=r(mSe," \u2014 "),PW=n(mSe,"A",{href:!0});var ZFt=s(PW);Ffr=r(ZFt,"TFCTRLLMHeadModel"),ZFt.forEach(t),Tfr=r(mSe," (CTRL model)"),mSe.forEach(t),Mfr=i(le),G4=n(le,"LI",{});var fSe=s(G4);O2e=n(fSe,"STRONG",{});var e1t=s(O2e);Efr=r(e1t,"distilbert"),e1t.forEach(t),Cfr=r(fSe," \u2014 "),BW=n(fSe,"A",{href:!0});var o1t=s(BW);wfr=r(o1t,"TFDistilBertForMaskedLM"),o1t.forEach(t),Afr=r(fSe," (DistilBERT model)"),fSe.forEach(t),yfr=i(le),O4=n(le,"LI",{});var gSe=s(O4);V2e=n(gSe,"STRONG",{});var r1t=s(V2e);Lfr=r(r1t,"electra"),r1t.forEach(t),xfr=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var t1t=s(IW);$fr=r(t1t,"TFElectraForPreTraining"),t1t.forEach(t),kfr=r(gSe," (ELECTRA model)"),gSe.forEach(t),Sfr=i(le),V4=n(le,"LI",{});var hSe=s(V4);X2e=n(hSe,"STRONG",{});var a1t=s(X2e);Rfr=r(a1t,"flaubert"),a1t.forEach(t),Pfr=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var n1t=s(qW);Bfr=r(n1t,"TFFlaubertWithLMHeadModel"),n1t.forEach(t),Ifr=r(hSe," (FlauBERT model)"),hSe.forEach(t),qfr=i(le),X4=n(le,"LI",{});var uSe=s(X4);z2e=n(uSe,"STRONG",{});var s1t=s(z2e);Nfr=r(s1t,"funnel"),s1t.forEach(t),jfr=r(uSe," \u2014 "),NW=n(uSe,"A",{href:!0});var l1t=s(NW);Dfr=r(l1t,"TFFunnelForPreTraining"),l1t.forEach(t),Gfr=r(uSe," (Funnel Transformer model)"),uSe.forEach(t),Ofr=i(le),z4=n(le,"LI",{});var pSe=s(z4);W2e=n(pSe,"STRONG",{});var i1t=s(W2e);Vfr=r(i1t,"gpt2"),i1t.forEach(t),Xfr=r(pSe," \u2014 "),jW=n(pSe,"A",{href:!0});var d1t=s(jW);zfr=r(d1t,"TFGPT2LMHeadModel"),d1t.forEach(t),Wfr=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),Qfr=i(le),W4=n(le,"LI",{});var _Se=s(W4);Q2e=n(_Se,"STRONG",{});var c1t=s(Q2e);Hfr=r(c1t,"layoutlm"),c1t.forEach(t),Ufr=r(_Se," \u2014 "),DW=n(_Se,"A",{href:!0});var m1t=s(DW);Jfr=r(m1t,"TFLayoutLMForMaskedLM"),m1t.forEach(t),Yfr=r(_Se," (LayoutLM model)"),_Se.forEach(t),Kfr=i(le),Q4=n(le,"LI",{});var bSe=s(Q4);H2e=n(bSe,"STRONG",{});var f1t=s(H2e);Zfr=r(f1t,"lxmert"),f1t.forEach(t),egr=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var g1t=s(GW);ogr=r(g1t,"TFLxmertForPreTraining"),g1t.forEach(t),rgr=r(bSe," (LXMERT model)"),bSe.forEach(t),tgr=i(le),H4=n(le,"LI",{});var vSe=s(H4);U2e=n(vSe,"STRONG",{});var h1t=s(U2e);agr=r(h1t,"mobilebert"),h1t.forEach(t),ngr=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var u1t=s(OW);sgr=r(u1t,"TFMobileBertForPreTraining"),u1t.forEach(t),lgr=r(vSe," (MobileBERT model)"),vSe.forEach(t),igr=i(le),U4=n(le,"LI",{});var FSe=s(U4);J2e=n(FSe,"STRONG",{});var p1t=s(J2e);dgr=r(p1t,"mpnet"),p1t.forEach(t),cgr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var _1t=s(VW);mgr=r(_1t,"TFMPNetForMaskedLM"),_1t.forEach(t),fgr=r(FSe," (MPNet model)"),FSe.forEach(t),ggr=i(le),J4=n(le,"LI",{});var TSe=s(J4);Y2e=n(TSe,"STRONG",{});var b1t=s(Y2e);hgr=r(b1t,"openai-gpt"),b1t.forEach(t),ugr=r(TSe," \u2014 "),XW=n(TSe,"A",{href:!0});var v1t=s(XW);pgr=r(v1t,"TFOpenAIGPTLMHeadModel"),v1t.forEach(t),_gr=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),bgr=i(le),Y4=n(le,"LI",{});var MSe=s(Y4);K2e=n(MSe,"STRONG",{});var F1t=s(K2e);vgr=r(F1t,"roberta"),F1t.forEach(t),Fgr=r(MSe," \u2014 "),zW=n(MSe,"A",{href:!0});var T1t=s(zW);Tgr=r(T1t,"TFRobertaForMaskedLM"),T1t.forEach(t),Mgr=r(MSe," (RoBERTa model)"),MSe.forEach(t),Egr=i(le),K4=n(le,"LI",{});var ESe=s(K4);Z2e=n(ESe,"STRONG",{});var M1t=s(Z2e);Cgr=r(M1t,"t5"),M1t.forEach(t),wgr=r(ESe," \u2014 "),WW=n(ESe,"A",{href:!0});var E1t=s(WW);Agr=r(E1t,"TFT5ForConditionalGeneration"),E1t.forEach(t),ygr=r(ESe," (T5 model)"),ESe.forEach(t),Lgr=i(le),Z4=n(le,"LI",{});var CSe=s(Z4);eve=n(CSe,"STRONG",{});var C1t=s(eve);xgr=r(C1t,"tapas"),C1t.forEach(t),$gr=r(CSe," \u2014 "),QW=n(CSe,"A",{href:!0});var w1t=s(QW);kgr=r(w1t,"TFTapasForMaskedLM"),w1t.forEach(t),Sgr=r(CSe," (TAPAS model)"),CSe.forEach(t),Rgr=i(le),eE=n(le,"LI",{});var wSe=s(eE);ove=n(wSe,"STRONG",{});var A1t=s(ove);Pgr=r(A1t,"transfo-xl"),A1t.forEach(t),Bgr=r(wSe," \u2014 "),HW=n(wSe,"A",{href:!0});var y1t=s(HW);Igr=r(y1t,"TFTransfoXLLMHeadModel"),y1t.forEach(t),qgr=r(wSe," (Transformer-XL model)"),wSe.forEach(t),Ngr=i(le),oE=n(le,"LI",{});var ASe=s(oE);rve=n(ASe,"STRONG",{});var L1t=s(rve);jgr=r(L1t,"vit_mae"),L1t.forEach(t),Dgr=r(ASe," \u2014 "),UW=n(ASe,"A",{href:!0});var x1t=s(UW);Ggr=r(x1t,"TFViTMAEForPreTraining"),x1t.forEach(t),Ogr=r(ASe," (ViTMAE model)"),ASe.forEach(t),Vgr=i(le),rE=n(le,"LI",{});var ySe=s(rE);tve=n(ySe,"STRONG",{});var $1t=s(tve);Xgr=r($1t,"xlm"),$1t.forEach(t),zgr=r(ySe," \u2014 "),JW=n(ySe,"A",{href:!0});var k1t=s(JW);Wgr=r(k1t,"TFXLMWithLMHeadModel"),k1t.forEach(t),Qgr=r(ySe," (XLM model)"),ySe.forEach(t),Hgr=i(le),tE=n(le,"LI",{});var LSe=s(tE);ave=n(LSe,"STRONG",{});var S1t=s(ave);Ugr=r(S1t,"xlm-roberta"),S1t.forEach(t),Jgr=r(LSe," \u2014 "),YW=n(LSe,"A",{href:!0});var R1t=s(YW);Ygr=r(R1t,"TFXLMRobertaForMaskedLM"),R1t.forEach(t),Kgr=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Zgr=i(le),aE=n(le,"LI",{});var xSe=s(aE);nve=n(xSe,"STRONG",{});var P1t=s(nve);ehr=r(P1t,"xlnet"),P1t.forEach(t),ohr=r(xSe," \u2014 "),KW=n(xSe,"A",{href:!0});var B1t=s(KW);rhr=r(B1t,"TFXLNetLMHeadModel"),B1t.forEach(t),thr=r(xSe," (XLNet model)"),xSe.forEach(t),le.forEach(t),ahr=i(ul),T(nE.$$.fragment,ul),ul.forEach(t),hl.forEach(t),iNe=i(m),Wd=n(m,"H2",{class:!0});var hDe=s(Wd);sE=n(hDe,"A",{id:!0,class:!0,href:!0});var I1t=s(sE);sve=n(I1t,"SPAN",{});var q1t=s(sve);T(n7.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),nhr=i(hDe),lve=n(hDe,"SPAN",{});var N1t=s(lve);shr=r(N1t,"TFAutoModelForCausalLM"),N1t.forEach(t),hDe.forEach(t),dNe=i(m),Zo=n(m,"DIV",{class:!0});var pl=s(Zo);T(s7.$$.fragment,pl),lhr=i(pl),Qd=n(pl,"P",{});var NZ=s(Qd);ihr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZW=n(NZ,"A",{href:!0});var j1t=s(ZW);dhr=r(j1t,"from_pretrained()"),j1t.forEach(t),chr=r(NZ," class method or the "),eQ=n(NZ,"A",{href:!0});var D1t=s(eQ);mhr=r(D1t,"from_config()"),D1t.forEach(t),fhr=r(NZ,` class
method.`),NZ.forEach(t),ghr=i(pl),l7=n(pl,"P",{});var uDe=s(l7);hhr=r(uDe,"This class cannot be instantiated directly using "),ive=n(uDe,"CODE",{});var G1t=s(ive);uhr=r(G1t,"__init__()"),G1t.forEach(t),phr=r(uDe," (throws an error)."),uDe.forEach(t),_hr=i(pl),xt=n(pl,"DIV",{class:!0});var u6=s(xt);T(i7.$$.fragment,u6),bhr=i(u6),dve=n(u6,"P",{});var O1t=s(dve);vhr=r(O1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),O1t.forEach(t),Fhr=i(u6),Hd=n(u6,"P",{});var jZ=s(Hd);Thr=r(jZ,`Note:
Loading a model from its configuration file does `),cve=n(jZ,"STRONG",{});var V1t=s(cve);Mhr=r(V1t,"not"),V1t.forEach(t),Ehr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(jZ,"A",{href:!0});var X1t=s(oQ);Chr=r(X1t,"from_pretrained()"),X1t.forEach(t),whr=r(jZ," to load the model weights."),jZ.forEach(t),Ahr=i(u6),T(lE.$$.fragment,u6),u6.forEach(t),yhr=i(pl),yr=n(pl,"DIV",{class:!0});var _l=s(yr);T(d7.$$.fragment,_l),Lhr=i(_l),mve=n(_l,"P",{});var z1t=s(mve);xhr=r(z1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z1t.forEach(t),$hr=i(_l),en=n(_l,"P",{});var p6=s(en);khr=r(p6,"The model class to instantiate is selected based on the "),fve=n(p6,"CODE",{});var W1t=s(fve);Shr=r(W1t,"model_type"),W1t.forEach(t),Rhr=r(p6,` property of the config object (either
passed as an argument or loaded from `),gve=n(p6,"CODE",{});var Q1t=s(gve);Phr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),Bhr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(p6,"CODE",{});var H1t=s(hve);Ihr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),qhr=r(p6,":"),p6.forEach(t),Nhr=i(_l),Me=n(_l,"UL",{});var Ce=s(Me);iE=n(Ce,"LI",{});var $Se=s(iE);uve=n($Se,"STRONG",{});var U1t=s(uve);jhr=r(U1t,"bert"),U1t.forEach(t),Dhr=r($Se," \u2014 "),rQ=n($Se,"A",{href:!0});var J1t=s(rQ);Ghr=r(J1t,"TFBertLMHeadModel"),J1t.forEach(t),Ohr=r($Se," (BERT model)"),$Se.forEach(t),Vhr=i(Ce),dE=n(Ce,"LI",{});var kSe=s(dE);pve=n(kSe,"STRONG",{});var Y1t=s(pve);Xhr=r(Y1t,"camembert"),Y1t.forEach(t),zhr=r(kSe," \u2014 "),tQ=n(kSe,"A",{href:!0});var K1t=s(tQ);Whr=r(K1t,"TFCamembertForCausalLM"),K1t.forEach(t),Qhr=r(kSe," (CamemBERT model)"),kSe.forEach(t),Hhr=i(Ce),cE=n(Ce,"LI",{});var SSe=s(cE);_ve=n(SSe,"STRONG",{});var Z1t=s(_ve);Uhr=r(Z1t,"ctrl"),Z1t.forEach(t),Jhr=r(SSe," \u2014 "),aQ=n(SSe,"A",{href:!0});var eTt=s(aQ);Yhr=r(eTt,"TFCTRLLMHeadModel"),eTt.forEach(t),Khr=r(SSe," (CTRL model)"),SSe.forEach(t),Zhr=i(Ce),mE=n(Ce,"LI",{});var RSe=s(mE);bve=n(RSe,"STRONG",{});var oTt=s(bve);eur=r(oTt,"gpt2"),oTt.forEach(t),our=r(RSe," \u2014 "),nQ=n(RSe,"A",{href:!0});var rTt=s(nQ);rur=r(rTt,"TFGPT2LMHeadModel"),rTt.forEach(t),tur=r(RSe," (OpenAI GPT-2 model)"),RSe.forEach(t),aur=i(Ce),fE=n(Ce,"LI",{});var PSe=s(fE);vve=n(PSe,"STRONG",{});var tTt=s(vve);nur=r(tTt,"gptj"),tTt.forEach(t),sur=r(PSe," \u2014 "),sQ=n(PSe,"A",{href:!0});var aTt=s(sQ);lur=r(aTt,"TFGPTJForCausalLM"),aTt.forEach(t),iur=r(PSe," (GPT-J model)"),PSe.forEach(t),dur=i(Ce),gE=n(Ce,"LI",{});var BSe=s(gE);Fve=n(BSe,"STRONG",{});var nTt=s(Fve);cur=r(nTt,"openai-gpt"),nTt.forEach(t),mur=r(BSe," \u2014 "),lQ=n(BSe,"A",{href:!0});var sTt=s(lQ);fur=r(sTt,"TFOpenAIGPTLMHeadModel"),sTt.forEach(t),gur=r(BSe," (OpenAI GPT model)"),BSe.forEach(t),hur=i(Ce),hE=n(Ce,"LI",{});var ISe=s(hE);Tve=n(ISe,"STRONG",{});var lTt=s(Tve);uur=r(lTt,"rembert"),lTt.forEach(t),pur=r(ISe," \u2014 "),iQ=n(ISe,"A",{href:!0});var iTt=s(iQ);_ur=r(iTt,"TFRemBertForCausalLM"),iTt.forEach(t),bur=r(ISe," (RemBERT model)"),ISe.forEach(t),vur=i(Ce),uE=n(Ce,"LI",{});var qSe=s(uE);Mve=n(qSe,"STRONG",{});var dTt=s(Mve);Fur=r(dTt,"roberta"),dTt.forEach(t),Tur=r(qSe," \u2014 "),dQ=n(qSe,"A",{href:!0});var cTt=s(dQ);Mur=r(cTt,"TFRobertaForCausalLM"),cTt.forEach(t),Eur=r(qSe," (RoBERTa model)"),qSe.forEach(t),Cur=i(Ce),pE=n(Ce,"LI",{});var NSe=s(pE);Eve=n(NSe,"STRONG",{});var mTt=s(Eve);wur=r(mTt,"roformer"),mTt.forEach(t),Aur=r(NSe," \u2014 "),cQ=n(NSe,"A",{href:!0});var fTt=s(cQ);yur=r(fTt,"TFRoFormerForCausalLM"),fTt.forEach(t),Lur=r(NSe," (RoFormer model)"),NSe.forEach(t),xur=i(Ce),_E=n(Ce,"LI",{});var jSe=s(_E);Cve=n(jSe,"STRONG",{});var gTt=s(Cve);$ur=r(gTt,"transfo-xl"),gTt.forEach(t),kur=r(jSe," \u2014 "),mQ=n(jSe,"A",{href:!0});var hTt=s(mQ);Sur=r(hTt,"TFTransfoXLLMHeadModel"),hTt.forEach(t),Rur=r(jSe," (Transformer-XL model)"),jSe.forEach(t),Pur=i(Ce),bE=n(Ce,"LI",{});var DSe=s(bE);wve=n(DSe,"STRONG",{});var uTt=s(wve);Bur=r(uTt,"xlm"),uTt.forEach(t),Iur=r(DSe," \u2014 "),fQ=n(DSe,"A",{href:!0});var pTt=s(fQ);qur=r(pTt,"TFXLMWithLMHeadModel"),pTt.forEach(t),Nur=r(DSe," (XLM model)"),DSe.forEach(t),jur=i(Ce),vE=n(Ce,"LI",{});var GSe=s(vE);Ave=n(GSe,"STRONG",{});var _Tt=s(Ave);Dur=r(_Tt,"xlnet"),_Tt.forEach(t),Gur=r(GSe," \u2014 "),gQ=n(GSe,"A",{href:!0});var bTt=s(gQ);Our=r(bTt,"TFXLNetLMHeadModel"),bTt.forEach(t),Vur=r(GSe," (XLNet model)"),GSe.forEach(t),Ce.forEach(t),Xur=i(_l),T(FE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),cNe=i(m),Ud=n(m,"H2",{class:!0});var pDe=s(Ud);TE=n(pDe,"A",{id:!0,class:!0,href:!0});var vTt=s(TE);yve=n(vTt,"SPAN",{});var FTt=s(yve);T(c7.$$.fragment,FTt),FTt.forEach(t),vTt.forEach(t),zur=i(pDe),Lve=n(pDe,"SPAN",{});var TTt=s(Lve);Wur=r(TTt,"TFAutoModelForImageClassification"),TTt.forEach(t),pDe.forEach(t),mNe=i(m),er=n(m,"DIV",{class:!0});var bl=s(er);T(m7.$$.fragment,bl),Qur=i(bl),Jd=n(bl,"P",{});var DZ=s(Jd);Hur=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=n(DZ,"A",{href:!0});var MTt=s(hQ);Uur=r(MTt,"from_pretrained()"),MTt.forEach(t),Jur=r(DZ," class method or the "),uQ=n(DZ,"A",{href:!0});var ETt=s(uQ);Yur=r(ETt,"from_config()"),ETt.forEach(t),Kur=r(DZ,` class
method.`),DZ.forEach(t),Zur=i(bl),f7=n(bl,"P",{});var _De=s(f7);epr=r(_De,"This class cannot be instantiated directly using "),xve=n(_De,"CODE",{});var CTt=s(xve);opr=r(CTt,"__init__()"),CTt.forEach(t),rpr=r(_De," (throws an error)."),_De.forEach(t),tpr=i(bl),$t=n(bl,"DIV",{class:!0});var _6=s($t);T(g7.$$.fragment,_6),apr=i(_6),$ve=n(_6,"P",{});var wTt=s($ve);npr=r(wTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wTt.forEach(t),spr=i(_6),Yd=n(_6,"P",{});var GZ=s(Yd);lpr=r(GZ,`Note:
Loading a model from its configuration file does `),kve=n(GZ,"STRONG",{});var ATt=s(kve);ipr=r(ATt,"not"),ATt.forEach(t),dpr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(GZ,"A",{href:!0});var yTt=s(pQ);cpr=r(yTt,"from_pretrained()"),yTt.forEach(t),mpr=r(GZ," to load the model weights."),GZ.forEach(t),fpr=i(_6),T(ME.$$.fragment,_6),_6.forEach(t),gpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(h7.$$.fragment,vl),hpr=i(vl),Sve=n(vl,"P",{});var LTt=s(Sve);upr=r(LTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LTt.forEach(t),ppr=i(vl),on=n(vl,"P",{});var b6=s(on);_pr=r(b6,"The model class to instantiate is selected based on the "),Rve=n(b6,"CODE",{});var xTt=s(Rve);bpr=r(xTt,"model_type"),xTt.forEach(t),vpr=r(b6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(b6,"CODE",{});var $Tt=s(Pve);Fpr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),Tpr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(b6,"CODE",{});var kTt=s(Bve);Mpr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),Epr=r(b6,":"),b6.forEach(t),Cpr=i(vl),rn=n(vl,"UL",{});var v6=s(rn);EE=n(v6,"LI",{});var OSe=s(EE);Ive=n(OSe,"STRONG",{});var STt=s(Ive);wpr=r(STt,"convnext"),STt.forEach(t),Apr=r(OSe," \u2014 "),_Q=n(OSe,"A",{href:!0});var RTt=s(_Q);ypr=r(RTt,"TFConvNextForImageClassification"),RTt.forEach(t),Lpr=r(OSe," (ConvNext model)"),OSe.forEach(t),xpr=i(v6),CE=n(v6,"LI",{});var VSe=s(CE);qve=n(VSe,"STRONG",{});var PTt=s(qve);$pr=r(PTt,"data2vec-vision"),PTt.forEach(t),kpr=r(VSe," \u2014 "),bQ=n(VSe,"A",{href:!0});var BTt=s(bQ);Spr=r(BTt,"TFData2VecVisionForImageClassification"),BTt.forEach(t),Rpr=r(VSe," (Data2VecVision model)"),VSe.forEach(t),Ppr=i(v6),wE=n(v6,"LI",{});var XSe=s(wE);Nve=n(XSe,"STRONG",{});var ITt=s(Nve);Bpr=r(ITt,"swin"),ITt.forEach(t),Ipr=r(XSe," \u2014 "),vQ=n(XSe,"A",{href:!0});var qTt=s(vQ);qpr=r(qTt,"TFSwinForImageClassification"),qTt.forEach(t),Npr=r(XSe," (Swin model)"),XSe.forEach(t),jpr=i(v6),AE=n(v6,"LI",{});var zSe=s(AE);jve=n(zSe,"STRONG",{});var NTt=s(jve);Dpr=r(NTt,"vit"),NTt.forEach(t),Gpr=r(zSe," \u2014 "),FQ=n(zSe,"A",{href:!0});var jTt=s(FQ);Opr=r(jTt,"TFViTForImageClassification"),jTt.forEach(t),Vpr=r(zSe," (ViT model)"),zSe.forEach(t),v6.forEach(t),Xpr=i(vl),T(yE.$$.fragment,vl),vl.forEach(t),bl.forEach(t),fNe=i(m),Kd=n(m,"H2",{class:!0});var bDe=s(Kd);LE=n(bDe,"A",{id:!0,class:!0,href:!0});var DTt=s(LE);Dve=n(DTt,"SPAN",{});var GTt=s(Dve);T(u7.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),zpr=i(bDe),Gve=n(bDe,"SPAN",{});var OTt=s(Gve);Wpr=r(OTt,"TFAutoModelForMaskedLM"),OTt.forEach(t),bDe.forEach(t),gNe=i(m),or=n(m,"DIV",{class:!0});var Fl=s(or);T(p7.$$.fragment,Fl),Qpr=i(Fl),Zd=n(Fl,"P",{});var OZ=s(Zd);Hpr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TQ=n(OZ,"A",{href:!0});var VTt=s(TQ);Upr=r(VTt,"from_pretrained()"),VTt.forEach(t),Jpr=r(OZ," class method or the "),MQ=n(OZ,"A",{href:!0});var XTt=s(MQ);Ypr=r(XTt,"from_config()"),XTt.forEach(t),Kpr=r(OZ,` class
method.`),OZ.forEach(t),Zpr=i(Fl),_7=n(Fl,"P",{});var vDe=s(_7);e_r=r(vDe,"This class cannot be instantiated directly using "),Ove=n(vDe,"CODE",{});var zTt=s(Ove);o_r=r(zTt,"__init__()"),zTt.forEach(t),r_r=r(vDe," (throws an error)."),vDe.forEach(t),t_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var F6=s(kt);T(b7.$$.fragment,F6),a_r=i(F6),Vve=n(F6,"P",{});var WTt=s(Vve);n_r=r(WTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WTt.forEach(t),s_r=i(F6),ec=n(F6,"P",{});var VZ=s(ec);l_r=r(VZ,`Note:
Loading a model from its configuration file does `),Xve=n(VZ,"STRONG",{});var QTt=s(Xve);i_r=r(QTt,"not"),QTt.forEach(t),d_r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(VZ,"A",{href:!0});var HTt=s(EQ);c_r=r(HTt,"from_pretrained()"),HTt.forEach(t),m_r=r(VZ," to load the model weights."),VZ.forEach(t),f_r=i(F6),T(xE.$$.fragment,F6),F6.forEach(t),g_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(v7.$$.fragment,Tl),h_r=i(Tl),zve=n(Tl,"P",{});var UTt=s(zve);u_r=r(UTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UTt.forEach(t),p_r=i(Tl),tn=n(Tl,"P",{});var T6=s(tn);__r=r(T6,"The model class to instantiate is selected based on the "),Wve=n(T6,"CODE",{});var JTt=s(Wve);b_r=r(JTt,"model_type"),JTt.forEach(t),v_r=r(T6,` property of the config object (either
passed as an argument or loaded from `),Qve=n(T6,"CODE",{});var YTt=s(Qve);F_r=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),T_r=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(T6,"CODE",{});var KTt=s(Hve);M_r=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),E_r=r(T6,":"),T6.forEach(t),C_r=i(Tl),ie=n(Tl,"UL",{});var me=s(ie);$E=n(me,"LI",{});var WSe=s($E);Uve=n(WSe,"STRONG",{});var ZTt=s(Uve);w_r=r(ZTt,"albert"),ZTt.forEach(t),A_r=r(WSe," \u2014 "),CQ=n(WSe,"A",{href:!0});var eMt=s(CQ);y_r=r(eMt,"TFAlbertForMaskedLM"),eMt.forEach(t),L_r=r(WSe," (ALBERT model)"),WSe.forEach(t),x_r=i(me),kE=n(me,"LI",{});var QSe=s(kE);Jve=n(QSe,"STRONG",{});var oMt=s(Jve);$_r=r(oMt,"bert"),oMt.forEach(t),k_r=r(QSe," \u2014 "),wQ=n(QSe,"A",{href:!0});var rMt=s(wQ);S_r=r(rMt,"TFBertForMaskedLM"),rMt.forEach(t),R_r=r(QSe," (BERT model)"),QSe.forEach(t),P_r=i(me),SE=n(me,"LI",{});var HSe=s(SE);Yve=n(HSe,"STRONG",{});var tMt=s(Yve);B_r=r(tMt,"camembert"),tMt.forEach(t),I_r=r(HSe," \u2014 "),AQ=n(HSe,"A",{href:!0});var aMt=s(AQ);q_r=r(aMt,"TFCamembertForMaskedLM"),aMt.forEach(t),N_r=r(HSe," (CamemBERT model)"),HSe.forEach(t),j_r=i(me),RE=n(me,"LI",{});var USe=s(RE);Kve=n(USe,"STRONG",{});var nMt=s(Kve);D_r=r(nMt,"convbert"),nMt.forEach(t),G_r=r(USe," \u2014 "),yQ=n(USe,"A",{href:!0});var sMt=s(yQ);O_r=r(sMt,"TFConvBertForMaskedLM"),sMt.forEach(t),V_r=r(USe," (ConvBERT model)"),USe.forEach(t),X_r=i(me),PE=n(me,"LI",{});var JSe=s(PE);Zve=n(JSe,"STRONG",{});var lMt=s(Zve);z_r=r(lMt,"deberta"),lMt.forEach(t),W_r=r(JSe," \u2014 "),LQ=n(JSe,"A",{href:!0});var iMt=s(LQ);Q_r=r(iMt,"TFDebertaForMaskedLM"),iMt.forEach(t),H_r=r(JSe," (DeBERTa model)"),JSe.forEach(t),U_r=i(me),BE=n(me,"LI",{});var YSe=s(BE);eFe=n(YSe,"STRONG",{});var dMt=s(eFe);J_r=r(dMt,"deberta-v2"),dMt.forEach(t),Y_r=r(YSe," \u2014 "),xQ=n(YSe,"A",{href:!0});var cMt=s(xQ);K_r=r(cMt,"TFDebertaV2ForMaskedLM"),cMt.forEach(t),Z_r=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),ebr=i(me),IE=n(me,"LI",{});var KSe=s(IE);oFe=n(KSe,"STRONG",{});var mMt=s(oFe);obr=r(mMt,"distilbert"),mMt.forEach(t),rbr=r(KSe," \u2014 "),$Q=n(KSe,"A",{href:!0});var fMt=s($Q);tbr=r(fMt,"TFDistilBertForMaskedLM"),fMt.forEach(t),abr=r(KSe," (DistilBERT model)"),KSe.forEach(t),nbr=i(me),qE=n(me,"LI",{});var ZSe=s(qE);rFe=n(ZSe,"STRONG",{});var gMt=s(rFe);sbr=r(gMt,"electra"),gMt.forEach(t),lbr=r(ZSe," \u2014 "),kQ=n(ZSe,"A",{href:!0});var hMt=s(kQ);ibr=r(hMt,"TFElectraForMaskedLM"),hMt.forEach(t),dbr=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),cbr=i(me),NE=n(me,"LI",{});var eRe=s(NE);tFe=n(eRe,"STRONG",{});var uMt=s(tFe);mbr=r(uMt,"flaubert"),uMt.forEach(t),fbr=r(eRe," \u2014 "),SQ=n(eRe,"A",{href:!0});var pMt=s(SQ);gbr=r(pMt,"TFFlaubertWithLMHeadModel"),pMt.forEach(t),hbr=r(eRe," (FlauBERT model)"),eRe.forEach(t),ubr=i(me),jE=n(me,"LI",{});var oRe=s(jE);aFe=n(oRe,"STRONG",{});var _Mt=s(aFe);pbr=r(_Mt,"funnel"),_Mt.forEach(t),_br=r(oRe," \u2014 "),RQ=n(oRe,"A",{href:!0});var bMt=s(RQ);bbr=r(bMt,"TFFunnelForMaskedLM"),bMt.forEach(t),vbr=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),Fbr=i(me),DE=n(me,"LI",{});var rRe=s(DE);nFe=n(rRe,"STRONG",{});var vMt=s(nFe);Tbr=r(vMt,"layoutlm"),vMt.forEach(t),Mbr=r(rRe," \u2014 "),PQ=n(rRe,"A",{href:!0});var FMt=s(PQ);Ebr=r(FMt,"TFLayoutLMForMaskedLM"),FMt.forEach(t),Cbr=r(rRe," (LayoutLM model)"),rRe.forEach(t),wbr=i(me),GE=n(me,"LI",{});var tRe=s(GE);sFe=n(tRe,"STRONG",{});var TMt=s(sFe);Abr=r(TMt,"longformer"),TMt.forEach(t),ybr=r(tRe," \u2014 "),BQ=n(tRe,"A",{href:!0});var MMt=s(BQ);Lbr=r(MMt,"TFLongformerForMaskedLM"),MMt.forEach(t),xbr=r(tRe," (Longformer model)"),tRe.forEach(t),$br=i(me),OE=n(me,"LI",{});var aRe=s(OE);lFe=n(aRe,"STRONG",{});var EMt=s(lFe);kbr=r(EMt,"mobilebert"),EMt.forEach(t),Sbr=r(aRe," \u2014 "),IQ=n(aRe,"A",{href:!0});var CMt=s(IQ);Rbr=r(CMt,"TFMobileBertForMaskedLM"),CMt.forEach(t),Pbr=r(aRe," (MobileBERT model)"),aRe.forEach(t),Bbr=i(me),VE=n(me,"LI",{});var nRe=s(VE);iFe=n(nRe,"STRONG",{});var wMt=s(iFe);Ibr=r(wMt,"mpnet"),wMt.forEach(t),qbr=r(nRe," \u2014 "),qQ=n(nRe,"A",{href:!0});var AMt=s(qQ);Nbr=r(AMt,"TFMPNetForMaskedLM"),AMt.forEach(t),jbr=r(nRe," (MPNet model)"),nRe.forEach(t),Dbr=i(me),XE=n(me,"LI",{});var sRe=s(XE);dFe=n(sRe,"STRONG",{});var yMt=s(dFe);Gbr=r(yMt,"rembert"),yMt.forEach(t),Obr=r(sRe," \u2014 "),NQ=n(sRe,"A",{href:!0});var LMt=s(NQ);Vbr=r(LMt,"TFRemBertForMaskedLM"),LMt.forEach(t),Xbr=r(sRe," (RemBERT model)"),sRe.forEach(t),zbr=i(me),zE=n(me,"LI",{});var lRe=s(zE);cFe=n(lRe,"STRONG",{});var xMt=s(cFe);Wbr=r(xMt,"roberta"),xMt.forEach(t),Qbr=r(lRe," \u2014 "),jQ=n(lRe,"A",{href:!0});var $Mt=s(jQ);Hbr=r($Mt,"TFRobertaForMaskedLM"),$Mt.forEach(t),Ubr=r(lRe," (RoBERTa model)"),lRe.forEach(t),Jbr=i(me),WE=n(me,"LI",{});var iRe=s(WE);mFe=n(iRe,"STRONG",{});var kMt=s(mFe);Ybr=r(kMt,"roformer"),kMt.forEach(t),Kbr=r(iRe," \u2014 "),DQ=n(iRe,"A",{href:!0});var SMt=s(DQ);Zbr=r(SMt,"TFRoFormerForMaskedLM"),SMt.forEach(t),e2r=r(iRe," (RoFormer model)"),iRe.forEach(t),o2r=i(me),QE=n(me,"LI",{});var dRe=s(QE);fFe=n(dRe,"STRONG",{});var RMt=s(fFe);r2r=r(RMt,"tapas"),RMt.forEach(t),t2r=r(dRe," \u2014 "),GQ=n(dRe,"A",{href:!0});var PMt=s(GQ);a2r=r(PMt,"TFTapasForMaskedLM"),PMt.forEach(t),n2r=r(dRe," (TAPAS model)"),dRe.forEach(t),s2r=i(me),HE=n(me,"LI",{});var cRe=s(HE);gFe=n(cRe,"STRONG",{});var BMt=s(gFe);l2r=r(BMt,"xlm"),BMt.forEach(t),i2r=r(cRe," \u2014 "),OQ=n(cRe,"A",{href:!0});var IMt=s(OQ);d2r=r(IMt,"TFXLMWithLMHeadModel"),IMt.forEach(t),c2r=r(cRe," (XLM model)"),cRe.forEach(t),m2r=i(me),UE=n(me,"LI",{});var mRe=s(UE);hFe=n(mRe,"STRONG",{});var qMt=s(hFe);f2r=r(qMt,"xlm-roberta"),qMt.forEach(t),g2r=r(mRe," \u2014 "),VQ=n(mRe,"A",{href:!0});var NMt=s(VQ);h2r=r(NMt,"TFXLMRobertaForMaskedLM"),NMt.forEach(t),u2r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),me.forEach(t),p2r=i(Tl),T(JE.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hNe=i(m),oc=n(m,"H2",{class:!0});var FDe=s(oc);YE=n(FDe,"A",{id:!0,class:!0,href:!0});var jMt=s(YE);uFe=n(jMt,"SPAN",{});var DMt=s(uFe);T(F7.$$.fragment,DMt),DMt.forEach(t),jMt.forEach(t),_2r=i(FDe),pFe=n(FDe,"SPAN",{});var GMt=s(pFe);b2r=r(GMt,"TFAutoModelForSeq2SeqLM"),GMt.forEach(t),FDe.forEach(t),uNe=i(m),rr=n(m,"DIV",{class:!0});var Ml=s(rr);T(T7.$$.fragment,Ml),v2r=i(Ml),rc=n(Ml,"P",{});var XZ=s(rc);F2r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XQ=n(XZ,"A",{href:!0});var OMt=s(XQ);T2r=r(OMt,"from_pretrained()"),OMt.forEach(t),M2r=r(XZ," class method or the "),zQ=n(XZ,"A",{href:!0});var VMt=s(zQ);E2r=r(VMt,"from_config()"),VMt.forEach(t),C2r=r(XZ,` class
method.`),XZ.forEach(t),w2r=i(Ml),M7=n(Ml,"P",{});var TDe=s(M7);A2r=r(TDe,"This class cannot be instantiated directly using "),_Fe=n(TDe,"CODE",{});var XMt=s(_Fe);y2r=r(XMt,"__init__()"),XMt.forEach(t),L2r=r(TDe," (throws an error)."),TDe.forEach(t),x2r=i(Ml),St=n(Ml,"DIV",{class:!0});var M6=s(St);T(E7.$$.fragment,M6),$2r=i(M6),bFe=n(M6,"P",{});var zMt=s(bFe);k2r=r(zMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zMt.forEach(t),S2r=i(M6),tc=n(M6,"P",{});var zZ=s(tc);R2r=r(zZ,`Note:
Loading a model from its configuration file does `),vFe=n(zZ,"STRONG",{});var WMt=s(vFe);P2r=r(WMt,"not"),WMt.forEach(t),B2r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(zZ,"A",{href:!0});var QMt=s(WQ);I2r=r(QMt,"from_pretrained()"),QMt.forEach(t),q2r=r(zZ," to load the model weights."),zZ.forEach(t),N2r=i(M6),T(KE.$$.fragment,M6),M6.forEach(t),j2r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(C7.$$.fragment,El),D2r=i(El),FFe=n(El,"P",{});var HMt=s(FFe);G2r=r(HMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HMt.forEach(t),O2r=i(El),an=n(El,"P",{});var E6=s(an);V2r=r(E6,"The model class to instantiate is selected based on the "),TFe=n(E6,"CODE",{});var UMt=s(TFe);X2r=r(UMt,"model_type"),UMt.forEach(t),z2r=r(E6,` property of the config object (either
passed as an argument or loaded from `),MFe=n(E6,"CODE",{});var JMt=s(MFe);W2r=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),Q2r=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(E6,"CODE",{});var YMt=s(EFe);H2r=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),U2r=r(E6,":"),E6.forEach(t),J2r=i(El),ye=n(El,"UL",{});var Be=s(ye);ZE=n(Be,"LI",{});var fRe=s(ZE);CFe=n(fRe,"STRONG",{});var KMt=s(CFe);Y2r=r(KMt,"bart"),KMt.forEach(t),K2r=r(fRe," \u2014 "),QQ=n(fRe,"A",{href:!0});var ZMt=s(QQ);Z2r=r(ZMt,"TFBartForConditionalGeneration"),ZMt.forEach(t),evr=r(fRe," (BART model)"),fRe.forEach(t),ovr=i(Be),eC=n(Be,"LI",{});var gRe=s(eC);wFe=n(gRe,"STRONG",{});var e4t=s(wFe);rvr=r(e4t,"blenderbot"),e4t.forEach(t),tvr=r(gRe," \u2014 "),HQ=n(gRe,"A",{href:!0});var o4t=s(HQ);avr=r(o4t,"TFBlenderbotForConditionalGeneration"),o4t.forEach(t),nvr=r(gRe," (Blenderbot model)"),gRe.forEach(t),svr=i(Be),oC=n(Be,"LI",{});var hRe=s(oC);AFe=n(hRe,"STRONG",{});var r4t=s(AFe);lvr=r(r4t,"blenderbot-small"),r4t.forEach(t),ivr=r(hRe," \u2014 "),UQ=n(hRe,"A",{href:!0});var t4t=s(UQ);dvr=r(t4t,"TFBlenderbotSmallForConditionalGeneration"),t4t.forEach(t),cvr=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),mvr=i(Be),rC=n(Be,"LI",{});var uRe=s(rC);yFe=n(uRe,"STRONG",{});var a4t=s(yFe);fvr=r(a4t,"encoder-decoder"),a4t.forEach(t),gvr=r(uRe," \u2014 "),JQ=n(uRe,"A",{href:!0});var n4t=s(JQ);hvr=r(n4t,"TFEncoderDecoderModel"),n4t.forEach(t),uvr=r(uRe," (Encoder decoder model)"),uRe.forEach(t),pvr=i(Be),tC=n(Be,"LI",{});var pRe=s(tC);LFe=n(pRe,"STRONG",{});var s4t=s(LFe);_vr=r(s4t,"led"),s4t.forEach(t),bvr=r(pRe," \u2014 "),YQ=n(pRe,"A",{href:!0});var l4t=s(YQ);vvr=r(l4t,"TFLEDForConditionalGeneration"),l4t.forEach(t),Fvr=r(pRe," (LED model)"),pRe.forEach(t),Tvr=i(Be),aC=n(Be,"LI",{});var _Re=s(aC);xFe=n(_Re,"STRONG",{});var i4t=s(xFe);Mvr=r(i4t,"marian"),i4t.forEach(t),Evr=r(_Re," \u2014 "),KQ=n(_Re,"A",{href:!0});var d4t=s(KQ);Cvr=r(d4t,"TFMarianMTModel"),d4t.forEach(t),wvr=r(_Re," (Marian model)"),_Re.forEach(t),Avr=i(Be),nC=n(Be,"LI",{});var bRe=s(nC);$Fe=n(bRe,"STRONG",{});var c4t=s($Fe);yvr=r(c4t,"mbart"),c4t.forEach(t),Lvr=r(bRe," \u2014 "),ZQ=n(bRe,"A",{href:!0});var m4t=s(ZQ);xvr=r(m4t,"TFMBartForConditionalGeneration"),m4t.forEach(t),$vr=r(bRe," (mBART model)"),bRe.forEach(t),kvr=i(Be),sC=n(Be,"LI",{});var vRe=s(sC);kFe=n(vRe,"STRONG",{});var f4t=s(kFe);Svr=r(f4t,"mt5"),f4t.forEach(t),Rvr=r(vRe," \u2014 "),eH=n(vRe,"A",{href:!0});var g4t=s(eH);Pvr=r(g4t,"TFMT5ForConditionalGeneration"),g4t.forEach(t),Bvr=r(vRe," (mT5 model)"),vRe.forEach(t),Ivr=i(Be),lC=n(Be,"LI",{});var FRe=s(lC);SFe=n(FRe,"STRONG",{});var h4t=s(SFe);qvr=r(h4t,"pegasus"),h4t.forEach(t),Nvr=r(FRe," \u2014 "),oH=n(FRe,"A",{href:!0});var u4t=s(oH);jvr=r(u4t,"TFPegasusForConditionalGeneration"),u4t.forEach(t),Dvr=r(FRe," (Pegasus model)"),FRe.forEach(t),Gvr=i(Be),iC=n(Be,"LI",{});var TRe=s(iC);RFe=n(TRe,"STRONG",{});var p4t=s(RFe);Ovr=r(p4t,"t5"),p4t.forEach(t),Vvr=r(TRe," \u2014 "),rH=n(TRe,"A",{href:!0});var _4t=s(rH);Xvr=r(_4t,"TFT5ForConditionalGeneration"),_4t.forEach(t),zvr=r(TRe," (T5 model)"),TRe.forEach(t),Be.forEach(t),Wvr=i(El),T(dC.$$.fragment,El),El.forEach(t),Ml.forEach(t),pNe=i(m),ac=n(m,"H2",{class:!0});var MDe=s(ac);cC=n(MDe,"A",{id:!0,class:!0,href:!0});var b4t=s(cC);PFe=n(b4t,"SPAN",{});var v4t=s(PFe);T(w7.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Qvr=i(MDe),BFe=n(MDe,"SPAN",{});var F4t=s(BFe);Hvr=r(F4t,"TFAutoModelForSequenceClassification"),F4t.forEach(t),MDe.forEach(t),_Ne=i(m),tr=n(m,"DIV",{class:!0});var Cl=s(tr);T(A7.$$.fragment,Cl),Uvr=i(Cl),nc=n(Cl,"P",{});var WZ=s(nc);Jvr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=n(WZ,"A",{href:!0});var T4t=s(tH);Yvr=r(T4t,"from_pretrained()"),T4t.forEach(t),Kvr=r(WZ," class method or the "),aH=n(WZ,"A",{href:!0});var M4t=s(aH);Zvr=r(M4t,"from_config()"),M4t.forEach(t),eFr=r(WZ,` class
method.`),WZ.forEach(t),oFr=i(Cl),y7=n(Cl,"P",{});var EDe=s(y7);rFr=r(EDe,"This class cannot be instantiated directly using "),IFe=n(EDe,"CODE",{});var E4t=s(IFe);tFr=r(E4t,"__init__()"),E4t.forEach(t),aFr=r(EDe," (throws an error)."),EDe.forEach(t),nFr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var C6=s(Rt);T(L7.$$.fragment,C6),sFr=i(C6),qFe=n(C6,"P",{});var C4t=s(qFe);lFr=r(C4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C4t.forEach(t),iFr=i(C6),sc=n(C6,"P",{});var QZ=s(sc);dFr=r(QZ,`Note:
Loading a model from its configuration file does `),NFe=n(QZ,"STRONG",{});var w4t=s(NFe);cFr=r(w4t,"not"),w4t.forEach(t),mFr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(QZ,"A",{href:!0});var A4t=s(nH);fFr=r(A4t,"from_pretrained()"),A4t.forEach(t),gFr=r(QZ," to load the model weights."),QZ.forEach(t),hFr=i(C6),T(mC.$$.fragment,C6),C6.forEach(t),uFr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(x7.$$.fragment,wl),pFr=i(wl),jFe=n(wl,"P",{});var y4t=s(jFe);_Fr=r(y4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y4t.forEach(t),bFr=i(wl),nn=n(wl,"P",{});var w6=s(nn);vFr=r(w6,"The model class to instantiate is selected based on the "),DFe=n(w6,"CODE",{});var L4t=s(DFe);FFr=r(L4t,"model_type"),L4t.forEach(t),TFr=r(w6,` property of the config object (either
passed as an argument or loaded from `),GFe=n(w6,"CODE",{});var x4t=s(GFe);MFr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),EFr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(w6,"CODE",{});var $4t=s(OFe);CFr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),wFr=r(w6,":"),w6.forEach(t),AFr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);fC=n(ae,"LI",{});var MRe=s(fC);VFe=n(MRe,"STRONG",{});var k4t=s(VFe);yFr=r(k4t,"albert"),k4t.forEach(t),LFr=r(MRe," \u2014 "),sH=n(MRe,"A",{href:!0});var S4t=s(sH);xFr=r(S4t,"TFAlbertForSequenceClassification"),S4t.forEach(t),$Fr=r(MRe," (ALBERT model)"),MRe.forEach(t),kFr=i(ae),gC=n(ae,"LI",{});var ERe=s(gC);XFe=n(ERe,"STRONG",{});var R4t=s(XFe);SFr=r(R4t,"bert"),R4t.forEach(t),RFr=r(ERe," \u2014 "),lH=n(ERe,"A",{href:!0});var P4t=s(lH);PFr=r(P4t,"TFBertForSequenceClassification"),P4t.forEach(t),BFr=r(ERe," (BERT model)"),ERe.forEach(t),IFr=i(ae),hC=n(ae,"LI",{});var CRe=s(hC);zFe=n(CRe,"STRONG",{});var B4t=s(zFe);qFr=r(B4t,"camembert"),B4t.forEach(t),NFr=r(CRe," \u2014 "),iH=n(CRe,"A",{href:!0});var I4t=s(iH);jFr=r(I4t,"TFCamembertForSequenceClassification"),I4t.forEach(t),DFr=r(CRe," (CamemBERT model)"),CRe.forEach(t),GFr=i(ae),uC=n(ae,"LI",{});var wRe=s(uC);WFe=n(wRe,"STRONG",{});var q4t=s(WFe);OFr=r(q4t,"convbert"),q4t.forEach(t),VFr=r(wRe," \u2014 "),dH=n(wRe,"A",{href:!0});var N4t=s(dH);XFr=r(N4t,"TFConvBertForSequenceClassification"),N4t.forEach(t),zFr=r(wRe," (ConvBERT model)"),wRe.forEach(t),WFr=i(ae),pC=n(ae,"LI",{});var ARe=s(pC);QFe=n(ARe,"STRONG",{});var j4t=s(QFe);QFr=r(j4t,"ctrl"),j4t.forEach(t),HFr=r(ARe," \u2014 "),cH=n(ARe,"A",{href:!0});var D4t=s(cH);UFr=r(D4t,"TFCTRLForSequenceClassification"),D4t.forEach(t),JFr=r(ARe," (CTRL model)"),ARe.forEach(t),YFr=i(ae),_C=n(ae,"LI",{});var yRe=s(_C);HFe=n(yRe,"STRONG",{});var G4t=s(HFe);KFr=r(G4t,"deberta"),G4t.forEach(t),ZFr=r(yRe," \u2014 "),mH=n(yRe,"A",{href:!0});var O4t=s(mH);e1r=r(O4t,"TFDebertaForSequenceClassification"),O4t.forEach(t),o1r=r(yRe," (DeBERTa model)"),yRe.forEach(t),r1r=i(ae),bC=n(ae,"LI",{});var LRe=s(bC);UFe=n(LRe,"STRONG",{});var V4t=s(UFe);t1r=r(V4t,"deberta-v2"),V4t.forEach(t),a1r=r(LRe," \u2014 "),fH=n(LRe,"A",{href:!0});var X4t=s(fH);n1r=r(X4t,"TFDebertaV2ForSequenceClassification"),X4t.forEach(t),s1r=r(LRe," (DeBERTa-v2 model)"),LRe.forEach(t),l1r=i(ae),vC=n(ae,"LI",{});var xRe=s(vC);JFe=n(xRe,"STRONG",{});var z4t=s(JFe);i1r=r(z4t,"distilbert"),z4t.forEach(t),d1r=r(xRe," \u2014 "),gH=n(xRe,"A",{href:!0});var W4t=s(gH);c1r=r(W4t,"TFDistilBertForSequenceClassification"),W4t.forEach(t),m1r=r(xRe," (DistilBERT model)"),xRe.forEach(t),f1r=i(ae),FC=n(ae,"LI",{});var $Re=s(FC);YFe=n($Re,"STRONG",{});var Q4t=s(YFe);g1r=r(Q4t,"electra"),Q4t.forEach(t),h1r=r($Re," \u2014 "),hH=n($Re,"A",{href:!0});var H4t=s(hH);u1r=r(H4t,"TFElectraForSequenceClassification"),H4t.forEach(t),p1r=r($Re," (ELECTRA model)"),$Re.forEach(t),_1r=i(ae),TC=n(ae,"LI",{});var kRe=s(TC);KFe=n(kRe,"STRONG",{});var U4t=s(KFe);b1r=r(U4t,"flaubert"),U4t.forEach(t),v1r=r(kRe," \u2014 "),uH=n(kRe,"A",{href:!0});var J4t=s(uH);F1r=r(J4t,"TFFlaubertForSequenceClassification"),J4t.forEach(t),T1r=r(kRe," (FlauBERT model)"),kRe.forEach(t),M1r=i(ae),MC=n(ae,"LI",{});var SRe=s(MC);ZFe=n(SRe,"STRONG",{});var Y4t=s(ZFe);E1r=r(Y4t,"funnel"),Y4t.forEach(t),C1r=r(SRe," \u2014 "),pH=n(SRe,"A",{href:!0});var K4t=s(pH);w1r=r(K4t,"TFFunnelForSequenceClassification"),K4t.forEach(t),A1r=r(SRe," (Funnel Transformer model)"),SRe.forEach(t),y1r=i(ae),EC=n(ae,"LI",{});var RRe=s(EC);e1e=n(RRe,"STRONG",{});var Z4t=s(e1e);L1r=r(Z4t,"gpt2"),Z4t.forEach(t),x1r=r(RRe," \u2014 "),_H=n(RRe,"A",{href:!0});var eEt=s(_H);$1r=r(eEt,"TFGPT2ForSequenceClassification"),eEt.forEach(t),k1r=r(RRe," (OpenAI GPT-2 model)"),RRe.forEach(t),S1r=i(ae),CC=n(ae,"LI",{});var PRe=s(CC);o1e=n(PRe,"STRONG",{});var oEt=s(o1e);R1r=r(oEt,"gptj"),oEt.forEach(t),P1r=r(PRe," \u2014 "),bH=n(PRe,"A",{href:!0});var rEt=s(bH);B1r=r(rEt,"TFGPTJForSequenceClassification"),rEt.forEach(t),I1r=r(PRe," (GPT-J model)"),PRe.forEach(t),q1r=i(ae),wC=n(ae,"LI",{});var BRe=s(wC);r1e=n(BRe,"STRONG",{});var tEt=s(r1e);N1r=r(tEt,"layoutlm"),tEt.forEach(t),j1r=r(BRe," \u2014 "),vH=n(BRe,"A",{href:!0});var aEt=s(vH);D1r=r(aEt,"TFLayoutLMForSequenceClassification"),aEt.forEach(t),G1r=r(BRe," (LayoutLM model)"),BRe.forEach(t),O1r=i(ae),AC=n(ae,"LI",{});var IRe=s(AC);t1e=n(IRe,"STRONG",{});var nEt=s(t1e);V1r=r(nEt,"longformer"),nEt.forEach(t),X1r=r(IRe," \u2014 "),FH=n(IRe,"A",{href:!0});var sEt=s(FH);z1r=r(sEt,"TFLongformerForSequenceClassification"),sEt.forEach(t),W1r=r(IRe," (Longformer model)"),IRe.forEach(t),Q1r=i(ae),yC=n(ae,"LI",{});var qRe=s(yC);a1e=n(qRe,"STRONG",{});var lEt=s(a1e);H1r=r(lEt,"mobilebert"),lEt.forEach(t),U1r=r(qRe," \u2014 "),TH=n(qRe,"A",{href:!0});var iEt=s(TH);J1r=r(iEt,"TFMobileBertForSequenceClassification"),iEt.forEach(t),Y1r=r(qRe," (MobileBERT model)"),qRe.forEach(t),K1r=i(ae),LC=n(ae,"LI",{});var NRe=s(LC);n1e=n(NRe,"STRONG",{});var dEt=s(n1e);Z1r=r(dEt,"mpnet"),dEt.forEach(t),eTr=r(NRe," \u2014 "),MH=n(NRe,"A",{href:!0});var cEt=s(MH);oTr=r(cEt,"TFMPNetForSequenceClassification"),cEt.forEach(t),rTr=r(NRe," (MPNet model)"),NRe.forEach(t),tTr=i(ae),xC=n(ae,"LI",{});var jRe=s(xC);s1e=n(jRe,"STRONG",{});var mEt=s(s1e);aTr=r(mEt,"openai-gpt"),mEt.forEach(t),nTr=r(jRe," \u2014 "),EH=n(jRe,"A",{href:!0});var fEt=s(EH);sTr=r(fEt,"TFOpenAIGPTForSequenceClassification"),fEt.forEach(t),lTr=r(jRe," (OpenAI GPT model)"),jRe.forEach(t),iTr=i(ae),$C=n(ae,"LI",{});var DRe=s($C);l1e=n(DRe,"STRONG",{});var gEt=s(l1e);dTr=r(gEt,"rembert"),gEt.forEach(t),cTr=r(DRe," \u2014 "),CH=n(DRe,"A",{href:!0});var hEt=s(CH);mTr=r(hEt,"TFRemBertForSequenceClassification"),hEt.forEach(t),fTr=r(DRe," (RemBERT model)"),DRe.forEach(t),gTr=i(ae),kC=n(ae,"LI",{});var GRe=s(kC);i1e=n(GRe,"STRONG",{});var uEt=s(i1e);hTr=r(uEt,"roberta"),uEt.forEach(t),uTr=r(GRe," \u2014 "),wH=n(GRe,"A",{href:!0});var pEt=s(wH);pTr=r(pEt,"TFRobertaForSequenceClassification"),pEt.forEach(t),_Tr=r(GRe," (RoBERTa model)"),GRe.forEach(t),bTr=i(ae),SC=n(ae,"LI",{});var ORe=s(SC);d1e=n(ORe,"STRONG",{});var _Et=s(d1e);vTr=r(_Et,"roformer"),_Et.forEach(t),FTr=r(ORe," \u2014 "),AH=n(ORe,"A",{href:!0});var bEt=s(AH);TTr=r(bEt,"TFRoFormerForSequenceClassification"),bEt.forEach(t),MTr=r(ORe," (RoFormer model)"),ORe.forEach(t),ETr=i(ae),RC=n(ae,"LI",{});var VRe=s(RC);c1e=n(VRe,"STRONG",{});var vEt=s(c1e);CTr=r(vEt,"tapas"),vEt.forEach(t),wTr=r(VRe," \u2014 "),yH=n(VRe,"A",{href:!0});var FEt=s(yH);ATr=r(FEt,"TFTapasForSequenceClassification"),FEt.forEach(t),yTr=r(VRe," (TAPAS model)"),VRe.forEach(t),LTr=i(ae),PC=n(ae,"LI",{});var XRe=s(PC);m1e=n(XRe,"STRONG",{});var TEt=s(m1e);xTr=r(TEt,"transfo-xl"),TEt.forEach(t),$Tr=r(XRe," \u2014 "),LH=n(XRe,"A",{href:!0});var MEt=s(LH);kTr=r(MEt,"TFTransfoXLForSequenceClassification"),MEt.forEach(t),STr=r(XRe," (Transformer-XL model)"),XRe.forEach(t),RTr=i(ae),BC=n(ae,"LI",{});var zRe=s(BC);f1e=n(zRe,"STRONG",{});var EEt=s(f1e);PTr=r(EEt,"xlm"),EEt.forEach(t),BTr=r(zRe," \u2014 "),xH=n(zRe,"A",{href:!0});var CEt=s(xH);ITr=r(CEt,"TFXLMForSequenceClassification"),CEt.forEach(t),qTr=r(zRe," (XLM model)"),zRe.forEach(t),NTr=i(ae),IC=n(ae,"LI",{});var WRe=s(IC);g1e=n(WRe,"STRONG",{});var wEt=s(g1e);jTr=r(wEt,"xlm-roberta"),wEt.forEach(t),DTr=r(WRe," \u2014 "),$H=n(WRe,"A",{href:!0});var AEt=s($H);GTr=r(AEt,"TFXLMRobertaForSequenceClassification"),AEt.forEach(t),OTr=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),VTr=i(ae),qC=n(ae,"LI",{});var QRe=s(qC);h1e=n(QRe,"STRONG",{});var yEt=s(h1e);XTr=r(yEt,"xlnet"),yEt.forEach(t),zTr=r(QRe," \u2014 "),kH=n(QRe,"A",{href:!0});var LEt=s(kH);WTr=r(LEt,"TFXLNetForSequenceClassification"),LEt.forEach(t),QTr=r(QRe," (XLNet model)"),QRe.forEach(t),ae.forEach(t),HTr=i(wl),T(NC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bNe=i(m),lc=n(m,"H2",{class:!0});var CDe=s(lc);jC=n(CDe,"A",{id:!0,class:!0,href:!0});var xEt=s(jC);u1e=n(xEt,"SPAN",{});var $Et=s(u1e);T($7.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),UTr=i(CDe),p1e=n(CDe,"SPAN",{});var kEt=s(p1e);JTr=r(kEt,"TFAutoModelForMultipleChoice"),kEt.forEach(t),CDe.forEach(t),vNe=i(m),ar=n(m,"DIV",{class:!0});var Al=s(ar);T(k7.$$.fragment,Al),YTr=i(Al),ic=n(Al,"P",{});var HZ=s(ic);KTr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SH=n(HZ,"A",{href:!0});var SEt=s(SH);ZTr=r(SEt,"from_pretrained()"),SEt.forEach(t),eMr=r(HZ," class method or the "),RH=n(HZ,"A",{href:!0});var REt=s(RH);oMr=r(REt,"from_config()"),REt.forEach(t),rMr=r(HZ,` class
method.`),HZ.forEach(t),tMr=i(Al),S7=n(Al,"P",{});var wDe=s(S7);aMr=r(wDe,"This class cannot be instantiated directly using "),_1e=n(wDe,"CODE",{});var PEt=s(_1e);nMr=r(PEt,"__init__()"),PEt.forEach(t),sMr=r(wDe," (throws an error)."),wDe.forEach(t),lMr=i(Al),Pt=n(Al,"DIV",{class:!0});var A6=s(Pt);T(R7.$$.fragment,A6),iMr=i(A6),b1e=n(A6,"P",{});var BEt=s(b1e);dMr=r(BEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BEt.forEach(t),cMr=i(A6),dc=n(A6,"P",{});var UZ=s(dc);mMr=r(UZ,`Note:
Loading a model from its configuration file does `),v1e=n(UZ,"STRONG",{});var IEt=s(v1e);fMr=r(IEt,"not"),IEt.forEach(t),gMr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(UZ,"A",{href:!0});var qEt=s(PH);hMr=r(qEt,"from_pretrained()"),qEt.forEach(t),uMr=r(UZ," to load the model weights."),UZ.forEach(t),pMr=i(A6),T(DC.$$.fragment,A6),A6.forEach(t),_Mr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(P7.$$.fragment,yl),bMr=i(yl),F1e=n(yl,"P",{});var NEt=s(F1e);vMr=r(NEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NEt.forEach(t),FMr=i(yl),sn=n(yl,"P",{});var y6=s(sn);TMr=r(y6,"The model class to instantiate is selected based on the "),T1e=n(y6,"CODE",{});var jEt=s(T1e);MMr=r(jEt,"model_type"),jEt.forEach(t),EMr=r(y6,` property of the config object (either
passed as an argument or loaded from `),M1e=n(y6,"CODE",{});var DEt=s(M1e);CMr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),wMr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(y6,"CODE",{});var GEt=s(E1e);AMr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),yMr=r(y6,":"),y6.forEach(t),LMr=i(yl),he=n(yl,"UL",{});var _e=s(he);GC=n(_e,"LI",{});var HRe=s(GC);C1e=n(HRe,"STRONG",{});var OEt=s(C1e);xMr=r(OEt,"albert"),OEt.forEach(t),$Mr=r(HRe," \u2014 "),BH=n(HRe,"A",{href:!0});var VEt=s(BH);kMr=r(VEt,"TFAlbertForMultipleChoice"),VEt.forEach(t),SMr=r(HRe," (ALBERT model)"),HRe.forEach(t),RMr=i(_e),OC=n(_e,"LI",{});var URe=s(OC);w1e=n(URe,"STRONG",{});var XEt=s(w1e);PMr=r(XEt,"bert"),XEt.forEach(t),BMr=r(URe," \u2014 "),IH=n(URe,"A",{href:!0});var zEt=s(IH);IMr=r(zEt,"TFBertForMultipleChoice"),zEt.forEach(t),qMr=r(URe," (BERT model)"),URe.forEach(t),NMr=i(_e),VC=n(_e,"LI",{});var JRe=s(VC);A1e=n(JRe,"STRONG",{});var WEt=s(A1e);jMr=r(WEt,"camembert"),WEt.forEach(t),DMr=r(JRe," \u2014 "),qH=n(JRe,"A",{href:!0});var QEt=s(qH);GMr=r(QEt,"TFCamembertForMultipleChoice"),QEt.forEach(t),OMr=r(JRe," (CamemBERT model)"),JRe.forEach(t),VMr=i(_e),XC=n(_e,"LI",{});var YRe=s(XC);y1e=n(YRe,"STRONG",{});var HEt=s(y1e);XMr=r(HEt,"convbert"),HEt.forEach(t),zMr=r(YRe," \u2014 "),NH=n(YRe,"A",{href:!0});var UEt=s(NH);WMr=r(UEt,"TFConvBertForMultipleChoice"),UEt.forEach(t),QMr=r(YRe," (ConvBERT model)"),YRe.forEach(t),HMr=i(_e),zC=n(_e,"LI",{});var KRe=s(zC);L1e=n(KRe,"STRONG",{});var JEt=s(L1e);UMr=r(JEt,"distilbert"),JEt.forEach(t),JMr=r(KRe," \u2014 "),jH=n(KRe,"A",{href:!0});var YEt=s(jH);YMr=r(YEt,"TFDistilBertForMultipleChoice"),YEt.forEach(t),KMr=r(KRe," (DistilBERT model)"),KRe.forEach(t),ZMr=i(_e),WC=n(_e,"LI",{});var ZRe=s(WC);x1e=n(ZRe,"STRONG",{});var KEt=s(x1e);e4r=r(KEt,"electra"),KEt.forEach(t),o4r=r(ZRe," \u2014 "),DH=n(ZRe,"A",{href:!0});var ZEt=s(DH);r4r=r(ZEt,"TFElectraForMultipleChoice"),ZEt.forEach(t),t4r=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),a4r=i(_e),QC=n(_e,"LI",{});var ePe=s(QC);$1e=n(ePe,"STRONG",{});var eCt=s($1e);n4r=r(eCt,"flaubert"),eCt.forEach(t),s4r=r(ePe," \u2014 "),GH=n(ePe,"A",{href:!0});var oCt=s(GH);l4r=r(oCt,"TFFlaubertForMultipleChoice"),oCt.forEach(t),i4r=r(ePe," (FlauBERT model)"),ePe.forEach(t),d4r=i(_e),HC=n(_e,"LI",{});var oPe=s(HC);k1e=n(oPe,"STRONG",{});var rCt=s(k1e);c4r=r(rCt,"funnel"),rCt.forEach(t),m4r=r(oPe," \u2014 "),OH=n(oPe,"A",{href:!0});var tCt=s(OH);f4r=r(tCt,"TFFunnelForMultipleChoice"),tCt.forEach(t),g4r=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),h4r=i(_e),UC=n(_e,"LI",{});var rPe=s(UC);S1e=n(rPe,"STRONG",{});var aCt=s(S1e);u4r=r(aCt,"longformer"),aCt.forEach(t),p4r=r(rPe," \u2014 "),VH=n(rPe,"A",{href:!0});var nCt=s(VH);_4r=r(nCt,"TFLongformerForMultipleChoice"),nCt.forEach(t),b4r=r(rPe," (Longformer model)"),rPe.forEach(t),v4r=i(_e),JC=n(_e,"LI",{});var tPe=s(JC);R1e=n(tPe,"STRONG",{});var sCt=s(R1e);F4r=r(sCt,"mobilebert"),sCt.forEach(t),T4r=r(tPe," \u2014 "),XH=n(tPe,"A",{href:!0});var lCt=s(XH);M4r=r(lCt,"TFMobileBertForMultipleChoice"),lCt.forEach(t),E4r=r(tPe," (MobileBERT model)"),tPe.forEach(t),C4r=i(_e),YC=n(_e,"LI",{});var aPe=s(YC);P1e=n(aPe,"STRONG",{});var iCt=s(P1e);w4r=r(iCt,"mpnet"),iCt.forEach(t),A4r=r(aPe," \u2014 "),zH=n(aPe,"A",{href:!0});var dCt=s(zH);y4r=r(dCt,"TFMPNetForMultipleChoice"),dCt.forEach(t),L4r=r(aPe," (MPNet model)"),aPe.forEach(t),x4r=i(_e),KC=n(_e,"LI",{});var nPe=s(KC);B1e=n(nPe,"STRONG",{});var cCt=s(B1e);$4r=r(cCt,"rembert"),cCt.forEach(t),k4r=r(nPe," \u2014 "),WH=n(nPe,"A",{href:!0});var mCt=s(WH);S4r=r(mCt,"TFRemBertForMultipleChoice"),mCt.forEach(t),R4r=r(nPe," (RemBERT model)"),nPe.forEach(t),P4r=i(_e),ZC=n(_e,"LI",{});var sPe=s(ZC);I1e=n(sPe,"STRONG",{});var fCt=s(I1e);B4r=r(fCt,"roberta"),fCt.forEach(t),I4r=r(sPe," \u2014 "),QH=n(sPe,"A",{href:!0});var gCt=s(QH);q4r=r(gCt,"TFRobertaForMultipleChoice"),gCt.forEach(t),N4r=r(sPe," (RoBERTa model)"),sPe.forEach(t),j4r=i(_e),e5=n(_e,"LI",{});var lPe=s(e5);q1e=n(lPe,"STRONG",{});var hCt=s(q1e);D4r=r(hCt,"roformer"),hCt.forEach(t),G4r=r(lPe," \u2014 "),HH=n(lPe,"A",{href:!0});var uCt=s(HH);O4r=r(uCt,"TFRoFormerForMultipleChoice"),uCt.forEach(t),V4r=r(lPe," (RoFormer model)"),lPe.forEach(t),X4r=i(_e),o5=n(_e,"LI",{});var iPe=s(o5);N1e=n(iPe,"STRONG",{});var pCt=s(N1e);z4r=r(pCt,"xlm"),pCt.forEach(t),W4r=r(iPe," \u2014 "),UH=n(iPe,"A",{href:!0});var _Ct=s(UH);Q4r=r(_Ct,"TFXLMForMultipleChoice"),_Ct.forEach(t),H4r=r(iPe," (XLM model)"),iPe.forEach(t),U4r=i(_e),r5=n(_e,"LI",{});var dPe=s(r5);j1e=n(dPe,"STRONG",{});var bCt=s(j1e);J4r=r(bCt,"xlm-roberta"),bCt.forEach(t),Y4r=r(dPe," \u2014 "),JH=n(dPe,"A",{href:!0});var vCt=s(JH);K4r=r(vCt,"TFXLMRobertaForMultipleChoice"),vCt.forEach(t),Z4r=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),eEr=i(_e),t5=n(_e,"LI",{});var cPe=s(t5);D1e=n(cPe,"STRONG",{});var FCt=s(D1e);oEr=r(FCt,"xlnet"),FCt.forEach(t),rEr=r(cPe," \u2014 "),YH=n(cPe,"A",{href:!0});var TCt=s(YH);tEr=r(TCt,"TFXLNetForMultipleChoice"),TCt.forEach(t),aEr=r(cPe," (XLNet model)"),cPe.forEach(t),_e.forEach(t),nEr=i(yl),T(a5.$$.fragment,yl),yl.forEach(t),Al.forEach(t),FNe=i(m),cc=n(m,"H2",{class:!0});var ADe=s(cc);n5=n(ADe,"A",{id:!0,class:!0,href:!0});var MCt=s(n5);G1e=n(MCt,"SPAN",{});var ECt=s(G1e);T(B7.$$.fragment,ECt),ECt.forEach(t),MCt.forEach(t),sEr=i(ADe),O1e=n(ADe,"SPAN",{});var CCt=s(O1e);lEr=r(CCt,"TFAutoModelForNextSentencePrediction"),CCt.forEach(t),ADe.forEach(t),TNe=i(m),nr=n(m,"DIV",{class:!0});var Ll=s(nr);T(I7.$$.fragment,Ll),iEr=i(Ll),mc=n(Ll,"P",{});var JZ=s(mc);dEr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KH=n(JZ,"A",{href:!0});var wCt=s(KH);cEr=r(wCt,"from_pretrained()"),wCt.forEach(t),mEr=r(JZ," class method or the "),ZH=n(JZ,"A",{href:!0});var ACt=s(ZH);fEr=r(ACt,"from_config()"),ACt.forEach(t),gEr=r(JZ,` class
method.`),JZ.forEach(t),hEr=i(Ll),q7=n(Ll,"P",{});var yDe=s(q7);uEr=r(yDe,"This class cannot be instantiated directly using "),V1e=n(yDe,"CODE",{});var yCt=s(V1e);pEr=r(yCt,"__init__()"),yCt.forEach(t),_Er=r(yDe," (throws an error)."),yDe.forEach(t),bEr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var L6=s(Bt);T(N7.$$.fragment,L6),vEr=i(L6),X1e=n(L6,"P",{});var LCt=s(X1e);FEr=r(LCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LCt.forEach(t),TEr=i(L6),fc=n(L6,"P",{});var YZ=s(fc);MEr=r(YZ,`Note:
Loading a model from its configuration file does `),z1e=n(YZ,"STRONG",{});var xCt=s(z1e);EEr=r(xCt,"not"),xCt.forEach(t),CEr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(YZ,"A",{href:!0});var $Ct=s(eU);wEr=r($Ct,"from_pretrained()"),$Ct.forEach(t),AEr=r(YZ," to load the model weights."),YZ.forEach(t),yEr=i(L6),T(s5.$$.fragment,L6),L6.forEach(t),LEr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(j7.$$.fragment,xl),xEr=i(xl),W1e=n(xl,"P",{});var kCt=s(W1e);$Er=r(kCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kCt.forEach(t),kEr=i(xl),ln=n(xl,"P",{});var x6=s(ln);SEr=r(x6,"The model class to instantiate is selected based on the "),Q1e=n(x6,"CODE",{});var SCt=s(Q1e);REr=r(SCt,"model_type"),SCt.forEach(t),PEr=r(x6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(x6,"CODE",{});var RCt=s(H1e);BEr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),IEr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(x6,"CODE",{});var PCt=s(U1e);qEr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),NEr=r(x6,":"),x6.forEach(t),jEr=i(xl),D7=n(xl,"UL",{});var LDe=s(D7);l5=n(LDe,"LI",{});var mPe=s(l5);J1e=n(mPe,"STRONG",{});var BCt=s(J1e);DEr=r(BCt,"bert"),BCt.forEach(t),GEr=r(mPe," \u2014 "),oU=n(mPe,"A",{href:!0});var ICt=s(oU);OEr=r(ICt,"TFBertForNextSentencePrediction"),ICt.forEach(t),VEr=r(mPe," (BERT model)"),mPe.forEach(t),XEr=i(LDe),i5=n(LDe,"LI",{});var fPe=s(i5);Y1e=n(fPe,"STRONG",{});var qCt=s(Y1e);zEr=r(qCt,"mobilebert"),qCt.forEach(t),WEr=r(fPe," \u2014 "),rU=n(fPe,"A",{href:!0});var NCt=s(rU);QEr=r(NCt,"TFMobileBertForNextSentencePrediction"),NCt.forEach(t),HEr=r(fPe," (MobileBERT model)"),fPe.forEach(t),LDe.forEach(t),UEr=i(xl),T(d5.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),MNe=i(m),gc=n(m,"H2",{class:!0});var xDe=s(gc);c5=n(xDe,"A",{id:!0,class:!0,href:!0});var jCt=s(c5);K1e=n(jCt,"SPAN",{});var DCt=s(K1e);T(G7.$$.fragment,DCt),DCt.forEach(t),jCt.forEach(t),JEr=i(xDe),Z1e=n(xDe,"SPAN",{});var GCt=s(Z1e);YEr=r(GCt,"TFAutoModelForTableQuestionAnswering"),GCt.forEach(t),xDe.forEach(t),ENe=i(m),sr=n(m,"DIV",{class:!0});var $l=s(sr);T(O7.$$.fragment,$l),KEr=i($l),hc=n($l,"P",{});var KZ=s(hc);ZEr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tU=n(KZ,"A",{href:!0});var OCt=s(tU);eCr=r(OCt,"from_pretrained()"),OCt.forEach(t),oCr=r(KZ," class method or the "),aU=n(KZ,"A",{href:!0});var VCt=s(aU);rCr=r(VCt,"from_config()"),VCt.forEach(t),tCr=r(KZ,` class
method.`),KZ.forEach(t),aCr=i($l),V7=n($l,"P",{});var $De=s(V7);nCr=r($De,"This class cannot be instantiated directly using "),eTe=n($De,"CODE",{});var XCt=s(eTe);sCr=r(XCt,"__init__()"),XCt.forEach(t),lCr=r($De," (throws an error)."),$De.forEach(t),iCr=i($l),It=n($l,"DIV",{class:!0});var $6=s(It);T(X7.$$.fragment,$6),dCr=i($6),oTe=n($6,"P",{});var zCt=s(oTe);cCr=r(zCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zCt.forEach(t),mCr=i($6),uc=n($6,"P",{});var ZZ=s(uc);fCr=r(ZZ,`Note:
Loading a model from its configuration file does `),rTe=n(ZZ,"STRONG",{});var WCt=s(rTe);gCr=r(WCt,"not"),WCt.forEach(t),hCr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(ZZ,"A",{href:!0});var QCt=s(nU);uCr=r(QCt,"from_pretrained()"),QCt.forEach(t),pCr=r(ZZ," to load the model weights."),ZZ.forEach(t),_Cr=i($6),T(m5.$$.fragment,$6),$6.forEach(t),bCr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(z7.$$.fragment,kl),vCr=i(kl),tTe=n(kl,"P",{});var HCt=s(tTe);FCr=r(HCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HCt.forEach(t),TCr=i(kl),dn=n(kl,"P",{});var k6=s(dn);MCr=r(k6,"The model class to instantiate is selected based on the "),aTe=n(k6,"CODE",{});var UCt=s(aTe);ECr=r(UCt,"model_type"),UCt.forEach(t),CCr=r(k6,` property of the config object (either
passed as an argument or loaded from `),nTe=n(k6,"CODE",{});var JCt=s(nTe);wCr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),ACr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(k6,"CODE",{});var YCt=s(sTe);yCr=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),LCr=r(k6,":"),k6.forEach(t),xCr=i(kl),lTe=n(kl,"UL",{});var KCt=s(lTe);f5=n(KCt,"LI",{});var gPe=s(f5);iTe=n(gPe,"STRONG",{});var ZCt=s(iTe);$Cr=r(ZCt,"tapas"),ZCt.forEach(t),kCr=r(gPe," \u2014 "),sU=n(gPe,"A",{href:!0});var e5t=s(sU);SCr=r(e5t,"TFTapasForQuestionAnswering"),e5t.forEach(t),RCr=r(gPe," (TAPAS model)"),gPe.forEach(t),KCt.forEach(t),PCr=i(kl),T(g5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CNe=i(m),pc=n(m,"H2",{class:!0});var kDe=s(pc);h5=n(kDe,"A",{id:!0,class:!0,href:!0});var o5t=s(h5);dTe=n(o5t,"SPAN",{});var r5t=s(dTe);T(W7.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),BCr=i(kDe),cTe=n(kDe,"SPAN",{});var t5t=s(cTe);ICr=r(t5t,"TFAutoModelForTokenClassification"),t5t.forEach(t),kDe.forEach(t),wNe=i(m),lr=n(m,"DIV",{class:!0});var Sl=s(lr);T(Q7.$$.fragment,Sl),qCr=i(Sl),_c=n(Sl,"P",{});var eee=s(_c);NCr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lU=n(eee,"A",{href:!0});var a5t=s(lU);jCr=r(a5t,"from_pretrained()"),a5t.forEach(t),DCr=r(eee," class method or the "),iU=n(eee,"A",{href:!0});var n5t=s(iU);GCr=r(n5t,"from_config()"),n5t.forEach(t),OCr=r(eee,` class
method.`),eee.forEach(t),VCr=i(Sl),H7=n(Sl,"P",{});var SDe=s(H7);XCr=r(SDe,"This class cannot be instantiated directly using "),mTe=n(SDe,"CODE",{});var s5t=s(mTe);zCr=r(s5t,"__init__()"),s5t.forEach(t),WCr=r(SDe," (throws an error)."),SDe.forEach(t),QCr=i(Sl),qt=n(Sl,"DIV",{class:!0});var S6=s(qt);T(U7.$$.fragment,S6),HCr=i(S6),fTe=n(S6,"P",{});var l5t=s(fTe);UCr=r(l5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l5t.forEach(t),JCr=i(S6),bc=n(S6,"P",{});var oee=s(bc);YCr=r(oee,`Note:
Loading a model from its configuration file does `),gTe=n(oee,"STRONG",{});var i5t=s(gTe);KCr=r(i5t,"not"),i5t.forEach(t),ZCr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(oee,"A",{href:!0});var d5t=s(dU);e5r=r(d5t,"from_pretrained()"),d5t.forEach(t),o5r=r(oee," to load the model weights."),oee.forEach(t),r5r=i(S6),T(u5.$$.fragment,S6),S6.forEach(t),t5r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(J7.$$.fragment,Rl),a5r=i(Rl),hTe=n(Rl,"P",{});var c5t=s(hTe);n5r=r(c5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),c5t.forEach(t),s5r=i(Rl),cn=n(Rl,"P",{});var R6=s(cn);l5r=r(R6,"The model class to instantiate is selected based on the "),uTe=n(R6,"CODE",{});var m5t=s(uTe);i5r=r(m5t,"model_type"),m5t.forEach(t),d5r=r(R6,` property of the config object (either
passed as an argument or loaded from `),pTe=n(R6,"CODE",{});var f5t=s(pTe);c5r=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),m5r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(R6,"CODE",{});var g5t=s(_Te);f5r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),g5r=r(R6,":"),R6.forEach(t),h5r=i(Rl),de=n(Rl,"UL",{});var fe=s(de);p5=n(fe,"LI",{});var hPe=s(p5);bTe=n(hPe,"STRONG",{});var h5t=s(bTe);u5r=r(h5t,"albert"),h5t.forEach(t),p5r=r(hPe," \u2014 "),cU=n(hPe,"A",{href:!0});var u5t=s(cU);_5r=r(u5t,"TFAlbertForTokenClassification"),u5t.forEach(t),b5r=r(hPe," (ALBERT model)"),hPe.forEach(t),v5r=i(fe),_5=n(fe,"LI",{});var uPe=s(_5);vTe=n(uPe,"STRONG",{});var p5t=s(vTe);F5r=r(p5t,"bert"),p5t.forEach(t),T5r=r(uPe," \u2014 "),mU=n(uPe,"A",{href:!0});var _5t=s(mU);M5r=r(_5t,"TFBertForTokenClassification"),_5t.forEach(t),E5r=r(uPe," (BERT model)"),uPe.forEach(t),C5r=i(fe),b5=n(fe,"LI",{});var pPe=s(b5);FTe=n(pPe,"STRONG",{});var b5t=s(FTe);w5r=r(b5t,"camembert"),b5t.forEach(t),A5r=r(pPe," \u2014 "),fU=n(pPe,"A",{href:!0});var v5t=s(fU);y5r=r(v5t,"TFCamembertForTokenClassification"),v5t.forEach(t),L5r=r(pPe," (CamemBERT model)"),pPe.forEach(t),x5r=i(fe),v5=n(fe,"LI",{});var _Pe=s(v5);TTe=n(_Pe,"STRONG",{});var F5t=s(TTe);$5r=r(F5t,"convbert"),F5t.forEach(t),k5r=r(_Pe," \u2014 "),gU=n(_Pe,"A",{href:!0});var T5t=s(gU);S5r=r(T5t,"TFConvBertForTokenClassification"),T5t.forEach(t),R5r=r(_Pe," (ConvBERT model)"),_Pe.forEach(t),P5r=i(fe),F5=n(fe,"LI",{});var bPe=s(F5);MTe=n(bPe,"STRONG",{});var M5t=s(MTe);B5r=r(M5t,"deberta"),M5t.forEach(t),I5r=r(bPe," \u2014 "),hU=n(bPe,"A",{href:!0});var E5t=s(hU);q5r=r(E5t,"TFDebertaForTokenClassification"),E5t.forEach(t),N5r=r(bPe," (DeBERTa model)"),bPe.forEach(t),j5r=i(fe),T5=n(fe,"LI",{});var vPe=s(T5);ETe=n(vPe,"STRONG",{});var C5t=s(ETe);D5r=r(C5t,"deberta-v2"),C5t.forEach(t),G5r=r(vPe," \u2014 "),uU=n(vPe,"A",{href:!0});var w5t=s(uU);O5r=r(w5t,"TFDebertaV2ForTokenClassification"),w5t.forEach(t),V5r=r(vPe," (DeBERTa-v2 model)"),vPe.forEach(t),X5r=i(fe),M5=n(fe,"LI",{});var FPe=s(M5);CTe=n(FPe,"STRONG",{});var A5t=s(CTe);z5r=r(A5t,"distilbert"),A5t.forEach(t),W5r=r(FPe," \u2014 "),pU=n(FPe,"A",{href:!0});var y5t=s(pU);Q5r=r(y5t,"TFDistilBertForTokenClassification"),y5t.forEach(t),H5r=r(FPe," (DistilBERT model)"),FPe.forEach(t),U5r=i(fe),E5=n(fe,"LI",{});var TPe=s(E5);wTe=n(TPe,"STRONG",{});var L5t=s(wTe);J5r=r(L5t,"electra"),L5t.forEach(t),Y5r=r(TPe," \u2014 "),_U=n(TPe,"A",{href:!0});var x5t=s(_U);K5r=r(x5t,"TFElectraForTokenClassification"),x5t.forEach(t),Z5r=r(TPe," (ELECTRA model)"),TPe.forEach(t),e3r=i(fe),C5=n(fe,"LI",{});var MPe=s(C5);ATe=n(MPe,"STRONG",{});var $5t=s(ATe);o3r=r($5t,"flaubert"),$5t.forEach(t),r3r=r(MPe," \u2014 "),bU=n(MPe,"A",{href:!0});var k5t=s(bU);t3r=r(k5t,"TFFlaubertForTokenClassification"),k5t.forEach(t),a3r=r(MPe," (FlauBERT model)"),MPe.forEach(t),n3r=i(fe),w5=n(fe,"LI",{});var EPe=s(w5);yTe=n(EPe,"STRONG",{});var S5t=s(yTe);s3r=r(S5t,"funnel"),S5t.forEach(t),l3r=r(EPe," \u2014 "),vU=n(EPe,"A",{href:!0});var R5t=s(vU);i3r=r(R5t,"TFFunnelForTokenClassification"),R5t.forEach(t),d3r=r(EPe," (Funnel Transformer model)"),EPe.forEach(t),c3r=i(fe),A5=n(fe,"LI",{});var CPe=s(A5);LTe=n(CPe,"STRONG",{});var P5t=s(LTe);m3r=r(P5t,"layoutlm"),P5t.forEach(t),f3r=r(CPe," \u2014 "),FU=n(CPe,"A",{href:!0});var B5t=s(FU);g3r=r(B5t,"TFLayoutLMForTokenClassification"),B5t.forEach(t),h3r=r(CPe," (LayoutLM model)"),CPe.forEach(t),u3r=i(fe),y5=n(fe,"LI",{});var wPe=s(y5);xTe=n(wPe,"STRONG",{});var I5t=s(xTe);p3r=r(I5t,"longformer"),I5t.forEach(t),_3r=r(wPe," \u2014 "),TU=n(wPe,"A",{href:!0});var q5t=s(TU);b3r=r(q5t,"TFLongformerForTokenClassification"),q5t.forEach(t),v3r=r(wPe," (Longformer model)"),wPe.forEach(t),F3r=i(fe),L5=n(fe,"LI",{});var APe=s(L5);$Te=n(APe,"STRONG",{});var N5t=s($Te);T3r=r(N5t,"mobilebert"),N5t.forEach(t),M3r=r(APe," \u2014 "),MU=n(APe,"A",{href:!0});var j5t=s(MU);E3r=r(j5t,"TFMobileBertForTokenClassification"),j5t.forEach(t),C3r=r(APe," (MobileBERT model)"),APe.forEach(t),w3r=i(fe),x5=n(fe,"LI",{});var yPe=s(x5);kTe=n(yPe,"STRONG",{});var D5t=s(kTe);A3r=r(D5t,"mpnet"),D5t.forEach(t),y3r=r(yPe," \u2014 "),EU=n(yPe,"A",{href:!0});var G5t=s(EU);L3r=r(G5t,"TFMPNetForTokenClassification"),G5t.forEach(t),x3r=r(yPe," (MPNet model)"),yPe.forEach(t),$3r=i(fe),$5=n(fe,"LI",{});var LPe=s($5);STe=n(LPe,"STRONG",{});var O5t=s(STe);k3r=r(O5t,"rembert"),O5t.forEach(t),S3r=r(LPe," \u2014 "),CU=n(LPe,"A",{href:!0});var V5t=s(CU);R3r=r(V5t,"TFRemBertForTokenClassification"),V5t.forEach(t),P3r=r(LPe," (RemBERT model)"),LPe.forEach(t),B3r=i(fe),k5=n(fe,"LI",{});var xPe=s(k5);RTe=n(xPe,"STRONG",{});var X5t=s(RTe);I3r=r(X5t,"roberta"),X5t.forEach(t),q3r=r(xPe," \u2014 "),wU=n(xPe,"A",{href:!0});var z5t=s(wU);N3r=r(z5t,"TFRobertaForTokenClassification"),z5t.forEach(t),j3r=r(xPe," (RoBERTa model)"),xPe.forEach(t),D3r=i(fe),S5=n(fe,"LI",{});var $Pe=s(S5);PTe=n($Pe,"STRONG",{});var W5t=s(PTe);G3r=r(W5t,"roformer"),W5t.forEach(t),O3r=r($Pe," \u2014 "),AU=n($Pe,"A",{href:!0});var Q5t=s(AU);V3r=r(Q5t,"TFRoFormerForTokenClassification"),Q5t.forEach(t),X3r=r($Pe," (RoFormer model)"),$Pe.forEach(t),z3r=i(fe),R5=n(fe,"LI",{});var kPe=s(R5);BTe=n(kPe,"STRONG",{});var H5t=s(BTe);W3r=r(H5t,"xlm"),H5t.forEach(t),Q3r=r(kPe," \u2014 "),yU=n(kPe,"A",{href:!0});var U5t=s(yU);H3r=r(U5t,"TFXLMForTokenClassification"),U5t.forEach(t),U3r=r(kPe," (XLM model)"),kPe.forEach(t),J3r=i(fe),P5=n(fe,"LI",{});var SPe=s(P5);ITe=n(SPe,"STRONG",{});var J5t=s(ITe);Y3r=r(J5t,"xlm-roberta"),J5t.forEach(t),K3r=r(SPe," \u2014 "),LU=n(SPe,"A",{href:!0});var Y5t=s(LU);Z3r=r(Y5t,"TFXLMRobertaForTokenClassification"),Y5t.forEach(t),ewr=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),owr=i(fe),B5=n(fe,"LI",{});var RPe=s(B5);qTe=n(RPe,"STRONG",{});var K5t=s(qTe);rwr=r(K5t,"xlnet"),K5t.forEach(t),twr=r(RPe," \u2014 "),xU=n(RPe,"A",{href:!0});var Z5t=s(xU);awr=r(Z5t,"TFXLNetForTokenClassification"),Z5t.forEach(t),nwr=r(RPe," (XLNet model)"),RPe.forEach(t),fe.forEach(t),swr=i(Rl),T(I5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ANe=i(m),vc=n(m,"H2",{class:!0});var RDe=s(vc);q5=n(RDe,"A",{id:!0,class:!0,href:!0});var e3t=s(q5);NTe=n(e3t,"SPAN",{});var o3t=s(NTe);T(Y7.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),lwr=i(RDe),jTe=n(RDe,"SPAN",{});var r3t=s(jTe);iwr=r(r3t,"TFAutoModelForQuestionAnswering"),r3t.forEach(t),RDe.forEach(t),yNe=i(m),ir=n(m,"DIV",{class:!0});var Pl=s(ir);T(K7.$$.fragment,Pl),dwr=i(Pl),Fc=n(Pl,"P",{});var ree=s(Fc);cwr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$U=n(ree,"A",{href:!0});var t3t=s($U);mwr=r(t3t,"from_pretrained()"),t3t.forEach(t),fwr=r(ree," class method or the "),kU=n(ree,"A",{href:!0});var a3t=s(kU);gwr=r(a3t,"from_config()"),a3t.forEach(t),hwr=r(ree,` class
method.`),ree.forEach(t),uwr=i(Pl),Z7=n(Pl,"P",{});var PDe=s(Z7);pwr=r(PDe,"This class cannot be instantiated directly using "),DTe=n(PDe,"CODE",{});var n3t=s(DTe);_wr=r(n3t,"__init__()"),n3t.forEach(t),bwr=r(PDe," (throws an error)."),PDe.forEach(t),vwr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var P6=s(Nt);T(e9.$$.fragment,P6),Fwr=i(P6),GTe=n(P6,"P",{});var s3t=s(GTe);Twr=r(s3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),s3t.forEach(t),Mwr=i(P6),Tc=n(P6,"P",{});var tee=s(Tc);Ewr=r(tee,`Note:
Loading a model from its configuration file does `),OTe=n(tee,"STRONG",{});var l3t=s(OTe);Cwr=r(l3t,"not"),l3t.forEach(t),wwr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(tee,"A",{href:!0});var i3t=s(SU);Awr=r(i3t,"from_pretrained()"),i3t.forEach(t),ywr=r(tee," to load the model weights."),tee.forEach(t),Lwr=i(P6),T(N5.$$.fragment,P6),P6.forEach(t),xwr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(o9.$$.fragment,Bl),$wr=i(Bl),VTe=n(Bl,"P",{});var d3t=s(VTe);kwr=r(d3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),d3t.forEach(t),Swr=i(Bl),mn=n(Bl,"P",{});var B6=s(mn);Rwr=r(B6,"The model class to instantiate is selected based on the "),XTe=n(B6,"CODE",{});var c3t=s(XTe);Pwr=r(c3t,"model_type"),c3t.forEach(t),Bwr=r(B6,` property of the config object (either
passed as an argument or loaded from `),zTe=n(B6,"CODE",{});var m3t=s(zTe);Iwr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),qwr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(B6,"CODE",{});var f3t=s(WTe);Nwr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),jwr=r(B6,":"),B6.forEach(t),Dwr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);j5=n(ge,"LI",{});var PPe=s(j5);QTe=n(PPe,"STRONG",{});var g3t=s(QTe);Gwr=r(g3t,"albert"),g3t.forEach(t),Owr=r(PPe," \u2014 "),RU=n(PPe,"A",{href:!0});var h3t=s(RU);Vwr=r(h3t,"TFAlbertForQuestionAnswering"),h3t.forEach(t),Xwr=r(PPe," (ALBERT model)"),PPe.forEach(t),zwr=i(ge),D5=n(ge,"LI",{});var BPe=s(D5);HTe=n(BPe,"STRONG",{});var u3t=s(HTe);Wwr=r(u3t,"bert"),u3t.forEach(t),Qwr=r(BPe," \u2014 "),PU=n(BPe,"A",{href:!0});var p3t=s(PU);Hwr=r(p3t,"TFBertForQuestionAnswering"),p3t.forEach(t),Uwr=r(BPe," (BERT model)"),BPe.forEach(t),Jwr=i(ge),G5=n(ge,"LI",{});var IPe=s(G5);UTe=n(IPe,"STRONG",{});var _3t=s(UTe);Ywr=r(_3t,"camembert"),_3t.forEach(t),Kwr=r(IPe," \u2014 "),BU=n(IPe,"A",{href:!0});var b3t=s(BU);Zwr=r(b3t,"TFCamembertForQuestionAnswering"),b3t.forEach(t),e0r=r(IPe," (CamemBERT model)"),IPe.forEach(t),o0r=i(ge),O5=n(ge,"LI",{});var qPe=s(O5);JTe=n(qPe,"STRONG",{});var v3t=s(JTe);r0r=r(v3t,"convbert"),v3t.forEach(t),t0r=r(qPe," \u2014 "),IU=n(qPe,"A",{href:!0});var F3t=s(IU);a0r=r(F3t,"TFConvBertForQuestionAnswering"),F3t.forEach(t),n0r=r(qPe," (ConvBERT model)"),qPe.forEach(t),s0r=i(ge),V5=n(ge,"LI",{});var NPe=s(V5);YTe=n(NPe,"STRONG",{});var T3t=s(YTe);l0r=r(T3t,"deberta"),T3t.forEach(t),i0r=r(NPe," \u2014 "),qU=n(NPe,"A",{href:!0});var M3t=s(qU);d0r=r(M3t,"TFDebertaForQuestionAnswering"),M3t.forEach(t),c0r=r(NPe," (DeBERTa model)"),NPe.forEach(t),m0r=i(ge),X5=n(ge,"LI",{});var jPe=s(X5);KTe=n(jPe,"STRONG",{});var E3t=s(KTe);f0r=r(E3t,"deberta-v2"),E3t.forEach(t),g0r=r(jPe," \u2014 "),NU=n(jPe,"A",{href:!0});var C3t=s(NU);h0r=r(C3t,"TFDebertaV2ForQuestionAnswering"),C3t.forEach(t),u0r=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),p0r=i(ge),z5=n(ge,"LI",{});var DPe=s(z5);ZTe=n(DPe,"STRONG",{});var w3t=s(ZTe);_0r=r(w3t,"distilbert"),w3t.forEach(t),b0r=r(DPe," \u2014 "),jU=n(DPe,"A",{href:!0});var A3t=s(jU);v0r=r(A3t,"TFDistilBertForQuestionAnswering"),A3t.forEach(t),F0r=r(DPe," (DistilBERT model)"),DPe.forEach(t),T0r=i(ge),W5=n(ge,"LI",{});var GPe=s(W5);eMe=n(GPe,"STRONG",{});var y3t=s(eMe);M0r=r(y3t,"electra"),y3t.forEach(t),E0r=r(GPe," \u2014 "),DU=n(GPe,"A",{href:!0});var L3t=s(DU);C0r=r(L3t,"TFElectraForQuestionAnswering"),L3t.forEach(t),w0r=r(GPe," (ELECTRA model)"),GPe.forEach(t),A0r=i(ge),Q5=n(ge,"LI",{});var OPe=s(Q5);oMe=n(OPe,"STRONG",{});var x3t=s(oMe);y0r=r(x3t,"flaubert"),x3t.forEach(t),L0r=r(OPe," \u2014 "),GU=n(OPe,"A",{href:!0});var $3t=s(GU);x0r=r($3t,"TFFlaubertForQuestionAnsweringSimple"),$3t.forEach(t),$0r=r(OPe," (FlauBERT model)"),OPe.forEach(t),k0r=i(ge),H5=n(ge,"LI",{});var VPe=s(H5);rMe=n(VPe,"STRONG",{});var k3t=s(rMe);S0r=r(k3t,"funnel"),k3t.forEach(t),R0r=r(VPe," \u2014 "),OU=n(VPe,"A",{href:!0});var S3t=s(OU);P0r=r(S3t,"TFFunnelForQuestionAnswering"),S3t.forEach(t),B0r=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),I0r=i(ge),U5=n(ge,"LI",{});var XPe=s(U5);tMe=n(XPe,"STRONG",{});var R3t=s(tMe);q0r=r(R3t,"gptj"),R3t.forEach(t),N0r=r(XPe," \u2014 "),VU=n(XPe,"A",{href:!0});var P3t=s(VU);j0r=r(P3t,"TFGPTJForQuestionAnswering"),P3t.forEach(t),D0r=r(XPe," (GPT-J model)"),XPe.forEach(t),G0r=i(ge),J5=n(ge,"LI",{});var zPe=s(J5);aMe=n(zPe,"STRONG",{});var B3t=s(aMe);O0r=r(B3t,"longformer"),B3t.forEach(t),V0r=r(zPe," \u2014 "),XU=n(zPe,"A",{href:!0});var I3t=s(XU);X0r=r(I3t,"TFLongformerForQuestionAnswering"),I3t.forEach(t),z0r=r(zPe," (Longformer model)"),zPe.forEach(t),W0r=i(ge),Y5=n(ge,"LI",{});var WPe=s(Y5);nMe=n(WPe,"STRONG",{});var q3t=s(nMe);Q0r=r(q3t,"mobilebert"),q3t.forEach(t),H0r=r(WPe," \u2014 "),zU=n(WPe,"A",{href:!0});var N3t=s(zU);U0r=r(N3t,"TFMobileBertForQuestionAnswering"),N3t.forEach(t),J0r=r(WPe," (MobileBERT model)"),WPe.forEach(t),Y0r=i(ge),K5=n(ge,"LI",{});var QPe=s(K5);sMe=n(QPe,"STRONG",{});var j3t=s(sMe);K0r=r(j3t,"mpnet"),j3t.forEach(t),Z0r=r(QPe," \u2014 "),WU=n(QPe,"A",{href:!0});var D3t=s(WU);eAr=r(D3t,"TFMPNetForQuestionAnswering"),D3t.forEach(t),oAr=r(QPe," (MPNet model)"),QPe.forEach(t),rAr=i(ge),Z5=n(ge,"LI",{});var HPe=s(Z5);lMe=n(HPe,"STRONG",{});var G3t=s(lMe);tAr=r(G3t,"rembert"),G3t.forEach(t),aAr=r(HPe," \u2014 "),QU=n(HPe,"A",{href:!0});var O3t=s(QU);nAr=r(O3t,"TFRemBertForQuestionAnswering"),O3t.forEach(t),sAr=r(HPe," (RemBERT model)"),HPe.forEach(t),lAr=i(ge),e3=n(ge,"LI",{});var UPe=s(e3);iMe=n(UPe,"STRONG",{});var V3t=s(iMe);iAr=r(V3t,"roberta"),V3t.forEach(t),dAr=r(UPe," \u2014 "),HU=n(UPe,"A",{href:!0});var X3t=s(HU);cAr=r(X3t,"TFRobertaForQuestionAnswering"),X3t.forEach(t),mAr=r(UPe," (RoBERTa model)"),UPe.forEach(t),fAr=i(ge),o3=n(ge,"LI",{});var JPe=s(o3);dMe=n(JPe,"STRONG",{});var z3t=s(dMe);gAr=r(z3t,"roformer"),z3t.forEach(t),hAr=r(JPe," \u2014 "),UU=n(JPe,"A",{href:!0});var W3t=s(UU);uAr=r(W3t,"TFRoFormerForQuestionAnswering"),W3t.forEach(t),pAr=r(JPe," (RoFormer model)"),JPe.forEach(t),_Ar=i(ge),r3=n(ge,"LI",{});var YPe=s(r3);cMe=n(YPe,"STRONG",{});var Q3t=s(cMe);bAr=r(Q3t,"xlm"),Q3t.forEach(t),vAr=r(YPe," \u2014 "),JU=n(YPe,"A",{href:!0});var H3t=s(JU);FAr=r(H3t,"TFXLMForQuestionAnsweringSimple"),H3t.forEach(t),TAr=r(YPe," (XLM model)"),YPe.forEach(t),MAr=i(ge),t3=n(ge,"LI",{});var KPe=s(t3);mMe=n(KPe,"STRONG",{});var U3t=s(mMe);EAr=r(U3t,"xlm-roberta"),U3t.forEach(t),CAr=r(KPe," \u2014 "),YU=n(KPe,"A",{href:!0});var J3t=s(YU);wAr=r(J3t,"TFXLMRobertaForQuestionAnswering"),J3t.forEach(t),AAr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),yAr=i(ge),a3=n(ge,"LI",{});var ZPe=s(a3);fMe=n(ZPe,"STRONG",{});var Y3t=s(fMe);LAr=r(Y3t,"xlnet"),Y3t.forEach(t),xAr=r(ZPe," \u2014 "),KU=n(ZPe,"A",{href:!0});var K3t=s(KU);$Ar=r(K3t,"TFXLNetForQuestionAnsweringSimple"),K3t.forEach(t),kAr=r(ZPe," (XLNet model)"),ZPe.forEach(t),ge.forEach(t),SAr=i(Bl),T(n3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),LNe=i(m),Mc=n(m,"H2",{class:!0});var BDe=s(Mc);s3=n(BDe,"A",{id:!0,class:!0,href:!0});var Z3t=s(s3);gMe=n(Z3t,"SPAN",{});var ewt=s(gMe);T(r9.$$.fragment,ewt),ewt.forEach(t),Z3t.forEach(t),RAr=i(BDe),hMe=n(BDe,"SPAN",{});var owt=s(hMe);PAr=r(owt,"TFAutoModelForVision2Seq"),owt.forEach(t),BDe.forEach(t),xNe=i(m),dr=n(m,"DIV",{class:!0});var Il=s(dr);T(t9.$$.fragment,Il),BAr=i(Il),Ec=n(Il,"P",{});var aee=s(Ec);IAr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZU=n(aee,"A",{href:!0});var rwt=s(ZU);qAr=r(rwt,"from_pretrained()"),rwt.forEach(t),NAr=r(aee," class method or the "),eJ=n(aee,"A",{href:!0});var twt=s(eJ);jAr=r(twt,"from_config()"),twt.forEach(t),DAr=r(aee,` class
method.`),aee.forEach(t),GAr=i(Il),a9=n(Il,"P",{});var IDe=s(a9);OAr=r(IDe,"This class cannot be instantiated directly using "),uMe=n(IDe,"CODE",{});var awt=s(uMe);VAr=r(awt,"__init__()"),awt.forEach(t),XAr=r(IDe," (throws an error)."),IDe.forEach(t),zAr=i(Il),jt=n(Il,"DIV",{class:!0});var I6=s(jt);T(n9.$$.fragment,I6),WAr=i(I6),pMe=n(I6,"P",{});var nwt=s(pMe);QAr=r(nwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nwt.forEach(t),HAr=i(I6),Cc=n(I6,"P",{});var nee=s(Cc);UAr=r(nee,`Note:
Loading a model from its configuration file does `),_Me=n(nee,"STRONG",{});var swt=s(_Me);JAr=r(swt,"not"),swt.forEach(t),YAr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(nee,"A",{href:!0});var lwt=s(oJ);KAr=r(lwt,"from_pretrained()"),lwt.forEach(t),ZAr=r(nee," to load the model weights."),nee.forEach(t),e6r=i(I6),T(l3.$$.fragment,I6),I6.forEach(t),o6r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(s9.$$.fragment,ql),r6r=i(ql),bMe=n(ql,"P",{});var iwt=s(bMe);t6r=r(iwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iwt.forEach(t),a6r=i(ql),fn=n(ql,"P",{});var q6=s(fn);n6r=r(q6,"The model class to instantiate is selected based on the "),vMe=n(q6,"CODE",{});var dwt=s(vMe);s6r=r(dwt,"model_type"),dwt.forEach(t),l6r=r(q6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(q6,"CODE",{});var cwt=s(FMe);i6r=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),d6r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(q6,"CODE",{});var mwt=s(TMe);c6r=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),m6r=r(q6,":"),q6.forEach(t),f6r=i(ql),MMe=n(ql,"UL",{});var fwt=s(MMe);i3=n(fwt,"LI",{});var eBe=s(i3);EMe=n(eBe,"STRONG",{});var gwt=s(EMe);g6r=r(gwt,"vision-encoder-decoder"),gwt.forEach(t),h6r=r(eBe," \u2014 "),rJ=n(eBe,"A",{href:!0});var hwt=s(rJ);u6r=r(hwt,"TFVisionEncoderDecoderModel"),hwt.forEach(t),p6r=r(eBe," (Vision Encoder decoder model)"),eBe.forEach(t),fwt.forEach(t),_6r=i(ql),T(d3.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$Ne=i(m),wc=n(m,"H2",{class:!0});var qDe=s(wc);c3=n(qDe,"A",{id:!0,class:!0,href:!0});var uwt=s(c3);CMe=n(uwt,"SPAN",{});var pwt=s(CMe);T(l9.$$.fragment,pwt),pwt.forEach(t),uwt.forEach(t),b6r=i(qDe),wMe=n(qDe,"SPAN",{});var _wt=s(wMe);v6r=r(_wt,"TFAutoModelForSpeechSeq2Seq"),_wt.forEach(t),qDe.forEach(t),kNe=i(m),cr=n(m,"DIV",{class:!0});var Nl=s(cr);T(i9.$$.fragment,Nl),F6r=i(Nl),Ac=n(Nl,"P",{});var see=s(Ac);T6r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tJ=n(see,"A",{href:!0});var bwt=s(tJ);M6r=r(bwt,"from_pretrained()"),bwt.forEach(t),E6r=r(see," class method or the "),aJ=n(see,"A",{href:!0});var vwt=s(aJ);C6r=r(vwt,"from_config()"),vwt.forEach(t),w6r=r(see,` class
method.`),see.forEach(t),A6r=i(Nl),d9=n(Nl,"P",{});var NDe=s(d9);y6r=r(NDe,"This class cannot be instantiated directly using "),AMe=n(NDe,"CODE",{});var Fwt=s(AMe);L6r=r(Fwt,"__init__()"),Fwt.forEach(t),x6r=r(NDe," (throws an error)."),NDe.forEach(t),$6r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var N6=s(Dt);T(c9.$$.fragment,N6),k6r=i(N6),yMe=n(N6,"P",{});var Twt=s(yMe);S6r=r(Twt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Twt.forEach(t),R6r=i(N6),yc=n(N6,"P",{});var lee=s(yc);P6r=r(lee,`Note:
Loading a model from its configuration file does `),LMe=n(lee,"STRONG",{});var Mwt=s(LMe);B6r=r(Mwt,"not"),Mwt.forEach(t),I6r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(lee,"A",{href:!0});var Ewt=s(nJ);q6r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),N6r=r(lee," to load the model weights."),lee.forEach(t),j6r=i(N6),T(m3.$$.fragment,N6),N6.forEach(t),D6r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(m9.$$.fragment,jl),G6r=i(jl),xMe=n(jl,"P",{});var Cwt=s(xMe);O6r=r(Cwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cwt.forEach(t),V6r=i(jl),gn=n(jl,"P",{});var j6=s(gn);X6r=r(j6,"The model class to instantiate is selected based on the "),$Me=n(j6,"CODE",{});var wwt=s($Me);z6r=r(wwt,"model_type"),wwt.forEach(t),W6r=r(j6,` property of the config object (either
passed as an argument or loaded from `),kMe=n(j6,"CODE",{});var Awt=s(kMe);Q6r=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),H6r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(j6,"CODE",{});var ywt=s(SMe);U6r=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),J6r=r(j6,":"),j6.forEach(t),Y6r=i(jl),RMe=n(jl,"UL",{});var Lwt=s(RMe);f3=n(Lwt,"LI",{});var oBe=s(f3);PMe=n(oBe,"STRONG",{});var xwt=s(PMe);K6r=r(xwt,"speech_to_text"),xwt.forEach(t),Z6r=r(oBe," \u2014 "),sJ=n(oBe,"A",{href:!0});var $wt=s(sJ);eyr=r($wt,"TFSpeech2TextForConditionalGeneration"),$wt.forEach(t),oyr=r(oBe," (Speech2Text model)"),oBe.forEach(t),Lwt.forEach(t),ryr=i(jl),T(g3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),SNe=i(m),Lc=n(m,"H2",{class:!0});var jDe=s(Lc);h3=n(jDe,"A",{id:!0,class:!0,href:!0});var kwt=s(h3);BMe=n(kwt,"SPAN",{});var Swt=s(BMe);T(f9.$$.fragment,Swt),Swt.forEach(t),kwt.forEach(t),tyr=i(jDe),IMe=n(jDe,"SPAN",{});var Rwt=s(IMe);ayr=r(Rwt,"FlaxAutoModel"),Rwt.forEach(t),jDe.forEach(t),RNe=i(m),mr=n(m,"DIV",{class:!0});var Dl=s(mr);T(g9.$$.fragment,Dl),nyr=i(Dl),xc=n(Dl,"P",{});var iee=s(xc);syr=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lJ=n(iee,"A",{href:!0});var Pwt=s(lJ);lyr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),iyr=r(iee," class method or the "),iJ=n(iee,"A",{href:!0});var Bwt=s(iJ);dyr=r(Bwt,"from_config()"),Bwt.forEach(t),cyr=r(iee,` class
method.`),iee.forEach(t),myr=i(Dl),h9=n(Dl,"P",{});var DDe=s(h9);fyr=r(DDe,"This class cannot be instantiated directly using "),qMe=n(DDe,"CODE",{});var Iwt=s(qMe);gyr=r(Iwt,"__init__()"),Iwt.forEach(t),hyr=r(DDe," (throws an error)."),DDe.forEach(t),uyr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var D6=s(Gt);T(u9.$$.fragment,D6),pyr=i(D6),NMe=n(D6,"P",{});var qwt=s(NMe);_yr=r(qwt,"Instantiates one of the base model classes of the library from a configuration."),qwt.forEach(t),byr=i(D6),$c=n(D6,"P",{});var dee=s($c);vyr=r(dee,`Note:
Loading a model from its configuration file does `),jMe=n(dee,"STRONG",{});var Nwt=s(jMe);Fyr=r(Nwt,"not"),Nwt.forEach(t),Tyr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(dee,"A",{href:!0});var jwt=s(dJ);Myr=r(jwt,"from_pretrained()"),jwt.forEach(t),Eyr=r(dee," to load the model weights."),dee.forEach(t),Cyr=i(D6),T(u3.$$.fragment,D6),D6.forEach(t),wyr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(p9.$$.fragment,Gl),Ayr=i(Gl),DMe=n(Gl,"P",{});var Dwt=s(DMe);yyr=r(Dwt,"Instantiate one of the base model classes of the library from a pretrained model."),Dwt.forEach(t),Lyr=i(Gl),hn=n(Gl,"P",{});var G6=s(hn);xyr=r(G6,"The model class to instantiate is selected based on the "),GMe=n(G6,"CODE",{});var Gwt=s(GMe);$yr=r(Gwt,"model_type"),Gwt.forEach(t),kyr=r(G6,` property of the config object (either
passed as an argument or loaded from `),OMe=n(G6,"CODE",{});var Owt=s(OMe);Syr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),Ryr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(G6,"CODE",{});var Vwt=s(VMe);Pyr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Byr=r(G6,":"),G6.forEach(t),Iyr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);p3=n(ne,"LI",{});var rBe=s(p3);XMe=n(rBe,"STRONG",{});var Xwt=s(XMe);qyr=r(Xwt,"albert"),Xwt.forEach(t),Nyr=r(rBe," \u2014 "),cJ=n(rBe,"A",{href:!0});var zwt=s(cJ);jyr=r(zwt,"FlaxAlbertModel"),zwt.forEach(t),Dyr=r(rBe," (ALBERT model)"),rBe.forEach(t),Gyr=i(ne),_3=n(ne,"LI",{});var tBe=s(_3);zMe=n(tBe,"STRONG",{});var Wwt=s(zMe);Oyr=r(Wwt,"bart"),Wwt.forEach(t),Vyr=r(tBe," \u2014 "),mJ=n(tBe,"A",{href:!0});var Qwt=s(mJ);Xyr=r(Qwt,"FlaxBartModel"),Qwt.forEach(t),zyr=r(tBe," (BART model)"),tBe.forEach(t),Wyr=i(ne),b3=n(ne,"LI",{});var aBe=s(b3);WMe=n(aBe,"STRONG",{});var Hwt=s(WMe);Qyr=r(Hwt,"beit"),Hwt.forEach(t),Hyr=r(aBe," \u2014 "),fJ=n(aBe,"A",{href:!0});var Uwt=s(fJ);Uyr=r(Uwt,"FlaxBeitModel"),Uwt.forEach(t),Jyr=r(aBe," (BEiT model)"),aBe.forEach(t),Yyr=i(ne),v3=n(ne,"LI",{});var nBe=s(v3);QMe=n(nBe,"STRONG",{});var Jwt=s(QMe);Kyr=r(Jwt,"bert"),Jwt.forEach(t),Zyr=r(nBe," \u2014 "),gJ=n(nBe,"A",{href:!0});var Ywt=s(gJ);eLr=r(Ywt,"FlaxBertModel"),Ywt.forEach(t),oLr=r(nBe," (BERT model)"),nBe.forEach(t),rLr=i(ne),F3=n(ne,"LI",{});var sBe=s(F3);HMe=n(sBe,"STRONG",{});var Kwt=s(HMe);tLr=r(Kwt,"big_bird"),Kwt.forEach(t),aLr=r(sBe," \u2014 "),hJ=n(sBe,"A",{href:!0});var Zwt=s(hJ);nLr=r(Zwt,"FlaxBigBirdModel"),Zwt.forEach(t),sLr=r(sBe," (BigBird model)"),sBe.forEach(t),lLr=i(ne),T3=n(ne,"LI",{});var lBe=s(T3);UMe=n(lBe,"STRONG",{});var e0t=s(UMe);iLr=r(e0t,"blenderbot"),e0t.forEach(t),dLr=r(lBe," \u2014 "),uJ=n(lBe,"A",{href:!0});var o0t=s(uJ);cLr=r(o0t,"FlaxBlenderbotModel"),o0t.forEach(t),mLr=r(lBe," (Blenderbot model)"),lBe.forEach(t),fLr=i(ne),M3=n(ne,"LI",{});var iBe=s(M3);JMe=n(iBe,"STRONG",{});var r0t=s(JMe);gLr=r(r0t,"blenderbot-small"),r0t.forEach(t),hLr=r(iBe," \u2014 "),pJ=n(iBe,"A",{href:!0});var t0t=s(pJ);uLr=r(t0t,"FlaxBlenderbotSmallModel"),t0t.forEach(t),pLr=r(iBe," (BlenderbotSmall model)"),iBe.forEach(t),_Lr=i(ne),E3=n(ne,"LI",{});var dBe=s(E3);YMe=n(dBe,"STRONG",{});var a0t=s(YMe);bLr=r(a0t,"clip"),a0t.forEach(t),vLr=r(dBe," \u2014 "),_J=n(dBe,"A",{href:!0});var n0t=s(_J);FLr=r(n0t,"FlaxCLIPModel"),n0t.forEach(t),TLr=r(dBe," (CLIP model)"),dBe.forEach(t),MLr=i(ne),C3=n(ne,"LI",{});var cBe=s(C3);KMe=n(cBe,"STRONG",{});var s0t=s(KMe);ELr=r(s0t,"distilbert"),s0t.forEach(t),CLr=r(cBe," \u2014 "),bJ=n(cBe,"A",{href:!0});var l0t=s(bJ);wLr=r(l0t,"FlaxDistilBertModel"),l0t.forEach(t),ALr=r(cBe," (DistilBERT model)"),cBe.forEach(t),yLr=i(ne),w3=n(ne,"LI",{});var mBe=s(w3);ZMe=n(mBe,"STRONG",{});var i0t=s(ZMe);LLr=r(i0t,"electra"),i0t.forEach(t),xLr=r(mBe," \u2014 "),vJ=n(mBe,"A",{href:!0});var d0t=s(vJ);$Lr=r(d0t,"FlaxElectraModel"),d0t.forEach(t),kLr=r(mBe," (ELECTRA model)"),mBe.forEach(t),SLr=i(ne),A3=n(ne,"LI",{});var fBe=s(A3);e4e=n(fBe,"STRONG",{});var c0t=s(e4e);RLr=r(c0t,"gpt2"),c0t.forEach(t),PLr=r(fBe," \u2014 "),FJ=n(fBe,"A",{href:!0});var m0t=s(FJ);BLr=r(m0t,"FlaxGPT2Model"),m0t.forEach(t),ILr=r(fBe," (OpenAI GPT-2 model)"),fBe.forEach(t),qLr=i(ne),y3=n(ne,"LI",{});var gBe=s(y3);o4e=n(gBe,"STRONG",{});var f0t=s(o4e);NLr=r(f0t,"gpt_neo"),f0t.forEach(t),jLr=r(gBe," \u2014 "),TJ=n(gBe,"A",{href:!0});var g0t=s(TJ);DLr=r(g0t,"FlaxGPTNeoModel"),g0t.forEach(t),GLr=r(gBe," (GPT Neo model)"),gBe.forEach(t),OLr=i(ne),L3=n(ne,"LI",{});var hBe=s(L3);r4e=n(hBe,"STRONG",{});var h0t=s(r4e);VLr=r(h0t,"gptj"),h0t.forEach(t),XLr=r(hBe," \u2014 "),MJ=n(hBe,"A",{href:!0});var u0t=s(MJ);zLr=r(u0t,"FlaxGPTJModel"),u0t.forEach(t),WLr=r(hBe," (GPT-J model)"),hBe.forEach(t),QLr=i(ne),x3=n(ne,"LI",{});var uBe=s(x3);t4e=n(uBe,"STRONG",{});var p0t=s(t4e);HLr=r(p0t,"marian"),p0t.forEach(t),ULr=r(uBe," \u2014 "),EJ=n(uBe,"A",{href:!0});var _0t=s(EJ);JLr=r(_0t,"FlaxMarianModel"),_0t.forEach(t),YLr=r(uBe," (Marian model)"),uBe.forEach(t),KLr=i(ne),$3=n(ne,"LI",{});var pBe=s($3);a4e=n(pBe,"STRONG",{});var b0t=s(a4e);ZLr=r(b0t,"mbart"),b0t.forEach(t),e8r=r(pBe," \u2014 "),CJ=n(pBe,"A",{href:!0});var v0t=s(CJ);o8r=r(v0t,"FlaxMBartModel"),v0t.forEach(t),r8r=r(pBe," (mBART model)"),pBe.forEach(t),t8r=i(ne),k3=n(ne,"LI",{});var _Be=s(k3);n4e=n(_Be,"STRONG",{});var F0t=s(n4e);a8r=r(F0t,"mt5"),F0t.forEach(t),n8r=r(_Be," \u2014 "),wJ=n(_Be,"A",{href:!0});var T0t=s(wJ);s8r=r(T0t,"FlaxMT5Model"),T0t.forEach(t),l8r=r(_Be," (mT5 model)"),_Be.forEach(t),i8r=i(ne),S3=n(ne,"LI",{});var bBe=s(S3);s4e=n(bBe,"STRONG",{});var M0t=s(s4e);d8r=r(M0t,"pegasus"),M0t.forEach(t),c8r=r(bBe," \u2014 "),AJ=n(bBe,"A",{href:!0});var E0t=s(AJ);m8r=r(E0t,"FlaxPegasusModel"),E0t.forEach(t),f8r=r(bBe," (Pegasus model)"),bBe.forEach(t),g8r=i(ne),R3=n(ne,"LI",{});var vBe=s(R3);l4e=n(vBe,"STRONG",{});var C0t=s(l4e);h8r=r(C0t,"roberta"),C0t.forEach(t),u8r=r(vBe," \u2014 "),yJ=n(vBe,"A",{href:!0});var w0t=s(yJ);p8r=r(w0t,"FlaxRobertaModel"),w0t.forEach(t),_8r=r(vBe," (RoBERTa model)"),vBe.forEach(t),b8r=i(ne),P3=n(ne,"LI",{});var FBe=s(P3);i4e=n(FBe,"STRONG",{});var A0t=s(i4e);v8r=r(A0t,"roformer"),A0t.forEach(t),F8r=r(FBe," \u2014 "),LJ=n(FBe,"A",{href:!0});var y0t=s(LJ);T8r=r(y0t,"FlaxRoFormerModel"),y0t.forEach(t),M8r=r(FBe," (RoFormer model)"),FBe.forEach(t),E8r=i(ne),B3=n(ne,"LI",{});var TBe=s(B3);d4e=n(TBe,"STRONG",{});var L0t=s(d4e);C8r=r(L0t,"t5"),L0t.forEach(t),w8r=r(TBe," \u2014 "),xJ=n(TBe,"A",{href:!0});var x0t=s(xJ);A8r=r(x0t,"FlaxT5Model"),x0t.forEach(t),y8r=r(TBe," (T5 model)"),TBe.forEach(t),L8r=i(ne),I3=n(ne,"LI",{});var MBe=s(I3);c4e=n(MBe,"STRONG",{});var $0t=s(c4e);x8r=r($0t,"vision-text-dual-encoder"),$0t.forEach(t),$8r=r(MBe," \u2014 "),$J=n(MBe,"A",{href:!0});var k0t=s($J);k8r=r(k0t,"FlaxVisionTextDualEncoderModel"),k0t.forEach(t),S8r=r(MBe," (VisionTextDualEncoder model)"),MBe.forEach(t),R8r=i(ne),q3=n(ne,"LI",{});var EBe=s(q3);m4e=n(EBe,"STRONG",{});var S0t=s(m4e);P8r=r(S0t,"vit"),S0t.forEach(t),B8r=r(EBe," \u2014 "),kJ=n(EBe,"A",{href:!0});var R0t=s(kJ);I8r=r(R0t,"FlaxViTModel"),R0t.forEach(t),q8r=r(EBe," (ViT model)"),EBe.forEach(t),N8r=i(ne),N3=n(ne,"LI",{});var CBe=s(N3);f4e=n(CBe,"STRONG",{});var P0t=s(f4e);j8r=r(P0t,"wav2vec2"),P0t.forEach(t),D8r=r(CBe," \u2014 "),SJ=n(CBe,"A",{href:!0});var B0t=s(SJ);G8r=r(B0t,"FlaxWav2Vec2Model"),B0t.forEach(t),O8r=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),V8r=i(ne),j3=n(ne,"LI",{});var wBe=s(j3);g4e=n(wBe,"STRONG",{});var I0t=s(g4e);X8r=r(I0t,"xglm"),I0t.forEach(t),z8r=r(wBe," \u2014 "),RJ=n(wBe,"A",{href:!0});var q0t=s(RJ);W8r=r(q0t,"FlaxXGLMModel"),q0t.forEach(t),Q8r=r(wBe," (XGLM model)"),wBe.forEach(t),H8r=i(ne),D3=n(ne,"LI",{});var ABe=s(D3);h4e=n(ABe,"STRONG",{});var N0t=s(h4e);U8r=r(N0t,"xlm-roberta"),N0t.forEach(t),J8r=r(ABe," \u2014 "),PJ=n(ABe,"A",{href:!0});var j0t=s(PJ);Y8r=r(j0t,"FlaxXLMRobertaModel"),j0t.forEach(t),K8r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),ne.forEach(t),Z8r=i(Gl),T(G3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),PNe=i(m),kc=n(m,"H2",{class:!0});var GDe=s(kc);O3=n(GDe,"A",{id:!0,class:!0,href:!0});var D0t=s(O3);u4e=n(D0t,"SPAN",{});var G0t=s(u4e);T(_9.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),e7r=i(GDe),p4e=n(GDe,"SPAN",{});var O0t=s(p4e);o7r=r(O0t,"FlaxAutoModelForCausalLM"),O0t.forEach(t),GDe.forEach(t),BNe=i(m),fr=n(m,"DIV",{class:!0});var Ol=s(fr);T(b9.$$.fragment,Ol),r7r=i(Ol),Sc=n(Ol,"P",{});var cee=s(Sc);t7r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=n(cee,"A",{href:!0});var V0t=s(BJ);a7r=r(V0t,"from_pretrained()"),V0t.forEach(t),n7r=r(cee," class method or the "),IJ=n(cee,"A",{href:!0});var X0t=s(IJ);s7r=r(X0t,"from_config()"),X0t.forEach(t),l7r=r(cee,` class
method.`),cee.forEach(t),i7r=i(Ol),v9=n(Ol,"P",{});var ODe=s(v9);d7r=r(ODe,"This class cannot be instantiated directly using "),_4e=n(ODe,"CODE",{});var z0t=s(_4e);c7r=r(z0t,"__init__()"),z0t.forEach(t),m7r=r(ODe," (throws an error)."),ODe.forEach(t),f7r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var O6=s(Ot);T(F9.$$.fragment,O6),g7r=i(O6),b4e=n(O6,"P",{});var W0t=s(b4e);h7r=r(W0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W0t.forEach(t),u7r=i(O6),Rc=n(O6,"P",{});var mee=s(Rc);p7r=r(mee,`Note:
Loading a model from its configuration file does `),v4e=n(mee,"STRONG",{});var Q0t=s(v4e);_7r=r(Q0t,"not"),Q0t.forEach(t),b7r=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(mee,"A",{href:!0});var H0t=s(qJ);v7r=r(H0t,"from_pretrained()"),H0t.forEach(t),F7r=r(mee," to load the model weights."),mee.forEach(t),T7r=i(O6),T(V3.$$.fragment,O6),O6.forEach(t),M7r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(T9.$$.fragment,Vl),E7r=i(Vl),F4e=n(Vl,"P",{});var U0t=s(F4e);C7r=r(U0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U0t.forEach(t),w7r=i(Vl),un=n(Vl,"P",{});var V6=s(un);A7r=r(V6,"The model class to instantiate is selected based on the "),T4e=n(V6,"CODE",{});var J0t=s(T4e);y7r=r(J0t,"model_type"),J0t.forEach(t),L7r=r(V6,` property of the config object (either
passed as an argument or loaded from `),M4e=n(V6,"CODE",{});var Y0t=s(M4e);x7r=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),$7r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(V6,"CODE",{});var K0t=s(E4e);k7r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),S7r=r(V6,":"),V6.forEach(t),R7r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);X3=n(Xe,"LI",{});var yBe=s(X3);C4e=n(yBe,"STRONG",{});var Z0t=s(C4e);P7r=r(Z0t,"bart"),Z0t.forEach(t),B7r=r(yBe," \u2014 "),NJ=n(yBe,"A",{href:!0});var eAt=s(NJ);I7r=r(eAt,"FlaxBartForCausalLM"),eAt.forEach(t),q7r=r(yBe," (BART model)"),yBe.forEach(t),N7r=i(Xe),z3=n(Xe,"LI",{});var LBe=s(z3);w4e=n(LBe,"STRONG",{});var oAt=s(w4e);j7r=r(oAt,"bert"),oAt.forEach(t),D7r=r(LBe," \u2014 "),jJ=n(LBe,"A",{href:!0});var rAt=s(jJ);G7r=r(rAt,"FlaxBertForCausalLM"),rAt.forEach(t),O7r=r(LBe," (BERT model)"),LBe.forEach(t),V7r=i(Xe),W3=n(Xe,"LI",{});var xBe=s(W3);A4e=n(xBe,"STRONG",{});var tAt=s(A4e);X7r=r(tAt,"big_bird"),tAt.forEach(t),z7r=r(xBe," \u2014 "),DJ=n(xBe,"A",{href:!0});var aAt=s(DJ);W7r=r(aAt,"FlaxBigBirdForCausalLM"),aAt.forEach(t),Q7r=r(xBe," (BigBird model)"),xBe.forEach(t),H7r=i(Xe),Q3=n(Xe,"LI",{});var $Be=s(Q3);y4e=n($Be,"STRONG",{});var nAt=s(y4e);U7r=r(nAt,"electra"),nAt.forEach(t),J7r=r($Be," \u2014 "),GJ=n($Be,"A",{href:!0});var sAt=s(GJ);Y7r=r(sAt,"FlaxElectraForCausalLM"),sAt.forEach(t),K7r=r($Be," (ELECTRA model)"),$Be.forEach(t),Z7r=i(Xe),H3=n(Xe,"LI",{});var kBe=s(H3);L4e=n(kBe,"STRONG",{});var lAt=s(L4e);e9r=r(lAt,"gpt2"),lAt.forEach(t),o9r=r(kBe," \u2014 "),OJ=n(kBe,"A",{href:!0});var iAt=s(OJ);r9r=r(iAt,"FlaxGPT2LMHeadModel"),iAt.forEach(t),t9r=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),a9r=i(Xe),U3=n(Xe,"LI",{});var SBe=s(U3);x4e=n(SBe,"STRONG",{});var dAt=s(x4e);n9r=r(dAt,"gpt_neo"),dAt.forEach(t),s9r=r(SBe," \u2014 "),VJ=n(SBe,"A",{href:!0});var cAt=s(VJ);l9r=r(cAt,"FlaxGPTNeoForCausalLM"),cAt.forEach(t),i9r=r(SBe," (GPT Neo model)"),SBe.forEach(t),d9r=i(Xe),J3=n(Xe,"LI",{});var RBe=s(J3);$4e=n(RBe,"STRONG",{});var mAt=s($4e);c9r=r(mAt,"gptj"),mAt.forEach(t),m9r=r(RBe," \u2014 "),XJ=n(RBe,"A",{href:!0});var fAt=s(XJ);f9r=r(fAt,"FlaxGPTJForCausalLM"),fAt.forEach(t),g9r=r(RBe," (GPT-J model)"),RBe.forEach(t),h9r=i(Xe),Y3=n(Xe,"LI",{});var PBe=s(Y3);k4e=n(PBe,"STRONG",{});var gAt=s(k4e);u9r=r(gAt,"roberta"),gAt.forEach(t),p9r=r(PBe," \u2014 "),zJ=n(PBe,"A",{href:!0});var hAt=s(zJ);_9r=r(hAt,"FlaxRobertaForCausalLM"),hAt.forEach(t),b9r=r(PBe," (RoBERTa model)"),PBe.forEach(t),v9r=i(Xe),K3=n(Xe,"LI",{});var BBe=s(K3);S4e=n(BBe,"STRONG",{});var uAt=s(S4e);F9r=r(uAt,"xglm"),uAt.forEach(t),T9r=r(BBe," \u2014 "),WJ=n(BBe,"A",{href:!0});var pAt=s(WJ);M9r=r(pAt,"FlaxXGLMForCausalLM"),pAt.forEach(t),E9r=r(BBe," (XGLM model)"),BBe.forEach(t),Xe.forEach(t),C9r=i(Vl),T(Z3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),INe=i(m),Pc=n(m,"H2",{class:!0});var VDe=s(Pc);ew=n(VDe,"A",{id:!0,class:!0,href:!0});var _At=s(ew);R4e=n(_At,"SPAN",{});var bAt=s(R4e);T(M9.$$.fragment,bAt),bAt.forEach(t),_At.forEach(t),w9r=i(VDe),P4e=n(VDe,"SPAN",{});var vAt=s(P4e);A9r=r(vAt,"FlaxAutoModelForPreTraining"),vAt.forEach(t),VDe.forEach(t),qNe=i(m),gr=n(m,"DIV",{class:!0});var Xl=s(gr);T(E9.$$.fragment,Xl),y9r=i(Xl),Bc=n(Xl,"P",{});var fee=s(Bc);L9r=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QJ=n(fee,"A",{href:!0});var FAt=s(QJ);x9r=r(FAt,"from_pretrained()"),FAt.forEach(t),$9r=r(fee," class method or the "),HJ=n(fee,"A",{href:!0});var TAt=s(HJ);k9r=r(TAt,"from_config()"),TAt.forEach(t),S9r=r(fee,` class
method.`),fee.forEach(t),R9r=i(Xl),C9=n(Xl,"P",{});var XDe=s(C9);P9r=r(XDe,"This class cannot be instantiated directly using "),B4e=n(XDe,"CODE",{});var MAt=s(B4e);B9r=r(MAt,"__init__()"),MAt.forEach(t),I9r=r(XDe," (throws an error)."),XDe.forEach(t),q9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var X6=s(Vt);T(w9.$$.fragment,X6),N9r=i(X6),I4e=n(X6,"P",{});var EAt=s(I4e);j9r=r(EAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EAt.forEach(t),D9r=i(X6),Ic=n(X6,"P",{});var gee=s(Ic);G9r=r(gee,`Note:
Loading a model from its configuration file does `),q4e=n(gee,"STRONG",{});var CAt=s(q4e);O9r=r(CAt,"not"),CAt.forEach(t),V9r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(gee,"A",{href:!0});var wAt=s(UJ);X9r=r(wAt,"from_pretrained()"),wAt.forEach(t),z9r=r(gee," to load the model weights."),gee.forEach(t),W9r=i(X6),T(ow.$$.fragment,X6),X6.forEach(t),Q9r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(A9.$$.fragment,zl),H9r=i(zl),N4e=n(zl,"P",{});var AAt=s(N4e);U9r=r(AAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AAt.forEach(t),J9r=i(zl),pn=n(zl,"P",{});var z6=s(pn);Y9r=r(z6,"The model class to instantiate is selected based on the "),j4e=n(z6,"CODE",{});var yAt=s(j4e);K9r=r(yAt,"model_type"),yAt.forEach(t),Z9r=r(z6,` property of the config object (either
passed as an argument or loaded from `),D4e=n(z6,"CODE",{});var LAt=s(D4e);exr=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),oxr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(z6,"CODE",{});var xAt=s(G4e);rxr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),txr=r(z6,":"),z6.forEach(t),axr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);rw=n(we,"LI",{});var IBe=s(rw);O4e=n(IBe,"STRONG",{});var $At=s(O4e);nxr=r($At,"albert"),$At.forEach(t),sxr=r(IBe," \u2014 "),JJ=n(IBe,"A",{href:!0});var kAt=s(JJ);lxr=r(kAt,"FlaxAlbertForPreTraining"),kAt.forEach(t),ixr=r(IBe," (ALBERT model)"),IBe.forEach(t),dxr=i(we),tw=n(we,"LI",{});var qBe=s(tw);V4e=n(qBe,"STRONG",{});var SAt=s(V4e);cxr=r(SAt,"bart"),SAt.forEach(t),mxr=r(qBe," \u2014 "),YJ=n(qBe,"A",{href:!0});var RAt=s(YJ);fxr=r(RAt,"FlaxBartForConditionalGeneration"),RAt.forEach(t),gxr=r(qBe," (BART model)"),qBe.forEach(t),hxr=i(we),aw=n(we,"LI",{});var NBe=s(aw);X4e=n(NBe,"STRONG",{});var PAt=s(X4e);uxr=r(PAt,"bert"),PAt.forEach(t),pxr=r(NBe," \u2014 "),KJ=n(NBe,"A",{href:!0});var BAt=s(KJ);_xr=r(BAt,"FlaxBertForPreTraining"),BAt.forEach(t),bxr=r(NBe," (BERT model)"),NBe.forEach(t),vxr=i(we),nw=n(we,"LI",{});var jBe=s(nw);z4e=n(jBe,"STRONG",{});var IAt=s(z4e);Fxr=r(IAt,"big_bird"),IAt.forEach(t),Txr=r(jBe," \u2014 "),ZJ=n(jBe,"A",{href:!0});var qAt=s(ZJ);Mxr=r(qAt,"FlaxBigBirdForPreTraining"),qAt.forEach(t),Exr=r(jBe," (BigBird model)"),jBe.forEach(t),Cxr=i(we),sw=n(we,"LI",{});var DBe=s(sw);W4e=n(DBe,"STRONG",{});var NAt=s(W4e);wxr=r(NAt,"electra"),NAt.forEach(t),Axr=r(DBe," \u2014 "),eY=n(DBe,"A",{href:!0});var jAt=s(eY);yxr=r(jAt,"FlaxElectraForPreTraining"),jAt.forEach(t),Lxr=r(DBe," (ELECTRA model)"),DBe.forEach(t),xxr=i(we),lw=n(we,"LI",{});var GBe=s(lw);Q4e=n(GBe,"STRONG",{});var DAt=s(Q4e);$xr=r(DAt,"mbart"),DAt.forEach(t),kxr=r(GBe," \u2014 "),oY=n(GBe,"A",{href:!0});var GAt=s(oY);Sxr=r(GAt,"FlaxMBartForConditionalGeneration"),GAt.forEach(t),Rxr=r(GBe," (mBART model)"),GBe.forEach(t),Pxr=i(we),iw=n(we,"LI",{});var OBe=s(iw);H4e=n(OBe,"STRONG",{});var OAt=s(H4e);Bxr=r(OAt,"mt5"),OAt.forEach(t),Ixr=r(OBe," \u2014 "),rY=n(OBe,"A",{href:!0});var VAt=s(rY);qxr=r(VAt,"FlaxMT5ForConditionalGeneration"),VAt.forEach(t),Nxr=r(OBe," (mT5 model)"),OBe.forEach(t),jxr=i(we),dw=n(we,"LI",{});var VBe=s(dw);U4e=n(VBe,"STRONG",{});var XAt=s(U4e);Dxr=r(XAt,"roberta"),XAt.forEach(t),Gxr=r(VBe," \u2014 "),tY=n(VBe,"A",{href:!0});var zAt=s(tY);Oxr=r(zAt,"FlaxRobertaForMaskedLM"),zAt.forEach(t),Vxr=r(VBe," (RoBERTa model)"),VBe.forEach(t),Xxr=i(we),cw=n(we,"LI",{});var XBe=s(cw);J4e=n(XBe,"STRONG",{});var WAt=s(J4e);zxr=r(WAt,"roformer"),WAt.forEach(t),Wxr=r(XBe," \u2014 "),aY=n(XBe,"A",{href:!0});var QAt=s(aY);Qxr=r(QAt,"FlaxRoFormerForMaskedLM"),QAt.forEach(t),Hxr=r(XBe," (RoFormer model)"),XBe.forEach(t),Uxr=i(we),mw=n(we,"LI",{});var zBe=s(mw);Y4e=n(zBe,"STRONG",{});var HAt=s(Y4e);Jxr=r(HAt,"t5"),HAt.forEach(t),Yxr=r(zBe," \u2014 "),nY=n(zBe,"A",{href:!0});var UAt=s(nY);Kxr=r(UAt,"FlaxT5ForConditionalGeneration"),UAt.forEach(t),Zxr=r(zBe," (T5 model)"),zBe.forEach(t),e$r=i(we),fw=n(we,"LI",{});var WBe=s(fw);K4e=n(WBe,"STRONG",{});var JAt=s(K4e);o$r=r(JAt,"wav2vec2"),JAt.forEach(t),r$r=r(WBe," \u2014 "),sY=n(WBe,"A",{href:!0});var YAt=s(sY);t$r=r(YAt,"FlaxWav2Vec2ForPreTraining"),YAt.forEach(t),a$r=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),n$r=i(we),gw=n(we,"LI",{});var QBe=s(gw);Z4e=n(QBe,"STRONG",{});var KAt=s(Z4e);s$r=r(KAt,"xlm-roberta"),KAt.forEach(t),l$r=r(QBe," \u2014 "),lY=n(QBe,"A",{href:!0});var ZAt=s(lY);i$r=r(ZAt,"FlaxXLMRobertaForMaskedLM"),ZAt.forEach(t),d$r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),we.forEach(t),c$r=i(zl),T(hw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NNe=i(m),qc=n(m,"H2",{class:!0});var zDe=s(qc);uw=n(zDe,"A",{id:!0,class:!0,href:!0});var e6t=s(uw);eEe=n(e6t,"SPAN",{});var o6t=s(eEe);T(y9.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),m$r=i(zDe),oEe=n(zDe,"SPAN",{});var r6t=s(oEe);f$r=r(r6t,"FlaxAutoModelForMaskedLM"),r6t.forEach(t),zDe.forEach(t),jNe=i(m),hr=n(m,"DIV",{class:!0});var Wl=s(hr);T(L9.$$.fragment,Wl),g$r=i(Wl),Nc=n(Wl,"P",{});var hee=s(Nc);h$r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=n(hee,"A",{href:!0});var t6t=s(iY);u$r=r(t6t,"from_pretrained()"),t6t.forEach(t),p$r=r(hee," class method or the "),dY=n(hee,"A",{href:!0});var a6t=s(dY);_$r=r(a6t,"from_config()"),a6t.forEach(t),b$r=r(hee,` class
method.`),hee.forEach(t),v$r=i(Wl),x9=n(Wl,"P",{});var WDe=s(x9);F$r=r(WDe,"This class cannot be instantiated directly using "),rEe=n(WDe,"CODE",{});var n6t=s(rEe);T$r=r(n6t,"__init__()"),n6t.forEach(t),M$r=r(WDe," (throws an error)."),WDe.forEach(t),E$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var W6=s(Xt);T($9.$$.fragment,W6),C$r=i(W6),tEe=n(W6,"P",{});var s6t=s(tEe);w$r=r(s6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s6t.forEach(t),A$r=i(W6),jc=n(W6,"P",{});var uee=s(jc);y$r=r(uee,`Note:
Loading a model from its configuration file does `),aEe=n(uee,"STRONG",{});var l6t=s(aEe);L$r=r(l6t,"not"),l6t.forEach(t),x$r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(uee,"A",{href:!0});var i6t=s(cY);$$r=r(i6t,"from_pretrained()"),i6t.forEach(t),k$r=r(uee," to load the model weights."),uee.forEach(t),S$r=i(W6),T(pw.$$.fragment,W6),W6.forEach(t),R$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(k9.$$.fragment,Ql),P$r=i(Ql),nEe=n(Ql,"P",{});var d6t=s(nEe);B$r=r(d6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d6t.forEach(t),I$r=i(Ql),_n=n(Ql,"P",{});var Q6=s(_n);q$r=r(Q6,"The model class to instantiate is selected based on the "),sEe=n(Q6,"CODE",{});var c6t=s(sEe);N$r=r(c6t,"model_type"),c6t.forEach(t),j$r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),lEe=n(Q6,"CODE",{});var m6t=s(lEe);D$r=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),G$r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(Q6,"CODE",{});var f6t=s(iEe);O$r=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),V$r=r(Q6,":"),Q6.forEach(t),X$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);_w=n(Ie,"LI",{});var HBe=s(_w);dEe=n(HBe,"STRONG",{});var g6t=s(dEe);z$r=r(g6t,"albert"),g6t.forEach(t),W$r=r(HBe," \u2014 "),mY=n(HBe,"A",{href:!0});var h6t=s(mY);Q$r=r(h6t,"FlaxAlbertForMaskedLM"),h6t.forEach(t),H$r=r(HBe," (ALBERT model)"),HBe.forEach(t),U$r=i(Ie),bw=n(Ie,"LI",{});var UBe=s(bw);cEe=n(UBe,"STRONG",{});var u6t=s(cEe);J$r=r(u6t,"bart"),u6t.forEach(t),Y$r=r(UBe," \u2014 "),fY=n(UBe,"A",{href:!0});var p6t=s(fY);K$r=r(p6t,"FlaxBartForConditionalGeneration"),p6t.forEach(t),Z$r=r(UBe," (BART model)"),UBe.forEach(t),ekr=i(Ie),vw=n(Ie,"LI",{});var JBe=s(vw);mEe=n(JBe,"STRONG",{});var _6t=s(mEe);okr=r(_6t,"bert"),_6t.forEach(t),rkr=r(JBe," \u2014 "),gY=n(JBe,"A",{href:!0});var b6t=s(gY);tkr=r(b6t,"FlaxBertForMaskedLM"),b6t.forEach(t),akr=r(JBe," (BERT model)"),JBe.forEach(t),nkr=i(Ie),Fw=n(Ie,"LI",{});var YBe=s(Fw);fEe=n(YBe,"STRONG",{});var v6t=s(fEe);skr=r(v6t,"big_bird"),v6t.forEach(t),lkr=r(YBe," \u2014 "),hY=n(YBe,"A",{href:!0});var F6t=s(hY);ikr=r(F6t,"FlaxBigBirdForMaskedLM"),F6t.forEach(t),dkr=r(YBe," (BigBird model)"),YBe.forEach(t),ckr=i(Ie),Tw=n(Ie,"LI",{});var KBe=s(Tw);gEe=n(KBe,"STRONG",{});var T6t=s(gEe);mkr=r(T6t,"distilbert"),T6t.forEach(t),fkr=r(KBe," \u2014 "),uY=n(KBe,"A",{href:!0});var M6t=s(uY);gkr=r(M6t,"FlaxDistilBertForMaskedLM"),M6t.forEach(t),hkr=r(KBe," (DistilBERT model)"),KBe.forEach(t),ukr=i(Ie),Mw=n(Ie,"LI",{});var ZBe=s(Mw);hEe=n(ZBe,"STRONG",{});var E6t=s(hEe);pkr=r(E6t,"electra"),E6t.forEach(t),_kr=r(ZBe," \u2014 "),pY=n(ZBe,"A",{href:!0});var C6t=s(pY);bkr=r(C6t,"FlaxElectraForMaskedLM"),C6t.forEach(t),vkr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),Fkr=i(Ie),Ew=n(Ie,"LI",{});var eIe=s(Ew);uEe=n(eIe,"STRONG",{});var w6t=s(uEe);Tkr=r(w6t,"mbart"),w6t.forEach(t),Mkr=r(eIe," \u2014 "),_Y=n(eIe,"A",{href:!0});var A6t=s(_Y);Ekr=r(A6t,"FlaxMBartForConditionalGeneration"),A6t.forEach(t),Ckr=r(eIe," (mBART model)"),eIe.forEach(t),wkr=i(Ie),Cw=n(Ie,"LI",{});var oIe=s(Cw);pEe=n(oIe,"STRONG",{});var y6t=s(pEe);Akr=r(y6t,"roberta"),y6t.forEach(t),ykr=r(oIe," \u2014 "),bY=n(oIe,"A",{href:!0});var L6t=s(bY);Lkr=r(L6t,"FlaxRobertaForMaskedLM"),L6t.forEach(t),xkr=r(oIe," (RoBERTa model)"),oIe.forEach(t),$kr=i(Ie),ww=n(Ie,"LI",{});var rIe=s(ww);_Ee=n(rIe,"STRONG",{});var x6t=s(_Ee);kkr=r(x6t,"roformer"),x6t.forEach(t),Skr=r(rIe," \u2014 "),vY=n(rIe,"A",{href:!0});var $6t=s(vY);Rkr=r($6t,"FlaxRoFormerForMaskedLM"),$6t.forEach(t),Pkr=r(rIe," (RoFormer model)"),rIe.forEach(t),Bkr=i(Ie),Aw=n(Ie,"LI",{});var tIe=s(Aw);bEe=n(tIe,"STRONG",{});var k6t=s(bEe);Ikr=r(k6t,"xlm-roberta"),k6t.forEach(t),qkr=r(tIe," \u2014 "),FY=n(tIe,"A",{href:!0});var S6t=s(FY);Nkr=r(S6t,"FlaxXLMRobertaForMaskedLM"),S6t.forEach(t),jkr=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),Ie.forEach(t),Dkr=i(Ql),T(yw.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),DNe=i(m),Dc=n(m,"H2",{class:!0});var QDe=s(Dc);Lw=n(QDe,"A",{id:!0,class:!0,href:!0});var R6t=s(Lw);vEe=n(R6t,"SPAN",{});var P6t=s(vEe);T(S9.$$.fragment,P6t),P6t.forEach(t),R6t.forEach(t),Gkr=i(QDe),FEe=n(QDe,"SPAN",{});var B6t=s(FEe);Okr=r(B6t,"FlaxAutoModelForSeq2SeqLM"),B6t.forEach(t),QDe.forEach(t),GNe=i(m),ur=n(m,"DIV",{class:!0});var Hl=s(ur);T(R9.$$.fragment,Hl),Vkr=i(Hl),Gc=n(Hl,"P",{});var pee=s(Gc);Xkr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TY=n(pee,"A",{href:!0});var I6t=s(TY);zkr=r(I6t,"from_pretrained()"),I6t.forEach(t),Wkr=r(pee," class method or the "),MY=n(pee,"A",{href:!0});var q6t=s(MY);Qkr=r(q6t,"from_config()"),q6t.forEach(t),Hkr=r(pee,` class
method.`),pee.forEach(t),Ukr=i(Hl),P9=n(Hl,"P",{});var HDe=s(P9);Jkr=r(HDe,"This class cannot be instantiated directly using "),TEe=n(HDe,"CODE",{});var N6t=s(TEe);Ykr=r(N6t,"__init__()"),N6t.forEach(t),Kkr=r(HDe," (throws an error)."),HDe.forEach(t),Zkr=i(Hl),zt=n(Hl,"DIV",{class:!0});var H6=s(zt);T(B9.$$.fragment,H6),eSr=i(H6),MEe=n(H6,"P",{});var j6t=s(MEe);oSr=r(j6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),j6t.forEach(t),rSr=i(H6),Oc=n(H6,"P",{});var _ee=s(Oc);tSr=r(_ee,`Note:
Loading a model from its configuration file does `),EEe=n(_ee,"STRONG",{});var D6t=s(EEe);aSr=r(D6t,"not"),D6t.forEach(t),nSr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(_ee,"A",{href:!0});var G6t=s(EY);sSr=r(G6t,"from_pretrained()"),G6t.forEach(t),lSr=r(_ee," to load the model weights."),_ee.forEach(t),iSr=i(H6),T(xw.$$.fragment,H6),H6.forEach(t),dSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(I9.$$.fragment,Ul),cSr=i(Ul),CEe=n(Ul,"P",{});var O6t=s(CEe);mSr=r(O6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O6t.forEach(t),fSr=i(Ul),bn=n(Ul,"P",{});var U6=s(bn);gSr=r(U6,"The model class to instantiate is selected based on the "),wEe=n(U6,"CODE",{});var V6t=s(wEe);hSr=r(V6t,"model_type"),V6t.forEach(t),uSr=r(U6,` property of the config object (either
passed as an argument or loaded from `),AEe=n(U6,"CODE",{});var X6t=s(AEe);pSr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),_Sr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=n(U6,"CODE",{});var z6t=s(yEe);bSr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),vSr=r(U6,":"),U6.forEach(t),FSr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);$w=n(ze,"LI",{});var aIe=s($w);LEe=n(aIe,"STRONG",{});var W6t=s(LEe);TSr=r(W6t,"bart"),W6t.forEach(t),MSr=r(aIe," \u2014 "),CY=n(aIe,"A",{href:!0});var Q6t=s(CY);ESr=r(Q6t,"FlaxBartForConditionalGeneration"),Q6t.forEach(t),CSr=r(aIe," (BART model)"),aIe.forEach(t),wSr=i(ze),kw=n(ze,"LI",{});var nIe=s(kw);xEe=n(nIe,"STRONG",{});var H6t=s(xEe);ASr=r(H6t,"blenderbot"),H6t.forEach(t),ySr=r(nIe," \u2014 "),wY=n(nIe,"A",{href:!0});var U6t=s(wY);LSr=r(U6t,"FlaxBlenderbotForConditionalGeneration"),U6t.forEach(t),xSr=r(nIe," (Blenderbot model)"),nIe.forEach(t),$Sr=i(ze),Sw=n(ze,"LI",{});var sIe=s(Sw);$Ee=n(sIe,"STRONG",{});var J6t=s($Ee);kSr=r(J6t,"blenderbot-small"),J6t.forEach(t),SSr=r(sIe," \u2014 "),AY=n(sIe,"A",{href:!0});var Y6t=s(AY);RSr=r(Y6t,"FlaxBlenderbotSmallForConditionalGeneration"),Y6t.forEach(t),PSr=r(sIe," (BlenderbotSmall model)"),sIe.forEach(t),BSr=i(ze),Rw=n(ze,"LI",{});var lIe=s(Rw);kEe=n(lIe,"STRONG",{});var K6t=s(kEe);ISr=r(K6t,"encoder-decoder"),K6t.forEach(t),qSr=r(lIe," \u2014 "),yY=n(lIe,"A",{href:!0});var Z6t=s(yY);NSr=r(Z6t,"FlaxEncoderDecoderModel"),Z6t.forEach(t),jSr=r(lIe," (Encoder decoder model)"),lIe.forEach(t),DSr=i(ze),Pw=n(ze,"LI",{});var iIe=s(Pw);SEe=n(iIe,"STRONG",{});var eyt=s(SEe);GSr=r(eyt,"marian"),eyt.forEach(t),OSr=r(iIe," \u2014 "),LY=n(iIe,"A",{href:!0});var oyt=s(LY);VSr=r(oyt,"FlaxMarianMTModel"),oyt.forEach(t),XSr=r(iIe," (Marian model)"),iIe.forEach(t),zSr=i(ze),Bw=n(ze,"LI",{});var dIe=s(Bw);REe=n(dIe,"STRONG",{});var ryt=s(REe);WSr=r(ryt,"mbart"),ryt.forEach(t),QSr=r(dIe," \u2014 "),xY=n(dIe,"A",{href:!0});var tyt=s(xY);HSr=r(tyt,"FlaxMBartForConditionalGeneration"),tyt.forEach(t),USr=r(dIe," (mBART model)"),dIe.forEach(t),JSr=i(ze),Iw=n(ze,"LI",{});var cIe=s(Iw);PEe=n(cIe,"STRONG",{});var ayt=s(PEe);YSr=r(ayt,"mt5"),ayt.forEach(t),KSr=r(cIe," \u2014 "),$Y=n(cIe,"A",{href:!0});var nyt=s($Y);ZSr=r(nyt,"FlaxMT5ForConditionalGeneration"),nyt.forEach(t),eRr=r(cIe," (mT5 model)"),cIe.forEach(t),oRr=i(ze),qw=n(ze,"LI",{});var mIe=s(qw);BEe=n(mIe,"STRONG",{});var syt=s(BEe);rRr=r(syt,"pegasus"),syt.forEach(t),tRr=r(mIe," \u2014 "),kY=n(mIe,"A",{href:!0});var lyt=s(kY);aRr=r(lyt,"FlaxPegasusForConditionalGeneration"),lyt.forEach(t),nRr=r(mIe," (Pegasus model)"),mIe.forEach(t),sRr=i(ze),Nw=n(ze,"LI",{});var fIe=s(Nw);IEe=n(fIe,"STRONG",{});var iyt=s(IEe);lRr=r(iyt,"t5"),iyt.forEach(t),iRr=r(fIe," \u2014 "),SY=n(fIe,"A",{href:!0});var dyt=s(SY);dRr=r(dyt,"FlaxT5ForConditionalGeneration"),dyt.forEach(t),cRr=r(fIe," (T5 model)"),fIe.forEach(t),ze.forEach(t),mRr=i(Ul),T(jw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ONe=i(m),Vc=n(m,"H2",{class:!0});var UDe=s(Vc);Dw=n(UDe,"A",{id:!0,class:!0,href:!0});var cyt=s(Dw);qEe=n(cyt,"SPAN",{});var myt=s(qEe);T(q9.$$.fragment,myt),myt.forEach(t),cyt.forEach(t),fRr=i(UDe),NEe=n(UDe,"SPAN",{});var fyt=s(NEe);gRr=r(fyt,"FlaxAutoModelForSequenceClassification"),fyt.forEach(t),UDe.forEach(t),VNe=i(m),pr=n(m,"DIV",{class:!0});var Jl=s(pr);T(N9.$$.fragment,Jl),hRr=i(Jl),Xc=n(Jl,"P",{});var bee=s(Xc);uRr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RY=n(bee,"A",{href:!0});var gyt=s(RY);pRr=r(gyt,"from_pretrained()"),gyt.forEach(t),_Rr=r(bee," class method or the "),PY=n(bee,"A",{href:!0});var hyt=s(PY);bRr=r(hyt,"from_config()"),hyt.forEach(t),vRr=r(bee,` class
method.`),bee.forEach(t),FRr=i(Jl),j9=n(Jl,"P",{});var JDe=s(j9);TRr=r(JDe,"This class cannot be instantiated directly using "),jEe=n(JDe,"CODE",{});var uyt=s(jEe);MRr=r(uyt,"__init__()"),uyt.forEach(t),ERr=r(JDe," (throws an error)."),JDe.forEach(t),CRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var J6=s(Wt);T(D9.$$.fragment,J6),wRr=i(J6),DEe=n(J6,"P",{});var pyt=s(DEe);ARr=r(pyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pyt.forEach(t),yRr=i(J6),zc=n(J6,"P",{});var vee=s(zc);LRr=r(vee,`Note:
Loading a model from its configuration file does `),GEe=n(vee,"STRONG",{});var _yt=s(GEe);xRr=r(_yt,"not"),_yt.forEach(t),$Rr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(vee,"A",{href:!0});var byt=s(BY);kRr=r(byt,"from_pretrained()"),byt.forEach(t),SRr=r(vee," to load the model weights."),vee.forEach(t),RRr=i(J6),T(Gw.$$.fragment,J6),J6.forEach(t),PRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(G9.$$.fragment,Yl),BRr=i(Yl),OEe=n(Yl,"P",{});var vyt=s(OEe);IRr=r(vyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vyt.forEach(t),qRr=i(Yl),vn=n(Yl,"P",{});var Y6=s(vn);NRr=r(Y6,"The model class to instantiate is selected based on the "),VEe=n(Y6,"CODE",{});var Fyt=s(VEe);jRr=r(Fyt,"model_type"),Fyt.forEach(t),DRr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),XEe=n(Y6,"CODE",{});var Tyt=s(XEe);GRr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),ORr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(Y6,"CODE",{});var Myt=s(zEe);VRr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),XRr=r(Y6,":"),Y6.forEach(t),zRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);Ow=n(qe,"LI",{});var gIe=s(Ow);WEe=n(gIe,"STRONG",{});var Eyt=s(WEe);WRr=r(Eyt,"albert"),Eyt.forEach(t),QRr=r(gIe," \u2014 "),IY=n(gIe,"A",{href:!0});var Cyt=s(IY);HRr=r(Cyt,"FlaxAlbertForSequenceClassification"),Cyt.forEach(t),URr=r(gIe," (ALBERT model)"),gIe.forEach(t),JRr=i(qe),Vw=n(qe,"LI",{});var hIe=s(Vw);QEe=n(hIe,"STRONG",{});var wyt=s(QEe);YRr=r(wyt,"bart"),wyt.forEach(t),KRr=r(hIe," \u2014 "),qY=n(hIe,"A",{href:!0});var Ayt=s(qY);ZRr=r(Ayt,"FlaxBartForSequenceClassification"),Ayt.forEach(t),ePr=r(hIe," (BART model)"),hIe.forEach(t),oPr=i(qe),Xw=n(qe,"LI",{});var uIe=s(Xw);HEe=n(uIe,"STRONG",{});var yyt=s(HEe);rPr=r(yyt,"bert"),yyt.forEach(t),tPr=r(uIe," \u2014 "),NY=n(uIe,"A",{href:!0});var Lyt=s(NY);aPr=r(Lyt,"FlaxBertForSequenceClassification"),Lyt.forEach(t),nPr=r(uIe," (BERT model)"),uIe.forEach(t),sPr=i(qe),zw=n(qe,"LI",{});var pIe=s(zw);UEe=n(pIe,"STRONG",{});var xyt=s(UEe);lPr=r(xyt,"big_bird"),xyt.forEach(t),iPr=r(pIe," \u2014 "),jY=n(pIe,"A",{href:!0});var $yt=s(jY);dPr=r($yt,"FlaxBigBirdForSequenceClassification"),$yt.forEach(t),cPr=r(pIe," (BigBird model)"),pIe.forEach(t),mPr=i(qe),Ww=n(qe,"LI",{});var _Ie=s(Ww);JEe=n(_Ie,"STRONG",{});var kyt=s(JEe);fPr=r(kyt,"distilbert"),kyt.forEach(t),gPr=r(_Ie," \u2014 "),DY=n(_Ie,"A",{href:!0});var Syt=s(DY);hPr=r(Syt,"FlaxDistilBertForSequenceClassification"),Syt.forEach(t),uPr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),pPr=i(qe),Qw=n(qe,"LI",{});var bIe=s(Qw);YEe=n(bIe,"STRONG",{});var Ryt=s(YEe);_Pr=r(Ryt,"electra"),Ryt.forEach(t),bPr=r(bIe," \u2014 "),GY=n(bIe,"A",{href:!0});var Pyt=s(GY);vPr=r(Pyt,"FlaxElectraForSequenceClassification"),Pyt.forEach(t),FPr=r(bIe," (ELECTRA model)"),bIe.forEach(t),TPr=i(qe),Hw=n(qe,"LI",{});var vIe=s(Hw);KEe=n(vIe,"STRONG",{});var Byt=s(KEe);MPr=r(Byt,"mbart"),Byt.forEach(t),EPr=r(vIe," \u2014 "),OY=n(vIe,"A",{href:!0});var Iyt=s(OY);CPr=r(Iyt,"FlaxMBartForSequenceClassification"),Iyt.forEach(t),wPr=r(vIe," (mBART model)"),vIe.forEach(t),APr=i(qe),Uw=n(qe,"LI",{});var FIe=s(Uw);ZEe=n(FIe,"STRONG",{});var qyt=s(ZEe);yPr=r(qyt,"roberta"),qyt.forEach(t),LPr=r(FIe," \u2014 "),VY=n(FIe,"A",{href:!0});var Nyt=s(VY);xPr=r(Nyt,"FlaxRobertaForSequenceClassification"),Nyt.forEach(t),$Pr=r(FIe," (RoBERTa model)"),FIe.forEach(t),kPr=i(qe),Jw=n(qe,"LI",{});var TIe=s(Jw);eCe=n(TIe,"STRONG",{});var jyt=s(eCe);SPr=r(jyt,"roformer"),jyt.forEach(t),RPr=r(TIe," \u2014 "),XY=n(TIe,"A",{href:!0});var Dyt=s(XY);PPr=r(Dyt,"FlaxRoFormerForSequenceClassification"),Dyt.forEach(t),BPr=r(TIe," (RoFormer model)"),TIe.forEach(t),IPr=i(qe),Yw=n(qe,"LI",{});var MIe=s(Yw);oCe=n(MIe,"STRONG",{});var Gyt=s(oCe);qPr=r(Gyt,"xlm-roberta"),Gyt.forEach(t),NPr=r(MIe," \u2014 "),zY=n(MIe,"A",{href:!0});var Oyt=s(zY);jPr=r(Oyt,"FlaxXLMRobertaForSequenceClassification"),Oyt.forEach(t),DPr=r(MIe," (XLM-RoBERTa model)"),MIe.forEach(t),qe.forEach(t),GPr=i(Yl),T(Kw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XNe=i(m),Wc=n(m,"H2",{class:!0});var YDe=s(Wc);Zw=n(YDe,"A",{id:!0,class:!0,href:!0});var Vyt=s(Zw);rCe=n(Vyt,"SPAN",{});var Xyt=s(rCe);T(O9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),OPr=i(YDe),tCe=n(YDe,"SPAN",{});var zyt=s(tCe);VPr=r(zyt,"FlaxAutoModelForQuestionAnswering"),zyt.forEach(t),YDe.forEach(t),zNe=i(m),_r=n(m,"DIV",{class:!0});var Kl=s(_r);T(V9.$$.fragment,Kl),XPr=i(Kl),Qc=n(Kl,"P",{});var Fee=s(Qc);zPr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WY=n(Fee,"A",{href:!0});var Wyt=s(WY);WPr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),QPr=r(Fee," class method or the "),QY=n(Fee,"A",{href:!0});var Qyt=s(QY);HPr=r(Qyt,"from_config()"),Qyt.forEach(t),UPr=r(Fee,` class
method.`),Fee.forEach(t),JPr=i(Kl),X9=n(Kl,"P",{});var KDe=s(X9);YPr=r(KDe,"This class cannot be instantiated directly using "),aCe=n(KDe,"CODE",{});var Hyt=s(aCe);KPr=r(Hyt,"__init__()"),Hyt.forEach(t),ZPr=r(KDe," (throws an error)."),KDe.forEach(t),eBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var K6=s(Qt);T(z9.$$.fragment,K6),oBr=i(K6),nCe=n(K6,"P",{});var Uyt=s(nCe);rBr=r(Uyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uyt.forEach(t),tBr=i(K6),Hc=n(K6,"P",{});var Tee=s(Hc);aBr=r(Tee,`Note:
Loading a model from its configuration file does `),sCe=n(Tee,"STRONG",{});var Jyt=s(sCe);nBr=r(Jyt,"not"),Jyt.forEach(t),sBr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Tee,"A",{href:!0});var Yyt=s(HY);lBr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),iBr=r(Tee," to load the model weights."),Tee.forEach(t),dBr=i(K6),T(e0.$$.fragment,K6),K6.forEach(t),cBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(W9.$$.fragment,Zl),mBr=i(Zl),lCe=n(Zl,"P",{});var Kyt=s(lCe);fBr=r(Kyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kyt.forEach(t),gBr=i(Zl),Fn=n(Zl,"P",{});var Z6=s(Fn);hBr=r(Z6,"The model class to instantiate is selected based on the "),iCe=n(Z6,"CODE",{});var Zyt=s(iCe);uBr=r(Zyt,"model_type"),Zyt.forEach(t),pBr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),dCe=n(Z6,"CODE",{});var eLt=s(dCe);_Br=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),bBr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(Z6,"CODE",{});var oLt=s(cCe);vBr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),FBr=r(Z6,":"),Z6.forEach(t),TBr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);o0=n(Ne,"LI",{});var EIe=s(o0);mCe=n(EIe,"STRONG",{});var rLt=s(mCe);MBr=r(rLt,"albert"),rLt.forEach(t),EBr=r(EIe," \u2014 "),UY=n(EIe,"A",{href:!0});var tLt=s(UY);CBr=r(tLt,"FlaxAlbertForQuestionAnswering"),tLt.forEach(t),wBr=r(EIe," (ALBERT model)"),EIe.forEach(t),ABr=i(Ne),r0=n(Ne,"LI",{});var CIe=s(r0);fCe=n(CIe,"STRONG",{});var aLt=s(fCe);yBr=r(aLt,"bart"),aLt.forEach(t),LBr=r(CIe," \u2014 "),JY=n(CIe,"A",{href:!0});var nLt=s(JY);xBr=r(nLt,"FlaxBartForQuestionAnswering"),nLt.forEach(t),$Br=r(CIe," (BART model)"),CIe.forEach(t),kBr=i(Ne),t0=n(Ne,"LI",{});var wIe=s(t0);gCe=n(wIe,"STRONG",{});var sLt=s(gCe);SBr=r(sLt,"bert"),sLt.forEach(t),RBr=r(wIe," \u2014 "),YY=n(wIe,"A",{href:!0});var lLt=s(YY);PBr=r(lLt,"FlaxBertForQuestionAnswering"),lLt.forEach(t),BBr=r(wIe," (BERT model)"),wIe.forEach(t),IBr=i(Ne),a0=n(Ne,"LI",{});var AIe=s(a0);hCe=n(AIe,"STRONG",{});var iLt=s(hCe);qBr=r(iLt,"big_bird"),iLt.forEach(t),NBr=r(AIe," \u2014 "),KY=n(AIe,"A",{href:!0});var dLt=s(KY);jBr=r(dLt,"FlaxBigBirdForQuestionAnswering"),dLt.forEach(t),DBr=r(AIe," (BigBird model)"),AIe.forEach(t),GBr=i(Ne),n0=n(Ne,"LI",{});var yIe=s(n0);uCe=n(yIe,"STRONG",{});var cLt=s(uCe);OBr=r(cLt,"distilbert"),cLt.forEach(t),VBr=r(yIe," \u2014 "),ZY=n(yIe,"A",{href:!0});var mLt=s(ZY);XBr=r(mLt,"FlaxDistilBertForQuestionAnswering"),mLt.forEach(t),zBr=r(yIe," (DistilBERT model)"),yIe.forEach(t),WBr=i(Ne),s0=n(Ne,"LI",{});var LIe=s(s0);pCe=n(LIe,"STRONG",{});var fLt=s(pCe);QBr=r(fLt,"electra"),fLt.forEach(t),HBr=r(LIe," \u2014 "),eK=n(LIe,"A",{href:!0});var gLt=s(eK);UBr=r(gLt,"FlaxElectraForQuestionAnswering"),gLt.forEach(t),JBr=r(LIe," (ELECTRA model)"),LIe.forEach(t),YBr=i(Ne),l0=n(Ne,"LI",{});var xIe=s(l0);_Ce=n(xIe,"STRONG",{});var hLt=s(_Ce);KBr=r(hLt,"mbart"),hLt.forEach(t),ZBr=r(xIe," \u2014 "),oK=n(xIe,"A",{href:!0});var uLt=s(oK);eIr=r(uLt,"FlaxMBartForQuestionAnswering"),uLt.forEach(t),oIr=r(xIe," (mBART model)"),xIe.forEach(t),rIr=i(Ne),i0=n(Ne,"LI",{});var $Ie=s(i0);bCe=n($Ie,"STRONG",{});var pLt=s(bCe);tIr=r(pLt,"roberta"),pLt.forEach(t),aIr=r($Ie," \u2014 "),rK=n($Ie,"A",{href:!0});var _Lt=s(rK);nIr=r(_Lt,"FlaxRobertaForQuestionAnswering"),_Lt.forEach(t),sIr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),lIr=i(Ne),d0=n(Ne,"LI",{});var kIe=s(d0);vCe=n(kIe,"STRONG",{});var bLt=s(vCe);iIr=r(bLt,"roformer"),bLt.forEach(t),dIr=r(kIe," \u2014 "),tK=n(kIe,"A",{href:!0});var vLt=s(tK);cIr=r(vLt,"FlaxRoFormerForQuestionAnswering"),vLt.forEach(t),mIr=r(kIe," (RoFormer model)"),kIe.forEach(t),fIr=i(Ne),c0=n(Ne,"LI",{});var SIe=s(c0);FCe=n(SIe,"STRONG",{});var FLt=s(FCe);gIr=r(FLt,"xlm-roberta"),FLt.forEach(t),hIr=r(SIe," \u2014 "),aK=n(SIe,"A",{href:!0});var TLt=s(aK);uIr=r(TLt,"FlaxXLMRobertaForQuestionAnswering"),TLt.forEach(t),pIr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),Ne.forEach(t),_Ir=i(Zl),T(m0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WNe=i(m),Uc=n(m,"H2",{class:!0});var ZDe=s(Uc);f0=n(ZDe,"A",{id:!0,class:!0,href:!0});var MLt=s(f0);TCe=n(MLt,"SPAN",{});var ELt=s(TCe);T(Q9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),bIr=i(ZDe),MCe=n(ZDe,"SPAN",{});var CLt=s(MCe);vIr=r(CLt,"FlaxAutoModelForTokenClassification"),CLt.forEach(t),ZDe.forEach(t),QNe=i(m),br=n(m,"DIV",{class:!0});var ei=s(br);T(H9.$$.fragment,ei),FIr=i(ei),Jc=n(ei,"P",{});var Mee=s(Jc);TIr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nK=n(Mee,"A",{href:!0});var wLt=s(nK);MIr=r(wLt,"from_pretrained()"),wLt.forEach(t),EIr=r(Mee," class method or the "),sK=n(Mee,"A",{href:!0});var ALt=s(sK);CIr=r(ALt,"from_config()"),ALt.forEach(t),wIr=r(Mee,` class
method.`),Mee.forEach(t),AIr=i(ei),U9=n(ei,"P",{});var eGe=s(U9);yIr=r(eGe,"This class cannot be instantiated directly using "),ECe=n(eGe,"CODE",{});var yLt=s(ECe);LIr=r(yLt,"__init__()"),yLt.forEach(t),xIr=r(eGe," (throws an error)."),eGe.forEach(t),$Ir=i(ei),Ht=n(ei,"DIV",{class:!0});var ey=s(Ht);T(J9.$$.fragment,ey),kIr=i(ey),CCe=n(ey,"P",{});var LLt=s(CCe);SIr=r(LLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LLt.forEach(t),RIr=i(ey),Yc=n(ey,"P",{});var Eee=s(Yc);PIr=r(Eee,`Note:
Loading a model from its configuration file does `),wCe=n(Eee,"STRONG",{});var xLt=s(wCe);BIr=r(xLt,"not"),xLt.forEach(t),IIr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(Eee,"A",{href:!0});var $Lt=s(lK);qIr=r($Lt,"from_pretrained()"),$Lt.forEach(t),NIr=r(Eee," to load the model weights."),Eee.forEach(t),jIr=i(ey),T(g0.$$.fragment,ey),ey.forEach(t),DIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Y9.$$.fragment,oi),GIr=i(oi),ACe=n(oi,"P",{});var kLt=s(ACe);OIr=r(kLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kLt.forEach(t),VIr=i(oi),Tn=n(oi,"P",{});var oy=s(Tn);XIr=r(oy,"The model class to instantiate is selected based on the "),yCe=n(oy,"CODE",{});var SLt=s(yCe);zIr=r(SLt,"model_type"),SLt.forEach(t),WIr=r(oy,` property of the config object (either
passed as an argument or loaded from `),LCe=n(oy,"CODE",{});var RLt=s(LCe);QIr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),HIr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(oy,"CODE",{});var PLt=s(xCe);UIr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),JIr=r(oy,":"),oy.forEach(t),YIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);h0=n(Fo,"LI",{});var RIe=s(h0);$Ce=n(RIe,"STRONG",{});var BLt=s($Ce);KIr=r(BLt,"albert"),BLt.forEach(t),ZIr=r(RIe," \u2014 "),iK=n(RIe,"A",{href:!0});var ILt=s(iK);eqr=r(ILt,"FlaxAlbertForTokenClassification"),ILt.forEach(t),oqr=r(RIe," (ALBERT model)"),RIe.forEach(t),rqr=i(Fo),u0=n(Fo,"LI",{});var PIe=s(u0);kCe=n(PIe,"STRONG",{});var qLt=s(kCe);tqr=r(qLt,"bert"),qLt.forEach(t),aqr=r(PIe," \u2014 "),dK=n(PIe,"A",{href:!0});var NLt=s(dK);nqr=r(NLt,"FlaxBertForTokenClassification"),NLt.forEach(t),sqr=r(PIe," (BERT model)"),PIe.forEach(t),lqr=i(Fo),p0=n(Fo,"LI",{});var BIe=s(p0);SCe=n(BIe,"STRONG",{});var jLt=s(SCe);iqr=r(jLt,"big_bird"),jLt.forEach(t),dqr=r(BIe," \u2014 "),cK=n(BIe,"A",{href:!0});var DLt=s(cK);cqr=r(DLt,"FlaxBigBirdForTokenClassification"),DLt.forEach(t),mqr=r(BIe," (BigBird model)"),BIe.forEach(t),fqr=i(Fo),_0=n(Fo,"LI",{});var IIe=s(_0);RCe=n(IIe,"STRONG",{});var GLt=s(RCe);gqr=r(GLt,"distilbert"),GLt.forEach(t),hqr=r(IIe," \u2014 "),mK=n(IIe,"A",{href:!0});var OLt=s(mK);uqr=r(OLt,"FlaxDistilBertForTokenClassification"),OLt.forEach(t),pqr=r(IIe," (DistilBERT model)"),IIe.forEach(t),_qr=i(Fo),b0=n(Fo,"LI",{});var qIe=s(b0);PCe=n(qIe,"STRONG",{});var VLt=s(PCe);bqr=r(VLt,"electra"),VLt.forEach(t),vqr=r(qIe," \u2014 "),fK=n(qIe,"A",{href:!0});var XLt=s(fK);Fqr=r(XLt,"FlaxElectraForTokenClassification"),XLt.forEach(t),Tqr=r(qIe," (ELECTRA model)"),qIe.forEach(t),Mqr=i(Fo),v0=n(Fo,"LI",{});var NIe=s(v0);BCe=n(NIe,"STRONG",{});var zLt=s(BCe);Eqr=r(zLt,"roberta"),zLt.forEach(t),Cqr=r(NIe," \u2014 "),gK=n(NIe,"A",{href:!0});var WLt=s(gK);wqr=r(WLt,"FlaxRobertaForTokenClassification"),WLt.forEach(t),Aqr=r(NIe," (RoBERTa model)"),NIe.forEach(t),yqr=i(Fo),F0=n(Fo,"LI",{});var jIe=s(F0);ICe=n(jIe,"STRONG",{});var QLt=s(ICe);Lqr=r(QLt,"roformer"),QLt.forEach(t),xqr=r(jIe," \u2014 "),hK=n(jIe,"A",{href:!0});var HLt=s(hK);$qr=r(HLt,"FlaxRoFormerForTokenClassification"),HLt.forEach(t),kqr=r(jIe," (RoFormer model)"),jIe.forEach(t),Sqr=i(Fo),T0=n(Fo,"LI",{});var DIe=s(T0);qCe=n(DIe,"STRONG",{});var ULt=s(qCe);Rqr=r(ULt,"xlm-roberta"),ULt.forEach(t),Pqr=r(DIe," \u2014 "),uK=n(DIe,"A",{href:!0});var JLt=s(uK);Bqr=r(JLt,"FlaxXLMRobertaForTokenClassification"),JLt.forEach(t),Iqr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),Fo.forEach(t),qqr=i(oi),T(M0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),HNe=i(m),Kc=n(m,"H2",{class:!0});var oGe=s(Kc);E0=n(oGe,"A",{id:!0,class:!0,href:!0});var YLt=s(E0);NCe=n(YLt,"SPAN",{});var KLt=s(NCe);T(K9.$$.fragment,KLt),KLt.forEach(t),YLt.forEach(t),Nqr=i(oGe),jCe=n(oGe,"SPAN",{});var ZLt=s(jCe);jqr=r(ZLt,"FlaxAutoModelForMultipleChoice"),ZLt.forEach(t),oGe.forEach(t),UNe=i(m),vr=n(m,"DIV",{class:!0});var ri=s(vr);T(Z9.$$.fragment,ri),Dqr=i(ri),Zc=n(ri,"P",{});var Cee=s(Zc);Gqr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=n(Cee,"A",{href:!0});var e8t=s(pK);Oqr=r(e8t,"from_pretrained()"),e8t.forEach(t),Vqr=r(Cee," class method or the "),_K=n(Cee,"A",{href:!0});var o8t=s(_K);Xqr=r(o8t,"from_config()"),o8t.forEach(t),zqr=r(Cee,` class
method.`),Cee.forEach(t),Wqr=i(ri),ex=n(ri,"P",{});var rGe=s(ex);Qqr=r(rGe,"This class cannot be instantiated directly using "),DCe=n(rGe,"CODE",{});var r8t=s(DCe);Hqr=r(r8t,"__init__()"),r8t.forEach(t),Uqr=r(rGe," (throws an error)."),rGe.forEach(t),Jqr=i(ri),Ut=n(ri,"DIV",{class:!0});var ry=s(Ut);T(ox.$$.fragment,ry),Yqr=i(ry),GCe=n(ry,"P",{});var t8t=s(GCe);Kqr=r(t8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t8t.forEach(t),Zqr=i(ry),em=n(ry,"P",{});var wee=s(em);eNr=r(wee,`Note:
Loading a model from its configuration file does `),OCe=n(wee,"STRONG",{});var a8t=s(OCe);oNr=r(a8t,"not"),a8t.forEach(t),rNr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(wee,"A",{href:!0});var n8t=s(bK);tNr=r(n8t,"from_pretrained()"),n8t.forEach(t),aNr=r(wee," to load the model weights."),wee.forEach(t),nNr=i(ry),T(C0.$$.fragment,ry),ry.forEach(t),sNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(rx.$$.fragment,ti),lNr=i(ti),VCe=n(ti,"P",{});var s8t=s(VCe);iNr=r(s8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s8t.forEach(t),dNr=i(ti),Mn=n(ti,"P",{});var ty=s(Mn);cNr=r(ty,"The model class to instantiate is selected based on the "),XCe=n(ty,"CODE",{});var l8t=s(XCe);mNr=r(l8t,"model_type"),l8t.forEach(t),fNr=r(ty,` property of the config object (either
passed as an argument or loaded from `),zCe=n(ty,"CODE",{});var i8t=s(zCe);gNr=r(i8t,"pretrained_model_name_or_path"),i8t.forEach(t),hNr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(ty,"CODE",{});var d8t=s(WCe);uNr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),pNr=r(ty,":"),ty.forEach(t),_Nr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);w0=n(To,"LI",{});var GIe=s(w0);QCe=n(GIe,"STRONG",{});var c8t=s(QCe);bNr=r(c8t,"albert"),c8t.forEach(t),vNr=r(GIe," \u2014 "),vK=n(GIe,"A",{href:!0});var m8t=s(vK);FNr=r(m8t,"FlaxAlbertForMultipleChoice"),m8t.forEach(t),TNr=r(GIe," (ALBERT model)"),GIe.forEach(t),MNr=i(To),A0=n(To,"LI",{});var OIe=s(A0);HCe=n(OIe,"STRONG",{});var f8t=s(HCe);ENr=r(f8t,"bert"),f8t.forEach(t),CNr=r(OIe," \u2014 "),FK=n(OIe,"A",{href:!0});var g8t=s(FK);wNr=r(g8t,"FlaxBertForMultipleChoice"),g8t.forEach(t),ANr=r(OIe," (BERT model)"),OIe.forEach(t),yNr=i(To),y0=n(To,"LI",{});var VIe=s(y0);UCe=n(VIe,"STRONG",{});var h8t=s(UCe);LNr=r(h8t,"big_bird"),h8t.forEach(t),xNr=r(VIe," \u2014 "),TK=n(VIe,"A",{href:!0});var u8t=s(TK);$Nr=r(u8t,"FlaxBigBirdForMultipleChoice"),u8t.forEach(t),kNr=r(VIe," (BigBird model)"),VIe.forEach(t),SNr=i(To),L0=n(To,"LI",{});var XIe=s(L0);JCe=n(XIe,"STRONG",{});var p8t=s(JCe);RNr=r(p8t,"distilbert"),p8t.forEach(t),PNr=r(XIe," \u2014 "),MK=n(XIe,"A",{href:!0});var _8t=s(MK);BNr=r(_8t,"FlaxDistilBertForMultipleChoice"),_8t.forEach(t),INr=r(XIe," (DistilBERT model)"),XIe.forEach(t),qNr=i(To),x0=n(To,"LI",{});var zIe=s(x0);YCe=n(zIe,"STRONG",{});var b8t=s(YCe);NNr=r(b8t,"electra"),b8t.forEach(t),jNr=r(zIe," \u2014 "),EK=n(zIe,"A",{href:!0});var v8t=s(EK);DNr=r(v8t,"FlaxElectraForMultipleChoice"),v8t.forEach(t),GNr=r(zIe," (ELECTRA model)"),zIe.forEach(t),ONr=i(To),$0=n(To,"LI",{});var WIe=s($0);KCe=n(WIe,"STRONG",{});var F8t=s(KCe);VNr=r(F8t,"roberta"),F8t.forEach(t),XNr=r(WIe," \u2014 "),CK=n(WIe,"A",{href:!0});var T8t=s(CK);zNr=r(T8t,"FlaxRobertaForMultipleChoice"),T8t.forEach(t),WNr=r(WIe," (RoBERTa model)"),WIe.forEach(t),QNr=i(To),k0=n(To,"LI",{});var QIe=s(k0);ZCe=n(QIe,"STRONG",{});var M8t=s(ZCe);HNr=r(M8t,"roformer"),M8t.forEach(t),UNr=r(QIe," \u2014 "),wK=n(QIe,"A",{href:!0});var E8t=s(wK);JNr=r(E8t,"FlaxRoFormerForMultipleChoice"),E8t.forEach(t),YNr=r(QIe," (RoFormer model)"),QIe.forEach(t),KNr=i(To),S0=n(To,"LI",{});var HIe=s(S0);e5e=n(HIe,"STRONG",{});var C8t=s(e5e);ZNr=r(C8t,"xlm-roberta"),C8t.forEach(t),ejr=r(HIe," \u2014 "),AK=n(HIe,"A",{href:!0});var w8t=s(AK);ojr=r(w8t,"FlaxXLMRobertaForMultipleChoice"),w8t.forEach(t),rjr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),To.forEach(t),tjr=i(ti),T(R0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),JNe=i(m),om=n(m,"H2",{class:!0});var tGe=s(om);P0=n(tGe,"A",{id:!0,class:!0,href:!0});var A8t=s(P0);o5e=n(A8t,"SPAN",{});var y8t=s(o5e);T(tx.$$.fragment,y8t),y8t.forEach(t),A8t.forEach(t),ajr=i(tGe),r5e=n(tGe,"SPAN",{});var L8t=s(r5e);njr=r(L8t,"FlaxAutoModelForNextSentencePrediction"),L8t.forEach(t),tGe.forEach(t),YNe=i(m),Fr=n(m,"DIV",{class:!0});var ai=s(Fr);T(ax.$$.fragment,ai),sjr=i(ai),rm=n(ai,"P",{});var Aee=s(rm);ljr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yK=n(Aee,"A",{href:!0});var x8t=s(yK);ijr=r(x8t,"from_pretrained()"),x8t.forEach(t),djr=r(Aee," class method or the "),LK=n(Aee,"A",{href:!0});var $8t=s(LK);cjr=r($8t,"from_config()"),$8t.forEach(t),mjr=r(Aee,` class
method.`),Aee.forEach(t),fjr=i(ai),nx=n(ai,"P",{});var aGe=s(nx);gjr=r(aGe,"This class cannot be instantiated directly using "),t5e=n(aGe,"CODE",{});var k8t=s(t5e);hjr=r(k8t,"__init__()"),k8t.forEach(t),ujr=r(aGe," (throws an error)."),aGe.forEach(t),pjr=i(ai),Jt=n(ai,"DIV",{class:!0});var ay=s(Jt);T(sx.$$.fragment,ay),_jr=i(ay),a5e=n(ay,"P",{});var S8t=s(a5e);bjr=r(S8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S8t.forEach(t),vjr=i(ay),tm=n(ay,"P",{});var yee=s(tm);Fjr=r(yee,`Note:
Loading a model from its configuration file does `),n5e=n(yee,"STRONG",{});var R8t=s(n5e);Tjr=r(R8t,"not"),R8t.forEach(t),Mjr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(yee,"A",{href:!0});var P8t=s(xK);Ejr=r(P8t,"from_pretrained()"),P8t.forEach(t),Cjr=r(yee," to load the model weights."),yee.forEach(t),wjr=i(ay),T(B0.$$.fragment,ay),ay.forEach(t),Ajr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(lx.$$.fragment,ni),yjr=i(ni),s5e=n(ni,"P",{});var B8t=s(s5e);Ljr=r(B8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B8t.forEach(t),xjr=i(ni),En=n(ni,"P",{});var ny=s(En);$jr=r(ny,"The model class to instantiate is selected based on the "),l5e=n(ny,"CODE",{});var I8t=s(l5e);kjr=r(I8t,"model_type"),I8t.forEach(t),Sjr=r(ny,` property of the config object (either
passed as an argument or loaded from `),i5e=n(ny,"CODE",{});var q8t=s(i5e);Rjr=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),Pjr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(ny,"CODE",{});var N8t=s(d5e);Bjr=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),Ijr=r(ny,":"),ny.forEach(t),qjr=i(ni),c5e=n(ni,"UL",{});var j8t=s(c5e);I0=n(j8t,"LI",{});var UIe=s(I0);m5e=n(UIe,"STRONG",{});var D8t=s(m5e);Njr=r(D8t,"bert"),D8t.forEach(t),jjr=r(UIe," \u2014 "),$K=n(UIe,"A",{href:!0});var G8t=s($K);Djr=r(G8t,"FlaxBertForNextSentencePrediction"),G8t.forEach(t),Gjr=r(UIe," (BERT model)"),UIe.forEach(t),j8t.forEach(t),Ojr=i(ni),T(q0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),KNe=i(m),am=n(m,"H2",{class:!0});var nGe=s(am);N0=n(nGe,"A",{id:!0,class:!0,href:!0});var O8t=s(N0);f5e=n(O8t,"SPAN",{});var V8t=s(f5e);T(ix.$$.fragment,V8t),V8t.forEach(t),O8t.forEach(t),Vjr=i(nGe),g5e=n(nGe,"SPAN",{});var X8t=s(g5e);Xjr=r(X8t,"FlaxAutoModelForImageClassification"),X8t.forEach(t),nGe.forEach(t),ZNe=i(m),Tr=n(m,"DIV",{class:!0});var si=s(Tr);T(dx.$$.fragment,si),zjr=i(si),nm=n(si,"P",{});var Lee=s(nm);Wjr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kK=n(Lee,"A",{href:!0});var z8t=s(kK);Qjr=r(z8t,"from_pretrained()"),z8t.forEach(t),Hjr=r(Lee," class method or the "),SK=n(Lee,"A",{href:!0});var W8t=s(SK);Ujr=r(W8t,"from_config()"),W8t.forEach(t),Jjr=r(Lee,` class
method.`),Lee.forEach(t),Yjr=i(si),cx=n(si,"P",{});var sGe=s(cx);Kjr=r(sGe,"This class cannot be instantiated directly using "),h5e=n(sGe,"CODE",{});var Q8t=s(h5e);Zjr=r(Q8t,"__init__()"),Q8t.forEach(t),eDr=r(sGe," (throws an error)."),sGe.forEach(t),oDr=i(si),Yt=n(si,"DIV",{class:!0});var sy=s(Yt);T(mx.$$.fragment,sy),rDr=i(sy),u5e=n(sy,"P",{});var H8t=s(u5e);tDr=r(H8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),H8t.forEach(t),aDr=i(sy),sm=n(sy,"P",{});var xee=s(sm);nDr=r(xee,`Note:
Loading a model from its configuration file does `),p5e=n(xee,"STRONG",{});var U8t=s(p5e);sDr=r(U8t,"not"),U8t.forEach(t),lDr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(xee,"A",{href:!0});var J8t=s(RK);iDr=r(J8t,"from_pretrained()"),J8t.forEach(t),dDr=r(xee," to load the model weights."),xee.forEach(t),cDr=i(sy),T(j0.$$.fragment,sy),sy.forEach(t),mDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(fx.$$.fragment,li),fDr=i(li),_5e=n(li,"P",{});var Y8t=s(_5e);gDr=r(Y8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y8t.forEach(t),hDr=i(li),Cn=n(li,"P",{});var ly=s(Cn);uDr=r(ly,"The model class to instantiate is selected based on the "),b5e=n(ly,"CODE",{});var K8t=s(b5e);pDr=r(K8t,"model_type"),K8t.forEach(t),_Dr=r(ly,` property of the config object (either
passed as an argument or loaded from `),v5e=n(ly,"CODE",{});var Z8t=s(v5e);bDr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),vDr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(ly,"CODE",{});var e7t=s(F5e);FDr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),TDr=r(ly,":"),ly.forEach(t),MDr=i(li),gx=n(li,"UL",{});var lGe=s(gx);D0=n(lGe,"LI",{});var JIe=s(D0);T5e=n(JIe,"STRONG",{});var o7t=s(T5e);EDr=r(o7t,"beit"),o7t.forEach(t),CDr=r(JIe," \u2014 "),PK=n(JIe,"A",{href:!0});var r7t=s(PK);wDr=r(r7t,"FlaxBeitForImageClassification"),r7t.forEach(t),ADr=r(JIe," (BEiT model)"),JIe.forEach(t),yDr=i(lGe),G0=n(lGe,"LI",{});var YIe=s(G0);M5e=n(YIe,"STRONG",{});var t7t=s(M5e);LDr=r(t7t,"vit"),t7t.forEach(t),xDr=r(YIe," \u2014 "),BK=n(YIe,"A",{href:!0});var a7t=s(BK);$Dr=r(a7t,"FlaxViTForImageClassification"),a7t.forEach(t),kDr=r(YIe," (ViT model)"),YIe.forEach(t),lGe.forEach(t),SDr=i(li),T(O0.$$.fragment,li),li.forEach(t),si.forEach(t),eje=i(m),lm=n(m,"H2",{class:!0});var iGe=s(lm);V0=n(iGe,"A",{id:!0,class:!0,href:!0});var n7t=s(V0);E5e=n(n7t,"SPAN",{});var s7t=s(E5e);T(hx.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),RDr=i(iGe),C5e=n(iGe,"SPAN",{});var l7t=s(C5e);PDr=r(l7t,"FlaxAutoModelForVision2Seq"),l7t.forEach(t),iGe.forEach(t),oje=i(m),Mr=n(m,"DIV",{class:!0});var ii=s(Mr);T(ux.$$.fragment,ii),BDr=i(ii),im=n(ii,"P",{});var $ee=s(im);IDr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=n($ee,"A",{href:!0});var i7t=s(IK);qDr=r(i7t,"from_pretrained()"),i7t.forEach(t),NDr=r($ee," class method or the "),qK=n($ee,"A",{href:!0});var d7t=s(qK);jDr=r(d7t,"from_config()"),d7t.forEach(t),DDr=r($ee,` class
method.`),$ee.forEach(t),GDr=i(ii),px=n(ii,"P",{});var dGe=s(px);ODr=r(dGe,"This class cannot be instantiated directly using "),w5e=n(dGe,"CODE",{});var c7t=s(w5e);VDr=r(c7t,"__init__()"),c7t.forEach(t),XDr=r(dGe," (throws an error)."),dGe.forEach(t),zDr=i(ii),Kt=n(ii,"DIV",{class:!0});var iy=s(Kt);T(_x.$$.fragment,iy),WDr=i(iy),A5e=n(iy,"P",{});var m7t=s(A5e);QDr=r(m7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m7t.forEach(t),HDr=i(iy),dm=n(iy,"P",{});var kee=s(dm);UDr=r(kee,`Note:
Loading a model from its configuration file does `),y5e=n(kee,"STRONG",{});var f7t=s(y5e);JDr=r(f7t,"not"),f7t.forEach(t),YDr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(kee,"A",{href:!0});var g7t=s(NK);KDr=r(g7t,"from_pretrained()"),g7t.forEach(t),ZDr=r(kee," to load the model weights."),kee.forEach(t),eGr=i(iy),T(X0.$$.fragment,iy),iy.forEach(t),oGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(bx.$$.fragment,di),rGr=i(di),L5e=n(di,"P",{});var h7t=s(L5e);tGr=r(h7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h7t.forEach(t),aGr=i(di),wn=n(di,"P",{});var dy=s(wn);nGr=r(dy,"The model class to instantiate is selected based on the "),x5e=n(dy,"CODE",{});var u7t=s(x5e);sGr=r(u7t,"model_type"),u7t.forEach(t),lGr=r(dy,` property of the config object (either
passed as an argument or loaded from `),$5e=n(dy,"CODE",{});var p7t=s($5e);iGr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),dGr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(dy,"CODE",{});var _7t=s(k5e);cGr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),mGr=r(dy,":"),dy.forEach(t),fGr=i(di),S5e=n(di,"UL",{});var b7t=s(S5e);z0=n(b7t,"LI",{});var KIe=s(z0);R5e=n(KIe,"STRONG",{});var v7t=s(R5e);gGr=r(v7t,"vision-encoder-decoder"),v7t.forEach(t),hGr=r(KIe," \u2014 "),jK=n(KIe,"A",{href:!0});var F7t=s(jK);uGr=r(F7t,"FlaxVisionEncoderDecoderModel"),F7t.forEach(t),pGr=r(KIe," (Vision Encoder decoder model)"),KIe.forEach(t),b7t.forEach(t),_Gr=i(di),T(W0.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Cxt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(_m,"id","extending-the-auto-classes"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(vm,"id","transformers.AutoConfig"),c(vm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vm,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(q$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(N$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(nk,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(Fk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(yk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c($k,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Sk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(jk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(dS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(gS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(yS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c($S,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(qS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(NS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(OS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(XS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(WS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(QS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(KS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(oP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(rP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(_P,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(qP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(QP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(_B,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(bB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(qB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(NB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(zB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(QB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(HB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(UB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(KB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(ZB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(eI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(tI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(aI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(lI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(fI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(gI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(hI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(pI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(_I,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(bI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(vI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(FI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(TI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(MI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(EI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(CI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(wI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(AI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(yI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(LI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(xI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c($I,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(kI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(SI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(RI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(PI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(BI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(II,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(qI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(NI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(DI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(GI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(OI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(VI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(XI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(zI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(WI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(QI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(HI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(UI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(JI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(YI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(KI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(ZI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(eq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(oq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(rq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(tq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(aq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(nq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(lq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(cq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(mq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(hq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(uq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(pq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(_q,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(wq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(yq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(xq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c($q,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Bq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(qq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(zq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Qq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(oN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(rN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hp,"id","transformers.AutoModelForPreTraining"),c(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hp,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(tN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(dN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(_N,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(LN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(SN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(PN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(NN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(jN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(DN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(GN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ON,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(VN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(XN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D_,"id","transformers.AutoModelForCausalLM"),c(D_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(HN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(KN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ej,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ij,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(fj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(pj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(_j,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Tj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($j,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForMaskedLM"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ij,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(jj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(aD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForSeq2SeqLM"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(pD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_D,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(TD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(MD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ED,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(CD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(AD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(LD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($D,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(SD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(RD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForSequenceClassification"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(BD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(BG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(IG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(qG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(NG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(GG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(WG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(QG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForNextSentencePrediction"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(fO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForTokenClassification"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(pO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c($O,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForQuestionAnswering"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(aV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(lV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(iV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(cV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(mV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(gV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(hV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(_V,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(bV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(vV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(FV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(EV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(AV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(yV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(LV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($V,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(kV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(SV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(RV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(PV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(IV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(jV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForTableQuestionAnswering"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForImageClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ZV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForVision2Seq"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForAudioClassification"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForAudioFrameClassification"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($X,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForCTC"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(NX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(jX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(DX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(GX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(OX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(VX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(XX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(zX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(JX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.AutoModelForAudioXVector"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(az,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForMaskedImageModeling"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForObjectDetection"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.AutoModelForImageSegmentation"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.AutoModelForSemanticSegmentation"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Cz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Az,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForInstanceSegmentation"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModel"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(qz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(jz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(zz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Qz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Uz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(oW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(rW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(aW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(nW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(lW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(iW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(mW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(hW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(uW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_W,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(bW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(vW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(FW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(MW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(wW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForPreTraining"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(RW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(NW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(OW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(VW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(QW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(JW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(KW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForCausalLM"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(fQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForImageClassification"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(bQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(vQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(FQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForMaskedLM"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(HQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(rH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSequenceClassification"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForMultipleChoice"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(IH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(qH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(NH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(DH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(GH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(OH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(VH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(XH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(WH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(HH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(UH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(JH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(YH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(rU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.TFAutoModelForTokenClassification"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.TFAutoModelForQuestionAnswering"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c($U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(OU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(VU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(WU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(HU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(UU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(JU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(YU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(KU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.TFAutoModelForVision2Seq"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModel"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(lJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(fJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(gJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_J,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(MJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(EJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(CJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(LJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c($J,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(PJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForCausalLM"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(jJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(GJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(OJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(XJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(zJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(WJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForPreTraining"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(QJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(YJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ZJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(eY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(oY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(aY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(nY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(sY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(lY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForMaskedLM"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(fY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(hY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(pY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(_Y,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(AY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(yY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(LY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(SY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(qY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(DY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(GY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(VY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(XY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(YY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(KY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(ZY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(eK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(oK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(rK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(tK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(aK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForTokenClassification"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(FK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(TK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(MK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(EK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(CK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(wK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(AK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(om,"class","relative group"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.FlaxAutoModelForImageClassification"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.FlaxAutoModelForImageClassification"),c(am,"class","relative group"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(BK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForVision2Seq"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lm,"class","relative group"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,ci),b(m,gm,_),b(m,rt,_),e(rt,mi),e(rt,fi),e(fi,cy),e(rt,hm),b(m,je,_),b(m,We,_),e(We,gi),e(We,yn),e(yn,my),e(We,Ln),e(We,xn),e(xn,fy),e(We,hi),e(We,$n),e($n,gy),e(We,ui),b(m,um,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,k$),e(Ae,pi),e(pi,S$),e(Ae,R$),b(m,Eo,_),b(m,wa,_),e(wa,P$),e(wa,pm),e(pm,B$),e(wa,cGe),b(m,ZIe,_),b(m,_i,_),e(_i,_m),e(_m,See),M(hy,See,null),e(_i,mGe),e(_i,Ree),e(Ree,fGe),b(m,eqe,_),b(m,kn,_),e(kn,gGe),e(kn,Pee),e(Pee,hGe),e(kn,uGe),e(kn,Bee),e(Bee,pGe),e(kn,_Ge),b(m,oqe,_),M(uy,m,_),b(m,rqe,_),b(m,I$,_),e(I$,bGe),b(m,tqe,_),M(bm,m,_),b(m,aqe,_),b(m,bi,_),e(bi,vm),e(vm,Iee),M(py,Iee,null),e(bi,vGe),e(bi,qee),e(qee,FGe),b(m,nqe,_),b(m,Co,_),M(_y,Co,null),e(Co,TGe),e(Co,by),e(by,MGe),e(by,q$),e(q$,EGe),e(by,CGe),e(Co,wGe),e(Co,vy),e(vy,AGe),e(vy,Nee),e(Nee,yGe),e(vy,LGe),e(Co,xGe),e(Co,Er),M(Fy,Er,null),e(Er,$Ge),e(Er,jee),e(jee,kGe),e(Er,SGe),e(Er,vi),e(vi,RGe),e(vi,Dee),e(Dee,PGe),e(vi,BGe),e(vi,Gee),e(Gee,IGe),e(vi,qGe),e(Er,NGe),e(Er,A),e(A,Fm),e(Fm,Oee),e(Oee,jGe),e(Fm,DGe),e(Fm,N$),e(N$,GGe),e(Fm,OGe),e(A,VGe),e(A,Tm),e(Tm,Vee),e(Vee,XGe),e(Tm,zGe),e(Tm,j$),e(j$,WGe),e(Tm,QGe),e(A,HGe),e(A,Mm),e(Mm,Xee),e(Xee,UGe),e(Mm,JGe),e(Mm,D$),e(D$,YGe),e(Mm,KGe),e(A,ZGe),e(A,Em),e(Em,zee),e(zee,eOe),e(Em,oOe),e(Em,G$),e(G$,rOe),e(Em,tOe),e(A,aOe),e(A,Cm),e(Cm,Wee),e(Wee,nOe),e(Cm,sOe),e(Cm,O$),e(O$,lOe),e(Cm,iOe),e(A,dOe),e(A,wm),e(wm,Qee),e(Qee,cOe),e(wm,mOe),e(wm,V$),e(V$,fOe),e(wm,gOe),e(A,hOe),e(A,Am),e(Am,Hee),e(Hee,uOe),e(Am,pOe),e(Am,X$),e(X$,_Oe),e(Am,bOe),e(A,vOe),e(A,ym),e(ym,Uee),e(Uee,FOe),e(ym,TOe),e(ym,z$),e(z$,MOe),e(ym,EOe),e(A,COe),e(A,Lm),e(Lm,Jee),e(Jee,wOe),e(Lm,AOe),e(Lm,W$),e(W$,yOe),e(Lm,LOe),e(A,xOe),e(A,xm),e(xm,Yee),e(Yee,$Oe),e(xm,kOe),e(xm,Q$),e(Q$,SOe),e(xm,ROe),e(A,POe),e(A,$m),e($m,Kee),e(Kee,BOe),e($m,IOe),e($m,H$),e(H$,qOe),e($m,NOe),e(A,jOe),e(A,km),e(km,Zee),e(Zee,DOe),e(km,GOe),e(km,U$),e(U$,OOe),e(km,VOe),e(A,XOe),e(A,Sm),e(Sm,eoe),e(eoe,zOe),e(Sm,WOe),e(Sm,J$),e(J$,QOe),e(Sm,HOe),e(A,UOe),e(A,Rm),e(Rm,ooe),e(ooe,JOe),e(Rm,YOe),e(Rm,Y$),e(Y$,KOe),e(Rm,ZOe),e(A,eVe),e(A,Pm),e(Pm,roe),e(roe,oVe),e(Pm,rVe),e(Pm,K$),e(K$,tVe),e(Pm,aVe),e(A,nVe),e(A,Bm),e(Bm,toe),e(toe,sVe),e(Bm,lVe),e(Bm,Z$),e(Z$,iVe),e(Bm,dVe),e(A,cVe),e(A,Im),e(Im,aoe),e(aoe,mVe),e(Im,fVe),e(Im,ek),e(ek,gVe),e(Im,hVe),e(A,uVe),e(A,qm),e(qm,noe),e(noe,pVe),e(qm,_Ve),e(qm,ok),e(ok,bVe),e(qm,vVe),e(A,FVe),e(A,Nm),e(Nm,soe),e(soe,TVe),e(Nm,MVe),e(Nm,rk),e(rk,EVe),e(Nm,CVe),e(A,wVe),e(A,jm),e(jm,loe),e(loe,AVe),e(jm,yVe),e(jm,tk),e(tk,LVe),e(jm,xVe),e(A,$Ve),e(A,Dm),e(Dm,ioe),e(ioe,kVe),e(Dm,SVe),e(Dm,ak),e(ak,RVe),e(Dm,PVe),e(A,BVe),e(A,Gm),e(Gm,doe),e(doe,IVe),e(Gm,qVe),e(Gm,nk),e(nk,NVe),e(Gm,jVe),e(A,DVe),e(A,Om),e(Om,coe),e(coe,GVe),e(Om,OVe),e(Om,sk),e(sk,VVe),e(Om,XVe),e(A,zVe),e(A,Vm),e(Vm,moe),e(moe,WVe),e(Vm,QVe),e(Vm,lk),e(lk,HVe),e(Vm,UVe),e(A,JVe),e(A,Xm),e(Xm,foe),e(foe,YVe),e(Xm,KVe),e(Xm,ik),e(ik,ZVe),e(Xm,eXe),e(A,oXe),e(A,zm),e(zm,goe),e(goe,rXe),e(zm,tXe),e(zm,dk),e(dk,aXe),e(zm,nXe),e(A,sXe),e(A,Wm),e(Wm,hoe),e(hoe,lXe),e(Wm,iXe),e(Wm,ck),e(ck,dXe),e(Wm,cXe),e(A,mXe),e(A,Qm),e(Qm,uoe),e(uoe,fXe),e(Qm,gXe),e(Qm,mk),e(mk,hXe),e(Qm,uXe),e(A,pXe),e(A,Hm),e(Hm,poe),e(poe,_Xe),e(Hm,bXe),e(Hm,fk),e(fk,vXe),e(Hm,FXe),e(A,TXe),e(A,Um),e(Um,_oe),e(_oe,MXe),e(Um,EXe),e(Um,gk),e(gk,CXe),e(Um,wXe),e(A,AXe),e(A,Jm),e(Jm,boe),e(boe,yXe),e(Jm,LXe),e(Jm,hk),e(hk,xXe),e(Jm,$Xe),e(A,kXe),e(A,Ym),e(Ym,voe),e(voe,SXe),e(Ym,RXe),e(Ym,uk),e(uk,PXe),e(Ym,BXe),e(A,IXe),e(A,Km),e(Km,Foe),e(Foe,qXe),e(Km,NXe),e(Km,pk),e(pk,jXe),e(Km,DXe),e(A,GXe),e(A,Zm),e(Zm,Toe),e(Toe,OXe),e(Zm,VXe),e(Zm,_k),e(_k,XXe),e(Zm,zXe),e(A,WXe),e(A,ef),e(ef,Moe),e(Moe,QXe),e(ef,HXe),e(ef,bk),e(bk,UXe),e(ef,JXe),e(A,YXe),e(A,of),e(of,Eoe),e(Eoe,KXe),e(of,ZXe),e(of,vk),e(vk,eze),e(of,oze),e(A,rze),e(A,rf),e(rf,Coe),e(Coe,tze),e(rf,aze),e(rf,Fk),e(Fk,nze),e(rf,sze),e(A,lze),e(A,tf),e(tf,woe),e(woe,ize),e(tf,dze),e(tf,Tk),e(Tk,cze),e(tf,mze),e(A,fze),e(A,af),e(af,Aoe),e(Aoe,gze),e(af,hze),e(af,Mk),e(Mk,uze),e(af,pze),e(A,_ze),e(A,nf),e(nf,yoe),e(yoe,bze),e(nf,vze),e(nf,Ek),e(Ek,Fze),e(nf,Tze),e(A,Mze),e(A,sf),e(sf,Loe),e(Loe,Eze),e(sf,Cze),e(sf,Ck),e(Ck,wze),e(sf,Aze),e(A,yze),e(A,lf),e(lf,xoe),e(xoe,Lze),e(lf,xze),e(lf,wk),e(wk,$ze),e(lf,kze),e(A,Sze),e(A,df),e(df,$oe),e($oe,Rze),e(df,Pze),e(df,Ak),e(Ak,Bze),e(df,Ize),e(A,qze),e(A,cf),e(cf,koe),e(koe,Nze),e(cf,jze),e(cf,yk),e(yk,Dze),e(cf,Gze),e(A,Oze),e(A,mf),e(mf,Soe),e(Soe,Vze),e(mf,Xze),e(mf,Lk),e(Lk,zze),e(mf,Wze),e(A,Qze),e(A,ff),e(ff,Roe),e(Roe,Hze),e(ff,Uze),e(ff,xk),e(xk,Jze),e(ff,Yze),e(A,Kze),e(A,gf),e(gf,Poe),e(Poe,Zze),e(gf,eWe),e(gf,$k),e($k,oWe),e(gf,rWe),e(A,tWe),e(A,hf),e(hf,Boe),e(Boe,aWe),e(hf,nWe),e(hf,kk),e(kk,sWe),e(hf,lWe),e(A,iWe),e(A,uf),e(uf,Ioe),e(Ioe,dWe),e(uf,cWe),e(uf,Sk),e(Sk,mWe),e(uf,fWe),e(A,gWe),e(A,pf),e(pf,qoe),e(qoe,hWe),e(pf,uWe),e(pf,Rk),e(Rk,pWe),e(pf,_We),e(A,bWe),e(A,_f),e(_f,Noe),e(Noe,vWe),e(_f,FWe),e(_f,Pk),e(Pk,TWe),e(_f,MWe),e(A,EWe),e(A,bf),e(bf,joe),e(joe,CWe),e(bf,wWe),e(bf,Bk),e(Bk,AWe),e(bf,yWe),e(A,LWe),e(A,vf),e(vf,Doe),e(Doe,xWe),e(vf,$We),e(vf,Ik),e(Ik,kWe),e(vf,SWe),e(A,RWe),e(A,Ff),e(Ff,Goe),e(Goe,PWe),e(Ff,BWe),e(Ff,qk),e(qk,IWe),e(Ff,qWe),e(A,NWe),e(A,Tf),e(Tf,Ooe),e(Ooe,jWe),e(Tf,DWe),e(Tf,Nk),e(Nk,GWe),e(Tf,OWe),e(A,VWe),e(A,Mf),e(Mf,Voe),e(Voe,XWe),e(Mf,zWe),e(Mf,jk),e(jk,WWe),e(Mf,QWe),e(A,HWe),e(A,Ef),e(Ef,Xoe),e(Xoe,UWe),e(Ef,JWe),e(Ef,Dk),e(Dk,YWe),e(Ef,KWe),e(A,ZWe),e(A,Cf),e(Cf,zoe),e(zoe,eQe),e(Cf,oQe),e(Cf,Gk),e(Gk,rQe),e(Cf,tQe),e(A,aQe),e(A,wf),e(wf,Woe),e(Woe,nQe),e(wf,sQe),e(wf,Ok),e(Ok,lQe),e(wf,iQe),e(A,dQe),e(A,Af),e(Af,Qoe),e(Qoe,cQe),e(Af,mQe),e(Af,Vk),e(Vk,fQe),e(Af,gQe),e(A,hQe),e(A,yf),e(yf,Hoe),e(Hoe,uQe),e(yf,pQe),e(yf,Xk),e(Xk,_Qe),e(yf,bQe),e(A,vQe),e(A,Lf),e(Lf,Uoe),e(Uoe,FQe),e(Lf,TQe),e(Lf,zk),e(zk,MQe),e(Lf,EQe),e(A,CQe),e(A,xf),e(xf,Joe),e(Joe,wQe),e(xf,AQe),e(xf,Wk),e(Wk,yQe),e(xf,LQe),e(A,xQe),e(A,$f),e($f,Yoe),e(Yoe,$Qe),e($f,kQe),e($f,Qk),e(Qk,SQe),e($f,RQe),e(A,PQe),e(A,kf),e(kf,Koe),e(Koe,BQe),e(kf,IQe),e(kf,Hk),e(Hk,qQe),e(kf,NQe),e(A,jQe),e(A,Sf),e(Sf,Zoe),e(Zoe,DQe),e(Sf,GQe),e(Sf,Uk),e(Uk,OQe),e(Sf,VQe),e(A,XQe),e(A,Rf),e(Rf,ere),e(ere,zQe),e(Rf,WQe),e(Rf,Jk),e(Jk,QQe),e(Rf,HQe),e(A,UQe),e(A,Pf),e(Pf,ore),e(ore,JQe),e(Pf,YQe),e(Pf,Yk),e(Yk,KQe),e(Pf,ZQe),e(A,eHe),e(A,Bf),e(Bf,rre),e(rre,oHe),e(Bf,rHe),e(Bf,Kk),e(Kk,tHe),e(Bf,aHe),e(A,nHe),e(A,If),e(If,tre),e(tre,sHe),e(If,lHe),e(If,Zk),e(Zk,iHe),e(If,dHe),e(A,cHe),e(A,qf),e(qf,are),e(are,mHe),e(qf,fHe),e(qf,eS),e(eS,gHe),e(qf,hHe),e(A,uHe),e(A,Nf),e(Nf,nre),e(nre,pHe),e(Nf,_He),e(Nf,oS),e(oS,bHe),e(Nf,vHe),e(A,FHe),e(A,jf),e(jf,sre),e(sre,THe),e(jf,MHe),e(jf,rS),e(rS,EHe),e(jf,CHe),e(A,wHe),e(A,Df),e(Df,lre),e(lre,AHe),e(Df,yHe),e(Df,tS),e(tS,LHe),e(Df,xHe),e(A,$He),e(A,Gf),e(Gf,ire),e(ire,kHe),e(Gf,SHe),e(Gf,aS),e(aS,RHe),e(Gf,PHe),e(A,BHe),e(A,Of),e(Of,dre),e(dre,IHe),e(Of,qHe),e(Of,nS),e(nS,NHe),e(Of,jHe),e(A,DHe),e(A,Vf),e(Vf,cre),e(cre,GHe),e(Vf,OHe),e(Vf,sS),e(sS,VHe),e(Vf,XHe),e(A,zHe),e(A,Xf),e(Xf,mre),e(mre,WHe),e(Xf,QHe),e(Xf,lS),e(lS,HHe),e(Xf,UHe),e(A,JHe),e(A,zf),e(zf,fre),e(fre,YHe),e(zf,KHe),e(zf,iS),e(iS,ZHe),e(zf,eUe),e(A,oUe),e(A,Wf),e(Wf,gre),e(gre,rUe),e(Wf,tUe),e(Wf,dS),e(dS,aUe),e(Wf,nUe),e(A,sUe),e(A,Qf),e(Qf,hre),e(hre,lUe),e(Qf,iUe),e(Qf,cS),e(cS,dUe),e(Qf,cUe),e(A,mUe),e(A,Hf),e(Hf,ure),e(ure,fUe),e(Hf,gUe),e(Hf,mS),e(mS,hUe),e(Hf,uUe),e(A,pUe),e(A,Uf),e(Uf,pre),e(pre,_Ue),e(Uf,bUe),e(Uf,fS),e(fS,vUe),e(Uf,FUe),e(A,TUe),e(A,Jf),e(Jf,_re),e(_re,MUe),e(Jf,EUe),e(Jf,gS),e(gS,CUe),e(Jf,wUe),e(A,AUe),e(A,Yf),e(Yf,bre),e(bre,yUe),e(Yf,LUe),e(Yf,hS),e(hS,xUe),e(Yf,$Ue),e(A,kUe),e(A,Kf),e(Kf,vre),e(vre,SUe),e(Kf,RUe),e(Kf,uS),e(uS,PUe),e(Kf,BUe),e(A,IUe),e(A,Zf),e(Zf,Fre),e(Fre,qUe),e(Zf,NUe),e(Zf,pS),e(pS,jUe),e(Zf,DUe),e(A,GUe),e(A,eg),e(eg,Tre),e(Tre,OUe),e(eg,VUe),e(eg,_S),e(_S,XUe),e(eg,zUe),e(A,WUe),e(A,og),e(og,Mre),e(Mre,QUe),e(og,HUe),e(og,bS),e(bS,UUe),e(og,JUe),e(A,YUe),e(A,rg),e(rg,Ere),e(Ere,KUe),e(rg,ZUe),e(rg,vS),e(vS,eJe),e(rg,oJe),e(A,rJe),e(A,tg),e(tg,Cre),e(Cre,tJe),e(tg,aJe),e(tg,FS),e(FS,nJe),e(tg,sJe),e(A,lJe),e(A,ag),e(ag,wre),e(wre,iJe),e(ag,dJe),e(ag,TS),e(TS,cJe),e(ag,mJe),e(A,fJe),e(A,ng),e(ng,Are),e(Are,gJe),e(ng,hJe),e(ng,MS),e(MS,uJe),e(ng,pJe),e(A,_Je),e(A,sg),e(sg,yre),e(yre,bJe),e(sg,vJe),e(sg,ES),e(ES,FJe),e(sg,TJe),e(A,MJe),e(A,lg),e(lg,Lre),e(Lre,EJe),e(lg,CJe),e(lg,CS),e(CS,wJe),e(lg,AJe),e(A,yJe),e(A,ig),e(ig,xre),e(xre,LJe),e(ig,xJe),e(ig,wS),e(wS,$Je),e(ig,kJe),e(A,SJe),e(A,dg),e(dg,$re),e($re,RJe),e(dg,PJe),e(dg,AS),e(AS,BJe),e(dg,IJe),e(A,qJe),e(A,cg),e(cg,kre),e(kre,NJe),e(cg,jJe),e(cg,yS),e(yS,DJe),e(cg,GJe),e(A,OJe),e(A,mg),e(mg,Sre),e(Sre,VJe),e(mg,XJe),e(mg,LS),e(LS,zJe),e(mg,WJe),e(A,QJe),e(A,fg),e(fg,Rre),e(Rre,HJe),e(fg,UJe),e(fg,xS),e(xS,JJe),e(fg,YJe),e(A,KJe),e(A,gg),e(gg,Pre),e(Pre,ZJe),e(gg,eYe),e(gg,$S),e($S,oYe),e(gg,rYe),e(A,tYe),e(A,hg),e(hg,Bre),e(Bre,aYe),e(hg,nYe),e(hg,kS),e(kS,sYe),e(hg,lYe),e(A,iYe),e(A,ug),e(ug,Ire),e(Ire,dYe),e(ug,cYe),e(ug,SS),e(SS,mYe),e(ug,fYe),e(A,gYe),e(A,pg),e(pg,qre),e(qre,hYe),e(pg,uYe),e(pg,RS),e(RS,pYe),e(pg,_Ye),e(A,bYe),e(A,_g),e(_g,Nre),e(Nre,vYe),e(_g,FYe),e(_g,PS),e(PS,TYe),e(_g,MYe),e(A,EYe),e(A,bg),e(bg,jre),e(jre,CYe),e(bg,wYe),e(bg,BS),e(BS,AYe),e(bg,yYe),e(A,LYe),e(A,vg),e(vg,Dre),e(Dre,xYe),e(vg,$Ye),e(vg,IS),e(IS,kYe),e(vg,SYe),e(Er,RYe),M(Fg,Er,null),e(Co,PYe),e(Co,Tg),M(Ty,Tg,null),e(Tg,BYe),e(Tg,Gre),e(Gre,IYe),b(m,sqe,_),b(m,Fi,_),e(Fi,Mg),e(Mg,Ore),M(My,Ore,null),e(Fi,qYe),e(Fi,Vre),e(Vre,NYe),b(m,lqe,_),b(m,wo,_),M(Ey,wo,null),e(wo,jYe),e(wo,Cy),e(Cy,DYe),e(Cy,qS),e(qS,GYe),e(Cy,OYe),e(wo,VYe),e(wo,wy),e(wy,XYe),e(wy,Xre),e(Xre,zYe),e(wy,WYe),e(wo,QYe),e(wo,Cr),M(Ay,Cr,null),e(Cr,HYe),e(Cr,zre),e(zre,UYe),e(Cr,JYe),e(Cr,Aa),e(Aa,YYe),e(Aa,Wre),e(Wre,KYe),e(Aa,ZYe),e(Aa,Qre),e(Qre,eKe),e(Aa,oKe),e(Aa,Hre),e(Hre,rKe),e(Aa,tKe),e(Cr,aKe),e(Cr,k),e(k,Sn),e(Sn,Ure),e(Ure,nKe),e(Sn,sKe),e(Sn,NS),e(NS,lKe),e(Sn,iKe),e(Sn,jS),e(jS,dKe),e(Sn,cKe),e(k,mKe),e(k,Rn),e(Rn,Jre),e(Jre,fKe),e(Rn,gKe),e(Rn,DS),e(DS,hKe),e(Rn,uKe),e(Rn,GS),e(GS,pKe),e(Rn,_Ke),e(k,bKe),e(k,Pn),e(Pn,Yre),e(Yre,vKe),e(Pn,FKe),e(Pn,OS),e(OS,TKe),e(Pn,MKe),e(Pn,VS),e(VS,EKe),e(Pn,CKe),e(k,wKe),e(k,Eg),e(Eg,Kre),e(Kre,AKe),e(Eg,yKe),e(Eg,XS),e(XS,LKe),e(Eg,xKe),e(k,$Ke),e(k,Bn),e(Bn,Zre),e(Zre,kKe),e(Bn,SKe),e(Bn,zS),e(zS,RKe),e(Bn,PKe),e(Bn,WS),e(WS,BKe),e(Bn,IKe),e(k,qKe),e(k,Cg),e(Cg,ete),e(ete,NKe),e(Cg,jKe),e(Cg,QS),e(QS,DKe),e(Cg,GKe),e(k,OKe),e(k,wg),e(wg,ote),e(ote,VKe),e(wg,XKe),e(wg,HS),e(HS,zKe),e(wg,WKe),e(k,QKe),e(k,Ag),e(Ag,rte),e(rte,HKe),e(Ag,UKe),e(Ag,US),e(US,JKe),e(Ag,YKe),e(k,KKe),e(k,In),e(In,tte),e(tte,ZKe),e(In,eZe),e(In,JS),e(JS,oZe),e(In,rZe),e(In,YS),e(YS,tZe),e(In,aZe),e(k,nZe),e(k,qn),e(qn,ate),e(ate,sZe),e(qn,lZe),e(qn,KS),e(KS,iZe),e(qn,dZe),e(qn,ZS),e(ZS,cZe),e(qn,mZe),e(k,fZe),e(k,Nn),e(Nn,nte),e(nte,gZe),e(Nn,hZe),e(Nn,eR),e(eR,uZe),e(Nn,pZe),e(Nn,oR),e(oR,_Ze),e(Nn,bZe),e(k,vZe),e(k,yg),e(yg,ste),e(ste,FZe),e(yg,TZe),e(yg,rR),e(rR,MZe),e(yg,EZe),e(k,CZe),e(k,Lg),e(Lg,lte),e(lte,wZe),e(Lg,AZe),e(Lg,tR),e(tR,yZe),e(Lg,LZe),e(k,xZe),e(k,jn),e(jn,ite),e(ite,$Ze),e(jn,kZe),e(jn,aR),e(aR,SZe),e(jn,RZe),e(jn,nR),e(nR,PZe),e(jn,BZe),e(k,IZe),e(k,xg),e(xg,dte),e(dte,qZe),e(xg,NZe),e(xg,sR),e(sR,jZe),e(xg,DZe),e(k,GZe),e(k,Dn),e(Dn,cte),e(cte,OZe),e(Dn,VZe),e(Dn,lR),e(lR,XZe),e(Dn,zZe),e(Dn,iR),e(iR,WZe),e(Dn,QZe),e(k,HZe),e(k,Gn),e(Gn,mte),e(mte,UZe),e(Gn,JZe),e(Gn,dR),e(dR,YZe),e(Gn,KZe),e(Gn,cR),e(cR,ZZe),e(Gn,eeo),e(k,oeo),e(k,On),e(On,fte),e(fte,reo),e(On,teo),e(On,mR),e(mR,aeo),e(On,neo),e(On,fR),e(fR,seo),e(On,leo),e(k,ieo),e(k,$g),e($g,gte),e(gte,deo),e($g,ceo),e($g,gR),e(gR,meo),e($g,feo),e(k,geo),e(k,Vn),e(Vn,hte),e(hte,heo),e(Vn,ueo),e(Vn,hR),e(hR,peo),e(Vn,_eo),e(Vn,uR),e(uR,beo),e(Vn,veo),e(k,Feo),e(k,Xn),e(Xn,ute),e(ute,Teo),e(Xn,Meo),e(Xn,pR),e(pR,Eeo),e(Xn,Ceo),e(Xn,_R),e(_R,weo),e(Xn,Aeo),e(k,yeo),e(k,zn),e(zn,pte),e(pte,Leo),e(zn,xeo),e(zn,bR),e(bR,$eo),e(zn,keo),e(zn,vR),e(vR,Seo),e(zn,Reo),e(k,Peo),e(k,Wn),e(Wn,_te),e(_te,Beo),e(Wn,Ieo),e(Wn,FR),e(FR,qeo),e(Wn,Neo),e(Wn,TR),e(TR,jeo),e(Wn,Deo),e(k,Geo),e(k,Qn),e(Qn,bte),e(bte,Oeo),e(Qn,Veo),e(Qn,MR),e(MR,Xeo),e(Qn,zeo),e(Qn,ER),e(ER,Weo),e(Qn,Qeo),e(k,Heo),e(k,Hn),e(Hn,vte),e(vte,Ueo),e(Hn,Jeo),e(Hn,CR),e(CR,Yeo),e(Hn,Keo),e(Hn,wR),e(wR,Zeo),e(Hn,eoo),e(k,ooo),e(k,kg),e(kg,Fte),e(Fte,roo),e(kg,too),e(kg,AR),e(AR,aoo),e(kg,noo),e(k,soo),e(k,Un),e(Un,Tte),e(Tte,loo),e(Un,ioo),e(Un,yR),e(yR,doo),e(Un,coo),e(Un,LR),e(LR,moo),e(Un,foo),e(k,goo),e(k,Sg),e(Sg,Mte),e(Mte,hoo),e(Sg,uoo),e(Sg,xR),e(xR,poo),e(Sg,_oo),e(k,boo),e(k,Jn),e(Jn,Ete),e(Ete,voo),e(Jn,Foo),e(Jn,$R),e($R,Too),e(Jn,Moo),e(Jn,kR),e(kR,Eoo),e(Jn,Coo),e(k,woo),e(k,Yn),e(Yn,Cte),e(Cte,Aoo),e(Yn,yoo),e(Yn,SR),e(SR,Loo),e(Yn,xoo),e(Yn,RR),e(RR,$oo),e(Yn,koo),e(k,Soo),e(k,Kn),e(Kn,wte),e(wte,Roo),e(Kn,Poo),e(Kn,PR),e(PR,Boo),e(Kn,Ioo),e(Kn,BR),e(BR,qoo),e(Kn,Noo),e(k,joo),e(k,Zn),e(Zn,Ate),e(Ate,Doo),e(Zn,Goo),e(Zn,IR),e(IR,Ooo),e(Zn,Voo),e(Zn,qR),e(qR,Xoo),e(Zn,zoo),e(k,Woo),e(k,es),e(es,yte),e(yte,Qoo),e(es,Hoo),e(es,NR),e(NR,Uoo),e(es,Joo),e(es,jR),e(jR,Yoo),e(es,Koo),e(k,Zoo),e(k,Rg),e(Rg,Lte),e(Lte,ero),e(Rg,oro),e(Rg,DR),e(DR,rro),e(Rg,tro),e(k,aro),e(k,os),e(os,xte),e(xte,nro),e(os,sro),e(os,GR),e(GR,lro),e(os,iro),e(os,OR),e(OR,dro),e(os,cro),e(k,mro),e(k,rs),e(rs,$te),e($te,fro),e(rs,gro),e(rs,VR),e(VR,hro),e(rs,uro),e(rs,XR),e(XR,pro),e(rs,_ro),e(k,bro),e(k,ts),e(ts,kte),e(kte,vro),e(ts,Fro),e(ts,zR),e(zR,Tro),e(ts,Mro),e(ts,WR),e(WR,Ero),e(ts,Cro),e(k,wro),e(k,as),e(as,Ste),e(Ste,Aro),e(as,yro),e(as,QR),e(QR,Lro),e(as,xro),e(as,HR),e(HR,$ro),e(as,kro),e(k,Sro),e(k,ns),e(ns,Rte),e(Rte,Rro),e(ns,Pro),e(ns,UR),e(UR,Bro),e(ns,Iro),e(ns,JR),e(JR,qro),e(ns,Nro),e(k,jro),e(k,ss),e(ss,Pte),e(Pte,Dro),e(ss,Gro),e(ss,YR),e(YR,Oro),e(ss,Vro),e(ss,KR),e(KR,Xro),e(ss,zro),e(k,Wro),e(k,Pg),e(Pg,Bte),e(Bte,Qro),e(Pg,Hro),e(Pg,ZR),e(ZR,Uro),e(Pg,Jro),e(k,Yro),e(k,ls),e(ls,Ite),e(Ite,Kro),e(ls,Zro),e(ls,eP),e(eP,eto),e(ls,oto),e(ls,oP),e(oP,rto),e(ls,tto),e(k,ato),e(k,Bg),e(Bg,qte),e(qte,nto),e(Bg,sto),e(Bg,rP),e(rP,lto),e(Bg,ito),e(k,dto),e(k,Ig),e(Ig,Nte),e(Nte,cto),e(Ig,mto),e(Ig,tP),e(tP,fto),e(Ig,gto),e(k,hto),e(k,is),e(is,jte),e(jte,uto),e(is,pto),e(is,aP),e(aP,_to),e(is,bto),e(is,nP),e(nP,vto),e(is,Fto),e(k,Tto),e(k,ds),e(ds,Dte),e(Dte,Mto),e(ds,Eto),e(ds,sP),e(sP,Cto),e(ds,wto),e(ds,lP),e(lP,Ato),e(ds,yto),e(k,Lto),e(k,cs),e(cs,Gte),e(Gte,xto),e(cs,$to),e(cs,iP),e(iP,kto),e(cs,Sto),e(cs,dP),e(dP,Rto),e(cs,Pto),e(k,Bto),e(k,qg),e(qg,Ote),e(Ote,Ito),e(qg,qto),e(qg,cP),e(cP,Nto),e(qg,jto),e(k,Dto),e(k,ms),e(ms,Vte),e(Vte,Gto),e(ms,Oto),e(ms,mP),e(mP,Vto),e(ms,Xto),e(ms,fP),e(fP,zto),e(ms,Wto),e(k,Qto),e(k,fs),e(fs,Xte),e(Xte,Hto),e(fs,Uto),e(fs,gP),e(gP,Jto),e(fs,Yto),e(fs,hP),e(hP,Kto),e(fs,Zto),e(k,eao),e(k,gs),e(gs,zte),e(zte,oao),e(gs,rao),e(gs,uP),e(uP,tao),e(gs,aao),e(gs,pP),e(pP,nao),e(gs,sao),e(k,lao),e(k,hs),e(hs,Wte),e(Wte,iao),e(hs,dao),e(hs,_P),e(_P,cao),e(hs,mao),e(hs,bP),e(bP,fao),e(hs,gao),e(k,hao),e(k,us),e(us,Qte),e(Qte,uao),e(us,pao),e(us,vP),e(vP,_ao),e(us,bao),e(us,FP),e(FP,vao),e(us,Fao),e(k,Tao),e(k,Ng),e(Ng,Hte),e(Hte,Mao),e(Ng,Eao),e(Ng,TP),e(TP,Cao),e(Ng,wao),e(k,Aao),e(k,ps),e(ps,Ute),e(Ute,yao),e(ps,Lao),e(ps,MP),e(MP,xao),e(ps,$ao),e(ps,EP),e(EP,kao),e(ps,Sao),e(k,Rao),e(k,jg),e(jg,Jte),e(Jte,Pao),e(jg,Bao),e(jg,CP),e(CP,Iao),e(jg,qao),e(k,Nao),e(k,Dg),e(Dg,Yte),e(Yte,jao),e(Dg,Dao),e(Dg,wP),e(wP,Gao),e(Dg,Oao),e(k,Vao),e(k,Gg),e(Gg,Kte),e(Kte,Xao),e(Gg,zao),e(Gg,AP),e(AP,Wao),e(Gg,Qao),e(k,Hao),e(k,Og),e(Og,Zte),e(Zte,Uao),e(Og,Jao),e(Og,yP),e(yP,Yao),e(Og,Kao),e(k,Zao),e(k,_s),e(_s,eae),e(eae,eno),e(_s,ono),e(_s,LP),e(LP,rno),e(_s,tno),e(_s,xP),e(xP,ano),e(_s,nno),e(k,sno),e(k,Vg),e(Vg,oae),e(oae,lno),e(Vg,ino),e(Vg,$P),e($P,dno),e(Vg,cno),e(k,mno),e(k,bs),e(bs,rae),e(rae,fno),e(bs,gno),e(bs,kP),e(kP,hno),e(bs,uno),e(bs,SP),e(SP,pno),e(bs,_no),e(k,bno),e(k,vs),e(vs,tae),e(tae,vno),e(vs,Fno),e(vs,RP),e(RP,Tno),e(vs,Mno),e(vs,PP),e(PP,Eno),e(vs,Cno),e(k,wno),e(k,Fs),e(Fs,aae),e(aae,Ano),e(Fs,yno),e(Fs,BP),e(BP,Lno),e(Fs,xno),e(Fs,IP),e(IP,$no),e(Fs,kno),e(k,Sno),e(k,Ts),e(Ts,nae),e(nae,Rno),e(Ts,Pno),e(Ts,qP),e(qP,Bno),e(Ts,Ino),e(Ts,NP),e(NP,qno),e(Ts,Nno),e(k,jno),e(k,Ms),e(Ms,sae),e(sae,Dno),e(Ms,Gno),e(Ms,jP),e(jP,Ono),e(Ms,Vno),e(Ms,DP),e(DP,Xno),e(Ms,zno),e(k,Wno),e(k,Es),e(Es,lae),e(lae,Qno),e(Es,Hno),e(Es,GP),e(GP,Uno),e(Es,Jno),e(Es,OP),e(OP,Yno),e(Es,Kno),e(k,Zno),e(k,Xg),e(Xg,iae),e(iae,eso),e(Xg,oso),e(Xg,VP),e(VP,rso),e(Xg,tso),e(k,aso),e(k,zg),e(zg,dae),e(dae,nso),e(zg,sso),e(zg,XP),e(XP,lso),e(zg,iso),e(k,dso),e(k,Cs),e(Cs,cae),e(cae,cso),e(Cs,mso),e(Cs,zP),e(zP,fso),e(Cs,gso),e(Cs,WP),e(WP,hso),e(Cs,uso),e(k,pso),e(k,ws),e(ws,mae),e(mae,_so),e(ws,bso),e(ws,QP),e(QP,vso),e(ws,Fso),e(ws,HP),e(HP,Tso),e(ws,Mso),e(k,Eso),e(k,As),e(As,fae),e(fae,Cso),e(As,wso),e(As,UP),e(UP,Aso),e(As,yso),e(As,JP),e(JP,Lso),e(As,xso),e(k,$so),e(k,Wg),e(Wg,gae),e(gae,kso),e(Wg,Sso),e(Wg,YP),e(YP,Rso),e(Wg,Pso),e(k,Bso),e(k,Qg),e(Qg,hae),e(hae,Iso),e(Qg,qso),e(Qg,KP),e(KP,Nso),e(Qg,jso),e(k,Dso),e(k,Hg),e(Hg,uae),e(uae,Gso),e(Hg,Oso),e(Hg,ZP),e(ZP,Vso),e(Hg,Xso),e(k,zso),e(k,ys),e(ys,pae),e(pae,Wso),e(ys,Qso),e(ys,eB),e(eB,Hso),e(ys,Uso),e(ys,oB),e(oB,Jso),e(ys,Yso),e(k,Kso),e(k,Ug),e(Ug,_ae),e(_ae,Zso),e(Ug,elo),e(Ug,rB),e(rB,olo),e(Ug,rlo),e(k,tlo),e(k,Jg),e(Jg,bae),e(bae,alo),e(Jg,nlo),e(Jg,tB),e(tB,slo),e(Jg,llo),e(k,ilo),e(k,Yg),e(Yg,vae),e(vae,dlo),e(Yg,clo),e(Yg,aB),e(aB,mlo),e(Yg,flo),e(k,glo),e(k,Ls),e(Ls,Fae),e(Fae,hlo),e(Ls,ulo),e(Ls,nB),e(nB,plo),e(Ls,_lo),e(Ls,sB),e(sB,blo),e(Ls,vlo),e(k,Flo),e(k,Kg),e(Kg,Tae),e(Tae,Tlo),e(Kg,Mlo),e(Kg,lB),e(lB,Elo),e(Kg,Clo),e(k,wlo),e(k,Zg),e(Zg,Mae),e(Mae,Alo),e(Zg,ylo),e(Zg,iB),e(iB,Llo),e(Zg,xlo),e(k,$lo),e(k,xs),e(xs,Eae),e(Eae,klo),e(xs,Slo),e(xs,dB),e(dB,Rlo),e(xs,Plo),e(xs,cB),e(cB,Blo),e(xs,Ilo),e(k,qlo),e(k,$s),e($s,Cae),e(Cae,Nlo),e($s,jlo),e($s,mB),e(mB,Dlo),e($s,Glo),e($s,fB),e(fB,Olo),e($s,Vlo),e(k,Xlo),e(k,ks),e(ks,wae),e(wae,zlo),e(ks,Wlo),e(ks,gB),e(gB,Qlo),e(ks,Hlo),e(ks,hB),e(hB,Ulo),e(ks,Jlo),e(k,Ylo),e(k,Ss),e(Ss,Aae),e(Aae,Klo),e(Ss,Zlo),e(Ss,uB),e(uB,eio),e(Ss,oio),e(Ss,pB),e(pB,rio),e(Ss,tio),e(Cr,aio),M(eh,Cr,null),e(wo,nio),e(wo,oh),M(yy,oh,null),e(oh,sio),e(oh,yae),e(yae,lio),b(m,iqe,_),b(m,Ti,_),e(Ti,rh),e(rh,Lae),M(Ly,Lae,null),e(Ti,iio),e(Ti,xae),e(xae,dio),b(m,dqe,_),b(m,Ao,_),M(xy,Ao,null),e(Ao,cio),e(Ao,$y),e($y,mio),e($y,_B),e(_B,fio),e($y,gio),e(Ao,hio),e(Ao,ky),e(ky,uio),e(ky,$ae),e($ae,pio),e(ky,_io),e(Ao,bio),e(Ao,He),M(Sy,He,null),e(He,vio),e(He,kae),e(kae,Fio),e(He,Tio),e(He,ya),e(ya,Mio),e(ya,Sae),e(Sae,Eio),e(ya,Cio),e(ya,Rae),e(Rae,wio),e(ya,Aio),e(ya,Pae),e(Pae,yio),e(ya,Lio),e(He,xio),e(He,Z),e(Z,th),e(th,Bae),e(Bae,$io),e(th,kio),e(th,bB),e(bB,Sio),e(th,Rio),e(Z,Pio),e(Z,ah),e(ah,Iae),e(Iae,Bio),e(ah,Iio),e(ah,vB),e(vB,qio),e(ah,Nio),e(Z,jio),e(Z,nh),e(nh,qae),e(qae,Dio),e(nh,Gio),e(nh,FB),e(FB,Oio),e(nh,Vio),e(Z,Xio),e(Z,sh),e(sh,Nae),e(Nae,zio),e(sh,Wio),e(sh,TB),e(TB,Qio),e(sh,Hio),e(Z,Uio),e(Z,lh),e(lh,jae),e(jae,Jio),e(lh,Yio),e(lh,MB),e(MB,Kio),e(lh,Zio),e(Z,edo),e(Z,ih),e(ih,Dae),e(Dae,odo),e(ih,rdo),e(ih,EB),e(EB,tdo),e(ih,ado),e(Z,ndo),e(Z,dh),e(dh,Gae),e(Gae,sdo),e(dh,ldo),e(dh,CB),e(CB,ido),e(dh,ddo),e(Z,cdo),e(Z,ch),e(ch,Oae),e(Oae,mdo),e(ch,fdo),e(ch,wB),e(wB,gdo),e(ch,hdo),e(Z,udo),e(Z,mh),e(mh,Vae),e(Vae,pdo),e(mh,_do),e(mh,AB),e(AB,bdo),e(mh,vdo),e(Z,Fdo),e(Z,fh),e(fh,Xae),e(Xae,Tdo),e(fh,Mdo),e(fh,yB),e(yB,Edo),e(fh,Cdo),e(Z,wdo),e(Z,gh),e(gh,zae),e(zae,Ado),e(gh,ydo),e(gh,LB),e(LB,Ldo),e(gh,xdo),e(Z,$do),e(Z,hh),e(hh,Wae),e(Wae,kdo),e(hh,Sdo),e(hh,xB),e(xB,Rdo),e(hh,Pdo),e(Z,Bdo),e(Z,uh),e(uh,Qae),e(Qae,Ido),e(uh,qdo),e(uh,$B),e($B,Ndo),e(uh,jdo),e(Z,Ddo),e(Z,ph),e(ph,Hae),e(Hae,Gdo),e(ph,Odo),e(ph,kB),e(kB,Vdo),e(ph,Xdo),e(Z,zdo),e(Z,_h),e(_h,Uae),e(Uae,Wdo),e(_h,Qdo),e(_h,SB),e(SB,Hdo),e(_h,Udo),e(Z,Jdo),e(Z,bh),e(bh,Jae),e(Jae,Ydo),e(bh,Kdo),e(bh,RB),e(RB,Zdo),e(bh,eco),e(Z,oco),e(Z,vh),e(vh,Yae),e(Yae,rco),e(vh,tco),e(vh,PB),e(PB,aco),e(vh,nco),e(Z,sco),e(Z,Fh),e(Fh,Kae),e(Kae,lco),e(Fh,ico),e(Fh,BB),e(BB,dco),e(Fh,cco),e(Z,mco),e(Z,Th),e(Th,Zae),e(Zae,fco),e(Th,gco),e(Th,IB),e(IB,hco),e(Th,uco),e(Z,pco),e(Z,Mh),e(Mh,ene),e(ene,_co),e(Mh,bco),e(Mh,qB),e(qB,vco),e(Mh,Fco),e(Z,Tco),e(Z,Eh),e(Eh,one),e(one,Mco),e(Eh,Eco),e(Eh,NB),e(NB,Cco),e(Eh,wco),e(Z,Aco),e(Z,Ch),e(Ch,rne),e(rne,yco),e(Ch,Lco),e(Ch,jB),e(jB,xco),e(Ch,$co),e(Z,kco),e(Z,wh),e(wh,tne),e(tne,Sco),e(wh,Rco),e(wh,DB),e(DB,Pco),e(wh,Bco),e(Z,Ico),e(Z,Ah),e(Ah,ane),e(ane,qco),e(Ah,Nco),e(Ah,GB),e(GB,jco),e(Ah,Dco),e(Z,Gco),e(Z,yh),e(yh,nne),e(nne,Oco),e(yh,Vco),e(yh,OB),e(OB,Xco),e(yh,zco),e(Z,Wco),e(Z,Lh),e(Lh,sne),e(sne,Qco),e(Lh,Hco),e(Lh,VB),e(VB,Uco),e(Lh,Jco),e(Z,Yco),e(Z,xh),e(xh,lne),e(lne,Kco),e(xh,Zco),e(xh,XB),e(XB,emo),e(xh,omo),e(He,rmo),M($h,He,null),e(He,tmo),M(kh,He,null),e(Ao,amo),e(Ao,Sh),M(Ry,Sh,null),e(Sh,nmo),e(Sh,ine),e(ine,smo),b(m,cqe,_),b(m,Mi,_),e(Mi,Rh),e(Rh,dne),M(Py,dne,null),e(Mi,lmo),e(Mi,cne),e(cne,imo),b(m,mqe,_),b(m,yo,_),M(By,yo,null),e(yo,dmo),e(yo,Iy),e(Iy,cmo),e(Iy,zB),e(zB,mmo),e(Iy,fmo),e(yo,gmo),e(yo,qy),e(qy,hmo),e(qy,mne),e(mne,umo),e(qy,pmo),e(yo,_mo),e(yo,Ue),M(Ny,Ue,null),e(Ue,bmo),e(Ue,fne),e(fne,vmo),e(Ue,Fmo),e(Ue,Ei),e(Ei,Tmo),e(Ei,gne),e(gne,Mmo),e(Ei,Emo),e(Ei,hne),e(hne,Cmo),e(Ei,wmo),e(Ue,Amo),e(Ue,ue),e(ue,Ph),e(Ph,une),e(une,ymo),e(Ph,Lmo),e(Ph,WB),e(WB,xmo),e(Ph,$mo),e(ue,kmo),e(ue,Bh),e(Bh,pne),e(pne,Smo),e(Bh,Rmo),e(Bh,_ne),e(_ne,Pmo),e(Bh,Bmo),e(ue,Imo),e(ue,Ih),e(Ih,bne),e(bne,qmo),e(Ih,Nmo),e(Ih,QB),e(QB,jmo),e(Ih,Dmo),e(ue,Gmo),e(ue,qh),e(qh,vne),e(vne,Omo),e(qh,Vmo),e(qh,HB),e(HB,Xmo),e(qh,zmo),e(ue,Wmo),e(ue,Nh),e(Nh,Fne),e(Fne,Qmo),e(Nh,Hmo),e(Nh,UB),e(UB,Umo),e(Nh,Jmo),e(ue,Ymo),e(ue,jh),e(jh,Tne),e(Tne,Kmo),e(jh,Zmo),e(jh,JB),e(JB,efo),e(jh,ofo),e(ue,rfo),e(ue,Dh),e(Dh,Mne),e(Mne,tfo),e(Dh,afo),e(Dh,YB),e(YB,nfo),e(Dh,sfo),e(ue,lfo),e(ue,Gh),e(Gh,Ene),e(Ene,ifo),e(Gh,dfo),e(Gh,KB),e(KB,cfo),e(Gh,mfo),e(ue,ffo),e(ue,Oh),e(Oh,Cne),e(Cne,gfo),e(Oh,hfo),e(Oh,ZB),e(ZB,ufo),e(Oh,pfo),e(ue,_fo),e(ue,Vh),e(Vh,wne),e(wne,bfo),e(Vh,vfo),e(Vh,eI),e(eI,Ffo),e(Vh,Tfo),e(ue,Mfo),e(ue,Xh),e(Xh,Ane),e(Ane,Efo),e(Xh,Cfo),e(Xh,oI),e(oI,wfo),e(Xh,Afo),e(ue,yfo),e(ue,zh),e(zh,yne),e(yne,Lfo),e(zh,xfo),e(zh,rI),e(rI,$fo),e(zh,kfo),e(ue,Sfo),e(ue,Wh),e(Wh,Lne),e(Lne,Rfo),e(Wh,Pfo),e(Wh,tI),e(tI,Bfo),e(Wh,Ifo),e(ue,qfo),e(ue,Qh),e(Qh,xne),e(xne,Nfo),e(Qh,jfo),e(Qh,aI),e(aI,Dfo),e(Qh,Gfo),e(ue,Ofo),e(ue,Hh),e(Hh,$ne),e($ne,Vfo),e(Hh,Xfo),e(Hh,nI),e(nI,zfo),e(Hh,Wfo),e(ue,Qfo),e(ue,Uh),e(Uh,kne),e(kne,Hfo),e(Uh,Ufo),e(Uh,sI),e(sI,Jfo),e(Uh,Yfo),e(Ue,Kfo),M(Jh,Ue,null),e(Ue,Zfo),M(Yh,Ue,null),e(yo,ego),e(yo,Kh),M(jy,Kh,null),e(Kh,ogo),e(Kh,Sne),e(Sne,rgo),b(m,fqe,_),b(m,Ci,_),e(Ci,Zh),e(Zh,Rne),M(Dy,Rne,null),e(Ci,tgo),e(Ci,Pne),e(Pne,ago),b(m,gqe,_),b(m,Lo,_),M(Gy,Lo,null),e(Lo,ngo),e(Lo,wi),e(wi,sgo),e(wi,lI),e(lI,lgo),e(wi,igo),e(wi,iI),e(iI,dgo),e(wi,cgo),e(Lo,mgo),e(Lo,Oy),e(Oy,fgo),e(Oy,Bne),e(Bne,ggo),e(Oy,hgo),e(Lo,ugo),e(Lo,tt),M(Vy,tt,null),e(tt,pgo),e(tt,Ine),e(Ine,_go),e(tt,bgo),e(tt,Ai),e(Ai,vgo),e(Ai,qne),e(qne,Fgo),e(Ai,Tgo),e(Ai,dI),e(dI,Mgo),e(Ai,Ego),e(tt,Cgo),M(eu,tt,null),e(Lo,wgo),e(Lo,Je),M(Xy,Je,null),e(Je,Ago),e(Je,Nne),e(Nne,ygo),e(Je,Lgo),e(Je,La),e(La,xgo),e(La,jne),e(jne,$go),e(La,kgo),e(La,Dne),e(Dne,Sgo),e(La,Rgo),e(La,Gne),e(Gne,Pgo),e(La,Bgo),e(Je,Igo),e(Je,x),e(x,ou),e(ou,One),e(One,qgo),e(ou,Ngo),e(ou,cI),e(cI,jgo),e(ou,Dgo),e(x,Ggo),e(x,ru),e(ru,Vne),e(Vne,Ogo),e(ru,Vgo),e(ru,mI),e(mI,Xgo),e(ru,zgo),e(x,Wgo),e(x,tu),e(tu,Xne),e(Xne,Qgo),e(tu,Hgo),e(tu,fI),e(fI,Ugo),e(tu,Jgo),e(x,Ygo),e(x,au),e(au,zne),e(zne,Kgo),e(au,Zgo),e(au,gI),e(gI,eho),e(au,oho),e(x,rho),e(x,nu),e(nu,Wne),e(Wne,tho),e(nu,aho),e(nu,hI),e(hI,nho),e(nu,sho),e(x,lho),e(x,su),e(su,Qne),e(Qne,iho),e(su,dho),e(su,uI),e(uI,cho),e(su,mho),e(x,fho),e(x,lu),e(lu,Hne),e(Hne,gho),e(lu,hho),e(lu,pI),e(pI,uho),e(lu,pho),e(x,_ho),e(x,iu),e(iu,Une),e(Une,bho),e(iu,vho),e(iu,_I),e(_I,Fho),e(iu,Tho),e(x,Mho),e(x,du),e(du,Jne),e(Jne,Eho),e(du,Cho),e(du,bI),e(bI,who),e(du,Aho),e(x,yho),e(x,cu),e(cu,Yne),e(Yne,Lho),e(cu,xho),e(cu,vI),e(vI,$ho),e(cu,kho),e(x,Sho),e(x,mu),e(mu,Kne),e(Kne,Rho),e(mu,Pho),e(mu,FI),e(FI,Bho),e(mu,Iho),e(x,qho),e(x,fu),e(fu,Zne),e(Zne,Nho),e(fu,jho),e(fu,TI),e(TI,Dho),e(fu,Gho),e(x,Oho),e(x,gu),e(gu,ese),e(ese,Vho),e(gu,Xho),e(gu,MI),e(MI,zho),e(gu,Who),e(x,Qho),e(x,hu),e(hu,ose),e(ose,Hho),e(hu,Uho),e(hu,EI),e(EI,Jho),e(hu,Yho),e(x,Kho),e(x,uu),e(uu,rse),e(rse,Zho),e(uu,euo),e(uu,CI),e(CI,ouo),e(uu,ruo),e(x,tuo),e(x,pu),e(pu,tse),e(tse,auo),e(pu,nuo),e(pu,wI),e(wI,suo),e(pu,luo),e(x,iuo),e(x,_u),e(_u,ase),e(ase,duo),e(_u,cuo),e(_u,AI),e(AI,muo),e(_u,fuo),e(x,guo),e(x,bu),e(bu,nse),e(nse,huo),e(bu,uuo),e(bu,yI),e(yI,puo),e(bu,_uo),e(x,buo),e(x,vu),e(vu,sse),e(sse,vuo),e(vu,Fuo),e(vu,LI),e(LI,Tuo),e(vu,Muo),e(x,Euo),e(x,Fu),e(Fu,lse),e(lse,Cuo),e(Fu,wuo),e(Fu,xI),e(xI,Auo),e(Fu,yuo),e(x,Luo),e(x,Tu),e(Tu,ise),e(ise,xuo),e(Tu,$uo),e(Tu,$I),e($I,kuo),e(Tu,Suo),e(x,Ruo),e(x,Mu),e(Mu,dse),e(dse,Puo),e(Mu,Buo),e(Mu,kI),e(kI,Iuo),e(Mu,quo),e(x,Nuo),e(x,Eu),e(Eu,cse),e(cse,juo),e(Eu,Duo),e(Eu,SI),e(SI,Guo),e(Eu,Ouo),e(x,Vuo),e(x,Cu),e(Cu,mse),e(mse,Xuo),e(Cu,zuo),e(Cu,RI),e(RI,Wuo),e(Cu,Quo),e(x,Huo),e(x,wu),e(wu,fse),e(fse,Uuo),e(wu,Juo),e(wu,PI),e(PI,Yuo),e(wu,Kuo),e(x,Zuo),e(x,Au),e(Au,gse),e(gse,epo),e(Au,opo),e(Au,BI),e(BI,rpo),e(Au,tpo),e(x,apo),e(x,yu),e(yu,hse),e(hse,npo),e(yu,spo),e(yu,II),e(II,lpo),e(yu,ipo),e(x,dpo),e(x,Lu),e(Lu,use),e(use,cpo),e(Lu,mpo),e(Lu,qI),e(qI,fpo),e(Lu,gpo),e(x,hpo),e(x,xu),e(xu,pse),e(pse,upo),e(xu,ppo),e(xu,NI),e(NI,_po),e(xu,bpo),e(x,vpo),e(x,$u),e($u,_se),e(_se,Fpo),e($u,Tpo),e($u,jI),e(jI,Mpo),e($u,Epo),e(x,Cpo),e(x,ku),e(ku,bse),e(bse,wpo),e(ku,Apo),e(ku,DI),e(DI,ypo),e(ku,Lpo),e(x,xpo),e(x,Su),e(Su,vse),e(vse,$po),e(Su,kpo),e(Su,GI),e(GI,Spo),e(Su,Rpo),e(x,Ppo),e(x,Rs),e(Rs,Fse),e(Fse,Bpo),e(Rs,Ipo),e(Rs,OI),e(OI,qpo),e(Rs,Npo),e(Rs,VI),e(VI,jpo),e(Rs,Dpo),e(x,Gpo),e(x,Ru),e(Ru,Tse),e(Tse,Opo),e(Ru,Vpo),e(Ru,XI),e(XI,Xpo),e(Ru,zpo),e(x,Wpo),e(x,Pu),e(Pu,Mse),e(Mse,Qpo),e(Pu,Hpo),e(Pu,zI),e(zI,Upo),e(Pu,Jpo),e(x,Ypo),e(x,Bu),e(Bu,Ese),e(Ese,Kpo),e(Bu,Zpo),e(Bu,WI),e(WI,e_o),e(Bu,o_o),e(x,r_o),e(x,Iu),e(Iu,Cse),e(Cse,t_o),e(Iu,a_o),e(Iu,QI),e(QI,n_o),e(Iu,s_o),e(x,l_o),e(x,qu),e(qu,wse),e(wse,i_o),e(qu,d_o),e(qu,HI),e(HI,c_o),e(qu,m_o),e(x,f_o),e(x,Nu),e(Nu,Ase),e(Ase,g_o),e(Nu,h_o),e(Nu,UI),e(UI,u_o),e(Nu,p_o),e(x,__o),e(x,ju),e(ju,yse),e(yse,b_o),e(ju,v_o),e(ju,JI),e(JI,F_o),e(ju,T_o),e(x,M_o),e(x,Du),e(Du,Lse),e(Lse,E_o),e(Du,C_o),e(Du,YI),e(YI,w_o),e(Du,A_o),e(x,y_o),e(x,Gu),e(Gu,xse),e(xse,L_o),e(Gu,x_o),e(Gu,KI),e(KI,$_o),e(Gu,k_o),e(x,S_o),e(x,Ou),e(Ou,$se),e($se,R_o),e(Ou,P_o),e(Ou,ZI),e(ZI,B_o),e(Ou,I_o),e(x,q_o),e(x,Vu),e(Vu,kse),e(kse,N_o),e(Vu,j_o),e(Vu,eq),e(eq,D_o),e(Vu,G_o),e(x,O_o),e(x,Xu),e(Xu,Sse),e(Sse,V_o),e(Xu,X_o),e(Xu,oq),e(oq,z_o),e(Xu,W_o),e(x,Q_o),e(x,zu),e(zu,Rse),e(Rse,H_o),e(zu,U_o),e(zu,rq),e(rq,J_o),e(zu,Y_o),e(x,K_o),e(x,Wu),e(Wu,Pse),e(Pse,Z_o),e(Wu,ebo),e(Wu,tq),e(tq,obo),e(Wu,rbo),e(x,tbo),e(x,Qu),e(Qu,Bse),e(Bse,abo),e(Qu,nbo),e(Qu,aq),e(aq,sbo),e(Qu,lbo),e(x,ibo),e(x,Hu),e(Hu,Ise),e(Ise,dbo),e(Hu,cbo),e(Hu,nq),e(nq,mbo),e(Hu,fbo),e(x,gbo),e(x,Uu),e(Uu,qse),e(qse,hbo),e(Uu,ubo),e(Uu,sq),e(sq,pbo),e(Uu,_bo),e(x,bbo),e(x,Ju),e(Ju,Nse),e(Nse,vbo),e(Ju,Fbo),e(Ju,lq),e(lq,Tbo),e(Ju,Mbo),e(x,Ebo),e(x,Yu),e(Yu,jse),e(jse,Cbo),e(Yu,wbo),e(Yu,iq),e(iq,Abo),e(Yu,ybo),e(x,Lbo),e(x,Ku),e(Ku,Dse),e(Dse,xbo),e(Ku,$bo),e(Ku,dq),e(dq,kbo),e(Ku,Sbo),e(x,Rbo),e(x,Zu),e(Zu,Gse),e(Gse,Pbo),e(Zu,Bbo),e(Zu,cq),e(cq,Ibo),e(Zu,qbo),e(x,Nbo),e(x,ep),e(ep,Ose),e(Ose,jbo),e(ep,Dbo),e(ep,mq),e(mq,Gbo),e(ep,Obo),e(x,Vbo),e(x,op),e(op,Vse),e(Vse,Xbo),e(op,zbo),e(op,fq),e(fq,Wbo),e(op,Qbo),e(x,Hbo),e(x,rp),e(rp,Xse),e(Xse,Ubo),e(rp,Jbo),e(rp,gq),e(gq,Ybo),e(rp,Kbo),e(x,Zbo),e(x,tp),e(tp,zse),e(zse,e2o),e(tp,o2o),e(tp,hq),e(hq,r2o),e(tp,t2o),e(x,a2o),e(x,ap),e(ap,Wse),e(Wse,n2o),e(ap,s2o),e(ap,uq),e(uq,l2o),e(ap,i2o),e(x,d2o),e(x,np),e(np,Qse),e(Qse,c2o),e(np,m2o),e(np,pq),e(pq,f2o),e(np,g2o),e(x,h2o),e(x,sp),e(sp,Hse),e(Hse,u2o),e(sp,p2o),e(sp,_q),e(_q,_2o),e(sp,b2o),e(x,v2o),e(x,lp),e(lp,Use),e(Use,F2o),e(lp,T2o),e(lp,bq),e(bq,M2o),e(lp,E2o),e(x,C2o),e(x,ip),e(ip,Jse),e(Jse,w2o),e(ip,A2o),e(ip,vq),e(vq,y2o),e(ip,L2o),e(x,x2o),e(x,dp),e(dp,Yse),e(Yse,$2o),e(dp,k2o),e(dp,Fq),e(Fq,S2o),e(dp,R2o),e(x,P2o),e(x,cp),e(cp,Kse),e(Kse,B2o),e(cp,I2o),e(cp,Tq),e(Tq,q2o),e(cp,N2o),e(x,j2o),e(x,mp),e(mp,Zse),e(Zse,D2o),e(mp,G2o),e(mp,Mq),e(Mq,O2o),e(mp,V2o),e(x,X2o),e(x,fp),e(fp,ele),e(ele,z2o),e(fp,W2o),e(fp,Eq),e(Eq,Q2o),e(fp,H2o),e(x,U2o),e(x,gp),e(gp,ole),e(ole,J2o),e(gp,Y2o),e(gp,Cq),e(Cq,K2o),e(gp,Z2o),e(x,evo),e(x,hp),e(hp,rle),e(rle,ovo),e(hp,rvo),e(hp,wq),e(wq,tvo),e(hp,avo),e(x,nvo),e(x,up),e(up,tle),e(tle,svo),e(up,lvo),e(up,Aq),e(Aq,ivo),e(up,dvo),e(x,cvo),e(x,pp),e(pp,ale),e(ale,mvo),e(pp,fvo),e(pp,yq),e(yq,gvo),e(pp,hvo),e(x,uvo),e(x,_p),e(_p,nle),e(nle,pvo),e(_p,_vo),e(_p,Lq),e(Lq,bvo),e(_p,vvo),e(x,Fvo),e(x,bp),e(bp,sle),e(sle,Tvo),e(bp,Mvo),e(bp,xq),e(xq,Evo),e(bp,Cvo),e(x,wvo),e(x,vp),e(vp,lle),e(lle,Avo),e(vp,yvo),e(vp,$q),e($q,Lvo),e(vp,xvo),e(x,$vo),e(x,Fp),e(Fp,ile),e(ile,kvo),e(Fp,Svo),e(Fp,kq),e(kq,Rvo),e(Fp,Pvo),e(x,Bvo),e(x,Tp),e(Tp,dle),e(dle,Ivo),e(Tp,qvo),e(Tp,Sq),e(Sq,Nvo),e(Tp,jvo),e(x,Dvo),e(x,Mp),e(Mp,cle),e(cle,Gvo),e(Mp,Ovo),e(Mp,Rq),e(Rq,Vvo),e(Mp,Xvo),e(x,zvo),e(x,Ep),e(Ep,mle),e(mle,Wvo),e(Ep,Qvo),e(Ep,Pq),e(Pq,Hvo),e(Ep,Uvo),e(x,Jvo),e(x,Cp),e(Cp,fle),e(fle,Yvo),e(Cp,Kvo),e(Cp,Bq),e(Bq,Zvo),e(Cp,eFo),e(x,oFo),e(x,wp),e(wp,gle),e(gle,rFo),e(wp,tFo),e(wp,Iq),e(Iq,aFo),e(wp,nFo),e(x,sFo),e(x,Ap),e(Ap,hle),e(hle,lFo),e(Ap,iFo),e(Ap,qq),e(qq,dFo),e(Ap,cFo),e(x,mFo),e(x,yp),e(yp,ule),e(ule,fFo),e(yp,gFo),e(yp,Nq),e(Nq,hFo),e(yp,uFo),e(x,pFo),e(x,Lp),e(Lp,ple),e(ple,_Fo),e(Lp,bFo),e(Lp,jq),e(jq,vFo),e(Lp,FFo),e(x,TFo),e(x,xp),e(xp,_le),e(_le,MFo),e(xp,EFo),e(xp,Dq),e(Dq,CFo),e(xp,wFo),e(x,AFo),e(x,$p),e($p,ble),e(ble,yFo),e($p,LFo),e($p,Gq),e(Gq,xFo),e($p,$Fo),e(x,kFo),e(x,kp),e(kp,vle),e(vle,SFo),e(kp,RFo),e(kp,Oq),e(Oq,PFo),e(kp,BFo),e(x,IFo),e(x,Sp),e(Sp,Fle),e(Fle,qFo),e(Sp,NFo),e(Sp,Vq),e(Vq,jFo),e(Sp,DFo),e(x,GFo),e(x,Rp),e(Rp,Tle),e(Tle,OFo),e(Rp,VFo),e(Rp,Xq),e(Xq,XFo),e(Rp,zFo),e(x,WFo),e(x,Pp),e(Pp,Mle),e(Mle,QFo),e(Pp,HFo),e(Pp,zq),e(zq,UFo),e(Pp,JFo),e(x,YFo),e(x,Bp),e(Bp,Ele),e(Ele,KFo),e(Bp,ZFo),e(Bp,Wq),e(Wq,e1o),e(Bp,o1o),e(x,r1o),e(x,Ip),e(Ip,Cle),e(Cle,t1o),e(Ip,a1o),e(Ip,Qq),e(Qq,n1o),e(Ip,s1o),e(x,l1o),e(x,qp),e(qp,wle),e(wle,i1o),e(qp,d1o),e(qp,Hq),e(Hq,c1o),e(qp,m1o),e(x,f1o),e(x,Np),e(Np,Ale),e(Ale,g1o),e(Np,h1o),e(Np,Uq),e(Uq,u1o),e(Np,p1o),e(x,_1o),e(x,jp),e(jp,yle),e(yle,b1o),e(jp,v1o),e(jp,Jq),e(Jq,F1o),e(jp,T1o),e(x,M1o),e(x,Dp),e(Dp,Lle),e(Lle,E1o),e(Dp,C1o),e(Dp,Yq),e(Yq,w1o),e(Dp,A1o),e(x,y1o),e(x,Gp),e(Gp,xle),e(xle,L1o),e(Gp,x1o),e(Gp,Kq),e(Kq,$1o),e(Gp,k1o),e(x,S1o),e(x,Op),e(Op,$le),e($le,R1o),e(Op,P1o),e(Op,Zq),e(Zq,B1o),e(Op,I1o),e(x,q1o),e(x,Vp),e(Vp,kle),e(kle,N1o),e(Vp,j1o),e(Vp,eN),e(eN,D1o),e(Vp,G1o),e(x,O1o),e(x,Xp),e(Xp,Sle),e(Sle,V1o),e(Xp,X1o),e(Xp,oN),e(oN,z1o),e(Xp,W1o),e(x,Q1o),e(x,zp),e(zp,Rle),e(Rle,H1o),e(zp,U1o),e(zp,rN),e(rN,J1o),e(zp,Y1o),e(Je,K1o),e(Je,Wp),e(Wp,Z1o),e(Wp,Ple),e(Ple,eTo),e(Wp,oTo),e(Wp,Ble),e(Ble,rTo),e(Je,tTo),M(Qp,Je,null),b(m,hqe,_),b(m,yi,_),e(yi,Hp),e(Hp,Ile),M(zy,Ile,null),e(yi,aTo),e(yi,qle),e(qle,nTo),b(m,uqe,_),b(m,xo,_),M(Wy,xo,null),e(xo,sTo),e(xo,Li),e(Li,lTo),e(Li,tN),e(tN,iTo),e(Li,dTo),e(Li,aN),e(aN,cTo),e(Li,mTo),e(xo,fTo),e(xo,Qy),e(Qy,gTo),e(Qy,Nle),e(Nle,hTo),e(Qy,uTo),e(xo,pTo),e(xo,at),M(Hy,at,null),e(at,_To),e(at,jle),e(jle,bTo),e(at,vTo),e(at,xi),e(xi,FTo),e(xi,Dle),e(Dle,TTo),e(xi,MTo),e(xi,nN),e(nN,ETo),e(xi,CTo),e(at,wTo),M(Up,at,null),e(xo,ATo),e(xo,Ye),M(Uy,Ye,null),e(Ye,yTo),e(Ye,Gle),e(Gle,LTo),e(Ye,xTo),e(Ye,xa),e(xa,$To),e(xa,Ole),e(Ole,kTo),e(xa,STo),e(xa,Vle),e(Vle,RTo),e(xa,PTo),e(xa,Xle),e(Xle,BTo),e(xa,ITo),e(Ye,qTo),e(Ye,G),e(G,Jp),e(Jp,zle),e(zle,NTo),e(Jp,jTo),e(Jp,sN),e(sN,DTo),e(Jp,GTo),e(G,OTo),e(G,Yp),e(Yp,Wle),e(Wle,VTo),e(Yp,XTo),e(Yp,lN),e(lN,zTo),e(Yp,WTo),e(G,QTo),e(G,Kp),e(Kp,Qle),e(Qle,HTo),e(Kp,UTo),e(Kp,iN),e(iN,JTo),e(Kp,YTo),e(G,KTo),e(G,Zp),e(Zp,Hle),e(Hle,ZTo),e(Zp,eMo),e(Zp,dN),e(dN,oMo),e(Zp,rMo),e(G,tMo),e(G,e_),e(e_,Ule),e(Ule,aMo),e(e_,nMo),e(e_,cN),e(cN,sMo),e(e_,lMo),e(G,iMo),e(G,o_),e(o_,Jle),e(Jle,dMo),e(o_,cMo),e(o_,mN),e(mN,mMo),e(o_,fMo),e(G,gMo),e(G,r_),e(r_,Yle),e(Yle,hMo),e(r_,uMo),e(r_,fN),e(fN,pMo),e(r_,_Mo),e(G,bMo),e(G,t_),e(t_,Kle),e(Kle,vMo),e(t_,FMo),e(t_,gN),e(gN,TMo),e(t_,MMo),e(G,EMo),e(G,a_),e(a_,Zle),e(Zle,CMo),e(a_,wMo),e(a_,hN),e(hN,AMo),e(a_,yMo),e(G,LMo),e(G,n_),e(n_,eie),e(eie,xMo),e(n_,$Mo),e(n_,uN),e(uN,kMo),e(n_,SMo),e(G,RMo),e(G,s_),e(s_,oie),e(oie,PMo),e(s_,BMo),e(s_,pN),e(pN,IMo),e(s_,qMo),e(G,NMo),e(G,l_),e(l_,rie),e(rie,jMo),e(l_,DMo),e(l_,_N),e(_N,GMo),e(l_,OMo),e(G,VMo),e(G,i_),e(i_,tie),e(tie,XMo),e(i_,zMo),e(i_,bN),e(bN,WMo),e(i_,QMo),e(G,HMo),e(G,d_),e(d_,aie),e(aie,UMo),e(d_,JMo),e(d_,vN),e(vN,YMo),e(d_,KMo),e(G,ZMo),e(G,c_),e(c_,nie),e(nie,e4o),e(c_,o4o),e(c_,FN),e(FN,r4o),e(c_,t4o),e(G,a4o),e(G,m_),e(m_,sie),e(sie,n4o),e(m_,s4o),e(m_,TN),e(TN,l4o),e(m_,i4o),e(G,d4o),e(G,f_),e(f_,lie),e(lie,c4o),e(f_,m4o),e(f_,MN),e(MN,f4o),e(f_,g4o),e(G,h4o),e(G,g_),e(g_,iie),e(iie,u4o),e(g_,p4o),e(g_,EN),e(EN,_4o),e(g_,b4o),e(G,v4o),e(G,h_),e(h_,die),e(die,F4o),e(h_,T4o),e(h_,CN),e(CN,M4o),e(h_,E4o),e(G,C4o),e(G,u_),e(u_,cie),e(cie,w4o),e(u_,A4o),e(u_,wN),e(wN,y4o),e(u_,L4o),e(G,x4o),e(G,p_),e(p_,mie),e(mie,$4o),e(p_,k4o),e(p_,AN),e(AN,S4o),e(p_,R4o),e(G,P4o),e(G,__),e(__,fie),e(fie,B4o),e(__,I4o),e(__,yN),e(yN,q4o),e(__,N4o),e(G,j4o),e(G,b_),e(b_,gie),e(gie,D4o),e(b_,G4o),e(b_,LN),e(LN,O4o),e(b_,V4o),e(G,X4o),e(G,v_),e(v_,hie),e(hie,z4o),e(v_,W4o),e(v_,xN),e(xN,Q4o),e(v_,H4o),e(G,U4o),e(G,F_),e(F_,uie),e(uie,J4o),e(F_,Y4o),e(F_,$N),e($N,K4o),e(F_,Z4o),e(G,eEo),e(G,T_),e(T_,pie),e(pie,oEo),e(T_,rEo),e(T_,kN),e(kN,tEo),e(T_,aEo),e(G,nEo),e(G,M_),e(M_,_ie),e(_ie,sEo),e(M_,lEo),e(M_,SN),e(SN,iEo),e(M_,dEo),e(G,cEo),e(G,E_),e(E_,bie),e(bie,mEo),e(E_,fEo),e(E_,RN),e(RN,gEo),e(E_,hEo),e(G,uEo),e(G,C_),e(C_,vie),e(vie,pEo),e(C_,_Eo),e(C_,PN),e(PN,bEo),e(C_,vEo),e(G,FEo),e(G,w_),e(w_,Fie),e(Fie,TEo),e(w_,MEo),e(w_,BN),e(BN,EEo),e(w_,CEo),e(G,wEo),e(G,A_),e(A_,Tie),e(Tie,AEo),e(A_,yEo),e(A_,IN),e(IN,LEo),e(A_,xEo),e(G,$Eo),e(G,y_),e(y_,Mie),e(Mie,kEo),e(y_,SEo),e(y_,qN),e(qN,REo),e(y_,PEo),e(G,BEo),e(G,L_),e(L_,Eie),e(Eie,IEo),e(L_,qEo),e(L_,NN),e(NN,NEo),e(L_,jEo),e(G,DEo),e(G,x_),e(x_,Cie),e(Cie,GEo),e(x_,OEo),e(x_,jN),e(jN,VEo),e(x_,XEo),e(G,zEo),e(G,$_),e($_,wie),e(wie,WEo),e($_,QEo),e($_,DN),e(DN,HEo),e($_,UEo),e(G,JEo),e(G,k_),e(k_,Aie),e(Aie,YEo),e(k_,KEo),e(k_,GN),e(GN,ZEo),e(k_,eCo),e(G,oCo),e(G,S_),e(S_,yie),e(yie,rCo),e(S_,tCo),e(S_,ON),e(ON,aCo),e(S_,nCo),e(G,sCo),e(G,R_),e(R_,Lie),e(Lie,lCo),e(R_,iCo),e(R_,VN),e(VN,dCo),e(R_,cCo),e(G,mCo),e(G,P_),e(P_,xie),e(xie,fCo),e(P_,gCo),e(P_,XN),e(XN,hCo),e(P_,uCo),e(G,pCo),e(G,B_),e(B_,$ie),e($ie,_Co),e(B_,bCo),e(B_,zN),e(zN,vCo),e(B_,FCo),e(G,TCo),e(G,I_),e(I_,kie),e(kie,MCo),e(I_,ECo),e(I_,WN),e(WN,CCo),e(I_,wCo),e(G,ACo),e(G,q_),e(q_,Sie),e(Sie,yCo),e(q_,LCo),e(q_,QN),e(QN,xCo),e(q_,$Co),e(Ye,kCo),e(Ye,N_),e(N_,SCo),e(N_,Rie),e(Rie,RCo),e(N_,PCo),e(N_,Pie),e(Pie,BCo),e(Ye,ICo),M(j_,Ye,null),b(m,pqe,_),b(m,$i,_),e($i,D_),e(D_,Bie),M(Jy,Bie,null),e($i,qCo),e($i,Iie),e(Iie,NCo),b(m,_qe,_),b(m,$o,_),M(Yy,$o,null),e($o,jCo),e($o,ki),e(ki,DCo),e(ki,HN),e(HN,GCo),e(ki,OCo),e(ki,UN),e(UN,VCo),e(ki,XCo),e($o,zCo),e($o,Ky),e(Ky,WCo),e(Ky,qie),e(qie,QCo),e(Ky,HCo),e($o,UCo),e($o,nt),M(Zy,nt,null),e(nt,JCo),e(nt,Nie),e(Nie,YCo),e(nt,KCo),e(nt,Si),e(Si,ZCo),e(Si,jie),e(jie,e5o),e(Si,o5o),e(Si,JN),e(JN,r5o),e(Si,t5o),e(nt,a5o),M(G_,nt,null),e($o,n5o),e($o,Ke),M(eL,Ke,null),e(Ke,s5o),e(Ke,Die),e(Die,l5o),e(Ke,i5o),e(Ke,$a),e($a,d5o),e($a,Gie),e(Gie,c5o),e($a,m5o),e($a,Oie),e(Oie,f5o),e($a,g5o),e($a,Vie),e(Vie,h5o),e($a,u5o),e(Ke,p5o),e(Ke,z),e(z,O_),e(O_,Xie),e(Xie,_5o),e(O_,b5o),e(O_,YN),e(YN,v5o),e(O_,F5o),e(z,T5o),e(z,V_),e(V_,zie),e(zie,M5o),e(V_,E5o),e(V_,KN),e(KN,C5o),e(V_,w5o),e(z,A5o),e(z,X_),e(X_,Wie),e(Wie,y5o),e(X_,L5o),e(X_,ZN),e(ZN,x5o),e(X_,$5o),e(z,k5o),e(z,z_),e(z_,Qie),e(Qie,S5o),e(z_,R5o),e(z_,ej),e(ej,P5o),e(z_,B5o),e(z,I5o),e(z,W_),e(W_,Hie),e(Hie,q5o),e(W_,N5o),e(W_,oj),e(oj,j5o),e(W_,D5o),e(z,G5o),e(z,Q_),e(Q_,Uie),e(Uie,O5o),e(Q_,V5o),e(Q_,rj),e(rj,X5o),e(Q_,z5o),e(z,W5o),e(z,H_),e(H_,Jie),e(Jie,Q5o),e(H_,H5o),e(H_,tj),e(tj,U5o),e(H_,J5o),e(z,Y5o),e(z,U_),e(U_,Yie),e(Yie,K5o),e(U_,Z5o),e(U_,aj),e(aj,e3o),e(U_,o3o),e(z,r3o),e(z,J_),e(J_,Kie),e(Kie,t3o),e(J_,a3o),e(J_,nj),e(nj,n3o),e(J_,s3o),e(z,l3o),e(z,Y_),e(Y_,Zie),e(Zie,i3o),e(Y_,d3o),e(Y_,sj),e(sj,c3o),e(Y_,m3o),e(z,f3o),e(z,K_),e(K_,ede),e(ede,g3o),e(K_,h3o),e(K_,lj),e(lj,u3o),e(K_,p3o),e(z,_3o),e(z,Z_),e(Z_,ode),e(ode,b3o),e(Z_,v3o),e(Z_,ij),e(ij,F3o),e(Z_,T3o),e(z,M3o),e(z,eb),e(eb,rde),e(rde,E3o),e(eb,C3o),e(eb,dj),e(dj,w3o),e(eb,A3o),e(z,y3o),e(z,ob),e(ob,tde),e(tde,L3o),e(ob,x3o),e(ob,cj),e(cj,$3o),e(ob,k3o),e(z,S3o),e(z,rb),e(rb,ade),e(ade,R3o),e(rb,P3o),e(rb,mj),e(mj,B3o),e(rb,I3o),e(z,q3o),e(z,tb),e(tb,nde),e(nde,N3o),e(tb,j3o),e(tb,fj),e(fj,D3o),e(tb,G3o),e(z,O3o),e(z,ab),e(ab,sde),e(sde,V3o),e(ab,X3o),e(ab,gj),e(gj,z3o),e(ab,W3o),e(z,Q3o),e(z,nb),e(nb,lde),e(lde,H3o),e(nb,U3o),e(nb,hj),e(hj,J3o),e(nb,Y3o),e(z,K3o),e(z,sb),e(sb,ide),e(ide,Z3o),e(sb,ewo),e(sb,uj),e(uj,owo),e(sb,rwo),e(z,two),e(z,lb),e(lb,dde),e(dde,awo),e(lb,nwo),e(lb,pj),e(pj,swo),e(lb,lwo),e(z,iwo),e(z,ib),e(ib,cde),e(cde,dwo),e(ib,cwo),e(ib,_j),e(_j,mwo),e(ib,fwo),e(z,gwo),e(z,db),e(db,mde),e(mde,hwo),e(db,uwo),e(db,bj),e(bj,pwo),e(db,_wo),e(z,bwo),e(z,cb),e(cb,fde),e(fde,vwo),e(cb,Fwo),e(cb,vj),e(vj,Two),e(cb,Mwo),e(z,Ewo),e(z,mb),e(mb,gde),e(gde,Cwo),e(mb,wwo),e(mb,Fj),e(Fj,Awo),e(mb,ywo),e(z,Lwo),e(z,fb),e(fb,hde),e(hde,xwo),e(fb,$wo),e(fb,Tj),e(Tj,kwo),e(fb,Swo),e(z,Rwo),e(z,gb),e(gb,ude),e(ude,Pwo),e(gb,Bwo),e(gb,Mj),e(Mj,Iwo),e(gb,qwo),e(z,Nwo),e(z,hb),e(hb,pde),e(pde,jwo),e(hb,Dwo),e(hb,Ej),e(Ej,Gwo),e(hb,Owo),e(z,Vwo),e(z,ub),e(ub,_de),e(_de,Xwo),e(ub,zwo),e(ub,Cj),e(Cj,Wwo),e(ub,Qwo),e(z,Hwo),e(z,pb),e(pb,bde),e(bde,Uwo),e(pb,Jwo),e(pb,wj),e(wj,Ywo),e(pb,Kwo),e(z,Zwo),e(z,_b),e(_b,vde),e(vde,e0o),e(_b,o0o),e(_b,Aj),e(Aj,r0o),e(_b,t0o),e(z,a0o),e(z,bb),e(bb,Fde),e(Fde,n0o),e(bb,s0o),e(bb,yj),e(yj,l0o),e(bb,i0o),e(z,d0o),e(z,vb),e(vb,Tde),e(Tde,c0o),e(vb,m0o),e(vb,Lj),e(Lj,f0o),e(vb,g0o),e(z,h0o),e(z,Fb),e(Fb,Mde),e(Mde,u0o),e(Fb,p0o),e(Fb,xj),e(xj,_0o),e(Fb,b0o),e(z,v0o),e(z,Tb),e(Tb,Ede),e(Ede,F0o),e(Tb,T0o),e(Tb,$j),e($j,M0o),e(Tb,E0o),e(z,C0o),e(z,Mb),e(Mb,Cde),e(Cde,w0o),e(Mb,A0o),e(Mb,kj),e(kj,y0o),e(Mb,L0o),e(z,x0o),e(z,Eb),e(Eb,wde),e(wde,$0o),e(Eb,k0o),e(Eb,Sj),e(Sj,S0o),e(Eb,R0o),e(Ke,P0o),e(Ke,Cb),e(Cb,B0o),e(Cb,Ade),e(Ade,I0o),e(Cb,q0o),e(Cb,yde),e(yde,N0o),e(Ke,j0o),M(wb,Ke,null),b(m,bqe,_),b(m,Ri,_),e(Ri,Ab),e(Ab,Lde),M(oL,Lde,null),e(Ri,D0o),e(Ri,xde),e(xde,G0o),b(m,vqe,_),b(m,ko,_),M(rL,ko,null),e(ko,O0o),e(ko,Pi),e(Pi,V0o),e(Pi,Rj),e(Rj,X0o),e(Pi,z0o),e(Pi,Pj),e(Pj,W0o),e(Pi,Q0o),e(ko,H0o),e(ko,tL),e(tL,U0o),e(tL,$de),e($de,J0o),e(tL,Y0o),e(ko,K0o),e(ko,st),M(aL,st,null),e(st,Z0o),e(st,kde),e(kde,eAo),e(st,oAo),e(st,Bi),e(Bi,rAo),e(Bi,Sde),e(Sde,tAo),e(Bi,aAo),e(Bi,Bj),e(Bj,nAo),e(Bi,sAo),e(st,lAo),M(yb,st,null),e(ko,iAo),e(ko,Ze),M(nL,Ze,null),e(Ze,dAo),e(Ze,Rde),e(Rde,cAo),e(Ze,mAo),e(Ze,ka),e(ka,fAo),e(ka,Pde),e(Pde,gAo),e(ka,hAo),e(ka,Bde),e(Bde,uAo),e(ka,pAo),e(ka,Ide),e(Ide,_Ao),e(ka,bAo),e(Ze,vAo),e(Ze,W),e(W,Lb),e(Lb,qde),e(qde,FAo),e(Lb,TAo),e(Lb,Ij),e(Ij,MAo),e(Lb,EAo),e(W,CAo),e(W,xb),e(xb,Nde),e(Nde,wAo),e(xb,AAo),e(xb,qj),e(qj,yAo),e(xb,LAo),e(W,xAo),e(W,$b),e($b,jde),e(jde,$Ao),e($b,kAo),e($b,Nj),e(Nj,SAo),e($b,RAo),e(W,PAo),e(W,kb),e(kb,Dde),e(Dde,BAo),e(kb,IAo),e(kb,jj),e(jj,qAo),e(kb,NAo),e(W,jAo),e(W,Sb),e(Sb,Gde),e(Gde,DAo),e(Sb,GAo),e(Sb,Dj),e(Dj,OAo),e(Sb,VAo),e(W,XAo),e(W,Rb),e(Rb,Ode),e(Ode,zAo),e(Rb,WAo),e(Rb,Gj),e(Gj,QAo),e(Rb,HAo),e(W,UAo),e(W,Pb),e(Pb,Vde),e(Vde,JAo),e(Pb,YAo),e(Pb,Oj),e(Oj,KAo),e(Pb,ZAo),e(W,e6o),e(W,Bb),e(Bb,Xde),e(Xde,o6o),e(Bb,r6o),e(Bb,Vj),e(Vj,t6o),e(Bb,a6o),e(W,n6o),e(W,Ib),e(Ib,zde),e(zde,s6o),e(Ib,l6o),e(Ib,Xj),e(Xj,i6o),e(Ib,d6o),e(W,c6o),e(W,qb),e(qb,Wde),e(Wde,m6o),e(qb,f6o),e(qb,zj),e(zj,g6o),e(qb,h6o),e(W,u6o),e(W,Nb),e(Nb,Qde),e(Qde,p6o),e(Nb,_6o),e(Nb,Wj),e(Wj,b6o),e(Nb,v6o),e(W,F6o),e(W,jb),e(jb,Hde),e(Hde,T6o),e(jb,M6o),e(jb,Qj),e(Qj,E6o),e(jb,C6o),e(W,w6o),e(W,Db),e(Db,Ude),e(Ude,A6o),e(Db,y6o),e(Db,Hj),e(Hj,L6o),e(Db,x6o),e(W,$6o),e(W,Gb),e(Gb,Jde),e(Jde,k6o),e(Gb,S6o),e(Gb,Uj),e(Uj,R6o),e(Gb,P6o),e(W,B6o),e(W,Ob),e(Ob,Yde),e(Yde,I6o),e(Ob,q6o),e(Ob,Jj),e(Jj,N6o),e(Ob,j6o),e(W,D6o),e(W,Vb),e(Vb,Kde),e(Kde,G6o),e(Vb,O6o),e(Vb,Yj),e(Yj,V6o),e(Vb,X6o),e(W,z6o),e(W,Xb),e(Xb,Zde),e(Zde,W6o),e(Xb,Q6o),e(Xb,Kj),e(Kj,H6o),e(Xb,U6o),e(W,J6o),e(W,zb),e(zb,ece),e(ece,Y6o),e(zb,K6o),e(zb,Zj),e(Zj,Z6o),e(zb,eyo),e(W,oyo),e(W,Wb),e(Wb,oce),e(oce,ryo),e(Wb,tyo),e(Wb,eD),e(eD,ayo),e(Wb,nyo),e(W,syo),e(W,Qb),e(Qb,rce),e(rce,lyo),e(Qb,iyo),e(Qb,oD),e(oD,dyo),e(Qb,cyo),e(W,myo),e(W,Hb),e(Hb,tce),e(tce,fyo),e(Hb,gyo),e(Hb,rD),e(rD,hyo),e(Hb,uyo),e(W,pyo),e(W,Ub),e(Ub,ace),e(ace,_yo),e(Ub,byo),e(Ub,tD),e(tD,vyo),e(Ub,Fyo),e(W,Tyo),e(W,Jb),e(Jb,nce),e(nce,Myo),e(Jb,Eyo),e(Jb,aD),e(aD,Cyo),e(Jb,wyo),e(W,Ayo),e(W,Yb),e(Yb,sce),e(sce,yyo),e(Yb,Lyo),e(Yb,nD),e(nD,xyo),e(Yb,$yo),e(W,kyo),e(W,Kb),e(Kb,lce),e(lce,Syo),e(Kb,Ryo),e(Kb,sD),e(sD,Pyo),e(Kb,Byo),e(W,Iyo),e(W,Zb),e(Zb,ice),e(ice,qyo),e(Zb,Nyo),e(Zb,lD),e(lD,jyo),e(Zb,Dyo),e(W,Gyo),e(W,e2),e(e2,dce),e(dce,Oyo),e(e2,Vyo),e(e2,iD),e(iD,Xyo),e(e2,zyo),e(W,Wyo),e(W,o2),e(o2,cce),e(cce,Qyo),e(o2,Hyo),e(o2,dD),e(dD,Uyo),e(o2,Jyo),e(W,Yyo),e(W,r2),e(r2,mce),e(mce,Kyo),e(r2,Zyo),e(r2,cD),e(cD,eLo),e(r2,oLo),e(W,rLo),e(W,t2),e(t2,fce),e(fce,tLo),e(t2,aLo),e(t2,mD),e(mD,nLo),e(t2,sLo),e(W,lLo),e(W,a2),e(a2,gce),e(gce,iLo),e(a2,dLo),e(a2,hce),e(hce,cLo),e(a2,mLo),e(W,fLo),e(W,n2),e(n2,uce),e(uce,gLo),e(n2,hLo),e(n2,fD),e(fD,uLo),e(n2,pLo),e(W,_Lo),e(W,s2),e(s2,pce),e(pce,bLo),e(s2,vLo),e(s2,gD),e(gD,FLo),e(s2,TLo),e(W,MLo),e(W,l2),e(l2,_ce),e(_ce,ELo),e(l2,CLo),e(l2,hD),e(hD,wLo),e(l2,ALo),e(W,yLo),e(W,i2),e(i2,bce),e(bce,LLo),e(i2,xLo),e(i2,uD),e(uD,$Lo),e(i2,kLo),e(Ze,SLo),e(Ze,d2),e(d2,RLo),e(d2,vce),e(vce,PLo),e(d2,BLo),e(d2,Fce),e(Fce,ILo),e(Ze,qLo),M(c2,Ze,null),b(m,Fqe,_),b(m,Ii,_),e(Ii,m2),e(m2,Tce),M(sL,Tce,null),e(Ii,NLo),e(Ii,Mce),e(Mce,jLo),b(m,Tqe,_),b(m,So,_),M(lL,So,null),e(So,DLo),e(So,qi),e(qi,GLo),e(qi,pD),e(pD,OLo),e(qi,VLo),e(qi,_D),e(_D,XLo),e(qi,zLo),e(So,WLo),e(So,iL),e(iL,QLo),e(iL,Ece),e(Ece,HLo),e(iL,ULo),e(So,JLo),e(So,lt),M(dL,lt,null),e(lt,YLo),e(lt,Cce),e(Cce,KLo),e(lt,ZLo),e(lt,Ni),e(Ni,e8o),e(Ni,wce),e(wce,o8o),e(Ni,r8o),e(Ni,bD),e(bD,t8o),e(Ni,a8o),e(lt,n8o),M(f2,lt,null),e(So,s8o),e(So,eo),M(cL,eo,null),e(eo,l8o),e(eo,Ace),e(Ace,i8o),e(eo,d8o),e(eo,Sa),e(Sa,c8o),e(Sa,yce),e(yce,m8o),e(Sa,f8o),e(Sa,Lce),e(Lce,g8o),e(Sa,h8o),e(Sa,xce),e(xce,u8o),e(Sa,p8o),e(eo,_8o),e(eo,pe),e(pe,g2),e(g2,$ce),e($ce,b8o),e(g2,v8o),e(g2,vD),e(vD,F8o),e(g2,T8o),e(pe,M8o),e(pe,h2),e(h2,kce),e(kce,E8o),e(h2,C8o),e(h2,FD),e(FD,w8o),e(h2,A8o),e(pe,y8o),e(pe,u2),e(u2,Sce),e(Sce,L8o),e(u2,x8o),e(u2,TD),e(TD,$8o),e(u2,k8o),e(pe,S8o),e(pe,p2),e(p2,Rce),e(Rce,R8o),e(p2,P8o),e(p2,MD),e(MD,B8o),e(p2,I8o),e(pe,q8o),e(pe,_2),e(_2,Pce),e(Pce,N8o),e(_2,j8o),e(_2,ED),e(ED,D8o),e(_2,G8o),e(pe,O8o),e(pe,b2),e(b2,Bce),e(Bce,V8o),e(b2,X8o),e(b2,CD),e(CD,z8o),e(b2,W8o),e(pe,Q8o),e(pe,v2),e(v2,Ice),e(Ice,H8o),e(v2,U8o),e(v2,wD),e(wD,J8o),e(v2,Y8o),e(pe,K8o),e(pe,F2),e(F2,qce),e(qce,Z8o),e(F2,e7o),e(F2,AD),e(AD,o7o),e(F2,r7o),e(pe,t7o),e(pe,T2),e(T2,Nce),e(Nce,a7o),e(T2,n7o),e(T2,yD),e(yD,s7o),e(T2,l7o),e(pe,i7o),e(pe,M2),e(M2,jce),e(jce,d7o),e(M2,c7o),e(M2,LD),e(LD,m7o),e(M2,f7o),e(pe,g7o),e(pe,E2),e(E2,Dce),e(Dce,h7o),e(E2,u7o),e(E2,xD),e(xD,p7o),e(E2,_7o),e(pe,b7o),e(pe,C2),e(C2,Gce),e(Gce,v7o),e(C2,F7o),e(C2,$D),e($D,T7o),e(C2,M7o),e(pe,E7o),e(pe,w2),e(w2,Oce),e(Oce,C7o),e(w2,w7o),e(w2,kD),e(kD,A7o),e(w2,y7o),e(pe,L7o),e(pe,A2),e(A2,Vce),e(Vce,x7o),e(A2,$7o),e(A2,SD),e(SD,k7o),e(A2,S7o),e(pe,R7o),e(pe,y2),e(y2,Xce),e(Xce,P7o),e(y2,B7o),e(y2,RD),e(RD,I7o),e(y2,q7o),e(pe,N7o),e(pe,L2),e(L2,zce),e(zce,j7o),e(L2,D7o),e(L2,PD),e(PD,G7o),e(L2,O7o),e(eo,V7o),e(eo,x2),e(x2,X7o),e(x2,Wce),e(Wce,z7o),e(x2,W7o),e(x2,Qce),e(Qce,Q7o),e(eo,H7o),M($2,eo,null),b(m,Mqe,_),b(m,ji,_),e(ji,k2),e(k2,Hce),M(mL,Hce,null),e(ji,U7o),e(ji,Uce),e(Uce,J7o),b(m,Eqe,_),b(m,Ro,_),M(fL,Ro,null),e(Ro,Y7o),e(Ro,Di),e(Di,K7o),e(Di,BD),e(BD,Z7o),e(Di,e9o),e(Di,ID),e(ID,o9o),e(Di,r9o),e(Ro,t9o),e(Ro,gL),e(gL,a9o),e(gL,Jce),e(Jce,n9o),e(gL,s9o),e(Ro,l9o),e(Ro,it),M(hL,it,null),e(it,i9o),e(it,Yce),e(Yce,d9o),e(it,c9o),e(it,Gi),e(Gi,m9o),e(Gi,Kce),e(Kce,f9o),e(Gi,g9o),e(Gi,qD),e(qD,h9o),e(Gi,u9o),e(it,p9o),M(S2,it,null),e(Ro,_9o),e(Ro,oo),M(uL,oo,null),e(oo,b9o),e(oo,Zce),e(Zce,v9o),e(oo,F9o),e(oo,Ra),e(Ra,T9o),e(Ra,eme),e(eme,M9o),e(Ra,E9o),e(Ra,ome),e(ome,C9o),e(Ra,w9o),e(Ra,rme),e(rme,A9o),e(Ra,y9o),e(oo,L9o),e(oo,q),e(q,R2),e(R2,tme),e(tme,x9o),e(R2,$9o),e(R2,ND),e(ND,k9o),e(R2,S9o),e(q,R9o),e(q,P2),e(P2,ame),e(ame,P9o),e(P2,B9o),e(P2,jD),e(jD,I9o),e(P2,q9o),e(q,N9o),e(q,B2),e(B2,nme),e(nme,j9o),e(B2,D9o),e(B2,DD),e(DD,G9o),e(B2,O9o),e(q,V9o),e(q,I2),e(I2,sme),e(sme,X9o),e(I2,z9o),e(I2,GD),e(GD,W9o),e(I2,Q9o),e(q,H9o),e(q,q2),e(q2,lme),e(lme,U9o),e(q2,J9o),e(q2,OD),e(OD,Y9o),e(q2,K9o),e(q,Z9o),e(q,N2),e(N2,ime),e(ime,exo),e(N2,oxo),e(N2,VD),e(VD,rxo),e(N2,txo),e(q,axo),e(q,j2),e(j2,dme),e(dme,nxo),e(j2,sxo),e(j2,XD),e(XD,lxo),e(j2,ixo),e(q,dxo),e(q,D2),e(D2,cme),e(cme,cxo),e(D2,mxo),e(D2,zD),e(zD,fxo),e(D2,gxo),e(q,hxo),e(q,G2),e(G2,mme),e(mme,uxo),e(G2,pxo),e(G2,WD),e(WD,_xo),e(G2,bxo),e(q,vxo),e(q,O2),e(O2,fme),e(fme,Fxo),e(O2,Txo),e(O2,QD),e(QD,Mxo),e(O2,Exo),e(q,Cxo),e(q,V2),e(V2,gme),e(gme,wxo),e(V2,Axo),e(V2,HD),e(HD,yxo),e(V2,Lxo),e(q,xxo),e(q,X2),e(X2,hme),e(hme,$xo),e(X2,kxo),e(X2,UD),e(UD,Sxo),e(X2,Rxo),e(q,Pxo),e(q,z2),e(z2,ume),e(ume,Bxo),e(z2,Ixo),e(z2,JD),e(JD,qxo),e(z2,Nxo),e(q,jxo),e(q,W2),e(W2,pme),e(pme,Dxo),e(W2,Gxo),e(W2,YD),e(YD,Oxo),e(W2,Vxo),e(q,Xxo),e(q,Q2),e(Q2,_me),e(_me,zxo),e(Q2,Wxo),e(Q2,KD),e(KD,Qxo),e(Q2,Hxo),e(q,Uxo),e(q,H2),e(H2,bme),e(bme,Jxo),e(H2,Yxo),e(H2,ZD),e(ZD,Kxo),e(H2,Zxo),e(q,e$o),e(q,U2),e(U2,vme),e(vme,o$o),e(U2,r$o),e(U2,eG),e(eG,t$o),e(U2,a$o),e(q,n$o),e(q,J2),e(J2,Fme),e(Fme,s$o),e(J2,l$o),e(J2,oG),e(oG,i$o),e(J2,d$o),e(q,c$o),e(q,Y2),e(Y2,Tme),e(Tme,m$o),e(Y2,f$o),e(Y2,rG),e(rG,g$o),e(Y2,h$o),e(q,u$o),e(q,K2),e(K2,Mme),e(Mme,p$o),e(K2,_$o),e(K2,tG),e(tG,b$o),e(K2,v$o),e(q,F$o),e(q,Z2),e(Z2,Eme),e(Eme,T$o),e(Z2,M$o),e(Z2,aG),e(aG,E$o),e(Z2,C$o),e(q,w$o),e(q,ev),e(ev,Cme),e(Cme,A$o),e(ev,y$o),e(ev,nG),e(nG,L$o),e(ev,x$o),e(q,$$o),e(q,ov),e(ov,wme),e(wme,k$o),e(ov,S$o),e(ov,sG),e(sG,R$o),e(ov,P$o),e(q,B$o),e(q,rv),e(rv,Ame),e(Ame,I$o),e(rv,q$o),e(rv,lG),e(lG,N$o),e(rv,j$o),e(q,D$o),e(q,tv),e(tv,yme),e(yme,G$o),e(tv,O$o),e(tv,iG),e(iG,V$o),e(tv,X$o),e(q,z$o),e(q,av),e(av,Lme),e(Lme,W$o),e(av,Q$o),e(av,dG),e(dG,H$o),e(av,U$o),e(q,J$o),e(q,nv),e(nv,xme),e(xme,Y$o),e(nv,K$o),e(nv,cG),e(cG,Z$o),e(nv,eko),e(q,oko),e(q,sv),e(sv,$me),e($me,rko),e(sv,tko),e(sv,mG),e(mG,ako),e(sv,nko),e(q,sko),e(q,lv),e(lv,kme),e(kme,lko),e(lv,iko),e(lv,fG),e(fG,dko),e(lv,cko),e(q,mko),e(q,iv),e(iv,Sme),e(Sme,fko),e(iv,gko),e(iv,gG),e(gG,hko),e(iv,uko),e(q,pko),e(q,dv),e(dv,Rme),e(Rme,_ko),e(dv,bko),e(dv,hG),e(hG,vko),e(dv,Fko),e(q,Tko),e(q,cv),e(cv,Pme),e(Pme,Mko),e(cv,Eko),e(cv,uG),e(uG,Cko),e(cv,wko),e(q,Ako),e(q,mv),e(mv,Bme),e(Bme,yko),e(mv,Lko),e(mv,pG),e(pG,xko),e(mv,$ko),e(q,kko),e(q,fv),e(fv,Ime),e(Ime,Sko),e(fv,Rko),e(fv,_G),e(_G,Pko),e(fv,Bko),e(q,Iko),e(q,gv),e(gv,qme),e(qme,qko),e(gv,Nko),e(gv,bG),e(bG,jko),e(gv,Dko),e(q,Gko),e(q,hv),e(hv,Nme),e(Nme,Oko),e(hv,Vko),e(hv,vG),e(vG,Xko),e(hv,zko),e(q,Wko),e(q,uv),e(uv,jme),e(jme,Qko),e(uv,Hko),e(uv,FG),e(FG,Uko),e(uv,Jko),e(q,Yko),e(q,pv),e(pv,Dme),e(Dme,Kko),e(pv,Zko),e(pv,TG),e(TG,eSo),e(pv,oSo),e(q,rSo),e(q,_v),e(_v,Gme),e(Gme,tSo),e(_v,aSo),e(_v,MG),e(MG,nSo),e(_v,sSo),e(q,lSo),e(q,bv),e(bv,Ome),e(Ome,iSo),e(bv,dSo),e(bv,EG),e(EG,cSo),e(bv,mSo),e(q,fSo),e(q,vv),e(vv,Vme),e(Vme,gSo),e(vv,hSo),e(vv,CG),e(CG,uSo),e(vv,pSo),e(q,_So),e(q,Fv),e(Fv,Xme),e(Xme,bSo),e(Fv,vSo),e(Fv,wG),e(wG,FSo),e(Fv,TSo),e(q,MSo),e(q,Tv),e(Tv,zme),e(zme,ESo),e(Tv,CSo),e(Tv,AG),e(AG,wSo),e(Tv,ASo),e(q,ySo),e(q,Mv),e(Mv,Wme),e(Wme,LSo),e(Mv,xSo),e(Mv,yG),e(yG,$So),e(Mv,kSo),e(q,SSo),e(q,Ev),e(Ev,Qme),e(Qme,RSo),e(Ev,PSo),e(Ev,LG),e(LG,BSo),e(Ev,ISo),e(q,qSo),e(q,Cv),e(Cv,Hme),e(Hme,NSo),e(Cv,jSo),e(Cv,xG),e(xG,DSo),e(Cv,GSo),e(oo,OSo),e(oo,wv),e(wv,VSo),e(wv,Ume),e(Ume,XSo),e(wv,zSo),e(wv,Jme),e(Jme,WSo),e(oo,QSo),M(Av,oo,null),b(m,Cqe,_),b(m,Oi,_),e(Oi,yv),e(yv,Yme),M(pL,Yme,null),e(Oi,HSo),e(Oi,Kme),e(Kme,USo),b(m,wqe,_),b(m,Po,_),M(_L,Po,null),e(Po,JSo),e(Po,Vi),e(Vi,YSo),e(Vi,$G),e($G,KSo),e(Vi,ZSo),e(Vi,kG),e(kG,eRo),e(Vi,oRo),e(Po,rRo),e(Po,bL),e(bL,tRo),e(bL,Zme),e(Zme,aRo),e(bL,nRo),e(Po,sRo),e(Po,dt),M(vL,dt,null),e(dt,lRo),e(dt,efe),e(efe,iRo),e(dt,dRo),e(dt,Xi),e(Xi,cRo),e(Xi,ofe),e(ofe,mRo),e(Xi,fRo),e(Xi,SG),e(SG,gRo),e(Xi,hRo),e(dt,uRo),M(Lv,dt,null),e(Po,pRo),e(Po,ro),M(FL,ro,null),e(ro,_Ro),e(ro,rfe),e(rfe,bRo),e(ro,vRo),e(ro,Pa),e(Pa,FRo),e(Pa,tfe),e(tfe,TRo),e(Pa,MRo),e(Pa,afe),e(afe,ERo),e(Pa,CRo),e(Pa,nfe),e(nfe,wRo),e(Pa,ARo),e(ro,yRo),e(ro,Y),e(Y,xv),e(xv,sfe),e(sfe,LRo),e(xv,xRo),e(xv,RG),e(RG,$Ro),e(xv,kRo),e(Y,SRo),e(Y,$v),e($v,lfe),e(lfe,RRo),e($v,PRo),e($v,PG),e(PG,BRo),e($v,IRo),e(Y,qRo),e(Y,kv),e(kv,ife),e(ife,NRo),e(kv,jRo),e(kv,BG),e(BG,DRo),e(kv,GRo),e(Y,ORo),e(Y,Sv),e(Sv,dfe),e(dfe,VRo),e(Sv,XRo),e(Sv,IG),e(IG,zRo),e(Sv,WRo),e(Y,QRo),e(Y,Rv),e(Rv,cfe),e(cfe,HRo),e(Rv,URo),e(Rv,qG),e(qG,JRo),e(Rv,YRo),e(Y,KRo),e(Y,Pv),e(Pv,mfe),e(mfe,ZRo),e(Pv,ePo),e(Pv,NG),e(NG,oPo),e(Pv,rPo),e(Y,tPo),e(Y,Bv),e(Bv,ffe),e(ffe,aPo),e(Bv,nPo),e(Bv,jG),e(jG,sPo),e(Bv,lPo),e(Y,iPo),e(Y,Iv),e(Iv,gfe),e(gfe,dPo),e(Iv,cPo),e(Iv,DG),e(DG,mPo),e(Iv,fPo),e(Y,gPo),e(Y,qv),e(qv,hfe),e(hfe,hPo),e(qv,uPo),e(qv,GG),e(GG,pPo),e(qv,_Po),e(Y,bPo),e(Y,Nv),e(Nv,ufe),e(ufe,vPo),e(Nv,FPo),e(Nv,OG),e(OG,TPo),e(Nv,MPo),e(Y,EPo),e(Y,jv),e(jv,pfe),e(pfe,CPo),e(jv,wPo),e(jv,VG),e(VG,APo),e(jv,yPo),e(Y,LPo),e(Y,Dv),e(Dv,_fe),e(_fe,xPo),e(Dv,$Po),e(Dv,XG),e(XG,kPo),e(Dv,SPo),e(Y,RPo),e(Y,Gv),e(Gv,bfe),e(bfe,PPo),e(Gv,BPo),e(Gv,zG),e(zG,IPo),e(Gv,qPo),e(Y,NPo),e(Y,Ov),e(Ov,vfe),e(vfe,jPo),e(Ov,DPo),e(Ov,WG),e(WG,GPo),e(Ov,OPo),e(Y,VPo),e(Y,Vv),e(Vv,Ffe),e(Ffe,XPo),e(Vv,zPo),e(Vv,QG),e(QG,WPo),e(Vv,QPo),e(Y,HPo),e(Y,Xv),e(Xv,Tfe),e(Tfe,UPo),e(Xv,JPo),e(Xv,HG),e(HG,YPo),e(Xv,KPo),e(Y,ZPo),e(Y,zv),e(zv,Mfe),e(Mfe,eBo),e(zv,oBo),e(zv,UG),e(UG,rBo),e(zv,tBo),e(Y,aBo),e(Y,Wv),e(Wv,Efe),e(Efe,nBo),e(Wv,sBo),e(Wv,JG),e(JG,lBo),e(Wv,iBo),e(Y,dBo),e(Y,Qv),e(Qv,Cfe),e(Cfe,cBo),e(Qv,mBo),e(Qv,YG),e(YG,fBo),e(Qv,gBo),e(Y,hBo),e(Y,Hv),e(Hv,wfe),e(wfe,uBo),e(Hv,pBo),e(Hv,KG),e(KG,_Bo),e(Hv,bBo),e(Y,vBo),e(Y,Uv),e(Uv,Afe),e(Afe,FBo),e(Uv,TBo),e(Uv,ZG),e(ZG,MBo),e(Uv,EBo),e(Y,CBo),e(Y,Jv),e(Jv,yfe),e(yfe,wBo),e(Jv,ABo),e(Jv,eO),e(eO,yBo),e(Jv,LBo),e(Y,xBo),e(Y,Yv),e(Yv,Lfe),e(Lfe,$Bo),e(Yv,kBo),e(Yv,oO),e(oO,SBo),e(Yv,RBo),e(Y,PBo),e(Y,Kv),e(Kv,xfe),e(xfe,BBo),e(Kv,IBo),e(Kv,rO),e(rO,qBo),e(Kv,NBo),e(Y,jBo),e(Y,Zv),e(Zv,$fe),e($fe,DBo),e(Zv,GBo),e(Zv,tO),e(tO,OBo),e(Zv,VBo),e(Y,XBo),e(Y,eF),e(eF,kfe),e(kfe,zBo),e(eF,WBo),e(eF,aO),e(aO,QBo),e(eF,HBo),e(Y,UBo),e(Y,oF),e(oF,Sfe),e(Sfe,JBo),e(oF,YBo),e(oF,nO),e(nO,KBo),e(oF,ZBo),e(Y,eIo),e(Y,rF),e(rF,Rfe),e(Rfe,oIo),e(rF,rIo),e(rF,sO),e(sO,tIo),e(rF,aIo),e(Y,nIo),e(Y,tF),e(tF,Pfe),e(Pfe,sIo),e(tF,lIo),e(tF,lO),e(lO,iIo),e(tF,dIo),e(ro,cIo),e(ro,aF),e(aF,mIo),e(aF,Bfe),e(Bfe,fIo),e(aF,gIo),e(aF,Ife),e(Ife,hIo),e(ro,uIo),M(nF,ro,null),b(m,Aqe,_),b(m,zi,_),e(zi,sF),e(sF,qfe),M(TL,qfe,null),e(zi,pIo),e(zi,Nfe),e(Nfe,_Io),b(m,yqe,_),b(m,Bo,_),M(ML,Bo,null),e(Bo,bIo),e(Bo,Wi),e(Wi,vIo),e(Wi,iO),e(iO,FIo),e(Wi,TIo),e(Wi,dO),e(dO,MIo),e(Wi,EIo),e(Bo,CIo),e(Bo,EL),e(EL,wIo),e(EL,jfe),e(jfe,AIo),e(EL,yIo),e(Bo,LIo),e(Bo,ct),M(CL,ct,null),e(ct,xIo),e(ct,Dfe),e(Dfe,$Io),e(ct,kIo),e(ct,Qi),e(Qi,SIo),e(Qi,Gfe),e(Gfe,RIo),e(Qi,PIo),e(Qi,cO),e(cO,BIo),e(Qi,IIo),e(ct,qIo),M(lF,ct,null),e(Bo,NIo),e(Bo,to),M(wL,to,null),e(to,jIo),e(to,Ofe),e(Ofe,DIo),e(to,GIo),e(to,Ba),e(Ba,OIo),e(Ba,Vfe),e(Vfe,VIo),e(Ba,XIo),e(Ba,Xfe),e(Xfe,zIo),e(Ba,WIo),e(Ba,zfe),e(zfe,QIo),e(Ba,HIo),e(to,UIo),e(to,Yr),e(Yr,iF),e(iF,Wfe),e(Wfe,JIo),e(iF,YIo),e(iF,mO),e(mO,KIo),e(iF,ZIo),e(Yr,eqo),e(Yr,dF),e(dF,Qfe),e(Qfe,oqo),e(dF,rqo),e(dF,fO),e(fO,tqo),e(dF,aqo),e(Yr,nqo),e(Yr,cF),e(cF,Hfe),e(Hfe,sqo),e(cF,lqo),e(cF,gO),e(gO,iqo),e(cF,dqo),e(Yr,cqo),e(Yr,mF),e(mF,Ufe),e(Ufe,mqo),e(mF,fqo),e(mF,hO),e(hO,gqo),e(mF,hqo),e(Yr,uqo),e(Yr,fF),e(fF,Jfe),e(Jfe,pqo),e(fF,_qo),e(fF,uO),e(uO,bqo),e(fF,vqo),e(to,Fqo),e(to,gF),e(gF,Tqo),e(gF,Yfe),e(Yfe,Mqo),e(gF,Eqo),e(gF,Kfe),e(Kfe,Cqo),e(to,wqo),M(hF,to,null),b(m,Lqe,_),b(m,Hi,_),e(Hi,uF),e(uF,Zfe),M(AL,Zfe,null),e(Hi,Aqo),e(Hi,ege),e(ege,yqo),b(m,xqe,_),b(m,Io,_),M(yL,Io,null),e(Io,Lqo),e(Io,Ui),e(Ui,xqo),e(Ui,pO),e(pO,$qo),e(Ui,kqo),e(Ui,_O),e(_O,Sqo),e(Ui,Rqo),e(Io,Pqo),e(Io,LL),e(LL,Bqo),e(LL,oge),e(oge,Iqo),e(LL,qqo),e(Io,Nqo),e(Io,mt),M(xL,mt,null),e(mt,jqo),e(mt,rge),e(rge,Dqo),e(mt,Gqo),e(mt,Ji),e(Ji,Oqo),e(Ji,tge),e(tge,Vqo),e(Ji,Xqo),e(Ji,bO),e(bO,zqo),e(Ji,Wqo),e(mt,Qqo),M(pF,mt,null),e(Io,Hqo),e(Io,ao),M($L,ao,null),e(ao,Uqo),e(ao,age),e(age,Jqo),e(ao,Yqo),e(ao,Ia),e(Ia,Kqo),e(Ia,nge),e(nge,Zqo),e(Ia,eNo),e(Ia,sge),e(sge,oNo),e(Ia,rNo),e(Ia,lge),e(lge,tNo),e(Ia,aNo),e(ao,nNo),e(ao,U),e(U,_F),e(_F,ige),e(ige,sNo),e(_F,lNo),e(_F,vO),e(vO,iNo),e(_F,dNo),e(U,cNo),e(U,bF),e(bF,dge),e(dge,mNo),e(bF,fNo),e(bF,FO),e(FO,gNo),e(bF,hNo),e(U,uNo),e(U,vF),e(vF,cge),e(cge,pNo),e(vF,_No),e(vF,TO),e(TO,bNo),e(vF,vNo),e(U,FNo),e(U,FF),e(FF,mge),e(mge,TNo),e(FF,MNo),e(FF,MO),e(MO,ENo),e(FF,CNo),e(U,wNo),e(U,TF),e(TF,fge),e(fge,ANo),e(TF,yNo),e(TF,EO),e(EO,LNo),e(TF,xNo),e(U,$No),e(U,MF),e(MF,gge),e(gge,kNo),e(MF,SNo),e(MF,CO),e(CO,RNo),e(MF,PNo),e(U,BNo),e(U,EF),e(EF,hge),e(hge,INo),e(EF,qNo),e(EF,wO),e(wO,NNo),e(EF,jNo),e(U,DNo),e(U,CF),e(CF,uge),e(uge,GNo),e(CF,ONo),e(CF,AO),e(AO,VNo),e(CF,XNo),e(U,zNo),e(U,wF),e(wF,pge),e(pge,WNo),e(wF,QNo),e(wF,yO),e(yO,HNo),e(wF,UNo),e(U,JNo),e(U,AF),e(AF,_ge),e(_ge,YNo),e(AF,KNo),e(AF,LO),e(LO,ZNo),e(AF,ejo),e(U,ojo),e(U,yF),e(yF,bge),e(bge,rjo),e(yF,tjo),e(yF,xO),e(xO,ajo),e(yF,njo),e(U,sjo),e(U,LF),e(LF,vge),e(vge,ljo),e(LF,ijo),e(LF,$O),e($O,djo),e(LF,cjo),e(U,mjo),e(U,xF),e(xF,Fge),e(Fge,fjo),e(xF,gjo),e(xF,kO),e(kO,hjo),e(xF,ujo),e(U,pjo),e(U,$F),e($F,Tge),e(Tge,_jo),e($F,bjo),e($F,SO),e(SO,vjo),e($F,Fjo),e(U,Tjo),e(U,kF),e(kF,Mge),e(Mge,Mjo),e(kF,Ejo),e(kF,RO),e(RO,Cjo),e(kF,wjo),e(U,Ajo),e(U,SF),e(SF,Ege),e(Ege,yjo),e(SF,Ljo),e(SF,PO),e(PO,xjo),e(SF,$jo),e(U,kjo),e(U,RF),e(RF,Cge),e(Cge,Sjo),e(RF,Rjo),e(RF,BO),e(BO,Pjo),e(RF,Bjo),e(U,Ijo),e(U,PF),e(PF,wge),e(wge,qjo),e(PF,Njo),e(PF,IO),e(IO,jjo),e(PF,Djo),e(U,Gjo),e(U,BF),e(BF,Age),e(Age,Ojo),e(BF,Vjo),e(BF,qO),e(qO,Xjo),e(BF,zjo),e(U,Wjo),e(U,IF),e(IF,yge),e(yge,Qjo),e(IF,Hjo),e(IF,NO),e(NO,Ujo),e(IF,Jjo),e(U,Yjo),e(U,qF),e(qF,Lge),e(Lge,Kjo),e(qF,Zjo),e(qF,jO),e(jO,eDo),e(qF,oDo),e(U,rDo),e(U,NF),e(NF,xge),e(xge,tDo),e(NF,aDo),e(NF,DO),e(DO,nDo),e(NF,sDo),e(U,lDo),e(U,jF),e(jF,$ge),e($ge,iDo),e(jF,dDo),e(jF,GO),e(GO,cDo),e(jF,mDo),e(U,fDo),e(U,DF),e(DF,kge),e(kge,gDo),e(DF,hDo),e(DF,OO),e(OO,uDo),e(DF,pDo),e(U,_Do),e(U,GF),e(GF,Sge),e(Sge,bDo),e(GF,vDo),e(GF,VO),e(VO,FDo),e(GF,TDo),e(U,MDo),e(U,OF),e(OF,Rge),e(Rge,EDo),e(OF,CDo),e(OF,XO),e(XO,wDo),e(OF,ADo),e(U,yDo),e(U,VF),e(VF,Pge),e(Pge,LDo),e(VF,xDo),e(VF,zO),e(zO,$Do),e(VF,kDo),e(U,SDo),e(U,XF),e(XF,Bge),e(Bge,RDo),e(XF,PDo),e(XF,WO),e(WO,BDo),e(XF,IDo),e(U,qDo),e(U,zF),e(zF,Ige),e(Ige,NDo),e(zF,jDo),e(zF,QO),e(QO,DDo),e(zF,GDo),e(U,ODo),e(U,WF),e(WF,qge),e(qge,VDo),e(WF,XDo),e(WF,HO),e(HO,zDo),e(WF,WDo),e(U,QDo),e(U,QF),e(QF,Nge),e(Nge,HDo),e(QF,UDo),e(QF,UO),e(UO,JDo),e(QF,YDo),e(U,KDo),e(U,HF),e(HF,jge),e(jge,ZDo),e(HF,eGo),e(HF,JO),e(JO,oGo),e(HF,rGo),e(U,tGo),e(U,UF),e(UF,Dge),e(Dge,aGo),e(UF,nGo),e(UF,YO),e(YO,sGo),e(UF,lGo),e(ao,iGo),e(ao,JF),e(JF,dGo),e(JF,Gge),e(Gge,cGo),e(JF,mGo),e(JF,Oge),e(Oge,fGo),e(ao,gGo),M(YF,ao,null),b(m,$qe,_),b(m,Yi,_),e(Yi,KF),e(KF,Vge),M(kL,Vge,null),e(Yi,hGo),e(Yi,Xge),e(Xge,uGo),b(m,kqe,_),b(m,qo,_),M(SL,qo,null),e(qo,pGo),e(qo,Ki),e(Ki,_Go),e(Ki,KO),e(KO,bGo),e(Ki,vGo),e(Ki,ZO),e(ZO,FGo),e(Ki,TGo),e(qo,MGo),e(qo,RL),e(RL,EGo),e(RL,zge),e(zge,CGo),e(RL,wGo),e(qo,AGo),e(qo,ft),M(PL,ft,null),e(ft,yGo),e(ft,Wge),e(Wge,LGo),e(ft,xGo),e(ft,Zi),e(Zi,$Go),e(Zi,Qge),e(Qge,kGo),e(Zi,SGo),e(Zi,eV),e(eV,RGo),e(Zi,PGo),e(ft,BGo),M(ZF,ft,null),e(qo,IGo),e(qo,no),M(BL,no,null),e(no,qGo),e(no,Hge),e(Hge,NGo),e(no,jGo),e(no,qa),e(qa,DGo),e(qa,Uge),e(Uge,GGo),e(qa,OGo),e(qa,Jge),e(Jge,VGo),e(qa,XGo),e(qa,Yge),e(Yge,zGo),e(qa,WGo),e(no,QGo),e(no,V),e(V,e1),e(e1,Kge),e(Kge,HGo),e(e1,UGo),e(e1,oV),e(oV,JGo),e(e1,YGo),e(V,KGo),e(V,o1),e(o1,Zge),e(Zge,ZGo),e(o1,eOo),e(o1,rV),e(rV,oOo),e(o1,rOo),e(V,tOo),e(V,r1),e(r1,ehe),e(ehe,aOo),e(r1,nOo),e(r1,tV),e(tV,sOo),e(r1,lOo),e(V,iOo),e(V,t1),e(t1,ohe),e(ohe,dOo),e(t1,cOo),e(t1,aV),e(aV,mOo),e(t1,fOo),e(V,gOo),e(V,a1),e(a1,rhe),e(rhe,hOo),e(a1,uOo),e(a1,nV),e(nV,pOo),e(a1,_Oo),e(V,bOo),e(V,n1),e(n1,the),e(the,vOo),e(n1,FOo),e(n1,sV),e(sV,TOo),e(n1,MOo),e(V,EOo),e(V,s1),e(s1,ahe),e(ahe,COo),e(s1,wOo),e(s1,lV),e(lV,AOo),e(s1,yOo),e(V,LOo),e(V,l1),e(l1,nhe),e(nhe,xOo),e(l1,$Oo),e(l1,iV),e(iV,kOo),e(l1,SOo),e(V,ROo),e(V,i1),e(i1,she),e(she,POo),e(i1,BOo),e(i1,dV),e(dV,IOo),e(i1,qOo),e(V,NOo),e(V,d1),e(d1,lhe),e(lhe,jOo),e(d1,DOo),e(d1,cV),e(cV,GOo),e(d1,OOo),e(V,VOo),e(V,c1),e(c1,ihe),e(ihe,XOo),e(c1,zOo),e(c1,mV),e(mV,WOo),e(c1,QOo),e(V,HOo),e(V,m1),e(m1,dhe),e(dhe,UOo),e(m1,JOo),e(m1,fV),e(fV,YOo),e(m1,KOo),e(V,ZOo),e(V,f1),e(f1,che),e(che,eVo),e(f1,oVo),e(f1,gV),e(gV,rVo),e(f1,tVo),e(V,aVo),e(V,g1),e(g1,mhe),e(mhe,nVo),e(g1,sVo),e(g1,hV),e(hV,lVo),e(g1,iVo),e(V,dVo),e(V,h1),e(h1,fhe),e(fhe,cVo),e(h1,mVo),e(h1,uV),e(uV,fVo),e(h1,gVo),e(V,hVo),e(V,u1),e(u1,ghe),e(ghe,uVo),e(u1,pVo),e(u1,pV),e(pV,_Vo),e(u1,bVo),e(V,vVo),e(V,p1),e(p1,hhe),e(hhe,FVo),e(p1,TVo),e(p1,_V),e(_V,MVo),e(p1,EVo),e(V,CVo),e(V,_1),e(_1,uhe),e(uhe,wVo),e(_1,AVo),e(_1,bV),e(bV,yVo),e(_1,LVo),e(V,xVo),e(V,b1),e(b1,phe),e(phe,$Vo),e(b1,kVo),e(b1,vV),e(vV,SVo),e(b1,RVo),e(V,PVo),e(V,v1),e(v1,_he),e(_he,BVo),e(v1,IVo),e(v1,FV),e(FV,qVo),e(v1,NVo),e(V,jVo),e(V,F1),e(F1,bhe),e(bhe,DVo),e(F1,GVo),e(F1,TV),e(TV,OVo),e(F1,VVo),e(V,XVo),e(V,T1),e(T1,vhe),e(vhe,zVo),e(T1,WVo),e(T1,MV),e(MV,QVo),e(T1,HVo),e(V,UVo),e(V,M1),e(M1,Fhe),e(Fhe,JVo),e(M1,YVo),e(M1,EV),e(EV,KVo),e(M1,ZVo),e(V,eXo),e(V,E1),e(E1,The),e(The,oXo),e(E1,rXo),e(E1,CV),e(CV,tXo),e(E1,aXo),e(V,nXo),e(V,C1),e(C1,Mhe),e(Mhe,sXo),e(C1,lXo),e(C1,wV),e(wV,iXo),e(C1,dXo),e(V,cXo),e(V,w1),e(w1,Ehe),e(Ehe,mXo),e(w1,fXo),e(w1,AV),e(AV,gXo),e(w1,hXo),e(V,uXo),e(V,A1),e(A1,Che),e(Che,pXo),e(A1,_Xo),e(A1,yV),e(yV,bXo),e(A1,vXo),e(V,FXo),e(V,y1),e(y1,whe),e(whe,TXo),e(y1,MXo),e(y1,LV),e(LV,EXo),e(y1,CXo),e(V,wXo),e(V,L1),e(L1,Ahe),e(Ahe,AXo),e(L1,yXo),e(L1,xV),e(xV,LXo),e(L1,xXo),e(V,$Xo),e(V,x1),e(x1,yhe),e(yhe,kXo),e(x1,SXo),e(x1,$V),e($V,RXo),e(x1,PXo),e(V,BXo),e(V,$1),e($1,Lhe),e(Lhe,IXo),e($1,qXo),e($1,kV),e(kV,NXo),e($1,jXo),e(V,DXo),e(V,k1),e(k1,xhe),e(xhe,GXo),e(k1,OXo),e(k1,SV),e(SV,VXo),e(k1,XXo),e(V,zXo),e(V,S1),e(S1,$he),e($he,WXo),e(S1,QXo),e(S1,RV),e(RV,HXo),e(S1,UXo),e(V,JXo),e(V,R1),e(R1,khe),e(khe,YXo),e(R1,KXo),e(R1,PV),e(PV,ZXo),e(R1,ezo),e(V,ozo),e(V,P1),e(P1,She),e(She,rzo),e(P1,tzo),e(P1,BV),e(BV,azo),e(P1,nzo),e(V,szo),e(V,B1),e(B1,Rhe),e(Rhe,lzo),e(B1,izo),e(B1,IV),e(IV,dzo),e(B1,czo),e(V,mzo),e(V,I1),e(I1,Phe),e(Phe,fzo),e(I1,gzo),e(I1,qV),e(qV,hzo),e(I1,uzo),e(V,pzo),e(V,q1),e(q1,Bhe),e(Bhe,_zo),e(q1,bzo),e(q1,NV),e(NV,vzo),e(q1,Fzo),e(V,Tzo),e(V,N1),e(N1,Ihe),e(Ihe,Mzo),e(N1,Ezo),e(N1,jV),e(jV,Czo),e(N1,wzo),e(no,Azo),e(no,j1),e(j1,yzo),e(j1,qhe),e(qhe,Lzo),e(j1,xzo),e(j1,Nhe),e(Nhe,$zo),e(no,kzo),M(D1,no,null),b(m,Sqe,_),b(m,ed,_),e(ed,G1),e(G1,jhe),M(IL,jhe,null),e(ed,Szo),e(ed,Dhe),e(Dhe,Rzo),b(m,Rqe,_),b(m,No,_),M(qL,No,null),e(No,Pzo),e(No,od),e(od,Bzo),e(od,DV),e(DV,Izo),e(od,qzo),e(od,GV),e(GV,Nzo),e(od,jzo),e(No,Dzo),e(No,NL),e(NL,Gzo),e(NL,Ghe),e(Ghe,Ozo),e(NL,Vzo),e(No,Xzo),e(No,gt),M(jL,gt,null),e(gt,zzo),e(gt,Ohe),e(Ohe,Wzo),e(gt,Qzo),e(gt,rd),e(rd,Hzo),e(rd,Vhe),e(Vhe,Uzo),e(rd,Jzo),e(rd,OV),e(OV,Yzo),e(rd,Kzo),e(gt,Zzo),M(O1,gt,null),e(No,eWo),e(No,so),M(DL,so,null),e(so,oWo),e(so,Xhe),e(Xhe,rWo),e(so,tWo),e(so,Na),e(Na,aWo),e(Na,zhe),e(zhe,nWo),e(Na,sWo),e(Na,Whe),e(Whe,lWo),e(Na,iWo),e(Na,Qhe),e(Qhe,dWo),e(Na,cWo),e(so,mWo),e(so,Hhe),e(Hhe,V1),e(V1,Uhe),e(Uhe,fWo),e(V1,gWo),e(V1,VV),e(VV,hWo),e(V1,uWo),e(so,pWo),e(so,X1),e(X1,_Wo),e(X1,Jhe),e(Jhe,bWo),e(X1,vWo),e(X1,Yhe),e(Yhe,FWo),e(so,TWo),M(z1,so,null),b(m,Pqe,_),b(m,td,_),e(td,W1),e(W1,Khe),M(GL,Khe,null),e(td,MWo),e(td,Zhe),e(Zhe,EWo),b(m,Bqe,_),b(m,jo,_),M(OL,jo,null),e(jo,CWo),e(jo,ad),e(ad,wWo),e(ad,XV),e(XV,AWo),e(ad,yWo),e(ad,zV),e(zV,LWo),e(ad,xWo),e(jo,$Wo),e(jo,VL),e(VL,kWo),e(VL,eue),e(eue,SWo),e(VL,RWo),e(jo,PWo),e(jo,ht),M(XL,ht,null),e(ht,BWo),e(ht,oue),e(oue,IWo),e(ht,qWo),e(ht,nd),e(nd,NWo),e(nd,rue),e(rue,jWo),e(nd,DWo),e(nd,WV),e(WV,GWo),e(nd,OWo),e(ht,VWo),M(Q1,ht,null),e(jo,XWo),e(jo,lo),M(zL,lo,null),e(lo,zWo),e(lo,tue),e(tue,WWo),e(lo,QWo),e(lo,ja),e(ja,HWo),e(ja,aue),e(aue,UWo),e(ja,JWo),e(ja,nue),e(nue,YWo),e(ja,KWo),e(ja,sue),e(sue,ZWo),e(ja,eQo),e(lo,oQo),e(lo,Fe),e(Fe,H1),e(H1,lue),e(lue,rQo),e(H1,tQo),e(H1,QV),e(QV,aQo),e(H1,nQo),e(Fe,sQo),e(Fe,U1),e(U1,iue),e(iue,lQo),e(U1,iQo),e(U1,HV),e(HV,dQo),e(U1,cQo),e(Fe,mQo),e(Fe,J1),e(J1,due),e(due,fQo),e(J1,gQo),e(J1,UV),e(UV,hQo),e(J1,uQo),e(Fe,pQo),e(Fe,Y1),e(Y1,cue),e(cue,_Qo),e(Y1,bQo),e(Y1,JV),e(JV,vQo),e(Y1,FQo),e(Fe,TQo),e(Fe,Ps),e(Ps,mue),e(mue,MQo),e(Ps,EQo),e(Ps,YV),e(YV,CQo),e(Ps,wQo),e(Ps,KV),e(KV,AQo),e(Ps,yQo),e(Fe,LQo),e(Fe,K1),e(K1,fue),e(fue,xQo),e(K1,$Qo),e(K1,ZV),e(ZV,kQo),e(K1,SQo),e(Fe,RQo),e(Fe,ut),e(ut,gue),e(gue,PQo),e(ut,BQo),e(ut,eX),e(eX,IQo),e(ut,qQo),e(ut,oX),e(oX,NQo),e(ut,jQo),e(ut,rX),e(rX,DQo),e(ut,GQo),e(Fe,OQo),e(Fe,Z1),e(Z1,hue),e(hue,VQo),e(Z1,XQo),e(Z1,tX),e(tX,zQo),e(Z1,WQo),e(Fe,QQo),e(Fe,eT),e(eT,uue),e(uue,HQo),e(eT,UQo),e(eT,aX),e(aX,JQo),e(eT,YQo),e(Fe,KQo),e(Fe,oT),e(oT,pue),e(pue,ZQo),e(oT,eHo),e(oT,nX),e(nX,oHo),e(oT,rHo),e(Fe,tHo),e(Fe,rT),e(rT,_ue),e(_ue,aHo),e(rT,nHo),e(rT,sX),e(sX,sHo),e(rT,lHo),e(Fe,iHo),e(Fe,tT),e(tT,bue),e(bue,dHo),e(tT,cHo),e(tT,lX),e(lX,mHo),e(tT,fHo),e(Fe,gHo),e(Fe,aT),e(aT,vue),e(vue,hHo),e(aT,uHo),e(aT,iX),e(iX,pHo),e(aT,_Ho),e(Fe,bHo),e(Fe,nT),e(nT,Fue),e(Fue,vHo),e(nT,FHo),e(nT,dX),e(dX,THo),e(nT,MHo),e(lo,EHo),e(lo,sT),e(sT,CHo),e(sT,Tue),e(Tue,wHo),e(sT,AHo),e(sT,Mue),e(Mue,yHo),e(lo,LHo),M(lT,lo,null),b(m,Iqe,_),b(m,sd,_),e(sd,iT),e(iT,Eue),M(WL,Eue,null),e(sd,xHo),e(sd,Cue),e(Cue,$Ho),b(m,qqe,_),b(m,Do,_),M(QL,Do,null),e(Do,kHo),e(Do,ld),e(ld,SHo),e(ld,cX),e(cX,RHo),e(ld,PHo),e(ld,mX),e(mX,BHo),e(ld,IHo),e(Do,qHo),e(Do,HL),e(HL,NHo),e(HL,wue),e(wue,jHo),e(HL,DHo),e(Do,GHo),e(Do,pt),M(UL,pt,null),e(pt,OHo),e(pt,Aue),e(Aue,VHo),e(pt,XHo),e(pt,id),e(id,zHo),e(id,yue),e(yue,WHo),e(id,QHo),e(id,fX),e(fX,HHo),e(id,UHo),e(pt,JHo),M(dT,pt,null),e(Do,YHo),e(Do,io),M(JL,io,null),e(io,KHo),e(io,Lue),e(Lue,ZHo),e(io,eUo),e(io,Da),e(Da,oUo),e(Da,xue),e(xue,rUo),e(Da,tUo),e(Da,$ue),e($ue,aUo),e(Da,nUo),e(Da,kue),e(kue,sUo),e(Da,lUo),e(io,iUo),e(io,Sue),e(Sue,cT),e(cT,Rue),e(Rue,dUo),e(cT,cUo),e(cT,gX),e(gX,mUo),e(cT,fUo),e(io,gUo),e(io,mT),e(mT,hUo),e(mT,Pue),e(Pue,uUo),e(mT,pUo),e(mT,Bue),e(Bue,_Uo),e(io,bUo),M(fT,io,null),b(m,Nqe,_),b(m,dd,_),e(dd,gT),e(gT,Iue),M(YL,Iue,null),e(dd,vUo),e(dd,que),e(que,FUo),b(m,jqe,_),b(m,Go,_),M(KL,Go,null),e(Go,TUo),e(Go,cd),e(cd,MUo),e(cd,hX),e(hX,EUo),e(cd,CUo),e(cd,uX),e(uX,wUo),e(cd,AUo),e(Go,yUo),e(Go,ZL),e(ZL,LUo),e(ZL,Nue),e(Nue,xUo),e(ZL,$Uo),e(Go,kUo),e(Go,_t),M(e8,_t,null),e(_t,SUo),e(_t,jue),e(jue,RUo),e(_t,PUo),e(_t,md),e(md,BUo),e(md,Due),e(Due,IUo),e(md,qUo),e(md,pX),e(pX,NUo),e(md,jUo),e(_t,DUo),M(hT,_t,null),e(Go,GUo),e(Go,co),M(o8,co,null),e(co,OUo),e(co,Gue),e(Gue,VUo),e(co,XUo),e(co,Ga),e(Ga,zUo),e(Ga,Oue),e(Oue,WUo),e(Ga,QUo),e(Ga,Vue),e(Vue,HUo),e(Ga,UUo),e(Ga,Xue),e(Xue,JUo),e(Ga,YUo),e(co,KUo),e(co,ke),e(ke,uT),e(uT,zue),e(zue,ZUo),e(uT,eJo),e(uT,_X),e(_X,oJo),e(uT,rJo),e(ke,tJo),e(ke,pT),e(pT,Wue),e(Wue,aJo),e(pT,nJo),e(pT,bX),e(bX,sJo),e(pT,lJo),e(ke,iJo),e(ke,_T),e(_T,Que),e(Que,dJo),e(_T,cJo),e(_T,vX),e(vX,mJo),e(_T,fJo),e(ke,gJo),e(ke,bT),e(bT,Hue),e(Hue,hJo),e(bT,uJo),e(bT,FX),e(FX,pJo),e(bT,_Jo),e(ke,bJo),e(ke,vT),e(vT,Uue),e(Uue,vJo),e(vT,FJo),e(vT,TX),e(TX,TJo),e(vT,MJo),e(ke,EJo),e(ke,FT),e(FT,Jue),e(Jue,CJo),e(FT,wJo),e(FT,MX),e(MX,AJo),e(FT,yJo),e(ke,LJo),e(ke,TT),e(TT,Yue),e(Yue,xJo),e(TT,$Jo),e(TT,EX),e(EX,kJo),e(TT,SJo),e(ke,RJo),e(ke,MT),e(MT,Kue),e(Kue,PJo),e(MT,BJo),e(MT,CX),e(CX,IJo),e(MT,qJo),e(ke,NJo),e(ke,ET),e(ET,Zue),e(Zue,jJo),e(ET,DJo),e(ET,wX),e(wX,GJo),e(ET,OJo),e(co,VJo),e(co,CT),e(CT,XJo),e(CT,epe),e(epe,zJo),e(CT,WJo),e(CT,ope),e(ope,QJo),e(co,HJo),M(wT,co,null),b(m,Dqe,_),b(m,fd,_),e(fd,AT),e(AT,rpe),M(r8,rpe,null),e(fd,UJo),e(fd,tpe),e(tpe,JJo),b(m,Gqe,_),b(m,Oo,_),M(t8,Oo,null),e(Oo,YJo),e(Oo,gd),e(gd,KJo),e(gd,AX),e(AX,ZJo),e(gd,eYo),e(gd,yX),e(yX,oYo),e(gd,rYo),e(Oo,tYo),e(Oo,a8),e(a8,aYo),e(a8,ape),e(ape,nYo),e(a8,sYo),e(Oo,lYo),e(Oo,bt),M(n8,bt,null),e(bt,iYo),e(bt,npe),e(npe,dYo),e(bt,cYo),e(bt,hd),e(hd,mYo),e(hd,spe),e(spe,fYo),e(hd,gYo),e(hd,LX),e(LX,hYo),e(hd,uYo),e(bt,pYo),M(yT,bt,null),e(Oo,_Yo),e(Oo,mo),M(s8,mo,null),e(mo,bYo),e(mo,lpe),e(lpe,vYo),e(mo,FYo),e(mo,Oa),e(Oa,TYo),e(Oa,ipe),e(ipe,MYo),e(Oa,EYo),e(Oa,dpe),e(dpe,CYo),e(Oa,wYo),e(Oa,cpe),e(cpe,AYo),e(Oa,yYo),e(mo,LYo),e(mo,Kr),e(Kr,LT),e(LT,mpe),e(mpe,xYo),e(LT,$Yo),e(LT,xX),e(xX,kYo),e(LT,SYo),e(Kr,RYo),e(Kr,xT),e(xT,fpe),e(fpe,PYo),e(xT,BYo),e(xT,$X),e($X,IYo),e(xT,qYo),e(Kr,NYo),e(Kr,$T),e($T,gpe),e(gpe,jYo),e($T,DYo),e($T,kX),e(kX,GYo),e($T,OYo),e(Kr,VYo),e(Kr,kT),e(kT,hpe),e(hpe,XYo),e(kT,zYo),e(kT,SX),e(SX,WYo),e(kT,QYo),e(Kr,HYo),e(Kr,ST),e(ST,upe),e(upe,UYo),e(ST,JYo),e(ST,RX),e(RX,YYo),e(ST,KYo),e(mo,ZYo),e(mo,RT),e(RT,eKo),e(RT,ppe),e(ppe,oKo),e(RT,rKo),e(RT,_pe),e(_pe,tKo),e(mo,aKo),M(PT,mo,null),b(m,Oqe,_),b(m,ud,_),e(ud,BT),e(BT,bpe),M(l8,bpe,null),e(ud,nKo),e(ud,vpe),e(vpe,sKo),b(m,Vqe,_),b(m,Vo,_),M(i8,Vo,null),e(Vo,lKo),e(Vo,pd),e(pd,iKo),e(pd,PX),e(PX,dKo),e(pd,cKo),e(pd,BX),e(BX,mKo),e(pd,fKo),e(Vo,gKo),e(Vo,d8),e(d8,hKo),e(d8,Fpe),e(Fpe,uKo),e(d8,pKo),e(Vo,_Ko),e(Vo,vt),M(c8,vt,null),e(vt,bKo),e(vt,Tpe),e(Tpe,vKo),e(vt,FKo),e(vt,_d),e(_d,TKo),e(_d,Mpe),e(Mpe,MKo),e(_d,EKo),e(_d,IX),e(IX,CKo),e(_d,wKo),e(vt,AKo),M(IT,vt,null),e(Vo,yKo),e(Vo,fo),M(m8,fo,null),e(fo,LKo),e(fo,Epe),e(Epe,xKo),e(fo,$Ko),e(fo,Va),e(Va,kKo),e(Va,Cpe),e(Cpe,SKo),e(Va,RKo),e(Va,wpe),e(wpe,PKo),e(Va,BKo),e(Va,Ape),e(Ape,IKo),e(Va,qKo),e(fo,NKo),e(fo,Se),e(Se,qT),e(qT,ype),e(ype,jKo),e(qT,DKo),e(qT,qX),e(qX,GKo),e(qT,OKo),e(Se,VKo),e(Se,NT),e(NT,Lpe),e(Lpe,XKo),e(NT,zKo),e(NT,NX),e(NX,WKo),e(NT,QKo),e(Se,HKo),e(Se,jT),e(jT,xpe),e(xpe,UKo),e(jT,JKo),e(jT,jX),e(jX,YKo),e(jT,KKo),e(Se,ZKo),e(Se,DT),e(DT,$pe),e($pe,eZo),e(DT,oZo),e(DT,DX),e(DX,rZo),e(DT,tZo),e(Se,aZo),e(Se,GT),e(GT,kpe),e(kpe,nZo),e(GT,sZo),e(GT,GX),e(GX,lZo),e(GT,iZo),e(Se,dZo),e(Se,OT),e(OT,Spe),e(Spe,cZo),e(OT,mZo),e(OT,OX),e(OX,fZo),e(OT,gZo),e(Se,hZo),e(Se,VT),e(VT,Rpe),e(Rpe,uZo),e(VT,pZo),e(VT,VX),e(VX,_Zo),e(VT,bZo),e(Se,vZo),e(Se,XT),e(XT,Ppe),e(Ppe,FZo),e(XT,TZo),e(XT,XX),e(XX,MZo),e(XT,EZo),e(Se,CZo),e(Se,zT),e(zT,Bpe),e(Bpe,wZo),e(zT,AZo),e(zT,zX),e(zX,yZo),e(zT,LZo),e(fo,xZo),e(fo,WT),e(WT,$Zo),e(WT,Ipe),e(Ipe,kZo),e(WT,SZo),e(WT,qpe),e(qpe,RZo),e(fo,PZo),M(QT,fo,null),b(m,Xqe,_),b(m,bd,_),e(bd,HT),e(HT,Npe),M(f8,Npe,null),e(bd,BZo),e(bd,jpe),e(jpe,IZo),b(m,zqe,_),b(m,Xo,_),M(g8,Xo,null),e(Xo,qZo),e(Xo,vd),e(vd,NZo),e(vd,WX),e(WX,jZo),e(vd,DZo),e(vd,QX),e(QX,GZo),e(vd,OZo),e(Xo,VZo),e(Xo,h8),e(h8,XZo),e(h8,Dpe),e(Dpe,zZo),e(h8,WZo),e(Xo,QZo),e(Xo,Ft),M(u8,Ft,null),e(Ft,HZo),e(Ft,Gpe),e(Gpe,UZo),e(Ft,JZo),e(Ft,Fd),e(Fd,YZo),e(Fd,Ope),e(Ope,KZo),e(Fd,ZZo),e(Fd,HX),e(HX,eer),e(Fd,oer),e(Ft,rer),M(UT,Ft,null),e(Xo,ter),e(Xo,go),M(p8,go,null),e(go,aer),e(go,Vpe),e(Vpe,ner),e(go,ser),e(go,Xa),e(Xa,ler),e(Xa,Xpe),e(Xpe,ier),e(Xa,der),e(Xa,zpe),e(zpe,cer),e(Xa,mer),e(Xa,Wpe),e(Wpe,fer),e(Xa,ger),e(go,her),e(go,_8),e(_8,JT),e(JT,Qpe),e(Qpe,uer),e(JT,per),e(JT,UX),e(UX,_er),e(JT,ber),e(_8,ver),e(_8,YT),e(YT,Hpe),e(Hpe,Fer),e(YT,Ter),e(YT,JX),e(JX,Mer),e(YT,Eer),e(go,Cer),e(go,KT),e(KT,wer),e(KT,Upe),e(Upe,Aer),e(KT,yer),e(KT,Jpe),e(Jpe,Ler),e(go,xer),M(ZT,go,null),b(m,Wqe,_),b(m,Td,_),e(Td,eM),e(eM,Ype),M(b8,Ype,null),e(Td,$er),e(Td,Kpe),e(Kpe,ker),b(m,Qqe,_),b(m,zo,_),M(v8,zo,null),e(zo,Ser),e(zo,Md),e(Md,Rer),e(Md,YX),e(YX,Per),e(Md,Ber),e(Md,KX),e(KX,Ier),e(Md,qer),e(zo,Ner),e(zo,F8),e(F8,jer),e(F8,Zpe),e(Zpe,Der),e(F8,Ger),e(zo,Oer),e(zo,Tt),M(T8,Tt,null),e(Tt,Ver),e(Tt,e_e),e(e_e,Xer),e(Tt,zer),e(Tt,Ed),e(Ed,Wer),e(Ed,o_e),e(o_e,Qer),e(Ed,Her),e(Ed,ZX),e(ZX,Uer),e(Ed,Jer),e(Tt,Yer),M(oM,Tt,null),e(zo,Ker),e(zo,ho),M(M8,ho,null),e(ho,Zer),e(ho,r_e),e(r_e,eor),e(ho,oor),e(ho,za),e(za,ror),e(za,t_e),e(t_e,tor),e(za,aor),e(za,a_e),e(a_e,nor),e(za,sor),e(za,n_e),e(n_e,lor),e(za,ior),e(ho,dor),e(ho,Zr),e(Zr,rM),e(rM,s_e),e(s_e,cor),e(rM,mor),e(rM,ez),e(ez,gor),e(rM,hor),e(Zr,uor),e(Zr,tM),e(tM,l_e),e(l_e,por),e(tM,_or),e(tM,oz),e(oz,bor),e(tM,vor),e(Zr,For),e(Zr,aM),e(aM,i_e),e(i_e,Tor),e(aM,Mor),e(aM,rz),e(rz,Eor),e(aM,Cor),e(Zr,wor),e(Zr,nM),e(nM,d_e),e(d_e,Aor),e(nM,yor),e(nM,tz),e(tz,Lor),e(nM,xor),e(Zr,$or),e(Zr,sM),e(sM,c_e),e(c_e,kor),e(sM,Sor),e(sM,az),e(az,Ror),e(sM,Por),e(ho,Bor),e(ho,lM),e(lM,Ior),e(lM,m_e),e(m_e,qor),e(lM,Nor),e(lM,f_e),e(f_e,jor),e(ho,Dor),M(iM,ho,null),b(m,Hqe,_),b(m,Cd,_),e(Cd,dM),e(dM,g_e),M(E8,g_e,null),e(Cd,Gor),e(Cd,h_e),e(h_e,Oor),b(m,Uqe,_),b(m,Wo,_),M(C8,Wo,null),e(Wo,Vor),e(Wo,wd),e(wd,Xor),e(wd,nz),e(nz,zor),e(wd,Wor),e(wd,sz),e(sz,Qor),e(wd,Hor),e(Wo,Uor),e(Wo,w8),e(w8,Jor),e(w8,u_e),e(u_e,Yor),e(w8,Kor),e(Wo,Zor),e(Wo,Mt),M(A8,Mt,null),e(Mt,err),e(Mt,p_e),e(p_e,orr),e(Mt,rrr),e(Mt,Ad),e(Ad,trr),e(Ad,__e),e(__e,arr),e(Ad,nrr),e(Ad,lz),e(lz,srr),e(Ad,lrr),e(Mt,irr),M(cM,Mt,null),e(Wo,drr),e(Wo,uo),M(y8,uo,null),e(uo,crr),e(uo,b_e),e(b_e,mrr),e(uo,frr),e(uo,Wa),e(Wa,grr),e(Wa,v_e),e(v_e,hrr),e(Wa,urr),e(Wa,F_e),e(F_e,prr),e(Wa,_rr),e(Wa,T_e),e(T_e,brr),e(Wa,vrr),e(uo,Frr),e(uo,yd),e(yd,mM),e(mM,M_e),e(M_e,Trr),e(mM,Mrr),e(mM,iz),e(iz,Err),e(mM,Crr),e(yd,wrr),e(yd,fM),e(fM,E_e),e(E_e,Arr),e(fM,yrr),e(fM,dz),e(dz,Lrr),e(fM,xrr),e(yd,$rr),e(yd,gM),e(gM,C_e),e(C_e,krr),e(gM,Srr),e(gM,cz),e(cz,Rrr),e(gM,Prr),e(uo,Brr),e(uo,hM),e(hM,Irr),e(hM,w_e),e(w_e,qrr),e(hM,Nrr),e(hM,A_e),e(A_e,jrr),e(uo,Drr),M(uM,uo,null),b(m,Jqe,_),b(m,Ld,_),e(Ld,pM),e(pM,y_e),M(L8,y_e,null),e(Ld,Grr),e(Ld,L_e),e(L_e,Orr),b(m,Yqe,_),b(m,Qo,_),M(x8,Qo,null),e(Qo,Vrr),e(Qo,xd),e(xd,Xrr),e(xd,mz),e(mz,zrr),e(xd,Wrr),e(xd,fz),e(fz,Qrr),e(xd,Hrr),e(Qo,Urr),e(Qo,$8),e($8,Jrr),e($8,x_e),e(x_e,Yrr),e($8,Krr),e(Qo,Zrr),e(Qo,Et),M(k8,Et,null),e(Et,etr),e(Et,$_e),e($_e,otr),e(Et,rtr),e(Et,$d),e($d,ttr),e($d,k_e),e(k_e,atr),e($d,ntr),e($d,gz),e(gz,str),e($d,ltr),e(Et,itr),M(_M,Et,null),e(Qo,dtr),e(Qo,po),M(S8,po,null),e(po,ctr),e(po,S_e),e(S_e,mtr),e(po,ftr),e(po,Qa),e(Qa,gtr),e(Qa,R_e),e(R_e,htr),e(Qa,utr),e(Qa,P_e),e(P_e,ptr),e(Qa,_tr),e(Qa,B_e),e(B_e,btr),e(Qa,vtr),e(po,Ftr),e(po,R8),e(R8,bM),e(bM,I_e),e(I_e,Ttr),e(bM,Mtr),e(bM,hz),e(hz,Etr),e(bM,Ctr),e(R8,wtr),e(R8,vM),e(vM,q_e),e(q_e,Atr),e(vM,ytr),e(vM,uz),e(uz,Ltr),e(vM,xtr),e(po,$tr),e(po,FM),e(FM,ktr),e(FM,N_e),e(N_e,Str),e(FM,Rtr),e(FM,j_e),e(j_e,Ptr),e(po,Btr),M(TM,po,null),b(m,Kqe,_),b(m,kd,_),e(kd,MM),e(MM,D_e),M(P8,D_e,null),e(kd,Itr),e(kd,G_e),e(G_e,qtr),b(m,Zqe,_),b(m,Ho,_),M(B8,Ho,null),e(Ho,Ntr),e(Ho,Sd),e(Sd,jtr),e(Sd,pz),e(pz,Dtr),e(Sd,Gtr),e(Sd,_z),e(_z,Otr),e(Sd,Vtr),e(Ho,Xtr),e(Ho,I8),e(I8,ztr),e(I8,O_e),e(O_e,Wtr),e(I8,Qtr),e(Ho,Htr),e(Ho,Ct),M(q8,Ct,null),e(Ct,Utr),e(Ct,V_e),e(V_e,Jtr),e(Ct,Ytr),e(Ct,Rd),e(Rd,Ktr),e(Rd,X_e),e(X_e,Ztr),e(Rd,ear),e(Rd,bz),e(bz,oar),e(Rd,rar),e(Ct,tar),M(EM,Ct,null),e(Ho,aar),e(Ho,_o),M(N8,_o,null),e(_o,nar),e(_o,z_e),e(z_e,sar),e(_o,lar),e(_o,Ha),e(Ha,iar),e(Ha,W_e),e(W_e,dar),e(Ha,car),e(Ha,Q_e),e(Q_e,mar),e(Ha,far),e(Ha,H_e),e(H_e,gar),e(Ha,har),e(_o,uar),e(_o,U_e),e(U_e,CM),e(CM,J_e),e(J_e,par),e(CM,_ar),e(CM,vz),e(vz,bar),e(CM,Far),e(_o,Tar),e(_o,wM),e(wM,Mar),e(wM,Y_e),e(Y_e,Ear),e(wM,Car),e(wM,K_e),e(K_e,war),e(_o,Aar),M(AM,_o,null),b(m,eNe,_),b(m,Pd,_),e(Pd,yM),e(yM,Z_e),M(j8,Z_e,null),e(Pd,yar),e(Pd,ebe),e(ebe,Lar),b(m,oNe,_),b(m,Uo,_),M(D8,Uo,null),e(Uo,xar),e(Uo,Bd),e(Bd,$ar),e(Bd,Fz),e(Fz,kar),e(Bd,Sar),e(Bd,Tz),e(Tz,Rar),e(Bd,Par),e(Uo,Bar),e(Uo,G8),e(G8,Iar),e(G8,obe),e(obe,qar),e(G8,Nar),e(Uo,jar),e(Uo,wt),M(O8,wt,null),e(wt,Dar),e(wt,rbe),e(rbe,Gar),e(wt,Oar),e(wt,Id),e(Id,Var),e(Id,tbe),e(tbe,Xar),e(Id,zar),e(Id,Mz),e(Mz,War),e(Id,Qar),e(wt,Har),M(LM,wt,null),e(Uo,Uar),e(Uo,bo),M(V8,bo,null),e(bo,Jar),e(bo,abe),e(abe,Yar),e(bo,Kar),e(bo,Ua),e(Ua,Zar),e(Ua,nbe),e(nbe,enr),e(Ua,onr),e(Ua,sbe),e(sbe,rnr),e(Ua,tnr),e(Ua,lbe),e(lbe,anr),e(Ua,nnr),e(bo,snr),e(bo,Ja),e(Ja,xM),e(xM,ibe),e(ibe,lnr),e(xM,inr),e(xM,Ez),e(Ez,dnr),e(xM,cnr),e(Ja,mnr),e(Ja,$M),e($M,dbe),e(dbe,fnr),e($M,gnr),e($M,Cz),e(Cz,hnr),e($M,unr),e(Ja,pnr),e(Ja,kM),e(kM,cbe),e(cbe,_nr),e(kM,bnr),e(kM,wz),e(wz,vnr),e(kM,Fnr),e(Ja,Tnr),e(Ja,SM),e(SM,mbe),e(mbe,Mnr),e(SM,Enr),e(SM,Az),e(Az,Cnr),e(SM,wnr),e(bo,Anr),e(bo,RM),e(RM,ynr),e(RM,fbe),e(fbe,Lnr),e(RM,xnr),e(RM,gbe),e(gbe,$nr),e(bo,knr),M(PM,bo,null),b(m,rNe,_),b(m,qd,_),e(qd,BM),e(BM,hbe),M(X8,hbe,null),e(qd,Snr),e(qd,ube),e(ube,Rnr),b(m,tNe,_),b(m,Jo,_),M(z8,Jo,null),e(Jo,Pnr),e(Jo,Nd),e(Nd,Bnr),e(Nd,yz),e(yz,Inr),e(Nd,qnr),e(Nd,Lz),e(Lz,Nnr),e(Nd,jnr),e(Jo,Dnr),e(Jo,W8),e(W8,Gnr),e(W8,pbe),e(pbe,Onr),e(W8,Vnr),e(Jo,Xnr),e(Jo,At),M(Q8,At,null),e(At,znr),e(At,_be),e(_be,Wnr),e(At,Qnr),e(At,jd),e(jd,Hnr),e(jd,bbe),e(bbe,Unr),e(jd,Jnr),e(jd,xz),e(xz,Ynr),e(jd,Knr),e(At,Znr),M(IM,At,null),e(Jo,esr),e(Jo,vo),M(H8,vo,null),e(vo,osr),e(vo,vbe),e(vbe,rsr),e(vo,tsr),e(vo,Ya),e(Ya,asr),e(Ya,Fbe),e(Fbe,nsr),e(Ya,ssr),e(Ya,Tbe),e(Tbe,lsr),e(Ya,isr),e(Ya,Mbe),e(Mbe,dsr),e(Ya,csr),e(vo,msr),e(vo,Ebe),e(Ebe,qM),e(qM,Cbe),e(Cbe,fsr),e(qM,gsr),e(qM,$z),e($z,hsr),e(qM,usr),e(vo,psr),e(vo,NM),e(NM,_sr),e(NM,wbe),e(wbe,bsr),e(NM,vsr),e(NM,Abe),e(Abe,Fsr),e(vo,Tsr),M(jM,vo,null),b(m,aNe,_),b(m,Dd,_),e(Dd,DM),e(DM,ybe),M(U8,ybe,null),e(Dd,Msr),e(Dd,Lbe),e(Lbe,Esr),b(m,nNe,_),b(m,Yo,_),M(J8,Yo,null),e(Yo,Csr),e(Yo,Gd),e(Gd,wsr),e(Gd,kz),e(kz,Asr),e(Gd,ysr),e(Gd,Sz),e(Sz,Lsr),e(Gd,xsr),e(Yo,$sr),e(Yo,Y8),e(Y8,ksr),e(Y8,xbe),e(xbe,Ssr),e(Y8,Rsr),e(Yo,Psr),e(Yo,yt),M(K8,yt,null),e(yt,Bsr),e(yt,$be),e($be,Isr),e(yt,qsr),e(yt,Od),e(Od,Nsr),e(Od,kbe),e(kbe,jsr),e(Od,Dsr),e(Od,Rz),e(Rz,Gsr),e(Od,Osr),e(yt,Vsr),M(GM,yt,null),e(Yo,Xsr),e(Yo,wr),M(Z8,wr,null),e(wr,zsr),e(wr,Sbe),e(Sbe,Wsr),e(wr,Qsr),e(wr,Ka),e(Ka,Hsr),e(Ka,Rbe),e(Rbe,Usr),e(Ka,Jsr),e(Ka,Pbe),e(Pbe,Ysr),e(Ka,Ksr),e(Ka,Bbe),e(Bbe,Zsr),e(Ka,elr),e(wr,olr),e(wr,N),e(N,OM),e(OM,Ibe),e(Ibe,rlr),e(OM,tlr),e(OM,Pz),e(Pz,alr),e(OM,nlr),e(N,slr),e(N,VM),e(VM,qbe),e(qbe,llr),e(VM,ilr),e(VM,Bz),e(Bz,dlr),e(VM,clr),e(N,mlr),e(N,XM),e(XM,Nbe),e(Nbe,flr),e(XM,glr),e(XM,Iz),e(Iz,hlr),e(XM,ulr),e(N,plr),e(N,zM),e(zM,jbe),e(jbe,_lr),e(zM,blr),e(zM,qz),e(qz,vlr),e(zM,Flr),e(N,Tlr),e(N,WM),e(WM,Dbe),e(Dbe,Mlr),e(WM,Elr),e(WM,Nz),e(Nz,Clr),e(WM,wlr),e(N,Alr),e(N,QM),e(QM,Gbe),e(Gbe,ylr),e(QM,Llr),e(QM,jz),e(jz,xlr),e(QM,$lr),e(N,klr),e(N,HM),e(HM,Obe),e(Obe,Slr),e(HM,Rlr),e(HM,Dz),e(Dz,Plr),e(HM,Blr),e(N,Ilr),e(N,UM),e(UM,Vbe),e(Vbe,qlr),e(UM,Nlr),e(UM,Gz),e(Gz,jlr),e(UM,Dlr),e(N,Glr),e(N,JM),e(JM,Xbe),e(Xbe,Olr),e(JM,Vlr),e(JM,Oz),e(Oz,Xlr),e(JM,zlr),e(N,Wlr),e(N,YM),e(YM,zbe),e(zbe,Qlr),e(YM,Hlr),e(YM,Vz),e(Vz,Ulr),e(YM,Jlr),e(N,Ylr),e(N,KM),e(KM,Wbe),e(Wbe,Klr),e(KM,Zlr),e(KM,Xz),e(Xz,eir),e(KM,oir),e(N,rir),e(N,ZM),e(ZM,Qbe),e(Qbe,tir),e(ZM,air),e(ZM,zz),e(zz,nir),e(ZM,sir),e(N,lir),e(N,e4),e(e4,Hbe),e(Hbe,iir),e(e4,dir),e(e4,Wz),e(Wz,cir),e(e4,mir),e(N,fir),e(N,o4),e(o4,Ube),e(Ube,gir),e(o4,hir),e(o4,Qz),e(Qz,uir),e(o4,pir),e(N,_ir),e(N,r4),e(r4,Jbe),e(Jbe,bir),e(r4,vir),e(r4,Hz),e(Hz,Fir),e(r4,Tir),e(N,Mir),e(N,t4),e(t4,Ybe),e(Ybe,Eir),e(t4,Cir),e(t4,Uz),e(Uz,wir),e(t4,Air),e(N,yir),e(N,a4),e(a4,Kbe),e(Kbe,Lir),e(a4,xir),e(a4,Jz),e(Jz,$ir),e(a4,kir),e(N,Sir),e(N,Bs),e(Bs,Zbe),e(Zbe,Rir),e(Bs,Pir),e(Bs,Yz),e(Yz,Bir),e(Bs,Iir),e(Bs,Kz),e(Kz,qir),e(Bs,Nir),e(N,jir),e(N,n4),e(n4,e2e),e(e2e,Dir),e(n4,Gir),e(n4,Zz),e(Zz,Oir),e(n4,Vir),e(N,Xir),e(N,s4),e(s4,o2e),e(o2e,zir),e(s4,Wir),e(s4,eW),e(eW,Qir),e(s4,Hir),e(N,Uir),e(N,l4),e(l4,r2e),e(r2e,Jir),e(l4,Yir),e(l4,oW),e(oW,Kir),e(l4,Zir),e(N,edr),e(N,i4),e(i4,t2e),e(t2e,odr),e(i4,rdr),e(i4,rW),e(rW,tdr),e(i4,adr),e(N,ndr),e(N,d4),e(d4,a2e),e(a2e,sdr),e(d4,ldr),e(d4,tW),e(tW,idr),e(d4,ddr),e(N,cdr),e(N,c4),e(c4,n2e),e(n2e,mdr),e(c4,fdr),e(c4,aW),e(aW,gdr),e(c4,hdr),e(N,udr),e(N,m4),e(m4,s2e),e(s2e,pdr),e(m4,_dr),e(m4,nW),e(nW,bdr),e(m4,vdr),e(N,Fdr),e(N,f4),e(f4,l2e),e(l2e,Tdr),e(f4,Mdr),e(f4,sW),e(sW,Edr),e(f4,Cdr),e(N,wdr),e(N,g4),e(g4,i2e),e(i2e,Adr),e(g4,ydr),e(g4,lW),e(lW,Ldr),e(g4,xdr),e(N,$dr),e(N,h4),e(h4,d2e),e(d2e,kdr),e(h4,Sdr),e(h4,iW),e(iW,Rdr),e(h4,Pdr),e(N,Bdr),e(N,u4),e(u4,c2e),e(c2e,Idr),e(u4,qdr),e(u4,dW),e(dW,Ndr),e(u4,jdr),e(N,Ddr),e(N,p4),e(p4,m2e),e(m2e,Gdr),e(p4,Odr),e(p4,cW),e(cW,Vdr),e(p4,Xdr),e(N,zdr),e(N,_4),e(_4,f2e),e(f2e,Wdr),e(_4,Qdr),e(_4,mW),e(mW,Hdr),e(_4,Udr),e(N,Jdr),e(N,b4),e(b4,g2e),e(g2e,Ydr),e(b4,Kdr),e(b4,fW),e(fW,Zdr),e(b4,ecr),e(N,ocr),e(N,v4),e(v4,h2e),e(h2e,rcr),e(v4,tcr),e(v4,gW),e(gW,acr),e(v4,ncr),e(N,scr),e(N,F4),e(F4,u2e),e(u2e,lcr),e(F4,icr),e(F4,hW),e(hW,dcr),e(F4,ccr),e(N,mcr),e(N,T4),e(T4,p2e),e(p2e,fcr),e(T4,gcr),e(T4,uW),e(uW,hcr),e(T4,ucr),e(N,pcr),e(N,M4),e(M4,_2e),e(_2e,_cr),e(M4,bcr),e(M4,pW),e(pW,vcr),e(M4,Fcr),e(N,Tcr),e(N,E4),e(E4,b2e),e(b2e,Mcr),e(E4,Ecr),e(E4,_W),e(_W,Ccr),e(E4,wcr),e(N,Acr),e(N,C4),e(C4,v2e),e(v2e,ycr),e(C4,Lcr),e(C4,bW),e(bW,xcr),e(C4,$cr),e(N,kcr),e(N,w4),e(w4,F2e),e(F2e,Scr),e(w4,Rcr),e(w4,vW),e(vW,Pcr),e(w4,Bcr),e(N,Icr),e(N,A4),e(A4,T2e),e(T2e,qcr),e(A4,Ncr),e(A4,FW),e(FW,jcr),e(A4,Dcr),e(N,Gcr),e(N,y4),e(y4,M2e),e(M2e,Ocr),e(y4,Vcr),e(y4,TW),e(TW,Xcr),e(y4,zcr),e(N,Wcr),e(N,L4),e(L4,E2e),e(E2e,Qcr),e(L4,Hcr),e(L4,MW),e(MW,Ucr),e(L4,Jcr),e(N,Ycr),e(N,x4),e(x4,C2e),e(C2e,Kcr),e(x4,Zcr),e(x4,EW),e(EW,emr),e(x4,omr),e(N,rmr),e(N,$4),e($4,w2e),e(w2e,tmr),e($4,amr),e($4,CW),e(CW,nmr),e($4,smr),e(N,lmr),e(N,k4),e(k4,A2e),e(A2e,imr),e(k4,dmr),e(k4,wW),e(wW,cmr),e(k4,mmr),e(N,fmr),e(N,S4),e(S4,y2e),e(y2e,gmr),e(S4,hmr),e(S4,AW),e(AW,umr),e(S4,pmr),e(wr,_mr),M(R4,wr,null),b(m,sNe,_),b(m,Vd,_),e(Vd,P4),e(P4,L2e),M(e7,L2e,null),e(Vd,bmr),e(Vd,x2e),e(x2e,vmr),b(m,lNe,_),b(m,Ko,_),M(o7,Ko,null),e(Ko,Fmr),e(Ko,Xd),e(Xd,Tmr),e(Xd,yW),e(yW,Mmr),e(Xd,Emr),e(Xd,LW),e(LW,Cmr),e(Xd,wmr),e(Ko,Amr),e(Ko,r7),e(r7,ymr),e(r7,$2e),e($2e,Lmr),e(r7,xmr),e(Ko,$mr),e(Ko,Lt),M(t7,Lt,null),e(Lt,kmr),e(Lt,k2e),e(k2e,Smr),e(Lt,Rmr),e(Lt,zd),e(zd,Pmr),e(zd,S2e),e(S2e,Bmr),e(zd,Imr),e(zd,xW),e(xW,qmr),e(zd,Nmr),e(Lt,jmr),M(B4,Lt,null),e(Ko,Dmr),e(Ko,Ar),M(a7,Ar,null),e(Ar,Gmr),e(Ar,R2e),e(R2e,Omr),e(Ar,Vmr),e(Ar,Za),e(Za,Xmr),e(Za,P2e),e(P2e,zmr),e(Za,Wmr),e(Za,B2e),e(B2e,Qmr),e(Za,Hmr),e(Za,I2e),e(I2e,Umr),e(Za,Jmr),e(Ar,Ymr),e(Ar,se),e(se,I4),e(I4,q2e),e(q2e,Kmr),e(I4,Zmr),e(I4,$W),e($W,efr),e(I4,ofr),e(se,rfr),e(se,q4),e(q4,N2e),e(N2e,tfr),e(q4,afr),e(q4,kW),e(kW,nfr),e(q4,sfr),e(se,lfr),e(se,N4),e(N4,j2e),e(j2e,ifr),e(N4,dfr),e(N4,SW),e(SW,cfr),e(N4,mfr),e(se,ffr),e(se,j4),e(j4,D2e),e(D2e,gfr),e(j4,hfr),e(j4,RW),e(RW,ufr),e(j4,pfr),e(se,_fr),e(se,D4),e(D4,G2e),e(G2e,bfr),e(D4,vfr),e(D4,PW),e(PW,Ffr),e(D4,Tfr),e(se,Mfr),e(se,G4),e(G4,O2e),e(O2e,Efr),e(G4,Cfr),e(G4,BW),e(BW,wfr),e(G4,Afr),e(se,yfr),e(se,O4),e(O4,V2e),e(V2e,Lfr),e(O4,xfr),e(O4,IW),e(IW,$fr),e(O4,kfr),e(se,Sfr),e(se,V4),e(V4,X2e),e(X2e,Rfr),e(V4,Pfr),e(V4,qW),e(qW,Bfr),e(V4,Ifr),e(se,qfr),e(se,X4),e(X4,z2e),e(z2e,Nfr),e(X4,jfr),e(X4,NW),e(NW,Dfr),e(X4,Gfr),e(se,Ofr),e(se,z4),e(z4,W2e),e(W2e,Vfr),e(z4,Xfr),e(z4,jW),e(jW,zfr),e(z4,Wfr),e(se,Qfr),e(se,W4),e(W4,Q2e),e(Q2e,Hfr),e(W4,Ufr),e(W4,DW),e(DW,Jfr),e(W4,Yfr),e(se,Kfr),e(se,Q4),e(Q4,H2e),e(H2e,Zfr),e(Q4,egr),e(Q4,GW),e(GW,ogr),e(Q4,rgr),e(se,tgr),e(se,H4),e(H4,U2e),e(U2e,agr),e(H4,ngr),e(H4,OW),e(OW,sgr),e(H4,lgr),e(se,igr),e(se,U4),e(U4,J2e),e(J2e,dgr),e(U4,cgr),e(U4,VW),e(VW,mgr),e(U4,fgr),e(se,ggr),e(se,J4),e(J4,Y2e),e(Y2e,hgr),e(J4,ugr),e(J4,XW),e(XW,pgr),e(J4,_gr),e(se,bgr),e(se,Y4),e(Y4,K2e),e(K2e,vgr),e(Y4,Fgr),e(Y4,zW),e(zW,Tgr),e(Y4,Mgr),e(se,Egr),e(se,K4),e(K4,Z2e),e(Z2e,Cgr),e(K4,wgr),e(K4,WW),e(WW,Agr),e(K4,ygr),e(se,Lgr),e(se,Z4),e(Z4,eve),e(eve,xgr),e(Z4,$gr),e(Z4,QW),e(QW,kgr),e(Z4,Sgr),e(se,Rgr),e(se,eE),e(eE,ove),e(ove,Pgr),e(eE,Bgr),e(eE,HW),e(HW,Igr),e(eE,qgr),e(se,Ngr),e(se,oE),e(oE,rve),e(rve,jgr),e(oE,Dgr),e(oE,UW),e(UW,Ggr),e(oE,Ogr),e(se,Vgr),e(se,rE),e(rE,tve),e(tve,Xgr),e(rE,zgr),e(rE,JW),e(JW,Wgr),e(rE,Qgr),e(se,Hgr),e(se,tE),e(tE,ave),e(ave,Ugr),e(tE,Jgr),e(tE,YW),e(YW,Ygr),e(tE,Kgr),e(se,Zgr),e(se,aE),e(aE,nve),e(nve,ehr),e(aE,ohr),e(aE,KW),e(KW,rhr),e(aE,thr),e(Ar,ahr),M(nE,Ar,null),b(m,iNe,_),b(m,Wd,_),e(Wd,sE),e(sE,sve),M(n7,sve,null),e(Wd,nhr),e(Wd,lve),e(lve,shr),b(m,dNe,_),b(m,Zo,_),M(s7,Zo,null),e(Zo,lhr),e(Zo,Qd),e(Qd,ihr),e(Qd,ZW),e(ZW,dhr),e(Qd,chr),e(Qd,eQ),e(eQ,mhr),e(Qd,fhr),e(Zo,ghr),e(Zo,l7),e(l7,hhr),e(l7,ive),e(ive,uhr),e(l7,phr),e(Zo,_hr),e(Zo,xt),M(i7,xt,null),e(xt,bhr),e(xt,dve),e(dve,vhr),e(xt,Fhr),e(xt,Hd),e(Hd,Thr),e(Hd,cve),e(cve,Mhr),e(Hd,Ehr),e(Hd,oQ),e(oQ,Chr),e(Hd,whr),e(xt,Ahr),M(lE,xt,null),e(Zo,yhr),e(Zo,yr),M(d7,yr,null),e(yr,Lhr),e(yr,mve),e(mve,xhr),e(yr,$hr),e(yr,en),e(en,khr),e(en,fve),e(fve,Shr),e(en,Rhr),e(en,gve),e(gve,Phr),e(en,Bhr),e(en,hve),e(hve,Ihr),e(en,qhr),e(yr,Nhr),e(yr,Me),e(Me,iE),e(iE,uve),e(uve,jhr),e(iE,Dhr),e(iE,rQ),e(rQ,Ghr),e(iE,Ohr),e(Me,Vhr),e(Me,dE),e(dE,pve),e(pve,Xhr),e(dE,zhr),e(dE,tQ),e(tQ,Whr),e(dE,Qhr),e(Me,Hhr),e(Me,cE),e(cE,_ve),e(_ve,Uhr),e(cE,Jhr),e(cE,aQ),e(aQ,Yhr),e(cE,Khr),e(Me,Zhr),e(Me,mE),e(mE,bve),e(bve,eur),e(mE,our),e(mE,nQ),e(nQ,rur),e(mE,tur),e(Me,aur),e(Me,fE),e(fE,vve),e(vve,nur),e(fE,sur),e(fE,sQ),e(sQ,lur),e(fE,iur),e(Me,dur),e(Me,gE),e(gE,Fve),e(Fve,cur),e(gE,mur),e(gE,lQ),e(lQ,fur),e(gE,gur),e(Me,hur),e(Me,hE),e(hE,Tve),e(Tve,uur),e(hE,pur),e(hE,iQ),e(iQ,_ur),e(hE,bur),e(Me,vur),e(Me,uE),e(uE,Mve),e(Mve,Fur),e(uE,Tur),e(uE,dQ),e(dQ,Mur),e(uE,Eur),e(Me,Cur),e(Me,pE),e(pE,Eve),e(Eve,wur),e(pE,Aur),e(pE,cQ),e(cQ,yur),e(pE,Lur),e(Me,xur),e(Me,_E),e(_E,Cve),e(Cve,$ur),e(_E,kur),e(_E,mQ),e(mQ,Sur),e(_E,Rur),e(Me,Pur),e(Me,bE),e(bE,wve),e(wve,Bur),e(bE,Iur),e(bE,fQ),e(fQ,qur),e(bE,Nur),e(Me,jur),e(Me,vE),e(vE,Ave),e(Ave,Dur),e(vE,Gur),e(vE,gQ),e(gQ,Our),e(vE,Vur),e(yr,Xur),M(FE,yr,null),b(m,cNe,_),b(m,Ud,_),e(Ud,TE),e(TE,yve),M(c7,yve,null),e(Ud,zur),e(Ud,Lve),e(Lve,Wur),b(m,mNe,_),b(m,er,_),M(m7,er,null),e(er,Qur),e(er,Jd),e(Jd,Hur),e(Jd,hQ),e(hQ,Uur),e(Jd,Jur),e(Jd,uQ),e(uQ,Yur),e(Jd,Kur),e(er,Zur),e(er,f7),e(f7,epr),e(f7,xve),e(xve,opr),e(f7,rpr),e(er,tpr),e(er,$t),M(g7,$t,null),e($t,apr),e($t,$ve),e($ve,npr),e($t,spr),e($t,Yd),e(Yd,lpr),e(Yd,kve),e(kve,ipr),e(Yd,dpr),e(Yd,pQ),e(pQ,cpr),e(Yd,mpr),e($t,fpr),M(ME,$t,null),e(er,gpr),e(er,Lr),M(h7,Lr,null),e(Lr,hpr),e(Lr,Sve),e(Sve,upr),e(Lr,ppr),e(Lr,on),e(on,_pr),e(on,Rve),e(Rve,bpr),e(on,vpr),e(on,Pve),e(Pve,Fpr),e(on,Tpr),e(on,Bve),e(Bve,Mpr),e(on,Epr),e(Lr,Cpr),e(Lr,rn),e(rn,EE),e(EE,Ive),e(Ive,wpr),e(EE,Apr),e(EE,_Q),e(_Q,ypr),e(EE,Lpr),e(rn,xpr),e(rn,CE),e(CE,qve),e(qve,$pr),e(CE,kpr),e(CE,bQ),e(bQ,Spr),e(CE,Rpr),e(rn,Ppr),e(rn,wE),e(wE,Nve),e(Nve,Bpr),e(wE,Ipr),e(wE,vQ),e(vQ,qpr),e(wE,Npr),e(rn,jpr),e(rn,AE),e(AE,jve),e(jve,Dpr),e(AE,Gpr),e(AE,FQ),e(FQ,Opr),e(AE,Vpr),e(Lr,Xpr),M(yE,Lr,null),b(m,fNe,_),b(m,Kd,_),e(Kd,LE),e(LE,Dve),M(u7,Dve,null),e(Kd,zpr),e(Kd,Gve),e(Gve,Wpr),b(m,gNe,_),b(m,or,_),M(p7,or,null),e(or,Qpr),e(or,Zd),e(Zd,Hpr),e(Zd,TQ),e(TQ,Upr),e(Zd,Jpr),e(Zd,MQ),e(MQ,Ypr),e(Zd,Kpr),e(or,Zpr),e(or,_7),e(_7,e_r),e(_7,Ove),e(Ove,o_r),e(_7,r_r),e(or,t_r),e(or,kt),M(b7,kt,null),e(kt,a_r),e(kt,Vve),e(Vve,n_r),e(kt,s_r),e(kt,ec),e(ec,l_r),e(ec,Xve),e(Xve,i_r),e(ec,d_r),e(ec,EQ),e(EQ,c_r),e(ec,m_r),e(kt,f_r),M(xE,kt,null),e(or,g_r),e(or,xr),M(v7,xr,null),e(xr,h_r),e(xr,zve),e(zve,u_r),e(xr,p_r),e(xr,tn),e(tn,__r),e(tn,Wve),e(Wve,b_r),e(tn,v_r),e(tn,Qve),e(Qve,F_r),e(tn,T_r),e(tn,Hve),e(Hve,M_r),e(tn,E_r),e(xr,C_r),e(xr,ie),e(ie,$E),e($E,Uve),e(Uve,w_r),e($E,A_r),e($E,CQ),e(CQ,y_r),e($E,L_r),e(ie,x_r),e(ie,kE),e(kE,Jve),e(Jve,$_r),e(kE,k_r),e(kE,wQ),e(wQ,S_r),e(kE,R_r),e(ie,P_r),e(ie,SE),e(SE,Yve),e(Yve,B_r),e(SE,I_r),e(SE,AQ),e(AQ,q_r),e(SE,N_r),e(ie,j_r),e(ie,RE),e(RE,Kve),e(Kve,D_r),e(RE,G_r),e(RE,yQ),e(yQ,O_r),e(RE,V_r),e(ie,X_r),e(ie,PE),e(PE,Zve),e(Zve,z_r),e(PE,W_r),e(PE,LQ),e(LQ,Q_r),e(PE,H_r),e(ie,U_r),e(ie,BE),e(BE,eFe),e(eFe,J_r),e(BE,Y_r),e(BE,xQ),e(xQ,K_r),e(BE,Z_r),e(ie,ebr),e(ie,IE),e(IE,oFe),e(oFe,obr),e(IE,rbr),e(IE,$Q),e($Q,tbr),e(IE,abr),e(ie,nbr),e(ie,qE),e(qE,rFe),e(rFe,sbr),e(qE,lbr),e(qE,kQ),e(kQ,ibr),e(qE,dbr),e(ie,cbr),e(ie,NE),e(NE,tFe),e(tFe,mbr),e(NE,fbr),e(NE,SQ),e(SQ,gbr),e(NE,hbr),e(ie,ubr),e(ie,jE),e(jE,aFe),e(aFe,pbr),e(jE,_br),e(jE,RQ),e(RQ,bbr),e(jE,vbr),e(ie,Fbr),e(ie,DE),e(DE,nFe),e(nFe,Tbr),e(DE,Mbr),e(DE,PQ),e(PQ,Ebr),e(DE,Cbr),e(ie,wbr),e(ie,GE),e(GE,sFe),e(sFe,Abr),e(GE,ybr),e(GE,BQ),e(BQ,Lbr),e(GE,xbr),e(ie,$br),e(ie,OE),e(OE,lFe),e(lFe,kbr),e(OE,Sbr),e(OE,IQ),e(IQ,Rbr),e(OE,Pbr),e(ie,Bbr),e(ie,VE),e(VE,iFe),e(iFe,Ibr),e(VE,qbr),e(VE,qQ),e(qQ,Nbr),e(VE,jbr),e(ie,Dbr),e(ie,XE),e(XE,dFe),e(dFe,Gbr),e(XE,Obr),e(XE,NQ),e(NQ,Vbr),e(XE,Xbr),e(ie,zbr),e(ie,zE),e(zE,cFe),e(cFe,Wbr),e(zE,Qbr),e(zE,jQ),e(jQ,Hbr),e(zE,Ubr),e(ie,Jbr),e(ie,WE),e(WE,mFe),e(mFe,Ybr),e(WE,Kbr),e(WE,DQ),e(DQ,Zbr),e(WE,e2r),e(ie,o2r),e(ie,QE),e(QE,fFe),e(fFe,r2r),e(QE,t2r),e(QE,GQ),e(GQ,a2r),e(QE,n2r),e(ie,s2r),e(ie,HE),e(HE,gFe),e(gFe,l2r),e(HE,i2r),e(HE,OQ),e(OQ,d2r),e(HE,c2r),e(ie,m2r),e(ie,UE),e(UE,hFe),e(hFe,f2r),e(UE,g2r),e(UE,VQ),e(VQ,h2r),e(UE,u2r),e(xr,p2r),M(JE,xr,null),b(m,hNe,_),b(m,oc,_),e(oc,YE),e(YE,uFe),M(F7,uFe,null),e(oc,_2r),e(oc,pFe),e(pFe,b2r),b(m,uNe,_),b(m,rr,_),M(T7,rr,null),e(rr,v2r),e(rr,rc),e(rc,F2r),e(rc,XQ),e(XQ,T2r),e(rc,M2r),e(rc,zQ),e(zQ,E2r),e(rc,C2r),e(rr,w2r),e(rr,M7),e(M7,A2r),e(M7,_Fe),e(_Fe,y2r),e(M7,L2r),e(rr,x2r),e(rr,St),M(E7,St,null),e(St,$2r),e(St,bFe),e(bFe,k2r),e(St,S2r),e(St,tc),e(tc,R2r),e(tc,vFe),e(vFe,P2r),e(tc,B2r),e(tc,WQ),e(WQ,I2r),e(tc,q2r),e(St,N2r),M(KE,St,null),e(rr,j2r),e(rr,$r),M(C7,$r,null),e($r,D2r),e($r,FFe),e(FFe,G2r),e($r,O2r),e($r,an),e(an,V2r),e(an,TFe),e(TFe,X2r),e(an,z2r),e(an,MFe),e(MFe,W2r),e(an,Q2r),e(an,EFe),e(EFe,H2r),e(an,U2r),e($r,J2r),e($r,ye),e(ye,ZE),e(ZE,CFe),e(CFe,Y2r),e(ZE,K2r),e(ZE,QQ),e(QQ,Z2r),e(ZE,evr),e(ye,ovr),e(ye,eC),e(eC,wFe),e(wFe,rvr),e(eC,tvr),e(eC,HQ),e(HQ,avr),e(eC,nvr),e(ye,svr),e(ye,oC),e(oC,AFe),e(AFe,lvr),e(oC,ivr),e(oC,UQ),e(UQ,dvr),e(oC,cvr),e(ye,mvr),e(ye,rC),e(rC,yFe),e(yFe,fvr),e(rC,gvr),e(rC,JQ),e(JQ,hvr),e(rC,uvr),e(ye,pvr),e(ye,tC),e(tC,LFe),e(LFe,_vr),e(tC,bvr),e(tC,YQ),e(YQ,vvr),e(tC,Fvr),e(ye,Tvr),e(ye,aC),e(aC,xFe),e(xFe,Mvr),e(aC,Evr),e(aC,KQ),e(KQ,Cvr),e(aC,wvr),e(ye,Avr),e(ye,nC),e(nC,$Fe),e($Fe,yvr),e(nC,Lvr),e(nC,ZQ),e(ZQ,xvr),e(nC,$vr),e(ye,kvr),e(ye,sC),e(sC,kFe),e(kFe,Svr),e(sC,Rvr),e(sC,eH),e(eH,Pvr),e(sC,Bvr),e(ye,Ivr),e(ye,lC),e(lC,SFe),e(SFe,qvr),e(lC,Nvr),e(lC,oH),e(oH,jvr),e(lC,Dvr),e(ye,Gvr),e(ye,iC),e(iC,RFe),e(RFe,Ovr),e(iC,Vvr),e(iC,rH),e(rH,Xvr),e(iC,zvr),e($r,Wvr),M(dC,$r,null),b(m,pNe,_),b(m,ac,_),e(ac,cC),e(cC,PFe),M(w7,PFe,null),e(ac,Qvr),e(ac,BFe),e(BFe,Hvr),b(m,_Ne,_),b(m,tr,_),M(A7,tr,null),e(tr,Uvr),e(tr,nc),e(nc,Jvr),e(nc,tH),e(tH,Yvr),e(nc,Kvr),e(nc,aH),e(aH,Zvr),e(nc,eFr),e(tr,oFr),e(tr,y7),e(y7,rFr),e(y7,IFe),e(IFe,tFr),e(y7,aFr),e(tr,nFr),e(tr,Rt),M(L7,Rt,null),e(Rt,sFr),e(Rt,qFe),e(qFe,lFr),e(Rt,iFr),e(Rt,sc),e(sc,dFr),e(sc,NFe),e(NFe,cFr),e(sc,mFr),e(sc,nH),e(nH,fFr),e(sc,gFr),e(Rt,hFr),M(mC,Rt,null),e(tr,uFr),e(tr,kr),M(x7,kr,null),e(kr,pFr),e(kr,jFe),e(jFe,_Fr),e(kr,bFr),e(kr,nn),e(nn,vFr),e(nn,DFe),e(DFe,FFr),e(nn,TFr),e(nn,GFe),e(GFe,MFr),e(nn,EFr),e(nn,OFe),e(OFe,CFr),e(nn,wFr),e(kr,AFr),e(kr,ee),e(ee,fC),e(fC,VFe),e(VFe,yFr),e(fC,LFr),e(fC,sH),e(sH,xFr),e(fC,$Fr),e(ee,kFr),e(ee,gC),e(gC,XFe),e(XFe,SFr),e(gC,RFr),e(gC,lH),e(lH,PFr),e(gC,BFr),e(ee,IFr),e(ee,hC),e(hC,zFe),e(zFe,qFr),e(hC,NFr),e(hC,iH),e(iH,jFr),e(hC,DFr),e(ee,GFr),e(ee,uC),e(uC,WFe),e(WFe,OFr),e(uC,VFr),e(uC,dH),e(dH,XFr),e(uC,zFr),e(ee,WFr),e(ee,pC),e(pC,QFe),e(QFe,QFr),e(pC,HFr),e(pC,cH),e(cH,UFr),e(pC,JFr),e(ee,YFr),e(ee,_C),e(_C,HFe),e(HFe,KFr),e(_C,ZFr),e(_C,mH),e(mH,e1r),e(_C,o1r),e(ee,r1r),e(ee,bC),e(bC,UFe),e(UFe,t1r),e(bC,a1r),e(bC,fH),e(fH,n1r),e(bC,s1r),e(ee,l1r),e(ee,vC),e(vC,JFe),e(JFe,i1r),e(vC,d1r),e(vC,gH),e(gH,c1r),e(vC,m1r),e(ee,f1r),e(ee,FC),e(FC,YFe),e(YFe,g1r),e(FC,h1r),e(FC,hH),e(hH,u1r),e(FC,p1r),e(ee,_1r),e(ee,TC),e(TC,KFe),e(KFe,b1r),e(TC,v1r),e(TC,uH),e(uH,F1r),e(TC,T1r),e(ee,M1r),e(ee,MC),e(MC,ZFe),e(ZFe,E1r),e(MC,C1r),e(MC,pH),e(pH,w1r),e(MC,A1r),e(ee,y1r),e(ee,EC),e(EC,e1e),e(e1e,L1r),e(EC,x1r),e(EC,_H),e(_H,$1r),e(EC,k1r),e(ee,S1r),e(ee,CC),e(CC,o1e),e(o1e,R1r),e(CC,P1r),e(CC,bH),e(bH,B1r),e(CC,I1r),e(ee,q1r),e(ee,wC),e(wC,r1e),e(r1e,N1r),e(wC,j1r),e(wC,vH),e(vH,D1r),e(wC,G1r),e(ee,O1r),e(ee,AC),e(AC,t1e),e(t1e,V1r),e(AC,X1r),e(AC,FH),e(FH,z1r),e(AC,W1r),e(ee,Q1r),e(ee,yC),e(yC,a1e),e(a1e,H1r),e(yC,U1r),e(yC,TH),e(TH,J1r),e(yC,Y1r),e(ee,K1r),e(ee,LC),e(LC,n1e),e(n1e,Z1r),e(LC,eTr),e(LC,MH),e(MH,oTr),e(LC,rTr),e(ee,tTr),e(ee,xC),e(xC,s1e),e(s1e,aTr),e(xC,nTr),e(xC,EH),e(EH,sTr),e(xC,lTr),e(ee,iTr),e(ee,$C),e($C,l1e),e(l1e,dTr),e($C,cTr),e($C,CH),e(CH,mTr),e($C,fTr),e(ee,gTr),e(ee,kC),e(kC,i1e),e(i1e,hTr),e(kC,uTr),e(kC,wH),e(wH,pTr),e(kC,_Tr),e(ee,bTr),e(ee,SC),e(SC,d1e),e(d1e,vTr),e(SC,FTr),e(SC,AH),e(AH,TTr),e(SC,MTr),e(ee,ETr),e(ee,RC),e(RC,c1e),e(c1e,CTr),e(RC,wTr),e(RC,yH),e(yH,ATr),e(RC,yTr),e(ee,LTr),e(ee,PC),e(PC,m1e),e(m1e,xTr),e(PC,$Tr),e(PC,LH),e(LH,kTr),e(PC,STr),e(ee,RTr),e(ee,BC),e(BC,f1e),e(f1e,PTr),e(BC,BTr),e(BC,xH),e(xH,ITr),e(BC,qTr),e(ee,NTr),e(ee,IC),e(IC,g1e),e(g1e,jTr),e(IC,DTr),e(IC,$H),e($H,GTr),e(IC,OTr),e(ee,VTr),e(ee,qC),e(qC,h1e),e(h1e,XTr),e(qC,zTr),e(qC,kH),e(kH,WTr),e(qC,QTr),e(kr,HTr),M(NC,kr,null),b(m,bNe,_),b(m,lc,_),e(lc,jC),e(jC,u1e),M($7,u1e,null),e(lc,UTr),e(lc,p1e),e(p1e,JTr),b(m,vNe,_),b(m,ar,_),M(k7,ar,null),e(ar,YTr),e(ar,ic),e(ic,KTr),e(ic,SH),e(SH,ZTr),e(ic,eMr),e(ic,RH),e(RH,oMr),e(ic,rMr),e(ar,tMr),e(ar,S7),e(S7,aMr),e(S7,_1e),e(_1e,nMr),e(S7,sMr),e(ar,lMr),e(ar,Pt),M(R7,Pt,null),e(Pt,iMr),e(Pt,b1e),e(b1e,dMr),e(Pt,cMr),e(Pt,dc),e(dc,mMr),e(dc,v1e),e(v1e,fMr),e(dc,gMr),e(dc,PH),e(PH,hMr),e(dc,uMr),e(Pt,pMr),M(DC,Pt,null),e(ar,_Mr),e(ar,Sr),M(P7,Sr,null),e(Sr,bMr),e(Sr,F1e),e(F1e,vMr),e(Sr,FMr),e(Sr,sn),e(sn,TMr),e(sn,T1e),e(T1e,MMr),e(sn,EMr),e(sn,M1e),e(M1e,CMr),e(sn,wMr),e(sn,E1e),e(E1e,AMr),e(sn,yMr),e(Sr,LMr),e(Sr,he),e(he,GC),e(GC,C1e),e(C1e,xMr),e(GC,$Mr),e(GC,BH),e(BH,kMr),e(GC,SMr),e(he,RMr),e(he,OC),e(OC,w1e),e(w1e,PMr),e(OC,BMr),e(OC,IH),e(IH,IMr),e(OC,qMr),e(he,NMr),e(he,VC),e(VC,A1e),e(A1e,jMr),e(VC,DMr),e(VC,qH),e(qH,GMr),e(VC,OMr),e(he,VMr),e(he,XC),e(XC,y1e),e(y1e,XMr),e(XC,zMr),e(XC,NH),e(NH,WMr),e(XC,QMr),e(he,HMr),e(he,zC),e(zC,L1e),e(L1e,UMr),e(zC,JMr),e(zC,jH),e(jH,YMr),e(zC,KMr),e(he,ZMr),e(he,WC),e(WC,x1e),e(x1e,e4r),e(WC,o4r),e(WC,DH),e(DH,r4r),e(WC,t4r),e(he,a4r),e(he,QC),e(QC,$1e),e($1e,n4r),e(QC,s4r),e(QC,GH),e(GH,l4r),e(QC,i4r),e(he,d4r),e(he,HC),e(HC,k1e),e(k1e,c4r),e(HC,m4r),e(HC,OH),e(OH,f4r),e(HC,g4r),e(he,h4r),e(he,UC),e(UC,S1e),e(S1e,u4r),e(UC,p4r),e(UC,VH),e(VH,_4r),e(UC,b4r),e(he,v4r),e(he,JC),e(JC,R1e),e(R1e,F4r),e(JC,T4r),e(JC,XH),e(XH,M4r),e(JC,E4r),e(he,C4r),e(he,YC),e(YC,P1e),e(P1e,w4r),e(YC,A4r),e(YC,zH),e(zH,y4r),e(YC,L4r),e(he,x4r),e(he,KC),e(KC,B1e),e(B1e,$4r),e(KC,k4r),e(KC,WH),e(WH,S4r),e(KC,R4r),e(he,P4r),e(he,ZC),e(ZC,I1e),e(I1e,B4r),e(ZC,I4r),e(ZC,QH),e(QH,q4r),e(ZC,N4r),e(he,j4r),e(he,e5),e(e5,q1e),e(q1e,D4r),e(e5,G4r),e(e5,HH),e(HH,O4r),e(e5,V4r),e(he,X4r),e(he,o5),e(o5,N1e),e(N1e,z4r),e(o5,W4r),e(o5,UH),e(UH,Q4r),e(o5,H4r),e(he,U4r),e(he,r5),e(r5,j1e),e(j1e,J4r),e(r5,Y4r),e(r5,JH),e(JH,K4r),e(r5,Z4r),e(he,eEr),e(he,t5),e(t5,D1e),e(D1e,oEr),e(t5,rEr),e(t5,YH),e(YH,tEr),e(t5,aEr),e(Sr,nEr),M(a5,Sr,null),b(m,FNe,_),b(m,cc,_),e(cc,n5),e(n5,G1e),M(B7,G1e,null),e(cc,sEr),e(cc,O1e),e(O1e,lEr),b(m,TNe,_),b(m,nr,_),M(I7,nr,null),e(nr,iEr),e(nr,mc),e(mc,dEr),e(mc,KH),e(KH,cEr),e(mc,mEr),e(mc,ZH),e(ZH,fEr),e(mc,gEr),e(nr,hEr),e(nr,q7),e(q7,uEr),e(q7,V1e),e(V1e,pEr),e(q7,_Er),e(nr,bEr),e(nr,Bt),M(N7,Bt,null),e(Bt,vEr),e(Bt,X1e),e(X1e,FEr),e(Bt,TEr),e(Bt,fc),e(fc,MEr),e(fc,z1e),e(z1e,EEr),e(fc,CEr),e(fc,eU),e(eU,wEr),e(fc,AEr),e(Bt,yEr),M(s5,Bt,null),e(nr,LEr),e(nr,Rr),M(j7,Rr,null),e(Rr,xEr),e(Rr,W1e),e(W1e,$Er),e(Rr,kEr),e(Rr,ln),e(ln,SEr),e(ln,Q1e),e(Q1e,REr),e(ln,PEr),e(ln,H1e),e(H1e,BEr),e(ln,IEr),e(ln,U1e),e(U1e,qEr),e(ln,NEr),e(Rr,jEr),e(Rr,D7),e(D7,l5),e(l5,J1e),e(J1e,DEr),e(l5,GEr),e(l5,oU),e(oU,OEr),e(l5,VEr),e(D7,XEr),e(D7,i5),e(i5,Y1e),e(Y1e,zEr),e(i5,WEr),e(i5,rU),e(rU,QEr),e(i5,HEr),e(Rr,UEr),M(d5,Rr,null),b(m,MNe,_),b(m,gc,_),e(gc,c5),e(c5,K1e),M(G7,K1e,null),e(gc,JEr),e(gc,Z1e),e(Z1e,YEr),b(m,ENe,_),b(m,sr,_),M(O7,sr,null),e(sr,KEr),e(sr,hc),e(hc,ZEr),e(hc,tU),e(tU,eCr),e(hc,oCr),e(hc,aU),e(aU,rCr),e(hc,tCr),e(sr,aCr),e(sr,V7),e(V7,nCr),e(V7,eTe),e(eTe,sCr),e(V7,lCr),e(sr,iCr),e(sr,It),M(X7,It,null),e(It,dCr),e(It,oTe),e(oTe,cCr),e(It,mCr),e(It,uc),e(uc,fCr),e(uc,rTe),e(rTe,gCr),e(uc,hCr),e(uc,nU),e(nU,uCr),e(uc,pCr),e(It,_Cr),M(m5,It,null),e(sr,bCr),e(sr,Pr),M(z7,Pr,null),e(Pr,vCr),e(Pr,tTe),e(tTe,FCr),e(Pr,TCr),e(Pr,dn),e(dn,MCr),e(dn,aTe),e(aTe,ECr),e(dn,CCr),e(dn,nTe),e(nTe,wCr),e(dn,ACr),e(dn,sTe),e(sTe,yCr),e(dn,LCr),e(Pr,xCr),e(Pr,lTe),e(lTe,f5),e(f5,iTe),e(iTe,$Cr),e(f5,kCr),e(f5,sU),e(sU,SCr),e(f5,RCr),e(Pr,PCr),M(g5,Pr,null),b(m,CNe,_),b(m,pc,_),e(pc,h5),e(h5,dTe),M(W7,dTe,null),e(pc,BCr),e(pc,cTe),e(cTe,ICr),b(m,wNe,_),b(m,lr,_),M(Q7,lr,null),e(lr,qCr),e(lr,_c),e(_c,NCr),e(_c,lU),e(lU,jCr),e(_c,DCr),e(_c,iU),e(iU,GCr),e(_c,OCr),e(lr,VCr),e(lr,H7),e(H7,XCr),e(H7,mTe),e(mTe,zCr),e(H7,WCr),e(lr,QCr),e(lr,qt),M(U7,qt,null),e(qt,HCr),e(qt,fTe),e(fTe,UCr),e(qt,JCr),e(qt,bc),e(bc,YCr),e(bc,gTe),e(gTe,KCr),e(bc,ZCr),e(bc,dU),e(dU,e5r),e(bc,o5r),e(qt,r5r),M(u5,qt,null),e(lr,t5r),e(lr,Br),M(J7,Br,null),e(Br,a5r),e(Br,hTe),e(hTe,n5r),e(Br,s5r),e(Br,cn),e(cn,l5r),e(cn,uTe),e(uTe,i5r),e(cn,d5r),e(cn,pTe),e(pTe,c5r),e(cn,m5r),e(cn,_Te),e(_Te,f5r),e(cn,g5r),e(Br,h5r),e(Br,de),e(de,p5),e(p5,bTe),e(bTe,u5r),e(p5,p5r),e(p5,cU),e(cU,_5r),e(p5,b5r),e(de,v5r),e(de,_5),e(_5,vTe),e(vTe,F5r),e(_5,T5r),e(_5,mU),e(mU,M5r),e(_5,E5r),e(de,C5r),e(de,b5),e(b5,FTe),e(FTe,w5r),e(b5,A5r),e(b5,fU),e(fU,y5r),e(b5,L5r),e(de,x5r),e(de,v5),e(v5,TTe),e(TTe,$5r),e(v5,k5r),e(v5,gU),e(gU,S5r),e(v5,R5r),e(de,P5r),e(de,F5),e(F5,MTe),e(MTe,B5r),e(F5,I5r),e(F5,hU),e(hU,q5r),e(F5,N5r),e(de,j5r),e(de,T5),e(T5,ETe),e(ETe,D5r),e(T5,G5r),e(T5,uU),e(uU,O5r),e(T5,V5r),e(de,X5r),e(de,M5),e(M5,CTe),e(CTe,z5r),e(M5,W5r),e(M5,pU),e(pU,Q5r),e(M5,H5r),e(de,U5r),e(de,E5),e(E5,wTe),e(wTe,J5r),e(E5,Y5r),e(E5,_U),e(_U,K5r),e(E5,Z5r),e(de,e3r),e(de,C5),e(C5,ATe),e(ATe,o3r),e(C5,r3r),e(C5,bU),e(bU,t3r),e(C5,a3r),e(de,n3r),e(de,w5),e(w5,yTe),e(yTe,s3r),e(w5,l3r),e(w5,vU),e(vU,i3r),e(w5,d3r),e(de,c3r),e(de,A5),e(A5,LTe),e(LTe,m3r),e(A5,f3r),e(A5,FU),e(FU,g3r),e(A5,h3r),e(de,u3r),e(de,y5),e(y5,xTe),e(xTe,p3r),e(y5,_3r),e(y5,TU),e(TU,b3r),e(y5,v3r),e(de,F3r),e(de,L5),e(L5,$Te),e($Te,T3r),e(L5,M3r),e(L5,MU),e(MU,E3r),e(L5,C3r),e(de,w3r),e(de,x5),e(x5,kTe),e(kTe,A3r),e(x5,y3r),e(x5,EU),e(EU,L3r),e(x5,x3r),e(de,$3r),e(de,$5),e($5,STe),e(STe,k3r),e($5,S3r),e($5,CU),e(CU,R3r),e($5,P3r),e(de,B3r),e(de,k5),e(k5,RTe),e(RTe,I3r),e(k5,q3r),e(k5,wU),e(wU,N3r),e(k5,j3r),e(de,D3r),e(de,S5),e(S5,PTe),e(PTe,G3r),e(S5,O3r),e(S5,AU),e(AU,V3r),e(S5,X3r),e(de,z3r),e(de,R5),e(R5,BTe),e(BTe,W3r),e(R5,Q3r),e(R5,yU),e(yU,H3r),e(R5,U3r),e(de,J3r),e(de,P5),e(P5,ITe),e(ITe,Y3r),e(P5,K3r),e(P5,LU),e(LU,Z3r),e(P5,ewr),e(de,owr),e(de,B5),e(B5,qTe),e(qTe,rwr),e(B5,twr),e(B5,xU),e(xU,awr),e(B5,nwr),e(Br,swr),M(I5,Br,null),b(m,ANe,_),b(m,vc,_),e(vc,q5),e(q5,NTe),M(Y7,NTe,null),e(vc,lwr),e(vc,jTe),e(jTe,iwr),b(m,yNe,_),b(m,ir,_),M(K7,ir,null),e(ir,dwr),e(ir,Fc),e(Fc,cwr),e(Fc,$U),e($U,mwr),e(Fc,fwr),e(Fc,kU),e(kU,gwr),e(Fc,hwr),e(ir,uwr),e(ir,Z7),e(Z7,pwr),e(Z7,DTe),e(DTe,_wr),e(Z7,bwr),e(ir,vwr),e(ir,Nt),M(e9,Nt,null),e(Nt,Fwr),e(Nt,GTe),e(GTe,Twr),e(Nt,Mwr),e(Nt,Tc),e(Tc,Ewr),e(Tc,OTe),e(OTe,Cwr),e(Tc,wwr),e(Tc,SU),e(SU,Awr),e(Tc,ywr),e(Nt,Lwr),M(N5,Nt,null),e(ir,xwr),e(ir,Ir),M(o9,Ir,null),e(Ir,$wr),e(Ir,VTe),e(VTe,kwr),e(Ir,Swr),e(Ir,mn),e(mn,Rwr),e(mn,XTe),e(XTe,Pwr),e(mn,Bwr),e(mn,zTe),e(zTe,Iwr),e(mn,qwr),e(mn,WTe),e(WTe,Nwr),e(mn,jwr),e(Ir,Dwr),e(Ir,ce),e(ce,j5),e(j5,QTe),e(QTe,Gwr),e(j5,Owr),e(j5,RU),e(RU,Vwr),e(j5,Xwr),e(ce,zwr),e(ce,D5),e(D5,HTe),e(HTe,Wwr),e(D5,Qwr),e(D5,PU),e(PU,Hwr),e(D5,Uwr),e(ce,Jwr),e(ce,G5),e(G5,UTe),e(UTe,Ywr),e(G5,Kwr),e(G5,BU),e(BU,Zwr),e(G5,e0r),e(ce,o0r),e(ce,O5),e(O5,JTe),e(JTe,r0r),e(O5,t0r),e(O5,IU),e(IU,a0r),e(O5,n0r),e(ce,s0r),e(ce,V5),e(V5,YTe),e(YTe,l0r),e(V5,i0r),e(V5,qU),e(qU,d0r),e(V5,c0r),e(ce,m0r),e(ce,X5),e(X5,KTe),e(KTe,f0r),e(X5,g0r),e(X5,NU),e(NU,h0r),e(X5,u0r),e(ce,p0r),e(ce,z5),e(z5,ZTe),e(ZTe,_0r),e(z5,b0r),e(z5,jU),e(jU,v0r),e(z5,F0r),e(ce,T0r),e(ce,W5),e(W5,eMe),e(eMe,M0r),e(W5,E0r),e(W5,DU),e(DU,C0r),e(W5,w0r),e(ce,A0r),e(ce,Q5),e(Q5,oMe),e(oMe,y0r),e(Q5,L0r),e(Q5,GU),e(GU,x0r),e(Q5,$0r),e(ce,k0r),e(ce,H5),e(H5,rMe),e(rMe,S0r),e(H5,R0r),e(H5,OU),e(OU,P0r),e(H5,B0r),e(ce,I0r),e(ce,U5),e(U5,tMe),e(tMe,q0r),e(U5,N0r),e(U5,VU),e(VU,j0r),e(U5,D0r),e(ce,G0r),e(ce,J5),e(J5,aMe),e(aMe,O0r),e(J5,V0r),e(J5,XU),e(XU,X0r),e(J5,z0r),e(ce,W0r),e(ce,Y5),e(Y5,nMe),e(nMe,Q0r),e(Y5,H0r),e(Y5,zU),e(zU,U0r),e(Y5,J0r),e(ce,Y0r),e(ce,K5),e(K5,sMe),e(sMe,K0r),e(K5,Z0r),e(K5,WU),e(WU,eAr),e(K5,oAr),e(ce,rAr),e(ce,Z5),e(Z5,lMe),e(lMe,tAr),e(Z5,aAr),e(Z5,QU),e(QU,nAr),e(Z5,sAr),e(ce,lAr),e(ce,e3),e(e3,iMe),e(iMe,iAr),e(e3,dAr),e(e3,HU),e(HU,cAr),e(e3,mAr),e(ce,fAr),e(ce,o3),e(o3,dMe),e(dMe,gAr),e(o3,hAr),e(o3,UU),e(UU,uAr),e(o3,pAr),e(ce,_Ar),e(ce,r3),e(r3,cMe),e(cMe,bAr),e(r3,vAr),e(r3,JU),e(JU,FAr),e(r3,TAr),e(ce,MAr),e(ce,t3),e(t3,mMe),e(mMe,EAr),e(t3,CAr),e(t3,YU),e(YU,wAr),e(t3,AAr),e(ce,yAr),e(ce,a3),e(a3,fMe),e(fMe,LAr),e(a3,xAr),e(a3,KU),e(KU,$Ar),e(a3,kAr),e(Ir,SAr),M(n3,Ir,null),b(m,LNe,_),b(m,Mc,_),e(Mc,s3),e(s3,gMe),M(r9,gMe,null),e(Mc,RAr),e(Mc,hMe),e(hMe,PAr),b(m,xNe,_),b(m,dr,_),M(t9,dr,null),e(dr,BAr),e(dr,Ec),e(Ec,IAr),e(Ec,ZU),e(ZU,qAr),e(Ec,NAr),e(Ec,eJ),e(eJ,jAr),e(Ec,DAr),e(dr,GAr),e(dr,a9),e(a9,OAr),e(a9,uMe),e(uMe,VAr),e(a9,XAr),e(dr,zAr),e(dr,jt),M(n9,jt,null),e(jt,WAr),e(jt,pMe),e(pMe,QAr),e(jt,HAr),e(jt,Cc),e(Cc,UAr),e(Cc,_Me),e(_Me,JAr),e(Cc,YAr),e(Cc,oJ),e(oJ,KAr),e(Cc,ZAr),e(jt,e6r),M(l3,jt,null),e(dr,o6r),e(dr,qr),M(s9,qr,null),e(qr,r6r),e(qr,bMe),e(bMe,t6r),e(qr,a6r),e(qr,fn),e(fn,n6r),e(fn,vMe),e(vMe,s6r),e(fn,l6r),e(fn,FMe),e(FMe,i6r),e(fn,d6r),e(fn,TMe),e(TMe,c6r),e(fn,m6r),e(qr,f6r),e(qr,MMe),e(MMe,i3),e(i3,EMe),e(EMe,g6r),e(i3,h6r),e(i3,rJ),e(rJ,u6r),e(i3,p6r),e(qr,_6r),M(d3,qr,null),b(m,$Ne,_),b(m,wc,_),e(wc,c3),e(c3,CMe),M(l9,CMe,null),e(wc,b6r),e(wc,wMe),e(wMe,v6r),b(m,kNe,_),b(m,cr,_),M(i9,cr,null),e(cr,F6r),e(cr,Ac),e(Ac,T6r),e(Ac,tJ),e(tJ,M6r),e(Ac,E6r),e(Ac,aJ),e(aJ,C6r),e(Ac,w6r),e(cr,A6r),e(cr,d9),e(d9,y6r),e(d9,AMe),e(AMe,L6r),e(d9,x6r),e(cr,$6r),e(cr,Dt),M(c9,Dt,null),e(Dt,k6r),e(Dt,yMe),e(yMe,S6r),e(Dt,R6r),e(Dt,yc),e(yc,P6r),e(yc,LMe),e(LMe,B6r),e(yc,I6r),e(yc,nJ),e(nJ,q6r),e(yc,N6r),e(Dt,j6r),M(m3,Dt,null),e(cr,D6r),e(cr,Nr),M(m9,Nr,null),e(Nr,G6r),e(Nr,xMe),e(xMe,O6r),e(Nr,V6r),e(Nr,gn),e(gn,X6r),e(gn,$Me),e($Me,z6r),e(gn,W6r),e(gn,kMe),e(kMe,Q6r),e(gn,H6r),e(gn,SMe),e(SMe,U6r),e(gn,J6r),e(Nr,Y6r),e(Nr,RMe),e(RMe,f3),e(f3,PMe),e(PMe,K6r),e(f3,Z6r),e(f3,sJ),e(sJ,eyr),e(f3,oyr),e(Nr,ryr),M(g3,Nr,null),b(m,SNe,_),b(m,Lc,_),e(Lc,h3),e(h3,BMe),M(f9,BMe,null),e(Lc,tyr),e(Lc,IMe),e(IMe,ayr),b(m,RNe,_),b(m,mr,_),M(g9,mr,null),e(mr,nyr),e(mr,xc),e(xc,syr),e(xc,lJ),e(lJ,lyr),e(xc,iyr),e(xc,iJ),e(iJ,dyr),e(xc,cyr),e(mr,myr),e(mr,h9),e(h9,fyr),e(h9,qMe),e(qMe,gyr),e(h9,hyr),e(mr,uyr),e(mr,Gt),M(u9,Gt,null),e(Gt,pyr),e(Gt,NMe),e(NMe,_yr),e(Gt,byr),e(Gt,$c),e($c,vyr),e($c,jMe),e(jMe,Fyr),e($c,Tyr),e($c,dJ),e(dJ,Myr),e($c,Eyr),e(Gt,Cyr),M(u3,Gt,null),e(mr,wyr),e(mr,jr),M(p9,jr,null),e(jr,Ayr),e(jr,DMe),e(DMe,yyr),e(jr,Lyr),e(jr,hn),e(hn,xyr),e(hn,GMe),e(GMe,$yr),e(hn,kyr),e(hn,OMe),e(OMe,Syr),e(hn,Ryr),e(hn,VMe),e(VMe,Pyr),e(hn,Byr),e(jr,Iyr),e(jr,te),e(te,p3),e(p3,XMe),e(XMe,qyr),e(p3,Nyr),e(p3,cJ),e(cJ,jyr),e(p3,Dyr),e(te,Gyr),e(te,_3),e(_3,zMe),e(zMe,Oyr),e(_3,Vyr),e(_3,mJ),e(mJ,Xyr),e(_3,zyr),e(te,Wyr),e(te,b3),e(b3,WMe),e(WMe,Qyr),e(b3,Hyr),e(b3,fJ),e(fJ,Uyr),e(b3,Jyr),e(te,Yyr),e(te,v3),e(v3,QMe),e(QMe,Kyr),e(v3,Zyr),e(v3,gJ),e(gJ,eLr),e(v3,oLr),e(te,rLr),e(te,F3),e(F3,HMe),e(HMe,tLr),e(F3,aLr),e(F3,hJ),e(hJ,nLr),e(F3,sLr),e(te,lLr),e(te,T3),e(T3,UMe),e(UMe,iLr),e(T3,dLr),e(T3,uJ),e(uJ,cLr),e(T3,mLr),e(te,fLr),e(te,M3),e(M3,JMe),e(JMe,gLr),e(M3,hLr),e(M3,pJ),e(pJ,uLr),e(M3,pLr),e(te,_Lr),e(te,E3),e(E3,YMe),e(YMe,bLr),e(E3,vLr),e(E3,_J),e(_J,FLr),e(E3,TLr),e(te,MLr),e(te,C3),e(C3,KMe),e(KMe,ELr),e(C3,CLr),e(C3,bJ),e(bJ,wLr),e(C3,ALr),e(te,yLr),e(te,w3),e(w3,ZMe),e(ZMe,LLr),e(w3,xLr),e(w3,vJ),e(vJ,$Lr),e(w3,kLr),e(te,SLr),e(te,A3),e(A3,e4e),e(e4e,RLr),e(A3,PLr),e(A3,FJ),e(FJ,BLr),e(A3,ILr),e(te,qLr),e(te,y3),e(y3,o4e),e(o4e,NLr),e(y3,jLr),e(y3,TJ),e(TJ,DLr),e(y3,GLr),e(te,OLr),e(te,L3),e(L3,r4e),e(r4e,VLr),e(L3,XLr),e(L3,MJ),e(MJ,zLr),e(L3,WLr),e(te,QLr),e(te,x3),e(x3,t4e),e(t4e,HLr),e(x3,ULr),e(x3,EJ),e(EJ,JLr),e(x3,YLr),e(te,KLr),e(te,$3),e($3,a4e),e(a4e,ZLr),e($3,e8r),e($3,CJ),e(CJ,o8r),e($3,r8r),e(te,t8r),e(te,k3),e(k3,n4e),e(n4e,a8r),e(k3,n8r),e(k3,wJ),e(wJ,s8r),e(k3,l8r),e(te,i8r),e(te,S3),e(S3,s4e),e(s4e,d8r),e(S3,c8r),e(S3,AJ),e(AJ,m8r),e(S3,f8r),e(te,g8r),e(te,R3),e(R3,l4e),e(l4e,h8r),e(R3,u8r),e(R3,yJ),e(yJ,p8r),e(R3,_8r),e(te,b8r),e(te,P3),e(P3,i4e),e(i4e,v8r),e(P3,F8r),e(P3,LJ),e(LJ,T8r),e(P3,M8r),e(te,E8r),e(te,B3),e(B3,d4e),e(d4e,C8r),e(B3,w8r),e(B3,xJ),e(xJ,A8r),e(B3,y8r),e(te,L8r),e(te,I3),e(I3,c4e),e(c4e,x8r),e(I3,$8r),e(I3,$J),e($J,k8r),e(I3,S8r),e(te,R8r),e(te,q3),e(q3,m4e),e(m4e,P8r),e(q3,B8r),e(q3,kJ),e(kJ,I8r),e(q3,q8r),e(te,N8r),e(te,N3),e(N3,f4e),e(f4e,j8r),e(N3,D8r),e(N3,SJ),e(SJ,G8r),e(N3,O8r),e(te,V8r),e(te,j3),e(j3,g4e),e(g4e,X8r),e(j3,z8r),e(j3,RJ),e(RJ,W8r),e(j3,Q8r),e(te,H8r),e(te,D3),e(D3,h4e),e(h4e,U8r),e(D3,J8r),e(D3,PJ),e(PJ,Y8r),e(D3,K8r),e(jr,Z8r),M(G3,jr,null),b(m,PNe,_),b(m,kc,_),e(kc,O3),e(O3,u4e),M(_9,u4e,null),e(kc,e7r),e(kc,p4e),e(p4e,o7r),b(m,BNe,_),b(m,fr,_),M(b9,fr,null),e(fr,r7r),e(fr,Sc),e(Sc,t7r),e(Sc,BJ),e(BJ,a7r),e(Sc,n7r),e(Sc,IJ),e(IJ,s7r),e(Sc,l7r),e(fr,i7r),e(fr,v9),e(v9,d7r),e(v9,_4e),e(_4e,c7r),e(v9,m7r),e(fr,f7r),e(fr,Ot),M(F9,Ot,null),e(Ot,g7r),e(Ot,b4e),e(b4e,h7r),e(Ot,u7r),e(Ot,Rc),e(Rc,p7r),e(Rc,v4e),e(v4e,_7r),e(Rc,b7r),e(Rc,qJ),e(qJ,v7r),e(Rc,F7r),e(Ot,T7r),M(V3,Ot,null),e(fr,M7r),e(fr,Dr),M(T9,Dr,null),e(Dr,E7r),e(Dr,F4e),e(F4e,C7r),e(Dr,w7r),e(Dr,un),e(un,A7r),e(un,T4e),e(T4e,y7r),e(un,L7r),e(un,M4e),e(M4e,x7r),e(un,$7r),e(un,E4e),e(E4e,k7r),e(un,S7r),e(Dr,R7r),e(Dr,Re),e(Re,X3),e(X3,C4e),e(C4e,P7r),e(X3,B7r),e(X3,NJ),e(NJ,I7r),e(X3,q7r),e(Re,N7r),e(Re,z3),e(z3,w4e),e(w4e,j7r),e(z3,D7r),e(z3,jJ),e(jJ,G7r),e(z3,O7r),e(Re,V7r),e(Re,W3),e(W3,A4e),e(A4e,X7r),e(W3,z7r),e(W3,DJ),e(DJ,W7r),e(W3,Q7r),e(Re,H7r),e(Re,Q3),e(Q3,y4e),e(y4e,U7r),e(Q3,J7r),e(Q3,GJ),e(GJ,Y7r),e(Q3,K7r),e(Re,Z7r),e(Re,H3),e(H3,L4e),e(L4e,e9r),e(H3,o9r),e(H3,OJ),e(OJ,r9r),e(H3,t9r),e(Re,a9r),e(Re,U3),e(U3,x4e),e(x4e,n9r),e(U3,s9r),e(U3,VJ),e(VJ,l9r),e(U3,i9r),e(Re,d9r),e(Re,J3),e(J3,$4e),e($4e,c9r),e(J3,m9r),e(J3,XJ),e(XJ,f9r),e(J3,g9r),e(Re,h9r),e(Re,Y3),e(Y3,k4e),e(k4e,u9r),e(Y3,p9r),e(Y3,zJ),e(zJ,_9r),e(Y3,b9r),e(Re,v9r),e(Re,K3),e(K3,S4e),e(S4e,F9r),e(K3,T9r),e(K3,WJ),e(WJ,M9r),e(K3,E9r),e(Dr,C9r),M(Z3,Dr,null),b(m,INe,_),b(m,Pc,_),e(Pc,ew),e(ew,R4e),M(M9,R4e,null),e(Pc,w9r),e(Pc,P4e),e(P4e,A9r),b(m,qNe,_),b(m,gr,_),M(E9,gr,null),e(gr,y9r),e(gr,Bc),e(Bc,L9r),e(Bc,QJ),e(QJ,x9r),e(Bc,$9r),e(Bc,HJ),e(HJ,k9r),e(Bc,S9r),e(gr,R9r),e(gr,C9),e(C9,P9r),e(C9,B4e),e(B4e,B9r),e(C9,I9r),e(gr,q9r),e(gr,Vt),M(w9,Vt,null),e(Vt,N9r),e(Vt,I4e),e(I4e,j9r),e(Vt,D9r),e(Vt,Ic),e(Ic,G9r),e(Ic,q4e),e(q4e,O9r),e(Ic,V9r),e(Ic,UJ),e(UJ,X9r),e(Ic,z9r),e(Vt,W9r),M(ow,Vt,null),e(gr,Q9r),e(gr,Gr),M(A9,Gr,null),e(Gr,H9r),e(Gr,N4e),e(N4e,U9r),e(Gr,J9r),e(Gr,pn),e(pn,Y9r),e(pn,j4e),e(j4e,K9r),e(pn,Z9r),e(pn,D4e),e(D4e,exr),e(pn,oxr),e(pn,G4e),e(G4e,rxr),e(pn,txr),e(Gr,axr),e(Gr,Ee),e(Ee,rw),e(rw,O4e),e(O4e,nxr),e(rw,sxr),e(rw,JJ),e(JJ,lxr),e(rw,ixr),e(Ee,dxr),e(Ee,tw),e(tw,V4e),e(V4e,cxr),e(tw,mxr),e(tw,YJ),e(YJ,fxr),e(tw,gxr),e(Ee,hxr),e(Ee,aw),e(aw,X4e),e(X4e,uxr),e(aw,pxr),e(aw,KJ),e(KJ,_xr),e(aw,bxr),e(Ee,vxr),e(Ee,nw),e(nw,z4e),e(z4e,Fxr),e(nw,Txr),e(nw,ZJ),e(ZJ,Mxr),e(nw,Exr),e(Ee,Cxr),e(Ee,sw),e(sw,W4e),e(W4e,wxr),e(sw,Axr),e(sw,eY),e(eY,yxr),e(sw,Lxr),e(Ee,xxr),e(Ee,lw),e(lw,Q4e),e(Q4e,$xr),e(lw,kxr),e(lw,oY),e(oY,Sxr),e(lw,Rxr),e(Ee,Pxr),e(Ee,iw),e(iw,H4e),e(H4e,Bxr),e(iw,Ixr),e(iw,rY),e(rY,qxr),e(iw,Nxr),e(Ee,jxr),e(Ee,dw),e(dw,U4e),e(U4e,Dxr),e(dw,Gxr),e(dw,tY),e(tY,Oxr),e(dw,Vxr),e(Ee,Xxr),e(Ee,cw),e(cw,J4e),e(J4e,zxr),e(cw,Wxr),e(cw,aY),e(aY,Qxr),e(cw,Hxr),e(Ee,Uxr),e(Ee,mw),e(mw,Y4e),e(Y4e,Jxr),e(mw,Yxr),e(mw,nY),e(nY,Kxr),e(mw,Zxr),e(Ee,e$r),e(Ee,fw),e(fw,K4e),e(K4e,o$r),e(fw,r$r),e(fw,sY),e(sY,t$r),e(fw,a$r),e(Ee,n$r),e(Ee,gw),e(gw,Z4e),e(Z4e,s$r),e(gw,l$r),e(gw,lY),e(lY,i$r),e(gw,d$r),e(Gr,c$r),M(hw,Gr,null),b(m,NNe,_),b(m,qc,_),e(qc,uw),e(uw,eEe),M(y9,eEe,null),e(qc,m$r),e(qc,oEe),e(oEe,f$r),b(m,jNe,_),b(m,hr,_),M(L9,hr,null),e(hr,g$r),e(hr,Nc),e(Nc,h$r),e(Nc,iY),e(iY,u$r),e(Nc,p$r),e(Nc,dY),e(dY,_$r),e(Nc,b$r),e(hr,v$r),e(hr,x9),e(x9,F$r),e(x9,rEe),e(rEe,T$r),e(x9,M$r),e(hr,E$r),e(hr,Xt),M($9,Xt,null),e(Xt,C$r),e(Xt,tEe),e(tEe,w$r),e(Xt,A$r),e(Xt,jc),e(jc,y$r),e(jc,aEe),e(aEe,L$r),e(jc,x$r),e(jc,cY),e(cY,$$r),e(jc,k$r),e(Xt,S$r),M(pw,Xt,null),e(hr,R$r),e(hr,Or),M(k9,Or,null),e(Or,P$r),e(Or,nEe),e(nEe,B$r),e(Or,I$r),e(Or,_n),e(_n,q$r),e(_n,sEe),e(sEe,N$r),e(_n,j$r),e(_n,lEe),e(lEe,D$r),e(_n,G$r),e(_n,iEe),e(iEe,O$r),e(_n,V$r),e(Or,X$r),e(Or,Le),e(Le,_w),e(_w,dEe),e(dEe,z$r),e(_w,W$r),e(_w,mY),e(mY,Q$r),e(_w,H$r),e(Le,U$r),e(Le,bw),e(bw,cEe),e(cEe,J$r),e(bw,Y$r),e(bw,fY),e(fY,K$r),e(bw,Z$r),e(Le,ekr),e(Le,vw),e(vw,mEe),e(mEe,okr),e(vw,rkr),e(vw,gY),e(gY,tkr),e(vw,akr),e(Le,nkr),e(Le,Fw),e(Fw,fEe),e(fEe,skr),e(Fw,lkr),e(Fw,hY),e(hY,ikr),e(Fw,dkr),e(Le,ckr),e(Le,Tw),e(Tw,gEe),e(gEe,mkr),e(Tw,fkr),e(Tw,uY),e(uY,gkr),e(Tw,hkr),e(Le,ukr),e(Le,Mw),e(Mw,hEe),e(hEe,pkr),e(Mw,_kr),e(Mw,pY),e(pY,bkr),e(Mw,vkr),e(Le,Fkr),e(Le,Ew),e(Ew,uEe),e(uEe,Tkr),e(Ew,Mkr),e(Ew,_Y),e(_Y,Ekr),e(Ew,Ckr),e(Le,wkr),e(Le,Cw),e(Cw,pEe),e(pEe,Akr),e(Cw,ykr),e(Cw,bY),e(bY,Lkr),e(Cw,xkr),e(Le,$kr),e(Le,ww),e(ww,_Ee),e(_Ee,kkr),e(ww,Skr),e(ww,vY),e(vY,Rkr),e(ww,Pkr),e(Le,Bkr),e(Le,Aw),e(Aw,bEe),e(bEe,Ikr),e(Aw,qkr),e(Aw,FY),e(FY,Nkr),e(Aw,jkr),e(Or,Dkr),M(yw,Or,null),b(m,DNe,_),b(m,Dc,_),e(Dc,Lw),e(Lw,vEe),M(S9,vEe,null),e(Dc,Gkr),e(Dc,FEe),e(FEe,Okr),b(m,GNe,_),b(m,ur,_),M(R9,ur,null),e(ur,Vkr),e(ur,Gc),e(Gc,Xkr),e(Gc,TY),e(TY,zkr),e(Gc,Wkr),e(Gc,MY),e(MY,Qkr),e(Gc,Hkr),e(ur,Ukr),e(ur,P9),e(P9,Jkr),e(P9,TEe),e(TEe,Ykr),e(P9,Kkr),e(ur,Zkr),e(ur,zt),M(B9,zt,null),e(zt,eSr),e(zt,MEe),e(MEe,oSr),e(zt,rSr),e(zt,Oc),e(Oc,tSr),e(Oc,EEe),e(EEe,aSr),e(Oc,nSr),e(Oc,EY),e(EY,sSr),e(Oc,lSr),e(zt,iSr),M(xw,zt,null),e(ur,dSr),e(ur,Vr),M(I9,Vr,null),e(Vr,cSr),e(Vr,CEe),e(CEe,mSr),e(Vr,fSr),e(Vr,bn),e(bn,gSr),e(bn,wEe),e(wEe,hSr),e(bn,uSr),e(bn,AEe),e(AEe,pSr),e(bn,_Sr),e(bn,yEe),e(yEe,bSr),e(bn,vSr),e(Vr,FSr),e(Vr,Pe),e(Pe,$w),e($w,LEe),e(LEe,TSr),e($w,MSr),e($w,CY),e(CY,ESr),e($w,CSr),e(Pe,wSr),e(Pe,kw),e(kw,xEe),e(xEe,ASr),e(kw,ySr),e(kw,wY),e(wY,LSr),e(kw,xSr),e(Pe,$Sr),e(Pe,Sw),e(Sw,$Ee),e($Ee,kSr),e(Sw,SSr),e(Sw,AY),e(AY,RSr),e(Sw,PSr),e(Pe,BSr),e(Pe,Rw),e(Rw,kEe),e(kEe,ISr),e(Rw,qSr),e(Rw,yY),e(yY,NSr),e(Rw,jSr),e(Pe,DSr),e(Pe,Pw),e(Pw,SEe),e(SEe,GSr),e(Pw,OSr),e(Pw,LY),e(LY,VSr),e(Pw,XSr),e(Pe,zSr),e(Pe,Bw),e(Bw,REe),e(REe,WSr),e(Bw,QSr),e(Bw,xY),e(xY,HSr),e(Bw,USr),e(Pe,JSr),e(Pe,Iw),e(Iw,PEe),e(PEe,YSr),e(Iw,KSr),e(Iw,$Y),e($Y,ZSr),e(Iw,eRr),e(Pe,oRr),e(Pe,qw),e(qw,BEe),e(BEe,rRr),e(qw,tRr),e(qw,kY),e(kY,aRr),e(qw,nRr),e(Pe,sRr),e(Pe,Nw),e(Nw,IEe),e(IEe,lRr),e(Nw,iRr),e(Nw,SY),e(SY,dRr),e(Nw,cRr),e(Vr,mRr),M(jw,Vr,null),b(m,ONe,_),b(m,Vc,_),e(Vc,Dw),e(Dw,qEe),M(q9,qEe,null),e(Vc,fRr),e(Vc,NEe),e(NEe,gRr),b(m,VNe,_),b(m,pr,_),M(N9,pr,null),e(pr,hRr),e(pr,Xc),e(Xc,uRr),e(Xc,RY),e(RY,pRr),e(Xc,_Rr),e(Xc,PY),e(PY,bRr),e(Xc,vRr),e(pr,FRr),e(pr,j9),e(j9,TRr),e(j9,jEe),e(jEe,MRr),e(j9,ERr),e(pr,CRr),e(pr,Wt),M(D9,Wt,null),e(Wt,wRr),e(Wt,DEe),e(DEe,ARr),e(Wt,yRr),e(Wt,zc),e(zc,LRr),e(zc,GEe),e(GEe,xRr),e(zc,$Rr),e(zc,BY),e(BY,kRr),e(zc,SRr),e(Wt,RRr),M(Gw,Wt,null),e(pr,PRr),e(pr,Xr),M(G9,Xr,null),e(Xr,BRr),e(Xr,OEe),e(OEe,IRr),e(Xr,qRr),e(Xr,vn),e(vn,NRr),e(vn,VEe),e(VEe,jRr),e(vn,DRr),e(vn,XEe),e(XEe,GRr),e(vn,ORr),e(vn,zEe),e(zEe,VRr),e(vn,XRr),e(Xr,zRr),e(Xr,xe),e(xe,Ow),e(Ow,WEe),e(WEe,WRr),e(Ow,QRr),e(Ow,IY),e(IY,HRr),e(Ow,URr),e(xe,JRr),e(xe,Vw),e(Vw,QEe),e(QEe,YRr),e(Vw,KRr),e(Vw,qY),e(qY,ZRr),e(Vw,ePr),e(xe,oPr),e(xe,Xw),e(Xw,HEe),e(HEe,rPr),e(Xw,tPr),e(Xw,NY),e(NY,aPr),e(Xw,nPr),e(xe,sPr),e(xe,zw),e(zw,UEe),e(UEe,lPr),e(zw,iPr),e(zw,jY),e(jY,dPr),e(zw,cPr),e(xe,mPr),e(xe,Ww),e(Ww,JEe),e(JEe,fPr),e(Ww,gPr),e(Ww,DY),e(DY,hPr),e(Ww,uPr),e(xe,pPr),e(xe,Qw),e(Qw,YEe),e(YEe,_Pr),e(Qw,bPr),e(Qw,GY),e(GY,vPr),e(Qw,FPr),e(xe,TPr),e(xe,Hw),e(Hw,KEe),e(KEe,MPr),e(Hw,EPr),e(Hw,OY),e(OY,CPr),e(Hw,wPr),e(xe,APr),e(xe,Uw),e(Uw,ZEe),e(ZEe,yPr),e(Uw,LPr),e(Uw,VY),e(VY,xPr),e(Uw,$Pr),e(xe,kPr),e(xe,Jw),e(Jw,eCe),e(eCe,SPr),e(Jw,RPr),e(Jw,XY),e(XY,PPr),e(Jw,BPr),e(xe,IPr),e(xe,Yw),e(Yw,oCe),e(oCe,qPr),e(Yw,NPr),e(Yw,zY),e(zY,jPr),e(Yw,DPr),e(Xr,GPr),M(Kw,Xr,null),b(m,XNe,_),b(m,Wc,_),e(Wc,Zw),e(Zw,rCe),M(O9,rCe,null),e(Wc,OPr),e(Wc,tCe),e(tCe,VPr),b(m,zNe,_),b(m,_r,_),M(V9,_r,null),e(_r,XPr),e(_r,Qc),e(Qc,zPr),e(Qc,WY),e(WY,WPr),e(Qc,QPr),e(Qc,QY),e(QY,HPr),e(Qc,UPr),e(_r,JPr),e(_r,X9),e(X9,YPr),e(X9,aCe),e(aCe,KPr),e(X9,ZPr),e(_r,eBr),e(_r,Qt),M(z9,Qt,null),e(Qt,oBr),e(Qt,nCe),e(nCe,rBr),e(Qt,tBr),e(Qt,Hc),e(Hc,aBr),e(Hc,sCe),e(sCe,nBr),e(Hc,sBr),e(Hc,HY),e(HY,lBr),e(Hc,iBr),e(Qt,dBr),M(e0,Qt,null),e(_r,cBr),e(_r,zr),M(W9,zr,null),e(zr,mBr),e(zr,lCe),e(lCe,fBr),e(zr,gBr),e(zr,Fn),e(Fn,hBr),e(Fn,iCe),e(iCe,uBr),e(Fn,pBr),e(Fn,dCe),e(dCe,_Br),e(Fn,bBr),e(Fn,cCe),e(cCe,vBr),e(Fn,FBr),e(zr,TBr),e(zr,$e),e($e,o0),e(o0,mCe),e(mCe,MBr),e(o0,EBr),e(o0,UY),e(UY,CBr),e(o0,wBr),e($e,ABr),e($e,r0),e(r0,fCe),e(fCe,yBr),e(r0,LBr),e(r0,JY),e(JY,xBr),e(r0,$Br),e($e,kBr),e($e,t0),e(t0,gCe),e(gCe,SBr),e(t0,RBr),e(t0,YY),e(YY,PBr),e(t0,BBr),e($e,IBr),e($e,a0),e(a0,hCe),e(hCe,qBr),e(a0,NBr),e(a0,KY),e(KY,jBr),e(a0,DBr),e($e,GBr),e($e,n0),e(n0,uCe),e(uCe,OBr),e(n0,VBr),e(n0,ZY),e(ZY,XBr),e(n0,zBr),e($e,WBr),e($e,s0),e(s0,pCe),e(pCe,QBr),e(s0,HBr),e(s0,eK),e(eK,UBr),e(s0,JBr),e($e,YBr),e($e,l0),e(l0,_Ce),e(_Ce,KBr),e(l0,ZBr),e(l0,oK),e(oK,eIr),e(l0,oIr),e($e,rIr),e($e,i0),e(i0,bCe),e(bCe,tIr),e(i0,aIr),e(i0,rK),e(rK,nIr),e(i0,sIr),e($e,lIr),e($e,d0),e(d0,vCe),e(vCe,iIr),e(d0,dIr),e(d0,tK),e(tK,cIr),e(d0,mIr),e($e,fIr),e($e,c0),e(c0,FCe),e(FCe,gIr),e(c0,hIr),e(c0,aK),e(aK,uIr),e(c0,pIr),e(zr,_Ir),M(m0,zr,null),b(m,WNe,_),b(m,Uc,_),e(Uc,f0),e(f0,TCe),M(Q9,TCe,null),e(Uc,bIr),e(Uc,MCe),e(MCe,vIr),b(m,QNe,_),b(m,br,_),M(H9,br,null),e(br,FIr),e(br,Jc),e(Jc,TIr),e(Jc,nK),e(nK,MIr),e(Jc,EIr),e(Jc,sK),e(sK,CIr),e(Jc,wIr),e(br,AIr),e(br,U9),e(U9,yIr),e(U9,ECe),e(ECe,LIr),e(U9,xIr),e(br,$Ir),e(br,Ht),M(J9,Ht,null),e(Ht,kIr),e(Ht,CCe),e(CCe,SIr),e(Ht,RIr),e(Ht,Yc),e(Yc,PIr),e(Yc,wCe),e(wCe,BIr),e(Yc,IIr),e(Yc,lK),e(lK,qIr),e(Yc,NIr),e(Ht,jIr),M(g0,Ht,null),e(br,DIr),e(br,Wr),M(Y9,Wr,null),e(Wr,GIr),e(Wr,ACe),e(ACe,OIr),e(Wr,VIr),e(Wr,Tn),e(Tn,XIr),e(Tn,yCe),e(yCe,zIr),e(Tn,WIr),e(Tn,LCe),e(LCe,QIr),e(Tn,HIr),e(Tn,xCe),e(xCe,UIr),e(Tn,JIr),e(Wr,YIr),e(Wr,De),e(De,h0),e(h0,$Ce),e($Ce,KIr),e(h0,ZIr),e(h0,iK),e(iK,eqr),e(h0,oqr),e(De,rqr),e(De,u0),e(u0,kCe),e(kCe,tqr),e(u0,aqr),e(u0,dK),e(dK,nqr),e(u0,sqr),e(De,lqr),e(De,p0),e(p0,SCe),e(SCe,iqr),e(p0,dqr),e(p0,cK),e(cK,cqr),e(p0,mqr),e(De,fqr),e(De,_0),e(_0,RCe),e(RCe,gqr),e(_0,hqr),e(_0,mK),e(mK,uqr),e(_0,pqr),e(De,_qr),e(De,b0),e(b0,PCe),e(PCe,bqr),e(b0,vqr),e(b0,fK),e(fK,Fqr),e(b0,Tqr),e(De,Mqr),e(De,v0),e(v0,BCe),e(BCe,Eqr),e(v0,Cqr),e(v0,gK),e(gK,wqr),e(v0,Aqr),e(De,yqr),e(De,F0),e(F0,ICe),e(ICe,Lqr),e(F0,xqr),e(F0,hK),e(hK,$qr),e(F0,kqr),e(De,Sqr),e(De,T0),e(T0,qCe),e(qCe,Rqr),e(T0,Pqr),e(T0,uK),e(uK,Bqr),e(T0,Iqr),e(Wr,qqr),M(M0,Wr,null),b(m,HNe,_),b(m,Kc,_),e(Kc,E0),e(E0,NCe),M(K9,NCe,null),e(Kc,Nqr),e(Kc,jCe),e(jCe,jqr),b(m,UNe,_),b(m,vr,_),M(Z9,vr,null),e(vr,Dqr),e(vr,Zc),e(Zc,Gqr),e(Zc,pK),e(pK,Oqr),e(Zc,Vqr),e(Zc,_K),e(_K,Xqr),e(Zc,zqr),e(vr,Wqr),e(vr,ex),e(ex,Qqr),e(ex,DCe),e(DCe,Hqr),e(ex,Uqr),e(vr,Jqr),e(vr,Ut),M(ox,Ut,null),e(Ut,Yqr),e(Ut,GCe),e(GCe,Kqr),e(Ut,Zqr),e(Ut,em),e(em,eNr),e(em,OCe),e(OCe,oNr),e(em,rNr),e(em,bK),e(bK,tNr),e(em,aNr),e(Ut,nNr),M(C0,Ut,null),e(vr,sNr),e(vr,Qr),M(rx,Qr,null),e(Qr,lNr),e(Qr,VCe),e(VCe,iNr),e(Qr,dNr),e(Qr,Mn),e(Mn,cNr),e(Mn,XCe),e(XCe,mNr),e(Mn,fNr),e(Mn,zCe),e(zCe,gNr),e(Mn,hNr),e(Mn,WCe),e(WCe,uNr),e(Mn,pNr),e(Qr,_Nr),e(Qr,Ge),e(Ge,w0),e(w0,QCe),e(QCe,bNr),e(w0,vNr),e(w0,vK),e(vK,FNr),e(w0,TNr),e(Ge,MNr),e(Ge,A0),e(A0,HCe),e(HCe,ENr),e(A0,CNr),e(A0,FK),e(FK,wNr),e(A0,ANr),e(Ge,yNr),e(Ge,y0),e(y0,UCe),e(UCe,LNr),e(y0,xNr),e(y0,TK),e(TK,$Nr),e(y0,kNr),e(Ge,SNr),e(Ge,L0),e(L0,JCe),e(JCe,RNr),e(L0,PNr),e(L0,MK),e(MK,BNr),e(L0,INr),e(Ge,qNr),e(Ge,x0),e(x0,YCe),e(YCe,NNr),e(x0,jNr),e(x0,EK),e(EK,DNr),e(x0,GNr),e(Ge,ONr),e(Ge,$0),e($0,KCe),e(KCe,VNr),e($0,XNr),e($0,CK),e(CK,zNr),e($0,WNr),e(Ge,QNr),e(Ge,k0),e(k0,ZCe),e(ZCe,HNr),e(k0,UNr),e(k0,wK),e(wK,JNr),e(k0,YNr),e(Ge,KNr),e(Ge,S0),e(S0,e5e),e(e5e,ZNr),e(S0,ejr),e(S0,AK),e(AK,ojr),e(S0,rjr),e(Qr,tjr),M(R0,Qr,null),b(m,JNe,_),b(m,om,_),e(om,P0),e(P0,o5e),M(tx,o5e,null),e(om,ajr),e(om,r5e),e(r5e,njr),b(m,YNe,_),b(m,Fr,_),M(ax,Fr,null),e(Fr,sjr),e(Fr,rm),e(rm,ljr),e(rm,yK),e(yK,ijr),e(rm,djr),e(rm,LK),e(LK,cjr),e(rm,mjr),e(Fr,fjr),e(Fr,nx),e(nx,gjr),e(nx,t5e),e(t5e,hjr),e(nx,ujr),e(Fr,pjr),e(Fr,Jt),M(sx,Jt,null),e(Jt,_jr),e(Jt,a5e),e(a5e,bjr),e(Jt,vjr),e(Jt,tm),e(tm,Fjr),e(tm,n5e),e(n5e,Tjr),e(tm,Mjr),e(tm,xK),e(xK,Ejr),e(tm,Cjr),e(Jt,wjr),M(B0,Jt,null),e(Fr,Ajr),e(Fr,Hr),M(lx,Hr,null),e(Hr,yjr),e(Hr,s5e),e(s5e,Ljr),e(Hr,xjr),e(Hr,En),e(En,$jr),e(En,l5e),e(l5e,kjr),e(En,Sjr),e(En,i5e),e(i5e,Rjr),e(En,Pjr),e(En,d5e),e(d5e,Bjr),e(En,Ijr),e(Hr,qjr),e(Hr,c5e),e(c5e,I0),e(I0,m5e),e(m5e,Njr),e(I0,jjr),e(I0,$K),e($K,Djr),e(I0,Gjr),e(Hr,Ojr),M(q0,Hr,null),b(m,KNe,_),b(m,am,_),e(am,N0),e(N0,f5e),M(ix,f5e,null),e(am,Vjr),e(am,g5e),e(g5e,Xjr),b(m,ZNe,_),b(m,Tr,_),M(dx,Tr,null),e(Tr,zjr),e(Tr,nm),e(nm,Wjr),e(nm,kK),e(kK,Qjr),e(nm,Hjr),e(nm,SK),e(SK,Ujr),e(nm,Jjr),e(Tr,Yjr),e(Tr,cx),e(cx,Kjr),e(cx,h5e),e(h5e,Zjr),e(cx,eDr),e(Tr,oDr),e(Tr,Yt),M(mx,Yt,null),e(Yt,rDr),e(Yt,u5e),e(u5e,tDr),e(Yt,aDr),e(Yt,sm),e(sm,nDr),e(sm,p5e),e(p5e,sDr),e(sm,lDr),e(sm,RK),e(RK,iDr),e(sm,dDr),e(Yt,cDr),M(j0,Yt,null),e(Tr,mDr),e(Tr,Ur),M(fx,Ur,null),e(Ur,fDr),e(Ur,_5e),e(_5e,gDr),e(Ur,hDr),e(Ur,Cn),e(Cn,uDr),e(Cn,b5e),e(b5e,pDr),e(Cn,_Dr),e(Cn,v5e),e(v5e,bDr),e(Cn,vDr),e(Cn,F5e),e(F5e,FDr),e(Cn,TDr),e(Ur,MDr),e(Ur,gx),e(gx,D0),e(D0,T5e),e(T5e,EDr),e(D0,CDr),e(D0,PK),e(PK,wDr),e(D0,ADr),e(gx,yDr),e(gx,G0),e(G0,M5e),e(M5e,LDr),e(G0,xDr),e(G0,BK),e(BK,$Dr),e(G0,kDr),e(Ur,SDr),M(O0,Ur,null),b(m,eje,_),b(m,lm,_),e(lm,V0),e(V0,E5e),M(hx,E5e,null),e(lm,RDr),e(lm,C5e),e(C5e,PDr),b(m,oje,_),b(m,Mr,_),M(ux,Mr,null),e(Mr,BDr),e(Mr,im),e(im,IDr),e(im,IK),e(IK,qDr),e(im,NDr),e(im,qK),e(qK,jDr),e(im,DDr),e(Mr,GDr),e(Mr,px),e(px,ODr),e(px,w5e),e(w5e,VDr),e(px,XDr),e(Mr,zDr),e(Mr,Kt),M(_x,Kt,null),e(Kt,WDr),e(Kt,A5e),e(A5e,QDr),e(Kt,HDr),e(Kt,dm),e(dm,UDr),e(dm,y5e),e(y5e,JDr),e(dm,YDr),e(dm,NK),e(NK,KDr),e(dm,ZDr),e(Kt,eGr),M(X0,Kt,null),e(Mr,oGr),e(Mr,Jr),M(bx,Jr,null),e(Jr,rGr),e(Jr,L5e),e(L5e,tGr),e(Jr,aGr),e(Jr,wn),e(wn,nGr),e(wn,x5e),e(x5e,sGr),e(wn,lGr),e(wn,$5e),e($5e,iGr),e(wn,dGr),e(wn,k5e),e(k5e,cGr),e(wn,mGr),e(Jr,fGr),e(Jr,S5e),e(S5e,z0),e(z0,R5e),e(R5e,gGr),e(z0,hGr),e(z0,jK),e(jK,uGr),e(z0,pGr),e(Jr,_Gr),M(W0,Jr,null),rje=!0},p(m,[_]){const vx={};_&2&&(vx.$$scope={dirty:_,ctx:m}),bm.$set(vx);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),Fg.$set(P5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),eh.$set(B5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),$h.$set(I5e);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:m}),kh.$set(Fx);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),Jh.$set(q5e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),Yh.$set(An);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),eu.$set(N5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),Qp.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),Up.$set(D5e);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:m}),j_.$set(Tx);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),G_.$set(G5e);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:m}),wb.$set(Mx);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),yb.$set(O5e);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:m}),c2.$set(Ex);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),f2.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),$2.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),S2.$set(z5e);const cm={};_&2&&(cm.$$scope={dirty:_,ctx:m}),Av.$set(cm);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),Lv.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),nF.$set(Q5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),lF.$set(H5e);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:m}),hF.$set(Cx);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),pF.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),YF.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),ZF.$set(Y5e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),D1.$set(et);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:m}),O1.$set(wx);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),z1.$set(K5e);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:m}),Q1.$set(Ax);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),lT.$set(Z5e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),dT.$set(ot);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:m}),fT.$set(e3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),hT.$set(mm);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:m}),wT.$set(o3e);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:m}),yT.$set(r3e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),PT.$set(y);const Q0={};_&2&&(Q0.$$scope={dirty:_,ctx:m}),IT.$set(Q0);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:m}),QT.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:m}),UT.$set(a3e);const H0={};_&2&&(H0.$$scope={dirty:_,ctx:m}),ZT.$set(H0);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:m}),oM.$set(n3e);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:m}),iM.$set(s3e);const U0={};_&2&&(U0.$$scope={dirty:_,ctx:m}),cM.$set(U0);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:m}),uM.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:m}),_M.$set(i3e);const J0={};_&2&&(J0.$$scope={dirty:_,ctx:m}),TM.$set(J0);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),EM.$set(d3e);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),AM.$set(c3e);const Y0={};_&2&&(Y0.$$scope={dirty:_,ctx:m}),LM.$set(Y0);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),PM.$set(m3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),IM.$set(f3e);const K0={};_&2&&(K0.$$scope={dirty:_,ctx:m}),jM.$set(K0);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),GM.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),R4.$set(h3e);const Z0={};_&2&&(Z0.$$scope={dirty:_,ctx:m}),B4.$set(Z0);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),nE.$set(u3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),lE.$set(p3e);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:m}),FE.$set(eA);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),ME.$set(_3e);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),yE.$set(b3e);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:m}),xE.$set(oA);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),JE.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),KE.$set(F3e);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:m}),dC.$set(rA);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),mC.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),NC.$set(M3e);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:m}),DC.$set(tA);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),a5.$set(E3e);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),s5.$set(C3e);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:m}),d5.$set(aA);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),m5.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),g5.$set(A3e);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:m}),u5.$set(nA);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),I5.$set(y3e);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),N5.$set(L3e);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),n3.$set(sA);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),l3.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:m}),d3.$set($3e);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),m3.$set(lA);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:m}),g3.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:m}),u3.$set(S3e);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),G3.$set(iA);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),V3.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),Z3.$set(P3e);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),ow.$set(dA);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),hw.$set(B3e);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),pw.$set(I3e);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),yw.$set(cA);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),xw.$set(q3e);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),jw.$set(N3e);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),Gw.$set(mA);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),Kw.$set(j3e);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),e0.$set(D3e);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),m0.$set(fA);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),g0.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),M0.$set(O3e);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),C0.$set(gA);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),R0.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),B0.$set(X3e);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),q0.$set(hA);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),j0.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),O0.$set(W3e);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),X0.$set(uA);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),W0.$set(Q3e)},i(m){rje||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(bm.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(Fy.$$.fragment,m),E(Fg.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Ay.$$.fragment,m),E(eh.$$.fragment,m),E(yy.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(Sy.$$.fragment,m),E($h.$$.fragment,m),E(kh.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(Ny.$$.fragment,m),E(Jh.$$.fragment,m),E(Yh.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Vy.$$.fragment,m),E(eu.$$.fragment,m),E(Xy.$$.fragment,m),E(Qp.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(Hy.$$.fragment,m),E(Up.$$.fragment,m),E(Uy.$$.fragment,m),E(j_.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Zy.$$.fragment,m),E(G_.$$.fragment,m),E(eL.$$.fragment,m),E(wb.$$.fragment,m),E(oL.$$.fragment,m),E(rL.$$.fragment,m),E(aL.$$.fragment,m),E(yb.$$.fragment,m),E(nL.$$.fragment,m),E(c2.$$.fragment,m),E(sL.$$.fragment,m),E(lL.$$.fragment,m),E(dL.$$.fragment,m),E(f2.$$.fragment,m),E(cL.$$.fragment,m),E($2.$$.fragment,m),E(mL.$$.fragment,m),E(fL.$$.fragment,m),E(hL.$$.fragment,m),E(S2.$$.fragment,m),E(uL.$$.fragment,m),E(Av.$$.fragment,m),E(pL.$$.fragment,m),E(_L.$$.fragment,m),E(vL.$$.fragment,m),E(Lv.$$.fragment,m),E(FL.$$.fragment,m),E(nF.$$.fragment,m),E(TL.$$.fragment,m),E(ML.$$.fragment,m),E(CL.$$.fragment,m),E(lF.$$.fragment,m),E(wL.$$.fragment,m),E(hF.$$.fragment,m),E(AL.$$.fragment,m),E(yL.$$.fragment,m),E(xL.$$.fragment,m),E(pF.$$.fragment,m),E($L.$$.fragment,m),E(YF.$$.fragment,m),E(kL.$$.fragment,m),E(SL.$$.fragment,m),E(PL.$$.fragment,m),E(ZF.$$.fragment,m),E(BL.$$.fragment,m),E(D1.$$.fragment,m),E(IL.$$.fragment,m),E(qL.$$.fragment,m),E(jL.$$.fragment,m),E(O1.$$.fragment,m),E(DL.$$.fragment,m),E(z1.$$.fragment,m),E(GL.$$.fragment,m),E(OL.$$.fragment,m),E(XL.$$.fragment,m),E(Q1.$$.fragment,m),E(zL.$$.fragment,m),E(lT.$$.fragment,m),E(WL.$$.fragment,m),E(QL.$$.fragment,m),E(UL.$$.fragment,m),E(dT.$$.fragment,m),E(JL.$$.fragment,m),E(fT.$$.fragment,m),E(YL.$$.fragment,m),E(KL.$$.fragment,m),E(e8.$$.fragment,m),E(hT.$$.fragment,m),E(o8.$$.fragment,m),E(wT.$$.fragment,m),E(r8.$$.fragment,m),E(t8.$$.fragment,m),E(n8.$$.fragment,m),E(yT.$$.fragment,m),E(s8.$$.fragment,m),E(PT.$$.fragment,m),E(l8.$$.fragment,m),E(i8.$$.fragment,m),E(c8.$$.fragment,m),E(IT.$$.fragment,m),E(m8.$$.fragment,m),E(QT.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(UT.$$.fragment,m),E(p8.$$.fragment,m),E(ZT.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(T8.$$.fragment,m),E(oM.$$.fragment,m),E(M8.$$.fragment,m),E(iM.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(cM.$$.fragment,m),E(y8.$$.fragment,m),E(uM.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(_M.$$.fragment,m),E(S8.$$.fragment,m),E(TM.$$.fragment,m),E(P8.$$.fragment,m),E(B8.$$.fragment,m),E(q8.$$.fragment,m),E(EM.$$.fragment,m),E(N8.$$.fragment,m),E(AM.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(O8.$$.fragment,m),E(LM.$$.fragment,m),E(V8.$$.fragment,m),E(PM.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(Q8.$$.fragment,m),E(IM.$$.fragment,m),E(H8.$$.fragment,m),E(jM.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(GM.$$.fragment,m),E(Z8.$$.fragment,m),E(R4.$$.fragment,m),E(e7.$$.fragment,m),E(o7.$$.fragment,m),E(t7.$$.fragment,m),E(B4.$$.fragment,m),E(a7.$$.fragment,m),E(nE.$$.fragment,m),E(n7.$$.fragment,m),E(s7.$$.fragment,m),E(i7.$$.fragment,m),E(lE.$$.fragment,m),E(d7.$$.fragment,m),E(FE.$$.fragment,m),E(c7.$$.fragment,m),E(m7.$$.fragment,m),E(g7.$$.fragment,m),E(ME.$$.fragment,m),E(h7.$$.fragment,m),E(yE.$$.fragment,m),E(u7.$$.fragment,m),E(p7.$$.fragment,m),E(b7.$$.fragment,m),E(xE.$$.fragment,m),E(v7.$$.fragment,m),E(JE.$$.fragment,m),E(F7.$$.fragment,m),E(T7.$$.fragment,m),E(E7.$$.fragment,m),E(KE.$$.fragment,m),E(C7.$$.fragment,m),E(dC.$$.fragment,m),E(w7.$$.fragment,m),E(A7.$$.fragment,m),E(L7.$$.fragment,m),E(mC.$$.fragment,m),E(x7.$$.fragment,m),E(NC.$$.fragment,m),E($7.$$.fragment,m),E(k7.$$.fragment,m),E(R7.$$.fragment,m),E(DC.$$.fragment,m),E(P7.$$.fragment,m),E(a5.$$.fragment,m),E(B7.$$.fragment,m),E(I7.$$.fragment,m),E(N7.$$.fragment,m),E(s5.$$.fragment,m),E(j7.$$.fragment,m),E(d5.$$.fragment,m),E(G7.$$.fragment,m),E(O7.$$.fragment,m),E(X7.$$.fragment,m),E(m5.$$.fragment,m),E(z7.$$.fragment,m),E(g5.$$.fragment,m),E(W7.$$.fragment,m),E(Q7.$$.fragment,m),E(U7.$$.fragment,m),E(u5.$$.fragment,m),E(J7.$$.fragment,m),E(I5.$$.fragment,m),E(Y7.$$.fragment,m),E(K7.$$.fragment,m),E(e9.$$.fragment,m),E(N5.$$.fragment,m),E(o9.$$.fragment,m),E(n3.$$.fragment,m),E(r9.$$.fragment,m),E(t9.$$.fragment,m),E(n9.$$.fragment,m),E(l3.$$.fragment,m),E(s9.$$.fragment,m),E(d3.$$.fragment,m),E(l9.$$.fragment,m),E(i9.$$.fragment,m),E(c9.$$.fragment,m),E(m3.$$.fragment,m),E(m9.$$.fragment,m),E(g3.$$.fragment,m),E(f9.$$.fragment,m),E(g9.$$.fragment,m),E(u9.$$.fragment,m),E(u3.$$.fragment,m),E(p9.$$.fragment,m),E(G3.$$.fragment,m),E(_9.$$.fragment,m),E(b9.$$.fragment,m),E(F9.$$.fragment,m),E(V3.$$.fragment,m),E(T9.$$.fragment,m),E(Z3.$$.fragment,m),E(M9.$$.fragment,m),E(E9.$$.fragment,m),E(w9.$$.fragment,m),E(ow.$$.fragment,m),E(A9.$$.fragment,m),E(hw.$$.fragment,m),E(y9.$$.fragment,m),E(L9.$$.fragment,m),E($9.$$.fragment,m),E(pw.$$.fragment,m),E(k9.$$.fragment,m),E(yw.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(B9.$$.fragment,m),E(xw.$$.fragment,m),E(I9.$$.fragment,m),E(jw.$$.fragment,m),E(q9.$$.fragment,m),E(N9.$$.fragment,m),E(D9.$$.fragment,m),E(Gw.$$.fragment,m),E(G9.$$.fragment,m),E(Kw.$$.fragment,m),E(O9.$$.fragment,m),E(V9.$$.fragment,m),E(z9.$$.fragment,m),E(e0.$$.fragment,m),E(W9.$$.fragment,m),E(m0.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(g0.$$.fragment,m),E(Y9.$$.fragment,m),E(M0.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(ox.$$.fragment,m),E(C0.$$.fragment,m),E(rx.$$.fragment,m),E(R0.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(B0.$$.fragment,m),E(lx.$$.fragment,m),E(q0.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(j0.$$.fragment,m),E(fx.$$.fragment,m),E(O0.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(X0.$$.fragment,m),E(bx.$$.fragment,m),E(W0.$$.fragment,m),rje=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(bm.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(Fy.$$.fragment,m),C(Fg.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Ay.$$.fragment,m),C(eh.$$.fragment,m),C(yy.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(Sy.$$.fragment,m),C($h.$$.fragment,m),C(kh.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(Ny.$$.fragment,m),C(Jh.$$.fragment,m),C(Yh.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Vy.$$.fragment,m),C(eu.$$.fragment,m),C(Xy.$$.fragment,m),C(Qp.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(Hy.$$.fragment,m),C(Up.$$.fragment,m),C(Uy.$$.fragment,m),C(j_.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Zy.$$.fragment,m),C(G_.$$.fragment,m),C(eL.$$.fragment,m),C(wb.$$.fragment,m),C(oL.$$.fragment,m),C(rL.$$.fragment,m),C(aL.$$.fragment,m),C(yb.$$.fragment,m),C(nL.$$.fragment,m),C(c2.$$.fragment,m),C(sL.$$.fragment,m),C(lL.$$.fragment,m),C(dL.$$.fragment,m),C(f2.$$.fragment,m),C(cL.$$.fragment,m),C($2.$$.fragment,m),C(mL.$$.fragment,m),C(fL.$$.fragment,m),C(hL.$$.fragment,m),C(S2.$$.fragment,m),C(uL.$$.fragment,m),C(Av.$$.fragment,m),C(pL.$$.fragment,m),C(_L.$$.fragment,m),C(vL.$$.fragment,m),C(Lv.$$.fragment,m),C(FL.$$.fragment,m),C(nF.$$.fragment,m),C(TL.$$.fragment,m),C(ML.$$.fragment,m),C(CL.$$.fragment,m),C(lF.$$.fragment,m),C(wL.$$.fragment,m),C(hF.$$.fragment,m),C(AL.$$.fragment,m),C(yL.$$.fragment,m),C(xL.$$.fragment,m),C(pF.$$.fragment,m),C($L.$$.fragment,m),C(YF.$$.fragment,m),C(kL.$$.fragment,m),C(SL.$$.fragment,m),C(PL.$$.fragment,m),C(ZF.$$.fragment,m),C(BL.$$.fragment,m),C(D1.$$.fragment,m),C(IL.$$.fragment,m),C(qL.$$.fragment,m),C(jL.$$.fragment,m),C(O1.$$.fragment,m),C(DL.$$.fragment,m),C(z1.$$.fragment,m),C(GL.$$.fragment,m),C(OL.$$.fragment,m),C(XL.$$.fragment,m),C(Q1.$$.fragment,m),C(zL.$$.fragment,m),C(lT.$$.fragment,m),C(WL.$$.fragment,m),C(QL.$$.fragment,m),C(UL.$$.fragment,m),C(dT.$$.fragment,m),C(JL.$$.fragment,m),C(fT.$$.fragment,m),C(YL.$$.fragment,m),C(KL.$$.fragment,m),C(e8.$$.fragment,m),C(hT.$$.fragment,m),C(o8.$$.fragment,m),C(wT.$$.fragment,m),C(r8.$$.fragment,m),C(t8.$$.fragment,m),C(n8.$$.fragment,m),C(yT.$$.fragment,m),C(s8.$$.fragment,m),C(PT.$$.fragment,m),C(l8.$$.fragment,m),C(i8.$$.fragment,m),C(c8.$$.fragment,m),C(IT.$$.fragment,m),C(m8.$$.fragment,m),C(QT.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(UT.$$.fragment,m),C(p8.$$.fragment,m),C(ZT.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(T8.$$.fragment,m),C(oM.$$.fragment,m),C(M8.$$.fragment,m),C(iM.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(cM.$$.fragment,m),C(y8.$$.fragment,m),C(uM.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(_M.$$.fragment,m),C(S8.$$.fragment,m),C(TM.$$.fragment,m),C(P8.$$.fragment,m),C(B8.$$.fragment,m),C(q8.$$.fragment,m),C(EM.$$.fragment,m),C(N8.$$.fragment,m),C(AM.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(O8.$$.fragment,m),C(LM.$$.fragment,m),C(V8.$$.fragment,m),C(PM.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(Q8.$$.fragment,m),C(IM.$$.fragment,m),C(H8.$$.fragment,m),C(jM.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(GM.$$.fragment,m),C(Z8.$$.fragment,m),C(R4.$$.fragment,m),C(e7.$$.fragment,m),C(o7.$$.fragment,m),C(t7.$$.fragment,m),C(B4.$$.fragment,m),C(a7.$$.fragment,m),C(nE.$$.fragment,m),C(n7.$$.fragment,m),C(s7.$$.fragment,m),C(i7.$$.fragment,m),C(lE.$$.fragment,m),C(d7.$$.fragment,m),C(FE.$$.fragment,m),C(c7.$$.fragment,m),C(m7.$$.fragment,m),C(g7.$$.fragment,m),C(ME.$$.fragment,m),C(h7.$$.fragment,m),C(yE.$$.fragment,m),C(u7.$$.fragment,m),C(p7.$$.fragment,m),C(b7.$$.fragment,m),C(xE.$$.fragment,m),C(v7.$$.fragment,m),C(JE.$$.fragment,m),C(F7.$$.fragment,m),C(T7.$$.fragment,m),C(E7.$$.fragment,m),C(KE.$$.fragment,m),C(C7.$$.fragment,m),C(dC.$$.fragment,m),C(w7.$$.fragment,m),C(A7.$$.fragment,m),C(L7.$$.fragment,m),C(mC.$$.fragment,m),C(x7.$$.fragment,m),C(NC.$$.fragment,m),C($7.$$.fragment,m),C(k7.$$.fragment,m),C(R7.$$.fragment,m),C(DC.$$.fragment,m),C(P7.$$.fragment,m),C(a5.$$.fragment,m),C(B7.$$.fragment,m),C(I7.$$.fragment,m),C(N7.$$.fragment,m),C(s5.$$.fragment,m),C(j7.$$.fragment,m),C(d5.$$.fragment,m),C(G7.$$.fragment,m),C(O7.$$.fragment,m),C(X7.$$.fragment,m),C(m5.$$.fragment,m),C(z7.$$.fragment,m),C(g5.$$.fragment,m),C(W7.$$.fragment,m),C(Q7.$$.fragment,m),C(U7.$$.fragment,m),C(u5.$$.fragment,m),C(J7.$$.fragment,m),C(I5.$$.fragment,m),C(Y7.$$.fragment,m),C(K7.$$.fragment,m),C(e9.$$.fragment,m),C(N5.$$.fragment,m),C(o9.$$.fragment,m),C(n3.$$.fragment,m),C(r9.$$.fragment,m),C(t9.$$.fragment,m),C(n9.$$.fragment,m),C(l3.$$.fragment,m),C(s9.$$.fragment,m),C(d3.$$.fragment,m),C(l9.$$.fragment,m),C(i9.$$.fragment,m),C(c9.$$.fragment,m),C(m3.$$.fragment,m),C(m9.$$.fragment,m),C(g3.$$.fragment,m),C(f9.$$.fragment,m),C(g9.$$.fragment,m),C(u9.$$.fragment,m),C(u3.$$.fragment,m),C(p9.$$.fragment,m),C(G3.$$.fragment,m),C(_9.$$.fragment,m),C(b9.$$.fragment,m),C(F9.$$.fragment,m),C(V3.$$.fragment,m),C(T9.$$.fragment,m),C(Z3.$$.fragment,m),C(M9.$$.fragment,m),C(E9.$$.fragment,m),C(w9.$$.fragment,m),C(ow.$$.fragment,m),C(A9.$$.fragment,m),C(hw.$$.fragment,m),C(y9.$$.fragment,m),C(L9.$$.fragment,m),C($9.$$.fragment,m),C(pw.$$.fragment,m),C(k9.$$.fragment,m),C(yw.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(B9.$$.fragment,m),C(xw.$$.fragment,m),C(I9.$$.fragment,m),C(jw.$$.fragment,m),C(q9.$$.fragment,m),C(N9.$$.fragment,m),C(D9.$$.fragment,m),C(Gw.$$.fragment,m),C(G9.$$.fragment,m),C(Kw.$$.fragment,m),C(O9.$$.fragment,m),C(V9.$$.fragment,m),C(z9.$$.fragment,m),C(e0.$$.fragment,m),C(W9.$$.fragment,m),C(m0.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(g0.$$.fragment,m),C(Y9.$$.fragment,m),C(M0.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(ox.$$.fragment,m),C(C0.$$.fragment,m),C(rx.$$.fragment,m),C(R0.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(B0.$$.fragment,m),C(lx.$$.fragment,m),C(q0.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(j0.$$.fragment,m),C(fx.$$.fragment,m),C(O0.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(X0.$$.fragment,m),C(bx.$$.fragment,m),C(W0.$$.fragment,m),rje=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(gm),m&&t(rt),m&&t(je),m&&t(We),m&&t(um),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(ZIe),m&&t(_i),w(hy),m&&t(eqe),m&&t(kn),m&&t(oqe),w(uy,m),m&&t(rqe),m&&t(I$),m&&t(tqe),w(bm,m),m&&t(aqe),m&&t(bi),w(py),m&&t(nqe),m&&t(Co),w(_y),w(Fy),w(Fg),w(Ty),m&&t(sqe),m&&t(Fi),w(My),m&&t(lqe),m&&t(wo),w(Ey),w(Ay),w(eh),w(yy),m&&t(iqe),m&&t(Ti),w(Ly),m&&t(dqe),m&&t(Ao),w(xy),w(Sy),w($h),w(kh),w(Ry),m&&t(cqe),m&&t(Mi),w(Py),m&&t(mqe),m&&t(yo),w(By),w(Ny),w(Jh),w(Yh),w(jy),m&&t(fqe),m&&t(Ci),w(Dy),m&&t(gqe),m&&t(Lo),w(Gy),w(Vy),w(eu),w(Xy),w(Qp),m&&t(hqe),m&&t(yi),w(zy),m&&t(uqe),m&&t(xo),w(Wy),w(Hy),w(Up),w(Uy),w(j_),m&&t(pqe),m&&t($i),w(Jy),m&&t(_qe),m&&t($o),w(Yy),w(Zy),w(G_),w(eL),w(wb),m&&t(bqe),m&&t(Ri),w(oL),m&&t(vqe),m&&t(ko),w(rL),w(aL),w(yb),w(nL),w(c2),m&&t(Fqe),m&&t(Ii),w(sL),m&&t(Tqe),m&&t(So),w(lL),w(dL),w(f2),w(cL),w($2),m&&t(Mqe),m&&t(ji),w(mL),m&&t(Eqe),m&&t(Ro),w(fL),w(hL),w(S2),w(uL),w(Av),m&&t(Cqe),m&&t(Oi),w(pL),m&&t(wqe),m&&t(Po),w(_L),w(vL),w(Lv),w(FL),w(nF),m&&t(Aqe),m&&t(zi),w(TL),m&&t(yqe),m&&t(Bo),w(ML),w(CL),w(lF),w(wL),w(hF),m&&t(Lqe),m&&t(Hi),w(AL),m&&t(xqe),m&&t(Io),w(yL),w(xL),w(pF),w($L),w(YF),m&&t($qe),m&&t(Yi),w(kL),m&&t(kqe),m&&t(qo),w(SL),w(PL),w(ZF),w(BL),w(D1),m&&t(Sqe),m&&t(ed),w(IL),m&&t(Rqe),m&&t(No),w(qL),w(jL),w(O1),w(DL),w(z1),m&&t(Pqe),m&&t(td),w(GL),m&&t(Bqe),m&&t(jo),w(OL),w(XL),w(Q1),w(zL),w(lT),m&&t(Iqe),m&&t(sd),w(WL),m&&t(qqe),m&&t(Do),w(QL),w(UL),w(dT),w(JL),w(fT),m&&t(Nqe),m&&t(dd),w(YL),m&&t(jqe),m&&t(Go),w(KL),w(e8),w(hT),w(o8),w(wT),m&&t(Dqe),m&&t(fd),w(r8),m&&t(Gqe),m&&t(Oo),w(t8),w(n8),w(yT),w(s8),w(PT),m&&t(Oqe),m&&t(ud),w(l8),m&&t(Vqe),m&&t(Vo),w(i8),w(c8),w(IT),w(m8),w(QT),m&&t(Xqe),m&&t(bd),w(f8),m&&t(zqe),m&&t(Xo),w(g8),w(u8),w(UT),w(p8),w(ZT),m&&t(Wqe),m&&t(Td),w(b8),m&&t(Qqe),m&&t(zo),w(v8),w(T8),w(oM),w(M8),w(iM),m&&t(Hqe),m&&t(Cd),w(E8),m&&t(Uqe),m&&t(Wo),w(C8),w(A8),w(cM),w(y8),w(uM),m&&t(Jqe),m&&t(Ld),w(L8),m&&t(Yqe),m&&t(Qo),w(x8),w(k8),w(_M),w(S8),w(TM),m&&t(Kqe),m&&t(kd),w(P8),m&&t(Zqe),m&&t(Ho),w(B8),w(q8),w(EM),w(N8),w(AM),m&&t(eNe),m&&t(Pd),w(j8),m&&t(oNe),m&&t(Uo),w(D8),w(O8),w(LM),w(V8),w(PM),m&&t(rNe),m&&t(qd),w(X8),m&&t(tNe),m&&t(Jo),w(z8),w(Q8),w(IM),w(H8),w(jM),m&&t(aNe),m&&t(Dd),w(U8),m&&t(nNe),m&&t(Yo),w(J8),w(K8),w(GM),w(Z8),w(R4),m&&t(sNe),m&&t(Vd),w(e7),m&&t(lNe),m&&t(Ko),w(o7),w(t7),w(B4),w(a7),w(nE),m&&t(iNe),m&&t(Wd),w(n7),m&&t(dNe),m&&t(Zo),w(s7),w(i7),w(lE),w(d7),w(FE),m&&t(cNe),m&&t(Ud),w(c7),m&&t(mNe),m&&t(er),w(m7),w(g7),w(ME),w(h7),w(yE),m&&t(fNe),m&&t(Kd),w(u7),m&&t(gNe),m&&t(or),w(p7),w(b7),w(xE),w(v7),w(JE),m&&t(hNe),m&&t(oc),w(F7),m&&t(uNe),m&&t(rr),w(T7),w(E7),w(KE),w(C7),w(dC),m&&t(pNe),m&&t(ac),w(w7),m&&t(_Ne),m&&t(tr),w(A7),w(L7),w(mC),w(x7),w(NC),m&&t(bNe),m&&t(lc),w($7),m&&t(vNe),m&&t(ar),w(k7),w(R7),w(DC),w(P7),w(a5),m&&t(FNe),m&&t(cc),w(B7),m&&t(TNe),m&&t(nr),w(I7),w(N7),w(s5),w(j7),w(d5),m&&t(MNe),m&&t(gc),w(G7),m&&t(ENe),m&&t(sr),w(O7),w(X7),w(m5),w(z7),w(g5),m&&t(CNe),m&&t(pc),w(W7),m&&t(wNe),m&&t(lr),w(Q7),w(U7),w(u5),w(J7),w(I5),m&&t(ANe),m&&t(vc),w(Y7),m&&t(yNe),m&&t(ir),w(K7),w(e9),w(N5),w(o9),w(n3),m&&t(LNe),m&&t(Mc),w(r9),m&&t(xNe),m&&t(dr),w(t9),w(n9),w(l3),w(s9),w(d3),m&&t($Ne),m&&t(wc),w(l9),m&&t(kNe),m&&t(cr),w(i9),w(c9),w(m3),w(m9),w(g3),m&&t(SNe),m&&t(Lc),w(f9),m&&t(RNe),m&&t(mr),w(g9),w(u9),w(u3),w(p9),w(G3),m&&t(PNe),m&&t(kc),w(_9),m&&t(BNe),m&&t(fr),w(b9),w(F9),w(V3),w(T9),w(Z3),m&&t(INe),m&&t(Pc),w(M9),m&&t(qNe),m&&t(gr),w(E9),w(w9),w(ow),w(A9),w(hw),m&&t(NNe),m&&t(qc),w(y9),m&&t(jNe),m&&t(hr),w(L9),w($9),w(pw),w(k9),w(yw),m&&t(DNe),m&&t(Dc),w(S9),m&&t(GNe),m&&t(ur),w(R9),w(B9),w(xw),w(I9),w(jw),m&&t(ONe),m&&t(Vc),w(q9),m&&t(VNe),m&&t(pr),w(N9),w(D9),w(Gw),w(G9),w(Kw),m&&t(XNe),m&&t(Wc),w(O9),m&&t(zNe),m&&t(_r),w(V9),w(z9),w(e0),w(W9),w(m0),m&&t(WNe),m&&t(Uc),w(Q9),m&&t(QNe),m&&t(br),w(H9),w(J9),w(g0),w(Y9),w(M0),m&&t(HNe),m&&t(Kc),w(K9),m&&t(UNe),m&&t(vr),w(Z9),w(ox),w(C0),w(rx),w(R0),m&&t(JNe),m&&t(om),w(tx),m&&t(YNe),m&&t(Fr),w(ax),w(sx),w(B0),w(lx),w(q0),m&&t(KNe),m&&t(am),w(ix),m&&t(ZNe),m&&t(Tr),w(dx),w(mx),w(j0),w(fx),w(O0),m&&t(eje),m&&t(lm),w(hx),m&&t(oje),m&&t(Mr),w(ux),w(_x),w(X0),w(bx),w(W0)}}}const Cxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wxt(L){return w7t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sxt extends T7t{constructor(g){super();M7t(this,g,wxt,Ext,E7t,{})}}export{Sxt as default,Cxt as metadata};
