import{S as yd,i as Ed,s as Vd,e as r,k as m,w as M,t as a,M as Fd,c as n,d as t,m as p,a as i,x as y,h as s,b as h,G as e,g,y as E,q as V,o as F,B as x,v as xd,L as ha}from"../../chunks/vendor-hf-doc-builder.js";import{T as ut}from"../../chunks/Tip-hf-doc-builder.js";import{D as Fe}from"../../chunks/Docstring-hf-doc-builder.js";import{C as go}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as gt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as pa}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function kd(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTConfig, MobileViTModel

# Initializing a mobilevit-small style configuration
configuration = MobileViTConfig()

# Initializing a model from the mobilevit-small style configuration
model = MobileViTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTConfig, MobileViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileViTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=r("p"),T=a("Example:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Example:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Cd(I){let d,T;return{c(){d=r("p"),T=a(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){d=n(u,"P",{});var f=i(d);T=s(f,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),f.forEach(t)},m(u,f){g(u,d,f),e(d,T)},d(u){u&&t(d)}}}function jd(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function Id(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=r("p"),T=a("Example:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Example:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Pd(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function Sd(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),T=a("Example:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Example:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Od(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function zd(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = MobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=r("p"),T=a("Examples:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Examples:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Ad(I){let d,T,u,f,v,l,c,C,xe,ge,A,ee,te,w,ke,H,Ce,_e,L,je,oe,Y,Ie,be,D,Pe,ve,R,de,Se,ae,j,S,Te,P,ce,se,J,re,Oe,O,ze,K,ne,Ae,B,Ne,Le,U,me,q,qe,G,z,De,N,pe,X;return{c(){d=r("p"),T=a("TensorFlow models and layers in "),u=r("code"),f=a("transformers"),v=a(" accept two formats as input:"),l=m(),c=r("ul"),C=r("li"),xe=a("having all inputs as keyword arguments (like PyTorch models), or"),ge=m(),A=r("li"),ee=a("having all inputs as a list, tuple or dict in the first positional argument."),te=m(),w=r("p"),ke=a(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ce=a("model.fit()"),_e=a(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=r("code"),je=a("model.fit()"),oe=a(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Ie=a("fit()"),be=a(" and "),D=r("code"),Pe=a("predict()"),ve=a(`, such as when creating your own layers or models with
the Keras `),R=r("code"),de=a("Functional"),Se=a(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ae=m(),j=r("ul"),S=r("li"),Te=a("a single Tensor with "),P=r("code"),ce=a("pixel_values"),se=a(" only and nothing else: "),J=r("code"),re=a("model(pixel_values)"),Oe=m(),O=r("li"),ze=a(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=a("model([pixel_values, attention_mask])"),Ae=a(" or "),B=r("code"),Ne=a("model([pixel_values, attention_mask, token_type_ids])"),Le=m(),U=r("li"),me=a(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=r("code"),qe=a('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=m(),z=r("p"),De=a(`Note that when creating models and layers with
`),N=r("a"),pe=a("subclassing"),X=a(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var $=i(d);T=s($,"TensorFlow models and layers in "),u=n($,"CODE",{});var Xe=i(u);f=s(Xe,"transformers"),Xe.forEach(t),v=s($," accept two formats as input:"),$.forEach(t),l=p(_),c=n(_,"UL",{});var ie=i(c);C=n(ie,"LI",{});var we=i(C);xe=s(we,"having all inputs as keyword arguments (like PyTorch models), or"),we.forEach(t),ge=p(ie),A=n(ie,"LI",{});var Ze=i(A);ee=s(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),ie.forEach(t),te=p(_),w=n(_,"P",{});var k=i(w);ke=s(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var Qe=i(H);Ce=s(Qe,"model.fit()"),Qe.forEach(t),_e=s(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=n(k,"CODE",{});var $e=i(L);je=s($e,"model.fit()"),$e.forEach(t),oe=s(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Ie=s(Me,"fit()"),Me.forEach(t),be=s(k," and "),D=n(k,"CODE",{});var et=i(D);Pe=s(et,"predict()"),et.forEach(t),ve=s(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var ye=i(R);de=s(ye,"Functional"),ye.forEach(t),Se=s(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),ae=p(_),j=n(_,"UL",{});var W=i(j);S=n(W,"LI",{});var Z=i(S);Te=s(Z,"a single Tensor with "),P=n(Z,"CODE",{});var tt=i(P);ce=s(tt,"pixel_values"),tt.forEach(t),se=s(Z," only and nothing else: "),J=n(Z,"CODE",{});var Ue=i(J);re=s(Ue,"model(pixel_values)"),Ue.forEach(t),Z.forEach(t),Oe=p(W),O=n(W,"LI",{});var Q=i(O);ze=s(Q,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Q,"CODE",{});var He=i(K);ne=s(He,"model([pixel_values, attention_mask])"),He.forEach(t),Ae=s(Q," or "),B=n(Q,"CODE",{});var Ee=i(B);Ne=s(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Q.forEach(t),Le=p(W),U=n(W,"LI",{});var Ve=i(U);me=s(Ve,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=n(Ve,"CODE",{});var he=i(q);qe=s(he,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),he.forEach(t),Ve.forEach(t),W.forEach(t),G=p(_),z=n(_,"P",{});var le=i(z);De=s(le,`Note that when creating models and layers with
`),N=n(le,"A",{href:!0,rel:!0});var We=i(N);pe=s(We,"subclassing"),We.forEach(t),X=s(le,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),le.forEach(t),this.h()},h(){h(N,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(N,"rel","nofollow")},m(_,$){g(_,d,$),e(d,T),e(d,u),e(u,f),e(d,v),g(_,l,$),g(_,c,$),e(c,C),e(C,xe),e(c,ge),e(c,A),e(A,ee),g(_,te,$),g(_,w,$),e(w,ke),e(w,H),e(H,Ce),e(w,_e),e(w,L),e(L,je),e(w,oe),e(w,Y),e(Y,Ie),e(w,be),e(w,D),e(D,Pe),e(w,ve),e(w,R),e(R,de),e(w,Se),g(_,ae,$),g(_,j,$),e(j,S),e(S,Te),e(S,P),e(P,ce),e(S,se),e(S,J),e(J,re),e(j,Oe),e(j,O),e(O,ze),e(O,K),e(K,ne),e(O,Ae),e(O,B),e(B,Ne),e(j,Le),e(j,U),e(U,me),e(U,q),e(q,qe),g(_,G,$),g(_,z,$),e(z,De),e(z,N),e(N,pe),e(z,X)},d(_){_&&t(d),_&&t(l),_&&t(c),_&&t(te),_&&t(w),_&&t(ae),_&&t(j),_&&t(G),_&&t(z)}}}function Nd(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function Ld(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=r("p"),T=a("Example:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Example:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function qd(I){let d,T,u,f,v,l,c,C,xe,ge,A,ee,te,w,ke,H,Ce,_e,L,je,oe,Y,Ie,be,D,Pe,ve,R,de,Se,ae,j,S,Te,P,ce,se,J,re,Oe,O,ze,K,ne,Ae,B,Ne,Le,U,me,q,qe,G,z,De,N,pe,X;return{c(){d=r("p"),T=a("TensorFlow models and layers in "),u=r("code"),f=a("transformers"),v=a(" accept two formats as input:"),l=m(),c=r("ul"),C=r("li"),xe=a("having all inputs as keyword arguments (like PyTorch models), or"),ge=m(),A=r("li"),ee=a("having all inputs as a list, tuple or dict in the first positional argument."),te=m(),w=r("p"),ke=a(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ce=a("model.fit()"),_e=a(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=r("code"),je=a("model.fit()"),oe=a(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Ie=a("fit()"),be=a(" and "),D=r("code"),Pe=a("predict()"),ve=a(`, such as when creating your own layers or models with
the Keras `),R=r("code"),de=a("Functional"),Se=a(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ae=m(),j=r("ul"),S=r("li"),Te=a("a single Tensor with "),P=r("code"),ce=a("pixel_values"),se=a(" only and nothing else: "),J=r("code"),re=a("model(pixel_values)"),Oe=m(),O=r("li"),ze=a(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=a("model([pixel_values, attention_mask])"),Ae=a(" or "),B=r("code"),Ne=a("model([pixel_values, attention_mask, token_type_ids])"),Le=m(),U=r("li"),me=a(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=r("code"),qe=a('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=m(),z=r("p"),De=a(`Note that when creating models and layers with
`),N=r("a"),pe=a("subclassing"),X=a(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var $=i(d);T=s($,"TensorFlow models and layers in "),u=n($,"CODE",{});var Xe=i(u);f=s(Xe,"transformers"),Xe.forEach(t),v=s($," accept two formats as input:"),$.forEach(t),l=p(_),c=n(_,"UL",{});var ie=i(c);C=n(ie,"LI",{});var we=i(C);xe=s(we,"having all inputs as keyword arguments (like PyTorch models), or"),we.forEach(t),ge=p(ie),A=n(ie,"LI",{});var Ze=i(A);ee=s(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),ie.forEach(t),te=p(_),w=n(_,"P",{});var k=i(w);ke=s(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var Qe=i(H);Ce=s(Qe,"model.fit()"),Qe.forEach(t),_e=s(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=n(k,"CODE",{});var $e=i(L);je=s($e,"model.fit()"),$e.forEach(t),oe=s(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Ie=s(Me,"fit()"),Me.forEach(t),be=s(k," and "),D=n(k,"CODE",{});var et=i(D);Pe=s(et,"predict()"),et.forEach(t),ve=s(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var ye=i(R);de=s(ye,"Functional"),ye.forEach(t),Se=s(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),ae=p(_),j=n(_,"UL",{});var W=i(j);S=n(W,"LI",{});var Z=i(S);Te=s(Z,"a single Tensor with "),P=n(Z,"CODE",{});var tt=i(P);ce=s(tt,"pixel_values"),tt.forEach(t),se=s(Z," only and nothing else: "),J=n(Z,"CODE",{});var Ue=i(J);re=s(Ue,"model(pixel_values)"),Ue.forEach(t),Z.forEach(t),Oe=p(W),O=n(W,"LI",{});var Q=i(O);ze=s(Q,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Q,"CODE",{});var He=i(K);ne=s(He,"model([pixel_values, attention_mask])"),He.forEach(t),Ae=s(Q," or "),B=n(Q,"CODE",{});var Ee=i(B);Ne=s(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Q.forEach(t),Le=p(W),U=n(W,"LI",{});var Ve=i(U);me=s(Ve,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=n(Ve,"CODE",{});var he=i(q);qe=s(he,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),he.forEach(t),Ve.forEach(t),W.forEach(t),G=p(_),z=n(_,"P",{});var le=i(z);De=s(le,`Note that when creating models and layers with
`),N=n(le,"A",{href:!0,rel:!0});var We=i(N);pe=s(We,"subclassing"),We.forEach(t),X=s(le,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),le.forEach(t),this.h()},h(){h(N,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(N,"rel","nofollow")},m(_,$){g(_,d,$),e(d,T),e(d,u),e(u,f),e(d,v),g(_,l,$),g(_,c,$),e(c,C),e(C,xe),e(c,ge),e(c,A),e(A,ee),g(_,te,$),g(_,w,$),e(w,ke),e(w,H),e(H,Ce),e(w,_e),e(w,L),e(L,je),e(w,oe),e(w,Y),e(Y,Ie),e(w,be),e(w,D),e(D,Pe),e(w,ve),e(w,R),e(R,de),e(w,Se),g(_,ae,$),g(_,j,$),e(j,S),e(S,Te),e(S,P),e(P,ce),e(S,se),e(S,J),e(J,re),e(j,Oe),e(j,O),e(O,ze),e(O,K),e(K,ne),e(O,Ae),e(O,B),e(B,Ne),e(j,Le),e(j,U),e(U,me),e(U,q),e(q,qe),g(_,G,$),g(_,z,$),e(z,De),e(z,N),e(N,pe),e(z,X)},d(_){_&&t(d),_&&t(l),_&&t(c),_&&t(te),_&&t(w),_&&t(ae),_&&t(j),_&&t(G),_&&t(z)}}}function Dd(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function Rd(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),T=a("Example:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Example:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Bd(I){let d,T,u,f,v,l,c,C,xe,ge,A,ee,te,w,ke,H,Ce,_e,L,je,oe,Y,Ie,be,D,Pe,ve,R,de,Se,ae,j,S,Te,P,ce,se,J,re,Oe,O,ze,K,ne,Ae,B,Ne,Le,U,me,q,qe,G,z,De,N,pe,X;return{c(){d=r("p"),T=a("TensorFlow models and layers in "),u=r("code"),f=a("transformers"),v=a(" accept two formats as input:"),l=m(),c=r("ul"),C=r("li"),xe=a("having all inputs as keyword arguments (like PyTorch models), or"),ge=m(),A=r("li"),ee=a("having all inputs as a list, tuple or dict in the first positional argument."),te=m(),w=r("p"),ke=a(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ce=a("model.fit()"),_e=a(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=r("code"),je=a("model.fit()"),oe=a(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Ie=a("fit()"),be=a(" and "),D=r("code"),Pe=a("predict()"),ve=a(`, such as when creating your own layers or models with
the Keras `),R=r("code"),de=a("Functional"),Se=a(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ae=m(),j=r("ul"),S=r("li"),Te=a("a single Tensor with "),P=r("code"),ce=a("pixel_values"),se=a(" only and nothing else: "),J=r("code"),re=a("model(pixel_values)"),Oe=m(),O=r("li"),ze=a(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=a("model([pixel_values, attention_mask])"),Ae=a(" or "),B=r("code"),Ne=a("model([pixel_values, attention_mask, token_type_ids])"),Le=m(),U=r("li"),me=a(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=r("code"),qe=a('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=m(),z=r("p"),De=a(`Note that when creating models and layers with
`),N=r("a"),pe=a("subclassing"),X=a(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var $=i(d);T=s($,"TensorFlow models and layers in "),u=n($,"CODE",{});var Xe=i(u);f=s(Xe,"transformers"),Xe.forEach(t),v=s($," accept two formats as input:"),$.forEach(t),l=p(_),c=n(_,"UL",{});var ie=i(c);C=n(ie,"LI",{});var we=i(C);xe=s(we,"having all inputs as keyword arguments (like PyTorch models), or"),we.forEach(t),ge=p(ie),A=n(ie,"LI",{});var Ze=i(A);ee=s(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),ie.forEach(t),te=p(_),w=n(_,"P",{});var k=i(w);ke=s(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var Qe=i(H);Ce=s(Qe,"model.fit()"),Qe.forEach(t),_e=s(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=n(k,"CODE",{});var $e=i(L);je=s($e,"model.fit()"),$e.forEach(t),oe=s(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Ie=s(Me,"fit()"),Me.forEach(t),be=s(k," and "),D=n(k,"CODE",{});var et=i(D);Pe=s(et,"predict()"),et.forEach(t),ve=s(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var ye=i(R);de=s(ye,"Functional"),ye.forEach(t),Se=s(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),ae=p(_),j=n(_,"UL",{});var W=i(j);S=n(W,"LI",{});var Z=i(S);Te=s(Z,"a single Tensor with "),P=n(Z,"CODE",{});var tt=i(P);ce=s(tt,"pixel_values"),tt.forEach(t),se=s(Z," only and nothing else: "),J=n(Z,"CODE",{});var Ue=i(J);re=s(Ue,"model(pixel_values)"),Ue.forEach(t),Z.forEach(t),Oe=p(W),O=n(W,"LI",{});var Q=i(O);ze=s(Q,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Q,"CODE",{});var He=i(K);ne=s(He,"model([pixel_values, attention_mask])"),He.forEach(t),Ae=s(Q," or "),B=n(Q,"CODE",{});var Ee=i(B);Ne=s(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Q.forEach(t),Le=p(W),U=n(W,"LI",{});var Ve=i(U);me=s(Ve,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),q=n(Ve,"CODE",{});var he=i(q);qe=s(he,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),he.forEach(t),Ve.forEach(t),W.forEach(t),G=p(_),z=n(_,"P",{});var le=i(z);De=s(le,`Note that when creating models and layers with
`),N=n(le,"A",{href:!0,rel:!0});var We=i(N);pe=s(We,"subclassing"),We.forEach(t),X=s(le,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),le.forEach(t),this.h()},h(){h(N,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(N,"rel","nofollow")},m(_,$){g(_,d,$),e(d,T),e(d,u),e(u,f),e(d,v),g(_,l,$),g(_,c,$),e(c,C),e(C,xe),e(c,ge),e(c,A),e(A,ee),g(_,te,$),g(_,w,$),e(w,ke),e(w,H),e(H,Ce),e(w,_e),e(w,L),e(L,je),e(w,oe),e(w,Y),e(Y,Ie),e(w,be),e(w,D),e(D,Pe),e(w,ve),e(w,R),e(R,de),e(w,Se),g(_,ae,$),g(_,j,$),e(j,S),e(S,Te),e(S,P),e(P,ce),e(S,se),e(S,J),e(J,re),e(j,Oe),e(j,O),e(O,ze),e(O,K),e(K,ne),e(O,Ae),e(O,B),e(B,Ne),e(j,Le),e(j,U),e(U,me),e(U,q),e(q,qe),g(_,G,$),g(_,z,$),e(z,De),e(z,N),e(N,pe),e(z,X)},d(_){_&&t(d),_&&t(l),_&&t(c),_&&t(te),_&&t(w),_&&t(ae),_&&t(j),_&&t(G),_&&t(z)}}}function Ud(I){let d,T,u,f,v;return{c(){d=r("p"),T=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r("code"),f=a("Module"),v=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(c,"CODE",{});var C=i(u);f=s(C,"Module"),C.forEach(t),v=s(c,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),c.forEach(t)},m(l,c){g(l,d,c),e(d,T),e(d,u),e(u,f),e(d,v)},d(l){l&&t(d)}}}function Wd(I){let d,T,u,f,v;return f=new go({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = TFMobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="tf")

outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=r("p"),T=a("Examples:"),u=m(),M(f.$$.fragment)},l(l){d=n(l,"P",{});var c=i(d);T=s(c,"Examples:"),c.forEach(t),u=p(l),y(f.$$.fragment,l)},m(l,c){g(l,d,c),e(d,T),g(l,u,c),E(f,l,c),v=!0},p:ha,i(l){v||(V(f.$$.fragment,l),v=!0)},o(l){F(f.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(u),x(f,l)}}}function Hd(I){let d,T,u,f,v,l,c,C,xe,ge,A,ee,te,w,ke,H,Ce,_e,L,je,oe,Y,Ie,be,D,Pe,ve,R,de,Se,ae,j,S,Te,P,ce,se,J,re,Oe,O,ze,K,ne,Ae,B,Ne,Le,U,me,q,qe,G,z,De,N,pe,X,_,$,Xe,ie,we,Ze,k,Qe,$e,Me,et,ye,W,Z,tt,Ue,Q,He,Ee,Ve,he,le,We,fr,ur,Es,ot,gr,_o,_r,br,bo,vr,Tr,vo,wr,$r,Vs,_t,Pt,La,To,Mr,qa,yr,Fs,Ke,wo,Er,bt,Vr,fa,Fr,xr,$o,kr,Cr,jr,vt,Ir,ua,Pr,Sr,ga,Or,zr,Ar,St,xs,Tt,Ot,Da,Mo,Nr,Ra,Lr,ks,Re,yo,qr,Ba,Dr,Rr,Eo,Br,_a,Ur,Wr,Hr,pt,Vo,Kr,Ua,Gr,Yr,zt,Jr,At,Fo,Xr,xo,Zr,ba,Qr,en,Cs,wt,Nt,Wa,ko,tn,Ha,on,js,mt,Co,an,jo,sn,Io,rn,nn,ln,at,Po,dn,$t,cn,va,mn,pn,Ka,hn,fn,un,Lt,gn,qt,Is,Mt,Dt,Ga,So,_n,Ya,bn,Ps,Ge,Oo,vn,Ja,Tn,wn,zo,$n,Ao,Mn,yn,En,st,No,Vn,yt,Fn,Ta,xn,kn,Xa,Cn,jn,In,Rt,Pn,Bt,Ss,Et,Ut,Za,Lo,Sn,Qa,On,Os,Ye,qo,zn,es,An,Nn,Do,Ln,Ro,qn,Dn,Rn,rt,Bo,Bn,Vt,Un,wa,Wn,Hn,ts,Kn,Gn,Yn,Wt,Jn,Ht,zs,Ft,Kt,os,Uo,Xn,as,Zn,As,Be,Wo,Qn,Ho,ei,$a,ti,oi,ai,Ko,si,Go,ri,ni,ii,Gt,li,nt,Yo,di,xt,ci,Ma,mi,pi,ss,hi,fi,ui,Yt,gi,Jt,Ns,kt,Xt,rs,Jo,_i,ns,bi,Ls,fe,Xo,vi,is,Ti,wi,Zo,$i,ya,Mi,yi,Ei,Qo,Vi,ea,Fi,xi,ki,Zt,Ci,it,ta,ji,Ct,Ii,Ea,Pi,Si,ls,Oi,zi,Ai,Qt,Ni,eo,qs,jt,to,ds,oa,Li,cs,qi,Ds,ue,aa,Di,ms,Ri,Bi,sa,Ui,Va,Wi,Hi,Ki,ra,Gi,na,Yi,Ji,Xi,oo,Zi,lt,ia,Qi,It,el,Fa,tl,ol,ps,al,sl,rl,ao,nl,so,Rs;return l=new gt({}),w=new gt({}),Ee=new go({props:{code:`from transformers import TFMobileViTForImageClassification
import tensorflow as tf


model_ckpt = "apple/mobilevit-xx-small"
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split("/")[-1] + ".tflite"
with open(tflite_filename, "wb") as f:
    f.write(tflite_model)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMobileViTForImageClassification
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf


model_ckpt = <span class="hljs-string">&quot;apple/mobilevit-xx-small&quot;</span>
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.tflite&quot;</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(tflite_filename, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:
    f.write(tflite_model)`}}),To=new gt({}),wo=new Fe({props:{name:"class transformers.MobileViTConfig",anchor:"transformers.MobileViTConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 256"},{name:"patch_size",val:" = 2"},{name:"hidden_sizes",val:" = [144, 192, 240]"},{name:"neck_hidden_sizes",val:" = [16, 32, 64, 96, 128, 160, 640]"},{name:"num_attention_heads",val:" = 4"},{name:"mlp_ratio",val:" = 2.0"},{name:"expand_ratio",val:" = 4.0"},{name:"hidden_act",val:" = 'silu'"},{name:"conv_kernel_size",val:" = 3"},{name:"output_stride",val:" = 32"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"qkv_bias",val:" = True"},{name:"aspp_out_channels",val:" = 256"},{name:"atrous_rates",val:" = [6, 12, 18]"},{name:"aspp_dropout_prob",val:" = 0.1"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileViTConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileViTConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.MobileViTConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[144, 192, 240]</code>) &#x2014;
Dimensionality (hidden size) of the Transformer encoders at each stage.`,name:"hidden_sizes"},{anchor:"transformers.MobileViTConfig.neck_hidden_sizes",description:`<strong>neck_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 32, 64, 96, 128, 160, 640]</code>) &#x2014;
The number of channels for the feature maps of the backbone.`,name:"neck_hidden_sizes"},{anchor:"transformers.MobileViTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MobileViTConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 2.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.MobileViTConfig.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
Expansion factor for the MobileNetv2 layers.`,name:"expand_ratio"},{anchor:"transformers.MobileViTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileViTConfig.conv_kernel_size",description:`<strong>conv_kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the convolutional kernel in the MobileViT layer.`,name:"conv_kernel_size"},{anchor:"transformers.MobileViTConfig.output_stride",description:`<strong>output_stride</strong> (<code>int</code>, <code>optional</code>, defaults to 32) &#x2014;
The ratio of the spatial resolution of the output to the resolution of the input image.`,name:"output_stride"},{anchor:"transformers.MobileViTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the Transformer encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.MobileViTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MobileViTConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileViTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileViTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MobileViTConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.MobileViTConfig.aspp_out_channels",description:`<strong>aspp_out_channels</strong> (<code>int</code>, <code>optional</code>, defaults to 256) &#x2014;
Number of output channels used in the ASPP layer for semantic segmentation.`,name:"aspp_out_channels"},{anchor:"transformers.MobileViTConfig.atrous_rates",description:`<strong>atrous_rates</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[6, 12, 18]</code>) &#x2014;
Dilation (atrous) factors used in the ASPP layer for semantic segmentation.`,name:"atrous_rates"},{anchor:"transformers.MobileViTConfig.aspp_dropout_prob",description:`<strong>aspp_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the ASPP layer for semantic segmentation.`,name:"aspp_dropout_prob"},{anchor:"transformers.MobileViTConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/configuration_mobilevit.py#L46"}}),St=new pa({props:{anchor:"transformers.MobileViTConfig.example",$$slots:{default:[kd]},$$scope:{ctx:I}}}),Mo=new gt({}),yo=new Fe({props:{name:"class transformers.MobileViTFeatureExtractor",anchor:"transformers.MobileViTFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 288"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 256"},{name:"do_flip_channel_order",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileViTFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 288) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to match the shorter side. Only has an effect if
<code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileViTFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileViTFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileViTFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileViTFeatureExtractor.do_flip_channel_order",description:`<strong>do_flip_channel_order</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR.`,name:"do_flip_channel_order"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L33"}}),Vo=new Fe({props:{name:"__call__",anchor:"transformers.MobileViTFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileViTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L80",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),zt=new ut({props:{warning:!0,$$slots:{default:[Cd]},$$scope:{ctx:I}}}),Fo=new Fe({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MobileViTFeatureExtractor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.List[typing.Tuple] = None"}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.MobileViTFeatureExtractor.post_process_semantic_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple]</code>, <em>optional</em>) &#x2014;
A list of length <code>batch_size</code>, where each item is a <code>Tuple[int, int]</code> corresponding to the requested
final size (height, width) of each prediction. If left to None, predictions will not be resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L158",returnDescription:`
<p>A list of length <code>batch_size</code>, where each item is a semantic segmentation map of shape (height, width)
corresponding to the target_sizes entry (if <code>target_sizes</code> is specified). Each entry of each
<code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p><code>List[torch.Tensor]</code></p>
`}}),ko=new gt({}),Co=new Fe({props:{name:"class transformers.MobileViTModel",anchor:"transformers.MobileViTModel",parameters:[{name:"config",val:": MobileViTConfig"},{name:"expand_output",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L709"}}),Po=new Fe({props:{name:"forward",anchor:"transformers.MobileViTModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L746",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Lt=new ut({props:{$$slots:{default:[jd]},$$scope:{ctx:I}}}),qt=new pa({props:{anchor:"transformers.MobileViTModel.forward.example",$$slots:{default:[Id]},$$scope:{ctx:I}}}),So=new gt({}),Oo=new Fe({props:{name:"class transformers.MobileViTForImageClassification",anchor:"transformers.MobileViTForImageClassification",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L804"}}),No=new Fe({props:{name:"forward",anchor:"transformers.MobileViTForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L820",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Rt=new ut({props:{$$slots:{default:[Pd]},$$scope:{ctx:I}}}),Bt=new pa({props:{anchor:"transformers.MobileViTForImageClassification.forward.example",$$slots:{default:[Sd]},$$scope:{ctx:I}}}),Lo=new gt({}),qo=new Fe({props:{name:"class transformers.MobileViTForSemanticSegmentation",anchor:"transformers.MobileViTForSemanticSegmentation",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1000"}}),Bo=new Fe({props:{name:"forward",anchor:"transformers.MobileViTForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1011",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Wt=new ut({props:{$$slots:{default:[Od]},$$scope:{ctx:I}}}),Ht=new pa({props:{anchor:"transformers.MobileViTForSemanticSegmentation.forward.example",$$slots:{default:[zd]},$$scope:{ctx:I}}}),Uo=new gt({}),Wo=new Fe({props:{name:"class transformers.TFMobileViTModel",anchor:"transformers.TFMobileViTModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L831"}}),Gt=new ut({props:{$$slots:{default:[Ad]},$$scope:{ctx:I}}}),Yo=new Fe({props:{name:"call",anchor:"transformers.TFMobileViTModel.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L839",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Yt=new ut({props:{$$slots:{default:[Nd]},$$scope:{ctx:I}}}),Jt=new pa({props:{anchor:"transformers.TFMobileViTModel.call.example",$$slots:{default:[Ld]},$$scope:{ctx:I}}}),Jo=new gt({}),Xo=new Fe({props:{name:"class transformers.TFMobileViTForImageClassification",anchor:"transformers.TFMobileViTForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L876"}}),Zt=new ut({props:{$$slots:{default:[qd]},$$scope:{ctx:I}}}),ta=new Fe({props:{name:"call",anchor:"transformers.TFMobileViTForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L889",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called
feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),Qt=new ut({props:{$$slots:{default:[Dd]},$$scope:{ctx:I}}}),eo=new pa({props:{anchor:"transformers.TFMobileViTForImageClassification.call.example",$$slots:{default:[Rd]},$$scope:{ctx:I}}}),oa=new gt({}),aa=new Fe({props:{name:"class transformers.TFMobileViTForSemanticSegmentation",anchor:"transformers.TFMobileViTForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1057"}}),oo=new ut({props:{$$slots:{default:[Bd]},$$scope:{ctx:I}}}),ia=new Fe({props:{name:"call",anchor:"transformers.TFMobileViTForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1085",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),ao=new ut({props:{$$slots:{default:[Ud]},$$scope:{ctx:I}}}),so=new pa({props:{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.example",$$slots:{default:[Wd]},$$scope:{ctx:I}}}),{c(){d=r("meta"),T=m(),u=r("h1"),f=r("a"),v=r("span"),M(l.$$.fragment),c=m(),C=r("span"),xe=a("MobileViT"),ge=m(),A=r("h2"),ee=r("a"),te=r("span"),M(w.$$.fragment),ke=m(),H=r("span"),Ce=a("Overview"),_e=m(),L=r("p"),je=a("The MobileViT model was proposed in "),oe=r("a"),Y=a("MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Ie=a(" by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),be=m(),D=r("p"),Pe=a("The abstract from the paper is the following:"),ve=m(),R=r("p"),de=r("em"),Se=a("Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),ae=m(),j=r("p"),S=a("Tips:"),Te=m(),P=r("ul"),ce=r("li"),se=r("p"),J=a("MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),re=r("a"),Oe=a("this tutorial"),O=a(" for a lightweight introduction."),ze=m(),K=r("li"),ne=r("p"),Ae=a("One can use "),B=r("a"),Ne=a("MobileViTFeatureExtractor"),Le=a(" to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),U=m(),me=r("li"),q=r("p"),qe=a("The available image classification checkpoints are pre-trained on "),G=r("a"),z=a("ImageNet-1k"),De=a(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),N=m(),pe=r("li"),X=r("p"),_=a("The segmentation model uses a "),$=r("a"),Xe=a("DeepLabV3"),ie=a(" head. The available semantic segmentation checkpoints are pre-trained on "),we=r("a"),Ze=a("PASCAL VOC"),k=a("."),Qe=m(),$e=r("li"),Me=r("p"),et=a("As the name suggests MobileViT was desgined to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),ye=r("a"),W=a("TensorFlow Lite"),Z=a("."),tt=m(),Ue=r("p"),Q=a(`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),He=m(),M(Ee.$$.fragment),Ve=m(),he=r("p"),le=a("The resulting model will be just "),We=r("strong"),fr=a("about an MB"),ur=a(` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),Es=m(),ot=r("p"),gr=a("This model was contributed by "),_o=r("a"),_r=a("matthijs"),br=a(". The TensorFlow version of the model was contributed by "),bo=r("a"),vr=a("sayakpaul"),Tr=a(". The original code and weights can be found "),vo=r("a"),wr=a("here"),$r=a("."),Vs=m(),_t=r("h2"),Pt=r("a"),La=r("span"),M(To.$$.fragment),Mr=m(),qa=r("span"),yr=a("MobileViTConfig"),Fs=m(),Ke=r("div"),M(wo.$$.fragment),Er=m(),bt=r("p"),Vr=a("This is the configuration class to store the configuration of a "),fa=r("a"),Fr=a("MobileViTModel"),xr=a(`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),$o=r("a"),kr=a("apple/mobilevit-small"),Cr=a(" architecture."),jr=m(),vt=r("p"),Ir=a("Configuration objects inherit from "),ua=r("a"),Pr=a("PretrainedConfig"),Sr=a(` and can be used to control the model outputs. Read the
documentation from `),ga=r("a"),Or=a("PretrainedConfig"),zr=a(" for more information."),Ar=m(),M(St.$$.fragment),xs=m(),Tt=r("h2"),Ot=r("a"),Da=r("span"),M(Mo.$$.fragment),Nr=m(),Ra=r("span"),Lr=a("MobileViTFeatureExtractor"),ks=m(),Re=r("div"),M(yo.$$.fragment),qr=m(),Ba=r("p"),Dr=a("Constructs a MobileViT feature extractor."),Rr=m(),Eo=r("p"),Br=a("This feature extractor inherits from "),_a=r("a"),Ur=a("FeatureExtractionMixin"),Wr=a(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Hr=m(),pt=r("div"),M(Vo.$$.fragment),Kr=m(),Ua=r("p"),Gr=a("Main method to prepare for the model one or several image(s)."),Yr=m(),M(zt.$$.fragment),Jr=m(),At=r("div"),M(Fo.$$.fragment),Xr=m(),xo=r("p"),Zr=a("Converts the output of "),ba=r("a"),Qr=a("MobileViTForSemanticSegmentation"),en=a(` into semantic segmentation maps. Only supports
PyTorch.`),Cs=m(),wt=r("h2"),Nt=r("a"),Wa=r("span"),M(ko.$$.fragment),tn=m(),Ha=r("span"),on=a("MobileViTModel"),js=m(),mt=r("div"),M(Co.$$.fragment),an=m(),jo=r("p"),sn=a(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Io=r("a"),rn=a("torch.nn.Module"),nn=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ln=m(),at=r("div"),M(Po.$$.fragment),dn=m(),$t=r("p"),cn=a("The "),va=r("a"),mn=a("MobileViTModel"),pn=a(" forward method, overrides the "),Ka=r("code"),hn=a("__call__"),fn=a(" special method."),un=m(),M(Lt.$$.fragment),gn=m(),M(qt.$$.fragment),Is=m(),Mt=r("h2"),Dt=r("a"),Ga=r("span"),M(So.$$.fragment),_n=m(),Ya=r("span"),bn=a("MobileViTForImageClassification"),Ps=m(),Ge=r("div"),M(Oo.$$.fragment),vn=m(),Ja=r("p"),Tn=a(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),wn=m(),zo=r("p"),$n=a("This model is a PyTorch "),Ao=r("a"),Mn=a("torch.nn.Module"),yn=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),En=m(),st=r("div"),M(No.$$.fragment),Vn=m(),yt=r("p"),Fn=a("The "),Ta=r("a"),xn=a("MobileViTForImageClassification"),kn=a(" forward method, overrides the "),Xa=r("code"),Cn=a("__call__"),jn=a(" special method."),In=m(),M(Rt.$$.fragment),Pn=m(),M(Bt.$$.fragment),Ss=m(),Et=r("h2"),Ut=r("a"),Za=r("span"),M(Lo.$$.fragment),Sn=m(),Qa=r("span"),On=a("MobileViTForSemanticSegmentation"),Os=m(),Ye=r("div"),M(qo.$$.fragment),zn=m(),es=r("p"),An=a("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Nn=m(),Do=r("p"),Ln=a("This model is a PyTorch "),Ro=r("a"),qn=a("torch.nn.Module"),Dn=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Rn=m(),rt=r("div"),M(Bo.$$.fragment),Bn=m(),Vt=r("p"),Un=a("The "),wa=r("a"),Wn=a("MobileViTForSemanticSegmentation"),Hn=a(" forward method, overrides the "),ts=r("code"),Kn=a("__call__"),Gn=a(" special method."),Yn=m(),M(Wt.$$.fragment),Jn=m(),M(Ht.$$.fragment),zs=m(),Ft=r("h2"),Kt=r("a"),os=r("span"),M(Uo.$$.fragment),Xn=m(),as=r("span"),Zn=a("TFMobileViTModel"),As=m(),Be=r("div"),M(Wo.$$.fragment),Qn=m(),Ho=r("p"),ei=a(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),$a=r("a"),ti=a("TFPreTrainedModel"),oi=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ai=m(),Ko=r("p"),si=a("This model is also a "),Go=r("a"),ri=a("tf.keras.Model"),ni=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ii=m(),M(Gt.$$.fragment),li=m(),nt=r("div"),M(Yo.$$.fragment),di=m(),xt=r("p"),ci=a("The "),Ma=r("a"),mi=a("TFMobileViTModel"),pi=a(" forward method, overrides the "),ss=r("code"),hi=a("__call__"),fi=a(" special method."),ui=m(),M(Yt.$$.fragment),gi=m(),M(Jt.$$.fragment),Ns=m(),kt=r("h2"),Xt=r("a"),rs=r("span"),M(Jo.$$.fragment),_i=m(),ns=r("span"),bi=a("TFMobileViTForImageClassification"),Ls=m(),fe=r("div"),M(Xo.$$.fragment),vi=m(),is=r("p"),Ti=a(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),wi=m(),Zo=r("p"),$i=a("This model inherits from "),ya=r("a"),Mi=a("TFPreTrainedModel"),yi=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ei=m(),Qo=r("p"),Vi=a("This model is also a "),ea=r("a"),Fi=a("tf.keras.Model"),xi=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ki=m(),M(Zt.$$.fragment),Ci=m(),it=r("div"),M(ta.$$.fragment),ji=m(),Ct=r("p"),Ii=a("The "),Ea=r("a"),Pi=a("TFMobileViTForImageClassification"),Si=a(" forward method, overrides the "),ls=r("code"),Oi=a("__call__"),zi=a(" special method."),Ai=m(),M(Qt.$$.fragment),Ni=m(),M(eo.$$.fragment),qs=m(),jt=r("h2"),to=r("a"),ds=r("span"),M(oa.$$.fragment),Li=m(),cs=r("span"),qi=a("TFMobileViTForSemanticSegmentation"),Ds=m(),ue=r("div"),M(aa.$$.fragment),Di=m(),ms=r("p"),Ri=a("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Bi=m(),sa=r("p"),Ui=a("This model inherits from "),Va=r("a"),Wi=a("TFPreTrainedModel"),Hi=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ki=m(),ra=r("p"),Gi=a("This model is also a "),na=r("a"),Yi=a("tf.keras.Model"),Ji=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Xi=m(),M(oo.$$.fragment),Zi=m(),lt=r("div"),M(ia.$$.fragment),Qi=m(),It=r("p"),el=a("The "),Fa=r("a"),tl=a("TFMobileViTForSemanticSegmentation"),ol=a(" forward method, overrides the "),ps=r("code"),al=a("__call__"),sl=a(" special method."),rl=m(),M(ao.$$.fragment),nl=m(),M(so.$$.fragment),this.h()},l(o){const b=Fd('[data-svelte="svelte-1phssyn"]',document.head);d=n(b,"META",{name:!0,content:!0}),b.forEach(t),T=p(o),u=n(o,"H1",{class:!0});var la=i(u);f=n(la,"A",{id:!0,class:!0,href:!0});var hs=i(f);v=n(hs,"SPAN",{});var fs=i(v);y(l.$$.fragment,fs),fs.forEach(t),hs.forEach(t),c=p(la),C=n(la,"SPAN",{});var us=i(C);xe=s(us,"MobileViT"),us.forEach(t),la.forEach(t),ge=p(o),A=n(o,"H2",{class:!0});var da=i(A);ee=n(da,"A",{id:!0,class:!0,href:!0});var gs=i(ee);te=n(gs,"SPAN",{});var _s=i(te);y(w.$$.fragment,_s),_s.forEach(t),gs.forEach(t),ke=p(da),H=n(da,"SPAN",{});var bs=i(H);Ce=s(bs,"Overview"),bs.forEach(t),da.forEach(t),_e=p(o),L=n(o,"P",{});var ca=i(L);je=s(ca,"The MobileViT model was proposed in "),oe=n(ca,"A",{href:!0,rel:!0});var vs=i(oe);Y=s(vs,"MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),vs.forEach(t),Ie=s(ca," by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),ca.forEach(t),be=p(o),D=n(o,"P",{});var Ts=i(D);Pe=s(Ts,"The abstract from the paper is the following:"),Ts.forEach(t),ve=p(o),R=n(o,"P",{});var ws=i(R);de=n(ws,"EM",{});var $s=i(de);Se=s($s,"Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),$s.forEach(t),ws.forEach(t),ae=p(o),j=n(o,"P",{});var Ms=i(j);S=s(Ms,"Tips:"),Ms.forEach(t),Te=p(o),P=n(o,"UL",{});var Je=i(P);ce=n(Je,"LI",{});var ys=i(ce);se=n(ys,"P",{});var ma=i(se);J=s(ma,"MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),re=n(ma,"A",{href:!0,rel:!0});var il=i(re);Oe=s(il,"this tutorial"),il.forEach(t),O=s(ma," for a lightweight introduction."),ma.forEach(t),ys.forEach(t),ze=p(Je),K=n(Je,"LI",{});var ll=i(K);ne=n(ll,"P",{});var Bs=i(ne);Ae=s(Bs,"One can use "),B=n(Bs,"A",{href:!0});var dl=i(B);Ne=s(dl,"MobileViTFeatureExtractor"),dl.forEach(t),Le=s(Bs," to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),Bs.forEach(t),ll.forEach(t),U=p(Je),me=n(Je,"LI",{});var cl=i(me);q=n(cl,"P",{});var Us=i(q);qe=s(Us,"The available image classification checkpoints are pre-trained on "),G=n(Us,"A",{href:!0,rel:!0});var ml=i(G);z=s(ml,"ImageNet-1k"),ml.forEach(t),De=s(Us," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),Us.forEach(t),cl.forEach(t),N=p(Je),pe=n(Je,"LI",{});var pl=i(pe);X=n(pl,"P",{});var xa=i(X);_=s(xa,"The segmentation model uses a "),$=n(xa,"A",{href:!0,rel:!0});var hl=i($);Xe=s(hl,"DeepLabV3"),hl.forEach(t),ie=s(xa," head. The available semantic segmentation checkpoints are pre-trained on "),we=n(xa,"A",{href:!0,rel:!0});var fl=i(we);Ze=s(fl,"PASCAL VOC"),fl.forEach(t),k=s(xa,"."),xa.forEach(t),pl.forEach(t),Qe=p(Je),$e=n(Je,"LI",{});var Ws=i($e);Me=n(Ws,"P",{});var Hs=i(Me);et=s(Hs,"As the name suggests MobileViT was desgined to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),ye=n(Hs,"A",{href:!0,rel:!0});var ul=i(ye);W=s(ul,"TensorFlow Lite"),ul.forEach(t),Z=s(Hs,"."),Hs.forEach(t),tt=p(Ws),Ue=n(Ws,"P",{});var gl=i(Ue);Q=s(gl,`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),gl.forEach(t),Ws.forEach(t),Je.forEach(t),He=p(o),y(Ee.$$.fragment,o),Ve=p(o),he=n(o,"P",{});var Ks=i(he);le=s(Ks,"The resulting model will be just "),We=n(Ks,"STRONG",{});var _l=i(We);fr=s(_l,"about an MB"),_l.forEach(t),ur=s(Ks,` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),Ks.forEach(t),Es=p(o),ot=n(o,"P",{});var ro=i(ot);gr=s(ro,"This model was contributed by "),_o=n(ro,"A",{href:!0,rel:!0});var bl=i(_o);_r=s(bl,"matthijs"),bl.forEach(t),br=s(ro,". The TensorFlow version of the model was contributed by "),bo=n(ro,"A",{href:!0,rel:!0});var vl=i(bo);vr=s(vl,"sayakpaul"),vl.forEach(t),Tr=s(ro,". The original code and weights can be found "),vo=n(ro,"A",{href:!0,rel:!0});var Tl=i(vo);wr=s(Tl,"here"),Tl.forEach(t),$r=s(ro,"."),ro.forEach(t),Vs=p(o),_t=n(o,"H2",{class:!0});var Gs=i(_t);Pt=n(Gs,"A",{id:!0,class:!0,href:!0});var wl=i(Pt);La=n(wl,"SPAN",{});var $l=i(La);y(To.$$.fragment,$l),$l.forEach(t),wl.forEach(t),Mr=p(Gs),qa=n(Gs,"SPAN",{});var Ml=i(qa);yr=s(Ml,"MobileViTConfig"),Ml.forEach(t),Gs.forEach(t),Fs=p(o),Ke=n(o,"DIV",{class:!0});var no=i(Ke);y(wo.$$.fragment,no),Er=p(no),bt=n(no,"P",{});var ka=i(bt);Vr=s(ka,"This is the configuration class to store the configuration of a "),fa=n(ka,"A",{href:!0});var yl=i(fa);Fr=s(yl,"MobileViTModel"),yl.forEach(t),xr=s(ka,`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),$o=n(ka,"A",{href:!0,rel:!0});var El=i($o);kr=s(El,"apple/mobilevit-small"),El.forEach(t),Cr=s(ka," architecture."),ka.forEach(t),jr=p(no),vt=n(no,"P",{});var Ca=i(vt);Ir=s(Ca,"Configuration objects inherit from "),ua=n(Ca,"A",{href:!0});var Vl=i(ua);Pr=s(Vl,"PretrainedConfig"),Vl.forEach(t),Sr=s(Ca,` and can be used to control the model outputs. Read the
documentation from `),ga=n(Ca,"A",{href:!0});var Fl=i(ga);Or=s(Fl,"PretrainedConfig"),Fl.forEach(t),zr=s(Ca," for more information."),Ca.forEach(t),Ar=p(no),y(St.$$.fragment,no),no.forEach(t),xs=p(o),Tt=n(o,"H2",{class:!0});var Ys=i(Tt);Ot=n(Ys,"A",{id:!0,class:!0,href:!0});var xl=i(Ot);Da=n(xl,"SPAN",{});var kl=i(Da);y(Mo.$$.fragment,kl),kl.forEach(t),xl.forEach(t),Nr=p(Ys),Ra=n(Ys,"SPAN",{});var Cl=i(Ra);Lr=s(Cl,"MobileViTFeatureExtractor"),Cl.forEach(t),Ys.forEach(t),ks=p(o),Re=n(o,"DIV",{class:!0});var ht=i(Re);y(yo.$$.fragment,ht),qr=p(ht),Ba=n(ht,"P",{});var jl=i(Ba);Dr=s(jl,"Constructs a MobileViT feature extractor."),jl.forEach(t),Rr=p(ht),Eo=n(ht,"P",{});var Js=i(Eo);Br=s(Js,"This feature extractor inherits from "),_a=n(Js,"A",{href:!0});var Il=i(_a);Ur=s(Il,"FeatureExtractionMixin"),Il.forEach(t),Wr=s(Js,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Js.forEach(t),Hr=p(ht),pt=n(ht,"DIV",{class:!0});var ja=i(pt);y(Vo.$$.fragment,ja),Kr=p(ja),Ua=n(ja,"P",{});var Pl=i(Ua);Gr=s(Pl,"Main method to prepare for the model one or several image(s)."),Pl.forEach(t),Yr=p(ja),y(zt.$$.fragment,ja),ja.forEach(t),Jr=p(ht),At=n(ht,"DIV",{class:!0});var Xs=i(At);y(Fo.$$.fragment,Xs),Xr=p(Xs),xo=n(Xs,"P",{});var Zs=i(xo);Zr=s(Zs,"Converts the output of "),ba=n(Zs,"A",{href:!0});var Sl=i(ba);Qr=s(Sl,"MobileViTForSemanticSegmentation"),Sl.forEach(t),en=s(Zs,` into semantic segmentation maps. Only supports
PyTorch.`),Zs.forEach(t),Xs.forEach(t),ht.forEach(t),Cs=p(o),wt=n(o,"H2",{class:!0});var Qs=i(wt);Nt=n(Qs,"A",{id:!0,class:!0,href:!0});var Ol=i(Nt);Wa=n(Ol,"SPAN",{});var zl=i(Wa);y(ko.$$.fragment,zl),zl.forEach(t),Ol.forEach(t),tn=p(Qs),Ha=n(Qs,"SPAN",{});var Al=i(Ha);on=s(Al,"MobileViTModel"),Al.forEach(t),Qs.forEach(t),js=p(o),mt=n(o,"DIV",{class:!0});var Ia=i(mt);y(Co.$$.fragment,Ia),an=p(Ia),jo=n(Ia,"P",{});var er=i(jo);sn=s(er,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Io=n(er,"A",{href:!0,rel:!0});var Nl=i(Io);rn=s(Nl,"torch.nn.Module"),Nl.forEach(t),nn=s(er,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),er.forEach(t),ln=p(Ia),at=n(Ia,"DIV",{class:!0});var io=i(at);y(Po.$$.fragment,io),dn=p(io),$t=n(io,"P",{});var Pa=i($t);cn=s(Pa,"The "),va=n(Pa,"A",{href:!0});var Ll=i(va);mn=s(Ll,"MobileViTModel"),Ll.forEach(t),pn=s(Pa," forward method, overrides the "),Ka=n(Pa,"CODE",{});var ql=i(Ka);hn=s(ql,"__call__"),ql.forEach(t),fn=s(Pa," special method."),Pa.forEach(t),un=p(io),y(Lt.$$.fragment,io),gn=p(io),y(qt.$$.fragment,io),io.forEach(t),Ia.forEach(t),Is=p(o),Mt=n(o,"H2",{class:!0});var tr=i(Mt);Dt=n(tr,"A",{id:!0,class:!0,href:!0});var Dl=i(Dt);Ga=n(Dl,"SPAN",{});var Rl=i(Ga);y(So.$$.fragment,Rl),Rl.forEach(t),Dl.forEach(t),_n=p(tr),Ya=n(tr,"SPAN",{});var Bl=i(Ya);bn=s(Bl,"MobileViTForImageClassification"),Bl.forEach(t),tr.forEach(t),Ps=p(o),Ge=n(o,"DIV",{class:!0});var lo=i(Ge);y(Oo.$$.fragment,lo),vn=p(lo),Ja=n(lo,"P",{});var Ul=i(Ja);Tn=s(Ul,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ul.forEach(t),wn=p(lo),zo=n(lo,"P",{});var or=i(zo);$n=s(or,"This model is a PyTorch "),Ao=n(or,"A",{href:!0,rel:!0});var Wl=i(Ao);Mn=s(Wl,"torch.nn.Module"),Wl.forEach(t),yn=s(or,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),or.forEach(t),En=p(lo),st=n(lo,"DIV",{class:!0});var co=i(st);y(No.$$.fragment,co),Vn=p(co),yt=n(co,"P",{});var Sa=i(yt);Fn=s(Sa,"The "),Ta=n(Sa,"A",{href:!0});var Hl=i(Ta);xn=s(Hl,"MobileViTForImageClassification"),Hl.forEach(t),kn=s(Sa," forward method, overrides the "),Xa=n(Sa,"CODE",{});var Kl=i(Xa);Cn=s(Kl,"__call__"),Kl.forEach(t),jn=s(Sa," special method."),Sa.forEach(t),In=p(co),y(Rt.$$.fragment,co),Pn=p(co),y(Bt.$$.fragment,co),co.forEach(t),lo.forEach(t),Ss=p(o),Et=n(o,"H2",{class:!0});var ar=i(Et);Ut=n(ar,"A",{id:!0,class:!0,href:!0});var Gl=i(Ut);Za=n(Gl,"SPAN",{});var Yl=i(Za);y(Lo.$$.fragment,Yl),Yl.forEach(t),Gl.forEach(t),Sn=p(ar),Qa=n(ar,"SPAN",{});var Jl=i(Qa);On=s(Jl,"MobileViTForSemanticSegmentation"),Jl.forEach(t),ar.forEach(t),Os=p(o),Ye=n(o,"DIV",{class:!0});var mo=i(Ye);y(qo.$$.fragment,mo),zn=p(mo),es=n(mo,"P",{});var Xl=i(es);An=s(Xl,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Xl.forEach(t),Nn=p(mo),Do=n(mo,"P",{});var sr=i(Do);Ln=s(sr,"This model is a PyTorch "),Ro=n(sr,"A",{href:!0,rel:!0});var Zl=i(Ro);qn=s(Zl,"torch.nn.Module"),Zl.forEach(t),Dn=s(sr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),sr.forEach(t),Rn=p(mo),rt=n(mo,"DIV",{class:!0});var po=i(rt);y(Bo.$$.fragment,po),Bn=p(po),Vt=n(po,"P",{});var Oa=i(Vt);Un=s(Oa,"The "),wa=n(Oa,"A",{href:!0});var Ql=i(wa);Wn=s(Ql,"MobileViTForSemanticSegmentation"),Ql.forEach(t),Hn=s(Oa," forward method, overrides the "),ts=n(Oa,"CODE",{});var ed=i(ts);Kn=s(ed,"__call__"),ed.forEach(t),Gn=s(Oa," special method."),Oa.forEach(t),Yn=p(po),y(Wt.$$.fragment,po),Jn=p(po),y(Ht.$$.fragment,po),po.forEach(t),mo.forEach(t),zs=p(o),Ft=n(o,"H2",{class:!0});var rr=i(Ft);Kt=n(rr,"A",{id:!0,class:!0,href:!0});var td=i(Kt);os=n(td,"SPAN",{});var od=i(os);y(Uo.$$.fragment,od),od.forEach(t),td.forEach(t),Xn=p(rr),as=n(rr,"SPAN",{});var ad=i(as);Zn=s(ad,"TFMobileViTModel"),ad.forEach(t),rr.forEach(t),As=p(o),Be=n(o,"DIV",{class:!0});var ft=i(Be);y(Wo.$$.fragment,ft),Qn=p(ft),Ho=n(ft,"P",{});var nr=i(Ho);ei=s(nr,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),$a=n(nr,"A",{href:!0});var sd=i($a);ti=s(sd,"TFPreTrainedModel"),sd.forEach(t),oi=s(nr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),nr.forEach(t),ai=p(ft),Ko=n(ft,"P",{});var ir=i(Ko);si=s(ir,"This model is also a "),Go=n(ir,"A",{href:!0,rel:!0});var rd=i(Go);ri=s(rd,"tf.keras.Model"),rd.forEach(t),ni=s(ir,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ir.forEach(t),ii=p(ft),y(Gt.$$.fragment,ft),li=p(ft),nt=n(ft,"DIV",{class:!0});var ho=i(nt);y(Yo.$$.fragment,ho),di=p(ho),xt=n(ho,"P",{});var za=i(xt);ci=s(za,"The "),Ma=n(za,"A",{href:!0});var nd=i(Ma);mi=s(nd,"TFMobileViTModel"),nd.forEach(t),pi=s(za," forward method, overrides the "),ss=n(za,"CODE",{});var id=i(ss);hi=s(id,"__call__"),id.forEach(t),fi=s(za," special method."),za.forEach(t),ui=p(ho),y(Yt.$$.fragment,ho),gi=p(ho),y(Jt.$$.fragment,ho),ho.forEach(t),ft.forEach(t),Ns=p(o),kt=n(o,"H2",{class:!0});var lr=i(kt);Xt=n(lr,"A",{id:!0,class:!0,href:!0});var ld=i(Xt);rs=n(ld,"SPAN",{});var dd=i(rs);y(Jo.$$.fragment,dd),dd.forEach(t),ld.forEach(t),_i=p(lr),ns=n(lr,"SPAN",{});var cd=i(ns);bi=s(cd,"TFMobileViTForImageClassification"),cd.forEach(t),lr.forEach(t),Ls=p(o),fe=n(o,"DIV",{class:!0});var dt=i(fe);y(Xo.$$.fragment,dt),vi=p(dt),is=n(dt,"P",{});var md=i(is);Ti=s(md,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),md.forEach(t),wi=p(dt),Zo=n(dt,"P",{});var dr=i(Zo);$i=s(dr,"This model inherits from "),ya=n(dr,"A",{href:!0});var pd=i(ya);Mi=s(pd,"TFPreTrainedModel"),pd.forEach(t),yi=s(dr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),dr.forEach(t),Ei=p(dt),Qo=n(dt,"P",{});var cr=i(Qo);Vi=s(cr,"This model is also a "),ea=n(cr,"A",{href:!0,rel:!0});var hd=i(ea);Fi=s(hd,"tf.keras.Model"),hd.forEach(t),xi=s(cr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),cr.forEach(t),ki=p(dt),y(Zt.$$.fragment,dt),Ci=p(dt),it=n(dt,"DIV",{class:!0});var fo=i(it);y(ta.$$.fragment,fo),ji=p(fo),Ct=n(fo,"P",{});var Aa=i(Ct);Ii=s(Aa,"The "),Ea=n(Aa,"A",{href:!0});var fd=i(Ea);Pi=s(fd,"TFMobileViTForImageClassification"),fd.forEach(t),Si=s(Aa," forward method, overrides the "),ls=n(Aa,"CODE",{});var ud=i(ls);Oi=s(ud,"__call__"),ud.forEach(t),zi=s(Aa," special method."),Aa.forEach(t),Ai=p(fo),y(Qt.$$.fragment,fo),Ni=p(fo),y(eo.$$.fragment,fo),fo.forEach(t),dt.forEach(t),qs=p(o),jt=n(o,"H2",{class:!0});var mr=i(jt);to=n(mr,"A",{id:!0,class:!0,href:!0});var gd=i(to);ds=n(gd,"SPAN",{});var _d=i(ds);y(oa.$$.fragment,_d),_d.forEach(t),gd.forEach(t),Li=p(mr),cs=n(mr,"SPAN",{});var bd=i(cs);qi=s(bd,"TFMobileViTForSemanticSegmentation"),bd.forEach(t),mr.forEach(t),Ds=p(o),ue=n(o,"DIV",{class:!0});var ct=i(ue);y(aa.$$.fragment,ct),Di=p(ct),ms=n(ct,"P",{});var vd=i(ms);Ri=s(vd,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),vd.forEach(t),Bi=p(ct),sa=n(ct,"P",{});var pr=i(sa);Ui=s(pr,"This model inherits from "),Va=n(pr,"A",{href:!0});var Td=i(Va);Wi=s(Td,"TFPreTrainedModel"),Td.forEach(t),Hi=s(pr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),pr.forEach(t),Ki=p(ct),ra=n(ct,"P",{});var hr=i(ra);Gi=s(hr,"This model is also a "),na=n(hr,"A",{href:!0,rel:!0});var wd=i(na);Yi=s(wd,"tf.keras.Model"),wd.forEach(t),Ji=s(hr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),hr.forEach(t),Xi=p(ct),y(oo.$$.fragment,ct),Zi=p(ct),lt=n(ct,"DIV",{class:!0});var uo=i(lt);y(ia.$$.fragment,uo),Qi=p(uo),It=n(uo,"P",{});var Na=i(It);el=s(Na,"The "),Fa=n(Na,"A",{href:!0});var $d=i(Fa);tl=s($d,"TFMobileViTForSemanticSegmentation"),$d.forEach(t),ol=s(Na," forward method, overrides the "),ps=n(Na,"CODE",{});var Md=i(ps);al=s(Md,"__call__"),Md.forEach(t),sl=s(Na," special method."),Na.forEach(t),rl=p(uo),y(ao.$$.fragment,uo),nl=p(uo),y(so.$$.fragment,uo),uo.forEach(t),ct.forEach(t),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(Kd)),h(f,"id","mobilevit"),h(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(f,"href","#mobilevit"),h(u,"class","relative group"),h(ee,"id","overview"),h(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ee,"href","#overview"),h(A,"class","relative group"),h(oe,"href","https://arxiv.org/abs/2110.02178"),h(oe,"rel","nofollow"),h(re,"href","https://keras.io/examples/vision/mobilevit"),h(re,"rel","nofollow"),h(B,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),h(G,"href","https://huggingface.co/datasets/imagenet-1k"),h(G,"rel","nofollow"),h($,"href","https://arxiv.org/abs/1706.05587"),h($,"rel","nofollow"),h(we,"href","http://host.robots.ox.ac.uk/pascal/VOC/"),h(we,"rel","nofollow"),h(ye,"href","https://www.tensorflow.org/lite"),h(ye,"rel","nofollow"),h(_o,"href","https://huggingface.co/Matthijs"),h(_o,"rel","nofollow"),h(bo,"href","https://huggingface.co/sayakpaul"),h(bo,"rel","nofollow"),h(vo,"href","https://github.com/apple/ml-cvnets"),h(vo,"rel","nofollow"),h(Pt,"id","transformers.MobileViTConfig"),h(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pt,"href","#transformers.MobileViTConfig"),h(_t,"class","relative group"),h(fa,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h($o,"href","https://huggingface.co/apple/mobilevit-small"),h($o,"rel","nofollow"),h(ua,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(ga,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ot,"id","transformers.MobileViTFeatureExtractor"),h(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ot,"href","#transformers.MobileViTFeatureExtractor"),h(Tt,"class","relative group"),h(_a,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),h(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ba,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),h(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Nt,"id","transformers.MobileViTModel"),h(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Nt,"href","#transformers.MobileViTModel"),h(wt,"class","relative group"),h(Io,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Io,"rel","nofollow"),h(va,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Dt,"id","transformers.MobileViTForImageClassification"),h(Dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Dt,"href","#transformers.MobileViTForImageClassification"),h(Mt,"class","relative group"),h(Ao,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Ao,"rel","nofollow"),h(Ta,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),h(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ut,"id","transformers.MobileViTForSemanticSegmentation"),h(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ut,"href","#transformers.MobileViTForSemanticSegmentation"),h(Et,"class","relative group"),h(Ro,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Ro,"rel","nofollow"),h(wa,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),h(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Kt,"id","transformers.TFMobileViTModel"),h(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Kt,"href","#transformers.TFMobileViTModel"),h(Ft,"class","relative group"),h($a,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(Go,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(Go,"rel","nofollow"),h(Ma,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),h(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Xt,"id","transformers.TFMobileViTForImageClassification"),h(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Xt,"href","#transformers.TFMobileViTForImageClassification"),h(kt,"class","relative group"),h(ya,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(ea,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(ea,"rel","nofollow"),h(Ea,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),h(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(to,"id","transformers.TFMobileViTForSemanticSegmentation"),h(to,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(to,"href","#transformers.TFMobileViTForSemanticSegmentation"),h(jt,"class","relative group"),h(Va,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(na,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(na,"rel","nofollow"),h(Fa,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),h(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,b){e(document.head,d),g(o,T,b),g(o,u,b),e(u,f),e(f,v),E(l,v,null),e(u,c),e(u,C),e(C,xe),g(o,ge,b),g(o,A,b),e(A,ee),e(ee,te),E(w,te,null),e(A,ke),e(A,H),e(H,Ce),g(o,_e,b),g(o,L,b),e(L,je),e(L,oe),e(oe,Y),e(L,Ie),g(o,be,b),g(o,D,b),e(D,Pe),g(o,ve,b),g(o,R,b),e(R,de),e(de,Se),g(o,ae,b),g(o,j,b),e(j,S),g(o,Te,b),g(o,P,b),e(P,ce),e(ce,se),e(se,J),e(se,re),e(re,Oe),e(se,O),e(P,ze),e(P,K),e(K,ne),e(ne,Ae),e(ne,B),e(B,Ne),e(ne,Le),e(P,U),e(P,me),e(me,q),e(q,qe),e(q,G),e(G,z),e(q,De),e(P,N),e(P,pe),e(pe,X),e(X,_),e(X,$),e($,Xe),e(X,ie),e(X,we),e(we,Ze),e(X,k),e(P,Qe),e(P,$e),e($e,Me),e(Me,et),e(Me,ye),e(ye,W),e(Me,Z),e($e,tt),e($e,Ue),e(Ue,Q),g(o,He,b),E(Ee,o,b),g(o,Ve,b),g(o,he,b),e(he,le),e(he,We),e(We,fr),e(he,ur),g(o,Es,b),g(o,ot,b),e(ot,gr),e(ot,_o),e(_o,_r),e(ot,br),e(ot,bo),e(bo,vr),e(ot,Tr),e(ot,vo),e(vo,wr),e(ot,$r),g(o,Vs,b),g(o,_t,b),e(_t,Pt),e(Pt,La),E(To,La,null),e(_t,Mr),e(_t,qa),e(qa,yr),g(o,Fs,b),g(o,Ke,b),E(wo,Ke,null),e(Ke,Er),e(Ke,bt),e(bt,Vr),e(bt,fa),e(fa,Fr),e(bt,xr),e(bt,$o),e($o,kr),e(bt,Cr),e(Ke,jr),e(Ke,vt),e(vt,Ir),e(vt,ua),e(ua,Pr),e(vt,Sr),e(vt,ga),e(ga,Or),e(vt,zr),e(Ke,Ar),E(St,Ke,null),g(o,xs,b),g(o,Tt,b),e(Tt,Ot),e(Ot,Da),E(Mo,Da,null),e(Tt,Nr),e(Tt,Ra),e(Ra,Lr),g(o,ks,b),g(o,Re,b),E(yo,Re,null),e(Re,qr),e(Re,Ba),e(Ba,Dr),e(Re,Rr),e(Re,Eo),e(Eo,Br),e(Eo,_a),e(_a,Ur),e(Eo,Wr),e(Re,Hr),e(Re,pt),E(Vo,pt,null),e(pt,Kr),e(pt,Ua),e(Ua,Gr),e(pt,Yr),E(zt,pt,null),e(Re,Jr),e(Re,At),E(Fo,At,null),e(At,Xr),e(At,xo),e(xo,Zr),e(xo,ba),e(ba,Qr),e(xo,en),g(o,Cs,b),g(o,wt,b),e(wt,Nt),e(Nt,Wa),E(ko,Wa,null),e(wt,tn),e(wt,Ha),e(Ha,on),g(o,js,b),g(o,mt,b),E(Co,mt,null),e(mt,an),e(mt,jo),e(jo,sn),e(jo,Io),e(Io,rn),e(jo,nn),e(mt,ln),e(mt,at),E(Po,at,null),e(at,dn),e(at,$t),e($t,cn),e($t,va),e(va,mn),e($t,pn),e($t,Ka),e(Ka,hn),e($t,fn),e(at,un),E(Lt,at,null),e(at,gn),E(qt,at,null),g(o,Is,b),g(o,Mt,b),e(Mt,Dt),e(Dt,Ga),E(So,Ga,null),e(Mt,_n),e(Mt,Ya),e(Ya,bn),g(o,Ps,b),g(o,Ge,b),E(Oo,Ge,null),e(Ge,vn),e(Ge,Ja),e(Ja,Tn),e(Ge,wn),e(Ge,zo),e(zo,$n),e(zo,Ao),e(Ao,Mn),e(zo,yn),e(Ge,En),e(Ge,st),E(No,st,null),e(st,Vn),e(st,yt),e(yt,Fn),e(yt,Ta),e(Ta,xn),e(yt,kn),e(yt,Xa),e(Xa,Cn),e(yt,jn),e(st,In),E(Rt,st,null),e(st,Pn),E(Bt,st,null),g(o,Ss,b),g(o,Et,b),e(Et,Ut),e(Ut,Za),E(Lo,Za,null),e(Et,Sn),e(Et,Qa),e(Qa,On),g(o,Os,b),g(o,Ye,b),E(qo,Ye,null),e(Ye,zn),e(Ye,es),e(es,An),e(Ye,Nn),e(Ye,Do),e(Do,Ln),e(Do,Ro),e(Ro,qn),e(Do,Dn),e(Ye,Rn),e(Ye,rt),E(Bo,rt,null),e(rt,Bn),e(rt,Vt),e(Vt,Un),e(Vt,wa),e(wa,Wn),e(Vt,Hn),e(Vt,ts),e(ts,Kn),e(Vt,Gn),e(rt,Yn),E(Wt,rt,null),e(rt,Jn),E(Ht,rt,null),g(o,zs,b),g(o,Ft,b),e(Ft,Kt),e(Kt,os),E(Uo,os,null),e(Ft,Xn),e(Ft,as),e(as,Zn),g(o,As,b),g(o,Be,b),E(Wo,Be,null),e(Be,Qn),e(Be,Ho),e(Ho,ei),e(Ho,$a),e($a,ti),e(Ho,oi),e(Be,ai),e(Be,Ko),e(Ko,si),e(Ko,Go),e(Go,ri),e(Ko,ni),e(Be,ii),E(Gt,Be,null),e(Be,li),e(Be,nt),E(Yo,nt,null),e(nt,di),e(nt,xt),e(xt,ci),e(xt,Ma),e(Ma,mi),e(xt,pi),e(xt,ss),e(ss,hi),e(xt,fi),e(nt,ui),E(Yt,nt,null),e(nt,gi),E(Jt,nt,null),g(o,Ns,b),g(o,kt,b),e(kt,Xt),e(Xt,rs),E(Jo,rs,null),e(kt,_i),e(kt,ns),e(ns,bi),g(o,Ls,b),g(o,fe,b),E(Xo,fe,null),e(fe,vi),e(fe,is),e(is,Ti),e(fe,wi),e(fe,Zo),e(Zo,$i),e(Zo,ya),e(ya,Mi),e(Zo,yi),e(fe,Ei),e(fe,Qo),e(Qo,Vi),e(Qo,ea),e(ea,Fi),e(Qo,xi),e(fe,ki),E(Zt,fe,null),e(fe,Ci),e(fe,it),E(ta,it,null),e(it,ji),e(it,Ct),e(Ct,Ii),e(Ct,Ea),e(Ea,Pi),e(Ct,Si),e(Ct,ls),e(ls,Oi),e(Ct,zi),e(it,Ai),E(Qt,it,null),e(it,Ni),E(eo,it,null),g(o,qs,b),g(o,jt,b),e(jt,to),e(to,ds),E(oa,ds,null),e(jt,Li),e(jt,cs),e(cs,qi),g(o,Ds,b),g(o,ue,b),E(aa,ue,null),e(ue,Di),e(ue,ms),e(ms,Ri),e(ue,Bi),e(ue,sa),e(sa,Ui),e(sa,Va),e(Va,Wi),e(sa,Hi),e(ue,Ki),e(ue,ra),e(ra,Gi),e(ra,na),e(na,Yi),e(ra,Ji),e(ue,Xi),E(oo,ue,null),e(ue,Zi),e(ue,lt),E(ia,lt,null),e(lt,Qi),e(lt,It),e(It,el),e(It,Fa),e(Fa,tl),e(It,ol),e(It,ps),e(ps,al),e(It,sl),e(lt,rl),E(ao,lt,null),e(lt,nl),E(so,lt,null),Rs=!0},p(o,[b]){const la={};b&2&&(la.$$scope={dirty:b,ctx:o}),St.$set(la);const hs={};b&2&&(hs.$$scope={dirty:b,ctx:o}),zt.$set(hs);const fs={};b&2&&(fs.$$scope={dirty:b,ctx:o}),Lt.$set(fs);const us={};b&2&&(us.$$scope={dirty:b,ctx:o}),qt.$set(us);const da={};b&2&&(da.$$scope={dirty:b,ctx:o}),Rt.$set(da);const gs={};b&2&&(gs.$$scope={dirty:b,ctx:o}),Bt.$set(gs);const _s={};b&2&&(_s.$$scope={dirty:b,ctx:o}),Wt.$set(_s);const bs={};b&2&&(bs.$$scope={dirty:b,ctx:o}),Ht.$set(bs);const ca={};b&2&&(ca.$$scope={dirty:b,ctx:o}),Gt.$set(ca);const vs={};b&2&&(vs.$$scope={dirty:b,ctx:o}),Yt.$set(vs);const Ts={};b&2&&(Ts.$$scope={dirty:b,ctx:o}),Jt.$set(Ts);const ws={};b&2&&(ws.$$scope={dirty:b,ctx:o}),Zt.$set(ws);const $s={};b&2&&($s.$$scope={dirty:b,ctx:o}),Qt.$set($s);const Ms={};b&2&&(Ms.$$scope={dirty:b,ctx:o}),eo.$set(Ms);const Je={};b&2&&(Je.$$scope={dirty:b,ctx:o}),oo.$set(Je);const ys={};b&2&&(ys.$$scope={dirty:b,ctx:o}),ao.$set(ys);const ma={};b&2&&(ma.$$scope={dirty:b,ctx:o}),so.$set(ma)},i(o){Rs||(V(l.$$.fragment,o),V(w.$$.fragment,o),V(Ee.$$.fragment,o),V(To.$$.fragment,o),V(wo.$$.fragment,o),V(St.$$.fragment,o),V(Mo.$$.fragment,o),V(yo.$$.fragment,o),V(Vo.$$.fragment,o),V(zt.$$.fragment,o),V(Fo.$$.fragment,o),V(ko.$$.fragment,o),V(Co.$$.fragment,o),V(Po.$$.fragment,o),V(Lt.$$.fragment,o),V(qt.$$.fragment,o),V(So.$$.fragment,o),V(Oo.$$.fragment,o),V(No.$$.fragment,o),V(Rt.$$.fragment,o),V(Bt.$$.fragment,o),V(Lo.$$.fragment,o),V(qo.$$.fragment,o),V(Bo.$$.fragment,o),V(Wt.$$.fragment,o),V(Ht.$$.fragment,o),V(Uo.$$.fragment,o),V(Wo.$$.fragment,o),V(Gt.$$.fragment,o),V(Yo.$$.fragment,o),V(Yt.$$.fragment,o),V(Jt.$$.fragment,o),V(Jo.$$.fragment,o),V(Xo.$$.fragment,o),V(Zt.$$.fragment,o),V(ta.$$.fragment,o),V(Qt.$$.fragment,o),V(eo.$$.fragment,o),V(oa.$$.fragment,o),V(aa.$$.fragment,o),V(oo.$$.fragment,o),V(ia.$$.fragment,o),V(ao.$$.fragment,o),V(so.$$.fragment,o),Rs=!0)},o(o){F(l.$$.fragment,o),F(w.$$.fragment,o),F(Ee.$$.fragment,o),F(To.$$.fragment,o),F(wo.$$.fragment,o),F(St.$$.fragment,o),F(Mo.$$.fragment,o),F(yo.$$.fragment,o),F(Vo.$$.fragment,o),F(zt.$$.fragment,o),F(Fo.$$.fragment,o),F(ko.$$.fragment,o),F(Co.$$.fragment,o),F(Po.$$.fragment,o),F(Lt.$$.fragment,o),F(qt.$$.fragment,o),F(So.$$.fragment,o),F(Oo.$$.fragment,o),F(No.$$.fragment,o),F(Rt.$$.fragment,o),F(Bt.$$.fragment,o),F(Lo.$$.fragment,o),F(qo.$$.fragment,o),F(Bo.$$.fragment,o),F(Wt.$$.fragment,o),F(Ht.$$.fragment,o),F(Uo.$$.fragment,o),F(Wo.$$.fragment,o),F(Gt.$$.fragment,o),F(Yo.$$.fragment,o),F(Yt.$$.fragment,o),F(Jt.$$.fragment,o),F(Jo.$$.fragment,o),F(Xo.$$.fragment,o),F(Zt.$$.fragment,o),F(ta.$$.fragment,o),F(Qt.$$.fragment,o),F(eo.$$.fragment,o),F(oa.$$.fragment,o),F(aa.$$.fragment,o),F(oo.$$.fragment,o),F(ia.$$.fragment,o),F(ao.$$.fragment,o),F(so.$$.fragment,o),Rs=!1},d(o){t(d),o&&t(T),o&&t(u),x(l),o&&t(ge),o&&t(A),x(w),o&&t(_e),o&&t(L),o&&t(be),o&&t(D),o&&t(ve),o&&t(R),o&&t(ae),o&&t(j),o&&t(Te),o&&t(P),o&&t(He),x(Ee,o),o&&t(Ve),o&&t(he),o&&t(Es),o&&t(ot),o&&t(Vs),o&&t(_t),x(To),o&&t(Fs),o&&t(Ke),x(wo),x(St),o&&t(xs),o&&t(Tt),x(Mo),o&&t(ks),o&&t(Re),x(yo),x(Vo),x(zt),x(Fo),o&&t(Cs),o&&t(wt),x(ko),o&&t(js),o&&t(mt),x(Co),x(Po),x(Lt),x(qt),o&&t(Is),o&&t(Mt),x(So),o&&t(Ps),o&&t(Ge),x(Oo),x(No),x(Rt),x(Bt),o&&t(Ss),o&&t(Et),x(Lo),o&&t(Os),o&&t(Ye),x(qo),x(Bo),x(Wt),x(Ht),o&&t(zs),o&&t(Ft),x(Uo),o&&t(As),o&&t(Be),x(Wo),x(Gt),x(Yo),x(Yt),x(Jt),o&&t(Ns),o&&t(kt),x(Jo),o&&t(Ls),o&&t(fe),x(Xo),x(Zt),x(ta),x(Qt),x(eo),o&&t(qs),o&&t(jt),x(oa),o&&t(Ds),o&&t(ue),x(aa),x(oo),x(ia),x(ao),x(so)}}}const Kd={local:"mobilevit",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileViTConfig",title:"MobileViTConfig"},{local:"transformers.MobileViTFeatureExtractor",title:"MobileViTFeatureExtractor"},{local:"transformers.MobileViTModel",title:"MobileViTModel"},{local:"transformers.MobileViTForImageClassification",title:"MobileViTForImageClassification"},{local:"transformers.MobileViTForSemanticSegmentation",title:"MobileViTForSemanticSegmentation"},{local:"transformers.TFMobileViTModel",title:"TFMobileViTModel"},{local:"transformers.TFMobileViTForImageClassification",title:"TFMobileViTForImageClassification"},{local:"transformers.TFMobileViTForSemanticSegmentation",title:"TFMobileViTForSemanticSegmentation"}],title:"MobileViT"};function Gd(I){return xd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tc extends yd{constructor(d){super();Ed(this,d,Gd,Hd,Vd,{})}}export{tc as default,Kd as metadata};
