import{S as pd,i as fd,s as hd,e as a,k as p,w,t as n,M as ud,c as s,d as t,m as f,a as r,x as $,h as i,b as h,G as e,g as _,y as M,q as V,o as y,B as F,v as gd,L as Mo}from"../../chunks/vendor-hf-doc-builder.js";import{T as he}from"../../chunks/Tip-hf-doc-builder.js";import{D as H}from"../../chunks/Docstring-hf-doc-builder.js";import{C as gt}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ue}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as $o}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function _d(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTConfig, MobileViTModel

# Initializing a mobilevit-small style configuration
configuration = MobileViTConfig()

# Initializing a model from the mobilevit-small style configuration
model = MobileViTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTConfig, MobileViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileViTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=a("p"),T=n("Example:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Example:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function bd(k){let d,T;return{c(){d=a("p"),T=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){d=s(u,"P",{});var c=r(d);T=i(c,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),c.forEach(t)},m(u,c){_(u,d,c),e(d,T)},d(u){u&&t(d)}}}function Td(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function vd(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=a("p"),T=n("Example:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Example:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function wd(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function $d(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=a("p"),T=n("Example:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Example:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function Md(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function Vd(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = MobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=a("p"),T=n("Examples:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Examples:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function yd(k){let d,T,u,c,b,l,m,x,D,A,E,z,I,q,W,P,U,L;return{c(){d=a("p"),T=n("TF 2.0 models accepts two formats as inputs:"),u=p(),c=a("ul"),b=a("li"),l=n("having all inputs as keyword arguments (like PyTorch models), or"),m=p(),x=a("li"),D=n("having all inputs as a list, tuple or dict in the first positional arguments."),A=p(),E=a("p"),z=n("This second option is useful when using "),I=a("code"),q=n("tf.keras.Model.fit"),W=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),P=a("code"),U=n("model(inputs)"),L=n(".")},l(v){d=s(v,"P",{});var C=r(d);T=i(C,"TF 2.0 models accepts two formats as inputs:"),C.forEach(t),u=f(v),c=s(v,"UL",{});var S=r(c);b=s(S,"LI",{});var Q=r(b);l=i(Q,"having all inputs as keyword arguments (like PyTorch models), or"),Q.forEach(t),m=f(S),x=s(S,"LI",{});var ee=r(x);D=i(ee,"having all inputs as a list, tuple or dict in the first positional arguments."),ee.forEach(t),S.forEach(t),A=f(v),E=s(v,"P",{});var j=r(E);z=i(j,"This second option is useful when using "),I=s(j,"CODE",{});var B=r(I);q=i(B,"tf.keras.Model.fit"),B.forEach(t),W=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),P=s(j,"CODE",{});var te=r(P);U=i(te,"model(inputs)"),te.forEach(t),L=i(j,"."),j.forEach(t)},m(v,C){_(v,d,C),e(d,T),_(v,u,C),_(v,c,C),e(c,b),e(b,l),e(c,m),e(c,x),e(x,D),_(v,A,C),_(v,E,C),e(E,z),e(E,I),e(I,q),e(E,W),e(E,P),e(P,U),e(E,L)},d(v){v&&t(d),v&&t(u),v&&t(c),v&&t(A),v&&t(E)}}}function Fd(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function Ed(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=a("p"),T=n("Example:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Example:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function xd(k){let d,T,u,c,b,l,m,x,D,A,E,z,I,q,W,P,U,L;return{c(){d=a("p"),T=n("TF 2.0 models accepts two formats as inputs:"),u=p(),c=a("ul"),b=a("li"),l=n("having all inputs as keyword arguments (like PyTorch models), or"),m=p(),x=a("li"),D=n("having all inputs as a list, tuple or dict in the first positional arguments."),A=p(),E=a("p"),z=n("This second option is useful when using "),I=a("code"),q=n("tf.keras.Model.fit"),W=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),P=a("code"),U=n("model(inputs)"),L=n(".")},l(v){d=s(v,"P",{});var C=r(d);T=i(C,"TF 2.0 models accepts two formats as inputs:"),C.forEach(t),u=f(v),c=s(v,"UL",{});var S=r(c);b=s(S,"LI",{});var Q=r(b);l=i(Q,"having all inputs as keyword arguments (like PyTorch models), or"),Q.forEach(t),m=f(S),x=s(S,"LI",{});var ee=r(x);D=i(ee,"having all inputs as a list, tuple or dict in the first positional arguments."),ee.forEach(t),S.forEach(t),A=f(v),E=s(v,"P",{});var j=r(E);z=i(j,"This second option is useful when using "),I=s(j,"CODE",{});var B=r(I);q=i(B,"tf.keras.Model.fit"),B.forEach(t),W=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),P=s(j,"CODE",{});var te=r(P);U=i(te,"model(inputs)"),te.forEach(t),L=i(j,"."),j.forEach(t)},m(v,C){_(v,d,C),e(d,T),_(v,u,C),_(v,c,C),e(c,b),e(b,l),e(c,m),e(c,x),e(x,D),_(v,A,C),_(v,E,C),e(E,z),e(E,I),e(I,q),e(E,W),e(E,P),e(P,U),e(E,L)},d(v){v&&t(d),v&&t(u),v&&t(c),v&&t(A),v&&t(E)}}}function kd(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function Cd(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=a("p"),T=n("Example:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Example:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function jd(k){let d,T,u,c,b,l,m,x,D,A,E,z,I,q,W,P,U,L;return{c(){d=a("p"),T=n("TF 2.0 models accepts two formats as inputs:"),u=p(),c=a("ul"),b=a("li"),l=n("having all inputs as keyword arguments (like PyTorch models), or"),m=p(),x=a("li"),D=n("having all inputs as a list, tuple or dict in the first positional arguments."),A=p(),E=a("p"),z=n("This second option is useful when using "),I=a("code"),q=n("tf.keras.Model.fit"),W=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),P=a("code"),U=n("model(inputs)"),L=n(".")},l(v){d=s(v,"P",{});var C=r(d);T=i(C,"TF 2.0 models accepts two formats as inputs:"),C.forEach(t),u=f(v),c=s(v,"UL",{});var S=r(c);b=s(S,"LI",{});var Q=r(b);l=i(Q,"having all inputs as keyword arguments (like PyTorch models), or"),Q.forEach(t),m=f(S),x=s(S,"LI",{});var ee=r(x);D=i(ee,"having all inputs as a list, tuple or dict in the first positional arguments."),ee.forEach(t),S.forEach(t),A=f(v),E=s(v,"P",{});var j=r(E);z=i(j,"This second option is useful when using "),I=s(j,"CODE",{});var B=r(I);q=i(B,"tf.keras.Model.fit"),B.forEach(t),W=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),P=s(j,"CODE",{});var te=r(P);U=i(te,"model(inputs)"),te.forEach(t),L=i(j,"."),j.forEach(t)},m(v,C){_(v,d,C),e(d,T),_(v,u,C),_(v,c,C),e(c,b),e(b,l),e(c,m),e(c,x),e(x,D),_(v,A,C),_(v,E,C),e(E,z),e(E,I),e(I,q),e(E,W),e(E,P),e(P,U),e(E,L)},d(v){v&&t(d),v&&t(u),v&&t(c),v&&t(A),v&&t(E)}}}function Id(k){let d,T,u,c,b;return{c(){d=a("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),c=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s(m,"CODE",{});var x=r(u);c=i(x,"Module"),x.forEach(t),b=i(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(l,m){_(l,d,m),e(d,T),e(d,u),e(u,c),e(d,b)},d(l){l&&t(d)}}}function Pd(k){let d,T,u,c,b;return c=new gt({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = TFMobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="tf")

outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=a("p"),T=n("Examples:"),u=p(),w(c.$$.fragment)},l(l){d=s(l,"P",{});var m=r(d);T=i(m,"Examples:"),m.forEach(t),u=f(l),$(c.$$.fragment,l)},m(l,m){_(l,d,m),e(d,T),_(l,u,m),M(c,l,m),b=!0},p:Mo,i(l){b||(V(c.$$.fragment,l),b=!0)},o(l){y(c.$$.fragment,l),b=!1},d(l){l&&t(d),l&&t(u),F(c,l)}}}function Sd(k){let d,T,u,c,b,l,m,x,D,A,E,z,I,q,W,P,U,L,v,C,S,Q,ee,j,B,te,Ba,Vo,Xo,As,Ra,yo,qs,Ha,G,Zo,_t,Ns,bt,Os,Ls,Ds,Qo,Tt,Ws,Fo,Us,Bs,Rs,ea,vt,Hs,wt,Gs,Ks,Ys,ta,ge,Js,$t,Xs,Zs,Mt,Qs,er,tr,Vt,yt,or,Ft,ar,sr,rr,oa,nr,Ga,Et,Ka,Pe,ir,aa,lr,dr,Ya,oe,cr,xt,mr,pr,kt,fr,hr,Ct,ur,gr,Ja,_e,Se,sa,jt,_r,ra,br,Xa,K,It,Tr,be,vr,Eo,wr,$r,Pt,Mr,Vr,yr,Te,Fr,xo,Er,xr,ko,kr,Cr,jr,ze,Za,ve,Ae,na,St,Ir,ia,Pr,Qa,Y,zt,Sr,la,zr,Ar,At,qr,Co,Nr,Or,Lr,pe,qt,Dr,da,Wr,Ur,qe,es,we,Ne,ca,Nt,Br,ma,Rr,ts,me,Ot,Hr,Lt,Gr,Dt,Kr,Yr,Jr,ae,Wt,Xr,$e,Zr,jo,Qr,en,pa,tn,on,an,Oe,sn,Le,os,Me,De,fa,Ut,rn,ha,nn,as,J,Bt,ln,ua,dn,cn,Rt,mn,Ht,pn,fn,hn,se,Gt,un,Ve,gn,Io,_n,bn,ga,Tn,vn,wn,We,$n,Ue,ss,ye,Be,_a,Kt,Mn,ba,Vn,rs,X,Yt,yn,Ta,Fn,En,Jt,xn,Xt,kn,Cn,jn,re,Zt,In,Fe,Pn,Po,Sn,zn,va,An,qn,Nn,Re,On,He,ns,Ee,Ge,wa,Qt,Ln,$a,Dn,is,R,eo,Wn,to,Un,So,Bn,Rn,Hn,oo,Gn,ao,Kn,Yn,Jn,Ke,Xn,ne,so,Zn,xe,Qn,zo,ei,ti,Ma,oi,ai,si,Ye,ri,Je,ls,ke,Xe,Va,ro,ni,ya,ii,ds,N,no,li,Fa,di,ci,io,mi,Ao,pi,fi,hi,lo,ui,co,gi,_i,bi,Ze,Ti,ie,mo,vi,Ce,wi,qo,$i,Mi,Ea,Vi,yi,Fi,Qe,Ei,et,cs,je,tt,xa,po,xi,ka,ki,ms,O,fo,Ci,Ca,ji,Ii,ho,Pi,No,Si,zi,Ai,uo,qi,go,Ni,Oi,Li,ot,Di,le,_o,Wi,Ie,Ui,Oo,Bi,Ri,ja,Hi,Gi,Ki,at,Yi,st,ps;return l=new ue({}),q=new ue({}),Et=new gt({props:{code:`from transformers import TFMobileViTForImageClassification
import tensorflow as tf


model_ckpt = "apple/mobilevit-xx-small"
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split("/")[-1] + ".tflite"
with open(tflite_filename, "wb") as f:
    f.write(tflite_model)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMobileViTForImageClassification
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf


model_ckpt = <span class="hljs-string">&quot;apple/mobilevit-xx-small&quot;</span>
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.tflite&quot;</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(tflite_filename, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:
    f.write(tflite_model)`}}),jt=new ue({}),It=new H({props:{name:"class transformers.MobileViTConfig",anchor:"transformers.MobileViTConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 256"},{name:"patch_size",val:" = 2"},{name:"hidden_sizes",val:" = [144, 192, 240]"},{name:"neck_hidden_sizes",val:" = [16, 32, 64, 96, 128, 160, 640]"},{name:"num_attention_heads",val:" = 4"},{name:"mlp_ratio",val:" = 2.0"},{name:"expand_ratio",val:" = 4.0"},{name:"hidden_act",val:" = 'silu'"},{name:"conv_kernel_size",val:" = 3"},{name:"output_stride",val:" = 32"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"qkv_bias",val:" = True"},{name:"aspp_out_channels",val:" = 256"},{name:"atrous_rates",val:" = [6, 12, 18]"},{name:"aspp_dropout_prob",val:" = 0.1"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileViTConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileViTConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.MobileViTConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[144, 192, 240]</code>) &#x2014;
Dimensionality (hidden size) of the Transformer encoders at each stage.`,name:"hidden_sizes"},{anchor:"transformers.MobileViTConfig.neck_hidden_sizes",description:`<strong>neck_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 32, 64, 96, 128, 160, 640]</code>) &#x2014;
The number of channels for the feature maps of the backbone.`,name:"neck_hidden_sizes"},{anchor:"transformers.MobileViTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MobileViTConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 2.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.MobileViTConfig.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
Expansion factor for the MobileNetv2 layers.`,name:"expand_ratio"},{anchor:"transformers.MobileViTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileViTConfig.conv_kernel_size",description:`<strong>conv_kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the convolutional kernel in the MobileViT layer.`,name:"conv_kernel_size"},{anchor:"transformers.MobileViTConfig.output_stride",description:`<strong>output_stride</strong> (<code>int</code>, <code>optional</code>, defaults to 32) &#x2014;
The ratio of the spatial resolution of the output to the resolution of the input image.`,name:"output_stride"},{anchor:"transformers.MobileViTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the Transformer encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.MobileViTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MobileViTConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileViTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileViTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MobileViTConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.MobileViTConfig.aspp_out_channels",description:`<strong>aspp_out_channels</strong> (<code>int</code>, <code>optional</code>, defaults to 256) &#x2014;
Number of output channels used in the ASPP layer for semantic segmentation.`,name:"aspp_out_channels"},{anchor:"transformers.MobileViTConfig.atrous_rates",description:`<strong>atrous_rates</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[6, 12, 18]</code>) &#x2014;
Dilation (atrous) factors used in the ASPP layer for semantic segmentation.`,name:"atrous_rates"},{anchor:"transformers.MobileViTConfig.aspp_dropout_prob",description:`<strong>aspp_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the ASPP layer for semantic segmentation.`,name:"aspp_dropout_prob"},{anchor:"transformers.MobileViTConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/configuration_mobilevit.py#L46"}}),ze=new $o({props:{anchor:"transformers.MobileViTConfig.example",$$slots:{default:[_d]},$$scope:{ctx:k}}}),St=new ue({}),zt=new H({props:{name:"class transformers.MobileViTFeatureExtractor",anchor:"transformers.MobileViTFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 288"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 256"},{name:"do_flip_channel_order",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileViTFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 288) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to match the shorter side. Only has an effect if
<code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileViTFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileViTFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileViTFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileViTFeatureExtractor.do_flip_channel_order",description:`<strong>do_flip_channel_order</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR.`,name:"do_flip_channel_order"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L30"}}),qt=new H({props:{name:"__call__",anchor:"transformers.MobileViTFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileViTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/feature_extraction_mobilevit.py#L77",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),qe=new he({props:{warning:!0,$$slots:{default:[bd]},$$scope:{ctx:k}}}),Nt=new ue({}),Ot=new H({props:{name:"class transformers.MobileViTModel",anchor:"transformers.MobileViTModel",parameters:[{name:"config",val:": MobileViTConfig"},{name:"expand_output",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L709"}}),Wt=new H({props:{name:"forward",anchor:"transformers.MobileViTModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L746",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Oe=new he({props:{$$slots:{default:[Td]},$$scope:{ctx:k}}}),Le=new $o({props:{anchor:"transformers.MobileViTModel.forward.example",$$slots:{default:[vd]},$$scope:{ctx:k}}}),Ut=new ue({}),Bt=new H({props:{name:"class transformers.MobileViTForImageClassification",anchor:"transformers.MobileViTForImageClassification",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L804"}}),Gt=new H({props:{name:"forward",anchor:"transformers.MobileViTForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L820",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),We=new he({props:{$$slots:{default:[wd]},$$scope:{ctx:k}}}),Ue=new $o({props:{anchor:"transformers.MobileViTForImageClassification.forward.example",$$slots:{default:[$d]},$$scope:{ctx:k}}}),Kt=new ue({}),Yt=new H({props:{name:"class transformers.MobileViTForSemanticSegmentation",anchor:"transformers.MobileViTForSemanticSegmentation",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1000"}}),Zt=new H({props:{name:"forward",anchor:"transformers.MobileViTForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1011",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Re=new he({props:{$$slots:{default:[Md]},$$scope:{ctx:k}}}),He=new $o({props:{anchor:"transformers.MobileViTForSemanticSegmentation.forward.example",$$slots:{default:[Vd]},$$scope:{ctx:k}}}),Qt=new ue({}),eo=new H({props:{name:"class transformers.TFMobileViTModel",anchor:"transformers.TFMobileViTModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L817"}}),Ke=new he({props:{$$slots:{default:[yd]},$$scope:{ctx:k}}}),so=new H({props:{name:"call",anchor:"transformers.TFMobileViTModel.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L825",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Ye=new he({props:{$$slots:{default:[Fd]},$$scope:{ctx:k}}}),Je=new $o({props:{anchor:"transformers.TFMobileViTModel.call.example",$$slots:{default:[Ed]},$$scope:{ctx:k}}}),ro=new ue({}),no=new H({props:{name:"class transformers.TFMobileViTForImageClassification",anchor:"transformers.TFMobileViTForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L862"}}),Ze=new he({props:{$$slots:{default:[xd]},$$scope:{ctx:k}}}),mo=new H({props:{name:"call",anchor:"transformers.TFMobileViTForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L875",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called
feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),Qe=new he({props:{$$slots:{default:[kd]},$$scope:{ctx:k}}}),et=new $o({props:{anchor:"transformers.TFMobileViTForImageClassification.call.example",$$slots:{default:[Cd]},$$scope:{ctx:k}}}),po=new ue({}),fo=new H({props:{name:"class transformers.TFMobileViTForSemanticSegmentation",anchor:"transformers.TFMobileViTForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1043"}}),ot=new he({props:{$$slots:{default:[jd]},$$scope:{ctx:k}}}),_o=new H({props:{name:"call",anchor:"transformers.TFMobileViTForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1071",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),at=new he({props:{$$slots:{default:[Id]},$$scope:{ctx:k}}}),st=new $o({props:{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.example",$$slots:{default:[Pd]},$$scope:{ctx:k}}}),{c(){d=a("meta"),T=p(),u=a("h1"),c=a("a"),b=a("span"),w(l.$$.fragment),m=p(),x=a("span"),D=n("MobileViT"),A=p(),E=a("h2"),z=a("a"),I=a("span"),w(q.$$.fragment),W=p(),P=a("span"),U=n("Overview"),L=p(),v=a("p"),C=n("The MobileViT model was proposed in "),S=a("a"),Q=n("MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),ee=n(" by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),j=p(),B=a("p"),te=n("The abstract from the paper is the following:"),Ba=p(),Vo=a("p"),Xo=a("em"),As=n("Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),Ra=p(),yo=a("p"),qs=n("Tips:"),Ha=p(),G=a("ul"),Zo=a("li"),_t=a("p"),Ns=n("MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),bt=a("a"),Os=n("this tutorial"),Ls=n(" for a lightweight introduction."),Ds=p(),Qo=a("li"),Tt=a("p"),Ws=n("One can use "),Fo=a("a"),Us=n("MobileViTFeatureExtractor"),Bs=n(" to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),Rs=p(),ea=a("li"),vt=a("p"),Hs=n("The available image classification checkpoints are pre-trained on "),wt=a("a"),Gs=n("ImageNet-1k"),Ks=n(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),Ys=p(),ta=a("li"),ge=a("p"),Js=n("The segmentation model uses a "),$t=a("a"),Xs=n("DeepLabV3"),Zs=n(" head. The available semantic segmentation checkpoints are pre-trained on "),Mt=a("a"),Qs=n("PASCAL VOC"),er=n("."),tr=p(),Vt=a("li"),yt=a("p"),or=n("As the name suggests MobileViT was desgined to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),Ft=a("a"),ar=n("TensorFlow Lite"),sr=n("."),rr=p(),oa=a("p"),nr=n(`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),Ga=p(),w(Et.$$.fragment),Ka=p(),Pe=a("p"),ir=n("The resulting model will be just "),aa=a("strong"),lr=n("about an MB"),dr=n(` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),Ya=p(),oe=a("p"),cr=n("This model was contributed by "),xt=a("a"),mr=n("matthijs"),pr=n(". The TensorFlow version of the model was contributed by "),kt=a("a"),fr=n("sayakpaul"),hr=n(". The original code and weights can be found "),Ct=a("a"),ur=n("here"),gr=n("."),Ja=p(),_e=a("h2"),Se=a("a"),sa=a("span"),w(jt.$$.fragment),_r=p(),ra=a("span"),br=n("MobileViTConfig"),Xa=p(),K=a("div"),w(It.$$.fragment),Tr=p(),be=a("p"),vr=n("This is the configuration class to store the configuration of a "),Eo=a("a"),wr=n("MobileViTModel"),$r=n(`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Pt=a("a"),Mr=n("apple/mobilevit-small"),Vr=n(" architecture."),yr=p(),Te=a("p"),Fr=n("Configuration objects inherit from "),xo=a("a"),Er=n("PretrainedConfig"),xr=n(` and can be used to control the model outputs. Read the
documentation from `),ko=a("a"),kr=n("PretrainedConfig"),Cr=n(" for more information."),jr=p(),w(ze.$$.fragment),Za=p(),ve=a("h2"),Ae=a("a"),na=a("span"),w(St.$$.fragment),Ir=p(),ia=a("span"),Pr=n("MobileViTFeatureExtractor"),Qa=p(),Y=a("div"),w(zt.$$.fragment),Sr=p(),la=a("p"),zr=n("Constructs a MobileViT feature extractor."),Ar=p(),At=a("p"),qr=n("This feature extractor inherits from "),Co=a("a"),Nr=n("FeatureExtractionMixin"),Or=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Lr=p(),pe=a("div"),w(qt.$$.fragment),Dr=p(),da=a("p"),Wr=n("Main method to prepare for the model one or several image(s)."),Ur=p(),w(qe.$$.fragment),es=p(),we=a("h2"),Ne=a("a"),ca=a("span"),w(Nt.$$.fragment),Br=p(),ma=a("span"),Rr=n("MobileViTModel"),ts=p(),me=a("div"),w(Ot.$$.fragment),Hr=p(),Lt=a("p"),Gr=n(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Dt=a("a"),Kr=n("torch.nn.Module"),Yr=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jr=p(),ae=a("div"),w(Wt.$$.fragment),Xr=p(),$e=a("p"),Zr=n("The "),jo=a("a"),Qr=n("MobileViTModel"),en=n(" forward method, overrides the "),pa=a("code"),tn=n("__call__"),on=n(" special method."),an=p(),w(Oe.$$.fragment),sn=p(),w(Le.$$.fragment),os=p(),Me=a("h2"),De=a("a"),fa=a("span"),w(Ut.$$.fragment),rn=p(),ha=a("span"),nn=n("MobileViTForImageClassification"),as=p(),J=a("div"),w(Bt.$$.fragment),ln=p(),ua=a("p"),dn=n(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),cn=p(),Rt=a("p"),mn=n("This model is a PyTorch "),Ht=a("a"),pn=n("torch.nn.Module"),fn=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),hn=p(),se=a("div"),w(Gt.$$.fragment),un=p(),Ve=a("p"),gn=n("The "),Io=a("a"),_n=n("MobileViTForImageClassification"),bn=n(" forward method, overrides the "),ga=a("code"),Tn=n("__call__"),vn=n(" special method."),wn=p(),w(We.$$.fragment),$n=p(),w(Ue.$$.fragment),ss=p(),ye=a("h2"),Be=a("a"),_a=a("span"),w(Kt.$$.fragment),Mn=p(),ba=a("span"),Vn=n("MobileViTForSemanticSegmentation"),rs=p(),X=a("div"),w(Yt.$$.fragment),yn=p(),Ta=a("p"),Fn=n("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),En=p(),Jt=a("p"),xn=n("This model is a PyTorch "),Xt=a("a"),kn=n("torch.nn.Module"),Cn=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),jn=p(),re=a("div"),w(Zt.$$.fragment),In=p(),Fe=a("p"),Pn=n("The "),Po=a("a"),Sn=n("MobileViTForSemanticSegmentation"),zn=n(" forward method, overrides the "),va=a("code"),An=n("__call__"),qn=n(" special method."),Nn=p(),w(Re.$$.fragment),On=p(),w(He.$$.fragment),ns=p(),Ee=a("h2"),Ge=a("a"),wa=a("span"),w(Qt.$$.fragment),Ln=p(),$a=a("span"),Dn=n("TFMobileViTModel"),is=p(),R=a("div"),w(eo.$$.fragment),Wn=p(),to=a("p"),Un=n(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),So=a("a"),Bn=n("TFPreTrainedModel"),Rn=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Hn=p(),oo=a("p"),Gn=n("This model is also a "),ao=a("a"),Kn=n("tf.keras.Model"),Yn=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Jn=p(),w(Ke.$$.fragment),Xn=p(),ne=a("div"),w(so.$$.fragment),Zn=p(),xe=a("p"),Qn=n("The "),zo=a("a"),ei=n("TFMobileViTModel"),ti=n(" forward method, overrides the "),Ma=a("code"),oi=n("__call__"),ai=n(" special method."),si=p(),w(Ye.$$.fragment),ri=p(),w(Je.$$.fragment),ls=p(),ke=a("h2"),Xe=a("a"),Va=a("span"),w(ro.$$.fragment),ni=p(),ya=a("span"),ii=n("TFMobileViTForImageClassification"),ds=p(),N=a("div"),w(no.$$.fragment),li=p(),Fa=a("p"),di=n(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),ci=p(),io=a("p"),mi=n("This model inherits from "),Ao=a("a"),pi=n("TFPreTrainedModel"),fi=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),hi=p(),lo=a("p"),ui=n("This model is also a "),co=a("a"),gi=n("tf.keras.Model"),_i=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),bi=p(),w(Ze.$$.fragment),Ti=p(),ie=a("div"),w(mo.$$.fragment),vi=p(),Ce=a("p"),wi=n("The "),qo=a("a"),$i=n("TFMobileViTForImageClassification"),Mi=n(" forward method, overrides the "),Ea=a("code"),Vi=n("__call__"),yi=n(" special method."),Fi=p(),w(Qe.$$.fragment),Ei=p(),w(et.$$.fragment),cs=p(),je=a("h2"),tt=a("a"),xa=a("span"),w(po.$$.fragment),xi=p(),ka=a("span"),ki=n("TFMobileViTForSemanticSegmentation"),ms=p(),O=a("div"),w(fo.$$.fragment),Ci=p(),Ca=a("p"),ji=n("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Ii=p(),ho=a("p"),Pi=n("This model inherits from "),No=a("a"),Si=n("TFPreTrainedModel"),zi=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ai=p(),uo=a("p"),qi=n("This model is also a "),go=a("a"),Ni=n("tf.keras.Model"),Oi=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Li=p(),w(ot.$$.fragment),Di=p(),le=a("div"),w(_o.$$.fragment),Wi=p(),Ie=a("p"),Ui=n("The "),Oo=a("a"),Bi=n("TFMobileViTForSemanticSegmentation"),Ri=n(" forward method, overrides the "),ja=a("code"),Hi=n("__call__"),Gi=n(" special method."),Ki=p(),w(at.$$.fragment),Yi=p(),w(st.$$.fragment),this.h()},l(o){const g=ud('[data-svelte="svelte-1phssyn"]',document.head);d=s(g,"META",{name:!0,content:!0}),g.forEach(t),T=f(o),u=s(o,"H1",{class:!0});var bo=r(u);c=s(bo,"A",{id:!0,class:!0,href:!0});var Ia=r(c);b=s(Ia,"SPAN",{});var Pa=r(b);$(l.$$.fragment,Pa),Pa.forEach(t),Ia.forEach(t),m=f(bo),x=s(bo,"SPAN",{});var Sa=r(x);D=i(Sa,"MobileViT"),Sa.forEach(t),bo.forEach(t),A=f(o),E=s(o,"H2",{class:!0});var To=r(E);z=s(To,"A",{id:!0,class:!0,href:!0});var za=r(z);I=s(za,"SPAN",{});var Aa=r(I);$(q.$$.fragment,Aa),Aa.forEach(t),za.forEach(t),W=f(To),P=s(To,"SPAN",{});var qa=r(P);U=i(qa,"Overview"),qa.forEach(t),To.forEach(t),L=f(o),v=s(o,"P",{});var vo=r(v);C=i(vo,"The MobileViT model was proposed in "),S=s(vo,"A",{href:!0,rel:!0});var Na=r(S);Q=i(Na,"MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Na.forEach(t),ee=i(vo," by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),vo.forEach(t),j=f(o),B=s(o,"P",{});var Oa=r(B);te=i(Oa,"The abstract from the paper is the following:"),Oa.forEach(t),Ba=f(o),Vo=s(o,"P",{});var La=r(Vo);Xo=s(La,"EM",{});var Da=r(Xo);As=i(Da,"Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),Da.forEach(t),La.forEach(t),Ra=f(o),yo=s(o,"P",{});var Wa=r(yo);qs=i(Wa,"Tips:"),Wa.forEach(t),Ha=f(o),G=s(o,"UL",{});var Z=r(G);Zo=s(Z,"LI",{});var Ua=r(Zo);_t=s(Ua,"P",{});var wo=r(_t);Ns=i(wo,"MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),bt=s(wo,"A",{href:!0,rel:!0});var Ji=r(bt);Os=i(Ji,"this tutorial"),Ji.forEach(t),Ls=i(wo," for a lightweight introduction."),wo.forEach(t),Ua.forEach(t),Ds=f(Z),Qo=s(Z,"LI",{});var Xi=r(Qo);Tt=s(Xi,"P",{});var fs=r(Tt);Ws=i(fs,"One can use "),Fo=s(fs,"A",{href:!0});var Zi=r(Fo);Us=i(Zi,"MobileViTFeatureExtractor"),Zi.forEach(t),Bs=i(fs," to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),fs.forEach(t),Xi.forEach(t),Rs=f(Z),ea=s(Z,"LI",{});var Qi=r(ea);vt=s(Qi,"P",{});var hs=r(vt);Hs=i(hs,"The available image classification checkpoints are pre-trained on "),wt=s(hs,"A",{href:!0,rel:!0});var el=r(wt);Gs=i(el,"ImageNet-1k"),el.forEach(t),Ks=i(hs," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),hs.forEach(t),Qi.forEach(t),Ys=f(Z),ta=s(Z,"LI",{});var tl=r(ta);ge=s(tl,"P",{});var Lo=r(ge);Js=i(Lo,"The segmentation model uses a "),$t=s(Lo,"A",{href:!0,rel:!0});var ol=r($t);Xs=i(ol,"DeepLabV3"),ol.forEach(t),Zs=i(Lo," head. The available semantic segmentation checkpoints are pre-trained on "),Mt=s(Lo,"A",{href:!0,rel:!0});var al=r(Mt);Qs=i(al,"PASCAL VOC"),al.forEach(t),er=i(Lo,"."),Lo.forEach(t),tl.forEach(t),tr=f(Z),Vt=s(Z,"LI",{});var us=r(Vt);yt=s(us,"P",{});var gs=r(yt);or=i(gs,"As the name suggests MobileViT was desgined to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),Ft=s(gs,"A",{href:!0,rel:!0});var sl=r(Ft);ar=i(sl,"TensorFlow Lite"),sl.forEach(t),sr=i(gs,"."),gs.forEach(t),rr=f(us),oa=s(us,"P",{});var rl=r(oa);nr=i(rl,`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),rl.forEach(t),us.forEach(t),Z.forEach(t),Ga=f(o),$(Et.$$.fragment,o),Ka=f(o),Pe=s(o,"P",{});var _s=r(Pe);ir=i(_s,"The resulting model will be just "),aa=s(_s,"STRONG",{});var nl=r(aa);lr=i(nl,"about an MB"),nl.forEach(t),dr=i(_s,` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),_s.forEach(t),Ya=f(o),oe=s(o,"P",{});var rt=r(oe);cr=i(rt,"This model was contributed by "),xt=s(rt,"A",{href:!0,rel:!0});var il=r(xt);mr=i(il,"matthijs"),il.forEach(t),pr=i(rt,". The TensorFlow version of the model was contributed by "),kt=s(rt,"A",{href:!0,rel:!0});var ll=r(kt);fr=i(ll,"sayakpaul"),ll.forEach(t),hr=i(rt,". The original code and weights can be found "),Ct=s(rt,"A",{href:!0,rel:!0});var dl=r(Ct);ur=i(dl,"here"),dl.forEach(t),gr=i(rt,"."),rt.forEach(t),Ja=f(o),_e=s(o,"H2",{class:!0});var bs=r(_e);Se=s(bs,"A",{id:!0,class:!0,href:!0});var cl=r(Se);sa=s(cl,"SPAN",{});var ml=r(sa);$(jt.$$.fragment,ml),ml.forEach(t),cl.forEach(t),_r=f(bs),ra=s(bs,"SPAN",{});var pl=r(ra);br=i(pl,"MobileViTConfig"),pl.forEach(t),bs.forEach(t),Xa=f(o),K=s(o,"DIV",{class:!0});var nt=r(K);$(It.$$.fragment,nt),Tr=f(nt),be=s(nt,"P",{});var Do=r(be);vr=i(Do,"This is the configuration class to store the configuration of a "),Eo=s(Do,"A",{href:!0});var fl=r(Eo);wr=i(fl,"MobileViTModel"),fl.forEach(t),$r=i(Do,`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Pt=s(Do,"A",{href:!0,rel:!0});var hl=r(Pt);Mr=i(hl,"apple/mobilevit-small"),hl.forEach(t),Vr=i(Do," architecture."),Do.forEach(t),yr=f(nt),Te=s(nt,"P",{});var Wo=r(Te);Fr=i(Wo,"Configuration objects inherit from "),xo=s(Wo,"A",{href:!0});var ul=r(xo);Er=i(ul,"PretrainedConfig"),ul.forEach(t),xr=i(Wo,` and can be used to control the model outputs. Read the
documentation from `),ko=s(Wo,"A",{href:!0});var gl=r(ko);kr=i(gl,"PretrainedConfig"),gl.forEach(t),Cr=i(Wo," for more information."),Wo.forEach(t),jr=f(nt),$(ze.$$.fragment,nt),nt.forEach(t),Za=f(o),ve=s(o,"H2",{class:!0});var Ts=r(ve);Ae=s(Ts,"A",{id:!0,class:!0,href:!0});var _l=r(Ae);na=s(_l,"SPAN",{});var bl=r(na);$(St.$$.fragment,bl),bl.forEach(t),_l.forEach(t),Ir=f(Ts),ia=s(Ts,"SPAN",{});var Tl=r(ia);Pr=i(Tl,"MobileViTFeatureExtractor"),Tl.forEach(t),Ts.forEach(t),Qa=f(o),Y=s(o,"DIV",{class:!0});var it=r(Y);$(zt.$$.fragment,it),Sr=f(it),la=s(it,"P",{});var vl=r(la);zr=i(vl,"Constructs a MobileViT feature extractor."),vl.forEach(t),Ar=f(it),At=s(it,"P",{});var vs=r(At);qr=i(vs,"This feature extractor inherits from "),Co=s(vs,"A",{href:!0});var wl=r(Co);Nr=i(wl,"FeatureExtractionMixin"),wl.forEach(t),Or=i(vs,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),vs.forEach(t),Lr=f(it),pe=s(it,"DIV",{class:!0});var Uo=r(pe);$(qt.$$.fragment,Uo),Dr=f(Uo),da=s(Uo,"P",{});var $l=r(da);Wr=i($l,"Main method to prepare for the model one or several image(s)."),$l.forEach(t),Ur=f(Uo),$(qe.$$.fragment,Uo),Uo.forEach(t),it.forEach(t),es=f(o),we=s(o,"H2",{class:!0});var ws=r(we);Ne=s(ws,"A",{id:!0,class:!0,href:!0});var Ml=r(Ne);ca=s(Ml,"SPAN",{});var Vl=r(ca);$(Nt.$$.fragment,Vl),Vl.forEach(t),Ml.forEach(t),Br=f(ws),ma=s(ws,"SPAN",{});var yl=r(ma);Rr=i(yl,"MobileViTModel"),yl.forEach(t),ws.forEach(t),ts=f(o),me=s(o,"DIV",{class:!0});var Bo=r(me);$(Ot.$$.fragment,Bo),Hr=f(Bo),Lt=s(Bo,"P",{});var $s=r(Lt);Gr=i($s,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Dt=s($s,"A",{href:!0,rel:!0});var Fl=r(Dt);Kr=i(Fl,"torch.nn.Module"),Fl.forEach(t),Yr=i($s,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),$s.forEach(t),Jr=f(Bo),ae=s(Bo,"DIV",{class:!0});var lt=r(ae);$(Wt.$$.fragment,lt),Xr=f(lt),$e=s(lt,"P",{});var Ro=r($e);Zr=i(Ro,"The "),jo=s(Ro,"A",{href:!0});var El=r(jo);Qr=i(El,"MobileViTModel"),El.forEach(t),en=i(Ro," forward method, overrides the "),pa=s(Ro,"CODE",{});var xl=r(pa);tn=i(xl,"__call__"),xl.forEach(t),on=i(Ro," special method."),Ro.forEach(t),an=f(lt),$(Oe.$$.fragment,lt),sn=f(lt),$(Le.$$.fragment,lt),lt.forEach(t),Bo.forEach(t),os=f(o),Me=s(o,"H2",{class:!0});var Ms=r(Me);De=s(Ms,"A",{id:!0,class:!0,href:!0});var kl=r(De);fa=s(kl,"SPAN",{});var Cl=r(fa);$(Ut.$$.fragment,Cl),Cl.forEach(t),kl.forEach(t),rn=f(Ms),ha=s(Ms,"SPAN",{});var jl=r(ha);nn=i(jl,"MobileViTForImageClassification"),jl.forEach(t),Ms.forEach(t),as=f(o),J=s(o,"DIV",{class:!0});var dt=r(J);$(Bt.$$.fragment,dt),ln=f(dt),ua=s(dt,"P",{});var Il=r(ua);dn=i(Il,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Il.forEach(t),cn=f(dt),Rt=s(dt,"P",{});var Vs=r(Rt);mn=i(Vs,"This model is a PyTorch "),Ht=s(Vs,"A",{href:!0,rel:!0});var Pl=r(Ht);pn=i(Pl,"torch.nn.Module"),Pl.forEach(t),fn=i(Vs,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Vs.forEach(t),hn=f(dt),se=s(dt,"DIV",{class:!0});var ct=r(se);$(Gt.$$.fragment,ct),un=f(ct),Ve=s(ct,"P",{});var Ho=r(Ve);gn=i(Ho,"The "),Io=s(Ho,"A",{href:!0});var Sl=r(Io);_n=i(Sl,"MobileViTForImageClassification"),Sl.forEach(t),bn=i(Ho," forward method, overrides the "),ga=s(Ho,"CODE",{});var zl=r(ga);Tn=i(zl,"__call__"),zl.forEach(t),vn=i(Ho," special method."),Ho.forEach(t),wn=f(ct),$(We.$$.fragment,ct),$n=f(ct),$(Ue.$$.fragment,ct),ct.forEach(t),dt.forEach(t),ss=f(o),ye=s(o,"H2",{class:!0});var ys=r(ye);Be=s(ys,"A",{id:!0,class:!0,href:!0});var Al=r(Be);_a=s(Al,"SPAN",{});var ql=r(_a);$(Kt.$$.fragment,ql),ql.forEach(t),Al.forEach(t),Mn=f(ys),ba=s(ys,"SPAN",{});var Nl=r(ba);Vn=i(Nl,"MobileViTForSemanticSegmentation"),Nl.forEach(t),ys.forEach(t),rs=f(o),X=s(o,"DIV",{class:!0});var mt=r(X);$(Yt.$$.fragment,mt),yn=f(mt),Ta=s(mt,"P",{});var Ol=r(Ta);Fn=i(Ol,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Ol.forEach(t),En=f(mt),Jt=s(mt,"P",{});var Fs=r(Jt);xn=i(Fs,"This model is a PyTorch "),Xt=s(Fs,"A",{href:!0,rel:!0});var Ll=r(Xt);kn=i(Ll,"torch.nn.Module"),Ll.forEach(t),Cn=i(Fs,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Fs.forEach(t),jn=f(mt),re=s(mt,"DIV",{class:!0});var pt=r(re);$(Zt.$$.fragment,pt),In=f(pt),Fe=s(pt,"P",{});var Go=r(Fe);Pn=i(Go,"The "),Po=s(Go,"A",{href:!0});var Dl=r(Po);Sn=i(Dl,"MobileViTForSemanticSegmentation"),Dl.forEach(t),zn=i(Go," forward method, overrides the "),va=s(Go,"CODE",{});var Wl=r(va);An=i(Wl,"__call__"),Wl.forEach(t),qn=i(Go," special method."),Go.forEach(t),Nn=f(pt),$(Re.$$.fragment,pt),On=f(pt),$(He.$$.fragment,pt),pt.forEach(t),mt.forEach(t),ns=f(o),Ee=s(o,"H2",{class:!0});var Es=r(Ee);Ge=s(Es,"A",{id:!0,class:!0,href:!0});var Ul=r(Ge);wa=s(Ul,"SPAN",{});var Bl=r(wa);$(Qt.$$.fragment,Bl),Bl.forEach(t),Ul.forEach(t),Ln=f(Es),$a=s(Es,"SPAN",{});var Rl=r($a);Dn=i(Rl,"TFMobileViTModel"),Rl.forEach(t),Es.forEach(t),is=f(o),R=s(o,"DIV",{class:!0});var fe=r(R);$(eo.$$.fragment,fe),Wn=f(fe),to=s(fe,"P",{});var xs=r(to);Un=i(xs,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),So=s(xs,"A",{href:!0});var Hl=r(So);Bn=i(Hl,"TFPreTrainedModel"),Hl.forEach(t),Rn=i(xs,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xs.forEach(t),Hn=f(fe),oo=s(fe,"P",{});var ks=r(oo);Gn=i(ks,"This model is also a "),ao=s(ks,"A",{href:!0,rel:!0});var Gl=r(ao);Kn=i(Gl,"tf.keras.Model"),Gl.forEach(t),Yn=i(ks,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ks.forEach(t),Jn=f(fe),$(Ke.$$.fragment,fe),Xn=f(fe),ne=s(fe,"DIV",{class:!0});var ft=r(ne);$(so.$$.fragment,ft),Zn=f(ft),xe=s(ft,"P",{});var Ko=r(xe);Qn=i(Ko,"The "),zo=s(Ko,"A",{href:!0});var Kl=r(zo);ei=i(Kl,"TFMobileViTModel"),Kl.forEach(t),ti=i(Ko," forward method, overrides the "),Ma=s(Ko,"CODE",{});var Yl=r(Ma);oi=i(Yl,"__call__"),Yl.forEach(t),ai=i(Ko," special method."),Ko.forEach(t),si=f(ft),$(Ye.$$.fragment,ft),ri=f(ft),$(Je.$$.fragment,ft),ft.forEach(t),fe.forEach(t),ls=f(o),ke=s(o,"H2",{class:!0});var Cs=r(ke);Xe=s(Cs,"A",{id:!0,class:!0,href:!0});var Jl=r(Xe);Va=s(Jl,"SPAN",{});var Xl=r(Va);$(ro.$$.fragment,Xl),Xl.forEach(t),Jl.forEach(t),ni=f(Cs),ya=s(Cs,"SPAN",{});var Zl=r(ya);ii=i(Zl,"TFMobileViTForImageClassification"),Zl.forEach(t),Cs.forEach(t),ds=f(o),N=s(o,"DIV",{class:!0});var de=r(N);$(no.$$.fragment,de),li=f(de),Fa=s(de,"P",{});var Ql=r(Fa);di=i(Ql,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ql.forEach(t),ci=f(de),io=s(de,"P",{});var js=r(io);mi=i(js,"This model inherits from "),Ao=s(js,"A",{href:!0});var ed=r(Ao);pi=i(ed,"TFPreTrainedModel"),ed.forEach(t),fi=i(js,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),js.forEach(t),hi=f(de),lo=s(de,"P",{});var Is=r(lo);ui=i(Is,"This model is also a "),co=s(Is,"A",{href:!0,rel:!0});var td=r(co);gi=i(td,"tf.keras.Model"),td.forEach(t),_i=i(Is,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Is.forEach(t),bi=f(de),$(Ze.$$.fragment,de),Ti=f(de),ie=s(de,"DIV",{class:!0});var ht=r(ie);$(mo.$$.fragment,ht),vi=f(ht),Ce=s(ht,"P",{});var Yo=r(Ce);wi=i(Yo,"The "),qo=s(Yo,"A",{href:!0});var od=r(qo);$i=i(od,"TFMobileViTForImageClassification"),od.forEach(t),Mi=i(Yo," forward method, overrides the "),Ea=s(Yo,"CODE",{});var ad=r(Ea);Vi=i(ad,"__call__"),ad.forEach(t),yi=i(Yo," special method."),Yo.forEach(t),Fi=f(ht),$(Qe.$$.fragment,ht),Ei=f(ht),$(et.$$.fragment,ht),ht.forEach(t),de.forEach(t),cs=f(o),je=s(o,"H2",{class:!0});var Ps=r(je);tt=s(Ps,"A",{id:!0,class:!0,href:!0});var sd=r(tt);xa=s(sd,"SPAN",{});var rd=r(xa);$(po.$$.fragment,rd),rd.forEach(t),sd.forEach(t),xi=f(Ps),ka=s(Ps,"SPAN",{});var nd=r(ka);ki=i(nd,"TFMobileViTForSemanticSegmentation"),nd.forEach(t),Ps.forEach(t),ms=f(o),O=s(o,"DIV",{class:!0});var ce=r(O);$(fo.$$.fragment,ce),Ci=f(ce),Ca=s(ce,"P",{});var id=r(Ca);ji=i(id,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),id.forEach(t),Ii=f(ce),ho=s(ce,"P",{});var Ss=r(ho);Pi=i(Ss,"This model inherits from "),No=s(Ss,"A",{href:!0});var ld=r(No);Si=i(ld,"TFPreTrainedModel"),ld.forEach(t),zi=i(Ss,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ss.forEach(t),Ai=f(ce),uo=s(ce,"P",{});var zs=r(uo);qi=i(zs,"This model is also a "),go=s(zs,"A",{href:!0,rel:!0});var dd=r(go);Ni=i(dd,"tf.keras.Model"),dd.forEach(t),Oi=i(zs,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),zs.forEach(t),Li=f(ce),$(ot.$$.fragment,ce),Di=f(ce),le=s(ce,"DIV",{class:!0});var ut=r(le);$(_o.$$.fragment,ut),Wi=f(ut),Ie=s(ut,"P",{});var Jo=r(Ie);Ui=i(Jo,"The "),Oo=s(Jo,"A",{href:!0});var cd=r(Oo);Bi=i(cd,"TFMobileViTForSemanticSegmentation"),cd.forEach(t),Ri=i(Jo," forward method, overrides the "),ja=s(Jo,"CODE",{});var md=r(ja);Hi=i(md,"__call__"),md.forEach(t),Gi=i(Jo," special method."),Jo.forEach(t),Ki=f(ut),$(at.$$.fragment,ut),Yi=f(ut),$(st.$$.fragment,ut),ut.forEach(t),ce.forEach(t),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(zd)),h(c,"id","mobilevit"),h(c,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(c,"href","#mobilevit"),h(u,"class","relative group"),h(z,"id","overview"),h(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(z,"href","#overview"),h(E,"class","relative group"),h(S,"href","https://arxiv.org/abs/2110.02178"),h(S,"rel","nofollow"),h(bt,"href","https://keras.io/examples/vision/mobilevit"),h(bt,"rel","nofollow"),h(Fo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),h(wt,"href","https://huggingface.co/datasets/imagenet-1k"),h(wt,"rel","nofollow"),h($t,"href","https://arxiv.org/abs/1706.05587"),h($t,"rel","nofollow"),h(Mt,"href","http://host.robots.ox.ac.uk/pascal/VOC/"),h(Mt,"rel","nofollow"),h(Ft,"href","https://www.tensorflow.org/lite"),h(Ft,"rel","nofollow"),h(xt,"href","https://huggingface.co/Matthijs"),h(xt,"rel","nofollow"),h(kt,"href","https://huggingface.co/sayakpaul"),h(kt,"rel","nofollow"),h(Ct,"href","https://github.com/apple/ml-cvnets"),h(Ct,"rel","nofollow"),h(Se,"id","transformers.MobileViTConfig"),h(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Se,"href","#transformers.MobileViTConfig"),h(_e,"class","relative group"),h(Eo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h(Pt,"href","https://huggingface.co/apple/mobilevit-small"),h(Pt,"rel","nofollow"),h(xo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(ko,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ae,"id","transformers.MobileViTFeatureExtractor"),h(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ae,"href","#transformers.MobileViTFeatureExtractor"),h(ve,"class","relative group"),h(Co,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),h(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ne,"id","transformers.MobileViTModel"),h(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ne,"href","#transformers.MobileViTModel"),h(we,"class","relative group"),h(Dt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Dt,"rel","nofollow"),h(jo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(De,"id","transformers.MobileViTForImageClassification"),h(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(De,"href","#transformers.MobileViTForImageClassification"),h(Me,"class","relative group"),h(Ht,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Ht,"rel","nofollow"),h(Io,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),h(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Be,"id","transformers.MobileViTForSemanticSegmentation"),h(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Be,"href","#transformers.MobileViTForSemanticSegmentation"),h(ye,"class","relative group"),h(Xt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Xt,"rel","nofollow"),h(Po,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),h(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ge,"id","transformers.TFMobileViTModel"),h(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ge,"href","#transformers.TFMobileViTModel"),h(Ee,"class","relative group"),h(So,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(ao,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(ao,"rel","nofollow"),h(zo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),h(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Xe,"id","transformers.TFMobileViTForImageClassification"),h(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Xe,"href","#transformers.TFMobileViTForImageClassification"),h(ke,"class","relative group"),h(Ao,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(co,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(co,"rel","nofollow"),h(qo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),h(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(tt,"id","transformers.TFMobileViTForSemanticSegmentation"),h(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(tt,"href","#transformers.TFMobileViTForSemanticSegmentation"),h(je,"class","relative group"),h(No,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(go,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(go,"rel","nofollow"),h(Oo,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),h(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,g){e(document.head,d),_(o,T,g),_(o,u,g),e(u,c),e(c,b),M(l,b,null),e(u,m),e(u,x),e(x,D),_(o,A,g),_(o,E,g),e(E,z),e(z,I),M(q,I,null),e(E,W),e(E,P),e(P,U),_(o,L,g),_(o,v,g),e(v,C),e(v,S),e(S,Q),e(v,ee),_(o,j,g),_(o,B,g),e(B,te),_(o,Ba,g),_(o,Vo,g),e(Vo,Xo),e(Xo,As),_(o,Ra,g),_(o,yo,g),e(yo,qs),_(o,Ha,g),_(o,G,g),e(G,Zo),e(Zo,_t),e(_t,Ns),e(_t,bt),e(bt,Os),e(_t,Ls),e(G,Ds),e(G,Qo),e(Qo,Tt),e(Tt,Ws),e(Tt,Fo),e(Fo,Us),e(Tt,Bs),e(G,Rs),e(G,ea),e(ea,vt),e(vt,Hs),e(vt,wt),e(wt,Gs),e(vt,Ks),e(G,Ys),e(G,ta),e(ta,ge),e(ge,Js),e(ge,$t),e($t,Xs),e(ge,Zs),e(ge,Mt),e(Mt,Qs),e(ge,er),e(G,tr),e(G,Vt),e(Vt,yt),e(yt,or),e(yt,Ft),e(Ft,ar),e(yt,sr),e(Vt,rr),e(Vt,oa),e(oa,nr),_(o,Ga,g),M(Et,o,g),_(o,Ka,g),_(o,Pe,g),e(Pe,ir),e(Pe,aa),e(aa,lr),e(Pe,dr),_(o,Ya,g),_(o,oe,g),e(oe,cr),e(oe,xt),e(xt,mr),e(oe,pr),e(oe,kt),e(kt,fr),e(oe,hr),e(oe,Ct),e(Ct,ur),e(oe,gr),_(o,Ja,g),_(o,_e,g),e(_e,Se),e(Se,sa),M(jt,sa,null),e(_e,_r),e(_e,ra),e(ra,br),_(o,Xa,g),_(o,K,g),M(It,K,null),e(K,Tr),e(K,be),e(be,vr),e(be,Eo),e(Eo,wr),e(be,$r),e(be,Pt),e(Pt,Mr),e(be,Vr),e(K,yr),e(K,Te),e(Te,Fr),e(Te,xo),e(xo,Er),e(Te,xr),e(Te,ko),e(ko,kr),e(Te,Cr),e(K,jr),M(ze,K,null),_(o,Za,g),_(o,ve,g),e(ve,Ae),e(Ae,na),M(St,na,null),e(ve,Ir),e(ve,ia),e(ia,Pr),_(o,Qa,g),_(o,Y,g),M(zt,Y,null),e(Y,Sr),e(Y,la),e(la,zr),e(Y,Ar),e(Y,At),e(At,qr),e(At,Co),e(Co,Nr),e(At,Or),e(Y,Lr),e(Y,pe),M(qt,pe,null),e(pe,Dr),e(pe,da),e(da,Wr),e(pe,Ur),M(qe,pe,null),_(o,es,g),_(o,we,g),e(we,Ne),e(Ne,ca),M(Nt,ca,null),e(we,Br),e(we,ma),e(ma,Rr),_(o,ts,g),_(o,me,g),M(Ot,me,null),e(me,Hr),e(me,Lt),e(Lt,Gr),e(Lt,Dt),e(Dt,Kr),e(Lt,Yr),e(me,Jr),e(me,ae),M(Wt,ae,null),e(ae,Xr),e(ae,$e),e($e,Zr),e($e,jo),e(jo,Qr),e($e,en),e($e,pa),e(pa,tn),e($e,on),e(ae,an),M(Oe,ae,null),e(ae,sn),M(Le,ae,null),_(o,os,g),_(o,Me,g),e(Me,De),e(De,fa),M(Ut,fa,null),e(Me,rn),e(Me,ha),e(ha,nn),_(o,as,g),_(o,J,g),M(Bt,J,null),e(J,ln),e(J,ua),e(ua,dn),e(J,cn),e(J,Rt),e(Rt,mn),e(Rt,Ht),e(Ht,pn),e(Rt,fn),e(J,hn),e(J,se),M(Gt,se,null),e(se,un),e(se,Ve),e(Ve,gn),e(Ve,Io),e(Io,_n),e(Ve,bn),e(Ve,ga),e(ga,Tn),e(Ve,vn),e(se,wn),M(We,se,null),e(se,$n),M(Ue,se,null),_(o,ss,g),_(o,ye,g),e(ye,Be),e(Be,_a),M(Kt,_a,null),e(ye,Mn),e(ye,ba),e(ba,Vn),_(o,rs,g),_(o,X,g),M(Yt,X,null),e(X,yn),e(X,Ta),e(Ta,Fn),e(X,En),e(X,Jt),e(Jt,xn),e(Jt,Xt),e(Xt,kn),e(Jt,Cn),e(X,jn),e(X,re),M(Zt,re,null),e(re,In),e(re,Fe),e(Fe,Pn),e(Fe,Po),e(Po,Sn),e(Fe,zn),e(Fe,va),e(va,An),e(Fe,qn),e(re,Nn),M(Re,re,null),e(re,On),M(He,re,null),_(o,ns,g),_(o,Ee,g),e(Ee,Ge),e(Ge,wa),M(Qt,wa,null),e(Ee,Ln),e(Ee,$a),e($a,Dn),_(o,is,g),_(o,R,g),M(eo,R,null),e(R,Wn),e(R,to),e(to,Un),e(to,So),e(So,Bn),e(to,Rn),e(R,Hn),e(R,oo),e(oo,Gn),e(oo,ao),e(ao,Kn),e(oo,Yn),e(R,Jn),M(Ke,R,null),e(R,Xn),e(R,ne),M(so,ne,null),e(ne,Zn),e(ne,xe),e(xe,Qn),e(xe,zo),e(zo,ei),e(xe,ti),e(xe,Ma),e(Ma,oi),e(xe,ai),e(ne,si),M(Ye,ne,null),e(ne,ri),M(Je,ne,null),_(o,ls,g),_(o,ke,g),e(ke,Xe),e(Xe,Va),M(ro,Va,null),e(ke,ni),e(ke,ya),e(ya,ii),_(o,ds,g),_(o,N,g),M(no,N,null),e(N,li),e(N,Fa),e(Fa,di),e(N,ci),e(N,io),e(io,mi),e(io,Ao),e(Ao,pi),e(io,fi),e(N,hi),e(N,lo),e(lo,ui),e(lo,co),e(co,gi),e(lo,_i),e(N,bi),M(Ze,N,null),e(N,Ti),e(N,ie),M(mo,ie,null),e(ie,vi),e(ie,Ce),e(Ce,wi),e(Ce,qo),e(qo,$i),e(Ce,Mi),e(Ce,Ea),e(Ea,Vi),e(Ce,yi),e(ie,Fi),M(Qe,ie,null),e(ie,Ei),M(et,ie,null),_(o,cs,g),_(o,je,g),e(je,tt),e(tt,xa),M(po,xa,null),e(je,xi),e(je,ka),e(ka,ki),_(o,ms,g),_(o,O,g),M(fo,O,null),e(O,Ci),e(O,Ca),e(Ca,ji),e(O,Ii),e(O,ho),e(ho,Pi),e(ho,No),e(No,Si),e(ho,zi),e(O,Ai),e(O,uo),e(uo,qi),e(uo,go),e(go,Ni),e(uo,Oi),e(O,Li),M(ot,O,null),e(O,Di),e(O,le),M(_o,le,null),e(le,Wi),e(le,Ie),e(Ie,Ui),e(Ie,Oo),e(Oo,Bi),e(Ie,Ri),e(Ie,ja),e(ja,Hi),e(Ie,Gi),e(le,Ki),M(at,le,null),e(le,Yi),M(st,le,null),ps=!0},p(o,[g]){const bo={};g&2&&(bo.$$scope={dirty:g,ctx:o}),ze.$set(bo);const Ia={};g&2&&(Ia.$$scope={dirty:g,ctx:o}),qe.$set(Ia);const Pa={};g&2&&(Pa.$$scope={dirty:g,ctx:o}),Oe.$set(Pa);const Sa={};g&2&&(Sa.$$scope={dirty:g,ctx:o}),Le.$set(Sa);const To={};g&2&&(To.$$scope={dirty:g,ctx:o}),We.$set(To);const za={};g&2&&(za.$$scope={dirty:g,ctx:o}),Ue.$set(za);const Aa={};g&2&&(Aa.$$scope={dirty:g,ctx:o}),Re.$set(Aa);const qa={};g&2&&(qa.$$scope={dirty:g,ctx:o}),He.$set(qa);const vo={};g&2&&(vo.$$scope={dirty:g,ctx:o}),Ke.$set(vo);const Na={};g&2&&(Na.$$scope={dirty:g,ctx:o}),Ye.$set(Na);const Oa={};g&2&&(Oa.$$scope={dirty:g,ctx:o}),Je.$set(Oa);const La={};g&2&&(La.$$scope={dirty:g,ctx:o}),Ze.$set(La);const Da={};g&2&&(Da.$$scope={dirty:g,ctx:o}),Qe.$set(Da);const Wa={};g&2&&(Wa.$$scope={dirty:g,ctx:o}),et.$set(Wa);const Z={};g&2&&(Z.$$scope={dirty:g,ctx:o}),ot.$set(Z);const Ua={};g&2&&(Ua.$$scope={dirty:g,ctx:o}),at.$set(Ua);const wo={};g&2&&(wo.$$scope={dirty:g,ctx:o}),st.$set(wo)},i(o){ps||(V(l.$$.fragment,o),V(q.$$.fragment,o),V(Et.$$.fragment,o),V(jt.$$.fragment,o),V(It.$$.fragment,o),V(ze.$$.fragment,o),V(St.$$.fragment,o),V(zt.$$.fragment,o),V(qt.$$.fragment,o),V(qe.$$.fragment,o),V(Nt.$$.fragment,o),V(Ot.$$.fragment,o),V(Wt.$$.fragment,o),V(Oe.$$.fragment,o),V(Le.$$.fragment,o),V(Ut.$$.fragment,o),V(Bt.$$.fragment,o),V(Gt.$$.fragment,o),V(We.$$.fragment,o),V(Ue.$$.fragment,o),V(Kt.$$.fragment,o),V(Yt.$$.fragment,o),V(Zt.$$.fragment,o),V(Re.$$.fragment,o),V(He.$$.fragment,o),V(Qt.$$.fragment,o),V(eo.$$.fragment,o),V(Ke.$$.fragment,o),V(so.$$.fragment,o),V(Ye.$$.fragment,o),V(Je.$$.fragment,o),V(ro.$$.fragment,o),V(no.$$.fragment,o),V(Ze.$$.fragment,o),V(mo.$$.fragment,o),V(Qe.$$.fragment,o),V(et.$$.fragment,o),V(po.$$.fragment,o),V(fo.$$.fragment,o),V(ot.$$.fragment,o),V(_o.$$.fragment,o),V(at.$$.fragment,o),V(st.$$.fragment,o),ps=!0)},o(o){y(l.$$.fragment,o),y(q.$$.fragment,o),y(Et.$$.fragment,o),y(jt.$$.fragment,o),y(It.$$.fragment,o),y(ze.$$.fragment,o),y(St.$$.fragment,o),y(zt.$$.fragment,o),y(qt.$$.fragment,o),y(qe.$$.fragment,o),y(Nt.$$.fragment,o),y(Ot.$$.fragment,o),y(Wt.$$.fragment,o),y(Oe.$$.fragment,o),y(Le.$$.fragment,o),y(Ut.$$.fragment,o),y(Bt.$$.fragment,o),y(Gt.$$.fragment,o),y(We.$$.fragment,o),y(Ue.$$.fragment,o),y(Kt.$$.fragment,o),y(Yt.$$.fragment,o),y(Zt.$$.fragment,o),y(Re.$$.fragment,o),y(He.$$.fragment,o),y(Qt.$$.fragment,o),y(eo.$$.fragment,o),y(Ke.$$.fragment,o),y(so.$$.fragment,o),y(Ye.$$.fragment,o),y(Je.$$.fragment,o),y(ro.$$.fragment,o),y(no.$$.fragment,o),y(Ze.$$.fragment,o),y(mo.$$.fragment,o),y(Qe.$$.fragment,o),y(et.$$.fragment,o),y(po.$$.fragment,o),y(fo.$$.fragment,o),y(ot.$$.fragment,o),y(_o.$$.fragment,o),y(at.$$.fragment,o),y(st.$$.fragment,o),ps=!1},d(o){t(d),o&&t(T),o&&t(u),F(l),o&&t(A),o&&t(E),F(q),o&&t(L),o&&t(v),o&&t(j),o&&t(B),o&&t(Ba),o&&t(Vo),o&&t(Ra),o&&t(yo),o&&t(Ha),o&&t(G),o&&t(Ga),F(Et,o),o&&t(Ka),o&&t(Pe),o&&t(Ya),o&&t(oe),o&&t(Ja),o&&t(_e),F(jt),o&&t(Xa),o&&t(K),F(It),F(ze),o&&t(Za),o&&t(ve),F(St),o&&t(Qa),o&&t(Y),F(zt),F(qt),F(qe),o&&t(es),o&&t(we),F(Nt),o&&t(ts),o&&t(me),F(Ot),F(Wt),F(Oe),F(Le),o&&t(os),o&&t(Me),F(Ut),o&&t(as),o&&t(J),F(Bt),F(Gt),F(We),F(Ue),o&&t(ss),o&&t(ye),F(Kt),o&&t(rs),o&&t(X),F(Yt),F(Zt),F(Re),F(He),o&&t(ns),o&&t(Ee),F(Qt),o&&t(is),o&&t(R),F(eo),F(Ke),F(so),F(Ye),F(Je),o&&t(ls),o&&t(ke),F(ro),o&&t(ds),o&&t(N),F(no),F(Ze),F(mo),F(Qe),F(et),o&&t(cs),o&&t(je),F(po),o&&t(ms),o&&t(O),F(fo),F(ot),F(_o),F(at),F(st)}}}const zd={local:"mobilevit",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileViTConfig",title:"MobileViTConfig"},{local:"transformers.MobileViTFeatureExtractor",title:"MobileViTFeatureExtractor"},{local:"transformers.MobileViTModel",title:"MobileViTModel"},{local:"transformers.MobileViTForImageClassification",title:"MobileViTForImageClassification"},{local:"transformers.MobileViTForSemanticSegmentation",title:"MobileViTForSemanticSegmentation"},{local:"transformers.TFMobileViTModel",title:"TFMobileViTModel"},{local:"transformers.TFMobileViTForImageClassification",title:"TFMobileViTForImageClassification"},{local:"transformers.TFMobileViTForSemanticSegmentation",title:"TFMobileViTForSemanticSegmentation"}],title:"MobileViT"};function Ad(k){return gd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ud extends pd{constructor(d){super();fd(this,d,Ad,Sd,hd,{})}}export{Ud as default,zd as metadata};
