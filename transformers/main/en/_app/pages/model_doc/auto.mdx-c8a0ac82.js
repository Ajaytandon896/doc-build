import{S as J0t,i as Y0t,s as K0t,e as a,k as l,w as v,t as o,M as Z0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as eyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function oyt(A){let g,F,u,f,p,d,h,Mo,ii,mm,et,di,ci,W0,fm,qe,Xe,mi,yn,H0,Ln,xn,U0,fi,$n,J0,gi,gm,Ma;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mm=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),W0=o(")."),fm=l(),qe=a("p"),Xe=o("Likewise, if your "),mi=a("code"),yn=o("NewModel"),H0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),U0=o(`, make sure its
`),fi=a("code"),$n=o("config_class"),J0=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),gm=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var h$=s(u);f=r(h$,"NewModelConfig"),h$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var u$=s(ii);mm=r(u$,"model_type"),u$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var p$=s(di);ci=r(p$,'"new-model"'),p$.forEach(t),W0=r(Ae,")."),Ae.forEach(t),fm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),mi=n(Eo,"CODE",{});var Ea=s(mi);yn=r(Ea,"NewModel"),Ea.forEach(t),H0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var _$=s(Ln);xn=r(_$,"PreTrainedModel"),_$.forEach(t),U0=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var hm=s(fi);$n=r(hm,"config_class"),hm.forEach(t),J0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var b$=s(gi);gm=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mm),e(g,et),e(g,di),e(di,ci),e(g,W0),b(ze,fm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,mi),e(mi,yn),e(qe,H0),e(qe,Ln),e(Ln,xn),e(qe,U0),e(qe,fi),e(fi,$n),e(qe,J0),e(qe,gi),e(gi,gm),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(fm),ze&&t(qe)}}}function ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ayt(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function syt(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function lyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function myt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _yt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function byt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Myt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ayt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $yt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Syt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Byt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Lt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ELt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ALt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Lt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ILt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ULt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YLt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KLt(A){let g,F,u,f,p,d,h,Mo,ii,mm,et,di,ci,W0,fm,qe,Xe,mi,yn,H0,Ln,xn,U0,fi,$n,J0,gi,gm,Ma,ze,Ae,h$,hi,u$,p$,Eo,Ea,_$,hm,b$,Jje,jPe,ui,um,KZ,Y0,Yje,ZZ,Kje,DPe,kn,Zje,eee,eDe,oDe,oee,rDe,tDe,GPe,K0,OPe,F$,aDe,VPe,pm,XPe,pi,_m,ree,Z0,nDe,tee,sDe,zPe,Co,ey,lDe,oy,iDe,v$,dDe,cDe,mDe,ry,fDe,aee,gDe,hDe,uDe,Er,ty,pDe,nee,_De,bDe,_i,FDe,see,vDe,TDe,lee,MDe,EDe,CDe,y,bm,iee,wDe,ADe,T$,yDe,LDe,xDe,Fm,dee,$De,kDe,M$,SDe,RDe,BDe,vm,cee,PDe,IDe,E$,qDe,NDe,jDe,Tm,mee,DDe,GDe,C$,ODe,VDe,XDe,Mm,fee,zDe,QDe,w$,WDe,HDe,UDe,Em,gee,JDe,YDe,A$,KDe,ZDe,eGe,Cm,hee,oGe,rGe,y$,tGe,aGe,nGe,wm,uee,sGe,lGe,L$,iGe,dGe,cGe,Am,pee,mGe,fGe,x$,gGe,hGe,uGe,ym,_ee,pGe,_Ge,$$,bGe,FGe,vGe,Lm,bee,TGe,MGe,k$,EGe,CGe,wGe,xm,Fee,AGe,yGe,S$,LGe,xGe,$Ge,$m,vee,kGe,SGe,R$,RGe,BGe,PGe,km,Tee,IGe,qGe,B$,NGe,jGe,DGe,Sm,Mee,GGe,OGe,P$,VGe,XGe,zGe,Rm,Eee,QGe,WGe,I$,HGe,UGe,JGe,Bm,Cee,YGe,KGe,q$,ZGe,eOe,oOe,Pm,wee,rOe,tOe,N$,aOe,nOe,sOe,Im,Aee,lOe,iOe,j$,dOe,cOe,mOe,qm,yee,fOe,gOe,D$,hOe,uOe,pOe,Nm,Lee,_Oe,bOe,G$,FOe,vOe,TOe,jm,xee,MOe,EOe,O$,COe,wOe,AOe,Dm,$ee,yOe,LOe,V$,xOe,$Oe,kOe,Gm,kee,SOe,ROe,X$,BOe,POe,IOe,Om,See,qOe,NOe,z$,jOe,DOe,GOe,Vm,Ree,OOe,VOe,Q$,XOe,zOe,QOe,Xm,Bee,WOe,HOe,W$,UOe,JOe,YOe,zm,Pee,KOe,ZOe,H$,eVe,oVe,rVe,Qm,Iee,tVe,aVe,U$,nVe,sVe,lVe,Wm,qee,iVe,dVe,J$,cVe,mVe,fVe,Hm,Nee,gVe,hVe,Y$,uVe,pVe,_Ve,Um,jee,bVe,FVe,K$,vVe,TVe,MVe,Jm,Dee,EVe,CVe,Z$,wVe,AVe,yVe,Ym,Gee,LVe,xVe,ek,$Ve,kVe,SVe,Km,Oee,RVe,BVe,ok,PVe,IVe,qVe,Zm,Vee,NVe,jVe,rk,DVe,GVe,OVe,ef,Xee,VVe,XVe,tk,zVe,QVe,WVe,of,zee,HVe,UVe,ak,JVe,YVe,KVe,rf,Qee,ZVe,eXe,nk,oXe,rXe,tXe,tf,Wee,aXe,nXe,sk,sXe,lXe,iXe,af,Hee,dXe,cXe,lk,mXe,fXe,gXe,nf,Uee,hXe,uXe,ik,pXe,_Xe,bXe,sf,Jee,FXe,vXe,dk,TXe,MXe,EXe,lf,Yee,CXe,wXe,ck,AXe,yXe,LXe,df,Kee,xXe,$Xe,mk,kXe,SXe,RXe,cf,Zee,BXe,PXe,fk,IXe,qXe,NXe,mf,eoe,jXe,DXe,gk,GXe,OXe,VXe,ff,ooe,XXe,zXe,hk,QXe,WXe,HXe,gf,roe,UXe,JXe,uk,YXe,KXe,ZXe,hf,toe,eze,oze,pk,rze,tze,aze,uf,aoe,nze,sze,_k,lze,ize,dze,pf,noe,cze,mze,bk,fze,gze,hze,_f,soe,uze,pze,Fk,_ze,bze,Fze,bf,loe,vze,Tze,vk,Mze,Eze,Cze,Ff,ioe,wze,Aze,Tk,yze,Lze,xze,vf,doe,$ze,kze,Mk,Sze,Rze,Bze,Tf,coe,Pze,Ize,Ek,qze,Nze,jze,Mf,moe,Dze,Gze,Ck,Oze,Vze,Xze,Ef,foe,zze,Qze,wk,Wze,Hze,Uze,Cf,goe,Jze,Yze,Ak,Kze,Zze,eQe,wf,hoe,oQe,rQe,yk,tQe,aQe,nQe,Af,uoe,sQe,lQe,Lk,iQe,dQe,cQe,yf,poe,mQe,fQe,xk,gQe,hQe,uQe,Lf,_oe,pQe,_Qe,$k,bQe,FQe,vQe,xf,boe,TQe,MQe,kk,EQe,CQe,wQe,$f,Foe,AQe,yQe,Sk,LQe,xQe,$Qe,kf,voe,kQe,SQe,Rk,RQe,BQe,PQe,Sf,Toe,IQe,qQe,Bk,NQe,jQe,DQe,Rf,Moe,GQe,OQe,Pk,VQe,XQe,zQe,Bf,Eoe,QQe,WQe,Ik,HQe,UQe,JQe,Pf,Coe,YQe,KQe,qk,ZQe,eWe,oWe,If,woe,rWe,tWe,Nk,aWe,nWe,sWe,qf,Aoe,lWe,iWe,jk,dWe,cWe,mWe,Nf,yoe,fWe,gWe,Dk,hWe,uWe,pWe,jf,Loe,_We,bWe,Gk,FWe,vWe,TWe,Df,xoe,MWe,EWe,Ok,CWe,wWe,AWe,Gf,$oe,yWe,LWe,Vk,xWe,$We,kWe,Of,koe,SWe,RWe,Xk,BWe,PWe,IWe,Vf,Soe,qWe,NWe,zk,jWe,DWe,GWe,Xf,Roe,OWe,VWe,Qk,XWe,zWe,QWe,zf,Boe,WWe,HWe,Wk,UWe,JWe,YWe,Qf,Poe,KWe,ZWe,Hk,eHe,oHe,rHe,Wf,Ioe,tHe,aHe,Uk,nHe,sHe,lHe,Hf,qoe,iHe,dHe,Jk,cHe,mHe,fHe,Uf,Noe,gHe,hHe,Yk,uHe,pHe,_He,Jf,joe,bHe,FHe,Kk,vHe,THe,MHe,Yf,Doe,EHe,CHe,Zk,wHe,AHe,yHe,Kf,Goe,LHe,xHe,eS,$He,kHe,SHe,Zf,Ooe,RHe,BHe,oS,PHe,IHe,qHe,eg,Voe,NHe,jHe,rS,DHe,GHe,OHe,og,Xoe,VHe,XHe,tS,zHe,QHe,WHe,rg,zoe,HHe,UHe,aS,JHe,YHe,KHe,tg,Qoe,ZHe,eUe,nS,oUe,rUe,tUe,ag,Woe,aUe,nUe,sS,sUe,lUe,iUe,ng,Hoe,dUe,cUe,lS,mUe,fUe,gUe,sg,Uoe,hUe,uUe,iS,pUe,_Ue,bUe,lg,Joe,FUe,vUe,dS,TUe,MUe,EUe,ig,Yoe,CUe,wUe,cS,AUe,yUe,LUe,dg,Koe,xUe,$Ue,mS,kUe,SUe,RUe,cg,Zoe,BUe,PUe,fS,IUe,qUe,NUe,mg,ere,jUe,DUe,gS,GUe,OUe,VUe,fg,ore,XUe,zUe,hS,QUe,WUe,HUe,gg,rre,UUe,JUe,uS,YUe,KUe,ZUe,hg,tre,eJe,oJe,pS,rJe,tJe,aJe,ug,nJe,pg,ay,sJe,are,lJe,QPe,bi,_g,nre,ny,iJe,sre,dJe,WPe,wo,sy,cJe,ly,mJe,_S,fJe,gJe,hJe,iy,uJe,lre,pJe,_Je,bJe,Cr,dy,FJe,ire,vJe,TJe,Ca,MJe,dre,EJe,CJe,cre,wJe,AJe,mre,yJe,LJe,xJe,k,Sn,fre,$Je,kJe,bS,SJe,RJe,FS,BJe,PJe,IJe,Rn,gre,qJe,NJe,vS,jJe,DJe,TS,GJe,OJe,VJe,Bn,hre,XJe,zJe,MS,QJe,WJe,ES,HJe,UJe,JJe,bg,ure,YJe,KJe,CS,ZJe,eYe,oYe,Pn,pre,rYe,tYe,wS,aYe,nYe,AS,sYe,lYe,iYe,Fg,_re,dYe,cYe,yS,mYe,fYe,gYe,vg,bre,hYe,uYe,LS,pYe,_Ye,bYe,Tg,Fre,FYe,vYe,xS,TYe,MYe,EYe,In,vre,CYe,wYe,$S,AYe,yYe,kS,LYe,xYe,$Ye,qn,Tre,kYe,SYe,SS,RYe,BYe,RS,PYe,IYe,qYe,Nn,Mre,NYe,jYe,BS,DYe,GYe,PS,OYe,VYe,XYe,Mg,Ere,zYe,QYe,IS,WYe,HYe,UYe,Eg,Cre,JYe,YYe,qS,KYe,ZYe,eKe,jn,wre,oKe,rKe,NS,tKe,aKe,jS,nKe,sKe,lKe,Cg,Are,iKe,dKe,DS,cKe,mKe,fKe,Dn,yre,gKe,hKe,GS,uKe,pKe,OS,_Ke,bKe,FKe,Gn,Lre,vKe,TKe,VS,MKe,EKe,XS,CKe,wKe,AKe,On,xre,yKe,LKe,zS,xKe,$Ke,QS,kKe,SKe,RKe,wg,$re,BKe,PKe,WS,IKe,qKe,NKe,Vn,kre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Xn,Sre,QKe,WKe,JS,HKe,UKe,YS,JKe,YKe,KKe,zn,Rre,ZKe,eZe,KS,oZe,rZe,ZS,tZe,aZe,nZe,Qn,Bre,sZe,lZe,eR,iZe,dZe,oR,cZe,mZe,fZe,Wn,Pre,gZe,hZe,rR,uZe,pZe,tR,_Ze,bZe,FZe,Hn,Ire,vZe,TZe,aR,MZe,EZe,nR,CZe,wZe,AZe,Ag,qre,yZe,LZe,sR,xZe,$Ze,kZe,Un,Nre,SZe,RZe,lR,BZe,PZe,iR,IZe,qZe,NZe,yg,jre,jZe,DZe,dR,GZe,OZe,VZe,Jn,Dre,XZe,zZe,cR,QZe,WZe,mR,HZe,UZe,JZe,Yn,Gre,YZe,KZe,fR,ZZe,eeo,gR,oeo,reo,teo,Kn,Ore,aeo,neo,hR,seo,leo,uR,ieo,deo,ceo,Zn,Vre,meo,feo,pR,geo,heo,_R,ueo,peo,_eo,es,Xre,beo,Feo,bR,veo,Teo,FR,Meo,Eeo,Ceo,Lg,zre,weo,Aeo,vR,yeo,Leo,xeo,os,Qre,$eo,keo,TR,Seo,Reo,MR,Beo,Peo,Ieo,rs,Wre,qeo,Neo,ER,jeo,Deo,CR,Geo,Oeo,Veo,ts,Hre,Xeo,zeo,wR,Qeo,Weo,AR,Heo,Ueo,Jeo,as,Ure,Yeo,Keo,yR,Zeo,eoo,LR,ooo,roo,too,ns,Jre,aoo,noo,xR,soo,loo,$R,ioo,doo,coo,ss,Yre,moo,foo,kR,goo,hoo,SR,uoo,poo,_oo,xg,Kre,boo,Foo,RR,voo,Too,Moo,ls,Zre,Eoo,Coo,BR,woo,Aoo,PR,yoo,Loo,xoo,$g,ete,$oo,koo,IR,Soo,Roo,Boo,kg,ote,Poo,Ioo,qR,qoo,Noo,joo,is,rte,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,ds,tte,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,cs,ate,ero,oro,OR,rro,tro,VR,aro,nro,sro,Sg,nte,lro,iro,XR,dro,cro,mro,ms,ste,fro,gro,zR,hro,uro,QR,pro,_ro,bro,fs,lte,Fro,vro,WR,Tro,Mro,HR,Ero,Cro,wro,gs,ite,Aro,yro,UR,Lro,xro,JR,$ro,kro,Sro,hs,dte,Rro,Bro,YR,Pro,Iro,KR,qro,Nro,jro,us,cte,Dro,Gro,ZR,Oro,Vro,eB,Xro,zro,Qro,Rg,mte,Wro,Hro,oB,Uro,Jro,Yro,ps,fte,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,Bg,gte,nto,sto,aB,lto,ito,dto,Pg,hte,cto,mto,nB,fto,gto,hto,Ig,ute,uto,pto,sB,_to,bto,Fto,qg,pte,vto,Tto,lB,Mto,Eto,Cto,_s,_te,wto,Ato,iB,yto,Lto,dB,xto,$to,kto,Ng,bte,Sto,Rto,cB,Bto,Pto,Ito,bs,Fte,qto,Nto,mB,jto,Dto,fB,Gto,Oto,Vto,Fs,vte,Xto,zto,gB,Qto,Wto,hB,Hto,Uto,Jto,vs,Tte,Yto,Kto,uB,Zto,eao,pB,oao,rao,tao,Ts,Mte,aao,nao,_B,sao,lao,bB,iao,dao,cao,Ms,Ete,mao,fao,FB,gao,hao,vB,uao,pao,_ao,Es,Cte,bao,Fao,TB,vao,Tao,MB,Mao,Eao,Cao,jg,wte,wao,Aao,EB,yao,Lao,xao,Dg,Ate,$ao,kao,CB,Sao,Rao,Bao,Cs,yte,Pao,Iao,wB,qao,Nao,AB,jao,Dao,Gao,ws,Lte,Oao,Vao,yB,Xao,zao,LB,Qao,Wao,Hao,As,xte,Uao,Jao,xB,Yao,Kao,$B,Zao,eno,ono,Gg,$te,rno,tno,kB,ano,nno,sno,Og,kte,lno,ino,SB,dno,cno,mno,Vg,Ste,fno,gno,RB,hno,uno,pno,ys,Rte,_no,bno,BB,Fno,vno,PB,Tno,Mno,Eno,Xg,Bte,Cno,wno,IB,Ano,yno,Lno,zg,Pte,xno,$no,qB,kno,Sno,Rno,Ls,Ite,Bno,Pno,NB,Ino,qno,jB,Nno,jno,Dno,Qg,qte,Gno,Ono,DB,Vno,Xno,zno,Wg,Nte,Qno,Wno,GB,Hno,Uno,Jno,xs,jte,Yno,Kno,OB,Zno,eso,VB,oso,rso,tso,$s,Dte,aso,nso,XB,sso,lso,zB,iso,dso,cso,ks,Gte,mso,fso,QB,gso,hso,WB,uso,pso,_so,Ss,Ote,bso,Fso,HB,vso,Tso,UB,Mso,Eso,Cso,Hg,wso,Ug,cy,Aso,Vte,yso,HPe,Fi,Jg,Xte,my,Lso,zte,xso,UPe,Ao,fy,$so,gy,kso,JB,Sso,Rso,Bso,hy,Pso,Qte,Iso,qso,Nso,Qe,uy,jso,Wte,Dso,Gso,wa,Oso,Hte,Vso,Xso,Ute,zso,Qso,Jte,Wso,Hso,Uso,oe,Yg,Yte,Jso,Yso,YB,Kso,Zso,elo,Kg,Kte,olo,rlo,KB,tlo,alo,nlo,Zg,Zte,slo,llo,ZB,ilo,dlo,clo,eh,eae,mlo,flo,eP,glo,hlo,ulo,oh,oae,plo,_lo,oP,blo,Flo,vlo,rh,rae,Tlo,Mlo,rP,Elo,Clo,wlo,th,tae,Alo,ylo,tP,Llo,xlo,$lo,ah,aae,klo,Slo,aP,Rlo,Blo,Plo,nh,nae,Ilo,qlo,nP,Nlo,jlo,Dlo,sh,sae,Glo,Olo,sP,Vlo,Xlo,zlo,lh,lae,Qlo,Wlo,lP,Hlo,Ulo,Jlo,ih,iae,Ylo,Klo,iP,Zlo,eio,oio,dh,dae,rio,tio,dP,aio,nio,sio,ch,cae,lio,iio,cP,dio,cio,mio,mh,mae,fio,gio,mP,hio,uio,pio,fh,fae,_io,bio,fP,Fio,vio,Tio,gh,gae,Mio,Eio,gP,Cio,wio,Aio,hh,hae,yio,Lio,hP,xio,$io,kio,uh,uae,Sio,Rio,uP,Bio,Pio,Iio,ph,pae,qio,Nio,pP,jio,Dio,Gio,_h,_ae,Oio,Vio,_P,Xio,zio,Qio,bh,bae,Wio,Hio,bP,Uio,Jio,Yio,Fh,Fae,Kio,Zio,FP,edo,odo,rdo,vh,vae,tdo,ado,vP,ndo,sdo,ldo,Th,Tae,ido,ddo,TP,cdo,mdo,fdo,Mh,gdo,Eh,hdo,Ch,py,udo,Mae,pdo,JPe,vi,wh,Eae,_y,_do,Cae,bdo,YPe,yo,by,Fdo,Fy,vdo,MP,Tdo,Mdo,Edo,vy,Cdo,wae,wdo,Ado,ydo,We,Ty,Ldo,Aae,xdo,$do,Ti,kdo,yae,Sdo,Rdo,Lae,Bdo,Pdo,Ido,_e,Ah,xae,qdo,Ndo,EP,jdo,Ddo,Gdo,yh,$ae,Odo,Vdo,kae,Xdo,zdo,Qdo,Lh,Sae,Wdo,Hdo,CP,Udo,Jdo,Ydo,xh,Rae,Kdo,Zdo,wP,eco,oco,rco,$h,Bae,tco,aco,AP,nco,sco,lco,kh,Pae,ico,dco,yP,cco,mco,fco,Sh,Iae,gco,hco,LP,uco,pco,_co,Rh,qae,bco,Fco,xP,vco,Tco,Mco,Bh,Nae,Eco,Cco,$P,wco,Aco,yco,Ph,jae,Lco,xco,kP,$co,kco,Sco,Ih,Dae,Rco,Bco,SP,Pco,Ico,qco,qh,Gae,Nco,jco,RP,Dco,Gco,Oco,Nh,Oae,Vco,Xco,BP,zco,Qco,Wco,jh,Vae,Hco,Uco,PP,Jco,Yco,Kco,Dh,Xae,Zco,emo,IP,omo,rmo,tmo,Gh,amo,Oh,nmo,Vh,My,smo,zae,lmo,KPe,Mi,Xh,Qae,Ey,imo,Wae,dmo,ZPe,Lo,Cy,cmo,Ei,mmo,qP,fmo,gmo,NP,hmo,umo,pmo,wy,_mo,Hae,bmo,Fmo,vmo,ot,Ay,Tmo,Uae,Mmo,Emo,Ci,Cmo,Jae,wmo,Amo,jP,ymo,Lmo,xmo,zh,$mo,He,yy,kmo,Yae,Smo,Rmo,Aa,Bmo,Kae,Pmo,Imo,Zae,qmo,Nmo,ene,jmo,Dmo,Gmo,x,Qh,one,Omo,Vmo,DP,Xmo,zmo,Qmo,Wh,rne,Wmo,Hmo,GP,Umo,Jmo,Ymo,Hh,tne,Kmo,Zmo,OP,efo,ofo,rfo,Uh,ane,tfo,afo,VP,nfo,sfo,lfo,Jh,nne,ifo,dfo,XP,cfo,mfo,ffo,Yh,sne,gfo,hfo,zP,ufo,pfo,_fo,Kh,lne,bfo,Ffo,QP,vfo,Tfo,Mfo,Zh,ine,Efo,Cfo,WP,wfo,Afo,yfo,eu,dne,Lfo,xfo,HP,$fo,kfo,Sfo,ou,cne,Rfo,Bfo,UP,Pfo,Ifo,qfo,ru,mne,Nfo,jfo,JP,Dfo,Gfo,Ofo,tu,fne,Vfo,Xfo,YP,zfo,Qfo,Wfo,au,gne,Hfo,Ufo,KP,Jfo,Yfo,Kfo,nu,hne,Zfo,ego,ZP,ogo,rgo,tgo,su,une,ago,ngo,eI,sgo,lgo,igo,lu,pne,dgo,cgo,oI,mgo,fgo,ggo,iu,_ne,hgo,ugo,rI,pgo,_go,bgo,du,bne,Fgo,vgo,tI,Tgo,Mgo,Ego,cu,Fne,Cgo,wgo,aI,Ago,ygo,Lgo,mu,vne,xgo,$go,nI,kgo,Sgo,Rgo,fu,Tne,Bgo,Pgo,sI,Igo,qgo,Ngo,gu,Mne,jgo,Dgo,lI,Ggo,Ogo,Vgo,hu,Ene,Xgo,zgo,iI,Qgo,Wgo,Hgo,uu,Cne,Ugo,Jgo,dI,Ygo,Kgo,Zgo,pu,wne,eho,oho,cI,rho,tho,aho,_u,Ane,nho,sho,mI,lho,iho,dho,bu,yne,cho,mho,fI,fho,gho,hho,Fu,Lne,uho,pho,gI,_ho,bho,Fho,vu,xne,vho,Tho,hI,Mho,Eho,Cho,Tu,$ne,who,Aho,uI,yho,Lho,xho,Mu,kne,$ho,kho,pI,Sho,Rho,Bho,Rs,Sne,Pho,Iho,_I,qho,Nho,bI,jho,Dho,Gho,Eu,Rne,Oho,Vho,FI,Xho,zho,Qho,Cu,Bne,Who,Hho,vI,Uho,Jho,Yho,wu,Pne,Kho,Zho,TI,euo,ouo,ruo,Au,Ine,tuo,auo,MI,nuo,suo,luo,yu,qne,iuo,duo,EI,cuo,muo,fuo,Lu,Nne,guo,huo,CI,uuo,puo,_uo,xu,jne,buo,Fuo,wI,vuo,Tuo,Muo,$u,Dne,Euo,Cuo,AI,wuo,Auo,yuo,ku,Gne,Luo,xuo,yI,$uo,kuo,Suo,Su,One,Ruo,Buo,LI,Puo,Iuo,quo,Ru,Vne,Nuo,juo,xI,Duo,Guo,Ouo,Bu,Xne,Vuo,Xuo,$I,zuo,Quo,Wuo,Pu,zne,Huo,Uuo,kI,Juo,Yuo,Kuo,Iu,Qne,Zuo,epo,SI,opo,rpo,tpo,qu,Wne,apo,npo,RI,spo,lpo,ipo,Nu,Hne,dpo,cpo,BI,mpo,fpo,gpo,ju,Une,hpo,upo,PI,ppo,_po,bpo,Du,Jne,Fpo,vpo,II,Tpo,Mpo,Epo,Gu,Yne,Cpo,wpo,qI,Apo,ypo,Lpo,Ou,Kne,xpo,$po,NI,kpo,Spo,Rpo,Vu,Zne,Bpo,Ppo,jI,Ipo,qpo,Npo,Xu,ese,jpo,Dpo,DI,Gpo,Opo,Vpo,zu,ose,Xpo,zpo,GI,Qpo,Wpo,Hpo,Qu,rse,Upo,Jpo,OI,Ypo,Kpo,Zpo,Wu,tse,e_o,o_o,VI,r_o,t_o,a_o,Hu,ase,n_o,s_o,XI,l_o,i_o,d_o,Uu,nse,c_o,m_o,zI,f_o,g_o,h_o,Ju,sse,u_o,p_o,QI,__o,b_o,F_o,Yu,lse,v_o,T_o,WI,M_o,E_o,C_o,Ku,ise,w_o,A_o,HI,y_o,L_o,x_o,Zu,dse,$_o,k_o,UI,S_o,R_o,B_o,ep,cse,P_o,I_o,JI,q_o,N_o,j_o,op,mse,D_o,G_o,YI,O_o,V_o,X_o,rp,fse,z_o,Q_o,KI,W_o,H_o,U_o,tp,gse,J_o,Y_o,ZI,K_o,Z_o,ebo,ap,hse,obo,rbo,eq,tbo,abo,nbo,np,use,sbo,lbo,oq,ibo,dbo,cbo,sp,pse,mbo,fbo,rq,gbo,hbo,ubo,lp,_se,pbo,_bo,tq,bbo,Fbo,vbo,ip,bse,Tbo,Mbo,aq,Ebo,Cbo,wbo,dp,Fse,Abo,ybo,nq,Lbo,xbo,$bo,cp,vse,kbo,Sbo,sq,Rbo,Bbo,Pbo,mp,Tse,Ibo,qbo,lq,Nbo,jbo,Dbo,fp,Mse,Gbo,Obo,iq,Vbo,Xbo,zbo,gp,Ese,Qbo,Wbo,dq,Hbo,Ubo,Jbo,hp,Cse,Ybo,Kbo,cq,Zbo,e2o,o2o,up,wse,r2o,t2o,mq,a2o,n2o,s2o,pp,Ase,l2o,i2o,fq,d2o,c2o,m2o,_p,yse,f2o,g2o,gq,h2o,u2o,p2o,bp,Lse,_2o,b2o,hq,F2o,v2o,T2o,Fp,xse,M2o,E2o,uq,C2o,w2o,A2o,vp,$se,y2o,L2o,pq,x2o,$2o,k2o,Tp,kse,S2o,R2o,_q,B2o,P2o,I2o,Mp,Sse,q2o,N2o,bq,j2o,D2o,G2o,Ep,Rse,O2o,V2o,Fq,X2o,z2o,Q2o,Cp,Bse,W2o,H2o,vq,U2o,J2o,Y2o,wp,Pse,K2o,Z2o,Tq,eFo,oFo,rFo,Ap,Ise,tFo,aFo,Mq,nFo,sFo,lFo,yp,qse,iFo,dFo,Eq,cFo,mFo,fFo,Lp,Nse,gFo,hFo,Cq,uFo,pFo,_Fo,xp,jse,bFo,FFo,wq,vFo,TFo,MFo,$p,Dse,EFo,CFo,Aq,wFo,AFo,yFo,kp,Gse,LFo,xFo,yq,$Fo,kFo,SFo,Sp,Ose,RFo,BFo,Lq,PFo,IFo,qFo,Rp,Vse,NFo,jFo,xq,DFo,GFo,OFo,Bp,VFo,Xse,XFo,zFo,zse,QFo,WFo,Pp,eIe,wi,Ip,Qse,Ly,HFo,Wse,UFo,oIe,xo,xy,JFo,Ai,YFo,$q,KFo,ZFo,kq,evo,ovo,rvo,$y,tvo,Hse,avo,nvo,svo,rt,ky,lvo,Use,ivo,dvo,yi,cvo,Jse,mvo,fvo,Sq,gvo,hvo,uvo,qp,pvo,Ue,Sy,_vo,Yse,bvo,Fvo,ya,vvo,Kse,Tvo,Mvo,Zse,Evo,Cvo,ele,wvo,Avo,yvo,G,Np,ole,Lvo,xvo,Rq,$vo,kvo,Svo,jp,rle,Rvo,Bvo,Bq,Pvo,Ivo,qvo,Dp,tle,Nvo,jvo,Pq,Dvo,Gvo,Ovo,Gp,ale,Vvo,Xvo,Iq,zvo,Qvo,Wvo,Op,nle,Hvo,Uvo,qq,Jvo,Yvo,Kvo,Vp,sle,Zvo,e1o,Nq,o1o,r1o,t1o,Xp,lle,a1o,n1o,jq,s1o,l1o,i1o,zp,ile,d1o,c1o,Dq,m1o,f1o,g1o,Qp,dle,h1o,u1o,Gq,p1o,_1o,b1o,Wp,cle,F1o,v1o,Oq,T1o,M1o,E1o,Hp,mle,C1o,w1o,Vq,A1o,y1o,L1o,Up,fle,x1o,$1o,Xq,k1o,S1o,R1o,Jp,gle,B1o,P1o,zq,I1o,q1o,N1o,Yp,hle,j1o,D1o,Qq,G1o,O1o,V1o,Kp,ule,X1o,z1o,Wq,Q1o,W1o,H1o,Zp,ple,U1o,J1o,Hq,Y1o,K1o,Z1o,e_,_le,eTo,oTo,Uq,rTo,tTo,aTo,o_,ble,nTo,sTo,Jq,lTo,iTo,dTo,r_,Fle,cTo,mTo,Yq,fTo,gTo,hTo,t_,vle,uTo,pTo,Kq,_To,bTo,FTo,a_,Tle,vTo,TTo,Zq,MTo,ETo,CTo,n_,Mle,wTo,ATo,eN,yTo,LTo,xTo,s_,Ele,$To,kTo,oN,STo,RTo,BTo,l_,Cle,PTo,ITo,rN,qTo,NTo,jTo,i_,wle,DTo,GTo,tN,OTo,VTo,XTo,d_,Ale,zTo,QTo,aN,WTo,HTo,UTo,c_,yle,JTo,YTo,nN,KTo,ZTo,eMo,m_,Lle,oMo,rMo,sN,tMo,aMo,nMo,f_,xle,sMo,lMo,lN,iMo,dMo,cMo,g_,$le,mMo,fMo,iN,gMo,hMo,uMo,h_,kle,pMo,_Mo,dN,bMo,FMo,vMo,u_,Sle,TMo,MMo,cN,EMo,CMo,wMo,p_,Rle,AMo,yMo,mN,LMo,xMo,$Mo,__,Ble,kMo,SMo,fN,RMo,BMo,PMo,b_,Ple,IMo,qMo,gN,NMo,jMo,DMo,F_,Ile,GMo,OMo,hN,VMo,XMo,zMo,v_,qle,QMo,WMo,uN,HMo,UMo,JMo,T_,Nle,YMo,KMo,pN,ZMo,e4o,o4o,M_,jle,r4o,t4o,_N,a4o,n4o,s4o,E_,Dle,l4o,i4o,bN,d4o,c4o,m4o,C_,f4o,Gle,g4o,h4o,Ole,u4o,p4o,w_,rIe,Li,A_,Vle,Ry,_4o,Xle,b4o,tIe,$o,By,F4o,xi,v4o,FN,T4o,M4o,vN,E4o,C4o,w4o,Py,A4o,zle,y4o,L4o,x4o,tt,Iy,$4o,Qle,k4o,S4o,$i,R4o,Wle,B4o,P4o,TN,I4o,q4o,N4o,y_,j4o,Je,qy,D4o,Hle,G4o,O4o,La,V4o,Ule,X4o,z4o,Jle,Q4o,W4o,Yle,H4o,U4o,J4o,z,L_,Kle,Y4o,K4o,MN,Z4o,eEo,oEo,x_,Zle,rEo,tEo,EN,aEo,nEo,sEo,$_,eie,lEo,iEo,CN,dEo,cEo,mEo,k_,oie,fEo,gEo,wN,hEo,uEo,pEo,S_,rie,_Eo,bEo,AN,FEo,vEo,TEo,R_,tie,MEo,EEo,yN,CEo,wEo,AEo,B_,aie,yEo,LEo,LN,xEo,$Eo,kEo,P_,nie,SEo,REo,xN,BEo,PEo,IEo,I_,sie,qEo,NEo,$N,jEo,DEo,GEo,q_,lie,OEo,VEo,kN,XEo,zEo,QEo,N_,iie,WEo,HEo,SN,UEo,JEo,YEo,j_,die,KEo,ZEo,RN,e5o,o5o,r5o,D_,cie,t5o,a5o,BN,n5o,s5o,l5o,G_,mie,i5o,d5o,PN,c5o,m5o,f5o,O_,fie,g5o,h5o,IN,u5o,p5o,_5o,V_,gie,b5o,F5o,qN,v5o,T5o,M5o,X_,hie,E5o,C5o,NN,w5o,A5o,y5o,z_,uie,L5o,x5o,jN,$5o,k5o,S5o,Q_,pie,R5o,B5o,DN,P5o,I5o,q5o,W_,_ie,N5o,j5o,GN,D5o,G5o,O5o,H_,bie,V5o,X5o,ON,z5o,Q5o,W5o,U_,Fie,H5o,U5o,VN,J5o,Y5o,K5o,J_,vie,Z5o,eCo,XN,oCo,rCo,tCo,Y_,Tie,aCo,nCo,zN,sCo,lCo,iCo,K_,Mie,dCo,cCo,QN,mCo,fCo,gCo,Z_,Eie,hCo,uCo,WN,pCo,_Co,bCo,eb,Cie,FCo,vCo,HN,TCo,MCo,ECo,ob,wie,CCo,wCo,UN,ACo,yCo,LCo,rb,Aie,xCo,$Co,JN,kCo,SCo,RCo,tb,yie,BCo,PCo,YN,ICo,qCo,NCo,ab,Lie,jCo,DCo,KN,GCo,OCo,VCo,nb,xie,XCo,zCo,ZN,QCo,WCo,HCo,sb,$ie,UCo,JCo,ej,YCo,KCo,ZCo,lb,kie,e3o,o3o,oj,r3o,t3o,a3o,ib,Sie,n3o,s3o,rj,l3o,i3o,d3o,db,Rie,c3o,m3o,tj,f3o,g3o,h3o,cb,u3o,Bie,p3o,_3o,Pie,b3o,F3o,mb,aIe,ki,fb,Iie,Ny,v3o,qie,T3o,nIe,ko,jy,M3o,Si,E3o,aj,C3o,w3o,nj,A3o,y3o,L3o,Dy,x3o,Nie,$3o,k3o,S3o,at,Gy,R3o,jie,B3o,P3o,Ri,I3o,Die,q3o,N3o,sj,j3o,D3o,G3o,gb,O3o,Ye,Oy,V3o,Gie,X3o,z3o,xa,Q3o,Oie,W3o,H3o,Vie,U3o,J3o,Xie,Y3o,K3o,Z3o,Q,hb,zie,ewo,owo,lj,rwo,two,awo,ub,Qie,nwo,swo,ij,lwo,iwo,dwo,pb,Wie,cwo,mwo,dj,fwo,gwo,hwo,_b,Hie,uwo,pwo,cj,_wo,bwo,Fwo,bb,Uie,vwo,Two,mj,Mwo,Ewo,Cwo,Fb,Jie,wwo,Awo,fj,ywo,Lwo,xwo,vb,Yie,$wo,kwo,gj,Swo,Rwo,Bwo,Tb,Kie,Pwo,Iwo,hj,qwo,Nwo,jwo,Mb,Zie,Dwo,Gwo,uj,Owo,Vwo,Xwo,Eb,ede,zwo,Qwo,pj,Wwo,Hwo,Uwo,Cb,ode,Jwo,Ywo,_j,Kwo,Zwo,eAo,wb,rde,oAo,rAo,bj,tAo,aAo,nAo,Ab,tde,sAo,lAo,Fj,iAo,dAo,cAo,yb,ade,mAo,fAo,vj,gAo,hAo,uAo,Lb,nde,pAo,_Ao,Tj,bAo,FAo,vAo,xb,sde,TAo,MAo,Mj,EAo,CAo,wAo,$b,lde,AAo,yAo,Ej,LAo,xAo,$Ao,kb,ide,kAo,SAo,Cj,RAo,BAo,PAo,Sb,dde,IAo,qAo,wj,NAo,jAo,DAo,Rb,cde,GAo,OAo,Aj,VAo,XAo,zAo,Bb,mde,QAo,WAo,yj,HAo,UAo,JAo,Pb,fde,YAo,KAo,Lj,ZAo,e6o,o6o,Ib,gde,r6o,t6o,xj,a6o,n6o,s6o,qb,hde,l6o,i6o,$j,d6o,c6o,m6o,Nb,ude,f6o,g6o,kj,h6o,u6o,p6o,jb,pde,_6o,b6o,Sj,F6o,v6o,T6o,Db,_de,M6o,E6o,Rj,C6o,w6o,A6o,Gb,bde,y6o,L6o,Bj,x6o,$6o,k6o,Ob,Fde,S6o,R6o,Pj,B6o,P6o,I6o,Vb,vde,q6o,N6o,Ij,j6o,D6o,G6o,Xb,Tde,O6o,V6o,Mde,X6o,z6o,Q6o,zb,Ede,W6o,H6o,qj,U6o,J6o,Y6o,Qb,Cde,K6o,Z6o,Nj,e0o,o0o,r0o,Wb,wde,t0o,a0o,jj,n0o,s0o,l0o,Hb,Ade,i0o,d0o,Dj,c0o,m0o,f0o,Ub,g0o,yde,h0o,u0o,Lde,p0o,_0o,Jb,sIe,Bi,Yb,xde,Vy,b0o,$de,F0o,lIe,So,Xy,v0o,Pi,T0o,Gj,M0o,E0o,Oj,C0o,w0o,A0o,zy,y0o,kde,L0o,x0o,$0o,nt,Qy,k0o,Sde,S0o,R0o,Ii,B0o,Rde,P0o,I0o,Vj,q0o,N0o,j0o,Kb,D0o,Ke,Wy,G0o,Bde,O0o,V0o,$a,X0o,Pde,z0o,Q0o,Ide,W0o,H0o,qde,U0o,J0o,Y0o,ue,Zb,Nde,K0o,Z0o,Xj,eyo,oyo,ryo,e2,jde,tyo,ayo,zj,nyo,syo,lyo,o2,Dde,iyo,dyo,Qj,cyo,myo,fyo,r2,Gde,gyo,hyo,Wj,uyo,pyo,_yo,t2,Ode,byo,Fyo,Hj,vyo,Tyo,Myo,a2,Vde,Eyo,Cyo,Uj,wyo,Ayo,yyo,n2,Xde,Lyo,xyo,Jj,$yo,kyo,Syo,s2,zde,Ryo,Byo,Yj,Pyo,Iyo,qyo,l2,Qde,Nyo,jyo,Kj,Dyo,Gyo,Oyo,i2,Wde,Vyo,Xyo,Zj,zyo,Qyo,Wyo,d2,Hde,Hyo,Uyo,eD,Jyo,Yyo,Kyo,c2,Ude,Zyo,eLo,oD,oLo,rLo,tLo,m2,Jde,aLo,nLo,rD,sLo,lLo,iLo,f2,Yde,dLo,cLo,tD,mLo,fLo,gLo,g2,Kde,hLo,uLo,aD,pLo,_Lo,bLo,h2,Zde,FLo,vLo,nD,TLo,MLo,ELo,u2,CLo,ece,wLo,ALo,oce,yLo,LLo,p2,iIe,qi,_2,rce,Hy,xLo,tce,$Lo,dIe,Ro,Uy,kLo,Ni,SLo,sD,RLo,BLo,lD,PLo,ILo,qLo,Jy,NLo,ace,jLo,DLo,GLo,st,Yy,OLo,nce,VLo,XLo,ji,zLo,sce,QLo,WLo,iD,HLo,ULo,JLo,b2,YLo,Ze,Ky,KLo,lce,ZLo,e8o,ka,o8o,ice,r8o,t8o,dce,a8o,n8o,cce,s8o,l8o,i8o,q,F2,mce,d8o,c8o,dD,m8o,f8o,g8o,v2,fce,h8o,u8o,cD,p8o,_8o,b8o,T2,gce,F8o,v8o,mD,T8o,M8o,E8o,M2,hce,C8o,w8o,fD,A8o,y8o,L8o,E2,uce,x8o,$8o,gD,k8o,S8o,R8o,C2,pce,B8o,P8o,hD,I8o,q8o,N8o,w2,_ce,j8o,D8o,uD,G8o,O8o,V8o,A2,bce,X8o,z8o,pD,Q8o,W8o,H8o,y2,Fce,U8o,J8o,_D,Y8o,K8o,Z8o,L2,vce,exo,oxo,bD,rxo,txo,axo,x2,Tce,nxo,sxo,FD,lxo,ixo,dxo,$2,Mce,cxo,mxo,vD,fxo,gxo,hxo,k2,Ece,uxo,pxo,TD,_xo,bxo,Fxo,S2,Cce,vxo,Txo,MD,Mxo,Exo,Cxo,R2,wce,wxo,Axo,ED,yxo,Lxo,xxo,B2,Ace,$xo,kxo,CD,Sxo,Rxo,Bxo,P2,yce,Pxo,Ixo,wD,qxo,Nxo,jxo,I2,Lce,Dxo,Gxo,AD,Oxo,Vxo,Xxo,q2,xce,zxo,Qxo,yD,Wxo,Hxo,Uxo,N2,$ce,Jxo,Yxo,LD,Kxo,Zxo,e7o,j2,kce,o7o,r7o,xD,t7o,a7o,n7o,D2,Sce,s7o,l7o,$D,i7o,d7o,c7o,G2,Rce,m7o,f7o,kD,g7o,h7o,u7o,O2,Bce,p7o,_7o,SD,b7o,F7o,v7o,V2,Pce,T7o,M7o,RD,E7o,C7o,w7o,X2,Ice,A7o,y7o,BD,L7o,x7o,$7o,z2,qce,k7o,S7o,PD,R7o,B7o,P7o,Q2,Nce,I7o,q7o,ID,N7o,j7o,D7o,W2,jce,G7o,O7o,qD,V7o,X7o,z7o,H2,Dce,Q7o,W7o,ND,H7o,U7o,J7o,U2,Gce,Y7o,K7o,jD,Z7o,e9o,o9o,J2,Oce,r9o,t9o,DD,a9o,n9o,s9o,Y2,Vce,l9o,i9o,GD,d9o,c9o,m9o,K2,Xce,f9o,g9o,OD,h9o,u9o,p9o,Z2,zce,_9o,b9o,VD,F9o,v9o,T9o,eF,Qce,M9o,E9o,XD,C9o,w9o,A9o,oF,Wce,y9o,L9o,zD,x9o,$9o,k9o,rF,Hce,S9o,R9o,QD,B9o,P9o,I9o,tF,Uce,q9o,N9o,WD,j9o,D9o,G9o,aF,Jce,O9o,V9o,HD,X9o,z9o,Q9o,nF,Yce,W9o,H9o,UD,U9o,J9o,Y9o,sF,Kce,K9o,Z9o,JD,e$o,o$o,r$o,lF,Zce,t$o,a$o,YD,n$o,s$o,l$o,iF,eme,i$o,d$o,KD,c$o,m$o,f$o,dF,ome,g$o,h$o,ZD,u$o,p$o,_$o,cF,rme,b$o,F$o,eG,v$o,T$o,M$o,mF,E$o,tme,C$o,w$o,ame,A$o,y$o,fF,cIe,Di,gF,nme,Zy,L$o,sme,x$o,mIe,Bo,eL,$$o,Gi,k$o,oG,S$o,R$o,rG,B$o,P$o,I$o,oL,q$o,lme,N$o,j$o,D$o,lt,rL,G$o,ime,O$o,V$o,Oi,X$o,dme,z$o,Q$o,tG,W$o,H$o,U$o,hF,J$o,eo,tL,Y$o,cme,K$o,Z$o,Sa,eko,mme,oko,rko,fme,tko,ako,gme,nko,sko,lko,Y,uF,hme,iko,dko,aG,cko,mko,fko,pF,ume,gko,hko,nG,uko,pko,_ko,_F,pme,bko,Fko,sG,vko,Tko,Mko,bF,_me,Eko,Cko,lG,wko,Ako,yko,FF,bme,Lko,xko,iG,$ko,kko,Sko,vF,Fme,Rko,Bko,dG,Pko,Iko,qko,TF,vme,Nko,jko,cG,Dko,Gko,Oko,MF,Tme,Vko,Xko,mG,zko,Qko,Wko,EF,Mme,Hko,Uko,fG,Jko,Yko,Kko,CF,Eme,Zko,eSo,gG,oSo,rSo,tSo,wF,Cme,aSo,nSo,hG,sSo,lSo,iSo,AF,wme,dSo,cSo,uG,mSo,fSo,gSo,yF,Ame,hSo,uSo,pG,pSo,_So,bSo,LF,yme,FSo,vSo,_G,TSo,MSo,ESo,xF,Lme,CSo,wSo,bG,ASo,ySo,LSo,$F,xme,xSo,$So,FG,kSo,SSo,RSo,kF,$me,BSo,PSo,vG,ISo,qSo,NSo,SF,kme,jSo,DSo,TG,GSo,OSo,VSo,RF,Sme,XSo,zSo,MG,QSo,WSo,HSo,BF,Rme,USo,JSo,EG,YSo,KSo,ZSo,PF,Bme,eRo,oRo,CG,rRo,tRo,aRo,IF,Pme,nRo,sRo,wG,lRo,iRo,dRo,qF,Ime,cRo,mRo,AG,fRo,gRo,hRo,NF,qme,uRo,pRo,yG,_Ro,bRo,FRo,jF,Nme,vRo,TRo,LG,MRo,ERo,CRo,DF,jme,wRo,ARo,xG,yRo,LRo,xRo,GF,Dme,$Ro,kRo,$G,SRo,RRo,BRo,OF,Gme,PRo,IRo,kG,qRo,NRo,jRo,VF,Ome,DRo,GRo,SG,ORo,VRo,XRo,XF,zRo,Vme,QRo,WRo,Xme,HRo,URo,zF,fIe,Vi,QF,zme,aL,JRo,Qme,YRo,gIe,Po,nL,KRo,Xi,ZRo,RG,eBo,oBo,BG,rBo,tBo,aBo,sL,nBo,Wme,sBo,lBo,iBo,it,lL,dBo,Hme,cBo,mBo,zi,fBo,Ume,gBo,hBo,PG,uBo,pBo,_Bo,WF,bBo,oo,iL,FBo,Jme,vBo,TBo,Ra,MBo,Yme,EBo,CBo,Kme,wBo,ABo,Zme,yBo,LBo,xBo,Yr,HF,efe,$Bo,kBo,IG,SBo,RBo,BBo,UF,ofe,PBo,IBo,qG,qBo,NBo,jBo,JF,rfe,DBo,GBo,NG,OBo,VBo,XBo,YF,tfe,zBo,QBo,jG,WBo,HBo,UBo,KF,afe,JBo,YBo,DG,KBo,ZBo,ePo,ZF,oPo,nfe,rPo,tPo,sfe,aPo,nPo,ev,hIe,Qi,ov,lfe,dL,sPo,ife,lPo,uIe,Io,cL,iPo,Wi,dPo,GG,cPo,mPo,OG,fPo,gPo,hPo,mL,uPo,dfe,pPo,_Po,bPo,dt,fL,FPo,cfe,vPo,TPo,Hi,MPo,mfe,EPo,CPo,VG,wPo,APo,yPo,rv,LPo,ro,gL,xPo,ffe,$Po,kPo,Ba,SPo,gfe,RPo,BPo,hfe,PPo,IPo,ufe,qPo,NPo,jPo,U,tv,pfe,DPo,GPo,XG,OPo,VPo,XPo,av,_fe,zPo,QPo,zG,WPo,HPo,UPo,nv,bfe,JPo,YPo,QG,KPo,ZPo,eIo,sv,Ffe,oIo,rIo,WG,tIo,aIo,nIo,lv,vfe,sIo,lIo,HG,iIo,dIo,cIo,iv,Tfe,mIo,fIo,UG,gIo,hIo,uIo,dv,Mfe,pIo,_Io,JG,bIo,FIo,vIo,cv,Efe,TIo,MIo,YG,EIo,CIo,wIo,mv,Cfe,AIo,yIo,KG,LIo,xIo,$Io,fv,wfe,kIo,SIo,ZG,RIo,BIo,PIo,gv,Afe,IIo,qIo,eO,NIo,jIo,DIo,hv,yfe,GIo,OIo,oO,VIo,XIo,zIo,uv,Lfe,QIo,WIo,rO,HIo,UIo,JIo,pv,xfe,YIo,KIo,tO,ZIo,eqo,oqo,_v,$fe,rqo,tqo,aO,aqo,nqo,sqo,bv,kfe,lqo,iqo,nO,dqo,cqo,mqo,Fv,Sfe,fqo,gqo,sO,hqo,uqo,pqo,vv,Rfe,_qo,bqo,lO,Fqo,vqo,Tqo,Tv,Bfe,Mqo,Eqo,iO,Cqo,wqo,Aqo,Mv,Pfe,yqo,Lqo,dO,xqo,$qo,kqo,Ev,Ife,Sqo,Rqo,cO,Bqo,Pqo,Iqo,Cv,qfe,qqo,Nqo,mO,jqo,Dqo,Gqo,wv,Nfe,Oqo,Vqo,fO,Xqo,zqo,Qqo,Av,jfe,Wqo,Hqo,gO,Uqo,Jqo,Yqo,yv,Dfe,Kqo,Zqo,hO,eNo,oNo,rNo,Lv,Gfe,tNo,aNo,uO,nNo,sNo,lNo,xv,Ofe,iNo,dNo,pO,cNo,mNo,fNo,$v,Vfe,gNo,hNo,_O,uNo,pNo,_No,kv,Xfe,bNo,FNo,bO,vNo,TNo,MNo,Sv,zfe,ENo,CNo,FO,wNo,ANo,yNo,Rv,Qfe,LNo,xNo,vO,$No,kNo,SNo,Bv,Wfe,RNo,BNo,TO,PNo,INo,qNo,Pv,Hfe,NNo,jNo,MO,DNo,GNo,ONo,Iv,VNo,Ufe,XNo,zNo,Jfe,QNo,WNo,qv,pIe,Ui,Nv,Yfe,hL,HNo,Kfe,UNo,_Ie,qo,uL,JNo,Ji,YNo,EO,KNo,ZNo,CO,ejo,ojo,rjo,pL,tjo,Zfe,ajo,njo,sjo,ct,_L,ljo,ege,ijo,djo,Yi,cjo,oge,mjo,fjo,wO,gjo,hjo,ujo,jv,pjo,to,bL,_jo,rge,bjo,Fjo,Pa,vjo,tge,Tjo,Mjo,age,Ejo,Cjo,nge,wjo,Ajo,yjo,O,Dv,sge,Ljo,xjo,AO,$jo,kjo,Sjo,Gv,lge,Rjo,Bjo,yO,Pjo,Ijo,qjo,Ov,ige,Njo,jjo,LO,Djo,Gjo,Ojo,Vv,dge,Vjo,Xjo,xO,zjo,Qjo,Wjo,Xv,cge,Hjo,Ujo,$O,Jjo,Yjo,Kjo,zv,mge,Zjo,eDo,kO,oDo,rDo,tDo,Qv,fge,aDo,nDo,SO,sDo,lDo,iDo,Wv,gge,dDo,cDo,RO,mDo,fDo,gDo,Hv,hge,hDo,uDo,BO,pDo,_Do,bDo,Uv,uge,FDo,vDo,PO,TDo,MDo,EDo,Jv,pge,CDo,wDo,IO,ADo,yDo,LDo,Yv,_ge,xDo,$Do,qO,kDo,SDo,RDo,Kv,bge,BDo,PDo,NO,IDo,qDo,NDo,Zv,Fge,jDo,DDo,jO,GDo,ODo,VDo,e1,vge,XDo,zDo,DO,QDo,WDo,HDo,o1,Tge,UDo,JDo,GO,YDo,KDo,ZDo,r1,Mge,eGo,oGo,OO,rGo,tGo,aGo,t1,Ege,nGo,sGo,VO,lGo,iGo,dGo,a1,Cge,cGo,mGo,XO,fGo,gGo,hGo,n1,wge,uGo,pGo,zO,_Go,bGo,FGo,s1,Age,vGo,TGo,QO,MGo,EGo,CGo,l1,yge,wGo,AGo,WO,yGo,LGo,xGo,i1,Lge,$Go,kGo,HO,SGo,RGo,BGo,d1,xge,PGo,IGo,UO,qGo,NGo,jGo,c1,$ge,DGo,GGo,JO,OGo,VGo,XGo,m1,kge,zGo,QGo,YO,WGo,HGo,UGo,f1,Sge,JGo,YGo,KO,KGo,ZGo,eOo,g1,Rge,oOo,rOo,ZO,tOo,aOo,nOo,h1,Bge,sOo,lOo,eV,iOo,dOo,cOo,u1,Pge,mOo,fOo,oV,gOo,hOo,uOo,p1,Ige,pOo,_Oo,rV,bOo,FOo,vOo,_1,qge,TOo,MOo,tV,EOo,COo,wOo,b1,Nge,AOo,yOo,aV,LOo,xOo,$Oo,F1,jge,kOo,SOo,nV,ROo,BOo,POo,v1,Dge,IOo,qOo,sV,NOo,jOo,DOo,T1,Gge,GOo,OOo,lV,VOo,XOo,zOo,M1,Oge,QOo,WOo,iV,HOo,UOo,JOo,E1,Vge,YOo,KOo,dV,ZOo,eVo,oVo,C1,Xge,rVo,tVo,cV,aVo,nVo,sVo,w1,lVo,zge,iVo,dVo,Qge,cVo,mVo,A1,bIe,Ki,y1,Wge,FL,fVo,Hge,gVo,FIe,No,vL,hVo,Zi,uVo,mV,pVo,_Vo,fV,bVo,FVo,vVo,TL,TVo,Uge,MVo,EVo,CVo,mt,ML,wVo,Jge,AVo,yVo,ed,LVo,Yge,xVo,$Vo,gV,kVo,SVo,RVo,L1,BVo,ao,EL,PVo,Kge,IVo,qVo,Ia,NVo,Zge,jVo,DVo,ehe,GVo,OVo,ohe,VVo,XVo,zVo,rhe,x1,the,QVo,WVo,hV,HVo,UVo,JVo,$1,YVo,ahe,KVo,ZVo,nhe,eXo,oXo,k1,vIe,od,S1,she,CL,rXo,lhe,tXo,TIe,jo,wL,aXo,rd,nXo,uV,sXo,lXo,pV,iXo,dXo,cXo,AL,mXo,ihe,fXo,gXo,hXo,ft,yL,uXo,dhe,pXo,_Xo,td,bXo,che,FXo,vXo,_V,TXo,MXo,EXo,R1,CXo,no,LL,wXo,mhe,AXo,yXo,qa,LXo,fhe,xXo,$Xo,ghe,kXo,SXo,hhe,RXo,BXo,PXo,ve,B1,uhe,IXo,qXo,bV,NXo,jXo,DXo,P1,phe,GXo,OXo,FV,VXo,XXo,zXo,I1,_he,QXo,WXo,vV,HXo,UXo,JXo,Bs,bhe,YXo,KXo,TV,ZXo,ezo,MV,ozo,rzo,tzo,q1,Fhe,azo,nzo,EV,szo,lzo,izo,gt,vhe,dzo,czo,CV,mzo,fzo,wV,gzo,hzo,AV,uzo,pzo,_zo,N1,The,bzo,Fzo,yV,vzo,Tzo,Mzo,j1,Mhe,Ezo,Czo,LV,wzo,Azo,yzo,D1,Ehe,Lzo,xzo,xV,$zo,kzo,Szo,G1,Che,Rzo,Bzo,$V,Pzo,Izo,qzo,O1,whe,Nzo,jzo,kV,Dzo,Gzo,Ozo,V1,Ahe,Vzo,Xzo,SV,zzo,Qzo,Wzo,X1,yhe,Hzo,Uzo,RV,Jzo,Yzo,Kzo,z1,Zzo,Lhe,eQo,oQo,xhe,rQo,tQo,Q1,MIe,ad,W1,$he,xL,aQo,khe,nQo,EIe,Do,$L,sQo,nd,lQo,BV,iQo,dQo,PV,cQo,mQo,fQo,kL,gQo,She,hQo,uQo,pQo,ht,SL,_Qo,Rhe,bQo,FQo,sd,vQo,Bhe,TQo,MQo,IV,EQo,CQo,wQo,H1,AQo,so,RL,yQo,Phe,LQo,xQo,Na,$Qo,Ihe,kQo,SQo,qhe,RQo,BQo,Nhe,PQo,IQo,qQo,jhe,U1,Dhe,NQo,jQo,qV,DQo,GQo,OQo,J1,VQo,Ghe,XQo,zQo,Ohe,QQo,WQo,Y1,CIe,ld,K1,Vhe,BL,HQo,Xhe,UQo,wIe,Go,PL,JQo,id,YQo,NV,KQo,ZQo,jV,eWo,oWo,rWo,IL,tWo,zhe,aWo,nWo,sWo,ut,qL,lWo,Qhe,iWo,dWo,dd,cWo,Whe,mWo,fWo,DV,gWo,hWo,uWo,Z1,pWo,lo,NL,_Wo,Hhe,bWo,FWo,ja,vWo,Uhe,TWo,MWo,Jhe,EWo,CWo,Yhe,wWo,AWo,yWo,Ne,eT,Khe,LWo,xWo,GV,$Wo,kWo,SWo,oT,Zhe,RWo,BWo,OV,PWo,IWo,qWo,rT,eue,NWo,jWo,VV,DWo,GWo,OWo,tT,oue,VWo,XWo,XV,zWo,QWo,WWo,aT,rue,HWo,UWo,zV,JWo,YWo,KWo,nT,tue,ZWo,eHo,QV,oHo,rHo,tHo,sT,aue,aHo,nHo,WV,sHo,lHo,iHo,lT,nue,dHo,cHo,HV,mHo,fHo,gHo,iT,hHo,sue,uHo,pHo,lue,_Ho,bHo,dT,AIe,cd,cT,iue,jL,FHo,due,vHo,yIe,Oo,DL,THo,md,MHo,UV,EHo,CHo,JV,wHo,AHo,yHo,GL,LHo,cue,xHo,$Ho,kHo,pt,OL,SHo,mue,RHo,BHo,fd,PHo,fue,IHo,qHo,YV,NHo,jHo,DHo,mT,GHo,io,VL,OHo,gue,VHo,XHo,Da,zHo,hue,QHo,WHo,uue,HHo,UHo,pue,JHo,YHo,KHo,Ga,fT,_ue,ZHo,eUo,KV,oUo,rUo,tUo,gT,bue,aUo,nUo,ZV,sUo,lUo,iUo,hT,Fue,dUo,cUo,eX,mUo,fUo,gUo,uT,vue,hUo,uUo,oX,pUo,_Uo,bUo,pT,FUo,Tue,vUo,TUo,Mue,MUo,EUo,_T,LIe,gd,bT,Eue,XL,CUo,Cue,wUo,xIe,Vo,zL,AUo,hd,yUo,rX,LUo,xUo,tX,$Uo,kUo,SUo,QL,RUo,wue,BUo,PUo,IUo,_t,WL,qUo,Aue,NUo,jUo,ud,DUo,yue,GUo,OUo,aX,VUo,XUo,zUo,FT,QUo,co,HL,WUo,Lue,HUo,UUo,Oa,JUo,xue,YUo,KUo,$ue,ZUo,eJo,kue,oJo,rJo,tJo,je,vT,Sue,aJo,nJo,nX,sJo,lJo,iJo,TT,Rue,dJo,cJo,sX,mJo,fJo,gJo,MT,Bue,hJo,uJo,lX,pJo,_Jo,bJo,ET,Pue,FJo,vJo,iX,TJo,MJo,EJo,CT,Iue,CJo,wJo,dX,AJo,yJo,LJo,wT,que,xJo,$Jo,cX,kJo,SJo,RJo,AT,Nue,BJo,PJo,mX,IJo,qJo,NJo,yT,jue,jJo,DJo,fX,GJo,OJo,VJo,LT,XJo,Due,zJo,QJo,Gue,WJo,HJo,xT,$Ie,pd,$T,Oue,UL,UJo,Vue,JJo,kIe,Xo,JL,YJo,_d,KJo,gX,ZJo,eYo,hX,oYo,rYo,tYo,YL,aYo,Xue,nYo,sYo,lYo,bt,KL,iYo,zue,dYo,cYo,bd,mYo,Que,fYo,gYo,uX,hYo,uYo,pYo,kT,_Yo,mo,ZL,bYo,Wue,FYo,vYo,Va,TYo,Hue,MYo,EYo,Uue,CYo,wYo,Jue,AYo,yYo,LYo,e8,ST,Yue,xYo,$Yo,pX,kYo,SYo,RYo,RT,Kue,BYo,PYo,_X,IYo,qYo,NYo,BT,jYo,Zue,DYo,GYo,epe,OYo,VYo,PT,SIe,Fd,IT,ope,o8,XYo,rpe,zYo,RIe,zo,r8,QYo,vd,WYo,bX,HYo,UYo,FX,JYo,YYo,KYo,t8,ZYo,tpe,eKo,oKo,rKo,Ft,a8,tKo,ape,aKo,nKo,Td,sKo,npe,lKo,iKo,vX,dKo,cKo,mKo,qT,fKo,fo,n8,gKo,spe,hKo,uKo,Xa,pKo,lpe,_Ko,bKo,ipe,FKo,vKo,dpe,TKo,MKo,EKo,za,NT,cpe,CKo,wKo,TX,AKo,yKo,LKo,jT,mpe,xKo,$Ko,MX,kKo,SKo,RKo,DT,fpe,BKo,PKo,EX,IKo,qKo,NKo,GT,gpe,jKo,DKo,CX,GKo,OKo,VKo,OT,XKo,hpe,zKo,QKo,upe,WKo,HKo,VT,BIe,Md,XT,ppe,s8,UKo,_pe,JKo,PIe,Qo,l8,YKo,Ed,KKo,wX,ZKo,eZo,AX,oZo,rZo,tZo,i8,aZo,bpe,nZo,sZo,lZo,vt,d8,iZo,Fpe,dZo,cZo,Cd,mZo,vpe,fZo,gZo,yX,hZo,uZo,pZo,zT,_Zo,go,c8,bZo,Tpe,FZo,vZo,Qa,TZo,Mpe,MZo,EZo,Epe,CZo,wZo,Cpe,AZo,yZo,LZo,wd,QT,wpe,xZo,$Zo,LX,kZo,SZo,RZo,WT,Ape,BZo,PZo,xX,IZo,qZo,NZo,HT,ype,jZo,DZo,$X,GZo,OZo,VZo,UT,XZo,Lpe,zZo,QZo,xpe,WZo,HZo,JT,IIe,Ad,YT,$pe,m8,UZo,kpe,JZo,qIe,Wo,f8,YZo,yd,KZo,kX,ZZo,eer,SX,oer,rer,ter,g8,aer,Spe,ner,ser,ler,Tt,h8,ier,Rpe,der,cer,Ld,mer,Bpe,fer,ger,RX,her,uer,per,KT,_er,ho,u8,ber,Ppe,Fer,ver,Wa,Ter,Ipe,Mer,Eer,qpe,Cer,wer,Npe,Aer,yer,Ler,p8,ZT,jpe,xer,$er,BX,ker,Ser,Rer,eM,Dpe,Ber,Per,PX,Ier,qer,Ner,oM,jer,Gpe,Der,Ger,Ope,Oer,Ver,rM,NIe,xd,tM,Vpe,_8,Xer,Xpe,zer,jIe,Ho,b8,Qer,$d,Wer,IX,Her,Uer,qX,Jer,Yer,Ker,F8,Zer,zpe,eor,oor,ror,Mt,v8,tor,Qpe,aor,nor,kd,sor,Wpe,lor,ior,NX,dor,cor,mor,aM,gor,uo,T8,hor,Hpe,uor,por,Ha,_or,Upe,bor,For,Jpe,vor,Tor,Ype,Mor,Eor,Cor,Kpe,nM,Zpe,wor,Aor,jX,yor,Lor,xor,sM,$or,e_e,kor,Sor,o_e,Ror,Bor,lM,DIe,Sd,iM,r_e,M8,Por,t_e,Ior,GIe,Uo,E8,qor,Rd,Nor,DX,jor,Dor,GX,Gor,Oor,Vor,C8,Xor,a_e,zor,Qor,Wor,Et,w8,Hor,n_e,Uor,Jor,Bd,Yor,s_e,Kor,Zor,OX,err,orr,rrr,dM,trr,po,A8,arr,l_e,nrr,srr,Ua,lrr,i_e,irr,drr,d_e,crr,mrr,c_e,frr,grr,hrr,Ja,cM,m_e,urr,prr,VX,_rr,brr,Frr,mM,f_e,vrr,Trr,XX,Mrr,Err,Crr,fM,g_e,wrr,Arr,zX,yrr,Lrr,xrr,gM,h_e,$rr,krr,QX,Srr,Rrr,Brr,hM,Prr,u_e,Irr,qrr,p_e,Nrr,jrr,uM,OIe,Pd,pM,__e,y8,Drr,b_e,Grr,VIe,Jo,L8,Orr,Id,Vrr,WX,Xrr,zrr,HX,Qrr,Wrr,Hrr,x8,Urr,F_e,Jrr,Yrr,Krr,Ct,$8,Zrr,v_e,etr,otr,qd,rtr,T_e,ttr,atr,UX,ntr,str,ltr,_M,itr,_o,k8,dtr,M_e,ctr,mtr,Ya,ftr,E_e,gtr,htr,C_e,utr,ptr,w_e,_tr,btr,Ftr,A_e,bM,y_e,vtr,Ttr,JX,Mtr,Etr,Ctr,FM,wtr,L_e,Atr,ytr,x_e,Ltr,xtr,vM,XIe,Nd,TM,$_e,S8,$tr,k_e,ktr,zIe,Yo,R8,Str,jd,Rtr,YX,Btr,Ptr,KX,Itr,qtr,Ntr,B8,jtr,S_e,Dtr,Gtr,Otr,wt,P8,Vtr,R_e,Xtr,ztr,Dd,Qtr,B_e,Wtr,Htr,ZX,Utr,Jtr,Ytr,MM,Ktr,wr,I8,Ztr,P_e,ear,oar,Ka,rar,I_e,tar,aar,q_e,nar,sar,N_e,lar,iar,dar,N,EM,j_e,car,mar,ez,far,gar,har,CM,D_e,uar,par,oz,_ar,bar,Far,wM,G_e,Tar,Mar,rz,Ear,Car,war,AM,O_e,Aar,yar,tz,Lar,xar,$ar,yM,V_e,kar,Sar,az,Rar,Bar,Par,LM,X_e,Iar,qar,nz,Nar,jar,Dar,xM,z_e,Gar,Oar,sz,Var,Xar,zar,$M,Q_e,Qar,War,lz,Har,Uar,Jar,kM,W_e,Yar,Kar,iz,Zar,enr,onr,SM,H_e,rnr,tnr,dz,anr,nnr,snr,RM,U_e,lnr,inr,cz,dnr,cnr,mnr,BM,J_e,fnr,gnr,mz,hnr,unr,pnr,PM,Y_e,_nr,bnr,fz,Fnr,vnr,Tnr,IM,K_e,Mnr,Enr,gz,Cnr,wnr,Anr,qM,Z_e,ynr,Lnr,hz,xnr,$nr,knr,NM,ebe,Snr,Rnr,uz,Bnr,Pnr,Inr,jM,obe,qnr,Nnr,pz,jnr,Dnr,Gnr,Ps,rbe,Onr,Vnr,_z,Xnr,znr,bz,Qnr,Wnr,Hnr,DM,tbe,Unr,Jnr,Fz,Ynr,Knr,Znr,GM,abe,esr,osr,vz,rsr,tsr,asr,OM,nbe,nsr,ssr,Tz,lsr,isr,dsr,VM,sbe,csr,msr,Mz,fsr,gsr,hsr,XM,lbe,usr,psr,Ez,_sr,bsr,Fsr,zM,ibe,vsr,Tsr,Cz,Msr,Esr,Csr,QM,dbe,wsr,Asr,wz,ysr,Lsr,xsr,WM,cbe,$sr,ksr,Az,Ssr,Rsr,Bsr,HM,mbe,Psr,Isr,yz,qsr,Nsr,jsr,UM,fbe,Dsr,Gsr,Lz,Osr,Vsr,Xsr,JM,gbe,zsr,Qsr,xz,Wsr,Hsr,Usr,YM,hbe,Jsr,Ysr,$z,Ksr,Zsr,elr,KM,ube,olr,rlr,kz,tlr,alr,nlr,ZM,pbe,slr,llr,Sz,ilr,dlr,clr,e4,_be,mlr,flr,Rz,glr,hlr,ulr,o4,bbe,plr,_lr,Bz,blr,Flr,vlr,r4,Fbe,Tlr,Mlr,Pz,Elr,Clr,wlr,t4,vbe,Alr,ylr,Iz,Llr,xlr,$lr,a4,Tbe,klr,Slr,qz,Rlr,Blr,Plr,n4,Mbe,Ilr,qlr,Nz,Nlr,jlr,Dlr,s4,Ebe,Glr,Olr,jz,Vlr,Xlr,zlr,l4,Cbe,Qlr,Wlr,Dz,Hlr,Ulr,Jlr,i4,wbe,Ylr,Klr,Gz,Zlr,eir,oir,d4,Abe,rir,tir,Oz,air,nir,sir,c4,ybe,lir,iir,Vz,dir,cir,mir,m4,Lbe,fir,gir,Xz,hir,uir,pir,f4,xbe,_ir,bir,zz,Fir,vir,Tir,g4,$be,Mir,Eir,Qz,Cir,wir,Air,h4,QIe,Gd,u4,kbe,q8,yir,Sbe,Lir,WIe,Ko,N8,xir,Od,$ir,Wz,kir,Sir,Hz,Rir,Bir,Pir,j8,Iir,Rbe,qir,Nir,jir,At,D8,Dir,Bbe,Gir,Oir,Vd,Vir,Pbe,Xir,zir,Uz,Qir,Wir,Hir,p4,Uir,Ar,G8,Jir,Ibe,Yir,Kir,Za,Zir,qbe,edr,odr,Nbe,rdr,tdr,jbe,adr,ndr,sdr,se,_4,Dbe,ldr,idr,Jz,ddr,cdr,mdr,b4,Gbe,fdr,gdr,Yz,hdr,udr,pdr,F4,Obe,_dr,bdr,Kz,Fdr,vdr,Tdr,v4,Vbe,Mdr,Edr,Zz,Cdr,wdr,Adr,T4,Xbe,ydr,Ldr,eQ,xdr,$dr,kdr,M4,zbe,Sdr,Rdr,oQ,Bdr,Pdr,Idr,E4,Qbe,qdr,Ndr,rQ,jdr,Ddr,Gdr,C4,Wbe,Odr,Vdr,tQ,Xdr,zdr,Qdr,w4,Hbe,Wdr,Hdr,aQ,Udr,Jdr,Ydr,A4,Ube,Kdr,Zdr,nQ,ecr,ocr,rcr,y4,Jbe,tcr,acr,sQ,ncr,scr,lcr,L4,Ybe,icr,dcr,lQ,ccr,mcr,fcr,x4,Kbe,gcr,hcr,iQ,ucr,pcr,_cr,$4,Zbe,bcr,Fcr,dQ,vcr,Tcr,Mcr,k4,e2e,Ecr,Ccr,cQ,wcr,Acr,ycr,S4,o2e,Lcr,xcr,mQ,$cr,kcr,Scr,R4,r2e,Rcr,Bcr,fQ,Pcr,Icr,qcr,B4,t2e,Ncr,jcr,gQ,Dcr,Gcr,Ocr,P4,a2e,Vcr,Xcr,hQ,zcr,Qcr,Wcr,I4,n2e,Hcr,Ucr,uQ,Jcr,Ycr,Kcr,q4,s2e,Zcr,emr,pQ,omr,rmr,tmr,N4,l2e,amr,nmr,_Q,smr,lmr,imr,j4,i2e,dmr,cmr,bQ,mmr,fmr,gmr,D4,HIe,Xd,G4,d2e,O8,hmr,c2e,umr,UIe,Zo,V8,pmr,zd,_mr,FQ,bmr,Fmr,vQ,vmr,Tmr,Mmr,X8,Emr,m2e,Cmr,wmr,Amr,yt,z8,ymr,f2e,Lmr,xmr,Qd,$mr,g2e,kmr,Smr,TQ,Rmr,Bmr,Pmr,O4,Imr,yr,Q8,qmr,h2e,Nmr,jmr,en,Dmr,u2e,Gmr,Omr,p2e,Vmr,Xmr,_2e,zmr,Qmr,Wmr,Te,V4,b2e,Hmr,Umr,MQ,Jmr,Ymr,Kmr,X4,F2e,Zmr,efr,EQ,ofr,rfr,tfr,z4,v2e,afr,nfr,CQ,sfr,lfr,ifr,Q4,T2e,dfr,cfr,wQ,mfr,ffr,gfr,W4,M2e,hfr,ufr,AQ,pfr,_fr,bfr,H4,E2e,Ffr,vfr,yQ,Tfr,Mfr,Efr,U4,C2e,Cfr,wfr,LQ,Afr,yfr,Lfr,J4,w2e,xfr,$fr,xQ,kfr,Sfr,Rfr,Y4,A2e,Bfr,Pfr,$Q,Ifr,qfr,Nfr,K4,y2e,jfr,Dfr,kQ,Gfr,Ofr,Vfr,Z4,L2e,Xfr,zfr,SQ,Qfr,Wfr,Hfr,eE,x2e,Ufr,Jfr,RQ,Yfr,Kfr,Zfr,oE,JIe,Wd,rE,$2e,W8,egr,k2e,ogr,YIe,er,H8,rgr,Hd,tgr,BQ,agr,ngr,PQ,sgr,lgr,igr,U8,dgr,S2e,cgr,mgr,fgr,Lt,J8,ggr,R2e,hgr,ugr,Ud,pgr,B2e,_gr,bgr,IQ,Fgr,vgr,Tgr,tE,Mgr,Lr,Y8,Egr,P2e,Cgr,wgr,on,Agr,I2e,ygr,Lgr,q2e,xgr,$gr,N2e,kgr,Sgr,Rgr,rn,aE,j2e,Bgr,Pgr,qQ,Igr,qgr,Ngr,nE,D2e,jgr,Dgr,NQ,Ggr,Ogr,Vgr,sE,G2e,Xgr,zgr,jQ,Qgr,Wgr,Hgr,lE,O2e,Ugr,Jgr,DQ,Ygr,Kgr,Zgr,iE,KIe,Jd,dE,V2e,K8,ehr,X2e,ohr,ZIe,or,Z8,rhr,Yd,thr,GQ,ahr,nhr,OQ,shr,lhr,ihr,ex,dhr,z2e,chr,mhr,fhr,xt,ox,ghr,Q2e,hhr,uhr,Kd,phr,W2e,_hr,bhr,VQ,Fhr,vhr,Thr,cE,Mhr,xr,rx,Ehr,H2e,Chr,whr,tn,Ahr,U2e,yhr,Lhr,J2e,xhr,$hr,Y2e,khr,Shr,Rhr,ie,mE,K2e,Bhr,Phr,XQ,Ihr,qhr,Nhr,fE,Z2e,jhr,Dhr,zQ,Ghr,Ohr,Vhr,gE,eFe,Xhr,zhr,QQ,Qhr,Whr,Hhr,hE,oFe,Uhr,Jhr,WQ,Yhr,Khr,Zhr,uE,rFe,eur,our,HQ,rur,tur,aur,pE,tFe,nur,sur,UQ,lur,iur,dur,_E,aFe,cur,mur,JQ,fur,gur,hur,bE,nFe,uur,pur,YQ,_ur,bur,Fur,FE,sFe,vur,Tur,KQ,Mur,Eur,Cur,vE,lFe,wur,Aur,ZQ,yur,Lur,xur,TE,iFe,$ur,kur,eW,Sur,Rur,Bur,ME,dFe,Pur,Iur,oW,qur,Nur,jur,EE,cFe,Dur,Gur,rW,Our,Vur,Xur,CE,mFe,zur,Qur,tW,Wur,Hur,Uur,wE,fFe,Jur,Yur,aW,Kur,Zur,epr,AE,gFe,opr,rpr,nW,tpr,apr,npr,yE,hFe,spr,lpr,sW,ipr,dpr,cpr,LE,uFe,mpr,fpr,lW,gpr,hpr,upr,xE,pFe,ppr,_pr,iW,bpr,Fpr,vpr,$E,_Fe,Tpr,Mpr,dW,Epr,Cpr,wpr,kE,eqe,Zd,SE,bFe,tx,Apr,FFe,ypr,oqe,rr,ax,Lpr,ec,xpr,cW,$pr,kpr,mW,Spr,Rpr,Bpr,nx,Ppr,vFe,Ipr,qpr,Npr,$t,sx,jpr,TFe,Dpr,Gpr,oc,Opr,MFe,Vpr,Xpr,fW,zpr,Qpr,Wpr,RE,Hpr,$r,lx,Upr,EFe,Jpr,Ypr,an,Kpr,CFe,Zpr,e_r,wFe,o_r,r_r,AFe,t_r,a_r,n_r,ye,BE,yFe,s_r,l_r,gW,i_r,d_r,c_r,PE,LFe,m_r,f_r,hW,g_r,h_r,u_r,IE,xFe,p_r,__r,uW,b_r,F_r,v_r,qE,$Fe,T_r,M_r,pW,E_r,C_r,w_r,NE,kFe,A_r,y_r,_W,L_r,x_r,$_r,jE,SFe,k_r,S_r,bW,R_r,B_r,P_r,DE,RFe,I_r,q_r,FW,N_r,j_r,D_r,GE,BFe,G_r,O_r,vW,V_r,X_r,z_r,OE,PFe,Q_r,W_r,TW,H_r,U_r,J_r,VE,IFe,Y_r,K_r,MW,Z_r,ebr,obr,XE,rqe,rc,zE,qFe,ix,rbr,NFe,tbr,tqe,tr,dx,abr,tc,nbr,EW,sbr,lbr,CW,ibr,dbr,cbr,cx,mbr,jFe,fbr,gbr,hbr,kt,mx,ubr,DFe,pbr,_br,ac,bbr,GFe,Fbr,vbr,wW,Tbr,Mbr,Ebr,QE,Cbr,kr,fx,wbr,OFe,Abr,ybr,nn,Lbr,VFe,xbr,$br,XFe,kbr,Sbr,zFe,Rbr,Bbr,Pbr,Z,WE,QFe,Ibr,qbr,AW,Nbr,jbr,Dbr,HE,WFe,Gbr,Obr,yW,Vbr,Xbr,zbr,UE,HFe,Qbr,Wbr,LW,Hbr,Ubr,Jbr,JE,UFe,Ybr,Kbr,xW,Zbr,e2r,o2r,YE,JFe,r2r,t2r,$W,a2r,n2r,s2r,KE,YFe,l2r,i2r,kW,d2r,c2r,m2r,ZE,KFe,f2r,g2r,SW,h2r,u2r,p2r,e5,ZFe,_2r,b2r,RW,F2r,v2r,T2r,o5,eve,M2r,E2r,BW,C2r,w2r,A2r,r5,ove,y2r,L2r,PW,x2r,$2r,k2r,t5,rve,S2r,R2r,IW,B2r,P2r,I2r,a5,tve,q2r,N2r,qW,j2r,D2r,G2r,n5,ave,O2r,V2r,NW,X2r,z2r,Q2r,s5,nve,W2r,H2r,jW,U2r,J2r,Y2r,l5,sve,K2r,Z2r,DW,eFr,oFr,rFr,i5,lve,tFr,aFr,GW,nFr,sFr,lFr,d5,ive,iFr,dFr,OW,cFr,mFr,fFr,c5,dve,gFr,hFr,VW,uFr,pFr,_Fr,m5,cve,bFr,FFr,XW,vFr,TFr,MFr,f5,mve,EFr,CFr,zW,wFr,AFr,yFr,g5,fve,LFr,xFr,QW,$Fr,kFr,SFr,h5,gve,RFr,BFr,WW,PFr,IFr,qFr,u5,hve,NFr,jFr,HW,DFr,GFr,OFr,p5,uve,VFr,XFr,UW,zFr,QFr,WFr,_5,pve,HFr,UFr,JW,JFr,YFr,KFr,b5,_ve,ZFr,evr,YW,ovr,rvr,tvr,F5,aqe,nc,v5,bve,gx,avr,Fve,nvr,nqe,ar,hx,svr,sc,lvr,KW,ivr,dvr,ZW,cvr,mvr,fvr,ux,gvr,vve,hvr,uvr,pvr,St,px,_vr,Tve,bvr,Fvr,lc,vvr,Mve,Tvr,Mvr,eH,Evr,Cvr,wvr,T5,Avr,Sr,_x,yvr,Eve,Lvr,xvr,sn,$vr,Cve,kvr,Svr,wve,Rvr,Bvr,Ave,Pvr,Ivr,qvr,he,M5,yve,Nvr,jvr,oH,Dvr,Gvr,Ovr,E5,Lve,Vvr,Xvr,rH,zvr,Qvr,Wvr,C5,xve,Hvr,Uvr,tH,Jvr,Yvr,Kvr,w5,$ve,Zvr,e1r,aH,o1r,r1r,t1r,A5,kve,a1r,n1r,nH,s1r,l1r,i1r,y5,Sve,d1r,c1r,sH,m1r,f1r,g1r,L5,Rve,h1r,u1r,lH,p1r,_1r,b1r,x5,Bve,F1r,v1r,iH,T1r,M1r,E1r,$5,Pve,C1r,w1r,dH,A1r,y1r,L1r,k5,Ive,x1r,$1r,cH,k1r,S1r,R1r,S5,qve,B1r,P1r,mH,I1r,q1r,N1r,R5,Nve,j1r,D1r,fH,G1r,O1r,V1r,B5,jve,X1r,z1r,gH,Q1r,W1r,H1r,P5,Dve,U1r,J1r,hH,Y1r,K1r,Z1r,I5,Gve,eTr,oTr,uH,rTr,tTr,aTr,q5,Ove,nTr,sTr,pH,lTr,iTr,dTr,N5,Vve,cTr,mTr,_H,fTr,gTr,hTr,j5,sqe,ic,D5,Xve,bx,uTr,zve,pTr,lqe,nr,Fx,_Tr,dc,bTr,bH,FTr,vTr,FH,TTr,MTr,ETr,vx,CTr,Qve,wTr,ATr,yTr,Rt,Tx,LTr,Wve,xTr,$Tr,cc,kTr,Hve,STr,RTr,vH,BTr,PTr,ITr,G5,qTr,Rr,Mx,NTr,Uve,jTr,DTr,ln,GTr,Jve,OTr,VTr,Yve,XTr,zTr,Kve,QTr,WTr,HTr,Ex,O5,Zve,UTr,JTr,TH,YTr,KTr,ZTr,V5,e1e,eMr,oMr,MH,rMr,tMr,aMr,X5,iqe,mc,z5,o1e,Cx,nMr,r1e,sMr,dqe,sr,wx,lMr,fc,iMr,EH,dMr,cMr,CH,mMr,fMr,gMr,Ax,hMr,t1e,uMr,pMr,_Mr,Bt,yx,bMr,a1e,FMr,vMr,gc,TMr,n1e,MMr,EMr,wH,CMr,wMr,AMr,Q5,yMr,Br,Lx,LMr,s1e,xMr,$Mr,dn,kMr,l1e,SMr,RMr,i1e,BMr,PMr,d1e,IMr,qMr,NMr,c1e,W5,m1e,jMr,DMr,AH,GMr,OMr,VMr,H5,cqe,hc,U5,f1e,xx,XMr,g1e,zMr,mqe,lr,$x,QMr,uc,WMr,yH,HMr,UMr,LH,JMr,YMr,KMr,kx,ZMr,h1e,e4r,o4r,r4r,Pt,Sx,t4r,u1e,a4r,n4r,pc,s4r,p1e,l4r,i4r,xH,d4r,c4r,m4r,J5,f4r,Pr,Rx,g4r,_1e,h4r,u4r,cn,p4r,b1e,_4r,b4r,F1e,F4r,v4r,v1e,T4r,M4r,E4r,de,Y5,T1e,C4r,w4r,$H,A4r,y4r,L4r,K5,M1e,x4r,$4r,kH,k4r,S4r,R4r,Z5,E1e,B4r,P4r,SH,I4r,q4r,N4r,eC,C1e,j4r,D4r,RH,G4r,O4r,V4r,oC,w1e,X4r,z4r,BH,Q4r,W4r,H4r,rC,A1e,U4r,J4r,PH,Y4r,K4r,Z4r,tC,y1e,eEr,oEr,IH,rEr,tEr,aEr,aC,L1e,nEr,sEr,qH,lEr,iEr,dEr,nC,x1e,cEr,mEr,NH,fEr,gEr,hEr,sC,$1e,uEr,pEr,jH,_Er,bEr,FEr,lC,k1e,vEr,TEr,DH,MEr,EEr,CEr,iC,S1e,wEr,AEr,GH,yEr,LEr,xEr,dC,R1e,$Er,kEr,OH,SEr,REr,BEr,cC,B1e,PEr,IEr,VH,qEr,NEr,jEr,mC,P1e,DEr,GEr,XH,OEr,VEr,XEr,fC,I1e,zEr,QEr,zH,WEr,HEr,UEr,gC,q1e,JEr,YEr,QH,KEr,ZEr,e5r,hC,N1e,o5r,r5r,WH,t5r,a5r,n5r,uC,j1e,s5r,l5r,HH,i5r,d5r,c5r,pC,D1e,m5r,f5r,UH,g5r,h5r,u5r,_C,fqe,_c,bC,G1e,Bx,p5r,O1e,_5r,gqe,ir,Px,b5r,bc,F5r,JH,v5r,T5r,YH,M5r,E5r,C5r,Ix,w5r,V1e,A5r,y5r,L5r,It,qx,x5r,X1e,$5r,k5r,Fc,S5r,z1e,R5r,B5r,KH,P5r,I5r,q5r,FC,N5r,Ir,Nx,j5r,Q1e,D5r,G5r,mn,O5r,W1e,V5r,X5r,H1e,z5r,Q5r,U1e,W5r,H5r,U5r,ce,vC,J1e,J5r,Y5r,ZH,K5r,Z5r,eCr,TC,Y1e,oCr,rCr,eU,tCr,aCr,nCr,MC,K1e,sCr,lCr,oU,iCr,dCr,cCr,EC,Z1e,mCr,fCr,rU,gCr,hCr,uCr,CC,eTe,pCr,_Cr,tU,bCr,FCr,vCr,wC,oTe,TCr,MCr,aU,ECr,CCr,wCr,AC,rTe,ACr,yCr,nU,LCr,xCr,$Cr,yC,tTe,kCr,SCr,sU,RCr,BCr,PCr,LC,aTe,ICr,qCr,lU,NCr,jCr,DCr,xC,nTe,GCr,OCr,iU,VCr,XCr,zCr,$C,sTe,QCr,WCr,dU,HCr,UCr,JCr,kC,lTe,YCr,KCr,cU,ZCr,e3r,o3r,SC,iTe,r3r,t3r,mU,a3r,n3r,s3r,RC,dTe,l3r,i3r,fU,d3r,c3r,m3r,BC,cTe,f3r,g3r,gU,h3r,u3r,p3r,PC,mTe,_3r,b3r,hU,F3r,v3r,T3r,IC,fTe,M3r,E3r,uU,C3r,w3r,A3r,qC,gTe,y3r,L3r,pU,x3r,$3r,k3r,NC,hTe,S3r,R3r,_U,B3r,P3r,I3r,jC,uTe,q3r,N3r,bU,j3r,D3r,G3r,DC,hqe,vc,GC,pTe,jx,O3r,_Te,V3r,uqe,dr,Dx,X3r,Tc,z3r,FU,Q3r,W3r,vU,H3r,U3r,J3r,Gx,Y3r,bTe,K3r,Z3r,ewr,qt,Ox,owr,FTe,rwr,twr,Mc,awr,vTe,nwr,swr,TU,lwr,iwr,dwr,OC,cwr,qr,Vx,mwr,TTe,fwr,gwr,fn,hwr,MTe,uwr,pwr,ETe,_wr,bwr,CTe,Fwr,vwr,Twr,wTe,VC,ATe,Mwr,Ewr,MU,Cwr,wwr,Awr,XC,pqe,Ec,zC,yTe,Xx,ywr,LTe,Lwr,_qe,cr,zx,xwr,Cc,$wr,EU,kwr,Swr,CU,Rwr,Bwr,Pwr,Qx,Iwr,xTe,qwr,Nwr,jwr,Nt,Wx,Dwr,$Te,Gwr,Owr,wc,Vwr,kTe,Xwr,zwr,wU,Qwr,Wwr,Hwr,QC,Uwr,Nr,Hx,Jwr,STe,Ywr,Kwr,gn,Zwr,RTe,eAr,oAr,BTe,rAr,tAr,PTe,aAr,nAr,sAr,ITe,WC,qTe,lAr,iAr,AU,dAr,cAr,mAr,HC,bqe,Ac,UC,NTe,Ux,fAr,jTe,gAr,Fqe,mr,Jx,hAr,yc,uAr,yU,pAr,_Ar,LU,bAr,FAr,vAr,Yx,TAr,DTe,MAr,EAr,CAr,jt,Kx,wAr,GTe,AAr,yAr,Lc,LAr,OTe,xAr,$Ar,xU,kAr,SAr,RAr,JC,BAr,jr,Zx,PAr,VTe,IAr,qAr,hn,NAr,XTe,jAr,DAr,zTe,GAr,OAr,QTe,VAr,XAr,zAr,re,YC,WTe,QAr,WAr,$U,HAr,UAr,JAr,KC,HTe,YAr,KAr,kU,ZAr,e6r,o6r,ZC,UTe,r6r,t6r,SU,a6r,n6r,s6r,e3,JTe,l6r,i6r,RU,d6r,c6r,m6r,o3,YTe,f6r,g6r,BU,h6r,u6r,p6r,r3,KTe,_6r,b6r,PU,F6r,v6r,T6r,t3,ZTe,M6r,E6r,IU,C6r,w6r,A6r,a3,eMe,y6r,L6r,qU,x6r,$6r,k6r,n3,oMe,S6r,R6r,NU,B6r,P6r,I6r,s3,rMe,q6r,N6r,jU,j6r,D6r,G6r,l3,tMe,O6r,V6r,DU,X6r,z6r,Q6r,i3,aMe,W6r,H6r,GU,U6r,J6r,Y6r,d3,nMe,K6r,Z6r,OU,e0r,o0r,r0r,c3,sMe,t0r,a0r,VU,n0r,s0r,l0r,m3,lMe,i0r,d0r,XU,c0r,m0r,f0r,f3,iMe,g0r,h0r,zU,u0r,p0r,_0r,g3,dMe,b0r,F0r,QU,v0r,T0r,M0r,h3,cMe,E0r,C0r,WU,w0r,A0r,y0r,u3,mMe,L0r,x0r,HU,$0r,k0r,S0r,p3,fMe,R0r,B0r,UU,P0r,I0r,q0r,_3,gMe,N0r,j0r,JU,D0r,G0r,O0r,b3,hMe,V0r,X0r,YU,z0r,Q0r,W0r,F3,uMe,H0r,U0r,KU,J0r,Y0r,K0r,v3,pMe,Z0r,eyr,ZU,oyr,ryr,tyr,T3,_Me,ayr,nyr,eJ,syr,lyr,iyr,M3,vqe,xc,E3,bMe,e7,dyr,FMe,cyr,Tqe,fr,o7,myr,$c,fyr,oJ,gyr,hyr,rJ,uyr,pyr,_yr,r7,byr,vMe,Fyr,vyr,Tyr,Dt,t7,Myr,TMe,Eyr,Cyr,kc,wyr,MMe,Ayr,yyr,tJ,Lyr,xyr,$yr,C3,kyr,Dr,a7,Syr,EMe,Ryr,Byr,un,Pyr,CMe,Iyr,qyr,wMe,Nyr,jyr,AMe,Dyr,Gyr,Oyr,ke,w3,yMe,Vyr,Xyr,aJ,zyr,Qyr,Wyr,A3,LMe,Hyr,Uyr,nJ,Jyr,Yyr,Kyr,y3,xMe,Zyr,eLr,sJ,oLr,rLr,tLr,L3,$Me,aLr,nLr,lJ,sLr,lLr,iLr,x3,kMe,dLr,cLr,iJ,mLr,fLr,gLr,$3,SMe,hLr,uLr,dJ,pLr,_Lr,bLr,k3,RMe,FLr,vLr,cJ,TLr,MLr,ELr,S3,BMe,CLr,wLr,mJ,ALr,yLr,LLr,R3,PMe,xLr,$Lr,fJ,kLr,SLr,RLr,B3,Mqe,Sc,P3,IMe,n7,BLr,qMe,PLr,Eqe,gr,s7,ILr,Rc,qLr,gJ,NLr,jLr,hJ,DLr,GLr,OLr,l7,VLr,NMe,XLr,zLr,QLr,Gt,i7,WLr,jMe,HLr,ULr,Bc,JLr,DMe,YLr,KLr,uJ,ZLr,e8r,o8r,I3,r8r,Gr,d7,t8r,GMe,a8r,n8r,pn,s8r,OMe,l8r,i8r,VMe,d8r,c8r,XMe,m8r,f8r,g8r,Me,q3,zMe,h8r,u8r,pJ,p8r,_8r,b8r,N3,QMe,F8r,v8r,_J,T8r,M8r,E8r,j3,WMe,C8r,w8r,bJ,A8r,y8r,L8r,D3,HMe,x8r,$8r,FJ,k8r,S8r,R8r,G3,UMe,B8r,P8r,vJ,I8r,q8r,N8r,O3,JMe,j8r,D8r,TJ,G8r,O8r,V8r,V3,YMe,X8r,z8r,MJ,Q8r,W8r,H8r,X3,KMe,U8r,J8r,EJ,Y8r,K8r,Z8r,z3,ZMe,exr,oxr,CJ,rxr,txr,axr,Q3,e4e,nxr,sxr,wJ,lxr,ixr,dxr,W3,o4e,cxr,mxr,AJ,fxr,gxr,hxr,H3,r4e,uxr,pxr,yJ,_xr,bxr,Fxr,U3,Cqe,Pc,J3,t4e,c7,vxr,a4e,Txr,wqe,hr,m7,Mxr,Ic,Exr,LJ,Cxr,wxr,xJ,Axr,yxr,Lxr,f7,xxr,n4e,$xr,kxr,Sxr,Ot,g7,Rxr,s4e,Bxr,Pxr,qc,Ixr,l4e,qxr,Nxr,$J,jxr,Dxr,Gxr,Y3,Oxr,Or,h7,Vxr,i4e,Xxr,zxr,_n,Qxr,d4e,Wxr,Hxr,c4e,Uxr,Jxr,m4e,Yxr,Kxr,Zxr,Le,K3,f4e,e7r,o7r,kJ,r7r,t7r,a7r,Z3,g4e,n7r,s7r,SJ,l7r,i7r,d7r,ew,h4e,c7r,m7r,RJ,f7r,g7r,h7r,ow,u4e,u7r,p7r,BJ,_7r,b7r,F7r,rw,p4e,v7r,T7r,PJ,M7r,E7r,C7r,tw,_4e,w7r,A7r,IJ,y7r,L7r,x7r,aw,b4e,$7r,k7r,qJ,S7r,R7r,B7r,nw,F4e,P7r,I7r,NJ,q7r,N7r,j7r,sw,v4e,D7r,G7r,jJ,O7r,V7r,X7r,lw,T4e,z7r,Q7r,DJ,W7r,H7r,U7r,iw,Aqe,Nc,dw,M4e,u7,J7r,E4e,Y7r,yqe,ur,p7,K7r,jc,Z7r,GJ,e9r,o9r,OJ,r9r,t9r,a9r,_7,n9r,C4e,s9r,l9r,i9r,Vt,b7,d9r,w4e,c9r,m9r,Dc,f9r,A4e,g9r,h9r,VJ,u9r,p9r,_9r,cw,b9r,Vr,F7,F9r,y4e,v9r,T9r,bn,M9r,L4e,E9r,C9r,x4e,w9r,A9r,$4e,y9r,L9r,x9r,Se,mw,k4e,$9r,k9r,XJ,S9r,R9r,B9r,fw,S4e,P9r,I9r,zJ,q9r,N9r,j9r,gw,R4e,D9r,G9r,QJ,O9r,V9r,X9r,hw,B4e,z9r,Q9r,WJ,W9r,H9r,U9r,uw,P4e,J9r,Y9r,HJ,K9r,Z9r,e$r,pw,I4e,o$r,r$r,UJ,t$r,a$r,n$r,_w,q4e,s$r,l$r,JJ,i$r,d$r,c$r,bw,N4e,m$r,f$r,YJ,g$r,h$r,u$r,Fw,j4e,p$r,_$r,KJ,b$r,F$r,v$r,vw,Lqe,Gc,Tw,D4e,v7,T$r,G4e,M$r,xqe,pr,T7,E$r,Oc,C$r,ZJ,w$r,A$r,eY,y$r,L$r,x$r,M7,$$r,O4e,k$r,S$r,R$r,Xt,E7,B$r,V4e,P$r,I$r,Vc,q$r,X4e,N$r,j$r,oY,D$r,G$r,O$r,Mw,V$r,Xr,C7,X$r,z4e,z$r,Q$r,Fn,W$r,Q4e,H$r,U$r,W4e,J$r,Y$r,H4e,K$r,Z$r,ekr,xe,Ew,U4e,okr,rkr,rY,tkr,akr,nkr,Cw,J4e,skr,lkr,tY,ikr,dkr,ckr,ww,Y4e,mkr,fkr,aY,gkr,hkr,ukr,Aw,K4e,pkr,_kr,nY,bkr,Fkr,vkr,yw,Z4e,Tkr,Mkr,sY,Ekr,Ckr,wkr,Lw,eEe,Akr,ykr,lY,Lkr,xkr,$kr,xw,oEe,kkr,Skr,iY,Rkr,Bkr,Pkr,$w,rEe,Ikr,qkr,dY,Nkr,jkr,Dkr,kw,tEe,Gkr,Okr,cY,Vkr,Xkr,zkr,Sw,aEe,Qkr,Wkr,mY,Hkr,Ukr,Jkr,Rw,$qe,Xc,Bw,nEe,w7,Ykr,sEe,Kkr,kqe,_r,A7,Zkr,zc,eSr,fY,oSr,rSr,gY,tSr,aSr,nSr,y7,sSr,lEe,lSr,iSr,dSr,zt,L7,cSr,iEe,mSr,fSr,Qc,gSr,dEe,hSr,uSr,hY,pSr,_Sr,bSr,Pw,FSr,zr,x7,vSr,cEe,TSr,MSr,vn,ESr,mEe,CSr,wSr,fEe,ASr,ySr,gEe,LSr,xSr,$Sr,$e,Iw,hEe,kSr,SSr,uY,RSr,BSr,PSr,qw,uEe,ISr,qSr,pY,NSr,jSr,DSr,Nw,pEe,GSr,OSr,_Y,VSr,XSr,zSr,jw,_Ee,QSr,WSr,bY,HSr,USr,JSr,Dw,bEe,YSr,KSr,FY,ZSr,eRr,oRr,Gw,FEe,rRr,tRr,vY,aRr,nRr,sRr,Ow,vEe,lRr,iRr,TY,dRr,cRr,mRr,Vw,TEe,fRr,gRr,MY,hRr,uRr,pRr,Xw,MEe,_Rr,bRr,EY,FRr,vRr,TRr,zw,EEe,MRr,ERr,CY,CRr,wRr,ARr,Qw,Sqe,Wc,Ww,CEe,$7,yRr,wEe,LRr,Rqe,br,k7,xRr,Hc,$Rr,wY,kRr,SRr,AY,RRr,BRr,PRr,S7,IRr,AEe,qRr,NRr,jRr,Qt,R7,DRr,yEe,GRr,ORr,Uc,VRr,LEe,XRr,zRr,yY,QRr,WRr,HRr,Hw,URr,Qr,B7,JRr,xEe,YRr,KRr,Tn,ZRr,$Ee,eBr,oBr,kEe,rBr,tBr,SEe,aBr,nBr,sBr,De,Uw,REe,lBr,iBr,LY,dBr,cBr,mBr,Jw,BEe,fBr,gBr,xY,hBr,uBr,pBr,Yw,PEe,_Br,bBr,$Y,FBr,vBr,TBr,Kw,IEe,MBr,EBr,kY,CBr,wBr,ABr,Zw,qEe,yBr,LBr,SY,xBr,$Br,kBr,eA,NEe,SBr,RBr,RY,BBr,PBr,IBr,oA,jEe,qBr,NBr,BY,jBr,DBr,GBr,rA,DEe,OBr,VBr,PY,XBr,zBr,QBr,tA,Bqe,Jc,aA,GEe,P7,WBr,OEe,HBr,Pqe,Fr,I7,UBr,Yc,JBr,IY,YBr,KBr,qY,ZBr,ePr,oPr,q7,rPr,VEe,tPr,aPr,nPr,Wt,N7,sPr,XEe,lPr,iPr,Kc,dPr,zEe,cPr,mPr,NY,fPr,gPr,hPr,nA,uPr,Wr,j7,pPr,QEe,_Pr,bPr,Mn,FPr,WEe,vPr,TPr,HEe,MPr,EPr,UEe,CPr,wPr,APr,Ge,sA,JEe,yPr,LPr,jY,xPr,$Pr,kPr,lA,YEe,SPr,RPr,DY,BPr,PPr,IPr,iA,KEe,qPr,NPr,GY,jPr,DPr,GPr,dA,ZEe,OPr,VPr,OY,XPr,zPr,QPr,cA,e5e,WPr,HPr,VY,UPr,JPr,YPr,mA,o5e,KPr,ZPr,XY,eIr,oIr,rIr,fA,r5e,tIr,aIr,zY,nIr,sIr,lIr,gA,t5e,iIr,dIr,QY,cIr,mIr,fIr,hA,Iqe,Zc,uA,a5e,D7,gIr,n5e,hIr,qqe,vr,G7,uIr,em,pIr,WY,_Ir,bIr,HY,FIr,vIr,TIr,O7,MIr,s5e,EIr,CIr,wIr,Ht,V7,AIr,l5e,yIr,LIr,om,xIr,i5e,$Ir,kIr,UY,SIr,RIr,BIr,pA,PIr,Hr,X7,IIr,d5e,qIr,NIr,En,jIr,c5e,DIr,GIr,m5e,OIr,VIr,f5e,XIr,zIr,QIr,g5e,_A,h5e,WIr,HIr,JY,UIr,JIr,YIr,bA,Nqe,rm,FA,u5e,z7,KIr,p5e,ZIr,jqe,Tr,Q7,eqr,tm,oqr,YY,rqr,tqr,KY,aqr,nqr,sqr,W7,lqr,_5e,iqr,dqr,cqr,Ut,H7,mqr,b5e,fqr,gqr,am,hqr,F5e,uqr,pqr,ZY,_qr,bqr,Fqr,vA,vqr,Ur,U7,Tqr,v5e,Mqr,Eqr,Cn,Cqr,T5e,wqr,Aqr,M5e,yqr,Lqr,E5e,xqr,$qr,kqr,J7,TA,C5e,Sqr,Rqr,eK,Bqr,Pqr,Iqr,MA,w5e,qqr,Nqr,oK,jqr,Dqr,Gqr,EA,Dqe,nm,CA,A5e,Y7,Oqr,y5e,Vqr,Gqe,Mr,K7,Xqr,sm,zqr,rK,Qqr,Wqr,tK,Hqr,Uqr,Jqr,Z7,Yqr,L5e,Kqr,Zqr,eNr,Jt,e9,oNr,x5e,rNr,tNr,lm,aNr,$5e,nNr,sNr,aK,lNr,iNr,dNr,wA,cNr,Jr,o9,mNr,k5e,fNr,gNr,wn,hNr,S5e,uNr,pNr,R5e,_Nr,bNr,B5e,FNr,vNr,TNr,P5e,AA,I5e,MNr,ENr,nK,CNr,wNr,ANr,yA,Oqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Y0=new ee({}),K0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new yNr({props:{warning:!0,$$slots:{default:[oyt]},$$scope:{ctx:A}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L570"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L593"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L716"}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L387"}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L401"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),cy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L597"}}),my=new ee({}),fy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Mh=new yNr({props:{$$slots:{default:[ayt]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),py=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L86"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L100"}}),Gh=new yNr({props:{$$slots:{default:[syt]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),My=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L253"}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L719"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Pp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L726"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L741"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L748"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L755"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L764"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L791"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),hL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L773"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),FL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L780"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),m8=new ee({}),f8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L821"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:A}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L837"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:A}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:A}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:A}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:A}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:A}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:A}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:A}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:A}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:A}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:A}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:A}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:A}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:A}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:A}}}),bx=new ee({}),Fx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:A}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:A}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:A}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:A}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:A}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:A}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:A}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:A}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:A}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:A}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:A}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:A}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:A}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:A}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:A}}}),c7=new ee({}),m7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:A}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:A}}}),u7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:A}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:A}}}),v7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:A}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:A}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:A}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:A}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:A}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:A}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:A}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:A}}}),D7=new ee({}),G7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),V7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:A}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:A}}}),z7=new ee({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),H7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:A}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:A}}}),Y7=new ee({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:A}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mm=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),W0=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),mi=o("Instantiating one of "),yn=a("a"),H0=o("AutoConfig"),Ln=o(", "),xn=a("a"),U0=o("AutoModel"),fi=o(`, and
`),$n=a("a"),J0=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),gm=l(),v(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),hi=a("a"),u$=o("BertModel"),p$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),hm=a("code"),b$=o("AutoModel"),Jje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jPe=l(),ui=a("h2"),um=a("a"),KZ=a("span"),v(Y0.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("Extending the Auto Classes"),DPe=l(),kn=a("p"),Zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=a("code"),eDe=o("NewModel"),oDe=o(", make sure you have a "),oee=a("code"),rDe=o("NewModelConfig"),tDe=o(` then you can add those to the auto
classes like this:`),GPe=l(),v(K0.$$.fragment),OPe=l(),F$=a("p"),aDe=o("You will then be able to use the auto classes like you would usually do!"),VPe=l(),v(pm.$$.fragment),XPe=l(),pi=a("h2"),_m=a("a"),ree=a("span"),v(Z0.$$.fragment),nDe=l(),tee=a("span"),sDe=o("AutoConfig"),zPe=l(),Co=a("div"),v(ey.$$.fragment),lDe=l(),oy=a("p"),iDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=a("a"),dDe=o("from_pretrained()"),cDe=o(" class method."),mDe=l(),ry=a("p"),fDe=o("This class cannot be instantiated directly using "),aee=a("code"),gDe=o("__init__()"),hDe=o(" (throws an error)."),uDe=l(),Er=a("div"),v(ty.$$.fragment),pDe=l(),nee=a("p"),_De=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bDe=l(),_i=a("p"),FDe=o("The configuration class to instantiate is selected based on the "),see=a("code"),vDe=o("model_type"),TDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=a("code"),MDe=o("pretrained_model_name_or_path"),EDe=o(":"),CDe=l(),y=a("ul"),bm=a("li"),iee=a("strong"),wDe=o("albert"),ADe=o(" \u2014 "),T$=a("a"),yDe=o("AlbertConfig"),LDe=o(" (ALBERT model)"),xDe=l(),Fm=a("li"),dee=a("strong"),$De=o("bart"),kDe=o(" \u2014 "),M$=a("a"),SDe=o("BartConfig"),RDe=o(" (BART model)"),BDe=l(),vm=a("li"),cee=a("strong"),PDe=o("beit"),IDe=o(" \u2014 "),E$=a("a"),qDe=o("BeitConfig"),NDe=o(" (BEiT model)"),jDe=l(),Tm=a("li"),mee=a("strong"),DDe=o("bert"),GDe=o(" \u2014 "),C$=a("a"),ODe=o("BertConfig"),VDe=o(" (BERT model)"),XDe=l(),Mm=a("li"),fee=a("strong"),zDe=o("bert-generation"),QDe=o(" \u2014 "),w$=a("a"),WDe=o("BertGenerationConfig"),HDe=o(" (Bert Generation model)"),UDe=l(),Em=a("li"),gee=a("strong"),JDe=o("big_bird"),YDe=o(" \u2014 "),A$=a("a"),KDe=o("BigBirdConfig"),ZDe=o(" (BigBird model)"),eGe=l(),Cm=a("li"),hee=a("strong"),oGe=o("bigbird_pegasus"),rGe=o(" \u2014 "),y$=a("a"),tGe=o("BigBirdPegasusConfig"),aGe=o(" (BigBirdPegasus model)"),nGe=l(),wm=a("li"),uee=a("strong"),sGe=o("blenderbot"),lGe=o(" \u2014 "),L$=a("a"),iGe=o("BlenderbotConfig"),dGe=o(" (Blenderbot model)"),cGe=l(),Am=a("li"),pee=a("strong"),mGe=o("blenderbot-small"),fGe=o(" \u2014 "),x$=a("a"),gGe=o("BlenderbotSmallConfig"),hGe=o(" (BlenderbotSmall model)"),uGe=l(),ym=a("li"),_ee=a("strong"),pGe=o("camembert"),_Ge=o(" \u2014 "),$$=a("a"),bGe=o("CamembertConfig"),FGe=o(" (CamemBERT model)"),vGe=l(),Lm=a("li"),bee=a("strong"),TGe=o("canine"),MGe=o(" \u2014 "),k$=a("a"),EGe=o("CanineConfig"),CGe=o(" (Canine model)"),wGe=l(),xm=a("li"),Fee=a("strong"),AGe=o("clip"),yGe=o(" \u2014 "),S$=a("a"),LGe=o("CLIPConfig"),xGe=o(" (CLIP model)"),$Ge=l(),$m=a("li"),vee=a("strong"),kGe=o("convbert"),SGe=o(" \u2014 "),R$=a("a"),RGe=o("ConvBertConfig"),BGe=o(" (ConvBERT model)"),PGe=l(),km=a("li"),Tee=a("strong"),IGe=o("convnext"),qGe=o(" \u2014 "),B$=a("a"),NGe=o("ConvNextConfig"),jGe=o(" (ConvNext model)"),DGe=l(),Sm=a("li"),Mee=a("strong"),GGe=o("ctrl"),OGe=o(" \u2014 "),P$=a("a"),VGe=o("CTRLConfig"),XGe=o(" (CTRL model)"),zGe=l(),Rm=a("li"),Eee=a("strong"),QGe=o("data2vec-audio"),WGe=o(" \u2014 "),I$=a("a"),HGe=o("Data2VecAudioConfig"),UGe=o(" (Data2VecAudio model)"),JGe=l(),Bm=a("li"),Cee=a("strong"),YGe=o("data2vec-text"),KGe=o(" \u2014 "),q$=a("a"),ZGe=o("Data2VecTextConfig"),eOe=o(" (Data2VecText model)"),oOe=l(),Pm=a("li"),wee=a("strong"),rOe=o("data2vec-vision"),tOe=o(" \u2014 "),N$=a("a"),aOe=o("Data2VecVisionConfig"),nOe=o(" (Data2VecVision model)"),sOe=l(),Im=a("li"),Aee=a("strong"),lOe=o("deberta"),iOe=o(" \u2014 "),j$=a("a"),dOe=o("DebertaConfig"),cOe=o(" (DeBERTa model)"),mOe=l(),qm=a("li"),yee=a("strong"),fOe=o("deberta-v2"),gOe=o(" \u2014 "),D$=a("a"),hOe=o("DebertaV2Config"),uOe=o(" (DeBERTa-v2 model)"),pOe=l(),Nm=a("li"),Lee=a("strong"),_Oe=o("decision_transformer"),bOe=o(" \u2014 "),G$=a("a"),FOe=o("DecisionTransformerConfig"),vOe=o(" (Decision Transformer model)"),TOe=l(),jm=a("li"),xee=a("strong"),MOe=o("deit"),EOe=o(" \u2014 "),O$=a("a"),COe=o("DeiTConfig"),wOe=o(" (DeiT model)"),AOe=l(),Dm=a("li"),$ee=a("strong"),yOe=o("detr"),LOe=o(" \u2014 "),V$=a("a"),xOe=o("DetrConfig"),$Oe=o(" (DETR model)"),kOe=l(),Gm=a("li"),kee=a("strong"),SOe=o("distilbert"),ROe=o(" \u2014 "),X$=a("a"),BOe=o("DistilBertConfig"),POe=o(" (DistilBERT model)"),IOe=l(),Om=a("li"),See=a("strong"),qOe=o("dpr"),NOe=o(" \u2014 "),z$=a("a"),jOe=o("DPRConfig"),DOe=o(" (DPR model)"),GOe=l(),Vm=a("li"),Ree=a("strong"),OOe=o("dpt"),VOe=o(" \u2014 "),Q$=a("a"),XOe=o("DPTConfig"),zOe=o(" (DPT model)"),QOe=l(),Xm=a("li"),Bee=a("strong"),WOe=o("electra"),HOe=o(" \u2014 "),W$=a("a"),UOe=o("ElectraConfig"),JOe=o(" (ELECTRA model)"),YOe=l(),zm=a("li"),Pee=a("strong"),KOe=o("encoder-decoder"),ZOe=o(" \u2014 "),H$=a("a"),eVe=o("EncoderDecoderConfig"),oVe=o(" (Encoder decoder model)"),rVe=l(),Qm=a("li"),Iee=a("strong"),tVe=o("flaubert"),aVe=o(" \u2014 "),U$=a("a"),nVe=o("FlaubertConfig"),sVe=o(" (FlauBERT model)"),lVe=l(),Wm=a("li"),qee=a("strong"),iVe=o("flava"),dVe=o(" \u2014 "),J$=a("a"),cVe=o("FlavaConfig"),mVe=o(" (Flava model)"),fVe=l(),Hm=a("li"),Nee=a("strong"),gVe=o("fnet"),hVe=o(" \u2014 "),Y$=a("a"),uVe=o("FNetConfig"),pVe=o(" (FNet model)"),_Ve=l(),Um=a("li"),jee=a("strong"),bVe=o("fsmt"),FVe=o(" \u2014 "),K$=a("a"),vVe=o("FSMTConfig"),TVe=o(" (FairSeq Machine-Translation model)"),MVe=l(),Jm=a("li"),Dee=a("strong"),EVe=o("funnel"),CVe=o(" \u2014 "),Z$=a("a"),wVe=o("FunnelConfig"),AVe=o(" (Funnel Transformer model)"),yVe=l(),Ym=a("li"),Gee=a("strong"),LVe=o("glpn"),xVe=o(" \u2014 "),ek=a("a"),$Ve=o("GLPNConfig"),kVe=o(" (GLPN model)"),SVe=l(),Km=a("li"),Oee=a("strong"),RVe=o("gpt2"),BVe=o(" \u2014 "),ok=a("a"),PVe=o("GPT2Config"),IVe=o(" (OpenAI GPT-2 model)"),qVe=l(),Zm=a("li"),Vee=a("strong"),NVe=o("gpt_neo"),jVe=o(" \u2014 "),rk=a("a"),DVe=o("GPTNeoConfig"),GVe=o(" (GPT Neo model)"),OVe=l(),ef=a("li"),Xee=a("strong"),VVe=o("gptj"),XVe=o(" \u2014 "),tk=a("a"),zVe=o("GPTJConfig"),QVe=o(" (GPT-J model)"),WVe=l(),of=a("li"),zee=a("strong"),HVe=o("hubert"),UVe=o(" \u2014 "),ak=a("a"),JVe=o("HubertConfig"),YVe=o(" (Hubert model)"),KVe=l(),rf=a("li"),Qee=a("strong"),ZVe=o("ibert"),eXe=o(" \u2014 "),nk=a("a"),oXe=o("IBertConfig"),rXe=o(" (I-BERT model)"),tXe=l(),tf=a("li"),Wee=a("strong"),aXe=o("imagegpt"),nXe=o(" \u2014 "),sk=a("a"),sXe=o("ImageGPTConfig"),lXe=o(" (ImageGPT model)"),iXe=l(),af=a("li"),Hee=a("strong"),dXe=o("layoutlm"),cXe=o(" \u2014 "),lk=a("a"),mXe=o("LayoutLMConfig"),fXe=o(" (LayoutLM model)"),gXe=l(),nf=a("li"),Uee=a("strong"),hXe=o("layoutlmv2"),uXe=o(" \u2014 "),ik=a("a"),pXe=o("LayoutLMv2Config"),_Xe=o(" (LayoutLMv2 model)"),bXe=l(),sf=a("li"),Jee=a("strong"),FXe=o("led"),vXe=o(" \u2014 "),dk=a("a"),TXe=o("LEDConfig"),MXe=o(" (LED model)"),EXe=l(),lf=a("li"),Yee=a("strong"),CXe=o("longformer"),wXe=o(" \u2014 "),ck=a("a"),AXe=o("LongformerConfig"),yXe=o(" (Longformer model)"),LXe=l(),df=a("li"),Kee=a("strong"),xXe=o("luke"),$Xe=o(" \u2014 "),mk=a("a"),kXe=o("LukeConfig"),SXe=o(" (LUKE model)"),RXe=l(),cf=a("li"),Zee=a("strong"),BXe=o("lxmert"),PXe=o(" \u2014 "),fk=a("a"),IXe=o("LxmertConfig"),qXe=o(" (LXMERT model)"),NXe=l(),mf=a("li"),eoe=a("strong"),jXe=o("m2m_100"),DXe=o(" \u2014 "),gk=a("a"),GXe=o("M2M100Config"),OXe=o(" (M2M100 model)"),VXe=l(),ff=a("li"),ooe=a("strong"),XXe=o("marian"),zXe=o(" \u2014 "),hk=a("a"),QXe=o("MarianConfig"),WXe=o(" (Marian model)"),HXe=l(),gf=a("li"),roe=a("strong"),UXe=o("maskformer"),JXe=o(" \u2014 "),uk=a("a"),YXe=o("MaskFormerConfig"),KXe=o(" (MaskFormer model)"),ZXe=l(),hf=a("li"),toe=a("strong"),eze=o("mbart"),oze=o(" \u2014 "),pk=a("a"),rze=o("MBartConfig"),tze=o(" (mBART model)"),aze=l(),uf=a("li"),aoe=a("strong"),nze=o("megatron-bert"),sze=o(" \u2014 "),_k=a("a"),lze=o("MegatronBertConfig"),ize=o(" (MegatronBert model)"),dze=l(),pf=a("li"),noe=a("strong"),cze=o("mobilebert"),mze=o(" \u2014 "),bk=a("a"),fze=o("MobileBertConfig"),gze=o(" (MobileBERT model)"),hze=l(),_f=a("li"),soe=a("strong"),uze=o("mpnet"),pze=o(" \u2014 "),Fk=a("a"),_ze=o("MPNetConfig"),bze=o(" (MPNet model)"),Fze=l(),bf=a("li"),loe=a("strong"),vze=o("mt5"),Tze=o(" \u2014 "),vk=a("a"),Mze=o("MT5Config"),Eze=o(" (mT5 model)"),Cze=l(),Ff=a("li"),ioe=a("strong"),wze=o("nystromformer"),Aze=o(" \u2014 "),Tk=a("a"),yze=o("NystromformerConfig"),Lze=o(" (Nystromformer model)"),xze=l(),vf=a("li"),doe=a("strong"),$ze=o("openai-gpt"),kze=o(" \u2014 "),Mk=a("a"),Sze=o("OpenAIGPTConfig"),Rze=o(" (OpenAI GPT model)"),Bze=l(),Tf=a("li"),coe=a("strong"),Pze=o("opt"),Ize=o(" \u2014 "),Ek=a("a"),qze=o("OPTConfig"),Nze=o(" (OPT model)"),jze=l(),Mf=a("li"),moe=a("strong"),Dze=o("pegasus"),Gze=o(" \u2014 "),Ck=a("a"),Oze=o("PegasusConfig"),Vze=o(" (Pegasus model)"),Xze=l(),Ef=a("li"),foe=a("strong"),zze=o("perceiver"),Qze=o(" \u2014 "),wk=a("a"),Wze=o("PerceiverConfig"),Hze=o(" (Perceiver model)"),Uze=l(),Cf=a("li"),goe=a("strong"),Jze=o("plbart"),Yze=o(" \u2014 "),Ak=a("a"),Kze=o("PLBartConfig"),Zze=o(" (PLBart model)"),eQe=l(),wf=a("li"),hoe=a("strong"),oQe=o("poolformer"),rQe=o(" \u2014 "),yk=a("a"),tQe=o("PoolFormerConfig"),aQe=o(" (PoolFormer model)"),nQe=l(),Af=a("li"),uoe=a("strong"),sQe=o("prophetnet"),lQe=o(" \u2014 "),Lk=a("a"),iQe=o("ProphetNetConfig"),dQe=o(" (ProphetNet model)"),cQe=l(),yf=a("li"),poe=a("strong"),mQe=o("qdqbert"),fQe=o(" \u2014 "),xk=a("a"),gQe=o("QDQBertConfig"),hQe=o(" (QDQBert model)"),uQe=l(),Lf=a("li"),_oe=a("strong"),pQe=o("rag"),_Qe=o(" \u2014 "),$k=a("a"),bQe=o("RagConfig"),FQe=o(" (RAG model)"),vQe=l(),xf=a("li"),boe=a("strong"),TQe=o("realm"),MQe=o(" \u2014 "),kk=a("a"),EQe=o("RealmConfig"),CQe=o(" (Realm model)"),wQe=l(),$f=a("li"),Foe=a("strong"),AQe=o("reformer"),yQe=o(" \u2014 "),Sk=a("a"),LQe=o("ReformerConfig"),xQe=o(" (Reformer model)"),$Qe=l(),kf=a("li"),voe=a("strong"),kQe=o("regnet"),SQe=o(" \u2014 "),Rk=a("a"),RQe=o("RegNetConfig"),BQe=o(" (RegNet model)"),PQe=l(),Sf=a("li"),Toe=a("strong"),IQe=o("rembert"),qQe=o(" \u2014 "),Bk=a("a"),NQe=o("RemBertConfig"),jQe=o(" (RemBERT model)"),DQe=l(),Rf=a("li"),Moe=a("strong"),GQe=o("resnet"),OQe=o(" \u2014 "),Pk=a("a"),VQe=o("ResNetConfig"),XQe=o(" (ResNet model)"),zQe=l(),Bf=a("li"),Eoe=a("strong"),QQe=o("retribert"),WQe=o(" \u2014 "),Ik=a("a"),HQe=o("RetriBertConfig"),UQe=o(" (RetriBERT model)"),JQe=l(),Pf=a("li"),Coe=a("strong"),YQe=o("roberta"),KQe=o(" \u2014 "),qk=a("a"),ZQe=o("RobertaConfig"),eWe=o(" (RoBERTa model)"),oWe=l(),If=a("li"),woe=a("strong"),rWe=o("roformer"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("RoFormerConfig"),nWe=o(" (RoFormer model)"),sWe=l(),qf=a("li"),Aoe=a("strong"),lWe=o("segformer"),iWe=o(" \u2014 "),jk=a("a"),dWe=o("SegformerConfig"),cWe=o(" (SegFormer model)"),mWe=l(),Nf=a("li"),yoe=a("strong"),fWe=o("sew"),gWe=o(" \u2014 "),Dk=a("a"),hWe=o("SEWConfig"),uWe=o(" (SEW model)"),pWe=l(),jf=a("li"),Loe=a("strong"),_We=o("sew-d"),bWe=o(" \u2014 "),Gk=a("a"),FWe=o("SEWDConfig"),vWe=o(" (SEW-D model)"),TWe=l(),Df=a("li"),xoe=a("strong"),MWe=o("speech-encoder-decoder"),EWe=o(" \u2014 "),Ok=a("a"),CWe=o("SpeechEncoderDecoderConfig"),wWe=o(" (Speech Encoder decoder model)"),AWe=l(),Gf=a("li"),$oe=a("strong"),yWe=o("speech_to_text"),LWe=o(" \u2014 "),Vk=a("a"),xWe=o("Speech2TextConfig"),$We=o(" (Speech2Text model)"),kWe=l(),Of=a("li"),koe=a("strong"),SWe=o("speech_to_text_2"),RWe=o(" \u2014 "),Xk=a("a"),BWe=o("Speech2Text2Config"),PWe=o(" (Speech2Text2 model)"),IWe=l(),Vf=a("li"),Soe=a("strong"),qWe=o("splinter"),NWe=o(" \u2014 "),zk=a("a"),jWe=o("SplinterConfig"),DWe=o(" (Splinter model)"),GWe=l(),Xf=a("li"),Roe=a("strong"),OWe=o("squeezebert"),VWe=o(" \u2014 "),Qk=a("a"),XWe=o("SqueezeBertConfig"),zWe=o(" (SqueezeBERT model)"),QWe=l(),zf=a("li"),Boe=a("strong"),WWe=o("swin"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("SwinConfig"),JWe=o(" (Swin model)"),YWe=l(),Qf=a("li"),Poe=a("strong"),KWe=o("t5"),ZWe=o(" \u2014 "),Hk=a("a"),eHe=o("T5Config"),oHe=o(" (T5 model)"),rHe=l(),Wf=a("li"),Ioe=a("strong"),tHe=o("tapas"),aHe=o(" \u2014 "),Uk=a("a"),nHe=o("TapasConfig"),sHe=o(" (TAPAS model)"),lHe=l(),Hf=a("li"),qoe=a("strong"),iHe=o("transfo-xl"),dHe=o(" \u2014 "),Jk=a("a"),cHe=o("TransfoXLConfig"),mHe=o(" (Transformer-XL model)"),fHe=l(),Uf=a("li"),Noe=a("strong"),gHe=o("trocr"),hHe=o(" \u2014 "),Yk=a("a"),uHe=o("TrOCRConfig"),pHe=o(" (TrOCR model)"),_He=l(),Jf=a("li"),joe=a("strong"),bHe=o("unispeech"),FHe=o(" \u2014 "),Kk=a("a"),vHe=o("UniSpeechConfig"),THe=o(" (UniSpeech model)"),MHe=l(),Yf=a("li"),Doe=a("strong"),EHe=o("unispeech-sat"),CHe=o(" \u2014 "),Zk=a("a"),wHe=o("UniSpeechSatConfig"),AHe=o(" (UniSpeechSat model)"),yHe=l(),Kf=a("li"),Goe=a("strong"),LHe=o("van"),xHe=o(" \u2014 "),eS=a("a"),$He=o("VanConfig"),kHe=o(" (VAN model)"),SHe=l(),Zf=a("li"),Ooe=a("strong"),RHe=o("vilt"),BHe=o(" \u2014 "),oS=a("a"),PHe=o("ViltConfig"),IHe=o(" (ViLT model)"),qHe=l(),eg=a("li"),Voe=a("strong"),NHe=o("vision-encoder-decoder"),jHe=o(" \u2014 "),rS=a("a"),DHe=o("VisionEncoderDecoderConfig"),GHe=o(" (Vision Encoder decoder model)"),OHe=l(),og=a("li"),Xoe=a("strong"),VHe=o("vision-text-dual-encoder"),XHe=o(" \u2014 "),tS=a("a"),zHe=o("VisionTextDualEncoderConfig"),QHe=o(" (VisionTextDualEncoder model)"),WHe=l(),rg=a("li"),zoe=a("strong"),HHe=o("visual_bert"),UHe=o(" \u2014 "),aS=a("a"),JHe=o("VisualBertConfig"),YHe=o(" (VisualBert model)"),KHe=l(),tg=a("li"),Qoe=a("strong"),ZHe=o("vit"),eUe=o(" \u2014 "),nS=a("a"),oUe=o("ViTConfig"),rUe=o(" (ViT model)"),tUe=l(),ag=a("li"),Woe=a("strong"),aUe=o("vit_mae"),nUe=o(" \u2014 "),sS=a("a"),sUe=o("ViTMAEConfig"),lUe=o(" (ViTMAE model)"),iUe=l(),ng=a("li"),Hoe=a("strong"),dUe=o("wav2vec2"),cUe=o(" \u2014 "),lS=a("a"),mUe=o("Wav2Vec2Config"),fUe=o(" (Wav2Vec2 model)"),gUe=l(),sg=a("li"),Uoe=a("strong"),hUe=o("wavlm"),uUe=o(" \u2014 "),iS=a("a"),pUe=o("WavLMConfig"),_Ue=o(" (WavLM model)"),bUe=l(),lg=a("li"),Joe=a("strong"),FUe=o("xglm"),vUe=o(" \u2014 "),dS=a("a"),TUe=o("XGLMConfig"),MUe=o(" (XGLM model)"),EUe=l(),ig=a("li"),Yoe=a("strong"),CUe=o("xlm"),wUe=o(" \u2014 "),cS=a("a"),AUe=o("XLMConfig"),yUe=o(" (XLM model)"),LUe=l(),dg=a("li"),Koe=a("strong"),xUe=o("xlm-prophetnet"),$Ue=o(" \u2014 "),mS=a("a"),kUe=o("XLMProphetNetConfig"),SUe=o(" (XLMProphetNet model)"),RUe=l(),cg=a("li"),Zoe=a("strong"),BUe=o("xlm-roberta"),PUe=o(" \u2014 "),fS=a("a"),IUe=o("XLMRobertaConfig"),qUe=o(" (XLM-RoBERTa model)"),NUe=l(),mg=a("li"),ere=a("strong"),jUe=o("xlm-roberta-xl"),DUe=o(" \u2014 "),gS=a("a"),GUe=o("XLMRobertaXLConfig"),OUe=o(" (XLM-RoBERTa-XL model)"),VUe=l(),fg=a("li"),ore=a("strong"),XUe=o("xlnet"),zUe=o(" \u2014 "),hS=a("a"),QUe=o("XLNetConfig"),WUe=o(" (XLNet model)"),HUe=l(),gg=a("li"),rre=a("strong"),UUe=o("yolos"),JUe=o(" \u2014 "),uS=a("a"),YUe=o("YolosConfig"),KUe=o(" (YOLOS model)"),ZUe=l(),hg=a("li"),tre=a("strong"),eJe=o("yoso"),oJe=o(" \u2014 "),pS=a("a"),rJe=o("YosoConfig"),tJe=o(" (YOSO model)"),aJe=l(),v(ug.$$.fragment),nJe=l(),pg=a("div"),v(ay.$$.fragment),sJe=l(),are=a("p"),lJe=o("Register a new configuration for this class."),QPe=l(),bi=a("h2"),_g=a("a"),nre=a("span"),v(ny.$$.fragment),iJe=l(),sre=a("span"),dJe=o("AutoTokenizer"),WPe=l(),wo=a("div"),v(sy.$$.fragment),cJe=l(),ly=a("p"),mJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=a("a"),fJe=o("AutoTokenizer.from_pretrained()"),gJe=o(" class method."),hJe=l(),iy=a("p"),uJe=o("This class cannot be instantiated directly using "),lre=a("code"),pJe=o("__init__()"),_Je=o(" (throws an error)."),bJe=l(),Cr=a("div"),v(dy.$$.fragment),FJe=l(),ire=a("p"),vJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TJe=l(),Ca=a("p"),MJe=o("The tokenizer class to instantiate is selected based on the "),dre=a("code"),EJe=o("model_type"),CJe=o(` property of the config object (either
passed as an argument or loaded from `),cre=a("code"),wJe=o("pretrained_model_name_or_path"),AJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=a("code"),yJe=o("pretrained_model_name_or_path"),LJe=o(":"),xJe=l(),k=a("ul"),Sn=a("li"),fre=a("strong"),$Je=o("albert"),kJe=o(" \u2014 "),bS=a("a"),SJe=o("AlbertTokenizer"),RJe=o(" or "),FS=a("a"),BJe=o("AlbertTokenizerFast"),PJe=o(" (ALBERT model)"),IJe=l(),Rn=a("li"),gre=a("strong"),qJe=o("bart"),NJe=o(" \u2014 "),vS=a("a"),jJe=o("BartTokenizer"),DJe=o(" or "),TS=a("a"),GJe=o("BartTokenizerFast"),OJe=o(" (BART model)"),VJe=l(),Bn=a("li"),hre=a("strong"),XJe=o("barthez"),zJe=o(" \u2014 "),MS=a("a"),QJe=o("BarthezTokenizer"),WJe=o(" or "),ES=a("a"),HJe=o("BarthezTokenizerFast"),UJe=o(" (BARThez model)"),JJe=l(),bg=a("li"),ure=a("strong"),YJe=o("bartpho"),KJe=o(" \u2014 "),CS=a("a"),ZJe=o("BartphoTokenizer"),eYe=o(" (BARTpho model)"),oYe=l(),Pn=a("li"),pre=a("strong"),rYe=o("bert"),tYe=o(" \u2014 "),wS=a("a"),aYe=o("BertTokenizer"),nYe=o(" or "),AS=a("a"),sYe=o("BertTokenizerFast"),lYe=o(" (BERT model)"),iYe=l(),Fg=a("li"),_re=a("strong"),dYe=o("bert-generation"),cYe=o(" \u2014 "),yS=a("a"),mYe=o("BertGenerationTokenizer"),fYe=o(" (Bert Generation model)"),gYe=l(),vg=a("li"),bre=a("strong"),hYe=o("bert-japanese"),uYe=o(" \u2014 "),LS=a("a"),pYe=o("BertJapaneseTokenizer"),_Ye=o(" (BertJapanese model)"),bYe=l(),Tg=a("li"),Fre=a("strong"),FYe=o("bertweet"),vYe=o(" \u2014 "),xS=a("a"),TYe=o("BertweetTokenizer"),MYe=o(" (Bertweet model)"),EYe=l(),In=a("li"),vre=a("strong"),CYe=o("big_bird"),wYe=o(" \u2014 "),$S=a("a"),AYe=o("BigBirdTokenizer"),yYe=o(" or "),kS=a("a"),LYe=o("BigBirdTokenizerFast"),xYe=o(" (BigBird model)"),$Ye=l(),qn=a("li"),Tre=a("strong"),kYe=o("bigbird_pegasus"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("PegasusTokenizer"),BYe=o(" or "),RS=a("a"),PYe=o("PegasusTokenizerFast"),IYe=o(" (BigBirdPegasus model)"),qYe=l(),Nn=a("li"),Mre=a("strong"),NYe=o("blenderbot"),jYe=o(" \u2014 "),BS=a("a"),DYe=o("BlenderbotTokenizer"),GYe=o(" or "),PS=a("a"),OYe=o("BlenderbotTokenizerFast"),VYe=o(" (Blenderbot model)"),XYe=l(),Mg=a("li"),Ere=a("strong"),zYe=o("blenderbot-small"),QYe=o(" \u2014 "),IS=a("a"),WYe=o("BlenderbotSmallTokenizer"),HYe=o(" (BlenderbotSmall model)"),UYe=l(),Eg=a("li"),Cre=a("strong"),JYe=o("byt5"),YYe=o(" \u2014 "),qS=a("a"),KYe=o("ByT5Tokenizer"),ZYe=o(" (ByT5 model)"),eKe=l(),jn=a("li"),wre=a("strong"),oKe=o("camembert"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("CamembertTokenizer"),aKe=o(" or "),jS=a("a"),nKe=o("CamembertTokenizerFast"),sKe=o(" (CamemBERT model)"),lKe=l(),Cg=a("li"),Are=a("strong"),iKe=o("canine"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("CanineTokenizer"),mKe=o(" (Canine model)"),fKe=l(),Dn=a("li"),yre=a("strong"),gKe=o("clip"),hKe=o(" \u2014 "),GS=a("a"),uKe=o("CLIPTokenizer"),pKe=o(" or "),OS=a("a"),_Ke=o("CLIPTokenizerFast"),bKe=o(" (CLIP model)"),FKe=l(),Gn=a("li"),Lre=a("strong"),vKe=o("convbert"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("ConvBertTokenizer"),EKe=o(" or "),XS=a("a"),CKe=o("ConvBertTokenizerFast"),wKe=o(" (ConvBERT model)"),AKe=l(),On=a("li"),xre=a("strong"),yKe=o("cpm"),LKe=o(" \u2014 "),zS=a("a"),xKe=o("CpmTokenizer"),$Ke=o(" or "),QS=a("a"),kKe=o("CpmTokenizerFast"),SKe=o(" (CPM model)"),RKe=l(),wg=a("li"),$re=a("strong"),BKe=o("ctrl"),PKe=o(" \u2014 "),WS=a("a"),IKe=o("CTRLTokenizer"),qKe=o(" (CTRL model)"),NKe=l(),Vn=a("li"),kre=a("strong"),jKe=o("data2vec-text"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("RobertaTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("RobertaTokenizerFast"),XKe=o(" (Data2VecText model)"),zKe=l(),Xn=a("li"),Sre=a("strong"),QKe=o("deberta"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("DebertaTokenizer"),UKe=o(" or "),YS=a("a"),JKe=o("DebertaTokenizerFast"),YKe=o(" (DeBERTa model)"),KKe=l(),zn=a("li"),Rre=a("strong"),ZKe=o("deberta-v2"),eZe=o(" \u2014 "),KS=a("a"),oZe=o("DebertaV2Tokenizer"),rZe=o(" or "),ZS=a("a"),tZe=o("DebertaV2TokenizerFast"),aZe=o(" (DeBERTa-v2 model)"),nZe=l(),Qn=a("li"),Bre=a("strong"),sZe=o("distilbert"),lZe=o(" \u2014 "),eR=a("a"),iZe=o("DistilBertTokenizer"),dZe=o(" or "),oR=a("a"),cZe=o("DistilBertTokenizerFast"),mZe=o(" (DistilBERT model)"),fZe=l(),Wn=a("li"),Pre=a("strong"),gZe=o("dpr"),hZe=o(" \u2014 "),rR=a("a"),uZe=o("DPRQuestionEncoderTokenizer"),pZe=o(" or "),tR=a("a"),_Ze=o("DPRQuestionEncoderTokenizerFast"),bZe=o(" (DPR model)"),FZe=l(),Hn=a("li"),Ire=a("strong"),vZe=o("electra"),TZe=o(" \u2014 "),aR=a("a"),MZe=o("ElectraTokenizer"),EZe=o(" or "),nR=a("a"),CZe=o("ElectraTokenizerFast"),wZe=o(" (ELECTRA model)"),AZe=l(),Ag=a("li"),qre=a("strong"),yZe=o("flaubert"),LZe=o(" \u2014 "),sR=a("a"),xZe=o("FlaubertTokenizer"),$Ze=o(" (FlauBERT model)"),kZe=l(),Un=a("li"),Nre=a("strong"),SZe=o("fnet"),RZe=o(" \u2014 "),lR=a("a"),BZe=o("FNetTokenizer"),PZe=o(" or "),iR=a("a"),IZe=o("FNetTokenizerFast"),qZe=o(" (FNet model)"),NZe=l(),yg=a("li"),jre=a("strong"),jZe=o("fsmt"),DZe=o(" \u2014 "),dR=a("a"),GZe=o("FSMTTokenizer"),OZe=o(" (FairSeq Machine-Translation model)"),VZe=l(),Jn=a("li"),Dre=a("strong"),XZe=o("funnel"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("FunnelTokenizer"),WZe=o(" or "),mR=a("a"),HZe=o("FunnelTokenizerFast"),UZe=o(" (Funnel Transformer model)"),JZe=l(),Yn=a("li"),Gre=a("strong"),YZe=o("gpt2"),KZe=o(" \u2014 "),fR=a("a"),ZZe=o("GPT2Tokenizer"),eeo=o(" or "),gR=a("a"),oeo=o("GPT2TokenizerFast"),reo=o(" (OpenAI GPT-2 model)"),teo=l(),Kn=a("li"),Ore=a("strong"),aeo=o("gpt_neo"),neo=o(" \u2014 "),hR=a("a"),seo=o("GPT2Tokenizer"),leo=o(" or "),uR=a("a"),ieo=o("GPT2TokenizerFast"),deo=o(" (GPT Neo model)"),ceo=l(),Zn=a("li"),Vre=a("strong"),meo=o("gptj"),feo=o(" \u2014 "),pR=a("a"),geo=o("GPT2Tokenizer"),heo=o(" or "),_R=a("a"),ueo=o("GPT2TokenizerFast"),peo=o(" (GPT-J model)"),_eo=l(),es=a("li"),Xre=a("strong"),beo=o("herbert"),Feo=o(" \u2014 "),bR=a("a"),veo=o("HerbertTokenizer"),Teo=o(" or "),FR=a("a"),Meo=o("HerbertTokenizerFast"),Eeo=o(" (HerBERT model)"),Ceo=l(),Lg=a("li"),zre=a("strong"),weo=o("hubert"),Aeo=o(" \u2014 "),vR=a("a"),yeo=o("Wav2Vec2CTCTokenizer"),Leo=o(" (Hubert model)"),xeo=l(),os=a("li"),Qre=a("strong"),$eo=o("ibert"),keo=o(" \u2014 "),TR=a("a"),Seo=o("RobertaTokenizer"),Reo=o(" or "),MR=a("a"),Beo=o("RobertaTokenizerFast"),Peo=o(" (I-BERT model)"),Ieo=l(),rs=a("li"),Wre=a("strong"),qeo=o("layoutlm"),Neo=o(" \u2014 "),ER=a("a"),jeo=o("LayoutLMTokenizer"),Deo=o(" or "),CR=a("a"),Geo=o("LayoutLMTokenizerFast"),Oeo=o(" (LayoutLM model)"),Veo=l(),ts=a("li"),Hre=a("strong"),Xeo=o("layoutlmv2"),zeo=o(" \u2014 "),wR=a("a"),Qeo=o("LayoutLMv2Tokenizer"),Weo=o(" or "),AR=a("a"),Heo=o("LayoutLMv2TokenizerFast"),Ueo=o(" (LayoutLMv2 model)"),Jeo=l(),as=a("li"),Ure=a("strong"),Yeo=o("layoutxlm"),Keo=o(" \u2014 "),yR=a("a"),Zeo=o("LayoutXLMTokenizer"),eoo=o(" or "),LR=a("a"),ooo=o("LayoutXLMTokenizerFast"),roo=o(" (LayoutXLM model)"),too=l(),ns=a("li"),Jre=a("strong"),aoo=o("led"),noo=o(" \u2014 "),xR=a("a"),soo=o("LEDTokenizer"),loo=o(" or "),$R=a("a"),ioo=o("LEDTokenizerFast"),doo=o(" (LED model)"),coo=l(),ss=a("li"),Yre=a("strong"),moo=o("longformer"),foo=o(" \u2014 "),kR=a("a"),goo=o("LongformerTokenizer"),hoo=o(" or "),SR=a("a"),uoo=o("LongformerTokenizerFast"),poo=o(" (Longformer model)"),_oo=l(),xg=a("li"),Kre=a("strong"),boo=o("luke"),Foo=o(" \u2014 "),RR=a("a"),voo=o("LukeTokenizer"),Too=o(" (LUKE model)"),Moo=l(),ls=a("li"),Zre=a("strong"),Eoo=o("lxmert"),Coo=o(" \u2014 "),BR=a("a"),woo=o("LxmertTokenizer"),Aoo=o(" or "),PR=a("a"),yoo=o("LxmertTokenizerFast"),Loo=o(" (LXMERT model)"),xoo=l(),$g=a("li"),ete=a("strong"),$oo=o("m2m_100"),koo=o(" \u2014 "),IR=a("a"),Soo=o("M2M100Tokenizer"),Roo=o(" (M2M100 model)"),Boo=l(),kg=a("li"),ote=a("strong"),Poo=o("marian"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("MarianTokenizer"),Noo=o(" (Marian model)"),joo=l(),is=a("li"),rte=a("strong"),Doo=o("mbart"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("MBartTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("MBartTokenizerFast"),zoo=o(" (mBART model)"),Qoo=l(),ds=a("li"),tte=a("strong"),Woo=o("mbart50"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("MBart50Tokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("MBart50TokenizerFast"),Koo=o(" (mBART-50 model)"),Zoo=l(),cs=a("li"),ate=a("strong"),ero=o("megatron-bert"),oro=o(" \u2014 "),OR=a("a"),rro=o("BertTokenizer"),tro=o(" or "),VR=a("a"),aro=o("BertTokenizerFast"),nro=o(" (MegatronBert model)"),sro=l(),Sg=a("li"),nte=a("strong"),lro=o("mluke"),iro=o(" \u2014 "),XR=a("a"),dro=o("MLukeTokenizer"),cro=o(" (mLUKE model)"),mro=l(),ms=a("li"),ste=a("strong"),fro=o("mobilebert"),gro=o(" \u2014 "),zR=a("a"),hro=o("MobileBertTokenizer"),uro=o(" or "),QR=a("a"),pro=o("MobileBertTokenizerFast"),_ro=o(" (MobileBERT model)"),bro=l(),fs=a("li"),lte=a("strong"),Fro=o("mpnet"),vro=o(" \u2014 "),WR=a("a"),Tro=o("MPNetTokenizer"),Mro=o(" or "),HR=a("a"),Ero=o("MPNetTokenizerFast"),Cro=o(" (MPNet model)"),wro=l(),gs=a("li"),ite=a("strong"),Aro=o("mt5"),yro=o(" \u2014 "),UR=a("a"),Lro=o("MT5Tokenizer"),xro=o(" or "),JR=a("a"),$ro=o("MT5TokenizerFast"),kro=o(" (mT5 model)"),Sro=l(),hs=a("li"),dte=a("strong"),Rro=o("nystromformer"),Bro=o(" \u2014 "),YR=a("a"),Pro=o("AlbertTokenizer"),Iro=o(" or "),KR=a("a"),qro=o("AlbertTokenizerFast"),Nro=o(" (Nystromformer model)"),jro=l(),us=a("li"),cte=a("strong"),Dro=o("openai-gpt"),Gro=o(" \u2014 "),ZR=a("a"),Oro=o("OpenAIGPTTokenizer"),Vro=o(" or "),eB=a("a"),Xro=o("OpenAIGPTTokenizerFast"),zro=o(" (OpenAI GPT model)"),Qro=l(),Rg=a("li"),mte=a("strong"),Wro=o("opt"),Hro=o(" \u2014 "),oB=a("a"),Uro=o("GPT2Tokenizer"),Jro=o(" (OPT model)"),Yro=l(),ps=a("li"),fte=a("strong"),Kro=o("pegasus"),Zro=o(" \u2014 "),rB=a("a"),eto=o("PegasusTokenizer"),oto=o(" or "),tB=a("a"),rto=o("PegasusTokenizerFast"),tto=o(" (Pegasus model)"),ato=l(),Bg=a("li"),gte=a("strong"),nto=o("perceiver"),sto=o(" \u2014 "),aB=a("a"),lto=o("PerceiverTokenizer"),ito=o(" (Perceiver model)"),dto=l(),Pg=a("li"),hte=a("strong"),cto=o("phobert"),mto=o(" \u2014 "),nB=a("a"),fto=o("PhobertTokenizer"),gto=o(" (PhoBERT model)"),hto=l(),Ig=a("li"),ute=a("strong"),uto=o("plbart"),pto=o(" \u2014 "),sB=a("a"),_to=o("PLBartTokenizer"),bto=o(" (PLBart model)"),Fto=l(),qg=a("li"),pte=a("strong"),vto=o("prophetnet"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("ProphetNetTokenizer"),Eto=o(" (ProphetNet model)"),Cto=l(),_s=a("li"),_te=a("strong"),wto=o("qdqbert"),Ato=o(" \u2014 "),iB=a("a"),yto=o("BertTokenizer"),Lto=o(" or "),dB=a("a"),xto=o("BertTokenizerFast"),$to=o(" (QDQBert model)"),kto=l(),Ng=a("li"),bte=a("strong"),Sto=o("rag"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("RagTokenizer"),Pto=o(" (RAG model)"),Ito=l(),bs=a("li"),Fte=a("strong"),qto=o("realm"),Nto=o(" \u2014 "),mB=a("a"),jto=o("RealmTokenizer"),Dto=o(" or "),fB=a("a"),Gto=o("RealmTokenizerFast"),Oto=o(" (Realm model)"),Vto=l(),Fs=a("li"),vte=a("strong"),Xto=o("reformer"),zto=o(" \u2014 "),gB=a("a"),Qto=o("ReformerTokenizer"),Wto=o(" or "),hB=a("a"),Hto=o("ReformerTokenizerFast"),Uto=o(" (Reformer model)"),Jto=l(),vs=a("li"),Tte=a("strong"),Yto=o("rembert"),Kto=o(" \u2014 "),uB=a("a"),Zto=o("RemBertTokenizer"),eao=o(" or "),pB=a("a"),oao=o("RemBertTokenizerFast"),rao=o(" (RemBERT model)"),tao=l(),Ts=a("li"),Mte=a("strong"),aao=o("retribert"),nao=o(" \u2014 "),_B=a("a"),sao=o("RetriBertTokenizer"),lao=o(" or "),bB=a("a"),iao=o("RetriBertTokenizerFast"),dao=o(" (RetriBERT model)"),cao=l(),Ms=a("li"),Ete=a("strong"),mao=o("roberta"),fao=o(" \u2014 "),FB=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),vB=a("a"),uao=o("RobertaTokenizerFast"),pao=o(" (RoBERTa model)"),_ao=l(),Es=a("li"),Cte=a("strong"),bao=o("roformer"),Fao=o(" \u2014 "),TB=a("a"),vao=o("RoFormerTokenizer"),Tao=o(" or "),MB=a("a"),Mao=o("RoFormerTokenizerFast"),Eao=o(" (RoFormer model)"),Cao=l(),jg=a("li"),wte=a("strong"),wao=o("speech_to_text"),Aao=o(" \u2014 "),EB=a("a"),yao=o("Speech2TextTokenizer"),Lao=o(" (Speech2Text model)"),xao=l(),Dg=a("li"),Ate=a("strong"),$ao=o("speech_to_text_2"),kao=o(" \u2014 "),CB=a("a"),Sao=o("Speech2Text2Tokenizer"),Rao=o(" (Speech2Text2 model)"),Bao=l(),Cs=a("li"),yte=a("strong"),Pao=o("splinter"),Iao=o(" \u2014 "),wB=a("a"),qao=o("SplinterTokenizer"),Nao=o(" or "),AB=a("a"),jao=o("SplinterTokenizerFast"),Dao=o(" (Splinter model)"),Gao=l(),ws=a("li"),Lte=a("strong"),Oao=o("squeezebert"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("SqueezeBertTokenizer"),zao=o(" or "),LB=a("a"),Qao=o("SqueezeBertTokenizerFast"),Wao=o(" (SqueezeBERT model)"),Hao=l(),As=a("li"),xte=a("strong"),Uao=o("t5"),Jao=o(" \u2014 "),xB=a("a"),Yao=o("T5Tokenizer"),Kao=o(" or "),$B=a("a"),Zao=o("T5TokenizerFast"),eno=o(" (T5 model)"),ono=l(),Gg=a("li"),$te=a("strong"),rno=o("tapas"),tno=o(" \u2014 "),kB=a("a"),ano=o("TapasTokenizer"),nno=o(" (TAPAS model)"),sno=l(),Og=a("li"),kte=a("strong"),lno=o("tapex"),ino=o(" \u2014 "),SB=a("a"),dno=o("TapexTokenizer"),cno=o(" (TAPEX model)"),mno=l(),Vg=a("li"),Ste=a("strong"),fno=o("transfo-xl"),gno=o(" \u2014 "),RB=a("a"),hno=o("TransfoXLTokenizer"),uno=o(" (Transformer-XL model)"),pno=l(),ys=a("li"),Rte=a("strong"),_no=o("visual_bert"),bno=o(" \u2014 "),BB=a("a"),Fno=o("BertTokenizer"),vno=o(" or "),PB=a("a"),Tno=o("BertTokenizerFast"),Mno=o(" (VisualBert model)"),Eno=l(),Xg=a("li"),Bte=a("strong"),Cno=o("wav2vec2"),wno=o(" \u2014 "),IB=a("a"),Ano=o("Wav2Vec2CTCTokenizer"),yno=o(" (Wav2Vec2 model)"),Lno=l(),zg=a("li"),Pte=a("strong"),xno=o("wav2vec2_phoneme"),$no=o(" \u2014 "),qB=a("a"),kno=o("Wav2Vec2PhonemeCTCTokenizer"),Sno=o(" (Wav2Vec2Phoneme model)"),Rno=l(),Ls=a("li"),Ite=a("strong"),Bno=o("xglm"),Pno=o(" \u2014 "),NB=a("a"),Ino=o("XGLMTokenizer"),qno=o(" or "),jB=a("a"),Nno=o("XGLMTokenizerFast"),jno=o(" (XGLM model)"),Dno=l(),Qg=a("li"),qte=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),DB=a("a"),Vno=o("XLMTokenizer"),Xno=o(" (XLM model)"),zno=l(),Wg=a("li"),Nte=a("strong"),Qno=o("xlm-prophetnet"),Wno=o(" \u2014 "),GB=a("a"),Hno=o("XLMProphetNetTokenizer"),Uno=o(" (XLMProphetNet model)"),Jno=l(),xs=a("li"),jte=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("XLMRobertaTokenizer"),eso=o(" or "),VB=a("a"),oso=o("XLMRobertaTokenizerFast"),rso=o(" (XLM-RoBERTa model)"),tso=l(),$s=a("li"),Dte=a("strong"),aso=o("xlm-roberta-xl"),nso=o(" \u2014 "),XB=a("a"),sso=o("RobertaTokenizer"),lso=o(" or "),zB=a("a"),iso=o("RobertaTokenizerFast"),dso=o(" (XLM-RoBERTa-XL model)"),cso=l(),ks=a("li"),Gte=a("strong"),mso=o("xlnet"),fso=o(" \u2014 "),QB=a("a"),gso=o("XLNetTokenizer"),hso=o(" or "),WB=a("a"),uso=o("XLNetTokenizerFast"),pso=o(" (XLNet model)"),_so=l(),Ss=a("li"),Ote=a("strong"),bso=o("yoso"),Fso=o(" \u2014 "),HB=a("a"),vso=o("AlbertTokenizer"),Tso=o(" or "),UB=a("a"),Mso=o("AlbertTokenizerFast"),Eso=o(" (YOSO model)"),Cso=l(),v(Hg.$$.fragment),wso=l(),Ug=a("div"),v(cy.$$.fragment),Aso=l(),Vte=a("p"),yso=o("Register a new tokenizer in this mapping."),HPe=l(),Fi=a("h2"),Jg=a("a"),Xte=a("span"),v(my.$$.fragment),Lso=l(),zte=a("span"),xso=o("AutoFeatureExtractor"),UPe=l(),Ao=a("div"),v(fy.$$.fragment),$so=l(),gy=a("p"),kso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=a("a"),Sso=o("AutoFeatureExtractor.from_pretrained()"),Rso=o(" class method."),Bso=l(),hy=a("p"),Pso=o("This class cannot be instantiated directly using "),Qte=a("code"),Iso=o("__init__()"),qso=o(" (throws an error)."),Nso=l(),Qe=a("div"),v(uy.$$.fragment),jso=l(),Wte=a("p"),Dso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Gso=l(),wa=a("p"),Oso=o("The feature extractor class to instantiate is selected based on the "),Hte=a("code"),Vso=o("model_type"),Xso=o(` property of the config object
(either passed as an argument or loaded from `),Ute=a("code"),zso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=a("code"),Wso=o("pretrained_model_name_or_path"),Hso=o(":"),Uso=l(),oe=a("ul"),Yg=a("li"),Yte=a("strong"),Jso=o("beit"),Yso=o(" \u2014 "),YB=a("a"),Kso=o("BeitFeatureExtractor"),Zso=o(" (BEiT model)"),elo=l(),Kg=a("li"),Kte=a("strong"),olo=o("clip"),rlo=o(" \u2014 "),KB=a("a"),tlo=o("CLIPFeatureExtractor"),alo=o(" (CLIP model)"),nlo=l(),Zg=a("li"),Zte=a("strong"),slo=o("convnext"),llo=o(" \u2014 "),ZB=a("a"),ilo=o("ConvNextFeatureExtractor"),dlo=o(" (ConvNext model)"),clo=l(),eh=a("li"),eae=a("strong"),mlo=o("data2vec-audio"),flo=o(" \u2014 "),eP=a("a"),glo=o("Wav2Vec2FeatureExtractor"),hlo=o(" (Data2VecAudio model)"),ulo=l(),oh=a("li"),oae=a("strong"),plo=o("data2vec-vision"),_lo=o(" \u2014 "),oP=a("a"),blo=o("BeitFeatureExtractor"),Flo=o(" (Data2VecVision model)"),vlo=l(),rh=a("li"),rae=a("strong"),Tlo=o("deit"),Mlo=o(" \u2014 "),rP=a("a"),Elo=o("DeiTFeatureExtractor"),Clo=o(" (DeiT model)"),wlo=l(),th=a("li"),tae=a("strong"),Alo=o("detr"),ylo=o(" \u2014 "),tP=a("a"),Llo=o("DetrFeatureExtractor"),xlo=o(" (DETR model)"),$lo=l(),ah=a("li"),aae=a("strong"),klo=o("dpt"),Slo=o(" \u2014 "),aP=a("a"),Rlo=o("DPTFeatureExtractor"),Blo=o(" (DPT model)"),Plo=l(),nh=a("li"),nae=a("strong"),Ilo=o("flava"),qlo=o(" \u2014 "),nP=a("a"),Nlo=o("FlavaFeatureExtractor"),jlo=o(" (Flava model)"),Dlo=l(),sh=a("li"),sae=a("strong"),Glo=o("glpn"),Olo=o(" \u2014 "),sP=a("a"),Vlo=o("GLPNFeatureExtractor"),Xlo=o(" (GLPN model)"),zlo=l(),lh=a("li"),lae=a("strong"),Qlo=o("hubert"),Wlo=o(" \u2014 "),lP=a("a"),Hlo=o("Wav2Vec2FeatureExtractor"),Ulo=o(" (Hubert model)"),Jlo=l(),ih=a("li"),iae=a("strong"),Ylo=o("layoutlmv2"),Klo=o(" \u2014 "),iP=a("a"),Zlo=o("LayoutLMv2FeatureExtractor"),eio=o(" (LayoutLMv2 model)"),oio=l(),dh=a("li"),dae=a("strong"),rio=o("maskformer"),tio=o(" \u2014 "),dP=a("a"),aio=o("MaskFormerFeatureExtractor"),nio=o(" (MaskFormer model)"),sio=l(),ch=a("li"),cae=a("strong"),lio=o("perceiver"),iio=o(" \u2014 "),cP=a("a"),dio=o("PerceiverFeatureExtractor"),cio=o(" (Perceiver model)"),mio=l(),mh=a("li"),mae=a("strong"),fio=o("poolformer"),gio=o(" \u2014 "),mP=a("a"),hio=o("PoolFormerFeatureExtractor"),uio=o(" (PoolFormer model)"),pio=l(),fh=a("li"),fae=a("strong"),_io=o("regnet"),bio=o(" \u2014 "),fP=a("a"),Fio=o("ConvNextFeatureExtractor"),vio=o(" (RegNet model)"),Tio=l(),gh=a("li"),gae=a("strong"),Mio=o("resnet"),Eio=o(" \u2014 "),gP=a("a"),Cio=o("ConvNextFeatureExtractor"),wio=o(" (ResNet model)"),Aio=l(),hh=a("li"),hae=a("strong"),yio=o("segformer"),Lio=o(" \u2014 "),hP=a("a"),xio=o("SegformerFeatureExtractor"),$io=o(" (SegFormer model)"),kio=l(),uh=a("li"),uae=a("strong"),Sio=o("speech_to_text"),Rio=o(" \u2014 "),uP=a("a"),Bio=o("Speech2TextFeatureExtractor"),Pio=o(" (Speech2Text model)"),Iio=l(),ph=a("li"),pae=a("strong"),qio=o("swin"),Nio=o(" \u2014 "),pP=a("a"),jio=o("ViTFeatureExtractor"),Dio=o(" (Swin model)"),Gio=l(),_h=a("li"),_ae=a("strong"),Oio=o("van"),Vio=o(" \u2014 "),_P=a("a"),Xio=o("ConvNextFeatureExtractor"),zio=o(" (VAN model)"),Qio=l(),bh=a("li"),bae=a("strong"),Wio=o("vit"),Hio=o(" \u2014 "),bP=a("a"),Uio=o("ViTFeatureExtractor"),Jio=o(" (ViT model)"),Yio=l(),Fh=a("li"),Fae=a("strong"),Kio=o("vit_mae"),Zio=o(" \u2014 "),FP=a("a"),edo=o("ViTFeatureExtractor"),odo=o(" (ViTMAE model)"),rdo=l(),vh=a("li"),vae=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),vP=a("a"),ndo=o("Wav2Vec2FeatureExtractor"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),Th=a("li"),Tae=a("strong"),ido=o("yolos"),ddo=o(" \u2014 "),TP=a("a"),cdo=o("YolosFeatureExtractor"),mdo=o(" (YOLOS model)"),fdo=l(),v(Mh.$$.fragment),gdo=l(),v(Eh.$$.fragment),hdo=l(),Ch=a("div"),v(py.$$.fragment),udo=l(),Mae=a("p"),pdo=o("Register a new feature extractor for this class."),JPe=l(),vi=a("h2"),wh=a("a"),Eae=a("span"),v(_y.$$.fragment),_do=l(),Cae=a("span"),bdo=o("AutoProcessor"),YPe=l(),yo=a("div"),v(by.$$.fragment),Fdo=l(),Fy=a("p"),vdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=a("a"),Tdo=o("AutoProcessor.from_pretrained()"),Mdo=o(" class method."),Edo=l(),vy=a("p"),Cdo=o("This class cannot be instantiated directly using "),wae=a("code"),wdo=o("__init__()"),Ado=o(" (throws an error)."),ydo=l(),We=a("div"),v(Ty.$$.fragment),Ldo=l(),Aae=a("p"),xdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$do=l(),Ti=a("p"),kdo=o("The processor class to instantiate is selected based on the "),yae=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(" if possible):"),Ido=l(),_e=a("ul"),Ah=a("li"),xae=a("strong"),qdo=o("clip"),Ndo=o(" \u2014 "),EP=a("a"),jdo=o("CLIPProcessor"),Ddo=o(" (CLIP model)"),Gdo=l(),yh=a("li"),$ae=a("strong"),Odo=o("flava"),Vdo=o(" \u2014 "),kae=a("code"),Xdo=o("FLAVAProcessor"),zdo=o(" (Flava model)"),Qdo=l(),Lh=a("li"),Sae=a("strong"),Wdo=o("layoutlmv2"),Hdo=o(" \u2014 "),CP=a("a"),Udo=o("LayoutLMv2Processor"),Jdo=o(" (LayoutLMv2 model)"),Ydo=l(),xh=a("li"),Rae=a("strong"),Kdo=o("layoutxlm"),Zdo=o(" \u2014 "),wP=a("a"),eco=o("LayoutXLMProcessor"),oco=o(" (LayoutXLM model)"),rco=l(),$h=a("li"),Bae=a("strong"),tco=o("sew"),aco=o(" \u2014 "),AP=a("a"),nco=o("Wav2Vec2Processor"),sco=o(" (SEW model)"),lco=l(),kh=a("li"),Pae=a("strong"),ico=o("sew-d"),dco=o(" \u2014 "),yP=a("a"),cco=o("Wav2Vec2Processor"),mco=o(" (SEW-D model)"),fco=l(),Sh=a("li"),Iae=a("strong"),gco=o("speech_to_text"),hco=o(" \u2014 "),LP=a("a"),uco=o("Speech2TextProcessor"),pco=o(" (Speech2Text model)"),_co=l(),Rh=a("li"),qae=a("strong"),bco=o("speech_to_text_2"),Fco=o(" \u2014 "),xP=a("a"),vco=o("Speech2Text2Processor"),Tco=o(" (Speech2Text2 model)"),Mco=l(),Bh=a("li"),Nae=a("strong"),Eco=o("trocr"),Cco=o(" \u2014 "),$P=a("a"),wco=o("TrOCRProcessor"),Aco=o(" (TrOCR model)"),yco=l(),Ph=a("li"),jae=a("strong"),Lco=o("unispeech"),xco=o(" \u2014 "),kP=a("a"),$co=o("Wav2Vec2Processor"),kco=o(" (UniSpeech model)"),Sco=l(),Ih=a("li"),Dae=a("strong"),Rco=o("unispeech-sat"),Bco=o(" \u2014 "),SP=a("a"),Pco=o("Wav2Vec2Processor"),Ico=o(" (UniSpeechSat model)"),qco=l(),qh=a("li"),Gae=a("strong"),Nco=o("vilt"),jco=o(" \u2014 "),RP=a("a"),Dco=o("ViltProcessor"),Gco=o(" (ViLT model)"),Oco=l(),Nh=a("li"),Oae=a("strong"),Vco=o("vision-text-dual-encoder"),Xco=o(" \u2014 "),BP=a("a"),zco=o("VisionTextDualEncoderProcessor"),Qco=o(" (VisionTextDualEncoder model)"),Wco=l(),jh=a("li"),Vae=a("strong"),Hco=o("wav2vec2"),Uco=o(" \u2014 "),PP=a("a"),Jco=o("Wav2Vec2Processor"),Yco=o(" (Wav2Vec2 model)"),Kco=l(),Dh=a("li"),Xae=a("strong"),Zco=o("wavlm"),emo=o(" \u2014 "),IP=a("a"),omo=o("Wav2Vec2Processor"),rmo=o(" (WavLM model)"),tmo=l(),v(Gh.$$.fragment),amo=l(),v(Oh.$$.fragment),nmo=l(),Vh=a("div"),v(My.$$.fragment),smo=l(),zae=a("p"),lmo=o("Register a new processor for this class."),KPe=l(),Mi=a("h2"),Xh=a("a"),Qae=a("span"),v(Ey.$$.fragment),imo=l(),Wae=a("span"),dmo=o("AutoModel"),ZPe=l(),Lo=a("div"),v(Cy.$$.fragment),cmo=l(),Ei=a("p"),mmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=a("a"),fmo=o("from_pretrained()"),gmo=o(" class method or the "),NP=a("a"),hmo=o("from_config()"),umo=o(` class
method.`),pmo=l(),wy=a("p"),_mo=o("This class cannot be instantiated directly using "),Hae=a("code"),bmo=o("__init__()"),Fmo=o(" (throws an error)."),vmo=l(),ot=a("div"),v(Ay.$$.fragment),Tmo=l(),Uae=a("p"),Mmo=o("Instantiates one of the base model classes of the library from a configuration."),Emo=l(),Ci=a("p"),Cmo=o(`Note:
Loading a model from its configuration file does `),Jae=a("strong"),wmo=o("not"),Amo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=a("a"),ymo=o("from_pretrained()"),Lmo=o(" to load the model weights."),xmo=l(),v(zh.$$.fragment),$mo=l(),He=a("div"),v(yy.$$.fragment),kmo=l(),Yae=a("p"),Smo=o("Instantiate one of the base model classes of the library from a pretrained model."),Rmo=l(),Aa=a("p"),Bmo=o("The model class to instantiate is selected based on the "),Kae=a("code"),Pmo=o("model_type"),Imo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),qmo=o("pretrained_model_name_or_path"),Nmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),jmo=o("pretrained_model_name_or_path"),Dmo=o(":"),Gmo=l(),x=a("ul"),Qh=a("li"),one=a("strong"),Omo=o("albert"),Vmo=o(" \u2014 "),DP=a("a"),Xmo=o("AlbertModel"),zmo=o(" (ALBERT model)"),Qmo=l(),Wh=a("li"),rne=a("strong"),Wmo=o("bart"),Hmo=o(" \u2014 "),GP=a("a"),Umo=o("BartModel"),Jmo=o(" (BART model)"),Ymo=l(),Hh=a("li"),tne=a("strong"),Kmo=o("beit"),Zmo=o(" \u2014 "),OP=a("a"),efo=o("BeitModel"),ofo=o(" (BEiT model)"),rfo=l(),Uh=a("li"),ane=a("strong"),tfo=o("bert"),afo=o(" \u2014 "),VP=a("a"),nfo=o("BertModel"),sfo=o(" (BERT model)"),lfo=l(),Jh=a("li"),nne=a("strong"),ifo=o("bert-generation"),dfo=o(" \u2014 "),XP=a("a"),cfo=o("BertGenerationEncoder"),mfo=o(" (Bert Generation model)"),ffo=l(),Yh=a("li"),sne=a("strong"),gfo=o("big_bird"),hfo=o(" \u2014 "),zP=a("a"),ufo=o("BigBirdModel"),pfo=o(" (BigBird model)"),_fo=l(),Kh=a("li"),lne=a("strong"),bfo=o("bigbird_pegasus"),Ffo=o(" \u2014 "),QP=a("a"),vfo=o("BigBirdPegasusModel"),Tfo=o(" (BigBirdPegasus model)"),Mfo=l(),Zh=a("li"),ine=a("strong"),Efo=o("blenderbot"),Cfo=o(" \u2014 "),WP=a("a"),wfo=o("BlenderbotModel"),Afo=o(" (Blenderbot model)"),yfo=l(),eu=a("li"),dne=a("strong"),Lfo=o("blenderbot-small"),xfo=o(" \u2014 "),HP=a("a"),$fo=o("BlenderbotSmallModel"),kfo=o(" (BlenderbotSmall model)"),Sfo=l(),ou=a("li"),cne=a("strong"),Rfo=o("camembert"),Bfo=o(" \u2014 "),UP=a("a"),Pfo=o("CamembertModel"),Ifo=o(" (CamemBERT model)"),qfo=l(),ru=a("li"),mne=a("strong"),Nfo=o("canine"),jfo=o(" \u2014 "),JP=a("a"),Dfo=o("CanineModel"),Gfo=o(" (Canine model)"),Ofo=l(),tu=a("li"),fne=a("strong"),Vfo=o("clip"),Xfo=o(" \u2014 "),YP=a("a"),zfo=o("CLIPModel"),Qfo=o(" (CLIP model)"),Wfo=l(),au=a("li"),gne=a("strong"),Hfo=o("convbert"),Ufo=o(" \u2014 "),KP=a("a"),Jfo=o("ConvBertModel"),Yfo=o(" (ConvBERT model)"),Kfo=l(),nu=a("li"),hne=a("strong"),Zfo=o("convnext"),ego=o(" \u2014 "),ZP=a("a"),ogo=o("ConvNextModel"),rgo=o(" (ConvNext model)"),tgo=l(),su=a("li"),une=a("strong"),ago=o("ctrl"),ngo=o(" \u2014 "),eI=a("a"),sgo=o("CTRLModel"),lgo=o(" (CTRL model)"),igo=l(),lu=a("li"),pne=a("strong"),dgo=o("data2vec-audio"),cgo=o(" \u2014 "),oI=a("a"),mgo=o("Data2VecAudioModel"),fgo=o(" (Data2VecAudio model)"),ggo=l(),iu=a("li"),_ne=a("strong"),hgo=o("data2vec-text"),ugo=o(" \u2014 "),rI=a("a"),pgo=o("Data2VecTextModel"),_go=o(" (Data2VecText model)"),bgo=l(),du=a("li"),bne=a("strong"),Fgo=o("data2vec-vision"),vgo=o(" \u2014 "),tI=a("a"),Tgo=o("Data2VecVisionModel"),Mgo=o(" (Data2VecVision model)"),Ego=l(),cu=a("li"),Fne=a("strong"),Cgo=o("deberta"),wgo=o(" \u2014 "),aI=a("a"),Ago=o("DebertaModel"),ygo=o(" (DeBERTa model)"),Lgo=l(),mu=a("li"),vne=a("strong"),xgo=o("deberta-v2"),$go=o(" \u2014 "),nI=a("a"),kgo=o("DebertaV2Model"),Sgo=o(" (DeBERTa-v2 model)"),Rgo=l(),fu=a("li"),Tne=a("strong"),Bgo=o("decision_transformer"),Pgo=o(" \u2014 "),sI=a("a"),Igo=o("DecisionTransformerModel"),qgo=o(" (Decision Transformer model)"),Ngo=l(),gu=a("li"),Mne=a("strong"),jgo=o("deit"),Dgo=o(" \u2014 "),lI=a("a"),Ggo=o("DeiTModel"),Ogo=o(" (DeiT model)"),Vgo=l(),hu=a("li"),Ene=a("strong"),Xgo=o("detr"),zgo=o(" \u2014 "),iI=a("a"),Qgo=o("DetrModel"),Wgo=o(" (DETR model)"),Hgo=l(),uu=a("li"),Cne=a("strong"),Ugo=o("distilbert"),Jgo=o(" \u2014 "),dI=a("a"),Ygo=o("DistilBertModel"),Kgo=o(" (DistilBERT model)"),Zgo=l(),pu=a("li"),wne=a("strong"),eho=o("dpr"),oho=o(" \u2014 "),cI=a("a"),rho=o("DPRQuestionEncoder"),tho=o(" (DPR model)"),aho=l(),_u=a("li"),Ane=a("strong"),nho=o("dpt"),sho=o(" \u2014 "),mI=a("a"),lho=o("DPTModel"),iho=o(" (DPT model)"),dho=l(),bu=a("li"),yne=a("strong"),cho=o("electra"),mho=o(" \u2014 "),fI=a("a"),fho=o("ElectraModel"),gho=o(" (ELECTRA model)"),hho=l(),Fu=a("li"),Lne=a("strong"),uho=o("flaubert"),pho=o(" \u2014 "),gI=a("a"),_ho=o("FlaubertModel"),bho=o(" (FlauBERT model)"),Fho=l(),vu=a("li"),xne=a("strong"),vho=o("flava"),Tho=o(" \u2014 "),hI=a("a"),Mho=o("FlavaModel"),Eho=o(" (Flava model)"),Cho=l(),Tu=a("li"),$ne=a("strong"),who=o("fnet"),Aho=o(" \u2014 "),uI=a("a"),yho=o("FNetModel"),Lho=o(" (FNet model)"),xho=l(),Mu=a("li"),kne=a("strong"),$ho=o("fsmt"),kho=o(" \u2014 "),pI=a("a"),Sho=o("FSMTModel"),Rho=o(" (FairSeq Machine-Translation model)"),Bho=l(),Rs=a("li"),Sne=a("strong"),Pho=o("funnel"),Iho=o(" \u2014 "),_I=a("a"),qho=o("FunnelModel"),Nho=o(" or "),bI=a("a"),jho=o("FunnelBaseModel"),Dho=o(" (Funnel Transformer model)"),Gho=l(),Eu=a("li"),Rne=a("strong"),Oho=o("glpn"),Vho=o(" \u2014 "),FI=a("a"),Xho=o("GLPNModel"),zho=o(" (GLPN model)"),Qho=l(),Cu=a("li"),Bne=a("strong"),Who=o("gpt2"),Hho=o(" \u2014 "),vI=a("a"),Uho=o("GPT2Model"),Jho=o(" (OpenAI GPT-2 model)"),Yho=l(),wu=a("li"),Pne=a("strong"),Kho=o("gpt_neo"),Zho=o(" \u2014 "),TI=a("a"),euo=o("GPTNeoModel"),ouo=o(" (GPT Neo model)"),ruo=l(),Au=a("li"),Ine=a("strong"),tuo=o("gptj"),auo=o(" \u2014 "),MI=a("a"),nuo=o("GPTJModel"),suo=o(" (GPT-J model)"),luo=l(),yu=a("li"),qne=a("strong"),iuo=o("hubert"),duo=o(" \u2014 "),EI=a("a"),cuo=o("HubertModel"),muo=o(" (Hubert model)"),fuo=l(),Lu=a("li"),Nne=a("strong"),guo=o("ibert"),huo=o(" \u2014 "),CI=a("a"),uuo=o("IBertModel"),puo=o(" (I-BERT model)"),_uo=l(),xu=a("li"),jne=a("strong"),buo=o("imagegpt"),Fuo=o(" \u2014 "),wI=a("a"),vuo=o("ImageGPTModel"),Tuo=o(" (ImageGPT model)"),Muo=l(),$u=a("li"),Dne=a("strong"),Euo=o("layoutlm"),Cuo=o(" \u2014 "),AI=a("a"),wuo=o("LayoutLMModel"),Auo=o(" (LayoutLM model)"),yuo=l(),ku=a("li"),Gne=a("strong"),Luo=o("layoutlmv2"),xuo=o(" \u2014 "),yI=a("a"),$uo=o("LayoutLMv2Model"),kuo=o(" (LayoutLMv2 model)"),Suo=l(),Su=a("li"),One=a("strong"),Ruo=o("led"),Buo=o(" \u2014 "),LI=a("a"),Puo=o("LEDModel"),Iuo=o(" (LED model)"),quo=l(),Ru=a("li"),Vne=a("strong"),Nuo=o("longformer"),juo=o(" \u2014 "),xI=a("a"),Duo=o("LongformerModel"),Guo=o(" (Longformer model)"),Ouo=l(),Bu=a("li"),Xne=a("strong"),Vuo=o("luke"),Xuo=o(" \u2014 "),$I=a("a"),zuo=o("LukeModel"),Quo=o(" (LUKE model)"),Wuo=l(),Pu=a("li"),zne=a("strong"),Huo=o("lxmert"),Uuo=o(" \u2014 "),kI=a("a"),Juo=o("LxmertModel"),Yuo=o(" (LXMERT model)"),Kuo=l(),Iu=a("li"),Qne=a("strong"),Zuo=o("m2m_100"),epo=o(" \u2014 "),SI=a("a"),opo=o("M2M100Model"),rpo=o(" (M2M100 model)"),tpo=l(),qu=a("li"),Wne=a("strong"),apo=o("marian"),npo=o(" \u2014 "),RI=a("a"),spo=o("MarianModel"),lpo=o(" (Marian model)"),ipo=l(),Nu=a("li"),Hne=a("strong"),dpo=o("maskformer"),cpo=o(" \u2014 "),BI=a("a"),mpo=o("MaskFormerModel"),fpo=o(" (MaskFormer model)"),gpo=l(),ju=a("li"),Une=a("strong"),hpo=o("mbart"),upo=o(" \u2014 "),PI=a("a"),ppo=o("MBartModel"),_po=o(" (mBART model)"),bpo=l(),Du=a("li"),Jne=a("strong"),Fpo=o("megatron-bert"),vpo=o(" \u2014 "),II=a("a"),Tpo=o("MegatronBertModel"),Mpo=o(" (MegatronBert model)"),Epo=l(),Gu=a("li"),Yne=a("strong"),Cpo=o("mobilebert"),wpo=o(" \u2014 "),qI=a("a"),Apo=o("MobileBertModel"),ypo=o(" (MobileBERT model)"),Lpo=l(),Ou=a("li"),Kne=a("strong"),xpo=o("mpnet"),$po=o(" \u2014 "),NI=a("a"),kpo=o("MPNetModel"),Spo=o(" (MPNet model)"),Rpo=l(),Vu=a("li"),Zne=a("strong"),Bpo=o("mt5"),Ppo=o(" \u2014 "),jI=a("a"),Ipo=o("MT5Model"),qpo=o(" (mT5 model)"),Npo=l(),Xu=a("li"),ese=a("strong"),jpo=o("nystromformer"),Dpo=o(" \u2014 "),DI=a("a"),Gpo=o("NystromformerModel"),Opo=o(" (Nystromformer model)"),Vpo=l(),zu=a("li"),ose=a("strong"),Xpo=o("openai-gpt"),zpo=o(" \u2014 "),GI=a("a"),Qpo=o("OpenAIGPTModel"),Wpo=o(" (OpenAI GPT model)"),Hpo=l(),Qu=a("li"),rse=a("strong"),Upo=o("opt"),Jpo=o(" \u2014 "),OI=a("a"),Ypo=o("OPTModel"),Kpo=o(" (OPT model)"),Zpo=l(),Wu=a("li"),tse=a("strong"),e_o=o("pegasus"),o_o=o(" \u2014 "),VI=a("a"),r_o=o("PegasusModel"),t_o=o(" (Pegasus model)"),a_o=l(),Hu=a("li"),ase=a("strong"),n_o=o("perceiver"),s_o=o(" \u2014 "),XI=a("a"),l_o=o("PerceiverModel"),i_o=o(" (Perceiver model)"),d_o=l(),Uu=a("li"),nse=a("strong"),c_o=o("plbart"),m_o=o(" \u2014 "),zI=a("a"),f_o=o("PLBartModel"),g_o=o(" (PLBart model)"),h_o=l(),Ju=a("li"),sse=a("strong"),u_o=o("poolformer"),p_o=o(" \u2014 "),QI=a("a"),__o=o("PoolFormerModel"),b_o=o(" (PoolFormer model)"),F_o=l(),Yu=a("li"),lse=a("strong"),v_o=o("prophetnet"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("ProphetNetModel"),E_o=o(" (ProphetNet model)"),C_o=l(),Ku=a("li"),ise=a("strong"),w_o=o("qdqbert"),A_o=o(" \u2014 "),HI=a("a"),y_o=o("QDQBertModel"),L_o=o(" (QDQBert model)"),x_o=l(),Zu=a("li"),dse=a("strong"),$_o=o("reformer"),k_o=o(" \u2014 "),UI=a("a"),S_o=o("ReformerModel"),R_o=o(" (Reformer model)"),B_o=l(),ep=a("li"),cse=a("strong"),P_o=o("regnet"),I_o=o(" \u2014 "),JI=a("a"),q_o=o("RegNetModel"),N_o=o(" (RegNet model)"),j_o=l(),op=a("li"),mse=a("strong"),D_o=o("rembert"),G_o=o(" \u2014 "),YI=a("a"),O_o=o("RemBertModel"),V_o=o(" (RemBERT model)"),X_o=l(),rp=a("li"),fse=a("strong"),z_o=o("resnet"),Q_o=o(" \u2014 "),KI=a("a"),W_o=o("ResNetModel"),H_o=o(" (ResNet model)"),U_o=l(),tp=a("li"),gse=a("strong"),J_o=o("retribert"),Y_o=o(" \u2014 "),ZI=a("a"),K_o=o("RetriBertModel"),Z_o=o(" (RetriBERT model)"),ebo=l(),ap=a("li"),hse=a("strong"),obo=o("roberta"),rbo=o(" \u2014 "),eq=a("a"),tbo=o("RobertaModel"),abo=o(" (RoBERTa model)"),nbo=l(),np=a("li"),use=a("strong"),sbo=o("roformer"),lbo=o(" \u2014 "),oq=a("a"),ibo=o("RoFormerModel"),dbo=o(" (RoFormer model)"),cbo=l(),sp=a("li"),pse=a("strong"),mbo=o("segformer"),fbo=o(" \u2014 "),rq=a("a"),gbo=o("SegformerModel"),hbo=o(" (SegFormer model)"),ubo=l(),lp=a("li"),_se=a("strong"),pbo=o("sew"),_bo=o(" \u2014 "),tq=a("a"),bbo=o("SEWModel"),Fbo=o(" (SEW model)"),vbo=l(),ip=a("li"),bse=a("strong"),Tbo=o("sew-d"),Mbo=o(" \u2014 "),aq=a("a"),Ebo=o("SEWDModel"),Cbo=o(" (SEW-D model)"),wbo=l(),dp=a("li"),Fse=a("strong"),Abo=o("speech_to_text"),ybo=o(" \u2014 "),nq=a("a"),Lbo=o("Speech2TextModel"),xbo=o(" (Speech2Text model)"),$bo=l(),cp=a("li"),vse=a("strong"),kbo=o("splinter"),Sbo=o(" \u2014 "),sq=a("a"),Rbo=o("SplinterModel"),Bbo=o(" (Splinter model)"),Pbo=l(),mp=a("li"),Tse=a("strong"),Ibo=o("squeezebert"),qbo=o(" \u2014 "),lq=a("a"),Nbo=o("SqueezeBertModel"),jbo=o(" (SqueezeBERT model)"),Dbo=l(),fp=a("li"),Mse=a("strong"),Gbo=o("swin"),Obo=o(" \u2014 "),iq=a("a"),Vbo=o("SwinModel"),Xbo=o(" (Swin model)"),zbo=l(),gp=a("li"),Ese=a("strong"),Qbo=o("t5"),Wbo=o(" \u2014 "),dq=a("a"),Hbo=o("T5Model"),Ubo=o(" (T5 model)"),Jbo=l(),hp=a("li"),Cse=a("strong"),Ybo=o("tapas"),Kbo=o(" \u2014 "),cq=a("a"),Zbo=o("TapasModel"),e2o=o(" (TAPAS model)"),o2o=l(),up=a("li"),wse=a("strong"),r2o=o("transfo-xl"),t2o=o(" \u2014 "),mq=a("a"),a2o=o("TransfoXLModel"),n2o=o(" (Transformer-XL model)"),s2o=l(),pp=a("li"),Ase=a("strong"),l2o=o("unispeech"),i2o=o(" \u2014 "),fq=a("a"),d2o=o("UniSpeechModel"),c2o=o(" (UniSpeech model)"),m2o=l(),_p=a("li"),yse=a("strong"),f2o=o("unispeech-sat"),g2o=o(" \u2014 "),gq=a("a"),h2o=o("UniSpeechSatModel"),u2o=o(" (UniSpeechSat model)"),p2o=l(),bp=a("li"),Lse=a("strong"),_2o=o("van"),b2o=o(" \u2014 "),hq=a("a"),F2o=o("VanModel"),v2o=o(" (VAN model)"),T2o=l(),Fp=a("li"),xse=a("strong"),M2o=o("vilt"),E2o=o(" \u2014 "),uq=a("a"),C2o=o("ViltModel"),w2o=o(" (ViLT model)"),A2o=l(),vp=a("li"),$se=a("strong"),y2o=o("vision-text-dual-encoder"),L2o=o(" \u2014 "),pq=a("a"),x2o=o("VisionTextDualEncoderModel"),$2o=o(" (VisionTextDualEncoder model)"),k2o=l(),Tp=a("li"),kse=a("strong"),S2o=o("visual_bert"),R2o=o(" \u2014 "),_q=a("a"),B2o=o("VisualBertModel"),P2o=o(" (VisualBert model)"),I2o=l(),Mp=a("li"),Sse=a("strong"),q2o=o("vit"),N2o=o(" \u2014 "),bq=a("a"),j2o=o("ViTModel"),D2o=o(" (ViT model)"),G2o=l(),Ep=a("li"),Rse=a("strong"),O2o=o("vit_mae"),V2o=o(" \u2014 "),Fq=a("a"),X2o=o("ViTMAEModel"),z2o=o(" (ViTMAE model)"),Q2o=l(),Cp=a("li"),Bse=a("strong"),W2o=o("wav2vec2"),H2o=o(" \u2014 "),vq=a("a"),U2o=o("Wav2Vec2Model"),J2o=o(" (Wav2Vec2 model)"),Y2o=l(),wp=a("li"),Pse=a("strong"),K2o=o("wavlm"),Z2o=o(" \u2014 "),Tq=a("a"),eFo=o("WavLMModel"),oFo=o(" (WavLM model)"),rFo=l(),Ap=a("li"),Ise=a("strong"),tFo=o("xglm"),aFo=o(" \u2014 "),Mq=a("a"),nFo=o("XGLMModel"),sFo=o(" (XGLM model)"),lFo=l(),yp=a("li"),qse=a("strong"),iFo=o("xlm"),dFo=o(" \u2014 "),Eq=a("a"),cFo=o("XLMModel"),mFo=o(" (XLM model)"),fFo=l(),Lp=a("li"),Nse=a("strong"),gFo=o("xlm-prophetnet"),hFo=o(" \u2014 "),Cq=a("a"),uFo=o("XLMProphetNetModel"),pFo=o(" (XLMProphetNet model)"),_Fo=l(),xp=a("li"),jse=a("strong"),bFo=o("xlm-roberta"),FFo=o(" \u2014 "),wq=a("a"),vFo=o("XLMRobertaModel"),TFo=o(" (XLM-RoBERTa model)"),MFo=l(),$p=a("li"),Dse=a("strong"),EFo=o("xlm-roberta-xl"),CFo=o(" \u2014 "),Aq=a("a"),wFo=o("XLMRobertaXLModel"),AFo=o(" (XLM-RoBERTa-XL model)"),yFo=l(),kp=a("li"),Gse=a("strong"),LFo=o("xlnet"),xFo=o(" \u2014 "),yq=a("a"),$Fo=o("XLNetModel"),kFo=o(" (XLNet model)"),SFo=l(),Sp=a("li"),Ose=a("strong"),RFo=o("yolos"),BFo=o(" \u2014 "),Lq=a("a"),PFo=o("YolosModel"),IFo=o(" (YOLOS model)"),qFo=l(),Rp=a("li"),Vse=a("strong"),NFo=o("yoso"),jFo=o(" \u2014 "),xq=a("a"),DFo=o("YosoModel"),GFo=o(" (YOSO model)"),OFo=l(),Bp=a("p"),VFo=o("The model is set in evaluation mode by default using "),Xse=a("code"),XFo=o("model.eval()"),zFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=a("code"),QFo=o("model.train()"),WFo=l(),v(Pp.$$.fragment),eIe=l(),wi=a("h2"),Ip=a("a"),Qse=a("span"),v(Ly.$$.fragment),HFo=l(),Wse=a("span"),UFo=o("AutoModelForPreTraining"),oIe=l(),xo=a("div"),v(xy.$$.fragment),JFo=l(),Ai=a("p"),YFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=a("a"),KFo=o("from_pretrained()"),ZFo=o(" class method or the "),kq=a("a"),evo=o("from_config()"),ovo=o(` class
method.`),rvo=l(),$y=a("p"),tvo=o("This class cannot be instantiated directly using "),Hse=a("code"),avo=o("__init__()"),nvo=o(" (throws an error)."),svo=l(),rt=a("div"),v(ky.$$.fragment),lvo=l(),Use=a("p"),ivo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dvo=l(),yi=a("p"),cvo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),mvo=o("not"),fvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=a("a"),gvo=o("from_pretrained()"),hvo=o(" to load the model weights."),uvo=l(),v(qp.$$.fragment),pvo=l(),Ue=a("div"),v(Sy.$$.fragment),_vo=l(),Yse=a("p"),bvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fvo=l(),ya=a("p"),vvo=o("The model class to instantiate is selected based on the "),Kse=a("code"),Tvo=o("model_type"),Mvo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),Evo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(":"),yvo=l(),G=a("ul"),Np=a("li"),ole=a("strong"),Lvo=o("albert"),xvo=o(" \u2014 "),Rq=a("a"),$vo=o("AlbertForPreTraining"),kvo=o(" (ALBERT model)"),Svo=l(),jp=a("li"),rle=a("strong"),Rvo=o("bart"),Bvo=o(" \u2014 "),Bq=a("a"),Pvo=o("BartForConditionalGeneration"),Ivo=o(" (BART model)"),qvo=l(),Dp=a("li"),tle=a("strong"),Nvo=o("bert"),jvo=o(" \u2014 "),Pq=a("a"),Dvo=o("BertForPreTraining"),Gvo=o(" (BERT model)"),Ovo=l(),Gp=a("li"),ale=a("strong"),Vvo=o("big_bird"),Xvo=o(" \u2014 "),Iq=a("a"),zvo=o("BigBirdForPreTraining"),Qvo=o(" (BigBird model)"),Wvo=l(),Op=a("li"),nle=a("strong"),Hvo=o("camembert"),Uvo=o(" \u2014 "),qq=a("a"),Jvo=o("CamembertForMaskedLM"),Yvo=o(" (CamemBERT model)"),Kvo=l(),Vp=a("li"),sle=a("strong"),Zvo=o("ctrl"),e1o=o(" \u2014 "),Nq=a("a"),o1o=o("CTRLLMHeadModel"),r1o=o(" (CTRL model)"),t1o=l(),Xp=a("li"),lle=a("strong"),a1o=o("data2vec-text"),n1o=o(" \u2014 "),jq=a("a"),s1o=o("Data2VecTextForMaskedLM"),l1o=o(" (Data2VecText model)"),i1o=l(),zp=a("li"),ile=a("strong"),d1o=o("deberta"),c1o=o(" \u2014 "),Dq=a("a"),m1o=o("DebertaForMaskedLM"),f1o=o(" (DeBERTa model)"),g1o=l(),Qp=a("li"),dle=a("strong"),h1o=o("deberta-v2"),u1o=o(" \u2014 "),Gq=a("a"),p1o=o("DebertaV2ForMaskedLM"),_1o=o(" (DeBERTa-v2 model)"),b1o=l(),Wp=a("li"),cle=a("strong"),F1o=o("distilbert"),v1o=o(" \u2014 "),Oq=a("a"),T1o=o("DistilBertForMaskedLM"),M1o=o(" (DistilBERT model)"),E1o=l(),Hp=a("li"),mle=a("strong"),C1o=o("electra"),w1o=o(" \u2014 "),Vq=a("a"),A1o=o("ElectraForPreTraining"),y1o=o(" (ELECTRA model)"),L1o=l(),Up=a("li"),fle=a("strong"),x1o=o("flaubert"),$1o=o(" \u2014 "),Xq=a("a"),k1o=o("FlaubertWithLMHeadModel"),S1o=o(" (FlauBERT model)"),R1o=l(),Jp=a("li"),gle=a("strong"),B1o=o("flava"),P1o=o(" \u2014 "),zq=a("a"),I1o=o("FlavaForPreTraining"),q1o=o(" (Flava model)"),N1o=l(),Yp=a("li"),hle=a("strong"),j1o=o("fnet"),D1o=o(" \u2014 "),Qq=a("a"),G1o=o("FNetForPreTraining"),O1o=o(" (FNet model)"),V1o=l(),Kp=a("li"),ule=a("strong"),X1o=o("fsmt"),z1o=o(" \u2014 "),Wq=a("a"),Q1o=o("FSMTForConditionalGeneration"),W1o=o(" (FairSeq Machine-Translation model)"),H1o=l(),Zp=a("li"),ple=a("strong"),U1o=o("funnel"),J1o=o(" \u2014 "),Hq=a("a"),Y1o=o("FunnelForPreTraining"),K1o=o(" (Funnel Transformer model)"),Z1o=l(),e_=a("li"),_le=a("strong"),eTo=o("gpt2"),oTo=o(" \u2014 "),Uq=a("a"),rTo=o("GPT2LMHeadModel"),tTo=o(" (OpenAI GPT-2 model)"),aTo=l(),o_=a("li"),ble=a("strong"),nTo=o("ibert"),sTo=o(" \u2014 "),Jq=a("a"),lTo=o("IBertForMaskedLM"),iTo=o(" (I-BERT model)"),dTo=l(),r_=a("li"),Fle=a("strong"),cTo=o("layoutlm"),mTo=o(" \u2014 "),Yq=a("a"),fTo=o("LayoutLMForMaskedLM"),gTo=o(" (LayoutLM model)"),hTo=l(),t_=a("li"),vle=a("strong"),uTo=o("longformer"),pTo=o(" \u2014 "),Kq=a("a"),_To=o("LongformerForMaskedLM"),bTo=o(" (Longformer model)"),FTo=l(),a_=a("li"),Tle=a("strong"),vTo=o("lxmert"),TTo=o(" \u2014 "),Zq=a("a"),MTo=o("LxmertForPreTraining"),ETo=o(" (LXMERT model)"),CTo=l(),n_=a("li"),Mle=a("strong"),wTo=o("megatron-bert"),ATo=o(" \u2014 "),eN=a("a"),yTo=o("MegatronBertForPreTraining"),LTo=o(" (MegatronBert model)"),xTo=l(),s_=a("li"),Ele=a("strong"),$To=o("mobilebert"),kTo=o(" \u2014 "),oN=a("a"),STo=o("MobileBertForPreTraining"),RTo=o(" (MobileBERT model)"),BTo=l(),l_=a("li"),Cle=a("strong"),PTo=o("mpnet"),ITo=o(" \u2014 "),rN=a("a"),qTo=o("MPNetForMaskedLM"),NTo=o(" (MPNet model)"),jTo=l(),i_=a("li"),wle=a("strong"),DTo=o("openai-gpt"),GTo=o(" \u2014 "),tN=a("a"),OTo=o("OpenAIGPTLMHeadModel"),VTo=o(" (OpenAI GPT model)"),XTo=l(),d_=a("li"),Ale=a("strong"),zTo=o("retribert"),QTo=o(" \u2014 "),aN=a("a"),WTo=o("RetriBertModel"),HTo=o(" (RetriBERT model)"),UTo=l(),c_=a("li"),yle=a("strong"),JTo=o("roberta"),YTo=o(" \u2014 "),nN=a("a"),KTo=o("RobertaForMaskedLM"),ZTo=o(" (RoBERTa model)"),eMo=l(),m_=a("li"),Lle=a("strong"),oMo=o("squeezebert"),rMo=o(" \u2014 "),sN=a("a"),tMo=o("SqueezeBertForMaskedLM"),aMo=o(" (SqueezeBERT model)"),nMo=l(),f_=a("li"),xle=a("strong"),sMo=o("t5"),lMo=o(" \u2014 "),lN=a("a"),iMo=o("T5ForConditionalGeneration"),dMo=o(" (T5 model)"),cMo=l(),g_=a("li"),$le=a("strong"),mMo=o("tapas"),fMo=o(" \u2014 "),iN=a("a"),gMo=o("TapasForMaskedLM"),hMo=o(" (TAPAS model)"),uMo=l(),h_=a("li"),kle=a("strong"),pMo=o("transfo-xl"),_Mo=o(" \u2014 "),dN=a("a"),bMo=o("TransfoXLLMHeadModel"),FMo=o(" (Transformer-XL model)"),vMo=l(),u_=a("li"),Sle=a("strong"),TMo=o("unispeech"),MMo=o(" \u2014 "),cN=a("a"),EMo=o("UniSpeechForPreTraining"),CMo=o(" (UniSpeech model)"),wMo=l(),p_=a("li"),Rle=a("strong"),AMo=o("unispeech-sat"),yMo=o(" \u2014 "),mN=a("a"),LMo=o("UniSpeechSatForPreTraining"),xMo=o(" (UniSpeechSat model)"),$Mo=l(),__=a("li"),Ble=a("strong"),kMo=o("visual_bert"),SMo=o(" \u2014 "),fN=a("a"),RMo=o("VisualBertForPreTraining"),BMo=o(" (VisualBert model)"),PMo=l(),b_=a("li"),Ple=a("strong"),IMo=o("vit_mae"),qMo=o(" \u2014 "),gN=a("a"),NMo=o("ViTMAEForPreTraining"),jMo=o(" (ViTMAE model)"),DMo=l(),F_=a("li"),Ile=a("strong"),GMo=o("wav2vec2"),OMo=o(" \u2014 "),hN=a("a"),VMo=o("Wav2Vec2ForPreTraining"),XMo=o(" (Wav2Vec2 model)"),zMo=l(),v_=a("li"),qle=a("strong"),QMo=o("xlm"),WMo=o(" \u2014 "),uN=a("a"),HMo=o("XLMWithLMHeadModel"),UMo=o(" (XLM model)"),JMo=l(),T_=a("li"),Nle=a("strong"),YMo=o("xlm-roberta"),KMo=o(" \u2014 "),pN=a("a"),ZMo=o("XLMRobertaForMaskedLM"),e4o=o(" (XLM-RoBERTa model)"),o4o=l(),M_=a("li"),jle=a("strong"),r4o=o("xlm-roberta-xl"),t4o=o(" \u2014 "),_N=a("a"),a4o=o("XLMRobertaXLForMaskedLM"),n4o=o(" (XLM-RoBERTa-XL model)"),s4o=l(),E_=a("li"),Dle=a("strong"),l4o=o("xlnet"),i4o=o(" \u2014 "),bN=a("a"),d4o=o("XLNetLMHeadModel"),c4o=o(" (XLNet model)"),m4o=l(),C_=a("p"),f4o=o("The model is set in evaluation mode by default using "),Gle=a("code"),g4o=o("model.eval()"),h4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),u4o=o("model.train()"),p4o=l(),v(w_.$$.fragment),rIe=l(),Li=a("h2"),A_=a("a"),Vle=a("span"),v(Ry.$$.fragment),_4o=l(),Xle=a("span"),b4o=o("AutoModelForCausalLM"),tIe=l(),$o=a("div"),v(By.$$.fragment),F4o=l(),xi=a("p"),v4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FN=a("a"),T4o=o("from_pretrained()"),M4o=o(" class method or the "),vN=a("a"),E4o=o("from_config()"),C4o=o(` class
method.`),w4o=l(),Py=a("p"),A4o=o("This class cannot be instantiated directly using "),zle=a("code"),y4o=o("__init__()"),L4o=o(" (throws an error)."),x4o=l(),tt=a("div"),v(Iy.$$.fragment),$4o=l(),Qle=a("p"),k4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S4o=l(),$i=a("p"),R4o=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),B4o=o("not"),P4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),I4o=o("from_pretrained()"),q4o=o(" to load the model weights."),N4o=l(),v(y_.$$.fragment),j4o=l(),Je=a("div"),v(qy.$$.fragment),D4o=l(),Hle=a("p"),G4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O4o=l(),La=a("p"),V4o=o("The model class to instantiate is selected based on the "),Ule=a("code"),X4o=o("model_type"),z4o=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),Q4o=o("pretrained_model_name_or_path"),W4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(":"),J4o=l(),z=a("ul"),L_=a("li"),Kle=a("strong"),Y4o=o("bart"),K4o=o(" \u2014 "),MN=a("a"),Z4o=o("BartForCausalLM"),eEo=o(" (BART model)"),oEo=l(),x_=a("li"),Zle=a("strong"),rEo=o("bert"),tEo=o(" \u2014 "),EN=a("a"),aEo=o("BertLMHeadModel"),nEo=o(" (BERT model)"),sEo=l(),$_=a("li"),eie=a("strong"),lEo=o("bert-generation"),iEo=o(" \u2014 "),CN=a("a"),dEo=o("BertGenerationDecoder"),cEo=o(" (Bert Generation model)"),mEo=l(),k_=a("li"),oie=a("strong"),fEo=o("big_bird"),gEo=o(" \u2014 "),wN=a("a"),hEo=o("BigBirdForCausalLM"),uEo=o(" (BigBird model)"),pEo=l(),S_=a("li"),rie=a("strong"),_Eo=o("bigbird_pegasus"),bEo=o(" \u2014 "),AN=a("a"),FEo=o("BigBirdPegasusForCausalLM"),vEo=o(" (BigBirdPegasus model)"),TEo=l(),R_=a("li"),tie=a("strong"),MEo=o("blenderbot"),EEo=o(" \u2014 "),yN=a("a"),CEo=o("BlenderbotForCausalLM"),wEo=o(" (Blenderbot model)"),AEo=l(),B_=a("li"),aie=a("strong"),yEo=o("blenderbot-small"),LEo=o(" \u2014 "),LN=a("a"),xEo=o("BlenderbotSmallForCausalLM"),$Eo=o(" (BlenderbotSmall model)"),kEo=l(),P_=a("li"),nie=a("strong"),SEo=o("camembert"),REo=o(" \u2014 "),xN=a("a"),BEo=o("CamembertForCausalLM"),PEo=o(" (CamemBERT model)"),IEo=l(),I_=a("li"),sie=a("strong"),qEo=o("ctrl"),NEo=o(" \u2014 "),$N=a("a"),jEo=o("CTRLLMHeadModel"),DEo=o(" (CTRL model)"),GEo=l(),q_=a("li"),lie=a("strong"),OEo=o("data2vec-text"),VEo=o(" \u2014 "),kN=a("a"),XEo=o("Data2VecTextForCausalLM"),zEo=o(" (Data2VecText model)"),QEo=l(),N_=a("li"),iie=a("strong"),WEo=o("electra"),HEo=o(" \u2014 "),SN=a("a"),UEo=o("ElectraForCausalLM"),JEo=o(" (ELECTRA model)"),YEo=l(),j_=a("li"),die=a("strong"),KEo=o("gpt2"),ZEo=o(" \u2014 "),RN=a("a"),e5o=o("GPT2LMHeadModel"),o5o=o(" (OpenAI GPT-2 model)"),r5o=l(),D_=a("li"),cie=a("strong"),t5o=o("gpt_neo"),a5o=o(" \u2014 "),BN=a("a"),n5o=o("GPTNeoForCausalLM"),s5o=o(" (GPT Neo model)"),l5o=l(),G_=a("li"),mie=a("strong"),i5o=o("gptj"),d5o=o(" \u2014 "),PN=a("a"),c5o=o("GPTJForCausalLM"),m5o=o(" (GPT-J model)"),f5o=l(),O_=a("li"),fie=a("strong"),g5o=o("marian"),h5o=o(" \u2014 "),IN=a("a"),u5o=o("MarianForCausalLM"),p5o=o(" (Marian model)"),_5o=l(),V_=a("li"),gie=a("strong"),b5o=o("mbart"),F5o=o(" \u2014 "),qN=a("a"),v5o=o("MBartForCausalLM"),T5o=o(" (mBART model)"),M5o=l(),X_=a("li"),hie=a("strong"),E5o=o("megatron-bert"),C5o=o(" \u2014 "),NN=a("a"),w5o=o("MegatronBertForCausalLM"),A5o=o(" (MegatronBert model)"),y5o=l(),z_=a("li"),uie=a("strong"),L5o=o("openai-gpt"),x5o=o(" \u2014 "),jN=a("a"),$5o=o("OpenAIGPTLMHeadModel"),k5o=o(" (OpenAI GPT model)"),S5o=l(),Q_=a("li"),pie=a("strong"),R5o=o("opt"),B5o=o(" \u2014 "),DN=a("a"),P5o=o("OPTForCausalLM"),I5o=o(" (OPT model)"),q5o=l(),W_=a("li"),_ie=a("strong"),N5o=o("pegasus"),j5o=o(" \u2014 "),GN=a("a"),D5o=o("PegasusForCausalLM"),G5o=o(" (Pegasus model)"),O5o=l(),H_=a("li"),bie=a("strong"),V5o=o("plbart"),X5o=o(" \u2014 "),ON=a("a"),z5o=o("PLBartForCausalLM"),Q5o=o(" (PLBart model)"),W5o=l(),U_=a("li"),Fie=a("strong"),H5o=o("prophetnet"),U5o=o(" \u2014 "),VN=a("a"),J5o=o("ProphetNetForCausalLM"),Y5o=o(" (ProphetNet model)"),K5o=l(),J_=a("li"),vie=a("strong"),Z5o=o("qdqbert"),eCo=o(" \u2014 "),XN=a("a"),oCo=o("QDQBertLMHeadModel"),rCo=o(" (QDQBert model)"),tCo=l(),Y_=a("li"),Tie=a("strong"),aCo=o("reformer"),nCo=o(" \u2014 "),zN=a("a"),sCo=o("ReformerModelWithLMHead"),lCo=o(" (Reformer model)"),iCo=l(),K_=a("li"),Mie=a("strong"),dCo=o("rembert"),cCo=o(" \u2014 "),QN=a("a"),mCo=o("RemBertForCausalLM"),fCo=o(" (RemBERT model)"),gCo=l(),Z_=a("li"),Eie=a("strong"),hCo=o("roberta"),uCo=o(" \u2014 "),WN=a("a"),pCo=o("RobertaForCausalLM"),_Co=o(" (RoBERTa model)"),bCo=l(),eb=a("li"),Cie=a("strong"),FCo=o("roformer"),vCo=o(" \u2014 "),HN=a("a"),TCo=o("RoFormerForCausalLM"),MCo=o(" (RoFormer model)"),ECo=l(),ob=a("li"),wie=a("strong"),CCo=o("speech_to_text_2"),wCo=o(" \u2014 "),UN=a("a"),ACo=o("Speech2Text2ForCausalLM"),yCo=o(" (Speech2Text2 model)"),LCo=l(),rb=a("li"),Aie=a("strong"),xCo=o("transfo-xl"),$Co=o(" \u2014 "),JN=a("a"),kCo=o("TransfoXLLMHeadModel"),SCo=o(" (Transformer-XL model)"),RCo=l(),tb=a("li"),yie=a("strong"),BCo=o("trocr"),PCo=o(" \u2014 "),YN=a("a"),ICo=o("TrOCRForCausalLM"),qCo=o(" (TrOCR model)"),NCo=l(),ab=a("li"),Lie=a("strong"),jCo=o("xglm"),DCo=o(" \u2014 "),KN=a("a"),GCo=o("XGLMForCausalLM"),OCo=o(" (XGLM model)"),VCo=l(),nb=a("li"),xie=a("strong"),XCo=o("xlm"),zCo=o(" \u2014 "),ZN=a("a"),QCo=o("XLMWithLMHeadModel"),WCo=o(" (XLM model)"),HCo=l(),sb=a("li"),$ie=a("strong"),UCo=o("xlm-prophetnet"),JCo=o(" \u2014 "),ej=a("a"),YCo=o("XLMProphetNetForCausalLM"),KCo=o(" (XLMProphetNet model)"),ZCo=l(),lb=a("li"),kie=a("strong"),e3o=o("xlm-roberta"),o3o=o(" \u2014 "),oj=a("a"),r3o=o("XLMRobertaForCausalLM"),t3o=o(" (XLM-RoBERTa model)"),a3o=l(),ib=a("li"),Sie=a("strong"),n3o=o("xlm-roberta-xl"),s3o=o(" \u2014 "),rj=a("a"),l3o=o("XLMRobertaXLForCausalLM"),i3o=o(" (XLM-RoBERTa-XL model)"),d3o=l(),db=a("li"),Rie=a("strong"),c3o=o("xlnet"),m3o=o(" \u2014 "),tj=a("a"),f3o=o("XLNetLMHeadModel"),g3o=o(" (XLNet model)"),h3o=l(),cb=a("p"),u3o=o("The model is set in evaluation mode by default using "),Bie=a("code"),p3o=o("model.eval()"),_3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),b3o=o("model.train()"),F3o=l(),v(mb.$$.fragment),aIe=l(),ki=a("h2"),fb=a("a"),Iie=a("span"),v(Ny.$$.fragment),v3o=l(),qie=a("span"),T3o=o("AutoModelForMaskedLM"),nIe=l(),ko=a("div"),v(jy.$$.fragment),M3o=l(),Si=a("p"),E3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=a("a"),C3o=o("from_pretrained()"),w3o=o(" class method or the "),nj=a("a"),A3o=o("from_config()"),y3o=o(` class
method.`),L3o=l(),Dy=a("p"),x3o=o("This class cannot be instantiated directly using "),Nie=a("code"),$3o=o("__init__()"),k3o=o(" (throws an error)."),S3o=l(),at=a("div"),v(Gy.$$.fragment),R3o=l(),jie=a("p"),B3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3o=l(),Ri=a("p"),I3o=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),q3o=o("not"),N3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),j3o=o("from_pretrained()"),D3o=o(" to load the model weights."),G3o=l(),v(gb.$$.fragment),O3o=l(),Ye=a("div"),v(Oy.$$.fragment),V3o=l(),Gie=a("p"),X3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z3o=l(),xa=a("p"),Q3o=o("The model class to instantiate is selected based on the "),Oie=a("code"),W3o=o("model_type"),H3o=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),U3o=o("pretrained_model_name_or_path"),J3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=a("code"),Y3o=o("pretrained_model_name_or_path"),K3o=o(":"),Z3o=l(),Q=a("ul"),hb=a("li"),zie=a("strong"),ewo=o("albert"),owo=o(" \u2014 "),lj=a("a"),rwo=o("AlbertForMaskedLM"),two=o(" (ALBERT model)"),awo=l(),ub=a("li"),Qie=a("strong"),nwo=o("bart"),swo=o(" \u2014 "),ij=a("a"),lwo=o("BartForConditionalGeneration"),iwo=o(" (BART model)"),dwo=l(),pb=a("li"),Wie=a("strong"),cwo=o("bert"),mwo=o(" \u2014 "),dj=a("a"),fwo=o("BertForMaskedLM"),gwo=o(" (BERT model)"),hwo=l(),_b=a("li"),Hie=a("strong"),uwo=o("big_bird"),pwo=o(" \u2014 "),cj=a("a"),_wo=o("BigBirdForMaskedLM"),bwo=o(" (BigBird model)"),Fwo=l(),bb=a("li"),Uie=a("strong"),vwo=o("camembert"),Two=o(" \u2014 "),mj=a("a"),Mwo=o("CamembertForMaskedLM"),Ewo=o(" (CamemBERT model)"),Cwo=l(),Fb=a("li"),Jie=a("strong"),wwo=o("convbert"),Awo=o(" \u2014 "),fj=a("a"),ywo=o("ConvBertForMaskedLM"),Lwo=o(" (ConvBERT model)"),xwo=l(),vb=a("li"),Yie=a("strong"),$wo=o("data2vec-text"),kwo=o(" \u2014 "),gj=a("a"),Swo=o("Data2VecTextForMaskedLM"),Rwo=o(" (Data2VecText model)"),Bwo=l(),Tb=a("li"),Kie=a("strong"),Pwo=o("deberta"),Iwo=o(" \u2014 "),hj=a("a"),qwo=o("DebertaForMaskedLM"),Nwo=o(" (DeBERTa model)"),jwo=l(),Mb=a("li"),Zie=a("strong"),Dwo=o("deberta-v2"),Gwo=o(" \u2014 "),uj=a("a"),Owo=o("DebertaV2ForMaskedLM"),Vwo=o(" (DeBERTa-v2 model)"),Xwo=l(),Eb=a("li"),ede=a("strong"),zwo=o("distilbert"),Qwo=o(" \u2014 "),pj=a("a"),Wwo=o("DistilBertForMaskedLM"),Hwo=o(" (DistilBERT model)"),Uwo=l(),Cb=a("li"),ode=a("strong"),Jwo=o("electra"),Ywo=o(" \u2014 "),_j=a("a"),Kwo=o("ElectraForMaskedLM"),Zwo=o(" (ELECTRA model)"),eAo=l(),wb=a("li"),rde=a("strong"),oAo=o("flaubert"),rAo=o(" \u2014 "),bj=a("a"),tAo=o("FlaubertWithLMHeadModel"),aAo=o(" (FlauBERT model)"),nAo=l(),Ab=a("li"),tde=a("strong"),sAo=o("fnet"),lAo=o(" \u2014 "),Fj=a("a"),iAo=o("FNetForMaskedLM"),dAo=o(" (FNet model)"),cAo=l(),yb=a("li"),ade=a("strong"),mAo=o("funnel"),fAo=o(" \u2014 "),vj=a("a"),gAo=o("FunnelForMaskedLM"),hAo=o(" (Funnel Transformer model)"),uAo=l(),Lb=a("li"),nde=a("strong"),pAo=o("ibert"),_Ao=o(" \u2014 "),Tj=a("a"),bAo=o("IBertForMaskedLM"),FAo=o(" (I-BERT model)"),vAo=l(),xb=a("li"),sde=a("strong"),TAo=o("layoutlm"),MAo=o(" \u2014 "),Mj=a("a"),EAo=o("LayoutLMForMaskedLM"),CAo=o(" (LayoutLM model)"),wAo=l(),$b=a("li"),lde=a("strong"),AAo=o("longformer"),yAo=o(" \u2014 "),Ej=a("a"),LAo=o("LongformerForMaskedLM"),xAo=o(" (Longformer model)"),$Ao=l(),kb=a("li"),ide=a("strong"),kAo=o("mbart"),SAo=o(" \u2014 "),Cj=a("a"),RAo=o("MBartForConditionalGeneration"),BAo=o(" (mBART model)"),PAo=l(),Sb=a("li"),dde=a("strong"),IAo=o("megatron-bert"),qAo=o(" \u2014 "),wj=a("a"),NAo=o("MegatronBertForMaskedLM"),jAo=o(" (MegatronBert model)"),DAo=l(),Rb=a("li"),cde=a("strong"),GAo=o("mobilebert"),OAo=o(" \u2014 "),Aj=a("a"),VAo=o("MobileBertForMaskedLM"),XAo=o(" (MobileBERT model)"),zAo=l(),Bb=a("li"),mde=a("strong"),QAo=o("mpnet"),WAo=o(" \u2014 "),yj=a("a"),HAo=o("MPNetForMaskedLM"),UAo=o(" (MPNet model)"),JAo=l(),Pb=a("li"),fde=a("strong"),YAo=o("nystromformer"),KAo=o(" \u2014 "),Lj=a("a"),ZAo=o("NystromformerForMaskedLM"),e6o=o(" (Nystromformer model)"),o6o=l(),Ib=a("li"),gde=a("strong"),r6o=o("perceiver"),t6o=o(" \u2014 "),xj=a("a"),a6o=o("PerceiverForMaskedLM"),n6o=o(" (Perceiver model)"),s6o=l(),qb=a("li"),hde=a("strong"),l6o=o("qdqbert"),i6o=o(" \u2014 "),$j=a("a"),d6o=o("QDQBertForMaskedLM"),c6o=o(" (QDQBert model)"),m6o=l(),Nb=a("li"),ude=a("strong"),f6o=o("reformer"),g6o=o(" \u2014 "),kj=a("a"),h6o=o("ReformerForMaskedLM"),u6o=o(" (Reformer model)"),p6o=l(),jb=a("li"),pde=a("strong"),_6o=o("rembert"),b6o=o(" \u2014 "),Sj=a("a"),F6o=o("RemBertForMaskedLM"),v6o=o(" (RemBERT model)"),T6o=l(),Db=a("li"),_de=a("strong"),M6o=o("roberta"),E6o=o(" \u2014 "),Rj=a("a"),C6o=o("RobertaForMaskedLM"),w6o=o(" (RoBERTa model)"),A6o=l(),Gb=a("li"),bde=a("strong"),y6o=o("roformer"),L6o=o(" \u2014 "),Bj=a("a"),x6o=o("RoFormerForMaskedLM"),$6o=o(" (RoFormer model)"),k6o=l(),Ob=a("li"),Fde=a("strong"),S6o=o("squeezebert"),R6o=o(" \u2014 "),Pj=a("a"),B6o=o("SqueezeBertForMaskedLM"),P6o=o(" (SqueezeBERT model)"),I6o=l(),Vb=a("li"),vde=a("strong"),q6o=o("tapas"),N6o=o(" \u2014 "),Ij=a("a"),j6o=o("TapasForMaskedLM"),D6o=o(" (TAPAS model)"),G6o=l(),Xb=a("li"),Tde=a("strong"),O6o=o("wav2vec2"),V6o=o(" \u2014 "),Mde=a("code"),X6o=o("Wav2Vec2ForMaskedLM"),z6o=o(" (Wav2Vec2 model)"),Q6o=l(),zb=a("li"),Ede=a("strong"),W6o=o("xlm"),H6o=o(" \u2014 "),qj=a("a"),U6o=o("XLMWithLMHeadModel"),J6o=o(" (XLM model)"),Y6o=l(),Qb=a("li"),Cde=a("strong"),K6o=o("xlm-roberta"),Z6o=o(" \u2014 "),Nj=a("a"),e0o=o("XLMRobertaForMaskedLM"),o0o=o(" (XLM-RoBERTa model)"),r0o=l(),Wb=a("li"),wde=a("strong"),t0o=o("xlm-roberta-xl"),a0o=o(" \u2014 "),jj=a("a"),n0o=o("XLMRobertaXLForMaskedLM"),s0o=o(" (XLM-RoBERTa-XL model)"),l0o=l(),Hb=a("li"),Ade=a("strong"),i0o=o("yoso"),d0o=o(" \u2014 "),Dj=a("a"),c0o=o("YosoForMaskedLM"),m0o=o(" (YOSO model)"),f0o=l(),Ub=a("p"),g0o=o("The model is set in evaluation mode by default using "),yde=a("code"),h0o=o("model.eval()"),u0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),p0o=o("model.train()"),_0o=l(),v(Jb.$$.fragment),sIe=l(),Bi=a("h2"),Yb=a("a"),xde=a("span"),v(Vy.$$.fragment),b0o=l(),$de=a("span"),F0o=o("AutoModelForSeq2SeqLM"),lIe=l(),So=a("div"),v(Xy.$$.fragment),v0o=l(),Pi=a("p"),T0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=a("a"),M0o=o("from_pretrained()"),E0o=o(" class method or the "),Oj=a("a"),C0o=o("from_config()"),w0o=o(` class
method.`),A0o=l(),zy=a("p"),y0o=o("This class cannot be instantiated directly using "),kde=a("code"),L0o=o("__init__()"),x0o=o(" (throws an error)."),$0o=l(),nt=a("div"),v(Qy.$$.fragment),k0o=l(),Sde=a("p"),S0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R0o=l(),Ii=a("p"),B0o=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),P0o=o("not"),I0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),q0o=o("from_pretrained()"),N0o=o(" to load the model weights."),j0o=l(),v(Kb.$$.fragment),D0o=l(),Ke=a("div"),v(Wy.$$.fragment),G0o=l(),Bde=a("p"),O0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V0o=l(),$a=a("p"),X0o=o("The model class to instantiate is selected based on the "),Pde=a("code"),z0o=o("model_type"),Q0o=o(` property of the config object (either
passed as an argument or loaded from `),Ide=a("code"),W0o=o("pretrained_model_name_or_path"),H0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),U0o=o("pretrained_model_name_or_path"),J0o=o(":"),Y0o=l(),ue=a("ul"),Zb=a("li"),Nde=a("strong"),K0o=o("bart"),Z0o=o(" \u2014 "),Xj=a("a"),eyo=o("BartForConditionalGeneration"),oyo=o(" (BART model)"),ryo=l(),e2=a("li"),jde=a("strong"),tyo=o("bigbird_pegasus"),ayo=o(" \u2014 "),zj=a("a"),nyo=o("BigBirdPegasusForConditionalGeneration"),syo=o(" (BigBirdPegasus model)"),lyo=l(),o2=a("li"),Dde=a("strong"),iyo=o("blenderbot"),dyo=o(" \u2014 "),Qj=a("a"),cyo=o("BlenderbotForConditionalGeneration"),myo=o(" (Blenderbot model)"),fyo=l(),r2=a("li"),Gde=a("strong"),gyo=o("blenderbot-small"),hyo=o(" \u2014 "),Wj=a("a"),uyo=o("BlenderbotSmallForConditionalGeneration"),pyo=o(" (BlenderbotSmall model)"),_yo=l(),t2=a("li"),Ode=a("strong"),byo=o("encoder-decoder"),Fyo=o(" \u2014 "),Hj=a("a"),vyo=o("EncoderDecoderModel"),Tyo=o(" (Encoder decoder model)"),Myo=l(),a2=a("li"),Vde=a("strong"),Eyo=o("fsmt"),Cyo=o(" \u2014 "),Uj=a("a"),wyo=o("FSMTForConditionalGeneration"),Ayo=o(" (FairSeq Machine-Translation model)"),yyo=l(),n2=a("li"),Xde=a("strong"),Lyo=o("led"),xyo=o(" \u2014 "),Jj=a("a"),$yo=o("LEDForConditionalGeneration"),kyo=o(" (LED model)"),Syo=l(),s2=a("li"),zde=a("strong"),Ryo=o("m2m_100"),Byo=o(" \u2014 "),Yj=a("a"),Pyo=o("M2M100ForConditionalGeneration"),Iyo=o(" (M2M100 model)"),qyo=l(),l2=a("li"),Qde=a("strong"),Nyo=o("marian"),jyo=o(" \u2014 "),Kj=a("a"),Dyo=o("MarianMTModel"),Gyo=o(" (Marian model)"),Oyo=l(),i2=a("li"),Wde=a("strong"),Vyo=o("mbart"),Xyo=o(" \u2014 "),Zj=a("a"),zyo=o("MBartForConditionalGeneration"),Qyo=o(" (mBART model)"),Wyo=l(),d2=a("li"),Hde=a("strong"),Hyo=o("mt5"),Uyo=o(" \u2014 "),eD=a("a"),Jyo=o("MT5ForConditionalGeneration"),Yyo=o(" (mT5 model)"),Kyo=l(),c2=a("li"),Ude=a("strong"),Zyo=o("pegasus"),eLo=o(" \u2014 "),oD=a("a"),oLo=o("PegasusForConditionalGeneration"),rLo=o(" (Pegasus model)"),tLo=l(),m2=a("li"),Jde=a("strong"),aLo=o("plbart"),nLo=o(" \u2014 "),rD=a("a"),sLo=o("PLBartForConditionalGeneration"),lLo=o(" (PLBart model)"),iLo=l(),f2=a("li"),Yde=a("strong"),dLo=o("prophetnet"),cLo=o(" \u2014 "),tD=a("a"),mLo=o("ProphetNetForConditionalGeneration"),fLo=o(" (ProphetNet model)"),gLo=l(),g2=a("li"),Kde=a("strong"),hLo=o("t5"),uLo=o(" \u2014 "),aD=a("a"),pLo=o("T5ForConditionalGeneration"),_Lo=o(" (T5 model)"),bLo=l(),h2=a("li"),Zde=a("strong"),FLo=o("xlm-prophetnet"),vLo=o(" \u2014 "),nD=a("a"),TLo=o("XLMProphetNetForConditionalGeneration"),MLo=o(" (XLMProphetNet model)"),ELo=l(),u2=a("p"),CLo=o("The model is set in evaluation mode by default using "),ece=a("code"),wLo=o("model.eval()"),ALo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),yLo=o("model.train()"),LLo=l(),v(p2.$$.fragment),iIe=l(),qi=a("h2"),_2=a("a"),rce=a("span"),v(Hy.$$.fragment),xLo=l(),tce=a("span"),$Lo=o("AutoModelForSequenceClassification"),dIe=l(),Ro=a("div"),v(Uy.$$.fragment),kLo=l(),Ni=a("p"),SLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=a("a"),RLo=o("from_pretrained()"),BLo=o(" class method or the "),lD=a("a"),PLo=o("from_config()"),ILo=o(` class
method.`),qLo=l(),Jy=a("p"),NLo=o("This class cannot be instantiated directly using "),ace=a("code"),jLo=o("__init__()"),DLo=o(" (throws an error)."),GLo=l(),st=a("div"),v(Yy.$$.fragment),OLo=l(),nce=a("p"),VLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XLo=l(),ji=a("p"),zLo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),QLo=o("not"),WLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),HLo=o("from_pretrained()"),ULo=o(" to load the model weights."),JLo=l(),v(b2.$$.fragment),YLo=l(),Ze=a("div"),v(Ky.$$.fragment),KLo=l(),lce=a("p"),ZLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e8o=l(),ka=a("p"),o8o=o("The model class to instantiate is selected based on the "),ice=a("code"),r8o=o("model_type"),t8o=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),a8o=o("pretrained_model_name_or_path"),n8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),s8o=o("pretrained_model_name_or_path"),l8o=o(":"),i8o=l(),q=a("ul"),F2=a("li"),mce=a("strong"),d8o=o("albert"),c8o=o(" \u2014 "),dD=a("a"),m8o=o("AlbertForSequenceClassification"),f8o=o(" (ALBERT model)"),g8o=l(),v2=a("li"),fce=a("strong"),h8o=o("bart"),u8o=o(" \u2014 "),cD=a("a"),p8o=o("BartForSequenceClassification"),_8o=o(" (BART model)"),b8o=l(),T2=a("li"),gce=a("strong"),F8o=o("bert"),v8o=o(" \u2014 "),mD=a("a"),T8o=o("BertForSequenceClassification"),M8o=o(" (BERT model)"),E8o=l(),M2=a("li"),hce=a("strong"),C8o=o("big_bird"),w8o=o(" \u2014 "),fD=a("a"),A8o=o("BigBirdForSequenceClassification"),y8o=o(" (BigBird model)"),L8o=l(),E2=a("li"),uce=a("strong"),x8o=o("bigbird_pegasus"),$8o=o(" \u2014 "),gD=a("a"),k8o=o("BigBirdPegasusForSequenceClassification"),S8o=o(" (BigBirdPegasus model)"),R8o=l(),C2=a("li"),pce=a("strong"),B8o=o("camembert"),P8o=o(" \u2014 "),hD=a("a"),I8o=o("CamembertForSequenceClassification"),q8o=o(" (CamemBERT model)"),N8o=l(),w2=a("li"),_ce=a("strong"),j8o=o("canine"),D8o=o(" \u2014 "),uD=a("a"),G8o=o("CanineForSequenceClassification"),O8o=o(" (Canine model)"),V8o=l(),A2=a("li"),bce=a("strong"),X8o=o("convbert"),z8o=o(" \u2014 "),pD=a("a"),Q8o=o("ConvBertForSequenceClassification"),W8o=o(" (ConvBERT model)"),H8o=l(),y2=a("li"),Fce=a("strong"),U8o=o("ctrl"),J8o=o(" \u2014 "),_D=a("a"),Y8o=o("CTRLForSequenceClassification"),K8o=o(" (CTRL model)"),Z8o=l(),L2=a("li"),vce=a("strong"),exo=o("data2vec-text"),oxo=o(" \u2014 "),bD=a("a"),rxo=o("Data2VecTextForSequenceClassification"),txo=o(" (Data2VecText model)"),axo=l(),x2=a("li"),Tce=a("strong"),nxo=o("deberta"),sxo=o(" \u2014 "),FD=a("a"),lxo=o("DebertaForSequenceClassification"),ixo=o(" (DeBERTa model)"),dxo=l(),$2=a("li"),Mce=a("strong"),cxo=o("deberta-v2"),mxo=o(" \u2014 "),vD=a("a"),fxo=o("DebertaV2ForSequenceClassification"),gxo=o(" (DeBERTa-v2 model)"),hxo=l(),k2=a("li"),Ece=a("strong"),uxo=o("distilbert"),pxo=o(" \u2014 "),TD=a("a"),_xo=o("DistilBertForSequenceClassification"),bxo=o(" (DistilBERT model)"),Fxo=l(),S2=a("li"),Cce=a("strong"),vxo=o("electra"),Txo=o(" \u2014 "),MD=a("a"),Mxo=o("ElectraForSequenceClassification"),Exo=o(" (ELECTRA model)"),Cxo=l(),R2=a("li"),wce=a("strong"),wxo=o("flaubert"),Axo=o(" \u2014 "),ED=a("a"),yxo=o("FlaubertForSequenceClassification"),Lxo=o(" (FlauBERT model)"),xxo=l(),B2=a("li"),Ace=a("strong"),$xo=o("fnet"),kxo=o(" \u2014 "),CD=a("a"),Sxo=o("FNetForSequenceClassification"),Rxo=o(" (FNet model)"),Bxo=l(),P2=a("li"),yce=a("strong"),Pxo=o("funnel"),Ixo=o(" \u2014 "),wD=a("a"),qxo=o("FunnelForSequenceClassification"),Nxo=o(" (Funnel Transformer model)"),jxo=l(),I2=a("li"),Lce=a("strong"),Dxo=o("gpt2"),Gxo=o(" \u2014 "),AD=a("a"),Oxo=o("GPT2ForSequenceClassification"),Vxo=o(" (OpenAI GPT-2 model)"),Xxo=l(),q2=a("li"),xce=a("strong"),zxo=o("gpt_neo"),Qxo=o(" \u2014 "),yD=a("a"),Wxo=o("GPTNeoForSequenceClassification"),Hxo=o(" (GPT Neo model)"),Uxo=l(),N2=a("li"),$ce=a("strong"),Jxo=o("gptj"),Yxo=o(" \u2014 "),LD=a("a"),Kxo=o("GPTJForSequenceClassification"),Zxo=o(" (GPT-J model)"),e7o=l(),j2=a("li"),kce=a("strong"),o7o=o("ibert"),r7o=o(" \u2014 "),xD=a("a"),t7o=o("IBertForSequenceClassification"),a7o=o(" (I-BERT model)"),n7o=l(),D2=a("li"),Sce=a("strong"),s7o=o("layoutlm"),l7o=o(" \u2014 "),$D=a("a"),i7o=o("LayoutLMForSequenceClassification"),d7o=o(" (LayoutLM model)"),c7o=l(),G2=a("li"),Rce=a("strong"),m7o=o("layoutlmv2"),f7o=o(" \u2014 "),kD=a("a"),g7o=o("LayoutLMv2ForSequenceClassification"),h7o=o(" (LayoutLMv2 model)"),u7o=l(),O2=a("li"),Bce=a("strong"),p7o=o("led"),_7o=o(" \u2014 "),SD=a("a"),b7o=o("LEDForSequenceClassification"),F7o=o(" (LED model)"),v7o=l(),V2=a("li"),Pce=a("strong"),T7o=o("longformer"),M7o=o(" \u2014 "),RD=a("a"),E7o=o("LongformerForSequenceClassification"),C7o=o(" (Longformer model)"),w7o=l(),X2=a("li"),Ice=a("strong"),A7o=o("mbart"),y7o=o(" \u2014 "),BD=a("a"),L7o=o("MBartForSequenceClassification"),x7o=o(" (mBART model)"),$7o=l(),z2=a("li"),qce=a("strong"),k7o=o("megatron-bert"),S7o=o(" \u2014 "),PD=a("a"),R7o=o("MegatronBertForSequenceClassification"),B7o=o(" (MegatronBert model)"),P7o=l(),Q2=a("li"),Nce=a("strong"),I7o=o("mobilebert"),q7o=o(" \u2014 "),ID=a("a"),N7o=o("MobileBertForSequenceClassification"),j7o=o(" (MobileBERT model)"),D7o=l(),W2=a("li"),jce=a("strong"),G7o=o("mpnet"),O7o=o(" \u2014 "),qD=a("a"),V7o=o("MPNetForSequenceClassification"),X7o=o(" (MPNet model)"),z7o=l(),H2=a("li"),Dce=a("strong"),Q7o=o("nystromformer"),W7o=o(" \u2014 "),ND=a("a"),H7o=o("NystromformerForSequenceClassification"),U7o=o(" (Nystromformer model)"),J7o=l(),U2=a("li"),Gce=a("strong"),Y7o=o("openai-gpt"),K7o=o(" \u2014 "),jD=a("a"),Z7o=o("OpenAIGPTForSequenceClassification"),e9o=o(" (OpenAI GPT model)"),o9o=l(),J2=a("li"),Oce=a("strong"),r9o=o("perceiver"),t9o=o(" \u2014 "),DD=a("a"),a9o=o("PerceiverForSequenceClassification"),n9o=o(" (Perceiver model)"),s9o=l(),Y2=a("li"),Vce=a("strong"),l9o=o("plbart"),i9o=o(" \u2014 "),GD=a("a"),d9o=o("PLBartForSequenceClassification"),c9o=o(" (PLBart model)"),m9o=l(),K2=a("li"),Xce=a("strong"),f9o=o("qdqbert"),g9o=o(" \u2014 "),OD=a("a"),h9o=o("QDQBertForSequenceClassification"),u9o=o(" (QDQBert model)"),p9o=l(),Z2=a("li"),zce=a("strong"),_9o=o("reformer"),b9o=o(" \u2014 "),VD=a("a"),F9o=o("ReformerForSequenceClassification"),v9o=o(" (Reformer model)"),T9o=l(),eF=a("li"),Qce=a("strong"),M9o=o("rembert"),E9o=o(" \u2014 "),XD=a("a"),C9o=o("RemBertForSequenceClassification"),w9o=o(" (RemBERT model)"),A9o=l(),oF=a("li"),Wce=a("strong"),y9o=o("roberta"),L9o=o(" \u2014 "),zD=a("a"),x9o=o("RobertaForSequenceClassification"),$9o=o(" (RoBERTa model)"),k9o=l(),rF=a("li"),Hce=a("strong"),S9o=o("roformer"),R9o=o(" \u2014 "),QD=a("a"),B9o=o("RoFormerForSequenceClassification"),P9o=o(" (RoFormer model)"),I9o=l(),tF=a("li"),Uce=a("strong"),q9o=o("squeezebert"),N9o=o(" \u2014 "),WD=a("a"),j9o=o("SqueezeBertForSequenceClassification"),D9o=o(" (SqueezeBERT model)"),G9o=l(),aF=a("li"),Jce=a("strong"),O9o=o("tapas"),V9o=o(" \u2014 "),HD=a("a"),X9o=o("TapasForSequenceClassification"),z9o=o(" (TAPAS model)"),Q9o=l(),nF=a("li"),Yce=a("strong"),W9o=o("transfo-xl"),H9o=o(" \u2014 "),UD=a("a"),U9o=o("TransfoXLForSequenceClassification"),J9o=o(" (Transformer-XL model)"),Y9o=l(),sF=a("li"),Kce=a("strong"),K9o=o("xlm"),Z9o=o(" \u2014 "),JD=a("a"),e$o=o("XLMForSequenceClassification"),o$o=o(" (XLM model)"),r$o=l(),lF=a("li"),Zce=a("strong"),t$o=o("xlm-roberta"),a$o=o(" \u2014 "),YD=a("a"),n$o=o("XLMRobertaForSequenceClassification"),s$o=o(" (XLM-RoBERTa model)"),l$o=l(),iF=a("li"),eme=a("strong"),i$o=o("xlm-roberta-xl"),d$o=o(" \u2014 "),KD=a("a"),c$o=o("XLMRobertaXLForSequenceClassification"),m$o=o(" (XLM-RoBERTa-XL model)"),f$o=l(),dF=a("li"),ome=a("strong"),g$o=o("xlnet"),h$o=o(" \u2014 "),ZD=a("a"),u$o=o("XLNetForSequenceClassification"),p$o=o(" (XLNet model)"),_$o=l(),cF=a("li"),rme=a("strong"),b$o=o("yoso"),F$o=o(" \u2014 "),eG=a("a"),v$o=o("YosoForSequenceClassification"),T$o=o(" (YOSO model)"),M$o=l(),mF=a("p"),E$o=o("The model is set in evaluation mode by default using "),tme=a("code"),C$o=o("model.eval()"),w$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),A$o=o("model.train()"),y$o=l(),v(fF.$$.fragment),cIe=l(),Di=a("h2"),gF=a("a"),nme=a("span"),v(Zy.$$.fragment),L$o=l(),sme=a("span"),x$o=o("AutoModelForMultipleChoice"),mIe=l(),Bo=a("div"),v(eL.$$.fragment),$$o=l(),Gi=a("p"),k$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=a("a"),S$o=o("from_pretrained()"),R$o=o(" class method or the "),rG=a("a"),B$o=o("from_config()"),P$o=o(` class
method.`),I$o=l(),oL=a("p"),q$o=o("This class cannot be instantiated directly using "),lme=a("code"),N$o=o("__init__()"),j$o=o(" (throws an error)."),D$o=l(),lt=a("div"),v(rL.$$.fragment),G$o=l(),ime=a("p"),O$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V$o=l(),Oi=a("p"),X$o=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),z$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),W$o=o("from_pretrained()"),H$o=o(" to load the model weights."),U$o=l(),v(hF.$$.fragment),J$o=l(),eo=a("div"),v(tL.$$.fragment),Y$o=l(),cme=a("p"),K$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z$o=l(),Sa=a("p"),eko=o("The model class to instantiate is selected based on the "),mme=a("code"),oko=o("model_type"),rko=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),tko=o("pretrained_model_name_or_path"),ako=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),nko=o("pretrained_model_name_or_path"),sko=o(":"),lko=l(),Y=a("ul"),uF=a("li"),hme=a("strong"),iko=o("albert"),dko=o(" \u2014 "),aG=a("a"),cko=o("AlbertForMultipleChoice"),mko=o(" (ALBERT model)"),fko=l(),pF=a("li"),ume=a("strong"),gko=o("bert"),hko=o(" \u2014 "),nG=a("a"),uko=o("BertForMultipleChoice"),pko=o(" (BERT model)"),_ko=l(),_F=a("li"),pme=a("strong"),bko=o("big_bird"),Fko=o(" \u2014 "),sG=a("a"),vko=o("BigBirdForMultipleChoice"),Tko=o(" (BigBird model)"),Mko=l(),bF=a("li"),_me=a("strong"),Eko=o("camembert"),Cko=o(" \u2014 "),lG=a("a"),wko=o("CamembertForMultipleChoice"),Ako=o(" (CamemBERT model)"),yko=l(),FF=a("li"),bme=a("strong"),Lko=o("canine"),xko=o(" \u2014 "),iG=a("a"),$ko=o("CanineForMultipleChoice"),kko=o(" (Canine model)"),Sko=l(),vF=a("li"),Fme=a("strong"),Rko=o("convbert"),Bko=o(" \u2014 "),dG=a("a"),Pko=o("ConvBertForMultipleChoice"),Iko=o(" (ConvBERT model)"),qko=l(),TF=a("li"),vme=a("strong"),Nko=o("data2vec-text"),jko=o(" \u2014 "),cG=a("a"),Dko=o("Data2VecTextForMultipleChoice"),Gko=o(" (Data2VecText model)"),Oko=l(),MF=a("li"),Tme=a("strong"),Vko=o("deberta-v2"),Xko=o(" \u2014 "),mG=a("a"),zko=o("DebertaV2ForMultipleChoice"),Qko=o(" (DeBERTa-v2 model)"),Wko=l(),EF=a("li"),Mme=a("strong"),Hko=o("distilbert"),Uko=o(" \u2014 "),fG=a("a"),Jko=o("DistilBertForMultipleChoice"),Yko=o(" (DistilBERT model)"),Kko=l(),CF=a("li"),Eme=a("strong"),Zko=o("electra"),eSo=o(" \u2014 "),gG=a("a"),oSo=o("ElectraForMultipleChoice"),rSo=o(" (ELECTRA model)"),tSo=l(),wF=a("li"),Cme=a("strong"),aSo=o("flaubert"),nSo=o(" \u2014 "),hG=a("a"),sSo=o("FlaubertForMultipleChoice"),lSo=o(" (FlauBERT model)"),iSo=l(),AF=a("li"),wme=a("strong"),dSo=o("fnet"),cSo=o(" \u2014 "),uG=a("a"),mSo=o("FNetForMultipleChoice"),fSo=o(" (FNet model)"),gSo=l(),yF=a("li"),Ame=a("strong"),hSo=o("funnel"),uSo=o(" \u2014 "),pG=a("a"),pSo=o("FunnelForMultipleChoice"),_So=o(" (Funnel Transformer model)"),bSo=l(),LF=a("li"),yme=a("strong"),FSo=o("ibert"),vSo=o(" \u2014 "),_G=a("a"),TSo=o("IBertForMultipleChoice"),MSo=o(" (I-BERT model)"),ESo=l(),xF=a("li"),Lme=a("strong"),CSo=o("longformer"),wSo=o(" \u2014 "),bG=a("a"),ASo=o("LongformerForMultipleChoice"),ySo=o(" (Longformer model)"),LSo=l(),$F=a("li"),xme=a("strong"),xSo=o("megatron-bert"),$So=o(" \u2014 "),FG=a("a"),kSo=o("MegatronBertForMultipleChoice"),SSo=o(" (MegatronBert model)"),RSo=l(),kF=a("li"),$me=a("strong"),BSo=o("mobilebert"),PSo=o(" \u2014 "),vG=a("a"),ISo=o("MobileBertForMultipleChoice"),qSo=o(" (MobileBERT model)"),NSo=l(),SF=a("li"),kme=a("strong"),jSo=o("mpnet"),DSo=o(" \u2014 "),TG=a("a"),GSo=o("MPNetForMultipleChoice"),OSo=o(" (MPNet model)"),VSo=l(),RF=a("li"),Sme=a("strong"),XSo=o("nystromformer"),zSo=o(" \u2014 "),MG=a("a"),QSo=o("NystromformerForMultipleChoice"),WSo=o(" (Nystromformer model)"),HSo=l(),BF=a("li"),Rme=a("strong"),USo=o("qdqbert"),JSo=o(" \u2014 "),EG=a("a"),YSo=o("QDQBertForMultipleChoice"),KSo=o(" (QDQBert model)"),ZSo=l(),PF=a("li"),Bme=a("strong"),eRo=o("rembert"),oRo=o(" \u2014 "),CG=a("a"),rRo=o("RemBertForMultipleChoice"),tRo=o(" (RemBERT model)"),aRo=l(),IF=a("li"),Pme=a("strong"),nRo=o("roberta"),sRo=o(" \u2014 "),wG=a("a"),lRo=o("RobertaForMultipleChoice"),iRo=o(" (RoBERTa model)"),dRo=l(),qF=a("li"),Ime=a("strong"),cRo=o("roformer"),mRo=o(" \u2014 "),AG=a("a"),fRo=o("RoFormerForMultipleChoice"),gRo=o(" (RoFormer model)"),hRo=l(),NF=a("li"),qme=a("strong"),uRo=o("squeezebert"),pRo=o(" \u2014 "),yG=a("a"),_Ro=o("SqueezeBertForMultipleChoice"),bRo=o(" (SqueezeBERT model)"),FRo=l(),jF=a("li"),Nme=a("strong"),vRo=o("xlm"),TRo=o(" \u2014 "),LG=a("a"),MRo=o("XLMForMultipleChoice"),ERo=o(" (XLM model)"),CRo=l(),DF=a("li"),jme=a("strong"),wRo=o("xlm-roberta"),ARo=o(" \u2014 "),xG=a("a"),yRo=o("XLMRobertaForMultipleChoice"),LRo=o(" (XLM-RoBERTa model)"),xRo=l(),GF=a("li"),Dme=a("strong"),$Ro=o("xlm-roberta-xl"),kRo=o(" \u2014 "),$G=a("a"),SRo=o("XLMRobertaXLForMultipleChoice"),RRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),OF=a("li"),Gme=a("strong"),PRo=o("xlnet"),IRo=o(" \u2014 "),kG=a("a"),qRo=o("XLNetForMultipleChoice"),NRo=o(" (XLNet model)"),jRo=l(),VF=a("li"),Ome=a("strong"),DRo=o("yoso"),GRo=o(" \u2014 "),SG=a("a"),ORo=o("YosoForMultipleChoice"),VRo=o(" (YOSO model)"),XRo=l(),XF=a("p"),zRo=o("The model is set in evaluation mode by default using "),Vme=a("code"),QRo=o("model.eval()"),WRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),HRo=o("model.train()"),URo=l(),v(zF.$$.fragment),fIe=l(),Vi=a("h2"),QF=a("a"),zme=a("span"),v(aL.$$.fragment),JRo=l(),Qme=a("span"),YRo=o("AutoModelForNextSentencePrediction"),gIe=l(),Po=a("div"),v(nL.$$.fragment),KRo=l(),Xi=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),BG=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),sL=a("p"),nBo=o("This class cannot be instantiated directly using "),Wme=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),it=a("div"),v(lL.$$.fragment),dBo=l(),Hme=a("p"),cBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mBo=l(),zi=a("p"),fBo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),uBo=o("from_pretrained()"),pBo=o(" to load the model weights."),_Bo=l(),v(WF.$$.fragment),bBo=l(),oo=a("div"),v(iL.$$.fragment),FBo=l(),Jme=a("p"),vBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TBo=l(),Ra=a("p"),MBo=o("The model class to instantiate is selected based on the "),Yme=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),Yr=a("ul"),HF=a("li"),efe=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),IG=a("a"),SBo=o("BertForNextSentencePrediction"),RBo=o(" (BERT model)"),BBo=l(),UF=a("li"),ofe=a("strong"),PBo=o("fnet"),IBo=o(" \u2014 "),qG=a("a"),qBo=o("FNetForNextSentencePrediction"),NBo=o(" (FNet model)"),jBo=l(),JF=a("li"),rfe=a("strong"),DBo=o("megatron-bert"),GBo=o(" \u2014 "),NG=a("a"),OBo=o("MegatronBertForNextSentencePrediction"),VBo=o(" (MegatronBert model)"),XBo=l(),YF=a("li"),tfe=a("strong"),zBo=o("mobilebert"),QBo=o(" \u2014 "),jG=a("a"),WBo=o("MobileBertForNextSentencePrediction"),HBo=o(" (MobileBERT model)"),UBo=l(),KF=a("li"),afe=a("strong"),JBo=o("qdqbert"),YBo=o(" \u2014 "),DG=a("a"),KBo=o("QDQBertForNextSentencePrediction"),ZBo=o(" (QDQBert model)"),ePo=l(),ZF=a("p"),oPo=o("The model is set in evaluation mode by default using "),nfe=a("code"),rPo=o("model.eval()"),tPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),aPo=o("model.train()"),nPo=l(),v(ev.$$.fragment),hIe=l(),Qi=a("h2"),ov=a("a"),lfe=a("span"),v(dL.$$.fragment),sPo=l(),ife=a("span"),lPo=o("AutoModelForTokenClassification"),uIe=l(),Io=a("div"),v(cL.$$.fragment),iPo=l(),Wi=a("p"),dPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=a("a"),cPo=o("from_pretrained()"),mPo=o(" class method or the "),OG=a("a"),fPo=o("from_config()"),gPo=o(` class
method.`),hPo=l(),mL=a("p"),uPo=o("This class cannot be instantiated directly using "),dfe=a("code"),pPo=o("__init__()"),_Po=o(" (throws an error)."),bPo=l(),dt=a("div"),v(fL.$$.fragment),FPo=l(),cfe=a("p"),vPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TPo=l(),Hi=a("p"),MPo=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),EPo=o("not"),CPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),wPo=o("from_pretrained()"),APo=o(" to load the model weights."),yPo=l(),v(rv.$$.fragment),LPo=l(),ro=a("div"),v(gL.$$.fragment),xPo=l(),ffe=a("p"),$Po=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kPo=l(),Ba=a("p"),SPo=o("The model class to instantiate is selected based on the "),gfe=a("code"),RPo=o("model_type"),BPo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),PPo=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),U=a("ul"),tv=a("li"),pfe=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),XG=a("a"),OPo=o("AlbertForTokenClassification"),VPo=o(" (ALBERT model)"),XPo=l(),av=a("li"),_fe=a("strong"),zPo=o("bert"),QPo=o(" \u2014 "),zG=a("a"),WPo=o("BertForTokenClassification"),HPo=o(" (BERT model)"),UPo=l(),nv=a("li"),bfe=a("strong"),JPo=o("big_bird"),YPo=o(" \u2014 "),QG=a("a"),KPo=o("BigBirdForTokenClassification"),ZPo=o(" (BigBird model)"),eIo=l(),sv=a("li"),Ffe=a("strong"),oIo=o("camembert"),rIo=o(" \u2014 "),WG=a("a"),tIo=o("CamembertForTokenClassification"),aIo=o(" (CamemBERT model)"),nIo=l(),lv=a("li"),vfe=a("strong"),sIo=o("canine"),lIo=o(" \u2014 "),HG=a("a"),iIo=o("CanineForTokenClassification"),dIo=o(" (Canine model)"),cIo=l(),iv=a("li"),Tfe=a("strong"),mIo=o("convbert"),fIo=o(" \u2014 "),UG=a("a"),gIo=o("ConvBertForTokenClassification"),hIo=o(" (ConvBERT model)"),uIo=l(),dv=a("li"),Mfe=a("strong"),pIo=o("data2vec-text"),_Io=o(" \u2014 "),JG=a("a"),bIo=o("Data2VecTextForTokenClassification"),FIo=o(" (Data2VecText model)"),vIo=l(),cv=a("li"),Efe=a("strong"),TIo=o("deberta"),MIo=o(" \u2014 "),YG=a("a"),EIo=o("DebertaForTokenClassification"),CIo=o(" (DeBERTa model)"),wIo=l(),mv=a("li"),Cfe=a("strong"),AIo=o("deberta-v2"),yIo=o(" \u2014 "),KG=a("a"),LIo=o("DebertaV2ForTokenClassification"),xIo=o(" (DeBERTa-v2 model)"),$Io=l(),fv=a("li"),wfe=a("strong"),kIo=o("distilbert"),SIo=o(" \u2014 "),ZG=a("a"),RIo=o("DistilBertForTokenClassification"),BIo=o(" (DistilBERT model)"),PIo=l(),gv=a("li"),Afe=a("strong"),IIo=o("electra"),qIo=o(" \u2014 "),eO=a("a"),NIo=o("ElectraForTokenClassification"),jIo=o(" (ELECTRA model)"),DIo=l(),hv=a("li"),yfe=a("strong"),GIo=o("flaubert"),OIo=o(" \u2014 "),oO=a("a"),VIo=o("FlaubertForTokenClassification"),XIo=o(" (FlauBERT model)"),zIo=l(),uv=a("li"),Lfe=a("strong"),QIo=o("fnet"),WIo=o(" \u2014 "),rO=a("a"),HIo=o("FNetForTokenClassification"),UIo=o(" (FNet model)"),JIo=l(),pv=a("li"),xfe=a("strong"),YIo=o("funnel"),KIo=o(" \u2014 "),tO=a("a"),ZIo=o("FunnelForTokenClassification"),eqo=o(" (Funnel Transformer model)"),oqo=l(),_v=a("li"),$fe=a("strong"),rqo=o("gpt2"),tqo=o(" \u2014 "),aO=a("a"),aqo=o("GPT2ForTokenClassification"),nqo=o(" (OpenAI GPT-2 model)"),sqo=l(),bv=a("li"),kfe=a("strong"),lqo=o("ibert"),iqo=o(" \u2014 "),nO=a("a"),dqo=o("IBertForTokenClassification"),cqo=o(" (I-BERT model)"),mqo=l(),Fv=a("li"),Sfe=a("strong"),fqo=o("layoutlm"),gqo=o(" \u2014 "),sO=a("a"),hqo=o("LayoutLMForTokenClassification"),uqo=o(" (LayoutLM model)"),pqo=l(),vv=a("li"),Rfe=a("strong"),_qo=o("layoutlmv2"),bqo=o(" \u2014 "),lO=a("a"),Fqo=o("LayoutLMv2ForTokenClassification"),vqo=o(" (LayoutLMv2 model)"),Tqo=l(),Tv=a("li"),Bfe=a("strong"),Mqo=o("longformer"),Eqo=o(" \u2014 "),iO=a("a"),Cqo=o("LongformerForTokenClassification"),wqo=o(" (Longformer model)"),Aqo=l(),Mv=a("li"),Pfe=a("strong"),yqo=o("megatron-bert"),Lqo=o(" \u2014 "),dO=a("a"),xqo=o("MegatronBertForTokenClassification"),$qo=o(" (MegatronBert model)"),kqo=l(),Ev=a("li"),Ife=a("strong"),Sqo=o("mobilebert"),Rqo=o(" \u2014 "),cO=a("a"),Bqo=o("MobileBertForTokenClassification"),Pqo=o(" (MobileBERT model)"),Iqo=l(),Cv=a("li"),qfe=a("strong"),qqo=o("mpnet"),Nqo=o(" \u2014 "),mO=a("a"),jqo=o("MPNetForTokenClassification"),Dqo=o(" (MPNet model)"),Gqo=l(),wv=a("li"),Nfe=a("strong"),Oqo=o("nystromformer"),Vqo=o(" \u2014 "),fO=a("a"),Xqo=o("NystromformerForTokenClassification"),zqo=o(" (Nystromformer model)"),Qqo=l(),Av=a("li"),jfe=a("strong"),Wqo=o("qdqbert"),Hqo=o(" \u2014 "),gO=a("a"),Uqo=o("QDQBertForTokenClassification"),Jqo=o(" (QDQBert model)"),Yqo=l(),yv=a("li"),Dfe=a("strong"),Kqo=o("rembert"),Zqo=o(" \u2014 "),hO=a("a"),eNo=o("RemBertForTokenClassification"),oNo=o(" (RemBERT model)"),rNo=l(),Lv=a("li"),Gfe=a("strong"),tNo=o("roberta"),aNo=o(" \u2014 "),uO=a("a"),nNo=o("RobertaForTokenClassification"),sNo=o(" (RoBERTa model)"),lNo=l(),xv=a("li"),Ofe=a("strong"),iNo=o("roformer"),dNo=o(" \u2014 "),pO=a("a"),cNo=o("RoFormerForTokenClassification"),mNo=o(" (RoFormer model)"),fNo=l(),$v=a("li"),Vfe=a("strong"),gNo=o("squeezebert"),hNo=o(" \u2014 "),_O=a("a"),uNo=o("SqueezeBertForTokenClassification"),pNo=o(" (SqueezeBERT model)"),_No=l(),kv=a("li"),Xfe=a("strong"),bNo=o("xlm"),FNo=o(" \u2014 "),bO=a("a"),vNo=o("XLMForTokenClassification"),TNo=o(" (XLM model)"),MNo=l(),Sv=a("li"),zfe=a("strong"),ENo=o("xlm-roberta"),CNo=o(" \u2014 "),FO=a("a"),wNo=o("XLMRobertaForTokenClassification"),ANo=o(" (XLM-RoBERTa model)"),yNo=l(),Rv=a("li"),Qfe=a("strong"),LNo=o("xlm-roberta-xl"),xNo=o(" \u2014 "),vO=a("a"),$No=o("XLMRobertaXLForTokenClassification"),kNo=o(" (XLM-RoBERTa-XL model)"),SNo=l(),Bv=a("li"),Wfe=a("strong"),RNo=o("xlnet"),BNo=o(" \u2014 "),TO=a("a"),PNo=o("XLNetForTokenClassification"),INo=o(" (XLNet model)"),qNo=l(),Pv=a("li"),Hfe=a("strong"),NNo=o("yoso"),jNo=o(" \u2014 "),MO=a("a"),DNo=o("YosoForTokenClassification"),GNo=o(" (YOSO model)"),ONo=l(),Iv=a("p"),VNo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),XNo=o("model.eval()"),zNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),QNo=o("model.train()"),WNo=l(),v(qv.$$.fragment),pIe=l(),Ui=a("h2"),Nv=a("a"),Yfe=a("span"),v(hL.$$.fragment),HNo=l(),Kfe=a("span"),UNo=o("AutoModelForQuestionAnswering"),_Ie=l(),qo=a("div"),v(uL.$$.fragment),JNo=l(),Ji=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=a("a"),KNo=o("from_pretrained()"),ZNo=o(" class method or the "),CO=a("a"),ejo=o("from_config()"),ojo=o(` class
method.`),rjo=l(),pL=a("p"),tjo=o("This class cannot be instantiated directly using "),Zfe=a("code"),ajo=o("__init__()"),njo=o(" (throws an error)."),sjo=l(),ct=a("div"),v(_L.$$.fragment),ljo=l(),ege=a("p"),ijo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),djo=l(),Yi=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),mjo=o("not"),fjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),gjo=o("from_pretrained()"),hjo=o(" to load the model weights."),ujo=l(),v(jv.$$.fragment),pjo=l(),to=a("div"),v(bL.$$.fragment),_jo=l(),rge=a("p"),bjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fjo=l(),Pa=a("p"),vjo=o("The model class to instantiate is selected based on the "),tge=a("code"),Tjo=o("model_type"),Mjo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),Ejo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),wjo=o("pretrained_model_name_or_path"),Ajo=o(":"),yjo=l(),O=a("ul"),Dv=a("li"),sge=a("strong"),Ljo=o("albert"),xjo=o(" \u2014 "),AO=a("a"),$jo=o("AlbertForQuestionAnswering"),kjo=o(" (ALBERT model)"),Sjo=l(),Gv=a("li"),lge=a("strong"),Rjo=o("bart"),Bjo=o(" \u2014 "),yO=a("a"),Pjo=o("BartForQuestionAnswering"),Ijo=o(" (BART model)"),qjo=l(),Ov=a("li"),ige=a("strong"),Njo=o("bert"),jjo=o(" \u2014 "),LO=a("a"),Djo=o("BertForQuestionAnswering"),Gjo=o(" (BERT model)"),Ojo=l(),Vv=a("li"),dge=a("strong"),Vjo=o("big_bird"),Xjo=o(" \u2014 "),xO=a("a"),zjo=o("BigBirdForQuestionAnswering"),Qjo=o(" (BigBird model)"),Wjo=l(),Xv=a("li"),cge=a("strong"),Hjo=o("bigbird_pegasus"),Ujo=o(" \u2014 "),$O=a("a"),Jjo=o("BigBirdPegasusForQuestionAnswering"),Yjo=o(" (BigBirdPegasus model)"),Kjo=l(),zv=a("li"),mge=a("strong"),Zjo=o("camembert"),eDo=o(" \u2014 "),kO=a("a"),oDo=o("CamembertForQuestionAnswering"),rDo=o(" (CamemBERT model)"),tDo=l(),Qv=a("li"),fge=a("strong"),aDo=o("canine"),nDo=o(" \u2014 "),SO=a("a"),sDo=o("CanineForQuestionAnswering"),lDo=o(" (Canine model)"),iDo=l(),Wv=a("li"),gge=a("strong"),dDo=o("convbert"),cDo=o(" \u2014 "),RO=a("a"),mDo=o("ConvBertForQuestionAnswering"),fDo=o(" (ConvBERT model)"),gDo=l(),Hv=a("li"),hge=a("strong"),hDo=o("data2vec-text"),uDo=o(" \u2014 "),BO=a("a"),pDo=o("Data2VecTextForQuestionAnswering"),_Do=o(" (Data2VecText model)"),bDo=l(),Uv=a("li"),uge=a("strong"),FDo=o("deberta"),vDo=o(" \u2014 "),PO=a("a"),TDo=o("DebertaForQuestionAnswering"),MDo=o(" (DeBERTa model)"),EDo=l(),Jv=a("li"),pge=a("strong"),CDo=o("deberta-v2"),wDo=o(" \u2014 "),IO=a("a"),ADo=o("DebertaV2ForQuestionAnswering"),yDo=o(" (DeBERTa-v2 model)"),LDo=l(),Yv=a("li"),_ge=a("strong"),xDo=o("distilbert"),$Do=o(" \u2014 "),qO=a("a"),kDo=o("DistilBertForQuestionAnswering"),SDo=o(" (DistilBERT model)"),RDo=l(),Kv=a("li"),bge=a("strong"),BDo=o("electra"),PDo=o(" \u2014 "),NO=a("a"),IDo=o("ElectraForQuestionAnswering"),qDo=o(" (ELECTRA model)"),NDo=l(),Zv=a("li"),Fge=a("strong"),jDo=o("flaubert"),DDo=o(" \u2014 "),jO=a("a"),GDo=o("FlaubertForQuestionAnsweringSimple"),ODo=o(" (FlauBERT model)"),VDo=l(),e1=a("li"),vge=a("strong"),XDo=o("fnet"),zDo=o(" \u2014 "),DO=a("a"),QDo=o("FNetForQuestionAnswering"),WDo=o(" (FNet model)"),HDo=l(),o1=a("li"),Tge=a("strong"),UDo=o("funnel"),JDo=o(" \u2014 "),GO=a("a"),YDo=o("FunnelForQuestionAnswering"),KDo=o(" (Funnel Transformer model)"),ZDo=l(),r1=a("li"),Mge=a("strong"),eGo=o("gptj"),oGo=o(" \u2014 "),OO=a("a"),rGo=o("GPTJForQuestionAnswering"),tGo=o(" (GPT-J model)"),aGo=l(),t1=a("li"),Ege=a("strong"),nGo=o("ibert"),sGo=o(" \u2014 "),VO=a("a"),lGo=o("IBertForQuestionAnswering"),iGo=o(" (I-BERT model)"),dGo=l(),a1=a("li"),Cge=a("strong"),cGo=o("layoutlmv2"),mGo=o(" \u2014 "),XO=a("a"),fGo=o("LayoutLMv2ForQuestionAnswering"),gGo=o(" (LayoutLMv2 model)"),hGo=l(),n1=a("li"),wge=a("strong"),uGo=o("led"),pGo=o(" \u2014 "),zO=a("a"),_Go=o("LEDForQuestionAnswering"),bGo=o(" (LED model)"),FGo=l(),s1=a("li"),Age=a("strong"),vGo=o("longformer"),TGo=o(" \u2014 "),QO=a("a"),MGo=o("LongformerForQuestionAnswering"),EGo=o(" (Longformer model)"),CGo=l(),l1=a("li"),yge=a("strong"),wGo=o("lxmert"),AGo=o(" \u2014 "),WO=a("a"),yGo=o("LxmertForQuestionAnswering"),LGo=o(" (LXMERT model)"),xGo=l(),i1=a("li"),Lge=a("strong"),$Go=o("mbart"),kGo=o(" \u2014 "),HO=a("a"),SGo=o("MBartForQuestionAnswering"),RGo=o(" (mBART model)"),BGo=l(),d1=a("li"),xge=a("strong"),PGo=o("megatron-bert"),IGo=o(" \u2014 "),UO=a("a"),qGo=o("MegatronBertForQuestionAnswering"),NGo=o(" (MegatronBert model)"),jGo=l(),c1=a("li"),$ge=a("strong"),DGo=o("mobilebert"),GGo=o(" \u2014 "),JO=a("a"),OGo=o("MobileBertForQuestionAnswering"),VGo=o(" (MobileBERT model)"),XGo=l(),m1=a("li"),kge=a("strong"),zGo=o("mpnet"),QGo=o(" \u2014 "),YO=a("a"),WGo=o("MPNetForQuestionAnswering"),HGo=o(" (MPNet model)"),UGo=l(),f1=a("li"),Sge=a("strong"),JGo=o("nystromformer"),YGo=o(" \u2014 "),KO=a("a"),KGo=o("NystromformerForQuestionAnswering"),ZGo=o(" (Nystromformer model)"),eOo=l(),g1=a("li"),Rge=a("strong"),oOo=o("qdqbert"),rOo=o(" \u2014 "),ZO=a("a"),tOo=o("QDQBertForQuestionAnswering"),aOo=o(" (QDQBert model)"),nOo=l(),h1=a("li"),Bge=a("strong"),sOo=o("reformer"),lOo=o(" \u2014 "),eV=a("a"),iOo=o("ReformerForQuestionAnswering"),dOo=o(" (Reformer model)"),cOo=l(),u1=a("li"),Pge=a("strong"),mOo=o("rembert"),fOo=o(" \u2014 "),oV=a("a"),gOo=o("RemBertForQuestionAnswering"),hOo=o(" (RemBERT model)"),uOo=l(),p1=a("li"),Ige=a("strong"),pOo=o("roberta"),_Oo=o(" \u2014 "),rV=a("a"),bOo=o("RobertaForQuestionAnswering"),FOo=o(" (RoBERTa model)"),vOo=l(),_1=a("li"),qge=a("strong"),TOo=o("roformer"),MOo=o(" \u2014 "),tV=a("a"),EOo=o("RoFormerForQuestionAnswering"),COo=o(" (RoFormer model)"),wOo=l(),b1=a("li"),Nge=a("strong"),AOo=o("splinter"),yOo=o(" \u2014 "),aV=a("a"),LOo=o("SplinterForQuestionAnswering"),xOo=o(" (Splinter model)"),$Oo=l(),F1=a("li"),jge=a("strong"),kOo=o("squeezebert"),SOo=o(" \u2014 "),nV=a("a"),ROo=o("SqueezeBertForQuestionAnswering"),BOo=o(" (SqueezeBERT model)"),POo=l(),v1=a("li"),Dge=a("strong"),IOo=o("xlm"),qOo=o(" \u2014 "),sV=a("a"),NOo=o("XLMForQuestionAnsweringSimple"),jOo=o(" (XLM model)"),DOo=l(),T1=a("li"),Gge=a("strong"),GOo=o("xlm-roberta"),OOo=o(" \u2014 "),lV=a("a"),VOo=o("XLMRobertaForQuestionAnswering"),XOo=o(" (XLM-RoBERTa model)"),zOo=l(),M1=a("li"),Oge=a("strong"),QOo=o("xlm-roberta-xl"),WOo=o(" \u2014 "),iV=a("a"),HOo=o("XLMRobertaXLForQuestionAnswering"),UOo=o(" (XLM-RoBERTa-XL model)"),JOo=l(),E1=a("li"),Vge=a("strong"),YOo=o("xlnet"),KOo=o(" \u2014 "),dV=a("a"),ZOo=o("XLNetForQuestionAnsweringSimple"),eVo=o(" (XLNet model)"),oVo=l(),C1=a("li"),Xge=a("strong"),rVo=o("yoso"),tVo=o(" \u2014 "),cV=a("a"),aVo=o("YosoForQuestionAnswering"),nVo=o(" (YOSO model)"),sVo=l(),w1=a("p"),lVo=o("The model is set in evaluation mode by default using "),zge=a("code"),iVo=o("model.eval()"),dVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),cVo=o("model.train()"),mVo=l(),v(A1.$$.fragment),bIe=l(),Ki=a("h2"),y1=a("a"),Wge=a("span"),v(FL.$$.fragment),fVo=l(),Hge=a("span"),gVo=o("AutoModelForTableQuestionAnswering"),FIe=l(),No=a("div"),v(vL.$$.fragment),hVo=l(),Zi=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mV=a("a"),pVo=o("from_pretrained()"),_Vo=o(" class method or the "),fV=a("a"),bVo=o("from_config()"),FVo=o(` class
method.`),vVo=l(),TL=a("p"),TVo=o("This class cannot be instantiated directly using "),Uge=a("code"),MVo=o("__init__()"),EVo=o(" (throws an error)."),CVo=l(),mt=a("div"),v(ML.$$.fragment),wVo=l(),Jge=a("p"),AVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yVo=l(),ed=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),xVo=o("not"),$Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),v(L1.$$.fragment),BVo=l(),ao=a("div"),v(EL.$$.fragment),PVo=l(),Kge=a("p"),IVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qVo=l(),Ia=a("p"),NVo=o("The model class to instantiate is selected based on the "),Zge=a("code"),jVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),GVo=o("pretrained_model_name_or_path"),OVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),VVo=o("pretrained_model_name_or_path"),XVo=o(":"),zVo=l(),rhe=a("ul"),x1=a("li"),the=a("strong"),QVo=o("tapas"),WVo=o(" \u2014 "),hV=a("a"),HVo=o("TapasForQuestionAnswering"),UVo=o(" (TAPAS model)"),JVo=l(),$1=a("p"),YVo=o("The model is set in evaluation mode by default using "),ahe=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),eXo=o("model.train()"),oXo=l(),v(k1.$$.fragment),vIe=l(),od=a("h2"),S1=a("a"),she=a("span"),v(CL.$$.fragment),rXo=l(),lhe=a("span"),tXo=o("AutoModelForImageClassification"),TIe=l(),jo=a("div"),v(wL.$$.fragment),aXo=l(),rd=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uV=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),pV=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),AL=a("p"),mXo=o("This class cannot be instantiated directly using "),ihe=a("code"),fXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),ft=a("div"),v(yL.$$.fragment),uXo=l(),dhe=a("p"),pXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Xo=l(),td=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),FXo=o("not"),vXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),v(R1.$$.fragment),CXo=l(),no=a("div"),v(LL.$$.fragment),wXo=l(),mhe=a("p"),AXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yXo=l(),qa=a("p"),LXo=o("The model class to instantiate is selected based on the "),fhe=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),RXo=o("pretrained_model_name_or_path"),BXo=o(":"),PXo=l(),ve=a("ul"),B1=a("li"),uhe=a("strong"),IXo=o("beit"),qXo=o(" \u2014 "),bV=a("a"),NXo=o("BeitForImageClassification"),jXo=o(" (BEiT model)"),DXo=l(),P1=a("li"),phe=a("strong"),GXo=o("convnext"),OXo=o(" \u2014 "),FV=a("a"),VXo=o("ConvNextForImageClassification"),XXo=o(" (ConvNext model)"),zXo=l(),I1=a("li"),_he=a("strong"),QXo=o("data2vec-vision"),WXo=o(" \u2014 "),vV=a("a"),HXo=o("Data2VecVisionForImageClassification"),UXo=o(" (Data2VecVision model)"),JXo=l(),Bs=a("li"),bhe=a("strong"),YXo=o("deit"),KXo=o(" \u2014 "),TV=a("a"),ZXo=o("DeiTForImageClassification"),ezo=o(" or "),MV=a("a"),ozo=o("DeiTForImageClassificationWithTeacher"),rzo=o(" (DeiT model)"),tzo=l(),q1=a("li"),Fhe=a("strong"),azo=o("imagegpt"),nzo=o(" \u2014 "),EV=a("a"),szo=o("ImageGPTForImageClassification"),lzo=o(" (ImageGPT model)"),izo=l(),gt=a("li"),vhe=a("strong"),dzo=o("perceiver"),czo=o(" \u2014 "),CV=a("a"),mzo=o("PerceiverForImageClassificationLearned"),fzo=o(" or "),wV=a("a"),gzo=o("PerceiverForImageClassificationFourier"),hzo=o(" or "),AV=a("a"),uzo=o("PerceiverForImageClassificationConvProcessing"),pzo=o(" (Perceiver model)"),_zo=l(),N1=a("li"),The=a("strong"),bzo=o("poolformer"),Fzo=o(" \u2014 "),yV=a("a"),vzo=o("PoolFormerForImageClassification"),Tzo=o(" (PoolFormer model)"),Mzo=l(),j1=a("li"),Mhe=a("strong"),Ezo=o("regnet"),Czo=o(" \u2014 "),LV=a("a"),wzo=o("RegNetForImageClassification"),Azo=o(" (RegNet model)"),yzo=l(),D1=a("li"),Ehe=a("strong"),Lzo=o("resnet"),xzo=o(" \u2014 "),xV=a("a"),$zo=o("ResNetForImageClassification"),kzo=o(" (ResNet model)"),Szo=l(),G1=a("li"),Che=a("strong"),Rzo=o("segformer"),Bzo=o(" \u2014 "),$V=a("a"),Pzo=o("SegformerForImageClassification"),Izo=o(" (SegFormer model)"),qzo=l(),O1=a("li"),whe=a("strong"),Nzo=o("swin"),jzo=o(" \u2014 "),kV=a("a"),Dzo=o("SwinForImageClassification"),Gzo=o(" (Swin model)"),Ozo=l(),V1=a("li"),Ahe=a("strong"),Vzo=o("van"),Xzo=o(" \u2014 "),SV=a("a"),zzo=o("VanForImageClassification"),Qzo=o(" (VAN model)"),Wzo=l(),X1=a("li"),yhe=a("strong"),Hzo=o("vit"),Uzo=o(" \u2014 "),RV=a("a"),Jzo=o("ViTForImageClassification"),Yzo=o(" (ViT model)"),Kzo=l(),z1=a("p"),Zzo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),rQo=o("model.train()"),tQo=l(),v(Q1.$$.fragment),MIe=l(),ad=a("h2"),W1=a("a"),$he=a("span"),v(xL.$$.fragment),aQo=l(),khe=a("span"),nQo=o("AutoModelForVision2Seq"),EIe=l(),Do=a("div"),v($L.$$.fragment),sQo=l(),nd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),PV=a("a"),cQo=o("from_config()"),mQo=o(` class
method.`),fQo=l(),kL=a("p"),gQo=o("This class cannot be instantiated directly using "),She=a("code"),hQo=o("__init__()"),uQo=o(" (throws an error)."),pQo=l(),ht=a("div"),v(SL.$$.fragment),_Qo=l(),Rhe=a("p"),bQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FQo=l(),sd=a("p"),vQo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),v(H1.$$.fragment),AQo=l(),so=a("div"),v(RL.$$.fragment),yQo=l(),Phe=a("p"),LQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xQo=l(),Na=a("p"),$Qo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),RQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),PQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),jhe=a("ul"),U1=a("li"),Dhe=a("strong"),NQo=o("vision-encoder-decoder"),jQo=o(" \u2014 "),qV=a("a"),DQo=o("VisionEncoderDecoderModel"),GQo=o(" (Vision Encoder decoder model)"),OQo=l(),J1=a("p"),VQo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),XQo=o("model.eval()"),zQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),QQo=o("model.train()"),WQo=l(),v(Y1.$$.fragment),CIe=l(),ld=a("h2"),K1=a("a"),Vhe=a("span"),v(BL.$$.fragment),HQo=l(),Xhe=a("span"),UQo=o("AutoModelForAudioClassification"),wIe=l(),Go=a("div"),v(PL.$$.fragment),JQo=l(),id=a("p"),YQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=a("a"),KQo=o("from_pretrained()"),ZQo=o(" class method or the "),jV=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),IL=a("p"),tWo=o("This class cannot be instantiated directly using "),zhe=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),ut=a("div"),v(qL.$$.fragment),lWo=l(),Qhe=a("p"),iWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dWo=l(),dd=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),mWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),uWo=l(),v(Z1.$$.fragment),pWo=l(),lo=a("div"),v(NL.$$.fragment),_Wo=l(),Hhe=a("p"),bWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FWo=l(),ja=a("p"),vWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),TWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),yWo=l(),Ne=a("ul"),eT=a("li"),Khe=a("strong"),LWo=o("data2vec-audio"),xWo=o(" \u2014 "),GV=a("a"),$Wo=o("Data2VecAudioForSequenceClassification"),kWo=o(" (Data2VecAudio model)"),SWo=l(),oT=a("li"),Zhe=a("strong"),RWo=o("hubert"),BWo=o(" \u2014 "),OV=a("a"),PWo=o("HubertForSequenceClassification"),IWo=o(" (Hubert model)"),qWo=l(),rT=a("li"),eue=a("strong"),NWo=o("sew"),jWo=o(" \u2014 "),VV=a("a"),DWo=o("SEWForSequenceClassification"),GWo=o(" (SEW model)"),OWo=l(),tT=a("li"),oue=a("strong"),VWo=o("sew-d"),XWo=o(" \u2014 "),XV=a("a"),zWo=o("SEWDForSequenceClassification"),QWo=o(" (SEW-D model)"),WWo=l(),aT=a("li"),rue=a("strong"),HWo=o("unispeech"),UWo=o(" \u2014 "),zV=a("a"),JWo=o("UniSpeechForSequenceClassification"),YWo=o(" (UniSpeech model)"),KWo=l(),nT=a("li"),tue=a("strong"),ZWo=o("unispeech-sat"),eHo=o(" \u2014 "),QV=a("a"),oHo=o("UniSpeechSatForSequenceClassification"),rHo=o(" (UniSpeechSat model)"),tHo=l(),sT=a("li"),aue=a("strong"),aHo=o("wav2vec2"),nHo=o(" \u2014 "),WV=a("a"),sHo=o("Wav2Vec2ForSequenceClassification"),lHo=o(" (Wav2Vec2 model)"),iHo=l(),lT=a("li"),nue=a("strong"),dHo=o("wavlm"),cHo=o(" \u2014 "),HV=a("a"),mHo=o("WavLMForSequenceClassification"),fHo=o(" (WavLM model)"),gHo=l(),iT=a("p"),hHo=o("The model is set in evaluation mode by default using "),sue=a("code"),uHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),_Ho=o("model.train()"),bHo=l(),v(dT.$$.fragment),AIe=l(),cd=a("h2"),cT=a("a"),iue=a("span"),v(jL.$$.fragment),FHo=l(),due=a("span"),vHo=o("AutoModelForAudioFrameClassification"),yIe=l(),Oo=a("div"),v(DL.$$.fragment),THo=l(),md=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),JV=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),GL=a("p"),LHo=o("This class cannot be instantiated directly using "),cue=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),pt=a("div"),v(OL.$$.fragment),SHo=l(),mue=a("p"),RHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BHo=l(),fd=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),v(mT.$$.fragment),GHo=l(),io=a("div"),v(VL.$$.fragment),OHo=l(),gue=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XHo=l(),Da=a("p"),zHo=o("The model class to instantiate is selected based on the "),hue=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),Ga=a("ul"),fT=a("li"),_ue=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),KV=a("a"),oUo=o("Data2VecAudioForAudioFrameClassification"),rUo=o(" (Data2VecAudio model)"),tUo=l(),gT=a("li"),bue=a("strong"),aUo=o("unispeech-sat"),nUo=o(" \u2014 "),ZV=a("a"),sUo=o("UniSpeechSatForAudioFrameClassification"),lUo=o(" (UniSpeechSat model)"),iUo=l(),hT=a("li"),Fue=a("strong"),dUo=o("wav2vec2"),cUo=o(" \u2014 "),eX=a("a"),mUo=o("Wav2Vec2ForAudioFrameClassification"),fUo=o(" (Wav2Vec2 model)"),gUo=l(),uT=a("li"),vue=a("strong"),hUo=o("wavlm"),uUo=o(" \u2014 "),oX=a("a"),pUo=o("WavLMForAudioFrameClassification"),_Uo=o(" (WavLM model)"),bUo=l(),pT=a("p"),FUo=o("The model is set in evaluation mode by default using "),Tue=a("code"),vUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),MUo=o("model.train()"),EUo=l(),v(_T.$$.fragment),LIe=l(),gd=a("h2"),bT=a("a"),Eue=a("span"),v(XL.$$.fragment),CUo=l(),Cue=a("span"),wUo=o("AutoModelForCTC"),xIe=l(),Vo=a("div"),v(zL.$$.fragment),AUo=l(),hd=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),tX=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),QL=a("p"),RUo=o("This class cannot be instantiated directly using "),wue=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),IUo=l(),_t=a("div"),v(WL.$$.fragment),qUo=l(),Aue=a("p"),NUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jUo=l(),ud=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),v(FT.$$.fragment),QUo=l(),co=a("div"),v(HL.$$.fragment),WUo=l(),Lue=a("p"),HUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),UUo=l(),Oa=a("p"),JUo=o("The model class to instantiate is selected based on the "),xue=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),je=a("ul"),vT=a("li"),Sue=a("strong"),aJo=o("data2vec-audio"),nJo=o(" \u2014 "),nX=a("a"),sJo=o("Data2VecAudioForCTC"),lJo=o(" (Data2VecAudio model)"),iJo=l(),TT=a("li"),Rue=a("strong"),dJo=o("hubert"),cJo=o(" \u2014 "),sX=a("a"),mJo=o("HubertForCTC"),fJo=o(" (Hubert model)"),gJo=l(),MT=a("li"),Bue=a("strong"),hJo=o("sew"),uJo=o(" \u2014 "),lX=a("a"),pJo=o("SEWForCTC"),_Jo=o(" (SEW model)"),bJo=l(),ET=a("li"),Pue=a("strong"),FJo=o("sew-d"),vJo=o(" \u2014 "),iX=a("a"),TJo=o("SEWDForCTC"),MJo=o(" (SEW-D model)"),EJo=l(),CT=a("li"),Iue=a("strong"),CJo=o("unispeech"),wJo=o(" \u2014 "),dX=a("a"),AJo=o("UniSpeechForCTC"),yJo=o(" (UniSpeech model)"),LJo=l(),wT=a("li"),que=a("strong"),xJo=o("unispeech-sat"),$Jo=o(" \u2014 "),cX=a("a"),kJo=o("UniSpeechSatForCTC"),SJo=o(" (UniSpeechSat model)"),RJo=l(),AT=a("li"),Nue=a("strong"),BJo=o("wav2vec2"),PJo=o(" \u2014 "),mX=a("a"),IJo=o("Wav2Vec2ForCTC"),qJo=o(" (Wav2Vec2 model)"),NJo=l(),yT=a("li"),jue=a("strong"),jJo=o("wavlm"),DJo=o(" \u2014 "),fX=a("a"),GJo=o("WavLMForCTC"),OJo=o(" (WavLM model)"),VJo=l(),LT=a("p"),XJo=o("The model is set in evaluation mode by default using "),Due=a("code"),zJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),WJo=o("model.train()"),HJo=l(),v(xT.$$.fragment),$Ie=l(),pd=a("h2"),$T=a("a"),Oue=a("span"),v(UL.$$.fragment),UJo=l(),Vue=a("span"),JJo=o("AutoModelForSpeechSeq2Seq"),kIe=l(),Xo=a("div"),v(JL.$$.fragment),YJo=l(),_d=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),hX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),YL=a("p"),aYo=o("This class cannot be instantiated directly using "),Xue=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),bt=a("div"),v(KL.$$.fragment),iYo=l(),zue=a("p"),dYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cYo=l(),bd=a("p"),mYo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),fYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),hYo=o("from_pretrained()"),uYo=o(" to load the model weights."),pYo=l(),v(kT.$$.fragment),_Yo=l(),mo=a("div"),v(ZL.$$.fragment),bYo=l(),Wue=a("p"),FYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vYo=l(),Va=a("p"),TYo=o("The model class to instantiate is selected based on the "),Hue=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),e8=a("ul"),ST=a("li"),Yue=a("strong"),xYo=o("speech-encoder-decoder"),$Yo=o(" \u2014 "),pX=a("a"),kYo=o("SpeechEncoderDecoderModel"),SYo=o(" (Speech Encoder decoder model)"),RYo=l(),RT=a("li"),Kue=a("strong"),BYo=o("speech_to_text"),PYo=o(" \u2014 "),_X=a("a"),IYo=o("Speech2TextForConditionalGeneration"),qYo=o(" (Speech2Text model)"),NYo=l(),BT=a("p"),jYo=o("The model is set in evaluation mode by default using "),Zue=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),OYo=o("model.train()"),VYo=l(),v(PT.$$.fragment),SIe=l(),Fd=a("h2"),IT=a("a"),ope=a("span"),v(o8.$$.fragment),XYo=l(),rpe=a("span"),zYo=o("AutoModelForAudioXVector"),RIe=l(),zo=a("div"),v(r8.$$.fragment),QYo=l(),vd=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),FX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),t8=a("p"),ZYo=o("This class cannot be instantiated directly using "),tpe=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),Ft=a("div"),v(a8.$$.fragment),tKo=l(),ape=a("p"),aKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nKo=l(),Td=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),mKo=l(),v(qT.$$.fragment),fKo=l(),fo=a("div"),v(n8.$$.fragment),gKo=l(),spe=a("p"),hKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uKo=l(),Xa=a("p"),pKo=o("The model class to instantiate is selected based on the "),lpe=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),FKo=o("pretrained_model_name_or_path"),vKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),za=a("ul"),NT=a("li"),cpe=a("strong"),CKo=o("data2vec-audio"),wKo=o(" \u2014 "),TX=a("a"),AKo=o("Data2VecAudioForXVector"),yKo=o(" (Data2VecAudio model)"),LKo=l(),jT=a("li"),mpe=a("strong"),xKo=o("unispeech-sat"),$Ko=o(" \u2014 "),MX=a("a"),kKo=o("UniSpeechSatForXVector"),SKo=o(" (UniSpeechSat model)"),RKo=l(),DT=a("li"),fpe=a("strong"),BKo=o("wav2vec2"),PKo=o(" \u2014 "),EX=a("a"),IKo=o("Wav2Vec2ForXVector"),qKo=o(" (Wav2Vec2 model)"),NKo=l(),GT=a("li"),gpe=a("strong"),jKo=o("wavlm"),DKo=o(" \u2014 "),CX=a("a"),GKo=o("WavLMForXVector"),OKo=o(" (WavLM model)"),VKo=l(),OT=a("p"),XKo=o("The model is set in evaluation mode by default using "),hpe=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),WKo=o("model.train()"),HKo=l(),v(VT.$$.fragment),BIe=l(),Md=a("h2"),XT=a("a"),ppe=a("span"),v(s8.$$.fragment),UKo=l(),_pe=a("span"),JKo=o("AutoModelForMaskedImageModeling"),PIe=l(),Qo=a("div"),v(l8.$$.fragment),YKo=l(),Ed=a("p"),KKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=a("a"),ZKo=o("from_pretrained()"),eZo=o(" class method or the "),AX=a("a"),oZo=o("from_config()"),rZo=o(` class
method.`),tZo=l(),i8=a("p"),aZo=o("This class cannot be instantiated directly using "),bpe=a("code"),nZo=o("__init__()"),sZo=o(" (throws an error)."),lZo=l(),vt=a("div"),v(d8.$$.fragment),iZo=l(),Fpe=a("p"),dZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cZo=l(),Cd=a("p"),mZo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),fZo=o("not"),gZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),hZo=o("from_pretrained()"),uZo=o(" to load the model weights."),pZo=l(),v(zT.$$.fragment),_Zo=l(),go=a("div"),v(c8.$$.fragment),bZo=l(),Tpe=a("p"),FZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),vZo=l(),Qa=a("p"),TZo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),MZo=o("model_type"),EZo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(":"),LZo=l(),wd=a("ul"),QT=a("li"),wpe=a("strong"),xZo=o("deit"),$Zo=o(" \u2014 "),LX=a("a"),kZo=o("DeiTForMaskedImageModeling"),SZo=o(" (DeiT model)"),RZo=l(),WT=a("li"),Ape=a("strong"),BZo=o("swin"),PZo=o(" \u2014 "),xX=a("a"),IZo=o("SwinForMaskedImageModeling"),qZo=o(" (Swin model)"),NZo=l(),HT=a("li"),ype=a("strong"),jZo=o("vit"),DZo=o(" \u2014 "),$X=a("a"),GZo=o("ViTForMaskedImageModeling"),OZo=o(" (ViT model)"),VZo=l(),UT=a("p"),XZo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),zZo=o("model.eval()"),QZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),WZo=o("model.train()"),HZo=l(),v(JT.$$.fragment),IIe=l(),Ad=a("h2"),YT=a("a"),$pe=a("span"),v(m8.$$.fragment),UZo=l(),kpe=a("span"),JZo=o("AutoModelForObjectDetection"),qIe=l(),Wo=a("div"),v(f8.$$.fragment),YZo=l(),yd=a("p"),KZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=a("a"),ZZo=o("from_pretrained()"),eer=o(" class method or the "),SX=a("a"),oer=o("from_config()"),rer=o(` class
method.`),ter=l(),g8=a("p"),aer=o("This class cannot be instantiated directly using "),Spe=a("code"),ner=o("__init__()"),ser=o(" (throws an error)."),ler=l(),Tt=a("div"),v(h8.$$.fragment),ier=l(),Rpe=a("p"),der=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cer=l(),Ld=a("p"),mer=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),fer=o("not"),ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),her=o("from_pretrained()"),uer=o(" to load the model weights."),per=l(),v(KT.$$.fragment),_er=l(),ho=a("div"),v(u8.$$.fragment),ber=l(),Ppe=a("p"),Fer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ver=l(),Wa=a("p"),Ter=o("The model class to instantiate is selected based on the "),Ipe=a("code"),Mer=o("model_type"),Eer=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),Aer=o("pretrained_model_name_or_path"),yer=o(":"),Ler=l(),p8=a("ul"),ZT=a("li"),jpe=a("strong"),xer=o("detr"),$er=o(" \u2014 "),BX=a("a"),ker=o("DetrForObjectDetection"),Ser=o(" (DETR model)"),Rer=l(),eM=a("li"),Dpe=a("strong"),Ber=o("yolos"),Per=o(" \u2014 "),PX=a("a"),Ier=o("YolosForObjectDetection"),qer=o(" (YOLOS model)"),Ner=l(),oM=a("p"),jer=o("The model is set in evaluation mode by default using "),Gpe=a("code"),Der=o("model.eval()"),Ger=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),Oer=o("model.train()"),Ver=l(),v(rM.$$.fragment),NIe=l(),xd=a("h2"),tM=a("a"),Vpe=a("span"),v(_8.$$.fragment),Xer=l(),Xpe=a("span"),zer=o("AutoModelForImageSegmentation"),jIe=l(),Ho=a("div"),v(b8.$$.fragment),Qer=l(),$d=a("p"),Wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=a("a"),Her=o("from_pretrained()"),Uer=o(" class method or the "),qX=a("a"),Jer=o("from_config()"),Yer=o(` class
method.`),Ker=l(),F8=a("p"),Zer=o("This class cannot be instantiated directly using "),zpe=a("code"),eor=o("__init__()"),oor=o(" (throws an error)."),ror=l(),Mt=a("div"),v(v8.$$.fragment),tor=l(),Qpe=a("p"),aor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nor=l(),kd=a("p"),sor=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),lor=o("not"),ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),dor=o("from_pretrained()"),cor=o(" to load the model weights."),mor=l(),v(aM.$$.fragment),gor=l(),uo=a("div"),v(T8.$$.fragment),hor=l(),Hpe=a("p"),uor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),por=l(),Ha=a("p"),_or=o("The model class to instantiate is selected based on the "),Upe=a("code"),bor=o("model_type"),For=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),vor=o("pretrained_model_name_or_path"),Tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(":"),Cor=l(),Kpe=a("ul"),nM=a("li"),Zpe=a("strong"),wor=o("detr"),Aor=o(" \u2014 "),jX=a("a"),yor=o("DetrForSegmentation"),Lor=o(" (DETR model)"),xor=l(),sM=a("p"),$or=o("The model is set in evaluation mode by default using "),e_e=a("code"),kor=o("model.eval()"),Sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Ror=o("model.train()"),Bor=l(),v(lM.$$.fragment),DIe=l(),Sd=a("h2"),iM=a("a"),r_e=a("span"),v(M8.$$.fragment),Por=l(),t_e=a("span"),Ior=o("AutoModelForSemanticSegmentation"),GIe=l(),Uo=a("div"),v(E8.$$.fragment),qor=l(),Rd=a("p"),Nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=a("a"),jor=o("from_pretrained()"),Dor=o(" class method or the "),GX=a("a"),Gor=o("from_config()"),Oor=o(` class
method.`),Vor=l(),C8=a("p"),Xor=o("This class cannot be instantiated directly using "),a_e=a("code"),zor=o("__init__()"),Qor=o(" (throws an error)."),Wor=l(),Et=a("div"),v(w8.$$.fragment),Hor=l(),n_e=a("p"),Uor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jor=l(),Bd=a("p"),Yor=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),Kor=o("not"),Zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),err=o("from_pretrained()"),orr=o(" to load the model weights."),rrr=l(),v(dM.$$.fragment),trr=l(),po=a("div"),v(A8.$$.fragment),arr=l(),l_e=a("p"),nrr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),srr=l(),Ua=a("p"),lrr=o("The model class to instantiate is selected based on the "),i_e=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),crr=o("pretrained_model_name_or_path"),mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),frr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),Ja=a("ul"),cM=a("li"),m_e=a("strong"),urr=o("beit"),prr=o(" \u2014 "),VX=a("a"),_rr=o("BeitForSemanticSegmentation"),brr=o(" (BEiT model)"),Frr=l(),mM=a("li"),f_e=a("strong"),vrr=o("data2vec-vision"),Trr=o(" \u2014 "),XX=a("a"),Mrr=o("Data2VecVisionForSemanticSegmentation"),Err=o(" (Data2VecVision model)"),Crr=l(),fM=a("li"),g_e=a("strong"),wrr=o("dpt"),Arr=o(" \u2014 "),zX=a("a"),yrr=o("DPTForSemanticSegmentation"),Lrr=o(" (DPT model)"),xrr=l(),gM=a("li"),h_e=a("strong"),$rr=o("segformer"),krr=o(" \u2014 "),QX=a("a"),Srr=o("SegformerForSemanticSegmentation"),Rrr=o(" (SegFormer model)"),Brr=l(),hM=a("p"),Prr=o("The model is set in evaluation mode by default using "),u_e=a("code"),Irr=o("model.eval()"),qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),Nrr=o("model.train()"),jrr=l(),v(uM.$$.fragment),OIe=l(),Pd=a("h2"),pM=a("a"),__e=a("span"),v(y8.$$.fragment),Drr=l(),b_e=a("span"),Grr=o("AutoModelForInstanceSegmentation"),VIe=l(),Jo=a("div"),v(L8.$$.fragment),Orr=l(),Id=a("p"),Vrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=a("a"),Xrr=o("from_pretrained()"),zrr=o(" class method or the "),HX=a("a"),Qrr=o("from_config()"),Wrr=o(` class
method.`),Hrr=l(),x8=a("p"),Urr=o("This class cannot be instantiated directly using "),F_e=a("code"),Jrr=o("__init__()"),Yrr=o(" (throws an error)."),Krr=l(),Ct=a("div"),v($8.$$.fragment),Zrr=l(),v_e=a("p"),etr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),otr=l(),qd=a("p"),rtr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),ttr=o("not"),atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),ntr=o("from_pretrained()"),str=o(" to load the model weights."),ltr=l(),v(_M.$$.fragment),itr=l(),_o=a("div"),v(k8.$$.fragment),dtr=l(),M_e=a("p"),ctr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mtr=l(),Ya=a("p"),ftr=o("The model class to instantiate is selected based on the "),E_e=a("code"),gtr=o("model_type"),htr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),utr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(":"),Ftr=l(),A_e=a("ul"),bM=a("li"),y_e=a("strong"),vtr=o("maskformer"),Ttr=o(" \u2014 "),JX=a("a"),Mtr=o("MaskFormerForInstanceSegmentation"),Etr=o(" (MaskFormer model)"),Ctr=l(),FM=a("p"),wtr=o("The model is set in evaluation mode by default using "),L_e=a("code"),Atr=o("model.eval()"),ytr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),Ltr=o("model.train()"),xtr=l(),v(vM.$$.fragment),XIe=l(),Nd=a("h2"),TM=a("a"),$_e=a("span"),v(S8.$$.fragment),$tr=l(),k_e=a("span"),ktr=o("TFAutoModel"),zIe=l(),Yo=a("div"),v(R8.$$.fragment),Str=l(),jd=a("p"),Rtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=a("a"),Btr=o("from_pretrained()"),Ptr=o(" class method or the "),KX=a("a"),Itr=o("from_config()"),qtr=o(` class
method.`),Ntr=l(),B8=a("p"),jtr=o("This class cannot be instantiated directly using "),S_e=a("code"),Dtr=o("__init__()"),Gtr=o(" (throws an error)."),Otr=l(),wt=a("div"),v(P8.$$.fragment),Vtr=l(),R_e=a("p"),Xtr=o("Instantiates one of the base model classes of the library from a configuration."),ztr=l(),Dd=a("p"),Qtr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),Wtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Utr=o("from_pretrained()"),Jtr=o(" to load the model weights."),Ytr=l(),v(MM.$$.fragment),Ktr=l(),wr=a("div"),v(I8.$$.fragment),Ztr=l(),P_e=a("p"),ear=o("Instantiate one of the base model classes of the library from a pretrained model."),oar=l(),Ka=a("p"),rar=o("The model class to instantiate is selected based on the "),I_e=a("code"),tar=o("model_type"),aar=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),nar=o("pretrained_model_name_or_path"),sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(":"),dar=l(),N=a("ul"),EM=a("li"),j_e=a("strong"),car=o("albert"),mar=o(" \u2014 "),ez=a("a"),far=o("TFAlbertModel"),gar=o(" (ALBERT model)"),har=l(),CM=a("li"),D_e=a("strong"),uar=o("bart"),par=o(" \u2014 "),oz=a("a"),_ar=o("TFBartModel"),bar=o(" (BART model)"),Far=l(),wM=a("li"),G_e=a("strong"),Tar=o("bert"),Mar=o(" \u2014 "),rz=a("a"),Ear=o("TFBertModel"),Car=o(" (BERT model)"),war=l(),AM=a("li"),O_e=a("strong"),Aar=o("blenderbot"),yar=o(" \u2014 "),tz=a("a"),Lar=o("TFBlenderbotModel"),xar=o(" (Blenderbot model)"),$ar=l(),yM=a("li"),V_e=a("strong"),kar=o("blenderbot-small"),Sar=o(" \u2014 "),az=a("a"),Rar=o("TFBlenderbotSmallModel"),Bar=o(" (BlenderbotSmall model)"),Par=l(),LM=a("li"),X_e=a("strong"),Iar=o("camembert"),qar=o(" \u2014 "),nz=a("a"),Nar=o("TFCamembertModel"),jar=o(" (CamemBERT model)"),Dar=l(),xM=a("li"),z_e=a("strong"),Gar=o("clip"),Oar=o(" \u2014 "),sz=a("a"),Var=o("TFCLIPModel"),Xar=o(" (CLIP model)"),zar=l(),$M=a("li"),Q_e=a("strong"),Qar=o("convbert"),War=o(" \u2014 "),lz=a("a"),Har=o("TFConvBertModel"),Uar=o(" (ConvBERT model)"),Jar=l(),kM=a("li"),W_e=a("strong"),Yar=o("convnext"),Kar=o(" \u2014 "),iz=a("a"),Zar=o("TFConvNextModel"),enr=o(" (ConvNext model)"),onr=l(),SM=a("li"),H_e=a("strong"),rnr=o("ctrl"),tnr=o(" \u2014 "),dz=a("a"),anr=o("TFCTRLModel"),nnr=o(" (CTRL model)"),snr=l(),RM=a("li"),U_e=a("strong"),lnr=o("data2vec-vision"),inr=o(" \u2014 "),cz=a("a"),dnr=o("TFData2VecVisionModel"),cnr=o(" (Data2VecVision model)"),mnr=l(),BM=a("li"),J_e=a("strong"),fnr=o("deberta"),gnr=o(" \u2014 "),mz=a("a"),hnr=o("TFDebertaModel"),unr=o(" (DeBERTa model)"),pnr=l(),PM=a("li"),Y_e=a("strong"),_nr=o("deberta-v2"),bnr=o(" \u2014 "),fz=a("a"),Fnr=o("TFDebertaV2Model"),vnr=o(" (DeBERTa-v2 model)"),Tnr=l(),IM=a("li"),K_e=a("strong"),Mnr=o("distilbert"),Enr=o(" \u2014 "),gz=a("a"),Cnr=o("TFDistilBertModel"),wnr=o(" (DistilBERT model)"),Anr=l(),qM=a("li"),Z_e=a("strong"),ynr=o("dpr"),Lnr=o(" \u2014 "),hz=a("a"),xnr=o("TFDPRQuestionEncoder"),$nr=o(" (DPR model)"),knr=l(),NM=a("li"),ebe=a("strong"),Snr=o("electra"),Rnr=o(" \u2014 "),uz=a("a"),Bnr=o("TFElectraModel"),Pnr=o(" (ELECTRA model)"),Inr=l(),jM=a("li"),obe=a("strong"),qnr=o("flaubert"),Nnr=o(" \u2014 "),pz=a("a"),jnr=o("TFFlaubertModel"),Dnr=o(" (FlauBERT model)"),Gnr=l(),Ps=a("li"),rbe=a("strong"),Onr=o("funnel"),Vnr=o(" \u2014 "),_z=a("a"),Xnr=o("TFFunnelModel"),znr=o(" or "),bz=a("a"),Qnr=o("TFFunnelBaseModel"),Wnr=o(" (Funnel Transformer model)"),Hnr=l(),DM=a("li"),tbe=a("strong"),Unr=o("gpt2"),Jnr=o(" \u2014 "),Fz=a("a"),Ynr=o("TFGPT2Model"),Knr=o(" (OpenAI GPT-2 model)"),Znr=l(),GM=a("li"),abe=a("strong"),esr=o("gptj"),osr=o(" \u2014 "),vz=a("a"),rsr=o("TFGPTJModel"),tsr=o(" (GPT-J model)"),asr=l(),OM=a("li"),nbe=a("strong"),nsr=o("hubert"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFHubertModel"),isr=o(" (Hubert model)"),dsr=l(),VM=a("li"),sbe=a("strong"),csr=o("layoutlm"),msr=o(" \u2014 "),Mz=a("a"),fsr=o("TFLayoutLMModel"),gsr=o(" (LayoutLM model)"),hsr=l(),XM=a("li"),lbe=a("strong"),usr=o("led"),psr=o(" \u2014 "),Ez=a("a"),_sr=o("TFLEDModel"),bsr=o(" (LED model)"),Fsr=l(),zM=a("li"),ibe=a("strong"),vsr=o("longformer"),Tsr=o(" \u2014 "),Cz=a("a"),Msr=o("TFLongformerModel"),Esr=o(" (Longformer model)"),Csr=l(),QM=a("li"),dbe=a("strong"),wsr=o("lxmert"),Asr=o(" \u2014 "),wz=a("a"),ysr=o("TFLxmertModel"),Lsr=o(" (LXMERT model)"),xsr=l(),WM=a("li"),cbe=a("strong"),$sr=o("marian"),ksr=o(" \u2014 "),Az=a("a"),Ssr=o("TFMarianModel"),Rsr=o(" (Marian model)"),Bsr=l(),HM=a("li"),mbe=a("strong"),Psr=o("mbart"),Isr=o(" \u2014 "),yz=a("a"),qsr=o("TFMBartModel"),Nsr=o(" (mBART model)"),jsr=l(),UM=a("li"),fbe=a("strong"),Dsr=o("mobilebert"),Gsr=o(" \u2014 "),Lz=a("a"),Osr=o("TFMobileBertModel"),Vsr=o(" (MobileBERT model)"),Xsr=l(),JM=a("li"),gbe=a("strong"),zsr=o("mpnet"),Qsr=o(" \u2014 "),xz=a("a"),Wsr=o("TFMPNetModel"),Hsr=o(" (MPNet model)"),Usr=l(),YM=a("li"),hbe=a("strong"),Jsr=o("mt5"),Ysr=o(" \u2014 "),$z=a("a"),Ksr=o("TFMT5Model"),Zsr=o(" (mT5 model)"),elr=l(),KM=a("li"),ube=a("strong"),olr=o("openai-gpt"),rlr=o(" \u2014 "),kz=a("a"),tlr=o("TFOpenAIGPTModel"),alr=o(" (OpenAI GPT model)"),nlr=l(),ZM=a("li"),pbe=a("strong"),slr=o("pegasus"),llr=o(" \u2014 "),Sz=a("a"),ilr=o("TFPegasusModel"),dlr=o(" (Pegasus model)"),clr=l(),e4=a("li"),_be=a("strong"),mlr=o("rembert"),flr=o(" \u2014 "),Rz=a("a"),glr=o("TFRemBertModel"),hlr=o(" (RemBERT model)"),ulr=l(),o4=a("li"),bbe=a("strong"),plr=o("roberta"),_lr=o(" \u2014 "),Bz=a("a"),blr=o("TFRobertaModel"),Flr=o(" (RoBERTa model)"),vlr=l(),r4=a("li"),Fbe=a("strong"),Tlr=o("roformer"),Mlr=o(" \u2014 "),Pz=a("a"),Elr=o("TFRoFormerModel"),Clr=o(" (RoFormer model)"),wlr=l(),t4=a("li"),vbe=a("strong"),Alr=o("speech_to_text"),ylr=o(" \u2014 "),Iz=a("a"),Llr=o("TFSpeech2TextModel"),xlr=o(" (Speech2Text model)"),$lr=l(),a4=a("li"),Tbe=a("strong"),klr=o("swin"),Slr=o(" \u2014 "),qz=a("a"),Rlr=o("TFSwinModel"),Blr=o(" (Swin model)"),Plr=l(),n4=a("li"),Mbe=a("strong"),Ilr=o("t5"),qlr=o(" \u2014 "),Nz=a("a"),Nlr=o("TFT5Model"),jlr=o(" (T5 model)"),Dlr=l(),s4=a("li"),Ebe=a("strong"),Glr=o("tapas"),Olr=o(" \u2014 "),jz=a("a"),Vlr=o("TFTapasModel"),Xlr=o(" (TAPAS model)"),zlr=l(),l4=a("li"),Cbe=a("strong"),Qlr=o("transfo-xl"),Wlr=o(" \u2014 "),Dz=a("a"),Hlr=o("TFTransfoXLModel"),Ulr=o(" (Transformer-XL model)"),Jlr=l(),i4=a("li"),wbe=a("strong"),Ylr=o("vit"),Klr=o(" \u2014 "),Gz=a("a"),Zlr=o("TFViTModel"),eir=o(" (ViT model)"),oir=l(),d4=a("li"),Abe=a("strong"),rir=o("vit_mae"),tir=o(" \u2014 "),Oz=a("a"),air=o("TFViTMAEModel"),nir=o(" (ViTMAE model)"),sir=l(),c4=a("li"),ybe=a("strong"),lir=o("wav2vec2"),iir=o(" \u2014 "),Vz=a("a"),dir=o("TFWav2Vec2Model"),cir=o(" (Wav2Vec2 model)"),mir=l(),m4=a("li"),Lbe=a("strong"),fir=o("xlm"),gir=o(" \u2014 "),Xz=a("a"),hir=o("TFXLMModel"),uir=o(" (XLM model)"),pir=l(),f4=a("li"),xbe=a("strong"),_ir=o("xlm-roberta"),bir=o(" \u2014 "),zz=a("a"),Fir=o("TFXLMRobertaModel"),vir=o(" (XLM-RoBERTa model)"),Tir=l(),g4=a("li"),$be=a("strong"),Mir=o("xlnet"),Eir=o(" \u2014 "),Qz=a("a"),Cir=o("TFXLNetModel"),wir=o(" (XLNet model)"),Air=l(),v(h4.$$.fragment),QIe=l(),Gd=a("h2"),u4=a("a"),kbe=a("span"),v(q8.$$.fragment),yir=l(),Sbe=a("span"),Lir=o("TFAutoModelForPreTraining"),WIe=l(),Ko=a("div"),v(N8.$$.fragment),xir=l(),Od=a("p"),$ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=a("a"),kir=o("from_pretrained()"),Sir=o(" class method or the "),Hz=a("a"),Rir=o("from_config()"),Bir=o(` class
method.`),Pir=l(),j8=a("p"),Iir=o("This class cannot be instantiated directly using "),Rbe=a("code"),qir=o("__init__()"),Nir=o(" (throws an error)."),jir=l(),At=a("div"),v(D8.$$.fragment),Dir=l(),Bbe=a("p"),Gir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oir=l(),Vd=a("p"),Vir=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Xir=o("not"),zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Qir=o("from_pretrained()"),Wir=o(" to load the model weights."),Hir=l(),v(p4.$$.fragment),Uir=l(),Ar=a("div"),v(G8.$$.fragment),Jir=l(),Ibe=a("p"),Yir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kir=l(),Za=a("p"),Zir=o("The model class to instantiate is selected based on the "),qbe=a("code"),edr=o("model_type"),odr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),rdr=o("pretrained_model_name_or_path"),tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),adr=o("pretrained_model_name_or_path"),ndr=o(":"),sdr=l(),se=a("ul"),_4=a("li"),Dbe=a("strong"),ldr=o("albert"),idr=o(" \u2014 "),Jz=a("a"),ddr=o("TFAlbertForPreTraining"),cdr=o(" (ALBERT model)"),mdr=l(),b4=a("li"),Gbe=a("strong"),fdr=o("bart"),gdr=o(" \u2014 "),Yz=a("a"),hdr=o("TFBartForConditionalGeneration"),udr=o(" (BART model)"),pdr=l(),F4=a("li"),Obe=a("strong"),_dr=o("bert"),bdr=o(" \u2014 "),Kz=a("a"),Fdr=o("TFBertForPreTraining"),vdr=o(" (BERT model)"),Tdr=l(),v4=a("li"),Vbe=a("strong"),Mdr=o("camembert"),Edr=o(" \u2014 "),Zz=a("a"),Cdr=o("TFCamembertForMaskedLM"),wdr=o(" (CamemBERT model)"),Adr=l(),T4=a("li"),Xbe=a("strong"),ydr=o("ctrl"),Ldr=o(" \u2014 "),eQ=a("a"),xdr=o("TFCTRLLMHeadModel"),$dr=o(" (CTRL model)"),kdr=l(),M4=a("li"),zbe=a("strong"),Sdr=o("distilbert"),Rdr=o(" \u2014 "),oQ=a("a"),Bdr=o("TFDistilBertForMaskedLM"),Pdr=o(" (DistilBERT model)"),Idr=l(),E4=a("li"),Qbe=a("strong"),qdr=o("electra"),Ndr=o(" \u2014 "),rQ=a("a"),jdr=o("TFElectraForPreTraining"),Ddr=o(" (ELECTRA model)"),Gdr=l(),C4=a("li"),Wbe=a("strong"),Odr=o("flaubert"),Vdr=o(" \u2014 "),tQ=a("a"),Xdr=o("TFFlaubertWithLMHeadModel"),zdr=o(" (FlauBERT model)"),Qdr=l(),w4=a("li"),Hbe=a("strong"),Wdr=o("funnel"),Hdr=o(" \u2014 "),aQ=a("a"),Udr=o("TFFunnelForPreTraining"),Jdr=o(" (Funnel Transformer model)"),Ydr=l(),A4=a("li"),Ube=a("strong"),Kdr=o("gpt2"),Zdr=o(" \u2014 "),nQ=a("a"),ecr=o("TFGPT2LMHeadModel"),ocr=o(" (OpenAI GPT-2 model)"),rcr=l(),y4=a("li"),Jbe=a("strong"),tcr=o("layoutlm"),acr=o(" \u2014 "),sQ=a("a"),ncr=o("TFLayoutLMForMaskedLM"),scr=o(" (LayoutLM model)"),lcr=l(),L4=a("li"),Ybe=a("strong"),icr=o("lxmert"),dcr=o(" \u2014 "),lQ=a("a"),ccr=o("TFLxmertForPreTraining"),mcr=o(" (LXMERT model)"),fcr=l(),x4=a("li"),Kbe=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),iQ=a("a"),ucr=o("TFMobileBertForPreTraining"),pcr=o(" (MobileBERT model)"),_cr=l(),$4=a("li"),Zbe=a("strong"),bcr=o("mpnet"),Fcr=o(" \u2014 "),dQ=a("a"),vcr=o("TFMPNetForMaskedLM"),Tcr=o(" (MPNet model)"),Mcr=l(),k4=a("li"),e2e=a("strong"),Ecr=o("openai-gpt"),Ccr=o(" \u2014 "),cQ=a("a"),wcr=o("TFOpenAIGPTLMHeadModel"),Acr=o(" (OpenAI GPT model)"),ycr=l(),S4=a("li"),o2e=a("strong"),Lcr=o("roberta"),xcr=o(" \u2014 "),mQ=a("a"),$cr=o("TFRobertaForMaskedLM"),kcr=o(" (RoBERTa model)"),Scr=l(),R4=a("li"),r2e=a("strong"),Rcr=o("t5"),Bcr=o(" \u2014 "),fQ=a("a"),Pcr=o("TFT5ForConditionalGeneration"),Icr=o(" (T5 model)"),qcr=l(),B4=a("li"),t2e=a("strong"),Ncr=o("tapas"),jcr=o(" \u2014 "),gQ=a("a"),Dcr=o("TFTapasForMaskedLM"),Gcr=o(" (TAPAS model)"),Ocr=l(),P4=a("li"),a2e=a("strong"),Vcr=o("transfo-xl"),Xcr=o(" \u2014 "),hQ=a("a"),zcr=o("TFTransfoXLLMHeadModel"),Qcr=o(" (Transformer-XL model)"),Wcr=l(),I4=a("li"),n2e=a("strong"),Hcr=o("vit_mae"),Ucr=o(" \u2014 "),uQ=a("a"),Jcr=o("TFViTMAEForPreTraining"),Ycr=o(" (ViTMAE model)"),Kcr=l(),q4=a("li"),s2e=a("strong"),Zcr=o("xlm"),emr=o(" \u2014 "),pQ=a("a"),omr=o("TFXLMWithLMHeadModel"),rmr=o(" (XLM model)"),tmr=l(),N4=a("li"),l2e=a("strong"),amr=o("xlm-roberta"),nmr=o(" \u2014 "),_Q=a("a"),smr=o("TFXLMRobertaForMaskedLM"),lmr=o(" (XLM-RoBERTa model)"),imr=l(),j4=a("li"),i2e=a("strong"),dmr=o("xlnet"),cmr=o(" \u2014 "),bQ=a("a"),mmr=o("TFXLNetLMHeadModel"),fmr=o(" (XLNet model)"),gmr=l(),v(D4.$$.fragment),HIe=l(),Xd=a("h2"),G4=a("a"),d2e=a("span"),v(O8.$$.fragment),hmr=l(),c2e=a("span"),umr=o("TFAutoModelForCausalLM"),UIe=l(),Zo=a("div"),v(V8.$$.fragment),pmr=l(),zd=a("p"),_mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FQ=a("a"),bmr=o("from_pretrained()"),Fmr=o(" class method or the "),vQ=a("a"),vmr=o("from_config()"),Tmr=o(` class
method.`),Mmr=l(),X8=a("p"),Emr=o("This class cannot be instantiated directly using "),m2e=a("code"),Cmr=o("__init__()"),wmr=o(" (throws an error)."),Amr=l(),yt=a("div"),v(z8.$$.fragment),ymr=l(),f2e=a("p"),Lmr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xmr=l(),Qd=a("p"),$mr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),kmr=o("not"),Smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Rmr=o("from_pretrained()"),Bmr=o(" to load the model weights."),Pmr=l(),v(O4.$$.fragment),Imr=l(),yr=a("div"),v(Q8.$$.fragment),qmr=l(),h2e=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jmr=l(),en=a("p"),Dmr=o("The model class to instantiate is selected based on the "),u2e=a("code"),Gmr=o("model_type"),Omr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),zmr=o("pretrained_model_name_or_path"),Qmr=o(":"),Wmr=l(),Te=a("ul"),V4=a("li"),b2e=a("strong"),Hmr=o("bert"),Umr=o(" \u2014 "),MQ=a("a"),Jmr=o("TFBertLMHeadModel"),Ymr=o(" (BERT model)"),Kmr=l(),X4=a("li"),F2e=a("strong"),Zmr=o("camembert"),efr=o(" \u2014 "),EQ=a("a"),ofr=o("TFCamembertForCausalLM"),rfr=o(" (CamemBERT model)"),tfr=l(),z4=a("li"),v2e=a("strong"),afr=o("ctrl"),nfr=o(" \u2014 "),CQ=a("a"),sfr=o("TFCTRLLMHeadModel"),lfr=o(" (CTRL model)"),ifr=l(),Q4=a("li"),T2e=a("strong"),dfr=o("gpt2"),cfr=o(" \u2014 "),wQ=a("a"),mfr=o("TFGPT2LMHeadModel"),ffr=o(" (OpenAI GPT-2 model)"),gfr=l(),W4=a("li"),M2e=a("strong"),hfr=o("gptj"),ufr=o(" \u2014 "),AQ=a("a"),pfr=o("TFGPTJForCausalLM"),_fr=o(" (GPT-J model)"),bfr=l(),H4=a("li"),E2e=a("strong"),Ffr=o("openai-gpt"),vfr=o(" \u2014 "),yQ=a("a"),Tfr=o("TFOpenAIGPTLMHeadModel"),Mfr=o(" (OpenAI GPT model)"),Efr=l(),U4=a("li"),C2e=a("strong"),Cfr=o("rembert"),wfr=o(" \u2014 "),LQ=a("a"),Afr=o("TFRemBertForCausalLM"),yfr=o(" (RemBERT model)"),Lfr=l(),J4=a("li"),w2e=a("strong"),xfr=o("roberta"),$fr=o(" \u2014 "),xQ=a("a"),kfr=o("TFRobertaForCausalLM"),Sfr=o(" (RoBERTa model)"),Rfr=l(),Y4=a("li"),A2e=a("strong"),Bfr=o("roformer"),Pfr=o(" \u2014 "),$Q=a("a"),Ifr=o("TFRoFormerForCausalLM"),qfr=o(" (RoFormer model)"),Nfr=l(),K4=a("li"),y2e=a("strong"),jfr=o("transfo-xl"),Dfr=o(" \u2014 "),kQ=a("a"),Gfr=o("TFTransfoXLLMHeadModel"),Ofr=o(" (Transformer-XL model)"),Vfr=l(),Z4=a("li"),L2e=a("strong"),Xfr=o("xlm"),zfr=o(" \u2014 "),SQ=a("a"),Qfr=o("TFXLMWithLMHeadModel"),Wfr=o(" (XLM model)"),Hfr=l(),eE=a("li"),x2e=a("strong"),Ufr=o("xlnet"),Jfr=o(" \u2014 "),RQ=a("a"),Yfr=o("TFXLNetLMHeadModel"),Kfr=o(" (XLNet model)"),Zfr=l(),v(oE.$$.fragment),JIe=l(),Wd=a("h2"),rE=a("a"),$2e=a("span"),v(W8.$$.fragment),egr=l(),k2e=a("span"),ogr=o("TFAutoModelForImageClassification"),YIe=l(),er=a("div"),v(H8.$$.fragment),rgr=l(),Hd=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=a("a"),agr=o("from_pretrained()"),ngr=o(" class method or the "),PQ=a("a"),sgr=o("from_config()"),lgr=o(` class
method.`),igr=l(),U8=a("p"),dgr=o("This class cannot be instantiated directly using "),S2e=a("code"),cgr=o("__init__()"),mgr=o(" (throws an error)."),fgr=l(),Lt=a("div"),v(J8.$$.fragment),ggr=l(),R2e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ugr=l(),Ud=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),_gr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Fgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Tgr=l(),v(tE.$$.fragment),Mgr=l(),Lr=a("div"),v(Y8.$$.fragment),Egr=l(),P2e=a("p"),Cgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wgr=l(),on=a("p"),Agr=o("The model class to instantiate is selected based on the "),I2e=a("code"),ygr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),kgr=o("pretrained_model_name_or_path"),Sgr=o(":"),Rgr=l(),rn=a("ul"),aE=a("li"),j2e=a("strong"),Bgr=o("convnext"),Pgr=o(" \u2014 "),qQ=a("a"),Igr=o("TFConvNextForImageClassification"),qgr=o(" (ConvNext model)"),Ngr=l(),nE=a("li"),D2e=a("strong"),jgr=o("data2vec-vision"),Dgr=o(" \u2014 "),NQ=a("a"),Ggr=o("TFData2VecVisionForImageClassification"),Ogr=o(" (Data2VecVision model)"),Vgr=l(),sE=a("li"),G2e=a("strong"),Xgr=o("swin"),zgr=o(" \u2014 "),jQ=a("a"),Qgr=o("TFSwinForImageClassification"),Wgr=o(" (Swin model)"),Hgr=l(),lE=a("li"),O2e=a("strong"),Ugr=o("vit"),Jgr=o(" \u2014 "),DQ=a("a"),Ygr=o("TFViTForImageClassification"),Kgr=o(" (ViT model)"),Zgr=l(),v(iE.$$.fragment),KIe=l(),Jd=a("h2"),dE=a("a"),V2e=a("span"),v(K8.$$.fragment),ehr=l(),X2e=a("span"),ohr=o("TFAutoModelForMaskedLM"),ZIe=l(),or=a("div"),v(Z8.$$.fragment),rhr=l(),Yd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),OQ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),ex=a("p"),dhr=o("This class cannot be instantiated directly using "),z2e=a("code"),chr=o("__init__()"),mhr=o(" (throws an error)."),fhr=l(),xt=a("div"),v(ox.$$.fragment),ghr=l(),Q2e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uhr=l(),Kd=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),Fhr=o("from_pretrained()"),vhr=o(" to load the model weights."),Thr=l(),v(cE.$$.fragment),Mhr=l(),xr=a("div"),v(rx.$$.fragment),Ehr=l(),H2e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),whr=l(),tn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),U2e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),ie=a("ul"),mE=a("li"),K2e=a("strong"),Bhr=o("albert"),Phr=o(" \u2014 "),XQ=a("a"),Ihr=o("TFAlbertForMaskedLM"),qhr=o(" (ALBERT model)"),Nhr=l(),fE=a("li"),Z2e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),zQ=a("a"),Ghr=o("TFBertForMaskedLM"),Ohr=o(" (BERT model)"),Vhr=l(),gE=a("li"),eFe=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),QQ=a("a"),Qhr=o("TFCamembertForMaskedLM"),Whr=o(" (CamemBERT model)"),Hhr=l(),hE=a("li"),oFe=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),WQ=a("a"),Yhr=o("TFConvBertForMaskedLM"),Khr=o(" (ConvBERT model)"),Zhr=l(),uE=a("li"),rFe=a("strong"),eur=o("deberta"),our=o(" \u2014 "),HQ=a("a"),rur=o("TFDebertaForMaskedLM"),tur=o(" (DeBERTa model)"),aur=l(),pE=a("li"),tFe=a("strong"),nur=o("deberta-v2"),sur=o(" \u2014 "),UQ=a("a"),lur=o("TFDebertaV2ForMaskedLM"),iur=o(" (DeBERTa-v2 model)"),dur=l(),_E=a("li"),aFe=a("strong"),cur=o("distilbert"),mur=o(" \u2014 "),JQ=a("a"),fur=o("TFDistilBertForMaskedLM"),gur=o(" (DistilBERT model)"),hur=l(),bE=a("li"),nFe=a("strong"),uur=o("electra"),pur=o(" \u2014 "),YQ=a("a"),_ur=o("TFElectraForMaskedLM"),bur=o(" (ELECTRA model)"),Fur=l(),FE=a("li"),sFe=a("strong"),vur=o("flaubert"),Tur=o(" \u2014 "),KQ=a("a"),Mur=o("TFFlaubertWithLMHeadModel"),Eur=o(" (FlauBERT model)"),Cur=l(),vE=a("li"),lFe=a("strong"),wur=o("funnel"),Aur=o(" \u2014 "),ZQ=a("a"),yur=o("TFFunnelForMaskedLM"),Lur=o(" (Funnel Transformer model)"),xur=l(),TE=a("li"),iFe=a("strong"),$ur=o("layoutlm"),kur=o(" \u2014 "),eW=a("a"),Sur=o("TFLayoutLMForMaskedLM"),Rur=o(" (LayoutLM model)"),Bur=l(),ME=a("li"),dFe=a("strong"),Pur=o("longformer"),Iur=o(" \u2014 "),oW=a("a"),qur=o("TFLongformerForMaskedLM"),Nur=o(" (Longformer model)"),jur=l(),EE=a("li"),cFe=a("strong"),Dur=o("mobilebert"),Gur=o(" \u2014 "),rW=a("a"),Our=o("TFMobileBertForMaskedLM"),Vur=o(" (MobileBERT model)"),Xur=l(),CE=a("li"),mFe=a("strong"),zur=o("mpnet"),Qur=o(" \u2014 "),tW=a("a"),Wur=o("TFMPNetForMaskedLM"),Hur=o(" (MPNet model)"),Uur=l(),wE=a("li"),fFe=a("strong"),Jur=o("rembert"),Yur=o(" \u2014 "),aW=a("a"),Kur=o("TFRemBertForMaskedLM"),Zur=o(" (RemBERT model)"),epr=l(),AE=a("li"),gFe=a("strong"),opr=o("roberta"),rpr=o(" \u2014 "),nW=a("a"),tpr=o("TFRobertaForMaskedLM"),apr=o(" (RoBERTa model)"),npr=l(),yE=a("li"),hFe=a("strong"),spr=o("roformer"),lpr=o(" \u2014 "),sW=a("a"),ipr=o("TFRoFormerForMaskedLM"),dpr=o(" (RoFormer model)"),cpr=l(),LE=a("li"),uFe=a("strong"),mpr=o("tapas"),fpr=o(" \u2014 "),lW=a("a"),gpr=o("TFTapasForMaskedLM"),hpr=o(" (TAPAS model)"),upr=l(),xE=a("li"),pFe=a("strong"),ppr=o("xlm"),_pr=o(" \u2014 "),iW=a("a"),bpr=o("TFXLMWithLMHeadModel"),Fpr=o(" (XLM model)"),vpr=l(),$E=a("li"),_Fe=a("strong"),Tpr=o("xlm-roberta"),Mpr=o(" \u2014 "),dW=a("a"),Epr=o("TFXLMRobertaForMaskedLM"),Cpr=o(" (XLM-RoBERTa model)"),wpr=l(),v(kE.$$.fragment),eqe=l(),Zd=a("h2"),SE=a("a"),bFe=a("span"),v(tx.$$.fragment),Apr=l(),FFe=a("span"),ypr=o("TFAutoModelForSeq2SeqLM"),oqe=l(),rr=a("div"),v(ax.$$.fragment),Lpr=l(),ec=a("p"),xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=a("a"),$pr=o("from_pretrained()"),kpr=o(" class method or the "),mW=a("a"),Spr=o("from_config()"),Rpr=o(` class
method.`),Bpr=l(),nx=a("p"),Ppr=o("This class cannot be instantiated directly using "),vFe=a("code"),Ipr=o("__init__()"),qpr=o(" (throws an error)."),Npr=l(),$t=a("div"),v(sx.$$.fragment),jpr=l(),TFe=a("p"),Dpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gpr=l(),oc=a("p"),Opr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),Vpr=o("not"),Xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),zpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Wpr=l(),v(RE.$$.fragment),Hpr=l(),$r=a("div"),v(lx.$$.fragment),Upr=l(),EFe=a("p"),Jpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ypr=l(),an=a("p"),Kpr=o("The model class to instantiate is selected based on the "),CFe=a("code"),Zpr=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),ye=a("ul"),BE=a("li"),yFe=a("strong"),s_r=o("bart"),l_r=o(" \u2014 "),gW=a("a"),i_r=o("TFBartForConditionalGeneration"),d_r=o(" (BART model)"),c_r=l(),PE=a("li"),LFe=a("strong"),m_r=o("blenderbot"),f_r=o(" \u2014 "),hW=a("a"),g_r=o("TFBlenderbotForConditionalGeneration"),h_r=o(" (Blenderbot model)"),u_r=l(),IE=a("li"),xFe=a("strong"),p_r=o("blenderbot-small"),__r=o(" \u2014 "),uW=a("a"),b_r=o("TFBlenderbotSmallForConditionalGeneration"),F_r=o(" (BlenderbotSmall model)"),v_r=l(),qE=a("li"),$Fe=a("strong"),T_r=o("encoder-decoder"),M_r=o(" \u2014 "),pW=a("a"),E_r=o("TFEncoderDecoderModel"),C_r=o(" (Encoder decoder model)"),w_r=l(),NE=a("li"),kFe=a("strong"),A_r=o("led"),y_r=o(" \u2014 "),_W=a("a"),L_r=o("TFLEDForConditionalGeneration"),x_r=o(" (LED model)"),$_r=l(),jE=a("li"),SFe=a("strong"),k_r=o("marian"),S_r=o(" \u2014 "),bW=a("a"),R_r=o("TFMarianMTModel"),B_r=o(" (Marian model)"),P_r=l(),DE=a("li"),RFe=a("strong"),I_r=o("mbart"),q_r=o(" \u2014 "),FW=a("a"),N_r=o("TFMBartForConditionalGeneration"),j_r=o(" (mBART model)"),D_r=l(),GE=a("li"),BFe=a("strong"),G_r=o("mt5"),O_r=o(" \u2014 "),vW=a("a"),V_r=o("TFMT5ForConditionalGeneration"),X_r=o(" (mT5 model)"),z_r=l(),OE=a("li"),PFe=a("strong"),Q_r=o("pegasus"),W_r=o(" \u2014 "),TW=a("a"),H_r=o("TFPegasusForConditionalGeneration"),U_r=o(" (Pegasus model)"),J_r=l(),VE=a("li"),IFe=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),MW=a("a"),Z_r=o("TFT5ForConditionalGeneration"),ebr=o(" (T5 model)"),obr=l(),v(XE.$$.fragment),rqe=l(),rc=a("h2"),zE=a("a"),qFe=a("span"),v(ix.$$.fragment),rbr=l(),NFe=a("span"),tbr=o("TFAutoModelForSequenceClassification"),tqe=l(),tr=a("div"),v(dx.$$.fragment),abr=l(),tc=a("p"),nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=a("a"),sbr=o("from_pretrained()"),lbr=o(" class method or the "),CW=a("a"),ibr=o("from_config()"),dbr=o(` class
method.`),cbr=l(),cx=a("p"),mbr=o("This class cannot be instantiated directly using "),jFe=a("code"),fbr=o("__init__()"),gbr=o(" (throws an error)."),hbr=l(),kt=a("div"),v(mx.$$.fragment),ubr=l(),DFe=a("p"),pbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_br=l(),ac=a("p"),bbr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),Fbr=o("not"),vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" to load the model weights."),Ebr=l(),v(QE.$$.fragment),Cbr=l(),kr=a("div"),v(fx.$$.fragment),wbr=l(),OFe=a("p"),Abr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ybr=l(),nn=a("p"),Lbr=o("The model class to instantiate is selected based on the "),VFe=a("code"),xbr=o("model_type"),$br=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(":"),Pbr=l(),Z=a("ul"),WE=a("li"),QFe=a("strong"),Ibr=o("albert"),qbr=o(" \u2014 "),AW=a("a"),Nbr=o("TFAlbertForSequenceClassification"),jbr=o(" (ALBERT model)"),Dbr=l(),HE=a("li"),WFe=a("strong"),Gbr=o("bert"),Obr=o(" \u2014 "),yW=a("a"),Vbr=o("TFBertForSequenceClassification"),Xbr=o(" (BERT model)"),zbr=l(),UE=a("li"),HFe=a("strong"),Qbr=o("camembert"),Wbr=o(" \u2014 "),LW=a("a"),Hbr=o("TFCamembertForSequenceClassification"),Ubr=o(" (CamemBERT model)"),Jbr=l(),JE=a("li"),UFe=a("strong"),Ybr=o("convbert"),Kbr=o(" \u2014 "),xW=a("a"),Zbr=o("TFConvBertForSequenceClassification"),e2r=o(" (ConvBERT model)"),o2r=l(),YE=a("li"),JFe=a("strong"),r2r=o("ctrl"),t2r=o(" \u2014 "),$W=a("a"),a2r=o("TFCTRLForSequenceClassification"),n2r=o(" (CTRL model)"),s2r=l(),KE=a("li"),YFe=a("strong"),l2r=o("deberta"),i2r=o(" \u2014 "),kW=a("a"),d2r=o("TFDebertaForSequenceClassification"),c2r=o(" (DeBERTa model)"),m2r=l(),ZE=a("li"),KFe=a("strong"),f2r=o("deberta-v2"),g2r=o(" \u2014 "),SW=a("a"),h2r=o("TFDebertaV2ForSequenceClassification"),u2r=o(" (DeBERTa-v2 model)"),p2r=l(),e5=a("li"),ZFe=a("strong"),_2r=o("distilbert"),b2r=o(" \u2014 "),RW=a("a"),F2r=o("TFDistilBertForSequenceClassification"),v2r=o(" (DistilBERT model)"),T2r=l(),o5=a("li"),eve=a("strong"),M2r=o("electra"),E2r=o(" \u2014 "),BW=a("a"),C2r=o("TFElectraForSequenceClassification"),w2r=o(" (ELECTRA model)"),A2r=l(),r5=a("li"),ove=a("strong"),y2r=o("flaubert"),L2r=o(" \u2014 "),PW=a("a"),x2r=o("TFFlaubertForSequenceClassification"),$2r=o(" (FlauBERT model)"),k2r=l(),t5=a("li"),rve=a("strong"),S2r=o("funnel"),R2r=o(" \u2014 "),IW=a("a"),B2r=o("TFFunnelForSequenceClassification"),P2r=o(" (Funnel Transformer model)"),I2r=l(),a5=a("li"),tve=a("strong"),q2r=o("gpt2"),N2r=o(" \u2014 "),qW=a("a"),j2r=o("TFGPT2ForSequenceClassification"),D2r=o(" (OpenAI GPT-2 model)"),G2r=l(),n5=a("li"),ave=a("strong"),O2r=o("gptj"),V2r=o(" \u2014 "),NW=a("a"),X2r=o("TFGPTJForSequenceClassification"),z2r=o(" (GPT-J model)"),Q2r=l(),s5=a("li"),nve=a("strong"),W2r=o("layoutlm"),H2r=o(" \u2014 "),jW=a("a"),U2r=o("TFLayoutLMForSequenceClassification"),J2r=o(" (LayoutLM model)"),Y2r=l(),l5=a("li"),sve=a("strong"),K2r=o("longformer"),Z2r=o(" \u2014 "),DW=a("a"),eFr=o("TFLongformerForSequenceClassification"),oFr=o(" (Longformer model)"),rFr=l(),i5=a("li"),lve=a("strong"),tFr=o("mobilebert"),aFr=o(" \u2014 "),GW=a("a"),nFr=o("TFMobileBertForSequenceClassification"),sFr=o(" (MobileBERT model)"),lFr=l(),d5=a("li"),ive=a("strong"),iFr=o("mpnet"),dFr=o(" \u2014 "),OW=a("a"),cFr=o("TFMPNetForSequenceClassification"),mFr=o(" (MPNet model)"),fFr=l(),c5=a("li"),dve=a("strong"),gFr=o("openai-gpt"),hFr=o(" \u2014 "),VW=a("a"),uFr=o("TFOpenAIGPTForSequenceClassification"),pFr=o(" (OpenAI GPT model)"),_Fr=l(),m5=a("li"),cve=a("strong"),bFr=o("rembert"),FFr=o(" \u2014 "),XW=a("a"),vFr=o("TFRemBertForSequenceClassification"),TFr=o(" (RemBERT model)"),MFr=l(),f5=a("li"),mve=a("strong"),EFr=o("roberta"),CFr=o(" \u2014 "),zW=a("a"),wFr=o("TFRobertaForSequenceClassification"),AFr=o(" (RoBERTa model)"),yFr=l(),g5=a("li"),fve=a("strong"),LFr=o("roformer"),xFr=o(" \u2014 "),QW=a("a"),$Fr=o("TFRoFormerForSequenceClassification"),kFr=o(" (RoFormer model)"),SFr=l(),h5=a("li"),gve=a("strong"),RFr=o("tapas"),BFr=o(" \u2014 "),WW=a("a"),PFr=o("TFTapasForSequenceClassification"),IFr=o(" (TAPAS model)"),qFr=l(),u5=a("li"),hve=a("strong"),NFr=o("transfo-xl"),jFr=o(" \u2014 "),HW=a("a"),DFr=o("TFTransfoXLForSequenceClassification"),GFr=o(" (Transformer-XL model)"),OFr=l(),p5=a("li"),uve=a("strong"),VFr=o("xlm"),XFr=o(" \u2014 "),UW=a("a"),zFr=o("TFXLMForSequenceClassification"),QFr=o(" (XLM model)"),WFr=l(),_5=a("li"),pve=a("strong"),HFr=o("xlm-roberta"),UFr=o(" \u2014 "),JW=a("a"),JFr=o("TFXLMRobertaForSequenceClassification"),YFr=o(" (XLM-RoBERTa model)"),KFr=l(),b5=a("li"),_ve=a("strong"),ZFr=o("xlnet"),evr=o(" \u2014 "),YW=a("a"),ovr=o("TFXLNetForSequenceClassification"),rvr=o(" (XLNet model)"),tvr=l(),v(F5.$$.fragment),aqe=l(),nc=a("h2"),v5=a("a"),bve=a("span"),v(gx.$$.fragment),avr=l(),Fve=a("span"),nvr=o("TFAutoModelForMultipleChoice"),nqe=l(),ar=a("div"),v(hx.$$.fragment),svr=l(),sc=a("p"),lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=a("a"),ivr=o("from_pretrained()"),dvr=o(" class method or the "),ZW=a("a"),cvr=o("from_config()"),mvr=o(` class
method.`),fvr=l(),ux=a("p"),gvr=o("This class cannot be instantiated directly using "),vve=a("code"),hvr=o("__init__()"),uvr=o(" (throws an error)."),pvr=l(),St=a("div"),v(px.$$.fragment),_vr=l(),Tve=a("p"),bvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fvr=l(),lc=a("p"),vvr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Tvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),Evr=o("from_pretrained()"),Cvr=o(" to load the model weights."),wvr=l(),v(T5.$$.fragment),Avr=l(),Sr=a("div"),v(_x.$$.fragment),yvr=l(),Eve=a("p"),Lvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xvr=l(),sn=a("p"),$vr=o("The model class to instantiate is selected based on the "),Cve=a("code"),kvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),Rvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),Pvr=o("pretrained_model_name_or_path"),Ivr=o(":"),qvr=l(),he=a("ul"),M5=a("li"),yve=a("strong"),Nvr=o("albert"),jvr=o(" \u2014 "),oH=a("a"),Dvr=o("TFAlbertForMultipleChoice"),Gvr=o(" (ALBERT model)"),Ovr=l(),E5=a("li"),Lve=a("strong"),Vvr=o("bert"),Xvr=o(" \u2014 "),rH=a("a"),zvr=o("TFBertForMultipleChoice"),Qvr=o(" (BERT model)"),Wvr=l(),C5=a("li"),xve=a("strong"),Hvr=o("camembert"),Uvr=o(" \u2014 "),tH=a("a"),Jvr=o("TFCamembertForMultipleChoice"),Yvr=o(" (CamemBERT model)"),Kvr=l(),w5=a("li"),$ve=a("strong"),Zvr=o("convbert"),e1r=o(" \u2014 "),aH=a("a"),o1r=o("TFConvBertForMultipleChoice"),r1r=o(" (ConvBERT model)"),t1r=l(),A5=a("li"),kve=a("strong"),a1r=o("distilbert"),n1r=o(" \u2014 "),nH=a("a"),s1r=o("TFDistilBertForMultipleChoice"),l1r=o(" (DistilBERT model)"),i1r=l(),y5=a("li"),Sve=a("strong"),d1r=o("electra"),c1r=o(" \u2014 "),sH=a("a"),m1r=o("TFElectraForMultipleChoice"),f1r=o(" (ELECTRA model)"),g1r=l(),L5=a("li"),Rve=a("strong"),h1r=o("flaubert"),u1r=o(" \u2014 "),lH=a("a"),p1r=o("TFFlaubertForMultipleChoice"),_1r=o(" (FlauBERT model)"),b1r=l(),x5=a("li"),Bve=a("strong"),F1r=o("funnel"),v1r=o(" \u2014 "),iH=a("a"),T1r=o("TFFunnelForMultipleChoice"),M1r=o(" (Funnel Transformer model)"),E1r=l(),$5=a("li"),Pve=a("strong"),C1r=o("longformer"),w1r=o(" \u2014 "),dH=a("a"),A1r=o("TFLongformerForMultipleChoice"),y1r=o(" (Longformer model)"),L1r=l(),k5=a("li"),Ive=a("strong"),x1r=o("mobilebert"),$1r=o(" \u2014 "),cH=a("a"),k1r=o("TFMobileBertForMultipleChoice"),S1r=o(" (MobileBERT model)"),R1r=l(),S5=a("li"),qve=a("strong"),B1r=o("mpnet"),P1r=o(" \u2014 "),mH=a("a"),I1r=o("TFMPNetForMultipleChoice"),q1r=o(" (MPNet model)"),N1r=l(),R5=a("li"),Nve=a("strong"),j1r=o("rembert"),D1r=o(" \u2014 "),fH=a("a"),G1r=o("TFRemBertForMultipleChoice"),O1r=o(" (RemBERT model)"),V1r=l(),B5=a("li"),jve=a("strong"),X1r=o("roberta"),z1r=o(" \u2014 "),gH=a("a"),Q1r=o("TFRobertaForMultipleChoice"),W1r=o(" (RoBERTa model)"),H1r=l(),P5=a("li"),Dve=a("strong"),U1r=o("roformer"),J1r=o(" \u2014 "),hH=a("a"),Y1r=o("TFRoFormerForMultipleChoice"),K1r=o(" (RoFormer model)"),Z1r=l(),I5=a("li"),Gve=a("strong"),eTr=o("xlm"),oTr=o(" \u2014 "),uH=a("a"),rTr=o("TFXLMForMultipleChoice"),tTr=o(" (XLM model)"),aTr=l(),q5=a("li"),Ove=a("strong"),nTr=o("xlm-roberta"),sTr=o(" \u2014 "),pH=a("a"),lTr=o("TFXLMRobertaForMultipleChoice"),iTr=o(" (XLM-RoBERTa model)"),dTr=l(),N5=a("li"),Vve=a("strong"),cTr=o("xlnet"),mTr=o(" \u2014 "),_H=a("a"),fTr=o("TFXLNetForMultipleChoice"),gTr=o(" (XLNet model)"),hTr=l(),v(j5.$$.fragment),sqe=l(),ic=a("h2"),D5=a("a"),Xve=a("span"),v(bx.$$.fragment),uTr=l(),zve=a("span"),pTr=o("TFAutoModelForNextSentencePrediction"),lqe=l(),nr=a("div"),v(Fx.$$.fragment),_Tr=l(),dc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=a("a"),FTr=o("from_pretrained()"),vTr=o(" class method or the "),FH=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),vx=a("p"),CTr=o("This class cannot be instantiated directly using "),Qve=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),yTr=l(),Rt=a("div"),v(Tx.$$.fragment),LTr=l(),Wve=a("p"),xTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Tr=l(),cc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),ITr=l(),v(G5.$$.fragment),qTr=l(),Rr=a("div"),v(Mx.$$.fragment),NTr=l(),Uve=a("p"),jTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DTr=l(),ln=a("p"),GTr=o("The model class to instantiate is selected based on the "),Jve=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(":"),HTr=l(),Ex=a("ul"),O5=a("li"),Zve=a("strong"),UTr=o("bert"),JTr=o(" \u2014 "),TH=a("a"),YTr=o("TFBertForNextSentencePrediction"),KTr=o(" (BERT model)"),ZTr=l(),V5=a("li"),e1e=a("strong"),eMr=o("mobilebert"),oMr=o(" \u2014 "),MH=a("a"),rMr=o("TFMobileBertForNextSentencePrediction"),tMr=o(" (MobileBERT model)"),aMr=l(),v(X5.$$.fragment),iqe=l(),mc=a("h2"),z5=a("a"),o1e=a("span"),v(Cx.$$.fragment),nMr=l(),r1e=a("span"),sMr=o("TFAutoModelForTableQuestionAnswering"),dqe=l(),sr=a("div"),v(wx.$$.fragment),lMr=l(),fc=a("p"),iMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=a("a"),dMr=o("from_pretrained()"),cMr=o(" class method or the "),CH=a("a"),mMr=o("from_config()"),fMr=o(` class
method.`),gMr=l(),Ax=a("p"),hMr=o("This class cannot be instantiated directly using "),t1e=a("code"),uMr=o("__init__()"),pMr=o(" (throws an error)."),_Mr=l(),Bt=a("div"),v(yx.$$.fragment),bMr=l(),a1e=a("p"),FMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vMr=l(),gc=a("p"),TMr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),MMr=o("not"),EMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),CMr=o("from_pretrained()"),wMr=o(" to load the model weights."),AMr=l(),v(Q5.$$.fragment),yMr=l(),Br=a("div"),v(Lx.$$.fragment),LMr=l(),s1e=a("p"),xMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Mr=l(),dn=a("p"),kMr=o("The model class to instantiate is selected based on the "),l1e=a("code"),SMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),BMr=o("pretrained_model_name_or_path"),PMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(":"),NMr=l(),c1e=a("ul"),W5=a("li"),m1e=a("strong"),jMr=o("tapas"),DMr=o(" \u2014 "),AH=a("a"),GMr=o("TFTapasForQuestionAnswering"),OMr=o(" (TAPAS model)"),VMr=l(),v(H5.$$.fragment),cqe=l(),hc=a("h2"),U5=a("a"),f1e=a("span"),v(xx.$$.fragment),XMr=l(),g1e=a("span"),zMr=o("TFAutoModelForTokenClassification"),mqe=l(),lr=a("div"),v($x.$$.fragment),QMr=l(),uc=a("p"),WMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),LH=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),kx=a("p"),ZMr=o("This class cannot be instantiated directly using "),h1e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),Pt=a("div"),v(Sx.$$.fragment),t4r=l(),u1e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n4r=l(),pc=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),d4r=o("from_pretrained()"),c4r=o(" to load the model weights."),m4r=l(),v(J5.$$.fragment),f4r=l(),Pr=a("div"),v(Rx.$$.fragment),g4r=l(),_1e=a("p"),h4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u4r=l(),cn=a("p"),p4r=o("The model class to instantiate is selected based on the "),b1e=a("code"),_4r=o("model_type"),b4r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),F4r=o("pretrained_model_name_or_path"),v4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(":"),E4r=l(),de=a("ul"),Y5=a("li"),T1e=a("strong"),C4r=o("albert"),w4r=o(" \u2014 "),$H=a("a"),A4r=o("TFAlbertForTokenClassification"),y4r=o(" (ALBERT model)"),L4r=l(),K5=a("li"),M1e=a("strong"),x4r=o("bert"),$4r=o(" \u2014 "),kH=a("a"),k4r=o("TFBertForTokenClassification"),S4r=o(" (BERT model)"),R4r=l(),Z5=a("li"),E1e=a("strong"),B4r=o("camembert"),P4r=o(" \u2014 "),SH=a("a"),I4r=o("TFCamembertForTokenClassification"),q4r=o(" (CamemBERT model)"),N4r=l(),eC=a("li"),C1e=a("strong"),j4r=o("convbert"),D4r=o(" \u2014 "),RH=a("a"),G4r=o("TFConvBertForTokenClassification"),O4r=o(" (ConvBERT model)"),V4r=l(),oC=a("li"),w1e=a("strong"),X4r=o("deberta"),z4r=o(" \u2014 "),BH=a("a"),Q4r=o("TFDebertaForTokenClassification"),W4r=o(" (DeBERTa model)"),H4r=l(),rC=a("li"),A1e=a("strong"),U4r=o("deberta-v2"),J4r=o(" \u2014 "),PH=a("a"),Y4r=o("TFDebertaV2ForTokenClassification"),K4r=o(" (DeBERTa-v2 model)"),Z4r=l(),tC=a("li"),y1e=a("strong"),eEr=o("distilbert"),oEr=o(" \u2014 "),IH=a("a"),rEr=o("TFDistilBertForTokenClassification"),tEr=o(" (DistilBERT model)"),aEr=l(),aC=a("li"),L1e=a("strong"),nEr=o("electra"),sEr=o(" \u2014 "),qH=a("a"),lEr=o("TFElectraForTokenClassification"),iEr=o(" (ELECTRA model)"),dEr=l(),nC=a("li"),x1e=a("strong"),cEr=o("flaubert"),mEr=o(" \u2014 "),NH=a("a"),fEr=o("TFFlaubertForTokenClassification"),gEr=o(" (FlauBERT model)"),hEr=l(),sC=a("li"),$1e=a("strong"),uEr=o("funnel"),pEr=o(" \u2014 "),jH=a("a"),_Er=o("TFFunnelForTokenClassification"),bEr=o(" (Funnel Transformer model)"),FEr=l(),lC=a("li"),k1e=a("strong"),vEr=o("layoutlm"),TEr=o(" \u2014 "),DH=a("a"),MEr=o("TFLayoutLMForTokenClassification"),EEr=o(" (LayoutLM model)"),CEr=l(),iC=a("li"),S1e=a("strong"),wEr=o("longformer"),AEr=o(" \u2014 "),GH=a("a"),yEr=o("TFLongformerForTokenClassification"),LEr=o(" (Longformer model)"),xEr=l(),dC=a("li"),R1e=a("strong"),$Er=o("mobilebert"),kEr=o(" \u2014 "),OH=a("a"),SEr=o("TFMobileBertForTokenClassification"),REr=o(" (MobileBERT model)"),BEr=l(),cC=a("li"),B1e=a("strong"),PEr=o("mpnet"),IEr=o(" \u2014 "),VH=a("a"),qEr=o("TFMPNetForTokenClassification"),NEr=o(" (MPNet model)"),jEr=l(),mC=a("li"),P1e=a("strong"),DEr=o("rembert"),GEr=o(" \u2014 "),XH=a("a"),OEr=o("TFRemBertForTokenClassification"),VEr=o(" (RemBERT model)"),XEr=l(),fC=a("li"),I1e=a("strong"),zEr=o("roberta"),QEr=o(" \u2014 "),zH=a("a"),WEr=o("TFRobertaForTokenClassification"),HEr=o(" (RoBERTa model)"),UEr=l(),gC=a("li"),q1e=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),QH=a("a"),KEr=o("TFRoFormerForTokenClassification"),ZEr=o(" (RoFormer model)"),e5r=l(),hC=a("li"),N1e=a("strong"),o5r=o("xlm"),r5r=o(" \u2014 "),WH=a("a"),t5r=o("TFXLMForTokenClassification"),a5r=o(" (XLM model)"),n5r=l(),uC=a("li"),j1e=a("strong"),s5r=o("xlm-roberta"),l5r=o(" \u2014 "),HH=a("a"),i5r=o("TFXLMRobertaForTokenClassification"),d5r=o(" (XLM-RoBERTa model)"),c5r=l(),pC=a("li"),D1e=a("strong"),m5r=o("xlnet"),f5r=o(" \u2014 "),UH=a("a"),g5r=o("TFXLNetForTokenClassification"),h5r=o(" (XLNet model)"),u5r=l(),v(_C.$$.fragment),fqe=l(),_c=a("h2"),bC=a("a"),G1e=a("span"),v(Bx.$$.fragment),p5r=l(),O1e=a("span"),_5r=o("TFAutoModelForQuestionAnswering"),gqe=l(),ir=a("div"),v(Px.$$.fragment),b5r=l(),bc=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=a("a"),v5r=o("from_pretrained()"),T5r=o(" class method or the "),YH=a("a"),M5r=o("from_config()"),E5r=o(` class
method.`),C5r=l(),Ix=a("p"),w5r=o("This class cannot be instantiated directly using "),V1e=a("code"),A5r=o("__init__()"),y5r=o(" (throws an error)."),L5r=l(),It=a("div"),v(qx.$$.fragment),x5r=l(),X1e=a("p"),$5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k5r=l(),Fc=a("p"),S5r=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),R5r=o("not"),B5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),P5r=o("from_pretrained()"),I5r=o(" to load the model weights."),q5r=l(),v(FC.$$.fragment),N5r=l(),Ir=a("div"),v(Nx.$$.fragment),j5r=l(),Q1e=a("p"),D5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5r=l(),mn=a("p"),O5r=o("The model class to instantiate is selected based on the "),W1e=a("code"),V5r=o("model_type"),X5r=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),z5r=o("pretrained_model_name_or_path"),Q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),W5r=o("pretrained_model_name_or_path"),H5r=o(":"),U5r=l(),ce=a("ul"),vC=a("li"),J1e=a("strong"),J5r=o("albert"),Y5r=o(" \u2014 "),ZH=a("a"),K5r=o("TFAlbertForQuestionAnswering"),Z5r=o(" (ALBERT model)"),eCr=l(),TC=a("li"),Y1e=a("strong"),oCr=o("bert"),rCr=o(" \u2014 "),eU=a("a"),tCr=o("TFBertForQuestionAnswering"),aCr=o(" (BERT model)"),nCr=l(),MC=a("li"),K1e=a("strong"),sCr=o("camembert"),lCr=o(" \u2014 "),oU=a("a"),iCr=o("TFCamembertForQuestionAnswering"),dCr=o(" (CamemBERT model)"),cCr=l(),EC=a("li"),Z1e=a("strong"),mCr=o("convbert"),fCr=o(" \u2014 "),rU=a("a"),gCr=o("TFConvBertForQuestionAnswering"),hCr=o(" (ConvBERT model)"),uCr=l(),CC=a("li"),eTe=a("strong"),pCr=o("deberta"),_Cr=o(" \u2014 "),tU=a("a"),bCr=o("TFDebertaForQuestionAnswering"),FCr=o(" (DeBERTa model)"),vCr=l(),wC=a("li"),oTe=a("strong"),TCr=o("deberta-v2"),MCr=o(" \u2014 "),aU=a("a"),ECr=o("TFDebertaV2ForQuestionAnswering"),CCr=o(" (DeBERTa-v2 model)"),wCr=l(),AC=a("li"),rTe=a("strong"),ACr=o("distilbert"),yCr=o(" \u2014 "),nU=a("a"),LCr=o("TFDistilBertForQuestionAnswering"),xCr=o(" (DistilBERT model)"),$Cr=l(),yC=a("li"),tTe=a("strong"),kCr=o("electra"),SCr=o(" \u2014 "),sU=a("a"),RCr=o("TFElectraForQuestionAnswering"),BCr=o(" (ELECTRA model)"),PCr=l(),LC=a("li"),aTe=a("strong"),ICr=o("flaubert"),qCr=o(" \u2014 "),lU=a("a"),NCr=o("TFFlaubertForQuestionAnsweringSimple"),jCr=o(" (FlauBERT model)"),DCr=l(),xC=a("li"),nTe=a("strong"),GCr=o("funnel"),OCr=o(" \u2014 "),iU=a("a"),VCr=o("TFFunnelForQuestionAnswering"),XCr=o(" (Funnel Transformer model)"),zCr=l(),$C=a("li"),sTe=a("strong"),QCr=o("gptj"),WCr=o(" \u2014 "),dU=a("a"),HCr=o("TFGPTJForQuestionAnswering"),UCr=o(" (GPT-J model)"),JCr=l(),kC=a("li"),lTe=a("strong"),YCr=o("longformer"),KCr=o(" \u2014 "),cU=a("a"),ZCr=o("TFLongformerForQuestionAnswering"),e3r=o(" (Longformer model)"),o3r=l(),SC=a("li"),iTe=a("strong"),r3r=o("mobilebert"),t3r=o(" \u2014 "),mU=a("a"),a3r=o("TFMobileBertForQuestionAnswering"),n3r=o(" (MobileBERT model)"),s3r=l(),RC=a("li"),dTe=a("strong"),l3r=o("mpnet"),i3r=o(" \u2014 "),fU=a("a"),d3r=o("TFMPNetForQuestionAnswering"),c3r=o(" (MPNet model)"),m3r=l(),BC=a("li"),cTe=a("strong"),f3r=o("rembert"),g3r=o(" \u2014 "),gU=a("a"),h3r=o("TFRemBertForQuestionAnswering"),u3r=o(" (RemBERT model)"),p3r=l(),PC=a("li"),mTe=a("strong"),_3r=o("roberta"),b3r=o(" \u2014 "),hU=a("a"),F3r=o("TFRobertaForQuestionAnswering"),v3r=o(" (RoBERTa model)"),T3r=l(),IC=a("li"),fTe=a("strong"),M3r=o("roformer"),E3r=o(" \u2014 "),uU=a("a"),C3r=o("TFRoFormerForQuestionAnswering"),w3r=o(" (RoFormer model)"),A3r=l(),qC=a("li"),gTe=a("strong"),y3r=o("xlm"),L3r=o(" \u2014 "),pU=a("a"),x3r=o("TFXLMForQuestionAnsweringSimple"),$3r=o(" (XLM model)"),k3r=l(),NC=a("li"),hTe=a("strong"),S3r=o("xlm-roberta"),R3r=o(" \u2014 "),_U=a("a"),B3r=o("TFXLMRobertaForQuestionAnswering"),P3r=o(" (XLM-RoBERTa model)"),I3r=l(),jC=a("li"),uTe=a("strong"),q3r=o("xlnet"),N3r=o(" \u2014 "),bU=a("a"),j3r=o("TFXLNetForQuestionAnsweringSimple"),D3r=o(" (XLNet model)"),G3r=l(),v(DC.$$.fragment),hqe=l(),vc=a("h2"),GC=a("a"),pTe=a("span"),v(jx.$$.fragment),O3r=l(),_Te=a("span"),V3r=o("TFAutoModelForVision2Seq"),uqe=l(),dr=a("div"),v(Dx.$$.fragment),X3r=l(),Tc=a("p"),z3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FU=a("a"),Q3r=o("from_pretrained()"),W3r=o(" class method or the "),vU=a("a"),H3r=o("from_config()"),U3r=o(` class
method.`),J3r=l(),Gx=a("p"),Y3r=o("This class cannot be instantiated directly using "),bTe=a("code"),K3r=o("__init__()"),Z3r=o(" (throws an error)."),ewr=l(),qt=a("div"),v(Ox.$$.fragment),owr=l(),FTe=a("p"),rwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),twr=l(),Mc=a("p"),awr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),nwr=o("not"),swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),lwr=o("from_pretrained()"),iwr=o(" to load the model weights."),dwr=l(),v(OC.$$.fragment),cwr=l(),qr=a("div"),v(Vx.$$.fragment),mwr=l(),TTe=a("p"),fwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gwr=l(),fn=a("p"),hwr=o("The model class to instantiate is selected based on the "),MTe=a("code"),uwr=o("model_type"),pwr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),_wr=o("pretrained_model_name_or_path"),bwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),Fwr=o("pretrained_model_name_or_path"),vwr=o(":"),Twr=l(),wTe=a("ul"),VC=a("li"),ATe=a("strong"),Mwr=o("vision-encoder-decoder"),Ewr=o(" \u2014 "),MU=a("a"),Cwr=o("TFVisionEncoderDecoderModel"),wwr=o(" (Vision Encoder decoder model)"),Awr=l(),v(XC.$$.fragment),pqe=l(),Ec=a("h2"),zC=a("a"),yTe=a("span"),v(Xx.$$.fragment),ywr=l(),LTe=a("span"),Lwr=o("TFAutoModelForSpeechSeq2Seq"),_qe=l(),cr=a("div"),v(zx.$$.fragment),xwr=l(),Cc=a("p"),$wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),CU=a("a"),Rwr=o("from_config()"),Bwr=o(` class
method.`),Pwr=l(),Qx=a("p"),Iwr=o("This class cannot be instantiated directly using "),xTe=a("code"),qwr=o("__init__()"),Nwr=o(" (throws an error)."),jwr=l(),Nt=a("div"),v(Wx.$$.fragment),Dwr=l(),$Te=a("p"),Gwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Owr=l(),wc=a("p"),Vwr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),Xwr=o("not"),zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),Qwr=o("from_pretrained()"),Wwr=o(" to load the model weights."),Hwr=l(),v(QC.$$.fragment),Uwr=l(),Nr=a("div"),v(Hx.$$.fragment),Jwr=l(),STe=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kwr=l(),gn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),RTe=a("code"),eAr=o("model_type"),oAr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),rAr=o("pretrained_model_name_or_path"),tAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(":"),sAr=l(),ITe=a("ul"),WC=a("li"),qTe=a("strong"),lAr=o("speech_to_text"),iAr=o(" \u2014 "),AU=a("a"),dAr=o("TFSpeech2TextForConditionalGeneration"),cAr=o(" (Speech2Text model)"),mAr=l(),v(HC.$$.fragment),bqe=l(),Ac=a("h2"),UC=a("a"),NTe=a("span"),v(Ux.$$.fragment),fAr=l(),jTe=a("span"),gAr=o("FlaxAutoModel"),Fqe=l(),mr=a("div"),v(Jx.$$.fragment),hAr=l(),yc=a("p"),uAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=a("a"),pAr=o("from_pretrained()"),_Ar=o(" class method or the "),LU=a("a"),bAr=o("from_config()"),FAr=o(` class
method.`),vAr=l(),Yx=a("p"),TAr=o("This class cannot be instantiated directly using "),DTe=a("code"),MAr=o("__init__()"),EAr=o(" (throws an error)."),CAr=l(),jt=a("div"),v(Kx.$$.fragment),wAr=l(),GTe=a("p"),AAr=o("Instantiates one of the base model classes of the library from a configuration."),yAr=l(),Lc=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),xAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),kAr=o("from_pretrained()"),SAr=o(" to load the model weights."),RAr=l(),v(JC.$$.fragment),BAr=l(),jr=a("div"),v(Zx.$$.fragment),PAr=l(),VTe=a("p"),IAr=o("Instantiate one of the base model classes of the library from a pretrained model."),qAr=l(),hn=a("p"),NAr=o("The model class to instantiate is selected based on the "),XTe=a("code"),jAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(":"),zAr=l(),re=a("ul"),YC=a("li"),WTe=a("strong"),QAr=o("albert"),WAr=o(" \u2014 "),$U=a("a"),HAr=o("FlaxAlbertModel"),UAr=o(" (ALBERT model)"),JAr=l(),KC=a("li"),HTe=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),kU=a("a"),ZAr=o("FlaxBartModel"),e6r=o(" (BART model)"),o6r=l(),ZC=a("li"),UTe=a("strong"),r6r=o("beit"),t6r=o(" \u2014 "),SU=a("a"),a6r=o("FlaxBeitModel"),n6r=o(" (BEiT model)"),s6r=l(),e3=a("li"),JTe=a("strong"),l6r=o("bert"),i6r=o(" \u2014 "),RU=a("a"),d6r=o("FlaxBertModel"),c6r=o(" (BERT model)"),m6r=l(),o3=a("li"),YTe=a("strong"),f6r=o("big_bird"),g6r=o(" \u2014 "),BU=a("a"),h6r=o("FlaxBigBirdModel"),u6r=o(" (BigBird model)"),p6r=l(),r3=a("li"),KTe=a("strong"),_6r=o("blenderbot"),b6r=o(" \u2014 "),PU=a("a"),F6r=o("FlaxBlenderbotModel"),v6r=o(" (Blenderbot model)"),T6r=l(),t3=a("li"),ZTe=a("strong"),M6r=o("blenderbot-small"),E6r=o(" \u2014 "),IU=a("a"),C6r=o("FlaxBlenderbotSmallModel"),w6r=o(" (BlenderbotSmall model)"),A6r=l(),a3=a("li"),eMe=a("strong"),y6r=o("clip"),L6r=o(" \u2014 "),qU=a("a"),x6r=o("FlaxCLIPModel"),$6r=o(" (CLIP model)"),k6r=l(),n3=a("li"),oMe=a("strong"),S6r=o("distilbert"),R6r=o(" \u2014 "),NU=a("a"),B6r=o("FlaxDistilBertModel"),P6r=o(" (DistilBERT model)"),I6r=l(),s3=a("li"),rMe=a("strong"),q6r=o("electra"),N6r=o(" \u2014 "),jU=a("a"),j6r=o("FlaxElectraModel"),D6r=o(" (ELECTRA model)"),G6r=l(),l3=a("li"),tMe=a("strong"),O6r=o("gpt2"),V6r=o(" \u2014 "),DU=a("a"),X6r=o("FlaxGPT2Model"),z6r=o(" (OpenAI GPT-2 model)"),Q6r=l(),i3=a("li"),aMe=a("strong"),W6r=o("gpt_neo"),H6r=o(" \u2014 "),GU=a("a"),U6r=o("FlaxGPTNeoModel"),J6r=o(" (GPT Neo model)"),Y6r=l(),d3=a("li"),nMe=a("strong"),K6r=o("gptj"),Z6r=o(" \u2014 "),OU=a("a"),e0r=o("FlaxGPTJModel"),o0r=o(" (GPT-J model)"),r0r=l(),c3=a("li"),sMe=a("strong"),t0r=o("marian"),a0r=o(" \u2014 "),VU=a("a"),n0r=o("FlaxMarianModel"),s0r=o(" (Marian model)"),l0r=l(),m3=a("li"),lMe=a("strong"),i0r=o("mbart"),d0r=o(" \u2014 "),XU=a("a"),c0r=o("FlaxMBartModel"),m0r=o(" (mBART model)"),f0r=l(),f3=a("li"),iMe=a("strong"),g0r=o("mt5"),h0r=o(" \u2014 "),zU=a("a"),u0r=o("FlaxMT5Model"),p0r=o(" (mT5 model)"),_0r=l(),g3=a("li"),dMe=a("strong"),b0r=o("pegasus"),F0r=o(" \u2014 "),QU=a("a"),v0r=o("FlaxPegasusModel"),T0r=o(" (Pegasus model)"),M0r=l(),h3=a("li"),cMe=a("strong"),E0r=o("roberta"),C0r=o(" \u2014 "),WU=a("a"),w0r=o("FlaxRobertaModel"),A0r=o(" (RoBERTa model)"),y0r=l(),u3=a("li"),mMe=a("strong"),L0r=o("roformer"),x0r=o(" \u2014 "),HU=a("a"),$0r=o("FlaxRoFormerModel"),k0r=o(" (RoFormer model)"),S0r=l(),p3=a("li"),fMe=a("strong"),R0r=o("t5"),B0r=o(" \u2014 "),UU=a("a"),P0r=o("FlaxT5Model"),I0r=o(" (T5 model)"),q0r=l(),_3=a("li"),gMe=a("strong"),N0r=o("vision-text-dual-encoder"),j0r=o(" \u2014 "),JU=a("a"),D0r=o("FlaxVisionTextDualEncoderModel"),G0r=o(" (VisionTextDualEncoder model)"),O0r=l(),b3=a("li"),hMe=a("strong"),V0r=o("vit"),X0r=o(" \u2014 "),YU=a("a"),z0r=o("FlaxViTModel"),Q0r=o(" (ViT model)"),W0r=l(),F3=a("li"),uMe=a("strong"),H0r=o("wav2vec2"),U0r=o(" \u2014 "),KU=a("a"),J0r=o("FlaxWav2Vec2Model"),Y0r=o(" (Wav2Vec2 model)"),K0r=l(),v3=a("li"),pMe=a("strong"),Z0r=o("xglm"),eyr=o(" \u2014 "),ZU=a("a"),oyr=o("FlaxXGLMModel"),ryr=o(" (XGLM model)"),tyr=l(),T3=a("li"),_Me=a("strong"),ayr=o("xlm-roberta"),nyr=o(" \u2014 "),eJ=a("a"),syr=o("FlaxXLMRobertaModel"),lyr=o(" (XLM-RoBERTa model)"),iyr=l(),v(M3.$$.fragment),vqe=l(),xc=a("h2"),E3=a("a"),bMe=a("span"),v(e7.$$.fragment),dyr=l(),FMe=a("span"),cyr=o("FlaxAutoModelForCausalLM"),Tqe=l(),fr=a("div"),v(o7.$$.fragment),myr=l(),$c=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),rJ=a("a"),uyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),r7=a("p"),byr=o("This class cannot be instantiated directly using "),vMe=a("code"),Fyr=o("__init__()"),vyr=o(" (throws an error)."),Tyr=l(),Dt=a("div"),v(t7.$$.fragment),Myr=l(),TMe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cyr=l(),kc=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),Ayr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),v(C3.$$.fragment),kyr=l(),Dr=a("div"),v(a7.$$.fragment),Syr=l(),EMe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Byr=l(),un=a("p"),Pyr=o("The model class to instantiate is selected based on the "),CMe=a("code"),Iyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),ke=a("ul"),w3=a("li"),yMe=a("strong"),Vyr=o("bart"),Xyr=o(" \u2014 "),aJ=a("a"),zyr=o("FlaxBartForCausalLM"),Qyr=o(" (BART model)"),Wyr=l(),A3=a("li"),LMe=a("strong"),Hyr=o("bert"),Uyr=o(" \u2014 "),nJ=a("a"),Jyr=o("FlaxBertForCausalLM"),Yyr=o(" (BERT model)"),Kyr=l(),y3=a("li"),xMe=a("strong"),Zyr=o("big_bird"),eLr=o(" \u2014 "),sJ=a("a"),oLr=o("FlaxBigBirdForCausalLM"),rLr=o(" (BigBird model)"),tLr=l(),L3=a("li"),$Me=a("strong"),aLr=o("electra"),nLr=o(" \u2014 "),lJ=a("a"),sLr=o("FlaxElectraForCausalLM"),lLr=o(" (ELECTRA model)"),iLr=l(),x3=a("li"),kMe=a("strong"),dLr=o("gpt2"),cLr=o(" \u2014 "),iJ=a("a"),mLr=o("FlaxGPT2LMHeadModel"),fLr=o(" (OpenAI GPT-2 model)"),gLr=l(),$3=a("li"),SMe=a("strong"),hLr=o("gpt_neo"),uLr=o(" \u2014 "),dJ=a("a"),pLr=o("FlaxGPTNeoForCausalLM"),_Lr=o(" (GPT Neo model)"),bLr=l(),k3=a("li"),RMe=a("strong"),FLr=o("gptj"),vLr=o(" \u2014 "),cJ=a("a"),TLr=o("FlaxGPTJForCausalLM"),MLr=o(" (GPT-J model)"),ELr=l(),S3=a("li"),BMe=a("strong"),CLr=o("roberta"),wLr=o(" \u2014 "),mJ=a("a"),ALr=o("FlaxRobertaForCausalLM"),yLr=o(" (RoBERTa model)"),LLr=l(),R3=a("li"),PMe=a("strong"),xLr=o("xglm"),$Lr=o(" \u2014 "),fJ=a("a"),kLr=o("FlaxXGLMForCausalLM"),SLr=o(" (XGLM model)"),RLr=l(),v(B3.$$.fragment),Mqe=l(),Sc=a("h2"),P3=a("a"),IMe=a("span"),v(n7.$$.fragment),BLr=l(),qMe=a("span"),PLr=o("FlaxAutoModelForPreTraining"),Eqe=l(),gr=a("div"),v(s7.$$.fragment),ILr=l(),Rc=a("p"),qLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=a("a"),NLr=o("from_pretrained()"),jLr=o(" class method or the "),hJ=a("a"),DLr=o("from_config()"),GLr=o(` class
method.`),OLr=l(),l7=a("p"),VLr=o("This class cannot be instantiated directly using "),NMe=a("code"),XLr=o("__init__()"),zLr=o(" (throws an error)."),QLr=l(),Gt=a("div"),v(i7.$$.fragment),WLr=l(),jMe=a("p"),HLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ULr=l(),Bc=a("p"),JLr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),YLr=o("not"),KLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),ZLr=o("from_pretrained()"),e8r=o(" to load the model weights."),o8r=l(),v(I3.$$.fragment),r8r=l(),Gr=a("div"),v(d7.$$.fragment),t8r=l(),GMe=a("p"),a8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n8r=l(),pn=a("p"),s8r=o("The model class to instantiate is selected based on the "),OMe=a("code"),l8r=o("model_type"),i8r=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),m8r=o("pretrained_model_name_or_path"),f8r=o(":"),g8r=l(),Me=a("ul"),q3=a("li"),zMe=a("strong"),h8r=o("albert"),u8r=o(" \u2014 "),pJ=a("a"),p8r=o("FlaxAlbertForPreTraining"),_8r=o(" (ALBERT model)"),b8r=l(),N3=a("li"),QMe=a("strong"),F8r=o("bart"),v8r=o(" \u2014 "),_J=a("a"),T8r=o("FlaxBartForConditionalGeneration"),M8r=o(" (BART model)"),E8r=l(),j3=a("li"),WMe=a("strong"),C8r=o("bert"),w8r=o(" \u2014 "),bJ=a("a"),A8r=o("FlaxBertForPreTraining"),y8r=o(" (BERT model)"),L8r=l(),D3=a("li"),HMe=a("strong"),x8r=o("big_bird"),$8r=o(" \u2014 "),FJ=a("a"),k8r=o("FlaxBigBirdForPreTraining"),S8r=o(" (BigBird model)"),R8r=l(),G3=a("li"),UMe=a("strong"),B8r=o("electra"),P8r=o(" \u2014 "),vJ=a("a"),I8r=o("FlaxElectraForPreTraining"),q8r=o(" (ELECTRA model)"),N8r=l(),O3=a("li"),JMe=a("strong"),j8r=o("mbart"),D8r=o(" \u2014 "),TJ=a("a"),G8r=o("FlaxMBartForConditionalGeneration"),O8r=o(" (mBART model)"),V8r=l(),V3=a("li"),YMe=a("strong"),X8r=o("mt5"),z8r=o(" \u2014 "),MJ=a("a"),Q8r=o("FlaxMT5ForConditionalGeneration"),W8r=o(" (mT5 model)"),H8r=l(),X3=a("li"),KMe=a("strong"),U8r=o("roberta"),J8r=o(" \u2014 "),EJ=a("a"),Y8r=o("FlaxRobertaForMaskedLM"),K8r=o(" (RoBERTa model)"),Z8r=l(),z3=a("li"),ZMe=a("strong"),exr=o("roformer"),oxr=o(" \u2014 "),CJ=a("a"),rxr=o("FlaxRoFormerForMaskedLM"),txr=o(" (RoFormer model)"),axr=l(),Q3=a("li"),e4e=a("strong"),nxr=o("t5"),sxr=o(" \u2014 "),wJ=a("a"),lxr=o("FlaxT5ForConditionalGeneration"),ixr=o(" (T5 model)"),dxr=l(),W3=a("li"),o4e=a("strong"),cxr=o("wav2vec2"),mxr=o(" \u2014 "),AJ=a("a"),fxr=o("FlaxWav2Vec2ForPreTraining"),gxr=o(" (Wav2Vec2 model)"),hxr=l(),H3=a("li"),r4e=a("strong"),uxr=o("xlm-roberta"),pxr=o(" \u2014 "),yJ=a("a"),_xr=o("FlaxXLMRobertaForMaskedLM"),bxr=o(" (XLM-RoBERTa model)"),Fxr=l(),v(U3.$$.fragment),Cqe=l(),Pc=a("h2"),J3=a("a"),t4e=a("span"),v(c7.$$.fragment),vxr=l(),a4e=a("span"),Txr=o("FlaxAutoModelForMaskedLM"),wqe=l(),hr=a("div"),v(m7.$$.fragment),Mxr=l(),Ic=a("p"),Exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=a("a"),Cxr=o("from_pretrained()"),wxr=o(" class method or the "),xJ=a("a"),Axr=o("from_config()"),yxr=o(` class
method.`),Lxr=l(),f7=a("p"),xxr=o("This class cannot be instantiated directly using "),n4e=a("code"),$xr=o("__init__()"),kxr=o(" (throws an error)."),Sxr=l(),Ot=a("div"),v(g7.$$.fragment),Rxr=l(),s4e=a("p"),Bxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pxr=l(),qc=a("p"),Ixr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),qxr=o("not"),Nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),jxr=o("from_pretrained()"),Dxr=o(" to load the model weights."),Gxr=l(),v(Y3.$$.fragment),Oxr=l(),Or=a("div"),v(h7.$$.fragment),Vxr=l(),i4e=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zxr=l(),_n=a("p"),Qxr=o("The model class to instantiate is selected based on the "),d4e=a("code"),Wxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),Le=a("ul"),K3=a("li"),f4e=a("strong"),e7r=o("albert"),o7r=o(" \u2014 "),kJ=a("a"),r7r=o("FlaxAlbertForMaskedLM"),t7r=o(" (ALBERT model)"),a7r=l(),Z3=a("li"),g4e=a("strong"),n7r=o("bart"),s7r=o(" \u2014 "),SJ=a("a"),l7r=o("FlaxBartForConditionalGeneration"),i7r=o(" (BART model)"),d7r=l(),ew=a("li"),h4e=a("strong"),c7r=o("bert"),m7r=o(" \u2014 "),RJ=a("a"),f7r=o("FlaxBertForMaskedLM"),g7r=o(" (BERT model)"),h7r=l(),ow=a("li"),u4e=a("strong"),u7r=o("big_bird"),p7r=o(" \u2014 "),BJ=a("a"),_7r=o("FlaxBigBirdForMaskedLM"),b7r=o(" (BigBird model)"),F7r=l(),rw=a("li"),p4e=a("strong"),v7r=o("distilbert"),T7r=o(" \u2014 "),PJ=a("a"),M7r=o("FlaxDistilBertForMaskedLM"),E7r=o(" (DistilBERT model)"),C7r=l(),tw=a("li"),_4e=a("strong"),w7r=o("electra"),A7r=o(" \u2014 "),IJ=a("a"),y7r=o("FlaxElectraForMaskedLM"),L7r=o(" (ELECTRA model)"),x7r=l(),aw=a("li"),b4e=a("strong"),$7r=o("mbart"),k7r=o(" \u2014 "),qJ=a("a"),S7r=o("FlaxMBartForConditionalGeneration"),R7r=o(" (mBART model)"),B7r=l(),nw=a("li"),F4e=a("strong"),P7r=o("roberta"),I7r=o(" \u2014 "),NJ=a("a"),q7r=o("FlaxRobertaForMaskedLM"),N7r=o(" (RoBERTa model)"),j7r=l(),sw=a("li"),v4e=a("strong"),D7r=o("roformer"),G7r=o(" \u2014 "),jJ=a("a"),O7r=o("FlaxRoFormerForMaskedLM"),V7r=o(" (RoFormer model)"),X7r=l(),lw=a("li"),T4e=a("strong"),z7r=o("xlm-roberta"),Q7r=o(" \u2014 "),DJ=a("a"),W7r=o("FlaxXLMRobertaForMaskedLM"),H7r=o(" (XLM-RoBERTa model)"),U7r=l(),v(iw.$$.fragment),Aqe=l(),Nc=a("h2"),dw=a("a"),M4e=a("span"),v(u7.$$.fragment),J7r=l(),E4e=a("span"),Y7r=o("FlaxAutoModelForSeq2SeqLM"),yqe=l(),ur=a("div"),v(p7.$$.fragment),K7r=l(),jc=a("p"),Z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=a("a"),e9r=o("from_pretrained()"),o9r=o(" class method or the "),OJ=a("a"),r9r=o("from_config()"),t9r=o(` class
method.`),a9r=l(),_7=a("p"),n9r=o("This class cannot be instantiated directly using "),C4e=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),Vt=a("div"),v(b7.$$.fragment),d9r=l(),w4e=a("p"),c9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m9r=l(),Dc=a("p"),f9r=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),u9r=o("from_pretrained()"),p9r=o(" to load the model weights."),_9r=l(),v(cw.$$.fragment),b9r=l(),Vr=a("div"),v(F7.$$.fragment),F9r=l(),y4e=a("p"),v9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T9r=l(),bn=a("p"),M9r=o("The model class to instantiate is selected based on the "),L4e=a("code"),E9r=o("model_type"),C9r=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),y9r=o("pretrained_model_name_or_path"),L9r=o(":"),x9r=l(),Se=a("ul"),mw=a("li"),k4e=a("strong"),$9r=o("bart"),k9r=o(" \u2014 "),XJ=a("a"),S9r=o("FlaxBartForConditionalGeneration"),R9r=o(" (BART model)"),B9r=l(),fw=a("li"),S4e=a("strong"),P9r=o("blenderbot"),I9r=o(" \u2014 "),zJ=a("a"),q9r=o("FlaxBlenderbotForConditionalGeneration"),N9r=o(" (Blenderbot model)"),j9r=l(),gw=a("li"),R4e=a("strong"),D9r=o("blenderbot-small"),G9r=o(" \u2014 "),QJ=a("a"),O9r=o("FlaxBlenderbotSmallForConditionalGeneration"),V9r=o(" (BlenderbotSmall model)"),X9r=l(),hw=a("li"),B4e=a("strong"),z9r=o("encoder-decoder"),Q9r=o(" \u2014 "),WJ=a("a"),W9r=o("FlaxEncoderDecoderModel"),H9r=o(" (Encoder decoder model)"),U9r=l(),uw=a("li"),P4e=a("strong"),J9r=o("marian"),Y9r=o(" \u2014 "),HJ=a("a"),K9r=o("FlaxMarianMTModel"),Z9r=o(" (Marian model)"),e$r=l(),pw=a("li"),I4e=a("strong"),o$r=o("mbart"),r$r=o(" \u2014 "),UJ=a("a"),t$r=o("FlaxMBartForConditionalGeneration"),a$r=o(" (mBART model)"),n$r=l(),_w=a("li"),q4e=a("strong"),s$r=o("mt5"),l$r=o(" \u2014 "),JJ=a("a"),i$r=o("FlaxMT5ForConditionalGeneration"),d$r=o(" (mT5 model)"),c$r=l(),bw=a("li"),N4e=a("strong"),m$r=o("pegasus"),f$r=o(" \u2014 "),YJ=a("a"),g$r=o("FlaxPegasusForConditionalGeneration"),h$r=o(" (Pegasus model)"),u$r=l(),Fw=a("li"),j4e=a("strong"),p$r=o("t5"),_$r=o(" \u2014 "),KJ=a("a"),b$r=o("FlaxT5ForConditionalGeneration"),F$r=o(" (T5 model)"),v$r=l(),v(vw.$$.fragment),Lqe=l(),Gc=a("h2"),Tw=a("a"),D4e=a("span"),v(v7.$$.fragment),T$r=l(),G4e=a("span"),M$r=o("FlaxAutoModelForSequenceClassification"),xqe=l(),pr=a("div"),v(T7.$$.fragment),E$r=l(),Oc=a("p"),C$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" class method or the "),eY=a("a"),y$r=o("from_config()"),L$r=o(` class
method.`),x$r=l(),M7=a("p"),$$r=o("This class cannot be instantiated directly using "),O4e=a("code"),k$r=o("__init__()"),S$r=o(" (throws an error)."),R$r=l(),Xt=a("div"),v(E7.$$.fragment),B$r=l(),V4e=a("p"),P$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I$r=l(),Vc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),N$r=o("not"),j$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),D$r=o("from_pretrained()"),G$r=o(" to load the model weights."),O$r=l(),v(Mw.$$.fragment),V$r=l(),Xr=a("div"),v(C7.$$.fragment),X$r=l(),z4e=a("p"),z$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q$r=l(),Fn=a("p"),W$r=o("The model class to instantiate is selected based on the "),Q4e=a("code"),H$r=o("model_type"),U$r=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(":"),ekr=l(),xe=a("ul"),Ew=a("li"),U4e=a("strong"),okr=o("albert"),rkr=o(" \u2014 "),rY=a("a"),tkr=o("FlaxAlbertForSequenceClassification"),akr=o(" (ALBERT model)"),nkr=l(),Cw=a("li"),J4e=a("strong"),skr=o("bart"),lkr=o(" \u2014 "),tY=a("a"),ikr=o("FlaxBartForSequenceClassification"),dkr=o(" (BART model)"),ckr=l(),ww=a("li"),Y4e=a("strong"),mkr=o("bert"),fkr=o(" \u2014 "),aY=a("a"),gkr=o("FlaxBertForSequenceClassification"),hkr=o(" (BERT model)"),ukr=l(),Aw=a("li"),K4e=a("strong"),pkr=o("big_bird"),_kr=o(" \u2014 "),nY=a("a"),bkr=o("FlaxBigBirdForSequenceClassification"),Fkr=o(" (BigBird model)"),vkr=l(),yw=a("li"),Z4e=a("strong"),Tkr=o("distilbert"),Mkr=o(" \u2014 "),sY=a("a"),Ekr=o("FlaxDistilBertForSequenceClassification"),Ckr=o(" (DistilBERT model)"),wkr=l(),Lw=a("li"),eEe=a("strong"),Akr=o("electra"),ykr=o(" \u2014 "),lY=a("a"),Lkr=o("FlaxElectraForSequenceClassification"),xkr=o(" (ELECTRA model)"),$kr=l(),xw=a("li"),oEe=a("strong"),kkr=o("mbart"),Skr=o(" \u2014 "),iY=a("a"),Rkr=o("FlaxMBartForSequenceClassification"),Bkr=o(" (mBART model)"),Pkr=l(),$w=a("li"),rEe=a("strong"),Ikr=o("roberta"),qkr=o(" \u2014 "),dY=a("a"),Nkr=o("FlaxRobertaForSequenceClassification"),jkr=o(" (RoBERTa model)"),Dkr=l(),kw=a("li"),tEe=a("strong"),Gkr=o("roformer"),Okr=o(" \u2014 "),cY=a("a"),Vkr=o("FlaxRoFormerForSequenceClassification"),Xkr=o(" (RoFormer model)"),zkr=l(),Sw=a("li"),aEe=a("strong"),Qkr=o("xlm-roberta"),Wkr=o(" \u2014 "),mY=a("a"),Hkr=o("FlaxXLMRobertaForSequenceClassification"),Ukr=o(" (XLM-RoBERTa model)"),Jkr=l(),v(Rw.$$.fragment),$qe=l(),Xc=a("h2"),Bw=a("a"),nEe=a("span"),v(w7.$$.fragment),Ykr=l(),sEe=a("span"),Kkr=o("FlaxAutoModelForQuestionAnswering"),kqe=l(),_r=a("div"),v(A7.$$.fragment),Zkr=l(),zc=a("p"),eSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fY=a("a"),oSr=o("from_pretrained()"),rSr=o(" class method or the "),gY=a("a"),tSr=o("from_config()"),aSr=o(` class
method.`),nSr=l(),y7=a("p"),sSr=o("This class cannot be instantiated directly using "),lEe=a("code"),lSr=o("__init__()"),iSr=o(" (throws an error)."),dSr=l(),zt=a("div"),v(L7.$$.fragment),cSr=l(),iEe=a("p"),mSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fSr=l(),Qc=a("p"),gSr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),hSr=o("not"),uSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),bSr=l(),v(Pw.$$.fragment),FSr=l(),zr=a("div"),v(x7.$$.fragment),vSr=l(),cEe=a("p"),TSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MSr=l(),vn=a("p"),ESr=o("The model class to instantiate is selected based on the "),mEe=a("code"),CSr=o("model_type"),wSr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),ASr=o("pretrained_model_name_or_path"),ySr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(":"),$Sr=l(),$e=a("ul"),Iw=a("li"),hEe=a("strong"),kSr=o("albert"),SSr=o(" \u2014 "),uY=a("a"),RSr=o("FlaxAlbertForQuestionAnswering"),BSr=o(" (ALBERT model)"),PSr=l(),qw=a("li"),uEe=a("strong"),ISr=o("bart"),qSr=o(" \u2014 "),pY=a("a"),NSr=o("FlaxBartForQuestionAnswering"),jSr=o(" (BART model)"),DSr=l(),Nw=a("li"),pEe=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),_Y=a("a"),VSr=o("FlaxBertForQuestionAnswering"),XSr=o(" (BERT model)"),zSr=l(),jw=a("li"),_Ee=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),bY=a("a"),HSr=o("FlaxBigBirdForQuestionAnswering"),USr=o(" (BigBird model)"),JSr=l(),Dw=a("li"),bEe=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),FY=a("a"),ZSr=o("FlaxDistilBertForQuestionAnswering"),eRr=o(" (DistilBERT model)"),oRr=l(),Gw=a("li"),FEe=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),vY=a("a"),aRr=o("FlaxElectraForQuestionAnswering"),nRr=o(" (ELECTRA model)"),sRr=l(),Ow=a("li"),vEe=a("strong"),lRr=o("mbart"),iRr=o(" \u2014 "),TY=a("a"),dRr=o("FlaxMBartForQuestionAnswering"),cRr=o(" (mBART model)"),mRr=l(),Vw=a("li"),TEe=a("strong"),fRr=o("roberta"),gRr=o(" \u2014 "),MY=a("a"),hRr=o("FlaxRobertaForQuestionAnswering"),uRr=o(" (RoBERTa model)"),pRr=l(),Xw=a("li"),MEe=a("strong"),_Rr=o("roformer"),bRr=o(" \u2014 "),EY=a("a"),FRr=o("FlaxRoFormerForQuestionAnswering"),vRr=o(" (RoFormer model)"),TRr=l(),zw=a("li"),EEe=a("strong"),MRr=o("xlm-roberta"),ERr=o(" \u2014 "),CY=a("a"),CRr=o("FlaxXLMRobertaForQuestionAnswering"),wRr=o(" (XLM-RoBERTa model)"),ARr=l(),v(Qw.$$.fragment),Sqe=l(),Wc=a("h2"),Ww=a("a"),CEe=a("span"),v($7.$$.fragment),yRr=l(),wEe=a("span"),LRr=o("FlaxAutoModelForTokenClassification"),Rqe=l(),br=a("div"),v(k7.$$.fragment),xRr=l(),Hc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),AY=a("a"),RRr=o("from_config()"),BRr=o(` class
method.`),PRr=l(),S7=a("p"),IRr=o("This class cannot be instantiated directly using "),AEe=a("code"),qRr=o("__init__()"),NRr=o(" (throws an error)."),jRr=l(),Qt=a("div"),v(R7.$$.fragment),DRr=l(),yEe=a("p"),GRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ORr=l(),Uc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),v(Hw.$$.fragment),URr=l(),Qr=a("div"),v(B7.$$.fragment),JRr=l(),xEe=a("p"),YRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KRr=l(),Tn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),$Ee=a("code"),eBr=o("model_type"),oBr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),rBr=o("pretrained_model_name_or_path"),tBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(":"),sBr=l(),De=a("ul"),Uw=a("li"),REe=a("strong"),lBr=o("albert"),iBr=o(" \u2014 "),LY=a("a"),dBr=o("FlaxAlbertForTokenClassification"),cBr=o(" (ALBERT model)"),mBr=l(),Jw=a("li"),BEe=a("strong"),fBr=o("bert"),gBr=o(" \u2014 "),xY=a("a"),hBr=o("FlaxBertForTokenClassification"),uBr=o(" (BERT model)"),pBr=l(),Yw=a("li"),PEe=a("strong"),_Br=o("big_bird"),bBr=o(" \u2014 "),$Y=a("a"),FBr=o("FlaxBigBirdForTokenClassification"),vBr=o(" (BigBird model)"),TBr=l(),Kw=a("li"),IEe=a("strong"),MBr=o("distilbert"),EBr=o(" \u2014 "),kY=a("a"),CBr=o("FlaxDistilBertForTokenClassification"),wBr=o(" (DistilBERT model)"),ABr=l(),Zw=a("li"),qEe=a("strong"),yBr=o("electra"),LBr=o(" \u2014 "),SY=a("a"),xBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),kBr=l(),eA=a("li"),NEe=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),RY=a("a"),BBr=o("FlaxRobertaForTokenClassification"),PBr=o(" (RoBERTa model)"),IBr=l(),oA=a("li"),jEe=a("strong"),qBr=o("roformer"),NBr=o(" \u2014 "),BY=a("a"),jBr=o("FlaxRoFormerForTokenClassification"),DBr=o(" (RoFormer model)"),GBr=l(),rA=a("li"),DEe=a("strong"),OBr=o("xlm-roberta"),VBr=o(" \u2014 "),PY=a("a"),XBr=o("FlaxXLMRobertaForTokenClassification"),zBr=o(" (XLM-RoBERTa model)"),QBr=l(),v(tA.$$.fragment),Bqe=l(),Jc=a("h2"),aA=a("a"),GEe=a("span"),v(P7.$$.fragment),WBr=l(),OEe=a("span"),HBr=o("FlaxAutoModelForMultipleChoice"),Pqe=l(),Fr=a("div"),v(I7.$$.fragment),UBr=l(),Yc=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),qY=a("a"),ZBr=o("from_config()"),ePr=o(` class
method.`),oPr=l(),q7=a("p"),rPr=o("This class cannot be instantiated directly using "),VEe=a("code"),tPr=o("__init__()"),aPr=o(" (throws an error)."),nPr=l(),Wt=a("div"),v(N7.$$.fragment),sPr=l(),XEe=a("p"),lPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iPr=l(),Kc=a("p"),dPr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),cPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),fPr=o("from_pretrained()"),gPr=o(" to load the model weights."),hPr=l(),v(nA.$$.fragment),uPr=l(),Wr=a("div"),v(j7.$$.fragment),pPr=l(),QEe=a("p"),_Pr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bPr=l(),Mn=a("p"),FPr=o("The model class to instantiate is selected based on the "),WEe=a("code"),vPr=o("model_type"),TPr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(":"),APr=l(),Ge=a("ul"),sA=a("li"),JEe=a("strong"),yPr=o("albert"),LPr=o(" \u2014 "),jY=a("a"),xPr=o("FlaxAlbertForMultipleChoice"),$Pr=o(" (ALBERT model)"),kPr=l(),lA=a("li"),YEe=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),DY=a("a"),BPr=o("FlaxBertForMultipleChoice"),PPr=o(" (BERT model)"),IPr=l(),iA=a("li"),KEe=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),GY=a("a"),jPr=o("FlaxBigBirdForMultipleChoice"),DPr=o(" (BigBird model)"),GPr=l(),dA=a("li"),ZEe=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),OY=a("a"),XPr=o("FlaxDistilBertForMultipleChoice"),zPr=o(" (DistilBERT model)"),QPr=l(),cA=a("li"),e5e=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),VY=a("a"),UPr=o("FlaxElectraForMultipleChoice"),JPr=o(" (ELECTRA model)"),YPr=l(),mA=a("li"),o5e=a("strong"),KPr=o("roberta"),ZPr=o(" \u2014 "),XY=a("a"),eIr=o("FlaxRobertaForMultipleChoice"),oIr=o(" (RoBERTa model)"),rIr=l(),fA=a("li"),r5e=a("strong"),tIr=o("roformer"),aIr=o(" \u2014 "),zY=a("a"),nIr=o("FlaxRoFormerForMultipleChoice"),sIr=o(" (RoFormer model)"),lIr=l(),gA=a("li"),t5e=a("strong"),iIr=o("xlm-roberta"),dIr=o(" \u2014 "),QY=a("a"),cIr=o("FlaxXLMRobertaForMultipleChoice"),mIr=o(" (XLM-RoBERTa model)"),fIr=l(),v(hA.$$.fragment),Iqe=l(),Zc=a("h2"),uA=a("a"),a5e=a("span"),v(D7.$$.fragment),gIr=l(),n5e=a("span"),hIr=o("FlaxAutoModelForNextSentencePrediction"),qqe=l(),vr=a("div"),v(G7.$$.fragment),uIr=l(),em=a("p"),pIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),_Ir=o("from_pretrained()"),bIr=o(" class method or the "),HY=a("a"),FIr=o("from_config()"),vIr=o(` class
method.`),TIr=l(),O7=a("p"),MIr=o("This class cannot be instantiated directly using "),s5e=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),Ht=a("div"),v(V7.$$.fragment),AIr=l(),l5e=a("p"),yIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIr=l(),om=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),$Ir=o("not"),kIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),SIr=o("from_pretrained()"),RIr=o(" to load the model weights."),BIr=l(),v(pA.$$.fragment),PIr=l(),Hr=a("div"),v(X7.$$.fragment),IIr=l(),d5e=a("p"),qIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NIr=l(),En=a("p"),jIr=o("The model class to instantiate is selected based on the "),c5e=a("code"),DIr=o("model_type"),GIr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(":"),QIr=l(),g5e=a("ul"),_A=a("li"),h5e=a("strong"),WIr=o("bert"),HIr=o(" \u2014 "),JY=a("a"),UIr=o("FlaxBertForNextSentencePrediction"),JIr=o(" (BERT model)"),YIr=l(),v(bA.$$.fragment),Nqe=l(),rm=a("h2"),FA=a("a"),u5e=a("span"),v(z7.$$.fragment),KIr=l(),p5e=a("span"),ZIr=o("FlaxAutoModelForImageClassification"),jqe=l(),Tr=a("div"),v(Q7.$$.fragment),eqr=l(),tm=a("p"),oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=a("a"),rqr=o("from_pretrained()"),tqr=o(" class method or the "),KY=a("a"),aqr=o("from_config()"),nqr=o(` class
method.`),sqr=l(),W7=a("p"),lqr=o("This class cannot be instantiated directly using "),_5e=a("code"),iqr=o("__init__()"),dqr=o(" (throws an error)."),cqr=l(),Ut=a("div"),v(H7.$$.fragment),mqr=l(),b5e=a("p"),fqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gqr=l(),am=a("p"),hqr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),uqr=o("not"),pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),_qr=o("from_pretrained()"),bqr=o(" to load the model weights."),Fqr=l(),v(vA.$$.fragment),vqr=l(),Ur=a("div"),v(U7.$$.fragment),Tqr=l(),v5e=a("p"),Mqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Eqr=l(),Cn=a("p"),Cqr=o("The model class to instantiate is selected based on the "),T5e=a("code"),wqr=o("model_type"),Aqr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),yqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(":"),kqr=l(),J7=a("ul"),TA=a("li"),C5e=a("strong"),Sqr=o("beit"),Rqr=o(" \u2014 "),eK=a("a"),Bqr=o("FlaxBeitForImageClassification"),Pqr=o(" (BEiT model)"),Iqr=l(),MA=a("li"),w5e=a("strong"),qqr=o("vit"),Nqr=o(" \u2014 "),oK=a("a"),jqr=o("FlaxViTForImageClassification"),Dqr=o(" (ViT model)"),Gqr=l(),v(EA.$$.fragment),Dqe=l(),nm=a("h2"),CA=a("a"),A5e=a("span"),v(Y7.$$.fragment),Oqr=l(),y5e=a("span"),Vqr=o("FlaxAutoModelForVision2Seq"),Gqe=l(),Mr=a("div"),v(K7.$$.fragment),Xqr=l(),sm=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),tK=a("a"),Hqr=o("from_config()"),Uqr=o(` class
method.`),Jqr=l(),Z7=a("p"),Yqr=o("This class cannot be instantiated directly using "),L5e=a("code"),Kqr=o("__init__()"),Zqr=o(" (throws an error)."),eNr=l(),Jt=a("div"),v(e9.$$.fragment),oNr=l(),x5e=a("p"),rNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNr=l(),lm=a("p"),aNr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),nNr=o("not"),sNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),lNr=o("from_pretrained()"),iNr=o(" to load the model weights."),dNr=l(),v(wA.$$.fragment),cNr=l(),Jr=a("div"),v(o9.$$.fragment),mNr=l(),k5e=a("p"),fNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gNr=l(),wn=a("p"),hNr=o("The model class to instantiate is selected based on the "),S5e=a("code"),uNr=o("model_type"),pNr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),_Nr=o("pretrained_model_name_or_path"),bNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),FNr=o("pretrained_model_name_or_path"),vNr=o(":"),TNr=l(),P5e=a("ul"),AA=a("li"),I5e=a("strong"),MNr=o("vision-encoder-decoder"),ENr=o(" \u2014 "),nK=a("a"),CNr=o("FlaxVisionEncoderDecoderModel"),wNr=o(" (Vision Encoder decoder model)"),ANr=l(),v(yA.$$.fragment),this.h()},l(m){const _=Z0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var r9=s(u);f=n(r9,"A",{id:!0,class:!0,href:!0});var q5e=s(f);p=n(q5e,"SPAN",{});var N5e=s(p);T(d.$$.fragment,N5e),N5e.forEach(t),q5e.forEach(t),h=i(r9),Mo=n(r9,"SPAN",{});var j5e=s(Mo);ii=r(j5e,"Auto Classes"),j5e.forEach(t),r9.forEach(t),mm=i(m),et=n(m,"P",{});var t9=s(et);di=r(t9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(t9,"CODE",{});var D5e=s(ci);W0=r(D5e,"from_pretrained()"),D5e.forEach(t),fm=r(t9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t9.forEach(t),qe=i(m),Xe=n(m,"P",{});var An=s(Xe);mi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var G5e=s(yn);H0=r(G5e,"AutoConfig"),G5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var O5e=s(xn);U0=r(O5e,"AutoModel"),O5e.forEach(t),fi=r(An,`, and
`),$n=n(An,"A",{href:!0});var V5e=s($n);J0=r(V5e,"AutoTokenizer"),V5e.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),gm=i(m),T(Ma.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var a9=s(Ae);h$=r(a9,"will create a model that is an instance of "),hi=n(a9,"A",{href:!0});var X5e=s(hi);u$=r(X5e,"BertModel"),X5e.forEach(t),p$=r(a9,"."),a9.forEach(t),Eo=i(m),Ea=n(m,"P",{});var n9=s(Ea);_$=r(n9,"There is one class of "),hm=n(n9,"CODE",{});var z5e=s(hm);b$=r(z5e,"AutoModel"),z5e.forEach(t),Jje=r(n9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n9.forEach(t),jPe=i(m),ui=n(m,"H2",{class:!0});var s9=s(ui);um=n(s9,"A",{id:!0,class:!0,href:!0});var Q5e=s(um);KZ=n(Q5e,"SPAN",{});var W5e=s(KZ);T(Y0.$$.fragment,W5e),W5e.forEach(t),Q5e.forEach(t),Yje=i(s9),ZZ=n(s9,"SPAN",{});var H5e=s(ZZ);Kje=r(H5e,"Extending the Auto Classes"),H5e.forEach(t),s9.forEach(t),DPe=i(m),kn=n(m,"P",{});var im=s(kn);Zje=r(im,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=n(im,"CODE",{});var U5e=s(eee);eDe=r(U5e,"NewModel"),U5e.forEach(t),oDe=r(im,", make sure you have a "),oee=n(im,"CODE",{});var J5e=s(oee);rDe=r(J5e,"NewModelConfig"),J5e.forEach(t),tDe=r(im,` then you can add those to the auto
classes like this:`),im.forEach(t),GPe=i(m),T(K0.$$.fragment,m),OPe=i(m),F$=n(m,"P",{});var Y5e=s(F$);aDe=r(Y5e,"You will then be able to use the auto classes like you would usually do!"),Y5e.forEach(t),VPe=i(m),T(pm.$$.fragment,m),XPe=i(m),pi=n(m,"H2",{class:!0});var l9=s(pi);_m=n(l9,"A",{id:!0,class:!0,href:!0});var K5e=s(_m);ree=n(K5e,"SPAN",{});var Z5e=s(ree);T(Z0.$$.fragment,Z5e),Z5e.forEach(t),K5e.forEach(t),nDe=i(l9),tee=n(l9,"SPAN",{});var eCe=s(tee);sDe=r(eCe,"AutoConfig"),eCe.forEach(t),l9.forEach(t),zPe=i(m),Co=n(m,"DIV",{class:!0});var Kr=s(Co);T(ey.$$.fragment,Kr),lDe=i(Kr),oy=n(Kr,"P",{});var i9=s(oy);iDe=r(i9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=n(i9,"A",{href:!0});var oCe=s(v$);dDe=r(oCe,"from_pretrained()"),oCe.forEach(t),cDe=r(i9," class method."),i9.forEach(t),mDe=i(Kr),ry=n(Kr,"P",{});var d9=s(ry);fDe=r(d9,"This class cannot be instantiated directly using "),aee=n(d9,"CODE",{});var rCe=s(aee);gDe=r(rCe,"__init__()"),rCe.forEach(t),hDe=r(d9," (throws an error)."),d9.forEach(t),uDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(ty.$$.fragment,Zr),pDe=i(Zr),nee=n(Zr,"P",{});var tCe=s(nee);_De=r(tCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tCe.forEach(t),bDe=i(Zr),_i=n(Zr,"P",{});var dm=s(_i);FDe=r(dm,"The configuration class to instantiate is selected based on the "),see=n(dm,"CODE",{});var aCe=s(see);vDe=r(aCe,"model_type"),aCe.forEach(t),TDe=r(dm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=n(dm,"CODE",{});var nCe=s(lee);MDe=r(nCe,"pretrained_model_name_or_path"),nCe.forEach(t),EDe=r(dm,":"),dm.forEach(t),CDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);bm=n(L,"LI",{});var LA=s(bm);iee=n(LA,"STRONG",{});var sCe=s(iee);wDe=r(sCe,"albert"),sCe.forEach(t),ADe=r(LA," \u2014 "),T$=n(LA,"A",{href:!0});var lCe=s(T$);yDe=r(lCe,"AlbertConfig"),lCe.forEach(t),LDe=r(LA," (ALBERT model)"),LA.forEach(t),xDe=i(L),Fm=n(L,"LI",{});var xA=s(Fm);dee=n(xA,"STRONG",{});var iCe=s(dee);$De=r(iCe,"bart"),iCe.forEach(t),kDe=r(xA," \u2014 "),M$=n(xA,"A",{href:!0});var dCe=s(M$);SDe=r(dCe,"BartConfig"),dCe.forEach(t),RDe=r(xA," (BART model)"),xA.forEach(t),BDe=i(L),vm=n(L,"LI",{});var $A=s(vm);cee=n($A,"STRONG",{});var cCe=s(cee);PDe=r(cCe,"beit"),cCe.forEach(t),IDe=r($A," \u2014 "),E$=n($A,"A",{href:!0});var mCe=s(E$);qDe=r(mCe,"BeitConfig"),mCe.forEach(t),NDe=r($A," (BEiT model)"),$A.forEach(t),jDe=i(L),Tm=n(L,"LI",{});var kA=s(Tm);mee=n(kA,"STRONG",{});var fCe=s(mee);DDe=r(fCe,"bert"),fCe.forEach(t),GDe=r(kA," \u2014 "),C$=n(kA,"A",{href:!0});var gCe=s(C$);ODe=r(gCe,"BertConfig"),gCe.forEach(t),VDe=r(kA," (BERT model)"),kA.forEach(t),XDe=i(L),Mm=n(L,"LI",{});var SA=s(Mm);fee=n(SA,"STRONG",{});var hCe=s(fee);zDe=r(hCe,"bert-generation"),hCe.forEach(t),QDe=r(SA," \u2014 "),w$=n(SA,"A",{href:!0});var uCe=s(w$);WDe=r(uCe,"BertGenerationConfig"),uCe.forEach(t),HDe=r(SA," (Bert Generation model)"),SA.forEach(t),UDe=i(L),Em=n(L,"LI",{});var RA=s(Em);gee=n(RA,"STRONG",{});var pCe=s(gee);JDe=r(pCe,"big_bird"),pCe.forEach(t),YDe=r(RA," \u2014 "),A$=n(RA,"A",{href:!0});var _Ce=s(A$);KDe=r(_Ce,"BigBirdConfig"),_Ce.forEach(t),ZDe=r(RA," (BigBird model)"),RA.forEach(t),eGe=i(L),Cm=n(L,"LI",{});var BA=s(Cm);hee=n(BA,"STRONG",{});var bCe=s(hee);oGe=r(bCe,"bigbird_pegasus"),bCe.forEach(t),rGe=r(BA," \u2014 "),y$=n(BA,"A",{href:!0});var FCe=s(y$);tGe=r(FCe,"BigBirdPegasusConfig"),FCe.forEach(t),aGe=r(BA," (BigBirdPegasus model)"),BA.forEach(t),nGe=i(L),wm=n(L,"LI",{});var PA=s(wm);uee=n(PA,"STRONG",{});var vCe=s(uee);sGe=r(vCe,"blenderbot"),vCe.forEach(t),lGe=r(PA," \u2014 "),L$=n(PA,"A",{href:!0});var TCe=s(L$);iGe=r(TCe,"BlenderbotConfig"),TCe.forEach(t),dGe=r(PA," (Blenderbot model)"),PA.forEach(t),cGe=i(L),Am=n(L,"LI",{});var IA=s(Am);pee=n(IA,"STRONG",{});var MCe=s(pee);mGe=r(MCe,"blenderbot-small"),MCe.forEach(t),fGe=r(IA," \u2014 "),x$=n(IA,"A",{href:!0});var ECe=s(x$);gGe=r(ECe,"BlenderbotSmallConfig"),ECe.forEach(t),hGe=r(IA," (BlenderbotSmall model)"),IA.forEach(t),uGe=i(L),ym=n(L,"LI",{});var qA=s(ym);_ee=n(qA,"STRONG",{});var CCe=s(_ee);pGe=r(CCe,"camembert"),CCe.forEach(t),_Ge=r(qA," \u2014 "),$$=n(qA,"A",{href:!0});var wCe=s($$);bGe=r(wCe,"CamembertConfig"),wCe.forEach(t),FGe=r(qA," (CamemBERT model)"),qA.forEach(t),vGe=i(L),Lm=n(L,"LI",{});var NA=s(Lm);bee=n(NA,"STRONG",{});var ACe=s(bee);TGe=r(ACe,"canine"),ACe.forEach(t),MGe=r(NA," \u2014 "),k$=n(NA,"A",{href:!0});var yCe=s(k$);EGe=r(yCe,"CanineConfig"),yCe.forEach(t),CGe=r(NA," (Canine model)"),NA.forEach(t),wGe=i(L),xm=n(L,"LI",{});var jA=s(xm);Fee=n(jA,"STRONG",{});var LCe=s(Fee);AGe=r(LCe,"clip"),LCe.forEach(t),yGe=r(jA," \u2014 "),S$=n(jA,"A",{href:!0});var xCe=s(S$);LGe=r(xCe,"CLIPConfig"),xCe.forEach(t),xGe=r(jA," (CLIP model)"),jA.forEach(t),$Ge=i(L),$m=n(L,"LI",{});var DA=s($m);vee=n(DA,"STRONG",{});var $Ce=s(vee);kGe=r($Ce,"convbert"),$Ce.forEach(t),SGe=r(DA," \u2014 "),R$=n(DA,"A",{href:!0});var kCe=s(R$);RGe=r(kCe,"ConvBertConfig"),kCe.forEach(t),BGe=r(DA," (ConvBERT model)"),DA.forEach(t),PGe=i(L),km=n(L,"LI",{});var GA=s(km);Tee=n(GA,"STRONG",{});var SCe=s(Tee);IGe=r(SCe,"convnext"),SCe.forEach(t),qGe=r(GA," \u2014 "),B$=n(GA,"A",{href:!0});var RCe=s(B$);NGe=r(RCe,"ConvNextConfig"),RCe.forEach(t),jGe=r(GA," (ConvNext model)"),GA.forEach(t),DGe=i(L),Sm=n(L,"LI",{});var OA=s(Sm);Mee=n(OA,"STRONG",{});var BCe=s(Mee);GGe=r(BCe,"ctrl"),BCe.forEach(t),OGe=r(OA," \u2014 "),P$=n(OA,"A",{href:!0});var PCe=s(P$);VGe=r(PCe,"CTRLConfig"),PCe.forEach(t),XGe=r(OA," (CTRL model)"),OA.forEach(t),zGe=i(L),Rm=n(L,"LI",{});var VA=s(Rm);Eee=n(VA,"STRONG",{});var ICe=s(Eee);QGe=r(ICe,"data2vec-audio"),ICe.forEach(t),WGe=r(VA," \u2014 "),I$=n(VA,"A",{href:!0});var qCe=s(I$);HGe=r(qCe,"Data2VecAudioConfig"),qCe.forEach(t),UGe=r(VA," (Data2VecAudio model)"),VA.forEach(t),JGe=i(L),Bm=n(L,"LI",{});var XA=s(Bm);Cee=n(XA,"STRONG",{});var NCe=s(Cee);YGe=r(NCe,"data2vec-text"),NCe.forEach(t),KGe=r(XA," \u2014 "),q$=n(XA,"A",{href:!0});var jCe=s(q$);ZGe=r(jCe,"Data2VecTextConfig"),jCe.forEach(t),eOe=r(XA," (Data2VecText model)"),XA.forEach(t),oOe=i(L),Pm=n(L,"LI",{});var zA=s(Pm);wee=n(zA,"STRONG",{});var DCe=s(wee);rOe=r(DCe,"data2vec-vision"),DCe.forEach(t),tOe=r(zA," \u2014 "),N$=n(zA,"A",{href:!0});var GCe=s(N$);aOe=r(GCe,"Data2VecVisionConfig"),GCe.forEach(t),nOe=r(zA," (Data2VecVision model)"),zA.forEach(t),sOe=i(L),Im=n(L,"LI",{});var QA=s(Im);Aee=n(QA,"STRONG",{});var OCe=s(Aee);lOe=r(OCe,"deberta"),OCe.forEach(t),iOe=r(QA," \u2014 "),j$=n(QA,"A",{href:!0});var VCe=s(j$);dOe=r(VCe,"DebertaConfig"),VCe.forEach(t),cOe=r(QA," (DeBERTa model)"),QA.forEach(t),mOe=i(L),qm=n(L,"LI",{});var WA=s(qm);yee=n(WA,"STRONG",{});var XCe=s(yee);fOe=r(XCe,"deberta-v2"),XCe.forEach(t),gOe=r(WA," \u2014 "),D$=n(WA,"A",{href:!0});var zCe=s(D$);hOe=r(zCe,"DebertaV2Config"),zCe.forEach(t),uOe=r(WA," (DeBERTa-v2 model)"),WA.forEach(t),pOe=i(L),Nm=n(L,"LI",{});var HA=s(Nm);Lee=n(HA,"STRONG",{});var QCe=s(Lee);_Oe=r(QCe,"decision_transformer"),QCe.forEach(t),bOe=r(HA," \u2014 "),G$=n(HA,"A",{href:!0});var WCe=s(G$);FOe=r(WCe,"DecisionTransformerConfig"),WCe.forEach(t),vOe=r(HA," (Decision Transformer model)"),HA.forEach(t),TOe=i(L),jm=n(L,"LI",{});var UA=s(jm);xee=n(UA,"STRONG",{});var HCe=s(xee);MOe=r(HCe,"deit"),HCe.forEach(t),EOe=r(UA," \u2014 "),O$=n(UA,"A",{href:!0});var UCe=s(O$);COe=r(UCe,"DeiTConfig"),UCe.forEach(t),wOe=r(UA," (DeiT model)"),UA.forEach(t),AOe=i(L),Dm=n(L,"LI",{});var JA=s(Dm);$ee=n(JA,"STRONG",{});var JCe=s($ee);yOe=r(JCe,"detr"),JCe.forEach(t),LOe=r(JA," \u2014 "),V$=n(JA,"A",{href:!0});var LNr=s(V$);xOe=r(LNr,"DetrConfig"),LNr.forEach(t),$Oe=r(JA," (DETR model)"),JA.forEach(t),kOe=i(L),Gm=n(L,"LI",{});var YCe=s(Gm);kee=n(YCe,"STRONG",{});var xNr=s(kee);SOe=r(xNr,"distilbert"),xNr.forEach(t),ROe=r(YCe," \u2014 "),X$=n(YCe,"A",{href:!0});var $Nr=s(X$);BOe=r($Nr,"DistilBertConfig"),$Nr.forEach(t),POe=r(YCe," (DistilBERT model)"),YCe.forEach(t),IOe=i(L),Om=n(L,"LI",{});var KCe=s(Om);See=n(KCe,"STRONG",{});var kNr=s(See);qOe=r(kNr,"dpr"),kNr.forEach(t),NOe=r(KCe," \u2014 "),z$=n(KCe,"A",{href:!0});var SNr=s(z$);jOe=r(SNr,"DPRConfig"),SNr.forEach(t),DOe=r(KCe," (DPR model)"),KCe.forEach(t),GOe=i(L),Vm=n(L,"LI",{});var ZCe=s(Vm);Ree=n(ZCe,"STRONG",{});var RNr=s(Ree);OOe=r(RNr,"dpt"),RNr.forEach(t),VOe=r(ZCe," \u2014 "),Q$=n(ZCe,"A",{href:!0});var BNr=s(Q$);XOe=r(BNr,"DPTConfig"),BNr.forEach(t),zOe=r(ZCe," (DPT model)"),ZCe.forEach(t),QOe=i(L),Xm=n(L,"LI",{});var e3e=s(Xm);Bee=n(e3e,"STRONG",{});var PNr=s(Bee);WOe=r(PNr,"electra"),PNr.forEach(t),HOe=r(e3e," \u2014 "),W$=n(e3e,"A",{href:!0});var INr=s(W$);UOe=r(INr,"ElectraConfig"),INr.forEach(t),JOe=r(e3e," (ELECTRA model)"),e3e.forEach(t),YOe=i(L),zm=n(L,"LI",{});var o3e=s(zm);Pee=n(o3e,"STRONG",{});var qNr=s(Pee);KOe=r(qNr,"encoder-decoder"),qNr.forEach(t),ZOe=r(o3e," \u2014 "),H$=n(o3e,"A",{href:!0});var NNr=s(H$);eVe=r(NNr,"EncoderDecoderConfig"),NNr.forEach(t),oVe=r(o3e," (Encoder decoder model)"),o3e.forEach(t),rVe=i(L),Qm=n(L,"LI",{});var r3e=s(Qm);Iee=n(r3e,"STRONG",{});var jNr=s(Iee);tVe=r(jNr,"flaubert"),jNr.forEach(t),aVe=r(r3e," \u2014 "),U$=n(r3e,"A",{href:!0});var DNr=s(U$);nVe=r(DNr,"FlaubertConfig"),DNr.forEach(t),sVe=r(r3e," (FlauBERT model)"),r3e.forEach(t),lVe=i(L),Wm=n(L,"LI",{});var t3e=s(Wm);qee=n(t3e,"STRONG",{});var GNr=s(qee);iVe=r(GNr,"flava"),GNr.forEach(t),dVe=r(t3e," \u2014 "),J$=n(t3e,"A",{href:!0});var ONr=s(J$);cVe=r(ONr,"FlavaConfig"),ONr.forEach(t),mVe=r(t3e," (Flava model)"),t3e.forEach(t),fVe=i(L),Hm=n(L,"LI",{});var a3e=s(Hm);Nee=n(a3e,"STRONG",{});var VNr=s(Nee);gVe=r(VNr,"fnet"),VNr.forEach(t),hVe=r(a3e," \u2014 "),Y$=n(a3e,"A",{href:!0});var XNr=s(Y$);uVe=r(XNr,"FNetConfig"),XNr.forEach(t),pVe=r(a3e," (FNet model)"),a3e.forEach(t),_Ve=i(L),Um=n(L,"LI",{});var n3e=s(Um);jee=n(n3e,"STRONG",{});var zNr=s(jee);bVe=r(zNr,"fsmt"),zNr.forEach(t),FVe=r(n3e," \u2014 "),K$=n(n3e,"A",{href:!0});var QNr=s(K$);vVe=r(QNr,"FSMTConfig"),QNr.forEach(t),TVe=r(n3e," (FairSeq Machine-Translation model)"),n3e.forEach(t),MVe=i(L),Jm=n(L,"LI",{});var s3e=s(Jm);Dee=n(s3e,"STRONG",{});var WNr=s(Dee);EVe=r(WNr,"funnel"),WNr.forEach(t),CVe=r(s3e," \u2014 "),Z$=n(s3e,"A",{href:!0});var HNr=s(Z$);wVe=r(HNr,"FunnelConfig"),HNr.forEach(t),AVe=r(s3e," (Funnel Transformer model)"),s3e.forEach(t),yVe=i(L),Ym=n(L,"LI",{});var l3e=s(Ym);Gee=n(l3e,"STRONG",{});var UNr=s(Gee);LVe=r(UNr,"glpn"),UNr.forEach(t),xVe=r(l3e," \u2014 "),ek=n(l3e,"A",{href:!0});var JNr=s(ek);$Ve=r(JNr,"GLPNConfig"),JNr.forEach(t),kVe=r(l3e," (GLPN model)"),l3e.forEach(t),SVe=i(L),Km=n(L,"LI",{});var i3e=s(Km);Oee=n(i3e,"STRONG",{});var YNr=s(Oee);RVe=r(YNr,"gpt2"),YNr.forEach(t),BVe=r(i3e," \u2014 "),ok=n(i3e,"A",{href:!0});var KNr=s(ok);PVe=r(KNr,"GPT2Config"),KNr.forEach(t),IVe=r(i3e," (OpenAI GPT-2 model)"),i3e.forEach(t),qVe=i(L),Zm=n(L,"LI",{});var d3e=s(Zm);Vee=n(d3e,"STRONG",{});var ZNr=s(Vee);NVe=r(ZNr,"gpt_neo"),ZNr.forEach(t),jVe=r(d3e," \u2014 "),rk=n(d3e,"A",{href:!0});var ejr=s(rk);DVe=r(ejr,"GPTNeoConfig"),ejr.forEach(t),GVe=r(d3e," (GPT Neo model)"),d3e.forEach(t),OVe=i(L),ef=n(L,"LI",{});var c3e=s(ef);Xee=n(c3e,"STRONG",{});var ojr=s(Xee);VVe=r(ojr,"gptj"),ojr.forEach(t),XVe=r(c3e," \u2014 "),tk=n(c3e,"A",{href:!0});var rjr=s(tk);zVe=r(rjr,"GPTJConfig"),rjr.forEach(t),QVe=r(c3e," (GPT-J model)"),c3e.forEach(t),WVe=i(L),of=n(L,"LI",{});var m3e=s(of);zee=n(m3e,"STRONG",{});var tjr=s(zee);HVe=r(tjr,"hubert"),tjr.forEach(t),UVe=r(m3e," \u2014 "),ak=n(m3e,"A",{href:!0});var ajr=s(ak);JVe=r(ajr,"HubertConfig"),ajr.forEach(t),YVe=r(m3e," (Hubert model)"),m3e.forEach(t),KVe=i(L),rf=n(L,"LI",{});var f3e=s(rf);Qee=n(f3e,"STRONG",{});var njr=s(Qee);ZVe=r(njr,"ibert"),njr.forEach(t),eXe=r(f3e," \u2014 "),nk=n(f3e,"A",{href:!0});var sjr=s(nk);oXe=r(sjr,"IBertConfig"),sjr.forEach(t),rXe=r(f3e," (I-BERT model)"),f3e.forEach(t),tXe=i(L),tf=n(L,"LI",{});var g3e=s(tf);Wee=n(g3e,"STRONG",{});var ljr=s(Wee);aXe=r(ljr,"imagegpt"),ljr.forEach(t),nXe=r(g3e," \u2014 "),sk=n(g3e,"A",{href:!0});var ijr=s(sk);sXe=r(ijr,"ImageGPTConfig"),ijr.forEach(t),lXe=r(g3e," (ImageGPT model)"),g3e.forEach(t),iXe=i(L),af=n(L,"LI",{});var h3e=s(af);Hee=n(h3e,"STRONG",{});var djr=s(Hee);dXe=r(djr,"layoutlm"),djr.forEach(t),cXe=r(h3e," \u2014 "),lk=n(h3e,"A",{href:!0});var cjr=s(lk);mXe=r(cjr,"LayoutLMConfig"),cjr.forEach(t),fXe=r(h3e," (LayoutLM model)"),h3e.forEach(t),gXe=i(L),nf=n(L,"LI",{});var u3e=s(nf);Uee=n(u3e,"STRONG",{});var mjr=s(Uee);hXe=r(mjr,"layoutlmv2"),mjr.forEach(t),uXe=r(u3e," \u2014 "),ik=n(u3e,"A",{href:!0});var fjr=s(ik);pXe=r(fjr,"LayoutLMv2Config"),fjr.forEach(t),_Xe=r(u3e," (LayoutLMv2 model)"),u3e.forEach(t),bXe=i(L),sf=n(L,"LI",{});var p3e=s(sf);Jee=n(p3e,"STRONG",{});var gjr=s(Jee);FXe=r(gjr,"led"),gjr.forEach(t),vXe=r(p3e," \u2014 "),dk=n(p3e,"A",{href:!0});var hjr=s(dk);TXe=r(hjr,"LEDConfig"),hjr.forEach(t),MXe=r(p3e," (LED model)"),p3e.forEach(t),EXe=i(L),lf=n(L,"LI",{});var _3e=s(lf);Yee=n(_3e,"STRONG",{});var ujr=s(Yee);CXe=r(ujr,"longformer"),ujr.forEach(t),wXe=r(_3e," \u2014 "),ck=n(_3e,"A",{href:!0});var pjr=s(ck);AXe=r(pjr,"LongformerConfig"),pjr.forEach(t),yXe=r(_3e," (Longformer model)"),_3e.forEach(t),LXe=i(L),df=n(L,"LI",{});var b3e=s(df);Kee=n(b3e,"STRONG",{});var _jr=s(Kee);xXe=r(_jr,"luke"),_jr.forEach(t),$Xe=r(b3e," \u2014 "),mk=n(b3e,"A",{href:!0});var bjr=s(mk);kXe=r(bjr,"LukeConfig"),bjr.forEach(t),SXe=r(b3e," (LUKE model)"),b3e.forEach(t),RXe=i(L),cf=n(L,"LI",{});var F3e=s(cf);Zee=n(F3e,"STRONG",{});var Fjr=s(Zee);BXe=r(Fjr,"lxmert"),Fjr.forEach(t),PXe=r(F3e," \u2014 "),fk=n(F3e,"A",{href:!0});var vjr=s(fk);IXe=r(vjr,"LxmertConfig"),vjr.forEach(t),qXe=r(F3e," (LXMERT model)"),F3e.forEach(t),NXe=i(L),mf=n(L,"LI",{});var v3e=s(mf);eoe=n(v3e,"STRONG",{});var Tjr=s(eoe);jXe=r(Tjr,"m2m_100"),Tjr.forEach(t),DXe=r(v3e," \u2014 "),gk=n(v3e,"A",{href:!0});var Mjr=s(gk);GXe=r(Mjr,"M2M100Config"),Mjr.forEach(t),OXe=r(v3e," (M2M100 model)"),v3e.forEach(t),VXe=i(L),ff=n(L,"LI",{});var T3e=s(ff);ooe=n(T3e,"STRONG",{});var Ejr=s(ooe);XXe=r(Ejr,"marian"),Ejr.forEach(t),zXe=r(T3e," \u2014 "),hk=n(T3e,"A",{href:!0});var Cjr=s(hk);QXe=r(Cjr,"MarianConfig"),Cjr.forEach(t),WXe=r(T3e," (Marian model)"),T3e.forEach(t),HXe=i(L),gf=n(L,"LI",{});var M3e=s(gf);roe=n(M3e,"STRONG",{});var wjr=s(roe);UXe=r(wjr,"maskformer"),wjr.forEach(t),JXe=r(M3e," \u2014 "),uk=n(M3e,"A",{href:!0});var Ajr=s(uk);YXe=r(Ajr,"MaskFormerConfig"),Ajr.forEach(t),KXe=r(M3e," (MaskFormer model)"),M3e.forEach(t),ZXe=i(L),hf=n(L,"LI",{});var E3e=s(hf);toe=n(E3e,"STRONG",{});var yjr=s(toe);eze=r(yjr,"mbart"),yjr.forEach(t),oze=r(E3e," \u2014 "),pk=n(E3e,"A",{href:!0});var Ljr=s(pk);rze=r(Ljr,"MBartConfig"),Ljr.forEach(t),tze=r(E3e," (mBART model)"),E3e.forEach(t),aze=i(L),uf=n(L,"LI",{});var C3e=s(uf);aoe=n(C3e,"STRONG",{});var xjr=s(aoe);nze=r(xjr,"megatron-bert"),xjr.forEach(t),sze=r(C3e," \u2014 "),_k=n(C3e,"A",{href:!0});var $jr=s(_k);lze=r($jr,"MegatronBertConfig"),$jr.forEach(t),ize=r(C3e," (MegatronBert model)"),C3e.forEach(t),dze=i(L),pf=n(L,"LI",{});var w3e=s(pf);noe=n(w3e,"STRONG",{});var kjr=s(noe);cze=r(kjr,"mobilebert"),kjr.forEach(t),mze=r(w3e," \u2014 "),bk=n(w3e,"A",{href:!0});var Sjr=s(bk);fze=r(Sjr,"MobileBertConfig"),Sjr.forEach(t),gze=r(w3e," (MobileBERT model)"),w3e.forEach(t),hze=i(L),_f=n(L,"LI",{});var A3e=s(_f);soe=n(A3e,"STRONG",{});var Rjr=s(soe);uze=r(Rjr,"mpnet"),Rjr.forEach(t),pze=r(A3e," \u2014 "),Fk=n(A3e,"A",{href:!0});var Bjr=s(Fk);_ze=r(Bjr,"MPNetConfig"),Bjr.forEach(t),bze=r(A3e," (MPNet model)"),A3e.forEach(t),Fze=i(L),bf=n(L,"LI",{});var y3e=s(bf);loe=n(y3e,"STRONG",{});var Pjr=s(loe);vze=r(Pjr,"mt5"),Pjr.forEach(t),Tze=r(y3e," \u2014 "),vk=n(y3e,"A",{href:!0});var Ijr=s(vk);Mze=r(Ijr,"MT5Config"),Ijr.forEach(t),Eze=r(y3e," (mT5 model)"),y3e.forEach(t),Cze=i(L),Ff=n(L,"LI",{});var L3e=s(Ff);ioe=n(L3e,"STRONG",{});var qjr=s(ioe);wze=r(qjr,"nystromformer"),qjr.forEach(t),Aze=r(L3e," \u2014 "),Tk=n(L3e,"A",{href:!0});var Njr=s(Tk);yze=r(Njr,"NystromformerConfig"),Njr.forEach(t),Lze=r(L3e," (Nystromformer model)"),L3e.forEach(t),xze=i(L),vf=n(L,"LI",{});var x3e=s(vf);doe=n(x3e,"STRONG",{});var jjr=s(doe);$ze=r(jjr,"openai-gpt"),jjr.forEach(t),kze=r(x3e," \u2014 "),Mk=n(x3e,"A",{href:!0});var Djr=s(Mk);Sze=r(Djr,"OpenAIGPTConfig"),Djr.forEach(t),Rze=r(x3e," (OpenAI GPT model)"),x3e.forEach(t),Bze=i(L),Tf=n(L,"LI",{});var $3e=s(Tf);coe=n($3e,"STRONG",{});var Gjr=s(coe);Pze=r(Gjr,"opt"),Gjr.forEach(t),Ize=r($3e," \u2014 "),Ek=n($3e,"A",{href:!0});var Ojr=s(Ek);qze=r(Ojr,"OPTConfig"),Ojr.forEach(t),Nze=r($3e," (OPT model)"),$3e.forEach(t),jze=i(L),Mf=n(L,"LI",{});var k3e=s(Mf);moe=n(k3e,"STRONG",{});var Vjr=s(moe);Dze=r(Vjr,"pegasus"),Vjr.forEach(t),Gze=r(k3e," \u2014 "),Ck=n(k3e,"A",{href:!0});var Xjr=s(Ck);Oze=r(Xjr,"PegasusConfig"),Xjr.forEach(t),Vze=r(k3e," (Pegasus model)"),k3e.forEach(t),Xze=i(L),Ef=n(L,"LI",{});var S3e=s(Ef);foe=n(S3e,"STRONG",{});var zjr=s(foe);zze=r(zjr,"perceiver"),zjr.forEach(t),Qze=r(S3e," \u2014 "),wk=n(S3e,"A",{href:!0});var Qjr=s(wk);Wze=r(Qjr,"PerceiverConfig"),Qjr.forEach(t),Hze=r(S3e," (Perceiver model)"),S3e.forEach(t),Uze=i(L),Cf=n(L,"LI",{});var R3e=s(Cf);goe=n(R3e,"STRONG",{});var Wjr=s(goe);Jze=r(Wjr,"plbart"),Wjr.forEach(t),Yze=r(R3e," \u2014 "),Ak=n(R3e,"A",{href:!0});var Hjr=s(Ak);Kze=r(Hjr,"PLBartConfig"),Hjr.forEach(t),Zze=r(R3e," (PLBart model)"),R3e.forEach(t),eQe=i(L),wf=n(L,"LI",{});var B3e=s(wf);hoe=n(B3e,"STRONG",{});var Ujr=s(hoe);oQe=r(Ujr,"poolformer"),Ujr.forEach(t),rQe=r(B3e," \u2014 "),yk=n(B3e,"A",{href:!0});var Jjr=s(yk);tQe=r(Jjr,"PoolFormerConfig"),Jjr.forEach(t),aQe=r(B3e," (PoolFormer model)"),B3e.forEach(t),nQe=i(L),Af=n(L,"LI",{});var P3e=s(Af);uoe=n(P3e,"STRONG",{});var Yjr=s(uoe);sQe=r(Yjr,"prophetnet"),Yjr.forEach(t),lQe=r(P3e," \u2014 "),Lk=n(P3e,"A",{href:!0});var Kjr=s(Lk);iQe=r(Kjr,"ProphetNetConfig"),Kjr.forEach(t),dQe=r(P3e," (ProphetNet model)"),P3e.forEach(t),cQe=i(L),yf=n(L,"LI",{});var I3e=s(yf);poe=n(I3e,"STRONG",{});var Zjr=s(poe);mQe=r(Zjr,"qdqbert"),Zjr.forEach(t),fQe=r(I3e," \u2014 "),xk=n(I3e,"A",{href:!0});var eDr=s(xk);gQe=r(eDr,"QDQBertConfig"),eDr.forEach(t),hQe=r(I3e," (QDQBert model)"),I3e.forEach(t),uQe=i(L),Lf=n(L,"LI",{});var q3e=s(Lf);_oe=n(q3e,"STRONG",{});var oDr=s(_oe);pQe=r(oDr,"rag"),oDr.forEach(t),_Qe=r(q3e," \u2014 "),$k=n(q3e,"A",{href:!0});var rDr=s($k);bQe=r(rDr,"RagConfig"),rDr.forEach(t),FQe=r(q3e," (RAG model)"),q3e.forEach(t),vQe=i(L),xf=n(L,"LI",{});var N3e=s(xf);boe=n(N3e,"STRONG",{});var tDr=s(boe);TQe=r(tDr,"realm"),tDr.forEach(t),MQe=r(N3e," \u2014 "),kk=n(N3e,"A",{href:!0});var aDr=s(kk);EQe=r(aDr,"RealmConfig"),aDr.forEach(t),CQe=r(N3e," (Realm model)"),N3e.forEach(t),wQe=i(L),$f=n(L,"LI",{});var j3e=s($f);Foe=n(j3e,"STRONG",{});var nDr=s(Foe);AQe=r(nDr,"reformer"),nDr.forEach(t),yQe=r(j3e," \u2014 "),Sk=n(j3e,"A",{href:!0});var sDr=s(Sk);LQe=r(sDr,"ReformerConfig"),sDr.forEach(t),xQe=r(j3e," (Reformer model)"),j3e.forEach(t),$Qe=i(L),kf=n(L,"LI",{});var D3e=s(kf);voe=n(D3e,"STRONG",{});var lDr=s(voe);kQe=r(lDr,"regnet"),lDr.forEach(t),SQe=r(D3e," \u2014 "),Rk=n(D3e,"A",{href:!0});var iDr=s(Rk);RQe=r(iDr,"RegNetConfig"),iDr.forEach(t),BQe=r(D3e," (RegNet model)"),D3e.forEach(t),PQe=i(L),Sf=n(L,"LI",{});var G3e=s(Sf);Toe=n(G3e,"STRONG",{});var dDr=s(Toe);IQe=r(dDr,"rembert"),dDr.forEach(t),qQe=r(G3e," \u2014 "),Bk=n(G3e,"A",{href:!0});var cDr=s(Bk);NQe=r(cDr,"RemBertConfig"),cDr.forEach(t),jQe=r(G3e," (RemBERT model)"),G3e.forEach(t),DQe=i(L),Rf=n(L,"LI",{});var O3e=s(Rf);Moe=n(O3e,"STRONG",{});var mDr=s(Moe);GQe=r(mDr,"resnet"),mDr.forEach(t),OQe=r(O3e," \u2014 "),Pk=n(O3e,"A",{href:!0});var fDr=s(Pk);VQe=r(fDr,"ResNetConfig"),fDr.forEach(t),XQe=r(O3e," (ResNet model)"),O3e.forEach(t),zQe=i(L),Bf=n(L,"LI",{});var V3e=s(Bf);Eoe=n(V3e,"STRONG",{});var gDr=s(Eoe);QQe=r(gDr,"retribert"),gDr.forEach(t),WQe=r(V3e," \u2014 "),Ik=n(V3e,"A",{href:!0});var hDr=s(Ik);HQe=r(hDr,"RetriBertConfig"),hDr.forEach(t),UQe=r(V3e," (RetriBERT model)"),V3e.forEach(t),JQe=i(L),Pf=n(L,"LI",{});var X3e=s(Pf);Coe=n(X3e,"STRONG",{});var uDr=s(Coe);YQe=r(uDr,"roberta"),uDr.forEach(t),KQe=r(X3e," \u2014 "),qk=n(X3e,"A",{href:!0});var pDr=s(qk);ZQe=r(pDr,"RobertaConfig"),pDr.forEach(t),eWe=r(X3e," (RoBERTa model)"),X3e.forEach(t),oWe=i(L),If=n(L,"LI",{});var z3e=s(If);woe=n(z3e,"STRONG",{});var _Dr=s(woe);rWe=r(_Dr,"roformer"),_Dr.forEach(t),tWe=r(z3e," \u2014 "),Nk=n(z3e,"A",{href:!0});var bDr=s(Nk);aWe=r(bDr,"RoFormerConfig"),bDr.forEach(t),nWe=r(z3e," (RoFormer model)"),z3e.forEach(t),sWe=i(L),qf=n(L,"LI",{});var Q3e=s(qf);Aoe=n(Q3e,"STRONG",{});var FDr=s(Aoe);lWe=r(FDr,"segformer"),FDr.forEach(t),iWe=r(Q3e," \u2014 "),jk=n(Q3e,"A",{href:!0});var vDr=s(jk);dWe=r(vDr,"SegformerConfig"),vDr.forEach(t),cWe=r(Q3e," (SegFormer model)"),Q3e.forEach(t),mWe=i(L),Nf=n(L,"LI",{});var W3e=s(Nf);yoe=n(W3e,"STRONG",{});var TDr=s(yoe);fWe=r(TDr,"sew"),TDr.forEach(t),gWe=r(W3e," \u2014 "),Dk=n(W3e,"A",{href:!0});var MDr=s(Dk);hWe=r(MDr,"SEWConfig"),MDr.forEach(t),uWe=r(W3e," (SEW model)"),W3e.forEach(t),pWe=i(L),jf=n(L,"LI",{});var H3e=s(jf);Loe=n(H3e,"STRONG",{});var EDr=s(Loe);_We=r(EDr,"sew-d"),EDr.forEach(t),bWe=r(H3e," \u2014 "),Gk=n(H3e,"A",{href:!0});var CDr=s(Gk);FWe=r(CDr,"SEWDConfig"),CDr.forEach(t),vWe=r(H3e," (SEW-D model)"),H3e.forEach(t),TWe=i(L),Df=n(L,"LI",{});var U3e=s(Df);xoe=n(U3e,"STRONG",{});var wDr=s(xoe);MWe=r(wDr,"speech-encoder-decoder"),wDr.forEach(t),EWe=r(U3e," \u2014 "),Ok=n(U3e,"A",{href:!0});var ADr=s(Ok);CWe=r(ADr,"SpeechEncoderDecoderConfig"),ADr.forEach(t),wWe=r(U3e," (Speech Encoder decoder model)"),U3e.forEach(t),AWe=i(L),Gf=n(L,"LI",{});var J3e=s(Gf);$oe=n(J3e,"STRONG",{});var yDr=s($oe);yWe=r(yDr,"speech_to_text"),yDr.forEach(t),LWe=r(J3e," \u2014 "),Vk=n(J3e,"A",{href:!0});var LDr=s(Vk);xWe=r(LDr,"Speech2TextConfig"),LDr.forEach(t),$We=r(J3e," (Speech2Text model)"),J3e.forEach(t),kWe=i(L),Of=n(L,"LI",{});var Y3e=s(Of);koe=n(Y3e,"STRONG",{});var xDr=s(koe);SWe=r(xDr,"speech_to_text_2"),xDr.forEach(t),RWe=r(Y3e," \u2014 "),Xk=n(Y3e,"A",{href:!0});var $Dr=s(Xk);BWe=r($Dr,"Speech2Text2Config"),$Dr.forEach(t),PWe=r(Y3e," (Speech2Text2 model)"),Y3e.forEach(t),IWe=i(L),Vf=n(L,"LI",{});var K3e=s(Vf);Soe=n(K3e,"STRONG",{});var kDr=s(Soe);qWe=r(kDr,"splinter"),kDr.forEach(t),NWe=r(K3e," \u2014 "),zk=n(K3e,"A",{href:!0});var SDr=s(zk);jWe=r(SDr,"SplinterConfig"),SDr.forEach(t),DWe=r(K3e," (Splinter model)"),K3e.forEach(t),GWe=i(L),Xf=n(L,"LI",{});var Z3e=s(Xf);Roe=n(Z3e,"STRONG",{});var RDr=s(Roe);OWe=r(RDr,"squeezebert"),RDr.forEach(t),VWe=r(Z3e," \u2014 "),Qk=n(Z3e,"A",{href:!0});var BDr=s(Qk);XWe=r(BDr,"SqueezeBertConfig"),BDr.forEach(t),zWe=r(Z3e," (SqueezeBERT model)"),Z3e.forEach(t),QWe=i(L),zf=n(L,"LI",{});var ewe=s(zf);Boe=n(ewe,"STRONG",{});var PDr=s(Boe);WWe=r(PDr,"swin"),PDr.forEach(t),HWe=r(ewe," \u2014 "),Wk=n(ewe,"A",{href:!0});var IDr=s(Wk);UWe=r(IDr,"SwinConfig"),IDr.forEach(t),JWe=r(ewe," (Swin model)"),ewe.forEach(t),YWe=i(L),Qf=n(L,"LI",{});var owe=s(Qf);Poe=n(owe,"STRONG",{});var qDr=s(Poe);KWe=r(qDr,"t5"),qDr.forEach(t),ZWe=r(owe," \u2014 "),Hk=n(owe,"A",{href:!0});var NDr=s(Hk);eHe=r(NDr,"T5Config"),NDr.forEach(t),oHe=r(owe," (T5 model)"),owe.forEach(t),rHe=i(L),Wf=n(L,"LI",{});var rwe=s(Wf);Ioe=n(rwe,"STRONG",{});var jDr=s(Ioe);tHe=r(jDr,"tapas"),jDr.forEach(t),aHe=r(rwe," \u2014 "),Uk=n(rwe,"A",{href:!0});var DDr=s(Uk);nHe=r(DDr,"TapasConfig"),DDr.forEach(t),sHe=r(rwe," (TAPAS model)"),rwe.forEach(t),lHe=i(L),Hf=n(L,"LI",{});var twe=s(Hf);qoe=n(twe,"STRONG",{});var GDr=s(qoe);iHe=r(GDr,"transfo-xl"),GDr.forEach(t),dHe=r(twe," \u2014 "),Jk=n(twe,"A",{href:!0});var ODr=s(Jk);cHe=r(ODr,"TransfoXLConfig"),ODr.forEach(t),mHe=r(twe," (Transformer-XL model)"),twe.forEach(t),fHe=i(L),Uf=n(L,"LI",{});var awe=s(Uf);Noe=n(awe,"STRONG",{});var VDr=s(Noe);gHe=r(VDr,"trocr"),VDr.forEach(t),hHe=r(awe," \u2014 "),Yk=n(awe,"A",{href:!0});var XDr=s(Yk);uHe=r(XDr,"TrOCRConfig"),XDr.forEach(t),pHe=r(awe," (TrOCR model)"),awe.forEach(t),_He=i(L),Jf=n(L,"LI",{});var nwe=s(Jf);joe=n(nwe,"STRONG",{});var zDr=s(joe);bHe=r(zDr,"unispeech"),zDr.forEach(t),FHe=r(nwe," \u2014 "),Kk=n(nwe,"A",{href:!0});var QDr=s(Kk);vHe=r(QDr,"UniSpeechConfig"),QDr.forEach(t),THe=r(nwe," (UniSpeech model)"),nwe.forEach(t),MHe=i(L),Yf=n(L,"LI",{});var swe=s(Yf);Doe=n(swe,"STRONG",{});var WDr=s(Doe);EHe=r(WDr,"unispeech-sat"),WDr.forEach(t),CHe=r(swe," \u2014 "),Zk=n(swe,"A",{href:!0});var HDr=s(Zk);wHe=r(HDr,"UniSpeechSatConfig"),HDr.forEach(t),AHe=r(swe," (UniSpeechSat model)"),swe.forEach(t),yHe=i(L),Kf=n(L,"LI",{});var lwe=s(Kf);Goe=n(lwe,"STRONG",{});var UDr=s(Goe);LHe=r(UDr,"van"),UDr.forEach(t),xHe=r(lwe," \u2014 "),eS=n(lwe,"A",{href:!0});var JDr=s(eS);$He=r(JDr,"VanConfig"),JDr.forEach(t),kHe=r(lwe," (VAN model)"),lwe.forEach(t),SHe=i(L),Zf=n(L,"LI",{});var iwe=s(Zf);Ooe=n(iwe,"STRONG",{});var YDr=s(Ooe);RHe=r(YDr,"vilt"),YDr.forEach(t),BHe=r(iwe," \u2014 "),oS=n(iwe,"A",{href:!0});var KDr=s(oS);PHe=r(KDr,"ViltConfig"),KDr.forEach(t),IHe=r(iwe," (ViLT model)"),iwe.forEach(t),qHe=i(L),eg=n(L,"LI",{});var dwe=s(eg);Voe=n(dwe,"STRONG",{});var ZDr=s(Voe);NHe=r(ZDr,"vision-encoder-decoder"),ZDr.forEach(t),jHe=r(dwe," \u2014 "),rS=n(dwe,"A",{href:!0});var eGr=s(rS);DHe=r(eGr,"VisionEncoderDecoderConfig"),eGr.forEach(t),GHe=r(dwe," (Vision Encoder decoder model)"),dwe.forEach(t),OHe=i(L),og=n(L,"LI",{});var cwe=s(og);Xoe=n(cwe,"STRONG",{});var oGr=s(Xoe);VHe=r(oGr,"vision-text-dual-encoder"),oGr.forEach(t),XHe=r(cwe," \u2014 "),tS=n(cwe,"A",{href:!0});var rGr=s(tS);zHe=r(rGr,"VisionTextDualEncoderConfig"),rGr.forEach(t),QHe=r(cwe," (VisionTextDualEncoder model)"),cwe.forEach(t),WHe=i(L),rg=n(L,"LI",{});var mwe=s(rg);zoe=n(mwe,"STRONG",{});var tGr=s(zoe);HHe=r(tGr,"visual_bert"),tGr.forEach(t),UHe=r(mwe," \u2014 "),aS=n(mwe,"A",{href:!0});var aGr=s(aS);JHe=r(aGr,"VisualBertConfig"),aGr.forEach(t),YHe=r(mwe," (VisualBert model)"),mwe.forEach(t),KHe=i(L),tg=n(L,"LI",{});var fwe=s(tg);Qoe=n(fwe,"STRONG",{});var nGr=s(Qoe);ZHe=r(nGr,"vit"),nGr.forEach(t),eUe=r(fwe," \u2014 "),nS=n(fwe,"A",{href:!0});var sGr=s(nS);oUe=r(sGr,"ViTConfig"),sGr.forEach(t),rUe=r(fwe," (ViT model)"),fwe.forEach(t),tUe=i(L),ag=n(L,"LI",{});var gwe=s(ag);Woe=n(gwe,"STRONG",{});var lGr=s(Woe);aUe=r(lGr,"vit_mae"),lGr.forEach(t),nUe=r(gwe," \u2014 "),sS=n(gwe,"A",{href:!0});var iGr=s(sS);sUe=r(iGr,"ViTMAEConfig"),iGr.forEach(t),lUe=r(gwe," (ViTMAE model)"),gwe.forEach(t),iUe=i(L),ng=n(L,"LI",{});var hwe=s(ng);Hoe=n(hwe,"STRONG",{});var dGr=s(Hoe);dUe=r(dGr,"wav2vec2"),dGr.forEach(t),cUe=r(hwe," \u2014 "),lS=n(hwe,"A",{href:!0});var cGr=s(lS);mUe=r(cGr,"Wav2Vec2Config"),cGr.forEach(t),fUe=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),gUe=i(L),sg=n(L,"LI",{});var uwe=s(sg);Uoe=n(uwe,"STRONG",{});var mGr=s(Uoe);hUe=r(mGr,"wavlm"),mGr.forEach(t),uUe=r(uwe," \u2014 "),iS=n(uwe,"A",{href:!0});var fGr=s(iS);pUe=r(fGr,"WavLMConfig"),fGr.forEach(t),_Ue=r(uwe," (WavLM model)"),uwe.forEach(t),bUe=i(L),lg=n(L,"LI",{});var pwe=s(lg);Joe=n(pwe,"STRONG",{});var gGr=s(Joe);FUe=r(gGr,"xglm"),gGr.forEach(t),vUe=r(pwe," \u2014 "),dS=n(pwe,"A",{href:!0});var hGr=s(dS);TUe=r(hGr,"XGLMConfig"),hGr.forEach(t),MUe=r(pwe," (XGLM model)"),pwe.forEach(t),EUe=i(L),ig=n(L,"LI",{});var _we=s(ig);Yoe=n(_we,"STRONG",{});var uGr=s(Yoe);CUe=r(uGr,"xlm"),uGr.forEach(t),wUe=r(_we," \u2014 "),cS=n(_we,"A",{href:!0});var pGr=s(cS);AUe=r(pGr,"XLMConfig"),pGr.forEach(t),yUe=r(_we," (XLM model)"),_we.forEach(t),LUe=i(L),dg=n(L,"LI",{});var bwe=s(dg);Koe=n(bwe,"STRONG",{});var _Gr=s(Koe);xUe=r(_Gr,"xlm-prophetnet"),_Gr.forEach(t),$Ue=r(bwe," \u2014 "),mS=n(bwe,"A",{href:!0});var bGr=s(mS);kUe=r(bGr,"XLMProphetNetConfig"),bGr.forEach(t),SUe=r(bwe," (XLMProphetNet model)"),bwe.forEach(t),RUe=i(L),cg=n(L,"LI",{});var Fwe=s(cg);Zoe=n(Fwe,"STRONG",{});var FGr=s(Zoe);BUe=r(FGr,"xlm-roberta"),FGr.forEach(t),PUe=r(Fwe," \u2014 "),fS=n(Fwe,"A",{href:!0});var vGr=s(fS);IUe=r(vGr,"XLMRobertaConfig"),vGr.forEach(t),qUe=r(Fwe," (XLM-RoBERTa model)"),Fwe.forEach(t),NUe=i(L),mg=n(L,"LI",{});var vwe=s(mg);ere=n(vwe,"STRONG",{});var TGr=s(ere);jUe=r(TGr,"xlm-roberta-xl"),TGr.forEach(t),DUe=r(vwe," \u2014 "),gS=n(vwe,"A",{href:!0});var MGr=s(gS);GUe=r(MGr,"XLMRobertaXLConfig"),MGr.forEach(t),OUe=r(vwe," (XLM-RoBERTa-XL model)"),vwe.forEach(t),VUe=i(L),fg=n(L,"LI",{});var Twe=s(fg);ore=n(Twe,"STRONG",{});var EGr=s(ore);XUe=r(EGr,"xlnet"),EGr.forEach(t),zUe=r(Twe," \u2014 "),hS=n(Twe,"A",{href:!0});var CGr=s(hS);QUe=r(CGr,"XLNetConfig"),CGr.forEach(t),WUe=r(Twe," (XLNet model)"),Twe.forEach(t),HUe=i(L),gg=n(L,"LI",{});var Mwe=s(gg);rre=n(Mwe,"STRONG",{});var wGr=s(rre);UUe=r(wGr,"yolos"),wGr.forEach(t),JUe=r(Mwe," \u2014 "),uS=n(Mwe,"A",{href:!0});var AGr=s(uS);YUe=r(AGr,"YolosConfig"),AGr.forEach(t),KUe=r(Mwe," (YOLOS model)"),Mwe.forEach(t),ZUe=i(L),hg=n(L,"LI",{});var Ewe=s(hg);tre=n(Ewe,"STRONG",{});var yGr=s(tre);eJe=r(yGr,"yoso"),yGr.forEach(t),oJe=r(Ewe," \u2014 "),pS=n(Ewe,"A",{href:!0});var LGr=s(pS);rJe=r(LGr,"YosoConfig"),LGr.forEach(t),tJe=r(Ewe," (YOSO model)"),Ewe.forEach(t),L.forEach(t),aJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),nJe=i(Kr),pg=n(Kr,"DIV",{class:!0});var Vqe=s(pg);T(ay.$$.fragment,Vqe),sJe=i(Vqe),are=n(Vqe,"P",{});var xGr=s(are);lJe=r(xGr,"Register a new configuration for this class."),xGr.forEach(t),Vqe.forEach(t),Kr.forEach(t),QPe=i(m),bi=n(m,"H2",{class:!0});var Xqe=s(bi);_g=n(Xqe,"A",{id:!0,class:!0,href:!0});var $Gr=s(_g);nre=n($Gr,"SPAN",{});var kGr=s(nre);T(ny.$$.fragment,kGr),kGr.forEach(t),$Gr.forEach(t),iJe=i(Xqe),sre=n(Xqe,"SPAN",{});var SGr=s(sre);dJe=r(SGr,"AutoTokenizer"),SGr.forEach(t),Xqe.forEach(t),WPe=i(m),wo=n(m,"DIV",{class:!0});var Is=s(wo);T(sy.$$.fragment,Is),cJe=i(Is),ly=n(Is,"P",{});var zqe=s(ly);mJe=r(zqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=n(zqe,"A",{href:!0});var RGr=s(_S);fJe=r(RGr,"AutoTokenizer.from_pretrained()"),RGr.forEach(t),gJe=r(zqe," class method."),zqe.forEach(t),hJe=i(Is),iy=n(Is,"P",{});var Qqe=s(iy);uJe=r(Qqe,"This class cannot be instantiated directly using "),lre=n(Qqe,"CODE",{});var BGr=s(lre);pJe=r(BGr,"__init__()"),BGr.forEach(t),_Je=r(Qqe," (throws an error)."),Qqe.forEach(t),bJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(dy.$$.fragment,qs),FJe=i(qs),ire=n(qs,"P",{});var PGr=s(ire);vJe=r(PGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PGr.forEach(t),TJe=i(qs),Ca=n(qs,"P",{});var YA=s(Ca);MJe=r(YA,"The tokenizer class to instantiate is selected based on the "),dre=n(YA,"CODE",{});var IGr=s(dre);EJe=r(IGr,"model_type"),IGr.forEach(t),CJe=r(YA,` property of the config object (either
passed as an argument or loaded from `),cre=n(YA,"CODE",{});var qGr=s(cre);wJe=r(qGr,"pretrained_model_name_or_path"),qGr.forEach(t),AJe=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=n(YA,"CODE",{});var NGr=s(mre);yJe=r(NGr,"pretrained_model_name_or_path"),NGr.forEach(t),LJe=r(YA,":"),YA.forEach(t),xJe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var c9=s(Sn);fre=n(c9,"STRONG",{});var jGr=s(fre);$Je=r(jGr,"albert"),jGr.forEach(t),kJe=r(c9," \u2014 "),bS=n(c9,"A",{href:!0});var DGr=s(bS);SJe=r(DGr,"AlbertTokenizer"),DGr.forEach(t),RJe=r(c9," or "),FS=n(c9,"A",{href:!0});var GGr=s(FS);BJe=r(GGr,"AlbertTokenizerFast"),GGr.forEach(t),PJe=r(c9," (ALBERT model)"),c9.forEach(t),IJe=i(S),Rn=n(S,"LI",{});var m9=s(Rn);gre=n(m9,"STRONG",{});var OGr=s(gre);qJe=r(OGr,"bart"),OGr.forEach(t),NJe=r(m9," \u2014 "),vS=n(m9,"A",{href:!0});var VGr=s(vS);jJe=r(VGr,"BartTokenizer"),VGr.forEach(t),DJe=r(m9," or "),TS=n(m9,"A",{href:!0});var XGr=s(TS);GJe=r(XGr,"BartTokenizerFast"),XGr.forEach(t),OJe=r(m9," (BART model)"),m9.forEach(t),VJe=i(S),Bn=n(S,"LI",{});var f9=s(Bn);hre=n(f9,"STRONG",{});var zGr=s(hre);XJe=r(zGr,"barthez"),zGr.forEach(t),zJe=r(f9," \u2014 "),MS=n(f9,"A",{href:!0});var QGr=s(MS);QJe=r(QGr,"BarthezTokenizer"),QGr.forEach(t),WJe=r(f9," or "),ES=n(f9,"A",{href:!0});var WGr=s(ES);HJe=r(WGr,"BarthezTokenizerFast"),WGr.forEach(t),UJe=r(f9," (BARThez model)"),f9.forEach(t),JJe=i(S),bg=n(S,"LI",{});var Cwe=s(bg);ure=n(Cwe,"STRONG",{});var HGr=s(ure);YJe=r(HGr,"bartpho"),HGr.forEach(t),KJe=r(Cwe," \u2014 "),CS=n(Cwe,"A",{href:!0});var UGr=s(CS);ZJe=r(UGr,"BartphoTokenizer"),UGr.forEach(t),eYe=r(Cwe," (BARTpho model)"),Cwe.forEach(t),oYe=i(S),Pn=n(S,"LI",{});var g9=s(Pn);pre=n(g9,"STRONG",{});var JGr=s(pre);rYe=r(JGr,"bert"),JGr.forEach(t),tYe=r(g9," \u2014 "),wS=n(g9,"A",{href:!0});var YGr=s(wS);aYe=r(YGr,"BertTokenizer"),YGr.forEach(t),nYe=r(g9," or "),AS=n(g9,"A",{href:!0});var KGr=s(AS);sYe=r(KGr,"BertTokenizerFast"),KGr.forEach(t),lYe=r(g9," (BERT model)"),g9.forEach(t),iYe=i(S),Fg=n(S,"LI",{});var wwe=s(Fg);_re=n(wwe,"STRONG",{});var ZGr=s(_re);dYe=r(ZGr,"bert-generation"),ZGr.forEach(t),cYe=r(wwe," \u2014 "),yS=n(wwe,"A",{href:!0});var eOr=s(yS);mYe=r(eOr,"BertGenerationTokenizer"),eOr.forEach(t),fYe=r(wwe," (Bert Generation model)"),wwe.forEach(t),gYe=i(S),vg=n(S,"LI",{});var Awe=s(vg);bre=n(Awe,"STRONG",{});var oOr=s(bre);hYe=r(oOr,"bert-japanese"),oOr.forEach(t),uYe=r(Awe," \u2014 "),LS=n(Awe,"A",{href:!0});var rOr=s(LS);pYe=r(rOr,"BertJapaneseTokenizer"),rOr.forEach(t),_Ye=r(Awe," (BertJapanese model)"),Awe.forEach(t),bYe=i(S),Tg=n(S,"LI",{});var ywe=s(Tg);Fre=n(ywe,"STRONG",{});var tOr=s(Fre);FYe=r(tOr,"bertweet"),tOr.forEach(t),vYe=r(ywe," \u2014 "),xS=n(ywe,"A",{href:!0});var aOr=s(xS);TYe=r(aOr,"BertweetTokenizer"),aOr.forEach(t),MYe=r(ywe," (Bertweet model)"),ywe.forEach(t),EYe=i(S),In=n(S,"LI",{});var h9=s(In);vre=n(h9,"STRONG",{});var nOr=s(vre);CYe=r(nOr,"big_bird"),nOr.forEach(t),wYe=r(h9," \u2014 "),$S=n(h9,"A",{href:!0});var sOr=s($S);AYe=r(sOr,"BigBirdTokenizer"),sOr.forEach(t),yYe=r(h9," or "),kS=n(h9,"A",{href:!0});var lOr=s(kS);LYe=r(lOr,"BigBirdTokenizerFast"),lOr.forEach(t),xYe=r(h9," (BigBird model)"),h9.forEach(t),$Ye=i(S),qn=n(S,"LI",{});var u9=s(qn);Tre=n(u9,"STRONG",{});var iOr=s(Tre);kYe=r(iOr,"bigbird_pegasus"),iOr.forEach(t),SYe=r(u9," \u2014 "),SS=n(u9,"A",{href:!0});var dOr=s(SS);RYe=r(dOr,"PegasusTokenizer"),dOr.forEach(t),BYe=r(u9," or "),RS=n(u9,"A",{href:!0});var cOr=s(RS);PYe=r(cOr,"PegasusTokenizerFast"),cOr.forEach(t),IYe=r(u9," (BigBirdPegasus model)"),u9.forEach(t),qYe=i(S),Nn=n(S,"LI",{});var p9=s(Nn);Mre=n(p9,"STRONG",{});var mOr=s(Mre);NYe=r(mOr,"blenderbot"),mOr.forEach(t),jYe=r(p9," \u2014 "),BS=n(p9,"A",{href:!0});var fOr=s(BS);DYe=r(fOr,"BlenderbotTokenizer"),fOr.forEach(t),GYe=r(p9," or "),PS=n(p9,"A",{href:!0});var gOr=s(PS);OYe=r(gOr,"BlenderbotTokenizerFast"),gOr.forEach(t),VYe=r(p9," (Blenderbot model)"),p9.forEach(t),XYe=i(S),Mg=n(S,"LI",{});var Lwe=s(Mg);Ere=n(Lwe,"STRONG",{});var hOr=s(Ere);zYe=r(hOr,"blenderbot-small"),hOr.forEach(t),QYe=r(Lwe," \u2014 "),IS=n(Lwe,"A",{href:!0});var uOr=s(IS);WYe=r(uOr,"BlenderbotSmallTokenizer"),uOr.forEach(t),HYe=r(Lwe," (BlenderbotSmall model)"),Lwe.forEach(t),UYe=i(S),Eg=n(S,"LI",{});var xwe=s(Eg);Cre=n(xwe,"STRONG",{});var pOr=s(Cre);JYe=r(pOr,"byt5"),pOr.forEach(t),YYe=r(xwe," \u2014 "),qS=n(xwe,"A",{href:!0});var _Or=s(qS);KYe=r(_Or,"ByT5Tokenizer"),_Or.forEach(t),ZYe=r(xwe," (ByT5 model)"),xwe.forEach(t),eKe=i(S),jn=n(S,"LI",{});var _9=s(jn);wre=n(_9,"STRONG",{});var bOr=s(wre);oKe=r(bOr,"camembert"),bOr.forEach(t),rKe=r(_9," \u2014 "),NS=n(_9,"A",{href:!0});var FOr=s(NS);tKe=r(FOr,"CamembertTokenizer"),FOr.forEach(t),aKe=r(_9," or "),jS=n(_9,"A",{href:!0});var vOr=s(jS);nKe=r(vOr,"CamembertTokenizerFast"),vOr.forEach(t),sKe=r(_9," (CamemBERT model)"),_9.forEach(t),lKe=i(S),Cg=n(S,"LI",{});var $we=s(Cg);Are=n($we,"STRONG",{});var TOr=s(Are);iKe=r(TOr,"canine"),TOr.forEach(t),dKe=r($we," \u2014 "),DS=n($we,"A",{href:!0});var MOr=s(DS);cKe=r(MOr,"CanineTokenizer"),MOr.forEach(t),mKe=r($we," (Canine model)"),$we.forEach(t),fKe=i(S),Dn=n(S,"LI",{});var b9=s(Dn);yre=n(b9,"STRONG",{});var EOr=s(yre);gKe=r(EOr,"clip"),EOr.forEach(t),hKe=r(b9," \u2014 "),GS=n(b9,"A",{href:!0});var COr=s(GS);uKe=r(COr,"CLIPTokenizer"),COr.forEach(t),pKe=r(b9," or "),OS=n(b9,"A",{href:!0});var wOr=s(OS);_Ke=r(wOr,"CLIPTokenizerFast"),wOr.forEach(t),bKe=r(b9," (CLIP model)"),b9.forEach(t),FKe=i(S),Gn=n(S,"LI",{});var F9=s(Gn);Lre=n(F9,"STRONG",{});var AOr=s(Lre);vKe=r(AOr,"convbert"),AOr.forEach(t),TKe=r(F9," \u2014 "),VS=n(F9,"A",{href:!0});var yOr=s(VS);MKe=r(yOr,"ConvBertTokenizer"),yOr.forEach(t),EKe=r(F9," or "),XS=n(F9,"A",{href:!0});var LOr=s(XS);CKe=r(LOr,"ConvBertTokenizerFast"),LOr.forEach(t),wKe=r(F9," (ConvBERT model)"),F9.forEach(t),AKe=i(S),On=n(S,"LI",{});var v9=s(On);xre=n(v9,"STRONG",{});var xOr=s(xre);yKe=r(xOr,"cpm"),xOr.forEach(t),LKe=r(v9," \u2014 "),zS=n(v9,"A",{href:!0});var $Or=s(zS);xKe=r($Or,"CpmTokenizer"),$Or.forEach(t),$Ke=r(v9," or "),QS=n(v9,"A",{href:!0});var kOr=s(QS);kKe=r(kOr,"CpmTokenizerFast"),kOr.forEach(t),SKe=r(v9," (CPM model)"),v9.forEach(t),RKe=i(S),wg=n(S,"LI",{});var kwe=s(wg);$re=n(kwe,"STRONG",{});var SOr=s($re);BKe=r(SOr,"ctrl"),SOr.forEach(t),PKe=r(kwe," \u2014 "),WS=n(kwe,"A",{href:!0});var ROr=s(WS);IKe=r(ROr,"CTRLTokenizer"),ROr.forEach(t),qKe=r(kwe," (CTRL model)"),kwe.forEach(t),NKe=i(S),Vn=n(S,"LI",{});var T9=s(Vn);kre=n(T9,"STRONG",{});var BOr=s(kre);jKe=r(BOr,"data2vec-text"),BOr.forEach(t),DKe=r(T9," \u2014 "),HS=n(T9,"A",{href:!0});var POr=s(HS);GKe=r(POr,"RobertaTokenizer"),POr.forEach(t),OKe=r(T9," or "),US=n(T9,"A",{href:!0});var IOr=s(US);VKe=r(IOr,"RobertaTokenizerFast"),IOr.forEach(t),XKe=r(T9," (Data2VecText model)"),T9.forEach(t),zKe=i(S),Xn=n(S,"LI",{});var M9=s(Xn);Sre=n(M9,"STRONG",{});var qOr=s(Sre);QKe=r(qOr,"deberta"),qOr.forEach(t),WKe=r(M9," \u2014 "),JS=n(M9,"A",{href:!0});var NOr=s(JS);HKe=r(NOr,"DebertaTokenizer"),NOr.forEach(t),UKe=r(M9," or "),YS=n(M9,"A",{href:!0});var jOr=s(YS);JKe=r(jOr,"DebertaTokenizerFast"),jOr.forEach(t),YKe=r(M9," (DeBERTa model)"),M9.forEach(t),KKe=i(S),zn=n(S,"LI",{});var E9=s(zn);Rre=n(E9,"STRONG",{});var DOr=s(Rre);ZKe=r(DOr,"deberta-v2"),DOr.forEach(t),eZe=r(E9," \u2014 "),KS=n(E9,"A",{href:!0});var GOr=s(KS);oZe=r(GOr,"DebertaV2Tokenizer"),GOr.forEach(t),rZe=r(E9," or "),ZS=n(E9,"A",{href:!0});var OOr=s(ZS);tZe=r(OOr,"DebertaV2TokenizerFast"),OOr.forEach(t),aZe=r(E9," (DeBERTa-v2 model)"),E9.forEach(t),nZe=i(S),Qn=n(S,"LI",{});var C9=s(Qn);Bre=n(C9,"STRONG",{});var VOr=s(Bre);sZe=r(VOr,"distilbert"),VOr.forEach(t),lZe=r(C9," \u2014 "),eR=n(C9,"A",{href:!0});var XOr=s(eR);iZe=r(XOr,"DistilBertTokenizer"),XOr.forEach(t),dZe=r(C9," or "),oR=n(C9,"A",{href:!0});var zOr=s(oR);cZe=r(zOr,"DistilBertTokenizerFast"),zOr.forEach(t),mZe=r(C9," (DistilBERT model)"),C9.forEach(t),fZe=i(S),Wn=n(S,"LI",{});var w9=s(Wn);Pre=n(w9,"STRONG",{});var QOr=s(Pre);gZe=r(QOr,"dpr"),QOr.forEach(t),hZe=r(w9," \u2014 "),rR=n(w9,"A",{href:!0});var WOr=s(rR);uZe=r(WOr,"DPRQuestionEncoderTokenizer"),WOr.forEach(t),pZe=r(w9," or "),tR=n(w9,"A",{href:!0});var HOr=s(tR);_Ze=r(HOr,"DPRQuestionEncoderTokenizerFast"),HOr.forEach(t),bZe=r(w9," (DPR model)"),w9.forEach(t),FZe=i(S),Hn=n(S,"LI",{});var A9=s(Hn);Ire=n(A9,"STRONG",{});var UOr=s(Ire);vZe=r(UOr,"electra"),UOr.forEach(t),TZe=r(A9," \u2014 "),aR=n(A9,"A",{href:!0});var JOr=s(aR);MZe=r(JOr,"ElectraTokenizer"),JOr.forEach(t),EZe=r(A9," or "),nR=n(A9,"A",{href:!0});var YOr=s(nR);CZe=r(YOr,"ElectraTokenizerFast"),YOr.forEach(t),wZe=r(A9," (ELECTRA model)"),A9.forEach(t),AZe=i(S),Ag=n(S,"LI",{});var Swe=s(Ag);qre=n(Swe,"STRONG",{});var KOr=s(qre);yZe=r(KOr,"flaubert"),KOr.forEach(t),LZe=r(Swe," \u2014 "),sR=n(Swe,"A",{href:!0});var ZOr=s(sR);xZe=r(ZOr,"FlaubertTokenizer"),ZOr.forEach(t),$Ze=r(Swe," (FlauBERT model)"),Swe.forEach(t),kZe=i(S),Un=n(S,"LI",{});var y9=s(Un);Nre=n(y9,"STRONG",{});var eVr=s(Nre);SZe=r(eVr,"fnet"),eVr.forEach(t),RZe=r(y9," \u2014 "),lR=n(y9,"A",{href:!0});var oVr=s(lR);BZe=r(oVr,"FNetTokenizer"),oVr.forEach(t),PZe=r(y9," or "),iR=n(y9,"A",{href:!0});var rVr=s(iR);IZe=r(rVr,"FNetTokenizerFast"),rVr.forEach(t),qZe=r(y9," (FNet model)"),y9.forEach(t),NZe=i(S),yg=n(S,"LI",{});var Rwe=s(yg);jre=n(Rwe,"STRONG",{});var tVr=s(jre);jZe=r(tVr,"fsmt"),tVr.forEach(t),DZe=r(Rwe," \u2014 "),dR=n(Rwe,"A",{href:!0});var aVr=s(dR);GZe=r(aVr,"FSMTTokenizer"),aVr.forEach(t),OZe=r(Rwe," (FairSeq Machine-Translation model)"),Rwe.forEach(t),VZe=i(S),Jn=n(S,"LI",{});var L9=s(Jn);Dre=n(L9,"STRONG",{});var nVr=s(Dre);XZe=r(nVr,"funnel"),nVr.forEach(t),zZe=r(L9," \u2014 "),cR=n(L9,"A",{href:!0});var sVr=s(cR);QZe=r(sVr,"FunnelTokenizer"),sVr.forEach(t),WZe=r(L9," or "),mR=n(L9,"A",{href:!0});var lVr=s(mR);HZe=r(lVr,"FunnelTokenizerFast"),lVr.forEach(t),UZe=r(L9," (Funnel Transformer model)"),L9.forEach(t),JZe=i(S),Yn=n(S,"LI",{});var x9=s(Yn);Gre=n(x9,"STRONG",{});var iVr=s(Gre);YZe=r(iVr,"gpt2"),iVr.forEach(t),KZe=r(x9," \u2014 "),fR=n(x9,"A",{href:!0});var dVr=s(fR);ZZe=r(dVr,"GPT2Tokenizer"),dVr.forEach(t),eeo=r(x9," or "),gR=n(x9,"A",{href:!0});var cVr=s(gR);oeo=r(cVr,"GPT2TokenizerFast"),cVr.forEach(t),reo=r(x9," (OpenAI GPT-2 model)"),x9.forEach(t),teo=i(S),Kn=n(S,"LI",{});var $9=s(Kn);Ore=n($9,"STRONG",{});var mVr=s(Ore);aeo=r(mVr,"gpt_neo"),mVr.forEach(t),neo=r($9," \u2014 "),hR=n($9,"A",{href:!0});var fVr=s(hR);seo=r(fVr,"GPT2Tokenizer"),fVr.forEach(t),leo=r($9," or "),uR=n($9,"A",{href:!0});var gVr=s(uR);ieo=r(gVr,"GPT2TokenizerFast"),gVr.forEach(t),deo=r($9," (GPT Neo model)"),$9.forEach(t),ceo=i(S),Zn=n(S,"LI",{});var k9=s(Zn);Vre=n(k9,"STRONG",{});var hVr=s(Vre);meo=r(hVr,"gptj"),hVr.forEach(t),feo=r(k9," \u2014 "),pR=n(k9,"A",{href:!0});var uVr=s(pR);geo=r(uVr,"GPT2Tokenizer"),uVr.forEach(t),heo=r(k9," or "),_R=n(k9,"A",{href:!0});var pVr=s(_R);ueo=r(pVr,"GPT2TokenizerFast"),pVr.forEach(t),peo=r(k9," (GPT-J model)"),k9.forEach(t),_eo=i(S),es=n(S,"LI",{});var S9=s(es);Xre=n(S9,"STRONG",{});var _Vr=s(Xre);beo=r(_Vr,"herbert"),_Vr.forEach(t),Feo=r(S9," \u2014 "),bR=n(S9,"A",{href:!0});var bVr=s(bR);veo=r(bVr,"HerbertTokenizer"),bVr.forEach(t),Teo=r(S9," or "),FR=n(S9,"A",{href:!0});var FVr=s(FR);Meo=r(FVr,"HerbertTokenizerFast"),FVr.forEach(t),Eeo=r(S9," (HerBERT model)"),S9.forEach(t),Ceo=i(S),Lg=n(S,"LI",{});var Bwe=s(Lg);zre=n(Bwe,"STRONG",{});var vVr=s(zre);weo=r(vVr,"hubert"),vVr.forEach(t),Aeo=r(Bwe," \u2014 "),vR=n(Bwe,"A",{href:!0});var TVr=s(vR);yeo=r(TVr,"Wav2Vec2CTCTokenizer"),TVr.forEach(t),Leo=r(Bwe," (Hubert model)"),Bwe.forEach(t),xeo=i(S),os=n(S,"LI",{});var R9=s(os);Qre=n(R9,"STRONG",{});var MVr=s(Qre);$eo=r(MVr,"ibert"),MVr.forEach(t),keo=r(R9," \u2014 "),TR=n(R9,"A",{href:!0});var EVr=s(TR);Seo=r(EVr,"RobertaTokenizer"),EVr.forEach(t),Reo=r(R9," or "),MR=n(R9,"A",{href:!0});var CVr=s(MR);Beo=r(CVr,"RobertaTokenizerFast"),CVr.forEach(t),Peo=r(R9," (I-BERT model)"),R9.forEach(t),Ieo=i(S),rs=n(S,"LI",{});var B9=s(rs);Wre=n(B9,"STRONG",{});var wVr=s(Wre);qeo=r(wVr,"layoutlm"),wVr.forEach(t),Neo=r(B9," \u2014 "),ER=n(B9,"A",{href:!0});var AVr=s(ER);jeo=r(AVr,"LayoutLMTokenizer"),AVr.forEach(t),Deo=r(B9," or "),CR=n(B9,"A",{href:!0});var yVr=s(CR);Geo=r(yVr,"LayoutLMTokenizerFast"),yVr.forEach(t),Oeo=r(B9," (LayoutLM model)"),B9.forEach(t),Veo=i(S),ts=n(S,"LI",{});var P9=s(ts);Hre=n(P9,"STRONG",{});var LVr=s(Hre);Xeo=r(LVr,"layoutlmv2"),LVr.forEach(t),zeo=r(P9," \u2014 "),wR=n(P9,"A",{href:!0});var xVr=s(wR);Qeo=r(xVr,"LayoutLMv2Tokenizer"),xVr.forEach(t),Weo=r(P9," or "),AR=n(P9,"A",{href:!0});var $Vr=s(AR);Heo=r($Vr,"LayoutLMv2TokenizerFast"),$Vr.forEach(t),Ueo=r(P9," (LayoutLMv2 model)"),P9.forEach(t),Jeo=i(S),as=n(S,"LI",{});var I9=s(as);Ure=n(I9,"STRONG",{});var kVr=s(Ure);Yeo=r(kVr,"layoutxlm"),kVr.forEach(t),Keo=r(I9," \u2014 "),yR=n(I9,"A",{href:!0});var SVr=s(yR);Zeo=r(SVr,"LayoutXLMTokenizer"),SVr.forEach(t),eoo=r(I9," or "),LR=n(I9,"A",{href:!0});var RVr=s(LR);ooo=r(RVr,"LayoutXLMTokenizerFast"),RVr.forEach(t),roo=r(I9," (LayoutXLM model)"),I9.forEach(t),too=i(S),ns=n(S,"LI",{});var q9=s(ns);Jre=n(q9,"STRONG",{});var BVr=s(Jre);aoo=r(BVr,"led"),BVr.forEach(t),noo=r(q9," \u2014 "),xR=n(q9,"A",{href:!0});var PVr=s(xR);soo=r(PVr,"LEDTokenizer"),PVr.forEach(t),loo=r(q9," or "),$R=n(q9,"A",{href:!0});var IVr=s($R);ioo=r(IVr,"LEDTokenizerFast"),IVr.forEach(t),doo=r(q9," (LED model)"),q9.forEach(t),coo=i(S),ss=n(S,"LI",{});var N9=s(ss);Yre=n(N9,"STRONG",{});var qVr=s(Yre);moo=r(qVr,"longformer"),qVr.forEach(t),foo=r(N9," \u2014 "),kR=n(N9,"A",{href:!0});var NVr=s(kR);goo=r(NVr,"LongformerTokenizer"),NVr.forEach(t),hoo=r(N9," or "),SR=n(N9,"A",{href:!0});var jVr=s(SR);uoo=r(jVr,"LongformerTokenizerFast"),jVr.forEach(t),poo=r(N9," (Longformer model)"),N9.forEach(t),_oo=i(S),xg=n(S,"LI",{});var Pwe=s(xg);Kre=n(Pwe,"STRONG",{});var DVr=s(Kre);boo=r(DVr,"luke"),DVr.forEach(t),Foo=r(Pwe," \u2014 "),RR=n(Pwe,"A",{href:!0});var GVr=s(RR);voo=r(GVr,"LukeTokenizer"),GVr.forEach(t),Too=r(Pwe," (LUKE model)"),Pwe.forEach(t),Moo=i(S),ls=n(S,"LI",{});var j9=s(ls);Zre=n(j9,"STRONG",{});var OVr=s(Zre);Eoo=r(OVr,"lxmert"),OVr.forEach(t),Coo=r(j9," \u2014 "),BR=n(j9,"A",{href:!0});var VVr=s(BR);woo=r(VVr,"LxmertTokenizer"),VVr.forEach(t),Aoo=r(j9," or "),PR=n(j9,"A",{href:!0});var XVr=s(PR);yoo=r(XVr,"LxmertTokenizerFast"),XVr.forEach(t),Loo=r(j9," (LXMERT model)"),j9.forEach(t),xoo=i(S),$g=n(S,"LI",{});var Iwe=s($g);ete=n(Iwe,"STRONG",{});var zVr=s(ete);$oo=r(zVr,"m2m_100"),zVr.forEach(t),koo=r(Iwe," \u2014 "),IR=n(Iwe,"A",{href:!0});var QVr=s(IR);Soo=r(QVr,"M2M100Tokenizer"),QVr.forEach(t),Roo=r(Iwe," (M2M100 model)"),Iwe.forEach(t),Boo=i(S),kg=n(S,"LI",{});var qwe=s(kg);ote=n(qwe,"STRONG",{});var WVr=s(ote);Poo=r(WVr,"marian"),WVr.forEach(t),Ioo=r(qwe," \u2014 "),qR=n(qwe,"A",{href:!0});var HVr=s(qR);qoo=r(HVr,"MarianTokenizer"),HVr.forEach(t),Noo=r(qwe," (Marian model)"),qwe.forEach(t),joo=i(S),is=n(S,"LI",{});var D9=s(is);rte=n(D9,"STRONG",{});var UVr=s(rte);Doo=r(UVr,"mbart"),UVr.forEach(t),Goo=r(D9," \u2014 "),NR=n(D9,"A",{href:!0});var JVr=s(NR);Ooo=r(JVr,"MBartTokenizer"),JVr.forEach(t),Voo=r(D9," or "),jR=n(D9,"A",{href:!0});var YVr=s(jR);Xoo=r(YVr,"MBartTokenizerFast"),YVr.forEach(t),zoo=r(D9," (mBART model)"),D9.forEach(t),Qoo=i(S),ds=n(S,"LI",{});var G9=s(ds);tte=n(G9,"STRONG",{});var KVr=s(tte);Woo=r(KVr,"mbart50"),KVr.forEach(t),Hoo=r(G9," \u2014 "),DR=n(G9,"A",{href:!0});var ZVr=s(DR);Uoo=r(ZVr,"MBart50Tokenizer"),ZVr.forEach(t),Joo=r(G9," or "),GR=n(G9,"A",{href:!0});var eXr=s(GR);Yoo=r(eXr,"MBart50TokenizerFast"),eXr.forEach(t),Koo=r(G9," (mBART-50 model)"),G9.forEach(t),Zoo=i(S),cs=n(S,"LI",{});var O9=s(cs);ate=n(O9,"STRONG",{});var oXr=s(ate);ero=r(oXr,"megatron-bert"),oXr.forEach(t),oro=r(O9," \u2014 "),OR=n(O9,"A",{href:!0});var rXr=s(OR);rro=r(rXr,"BertTokenizer"),rXr.forEach(t),tro=r(O9," or "),VR=n(O9,"A",{href:!0});var tXr=s(VR);aro=r(tXr,"BertTokenizerFast"),tXr.forEach(t),nro=r(O9," (MegatronBert model)"),O9.forEach(t),sro=i(S),Sg=n(S,"LI",{});var Nwe=s(Sg);nte=n(Nwe,"STRONG",{});var aXr=s(nte);lro=r(aXr,"mluke"),aXr.forEach(t),iro=r(Nwe," \u2014 "),XR=n(Nwe,"A",{href:!0});var nXr=s(XR);dro=r(nXr,"MLukeTokenizer"),nXr.forEach(t),cro=r(Nwe," (mLUKE model)"),Nwe.forEach(t),mro=i(S),ms=n(S,"LI",{});var V9=s(ms);ste=n(V9,"STRONG",{});var sXr=s(ste);fro=r(sXr,"mobilebert"),sXr.forEach(t),gro=r(V9," \u2014 "),zR=n(V9,"A",{href:!0});var lXr=s(zR);hro=r(lXr,"MobileBertTokenizer"),lXr.forEach(t),uro=r(V9," or "),QR=n(V9,"A",{href:!0});var iXr=s(QR);pro=r(iXr,"MobileBertTokenizerFast"),iXr.forEach(t),_ro=r(V9," (MobileBERT model)"),V9.forEach(t),bro=i(S),fs=n(S,"LI",{});var X9=s(fs);lte=n(X9,"STRONG",{});var dXr=s(lte);Fro=r(dXr,"mpnet"),dXr.forEach(t),vro=r(X9," \u2014 "),WR=n(X9,"A",{href:!0});var cXr=s(WR);Tro=r(cXr,"MPNetTokenizer"),cXr.forEach(t),Mro=r(X9," or "),HR=n(X9,"A",{href:!0});var mXr=s(HR);Ero=r(mXr,"MPNetTokenizerFast"),mXr.forEach(t),Cro=r(X9," (MPNet model)"),X9.forEach(t),wro=i(S),gs=n(S,"LI",{});var z9=s(gs);ite=n(z9,"STRONG",{});var fXr=s(ite);Aro=r(fXr,"mt5"),fXr.forEach(t),yro=r(z9," \u2014 "),UR=n(z9,"A",{href:!0});var gXr=s(UR);Lro=r(gXr,"MT5Tokenizer"),gXr.forEach(t),xro=r(z9," or "),JR=n(z9,"A",{href:!0});var hXr=s(JR);$ro=r(hXr,"MT5TokenizerFast"),hXr.forEach(t),kro=r(z9," (mT5 model)"),z9.forEach(t),Sro=i(S),hs=n(S,"LI",{});var Q9=s(hs);dte=n(Q9,"STRONG",{});var uXr=s(dte);Rro=r(uXr,"nystromformer"),uXr.forEach(t),Bro=r(Q9," \u2014 "),YR=n(Q9,"A",{href:!0});var pXr=s(YR);Pro=r(pXr,"AlbertTokenizer"),pXr.forEach(t),Iro=r(Q9," or "),KR=n(Q9,"A",{href:!0});var _Xr=s(KR);qro=r(_Xr,"AlbertTokenizerFast"),_Xr.forEach(t),Nro=r(Q9," (Nystromformer model)"),Q9.forEach(t),jro=i(S),us=n(S,"LI",{});var W9=s(us);cte=n(W9,"STRONG",{});var bXr=s(cte);Dro=r(bXr,"openai-gpt"),bXr.forEach(t),Gro=r(W9," \u2014 "),ZR=n(W9,"A",{href:!0});var FXr=s(ZR);Oro=r(FXr,"OpenAIGPTTokenizer"),FXr.forEach(t),Vro=r(W9," or "),eB=n(W9,"A",{href:!0});var vXr=s(eB);Xro=r(vXr,"OpenAIGPTTokenizerFast"),vXr.forEach(t),zro=r(W9," (OpenAI GPT model)"),W9.forEach(t),Qro=i(S),Rg=n(S,"LI",{});var jwe=s(Rg);mte=n(jwe,"STRONG",{});var TXr=s(mte);Wro=r(TXr,"opt"),TXr.forEach(t),Hro=r(jwe," \u2014 "),oB=n(jwe,"A",{href:!0});var MXr=s(oB);Uro=r(MXr,"GPT2Tokenizer"),MXr.forEach(t),Jro=r(jwe," (OPT model)"),jwe.forEach(t),Yro=i(S),ps=n(S,"LI",{});var H9=s(ps);fte=n(H9,"STRONG",{});var EXr=s(fte);Kro=r(EXr,"pegasus"),EXr.forEach(t),Zro=r(H9," \u2014 "),rB=n(H9,"A",{href:!0});var CXr=s(rB);eto=r(CXr,"PegasusTokenizer"),CXr.forEach(t),oto=r(H9," or "),tB=n(H9,"A",{href:!0});var wXr=s(tB);rto=r(wXr,"PegasusTokenizerFast"),wXr.forEach(t),tto=r(H9," (Pegasus model)"),H9.forEach(t),ato=i(S),Bg=n(S,"LI",{});var Dwe=s(Bg);gte=n(Dwe,"STRONG",{});var AXr=s(gte);nto=r(AXr,"perceiver"),AXr.forEach(t),sto=r(Dwe," \u2014 "),aB=n(Dwe,"A",{href:!0});var yXr=s(aB);lto=r(yXr,"PerceiverTokenizer"),yXr.forEach(t),ito=r(Dwe," (Perceiver model)"),Dwe.forEach(t),dto=i(S),Pg=n(S,"LI",{});var Gwe=s(Pg);hte=n(Gwe,"STRONG",{});var LXr=s(hte);cto=r(LXr,"phobert"),LXr.forEach(t),mto=r(Gwe," \u2014 "),nB=n(Gwe,"A",{href:!0});var xXr=s(nB);fto=r(xXr,"PhobertTokenizer"),xXr.forEach(t),gto=r(Gwe," (PhoBERT model)"),Gwe.forEach(t),hto=i(S),Ig=n(S,"LI",{});var Owe=s(Ig);ute=n(Owe,"STRONG",{});var $Xr=s(ute);uto=r($Xr,"plbart"),$Xr.forEach(t),pto=r(Owe," \u2014 "),sB=n(Owe,"A",{href:!0});var kXr=s(sB);_to=r(kXr,"PLBartTokenizer"),kXr.forEach(t),bto=r(Owe," (PLBart model)"),Owe.forEach(t),Fto=i(S),qg=n(S,"LI",{});var Vwe=s(qg);pte=n(Vwe,"STRONG",{});var SXr=s(pte);vto=r(SXr,"prophetnet"),SXr.forEach(t),Tto=r(Vwe," \u2014 "),lB=n(Vwe,"A",{href:!0});var RXr=s(lB);Mto=r(RXr,"ProphetNetTokenizer"),RXr.forEach(t),Eto=r(Vwe," (ProphetNet model)"),Vwe.forEach(t),Cto=i(S),_s=n(S,"LI",{});var U9=s(_s);_te=n(U9,"STRONG",{});var BXr=s(_te);wto=r(BXr,"qdqbert"),BXr.forEach(t),Ato=r(U9," \u2014 "),iB=n(U9,"A",{href:!0});var PXr=s(iB);yto=r(PXr,"BertTokenizer"),PXr.forEach(t),Lto=r(U9," or "),dB=n(U9,"A",{href:!0});var IXr=s(dB);xto=r(IXr,"BertTokenizerFast"),IXr.forEach(t),$to=r(U9," (QDQBert model)"),U9.forEach(t),kto=i(S),Ng=n(S,"LI",{});var Xwe=s(Ng);bte=n(Xwe,"STRONG",{});var qXr=s(bte);Sto=r(qXr,"rag"),qXr.forEach(t),Rto=r(Xwe," \u2014 "),cB=n(Xwe,"A",{href:!0});var NXr=s(cB);Bto=r(NXr,"RagTokenizer"),NXr.forEach(t),Pto=r(Xwe," (RAG model)"),Xwe.forEach(t),Ito=i(S),bs=n(S,"LI",{});var J9=s(bs);Fte=n(J9,"STRONG",{});var jXr=s(Fte);qto=r(jXr,"realm"),jXr.forEach(t),Nto=r(J9," \u2014 "),mB=n(J9,"A",{href:!0});var DXr=s(mB);jto=r(DXr,"RealmTokenizer"),DXr.forEach(t),Dto=r(J9," or "),fB=n(J9,"A",{href:!0});var GXr=s(fB);Gto=r(GXr,"RealmTokenizerFast"),GXr.forEach(t),Oto=r(J9," (Realm model)"),J9.forEach(t),Vto=i(S),Fs=n(S,"LI",{});var Y9=s(Fs);vte=n(Y9,"STRONG",{});var OXr=s(vte);Xto=r(OXr,"reformer"),OXr.forEach(t),zto=r(Y9," \u2014 "),gB=n(Y9,"A",{href:!0});var VXr=s(gB);Qto=r(VXr,"ReformerTokenizer"),VXr.forEach(t),Wto=r(Y9," or "),hB=n(Y9,"A",{href:!0});var XXr=s(hB);Hto=r(XXr,"ReformerTokenizerFast"),XXr.forEach(t),Uto=r(Y9," (Reformer model)"),Y9.forEach(t),Jto=i(S),vs=n(S,"LI",{});var K9=s(vs);Tte=n(K9,"STRONG",{});var zXr=s(Tte);Yto=r(zXr,"rembert"),zXr.forEach(t),Kto=r(K9," \u2014 "),uB=n(K9,"A",{href:!0});var QXr=s(uB);Zto=r(QXr,"RemBertTokenizer"),QXr.forEach(t),eao=r(K9," or "),pB=n(K9,"A",{href:!0});var WXr=s(pB);oao=r(WXr,"RemBertTokenizerFast"),WXr.forEach(t),rao=r(K9," (RemBERT model)"),K9.forEach(t),tao=i(S),Ts=n(S,"LI",{});var Z9=s(Ts);Mte=n(Z9,"STRONG",{});var HXr=s(Mte);aao=r(HXr,"retribert"),HXr.forEach(t),nao=r(Z9," \u2014 "),_B=n(Z9,"A",{href:!0});var UXr=s(_B);sao=r(UXr,"RetriBertTokenizer"),UXr.forEach(t),lao=r(Z9," or "),bB=n(Z9,"A",{href:!0});var JXr=s(bB);iao=r(JXr,"RetriBertTokenizerFast"),JXr.forEach(t),dao=r(Z9," (RetriBERT model)"),Z9.forEach(t),cao=i(S),Ms=n(S,"LI",{});var e$=s(Ms);Ete=n(e$,"STRONG",{});var YXr=s(Ete);mao=r(YXr,"roberta"),YXr.forEach(t),fao=r(e$," \u2014 "),FB=n(e$,"A",{href:!0});var KXr=s(FB);gao=r(KXr,"RobertaTokenizer"),KXr.forEach(t),hao=r(e$," or "),vB=n(e$,"A",{href:!0});var ZXr=s(vB);uao=r(ZXr,"RobertaTokenizerFast"),ZXr.forEach(t),pao=r(e$," (RoBERTa model)"),e$.forEach(t),_ao=i(S),Es=n(S,"LI",{});var o$=s(Es);Cte=n(o$,"STRONG",{});var ezr=s(Cte);bao=r(ezr,"roformer"),ezr.forEach(t),Fao=r(o$," \u2014 "),TB=n(o$,"A",{href:!0});var ozr=s(TB);vao=r(ozr,"RoFormerTokenizer"),ozr.forEach(t),Tao=r(o$," or "),MB=n(o$,"A",{href:!0});var rzr=s(MB);Mao=r(rzr,"RoFormerTokenizerFast"),rzr.forEach(t),Eao=r(o$," (RoFormer model)"),o$.forEach(t),Cao=i(S),jg=n(S,"LI",{});var zwe=s(jg);wte=n(zwe,"STRONG",{});var tzr=s(wte);wao=r(tzr,"speech_to_text"),tzr.forEach(t),Aao=r(zwe," \u2014 "),EB=n(zwe,"A",{href:!0});var azr=s(EB);yao=r(azr,"Speech2TextTokenizer"),azr.forEach(t),Lao=r(zwe," (Speech2Text model)"),zwe.forEach(t),xao=i(S),Dg=n(S,"LI",{});var Qwe=s(Dg);Ate=n(Qwe,"STRONG",{});var nzr=s(Ate);$ao=r(nzr,"speech_to_text_2"),nzr.forEach(t),kao=r(Qwe," \u2014 "),CB=n(Qwe,"A",{href:!0});var szr=s(CB);Sao=r(szr,"Speech2Text2Tokenizer"),szr.forEach(t),Rao=r(Qwe," (Speech2Text2 model)"),Qwe.forEach(t),Bao=i(S),Cs=n(S,"LI",{});var r$=s(Cs);yte=n(r$,"STRONG",{});var lzr=s(yte);Pao=r(lzr,"splinter"),lzr.forEach(t),Iao=r(r$," \u2014 "),wB=n(r$,"A",{href:!0});var izr=s(wB);qao=r(izr,"SplinterTokenizer"),izr.forEach(t),Nao=r(r$," or "),AB=n(r$,"A",{href:!0});var dzr=s(AB);jao=r(dzr,"SplinterTokenizerFast"),dzr.forEach(t),Dao=r(r$," (Splinter model)"),r$.forEach(t),Gao=i(S),ws=n(S,"LI",{});var t$=s(ws);Lte=n(t$,"STRONG",{});var czr=s(Lte);Oao=r(czr,"squeezebert"),czr.forEach(t),Vao=r(t$," \u2014 "),yB=n(t$,"A",{href:!0});var mzr=s(yB);Xao=r(mzr,"SqueezeBertTokenizer"),mzr.forEach(t),zao=r(t$," or "),LB=n(t$,"A",{href:!0});var fzr=s(LB);Qao=r(fzr,"SqueezeBertTokenizerFast"),fzr.forEach(t),Wao=r(t$," (SqueezeBERT model)"),t$.forEach(t),Hao=i(S),As=n(S,"LI",{});var a$=s(As);xte=n(a$,"STRONG",{});var gzr=s(xte);Uao=r(gzr,"t5"),gzr.forEach(t),Jao=r(a$," \u2014 "),xB=n(a$,"A",{href:!0});var hzr=s(xB);Yao=r(hzr,"T5Tokenizer"),hzr.forEach(t),Kao=r(a$," or "),$B=n(a$,"A",{href:!0});var uzr=s($B);Zao=r(uzr,"T5TokenizerFast"),uzr.forEach(t),eno=r(a$," (T5 model)"),a$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var Wwe=s(Gg);$te=n(Wwe,"STRONG",{});var pzr=s($te);rno=r(pzr,"tapas"),pzr.forEach(t),tno=r(Wwe," \u2014 "),kB=n(Wwe,"A",{href:!0});var _zr=s(kB);ano=r(_zr,"TapasTokenizer"),_zr.forEach(t),nno=r(Wwe," (TAPAS model)"),Wwe.forEach(t),sno=i(S),Og=n(S,"LI",{});var Hwe=s(Og);kte=n(Hwe,"STRONG",{});var bzr=s(kte);lno=r(bzr,"tapex"),bzr.forEach(t),ino=r(Hwe," \u2014 "),SB=n(Hwe,"A",{href:!0});var Fzr=s(SB);dno=r(Fzr,"TapexTokenizer"),Fzr.forEach(t),cno=r(Hwe," (TAPEX model)"),Hwe.forEach(t),mno=i(S),Vg=n(S,"LI",{});var Uwe=s(Vg);Ste=n(Uwe,"STRONG",{});var vzr=s(Ste);fno=r(vzr,"transfo-xl"),vzr.forEach(t),gno=r(Uwe," \u2014 "),RB=n(Uwe,"A",{href:!0});var Tzr=s(RB);hno=r(Tzr,"TransfoXLTokenizer"),Tzr.forEach(t),uno=r(Uwe," (Transformer-XL model)"),Uwe.forEach(t),pno=i(S),ys=n(S,"LI",{});var n$=s(ys);Rte=n(n$,"STRONG",{});var Mzr=s(Rte);_no=r(Mzr,"visual_bert"),Mzr.forEach(t),bno=r(n$," \u2014 "),BB=n(n$,"A",{href:!0});var Ezr=s(BB);Fno=r(Ezr,"BertTokenizer"),Ezr.forEach(t),vno=r(n$," or "),PB=n(n$,"A",{href:!0});var Czr=s(PB);Tno=r(Czr,"BertTokenizerFast"),Czr.forEach(t),Mno=r(n$," (VisualBert model)"),n$.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var Jwe=s(Xg);Bte=n(Jwe,"STRONG",{});var wzr=s(Bte);Cno=r(wzr,"wav2vec2"),wzr.forEach(t),wno=r(Jwe," \u2014 "),IB=n(Jwe,"A",{href:!0});var Azr=s(IB);Ano=r(Azr,"Wav2Vec2CTCTokenizer"),Azr.forEach(t),yno=r(Jwe," (Wav2Vec2 model)"),Jwe.forEach(t),Lno=i(S),zg=n(S,"LI",{});var Ywe=s(zg);Pte=n(Ywe,"STRONG",{});var yzr=s(Pte);xno=r(yzr,"wav2vec2_phoneme"),yzr.forEach(t),$no=r(Ywe," \u2014 "),qB=n(Ywe,"A",{href:!0});var Lzr=s(qB);kno=r(Lzr,"Wav2Vec2PhonemeCTCTokenizer"),Lzr.forEach(t),Sno=r(Ywe," (Wav2Vec2Phoneme model)"),Ywe.forEach(t),Rno=i(S),Ls=n(S,"LI",{});var s$=s(Ls);Ite=n(s$,"STRONG",{});var xzr=s(Ite);Bno=r(xzr,"xglm"),xzr.forEach(t),Pno=r(s$," \u2014 "),NB=n(s$,"A",{href:!0});var $zr=s(NB);Ino=r($zr,"XGLMTokenizer"),$zr.forEach(t),qno=r(s$," or "),jB=n(s$,"A",{href:!0});var kzr=s(jB);Nno=r(kzr,"XGLMTokenizerFast"),kzr.forEach(t),jno=r(s$," (XGLM model)"),s$.forEach(t),Dno=i(S),Qg=n(S,"LI",{});var Kwe=s(Qg);qte=n(Kwe,"STRONG",{});var Szr=s(qte);Gno=r(Szr,"xlm"),Szr.forEach(t),Ono=r(Kwe," \u2014 "),DB=n(Kwe,"A",{href:!0});var Rzr=s(DB);Vno=r(Rzr,"XLMTokenizer"),Rzr.forEach(t),Xno=r(Kwe," (XLM model)"),Kwe.forEach(t),zno=i(S),Wg=n(S,"LI",{});var Zwe=s(Wg);Nte=n(Zwe,"STRONG",{});var Bzr=s(Nte);Qno=r(Bzr,"xlm-prophetnet"),Bzr.forEach(t),Wno=r(Zwe," \u2014 "),GB=n(Zwe,"A",{href:!0});var Pzr=s(GB);Hno=r(Pzr,"XLMProphetNetTokenizer"),Pzr.forEach(t),Uno=r(Zwe," (XLMProphetNet model)"),Zwe.forEach(t),Jno=i(S),xs=n(S,"LI",{});var l$=s(xs);jte=n(l$,"STRONG",{});var Izr=s(jte);Yno=r(Izr,"xlm-roberta"),Izr.forEach(t),Kno=r(l$," \u2014 "),OB=n(l$,"A",{href:!0});var qzr=s(OB);Zno=r(qzr,"XLMRobertaTokenizer"),qzr.forEach(t),eso=r(l$," or "),VB=n(l$,"A",{href:!0});var Nzr=s(VB);oso=r(Nzr,"XLMRobertaTokenizerFast"),Nzr.forEach(t),rso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),tso=i(S),$s=n(S,"LI",{});var i$=s($s);Dte=n(i$,"STRONG",{});var jzr=s(Dte);aso=r(jzr,"xlm-roberta-xl"),jzr.forEach(t),nso=r(i$," \u2014 "),XB=n(i$,"A",{href:!0});var Dzr=s(XB);sso=r(Dzr,"RobertaTokenizer"),Dzr.forEach(t),lso=r(i$," or "),zB=n(i$,"A",{href:!0});var Gzr=s(zB);iso=r(Gzr,"RobertaTokenizerFast"),Gzr.forEach(t),dso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),cso=i(S),ks=n(S,"LI",{});var d$=s(ks);Gte=n(d$,"STRONG",{});var Ozr=s(Gte);mso=r(Ozr,"xlnet"),Ozr.forEach(t),fso=r(d$," \u2014 "),QB=n(d$,"A",{href:!0});var Vzr=s(QB);gso=r(Vzr,"XLNetTokenizer"),Vzr.forEach(t),hso=r(d$," or "),WB=n(d$,"A",{href:!0});var Xzr=s(WB);uso=r(Xzr,"XLNetTokenizerFast"),Xzr.forEach(t),pso=r(d$," (XLNet model)"),d$.forEach(t),_so=i(S),Ss=n(S,"LI",{});var c$=s(Ss);Ote=n(c$,"STRONG",{});var zzr=s(Ote);bso=r(zzr,"yoso"),zzr.forEach(t),Fso=r(c$," \u2014 "),HB=n(c$,"A",{href:!0});var Qzr=s(HB);vso=r(Qzr,"AlbertTokenizer"),Qzr.forEach(t),Tso=r(c$," or "),UB=n(c$,"A",{href:!0});var Wzr=s(UB);Mso=r(Wzr,"AlbertTokenizerFast"),Wzr.forEach(t),Eso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),Cso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),wso=i(Is),Ug=n(Is,"DIV",{class:!0});var Wqe=s(Ug);T(cy.$$.fragment,Wqe),Aso=i(Wqe),Vte=n(Wqe,"P",{});var Hzr=s(Vte);yso=r(Hzr,"Register a new tokenizer in this mapping."),Hzr.forEach(t),Wqe.forEach(t),Is.forEach(t),HPe=i(m),Fi=n(m,"H2",{class:!0});var Hqe=s(Fi);Jg=n(Hqe,"A",{id:!0,class:!0,href:!0});var Uzr=s(Jg);Xte=n(Uzr,"SPAN",{});var Jzr=s(Xte);T(my.$$.fragment,Jzr),Jzr.forEach(t),Uzr.forEach(t),Lso=i(Hqe),zte=n(Hqe,"SPAN",{});var Yzr=s(zte);xso=r(Yzr,"AutoFeatureExtractor"),Yzr.forEach(t),Hqe.forEach(t),UPe=i(m),Ao=n(m,"DIV",{class:!0});var Ns=s(Ao);T(fy.$$.fragment,Ns),$so=i(Ns),gy=n(Ns,"P",{});var Uqe=s(gy);kso=r(Uqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=n(Uqe,"A",{href:!0});var Kzr=s(JB);Sso=r(Kzr,"AutoFeatureExtractor.from_pretrained()"),Kzr.forEach(t),Rso=r(Uqe," class method."),Uqe.forEach(t),Bso=i(Ns),hy=n(Ns,"P",{});var Jqe=s(hy);Pso=r(Jqe,"This class cannot be instantiated directly using "),Qte=n(Jqe,"CODE",{});var Zzr=s(Qte);Iso=r(Zzr,"__init__()"),Zzr.forEach(t),qso=r(Jqe," (throws an error)."),Jqe.forEach(t),Nso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(uy.$$.fragment,Yt),jso=i(Yt),Wte=n(Yt,"P",{});var eQr=s(Wte);Dso=r(eQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eQr.forEach(t),Gso=i(Yt),wa=n(Yt,"P",{});var KA=s(wa);Oso=r(KA,"The feature extractor class to instantiate is selected based on the "),Hte=n(KA,"CODE",{});var oQr=s(Hte);Vso=r(oQr,"model_type"),oQr.forEach(t),Xso=r(KA,` property of the config object
(either passed as an argument or loaded from `),Ute=n(KA,"CODE",{});var rQr=s(Ute);zso=r(rQr,"pretrained_model_name_or_path"),rQr.forEach(t),Qso=r(KA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=n(KA,"CODE",{});var tQr=s(Jte);Wso=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),Hso=r(KA,":"),KA.forEach(t),Uso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var eAe=s(Yg);Yte=n(eAe,"STRONG",{});var aQr=s(Yte);Jso=r(aQr,"beit"),aQr.forEach(t),Yso=r(eAe," \u2014 "),YB=n(eAe,"A",{href:!0});var nQr=s(YB);Kso=r(nQr,"BeitFeatureExtractor"),nQr.forEach(t),Zso=r(eAe," (BEiT model)"),eAe.forEach(t),elo=i(ae),Kg=n(ae,"LI",{});var oAe=s(Kg);Kte=n(oAe,"STRONG",{});var sQr=s(Kte);olo=r(sQr,"clip"),sQr.forEach(t),rlo=r(oAe," \u2014 "),KB=n(oAe,"A",{href:!0});var lQr=s(KB);tlo=r(lQr,"CLIPFeatureExtractor"),lQr.forEach(t),alo=r(oAe," (CLIP model)"),oAe.forEach(t),nlo=i(ae),Zg=n(ae,"LI",{});var rAe=s(Zg);Zte=n(rAe,"STRONG",{});var iQr=s(Zte);slo=r(iQr,"convnext"),iQr.forEach(t),llo=r(rAe," \u2014 "),ZB=n(rAe,"A",{href:!0});var dQr=s(ZB);ilo=r(dQr,"ConvNextFeatureExtractor"),dQr.forEach(t),dlo=r(rAe," (ConvNext model)"),rAe.forEach(t),clo=i(ae),eh=n(ae,"LI",{});var tAe=s(eh);eae=n(tAe,"STRONG",{});var cQr=s(eae);mlo=r(cQr,"data2vec-audio"),cQr.forEach(t),flo=r(tAe," \u2014 "),eP=n(tAe,"A",{href:!0});var mQr=s(eP);glo=r(mQr,"Wav2Vec2FeatureExtractor"),mQr.forEach(t),hlo=r(tAe," (Data2VecAudio model)"),tAe.forEach(t),ulo=i(ae),oh=n(ae,"LI",{});var aAe=s(oh);oae=n(aAe,"STRONG",{});var fQr=s(oae);plo=r(fQr,"data2vec-vision"),fQr.forEach(t),_lo=r(aAe," \u2014 "),oP=n(aAe,"A",{href:!0});var gQr=s(oP);blo=r(gQr,"BeitFeatureExtractor"),gQr.forEach(t),Flo=r(aAe," (Data2VecVision model)"),aAe.forEach(t),vlo=i(ae),rh=n(ae,"LI",{});var nAe=s(rh);rae=n(nAe,"STRONG",{});var hQr=s(rae);Tlo=r(hQr,"deit"),hQr.forEach(t),Mlo=r(nAe," \u2014 "),rP=n(nAe,"A",{href:!0});var uQr=s(rP);Elo=r(uQr,"DeiTFeatureExtractor"),uQr.forEach(t),Clo=r(nAe," (DeiT model)"),nAe.forEach(t),wlo=i(ae),th=n(ae,"LI",{});var sAe=s(th);tae=n(sAe,"STRONG",{});var pQr=s(tae);Alo=r(pQr,"detr"),pQr.forEach(t),ylo=r(sAe," \u2014 "),tP=n(sAe,"A",{href:!0});var _Qr=s(tP);Llo=r(_Qr,"DetrFeatureExtractor"),_Qr.forEach(t),xlo=r(sAe," (DETR model)"),sAe.forEach(t),$lo=i(ae),ah=n(ae,"LI",{});var lAe=s(ah);aae=n(lAe,"STRONG",{});var bQr=s(aae);klo=r(bQr,"dpt"),bQr.forEach(t),Slo=r(lAe," \u2014 "),aP=n(lAe,"A",{href:!0});var FQr=s(aP);Rlo=r(FQr,"DPTFeatureExtractor"),FQr.forEach(t),Blo=r(lAe," (DPT model)"),lAe.forEach(t),Plo=i(ae),nh=n(ae,"LI",{});var iAe=s(nh);nae=n(iAe,"STRONG",{});var vQr=s(nae);Ilo=r(vQr,"flava"),vQr.forEach(t),qlo=r(iAe," \u2014 "),nP=n(iAe,"A",{href:!0});var TQr=s(nP);Nlo=r(TQr,"FlavaFeatureExtractor"),TQr.forEach(t),jlo=r(iAe," (Flava model)"),iAe.forEach(t),Dlo=i(ae),sh=n(ae,"LI",{});var dAe=s(sh);sae=n(dAe,"STRONG",{});var MQr=s(sae);Glo=r(MQr,"glpn"),MQr.forEach(t),Olo=r(dAe," \u2014 "),sP=n(dAe,"A",{href:!0});var EQr=s(sP);Vlo=r(EQr,"GLPNFeatureExtractor"),EQr.forEach(t),Xlo=r(dAe," (GLPN model)"),dAe.forEach(t),zlo=i(ae),lh=n(ae,"LI",{});var cAe=s(lh);lae=n(cAe,"STRONG",{});var CQr=s(lae);Qlo=r(CQr,"hubert"),CQr.forEach(t),Wlo=r(cAe," \u2014 "),lP=n(cAe,"A",{href:!0});var wQr=s(lP);Hlo=r(wQr,"Wav2Vec2FeatureExtractor"),wQr.forEach(t),Ulo=r(cAe," (Hubert model)"),cAe.forEach(t),Jlo=i(ae),ih=n(ae,"LI",{});var mAe=s(ih);iae=n(mAe,"STRONG",{});var AQr=s(iae);Ylo=r(AQr,"layoutlmv2"),AQr.forEach(t),Klo=r(mAe," \u2014 "),iP=n(mAe,"A",{href:!0});var yQr=s(iP);Zlo=r(yQr,"LayoutLMv2FeatureExtractor"),yQr.forEach(t),eio=r(mAe," (LayoutLMv2 model)"),mAe.forEach(t),oio=i(ae),dh=n(ae,"LI",{});var fAe=s(dh);dae=n(fAe,"STRONG",{});var LQr=s(dae);rio=r(LQr,"maskformer"),LQr.forEach(t),tio=r(fAe," \u2014 "),dP=n(fAe,"A",{href:!0});var xQr=s(dP);aio=r(xQr,"MaskFormerFeatureExtractor"),xQr.forEach(t),nio=r(fAe," (MaskFormer model)"),fAe.forEach(t),sio=i(ae),ch=n(ae,"LI",{});var gAe=s(ch);cae=n(gAe,"STRONG",{});var $Qr=s(cae);lio=r($Qr,"perceiver"),$Qr.forEach(t),iio=r(gAe," \u2014 "),cP=n(gAe,"A",{href:!0});var kQr=s(cP);dio=r(kQr,"PerceiverFeatureExtractor"),kQr.forEach(t),cio=r(gAe," (Perceiver model)"),gAe.forEach(t),mio=i(ae),mh=n(ae,"LI",{});var hAe=s(mh);mae=n(hAe,"STRONG",{});var SQr=s(mae);fio=r(SQr,"poolformer"),SQr.forEach(t),gio=r(hAe," \u2014 "),mP=n(hAe,"A",{href:!0});var RQr=s(mP);hio=r(RQr,"PoolFormerFeatureExtractor"),RQr.forEach(t),uio=r(hAe," (PoolFormer model)"),hAe.forEach(t),pio=i(ae),fh=n(ae,"LI",{});var uAe=s(fh);fae=n(uAe,"STRONG",{});var BQr=s(fae);_io=r(BQr,"regnet"),BQr.forEach(t),bio=r(uAe," \u2014 "),fP=n(uAe,"A",{href:!0});var PQr=s(fP);Fio=r(PQr,"ConvNextFeatureExtractor"),PQr.forEach(t),vio=r(uAe," (RegNet model)"),uAe.forEach(t),Tio=i(ae),gh=n(ae,"LI",{});var pAe=s(gh);gae=n(pAe,"STRONG",{});var IQr=s(gae);Mio=r(IQr,"resnet"),IQr.forEach(t),Eio=r(pAe," \u2014 "),gP=n(pAe,"A",{href:!0});var qQr=s(gP);Cio=r(qQr,"ConvNextFeatureExtractor"),qQr.forEach(t),wio=r(pAe," (ResNet model)"),pAe.forEach(t),Aio=i(ae),hh=n(ae,"LI",{});var _Ae=s(hh);hae=n(_Ae,"STRONG",{});var NQr=s(hae);yio=r(NQr,"segformer"),NQr.forEach(t),Lio=r(_Ae," \u2014 "),hP=n(_Ae,"A",{href:!0});var jQr=s(hP);xio=r(jQr,"SegformerFeatureExtractor"),jQr.forEach(t),$io=r(_Ae," (SegFormer model)"),_Ae.forEach(t),kio=i(ae),uh=n(ae,"LI",{});var bAe=s(uh);uae=n(bAe,"STRONG",{});var DQr=s(uae);Sio=r(DQr,"speech_to_text"),DQr.forEach(t),Rio=r(bAe," \u2014 "),uP=n(bAe,"A",{href:!0});var GQr=s(uP);Bio=r(GQr,"Speech2TextFeatureExtractor"),GQr.forEach(t),Pio=r(bAe," (Speech2Text model)"),bAe.forEach(t),Iio=i(ae),ph=n(ae,"LI",{});var FAe=s(ph);pae=n(FAe,"STRONG",{});var OQr=s(pae);qio=r(OQr,"swin"),OQr.forEach(t),Nio=r(FAe," \u2014 "),pP=n(FAe,"A",{href:!0});var VQr=s(pP);jio=r(VQr,"ViTFeatureExtractor"),VQr.forEach(t),Dio=r(FAe," (Swin model)"),FAe.forEach(t),Gio=i(ae),_h=n(ae,"LI",{});var vAe=s(_h);_ae=n(vAe,"STRONG",{});var XQr=s(_ae);Oio=r(XQr,"van"),XQr.forEach(t),Vio=r(vAe," \u2014 "),_P=n(vAe,"A",{href:!0});var zQr=s(_P);Xio=r(zQr,"ConvNextFeatureExtractor"),zQr.forEach(t),zio=r(vAe," (VAN model)"),vAe.forEach(t),Qio=i(ae),bh=n(ae,"LI",{});var TAe=s(bh);bae=n(TAe,"STRONG",{});var QQr=s(bae);Wio=r(QQr,"vit"),QQr.forEach(t),Hio=r(TAe," \u2014 "),bP=n(TAe,"A",{href:!0});var WQr=s(bP);Uio=r(WQr,"ViTFeatureExtractor"),WQr.forEach(t),Jio=r(TAe," (ViT model)"),TAe.forEach(t),Yio=i(ae),Fh=n(ae,"LI",{});var MAe=s(Fh);Fae=n(MAe,"STRONG",{});var HQr=s(Fae);Kio=r(HQr,"vit_mae"),HQr.forEach(t),Zio=r(MAe," \u2014 "),FP=n(MAe,"A",{href:!0});var UQr=s(FP);edo=r(UQr,"ViTFeatureExtractor"),UQr.forEach(t),odo=r(MAe," (ViTMAE model)"),MAe.forEach(t),rdo=i(ae),vh=n(ae,"LI",{});var EAe=s(vh);vae=n(EAe,"STRONG",{});var JQr=s(vae);tdo=r(JQr,"wav2vec2"),JQr.forEach(t),ado=r(EAe," \u2014 "),vP=n(EAe,"A",{href:!0});var YQr=s(vP);ndo=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),sdo=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),ldo=i(ae),Th=n(ae,"LI",{});var CAe=s(Th);Tae=n(CAe,"STRONG",{});var KQr=s(Tae);ido=r(KQr,"yolos"),KQr.forEach(t),ddo=r(CAe," \u2014 "),TP=n(CAe,"A",{href:!0});var ZQr=s(TP);cdo=r(ZQr,"YolosFeatureExtractor"),ZQr.forEach(t),mdo=r(CAe," (YOLOS model)"),CAe.forEach(t),ae.forEach(t),fdo=i(Yt),T(Mh.$$.fragment,Yt),gdo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),hdo=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Yqe=s(Ch);T(py.$$.fragment,Yqe),udo=i(Yqe),Mae=n(Yqe,"P",{});var eWr=s(Mae);pdo=r(eWr,"Register a new feature extractor for this class."),eWr.forEach(t),Yqe.forEach(t),Ns.forEach(t),JPe=i(m),vi=n(m,"H2",{class:!0});var Kqe=s(vi);wh=n(Kqe,"A",{id:!0,class:!0,href:!0});var oWr=s(wh);Eae=n(oWr,"SPAN",{});var rWr=s(Eae);T(_y.$$.fragment,rWr),rWr.forEach(t),oWr.forEach(t),_do=i(Kqe),Cae=n(Kqe,"SPAN",{});var tWr=s(Cae);bdo=r(tWr,"AutoProcessor"),tWr.forEach(t),Kqe.forEach(t),YPe=i(m),yo=n(m,"DIV",{class:!0});var js=s(yo);T(by.$$.fragment,js),Fdo=i(js),Fy=n(js,"P",{});var Zqe=s(Fy);vdo=r(Zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=n(Zqe,"A",{href:!0});var aWr=s(MP);Tdo=r(aWr,"AutoProcessor.from_pretrained()"),aWr.forEach(t),Mdo=r(Zqe," class method."),Zqe.forEach(t),Edo=i(js),vy=n(js,"P",{});var eNe=s(vy);Cdo=r(eNe,"This class cannot be instantiated directly using "),wae=n(eNe,"CODE",{});var nWr=s(wae);wdo=r(nWr,"__init__()"),nWr.forEach(t),Ado=r(eNe," (throws an error)."),eNe.forEach(t),ydo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(Ty.$$.fragment,Kt),Ldo=i(Kt),Aae=n(Kt,"P",{});var sWr=s(Aae);xdo=r(sWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sWr.forEach(t),$do=i(Kt),Ti=n(Kt,"P",{});var sK=s(Ti);kdo=r(sK,"The processor class to instantiate is selected based on the "),yae=n(sK,"CODE",{});var lWr=s(yae);Sdo=r(lWr,"model_type"),lWr.forEach(t),Rdo=r(sK,` property of the config object (either
passed as an argument or loaded from `),Lae=n(sK,"CODE",{});var iWr=s(Lae);Bdo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),Pdo=r(sK," if possible):"),sK.forEach(t),Ido=i(Kt),_e=n(Kt,"UL",{});var Fe=s(_e);Ah=n(Fe,"LI",{});var wAe=s(Ah);xae=n(wAe,"STRONG",{});var dWr=s(xae);qdo=r(dWr,"clip"),dWr.forEach(t),Ndo=r(wAe," \u2014 "),EP=n(wAe,"A",{href:!0});var cWr=s(EP);jdo=r(cWr,"CLIPProcessor"),cWr.forEach(t),Ddo=r(wAe," (CLIP model)"),wAe.forEach(t),Gdo=i(Fe),yh=n(Fe,"LI",{});var AAe=s(yh);$ae=n(AAe,"STRONG",{});var mWr=s($ae);Odo=r(mWr,"flava"),mWr.forEach(t),Vdo=r(AAe," \u2014 "),kae=n(AAe,"CODE",{});var fWr=s(kae);Xdo=r(fWr,"FLAVAProcessor"),fWr.forEach(t),zdo=r(AAe," (Flava model)"),AAe.forEach(t),Qdo=i(Fe),Lh=n(Fe,"LI",{});var yAe=s(Lh);Sae=n(yAe,"STRONG",{});var gWr=s(Sae);Wdo=r(gWr,"layoutlmv2"),gWr.forEach(t),Hdo=r(yAe," \u2014 "),CP=n(yAe,"A",{href:!0});var hWr=s(CP);Udo=r(hWr,"LayoutLMv2Processor"),hWr.forEach(t),Jdo=r(yAe," (LayoutLMv2 model)"),yAe.forEach(t),Ydo=i(Fe),xh=n(Fe,"LI",{});var LAe=s(xh);Rae=n(LAe,"STRONG",{});var uWr=s(Rae);Kdo=r(uWr,"layoutxlm"),uWr.forEach(t),Zdo=r(LAe," \u2014 "),wP=n(LAe,"A",{href:!0});var pWr=s(wP);eco=r(pWr,"LayoutXLMProcessor"),pWr.forEach(t),oco=r(LAe," (LayoutXLM model)"),LAe.forEach(t),rco=i(Fe),$h=n(Fe,"LI",{});var xAe=s($h);Bae=n(xAe,"STRONG",{});var _Wr=s(Bae);tco=r(_Wr,"sew"),_Wr.forEach(t),aco=r(xAe," \u2014 "),AP=n(xAe,"A",{href:!0});var bWr=s(AP);nco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),sco=r(xAe," (SEW model)"),xAe.forEach(t),lco=i(Fe),kh=n(Fe,"LI",{});var $Ae=s(kh);Pae=n($Ae,"STRONG",{});var FWr=s(Pae);ico=r(FWr,"sew-d"),FWr.forEach(t),dco=r($Ae," \u2014 "),yP=n($Ae,"A",{href:!0});var vWr=s(yP);cco=r(vWr,"Wav2Vec2Processor"),vWr.forEach(t),mco=r($Ae," (SEW-D model)"),$Ae.forEach(t),fco=i(Fe),Sh=n(Fe,"LI",{});var kAe=s(Sh);Iae=n(kAe,"STRONG",{});var TWr=s(Iae);gco=r(TWr,"speech_to_text"),TWr.forEach(t),hco=r(kAe," \u2014 "),LP=n(kAe,"A",{href:!0});var MWr=s(LP);uco=r(MWr,"Speech2TextProcessor"),MWr.forEach(t),pco=r(kAe," (Speech2Text model)"),kAe.forEach(t),_co=i(Fe),Rh=n(Fe,"LI",{});var SAe=s(Rh);qae=n(SAe,"STRONG",{});var EWr=s(qae);bco=r(EWr,"speech_to_text_2"),EWr.forEach(t),Fco=r(SAe," \u2014 "),xP=n(SAe,"A",{href:!0});var CWr=s(xP);vco=r(CWr,"Speech2Text2Processor"),CWr.forEach(t),Tco=r(SAe," (Speech2Text2 model)"),SAe.forEach(t),Mco=i(Fe),Bh=n(Fe,"LI",{});var RAe=s(Bh);Nae=n(RAe,"STRONG",{});var wWr=s(Nae);Eco=r(wWr,"trocr"),wWr.forEach(t),Cco=r(RAe," \u2014 "),$P=n(RAe,"A",{href:!0});var AWr=s($P);wco=r(AWr,"TrOCRProcessor"),AWr.forEach(t),Aco=r(RAe," (TrOCR model)"),RAe.forEach(t),yco=i(Fe),Ph=n(Fe,"LI",{});var BAe=s(Ph);jae=n(BAe,"STRONG",{});var yWr=s(jae);Lco=r(yWr,"unispeech"),yWr.forEach(t),xco=r(BAe," \u2014 "),kP=n(BAe,"A",{href:!0});var LWr=s(kP);$co=r(LWr,"Wav2Vec2Processor"),LWr.forEach(t),kco=r(BAe," (UniSpeech model)"),BAe.forEach(t),Sco=i(Fe),Ih=n(Fe,"LI",{});var PAe=s(Ih);Dae=n(PAe,"STRONG",{});var xWr=s(Dae);Rco=r(xWr,"unispeech-sat"),xWr.forEach(t),Bco=r(PAe," \u2014 "),SP=n(PAe,"A",{href:!0});var $Wr=s(SP);Pco=r($Wr,"Wav2Vec2Processor"),$Wr.forEach(t),Ico=r(PAe," (UniSpeechSat model)"),PAe.forEach(t),qco=i(Fe),qh=n(Fe,"LI",{});var IAe=s(qh);Gae=n(IAe,"STRONG",{});var kWr=s(Gae);Nco=r(kWr,"vilt"),kWr.forEach(t),jco=r(IAe," \u2014 "),RP=n(IAe,"A",{href:!0});var SWr=s(RP);Dco=r(SWr,"ViltProcessor"),SWr.forEach(t),Gco=r(IAe," (ViLT model)"),IAe.forEach(t),Oco=i(Fe),Nh=n(Fe,"LI",{});var qAe=s(Nh);Oae=n(qAe,"STRONG",{});var RWr=s(Oae);Vco=r(RWr,"vision-text-dual-encoder"),RWr.forEach(t),Xco=r(qAe," \u2014 "),BP=n(qAe,"A",{href:!0});var BWr=s(BP);zco=r(BWr,"VisionTextDualEncoderProcessor"),BWr.forEach(t),Qco=r(qAe," (VisionTextDualEncoder model)"),qAe.forEach(t),Wco=i(Fe),jh=n(Fe,"LI",{});var NAe=s(jh);Vae=n(NAe,"STRONG",{});var PWr=s(Vae);Hco=r(PWr,"wav2vec2"),PWr.forEach(t),Uco=r(NAe," \u2014 "),PP=n(NAe,"A",{href:!0});var IWr=s(PP);Jco=r(IWr,"Wav2Vec2Processor"),IWr.forEach(t),Yco=r(NAe," (Wav2Vec2 model)"),NAe.forEach(t),Kco=i(Fe),Dh=n(Fe,"LI",{});var jAe=s(Dh);Xae=n(jAe,"STRONG",{});var qWr=s(Xae);Zco=r(qWr,"wavlm"),qWr.forEach(t),emo=r(jAe," \u2014 "),IP=n(jAe,"A",{href:!0});var NWr=s(IP);omo=r(NWr,"Wav2Vec2Processor"),NWr.forEach(t),rmo=r(jAe," (WavLM model)"),jAe.forEach(t),Fe.forEach(t),tmo=i(Kt),T(Gh.$$.fragment,Kt),amo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),nmo=i(js),Vh=n(js,"DIV",{class:!0});var oNe=s(Vh);T(My.$$.fragment,oNe),smo=i(oNe),zae=n(oNe,"P",{});var jWr=s(zae);lmo=r(jWr,"Register a new processor for this class."),jWr.forEach(t),oNe.forEach(t),js.forEach(t),KPe=i(m),Mi=n(m,"H2",{class:!0});var rNe=s(Mi);Xh=n(rNe,"A",{id:!0,class:!0,href:!0});var DWr=s(Xh);Qae=n(DWr,"SPAN",{});var GWr=s(Qae);T(Ey.$$.fragment,GWr),GWr.forEach(t),DWr.forEach(t),imo=i(rNe),Wae=n(rNe,"SPAN",{});var OWr=s(Wae);dmo=r(OWr,"AutoModel"),OWr.forEach(t),rNe.forEach(t),ZPe=i(m),Lo=n(m,"DIV",{class:!0});var Ds=s(Lo);T(Cy.$$.fragment,Ds),cmo=i(Ds),Ei=n(Ds,"P",{});var lK=s(Ei);mmo=r(lK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=n(lK,"A",{href:!0});var VWr=s(qP);fmo=r(VWr,"from_pretrained()"),VWr.forEach(t),gmo=r(lK," class method or the "),NP=n(lK,"A",{href:!0});var XWr=s(NP);hmo=r(XWr,"from_config()"),XWr.forEach(t),umo=r(lK,` class
method.`),lK.forEach(t),pmo=i(Ds),wy=n(Ds,"P",{});var tNe=s(wy);_mo=r(tNe,"This class cannot be instantiated directly using "),Hae=n(tNe,"CODE",{});var zWr=s(Hae);bmo=r(zWr,"__init__()"),zWr.forEach(t),Fmo=r(tNe," (throws an error)."),tNe.forEach(t),vmo=i(Ds),ot=n(Ds,"DIV",{class:!0});var ZA=s(ot);T(Ay.$$.fragment,ZA),Tmo=i(ZA),Uae=n(ZA,"P",{});var QWr=s(Uae);Mmo=r(QWr,"Instantiates one of the base model classes of the library from a configuration."),QWr.forEach(t),Emo=i(ZA),Ci=n(ZA,"P",{});var iK=s(Ci);Cmo=r(iK,`Note:
Loading a model from its configuration file does `),Jae=n(iK,"STRONG",{});var WWr=s(Jae);wmo=r(WWr,"not"),WWr.forEach(t),Amo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=n(iK,"A",{href:!0});var HWr=s(jP);ymo=r(HWr,"from_pretrained()"),HWr.forEach(t),Lmo=r(iK," to load the model weights."),iK.forEach(t),xmo=i(ZA),T(zh.$$.fragment,ZA),ZA.forEach(t),$mo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(yy.$$.fragment,Zt),kmo=i(Zt),Yae=n(Zt,"P",{});var UWr=s(Yae);Smo=r(UWr,"Instantiate one of the base model classes of the library from a pretrained model."),UWr.forEach(t),Rmo=i(Zt),Aa=n(Zt,"P",{});var e6=s(Aa);Bmo=r(e6,"The model class to instantiate is selected based on the "),Kae=n(e6,"CODE",{});var JWr=s(Kae);Pmo=r(JWr,"model_type"),JWr.forEach(t),Imo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Zae=n(e6,"CODE",{});var YWr=s(Zae);qmo=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),Nmo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(e6,"CODE",{});var KWr=s(ene);jmo=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),Dmo=r(e6,":"),e6.forEach(t),Gmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var DAe=s(Qh);one=n(DAe,"STRONG",{});var ZWr=s(one);Omo=r(ZWr,"albert"),ZWr.forEach(t),Vmo=r(DAe," \u2014 "),DP=n(DAe,"A",{href:!0});var eHr=s(DP);Xmo=r(eHr,"AlbertModel"),eHr.forEach(t),zmo=r(DAe," (ALBERT model)"),DAe.forEach(t),Qmo=i($),Wh=n($,"LI",{});var GAe=s(Wh);rne=n(GAe,"STRONG",{});var oHr=s(rne);Wmo=r(oHr,"bart"),oHr.forEach(t),Hmo=r(GAe," \u2014 "),GP=n(GAe,"A",{href:!0});var rHr=s(GP);Umo=r(rHr,"BartModel"),rHr.forEach(t),Jmo=r(GAe," (BART model)"),GAe.forEach(t),Ymo=i($),Hh=n($,"LI",{});var OAe=s(Hh);tne=n(OAe,"STRONG",{});var tHr=s(tne);Kmo=r(tHr,"beit"),tHr.forEach(t),Zmo=r(OAe," \u2014 "),OP=n(OAe,"A",{href:!0});var aHr=s(OP);efo=r(aHr,"BeitModel"),aHr.forEach(t),ofo=r(OAe," (BEiT model)"),OAe.forEach(t),rfo=i($),Uh=n($,"LI",{});var VAe=s(Uh);ane=n(VAe,"STRONG",{});var nHr=s(ane);tfo=r(nHr,"bert"),nHr.forEach(t),afo=r(VAe," \u2014 "),VP=n(VAe,"A",{href:!0});var sHr=s(VP);nfo=r(sHr,"BertModel"),sHr.forEach(t),sfo=r(VAe," (BERT model)"),VAe.forEach(t),lfo=i($),Jh=n($,"LI",{});var XAe=s(Jh);nne=n(XAe,"STRONG",{});var lHr=s(nne);ifo=r(lHr,"bert-generation"),lHr.forEach(t),dfo=r(XAe," \u2014 "),XP=n(XAe,"A",{href:!0});var iHr=s(XP);cfo=r(iHr,"BertGenerationEncoder"),iHr.forEach(t),mfo=r(XAe," (Bert Generation model)"),XAe.forEach(t),ffo=i($),Yh=n($,"LI",{});var zAe=s(Yh);sne=n(zAe,"STRONG",{});var dHr=s(sne);gfo=r(dHr,"big_bird"),dHr.forEach(t),hfo=r(zAe," \u2014 "),zP=n(zAe,"A",{href:!0});var cHr=s(zP);ufo=r(cHr,"BigBirdModel"),cHr.forEach(t),pfo=r(zAe," (BigBird model)"),zAe.forEach(t),_fo=i($),Kh=n($,"LI",{});var QAe=s(Kh);lne=n(QAe,"STRONG",{});var mHr=s(lne);bfo=r(mHr,"bigbird_pegasus"),mHr.forEach(t),Ffo=r(QAe," \u2014 "),QP=n(QAe,"A",{href:!0});var fHr=s(QP);vfo=r(fHr,"BigBirdPegasusModel"),fHr.forEach(t),Tfo=r(QAe," (BigBirdPegasus model)"),QAe.forEach(t),Mfo=i($),Zh=n($,"LI",{});var WAe=s(Zh);ine=n(WAe,"STRONG",{});var gHr=s(ine);Efo=r(gHr,"blenderbot"),gHr.forEach(t),Cfo=r(WAe," \u2014 "),WP=n(WAe,"A",{href:!0});var hHr=s(WP);wfo=r(hHr,"BlenderbotModel"),hHr.forEach(t),Afo=r(WAe," (Blenderbot model)"),WAe.forEach(t),yfo=i($),eu=n($,"LI",{});var HAe=s(eu);dne=n(HAe,"STRONG",{});var uHr=s(dne);Lfo=r(uHr,"blenderbot-small"),uHr.forEach(t),xfo=r(HAe," \u2014 "),HP=n(HAe,"A",{href:!0});var pHr=s(HP);$fo=r(pHr,"BlenderbotSmallModel"),pHr.forEach(t),kfo=r(HAe," (BlenderbotSmall model)"),HAe.forEach(t),Sfo=i($),ou=n($,"LI",{});var UAe=s(ou);cne=n(UAe,"STRONG",{});var _Hr=s(cne);Rfo=r(_Hr,"camembert"),_Hr.forEach(t),Bfo=r(UAe," \u2014 "),UP=n(UAe,"A",{href:!0});var bHr=s(UP);Pfo=r(bHr,"CamembertModel"),bHr.forEach(t),Ifo=r(UAe," (CamemBERT model)"),UAe.forEach(t),qfo=i($),ru=n($,"LI",{});var JAe=s(ru);mne=n(JAe,"STRONG",{});var FHr=s(mne);Nfo=r(FHr,"canine"),FHr.forEach(t),jfo=r(JAe," \u2014 "),JP=n(JAe,"A",{href:!0});var vHr=s(JP);Dfo=r(vHr,"CanineModel"),vHr.forEach(t),Gfo=r(JAe," (Canine model)"),JAe.forEach(t),Ofo=i($),tu=n($,"LI",{});var YAe=s(tu);fne=n(YAe,"STRONG",{});var THr=s(fne);Vfo=r(THr,"clip"),THr.forEach(t),Xfo=r(YAe," \u2014 "),YP=n(YAe,"A",{href:!0});var MHr=s(YP);zfo=r(MHr,"CLIPModel"),MHr.forEach(t),Qfo=r(YAe," (CLIP model)"),YAe.forEach(t),Wfo=i($),au=n($,"LI",{});var KAe=s(au);gne=n(KAe,"STRONG",{});var EHr=s(gne);Hfo=r(EHr,"convbert"),EHr.forEach(t),Ufo=r(KAe," \u2014 "),KP=n(KAe,"A",{href:!0});var CHr=s(KP);Jfo=r(CHr,"ConvBertModel"),CHr.forEach(t),Yfo=r(KAe," (ConvBERT model)"),KAe.forEach(t),Kfo=i($),nu=n($,"LI",{});var ZAe=s(nu);hne=n(ZAe,"STRONG",{});var wHr=s(hne);Zfo=r(wHr,"convnext"),wHr.forEach(t),ego=r(ZAe," \u2014 "),ZP=n(ZAe,"A",{href:!0});var AHr=s(ZP);ogo=r(AHr,"ConvNextModel"),AHr.forEach(t),rgo=r(ZAe," (ConvNext model)"),ZAe.forEach(t),tgo=i($),su=n($,"LI",{});var e6e=s(su);une=n(e6e,"STRONG",{});var yHr=s(une);ago=r(yHr,"ctrl"),yHr.forEach(t),ngo=r(e6e," \u2014 "),eI=n(e6e,"A",{href:!0});var LHr=s(eI);sgo=r(LHr,"CTRLModel"),LHr.forEach(t),lgo=r(e6e," (CTRL model)"),e6e.forEach(t),igo=i($),lu=n($,"LI",{});var o6e=s(lu);pne=n(o6e,"STRONG",{});var xHr=s(pne);dgo=r(xHr,"data2vec-audio"),xHr.forEach(t),cgo=r(o6e," \u2014 "),oI=n(o6e,"A",{href:!0});var $Hr=s(oI);mgo=r($Hr,"Data2VecAudioModel"),$Hr.forEach(t),fgo=r(o6e," (Data2VecAudio model)"),o6e.forEach(t),ggo=i($),iu=n($,"LI",{});var r6e=s(iu);_ne=n(r6e,"STRONG",{});var kHr=s(_ne);hgo=r(kHr,"data2vec-text"),kHr.forEach(t),ugo=r(r6e," \u2014 "),rI=n(r6e,"A",{href:!0});var SHr=s(rI);pgo=r(SHr,"Data2VecTextModel"),SHr.forEach(t),_go=r(r6e," (Data2VecText model)"),r6e.forEach(t),bgo=i($),du=n($,"LI",{});var t6e=s(du);bne=n(t6e,"STRONG",{});var RHr=s(bne);Fgo=r(RHr,"data2vec-vision"),RHr.forEach(t),vgo=r(t6e," \u2014 "),tI=n(t6e,"A",{href:!0});var BHr=s(tI);Tgo=r(BHr,"Data2VecVisionModel"),BHr.forEach(t),Mgo=r(t6e," (Data2VecVision model)"),t6e.forEach(t),Ego=i($),cu=n($,"LI",{});var a6e=s(cu);Fne=n(a6e,"STRONG",{});var PHr=s(Fne);Cgo=r(PHr,"deberta"),PHr.forEach(t),wgo=r(a6e," \u2014 "),aI=n(a6e,"A",{href:!0});var IHr=s(aI);Ago=r(IHr,"DebertaModel"),IHr.forEach(t),ygo=r(a6e," (DeBERTa model)"),a6e.forEach(t),Lgo=i($),mu=n($,"LI",{});var n6e=s(mu);vne=n(n6e,"STRONG",{});var qHr=s(vne);xgo=r(qHr,"deberta-v2"),qHr.forEach(t),$go=r(n6e," \u2014 "),nI=n(n6e,"A",{href:!0});var NHr=s(nI);kgo=r(NHr,"DebertaV2Model"),NHr.forEach(t),Sgo=r(n6e," (DeBERTa-v2 model)"),n6e.forEach(t),Rgo=i($),fu=n($,"LI",{});var s6e=s(fu);Tne=n(s6e,"STRONG",{});var jHr=s(Tne);Bgo=r(jHr,"decision_transformer"),jHr.forEach(t),Pgo=r(s6e," \u2014 "),sI=n(s6e,"A",{href:!0});var DHr=s(sI);Igo=r(DHr,"DecisionTransformerModel"),DHr.forEach(t),qgo=r(s6e," (Decision Transformer model)"),s6e.forEach(t),Ngo=i($),gu=n($,"LI",{});var l6e=s(gu);Mne=n(l6e,"STRONG",{});var GHr=s(Mne);jgo=r(GHr,"deit"),GHr.forEach(t),Dgo=r(l6e," \u2014 "),lI=n(l6e,"A",{href:!0});var OHr=s(lI);Ggo=r(OHr,"DeiTModel"),OHr.forEach(t),Ogo=r(l6e," (DeiT model)"),l6e.forEach(t),Vgo=i($),hu=n($,"LI",{});var i6e=s(hu);Ene=n(i6e,"STRONG",{});var VHr=s(Ene);Xgo=r(VHr,"detr"),VHr.forEach(t),zgo=r(i6e," \u2014 "),iI=n(i6e,"A",{href:!0});var XHr=s(iI);Qgo=r(XHr,"DetrModel"),XHr.forEach(t),Wgo=r(i6e," (DETR model)"),i6e.forEach(t),Hgo=i($),uu=n($,"LI",{});var d6e=s(uu);Cne=n(d6e,"STRONG",{});var zHr=s(Cne);Ugo=r(zHr,"distilbert"),zHr.forEach(t),Jgo=r(d6e," \u2014 "),dI=n(d6e,"A",{href:!0});var QHr=s(dI);Ygo=r(QHr,"DistilBertModel"),QHr.forEach(t),Kgo=r(d6e," (DistilBERT model)"),d6e.forEach(t),Zgo=i($),pu=n($,"LI",{});var c6e=s(pu);wne=n(c6e,"STRONG",{});var WHr=s(wne);eho=r(WHr,"dpr"),WHr.forEach(t),oho=r(c6e," \u2014 "),cI=n(c6e,"A",{href:!0});var HHr=s(cI);rho=r(HHr,"DPRQuestionEncoder"),HHr.forEach(t),tho=r(c6e," (DPR model)"),c6e.forEach(t),aho=i($),_u=n($,"LI",{});var m6e=s(_u);Ane=n(m6e,"STRONG",{});var UHr=s(Ane);nho=r(UHr,"dpt"),UHr.forEach(t),sho=r(m6e," \u2014 "),mI=n(m6e,"A",{href:!0});var JHr=s(mI);lho=r(JHr,"DPTModel"),JHr.forEach(t),iho=r(m6e," (DPT model)"),m6e.forEach(t),dho=i($),bu=n($,"LI",{});var f6e=s(bu);yne=n(f6e,"STRONG",{});var YHr=s(yne);cho=r(YHr,"electra"),YHr.forEach(t),mho=r(f6e," \u2014 "),fI=n(f6e,"A",{href:!0});var KHr=s(fI);fho=r(KHr,"ElectraModel"),KHr.forEach(t),gho=r(f6e," (ELECTRA model)"),f6e.forEach(t),hho=i($),Fu=n($,"LI",{});var g6e=s(Fu);Lne=n(g6e,"STRONG",{});var ZHr=s(Lne);uho=r(ZHr,"flaubert"),ZHr.forEach(t),pho=r(g6e," \u2014 "),gI=n(g6e,"A",{href:!0});var eUr=s(gI);_ho=r(eUr,"FlaubertModel"),eUr.forEach(t),bho=r(g6e," (FlauBERT model)"),g6e.forEach(t),Fho=i($),vu=n($,"LI",{});var h6e=s(vu);xne=n(h6e,"STRONG",{});var oUr=s(xne);vho=r(oUr,"flava"),oUr.forEach(t),Tho=r(h6e," \u2014 "),hI=n(h6e,"A",{href:!0});var rUr=s(hI);Mho=r(rUr,"FlavaModel"),rUr.forEach(t),Eho=r(h6e," (Flava model)"),h6e.forEach(t),Cho=i($),Tu=n($,"LI",{});var u6e=s(Tu);$ne=n(u6e,"STRONG",{});var tUr=s($ne);who=r(tUr,"fnet"),tUr.forEach(t),Aho=r(u6e," \u2014 "),uI=n(u6e,"A",{href:!0});var aUr=s(uI);yho=r(aUr,"FNetModel"),aUr.forEach(t),Lho=r(u6e," (FNet model)"),u6e.forEach(t),xho=i($),Mu=n($,"LI",{});var p6e=s(Mu);kne=n(p6e,"STRONG",{});var nUr=s(kne);$ho=r(nUr,"fsmt"),nUr.forEach(t),kho=r(p6e," \u2014 "),pI=n(p6e,"A",{href:!0});var sUr=s(pI);Sho=r(sUr,"FSMTModel"),sUr.forEach(t),Rho=r(p6e," (FairSeq Machine-Translation model)"),p6e.forEach(t),Bho=i($),Rs=n($,"LI",{});var m$=s(Rs);Sne=n(m$,"STRONG",{});var lUr=s(Sne);Pho=r(lUr,"funnel"),lUr.forEach(t),Iho=r(m$," \u2014 "),_I=n(m$,"A",{href:!0});var iUr=s(_I);qho=r(iUr,"FunnelModel"),iUr.forEach(t),Nho=r(m$," or "),bI=n(m$,"A",{href:!0});var dUr=s(bI);jho=r(dUr,"FunnelBaseModel"),dUr.forEach(t),Dho=r(m$," (Funnel Transformer model)"),m$.forEach(t),Gho=i($),Eu=n($,"LI",{});var _6e=s(Eu);Rne=n(_6e,"STRONG",{});var cUr=s(Rne);Oho=r(cUr,"glpn"),cUr.forEach(t),Vho=r(_6e," \u2014 "),FI=n(_6e,"A",{href:!0});var mUr=s(FI);Xho=r(mUr,"GLPNModel"),mUr.forEach(t),zho=r(_6e," (GLPN model)"),_6e.forEach(t),Qho=i($),Cu=n($,"LI",{});var b6e=s(Cu);Bne=n(b6e,"STRONG",{});var fUr=s(Bne);Who=r(fUr,"gpt2"),fUr.forEach(t),Hho=r(b6e," \u2014 "),vI=n(b6e,"A",{href:!0});var gUr=s(vI);Uho=r(gUr,"GPT2Model"),gUr.forEach(t),Jho=r(b6e," (OpenAI GPT-2 model)"),b6e.forEach(t),Yho=i($),wu=n($,"LI",{});var F6e=s(wu);Pne=n(F6e,"STRONG",{});var hUr=s(Pne);Kho=r(hUr,"gpt_neo"),hUr.forEach(t),Zho=r(F6e," \u2014 "),TI=n(F6e,"A",{href:!0});var uUr=s(TI);euo=r(uUr,"GPTNeoModel"),uUr.forEach(t),ouo=r(F6e," (GPT Neo model)"),F6e.forEach(t),ruo=i($),Au=n($,"LI",{});var v6e=s(Au);Ine=n(v6e,"STRONG",{});var pUr=s(Ine);tuo=r(pUr,"gptj"),pUr.forEach(t),auo=r(v6e," \u2014 "),MI=n(v6e,"A",{href:!0});var _Ur=s(MI);nuo=r(_Ur,"GPTJModel"),_Ur.forEach(t),suo=r(v6e," (GPT-J model)"),v6e.forEach(t),luo=i($),yu=n($,"LI",{});var T6e=s(yu);qne=n(T6e,"STRONG",{});var bUr=s(qne);iuo=r(bUr,"hubert"),bUr.forEach(t),duo=r(T6e," \u2014 "),EI=n(T6e,"A",{href:!0});var FUr=s(EI);cuo=r(FUr,"HubertModel"),FUr.forEach(t),muo=r(T6e," (Hubert model)"),T6e.forEach(t),fuo=i($),Lu=n($,"LI",{});var M6e=s(Lu);Nne=n(M6e,"STRONG",{});var vUr=s(Nne);guo=r(vUr,"ibert"),vUr.forEach(t),huo=r(M6e," \u2014 "),CI=n(M6e,"A",{href:!0});var TUr=s(CI);uuo=r(TUr,"IBertModel"),TUr.forEach(t),puo=r(M6e," (I-BERT model)"),M6e.forEach(t),_uo=i($),xu=n($,"LI",{});var E6e=s(xu);jne=n(E6e,"STRONG",{});var MUr=s(jne);buo=r(MUr,"imagegpt"),MUr.forEach(t),Fuo=r(E6e," \u2014 "),wI=n(E6e,"A",{href:!0});var EUr=s(wI);vuo=r(EUr,"ImageGPTModel"),EUr.forEach(t),Tuo=r(E6e," (ImageGPT model)"),E6e.forEach(t),Muo=i($),$u=n($,"LI",{});var C6e=s($u);Dne=n(C6e,"STRONG",{});var CUr=s(Dne);Euo=r(CUr,"layoutlm"),CUr.forEach(t),Cuo=r(C6e," \u2014 "),AI=n(C6e,"A",{href:!0});var wUr=s(AI);wuo=r(wUr,"LayoutLMModel"),wUr.forEach(t),Auo=r(C6e," (LayoutLM model)"),C6e.forEach(t),yuo=i($),ku=n($,"LI",{});var w6e=s(ku);Gne=n(w6e,"STRONG",{});var AUr=s(Gne);Luo=r(AUr,"layoutlmv2"),AUr.forEach(t),xuo=r(w6e," \u2014 "),yI=n(w6e,"A",{href:!0});var yUr=s(yI);$uo=r(yUr,"LayoutLMv2Model"),yUr.forEach(t),kuo=r(w6e," (LayoutLMv2 model)"),w6e.forEach(t),Suo=i($),Su=n($,"LI",{});var A6e=s(Su);One=n(A6e,"STRONG",{});var LUr=s(One);Ruo=r(LUr,"led"),LUr.forEach(t),Buo=r(A6e," \u2014 "),LI=n(A6e,"A",{href:!0});var xUr=s(LI);Puo=r(xUr,"LEDModel"),xUr.forEach(t),Iuo=r(A6e," (LED model)"),A6e.forEach(t),quo=i($),Ru=n($,"LI",{});var y6e=s(Ru);Vne=n(y6e,"STRONG",{});var $Ur=s(Vne);Nuo=r($Ur,"longformer"),$Ur.forEach(t),juo=r(y6e," \u2014 "),xI=n(y6e,"A",{href:!0});var kUr=s(xI);Duo=r(kUr,"LongformerModel"),kUr.forEach(t),Guo=r(y6e," (Longformer model)"),y6e.forEach(t),Ouo=i($),Bu=n($,"LI",{});var L6e=s(Bu);Xne=n(L6e,"STRONG",{});var SUr=s(Xne);Vuo=r(SUr,"luke"),SUr.forEach(t),Xuo=r(L6e," \u2014 "),$I=n(L6e,"A",{href:!0});var RUr=s($I);zuo=r(RUr,"LukeModel"),RUr.forEach(t),Quo=r(L6e," (LUKE model)"),L6e.forEach(t),Wuo=i($),Pu=n($,"LI",{});var x6e=s(Pu);zne=n(x6e,"STRONG",{});var BUr=s(zne);Huo=r(BUr,"lxmert"),BUr.forEach(t),Uuo=r(x6e," \u2014 "),kI=n(x6e,"A",{href:!0});var PUr=s(kI);Juo=r(PUr,"LxmertModel"),PUr.forEach(t),Yuo=r(x6e," (LXMERT model)"),x6e.forEach(t),Kuo=i($),Iu=n($,"LI",{});var $6e=s(Iu);Qne=n($6e,"STRONG",{});var IUr=s(Qne);Zuo=r(IUr,"m2m_100"),IUr.forEach(t),epo=r($6e," \u2014 "),SI=n($6e,"A",{href:!0});var qUr=s(SI);opo=r(qUr,"M2M100Model"),qUr.forEach(t),rpo=r($6e," (M2M100 model)"),$6e.forEach(t),tpo=i($),qu=n($,"LI",{});var k6e=s(qu);Wne=n(k6e,"STRONG",{});var NUr=s(Wne);apo=r(NUr,"marian"),NUr.forEach(t),npo=r(k6e," \u2014 "),RI=n(k6e,"A",{href:!0});var jUr=s(RI);spo=r(jUr,"MarianModel"),jUr.forEach(t),lpo=r(k6e," (Marian model)"),k6e.forEach(t),ipo=i($),Nu=n($,"LI",{});var S6e=s(Nu);Hne=n(S6e,"STRONG",{});var DUr=s(Hne);dpo=r(DUr,"maskformer"),DUr.forEach(t),cpo=r(S6e," \u2014 "),BI=n(S6e,"A",{href:!0});var GUr=s(BI);mpo=r(GUr,"MaskFormerModel"),GUr.forEach(t),fpo=r(S6e," (MaskFormer model)"),S6e.forEach(t),gpo=i($),ju=n($,"LI",{});var R6e=s(ju);Une=n(R6e,"STRONG",{});var OUr=s(Une);hpo=r(OUr,"mbart"),OUr.forEach(t),upo=r(R6e," \u2014 "),PI=n(R6e,"A",{href:!0});var VUr=s(PI);ppo=r(VUr,"MBartModel"),VUr.forEach(t),_po=r(R6e," (mBART model)"),R6e.forEach(t),bpo=i($),Du=n($,"LI",{});var B6e=s(Du);Jne=n(B6e,"STRONG",{});var XUr=s(Jne);Fpo=r(XUr,"megatron-bert"),XUr.forEach(t),vpo=r(B6e," \u2014 "),II=n(B6e,"A",{href:!0});var zUr=s(II);Tpo=r(zUr,"MegatronBertModel"),zUr.forEach(t),Mpo=r(B6e," (MegatronBert model)"),B6e.forEach(t),Epo=i($),Gu=n($,"LI",{});var P6e=s(Gu);Yne=n(P6e,"STRONG",{});var QUr=s(Yne);Cpo=r(QUr,"mobilebert"),QUr.forEach(t),wpo=r(P6e," \u2014 "),qI=n(P6e,"A",{href:!0});var WUr=s(qI);Apo=r(WUr,"MobileBertModel"),WUr.forEach(t),ypo=r(P6e," (MobileBERT model)"),P6e.forEach(t),Lpo=i($),Ou=n($,"LI",{});var I6e=s(Ou);Kne=n(I6e,"STRONG",{});var HUr=s(Kne);xpo=r(HUr,"mpnet"),HUr.forEach(t),$po=r(I6e," \u2014 "),NI=n(I6e,"A",{href:!0});var UUr=s(NI);kpo=r(UUr,"MPNetModel"),UUr.forEach(t),Spo=r(I6e," (MPNet model)"),I6e.forEach(t),Rpo=i($),Vu=n($,"LI",{});var q6e=s(Vu);Zne=n(q6e,"STRONG",{});var JUr=s(Zne);Bpo=r(JUr,"mt5"),JUr.forEach(t),Ppo=r(q6e," \u2014 "),jI=n(q6e,"A",{href:!0});var YUr=s(jI);Ipo=r(YUr,"MT5Model"),YUr.forEach(t),qpo=r(q6e," (mT5 model)"),q6e.forEach(t),Npo=i($),Xu=n($,"LI",{});var N6e=s(Xu);ese=n(N6e,"STRONG",{});var KUr=s(ese);jpo=r(KUr,"nystromformer"),KUr.forEach(t),Dpo=r(N6e," \u2014 "),DI=n(N6e,"A",{href:!0});var ZUr=s(DI);Gpo=r(ZUr,"NystromformerModel"),ZUr.forEach(t),Opo=r(N6e," (Nystromformer model)"),N6e.forEach(t),Vpo=i($),zu=n($,"LI",{});var j6e=s(zu);ose=n(j6e,"STRONG",{});var eJr=s(ose);Xpo=r(eJr,"openai-gpt"),eJr.forEach(t),zpo=r(j6e," \u2014 "),GI=n(j6e,"A",{href:!0});var oJr=s(GI);Qpo=r(oJr,"OpenAIGPTModel"),oJr.forEach(t),Wpo=r(j6e," (OpenAI GPT model)"),j6e.forEach(t),Hpo=i($),Qu=n($,"LI",{});var D6e=s(Qu);rse=n(D6e,"STRONG",{});var rJr=s(rse);Upo=r(rJr,"opt"),rJr.forEach(t),Jpo=r(D6e," \u2014 "),OI=n(D6e,"A",{href:!0});var tJr=s(OI);Ypo=r(tJr,"OPTModel"),tJr.forEach(t),Kpo=r(D6e," (OPT model)"),D6e.forEach(t),Zpo=i($),Wu=n($,"LI",{});var G6e=s(Wu);tse=n(G6e,"STRONG",{});var aJr=s(tse);e_o=r(aJr,"pegasus"),aJr.forEach(t),o_o=r(G6e," \u2014 "),VI=n(G6e,"A",{href:!0});var nJr=s(VI);r_o=r(nJr,"PegasusModel"),nJr.forEach(t),t_o=r(G6e," (Pegasus model)"),G6e.forEach(t),a_o=i($),Hu=n($,"LI",{});var O6e=s(Hu);ase=n(O6e,"STRONG",{});var sJr=s(ase);n_o=r(sJr,"perceiver"),sJr.forEach(t),s_o=r(O6e," \u2014 "),XI=n(O6e,"A",{href:!0});var lJr=s(XI);l_o=r(lJr,"PerceiverModel"),lJr.forEach(t),i_o=r(O6e," (Perceiver model)"),O6e.forEach(t),d_o=i($),Uu=n($,"LI",{});var V6e=s(Uu);nse=n(V6e,"STRONG",{});var iJr=s(nse);c_o=r(iJr,"plbart"),iJr.forEach(t),m_o=r(V6e," \u2014 "),zI=n(V6e,"A",{href:!0});var dJr=s(zI);f_o=r(dJr,"PLBartModel"),dJr.forEach(t),g_o=r(V6e," (PLBart model)"),V6e.forEach(t),h_o=i($),Ju=n($,"LI",{});var X6e=s(Ju);sse=n(X6e,"STRONG",{});var cJr=s(sse);u_o=r(cJr,"poolformer"),cJr.forEach(t),p_o=r(X6e," \u2014 "),QI=n(X6e,"A",{href:!0});var mJr=s(QI);__o=r(mJr,"PoolFormerModel"),mJr.forEach(t),b_o=r(X6e," (PoolFormer model)"),X6e.forEach(t),F_o=i($),Yu=n($,"LI",{});var z6e=s(Yu);lse=n(z6e,"STRONG",{});var fJr=s(lse);v_o=r(fJr,"prophetnet"),fJr.forEach(t),T_o=r(z6e," \u2014 "),WI=n(z6e,"A",{href:!0});var gJr=s(WI);M_o=r(gJr,"ProphetNetModel"),gJr.forEach(t),E_o=r(z6e," (ProphetNet model)"),z6e.forEach(t),C_o=i($),Ku=n($,"LI",{});var Q6e=s(Ku);ise=n(Q6e,"STRONG",{});var hJr=s(ise);w_o=r(hJr,"qdqbert"),hJr.forEach(t),A_o=r(Q6e," \u2014 "),HI=n(Q6e,"A",{href:!0});var uJr=s(HI);y_o=r(uJr,"QDQBertModel"),uJr.forEach(t),L_o=r(Q6e," (QDQBert model)"),Q6e.forEach(t),x_o=i($),Zu=n($,"LI",{});var W6e=s(Zu);dse=n(W6e,"STRONG",{});var pJr=s(dse);$_o=r(pJr,"reformer"),pJr.forEach(t),k_o=r(W6e," \u2014 "),UI=n(W6e,"A",{href:!0});var _Jr=s(UI);S_o=r(_Jr,"ReformerModel"),_Jr.forEach(t),R_o=r(W6e," (Reformer model)"),W6e.forEach(t),B_o=i($),ep=n($,"LI",{});var H6e=s(ep);cse=n(H6e,"STRONG",{});var bJr=s(cse);P_o=r(bJr,"regnet"),bJr.forEach(t),I_o=r(H6e," \u2014 "),JI=n(H6e,"A",{href:!0});var FJr=s(JI);q_o=r(FJr,"RegNetModel"),FJr.forEach(t),N_o=r(H6e," (RegNet model)"),H6e.forEach(t),j_o=i($),op=n($,"LI",{});var U6e=s(op);mse=n(U6e,"STRONG",{});var vJr=s(mse);D_o=r(vJr,"rembert"),vJr.forEach(t),G_o=r(U6e," \u2014 "),YI=n(U6e,"A",{href:!0});var TJr=s(YI);O_o=r(TJr,"RemBertModel"),TJr.forEach(t),V_o=r(U6e," (RemBERT model)"),U6e.forEach(t),X_o=i($),rp=n($,"LI",{});var J6e=s(rp);fse=n(J6e,"STRONG",{});var MJr=s(fse);z_o=r(MJr,"resnet"),MJr.forEach(t),Q_o=r(J6e," \u2014 "),KI=n(J6e,"A",{href:!0});var EJr=s(KI);W_o=r(EJr,"ResNetModel"),EJr.forEach(t),H_o=r(J6e," (ResNet model)"),J6e.forEach(t),U_o=i($),tp=n($,"LI",{});var Y6e=s(tp);gse=n(Y6e,"STRONG",{});var CJr=s(gse);J_o=r(CJr,"retribert"),CJr.forEach(t),Y_o=r(Y6e," \u2014 "),ZI=n(Y6e,"A",{href:!0});var wJr=s(ZI);K_o=r(wJr,"RetriBertModel"),wJr.forEach(t),Z_o=r(Y6e," (RetriBERT model)"),Y6e.forEach(t),ebo=i($),ap=n($,"LI",{});var K6e=s(ap);hse=n(K6e,"STRONG",{});var AJr=s(hse);obo=r(AJr,"roberta"),AJr.forEach(t),rbo=r(K6e," \u2014 "),eq=n(K6e,"A",{href:!0});var yJr=s(eq);tbo=r(yJr,"RobertaModel"),yJr.forEach(t),abo=r(K6e," (RoBERTa model)"),K6e.forEach(t),nbo=i($),np=n($,"LI",{});var Z6e=s(np);use=n(Z6e,"STRONG",{});var LJr=s(use);sbo=r(LJr,"roformer"),LJr.forEach(t),lbo=r(Z6e," \u2014 "),oq=n(Z6e,"A",{href:!0});var xJr=s(oq);ibo=r(xJr,"RoFormerModel"),xJr.forEach(t),dbo=r(Z6e," (RoFormer model)"),Z6e.forEach(t),cbo=i($),sp=n($,"LI",{});var e0e=s(sp);pse=n(e0e,"STRONG",{});var $Jr=s(pse);mbo=r($Jr,"segformer"),$Jr.forEach(t),fbo=r(e0e," \u2014 "),rq=n(e0e,"A",{href:!0});var kJr=s(rq);gbo=r(kJr,"SegformerModel"),kJr.forEach(t),hbo=r(e0e," (SegFormer model)"),e0e.forEach(t),ubo=i($),lp=n($,"LI",{});var o0e=s(lp);_se=n(o0e,"STRONG",{});var SJr=s(_se);pbo=r(SJr,"sew"),SJr.forEach(t),_bo=r(o0e," \u2014 "),tq=n(o0e,"A",{href:!0});var RJr=s(tq);bbo=r(RJr,"SEWModel"),RJr.forEach(t),Fbo=r(o0e," (SEW model)"),o0e.forEach(t),vbo=i($),ip=n($,"LI",{});var r0e=s(ip);bse=n(r0e,"STRONG",{});var BJr=s(bse);Tbo=r(BJr,"sew-d"),BJr.forEach(t),Mbo=r(r0e," \u2014 "),aq=n(r0e,"A",{href:!0});var PJr=s(aq);Ebo=r(PJr,"SEWDModel"),PJr.forEach(t),Cbo=r(r0e," (SEW-D model)"),r0e.forEach(t),wbo=i($),dp=n($,"LI",{});var t0e=s(dp);Fse=n(t0e,"STRONG",{});var IJr=s(Fse);Abo=r(IJr,"speech_to_text"),IJr.forEach(t),ybo=r(t0e," \u2014 "),nq=n(t0e,"A",{href:!0});var qJr=s(nq);Lbo=r(qJr,"Speech2TextModel"),qJr.forEach(t),xbo=r(t0e," (Speech2Text model)"),t0e.forEach(t),$bo=i($),cp=n($,"LI",{});var a0e=s(cp);vse=n(a0e,"STRONG",{});var NJr=s(vse);kbo=r(NJr,"splinter"),NJr.forEach(t),Sbo=r(a0e," \u2014 "),sq=n(a0e,"A",{href:!0});var jJr=s(sq);Rbo=r(jJr,"SplinterModel"),jJr.forEach(t),Bbo=r(a0e," (Splinter model)"),a0e.forEach(t),Pbo=i($),mp=n($,"LI",{});var n0e=s(mp);Tse=n(n0e,"STRONG",{});var DJr=s(Tse);Ibo=r(DJr,"squeezebert"),DJr.forEach(t),qbo=r(n0e," \u2014 "),lq=n(n0e,"A",{href:!0});var GJr=s(lq);Nbo=r(GJr,"SqueezeBertModel"),GJr.forEach(t),jbo=r(n0e," (SqueezeBERT model)"),n0e.forEach(t),Dbo=i($),fp=n($,"LI",{});var s0e=s(fp);Mse=n(s0e,"STRONG",{});var OJr=s(Mse);Gbo=r(OJr,"swin"),OJr.forEach(t),Obo=r(s0e," \u2014 "),iq=n(s0e,"A",{href:!0});var VJr=s(iq);Vbo=r(VJr,"SwinModel"),VJr.forEach(t),Xbo=r(s0e," (Swin model)"),s0e.forEach(t),zbo=i($),gp=n($,"LI",{});var l0e=s(gp);Ese=n(l0e,"STRONG",{});var XJr=s(Ese);Qbo=r(XJr,"t5"),XJr.forEach(t),Wbo=r(l0e," \u2014 "),dq=n(l0e,"A",{href:!0});var zJr=s(dq);Hbo=r(zJr,"T5Model"),zJr.forEach(t),Ubo=r(l0e," (T5 model)"),l0e.forEach(t),Jbo=i($),hp=n($,"LI",{});var i0e=s(hp);Cse=n(i0e,"STRONG",{});var QJr=s(Cse);Ybo=r(QJr,"tapas"),QJr.forEach(t),Kbo=r(i0e," \u2014 "),cq=n(i0e,"A",{href:!0});var WJr=s(cq);Zbo=r(WJr,"TapasModel"),WJr.forEach(t),e2o=r(i0e," (TAPAS model)"),i0e.forEach(t),o2o=i($),up=n($,"LI",{});var d0e=s(up);wse=n(d0e,"STRONG",{});var HJr=s(wse);r2o=r(HJr,"transfo-xl"),HJr.forEach(t),t2o=r(d0e," \u2014 "),mq=n(d0e,"A",{href:!0});var UJr=s(mq);a2o=r(UJr,"TransfoXLModel"),UJr.forEach(t),n2o=r(d0e," (Transformer-XL model)"),d0e.forEach(t),s2o=i($),pp=n($,"LI",{});var c0e=s(pp);Ase=n(c0e,"STRONG",{});var JJr=s(Ase);l2o=r(JJr,"unispeech"),JJr.forEach(t),i2o=r(c0e," \u2014 "),fq=n(c0e,"A",{href:!0});var YJr=s(fq);d2o=r(YJr,"UniSpeechModel"),YJr.forEach(t),c2o=r(c0e," (UniSpeech model)"),c0e.forEach(t),m2o=i($),_p=n($,"LI",{});var m0e=s(_p);yse=n(m0e,"STRONG",{});var KJr=s(yse);f2o=r(KJr,"unispeech-sat"),KJr.forEach(t),g2o=r(m0e," \u2014 "),gq=n(m0e,"A",{href:!0});var ZJr=s(gq);h2o=r(ZJr,"UniSpeechSatModel"),ZJr.forEach(t),u2o=r(m0e," (UniSpeechSat model)"),m0e.forEach(t),p2o=i($),bp=n($,"LI",{});var f0e=s(bp);Lse=n(f0e,"STRONG",{});var eYr=s(Lse);_2o=r(eYr,"van"),eYr.forEach(t),b2o=r(f0e," \u2014 "),hq=n(f0e,"A",{href:!0});var oYr=s(hq);F2o=r(oYr,"VanModel"),oYr.forEach(t),v2o=r(f0e," (VAN model)"),f0e.forEach(t),T2o=i($),Fp=n($,"LI",{});var g0e=s(Fp);xse=n(g0e,"STRONG",{});var rYr=s(xse);M2o=r(rYr,"vilt"),rYr.forEach(t),E2o=r(g0e," \u2014 "),uq=n(g0e,"A",{href:!0});var tYr=s(uq);C2o=r(tYr,"ViltModel"),tYr.forEach(t),w2o=r(g0e," (ViLT model)"),g0e.forEach(t),A2o=i($),vp=n($,"LI",{});var h0e=s(vp);$se=n(h0e,"STRONG",{});var aYr=s($se);y2o=r(aYr,"vision-text-dual-encoder"),aYr.forEach(t),L2o=r(h0e," \u2014 "),pq=n(h0e,"A",{href:!0});var nYr=s(pq);x2o=r(nYr,"VisionTextDualEncoderModel"),nYr.forEach(t),$2o=r(h0e," (VisionTextDualEncoder model)"),h0e.forEach(t),k2o=i($),Tp=n($,"LI",{});var u0e=s(Tp);kse=n(u0e,"STRONG",{});var sYr=s(kse);S2o=r(sYr,"visual_bert"),sYr.forEach(t),R2o=r(u0e," \u2014 "),_q=n(u0e,"A",{href:!0});var lYr=s(_q);B2o=r(lYr,"VisualBertModel"),lYr.forEach(t),P2o=r(u0e," (VisualBert model)"),u0e.forEach(t),I2o=i($),Mp=n($,"LI",{});var p0e=s(Mp);Sse=n(p0e,"STRONG",{});var iYr=s(Sse);q2o=r(iYr,"vit"),iYr.forEach(t),N2o=r(p0e," \u2014 "),bq=n(p0e,"A",{href:!0});var dYr=s(bq);j2o=r(dYr,"ViTModel"),dYr.forEach(t),D2o=r(p0e," (ViT model)"),p0e.forEach(t),G2o=i($),Ep=n($,"LI",{});var _0e=s(Ep);Rse=n(_0e,"STRONG",{});var cYr=s(Rse);O2o=r(cYr,"vit_mae"),cYr.forEach(t),V2o=r(_0e," \u2014 "),Fq=n(_0e,"A",{href:!0});var mYr=s(Fq);X2o=r(mYr,"ViTMAEModel"),mYr.forEach(t),z2o=r(_0e," (ViTMAE model)"),_0e.forEach(t),Q2o=i($),Cp=n($,"LI",{});var b0e=s(Cp);Bse=n(b0e,"STRONG",{});var fYr=s(Bse);W2o=r(fYr,"wav2vec2"),fYr.forEach(t),H2o=r(b0e," \u2014 "),vq=n(b0e,"A",{href:!0});var gYr=s(vq);U2o=r(gYr,"Wav2Vec2Model"),gYr.forEach(t),J2o=r(b0e," (Wav2Vec2 model)"),b0e.forEach(t),Y2o=i($),wp=n($,"LI",{});var F0e=s(wp);Pse=n(F0e,"STRONG",{});var hYr=s(Pse);K2o=r(hYr,"wavlm"),hYr.forEach(t),Z2o=r(F0e," \u2014 "),Tq=n(F0e,"A",{href:!0});var uYr=s(Tq);eFo=r(uYr,"WavLMModel"),uYr.forEach(t),oFo=r(F0e," (WavLM model)"),F0e.forEach(t),rFo=i($),Ap=n($,"LI",{});var v0e=s(Ap);Ise=n(v0e,"STRONG",{});var pYr=s(Ise);tFo=r(pYr,"xglm"),pYr.forEach(t),aFo=r(v0e," \u2014 "),Mq=n(v0e,"A",{href:!0});var _Yr=s(Mq);nFo=r(_Yr,"XGLMModel"),_Yr.forEach(t),sFo=r(v0e," (XGLM model)"),v0e.forEach(t),lFo=i($),yp=n($,"LI",{});var T0e=s(yp);qse=n(T0e,"STRONG",{});var bYr=s(qse);iFo=r(bYr,"xlm"),bYr.forEach(t),dFo=r(T0e," \u2014 "),Eq=n(T0e,"A",{href:!0});var FYr=s(Eq);cFo=r(FYr,"XLMModel"),FYr.forEach(t),mFo=r(T0e," (XLM model)"),T0e.forEach(t),fFo=i($),Lp=n($,"LI",{});var M0e=s(Lp);Nse=n(M0e,"STRONG",{});var vYr=s(Nse);gFo=r(vYr,"xlm-prophetnet"),vYr.forEach(t),hFo=r(M0e," \u2014 "),Cq=n(M0e,"A",{href:!0});var TYr=s(Cq);uFo=r(TYr,"XLMProphetNetModel"),TYr.forEach(t),pFo=r(M0e," (XLMProphetNet model)"),M0e.forEach(t),_Fo=i($),xp=n($,"LI",{});var E0e=s(xp);jse=n(E0e,"STRONG",{});var MYr=s(jse);bFo=r(MYr,"xlm-roberta"),MYr.forEach(t),FFo=r(E0e," \u2014 "),wq=n(E0e,"A",{href:!0});var EYr=s(wq);vFo=r(EYr,"XLMRobertaModel"),EYr.forEach(t),TFo=r(E0e," (XLM-RoBERTa model)"),E0e.forEach(t),MFo=i($),$p=n($,"LI",{});var C0e=s($p);Dse=n(C0e,"STRONG",{});var CYr=s(Dse);EFo=r(CYr,"xlm-roberta-xl"),CYr.forEach(t),CFo=r(C0e," \u2014 "),Aq=n(C0e,"A",{href:!0});var wYr=s(Aq);wFo=r(wYr,"XLMRobertaXLModel"),wYr.forEach(t),AFo=r(C0e," (XLM-RoBERTa-XL model)"),C0e.forEach(t),yFo=i($),kp=n($,"LI",{});var w0e=s(kp);Gse=n(w0e,"STRONG",{});var AYr=s(Gse);LFo=r(AYr,"xlnet"),AYr.forEach(t),xFo=r(w0e," \u2014 "),yq=n(w0e,"A",{href:!0});var yYr=s(yq);$Fo=r(yYr,"XLNetModel"),yYr.forEach(t),kFo=r(w0e," (XLNet model)"),w0e.forEach(t),SFo=i($),Sp=n($,"LI",{});var A0e=s(Sp);Ose=n(A0e,"STRONG",{});var LYr=s(Ose);RFo=r(LYr,"yolos"),LYr.forEach(t),BFo=r(A0e," \u2014 "),Lq=n(A0e,"A",{href:!0});var xYr=s(Lq);PFo=r(xYr,"YolosModel"),xYr.forEach(t),IFo=r(A0e," (YOLOS model)"),A0e.forEach(t),qFo=i($),Rp=n($,"LI",{});var y0e=s(Rp);Vse=n(y0e,"STRONG",{});var $Yr=s(Vse);NFo=r($Yr,"yoso"),$Yr.forEach(t),jFo=r(y0e," \u2014 "),xq=n(y0e,"A",{href:!0});var kYr=s(xq);DFo=r(kYr,"YosoModel"),kYr.forEach(t),GFo=r(y0e," (YOSO model)"),y0e.forEach(t),$.forEach(t),OFo=i(Zt),Bp=n(Zt,"P",{});var L0e=s(Bp);VFo=r(L0e,"The model is set in evaluation mode by default using "),Xse=n(L0e,"CODE",{});var SYr=s(Xse);XFo=r(SYr,"model.eval()"),SYr.forEach(t),zFo=r(L0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=n(L0e,"CODE",{});var RYr=s(zse);QFo=r(RYr,"model.train()"),RYr.forEach(t),L0e.forEach(t),WFo=i(Zt),T(Pp.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),eIe=i(m),wi=n(m,"H2",{class:!0});var aNe=s(wi);Ip=n(aNe,"A",{id:!0,class:!0,href:!0});var BYr=s(Ip);Qse=n(BYr,"SPAN",{});var PYr=s(Qse);T(Ly.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),HFo=i(aNe),Wse=n(aNe,"SPAN",{});var IYr=s(Wse);UFo=r(IYr,"AutoModelForPreTraining"),IYr.forEach(t),aNe.forEach(t),oIe=i(m),xo=n(m,"DIV",{class:!0});var Gs=s(xo);T(xy.$$.fragment,Gs),JFo=i(Gs),Ai=n(Gs,"P",{});var dK=s(Ai);YFo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=n(dK,"A",{href:!0});var qYr=s($q);KFo=r(qYr,"from_pretrained()"),qYr.forEach(t),ZFo=r(dK," class method or the "),kq=n(dK,"A",{href:!0});var NYr=s(kq);evo=r(NYr,"from_config()"),NYr.forEach(t),ovo=r(dK,` class
method.`),dK.forEach(t),rvo=i(Gs),$y=n(Gs,"P",{});var nNe=s($y);tvo=r(nNe,"This class cannot be instantiated directly using "),Hse=n(nNe,"CODE",{});var jYr=s(Hse);avo=r(jYr,"__init__()"),jYr.forEach(t),nvo=r(nNe," (throws an error)."),nNe.forEach(t),svo=i(Gs),rt=n(Gs,"DIV",{class:!0});var o6=s(rt);T(ky.$$.fragment,o6),lvo=i(o6),Use=n(o6,"P",{});var DYr=s(Use);ivo=r(DYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DYr.forEach(t),dvo=i(o6),yi=n(o6,"P",{});var cK=s(yi);cvo=r(cK,`Note:
Loading a model from its configuration file does `),Jse=n(cK,"STRONG",{});var GYr=s(Jse);mvo=r(GYr,"not"),GYr.forEach(t),fvo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=n(cK,"A",{href:!0});var OYr=s(Sq);gvo=r(OYr,"from_pretrained()"),OYr.forEach(t),hvo=r(cK," to load the model weights."),cK.forEach(t),uvo=i(o6),T(qp.$$.fragment,o6),o6.forEach(t),pvo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(Sy.$$.fragment,ea),_vo=i(ea),Yse=n(ea,"P",{});var VYr=s(Yse);bvo=r(VYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VYr.forEach(t),Fvo=i(ea),ya=n(ea,"P",{});var r6=s(ya);vvo=r(r6,"The model class to instantiate is selected based on the "),Kse=n(r6,"CODE",{});var XYr=s(Kse);Tvo=r(XYr,"model_type"),XYr.forEach(t),Mvo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Zse=n(r6,"CODE",{});var zYr=s(Zse);Evo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),Cvo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(r6,"CODE",{});var QYr=s(ele);wvo=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),Avo=r(r6,":"),r6.forEach(t),yvo=i(ea),G=n(ea,"UL",{});var V=s(G);Np=n(V,"LI",{});var x0e=s(Np);ole=n(x0e,"STRONG",{});var WYr=s(ole);Lvo=r(WYr,"albert"),WYr.forEach(t),xvo=r(x0e," \u2014 "),Rq=n(x0e,"A",{href:!0});var HYr=s(Rq);$vo=r(HYr,"AlbertForPreTraining"),HYr.forEach(t),kvo=r(x0e," (ALBERT model)"),x0e.forEach(t),Svo=i(V),jp=n(V,"LI",{});var $0e=s(jp);rle=n($0e,"STRONG",{});var UYr=s(rle);Rvo=r(UYr,"bart"),UYr.forEach(t),Bvo=r($0e," \u2014 "),Bq=n($0e,"A",{href:!0});var JYr=s(Bq);Pvo=r(JYr,"BartForConditionalGeneration"),JYr.forEach(t),Ivo=r($0e," (BART model)"),$0e.forEach(t),qvo=i(V),Dp=n(V,"LI",{});var k0e=s(Dp);tle=n(k0e,"STRONG",{});var YYr=s(tle);Nvo=r(YYr,"bert"),YYr.forEach(t),jvo=r(k0e," \u2014 "),Pq=n(k0e,"A",{href:!0});var KYr=s(Pq);Dvo=r(KYr,"BertForPreTraining"),KYr.forEach(t),Gvo=r(k0e," (BERT model)"),k0e.forEach(t),Ovo=i(V),Gp=n(V,"LI",{});var S0e=s(Gp);ale=n(S0e,"STRONG",{});var ZYr=s(ale);Vvo=r(ZYr,"big_bird"),ZYr.forEach(t),Xvo=r(S0e," \u2014 "),Iq=n(S0e,"A",{href:!0});var eKr=s(Iq);zvo=r(eKr,"BigBirdForPreTraining"),eKr.forEach(t),Qvo=r(S0e," (BigBird model)"),S0e.forEach(t),Wvo=i(V),Op=n(V,"LI",{});var R0e=s(Op);nle=n(R0e,"STRONG",{});var oKr=s(nle);Hvo=r(oKr,"camembert"),oKr.forEach(t),Uvo=r(R0e," \u2014 "),qq=n(R0e,"A",{href:!0});var rKr=s(qq);Jvo=r(rKr,"CamembertForMaskedLM"),rKr.forEach(t),Yvo=r(R0e," (CamemBERT model)"),R0e.forEach(t),Kvo=i(V),Vp=n(V,"LI",{});var B0e=s(Vp);sle=n(B0e,"STRONG",{});var tKr=s(sle);Zvo=r(tKr,"ctrl"),tKr.forEach(t),e1o=r(B0e," \u2014 "),Nq=n(B0e,"A",{href:!0});var aKr=s(Nq);o1o=r(aKr,"CTRLLMHeadModel"),aKr.forEach(t),r1o=r(B0e," (CTRL model)"),B0e.forEach(t),t1o=i(V),Xp=n(V,"LI",{});var P0e=s(Xp);lle=n(P0e,"STRONG",{});var nKr=s(lle);a1o=r(nKr,"data2vec-text"),nKr.forEach(t),n1o=r(P0e," \u2014 "),jq=n(P0e,"A",{href:!0});var sKr=s(jq);s1o=r(sKr,"Data2VecTextForMaskedLM"),sKr.forEach(t),l1o=r(P0e," (Data2VecText model)"),P0e.forEach(t),i1o=i(V),zp=n(V,"LI",{});var I0e=s(zp);ile=n(I0e,"STRONG",{});var lKr=s(ile);d1o=r(lKr,"deberta"),lKr.forEach(t),c1o=r(I0e," \u2014 "),Dq=n(I0e,"A",{href:!0});var iKr=s(Dq);m1o=r(iKr,"DebertaForMaskedLM"),iKr.forEach(t),f1o=r(I0e," (DeBERTa model)"),I0e.forEach(t),g1o=i(V),Qp=n(V,"LI",{});var q0e=s(Qp);dle=n(q0e,"STRONG",{});var dKr=s(dle);h1o=r(dKr,"deberta-v2"),dKr.forEach(t),u1o=r(q0e," \u2014 "),Gq=n(q0e,"A",{href:!0});var cKr=s(Gq);p1o=r(cKr,"DebertaV2ForMaskedLM"),cKr.forEach(t),_1o=r(q0e," (DeBERTa-v2 model)"),q0e.forEach(t),b1o=i(V),Wp=n(V,"LI",{});var N0e=s(Wp);cle=n(N0e,"STRONG",{});var mKr=s(cle);F1o=r(mKr,"distilbert"),mKr.forEach(t),v1o=r(N0e," \u2014 "),Oq=n(N0e,"A",{href:!0});var fKr=s(Oq);T1o=r(fKr,"DistilBertForMaskedLM"),fKr.forEach(t),M1o=r(N0e," (DistilBERT model)"),N0e.forEach(t),E1o=i(V),Hp=n(V,"LI",{});var j0e=s(Hp);mle=n(j0e,"STRONG",{});var gKr=s(mle);C1o=r(gKr,"electra"),gKr.forEach(t),w1o=r(j0e," \u2014 "),Vq=n(j0e,"A",{href:!0});var hKr=s(Vq);A1o=r(hKr,"ElectraForPreTraining"),hKr.forEach(t),y1o=r(j0e," (ELECTRA model)"),j0e.forEach(t),L1o=i(V),Up=n(V,"LI",{});var D0e=s(Up);fle=n(D0e,"STRONG",{});var uKr=s(fle);x1o=r(uKr,"flaubert"),uKr.forEach(t),$1o=r(D0e," \u2014 "),Xq=n(D0e,"A",{href:!0});var pKr=s(Xq);k1o=r(pKr,"FlaubertWithLMHeadModel"),pKr.forEach(t),S1o=r(D0e," (FlauBERT model)"),D0e.forEach(t),R1o=i(V),Jp=n(V,"LI",{});var G0e=s(Jp);gle=n(G0e,"STRONG",{});var _Kr=s(gle);B1o=r(_Kr,"flava"),_Kr.forEach(t),P1o=r(G0e," \u2014 "),zq=n(G0e,"A",{href:!0});var bKr=s(zq);I1o=r(bKr,"FlavaForPreTraining"),bKr.forEach(t),q1o=r(G0e," (Flava model)"),G0e.forEach(t),N1o=i(V),Yp=n(V,"LI",{});var O0e=s(Yp);hle=n(O0e,"STRONG",{});var FKr=s(hle);j1o=r(FKr,"fnet"),FKr.forEach(t),D1o=r(O0e," \u2014 "),Qq=n(O0e,"A",{href:!0});var vKr=s(Qq);G1o=r(vKr,"FNetForPreTraining"),vKr.forEach(t),O1o=r(O0e," (FNet model)"),O0e.forEach(t),V1o=i(V),Kp=n(V,"LI",{});var V0e=s(Kp);ule=n(V0e,"STRONG",{});var TKr=s(ule);X1o=r(TKr,"fsmt"),TKr.forEach(t),z1o=r(V0e," \u2014 "),Wq=n(V0e,"A",{href:!0});var MKr=s(Wq);Q1o=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),W1o=r(V0e," (FairSeq Machine-Translation model)"),V0e.forEach(t),H1o=i(V),Zp=n(V,"LI",{});var X0e=s(Zp);ple=n(X0e,"STRONG",{});var EKr=s(ple);U1o=r(EKr,"funnel"),EKr.forEach(t),J1o=r(X0e," \u2014 "),Hq=n(X0e,"A",{href:!0});var CKr=s(Hq);Y1o=r(CKr,"FunnelForPreTraining"),CKr.forEach(t),K1o=r(X0e," (Funnel Transformer model)"),X0e.forEach(t),Z1o=i(V),e_=n(V,"LI",{});var z0e=s(e_);_le=n(z0e,"STRONG",{});var wKr=s(_le);eTo=r(wKr,"gpt2"),wKr.forEach(t),oTo=r(z0e," \u2014 "),Uq=n(z0e,"A",{href:!0});var AKr=s(Uq);rTo=r(AKr,"GPT2LMHeadModel"),AKr.forEach(t),tTo=r(z0e," (OpenAI GPT-2 model)"),z0e.forEach(t),aTo=i(V),o_=n(V,"LI",{});var Q0e=s(o_);ble=n(Q0e,"STRONG",{});var yKr=s(ble);nTo=r(yKr,"ibert"),yKr.forEach(t),sTo=r(Q0e," \u2014 "),Jq=n(Q0e,"A",{href:!0});var LKr=s(Jq);lTo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),iTo=r(Q0e," (I-BERT model)"),Q0e.forEach(t),dTo=i(V),r_=n(V,"LI",{});var W0e=s(r_);Fle=n(W0e,"STRONG",{});var xKr=s(Fle);cTo=r(xKr,"layoutlm"),xKr.forEach(t),mTo=r(W0e," \u2014 "),Yq=n(W0e,"A",{href:!0});var $Kr=s(Yq);fTo=r($Kr,"LayoutLMForMaskedLM"),$Kr.forEach(t),gTo=r(W0e," (LayoutLM model)"),W0e.forEach(t),hTo=i(V),t_=n(V,"LI",{});var H0e=s(t_);vle=n(H0e,"STRONG",{});var kKr=s(vle);uTo=r(kKr,"longformer"),kKr.forEach(t),pTo=r(H0e," \u2014 "),Kq=n(H0e,"A",{href:!0});var SKr=s(Kq);_To=r(SKr,"LongformerForMaskedLM"),SKr.forEach(t),bTo=r(H0e," (Longformer model)"),H0e.forEach(t),FTo=i(V),a_=n(V,"LI",{});var U0e=s(a_);Tle=n(U0e,"STRONG",{});var RKr=s(Tle);vTo=r(RKr,"lxmert"),RKr.forEach(t),TTo=r(U0e," \u2014 "),Zq=n(U0e,"A",{href:!0});var BKr=s(Zq);MTo=r(BKr,"LxmertForPreTraining"),BKr.forEach(t),ETo=r(U0e," (LXMERT model)"),U0e.forEach(t),CTo=i(V),n_=n(V,"LI",{});var J0e=s(n_);Mle=n(J0e,"STRONG",{});var PKr=s(Mle);wTo=r(PKr,"megatron-bert"),PKr.forEach(t),ATo=r(J0e," \u2014 "),eN=n(J0e,"A",{href:!0});var IKr=s(eN);yTo=r(IKr,"MegatronBertForPreTraining"),IKr.forEach(t),LTo=r(J0e," (MegatronBert model)"),J0e.forEach(t),xTo=i(V),s_=n(V,"LI",{});var Y0e=s(s_);Ele=n(Y0e,"STRONG",{});var qKr=s(Ele);$To=r(qKr,"mobilebert"),qKr.forEach(t),kTo=r(Y0e," \u2014 "),oN=n(Y0e,"A",{href:!0});var NKr=s(oN);STo=r(NKr,"MobileBertForPreTraining"),NKr.forEach(t),RTo=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),BTo=i(V),l_=n(V,"LI",{});var K0e=s(l_);Cle=n(K0e,"STRONG",{});var jKr=s(Cle);PTo=r(jKr,"mpnet"),jKr.forEach(t),ITo=r(K0e," \u2014 "),rN=n(K0e,"A",{href:!0});var DKr=s(rN);qTo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),NTo=r(K0e," (MPNet model)"),K0e.forEach(t),jTo=i(V),i_=n(V,"LI",{});var Z0e=s(i_);wle=n(Z0e,"STRONG",{});var GKr=s(wle);DTo=r(GKr,"openai-gpt"),GKr.forEach(t),GTo=r(Z0e," \u2014 "),tN=n(Z0e,"A",{href:!0});var OKr=s(tN);OTo=r(OKr,"OpenAIGPTLMHeadModel"),OKr.forEach(t),VTo=r(Z0e," (OpenAI GPT model)"),Z0e.forEach(t),XTo=i(V),d_=n(V,"LI",{});var eye=s(d_);Ale=n(eye,"STRONG",{});var VKr=s(Ale);zTo=r(VKr,"retribert"),VKr.forEach(t),QTo=r(eye," \u2014 "),aN=n(eye,"A",{href:!0});var XKr=s(aN);WTo=r(XKr,"RetriBertModel"),XKr.forEach(t),HTo=r(eye," (RetriBERT model)"),eye.forEach(t),UTo=i(V),c_=n(V,"LI",{});var oye=s(c_);yle=n(oye,"STRONG",{});var zKr=s(yle);JTo=r(zKr,"roberta"),zKr.forEach(t),YTo=r(oye," \u2014 "),nN=n(oye,"A",{href:!0});var QKr=s(nN);KTo=r(QKr,"RobertaForMaskedLM"),QKr.forEach(t),ZTo=r(oye," (RoBERTa model)"),oye.forEach(t),eMo=i(V),m_=n(V,"LI",{});var rye=s(m_);Lle=n(rye,"STRONG",{});var WKr=s(Lle);oMo=r(WKr,"squeezebert"),WKr.forEach(t),rMo=r(rye," \u2014 "),sN=n(rye,"A",{href:!0});var HKr=s(sN);tMo=r(HKr,"SqueezeBertForMaskedLM"),HKr.forEach(t),aMo=r(rye," (SqueezeBERT model)"),rye.forEach(t),nMo=i(V),f_=n(V,"LI",{});var tye=s(f_);xle=n(tye,"STRONG",{});var UKr=s(xle);sMo=r(UKr,"t5"),UKr.forEach(t),lMo=r(tye," \u2014 "),lN=n(tye,"A",{href:!0});var JKr=s(lN);iMo=r(JKr,"T5ForConditionalGeneration"),JKr.forEach(t),dMo=r(tye," (T5 model)"),tye.forEach(t),cMo=i(V),g_=n(V,"LI",{});var aye=s(g_);$le=n(aye,"STRONG",{});var YKr=s($le);mMo=r(YKr,"tapas"),YKr.forEach(t),fMo=r(aye," \u2014 "),iN=n(aye,"A",{href:!0});var KKr=s(iN);gMo=r(KKr,"TapasForMaskedLM"),KKr.forEach(t),hMo=r(aye," (TAPAS model)"),aye.forEach(t),uMo=i(V),h_=n(V,"LI",{});var nye=s(h_);kle=n(nye,"STRONG",{});var ZKr=s(kle);pMo=r(ZKr,"transfo-xl"),ZKr.forEach(t),_Mo=r(nye," \u2014 "),dN=n(nye,"A",{href:!0});var eZr=s(dN);bMo=r(eZr,"TransfoXLLMHeadModel"),eZr.forEach(t),FMo=r(nye," (Transformer-XL model)"),nye.forEach(t),vMo=i(V),u_=n(V,"LI",{});var sye=s(u_);Sle=n(sye,"STRONG",{});var oZr=s(Sle);TMo=r(oZr,"unispeech"),oZr.forEach(t),MMo=r(sye," \u2014 "),cN=n(sye,"A",{href:!0});var rZr=s(cN);EMo=r(rZr,"UniSpeechForPreTraining"),rZr.forEach(t),CMo=r(sye," (UniSpeech model)"),sye.forEach(t),wMo=i(V),p_=n(V,"LI",{});var lye=s(p_);Rle=n(lye,"STRONG",{});var tZr=s(Rle);AMo=r(tZr,"unispeech-sat"),tZr.forEach(t),yMo=r(lye," \u2014 "),mN=n(lye,"A",{href:!0});var aZr=s(mN);LMo=r(aZr,"UniSpeechSatForPreTraining"),aZr.forEach(t),xMo=r(lye," (UniSpeechSat model)"),lye.forEach(t),$Mo=i(V),__=n(V,"LI",{});var iye=s(__);Ble=n(iye,"STRONG",{});var nZr=s(Ble);kMo=r(nZr,"visual_bert"),nZr.forEach(t),SMo=r(iye," \u2014 "),fN=n(iye,"A",{href:!0});var sZr=s(fN);RMo=r(sZr,"VisualBertForPreTraining"),sZr.forEach(t),BMo=r(iye," (VisualBert model)"),iye.forEach(t),PMo=i(V),b_=n(V,"LI",{});var dye=s(b_);Ple=n(dye,"STRONG",{});var lZr=s(Ple);IMo=r(lZr,"vit_mae"),lZr.forEach(t),qMo=r(dye," \u2014 "),gN=n(dye,"A",{href:!0});var iZr=s(gN);NMo=r(iZr,"ViTMAEForPreTraining"),iZr.forEach(t),jMo=r(dye," (ViTMAE model)"),dye.forEach(t),DMo=i(V),F_=n(V,"LI",{});var cye=s(F_);Ile=n(cye,"STRONG",{});var dZr=s(Ile);GMo=r(dZr,"wav2vec2"),dZr.forEach(t),OMo=r(cye," \u2014 "),hN=n(cye,"A",{href:!0});var cZr=s(hN);VMo=r(cZr,"Wav2Vec2ForPreTraining"),cZr.forEach(t),XMo=r(cye," (Wav2Vec2 model)"),cye.forEach(t),zMo=i(V),v_=n(V,"LI",{});var mye=s(v_);qle=n(mye,"STRONG",{});var mZr=s(qle);QMo=r(mZr,"xlm"),mZr.forEach(t),WMo=r(mye," \u2014 "),uN=n(mye,"A",{href:!0});var fZr=s(uN);HMo=r(fZr,"XLMWithLMHeadModel"),fZr.forEach(t),UMo=r(mye," (XLM model)"),mye.forEach(t),JMo=i(V),T_=n(V,"LI",{});var fye=s(T_);Nle=n(fye,"STRONG",{});var gZr=s(Nle);YMo=r(gZr,"xlm-roberta"),gZr.forEach(t),KMo=r(fye," \u2014 "),pN=n(fye,"A",{href:!0});var hZr=s(pN);ZMo=r(hZr,"XLMRobertaForMaskedLM"),hZr.forEach(t),e4o=r(fye," (XLM-RoBERTa model)"),fye.forEach(t),o4o=i(V),M_=n(V,"LI",{});var gye=s(M_);jle=n(gye,"STRONG",{});var uZr=s(jle);r4o=r(uZr,"xlm-roberta-xl"),uZr.forEach(t),t4o=r(gye," \u2014 "),_N=n(gye,"A",{href:!0});var pZr=s(_N);a4o=r(pZr,"XLMRobertaXLForMaskedLM"),pZr.forEach(t),n4o=r(gye," (XLM-RoBERTa-XL model)"),gye.forEach(t),s4o=i(V),E_=n(V,"LI",{});var hye=s(E_);Dle=n(hye,"STRONG",{});var _Zr=s(Dle);l4o=r(_Zr,"xlnet"),_Zr.forEach(t),i4o=r(hye," \u2014 "),bN=n(hye,"A",{href:!0});var bZr=s(bN);d4o=r(bZr,"XLNetLMHeadModel"),bZr.forEach(t),c4o=r(hye," (XLNet model)"),hye.forEach(t),V.forEach(t),m4o=i(ea),C_=n(ea,"P",{});var uye=s(C_);f4o=r(uye,"The model is set in evaluation mode by default using "),Gle=n(uye,"CODE",{});var FZr=s(Gle);g4o=r(FZr,"model.eval()"),FZr.forEach(t),h4o=r(uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(uye,"CODE",{});var vZr=s(Ole);u4o=r(vZr,"model.train()"),vZr.forEach(t),uye.forEach(t),p4o=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),rIe=i(m),Li=n(m,"H2",{class:!0});var sNe=s(Li);A_=n(sNe,"A",{id:!0,class:!0,href:!0});var TZr=s(A_);Vle=n(TZr,"SPAN",{});var MZr=s(Vle);T(Ry.$$.fragment,MZr),MZr.forEach(t),TZr.forEach(t),_4o=i(sNe),Xle=n(sNe,"SPAN",{});var EZr=s(Xle);b4o=r(EZr,"AutoModelForCausalLM"),EZr.forEach(t),sNe.forEach(t),tIe=i(m),$o=n(m,"DIV",{class:!0});var Os=s($o);T(By.$$.fragment,Os),F4o=i(Os),xi=n(Os,"P",{});var mK=s(xi);v4o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FN=n(mK,"A",{href:!0});var CZr=s(FN);T4o=r(CZr,"from_pretrained()"),CZr.forEach(t),M4o=r(mK," class method or the "),vN=n(mK,"A",{href:!0});var wZr=s(vN);E4o=r(wZr,"from_config()"),wZr.forEach(t),C4o=r(mK,` class
method.`),mK.forEach(t),w4o=i(Os),Py=n(Os,"P",{});var lNe=s(Py);A4o=r(lNe,"This class cannot be instantiated directly using "),zle=n(lNe,"CODE",{});var AZr=s(zle);y4o=r(AZr,"__init__()"),AZr.forEach(t),L4o=r(lNe," (throws an error)."),lNe.forEach(t),x4o=i(Os),tt=n(Os,"DIV",{class:!0});var t6=s(tt);T(Iy.$$.fragment,t6),$4o=i(t6),Qle=n(t6,"P",{});var yZr=s(Qle);k4o=r(yZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yZr.forEach(t),S4o=i(t6),$i=n(t6,"P",{});var fK=s($i);R4o=r(fK,`Note:
Loading a model from its configuration file does `),Wle=n(fK,"STRONG",{});var LZr=s(Wle);B4o=r(LZr,"not"),LZr.forEach(t),P4o=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(fK,"A",{href:!0});var xZr=s(TN);I4o=r(xZr,"from_pretrained()"),xZr.forEach(t),q4o=r(fK," to load the model weights."),fK.forEach(t),N4o=i(t6),T(y_.$$.fragment,t6),t6.forEach(t),j4o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(qy.$$.fragment,oa),D4o=i(oa),Hle=n(oa,"P",{});var $Zr=s(Hle);G4o=r($Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Zr.forEach(t),O4o=i(oa),La=n(oa,"P",{});var a6=s(La);V4o=r(a6,"The model class to instantiate is selected based on the "),Ule=n(a6,"CODE",{});var kZr=s(Ule);X4o=r(kZr,"model_type"),kZr.forEach(t),z4o=r(a6,` property of the config object (either
passed as an argument or loaded from `),Jle=n(a6,"CODE",{});var SZr=s(Jle);Q4o=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),W4o=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(a6,"CODE",{});var RZr=s(Yle);H4o=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),U4o=r(a6,":"),a6.forEach(t),J4o=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var pye=s(L_);Kle=n(pye,"STRONG",{});var BZr=s(Kle);Y4o=r(BZr,"bart"),BZr.forEach(t),K4o=r(pye," \u2014 "),MN=n(pye,"A",{href:!0});var PZr=s(MN);Z4o=r(PZr,"BartForCausalLM"),PZr.forEach(t),eEo=r(pye," (BART model)"),pye.forEach(t),oEo=i(W),x_=n(W,"LI",{});var _ye=s(x_);Zle=n(_ye,"STRONG",{});var IZr=s(Zle);rEo=r(IZr,"bert"),IZr.forEach(t),tEo=r(_ye," \u2014 "),EN=n(_ye,"A",{href:!0});var qZr=s(EN);aEo=r(qZr,"BertLMHeadModel"),qZr.forEach(t),nEo=r(_ye," (BERT model)"),_ye.forEach(t),sEo=i(W),$_=n(W,"LI",{});var bye=s($_);eie=n(bye,"STRONG",{});var NZr=s(eie);lEo=r(NZr,"bert-generation"),NZr.forEach(t),iEo=r(bye," \u2014 "),CN=n(bye,"A",{href:!0});var jZr=s(CN);dEo=r(jZr,"BertGenerationDecoder"),jZr.forEach(t),cEo=r(bye," (Bert Generation model)"),bye.forEach(t),mEo=i(W),k_=n(W,"LI",{});var Fye=s(k_);oie=n(Fye,"STRONG",{});var DZr=s(oie);fEo=r(DZr,"big_bird"),DZr.forEach(t),gEo=r(Fye," \u2014 "),wN=n(Fye,"A",{href:!0});var GZr=s(wN);hEo=r(GZr,"BigBirdForCausalLM"),GZr.forEach(t),uEo=r(Fye," (BigBird model)"),Fye.forEach(t),pEo=i(W),S_=n(W,"LI",{});var vye=s(S_);rie=n(vye,"STRONG",{});var OZr=s(rie);_Eo=r(OZr,"bigbird_pegasus"),OZr.forEach(t),bEo=r(vye," \u2014 "),AN=n(vye,"A",{href:!0});var VZr=s(AN);FEo=r(VZr,"BigBirdPegasusForCausalLM"),VZr.forEach(t),vEo=r(vye," (BigBirdPegasus model)"),vye.forEach(t),TEo=i(W),R_=n(W,"LI",{});var Tye=s(R_);tie=n(Tye,"STRONG",{});var XZr=s(tie);MEo=r(XZr,"blenderbot"),XZr.forEach(t),EEo=r(Tye," \u2014 "),yN=n(Tye,"A",{href:!0});var zZr=s(yN);CEo=r(zZr,"BlenderbotForCausalLM"),zZr.forEach(t),wEo=r(Tye," (Blenderbot model)"),Tye.forEach(t),AEo=i(W),B_=n(W,"LI",{});var Mye=s(B_);aie=n(Mye,"STRONG",{});var QZr=s(aie);yEo=r(QZr,"blenderbot-small"),QZr.forEach(t),LEo=r(Mye," \u2014 "),LN=n(Mye,"A",{href:!0});var WZr=s(LN);xEo=r(WZr,"BlenderbotSmallForCausalLM"),WZr.forEach(t),$Eo=r(Mye," (BlenderbotSmall model)"),Mye.forEach(t),kEo=i(W),P_=n(W,"LI",{});var Eye=s(P_);nie=n(Eye,"STRONG",{});var HZr=s(nie);SEo=r(HZr,"camembert"),HZr.forEach(t),REo=r(Eye," \u2014 "),xN=n(Eye,"A",{href:!0});var UZr=s(xN);BEo=r(UZr,"CamembertForCausalLM"),UZr.forEach(t),PEo=r(Eye," (CamemBERT model)"),Eye.forEach(t),IEo=i(W),I_=n(W,"LI",{});var Cye=s(I_);sie=n(Cye,"STRONG",{});var JZr=s(sie);qEo=r(JZr,"ctrl"),JZr.forEach(t),NEo=r(Cye," \u2014 "),$N=n(Cye,"A",{href:!0});var YZr=s($N);jEo=r(YZr,"CTRLLMHeadModel"),YZr.forEach(t),DEo=r(Cye," (CTRL model)"),Cye.forEach(t),GEo=i(W),q_=n(W,"LI",{});var wye=s(q_);lie=n(wye,"STRONG",{});var KZr=s(lie);OEo=r(KZr,"data2vec-text"),KZr.forEach(t),VEo=r(wye," \u2014 "),kN=n(wye,"A",{href:!0});var ZZr=s(kN);XEo=r(ZZr,"Data2VecTextForCausalLM"),ZZr.forEach(t),zEo=r(wye," (Data2VecText model)"),wye.forEach(t),QEo=i(W),N_=n(W,"LI",{});var Aye=s(N_);iie=n(Aye,"STRONG",{});var eet=s(iie);WEo=r(eet,"electra"),eet.forEach(t),HEo=r(Aye," \u2014 "),SN=n(Aye,"A",{href:!0});var oet=s(SN);UEo=r(oet,"ElectraForCausalLM"),oet.forEach(t),JEo=r(Aye," (ELECTRA model)"),Aye.forEach(t),YEo=i(W),j_=n(W,"LI",{});var yye=s(j_);die=n(yye,"STRONG",{});var ret=s(die);KEo=r(ret,"gpt2"),ret.forEach(t),ZEo=r(yye," \u2014 "),RN=n(yye,"A",{href:!0});var tet=s(RN);e5o=r(tet,"GPT2LMHeadModel"),tet.forEach(t),o5o=r(yye," (OpenAI GPT-2 model)"),yye.forEach(t),r5o=i(W),D_=n(W,"LI",{});var Lye=s(D_);cie=n(Lye,"STRONG",{});var aet=s(cie);t5o=r(aet,"gpt_neo"),aet.forEach(t),a5o=r(Lye," \u2014 "),BN=n(Lye,"A",{href:!0});var net=s(BN);n5o=r(net,"GPTNeoForCausalLM"),net.forEach(t),s5o=r(Lye," (GPT Neo model)"),Lye.forEach(t),l5o=i(W),G_=n(W,"LI",{});var xye=s(G_);mie=n(xye,"STRONG",{});var set=s(mie);i5o=r(set,"gptj"),set.forEach(t),d5o=r(xye," \u2014 "),PN=n(xye,"A",{href:!0});var iet=s(PN);c5o=r(iet,"GPTJForCausalLM"),iet.forEach(t),m5o=r(xye," (GPT-J model)"),xye.forEach(t),f5o=i(W),O_=n(W,"LI",{});var $ye=s(O_);fie=n($ye,"STRONG",{});var det=s(fie);g5o=r(det,"marian"),det.forEach(t),h5o=r($ye," \u2014 "),IN=n($ye,"A",{href:!0});var cet=s(IN);u5o=r(cet,"MarianForCausalLM"),cet.forEach(t),p5o=r($ye," (Marian model)"),$ye.forEach(t),_5o=i(W),V_=n(W,"LI",{});var kye=s(V_);gie=n(kye,"STRONG",{});var met=s(gie);b5o=r(met,"mbart"),met.forEach(t),F5o=r(kye," \u2014 "),qN=n(kye,"A",{href:!0});var fet=s(qN);v5o=r(fet,"MBartForCausalLM"),fet.forEach(t),T5o=r(kye," (mBART model)"),kye.forEach(t),M5o=i(W),X_=n(W,"LI",{});var Sye=s(X_);hie=n(Sye,"STRONG",{});var get=s(hie);E5o=r(get,"megatron-bert"),get.forEach(t),C5o=r(Sye," \u2014 "),NN=n(Sye,"A",{href:!0});var het=s(NN);w5o=r(het,"MegatronBertForCausalLM"),het.forEach(t),A5o=r(Sye," (MegatronBert model)"),Sye.forEach(t),y5o=i(W),z_=n(W,"LI",{});var Rye=s(z_);uie=n(Rye,"STRONG",{});var uet=s(uie);L5o=r(uet,"openai-gpt"),uet.forEach(t),x5o=r(Rye," \u2014 "),jN=n(Rye,"A",{href:!0});var pet=s(jN);$5o=r(pet,"OpenAIGPTLMHeadModel"),pet.forEach(t),k5o=r(Rye," (OpenAI GPT model)"),Rye.forEach(t),S5o=i(W),Q_=n(W,"LI",{});var Bye=s(Q_);pie=n(Bye,"STRONG",{});var _et=s(pie);R5o=r(_et,"opt"),_et.forEach(t),B5o=r(Bye," \u2014 "),DN=n(Bye,"A",{href:!0});var bet=s(DN);P5o=r(bet,"OPTForCausalLM"),bet.forEach(t),I5o=r(Bye," (OPT model)"),Bye.forEach(t),q5o=i(W),W_=n(W,"LI",{});var Pye=s(W_);_ie=n(Pye,"STRONG",{});var Fet=s(_ie);N5o=r(Fet,"pegasus"),Fet.forEach(t),j5o=r(Pye," \u2014 "),GN=n(Pye,"A",{href:!0});var vet=s(GN);D5o=r(vet,"PegasusForCausalLM"),vet.forEach(t),G5o=r(Pye," (Pegasus model)"),Pye.forEach(t),O5o=i(W),H_=n(W,"LI",{});var Iye=s(H_);bie=n(Iye,"STRONG",{});var Tet=s(bie);V5o=r(Tet,"plbart"),Tet.forEach(t),X5o=r(Iye," \u2014 "),ON=n(Iye,"A",{href:!0});var Met=s(ON);z5o=r(Met,"PLBartForCausalLM"),Met.forEach(t),Q5o=r(Iye," (PLBart model)"),Iye.forEach(t),W5o=i(W),U_=n(W,"LI",{});var qye=s(U_);Fie=n(qye,"STRONG",{});var Eet=s(Fie);H5o=r(Eet,"prophetnet"),Eet.forEach(t),U5o=r(qye," \u2014 "),VN=n(qye,"A",{href:!0});var Cet=s(VN);J5o=r(Cet,"ProphetNetForCausalLM"),Cet.forEach(t),Y5o=r(qye," (ProphetNet model)"),qye.forEach(t),K5o=i(W),J_=n(W,"LI",{});var Nye=s(J_);vie=n(Nye,"STRONG",{});var wet=s(vie);Z5o=r(wet,"qdqbert"),wet.forEach(t),eCo=r(Nye," \u2014 "),XN=n(Nye,"A",{href:!0});var Aet=s(XN);oCo=r(Aet,"QDQBertLMHeadModel"),Aet.forEach(t),rCo=r(Nye," (QDQBert model)"),Nye.forEach(t),tCo=i(W),Y_=n(W,"LI",{});var jye=s(Y_);Tie=n(jye,"STRONG",{});var yet=s(Tie);aCo=r(yet,"reformer"),yet.forEach(t),nCo=r(jye," \u2014 "),zN=n(jye,"A",{href:!0});var Let=s(zN);sCo=r(Let,"ReformerModelWithLMHead"),Let.forEach(t),lCo=r(jye," (Reformer model)"),jye.forEach(t),iCo=i(W),K_=n(W,"LI",{});var Dye=s(K_);Mie=n(Dye,"STRONG",{});var xet=s(Mie);dCo=r(xet,"rembert"),xet.forEach(t),cCo=r(Dye," \u2014 "),QN=n(Dye,"A",{href:!0});var $et=s(QN);mCo=r($et,"RemBertForCausalLM"),$et.forEach(t),fCo=r(Dye," (RemBERT model)"),Dye.forEach(t),gCo=i(W),Z_=n(W,"LI",{});var Gye=s(Z_);Eie=n(Gye,"STRONG",{});var ket=s(Eie);hCo=r(ket,"roberta"),ket.forEach(t),uCo=r(Gye," \u2014 "),WN=n(Gye,"A",{href:!0});var Set=s(WN);pCo=r(Set,"RobertaForCausalLM"),Set.forEach(t),_Co=r(Gye," (RoBERTa model)"),Gye.forEach(t),bCo=i(W),eb=n(W,"LI",{});var Oye=s(eb);Cie=n(Oye,"STRONG",{});var Ret=s(Cie);FCo=r(Ret,"roformer"),Ret.forEach(t),vCo=r(Oye," \u2014 "),HN=n(Oye,"A",{href:!0});var Bet=s(HN);TCo=r(Bet,"RoFormerForCausalLM"),Bet.forEach(t),MCo=r(Oye," (RoFormer model)"),Oye.forEach(t),ECo=i(W),ob=n(W,"LI",{});var Vye=s(ob);wie=n(Vye,"STRONG",{});var Pet=s(wie);CCo=r(Pet,"speech_to_text_2"),Pet.forEach(t),wCo=r(Vye," \u2014 "),UN=n(Vye,"A",{href:!0});var Iet=s(UN);ACo=r(Iet,"Speech2Text2ForCausalLM"),Iet.forEach(t),yCo=r(Vye," (Speech2Text2 model)"),Vye.forEach(t),LCo=i(W),rb=n(W,"LI",{});var Xye=s(rb);Aie=n(Xye,"STRONG",{});var qet=s(Aie);xCo=r(qet,"transfo-xl"),qet.forEach(t),$Co=r(Xye," \u2014 "),JN=n(Xye,"A",{href:!0});var Net=s(JN);kCo=r(Net,"TransfoXLLMHeadModel"),Net.forEach(t),SCo=r(Xye," (Transformer-XL model)"),Xye.forEach(t),RCo=i(W),tb=n(W,"LI",{});var zye=s(tb);yie=n(zye,"STRONG",{});var jet=s(yie);BCo=r(jet,"trocr"),jet.forEach(t),PCo=r(zye," \u2014 "),YN=n(zye,"A",{href:!0});var Det=s(YN);ICo=r(Det,"TrOCRForCausalLM"),Det.forEach(t),qCo=r(zye," (TrOCR model)"),zye.forEach(t),NCo=i(W),ab=n(W,"LI",{});var Qye=s(ab);Lie=n(Qye,"STRONG",{});var Get=s(Lie);jCo=r(Get,"xglm"),Get.forEach(t),DCo=r(Qye," \u2014 "),KN=n(Qye,"A",{href:!0});var Oet=s(KN);GCo=r(Oet,"XGLMForCausalLM"),Oet.forEach(t),OCo=r(Qye," (XGLM model)"),Qye.forEach(t),VCo=i(W),nb=n(W,"LI",{});var Wye=s(nb);xie=n(Wye,"STRONG",{});var Vet=s(xie);XCo=r(Vet,"xlm"),Vet.forEach(t),zCo=r(Wye," \u2014 "),ZN=n(Wye,"A",{href:!0});var Xet=s(ZN);QCo=r(Xet,"XLMWithLMHeadModel"),Xet.forEach(t),WCo=r(Wye," (XLM model)"),Wye.forEach(t),HCo=i(W),sb=n(W,"LI",{});var Hye=s(sb);$ie=n(Hye,"STRONG",{});var zet=s($ie);UCo=r(zet,"xlm-prophetnet"),zet.forEach(t),JCo=r(Hye," \u2014 "),ej=n(Hye,"A",{href:!0});var Qet=s(ej);YCo=r(Qet,"XLMProphetNetForCausalLM"),Qet.forEach(t),KCo=r(Hye," (XLMProphetNet model)"),Hye.forEach(t),ZCo=i(W),lb=n(W,"LI",{});var Uye=s(lb);kie=n(Uye,"STRONG",{});var Wet=s(kie);e3o=r(Wet,"xlm-roberta"),Wet.forEach(t),o3o=r(Uye," \u2014 "),oj=n(Uye,"A",{href:!0});var Het=s(oj);r3o=r(Het,"XLMRobertaForCausalLM"),Het.forEach(t),t3o=r(Uye," (XLM-RoBERTa model)"),Uye.forEach(t),a3o=i(W),ib=n(W,"LI",{});var Jye=s(ib);Sie=n(Jye,"STRONG",{});var Uet=s(Sie);n3o=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),s3o=r(Jye," \u2014 "),rj=n(Jye,"A",{href:!0});var Jet=s(rj);l3o=r(Jet,"XLMRobertaXLForCausalLM"),Jet.forEach(t),i3o=r(Jye," (XLM-RoBERTa-XL model)"),Jye.forEach(t),d3o=i(W),db=n(W,"LI",{});var Yye=s(db);Rie=n(Yye,"STRONG",{});var Yet=s(Rie);c3o=r(Yet,"xlnet"),Yet.forEach(t),m3o=r(Yye," \u2014 "),tj=n(Yye,"A",{href:!0});var Ket=s(tj);f3o=r(Ket,"XLNetLMHeadModel"),Ket.forEach(t),g3o=r(Yye," (XLNet model)"),Yye.forEach(t),W.forEach(t),h3o=i(oa),cb=n(oa,"P",{});var Kye=s(cb);u3o=r(Kye,"The model is set in evaluation mode by default using "),Bie=n(Kye,"CODE",{});var Zet=s(Bie);p3o=r(Zet,"model.eval()"),Zet.forEach(t),_3o=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(Kye,"CODE",{});var eot=s(Pie);b3o=r(eot,"model.train()"),eot.forEach(t),Kye.forEach(t),F3o=i(oa),T(mb.$$.fragment,oa),oa.forEach(t),Os.forEach(t),aIe=i(m),ki=n(m,"H2",{class:!0});var iNe=s(ki);fb=n(iNe,"A",{id:!0,class:!0,href:!0});var oot=s(fb);Iie=n(oot,"SPAN",{});var rot=s(Iie);T(Ny.$$.fragment,rot),rot.forEach(t),oot.forEach(t),v3o=i(iNe),qie=n(iNe,"SPAN",{});var tot=s(qie);T3o=r(tot,"AutoModelForMaskedLM"),tot.forEach(t),iNe.forEach(t),nIe=i(m),ko=n(m,"DIV",{class:!0});var Vs=s(ko);T(jy.$$.fragment,Vs),M3o=i(Vs),Si=n(Vs,"P",{});var gK=s(Si);E3o=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=n(gK,"A",{href:!0});var aot=s(aj);C3o=r(aot,"from_pretrained()"),aot.forEach(t),w3o=r(gK," class method or the "),nj=n(gK,"A",{href:!0});var not=s(nj);A3o=r(not,"from_config()"),not.forEach(t),y3o=r(gK,` class
method.`),gK.forEach(t),L3o=i(Vs),Dy=n(Vs,"P",{});var dNe=s(Dy);x3o=r(dNe,"This class cannot be instantiated directly using "),Nie=n(dNe,"CODE",{});var sot=s(Nie);$3o=r(sot,"__init__()"),sot.forEach(t),k3o=r(dNe," (throws an error)."),dNe.forEach(t),S3o=i(Vs),at=n(Vs,"DIV",{class:!0});var n6=s(at);T(Gy.$$.fragment,n6),R3o=i(n6),jie=n(n6,"P",{});var lot=s(jie);B3o=r(lot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lot.forEach(t),P3o=i(n6),Ri=n(n6,"P",{});var hK=s(Ri);I3o=r(hK,`Note:
Loading a model from its configuration file does `),Die=n(hK,"STRONG",{});var iot=s(Die);q3o=r(iot,"not"),iot.forEach(t),N3o=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(hK,"A",{href:!0});var dot=s(sj);j3o=r(dot,"from_pretrained()"),dot.forEach(t),D3o=r(hK," to load the model weights."),hK.forEach(t),G3o=i(n6),T(gb.$$.fragment,n6),n6.forEach(t),O3o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(Oy.$$.fragment,ra),V3o=i(ra),Gie=n(ra,"P",{});var cot=s(Gie);X3o=r(cot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cot.forEach(t),z3o=i(ra),xa=n(ra,"P",{});var s6=s(xa);Q3o=r(s6,"The model class to instantiate is selected based on the "),Oie=n(s6,"CODE",{});var mot=s(Oie);W3o=r(mot,"model_type"),mot.forEach(t),H3o=r(s6,` property of the config object (either
passed as an argument or loaded from `),Vie=n(s6,"CODE",{});var fot=s(Vie);U3o=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),J3o=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=n(s6,"CODE",{});var got=s(Xie);Y3o=r(got,"pretrained_model_name_or_path"),got.forEach(t),K3o=r(s6,":"),s6.forEach(t),Z3o=i(ra),Q=n(ra,"UL",{});var H=s(Q);hb=n(H,"LI",{});var Zye=s(hb);zie=n(Zye,"STRONG",{});var hot=s(zie);ewo=r(hot,"albert"),hot.forEach(t),owo=r(Zye," \u2014 "),lj=n(Zye,"A",{href:!0});var uot=s(lj);rwo=r(uot,"AlbertForMaskedLM"),uot.forEach(t),two=r(Zye," (ALBERT model)"),Zye.forEach(t),awo=i(H),ub=n(H,"LI",{});var eLe=s(ub);Qie=n(eLe,"STRONG",{});var pot=s(Qie);nwo=r(pot,"bart"),pot.forEach(t),swo=r(eLe," \u2014 "),ij=n(eLe,"A",{href:!0});var _ot=s(ij);lwo=r(_ot,"BartForConditionalGeneration"),_ot.forEach(t),iwo=r(eLe," (BART model)"),eLe.forEach(t),dwo=i(H),pb=n(H,"LI",{});var oLe=s(pb);Wie=n(oLe,"STRONG",{});var bot=s(Wie);cwo=r(bot,"bert"),bot.forEach(t),mwo=r(oLe," \u2014 "),dj=n(oLe,"A",{href:!0});var Fot=s(dj);fwo=r(Fot,"BertForMaskedLM"),Fot.forEach(t),gwo=r(oLe," (BERT model)"),oLe.forEach(t),hwo=i(H),_b=n(H,"LI",{});var rLe=s(_b);Hie=n(rLe,"STRONG",{});var vot=s(Hie);uwo=r(vot,"big_bird"),vot.forEach(t),pwo=r(rLe," \u2014 "),cj=n(rLe,"A",{href:!0});var Tot=s(cj);_wo=r(Tot,"BigBirdForMaskedLM"),Tot.forEach(t),bwo=r(rLe," (BigBird model)"),rLe.forEach(t),Fwo=i(H),bb=n(H,"LI",{});var tLe=s(bb);Uie=n(tLe,"STRONG",{});var Mot=s(Uie);vwo=r(Mot,"camembert"),Mot.forEach(t),Two=r(tLe," \u2014 "),mj=n(tLe,"A",{href:!0});var Eot=s(mj);Mwo=r(Eot,"CamembertForMaskedLM"),Eot.forEach(t),Ewo=r(tLe," (CamemBERT model)"),tLe.forEach(t),Cwo=i(H),Fb=n(H,"LI",{});var aLe=s(Fb);Jie=n(aLe,"STRONG",{});var Cot=s(Jie);wwo=r(Cot,"convbert"),Cot.forEach(t),Awo=r(aLe," \u2014 "),fj=n(aLe,"A",{href:!0});var wot=s(fj);ywo=r(wot,"ConvBertForMaskedLM"),wot.forEach(t),Lwo=r(aLe," (ConvBERT model)"),aLe.forEach(t),xwo=i(H),vb=n(H,"LI",{});var nLe=s(vb);Yie=n(nLe,"STRONG",{});var Aot=s(Yie);$wo=r(Aot,"data2vec-text"),Aot.forEach(t),kwo=r(nLe," \u2014 "),gj=n(nLe,"A",{href:!0});var yot=s(gj);Swo=r(yot,"Data2VecTextForMaskedLM"),yot.forEach(t),Rwo=r(nLe," (Data2VecText model)"),nLe.forEach(t),Bwo=i(H),Tb=n(H,"LI",{});var sLe=s(Tb);Kie=n(sLe,"STRONG",{});var Lot=s(Kie);Pwo=r(Lot,"deberta"),Lot.forEach(t),Iwo=r(sLe," \u2014 "),hj=n(sLe,"A",{href:!0});var xot=s(hj);qwo=r(xot,"DebertaForMaskedLM"),xot.forEach(t),Nwo=r(sLe," (DeBERTa model)"),sLe.forEach(t),jwo=i(H),Mb=n(H,"LI",{});var lLe=s(Mb);Zie=n(lLe,"STRONG",{});var $ot=s(Zie);Dwo=r($ot,"deberta-v2"),$ot.forEach(t),Gwo=r(lLe," \u2014 "),uj=n(lLe,"A",{href:!0});var kot=s(uj);Owo=r(kot,"DebertaV2ForMaskedLM"),kot.forEach(t),Vwo=r(lLe," (DeBERTa-v2 model)"),lLe.forEach(t),Xwo=i(H),Eb=n(H,"LI",{});var iLe=s(Eb);ede=n(iLe,"STRONG",{});var Sot=s(ede);zwo=r(Sot,"distilbert"),Sot.forEach(t),Qwo=r(iLe," \u2014 "),pj=n(iLe,"A",{href:!0});var Rot=s(pj);Wwo=r(Rot,"DistilBertForMaskedLM"),Rot.forEach(t),Hwo=r(iLe," (DistilBERT model)"),iLe.forEach(t),Uwo=i(H),Cb=n(H,"LI",{});var dLe=s(Cb);ode=n(dLe,"STRONG",{});var Bot=s(ode);Jwo=r(Bot,"electra"),Bot.forEach(t),Ywo=r(dLe," \u2014 "),_j=n(dLe,"A",{href:!0});var Pot=s(_j);Kwo=r(Pot,"ElectraForMaskedLM"),Pot.forEach(t),Zwo=r(dLe," (ELECTRA model)"),dLe.forEach(t),eAo=i(H),wb=n(H,"LI",{});var cLe=s(wb);rde=n(cLe,"STRONG",{});var Iot=s(rde);oAo=r(Iot,"flaubert"),Iot.forEach(t),rAo=r(cLe," \u2014 "),bj=n(cLe,"A",{href:!0});var qot=s(bj);tAo=r(qot,"FlaubertWithLMHeadModel"),qot.forEach(t),aAo=r(cLe," (FlauBERT model)"),cLe.forEach(t),nAo=i(H),Ab=n(H,"LI",{});var mLe=s(Ab);tde=n(mLe,"STRONG",{});var Not=s(tde);sAo=r(Not,"fnet"),Not.forEach(t),lAo=r(mLe," \u2014 "),Fj=n(mLe,"A",{href:!0});var jot=s(Fj);iAo=r(jot,"FNetForMaskedLM"),jot.forEach(t),dAo=r(mLe," (FNet model)"),mLe.forEach(t),cAo=i(H),yb=n(H,"LI",{});var fLe=s(yb);ade=n(fLe,"STRONG",{});var Dot=s(ade);mAo=r(Dot,"funnel"),Dot.forEach(t),fAo=r(fLe," \u2014 "),vj=n(fLe,"A",{href:!0});var Got=s(vj);gAo=r(Got,"FunnelForMaskedLM"),Got.forEach(t),hAo=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),uAo=i(H),Lb=n(H,"LI",{});var gLe=s(Lb);nde=n(gLe,"STRONG",{});var Oot=s(nde);pAo=r(Oot,"ibert"),Oot.forEach(t),_Ao=r(gLe," \u2014 "),Tj=n(gLe,"A",{href:!0});var Vot=s(Tj);bAo=r(Vot,"IBertForMaskedLM"),Vot.forEach(t),FAo=r(gLe," (I-BERT model)"),gLe.forEach(t),vAo=i(H),xb=n(H,"LI",{});var hLe=s(xb);sde=n(hLe,"STRONG",{});var Xot=s(sde);TAo=r(Xot,"layoutlm"),Xot.forEach(t),MAo=r(hLe," \u2014 "),Mj=n(hLe,"A",{href:!0});var zot=s(Mj);EAo=r(zot,"LayoutLMForMaskedLM"),zot.forEach(t),CAo=r(hLe," (LayoutLM model)"),hLe.forEach(t),wAo=i(H),$b=n(H,"LI",{});var uLe=s($b);lde=n(uLe,"STRONG",{});var Qot=s(lde);AAo=r(Qot,"longformer"),Qot.forEach(t),yAo=r(uLe," \u2014 "),Ej=n(uLe,"A",{href:!0});var Wot=s(Ej);LAo=r(Wot,"LongformerForMaskedLM"),Wot.forEach(t),xAo=r(uLe," (Longformer model)"),uLe.forEach(t),$Ao=i(H),kb=n(H,"LI",{});var pLe=s(kb);ide=n(pLe,"STRONG",{});var Hot=s(ide);kAo=r(Hot,"mbart"),Hot.forEach(t),SAo=r(pLe," \u2014 "),Cj=n(pLe,"A",{href:!0});var Uot=s(Cj);RAo=r(Uot,"MBartForConditionalGeneration"),Uot.forEach(t),BAo=r(pLe," (mBART model)"),pLe.forEach(t),PAo=i(H),Sb=n(H,"LI",{});var _Le=s(Sb);dde=n(_Le,"STRONG",{});var Jot=s(dde);IAo=r(Jot,"megatron-bert"),Jot.forEach(t),qAo=r(_Le," \u2014 "),wj=n(_Le,"A",{href:!0});var Yot=s(wj);NAo=r(Yot,"MegatronBertForMaskedLM"),Yot.forEach(t),jAo=r(_Le," (MegatronBert model)"),_Le.forEach(t),DAo=i(H),Rb=n(H,"LI",{});var bLe=s(Rb);cde=n(bLe,"STRONG",{});var Kot=s(cde);GAo=r(Kot,"mobilebert"),Kot.forEach(t),OAo=r(bLe," \u2014 "),Aj=n(bLe,"A",{href:!0});var Zot=s(Aj);VAo=r(Zot,"MobileBertForMaskedLM"),Zot.forEach(t),XAo=r(bLe," (MobileBERT model)"),bLe.forEach(t),zAo=i(H),Bb=n(H,"LI",{});var FLe=s(Bb);mde=n(FLe,"STRONG",{});var ert=s(mde);QAo=r(ert,"mpnet"),ert.forEach(t),WAo=r(FLe," \u2014 "),yj=n(FLe,"A",{href:!0});var ort=s(yj);HAo=r(ort,"MPNetForMaskedLM"),ort.forEach(t),UAo=r(FLe," (MPNet model)"),FLe.forEach(t),JAo=i(H),Pb=n(H,"LI",{});var vLe=s(Pb);fde=n(vLe,"STRONG",{});var rrt=s(fde);YAo=r(rrt,"nystromformer"),rrt.forEach(t),KAo=r(vLe," \u2014 "),Lj=n(vLe,"A",{href:!0});var trt=s(Lj);ZAo=r(trt,"NystromformerForMaskedLM"),trt.forEach(t),e6o=r(vLe," (Nystromformer model)"),vLe.forEach(t),o6o=i(H),Ib=n(H,"LI",{});var TLe=s(Ib);gde=n(TLe,"STRONG",{});var art=s(gde);r6o=r(art,"perceiver"),art.forEach(t),t6o=r(TLe," \u2014 "),xj=n(TLe,"A",{href:!0});var nrt=s(xj);a6o=r(nrt,"PerceiverForMaskedLM"),nrt.forEach(t),n6o=r(TLe," (Perceiver model)"),TLe.forEach(t),s6o=i(H),qb=n(H,"LI",{});var MLe=s(qb);hde=n(MLe,"STRONG",{});var srt=s(hde);l6o=r(srt,"qdqbert"),srt.forEach(t),i6o=r(MLe," \u2014 "),$j=n(MLe,"A",{href:!0});var lrt=s($j);d6o=r(lrt,"QDQBertForMaskedLM"),lrt.forEach(t),c6o=r(MLe," (QDQBert model)"),MLe.forEach(t),m6o=i(H),Nb=n(H,"LI",{});var ELe=s(Nb);ude=n(ELe,"STRONG",{});var irt=s(ude);f6o=r(irt,"reformer"),irt.forEach(t),g6o=r(ELe," \u2014 "),kj=n(ELe,"A",{href:!0});var drt=s(kj);h6o=r(drt,"ReformerForMaskedLM"),drt.forEach(t),u6o=r(ELe," (Reformer model)"),ELe.forEach(t),p6o=i(H),jb=n(H,"LI",{});var CLe=s(jb);pde=n(CLe,"STRONG",{});var crt=s(pde);_6o=r(crt,"rembert"),crt.forEach(t),b6o=r(CLe," \u2014 "),Sj=n(CLe,"A",{href:!0});var mrt=s(Sj);F6o=r(mrt,"RemBertForMaskedLM"),mrt.forEach(t),v6o=r(CLe," (RemBERT model)"),CLe.forEach(t),T6o=i(H),Db=n(H,"LI",{});var wLe=s(Db);_de=n(wLe,"STRONG",{});var frt=s(_de);M6o=r(frt,"roberta"),frt.forEach(t),E6o=r(wLe," \u2014 "),Rj=n(wLe,"A",{href:!0});var grt=s(Rj);C6o=r(grt,"RobertaForMaskedLM"),grt.forEach(t),w6o=r(wLe," (RoBERTa model)"),wLe.forEach(t),A6o=i(H),Gb=n(H,"LI",{});var ALe=s(Gb);bde=n(ALe,"STRONG",{});var hrt=s(bde);y6o=r(hrt,"roformer"),hrt.forEach(t),L6o=r(ALe," \u2014 "),Bj=n(ALe,"A",{href:!0});var urt=s(Bj);x6o=r(urt,"RoFormerForMaskedLM"),urt.forEach(t),$6o=r(ALe," (RoFormer model)"),ALe.forEach(t),k6o=i(H),Ob=n(H,"LI",{});var yLe=s(Ob);Fde=n(yLe,"STRONG",{});var prt=s(Fde);S6o=r(prt,"squeezebert"),prt.forEach(t),R6o=r(yLe," \u2014 "),Pj=n(yLe,"A",{href:!0});var _rt=s(Pj);B6o=r(_rt,"SqueezeBertForMaskedLM"),_rt.forEach(t),P6o=r(yLe," (SqueezeBERT model)"),yLe.forEach(t),I6o=i(H),Vb=n(H,"LI",{});var LLe=s(Vb);vde=n(LLe,"STRONG",{});var brt=s(vde);q6o=r(brt,"tapas"),brt.forEach(t),N6o=r(LLe," \u2014 "),Ij=n(LLe,"A",{href:!0});var Frt=s(Ij);j6o=r(Frt,"TapasForMaskedLM"),Frt.forEach(t),D6o=r(LLe," (TAPAS model)"),LLe.forEach(t),G6o=i(H),Xb=n(H,"LI",{});var xLe=s(Xb);Tde=n(xLe,"STRONG",{});var vrt=s(Tde);O6o=r(vrt,"wav2vec2"),vrt.forEach(t),V6o=r(xLe," \u2014 "),Mde=n(xLe,"CODE",{});var Trt=s(Mde);X6o=r(Trt,"Wav2Vec2ForMaskedLM"),Trt.forEach(t),z6o=r(xLe," (Wav2Vec2 model)"),xLe.forEach(t),Q6o=i(H),zb=n(H,"LI",{});var $Le=s(zb);Ede=n($Le,"STRONG",{});var Mrt=s(Ede);W6o=r(Mrt,"xlm"),Mrt.forEach(t),H6o=r($Le," \u2014 "),qj=n($Le,"A",{href:!0});var Ert=s(qj);U6o=r(Ert,"XLMWithLMHeadModel"),Ert.forEach(t),J6o=r($Le," (XLM model)"),$Le.forEach(t),Y6o=i(H),Qb=n(H,"LI",{});var kLe=s(Qb);Cde=n(kLe,"STRONG",{});var Crt=s(Cde);K6o=r(Crt,"xlm-roberta"),Crt.forEach(t),Z6o=r(kLe," \u2014 "),Nj=n(kLe,"A",{href:!0});var wrt=s(Nj);e0o=r(wrt,"XLMRobertaForMaskedLM"),wrt.forEach(t),o0o=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),r0o=i(H),Wb=n(H,"LI",{});var SLe=s(Wb);wde=n(SLe,"STRONG",{});var Art=s(wde);t0o=r(Art,"xlm-roberta-xl"),Art.forEach(t),a0o=r(SLe," \u2014 "),jj=n(SLe,"A",{href:!0});var yrt=s(jj);n0o=r(yrt,"XLMRobertaXLForMaskedLM"),yrt.forEach(t),s0o=r(SLe," (XLM-RoBERTa-XL model)"),SLe.forEach(t),l0o=i(H),Hb=n(H,"LI",{});var RLe=s(Hb);Ade=n(RLe,"STRONG",{});var Lrt=s(Ade);i0o=r(Lrt,"yoso"),Lrt.forEach(t),d0o=r(RLe," \u2014 "),Dj=n(RLe,"A",{href:!0});var xrt=s(Dj);c0o=r(xrt,"YosoForMaskedLM"),xrt.forEach(t),m0o=r(RLe," (YOSO model)"),RLe.forEach(t),H.forEach(t),f0o=i(ra),Ub=n(ra,"P",{});var BLe=s(Ub);g0o=r(BLe,"The model is set in evaluation mode by default using "),yde=n(BLe,"CODE",{});var $rt=s(yde);h0o=r($rt,"model.eval()"),$rt.forEach(t),u0o=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(BLe,"CODE",{});var krt=s(Lde);p0o=r(krt,"model.train()"),krt.forEach(t),BLe.forEach(t),_0o=i(ra),T(Jb.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),sIe=i(m),Bi=n(m,"H2",{class:!0});var cNe=s(Bi);Yb=n(cNe,"A",{id:!0,class:!0,href:!0});var Srt=s(Yb);xde=n(Srt,"SPAN",{});var Rrt=s(xde);T(Vy.$$.fragment,Rrt),Rrt.forEach(t),Srt.forEach(t),b0o=i(cNe),$de=n(cNe,"SPAN",{});var Brt=s($de);F0o=r(Brt,"AutoModelForSeq2SeqLM"),Brt.forEach(t),cNe.forEach(t),lIe=i(m),So=n(m,"DIV",{class:!0});var Xs=s(So);T(Xy.$$.fragment,Xs),v0o=i(Xs),Pi=n(Xs,"P",{});var uK=s(Pi);T0o=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=n(uK,"A",{href:!0});var Prt=s(Gj);M0o=r(Prt,"from_pretrained()"),Prt.forEach(t),E0o=r(uK," class method or the "),Oj=n(uK,"A",{href:!0});var Irt=s(Oj);C0o=r(Irt,"from_config()"),Irt.forEach(t),w0o=r(uK,` class
method.`),uK.forEach(t),A0o=i(Xs),zy=n(Xs,"P",{});var mNe=s(zy);y0o=r(mNe,"This class cannot be instantiated directly using "),kde=n(mNe,"CODE",{});var qrt=s(kde);L0o=r(qrt,"__init__()"),qrt.forEach(t),x0o=r(mNe," (throws an error)."),mNe.forEach(t),$0o=i(Xs),nt=n(Xs,"DIV",{class:!0});var l6=s(nt);T(Qy.$$.fragment,l6),k0o=i(l6),Sde=n(l6,"P",{});var Nrt=s(Sde);S0o=r(Nrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nrt.forEach(t),R0o=i(l6),Ii=n(l6,"P",{});var pK=s(Ii);B0o=r(pK,`Note:
Loading a model from its configuration file does `),Rde=n(pK,"STRONG",{});var jrt=s(Rde);P0o=r(jrt,"not"),jrt.forEach(t),I0o=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(pK,"A",{href:!0});var Drt=s(Vj);q0o=r(Drt,"from_pretrained()"),Drt.forEach(t),N0o=r(pK," to load the model weights."),pK.forEach(t),j0o=i(l6),T(Kb.$$.fragment,l6),l6.forEach(t),D0o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(Wy.$$.fragment,ta),G0o=i(ta),Bde=n(ta,"P",{});var Grt=s(Bde);O0o=r(Grt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Grt.forEach(t),V0o=i(ta),$a=n(ta,"P",{});var i6=s($a);X0o=r(i6,"The model class to instantiate is selected based on the "),Pde=n(i6,"CODE",{});var Ort=s(Pde);z0o=r(Ort,"model_type"),Ort.forEach(t),Q0o=r(i6,` property of the config object (either
passed as an argument or loaded from `),Ide=n(i6,"CODE",{});var Vrt=s(Ide);W0o=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),H0o=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(i6,"CODE",{});var Xrt=s(qde);U0o=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),J0o=r(i6,":"),i6.forEach(t),Y0o=i(ta),ue=n(ta,"UL",{});var be=s(ue);Zb=n(be,"LI",{});var PLe=s(Zb);Nde=n(PLe,"STRONG",{});var zrt=s(Nde);K0o=r(zrt,"bart"),zrt.forEach(t),Z0o=r(PLe," \u2014 "),Xj=n(PLe,"A",{href:!0});var Qrt=s(Xj);eyo=r(Qrt,"BartForConditionalGeneration"),Qrt.forEach(t),oyo=r(PLe," (BART model)"),PLe.forEach(t),ryo=i(be),e2=n(be,"LI",{});var ILe=s(e2);jde=n(ILe,"STRONG",{});var Wrt=s(jde);tyo=r(Wrt,"bigbird_pegasus"),Wrt.forEach(t),ayo=r(ILe," \u2014 "),zj=n(ILe,"A",{href:!0});var Hrt=s(zj);nyo=r(Hrt,"BigBirdPegasusForConditionalGeneration"),Hrt.forEach(t),syo=r(ILe," (BigBirdPegasus model)"),ILe.forEach(t),lyo=i(be),o2=n(be,"LI",{});var qLe=s(o2);Dde=n(qLe,"STRONG",{});var Urt=s(Dde);iyo=r(Urt,"blenderbot"),Urt.forEach(t),dyo=r(qLe," \u2014 "),Qj=n(qLe,"A",{href:!0});var Jrt=s(Qj);cyo=r(Jrt,"BlenderbotForConditionalGeneration"),Jrt.forEach(t),myo=r(qLe," (Blenderbot model)"),qLe.forEach(t),fyo=i(be),r2=n(be,"LI",{});var NLe=s(r2);Gde=n(NLe,"STRONG",{});var Yrt=s(Gde);gyo=r(Yrt,"blenderbot-small"),Yrt.forEach(t),hyo=r(NLe," \u2014 "),Wj=n(NLe,"A",{href:!0});var Krt=s(Wj);uyo=r(Krt,"BlenderbotSmallForConditionalGeneration"),Krt.forEach(t),pyo=r(NLe," (BlenderbotSmall model)"),NLe.forEach(t),_yo=i(be),t2=n(be,"LI",{});var jLe=s(t2);Ode=n(jLe,"STRONG",{});var Zrt=s(Ode);byo=r(Zrt,"encoder-decoder"),Zrt.forEach(t),Fyo=r(jLe," \u2014 "),Hj=n(jLe,"A",{href:!0});var ett=s(Hj);vyo=r(ett,"EncoderDecoderModel"),ett.forEach(t),Tyo=r(jLe," (Encoder decoder model)"),jLe.forEach(t),Myo=i(be),a2=n(be,"LI",{});var DLe=s(a2);Vde=n(DLe,"STRONG",{});var ott=s(Vde);Eyo=r(ott,"fsmt"),ott.forEach(t),Cyo=r(DLe," \u2014 "),Uj=n(DLe,"A",{href:!0});var rtt=s(Uj);wyo=r(rtt,"FSMTForConditionalGeneration"),rtt.forEach(t),Ayo=r(DLe," (FairSeq Machine-Translation model)"),DLe.forEach(t),yyo=i(be),n2=n(be,"LI",{});var GLe=s(n2);Xde=n(GLe,"STRONG",{});var ttt=s(Xde);Lyo=r(ttt,"led"),ttt.forEach(t),xyo=r(GLe," \u2014 "),Jj=n(GLe,"A",{href:!0});var att=s(Jj);$yo=r(att,"LEDForConditionalGeneration"),att.forEach(t),kyo=r(GLe," (LED model)"),GLe.forEach(t),Syo=i(be),s2=n(be,"LI",{});var OLe=s(s2);zde=n(OLe,"STRONG",{});var ntt=s(zde);Ryo=r(ntt,"m2m_100"),ntt.forEach(t),Byo=r(OLe," \u2014 "),Yj=n(OLe,"A",{href:!0});var stt=s(Yj);Pyo=r(stt,"M2M100ForConditionalGeneration"),stt.forEach(t),Iyo=r(OLe," (M2M100 model)"),OLe.forEach(t),qyo=i(be),l2=n(be,"LI",{});var VLe=s(l2);Qde=n(VLe,"STRONG",{});var ltt=s(Qde);Nyo=r(ltt,"marian"),ltt.forEach(t),jyo=r(VLe," \u2014 "),Kj=n(VLe,"A",{href:!0});var itt=s(Kj);Dyo=r(itt,"MarianMTModel"),itt.forEach(t),Gyo=r(VLe," (Marian model)"),VLe.forEach(t),Oyo=i(be),i2=n(be,"LI",{});var XLe=s(i2);Wde=n(XLe,"STRONG",{});var dtt=s(Wde);Vyo=r(dtt,"mbart"),dtt.forEach(t),Xyo=r(XLe," \u2014 "),Zj=n(XLe,"A",{href:!0});var ctt=s(Zj);zyo=r(ctt,"MBartForConditionalGeneration"),ctt.forEach(t),Qyo=r(XLe," (mBART model)"),XLe.forEach(t),Wyo=i(be),d2=n(be,"LI",{});var zLe=s(d2);Hde=n(zLe,"STRONG",{});var mtt=s(Hde);Hyo=r(mtt,"mt5"),mtt.forEach(t),Uyo=r(zLe," \u2014 "),eD=n(zLe,"A",{href:!0});var ftt=s(eD);Jyo=r(ftt,"MT5ForConditionalGeneration"),ftt.forEach(t),Yyo=r(zLe," (mT5 model)"),zLe.forEach(t),Kyo=i(be),c2=n(be,"LI",{});var QLe=s(c2);Ude=n(QLe,"STRONG",{});var gtt=s(Ude);Zyo=r(gtt,"pegasus"),gtt.forEach(t),eLo=r(QLe," \u2014 "),oD=n(QLe,"A",{href:!0});var htt=s(oD);oLo=r(htt,"PegasusForConditionalGeneration"),htt.forEach(t),rLo=r(QLe," (Pegasus model)"),QLe.forEach(t),tLo=i(be),m2=n(be,"LI",{});var WLe=s(m2);Jde=n(WLe,"STRONG",{});var utt=s(Jde);aLo=r(utt,"plbart"),utt.forEach(t),nLo=r(WLe," \u2014 "),rD=n(WLe,"A",{href:!0});var ptt=s(rD);sLo=r(ptt,"PLBartForConditionalGeneration"),ptt.forEach(t),lLo=r(WLe," (PLBart model)"),WLe.forEach(t),iLo=i(be),f2=n(be,"LI",{});var HLe=s(f2);Yde=n(HLe,"STRONG",{});var _tt=s(Yde);dLo=r(_tt,"prophetnet"),_tt.forEach(t),cLo=r(HLe," \u2014 "),tD=n(HLe,"A",{href:!0});var btt=s(tD);mLo=r(btt,"ProphetNetForConditionalGeneration"),btt.forEach(t),fLo=r(HLe," (ProphetNet model)"),HLe.forEach(t),gLo=i(be),g2=n(be,"LI",{});var ULe=s(g2);Kde=n(ULe,"STRONG",{});var Ftt=s(Kde);hLo=r(Ftt,"t5"),Ftt.forEach(t),uLo=r(ULe," \u2014 "),aD=n(ULe,"A",{href:!0});var vtt=s(aD);pLo=r(vtt,"T5ForConditionalGeneration"),vtt.forEach(t),_Lo=r(ULe," (T5 model)"),ULe.forEach(t),bLo=i(be),h2=n(be,"LI",{});var JLe=s(h2);Zde=n(JLe,"STRONG",{});var Ttt=s(Zde);FLo=r(Ttt,"xlm-prophetnet"),Ttt.forEach(t),vLo=r(JLe," \u2014 "),nD=n(JLe,"A",{href:!0});var Mtt=s(nD);TLo=r(Mtt,"XLMProphetNetForConditionalGeneration"),Mtt.forEach(t),MLo=r(JLe," (XLMProphetNet model)"),JLe.forEach(t),be.forEach(t),ELo=i(ta),u2=n(ta,"P",{});var YLe=s(u2);CLo=r(YLe,"The model is set in evaluation mode by default using "),ece=n(YLe,"CODE",{});var Ett=s(ece);wLo=r(Ett,"model.eval()"),Ett.forEach(t),ALo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(YLe,"CODE",{});var Ctt=s(oce);yLo=r(Ctt,"model.train()"),Ctt.forEach(t),YLe.forEach(t),LLo=i(ta),T(p2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),iIe=i(m),qi=n(m,"H2",{class:!0});var fNe=s(qi);_2=n(fNe,"A",{id:!0,class:!0,href:!0});var wtt=s(_2);rce=n(wtt,"SPAN",{});var Att=s(rce);T(Hy.$$.fragment,Att),Att.forEach(t),wtt.forEach(t),xLo=i(fNe),tce=n(fNe,"SPAN",{});var ytt=s(tce);$Lo=r(ytt,"AutoModelForSequenceClassification"),ytt.forEach(t),fNe.forEach(t),dIe=i(m),Ro=n(m,"DIV",{class:!0});var zs=s(Ro);T(Uy.$$.fragment,zs),kLo=i(zs),Ni=n(zs,"P",{});var _K=s(Ni);SLo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=n(_K,"A",{href:!0});var Ltt=s(sD);RLo=r(Ltt,"from_pretrained()"),Ltt.forEach(t),BLo=r(_K," class method or the "),lD=n(_K,"A",{href:!0});var xtt=s(lD);PLo=r(xtt,"from_config()"),xtt.forEach(t),ILo=r(_K,` class
method.`),_K.forEach(t),qLo=i(zs),Jy=n(zs,"P",{});var gNe=s(Jy);NLo=r(gNe,"This class cannot be instantiated directly using "),ace=n(gNe,"CODE",{});var $tt=s(ace);jLo=r($tt,"__init__()"),$tt.forEach(t),DLo=r(gNe," (throws an error)."),gNe.forEach(t),GLo=i(zs),st=n(zs,"DIV",{class:!0});var d6=s(st);T(Yy.$$.fragment,d6),OLo=i(d6),nce=n(d6,"P",{});var ktt=s(nce);VLo=r(ktt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ktt.forEach(t),XLo=i(d6),ji=n(d6,"P",{});var bK=s(ji);zLo=r(bK,`Note:
Loading a model from its configuration file does `),sce=n(bK,"STRONG",{});var Stt=s(sce);QLo=r(Stt,"not"),Stt.forEach(t),WLo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(bK,"A",{href:!0});var Rtt=s(iD);HLo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),ULo=r(bK," to load the model weights."),bK.forEach(t),JLo=i(d6),T(b2.$$.fragment,d6),d6.forEach(t),YLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(Ky.$$.fragment,aa),KLo=i(aa),lce=n(aa,"P",{});var Btt=s(lce);ZLo=r(Btt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Btt.forEach(t),e8o=i(aa),ka=n(aa,"P",{});var c6=s(ka);o8o=r(c6,"The model class to instantiate is selected based on the "),ice=n(c6,"CODE",{});var Ptt=s(ice);r8o=r(Ptt,"model_type"),Ptt.forEach(t),t8o=r(c6,` property of the config object (either
passed as an argument or loaded from `),dce=n(c6,"CODE",{});var Itt=s(dce);a8o=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),n8o=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(c6,"CODE",{});var qtt=s(cce);s8o=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),l8o=r(c6,":"),c6.forEach(t),i8o=i(aa),q=n(aa,"UL",{});var j=s(q);F2=n(j,"LI",{});var KLe=s(F2);mce=n(KLe,"STRONG",{});var Ntt=s(mce);d8o=r(Ntt,"albert"),Ntt.forEach(t),c8o=r(KLe," \u2014 "),dD=n(KLe,"A",{href:!0});var jtt=s(dD);m8o=r(jtt,"AlbertForSequenceClassification"),jtt.forEach(t),f8o=r(KLe," (ALBERT model)"),KLe.forEach(t),g8o=i(j),v2=n(j,"LI",{});var ZLe=s(v2);fce=n(ZLe,"STRONG",{});var Dtt=s(fce);h8o=r(Dtt,"bart"),Dtt.forEach(t),u8o=r(ZLe," \u2014 "),cD=n(ZLe,"A",{href:!0});var Gtt=s(cD);p8o=r(Gtt,"BartForSequenceClassification"),Gtt.forEach(t),_8o=r(ZLe," (BART model)"),ZLe.forEach(t),b8o=i(j),T2=n(j,"LI",{});var e8e=s(T2);gce=n(e8e,"STRONG",{});var Ott=s(gce);F8o=r(Ott,"bert"),Ott.forEach(t),v8o=r(e8e," \u2014 "),mD=n(e8e,"A",{href:!0});var Vtt=s(mD);T8o=r(Vtt,"BertForSequenceClassification"),Vtt.forEach(t),M8o=r(e8e," (BERT model)"),e8e.forEach(t),E8o=i(j),M2=n(j,"LI",{});var o8e=s(M2);hce=n(o8e,"STRONG",{});var Xtt=s(hce);C8o=r(Xtt,"big_bird"),Xtt.forEach(t),w8o=r(o8e," \u2014 "),fD=n(o8e,"A",{href:!0});var ztt=s(fD);A8o=r(ztt,"BigBirdForSequenceClassification"),ztt.forEach(t),y8o=r(o8e," (BigBird model)"),o8e.forEach(t),L8o=i(j),E2=n(j,"LI",{});var r8e=s(E2);uce=n(r8e,"STRONG",{});var Qtt=s(uce);x8o=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),$8o=r(r8e," \u2014 "),gD=n(r8e,"A",{href:!0});var Wtt=s(gD);k8o=r(Wtt,"BigBirdPegasusForSequenceClassification"),Wtt.forEach(t),S8o=r(r8e," (BigBirdPegasus model)"),r8e.forEach(t),R8o=i(j),C2=n(j,"LI",{});var t8e=s(C2);pce=n(t8e,"STRONG",{});var Htt=s(pce);B8o=r(Htt,"camembert"),Htt.forEach(t),P8o=r(t8e," \u2014 "),hD=n(t8e,"A",{href:!0});var Utt=s(hD);I8o=r(Utt,"CamembertForSequenceClassification"),Utt.forEach(t),q8o=r(t8e," (CamemBERT model)"),t8e.forEach(t),N8o=i(j),w2=n(j,"LI",{});var a8e=s(w2);_ce=n(a8e,"STRONG",{});var Jtt=s(_ce);j8o=r(Jtt,"canine"),Jtt.forEach(t),D8o=r(a8e," \u2014 "),uD=n(a8e,"A",{href:!0});var Ytt=s(uD);G8o=r(Ytt,"CanineForSequenceClassification"),Ytt.forEach(t),O8o=r(a8e," (Canine model)"),a8e.forEach(t),V8o=i(j),A2=n(j,"LI",{});var n8e=s(A2);bce=n(n8e,"STRONG",{});var Ktt=s(bce);X8o=r(Ktt,"convbert"),Ktt.forEach(t),z8o=r(n8e," \u2014 "),pD=n(n8e,"A",{href:!0});var Ztt=s(pD);Q8o=r(Ztt,"ConvBertForSequenceClassification"),Ztt.forEach(t),W8o=r(n8e," (ConvBERT model)"),n8e.forEach(t),H8o=i(j),y2=n(j,"LI",{});var s8e=s(y2);Fce=n(s8e,"STRONG",{});var eat=s(Fce);U8o=r(eat,"ctrl"),eat.forEach(t),J8o=r(s8e," \u2014 "),_D=n(s8e,"A",{href:!0});var oat=s(_D);Y8o=r(oat,"CTRLForSequenceClassification"),oat.forEach(t),K8o=r(s8e," (CTRL model)"),s8e.forEach(t),Z8o=i(j),L2=n(j,"LI",{});var l8e=s(L2);vce=n(l8e,"STRONG",{});var rat=s(vce);exo=r(rat,"data2vec-text"),rat.forEach(t),oxo=r(l8e," \u2014 "),bD=n(l8e,"A",{href:!0});var tat=s(bD);rxo=r(tat,"Data2VecTextForSequenceClassification"),tat.forEach(t),txo=r(l8e," (Data2VecText model)"),l8e.forEach(t),axo=i(j),x2=n(j,"LI",{});var i8e=s(x2);Tce=n(i8e,"STRONG",{});var aat=s(Tce);nxo=r(aat,"deberta"),aat.forEach(t),sxo=r(i8e," \u2014 "),FD=n(i8e,"A",{href:!0});var nat=s(FD);lxo=r(nat,"DebertaForSequenceClassification"),nat.forEach(t),ixo=r(i8e," (DeBERTa model)"),i8e.forEach(t),dxo=i(j),$2=n(j,"LI",{});var d8e=s($2);Mce=n(d8e,"STRONG",{});var sat=s(Mce);cxo=r(sat,"deberta-v2"),sat.forEach(t),mxo=r(d8e," \u2014 "),vD=n(d8e,"A",{href:!0});var lat=s(vD);fxo=r(lat,"DebertaV2ForSequenceClassification"),lat.forEach(t),gxo=r(d8e," (DeBERTa-v2 model)"),d8e.forEach(t),hxo=i(j),k2=n(j,"LI",{});var c8e=s(k2);Ece=n(c8e,"STRONG",{});var iat=s(Ece);uxo=r(iat,"distilbert"),iat.forEach(t),pxo=r(c8e," \u2014 "),TD=n(c8e,"A",{href:!0});var dat=s(TD);_xo=r(dat,"DistilBertForSequenceClassification"),dat.forEach(t),bxo=r(c8e," (DistilBERT model)"),c8e.forEach(t),Fxo=i(j),S2=n(j,"LI",{});var m8e=s(S2);Cce=n(m8e,"STRONG",{});var cat=s(Cce);vxo=r(cat,"electra"),cat.forEach(t),Txo=r(m8e," \u2014 "),MD=n(m8e,"A",{href:!0});var mat=s(MD);Mxo=r(mat,"ElectraForSequenceClassification"),mat.forEach(t),Exo=r(m8e," (ELECTRA model)"),m8e.forEach(t),Cxo=i(j),R2=n(j,"LI",{});var f8e=s(R2);wce=n(f8e,"STRONG",{});var fat=s(wce);wxo=r(fat,"flaubert"),fat.forEach(t),Axo=r(f8e," \u2014 "),ED=n(f8e,"A",{href:!0});var gat=s(ED);yxo=r(gat,"FlaubertForSequenceClassification"),gat.forEach(t),Lxo=r(f8e," (FlauBERT model)"),f8e.forEach(t),xxo=i(j),B2=n(j,"LI",{});var g8e=s(B2);Ace=n(g8e,"STRONG",{});var hat=s(Ace);$xo=r(hat,"fnet"),hat.forEach(t),kxo=r(g8e," \u2014 "),CD=n(g8e,"A",{href:!0});var uat=s(CD);Sxo=r(uat,"FNetForSequenceClassification"),uat.forEach(t),Rxo=r(g8e," (FNet model)"),g8e.forEach(t),Bxo=i(j),P2=n(j,"LI",{});var h8e=s(P2);yce=n(h8e,"STRONG",{});var pat=s(yce);Pxo=r(pat,"funnel"),pat.forEach(t),Ixo=r(h8e," \u2014 "),wD=n(h8e,"A",{href:!0});var _at=s(wD);qxo=r(_at,"FunnelForSequenceClassification"),_at.forEach(t),Nxo=r(h8e," (Funnel Transformer model)"),h8e.forEach(t),jxo=i(j),I2=n(j,"LI",{});var u8e=s(I2);Lce=n(u8e,"STRONG",{});var bat=s(Lce);Dxo=r(bat,"gpt2"),bat.forEach(t),Gxo=r(u8e," \u2014 "),AD=n(u8e,"A",{href:!0});var Fat=s(AD);Oxo=r(Fat,"GPT2ForSequenceClassification"),Fat.forEach(t),Vxo=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),Xxo=i(j),q2=n(j,"LI",{});var p8e=s(q2);xce=n(p8e,"STRONG",{});var vat=s(xce);zxo=r(vat,"gpt_neo"),vat.forEach(t),Qxo=r(p8e," \u2014 "),yD=n(p8e,"A",{href:!0});var Tat=s(yD);Wxo=r(Tat,"GPTNeoForSequenceClassification"),Tat.forEach(t),Hxo=r(p8e," (GPT Neo model)"),p8e.forEach(t),Uxo=i(j),N2=n(j,"LI",{});var _8e=s(N2);$ce=n(_8e,"STRONG",{});var Mat=s($ce);Jxo=r(Mat,"gptj"),Mat.forEach(t),Yxo=r(_8e," \u2014 "),LD=n(_8e,"A",{href:!0});var Eat=s(LD);Kxo=r(Eat,"GPTJForSequenceClassification"),Eat.forEach(t),Zxo=r(_8e," (GPT-J model)"),_8e.forEach(t),e7o=i(j),j2=n(j,"LI",{});var b8e=s(j2);kce=n(b8e,"STRONG",{});var Cat=s(kce);o7o=r(Cat,"ibert"),Cat.forEach(t),r7o=r(b8e," \u2014 "),xD=n(b8e,"A",{href:!0});var wat=s(xD);t7o=r(wat,"IBertForSequenceClassification"),wat.forEach(t),a7o=r(b8e," (I-BERT model)"),b8e.forEach(t),n7o=i(j),D2=n(j,"LI",{});var F8e=s(D2);Sce=n(F8e,"STRONG",{});var Aat=s(Sce);s7o=r(Aat,"layoutlm"),Aat.forEach(t),l7o=r(F8e," \u2014 "),$D=n(F8e,"A",{href:!0});var yat=s($D);i7o=r(yat,"LayoutLMForSequenceClassification"),yat.forEach(t),d7o=r(F8e," (LayoutLM model)"),F8e.forEach(t),c7o=i(j),G2=n(j,"LI",{});var v8e=s(G2);Rce=n(v8e,"STRONG",{});var Lat=s(Rce);m7o=r(Lat,"layoutlmv2"),Lat.forEach(t),f7o=r(v8e," \u2014 "),kD=n(v8e,"A",{href:!0});var xat=s(kD);g7o=r(xat,"LayoutLMv2ForSequenceClassification"),xat.forEach(t),h7o=r(v8e," (LayoutLMv2 model)"),v8e.forEach(t),u7o=i(j),O2=n(j,"LI",{});var T8e=s(O2);Bce=n(T8e,"STRONG",{});var $at=s(Bce);p7o=r($at,"led"),$at.forEach(t),_7o=r(T8e," \u2014 "),SD=n(T8e,"A",{href:!0});var kat=s(SD);b7o=r(kat,"LEDForSequenceClassification"),kat.forEach(t),F7o=r(T8e," (LED model)"),T8e.forEach(t),v7o=i(j),V2=n(j,"LI",{});var M8e=s(V2);Pce=n(M8e,"STRONG",{});var Sat=s(Pce);T7o=r(Sat,"longformer"),Sat.forEach(t),M7o=r(M8e," \u2014 "),RD=n(M8e,"A",{href:!0});var Rat=s(RD);E7o=r(Rat,"LongformerForSequenceClassification"),Rat.forEach(t),C7o=r(M8e," (Longformer model)"),M8e.forEach(t),w7o=i(j),X2=n(j,"LI",{});var E8e=s(X2);Ice=n(E8e,"STRONG",{});var Bat=s(Ice);A7o=r(Bat,"mbart"),Bat.forEach(t),y7o=r(E8e," \u2014 "),BD=n(E8e,"A",{href:!0});var Pat=s(BD);L7o=r(Pat,"MBartForSequenceClassification"),Pat.forEach(t),x7o=r(E8e," (mBART model)"),E8e.forEach(t),$7o=i(j),z2=n(j,"LI",{});var C8e=s(z2);qce=n(C8e,"STRONG",{});var Iat=s(qce);k7o=r(Iat,"megatron-bert"),Iat.forEach(t),S7o=r(C8e," \u2014 "),PD=n(C8e,"A",{href:!0});var qat=s(PD);R7o=r(qat,"MegatronBertForSequenceClassification"),qat.forEach(t),B7o=r(C8e," (MegatronBert model)"),C8e.forEach(t),P7o=i(j),Q2=n(j,"LI",{});var w8e=s(Q2);Nce=n(w8e,"STRONG",{});var Nat=s(Nce);I7o=r(Nat,"mobilebert"),Nat.forEach(t),q7o=r(w8e," \u2014 "),ID=n(w8e,"A",{href:!0});var jat=s(ID);N7o=r(jat,"MobileBertForSequenceClassification"),jat.forEach(t),j7o=r(w8e," (MobileBERT model)"),w8e.forEach(t),D7o=i(j),W2=n(j,"LI",{});var A8e=s(W2);jce=n(A8e,"STRONG",{});var Dat=s(jce);G7o=r(Dat,"mpnet"),Dat.forEach(t),O7o=r(A8e," \u2014 "),qD=n(A8e,"A",{href:!0});var Gat=s(qD);V7o=r(Gat,"MPNetForSequenceClassification"),Gat.forEach(t),X7o=r(A8e," (MPNet model)"),A8e.forEach(t),z7o=i(j),H2=n(j,"LI",{});var y8e=s(H2);Dce=n(y8e,"STRONG",{});var Oat=s(Dce);Q7o=r(Oat,"nystromformer"),Oat.forEach(t),W7o=r(y8e," \u2014 "),ND=n(y8e,"A",{href:!0});var Vat=s(ND);H7o=r(Vat,"NystromformerForSequenceClassification"),Vat.forEach(t),U7o=r(y8e," (Nystromformer model)"),y8e.forEach(t),J7o=i(j),U2=n(j,"LI",{});var L8e=s(U2);Gce=n(L8e,"STRONG",{});var Xat=s(Gce);Y7o=r(Xat,"openai-gpt"),Xat.forEach(t),K7o=r(L8e," \u2014 "),jD=n(L8e,"A",{href:!0});var zat=s(jD);Z7o=r(zat,"OpenAIGPTForSequenceClassification"),zat.forEach(t),e9o=r(L8e," (OpenAI GPT model)"),L8e.forEach(t),o9o=i(j),J2=n(j,"LI",{});var x8e=s(J2);Oce=n(x8e,"STRONG",{});var Qat=s(Oce);r9o=r(Qat,"perceiver"),Qat.forEach(t),t9o=r(x8e," \u2014 "),DD=n(x8e,"A",{href:!0});var Wat=s(DD);a9o=r(Wat,"PerceiverForSequenceClassification"),Wat.forEach(t),n9o=r(x8e," (Perceiver model)"),x8e.forEach(t),s9o=i(j),Y2=n(j,"LI",{});var $8e=s(Y2);Vce=n($8e,"STRONG",{});var Hat=s(Vce);l9o=r(Hat,"plbart"),Hat.forEach(t),i9o=r($8e," \u2014 "),GD=n($8e,"A",{href:!0});var Uat=s(GD);d9o=r(Uat,"PLBartForSequenceClassification"),Uat.forEach(t),c9o=r($8e," (PLBart model)"),$8e.forEach(t),m9o=i(j),K2=n(j,"LI",{});var k8e=s(K2);Xce=n(k8e,"STRONG",{});var Jat=s(Xce);f9o=r(Jat,"qdqbert"),Jat.forEach(t),g9o=r(k8e," \u2014 "),OD=n(k8e,"A",{href:!0});var Yat=s(OD);h9o=r(Yat,"QDQBertForSequenceClassification"),Yat.forEach(t),u9o=r(k8e," (QDQBert model)"),k8e.forEach(t),p9o=i(j),Z2=n(j,"LI",{});var S8e=s(Z2);zce=n(S8e,"STRONG",{});var Kat=s(zce);_9o=r(Kat,"reformer"),Kat.forEach(t),b9o=r(S8e," \u2014 "),VD=n(S8e,"A",{href:!0});var Zat=s(VD);F9o=r(Zat,"ReformerForSequenceClassification"),Zat.forEach(t),v9o=r(S8e," (Reformer model)"),S8e.forEach(t),T9o=i(j),eF=n(j,"LI",{});var R8e=s(eF);Qce=n(R8e,"STRONG",{});var ent=s(Qce);M9o=r(ent,"rembert"),ent.forEach(t),E9o=r(R8e," \u2014 "),XD=n(R8e,"A",{href:!0});var ont=s(XD);C9o=r(ont,"RemBertForSequenceClassification"),ont.forEach(t),w9o=r(R8e," (RemBERT model)"),R8e.forEach(t),A9o=i(j),oF=n(j,"LI",{});var B8e=s(oF);Wce=n(B8e,"STRONG",{});var rnt=s(Wce);y9o=r(rnt,"roberta"),rnt.forEach(t),L9o=r(B8e," \u2014 "),zD=n(B8e,"A",{href:!0});var tnt=s(zD);x9o=r(tnt,"RobertaForSequenceClassification"),tnt.forEach(t),$9o=r(B8e," (RoBERTa model)"),B8e.forEach(t),k9o=i(j),rF=n(j,"LI",{});var P8e=s(rF);Hce=n(P8e,"STRONG",{});var ant=s(Hce);S9o=r(ant,"roformer"),ant.forEach(t),R9o=r(P8e," \u2014 "),QD=n(P8e,"A",{href:!0});var nnt=s(QD);B9o=r(nnt,"RoFormerForSequenceClassification"),nnt.forEach(t),P9o=r(P8e," (RoFormer model)"),P8e.forEach(t),I9o=i(j),tF=n(j,"LI",{});var I8e=s(tF);Uce=n(I8e,"STRONG",{});var snt=s(Uce);q9o=r(snt,"squeezebert"),snt.forEach(t),N9o=r(I8e," \u2014 "),WD=n(I8e,"A",{href:!0});var lnt=s(WD);j9o=r(lnt,"SqueezeBertForSequenceClassification"),lnt.forEach(t),D9o=r(I8e," (SqueezeBERT model)"),I8e.forEach(t),G9o=i(j),aF=n(j,"LI",{});var q8e=s(aF);Jce=n(q8e,"STRONG",{});var int=s(Jce);O9o=r(int,"tapas"),int.forEach(t),V9o=r(q8e," \u2014 "),HD=n(q8e,"A",{href:!0});var dnt=s(HD);X9o=r(dnt,"TapasForSequenceClassification"),dnt.forEach(t),z9o=r(q8e," (TAPAS model)"),q8e.forEach(t),Q9o=i(j),nF=n(j,"LI",{});var N8e=s(nF);Yce=n(N8e,"STRONG",{});var cnt=s(Yce);W9o=r(cnt,"transfo-xl"),cnt.forEach(t),H9o=r(N8e," \u2014 "),UD=n(N8e,"A",{href:!0});var mnt=s(UD);U9o=r(mnt,"TransfoXLForSequenceClassification"),mnt.forEach(t),J9o=r(N8e," (Transformer-XL model)"),N8e.forEach(t),Y9o=i(j),sF=n(j,"LI",{});var j8e=s(sF);Kce=n(j8e,"STRONG",{});var fnt=s(Kce);K9o=r(fnt,"xlm"),fnt.forEach(t),Z9o=r(j8e," \u2014 "),JD=n(j8e,"A",{href:!0});var gnt=s(JD);e$o=r(gnt,"XLMForSequenceClassification"),gnt.forEach(t),o$o=r(j8e," (XLM model)"),j8e.forEach(t),r$o=i(j),lF=n(j,"LI",{});var D8e=s(lF);Zce=n(D8e,"STRONG",{});var hnt=s(Zce);t$o=r(hnt,"xlm-roberta"),hnt.forEach(t),a$o=r(D8e," \u2014 "),YD=n(D8e,"A",{href:!0});var unt=s(YD);n$o=r(unt,"XLMRobertaForSequenceClassification"),unt.forEach(t),s$o=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),l$o=i(j),iF=n(j,"LI",{});var G8e=s(iF);eme=n(G8e,"STRONG",{});var pnt=s(eme);i$o=r(pnt,"xlm-roberta-xl"),pnt.forEach(t),d$o=r(G8e," \u2014 "),KD=n(G8e,"A",{href:!0});var _nt=s(KD);c$o=r(_nt,"XLMRobertaXLForSequenceClassification"),_nt.forEach(t),m$o=r(G8e," (XLM-RoBERTa-XL model)"),G8e.forEach(t),f$o=i(j),dF=n(j,"LI",{});var O8e=s(dF);ome=n(O8e,"STRONG",{});var bnt=s(ome);g$o=r(bnt,"xlnet"),bnt.forEach(t),h$o=r(O8e," \u2014 "),ZD=n(O8e,"A",{href:!0});var Fnt=s(ZD);u$o=r(Fnt,"XLNetForSequenceClassification"),Fnt.forEach(t),p$o=r(O8e," (XLNet model)"),O8e.forEach(t),_$o=i(j),cF=n(j,"LI",{});var V8e=s(cF);rme=n(V8e,"STRONG",{});var vnt=s(rme);b$o=r(vnt,"yoso"),vnt.forEach(t),F$o=r(V8e," \u2014 "),eG=n(V8e,"A",{href:!0});var Tnt=s(eG);v$o=r(Tnt,"YosoForSequenceClassification"),Tnt.forEach(t),T$o=r(V8e," (YOSO model)"),V8e.forEach(t),j.forEach(t),M$o=i(aa),mF=n(aa,"P",{});var X8e=s(mF);E$o=r(X8e,"The model is set in evaluation mode by default using "),tme=n(X8e,"CODE",{});var Mnt=s(tme);C$o=r(Mnt,"model.eval()"),Mnt.forEach(t),w$o=r(X8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(X8e,"CODE",{});var Ent=s(ame);A$o=r(Ent,"model.train()"),Ent.forEach(t),X8e.forEach(t),y$o=i(aa),T(fF.$$.fragment,aa),aa.forEach(t),zs.forEach(t),cIe=i(m),Di=n(m,"H2",{class:!0});var hNe=s(Di);gF=n(hNe,"A",{id:!0,class:!0,href:!0});var Cnt=s(gF);nme=n(Cnt,"SPAN",{});var wnt=s(nme);T(Zy.$$.fragment,wnt),wnt.forEach(t),Cnt.forEach(t),L$o=i(hNe),sme=n(hNe,"SPAN",{});var Ant=s(sme);x$o=r(Ant,"AutoModelForMultipleChoice"),Ant.forEach(t),hNe.forEach(t),mIe=i(m),Bo=n(m,"DIV",{class:!0});var Qs=s(Bo);T(eL.$$.fragment,Qs),$$o=i(Qs),Gi=n(Qs,"P",{});var FK=s(Gi);k$o=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=n(FK,"A",{href:!0});var ynt=s(oG);S$o=r(ynt,"from_pretrained()"),ynt.forEach(t),R$o=r(FK," class method or the "),rG=n(FK,"A",{href:!0});var Lnt=s(rG);B$o=r(Lnt,"from_config()"),Lnt.forEach(t),P$o=r(FK,` class
method.`),FK.forEach(t),I$o=i(Qs),oL=n(Qs,"P",{});var uNe=s(oL);q$o=r(uNe,"This class cannot be instantiated directly using "),lme=n(uNe,"CODE",{});var xnt=s(lme);N$o=r(xnt,"__init__()"),xnt.forEach(t),j$o=r(uNe," (throws an error)."),uNe.forEach(t),D$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var m6=s(lt);T(rL.$$.fragment,m6),G$o=i(m6),ime=n(m6,"P",{});var $nt=s(ime);O$o=r($nt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$nt.forEach(t),V$o=i(m6),Oi=n(m6,"P",{});var vK=s(Oi);X$o=r(vK,`Note:
Loading a model from its configuration file does `),dme=n(vK,"STRONG",{});var knt=s(dme);z$o=r(knt,"not"),knt.forEach(t),Q$o=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(vK,"A",{href:!0});var Snt=s(tG);W$o=r(Snt,"from_pretrained()"),Snt.forEach(t),H$o=r(vK," to load the model weights."),vK.forEach(t),U$o=i(m6),T(hF.$$.fragment,m6),m6.forEach(t),J$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(tL.$$.fragment,na),Y$o=i(na),cme=n(na,"P",{});var Rnt=s(cme);K$o=r(Rnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rnt.forEach(t),Z$o=i(na),Sa=n(na,"P",{});var f6=s(Sa);eko=r(f6,"The model class to instantiate is selected based on the "),mme=n(f6,"CODE",{});var Bnt=s(mme);oko=r(Bnt,"model_type"),Bnt.forEach(t),rko=r(f6,` property of the config object (either
passed as an argument or loaded from `),fme=n(f6,"CODE",{});var Pnt=s(fme);tko=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),ako=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(f6,"CODE",{});var Int=s(gme);nko=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),sko=r(f6,":"),f6.forEach(t),lko=i(na),Y=n(na,"UL",{});var K=s(Y);uF=n(K,"LI",{});var z8e=s(uF);hme=n(z8e,"STRONG",{});var qnt=s(hme);iko=r(qnt,"albert"),qnt.forEach(t),dko=r(z8e," \u2014 "),aG=n(z8e,"A",{href:!0});var Nnt=s(aG);cko=r(Nnt,"AlbertForMultipleChoice"),Nnt.forEach(t),mko=r(z8e," (ALBERT model)"),z8e.forEach(t),fko=i(K),pF=n(K,"LI",{});var Q8e=s(pF);ume=n(Q8e,"STRONG",{});var jnt=s(ume);gko=r(jnt,"bert"),jnt.forEach(t),hko=r(Q8e," \u2014 "),nG=n(Q8e,"A",{href:!0});var Dnt=s(nG);uko=r(Dnt,"BertForMultipleChoice"),Dnt.forEach(t),pko=r(Q8e," (BERT model)"),Q8e.forEach(t),_ko=i(K),_F=n(K,"LI",{});var W8e=s(_F);pme=n(W8e,"STRONG",{});var Gnt=s(pme);bko=r(Gnt,"big_bird"),Gnt.forEach(t),Fko=r(W8e," \u2014 "),sG=n(W8e,"A",{href:!0});var Ont=s(sG);vko=r(Ont,"BigBirdForMultipleChoice"),Ont.forEach(t),Tko=r(W8e," (BigBird model)"),W8e.forEach(t),Mko=i(K),bF=n(K,"LI",{});var H8e=s(bF);_me=n(H8e,"STRONG",{});var Vnt=s(_me);Eko=r(Vnt,"camembert"),Vnt.forEach(t),Cko=r(H8e," \u2014 "),lG=n(H8e,"A",{href:!0});var Xnt=s(lG);wko=r(Xnt,"CamembertForMultipleChoice"),Xnt.forEach(t),Ako=r(H8e," (CamemBERT model)"),H8e.forEach(t),yko=i(K),FF=n(K,"LI",{});var U8e=s(FF);bme=n(U8e,"STRONG",{});var znt=s(bme);Lko=r(znt,"canine"),znt.forEach(t),xko=r(U8e," \u2014 "),iG=n(U8e,"A",{href:!0});var Qnt=s(iG);$ko=r(Qnt,"CanineForMultipleChoice"),Qnt.forEach(t),kko=r(U8e," (Canine model)"),U8e.forEach(t),Sko=i(K),vF=n(K,"LI",{});var J8e=s(vF);Fme=n(J8e,"STRONG",{});var Wnt=s(Fme);Rko=r(Wnt,"convbert"),Wnt.forEach(t),Bko=r(J8e," \u2014 "),dG=n(J8e,"A",{href:!0});var Hnt=s(dG);Pko=r(Hnt,"ConvBertForMultipleChoice"),Hnt.forEach(t),Iko=r(J8e," (ConvBERT model)"),J8e.forEach(t),qko=i(K),TF=n(K,"LI",{});var Y8e=s(TF);vme=n(Y8e,"STRONG",{});var Unt=s(vme);Nko=r(Unt,"data2vec-text"),Unt.forEach(t),jko=r(Y8e," \u2014 "),cG=n(Y8e,"A",{href:!0});var Jnt=s(cG);Dko=r(Jnt,"Data2VecTextForMultipleChoice"),Jnt.forEach(t),Gko=r(Y8e," (Data2VecText model)"),Y8e.forEach(t),Oko=i(K),MF=n(K,"LI",{});var K8e=s(MF);Tme=n(K8e,"STRONG",{});var Ynt=s(Tme);Vko=r(Ynt,"deberta-v2"),Ynt.forEach(t),Xko=r(K8e," \u2014 "),mG=n(K8e,"A",{href:!0});var Knt=s(mG);zko=r(Knt,"DebertaV2ForMultipleChoice"),Knt.forEach(t),Qko=r(K8e," (DeBERTa-v2 model)"),K8e.forEach(t),Wko=i(K),EF=n(K,"LI",{});var Z8e=s(EF);Mme=n(Z8e,"STRONG",{});var Znt=s(Mme);Hko=r(Znt,"distilbert"),Znt.forEach(t),Uko=r(Z8e," \u2014 "),fG=n(Z8e,"A",{href:!0});var est=s(fG);Jko=r(est,"DistilBertForMultipleChoice"),est.forEach(t),Yko=r(Z8e," (DistilBERT model)"),Z8e.forEach(t),Kko=i(K),CF=n(K,"LI",{});var exe=s(CF);Eme=n(exe,"STRONG",{});var ost=s(Eme);Zko=r(ost,"electra"),ost.forEach(t),eSo=r(exe," \u2014 "),gG=n(exe,"A",{href:!0});var rst=s(gG);oSo=r(rst,"ElectraForMultipleChoice"),rst.forEach(t),rSo=r(exe," (ELECTRA model)"),exe.forEach(t),tSo=i(K),wF=n(K,"LI",{});var oxe=s(wF);Cme=n(oxe,"STRONG",{});var tst=s(Cme);aSo=r(tst,"flaubert"),tst.forEach(t),nSo=r(oxe," \u2014 "),hG=n(oxe,"A",{href:!0});var ast=s(hG);sSo=r(ast,"FlaubertForMultipleChoice"),ast.forEach(t),lSo=r(oxe," (FlauBERT model)"),oxe.forEach(t),iSo=i(K),AF=n(K,"LI",{});var rxe=s(AF);wme=n(rxe,"STRONG",{});var nst=s(wme);dSo=r(nst,"fnet"),nst.forEach(t),cSo=r(rxe," \u2014 "),uG=n(rxe,"A",{href:!0});var sst=s(uG);mSo=r(sst,"FNetForMultipleChoice"),sst.forEach(t),fSo=r(rxe," (FNet model)"),rxe.forEach(t),gSo=i(K),yF=n(K,"LI",{});var txe=s(yF);Ame=n(txe,"STRONG",{});var lst=s(Ame);hSo=r(lst,"funnel"),lst.forEach(t),uSo=r(txe," \u2014 "),pG=n(txe,"A",{href:!0});var ist=s(pG);pSo=r(ist,"FunnelForMultipleChoice"),ist.forEach(t),_So=r(txe," (Funnel Transformer model)"),txe.forEach(t),bSo=i(K),LF=n(K,"LI",{});var axe=s(LF);yme=n(axe,"STRONG",{});var dst=s(yme);FSo=r(dst,"ibert"),dst.forEach(t),vSo=r(axe," \u2014 "),_G=n(axe,"A",{href:!0});var cst=s(_G);TSo=r(cst,"IBertForMultipleChoice"),cst.forEach(t),MSo=r(axe," (I-BERT model)"),axe.forEach(t),ESo=i(K),xF=n(K,"LI",{});var nxe=s(xF);Lme=n(nxe,"STRONG",{});var mst=s(Lme);CSo=r(mst,"longformer"),mst.forEach(t),wSo=r(nxe," \u2014 "),bG=n(nxe,"A",{href:!0});var fst=s(bG);ASo=r(fst,"LongformerForMultipleChoice"),fst.forEach(t),ySo=r(nxe," (Longformer model)"),nxe.forEach(t),LSo=i(K),$F=n(K,"LI",{});var sxe=s($F);xme=n(sxe,"STRONG",{});var gst=s(xme);xSo=r(gst,"megatron-bert"),gst.forEach(t),$So=r(sxe," \u2014 "),FG=n(sxe,"A",{href:!0});var hst=s(FG);kSo=r(hst,"MegatronBertForMultipleChoice"),hst.forEach(t),SSo=r(sxe," (MegatronBert model)"),sxe.forEach(t),RSo=i(K),kF=n(K,"LI",{});var lxe=s(kF);$me=n(lxe,"STRONG",{});var ust=s($me);BSo=r(ust,"mobilebert"),ust.forEach(t),PSo=r(lxe," \u2014 "),vG=n(lxe,"A",{href:!0});var pst=s(vG);ISo=r(pst,"MobileBertForMultipleChoice"),pst.forEach(t),qSo=r(lxe," (MobileBERT model)"),lxe.forEach(t),NSo=i(K),SF=n(K,"LI",{});var ixe=s(SF);kme=n(ixe,"STRONG",{});var _st=s(kme);jSo=r(_st,"mpnet"),_st.forEach(t),DSo=r(ixe," \u2014 "),TG=n(ixe,"A",{href:!0});var bst=s(TG);GSo=r(bst,"MPNetForMultipleChoice"),bst.forEach(t),OSo=r(ixe," (MPNet model)"),ixe.forEach(t),VSo=i(K),RF=n(K,"LI",{});var dxe=s(RF);Sme=n(dxe,"STRONG",{});var Fst=s(Sme);XSo=r(Fst,"nystromformer"),Fst.forEach(t),zSo=r(dxe," \u2014 "),MG=n(dxe,"A",{href:!0});var vst=s(MG);QSo=r(vst,"NystromformerForMultipleChoice"),vst.forEach(t),WSo=r(dxe," (Nystromformer model)"),dxe.forEach(t),HSo=i(K),BF=n(K,"LI",{});var cxe=s(BF);Rme=n(cxe,"STRONG",{});var Tst=s(Rme);USo=r(Tst,"qdqbert"),Tst.forEach(t),JSo=r(cxe," \u2014 "),EG=n(cxe,"A",{href:!0});var Mst=s(EG);YSo=r(Mst,"QDQBertForMultipleChoice"),Mst.forEach(t),KSo=r(cxe," (QDQBert model)"),cxe.forEach(t),ZSo=i(K),PF=n(K,"LI",{});var mxe=s(PF);Bme=n(mxe,"STRONG",{});var Est=s(Bme);eRo=r(Est,"rembert"),Est.forEach(t),oRo=r(mxe," \u2014 "),CG=n(mxe,"A",{href:!0});var Cst=s(CG);rRo=r(Cst,"RemBertForMultipleChoice"),Cst.forEach(t),tRo=r(mxe," (RemBERT model)"),mxe.forEach(t),aRo=i(K),IF=n(K,"LI",{});var fxe=s(IF);Pme=n(fxe,"STRONG",{});var wst=s(Pme);nRo=r(wst,"roberta"),wst.forEach(t),sRo=r(fxe," \u2014 "),wG=n(fxe,"A",{href:!0});var Ast=s(wG);lRo=r(Ast,"RobertaForMultipleChoice"),Ast.forEach(t),iRo=r(fxe," (RoBERTa model)"),fxe.forEach(t),dRo=i(K),qF=n(K,"LI",{});var gxe=s(qF);Ime=n(gxe,"STRONG",{});var yst=s(Ime);cRo=r(yst,"roformer"),yst.forEach(t),mRo=r(gxe," \u2014 "),AG=n(gxe,"A",{href:!0});var Lst=s(AG);fRo=r(Lst,"RoFormerForMultipleChoice"),Lst.forEach(t),gRo=r(gxe," (RoFormer model)"),gxe.forEach(t),hRo=i(K),NF=n(K,"LI",{});var hxe=s(NF);qme=n(hxe,"STRONG",{});var xst=s(qme);uRo=r(xst,"squeezebert"),xst.forEach(t),pRo=r(hxe," \u2014 "),yG=n(hxe,"A",{href:!0});var $st=s(yG);_Ro=r($st,"SqueezeBertForMultipleChoice"),$st.forEach(t),bRo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),FRo=i(K),jF=n(K,"LI",{});var uxe=s(jF);Nme=n(uxe,"STRONG",{});var kst=s(Nme);vRo=r(kst,"xlm"),kst.forEach(t),TRo=r(uxe," \u2014 "),LG=n(uxe,"A",{href:!0});var Sst=s(LG);MRo=r(Sst,"XLMForMultipleChoice"),Sst.forEach(t),ERo=r(uxe," (XLM model)"),uxe.forEach(t),CRo=i(K),DF=n(K,"LI",{});var pxe=s(DF);jme=n(pxe,"STRONG",{});var Rst=s(jme);wRo=r(Rst,"xlm-roberta"),Rst.forEach(t),ARo=r(pxe," \u2014 "),xG=n(pxe,"A",{href:!0});var Bst=s(xG);yRo=r(Bst,"XLMRobertaForMultipleChoice"),Bst.forEach(t),LRo=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),xRo=i(K),GF=n(K,"LI",{});var _xe=s(GF);Dme=n(_xe,"STRONG",{});var Pst=s(Dme);$Ro=r(Pst,"xlm-roberta-xl"),Pst.forEach(t),kRo=r(_xe," \u2014 "),$G=n(_xe,"A",{href:!0});var Ist=s($G);SRo=r(Ist,"XLMRobertaXLForMultipleChoice"),Ist.forEach(t),RRo=r(_xe," (XLM-RoBERTa-XL model)"),_xe.forEach(t),BRo=i(K),OF=n(K,"LI",{});var bxe=s(OF);Gme=n(bxe,"STRONG",{});var qst=s(Gme);PRo=r(qst,"xlnet"),qst.forEach(t),IRo=r(bxe," \u2014 "),kG=n(bxe,"A",{href:!0});var Nst=s(kG);qRo=r(Nst,"XLNetForMultipleChoice"),Nst.forEach(t),NRo=r(bxe," (XLNet model)"),bxe.forEach(t),jRo=i(K),VF=n(K,"LI",{});var Fxe=s(VF);Ome=n(Fxe,"STRONG",{});var jst=s(Ome);DRo=r(jst,"yoso"),jst.forEach(t),GRo=r(Fxe," \u2014 "),SG=n(Fxe,"A",{href:!0});var Dst=s(SG);ORo=r(Dst,"YosoForMultipleChoice"),Dst.forEach(t),VRo=r(Fxe," (YOSO model)"),Fxe.forEach(t),K.forEach(t),XRo=i(na),XF=n(na,"P",{});var vxe=s(XF);zRo=r(vxe,"The model is set in evaluation mode by default using "),Vme=n(vxe,"CODE",{});var Gst=s(Vme);QRo=r(Gst,"model.eval()"),Gst.forEach(t),WRo=r(vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(vxe,"CODE",{});var Ost=s(Xme);HRo=r(Ost,"model.train()"),Ost.forEach(t),vxe.forEach(t),URo=i(na),T(zF.$$.fragment,na),na.forEach(t),Qs.forEach(t),fIe=i(m),Vi=n(m,"H2",{class:!0});var pNe=s(Vi);QF=n(pNe,"A",{id:!0,class:!0,href:!0});var Vst=s(QF);zme=n(Vst,"SPAN",{});var Xst=s(zme);T(aL.$$.fragment,Xst),Xst.forEach(t),Vst.forEach(t),JRo=i(pNe),Qme=n(pNe,"SPAN",{});var zst=s(Qme);YRo=r(zst,"AutoModelForNextSentencePrediction"),zst.forEach(t),pNe.forEach(t),gIe=i(m),Po=n(m,"DIV",{class:!0});var Ws=s(Po);T(nL.$$.fragment,Ws),KRo=i(Ws),Xi=n(Ws,"P",{});var TK=s(Xi);ZRo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=n(TK,"A",{href:!0});var Qst=s(RG);eBo=r(Qst,"from_pretrained()"),Qst.forEach(t),oBo=r(TK," class method or the "),BG=n(TK,"A",{href:!0});var Wst=s(BG);rBo=r(Wst,"from_config()"),Wst.forEach(t),tBo=r(TK,` class
method.`),TK.forEach(t),aBo=i(Ws),sL=n(Ws,"P",{});var _Ne=s(sL);nBo=r(_Ne,"This class cannot be instantiated directly using "),Wme=n(_Ne,"CODE",{});var Hst=s(Wme);sBo=r(Hst,"__init__()"),Hst.forEach(t),lBo=r(_Ne," (throws an error)."),_Ne.forEach(t),iBo=i(Ws),it=n(Ws,"DIV",{class:!0});var g6=s(it);T(lL.$$.fragment,g6),dBo=i(g6),Hme=n(g6,"P",{});var Ust=s(Hme);cBo=r(Ust,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ust.forEach(t),mBo=i(g6),zi=n(g6,"P",{});var MK=s(zi);fBo=r(MK,`Note:
Loading a model from its configuration file does `),Ume=n(MK,"STRONG",{});var Jst=s(Ume);gBo=r(Jst,"not"),Jst.forEach(t),hBo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(MK,"A",{href:!0});var Yst=s(PG);uBo=r(Yst,"from_pretrained()"),Yst.forEach(t),pBo=r(MK," to load the model weights."),MK.forEach(t),_Bo=i(g6),T(WF.$$.fragment,g6),g6.forEach(t),bBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(iL.$$.fragment,sa),FBo=i(sa),Jme=n(sa,"P",{});var Kst=s(Jme);vBo=r(Kst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kst.forEach(t),TBo=i(sa),Ra=n(sa,"P",{});var h6=s(Ra);MBo=r(h6,"The model class to instantiate is selected based on the "),Yme=n(h6,"CODE",{});var Zst=s(Yme);EBo=r(Zst,"model_type"),Zst.forEach(t),CBo=r(h6,` property of the config object (either
passed as an argument or loaded from `),Kme=n(h6,"CODE",{});var elt=s(Kme);wBo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),ABo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(h6,"CODE",{});var olt=s(Zme);yBo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),LBo=r(h6,":"),h6.forEach(t),xBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);HF=n(Hs,"LI",{});var Txe=s(HF);efe=n(Txe,"STRONG",{});var rlt=s(efe);$Bo=r(rlt,"bert"),rlt.forEach(t),kBo=r(Txe," \u2014 "),IG=n(Txe,"A",{href:!0});var tlt=s(IG);SBo=r(tlt,"BertForNextSentencePrediction"),tlt.forEach(t),RBo=r(Txe," (BERT model)"),Txe.forEach(t),BBo=i(Hs),UF=n(Hs,"LI",{});var Mxe=s(UF);ofe=n(Mxe,"STRONG",{});var alt=s(ofe);PBo=r(alt,"fnet"),alt.forEach(t),IBo=r(Mxe," \u2014 "),qG=n(Mxe,"A",{href:!0});var nlt=s(qG);qBo=r(nlt,"FNetForNextSentencePrediction"),nlt.forEach(t),NBo=r(Mxe," (FNet model)"),Mxe.forEach(t),jBo=i(Hs),JF=n(Hs,"LI",{});var Exe=s(JF);rfe=n(Exe,"STRONG",{});var slt=s(rfe);DBo=r(slt,"megatron-bert"),slt.forEach(t),GBo=r(Exe," \u2014 "),NG=n(Exe,"A",{href:!0});var llt=s(NG);OBo=r(llt,"MegatronBertForNextSentencePrediction"),llt.forEach(t),VBo=r(Exe," (MegatronBert model)"),Exe.forEach(t),XBo=i(Hs),YF=n(Hs,"LI",{});var Cxe=s(YF);tfe=n(Cxe,"STRONG",{});var ilt=s(tfe);zBo=r(ilt,"mobilebert"),ilt.forEach(t),QBo=r(Cxe," \u2014 "),jG=n(Cxe,"A",{href:!0});var dlt=s(jG);WBo=r(dlt,"MobileBertForNextSentencePrediction"),dlt.forEach(t),HBo=r(Cxe," (MobileBERT model)"),Cxe.forEach(t),UBo=i(Hs),KF=n(Hs,"LI",{});var wxe=s(KF);afe=n(wxe,"STRONG",{});var clt=s(afe);JBo=r(clt,"qdqbert"),clt.forEach(t),YBo=r(wxe," \u2014 "),DG=n(wxe,"A",{href:!0});var mlt=s(DG);KBo=r(mlt,"QDQBertForNextSentencePrediction"),mlt.forEach(t),ZBo=r(wxe," (QDQBert model)"),wxe.forEach(t),Hs.forEach(t),ePo=i(sa),ZF=n(sa,"P",{});var Axe=s(ZF);oPo=r(Axe,"The model is set in evaluation mode by default using "),nfe=n(Axe,"CODE",{});var flt=s(nfe);rPo=r(flt,"model.eval()"),flt.forEach(t),tPo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(Axe,"CODE",{});var glt=s(sfe);aPo=r(glt,"model.train()"),glt.forEach(t),Axe.forEach(t),nPo=i(sa),T(ev.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),hIe=i(m),Qi=n(m,"H2",{class:!0});var bNe=s(Qi);ov=n(bNe,"A",{id:!0,class:!0,href:!0});var hlt=s(ov);lfe=n(hlt,"SPAN",{});var ult=s(lfe);T(dL.$$.fragment,ult),ult.forEach(t),hlt.forEach(t),sPo=i(bNe),ife=n(bNe,"SPAN",{});var plt=s(ife);lPo=r(plt,"AutoModelForTokenClassification"),plt.forEach(t),bNe.forEach(t),uIe=i(m),Io=n(m,"DIV",{class:!0});var Us=s(Io);T(cL.$$.fragment,Us),iPo=i(Us),Wi=n(Us,"P",{});var EK=s(Wi);dPo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=n(EK,"A",{href:!0});var _lt=s(GG);cPo=r(_lt,"from_pretrained()"),_lt.forEach(t),mPo=r(EK," class method or the "),OG=n(EK,"A",{href:!0});var blt=s(OG);fPo=r(blt,"from_config()"),blt.forEach(t),gPo=r(EK,` class
method.`),EK.forEach(t),hPo=i(Us),mL=n(Us,"P",{});var FNe=s(mL);uPo=r(FNe,"This class cannot be instantiated directly using "),dfe=n(FNe,"CODE",{});var Flt=s(dfe);pPo=r(Flt,"__init__()"),Flt.forEach(t),_Po=r(FNe," (throws an error)."),FNe.forEach(t),bPo=i(Us),dt=n(Us,"DIV",{class:!0});var u6=s(dt);T(fL.$$.fragment,u6),FPo=i(u6),cfe=n(u6,"P",{});var vlt=s(cfe);vPo=r(vlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vlt.forEach(t),TPo=i(u6),Hi=n(u6,"P",{});var CK=s(Hi);MPo=r(CK,`Note:
Loading a model from its configuration file does `),mfe=n(CK,"STRONG",{});var Tlt=s(mfe);EPo=r(Tlt,"not"),Tlt.forEach(t),CPo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(CK,"A",{href:!0});var Mlt=s(VG);wPo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),APo=r(CK," to load the model weights."),CK.forEach(t),yPo=i(u6),T(rv.$$.fragment,u6),u6.forEach(t),LPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(gL.$$.fragment,la),xPo=i(la),ffe=n(la,"P",{});var Elt=s(ffe);$Po=r(Elt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Elt.forEach(t),kPo=i(la),Ba=n(la,"P",{});var p6=s(Ba);SPo=r(p6,"The model class to instantiate is selected based on the "),gfe=n(p6,"CODE",{});var Clt=s(gfe);RPo=r(Clt,"model_type"),Clt.forEach(t),BPo=r(p6,` property of the config object (either
passed as an argument or loaded from `),hfe=n(p6,"CODE",{});var wlt=s(hfe);PPo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),IPo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(p6,"CODE",{});var Alt=s(ufe);qPo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),NPo=r(p6,":"),p6.forEach(t),jPo=i(la),U=n(la,"UL",{});var J=s(U);tv=n(J,"LI",{});var yxe=s(tv);pfe=n(yxe,"STRONG",{});var ylt=s(pfe);DPo=r(ylt,"albert"),ylt.forEach(t),GPo=r(yxe," \u2014 "),XG=n(yxe,"A",{href:!0});var Llt=s(XG);OPo=r(Llt,"AlbertForTokenClassification"),Llt.forEach(t),VPo=r(yxe," (ALBERT model)"),yxe.forEach(t),XPo=i(J),av=n(J,"LI",{});var Lxe=s(av);_fe=n(Lxe,"STRONG",{});var xlt=s(_fe);zPo=r(xlt,"bert"),xlt.forEach(t),QPo=r(Lxe," \u2014 "),zG=n(Lxe,"A",{href:!0});var $lt=s(zG);WPo=r($lt,"BertForTokenClassification"),$lt.forEach(t),HPo=r(Lxe," (BERT model)"),Lxe.forEach(t),UPo=i(J),nv=n(J,"LI",{});var xxe=s(nv);bfe=n(xxe,"STRONG",{});var klt=s(bfe);JPo=r(klt,"big_bird"),klt.forEach(t),YPo=r(xxe," \u2014 "),QG=n(xxe,"A",{href:!0});var Slt=s(QG);KPo=r(Slt,"BigBirdForTokenClassification"),Slt.forEach(t),ZPo=r(xxe," (BigBird model)"),xxe.forEach(t),eIo=i(J),sv=n(J,"LI",{});var $xe=s(sv);Ffe=n($xe,"STRONG",{});var Rlt=s(Ffe);oIo=r(Rlt,"camembert"),Rlt.forEach(t),rIo=r($xe," \u2014 "),WG=n($xe,"A",{href:!0});var Blt=s(WG);tIo=r(Blt,"CamembertForTokenClassification"),Blt.forEach(t),aIo=r($xe," (CamemBERT model)"),$xe.forEach(t),nIo=i(J),lv=n(J,"LI",{});var kxe=s(lv);vfe=n(kxe,"STRONG",{});var Plt=s(vfe);sIo=r(Plt,"canine"),Plt.forEach(t),lIo=r(kxe," \u2014 "),HG=n(kxe,"A",{href:!0});var Ilt=s(HG);iIo=r(Ilt,"CanineForTokenClassification"),Ilt.forEach(t),dIo=r(kxe," (Canine model)"),kxe.forEach(t),cIo=i(J),iv=n(J,"LI",{});var Sxe=s(iv);Tfe=n(Sxe,"STRONG",{});var qlt=s(Tfe);mIo=r(qlt,"convbert"),qlt.forEach(t),fIo=r(Sxe," \u2014 "),UG=n(Sxe,"A",{href:!0});var Nlt=s(UG);gIo=r(Nlt,"ConvBertForTokenClassification"),Nlt.forEach(t),hIo=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),uIo=i(J),dv=n(J,"LI",{});var Rxe=s(dv);Mfe=n(Rxe,"STRONG",{});var jlt=s(Mfe);pIo=r(jlt,"data2vec-text"),jlt.forEach(t),_Io=r(Rxe," \u2014 "),JG=n(Rxe,"A",{href:!0});var Dlt=s(JG);bIo=r(Dlt,"Data2VecTextForTokenClassification"),Dlt.forEach(t),FIo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),vIo=i(J),cv=n(J,"LI",{});var Bxe=s(cv);Efe=n(Bxe,"STRONG",{});var Glt=s(Efe);TIo=r(Glt,"deberta"),Glt.forEach(t),MIo=r(Bxe," \u2014 "),YG=n(Bxe,"A",{href:!0});var Olt=s(YG);EIo=r(Olt,"DebertaForTokenClassification"),Olt.forEach(t),CIo=r(Bxe," (DeBERTa model)"),Bxe.forEach(t),wIo=i(J),mv=n(J,"LI",{});var Pxe=s(mv);Cfe=n(Pxe,"STRONG",{});var Vlt=s(Cfe);AIo=r(Vlt,"deberta-v2"),Vlt.forEach(t),yIo=r(Pxe," \u2014 "),KG=n(Pxe,"A",{href:!0});var Xlt=s(KG);LIo=r(Xlt,"DebertaV2ForTokenClassification"),Xlt.forEach(t),xIo=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),$Io=i(J),fv=n(J,"LI",{});var Ixe=s(fv);wfe=n(Ixe,"STRONG",{});var zlt=s(wfe);kIo=r(zlt,"distilbert"),zlt.forEach(t),SIo=r(Ixe," \u2014 "),ZG=n(Ixe,"A",{href:!0});var Qlt=s(ZG);RIo=r(Qlt,"DistilBertForTokenClassification"),Qlt.forEach(t),BIo=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),PIo=i(J),gv=n(J,"LI",{});var qxe=s(gv);Afe=n(qxe,"STRONG",{});var Wlt=s(Afe);IIo=r(Wlt,"electra"),Wlt.forEach(t),qIo=r(qxe," \u2014 "),eO=n(qxe,"A",{href:!0});var Hlt=s(eO);NIo=r(Hlt,"ElectraForTokenClassification"),Hlt.forEach(t),jIo=r(qxe," (ELECTRA model)"),qxe.forEach(t),DIo=i(J),hv=n(J,"LI",{});var Nxe=s(hv);yfe=n(Nxe,"STRONG",{});var Ult=s(yfe);GIo=r(Ult,"flaubert"),Ult.forEach(t),OIo=r(Nxe," \u2014 "),oO=n(Nxe,"A",{href:!0});var Jlt=s(oO);VIo=r(Jlt,"FlaubertForTokenClassification"),Jlt.forEach(t),XIo=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),zIo=i(J),uv=n(J,"LI",{});var jxe=s(uv);Lfe=n(jxe,"STRONG",{});var Ylt=s(Lfe);QIo=r(Ylt,"fnet"),Ylt.forEach(t),WIo=r(jxe," \u2014 "),rO=n(jxe,"A",{href:!0});var Klt=s(rO);HIo=r(Klt,"FNetForTokenClassification"),Klt.forEach(t),UIo=r(jxe," (FNet model)"),jxe.forEach(t),JIo=i(J),pv=n(J,"LI",{});var Dxe=s(pv);xfe=n(Dxe,"STRONG",{});var Zlt=s(xfe);YIo=r(Zlt,"funnel"),Zlt.forEach(t),KIo=r(Dxe," \u2014 "),tO=n(Dxe,"A",{href:!0});var eit=s(tO);ZIo=r(eit,"FunnelForTokenClassification"),eit.forEach(t),eqo=r(Dxe," (Funnel Transformer model)"),Dxe.forEach(t),oqo=i(J),_v=n(J,"LI",{});var Gxe=s(_v);$fe=n(Gxe,"STRONG",{});var oit=s($fe);rqo=r(oit,"gpt2"),oit.forEach(t),tqo=r(Gxe," \u2014 "),aO=n(Gxe,"A",{href:!0});var rit=s(aO);aqo=r(rit,"GPT2ForTokenClassification"),rit.forEach(t),nqo=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),sqo=i(J),bv=n(J,"LI",{});var Oxe=s(bv);kfe=n(Oxe,"STRONG",{});var tit=s(kfe);lqo=r(tit,"ibert"),tit.forEach(t),iqo=r(Oxe," \u2014 "),nO=n(Oxe,"A",{href:!0});var ait=s(nO);dqo=r(ait,"IBertForTokenClassification"),ait.forEach(t),cqo=r(Oxe," (I-BERT model)"),Oxe.forEach(t),mqo=i(J),Fv=n(J,"LI",{});var Vxe=s(Fv);Sfe=n(Vxe,"STRONG",{});var nit=s(Sfe);fqo=r(nit,"layoutlm"),nit.forEach(t),gqo=r(Vxe," \u2014 "),sO=n(Vxe,"A",{href:!0});var sit=s(sO);hqo=r(sit,"LayoutLMForTokenClassification"),sit.forEach(t),uqo=r(Vxe," (LayoutLM model)"),Vxe.forEach(t),pqo=i(J),vv=n(J,"LI",{});var Xxe=s(vv);Rfe=n(Xxe,"STRONG",{});var lit=s(Rfe);_qo=r(lit,"layoutlmv2"),lit.forEach(t),bqo=r(Xxe," \u2014 "),lO=n(Xxe,"A",{href:!0});var iit=s(lO);Fqo=r(iit,"LayoutLMv2ForTokenClassification"),iit.forEach(t),vqo=r(Xxe," (LayoutLMv2 model)"),Xxe.forEach(t),Tqo=i(J),Tv=n(J,"LI",{});var zxe=s(Tv);Bfe=n(zxe,"STRONG",{});var dit=s(Bfe);Mqo=r(dit,"longformer"),dit.forEach(t),Eqo=r(zxe," \u2014 "),iO=n(zxe,"A",{href:!0});var cit=s(iO);Cqo=r(cit,"LongformerForTokenClassification"),cit.forEach(t),wqo=r(zxe," (Longformer model)"),zxe.forEach(t),Aqo=i(J),Mv=n(J,"LI",{});var Qxe=s(Mv);Pfe=n(Qxe,"STRONG",{});var mit=s(Pfe);yqo=r(mit,"megatron-bert"),mit.forEach(t),Lqo=r(Qxe," \u2014 "),dO=n(Qxe,"A",{href:!0});var fit=s(dO);xqo=r(fit,"MegatronBertForTokenClassification"),fit.forEach(t),$qo=r(Qxe," (MegatronBert model)"),Qxe.forEach(t),kqo=i(J),Ev=n(J,"LI",{});var Wxe=s(Ev);Ife=n(Wxe,"STRONG",{});var git=s(Ife);Sqo=r(git,"mobilebert"),git.forEach(t),Rqo=r(Wxe," \u2014 "),cO=n(Wxe,"A",{href:!0});var hit=s(cO);Bqo=r(hit,"MobileBertForTokenClassification"),hit.forEach(t),Pqo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),Iqo=i(J),Cv=n(J,"LI",{});var Hxe=s(Cv);qfe=n(Hxe,"STRONG",{});var uit=s(qfe);qqo=r(uit,"mpnet"),uit.forEach(t),Nqo=r(Hxe," \u2014 "),mO=n(Hxe,"A",{href:!0});var pit=s(mO);jqo=r(pit,"MPNetForTokenClassification"),pit.forEach(t),Dqo=r(Hxe," (MPNet model)"),Hxe.forEach(t),Gqo=i(J),wv=n(J,"LI",{});var Uxe=s(wv);Nfe=n(Uxe,"STRONG",{});var _it=s(Nfe);Oqo=r(_it,"nystromformer"),_it.forEach(t),Vqo=r(Uxe," \u2014 "),fO=n(Uxe,"A",{href:!0});var bit=s(fO);Xqo=r(bit,"NystromformerForTokenClassification"),bit.forEach(t),zqo=r(Uxe," (Nystromformer model)"),Uxe.forEach(t),Qqo=i(J),Av=n(J,"LI",{});var Jxe=s(Av);jfe=n(Jxe,"STRONG",{});var Fit=s(jfe);Wqo=r(Fit,"qdqbert"),Fit.forEach(t),Hqo=r(Jxe," \u2014 "),gO=n(Jxe,"A",{href:!0});var vit=s(gO);Uqo=r(vit,"QDQBertForTokenClassification"),vit.forEach(t),Jqo=r(Jxe," (QDQBert model)"),Jxe.forEach(t),Yqo=i(J),yv=n(J,"LI",{});var Yxe=s(yv);Dfe=n(Yxe,"STRONG",{});var Tit=s(Dfe);Kqo=r(Tit,"rembert"),Tit.forEach(t),Zqo=r(Yxe," \u2014 "),hO=n(Yxe,"A",{href:!0});var Mit=s(hO);eNo=r(Mit,"RemBertForTokenClassification"),Mit.forEach(t),oNo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),rNo=i(J),Lv=n(J,"LI",{});var Kxe=s(Lv);Gfe=n(Kxe,"STRONG",{});var Eit=s(Gfe);tNo=r(Eit,"roberta"),Eit.forEach(t),aNo=r(Kxe," \u2014 "),uO=n(Kxe,"A",{href:!0});var Cit=s(uO);nNo=r(Cit,"RobertaForTokenClassification"),Cit.forEach(t),sNo=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),lNo=i(J),xv=n(J,"LI",{});var Zxe=s(xv);Ofe=n(Zxe,"STRONG",{});var wit=s(Ofe);iNo=r(wit,"roformer"),wit.forEach(t),dNo=r(Zxe," \u2014 "),pO=n(Zxe,"A",{href:!0});var Ait=s(pO);cNo=r(Ait,"RoFormerForTokenClassification"),Ait.forEach(t),mNo=r(Zxe," (RoFormer model)"),Zxe.forEach(t),fNo=i(J),$v=n(J,"LI",{});var e7e=s($v);Vfe=n(e7e,"STRONG",{});var yit=s(Vfe);gNo=r(yit,"squeezebert"),yit.forEach(t),hNo=r(e7e," \u2014 "),_O=n(e7e,"A",{href:!0});var Lit=s(_O);uNo=r(Lit,"SqueezeBertForTokenClassification"),Lit.forEach(t),pNo=r(e7e," (SqueezeBERT model)"),e7e.forEach(t),_No=i(J),kv=n(J,"LI",{});var o7e=s(kv);Xfe=n(o7e,"STRONG",{});var xit=s(Xfe);bNo=r(xit,"xlm"),xit.forEach(t),FNo=r(o7e," \u2014 "),bO=n(o7e,"A",{href:!0});var $it=s(bO);vNo=r($it,"XLMForTokenClassification"),$it.forEach(t),TNo=r(o7e," (XLM model)"),o7e.forEach(t),MNo=i(J),Sv=n(J,"LI",{});var r7e=s(Sv);zfe=n(r7e,"STRONG",{});var kit=s(zfe);ENo=r(kit,"xlm-roberta"),kit.forEach(t),CNo=r(r7e," \u2014 "),FO=n(r7e,"A",{href:!0});var Sit=s(FO);wNo=r(Sit,"XLMRobertaForTokenClassification"),Sit.forEach(t),ANo=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),yNo=i(J),Rv=n(J,"LI",{});var t7e=s(Rv);Qfe=n(t7e,"STRONG",{});var Rit=s(Qfe);LNo=r(Rit,"xlm-roberta-xl"),Rit.forEach(t),xNo=r(t7e," \u2014 "),vO=n(t7e,"A",{href:!0});var Bit=s(vO);$No=r(Bit,"XLMRobertaXLForTokenClassification"),Bit.forEach(t),kNo=r(t7e," (XLM-RoBERTa-XL model)"),t7e.forEach(t),SNo=i(J),Bv=n(J,"LI",{});var a7e=s(Bv);Wfe=n(a7e,"STRONG",{});var Pit=s(Wfe);RNo=r(Pit,"xlnet"),Pit.forEach(t),BNo=r(a7e," \u2014 "),TO=n(a7e,"A",{href:!0});var Iit=s(TO);PNo=r(Iit,"XLNetForTokenClassification"),Iit.forEach(t),INo=r(a7e," (XLNet model)"),a7e.forEach(t),qNo=i(J),Pv=n(J,"LI",{});var n7e=s(Pv);Hfe=n(n7e,"STRONG",{});var qit=s(Hfe);NNo=r(qit,"yoso"),qit.forEach(t),jNo=r(n7e," \u2014 "),MO=n(n7e,"A",{href:!0});var Nit=s(MO);DNo=r(Nit,"YosoForTokenClassification"),Nit.forEach(t),GNo=r(n7e," (YOSO model)"),n7e.forEach(t),J.forEach(t),ONo=i(la),Iv=n(la,"P",{});var s7e=s(Iv);VNo=r(s7e,"The model is set in evaluation mode by default using "),Ufe=n(s7e,"CODE",{});var jit=s(Ufe);XNo=r(jit,"model.eval()"),jit.forEach(t),zNo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(s7e,"CODE",{});var Dit=s(Jfe);QNo=r(Dit,"model.train()"),Dit.forEach(t),s7e.forEach(t),WNo=i(la),T(qv.$$.fragment,la),la.forEach(t),Us.forEach(t),pIe=i(m),Ui=n(m,"H2",{class:!0});var vNe=s(Ui);Nv=n(vNe,"A",{id:!0,class:!0,href:!0});var Git=s(Nv);Yfe=n(Git,"SPAN",{});var Oit=s(Yfe);T(hL.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),HNo=i(vNe),Kfe=n(vNe,"SPAN",{});var Vit=s(Kfe);UNo=r(Vit,"AutoModelForQuestionAnswering"),Vit.forEach(t),vNe.forEach(t),_Ie=i(m),qo=n(m,"DIV",{class:!0});var Js=s(qo);T(uL.$$.fragment,Js),JNo=i(Js),Ji=n(Js,"P",{});var wK=s(Ji);YNo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=n(wK,"A",{href:!0});var Xit=s(EO);KNo=r(Xit,"from_pretrained()"),Xit.forEach(t),ZNo=r(wK," class method or the "),CO=n(wK,"A",{href:!0});var zit=s(CO);ejo=r(zit,"from_config()"),zit.forEach(t),ojo=r(wK,` class
method.`),wK.forEach(t),rjo=i(Js),pL=n(Js,"P",{});var TNe=s(pL);tjo=r(TNe,"This class cannot be instantiated directly using "),Zfe=n(TNe,"CODE",{});var Qit=s(Zfe);ajo=r(Qit,"__init__()"),Qit.forEach(t),njo=r(TNe," (throws an error)."),TNe.forEach(t),sjo=i(Js),ct=n(Js,"DIV",{class:!0});var _6=s(ct);T(_L.$$.fragment,_6),ljo=i(_6),ege=n(_6,"P",{});var Wit=s(ege);ijo=r(Wit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wit.forEach(t),djo=i(_6),Yi=n(_6,"P",{});var AK=s(Yi);cjo=r(AK,`Note:
Loading a model from its configuration file does `),oge=n(AK,"STRONG",{});var Hit=s(oge);mjo=r(Hit,"not"),Hit.forEach(t),fjo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(AK,"A",{href:!0});var Uit=s(wO);gjo=r(Uit,"from_pretrained()"),Uit.forEach(t),hjo=r(AK," to load the model weights."),AK.forEach(t),ujo=i(_6),T(jv.$$.fragment,_6),_6.forEach(t),pjo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(bL.$$.fragment,ia),_jo=i(ia),rge=n(ia,"P",{});var Jit=s(rge);bjo=r(Jit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jit.forEach(t),Fjo=i(ia),Pa=n(ia,"P",{});var b6=s(Pa);vjo=r(b6,"The model class to instantiate is selected based on the "),tge=n(b6,"CODE",{});var Yit=s(tge);Tjo=r(Yit,"model_type"),Yit.forEach(t),Mjo=r(b6,` property of the config object (either
passed as an argument or loaded from `),age=n(b6,"CODE",{});var Kit=s(age);Ejo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),Cjo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(b6,"CODE",{});var Zit=s(nge);wjo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),Ajo=r(b6,":"),b6.forEach(t),yjo=i(ia),O=n(ia,"UL",{});var X=s(O);Dv=n(X,"LI",{});var l7e=s(Dv);sge=n(l7e,"STRONG",{});var edt=s(sge);Ljo=r(edt,"albert"),edt.forEach(t),xjo=r(l7e," \u2014 "),AO=n(l7e,"A",{href:!0});var odt=s(AO);$jo=r(odt,"AlbertForQuestionAnswering"),odt.forEach(t),kjo=r(l7e," (ALBERT model)"),l7e.forEach(t),Sjo=i(X),Gv=n(X,"LI",{});var i7e=s(Gv);lge=n(i7e,"STRONG",{});var rdt=s(lge);Rjo=r(rdt,"bart"),rdt.forEach(t),Bjo=r(i7e," \u2014 "),yO=n(i7e,"A",{href:!0});var tdt=s(yO);Pjo=r(tdt,"BartForQuestionAnswering"),tdt.forEach(t),Ijo=r(i7e," (BART model)"),i7e.forEach(t),qjo=i(X),Ov=n(X,"LI",{});var d7e=s(Ov);ige=n(d7e,"STRONG",{});var adt=s(ige);Njo=r(adt,"bert"),adt.forEach(t),jjo=r(d7e," \u2014 "),LO=n(d7e,"A",{href:!0});var ndt=s(LO);Djo=r(ndt,"BertForQuestionAnswering"),ndt.forEach(t),Gjo=r(d7e," (BERT model)"),d7e.forEach(t),Ojo=i(X),Vv=n(X,"LI",{});var c7e=s(Vv);dge=n(c7e,"STRONG",{});var sdt=s(dge);Vjo=r(sdt,"big_bird"),sdt.forEach(t),Xjo=r(c7e," \u2014 "),xO=n(c7e,"A",{href:!0});var ldt=s(xO);zjo=r(ldt,"BigBirdForQuestionAnswering"),ldt.forEach(t),Qjo=r(c7e," (BigBird model)"),c7e.forEach(t),Wjo=i(X),Xv=n(X,"LI",{});var m7e=s(Xv);cge=n(m7e,"STRONG",{});var idt=s(cge);Hjo=r(idt,"bigbird_pegasus"),idt.forEach(t),Ujo=r(m7e," \u2014 "),$O=n(m7e,"A",{href:!0});var ddt=s($O);Jjo=r(ddt,"BigBirdPegasusForQuestionAnswering"),ddt.forEach(t),Yjo=r(m7e," (BigBirdPegasus model)"),m7e.forEach(t),Kjo=i(X),zv=n(X,"LI",{});var f7e=s(zv);mge=n(f7e,"STRONG",{});var cdt=s(mge);Zjo=r(cdt,"camembert"),cdt.forEach(t),eDo=r(f7e," \u2014 "),kO=n(f7e,"A",{href:!0});var mdt=s(kO);oDo=r(mdt,"CamembertForQuestionAnswering"),mdt.forEach(t),rDo=r(f7e," (CamemBERT model)"),f7e.forEach(t),tDo=i(X),Qv=n(X,"LI",{});var g7e=s(Qv);fge=n(g7e,"STRONG",{});var fdt=s(fge);aDo=r(fdt,"canine"),fdt.forEach(t),nDo=r(g7e," \u2014 "),SO=n(g7e,"A",{href:!0});var gdt=s(SO);sDo=r(gdt,"CanineForQuestionAnswering"),gdt.forEach(t),lDo=r(g7e," (Canine model)"),g7e.forEach(t),iDo=i(X),Wv=n(X,"LI",{});var h7e=s(Wv);gge=n(h7e,"STRONG",{});var hdt=s(gge);dDo=r(hdt,"convbert"),hdt.forEach(t),cDo=r(h7e," \u2014 "),RO=n(h7e,"A",{href:!0});var udt=s(RO);mDo=r(udt,"ConvBertForQuestionAnswering"),udt.forEach(t),fDo=r(h7e," (ConvBERT model)"),h7e.forEach(t),gDo=i(X),Hv=n(X,"LI",{});var u7e=s(Hv);hge=n(u7e,"STRONG",{});var pdt=s(hge);hDo=r(pdt,"data2vec-text"),pdt.forEach(t),uDo=r(u7e," \u2014 "),BO=n(u7e,"A",{href:!0});var _dt=s(BO);pDo=r(_dt,"Data2VecTextForQuestionAnswering"),_dt.forEach(t),_Do=r(u7e," (Data2VecText model)"),u7e.forEach(t),bDo=i(X),Uv=n(X,"LI",{});var p7e=s(Uv);uge=n(p7e,"STRONG",{});var bdt=s(uge);FDo=r(bdt,"deberta"),bdt.forEach(t),vDo=r(p7e," \u2014 "),PO=n(p7e,"A",{href:!0});var Fdt=s(PO);TDo=r(Fdt,"DebertaForQuestionAnswering"),Fdt.forEach(t),MDo=r(p7e," (DeBERTa model)"),p7e.forEach(t),EDo=i(X),Jv=n(X,"LI",{});var _7e=s(Jv);pge=n(_7e,"STRONG",{});var vdt=s(pge);CDo=r(vdt,"deberta-v2"),vdt.forEach(t),wDo=r(_7e," \u2014 "),IO=n(_7e,"A",{href:!0});var Tdt=s(IO);ADo=r(Tdt,"DebertaV2ForQuestionAnswering"),Tdt.forEach(t),yDo=r(_7e," (DeBERTa-v2 model)"),_7e.forEach(t),LDo=i(X),Yv=n(X,"LI",{});var b7e=s(Yv);_ge=n(b7e,"STRONG",{});var Mdt=s(_ge);xDo=r(Mdt,"distilbert"),Mdt.forEach(t),$Do=r(b7e," \u2014 "),qO=n(b7e,"A",{href:!0});var Edt=s(qO);kDo=r(Edt,"DistilBertForQuestionAnswering"),Edt.forEach(t),SDo=r(b7e," (DistilBERT model)"),b7e.forEach(t),RDo=i(X),Kv=n(X,"LI",{});var F7e=s(Kv);bge=n(F7e,"STRONG",{});var Cdt=s(bge);BDo=r(Cdt,"electra"),Cdt.forEach(t),PDo=r(F7e," \u2014 "),NO=n(F7e,"A",{href:!0});var wdt=s(NO);IDo=r(wdt,"ElectraForQuestionAnswering"),wdt.forEach(t),qDo=r(F7e," (ELECTRA model)"),F7e.forEach(t),NDo=i(X),Zv=n(X,"LI",{});var v7e=s(Zv);Fge=n(v7e,"STRONG",{});var Adt=s(Fge);jDo=r(Adt,"flaubert"),Adt.forEach(t),DDo=r(v7e," \u2014 "),jO=n(v7e,"A",{href:!0});var ydt=s(jO);GDo=r(ydt,"FlaubertForQuestionAnsweringSimple"),ydt.forEach(t),ODo=r(v7e," (FlauBERT model)"),v7e.forEach(t),VDo=i(X),e1=n(X,"LI",{});var T7e=s(e1);vge=n(T7e,"STRONG",{});var Ldt=s(vge);XDo=r(Ldt,"fnet"),Ldt.forEach(t),zDo=r(T7e," \u2014 "),DO=n(T7e,"A",{href:!0});var xdt=s(DO);QDo=r(xdt,"FNetForQuestionAnswering"),xdt.forEach(t),WDo=r(T7e," (FNet model)"),T7e.forEach(t),HDo=i(X),o1=n(X,"LI",{});var M7e=s(o1);Tge=n(M7e,"STRONG",{});var $dt=s(Tge);UDo=r($dt,"funnel"),$dt.forEach(t),JDo=r(M7e," \u2014 "),GO=n(M7e,"A",{href:!0});var kdt=s(GO);YDo=r(kdt,"FunnelForQuestionAnswering"),kdt.forEach(t),KDo=r(M7e," (Funnel Transformer model)"),M7e.forEach(t),ZDo=i(X),r1=n(X,"LI",{});var E7e=s(r1);Mge=n(E7e,"STRONG",{});var Sdt=s(Mge);eGo=r(Sdt,"gptj"),Sdt.forEach(t),oGo=r(E7e," \u2014 "),OO=n(E7e,"A",{href:!0});var Rdt=s(OO);rGo=r(Rdt,"GPTJForQuestionAnswering"),Rdt.forEach(t),tGo=r(E7e," (GPT-J model)"),E7e.forEach(t),aGo=i(X),t1=n(X,"LI",{});var C7e=s(t1);Ege=n(C7e,"STRONG",{});var Bdt=s(Ege);nGo=r(Bdt,"ibert"),Bdt.forEach(t),sGo=r(C7e," \u2014 "),VO=n(C7e,"A",{href:!0});var Pdt=s(VO);lGo=r(Pdt,"IBertForQuestionAnswering"),Pdt.forEach(t),iGo=r(C7e," (I-BERT model)"),C7e.forEach(t),dGo=i(X),a1=n(X,"LI",{});var w7e=s(a1);Cge=n(w7e,"STRONG",{});var Idt=s(Cge);cGo=r(Idt,"layoutlmv2"),Idt.forEach(t),mGo=r(w7e," \u2014 "),XO=n(w7e,"A",{href:!0});var qdt=s(XO);fGo=r(qdt,"LayoutLMv2ForQuestionAnswering"),qdt.forEach(t),gGo=r(w7e," (LayoutLMv2 model)"),w7e.forEach(t),hGo=i(X),n1=n(X,"LI",{});var A7e=s(n1);wge=n(A7e,"STRONG",{});var Ndt=s(wge);uGo=r(Ndt,"led"),Ndt.forEach(t),pGo=r(A7e," \u2014 "),zO=n(A7e,"A",{href:!0});var jdt=s(zO);_Go=r(jdt,"LEDForQuestionAnswering"),jdt.forEach(t),bGo=r(A7e," (LED model)"),A7e.forEach(t),FGo=i(X),s1=n(X,"LI",{});var y7e=s(s1);Age=n(y7e,"STRONG",{});var Ddt=s(Age);vGo=r(Ddt,"longformer"),Ddt.forEach(t),TGo=r(y7e," \u2014 "),QO=n(y7e,"A",{href:!0});var Gdt=s(QO);MGo=r(Gdt,"LongformerForQuestionAnswering"),Gdt.forEach(t),EGo=r(y7e," (Longformer model)"),y7e.forEach(t),CGo=i(X),l1=n(X,"LI",{});var L7e=s(l1);yge=n(L7e,"STRONG",{});var Odt=s(yge);wGo=r(Odt,"lxmert"),Odt.forEach(t),AGo=r(L7e," \u2014 "),WO=n(L7e,"A",{href:!0});var Vdt=s(WO);yGo=r(Vdt,"LxmertForQuestionAnswering"),Vdt.forEach(t),LGo=r(L7e," (LXMERT model)"),L7e.forEach(t),xGo=i(X),i1=n(X,"LI",{});var x7e=s(i1);Lge=n(x7e,"STRONG",{});var Xdt=s(Lge);$Go=r(Xdt,"mbart"),Xdt.forEach(t),kGo=r(x7e," \u2014 "),HO=n(x7e,"A",{href:!0});var zdt=s(HO);SGo=r(zdt,"MBartForQuestionAnswering"),zdt.forEach(t),RGo=r(x7e," (mBART model)"),x7e.forEach(t),BGo=i(X),d1=n(X,"LI",{});var $7e=s(d1);xge=n($7e,"STRONG",{});var Qdt=s(xge);PGo=r(Qdt,"megatron-bert"),Qdt.forEach(t),IGo=r($7e," \u2014 "),UO=n($7e,"A",{href:!0});var Wdt=s(UO);qGo=r(Wdt,"MegatronBertForQuestionAnswering"),Wdt.forEach(t),NGo=r($7e," (MegatronBert model)"),$7e.forEach(t),jGo=i(X),c1=n(X,"LI",{});var k7e=s(c1);$ge=n(k7e,"STRONG",{});var Hdt=s($ge);DGo=r(Hdt,"mobilebert"),Hdt.forEach(t),GGo=r(k7e," \u2014 "),JO=n(k7e,"A",{href:!0});var Udt=s(JO);OGo=r(Udt,"MobileBertForQuestionAnswering"),Udt.forEach(t),VGo=r(k7e," (MobileBERT model)"),k7e.forEach(t),XGo=i(X),m1=n(X,"LI",{});var S7e=s(m1);kge=n(S7e,"STRONG",{});var Jdt=s(kge);zGo=r(Jdt,"mpnet"),Jdt.forEach(t),QGo=r(S7e," \u2014 "),YO=n(S7e,"A",{href:!0});var Ydt=s(YO);WGo=r(Ydt,"MPNetForQuestionAnswering"),Ydt.forEach(t),HGo=r(S7e," (MPNet model)"),S7e.forEach(t),UGo=i(X),f1=n(X,"LI",{});var R7e=s(f1);Sge=n(R7e,"STRONG",{});var Kdt=s(Sge);JGo=r(Kdt,"nystromformer"),Kdt.forEach(t),YGo=r(R7e," \u2014 "),KO=n(R7e,"A",{href:!0});var Zdt=s(KO);KGo=r(Zdt,"NystromformerForQuestionAnswering"),Zdt.forEach(t),ZGo=r(R7e," (Nystromformer model)"),R7e.forEach(t),eOo=i(X),g1=n(X,"LI",{});var B7e=s(g1);Rge=n(B7e,"STRONG",{});var ect=s(Rge);oOo=r(ect,"qdqbert"),ect.forEach(t),rOo=r(B7e," \u2014 "),ZO=n(B7e,"A",{href:!0});var oct=s(ZO);tOo=r(oct,"QDQBertForQuestionAnswering"),oct.forEach(t),aOo=r(B7e," (QDQBert model)"),B7e.forEach(t),nOo=i(X),h1=n(X,"LI",{});var P7e=s(h1);Bge=n(P7e,"STRONG",{});var rct=s(Bge);sOo=r(rct,"reformer"),rct.forEach(t),lOo=r(P7e," \u2014 "),eV=n(P7e,"A",{href:!0});var tct=s(eV);iOo=r(tct,"ReformerForQuestionAnswering"),tct.forEach(t),dOo=r(P7e," (Reformer model)"),P7e.forEach(t),cOo=i(X),u1=n(X,"LI",{});var I7e=s(u1);Pge=n(I7e,"STRONG",{});var act=s(Pge);mOo=r(act,"rembert"),act.forEach(t),fOo=r(I7e," \u2014 "),oV=n(I7e,"A",{href:!0});var nct=s(oV);gOo=r(nct,"RemBertForQuestionAnswering"),nct.forEach(t),hOo=r(I7e," (RemBERT model)"),I7e.forEach(t),uOo=i(X),p1=n(X,"LI",{});var q7e=s(p1);Ige=n(q7e,"STRONG",{});var sct=s(Ige);pOo=r(sct,"roberta"),sct.forEach(t),_Oo=r(q7e," \u2014 "),rV=n(q7e,"A",{href:!0});var lct=s(rV);bOo=r(lct,"RobertaForQuestionAnswering"),lct.forEach(t),FOo=r(q7e," (RoBERTa model)"),q7e.forEach(t),vOo=i(X),_1=n(X,"LI",{});var N7e=s(_1);qge=n(N7e,"STRONG",{});var ict=s(qge);TOo=r(ict,"roformer"),ict.forEach(t),MOo=r(N7e," \u2014 "),tV=n(N7e,"A",{href:!0});var dct=s(tV);EOo=r(dct,"RoFormerForQuestionAnswering"),dct.forEach(t),COo=r(N7e," (RoFormer model)"),N7e.forEach(t),wOo=i(X),b1=n(X,"LI",{});var j7e=s(b1);Nge=n(j7e,"STRONG",{});var cct=s(Nge);AOo=r(cct,"splinter"),cct.forEach(t),yOo=r(j7e," \u2014 "),aV=n(j7e,"A",{href:!0});var mct=s(aV);LOo=r(mct,"SplinterForQuestionAnswering"),mct.forEach(t),xOo=r(j7e," (Splinter model)"),j7e.forEach(t),$Oo=i(X),F1=n(X,"LI",{});var D7e=s(F1);jge=n(D7e,"STRONG",{});var fct=s(jge);kOo=r(fct,"squeezebert"),fct.forEach(t),SOo=r(D7e," \u2014 "),nV=n(D7e,"A",{href:!0});var gct=s(nV);ROo=r(gct,"SqueezeBertForQuestionAnswering"),gct.forEach(t),BOo=r(D7e," (SqueezeBERT model)"),D7e.forEach(t),POo=i(X),v1=n(X,"LI",{});var G7e=s(v1);Dge=n(G7e,"STRONG",{});var hct=s(Dge);IOo=r(hct,"xlm"),hct.forEach(t),qOo=r(G7e," \u2014 "),sV=n(G7e,"A",{href:!0});var uct=s(sV);NOo=r(uct,"XLMForQuestionAnsweringSimple"),uct.forEach(t),jOo=r(G7e," (XLM model)"),G7e.forEach(t),DOo=i(X),T1=n(X,"LI",{});var O7e=s(T1);Gge=n(O7e,"STRONG",{});var pct=s(Gge);GOo=r(pct,"xlm-roberta"),pct.forEach(t),OOo=r(O7e," \u2014 "),lV=n(O7e,"A",{href:!0});var _ct=s(lV);VOo=r(_ct,"XLMRobertaForQuestionAnswering"),_ct.forEach(t),XOo=r(O7e," (XLM-RoBERTa model)"),O7e.forEach(t),zOo=i(X),M1=n(X,"LI",{});var V7e=s(M1);Oge=n(V7e,"STRONG",{});var bct=s(Oge);QOo=r(bct,"xlm-roberta-xl"),bct.forEach(t),WOo=r(V7e," \u2014 "),iV=n(V7e,"A",{href:!0});var Fct=s(iV);HOo=r(Fct,"XLMRobertaXLForQuestionAnswering"),Fct.forEach(t),UOo=r(V7e," (XLM-RoBERTa-XL model)"),V7e.forEach(t),JOo=i(X),E1=n(X,"LI",{});var X7e=s(E1);Vge=n(X7e,"STRONG",{});var vct=s(Vge);YOo=r(vct,"xlnet"),vct.forEach(t),KOo=r(X7e," \u2014 "),dV=n(X7e,"A",{href:!0});var Tct=s(dV);ZOo=r(Tct,"XLNetForQuestionAnsweringSimple"),Tct.forEach(t),eVo=r(X7e," (XLNet model)"),X7e.forEach(t),oVo=i(X),C1=n(X,"LI",{});var z7e=s(C1);Xge=n(z7e,"STRONG",{});var Mct=s(Xge);rVo=r(Mct,"yoso"),Mct.forEach(t),tVo=r(z7e," \u2014 "),cV=n(z7e,"A",{href:!0});var Ect=s(cV);aVo=r(Ect,"YosoForQuestionAnswering"),Ect.forEach(t),nVo=r(z7e," (YOSO model)"),z7e.forEach(t),X.forEach(t),sVo=i(ia),w1=n(ia,"P",{});var Q7e=s(w1);lVo=r(Q7e,"The model is set in evaluation mode by default using "),zge=n(Q7e,"CODE",{});var Cct=s(zge);iVo=r(Cct,"model.eval()"),Cct.forEach(t),dVo=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(Q7e,"CODE",{});var wct=s(Qge);cVo=r(wct,"model.train()"),wct.forEach(t),Q7e.forEach(t),mVo=i(ia),T(A1.$$.fragment,ia),ia.forEach(t),Js.forEach(t),bIe=i(m),Ki=n(m,"H2",{class:!0});var MNe=s(Ki);y1=n(MNe,"A",{id:!0,class:!0,href:!0});var Act=s(y1);Wge=n(Act,"SPAN",{});var yct=s(Wge);T(FL.$$.fragment,yct),yct.forEach(t),Act.forEach(t),fVo=i(MNe),Hge=n(MNe,"SPAN",{});var Lct=s(Hge);gVo=r(Lct,"AutoModelForTableQuestionAnswering"),Lct.forEach(t),MNe.forEach(t),FIe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(vL.$$.fragment,Ys),hVo=i(Ys),Zi=n(Ys,"P",{});var yK=s(Zi);uVo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mV=n(yK,"A",{href:!0});var xct=s(mV);pVo=r(xct,"from_pretrained()"),xct.forEach(t),_Vo=r(yK," class method or the "),fV=n(yK,"A",{href:!0});var $ct=s(fV);bVo=r($ct,"from_config()"),$ct.forEach(t),FVo=r(yK,` class
method.`),yK.forEach(t),vVo=i(Ys),TL=n(Ys,"P",{});var ENe=s(TL);TVo=r(ENe,"This class cannot be instantiated directly using "),Uge=n(ENe,"CODE",{});var kct=s(Uge);MVo=r(kct,"__init__()"),kct.forEach(t),EVo=r(ENe," (throws an error)."),ENe.forEach(t),CVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var F6=s(mt);T(ML.$$.fragment,F6),wVo=i(F6),Jge=n(F6,"P",{});var Sct=s(Jge);AVo=r(Sct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sct.forEach(t),yVo=i(F6),ed=n(F6,"P",{});var LK=s(ed);LVo=r(LK,`Note:
Loading a model from its configuration file does `),Yge=n(LK,"STRONG",{});var Rct=s(Yge);xVo=r(Rct,"not"),Rct.forEach(t),$Vo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(LK,"A",{href:!0});var Bct=s(gV);kVo=r(Bct,"from_pretrained()"),Bct.forEach(t),SVo=r(LK," to load the model weights."),LK.forEach(t),RVo=i(F6),T(L1.$$.fragment,F6),F6.forEach(t),BVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(EL.$$.fragment,da),PVo=i(da),Kge=n(da,"P",{});var Pct=s(Kge);IVo=r(Pct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pct.forEach(t),qVo=i(da),Ia=n(da,"P",{});var v6=s(Ia);NVo=r(v6,"The model class to instantiate is selected based on the "),Zge=n(v6,"CODE",{});var Ict=s(Zge);jVo=r(Ict,"model_type"),Ict.forEach(t),DVo=r(v6,` property of the config object (either
passed as an argument or loaded from `),ehe=n(v6,"CODE",{});var qct=s(ehe);GVo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),OVo=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(v6,"CODE",{});var Nct=s(ohe);VVo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),XVo=r(v6,":"),v6.forEach(t),zVo=i(da),rhe=n(da,"UL",{});var jct=s(rhe);x1=n(jct,"LI",{});var W7e=s(x1);the=n(W7e,"STRONG",{});var Dct=s(the);QVo=r(Dct,"tapas"),Dct.forEach(t),WVo=r(W7e," \u2014 "),hV=n(W7e,"A",{href:!0});var Gct=s(hV);HVo=r(Gct,"TapasForQuestionAnswering"),Gct.forEach(t),UVo=r(W7e," (TAPAS model)"),W7e.forEach(t),jct.forEach(t),JVo=i(da),$1=n(da,"P",{});var H7e=s($1);YVo=r(H7e,"The model is set in evaluation mode by default using "),ahe=n(H7e,"CODE",{});var Oct=s(ahe);KVo=r(Oct,"model.eval()"),Oct.forEach(t),ZVo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(H7e,"CODE",{});var Vct=s(nhe);eXo=r(Vct,"model.train()"),Vct.forEach(t),H7e.forEach(t),oXo=i(da),T(k1.$$.fragment,da),da.forEach(t),Ys.forEach(t),vIe=i(m),od=n(m,"H2",{class:!0});var CNe=s(od);S1=n(CNe,"A",{id:!0,class:!0,href:!0});var Xct=s(S1);she=n(Xct,"SPAN",{});var zct=s(she);T(CL.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),rXo=i(CNe),lhe=n(CNe,"SPAN",{});var Qct=s(lhe);tXo=r(Qct,"AutoModelForImageClassification"),Qct.forEach(t),CNe.forEach(t),TIe=i(m),jo=n(m,"DIV",{class:!0});var Ks=s(jo);T(wL.$$.fragment,Ks),aXo=i(Ks),rd=n(Ks,"P",{});var xK=s(rd);nXo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uV=n(xK,"A",{href:!0});var Wct=s(uV);sXo=r(Wct,"from_pretrained()"),Wct.forEach(t),lXo=r(xK," class method or the "),pV=n(xK,"A",{href:!0});var Hct=s(pV);iXo=r(Hct,"from_config()"),Hct.forEach(t),dXo=r(xK,` class
method.`),xK.forEach(t),cXo=i(Ks),AL=n(Ks,"P",{});var wNe=s(AL);mXo=r(wNe,"This class cannot be instantiated directly using "),ihe=n(wNe,"CODE",{});var Uct=s(ihe);fXo=r(Uct,"__init__()"),Uct.forEach(t),gXo=r(wNe," (throws an error)."),wNe.forEach(t),hXo=i(Ks),ft=n(Ks,"DIV",{class:!0});var T6=s(ft);T(yL.$$.fragment,T6),uXo=i(T6),dhe=n(T6,"P",{});var Jct=s(dhe);pXo=r(Jct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jct.forEach(t),_Xo=i(T6),td=n(T6,"P",{});var $K=s(td);bXo=r($K,`Note:
Loading a model from its configuration file does `),che=n($K,"STRONG",{});var Yct=s(che);FXo=r(Yct,"not"),Yct.forEach(t),vXo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n($K,"A",{href:!0});var Kct=s(_V);TXo=r(Kct,"from_pretrained()"),Kct.forEach(t),MXo=r($K," to load the model weights."),$K.forEach(t),EXo=i(T6),T(R1.$$.fragment,T6),T6.forEach(t),CXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(LL.$$.fragment,ca),wXo=i(ca),mhe=n(ca,"P",{});var Zct=s(mhe);AXo=r(Zct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zct.forEach(t),yXo=i(ca),qa=n(ca,"P",{});var M6=s(qa);LXo=r(M6,"The model class to instantiate is selected based on the "),fhe=n(M6,"CODE",{});var emt=s(fhe);xXo=r(emt,"model_type"),emt.forEach(t),$Xo=r(M6,` property of the config object (either
passed as an argument or loaded from `),ghe=n(M6,"CODE",{});var omt=s(ghe);kXo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),SXo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(M6,"CODE",{});var rmt=s(hhe);RXo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),BXo=r(M6,":"),M6.forEach(t),PXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);B1=n(Ee,"LI",{});var U7e=s(B1);uhe=n(U7e,"STRONG",{});var tmt=s(uhe);IXo=r(tmt,"beit"),tmt.forEach(t),qXo=r(U7e," \u2014 "),bV=n(U7e,"A",{href:!0});var amt=s(bV);NXo=r(amt,"BeitForImageClassification"),amt.forEach(t),jXo=r(U7e," (BEiT model)"),U7e.forEach(t),DXo=i(Ee),P1=n(Ee,"LI",{});var J7e=s(P1);phe=n(J7e,"STRONG",{});var nmt=s(phe);GXo=r(nmt,"convnext"),nmt.forEach(t),OXo=r(J7e," \u2014 "),FV=n(J7e,"A",{href:!0});var smt=s(FV);VXo=r(smt,"ConvNextForImageClassification"),smt.forEach(t),XXo=r(J7e," (ConvNext model)"),J7e.forEach(t),zXo=i(Ee),I1=n(Ee,"LI",{});var Y7e=s(I1);_he=n(Y7e,"STRONG",{});var lmt=s(_he);QXo=r(lmt,"data2vec-vision"),lmt.forEach(t),WXo=r(Y7e," \u2014 "),vV=n(Y7e,"A",{href:!0});var imt=s(vV);HXo=r(imt,"Data2VecVisionForImageClassification"),imt.forEach(t),UXo=r(Y7e," (Data2VecVision model)"),Y7e.forEach(t),JXo=i(Ee),Bs=n(Ee,"LI",{});var f$=s(Bs);bhe=n(f$,"STRONG",{});var dmt=s(bhe);YXo=r(dmt,"deit"),dmt.forEach(t),KXo=r(f$," \u2014 "),TV=n(f$,"A",{href:!0});var cmt=s(TV);ZXo=r(cmt,"DeiTForImageClassification"),cmt.forEach(t),ezo=r(f$," or "),MV=n(f$,"A",{href:!0});var mmt=s(MV);ozo=r(mmt,"DeiTForImageClassificationWithTeacher"),mmt.forEach(t),rzo=r(f$," (DeiT model)"),f$.forEach(t),tzo=i(Ee),q1=n(Ee,"LI",{});var K7e=s(q1);Fhe=n(K7e,"STRONG",{});var fmt=s(Fhe);azo=r(fmt,"imagegpt"),fmt.forEach(t),nzo=r(K7e," \u2014 "),EV=n(K7e,"A",{href:!0});var gmt=s(EV);szo=r(gmt,"ImageGPTForImageClassification"),gmt.forEach(t),lzo=r(K7e," (ImageGPT model)"),K7e.forEach(t),izo=i(Ee),gt=n(Ee,"LI",{});var cm=s(gt);vhe=n(cm,"STRONG",{});var hmt=s(vhe);dzo=r(hmt,"perceiver"),hmt.forEach(t),czo=r(cm," \u2014 "),CV=n(cm,"A",{href:!0});var umt=s(CV);mzo=r(umt,"PerceiverForImageClassificationLearned"),umt.forEach(t),fzo=r(cm," or "),wV=n(cm,"A",{href:!0});var pmt=s(wV);gzo=r(pmt,"PerceiverForImageClassificationFourier"),pmt.forEach(t),hzo=r(cm," or "),AV=n(cm,"A",{href:!0});var _mt=s(AV);uzo=r(_mt,"PerceiverForImageClassificationConvProcessing"),_mt.forEach(t),pzo=r(cm," (Perceiver model)"),cm.forEach(t),_zo=i(Ee),N1=n(Ee,"LI",{});var Z7e=s(N1);The=n(Z7e,"STRONG",{});var bmt=s(The);bzo=r(bmt,"poolformer"),bmt.forEach(t),Fzo=r(Z7e," \u2014 "),yV=n(Z7e,"A",{href:!0});var Fmt=s(yV);vzo=r(Fmt,"PoolFormerForImageClassification"),Fmt.forEach(t),Tzo=r(Z7e," (PoolFormer model)"),Z7e.forEach(t),Mzo=i(Ee),j1=n(Ee,"LI",{});var e9e=s(j1);Mhe=n(e9e,"STRONG",{});var vmt=s(Mhe);Ezo=r(vmt,"regnet"),vmt.forEach(t),Czo=r(e9e," \u2014 "),LV=n(e9e,"A",{href:!0});var Tmt=s(LV);wzo=r(Tmt,"RegNetForImageClassification"),Tmt.forEach(t),Azo=r(e9e," (RegNet model)"),e9e.forEach(t),yzo=i(Ee),D1=n(Ee,"LI",{});var o9e=s(D1);Ehe=n(o9e,"STRONG",{});var Mmt=s(Ehe);Lzo=r(Mmt,"resnet"),Mmt.forEach(t),xzo=r(o9e," \u2014 "),xV=n(o9e,"A",{href:!0});var Emt=s(xV);$zo=r(Emt,"ResNetForImageClassification"),Emt.forEach(t),kzo=r(o9e," (ResNet model)"),o9e.forEach(t),Szo=i(Ee),G1=n(Ee,"LI",{});var r9e=s(G1);Che=n(r9e,"STRONG",{});var Cmt=s(Che);Rzo=r(Cmt,"segformer"),Cmt.forEach(t),Bzo=r(r9e," \u2014 "),$V=n(r9e,"A",{href:!0});var wmt=s($V);Pzo=r(wmt,"SegformerForImageClassification"),wmt.forEach(t),Izo=r(r9e," (SegFormer model)"),r9e.forEach(t),qzo=i(Ee),O1=n(Ee,"LI",{});var t9e=s(O1);whe=n(t9e,"STRONG",{});var Amt=s(whe);Nzo=r(Amt,"swin"),Amt.forEach(t),jzo=r(t9e," \u2014 "),kV=n(t9e,"A",{href:!0});var ymt=s(kV);Dzo=r(ymt,"SwinForImageClassification"),ymt.forEach(t),Gzo=r(t9e," (Swin model)"),t9e.forEach(t),Ozo=i(Ee),V1=n(Ee,"LI",{});var a9e=s(V1);Ahe=n(a9e,"STRONG",{});var Lmt=s(Ahe);Vzo=r(Lmt,"van"),Lmt.forEach(t),Xzo=r(a9e," \u2014 "),SV=n(a9e,"A",{href:!0});var xmt=s(SV);zzo=r(xmt,"VanForImageClassification"),xmt.forEach(t),Qzo=r(a9e," (VAN model)"),a9e.forEach(t),Wzo=i(Ee),X1=n(Ee,"LI",{});var n9e=s(X1);yhe=n(n9e,"STRONG",{});var $mt=s(yhe);Hzo=r($mt,"vit"),$mt.forEach(t),Uzo=r(n9e," \u2014 "),RV=n(n9e,"A",{href:!0});var kmt=s(RV);Jzo=r(kmt,"ViTForImageClassification"),kmt.forEach(t),Yzo=r(n9e," (ViT model)"),n9e.forEach(t),Ee.forEach(t),Kzo=i(ca),z1=n(ca,"P",{});var s9e=s(z1);Zzo=r(s9e,"The model is set in evaluation mode by default using "),Lhe=n(s9e,"CODE",{});var Smt=s(Lhe);eQo=r(Smt,"model.eval()"),Smt.forEach(t),oQo=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(s9e,"CODE",{});var Rmt=s(xhe);rQo=r(Rmt,"model.train()"),Rmt.forEach(t),s9e.forEach(t),tQo=i(ca),T(Q1.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),MIe=i(m),ad=n(m,"H2",{class:!0});var ANe=s(ad);W1=n(ANe,"A",{id:!0,class:!0,href:!0});var Bmt=s(W1);$he=n(Bmt,"SPAN",{});var Pmt=s($he);T(xL.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),aQo=i(ANe),khe=n(ANe,"SPAN",{});var Imt=s(khe);nQo=r(Imt,"AutoModelForVision2Seq"),Imt.forEach(t),ANe.forEach(t),EIe=i(m),Do=n(m,"DIV",{class:!0});var Zs=s(Do);T($L.$$.fragment,Zs),sQo=i(Zs),nd=n(Zs,"P",{});var kK=s(nd);lQo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=n(kK,"A",{href:!0});var qmt=s(BV);iQo=r(qmt,"from_pretrained()"),qmt.forEach(t),dQo=r(kK," class method or the "),PV=n(kK,"A",{href:!0});var Nmt=s(PV);cQo=r(Nmt,"from_config()"),Nmt.forEach(t),mQo=r(kK,` class
method.`),kK.forEach(t),fQo=i(Zs),kL=n(Zs,"P",{});var yNe=s(kL);gQo=r(yNe,"This class cannot be instantiated directly using "),She=n(yNe,"CODE",{});var jmt=s(She);hQo=r(jmt,"__init__()"),jmt.forEach(t),uQo=r(yNe," (throws an error)."),yNe.forEach(t),pQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var E6=s(ht);T(SL.$$.fragment,E6),_Qo=i(E6),Rhe=n(E6,"P",{});var Dmt=s(Rhe);bQo=r(Dmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dmt.forEach(t),FQo=i(E6),sd=n(E6,"P",{});var SK=s(sd);vQo=r(SK,`Note:
Loading a model from its configuration file does `),Bhe=n(SK,"STRONG",{});var Gmt=s(Bhe);TQo=r(Gmt,"not"),Gmt.forEach(t),MQo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(SK,"A",{href:!0});var Omt=s(IV);EQo=r(Omt,"from_pretrained()"),Omt.forEach(t),CQo=r(SK," to load the model weights."),SK.forEach(t),wQo=i(E6),T(H1.$$.fragment,E6),E6.forEach(t),AQo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(RL.$$.fragment,ma),yQo=i(ma),Phe=n(ma,"P",{});var Vmt=s(Phe);LQo=r(Vmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vmt.forEach(t),xQo=i(ma),Na=n(ma,"P",{});var C6=s(Na);$Qo=r(C6,"The model class to instantiate is selected based on the "),Ihe=n(C6,"CODE",{});var Xmt=s(Ihe);kQo=r(Xmt,"model_type"),Xmt.forEach(t),SQo=r(C6,` property of the config object (either
passed as an argument or loaded from `),qhe=n(C6,"CODE",{});var zmt=s(qhe);RQo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),BQo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(C6,"CODE",{});var Qmt=s(Nhe);PQo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),IQo=r(C6,":"),C6.forEach(t),qQo=i(ma),jhe=n(ma,"UL",{});var Wmt=s(jhe);U1=n(Wmt,"LI",{});var l9e=s(U1);Dhe=n(l9e,"STRONG",{});var Hmt=s(Dhe);NQo=r(Hmt,"vision-encoder-decoder"),Hmt.forEach(t),jQo=r(l9e," \u2014 "),qV=n(l9e,"A",{href:!0});var Umt=s(qV);DQo=r(Umt,"VisionEncoderDecoderModel"),Umt.forEach(t),GQo=r(l9e," (Vision Encoder decoder model)"),l9e.forEach(t),Wmt.forEach(t),OQo=i(ma),J1=n(ma,"P",{});var i9e=s(J1);VQo=r(i9e,"The model is set in evaluation mode by default using "),Ghe=n(i9e,"CODE",{});var Jmt=s(Ghe);XQo=r(Jmt,"model.eval()"),Jmt.forEach(t),zQo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(i9e,"CODE",{});var Ymt=s(Ohe);QQo=r(Ymt,"model.train()"),Ymt.forEach(t),i9e.forEach(t),WQo=i(ma),T(Y1.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),CIe=i(m),ld=n(m,"H2",{class:!0});var LNe=s(ld);K1=n(LNe,"A",{id:!0,class:!0,href:!0});var Kmt=s(K1);Vhe=n(Kmt,"SPAN",{});var Zmt=s(Vhe);T(BL.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),HQo=i(LNe),Xhe=n(LNe,"SPAN",{});var eft=s(Xhe);UQo=r(eft,"AutoModelForAudioClassification"),eft.forEach(t),LNe.forEach(t),wIe=i(m),Go=n(m,"DIV",{class:!0});var el=s(Go);T(PL.$$.fragment,el),JQo=i(el),id=n(el,"P",{});var RK=s(id);YQo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=n(RK,"A",{href:!0});var oft=s(NV);KQo=r(oft,"from_pretrained()"),oft.forEach(t),ZQo=r(RK," class method or the "),jV=n(RK,"A",{href:!0});var rft=s(jV);eWo=r(rft,"from_config()"),rft.forEach(t),oWo=r(RK,` class
method.`),RK.forEach(t),rWo=i(el),IL=n(el,"P",{});var xNe=s(IL);tWo=r(xNe,"This class cannot be instantiated directly using "),zhe=n(xNe,"CODE",{});var tft=s(zhe);aWo=r(tft,"__init__()"),tft.forEach(t),nWo=r(xNe," (throws an error)."),xNe.forEach(t),sWo=i(el),ut=n(el,"DIV",{class:!0});var w6=s(ut);T(qL.$$.fragment,w6),lWo=i(w6),Qhe=n(w6,"P",{});var aft=s(Qhe);iWo=r(aft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),aft.forEach(t),dWo=i(w6),dd=n(w6,"P",{});var BK=s(dd);cWo=r(BK,`Note:
Loading a model from its configuration file does `),Whe=n(BK,"STRONG",{});var nft=s(Whe);mWo=r(nft,"not"),nft.forEach(t),fWo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(BK,"A",{href:!0});var sft=s(DV);gWo=r(sft,"from_pretrained()"),sft.forEach(t),hWo=r(BK," to load the model weights."),BK.forEach(t),uWo=i(w6),T(Z1.$$.fragment,w6),w6.forEach(t),pWo=i(el),lo=n(el,"DIV",{class:!0});var fa=s(lo);T(NL.$$.fragment,fa),_Wo=i(fa),Hhe=n(fa,"P",{});var lft=s(Hhe);bWo=r(lft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lft.forEach(t),FWo=i(fa),ja=n(fa,"P",{});var A6=s(ja);vWo=r(A6,"The model class to instantiate is selected based on the "),Uhe=n(A6,"CODE",{});var ift=s(Uhe);TWo=r(ift,"model_type"),ift.forEach(t),MWo=r(A6,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(A6,"CODE",{});var dft=s(Jhe);EWo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),CWo=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(A6,"CODE",{});var cft=s(Yhe);wWo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),AWo=r(A6,":"),A6.forEach(t),yWo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);eT=n(bo,"LI",{});var d9e=s(eT);Khe=n(d9e,"STRONG",{});var mft=s(Khe);LWo=r(mft,"data2vec-audio"),mft.forEach(t),xWo=r(d9e," \u2014 "),GV=n(d9e,"A",{href:!0});var fft=s(GV);$Wo=r(fft,"Data2VecAudioForSequenceClassification"),fft.forEach(t),kWo=r(d9e," (Data2VecAudio model)"),d9e.forEach(t),SWo=i(bo),oT=n(bo,"LI",{});var c9e=s(oT);Zhe=n(c9e,"STRONG",{});var gft=s(Zhe);RWo=r(gft,"hubert"),gft.forEach(t),BWo=r(c9e," \u2014 "),OV=n(c9e,"A",{href:!0});var hft=s(OV);PWo=r(hft,"HubertForSequenceClassification"),hft.forEach(t),IWo=r(c9e," (Hubert model)"),c9e.forEach(t),qWo=i(bo),rT=n(bo,"LI",{});var m9e=s(rT);eue=n(m9e,"STRONG",{});var uft=s(eue);NWo=r(uft,"sew"),uft.forEach(t),jWo=r(m9e," \u2014 "),VV=n(m9e,"A",{href:!0});var pft=s(VV);DWo=r(pft,"SEWForSequenceClassification"),pft.forEach(t),GWo=r(m9e," (SEW model)"),m9e.forEach(t),OWo=i(bo),tT=n(bo,"LI",{});var f9e=s(tT);oue=n(f9e,"STRONG",{});var _ft=s(oue);VWo=r(_ft,"sew-d"),_ft.forEach(t),XWo=r(f9e," \u2014 "),XV=n(f9e,"A",{href:!0});var bft=s(XV);zWo=r(bft,"SEWDForSequenceClassification"),bft.forEach(t),QWo=r(f9e," (SEW-D model)"),f9e.forEach(t),WWo=i(bo),aT=n(bo,"LI",{});var g9e=s(aT);rue=n(g9e,"STRONG",{});var Fft=s(rue);HWo=r(Fft,"unispeech"),Fft.forEach(t),UWo=r(g9e," \u2014 "),zV=n(g9e,"A",{href:!0});var vft=s(zV);JWo=r(vft,"UniSpeechForSequenceClassification"),vft.forEach(t),YWo=r(g9e," (UniSpeech model)"),g9e.forEach(t),KWo=i(bo),nT=n(bo,"LI",{});var h9e=s(nT);tue=n(h9e,"STRONG",{});var Tft=s(tue);ZWo=r(Tft,"unispeech-sat"),Tft.forEach(t),eHo=r(h9e," \u2014 "),QV=n(h9e,"A",{href:!0});var Mft=s(QV);oHo=r(Mft,"UniSpeechSatForSequenceClassification"),Mft.forEach(t),rHo=r(h9e," (UniSpeechSat model)"),h9e.forEach(t),tHo=i(bo),sT=n(bo,"LI",{});var u9e=s(sT);aue=n(u9e,"STRONG",{});var Eft=s(aue);aHo=r(Eft,"wav2vec2"),Eft.forEach(t),nHo=r(u9e," \u2014 "),WV=n(u9e,"A",{href:!0});var Cft=s(WV);sHo=r(Cft,"Wav2Vec2ForSequenceClassification"),Cft.forEach(t),lHo=r(u9e," (Wav2Vec2 model)"),u9e.forEach(t),iHo=i(bo),lT=n(bo,"LI",{});var p9e=s(lT);nue=n(p9e,"STRONG",{});var wft=s(nue);dHo=r(wft,"wavlm"),wft.forEach(t),cHo=r(p9e," \u2014 "),HV=n(p9e,"A",{href:!0});var Aft=s(HV);mHo=r(Aft,"WavLMForSequenceClassification"),Aft.forEach(t),fHo=r(p9e," (WavLM model)"),p9e.forEach(t),bo.forEach(t),gHo=i(fa),iT=n(fa,"P",{});var _9e=s(iT);hHo=r(_9e,"The model is set in evaluation mode by default using "),sue=n(_9e,"CODE",{});var yft=s(sue);uHo=r(yft,"model.eval()"),yft.forEach(t),pHo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(_9e,"CODE",{});var Lft=s(lue);_Ho=r(Lft,"model.train()"),Lft.forEach(t),_9e.forEach(t),bHo=i(fa),T(dT.$$.fragment,fa),fa.forEach(t),el.forEach(t),AIe=i(m),cd=n(m,"H2",{class:!0});var $Ne=s(cd);cT=n($Ne,"A",{id:!0,class:!0,href:!0});var xft=s(cT);iue=n(xft,"SPAN",{});var $ft=s(iue);T(jL.$$.fragment,$ft),$ft.forEach(t),xft.forEach(t),FHo=i($Ne),due=n($Ne,"SPAN",{});var kft=s(due);vHo=r(kft,"AutoModelForAudioFrameClassification"),kft.forEach(t),$Ne.forEach(t),yIe=i(m),Oo=n(m,"DIV",{class:!0});var ol=s(Oo);T(DL.$$.fragment,ol),THo=i(ol),md=n(ol,"P",{});var PK=s(md);MHo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=n(PK,"A",{href:!0});var Sft=s(UV);EHo=r(Sft,"from_pretrained()"),Sft.forEach(t),CHo=r(PK," class method or the "),JV=n(PK,"A",{href:!0});var Rft=s(JV);wHo=r(Rft,"from_config()"),Rft.forEach(t),AHo=r(PK,` class
method.`),PK.forEach(t),yHo=i(ol),GL=n(ol,"P",{});var kNe=s(GL);LHo=r(kNe,"This class cannot be instantiated directly using "),cue=n(kNe,"CODE",{});var Bft=s(cue);xHo=r(Bft,"__init__()"),Bft.forEach(t),$Ho=r(kNe," (throws an error)."),kNe.forEach(t),kHo=i(ol),pt=n(ol,"DIV",{class:!0});var y6=s(pt);T(OL.$$.fragment,y6),SHo=i(y6),mue=n(y6,"P",{});var Pft=s(mue);RHo=r(Pft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pft.forEach(t),BHo=i(y6),fd=n(y6,"P",{});var IK=s(fd);PHo=r(IK,`Note:
Loading a model from its configuration file does `),fue=n(IK,"STRONG",{});var Ift=s(fue);IHo=r(Ift,"not"),Ift.forEach(t),qHo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(IK,"A",{href:!0});var qft=s(YV);NHo=r(qft,"from_pretrained()"),qft.forEach(t),jHo=r(IK," to load the model weights."),IK.forEach(t),DHo=i(y6),T(mT.$$.fragment,y6),y6.forEach(t),GHo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(VL.$$.fragment,ga),OHo=i(ga),gue=n(ga,"P",{});var Nft=s(gue);VHo=r(Nft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nft.forEach(t),XHo=i(ga),Da=n(ga,"P",{});var L6=s(Da);zHo=r(L6,"The model class to instantiate is selected based on the "),hue=n(L6,"CODE",{});var jft=s(hue);QHo=r(jft,"model_type"),jft.forEach(t),WHo=r(L6,` property of the config object (either
passed as an argument or loaded from `),uue=n(L6,"CODE",{});var Dft=s(uue);HHo=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),UHo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(L6,"CODE",{});var Gft=s(pue);JHo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),YHo=r(L6,":"),L6.forEach(t),KHo=i(ga),Ga=n(ga,"UL",{});var x6=s(Ga);fT=n(x6,"LI",{});var b9e=s(fT);_ue=n(b9e,"STRONG",{});var Oft=s(_ue);ZHo=r(Oft,"data2vec-audio"),Oft.forEach(t),eUo=r(b9e," \u2014 "),KV=n(b9e,"A",{href:!0});var Vft=s(KV);oUo=r(Vft,"Data2VecAudioForAudioFrameClassification"),Vft.forEach(t),rUo=r(b9e," (Data2VecAudio model)"),b9e.forEach(t),tUo=i(x6),gT=n(x6,"LI",{});var F9e=s(gT);bue=n(F9e,"STRONG",{});var Xft=s(bue);aUo=r(Xft,"unispeech-sat"),Xft.forEach(t),nUo=r(F9e," \u2014 "),ZV=n(F9e,"A",{href:!0});var zft=s(ZV);sUo=r(zft,"UniSpeechSatForAudioFrameClassification"),zft.forEach(t),lUo=r(F9e," (UniSpeechSat model)"),F9e.forEach(t),iUo=i(x6),hT=n(x6,"LI",{});var v9e=s(hT);Fue=n(v9e,"STRONG",{});var Qft=s(Fue);dUo=r(Qft,"wav2vec2"),Qft.forEach(t),cUo=r(v9e," \u2014 "),eX=n(v9e,"A",{href:!0});var Wft=s(eX);mUo=r(Wft,"Wav2Vec2ForAudioFrameClassification"),Wft.forEach(t),fUo=r(v9e," (Wav2Vec2 model)"),v9e.forEach(t),gUo=i(x6),uT=n(x6,"LI",{});var T9e=s(uT);vue=n(T9e,"STRONG",{});var Hft=s(vue);hUo=r(Hft,"wavlm"),Hft.forEach(t),uUo=r(T9e," \u2014 "),oX=n(T9e,"A",{href:!0});var Uft=s(oX);pUo=r(Uft,"WavLMForAudioFrameClassification"),Uft.forEach(t),_Uo=r(T9e," (WavLM model)"),T9e.forEach(t),x6.forEach(t),bUo=i(ga),pT=n(ga,"P",{});var M9e=s(pT);FUo=r(M9e,"The model is set in evaluation mode by default using "),Tue=n(M9e,"CODE",{});var Jft=s(Tue);vUo=r(Jft,"model.eval()"),Jft.forEach(t),TUo=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(M9e,"CODE",{});var Yft=s(Mue);MUo=r(Yft,"model.train()"),Yft.forEach(t),M9e.forEach(t),EUo=i(ga),T(_T.$$.fragment,ga),ga.forEach(t),ol.forEach(t),LIe=i(m),gd=n(m,"H2",{class:!0});var SNe=s(gd);bT=n(SNe,"A",{id:!0,class:!0,href:!0});var Kft=s(bT);Eue=n(Kft,"SPAN",{});var Zft=s(Eue);T(XL.$$.fragment,Zft),Zft.forEach(t),Kft.forEach(t),CUo=i(SNe),Cue=n(SNe,"SPAN",{});var egt=s(Cue);wUo=r(egt,"AutoModelForCTC"),egt.forEach(t),SNe.forEach(t),xIe=i(m),Vo=n(m,"DIV",{class:!0});var rl=s(Vo);T(zL.$$.fragment,rl),AUo=i(rl),hd=n(rl,"P",{});var qK=s(hd);yUo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=n(qK,"A",{href:!0});var ogt=s(rX);LUo=r(ogt,"from_pretrained()"),ogt.forEach(t),xUo=r(qK," class method or the "),tX=n(qK,"A",{href:!0});var rgt=s(tX);$Uo=r(rgt,"from_config()"),rgt.forEach(t),kUo=r(qK,` class
method.`),qK.forEach(t),SUo=i(rl),QL=n(rl,"P",{});var RNe=s(QL);RUo=r(RNe,"This class cannot be instantiated directly using "),wue=n(RNe,"CODE",{});var tgt=s(wue);BUo=r(tgt,"__init__()"),tgt.forEach(t),PUo=r(RNe," (throws an error)."),RNe.forEach(t),IUo=i(rl),_t=n(rl,"DIV",{class:!0});var $6=s(_t);T(WL.$$.fragment,$6),qUo=i($6),Aue=n($6,"P",{});var agt=s(Aue);NUo=r(agt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),agt.forEach(t),jUo=i($6),ud=n($6,"P",{});var NK=s(ud);DUo=r(NK,`Note:
Loading a model from its configuration file does `),yue=n(NK,"STRONG",{});var ngt=s(yue);GUo=r(ngt,"not"),ngt.forEach(t),OUo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(NK,"A",{href:!0});var sgt=s(aX);VUo=r(sgt,"from_pretrained()"),sgt.forEach(t),XUo=r(NK," to load the model weights."),NK.forEach(t),zUo=i($6),T(FT.$$.fragment,$6),$6.forEach(t),QUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(HL.$$.fragment,ha),WUo=i(ha),Lue=n(ha,"P",{});var lgt=s(Lue);HUo=r(lgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lgt.forEach(t),UUo=i(ha),Oa=n(ha,"P",{});var k6=s(Oa);JUo=r(k6,"The model class to instantiate is selected based on the "),xue=n(k6,"CODE",{});var igt=s(xue);YUo=r(igt,"model_type"),igt.forEach(t),KUo=r(k6,` property of the config object (either
passed as an argument or loaded from `),$ue=n(k6,"CODE",{});var dgt=s($ue);ZUo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),eJo=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(k6,"CODE",{});var cgt=s(kue);oJo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),rJo=r(k6,":"),k6.forEach(t),tJo=i(ha),je=n(ha,"UL",{});var Fo=s(je);vT=n(Fo,"LI",{});var E9e=s(vT);Sue=n(E9e,"STRONG",{});var mgt=s(Sue);aJo=r(mgt,"data2vec-audio"),mgt.forEach(t),nJo=r(E9e," \u2014 "),nX=n(E9e,"A",{href:!0});var fgt=s(nX);sJo=r(fgt,"Data2VecAudioForCTC"),fgt.forEach(t),lJo=r(E9e," (Data2VecAudio model)"),E9e.forEach(t),iJo=i(Fo),TT=n(Fo,"LI",{});var C9e=s(TT);Rue=n(C9e,"STRONG",{});var ggt=s(Rue);dJo=r(ggt,"hubert"),ggt.forEach(t),cJo=r(C9e," \u2014 "),sX=n(C9e,"A",{href:!0});var hgt=s(sX);mJo=r(hgt,"HubertForCTC"),hgt.forEach(t),fJo=r(C9e," (Hubert model)"),C9e.forEach(t),gJo=i(Fo),MT=n(Fo,"LI",{});var w9e=s(MT);Bue=n(w9e,"STRONG",{});var ugt=s(Bue);hJo=r(ugt,"sew"),ugt.forEach(t),uJo=r(w9e," \u2014 "),lX=n(w9e,"A",{href:!0});var pgt=s(lX);pJo=r(pgt,"SEWForCTC"),pgt.forEach(t),_Jo=r(w9e," (SEW model)"),w9e.forEach(t),bJo=i(Fo),ET=n(Fo,"LI",{});var A9e=s(ET);Pue=n(A9e,"STRONG",{});var _gt=s(Pue);FJo=r(_gt,"sew-d"),_gt.forEach(t),vJo=r(A9e," \u2014 "),iX=n(A9e,"A",{href:!0});var bgt=s(iX);TJo=r(bgt,"SEWDForCTC"),bgt.forEach(t),MJo=r(A9e," (SEW-D model)"),A9e.forEach(t),EJo=i(Fo),CT=n(Fo,"LI",{});var y9e=s(CT);Iue=n(y9e,"STRONG",{});var Fgt=s(Iue);CJo=r(Fgt,"unispeech"),Fgt.forEach(t),wJo=r(y9e," \u2014 "),dX=n(y9e,"A",{href:!0});var vgt=s(dX);AJo=r(vgt,"UniSpeechForCTC"),vgt.forEach(t),yJo=r(y9e," (UniSpeech model)"),y9e.forEach(t),LJo=i(Fo),wT=n(Fo,"LI",{});var L9e=s(wT);que=n(L9e,"STRONG",{});var Tgt=s(que);xJo=r(Tgt,"unispeech-sat"),Tgt.forEach(t),$Jo=r(L9e," \u2014 "),cX=n(L9e,"A",{href:!0});var Mgt=s(cX);kJo=r(Mgt,"UniSpeechSatForCTC"),Mgt.forEach(t),SJo=r(L9e," (UniSpeechSat model)"),L9e.forEach(t),RJo=i(Fo),AT=n(Fo,"LI",{});var x9e=s(AT);Nue=n(x9e,"STRONG",{});var Egt=s(Nue);BJo=r(Egt,"wav2vec2"),Egt.forEach(t),PJo=r(x9e," \u2014 "),mX=n(x9e,"A",{href:!0});var Cgt=s(mX);IJo=r(Cgt,"Wav2Vec2ForCTC"),Cgt.forEach(t),qJo=r(x9e," (Wav2Vec2 model)"),x9e.forEach(t),NJo=i(Fo),yT=n(Fo,"LI",{});var $9e=s(yT);jue=n($9e,"STRONG",{});var wgt=s(jue);jJo=r(wgt,"wavlm"),wgt.forEach(t),DJo=r($9e," \u2014 "),fX=n($9e,"A",{href:!0});var Agt=s(fX);GJo=r(Agt,"WavLMForCTC"),Agt.forEach(t),OJo=r($9e," (WavLM model)"),$9e.forEach(t),Fo.forEach(t),VJo=i(ha),LT=n(ha,"P",{});var k9e=s(LT);XJo=r(k9e,"The model is set in evaluation mode by default using "),Due=n(k9e,"CODE",{});var ygt=s(Due);zJo=r(ygt,"model.eval()"),ygt.forEach(t),QJo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(k9e,"CODE",{});var Lgt=s(Gue);WJo=r(Lgt,"model.train()"),Lgt.forEach(t),k9e.forEach(t),HJo=i(ha),T(xT.$$.fragment,ha),ha.forEach(t),rl.forEach(t),$Ie=i(m),pd=n(m,"H2",{class:!0});var BNe=s(pd);$T=n(BNe,"A",{id:!0,class:!0,href:!0});var xgt=s($T);Oue=n(xgt,"SPAN",{});var $gt=s(Oue);T(UL.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),UJo=i(BNe),Vue=n(BNe,"SPAN",{});var kgt=s(Vue);JJo=r(kgt,"AutoModelForSpeechSeq2Seq"),kgt.forEach(t),BNe.forEach(t),kIe=i(m),Xo=n(m,"DIV",{class:!0});var tl=s(Xo);T(JL.$$.fragment,tl),YJo=i(tl),_d=n(tl,"P",{});var jK=s(_d);KJo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=n(jK,"A",{href:!0});var Sgt=s(gX);ZJo=r(Sgt,"from_pretrained()"),Sgt.forEach(t),eYo=r(jK," class method or the "),hX=n(jK,"A",{href:!0});var Rgt=s(hX);oYo=r(Rgt,"from_config()"),Rgt.forEach(t),rYo=r(jK,` class
method.`),jK.forEach(t),tYo=i(tl),YL=n(tl,"P",{});var PNe=s(YL);aYo=r(PNe,"This class cannot be instantiated directly using "),Xue=n(PNe,"CODE",{});var Bgt=s(Xue);nYo=r(Bgt,"__init__()"),Bgt.forEach(t),sYo=r(PNe," (throws an error)."),PNe.forEach(t),lYo=i(tl),bt=n(tl,"DIV",{class:!0});var S6=s(bt);T(KL.$$.fragment,S6),iYo=i(S6),zue=n(S6,"P",{});var Pgt=s(zue);dYo=r(Pgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pgt.forEach(t),cYo=i(S6),bd=n(S6,"P",{});var DK=s(bd);mYo=r(DK,`Note:
Loading a model from its configuration file does `),Que=n(DK,"STRONG",{});var Igt=s(Que);fYo=r(Igt,"not"),Igt.forEach(t),gYo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(DK,"A",{href:!0});var qgt=s(uX);hYo=r(qgt,"from_pretrained()"),qgt.forEach(t),uYo=r(DK," to load the model weights."),DK.forEach(t),pYo=i(S6),T(kT.$$.fragment,S6),S6.forEach(t),_Yo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(ZL.$$.fragment,ua),bYo=i(ua),Wue=n(ua,"P",{});var Ngt=s(Wue);FYo=r(Ngt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ngt.forEach(t),vYo=i(ua),Va=n(ua,"P",{});var R6=s(Va);TYo=r(R6,"The model class to instantiate is selected based on the "),Hue=n(R6,"CODE",{});var jgt=s(Hue);MYo=r(jgt,"model_type"),jgt.forEach(t),EYo=r(R6,` property of the config object (either
passed as an argument or loaded from `),Uue=n(R6,"CODE",{});var Dgt=s(Uue);CYo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),wYo=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(R6,"CODE",{});var Ggt=s(Jue);AYo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),yYo=r(R6,":"),R6.forEach(t),LYo=i(ua),e8=n(ua,"UL",{});var INe=s(e8);ST=n(INe,"LI",{});var S9e=s(ST);Yue=n(S9e,"STRONG",{});var Ogt=s(Yue);xYo=r(Ogt,"speech-encoder-decoder"),Ogt.forEach(t),$Yo=r(S9e," \u2014 "),pX=n(S9e,"A",{href:!0});var Vgt=s(pX);kYo=r(Vgt,"SpeechEncoderDecoderModel"),Vgt.forEach(t),SYo=r(S9e," (Speech Encoder decoder model)"),S9e.forEach(t),RYo=i(INe),RT=n(INe,"LI",{});var R9e=s(RT);Kue=n(R9e,"STRONG",{});var Xgt=s(Kue);BYo=r(Xgt,"speech_to_text"),Xgt.forEach(t),PYo=r(R9e," \u2014 "),_X=n(R9e,"A",{href:!0});var zgt=s(_X);IYo=r(zgt,"Speech2TextForConditionalGeneration"),zgt.forEach(t),qYo=r(R9e," (Speech2Text model)"),R9e.forEach(t),INe.forEach(t),NYo=i(ua),BT=n(ua,"P",{});var B9e=s(BT);jYo=r(B9e,"The model is set in evaluation mode by default using "),Zue=n(B9e,"CODE",{});var Qgt=s(Zue);DYo=r(Qgt,"model.eval()"),Qgt.forEach(t),GYo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(B9e,"CODE",{});var Wgt=s(epe);OYo=r(Wgt,"model.train()"),Wgt.forEach(t),B9e.forEach(t),VYo=i(ua),T(PT.$$.fragment,ua),ua.forEach(t),tl.forEach(t),SIe=i(m),Fd=n(m,"H2",{class:!0});var qNe=s(Fd);IT=n(qNe,"A",{id:!0,class:!0,href:!0});var Hgt=s(IT);ope=n(Hgt,"SPAN",{});var Ugt=s(ope);T(o8.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),XYo=i(qNe),rpe=n(qNe,"SPAN",{});var Jgt=s(rpe);zYo=r(Jgt,"AutoModelForAudioXVector"),Jgt.forEach(t),qNe.forEach(t),RIe=i(m),zo=n(m,"DIV",{class:!0});var al=s(zo);T(r8.$$.fragment,al),QYo=i(al),vd=n(al,"P",{});var GK=s(vd);WYo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=n(GK,"A",{href:!0});var Ygt=s(bX);HYo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),UYo=r(GK," class method or the "),FX=n(GK,"A",{href:!0});var Kgt=s(FX);JYo=r(Kgt,"from_config()"),Kgt.forEach(t),YYo=r(GK,` class
method.`),GK.forEach(t),KYo=i(al),t8=n(al,"P",{});var NNe=s(t8);ZYo=r(NNe,"This class cannot be instantiated directly using "),tpe=n(NNe,"CODE",{});var Zgt=s(tpe);eKo=r(Zgt,"__init__()"),Zgt.forEach(t),oKo=r(NNe," (throws an error)."),NNe.forEach(t),rKo=i(al),Ft=n(al,"DIV",{class:!0});var B6=s(Ft);T(a8.$$.fragment,B6),tKo=i(B6),ape=n(B6,"P",{});var eht=s(ape);aKo=r(eht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eht.forEach(t),nKo=i(B6),Td=n(B6,"P",{});var OK=s(Td);sKo=r(OK,`Note:
Loading a model from its configuration file does `),npe=n(OK,"STRONG",{});var oht=s(npe);lKo=r(oht,"not"),oht.forEach(t),iKo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(OK,"A",{href:!0});var rht=s(vX);dKo=r(rht,"from_pretrained()"),rht.forEach(t),cKo=r(OK," to load the model weights."),OK.forEach(t),mKo=i(B6),T(qT.$$.fragment,B6),B6.forEach(t),fKo=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(n8.$$.fragment,pa),gKo=i(pa),spe=n(pa,"P",{});var tht=s(spe);hKo=r(tht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tht.forEach(t),uKo=i(pa),Xa=n(pa,"P",{});var P6=s(Xa);pKo=r(P6,"The model class to instantiate is selected based on the "),lpe=n(P6,"CODE",{});var aht=s(lpe);_Ko=r(aht,"model_type"),aht.forEach(t),bKo=r(P6,` property of the config object (either
passed as an argument or loaded from `),ipe=n(P6,"CODE",{});var nht=s(ipe);FKo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),vKo=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(P6,"CODE",{});var sht=s(dpe);TKo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),MKo=r(P6,":"),P6.forEach(t),EKo=i(pa),za=n(pa,"UL",{});var I6=s(za);NT=n(I6,"LI",{});var P9e=s(NT);cpe=n(P9e,"STRONG",{});var lht=s(cpe);CKo=r(lht,"data2vec-audio"),lht.forEach(t),wKo=r(P9e," \u2014 "),TX=n(P9e,"A",{href:!0});var iht=s(TX);AKo=r(iht,"Data2VecAudioForXVector"),iht.forEach(t),yKo=r(P9e," (Data2VecAudio model)"),P9e.forEach(t),LKo=i(I6),jT=n(I6,"LI",{});var I9e=s(jT);mpe=n(I9e,"STRONG",{});var dht=s(mpe);xKo=r(dht,"unispeech-sat"),dht.forEach(t),$Ko=r(I9e," \u2014 "),MX=n(I9e,"A",{href:!0});var cht=s(MX);kKo=r(cht,"UniSpeechSatForXVector"),cht.forEach(t),SKo=r(I9e," (UniSpeechSat model)"),I9e.forEach(t),RKo=i(I6),DT=n(I6,"LI",{});var q9e=s(DT);fpe=n(q9e,"STRONG",{});var mht=s(fpe);BKo=r(mht,"wav2vec2"),mht.forEach(t),PKo=r(q9e," \u2014 "),EX=n(q9e,"A",{href:!0});var fht=s(EX);IKo=r(fht,"Wav2Vec2ForXVector"),fht.forEach(t),qKo=r(q9e," (Wav2Vec2 model)"),q9e.forEach(t),NKo=i(I6),GT=n(I6,"LI",{});var N9e=s(GT);gpe=n(N9e,"STRONG",{});var ght=s(gpe);jKo=r(ght,"wavlm"),ght.forEach(t),DKo=r(N9e," \u2014 "),CX=n(N9e,"A",{href:!0});var hht=s(CX);GKo=r(hht,"WavLMForXVector"),hht.forEach(t),OKo=r(N9e," (WavLM model)"),N9e.forEach(t),I6.forEach(t),VKo=i(pa),OT=n(pa,"P",{});var j9e=s(OT);XKo=r(j9e,"The model is set in evaluation mode by default using "),hpe=n(j9e,"CODE",{});var uht=s(hpe);zKo=r(uht,"model.eval()"),uht.forEach(t),QKo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(j9e,"CODE",{});var pht=s(upe);WKo=r(pht,"model.train()"),pht.forEach(t),j9e.forEach(t),HKo=i(pa),T(VT.$$.fragment,pa),pa.forEach(t),al.forEach(t),BIe=i(m),Md=n(m,"H2",{class:!0});var jNe=s(Md);XT=n(jNe,"A",{id:!0,class:!0,href:!0});var _ht=s(XT);ppe=n(_ht,"SPAN",{});var bht=s(ppe);T(s8.$$.fragment,bht),bht.forEach(t),_ht.forEach(t),UKo=i(jNe),_pe=n(jNe,"SPAN",{});var Fht=s(_pe);JKo=r(Fht,"AutoModelForMaskedImageModeling"),Fht.forEach(t),jNe.forEach(t),PIe=i(m),Qo=n(m,"DIV",{class:!0});var nl=s(Qo);T(l8.$$.fragment,nl),YKo=i(nl),Ed=n(nl,"P",{});var VK=s(Ed);KKo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=n(VK,"A",{href:!0});var vht=s(wX);ZKo=r(vht,"from_pretrained()"),vht.forEach(t),eZo=r(VK," class method or the "),AX=n(VK,"A",{href:!0});var Tht=s(AX);oZo=r(Tht,"from_config()"),Tht.forEach(t),rZo=r(VK,` class
method.`),VK.forEach(t),tZo=i(nl),i8=n(nl,"P",{});var DNe=s(i8);aZo=r(DNe,"This class cannot be instantiated directly using "),bpe=n(DNe,"CODE",{});var Mht=s(bpe);nZo=r(Mht,"__init__()"),Mht.forEach(t),sZo=r(DNe," (throws an error)."),DNe.forEach(t),lZo=i(nl),vt=n(nl,"DIV",{class:!0});var q6=s(vt);T(d8.$$.fragment,q6),iZo=i(q6),Fpe=n(q6,"P",{});var Eht=s(Fpe);dZo=r(Eht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eht.forEach(t),cZo=i(q6),Cd=n(q6,"P",{});var XK=s(Cd);mZo=r(XK,`Note:
Loading a model from its configuration file does `),vpe=n(XK,"STRONG",{});var Cht=s(vpe);fZo=r(Cht,"not"),Cht.forEach(t),gZo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(XK,"A",{href:!0});var wht=s(yX);hZo=r(wht,"from_pretrained()"),wht.forEach(t),uZo=r(XK," to load the model weights."),XK.forEach(t),pZo=i(q6),T(zT.$$.fragment,q6),q6.forEach(t),_Zo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(c8.$$.fragment,_a),bZo=i(_a),Tpe=n(_a,"P",{});var Aht=s(Tpe);FZo=r(Aht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Aht.forEach(t),vZo=i(_a),Qa=n(_a,"P",{});var N6=s(Qa);TZo=r(N6,"The model class to instantiate is selected based on the "),Mpe=n(N6,"CODE",{});var yht=s(Mpe);MZo=r(yht,"model_type"),yht.forEach(t),EZo=r(N6,` property of the config object (either
passed as an argument or loaded from `),Epe=n(N6,"CODE",{});var Lht=s(Epe);CZo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),wZo=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(N6,"CODE",{});var xht=s(Cpe);AZo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),yZo=r(N6,":"),N6.forEach(t),LZo=i(_a),wd=n(_a,"UL",{});var zK=s(wd);QT=n(zK,"LI",{});var D9e=s(QT);wpe=n(D9e,"STRONG",{});var $ht=s(wpe);xZo=r($ht,"deit"),$ht.forEach(t),$Zo=r(D9e," \u2014 "),LX=n(D9e,"A",{href:!0});var kht=s(LX);kZo=r(kht,"DeiTForMaskedImageModeling"),kht.forEach(t),SZo=r(D9e," (DeiT model)"),D9e.forEach(t),RZo=i(zK),WT=n(zK,"LI",{});var G9e=s(WT);Ape=n(G9e,"STRONG",{});var Sht=s(Ape);BZo=r(Sht,"swin"),Sht.forEach(t),PZo=r(G9e," \u2014 "),xX=n(G9e,"A",{href:!0});var Rht=s(xX);IZo=r(Rht,"SwinForMaskedImageModeling"),Rht.forEach(t),qZo=r(G9e," (Swin model)"),G9e.forEach(t),NZo=i(zK),HT=n(zK,"LI",{});var O9e=s(HT);ype=n(O9e,"STRONG",{});var Bht=s(ype);jZo=r(Bht,"vit"),Bht.forEach(t),DZo=r(O9e," \u2014 "),$X=n(O9e,"A",{href:!0});var Pht=s($X);GZo=r(Pht,"ViTForMaskedImageModeling"),Pht.forEach(t),OZo=r(O9e," (ViT model)"),O9e.forEach(t),zK.forEach(t),VZo=i(_a),UT=n(_a,"P",{});var V9e=s(UT);XZo=r(V9e,"The model is set in evaluation mode by default using "),Lpe=n(V9e,"CODE",{});var Iht=s(Lpe);zZo=r(Iht,"model.eval()"),Iht.forEach(t),QZo=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(V9e,"CODE",{});var qht=s(xpe);WZo=r(qht,"model.train()"),qht.forEach(t),V9e.forEach(t),HZo=i(_a),T(JT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),IIe=i(m),Ad=n(m,"H2",{class:!0});var GNe=s(Ad);YT=n(GNe,"A",{id:!0,class:!0,href:!0});var Nht=s(YT);$pe=n(Nht,"SPAN",{});var jht=s($pe);T(m8.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),UZo=i(GNe),kpe=n(GNe,"SPAN",{});var Dht=s(kpe);JZo=r(Dht,"AutoModelForObjectDetection"),Dht.forEach(t),GNe.forEach(t),qIe=i(m),Wo=n(m,"DIV",{class:!0});var sl=s(Wo);T(f8.$$.fragment,sl),YZo=i(sl),yd=n(sl,"P",{});var QK=s(yd);KZo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=n(QK,"A",{href:!0});var Ght=s(kX);ZZo=r(Ght,"from_pretrained()"),Ght.forEach(t),eer=r(QK," class method or the "),SX=n(QK,"A",{href:!0});var Oht=s(SX);oer=r(Oht,"from_config()"),Oht.forEach(t),rer=r(QK,` class
method.`),QK.forEach(t),ter=i(sl),g8=n(sl,"P",{});var ONe=s(g8);aer=r(ONe,"This class cannot be instantiated directly using "),Spe=n(ONe,"CODE",{});var Vht=s(Spe);ner=r(Vht,"__init__()"),Vht.forEach(t),ser=r(ONe," (throws an error)."),ONe.forEach(t),ler=i(sl),Tt=n(sl,"DIV",{class:!0});var j6=s(Tt);T(h8.$$.fragment,j6),ier=i(j6),Rpe=n(j6,"P",{});var Xht=s(Rpe);der=r(Xht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xht.forEach(t),cer=i(j6),Ld=n(j6,"P",{});var WK=s(Ld);mer=r(WK,`Note:
Loading a model from its configuration file does `),Bpe=n(WK,"STRONG",{});var zht=s(Bpe);fer=r(zht,"not"),zht.forEach(t),ger=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(WK,"A",{href:!0});var Qht=s(RX);her=r(Qht,"from_pretrained()"),Qht.forEach(t),uer=r(WK," to load the model weights."),WK.forEach(t),per=i(j6),T(KT.$$.fragment,j6),j6.forEach(t),_er=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(u8.$$.fragment,ba),ber=i(ba),Ppe=n(ba,"P",{});var Wht=s(Ppe);Fer=r(Wht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wht.forEach(t),ver=i(ba),Wa=n(ba,"P",{});var D6=s(Wa);Ter=r(D6,"The model class to instantiate is selected based on the "),Ipe=n(D6,"CODE",{});var Hht=s(Ipe);Mer=r(Hht,"model_type"),Hht.forEach(t),Eer=r(D6,` property of the config object (either
passed as an argument or loaded from `),qpe=n(D6,"CODE",{});var Uht=s(qpe);Cer=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),wer=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(D6,"CODE",{});var Jht=s(Npe);Aer=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),yer=r(D6,":"),D6.forEach(t),Ler=i(ba),p8=n(ba,"UL",{});var VNe=s(p8);ZT=n(VNe,"LI",{});var X9e=s(ZT);jpe=n(X9e,"STRONG",{});var Yht=s(jpe);xer=r(Yht,"detr"),Yht.forEach(t),$er=r(X9e," \u2014 "),BX=n(X9e,"A",{href:!0});var Kht=s(BX);ker=r(Kht,"DetrForObjectDetection"),Kht.forEach(t),Ser=r(X9e," (DETR model)"),X9e.forEach(t),Rer=i(VNe),eM=n(VNe,"LI",{});var z9e=s(eM);Dpe=n(z9e,"STRONG",{});var Zht=s(Dpe);Ber=r(Zht,"yolos"),Zht.forEach(t),Per=r(z9e," \u2014 "),PX=n(z9e,"A",{href:!0});var eut=s(PX);Ier=r(eut,"YolosForObjectDetection"),eut.forEach(t),qer=r(z9e," (YOLOS model)"),z9e.forEach(t),VNe.forEach(t),Ner=i(ba),oM=n(ba,"P",{});var Q9e=s(oM);jer=r(Q9e,"The model is set in evaluation mode by default using "),Gpe=n(Q9e,"CODE",{});var out=s(Gpe);Der=r(out,"model.eval()"),out.forEach(t),Ger=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(Q9e,"CODE",{});var rut=s(Ope);Oer=r(rut,"model.train()"),rut.forEach(t),Q9e.forEach(t),Ver=i(ba),T(rM.$$.fragment,ba),ba.forEach(t),sl.forEach(t),NIe=i(m),xd=n(m,"H2",{class:!0});var XNe=s(xd);tM=n(XNe,"A",{id:!0,class:!0,href:!0});var tut=s(tM);Vpe=n(tut,"SPAN",{});var aut=s(Vpe);T(_8.$$.fragment,aut),aut.forEach(t),tut.forEach(t),Xer=i(XNe),Xpe=n(XNe,"SPAN",{});var nut=s(Xpe);zer=r(nut,"AutoModelForImageSegmentation"),nut.forEach(t),XNe.forEach(t),jIe=i(m),Ho=n(m,"DIV",{class:!0});var ll=s(Ho);T(b8.$$.fragment,ll),Qer=i(ll),$d=n(ll,"P",{});var HK=s($d);Wer=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=n(HK,"A",{href:!0});var sut=s(IX);Her=r(sut,"from_pretrained()"),sut.forEach(t),Uer=r(HK," class method or the "),qX=n(HK,"A",{href:!0});var lut=s(qX);Jer=r(lut,"from_config()"),lut.forEach(t),Yer=r(HK,` class
method.`),HK.forEach(t),Ker=i(ll),F8=n(ll,"P",{});var zNe=s(F8);Zer=r(zNe,"This class cannot be instantiated directly using "),zpe=n(zNe,"CODE",{});var iut=s(zpe);eor=r(iut,"__init__()"),iut.forEach(t),oor=r(zNe," (throws an error)."),zNe.forEach(t),ror=i(ll),Mt=n(ll,"DIV",{class:!0});var G6=s(Mt);T(v8.$$.fragment,G6),tor=i(G6),Qpe=n(G6,"P",{});var dut=s(Qpe);aor=r(dut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dut.forEach(t),nor=i(G6),kd=n(G6,"P",{});var UK=s(kd);sor=r(UK,`Note:
Loading a model from its configuration file does `),Wpe=n(UK,"STRONG",{});var cut=s(Wpe);lor=r(cut,"not"),cut.forEach(t),ior=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(UK,"A",{href:!0});var mut=s(NX);dor=r(mut,"from_pretrained()"),mut.forEach(t),cor=r(UK," to load the model weights."),UK.forEach(t),mor=i(G6),T(aM.$$.fragment,G6),G6.forEach(t),gor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(T8.$$.fragment,Fa),hor=i(Fa),Hpe=n(Fa,"P",{});var fut=s(Hpe);uor=r(fut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fut.forEach(t),por=i(Fa),Ha=n(Fa,"P",{});var O6=s(Ha);_or=r(O6,"The model class to instantiate is selected based on the "),Upe=n(O6,"CODE",{});var gut=s(Upe);bor=r(gut,"model_type"),gut.forEach(t),For=r(O6,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(O6,"CODE",{});var hut=s(Jpe);vor=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),Tor=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(O6,"CODE",{});var uut=s(Ype);Mor=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),Eor=r(O6,":"),O6.forEach(t),Cor=i(Fa),Kpe=n(Fa,"UL",{});var put=s(Kpe);nM=n(put,"LI",{});var W9e=s(nM);Zpe=n(W9e,"STRONG",{});var _ut=s(Zpe);wor=r(_ut,"detr"),_ut.forEach(t),Aor=r(W9e," \u2014 "),jX=n(W9e,"A",{href:!0});var but=s(jX);yor=r(but,"DetrForSegmentation"),but.forEach(t),Lor=r(W9e," (DETR model)"),W9e.forEach(t),put.forEach(t),xor=i(Fa),sM=n(Fa,"P",{});var H9e=s(sM);$or=r(H9e,"The model is set in evaluation mode by default using "),e_e=n(H9e,"CODE",{});var Fut=s(e_e);kor=r(Fut,"model.eval()"),Fut.forEach(t),Sor=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(H9e,"CODE",{});var vut=s(o_e);Ror=r(vut,"model.train()"),vut.forEach(t),H9e.forEach(t),Bor=i(Fa),T(lM.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),DIe=i(m),Sd=n(m,"H2",{class:!0});var QNe=s(Sd);iM=n(QNe,"A",{id:!0,class:!0,href:!0});var Tut=s(iM);r_e=n(Tut,"SPAN",{});var Mut=s(r_e);T(M8.$$.fragment,Mut),Mut.forEach(t),Tut.forEach(t),Por=i(QNe),t_e=n(QNe,"SPAN",{});var Eut=s(t_e);Ior=r(Eut,"AutoModelForSemanticSegmentation"),Eut.forEach(t),QNe.forEach(t),GIe=i(m),Uo=n(m,"DIV",{class:!0});var il=s(Uo);T(E8.$$.fragment,il),qor=i(il),Rd=n(il,"P",{});var JK=s(Rd);Nor=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=n(JK,"A",{href:!0});var Cut=s(DX);jor=r(Cut,"from_pretrained()"),Cut.forEach(t),Dor=r(JK," class method or the "),GX=n(JK,"A",{href:!0});var wut=s(GX);Gor=r(wut,"from_config()"),wut.forEach(t),Oor=r(JK,` class
method.`),JK.forEach(t),Vor=i(il),C8=n(il,"P",{});var WNe=s(C8);Xor=r(WNe,"This class cannot be instantiated directly using "),a_e=n(WNe,"CODE",{});var Aut=s(a_e);zor=r(Aut,"__init__()"),Aut.forEach(t),Qor=r(WNe," (throws an error)."),WNe.forEach(t),Wor=i(il),Et=n(il,"DIV",{class:!0});var V6=s(Et);T(w8.$$.fragment,V6),Hor=i(V6),n_e=n(V6,"P",{});var yut=s(n_e);Uor=r(yut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),yut.forEach(t),Jor=i(V6),Bd=n(V6,"P",{});var YK=s(Bd);Yor=r(YK,`Note:
Loading a model from its configuration file does `),s_e=n(YK,"STRONG",{});var Lut=s(s_e);Kor=r(Lut,"not"),Lut.forEach(t),Zor=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(YK,"A",{href:!0});var xut=s(OX);err=r(xut,"from_pretrained()"),xut.forEach(t),orr=r(YK," to load the model weights."),YK.forEach(t),rrr=i(V6),T(dM.$$.fragment,V6),V6.forEach(t),trr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(A8.$$.fragment,va),arr=i(va),l_e=n(va,"P",{});var $ut=s(l_e);nrr=r($ut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$ut.forEach(t),srr=i(va),Ua=n(va,"P",{});var X6=s(Ua);lrr=r(X6,"The model class to instantiate is selected based on the "),i_e=n(X6,"CODE",{});var kut=s(i_e);irr=r(kut,"model_type"),kut.forEach(t),drr=r(X6,` property of the config object (either
passed as an argument or loaded from `),d_e=n(X6,"CODE",{});var Sut=s(d_e);crr=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),mrr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(X6,"CODE",{});var Rut=s(c_e);frr=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),grr=r(X6,":"),X6.forEach(t),hrr=i(va),Ja=n(va,"UL",{});var z6=s(Ja);cM=n(z6,"LI",{});var U9e=s(cM);m_e=n(U9e,"STRONG",{});var But=s(m_e);urr=r(But,"beit"),But.forEach(t),prr=r(U9e," \u2014 "),VX=n(U9e,"A",{href:!0});var Put=s(VX);_rr=r(Put,"BeitForSemanticSegmentation"),Put.forEach(t),brr=r(U9e," (BEiT model)"),U9e.forEach(t),Frr=i(z6),mM=n(z6,"LI",{});var J9e=s(mM);f_e=n(J9e,"STRONG",{});var Iut=s(f_e);vrr=r(Iut,"data2vec-vision"),Iut.forEach(t),Trr=r(J9e," \u2014 "),XX=n(J9e,"A",{href:!0});var qut=s(XX);Mrr=r(qut,"Data2VecVisionForSemanticSegmentation"),qut.forEach(t),Err=r(J9e," (Data2VecVision model)"),J9e.forEach(t),Crr=i(z6),fM=n(z6,"LI",{});var Y9e=s(fM);g_e=n(Y9e,"STRONG",{});var Nut=s(g_e);wrr=r(Nut,"dpt"),Nut.forEach(t),Arr=r(Y9e," \u2014 "),zX=n(Y9e,"A",{href:!0});var jut=s(zX);yrr=r(jut,"DPTForSemanticSegmentation"),jut.forEach(t),Lrr=r(Y9e," (DPT model)"),Y9e.forEach(t),xrr=i(z6),gM=n(z6,"LI",{});var K9e=s(gM);h_e=n(K9e,"STRONG",{});var Dut=s(h_e);$rr=r(Dut,"segformer"),Dut.forEach(t),krr=r(K9e," \u2014 "),QX=n(K9e,"A",{href:!0});var Gut=s(QX);Srr=r(Gut,"SegformerForSemanticSegmentation"),Gut.forEach(t),Rrr=r(K9e," (SegFormer model)"),K9e.forEach(t),z6.forEach(t),Brr=i(va),hM=n(va,"P",{});var Z9e=s(hM);Prr=r(Z9e,"The model is set in evaluation mode by default using "),u_e=n(Z9e,"CODE",{});var Out=s(u_e);Irr=r(Out,"model.eval()"),Out.forEach(t),qrr=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(Z9e,"CODE",{});var Vut=s(p_e);Nrr=r(Vut,"model.train()"),Vut.forEach(t),Z9e.forEach(t),jrr=i(va),T(uM.$$.fragment,va),va.forEach(t),il.forEach(t),OIe=i(m),Pd=n(m,"H2",{class:!0});var HNe=s(Pd);pM=n(HNe,"A",{id:!0,class:!0,href:!0});var Xut=s(pM);__e=n(Xut,"SPAN",{});var zut=s(__e);T(y8.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),Drr=i(HNe),b_e=n(HNe,"SPAN",{});var Qut=s(b_e);Grr=r(Qut,"AutoModelForInstanceSegmentation"),Qut.forEach(t),HNe.forEach(t),VIe=i(m),Jo=n(m,"DIV",{class:!0});var dl=s(Jo);T(L8.$$.fragment,dl),Orr=i(dl),Id=n(dl,"P",{});var KK=s(Id);Vrr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=n(KK,"A",{href:!0});var Wut=s(WX);Xrr=r(Wut,"from_pretrained()"),Wut.forEach(t),zrr=r(KK," class method or the "),HX=n(KK,"A",{href:!0});var Hut=s(HX);Qrr=r(Hut,"from_config()"),Hut.forEach(t),Wrr=r(KK,` class
method.`),KK.forEach(t),Hrr=i(dl),x8=n(dl,"P",{});var UNe=s(x8);Urr=r(UNe,"This class cannot be instantiated directly using "),F_e=n(UNe,"CODE",{});var Uut=s(F_e);Jrr=r(Uut,"__init__()"),Uut.forEach(t),Yrr=r(UNe," (throws an error)."),UNe.forEach(t),Krr=i(dl),Ct=n(dl,"DIV",{class:!0});var Q6=s(Ct);T($8.$$.fragment,Q6),Zrr=i(Q6),v_e=n(Q6,"P",{});var Jut=s(v_e);etr=r(Jut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jut.forEach(t),otr=i(Q6),qd=n(Q6,"P",{});var ZK=s(qd);rtr=r(ZK,`Note:
Loading a model from its configuration file does `),T_e=n(ZK,"STRONG",{});var Yut=s(T_e);ttr=r(Yut,"not"),Yut.forEach(t),atr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(ZK,"A",{href:!0});var Kut=s(UX);ntr=r(Kut,"from_pretrained()"),Kut.forEach(t),str=r(ZK," to load the model weights."),ZK.forEach(t),ltr=i(Q6),T(_M.$$.fragment,Q6),Q6.forEach(t),itr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(k8.$$.fragment,Ta),dtr=i(Ta),M_e=n(Ta,"P",{});var Zut=s(M_e);ctr=r(Zut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zut.forEach(t),mtr=i(Ta),Ya=n(Ta,"P",{});var W6=s(Ya);ftr=r(W6,"The model class to instantiate is selected based on the "),E_e=n(W6,"CODE",{});var ept=s(E_e);gtr=r(ept,"model_type"),ept.forEach(t),htr=r(W6,` property of the config object (either
passed as an argument or loaded from `),C_e=n(W6,"CODE",{});var opt=s(C_e);utr=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),ptr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(W6,"CODE",{});var rpt=s(w_e);_tr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),btr=r(W6,":"),W6.forEach(t),Ftr=i(Ta),A_e=n(Ta,"UL",{});var tpt=s(A_e);bM=n(tpt,"LI",{});var e$e=s(bM);y_e=n(e$e,"STRONG",{});var apt=s(y_e);vtr=r(apt,"maskformer"),apt.forEach(t),Ttr=r(e$e," \u2014 "),JX=n(e$e,"A",{href:!0});var npt=s(JX);Mtr=r(npt,"MaskFormerForInstanceSegmentation"),npt.forEach(t),Etr=r(e$e," (MaskFormer model)"),e$e.forEach(t),tpt.forEach(t),Ctr=i(Ta),FM=n(Ta,"P",{});var o$e=s(FM);wtr=r(o$e,"The model is set in evaluation mode by default using "),L_e=n(o$e,"CODE",{});var spt=s(L_e);Atr=r(spt,"model.eval()"),spt.forEach(t),ytr=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(o$e,"CODE",{});var lpt=s(x_e);Ltr=r(lpt,"model.train()"),lpt.forEach(t),o$e.forEach(t),xtr=i(Ta),T(vM.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),XIe=i(m),Nd=n(m,"H2",{class:!0});var JNe=s(Nd);TM=n(JNe,"A",{id:!0,class:!0,href:!0});var ipt=s(TM);$_e=n(ipt,"SPAN",{});var dpt=s($_e);T(S8.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),$tr=i(JNe),k_e=n(JNe,"SPAN",{});var cpt=s(k_e);ktr=r(cpt,"TFAutoModel"),cpt.forEach(t),JNe.forEach(t),zIe=i(m),Yo=n(m,"DIV",{class:!0});var cl=s(Yo);T(R8.$$.fragment,cl),Str=i(cl),jd=n(cl,"P",{});var eZ=s(jd);Rtr=r(eZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=n(eZ,"A",{href:!0});var mpt=s(YX);Btr=r(mpt,"from_pretrained()"),mpt.forEach(t),Ptr=r(eZ," class method or the "),KX=n(eZ,"A",{href:!0});var fpt=s(KX);Itr=r(fpt,"from_config()"),fpt.forEach(t),qtr=r(eZ,` class
method.`),eZ.forEach(t),Ntr=i(cl),B8=n(cl,"P",{});var YNe=s(B8);jtr=r(YNe,"This class cannot be instantiated directly using "),S_e=n(YNe,"CODE",{});var gpt=s(S_e);Dtr=r(gpt,"__init__()"),gpt.forEach(t),Gtr=r(YNe," (throws an error)."),YNe.forEach(t),Otr=i(cl),wt=n(cl,"DIV",{class:!0});var H6=s(wt);T(P8.$$.fragment,H6),Vtr=i(H6),R_e=n(H6,"P",{});var hpt=s(R_e);Xtr=r(hpt,"Instantiates one of the base model classes of the library from a configuration."),hpt.forEach(t),ztr=i(H6),Dd=n(H6,"P",{});var oZ=s(Dd);Qtr=r(oZ,`Note:
Loading a model from its configuration file does `),B_e=n(oZ,"STRONG",{});var upt=s(B_e);Wtr=r(upt,"not"),upt.forEach(t),Htr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(oZ,"A",{href:!0});var ppt=s(ZX);Utr=r(ppt,"from_pretrained()"),ppt.forEach(t),Jtr=r(oZ," to load the model weights."),oZ.forEach(t),Ytr=i(H6),T(MM.$$.fragment,H6),H6.forEach(t),Ktr=i(cl),wr=n(cl,"DIV",{class:!0});var ml=s(wr);T(I8.$$.fragment,ml),Ztr=i(ml),P_e=n(ml,"P",{});var _pt=s(P_e);ear=r(_pt,"Instantiate one of the base model classes of the library from a pretrained model."),_pt.forEach(t),oar=i(ml),Ka=n(ml,"P",{});var U6=s(Ka);rar=r(U6,"The model class to instantiate is selected based on the "),I_e=n(U6,"CODE",{});var bpt=s(I_e);tar=r(bpt,"model_type"),bpt.forEach(t),aar=r(U6,` property of the config object (either
passed as an argument or loaded from `),q_e=n(U6,"CODE",{});var Fpt=s(q_e);nar=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),sar=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(U6,"CODE",{});var vpt=s(N_e);lar=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),iar=r(U6,":"),U6.forEach(t),dar=i(ml),N=n(ml,"UL",{});var D=s(N);EM=n(D,"LI",{});var r$e=s(EM);j_e=n(r$e,"STRONG",{});var Tpt=s(j_e);car=r(Tpt,"albert"),Tpt.forEach(t),mar=r(r$e," \u2014 "),ez=n(r$e,"A",{href:!0});var Mpt=s(ez);far=r(Mpt,"TFAlbertModel"),Mpt.forEach(t),gar=r(r$e," (ALBERT model)"),r$e.forEach(t),har=i(D),CM=n(D,"LI",{});var t$e=s(CM);D_e=n(t$e,"STRONG",{});var Ept=s(D_e);uar=r(Ept,"bart"),Ept.forEach(t),par=r(t$e," \u2014 "),oz=n(t$e,"A",{href:!0});var Cpt=s(oz);_ar=r(Cpt,"TFBartModel"),Cpt.forEach(t),bar=r(t$e," (BART model)"),t$e.forEach(t),Far=i(D),wM=n(D,"LI",{});var a$e=s(wM);G_e=n(a$e,"STRONG",{});var wpt=s(G_e);Tar=r(wpt,"bert"),wpt.forEach(t),Mar=r(a$e," \u2014 "),rz=n(a$e,"A",{href:!0});var Apt=s(rz);Ear=r(Apt,"TFBertModel"),Apt.forEach(t),Car=r(a$e," (BERT model)"),a$e.forEach(t),war=i(D),AM=n(D,"LI",{});var n$e=s(AM);O_e=n(n$e,"STRONG",{});var ypt=s(O_e);Aar=r(ypt,"blenderbot"),ypt.forEach(t),yar=r(n$e," \u2014 "),tz=n(n$e,"A",{href:!0});var Lpt=s(tz);Lar=r(Lpt,"TFBlenderbotModel"),Lpt.forEach(t),xar=r(n$e," (Blenderbot model)"),n$e.forEach(t),$ar=i(D),yM=n(D,"LI",{});var s$e=s(yM);V_e=n(s$e,"STRONG",{});var xpt=s(V_e);kar=r(xpt,"blenderbot-small"),xpt.forEach(t),Sar=r(s$e," \u2014 "),az=n(s$e,"A",{href:!0});var $pt=s(az);Rar=r($pt,"TFBlenderbotSmallModel"),$pt.forEach(t),Bar=r(s$e," (BlenderbotSmall model)"),s$e.forEach(t),Par=i(D),LM=n(D,"LI",{});var l$e=s(LM);X_e=n(l$e,"STRONG",{});var kpt=s(X_e);Iar=r(kpt,"camembert"),kpt.forEach(t),qar=r(l$e," \u2014 "),nz=n(l$e,"A",{href:!0});var Spt=s(nz);Nar=r(Spt,"TFCamembertModel"),Spt.forEach(t),jar=r(l$e," (CamemBERT model)"),l$e.forEach(t),Dar=i(D),xM=n(D,"LI",{});var i$e=s(xM);z_e=n(i$e,"STRONG",{});var Rpt=s(z_e);Gar=r(Rpt,"clip"),Rpt.forEach(t),Oar=r(i$e," \u2014 "),sz=n(i$e,"A",{href:!0});var Bpt=s(sz);Var=r(Bpt,"TFCLIPModel"),Bpt.forEach(t),Xar=r(i$e," (CLIP model)"),i$e.forEach(t),zar=i(D),$M=n(D,"LI",{});var d$e=s($M);Q_e=n(d$e,"STRONG",{});var Ppt=s(Q_e);Qar=r(Ppt,"convbert"),Ppt.forEach(t),War=r(d$e," \u2014 "),lz=n(d$e,"A",{href:!0});var Ipt=s(lz);Har=r(Ipt,"TFConvBertModel"),Ipt.forEach(t),Uar=r(d$e," (ConvBERT model)"),d$e.forEach(t),Jar=i(D),kM=n(D,"LI",{});var c$e=s(kM);W_e=n(c$e,"STRONG",{});var qpt=s(W_e);Yar=r(qpt,"convnext"),qpt.forEach(t),Kar=r(c$e," \u2014 "),iz=n(c$e,"A",{href:!0});var Npt=s(iz);Zar=r(Npt,"TFConvNextModel"),Npt.forEach(t),enr=r(c$e," (ConvNext model)"),c$e.forEach(t),onr=i(D),SM=n(D,"LI",{});var m$e=s(SM);H_e=n(m$e,"STRONG",{});var jpt=s(H_e);rnr=r(jpt,"ctrl"),jpt.forEach(t),tnr=r(m$e," \u2014 "),dz=n(m$e,"A",{href:!0});var Dpt=s(dz);anr=r(Dpt,"TFCTRLModel"),Dpt.forEach(t),nnr=r(m$e," (CTRL model)"),m$e.forEach(t),snr=i(D),RM=n(D,"LI",{});var f$e=s(RM);U_e=n(f$e,"STRONG",{});var Gpt=s(U_e);lnr=r(Gpt,"data2vec-vision"),Gpt.forEach(t),inr=r(f$e," \u2014 "),cz=n(f$e,"A",{href:!0});var Opt=s(cz);dnr=r(Opt,"TFData2VecVisionModel"),Opt.forEach(t),cnr=r(f$e," (Data2VecVision model)"),f$e.forEach(t),mnr=i(D),BM=n(D,"LI",{});var g$e=s(BM);J_e=n(g$e,"STRONG",{});var Vpt=s(J_e);fnr=r(Vpt,"deberta"),Vpt.forEach(t),gnr=r(g$e," \u2014 "),mz=n(g$e,"A",{href:!0});var Xpt=s(mz);hnr=r(Xpt,"TFDebertaModel"),Xpt.forEach(t),unr=r(g$e," (DeBERTa model)"),g$e.forEach(t),pnr=i(D),PM=n(D,"LI",{});var h$e=s(PM);Y_e=n(h$e,"STRONG",{});var zpt=s(Y_e);_nr=r(zpt,"deberta-v2"),zpt.forEach(t),bnr=r(h$e," \u2014 "),fz=n(h$e,"A",{href:!0});var Qpt=s(fz);Fnr=r(Qpt,"TFDebertaV2Model"),Qpt.forEach(t),vnr=r(h$e," (DeBERTa-v2 model)"),h$e.forEach(t),Tnr=i(D),IM=n(D,"LI",{});var u$e=s(IM);K_e=n(u$e,"STRONG",{});var Wpt=s(K_e);Mnr=r(Wpt,"distilbert"),Wpt.forEach(t),Enr=r(u$e," \u2014 "),gz=n(u$e,"A",{href:!0});var Hpt=s(gz);Cnr=r(Hpt,"TFDistilBertModel"),Hpt.forEach(t),wnr=r(u$e," (DistilBERT model)"),u$e.forEach(t),Anr=i(D),qM=n(D,"LI",{});var p$e=s(qM);Z_e=n(p$e,"STRONG",{});var Upt=s(Z_e);ynr=r(Upt,"dpr"),Upt.forEach(t),Lnr=r(p$e," \u2014 "),hz=n(p$e,"A",{href:!0});var Jpt=s(hz);xnr=r(Jpt,"TFDPRQuestionEncoder"),Jpt.forEach(t),$nr=r(p$e," (DPR model)"),p$e.forEach(t),knr=i(D),NM=n(D,"LI",{});var _$e=s(NM);ebe=n(_$e,"STRONG",{});var Ypt=s(ebe);Snr=r(Ypt,"electra"),Ypt.forEach(t),Rnr=r(_$e," \u2014 "),uz=n(_$e,"A",{href:!0});var Kpt=s(uz);Bnr=r(Kpt,"TFElectraModel"),Kpt.forEach(t),Pnr=r(_$e," (ELECTRA model)"),_$e.forEach(t),Inr=i(D),jM=n(D,"LI",{});var b$e=s(jM);obe=n(b$e,"STRONG",{});var Zpt=s(obe);qnr=r(Zpt,"flaubert"),Zpt.forEach(t),Nnr=r(b$e," \u2014 "),pz=n(b$e,"A",{href:!0});var e_t=s(pz);jnr=r(e_t,"TFFlaubertModel"),e_t.forEach(t),Dnr=r(b$e," (FlauBERT model)"),b$e.forEach(t),Gnr=i(D),Ps=n(D,"LI",{});var g$=s(Ps);rbe=n(g$,"STRONG",{});var o_t=s(rbe);Onr=r(o_t,"funnel"),o_t.forEach(t),Vnr=r(g$," \u2014 "),_z=n(g$,"A",{href:!0});var r_t=s(_z);Xnr=r(r_t,"TFFunnelModel"),r_t.forEach(t),znr=r(g$," or "),bz=n(g$,"A",{href:!0});var t_t=s(bz);Qnr=r(t_t,"TFFunnelBaseModel"),t_t.forEach(t),Wnr=r(g$," (Funnel Transformer model)"),g$.forEach(t),Hnr=i(D),DM=n(D,"LI",{});var F$e=s(DM);tbe=n(F$e,"STRONG",{});var a_t=s(tbe);Unr=r(a_t,"gpt2"),a_t.forEach(t),Jnr=r(F$e," \u2014 "),Fz=n(F$e,"A",{href:!0});var n_t=s(Fz);Ynr=r(n_t,"TFGPT2Model"),n_t.forEach(t),Knr=r(F$e," (OpenAI GPT-2 model)"),F$e.forEach(t),Znr=i(D),GM=n(D,"LI",{});var v$e=s(GM);abe=n(v$e,"STRONG",{});var s_t=s(abe);esr=r(s_t,"gptj"),s_t.forEach(t),osr=r(v$e," \u2014 "),vz=n(v$e,"A",{href:!0});var l_t=s(vz);rsr=r(l_t,"TFGPTJModel"),l_t.forEach(t),tsr=r(v$e," (GPT-J model)"),v$e.forEach(t),asr=i(D),OM=n(D,"LI",{});var T$e=s(OM);nbe=n(T$e,"STRONG",{});var i_t=s(nbe);nsr=r(i_t,"hubert"),i_t.forEach(t),ssr=r(T$e," \u2014 "),Tz=n(T$e,"A",{href:!0});var d_t=s(Tz);lsr=r(d_t,"TFHubertModel"),d_t.forEach(t),isr=r(T$e," (Hubert model)"),T$e.forEach(t),dsr=i(D),VM=n(D,"LI",{});var M$e=s(VM);sbe=n(M$e,"STRONG",{});var c_t=s(sbe);csr=r(c_t,"layoutlm"),c_t.forEach(t),msr=r(M$e," \u2014 "),Mz=n(M$e,"A",{href:!0});var m_t=s(Mz);fsr=r(m_t,"TFLayoutLMModel"),m_t.forEach(t),gsr=r(M$e," (LayoutLM model)"),M$e.forEach(t),hsr=i(D),XM=n(D,"LI",{});var E$e=s(XM);lbe=n(E$e,"STRONG",{});var f_t=s(lbe);usr=r(f_t,"led"),f_t.forEach(t),psr=r(E$e," \u2014 "),Ez=n(E$e,"A",{href:!0});var g_t=s(Ez);_sr=r(g_t,"TFLEDModel"),g_t.forEach(t),bsr=r(E$e," (LED model)"),E$e.forEach(t),Fsr=i(D),zM=n(D,"LI",{});var C$e=s(zM);ibe=n(C$e,"STRONG",{});var h_t=s(ibe);vsr=r(h_t,"longformer"),h_t.forEach(t),Tsr=r(C$e," \u2014 "),Cz=n(C$e,"A",{href:!0});var u_t=s(Cz);Msr=r(u_t,"TFLongformerModel"),u_t.forEach(t),Esr=r(C$e," (Longformer model)"),C$e.forEach(t),Csr=i(D),QM=n(D,"LI",{});var w$e=s(QM);dbe=n(w$e,"STRONG",{});var p_t=s(dbe);wsr=r(p_t,"lxmert"),p_t.forEach(t),Asr=r(w$e," \u2014 "),wz=n(w$e,"A",{href:!0});var __t=s(wz);ysr=r(__t,"TFLxmertModel"),__t.forEach(t),Lsr=r(w$e," (LXMERT model)"),w$e.forEach(t),xsr=i(D),WM=n(D,"LI",{});var A$e=s(WM);cbe=n(A$e,"STRONG",{});var b_t=s(cbe);$sr=r(b_t,"marian"),b_t.forEach(t),ksr=r(A$e," \u2014 "),Az=n(A$e,"A",{href:!0});var F_t=s(Az);Ssr=r(F_t,"TFMarianModel"),F_t.forEach(t),Rsr=r(A$e," (Marian model)"),A$e.forEach(t),Bsr=i(D),HM=n(D,"LI",{});var y$e=s(HM);mbe=n(y$e,"STRONG",{});var v_t=s(mbe);Psr=r(v_t,"mbart"),v_t.forEach(t),Isr=r(y$e," \u2014 "),yz=n(y$e,"A",{href:!0});var T_t=s(yz);qsr=r(T_t,"TFMBartModel"),T_t.forEach(t),Nsr=r(y$e," (mBART model)"),y$e.forEach(t),jsr=i(D),UM=n(D,"LI",{});var L$e=s(UM);fbe=n(L$e,"STRONG",{});var M_t=s(fbe);Dsr=r(M_t,"mobilebert"),M_t.forEach(t),Gsr=r(L$e," \u2014 "),Lz=n(L$e,"A",{href:!0});var E_t=s(Lz);Osr=r(E_t,"TFMobileBertModel"),E_t.forEach(t),Vsr=r(L$e," (MobileBERT model)"),L$e.forEach(t),Xsr=i(D),JM=n(D,"LI",{});var x$e=s(JM);gbe=n(x$e,"STRONG",{});var C_t=s(gbe);zsr=r(C_t,"mpnet"),C_t.forEach(t),Qsr=r(x$e," \u2014 "),xz=n(x$e,"A",{href:!0});var w_t=s(xz);Wsr=r(w_t,"TFMPNetModel"),w_t.forEach(t),Hsr=r(x$e," (MPNet model)"),x$e.forEach(t),Usr=i(D),YM=n(D,"LI",{});var $$e=s(YM);hbe=n($$e,"STRONG",{});var A_t=s(hbe);Jsr=r(A_t,"mt5"),A_t.forEach(t),Ysr=r($$e," \u2014 "),$z=n($$e,"A",{href:!0});var y_t=s($z);Ksr=r(y_t,"TFMT5Model"),y_t.forEach(t),Zsr=r($$e," (mT5 model)"),$$e.forEach(t),elr=i(D),KM=n(D,"LI",{});var k$e=s(KM);ube=n(k$e,"STRONG",{});var L_t=s(ube);olr=r(L_t,"openai-gpt"),L_t.forEach(t),rlr=r(k$e," \u2014 "),kz=n(k$e,"A",{href:!0});var x_t=s(kz);tlr=r(x_t,"TFOpenAIGPTModel"),x_t.forEach(t),alr=r(k$e," (OpenAI GPT model)"),k$e.forEach(t),nlr=i(D),ZM=n(D,"LI",{});var S$e=s(ZM);pbe=n(S$e,"STRONG",{});var $_t=s(pbe);slr=r($_t,"pegasus"),$_t.forEach(t),llr=r(S$e," \u2014 "),Sz=n(S$e,"A",{href:!0});var k_t=s(Sz);ilr=r(k_t,"TFPegasusModel"),k_t.forEach(t),dlr=r(S$e," (Pegasus model)"),S$e.forEach(t),clr=i(D),e4=n(D,"LI",{});var R$e=s(e4);_be=n(R$e,"STRONG",{});var S_t=s(_be);mlr=r(S_t,"rembert"),S_t.forEach(t),flr=r(R$e," \u2014 "),Rz=n(R$e,"A",{href:!0});var R_t=s(Rz);glr=r(R_t,"TFRemBertModel"),R_t.forEach(t),hlr=r(R$e," (RemBERT model)"),R$e.forEach(t),ulr=i(D),o4=n(D,"LI",{});var B$e=s(o4);bbe=n(B$e,"STRONG",{});var B_t=s(bbe);plr=r(B_t,"roberta"),B_t.forEach(t),_lr=r(B$e," \u2014 "),Bz=n(B$e,"A",{href:!0});var P_t=s(Bz);blr=r(P_t,"TFRobertaModel"),P_t.forEach(t),Flr=r(B$e," (RoBERTa model)"),B$e.forEach(t),vlr=i(D),r4=n(D,"LI",{});var P$e=s(r4);Fbe=n(P$e,"STRONG",{});var I_t=s(Fbe);Tlr=r(I_t,"roformer"),I_t.forEach(t),Mlr=r(P$e," \u2014 "),Pz=n(P$e,"A",{href:!0});var q_t=s(Pz);Elr=r(q_t,"TFRoFormerModel"),q_t.forEach(t),Clr=r(P$e," (RoFormer model)"),P$e.forEach(t),wlr=i(D),t4=n(D,"LI",{});var I$e=s(t4);vbe=n(I$e,"STRONG",{});var N_t=s(vbe);Alr=r(N_t,"speech_to_text"),N_t.forEach(t),ylr=r(I$e," \u2014 "),Iz=n(I$e,"A",{href:!0});var j_t=s(Iz);Llr=r(j_t,"TFSpeech2TextModel"),j_t.forEach(t),xlr=r(I$e," (Speech2Text model)"),I$e.forEach(t),$lr=i(D),a4=n(D,"LI",{});var q$e=s(a4);Tbe=n(q$e,"STRONG",{});var D_t=s(Tbe);klr=r(D_t,"swin"),D_t.forEach(t),Slr=r(q$e," \u2014 "),qz=n(q$e,"A",{href:!0});var G_t=s(qz);Rlr=r(G_t,"TFSwinModel"),G_t.forEach(t),Blr=r(q$e," (Swin model)"),q$e.forEach(t),Plr=i(D),n4=n(D,"LI",{});var N$e=s(n4);Mbe=n(N$e,"STRONG",{});var O_t=s(Mbe);Ilr=r(O_t,"t5"),O_t.forEach(t),qlr=r(N$e," \u2014 "),Nz=n(N$e,"A",{href:!0});var V_t=s(Nz);Nlr=r(V_t,"TFT5Model"),V_t.forEach(t),jlr=r(N$e," (T5 model)"),N$e.forEach(t),Dlr=i(D),s4=n(D,"LI",{});var j$e=s(s4);Ebe=n(j$e,"STRONG",{});var X_t=s(Ebe);Glr=r(X_t,"tapas"),X_t.forEach(t),Olr=r(j$e," \u2014 "),jz=n(j$e,"A",{href:!0});var z_t=s(jz);Vlr=r(z_t,"TFTapasModel"),z_t.forEach(t),Xlr=r(j$e," (TAPAS model)"),j$e.forEach(t),zlr=i(D),l4=n(D,"LI",{});var D$e=s(l4);Cbe=n(D$e,"STRONG",{});var Q_t=s(Cbe);Qlr=r(Q_t,"transfo-xl"),Q_t.forEach(t),Wlr=r(D$e," \u2014 "),Dz=n(D$e,"A",{href:!0});var W_t=s(Dz);Hlr=r(W_t,"TFTransfoXLModel"),W_t.forEach(t),Ulr=r(D$e," (Transformer-XL model)"),D$e.forEach(t),Jlr=i(D),i4=n(D,"LI",{});var G$e=s(i4);wbe=n(G$e,"STRONG",{});var H_t=s(wbe);Ylr=r(H_t,"vit"),H_t.forEach(t),Klr=r(G$e," \u2014 "),Gz=n(G$e,"A",{href:!0});var U_t=s(Gz);Zlr=r(U_t,"TFViTModel"),U_t.forEach(t),eir=r(G$e," (ViT model)"),G$e.forEach(t),oir=i(D),d4=n(D,"LI",{});var O$e=s(d4);Abe=n(O$e,"STRONG",{});var J_t=s(Abe);rir=r(J_t,"vit_mae"),J_t.forEach(t),tir=r(O$e," \u2014 "),Oz=n(O$e,"A",{href:!0});var Y_t=s(Oz);air=r(Y_t,"TFViTMAEModel"),Y_t.forEach(t),nir=r(O$e," (ViTMAE model)"),O$e.forEach(t),sir=i(D),c4=n(D,"LI",{});var V$e=s(c4);ybe=n(V$e,"STRONG",{});var K_t=s(ybe);lir=r(K_t,"wav2vec2"),K_t.forEach(t),iir=r(V$e," \u2014 "),Vz=n(V$e,"A",{href:!0});var Z_t=s(Vz);dir=r(Z_t,"TFWav2Vec2Model"),Z_t.forEach(t),cir=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),mir=i(D),m4=n(D,"LI",{});var X$e=s(m4);Lbe=n(X$e,"STRONG",{});var ebt=s(Lbe);fir=r(ebt,"xlm"),ebt.forEach(t),gir=r(X$e," \u2014 "),Xz=n(X$e,"A",{href:!0});var obt=s(Xz);hir=r(obt,"TFXLMModel"),obt.forEach(t),uir=r(X$e," (XLM model)"),X$e.forEach(t),pir=i(D),f4=n(D,"LI",{});var z$e=s(f4);xbe=n(z$e,"STRONG",{});var rbt=s(xbe);_ir=r(rbt,"xlm-roberta"),rbt.forEach(t),bir=r(z$e," \u2014 "),zz=n(z$e,"A",{href:!0});var tbt=s(zz);Fir=r(tbt,"TFXLMRobertaModel"),tbt.forEach(t),vir=r(z$e," (XLM-RoBERTa model)"),z$e.forEach(t),Tir=i(D),g4=n(D,"LI",{});var Q$e=s(g4);$be=n(Q$e,"STRONG",{});var abt=s($be);Mir=r(abt,"xlnet"),abt.forEach(t),Eir=r(Q$e," \u2014 "),Qz=n(Q$e,"A",{href:!0});var nbt=s(Qz);Cir=r(nbt,"TFXLNetModel"),nbt.forEach(t),wir=r(Q$e," (XLNet model)"),Q$e.forEach(t),D.forEach(t),Air=i(ml),T(h4.$$.fragment,ml),ml.forEach(t),cl.forEach(t),QIe=i(m),Gd=n(m,"H2",{class:!0});var KNe=s(Gd);u4=n(KNe,"A",{id:!0,class:!0,href:!0});var sbt=s(u4);kbe=n(sbt,"SPAN",{});var lbt=s(kbe);T(q8.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),yir=i(KNe),Sbe=n(KNe,"SPAN",{});var ibt=s(Sbe);Lir=r(ibt,"TFAutoModelForPreTraining"),ibt.forEach(t),KNe.forEach(t),WIe=i(m),Ko=n(m,"DIV",{class:!0});var fl=s(Ko);T(N8.$$.fragment,fl),xir=i(fl),Od=n(fl,"P",{});var rZ=s(Od);$ir=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=n(rZ,"A",{href:!0});var dbt=s(Wz);kir=r(dbt,"from_pretrained()"),dbt.forEach(t),Sir=r(rZ," class method or the "),Hz=n(rZ,"A",{href:!0});var cbt=s(Hz);Rir=r(cbt,"from_config()"),cbt.forEach(t),Bir=r(rZ,` class
method.`),rZ.forEach(t),Pir=i(fl),j8=n(fl,"P",{});var ZNe=s(j8);Iir=r(ZNe,"This class cannot be instantiated directly using "),Rbe=n(ZNe,"CODE",{});var mbt=s(Rbe);qir=r(mbt,"__init__()"),mbt.forEach(t),Nir=r(ZNe," (throws an error)."),ZNe.forEach(t),jir=i(fl),At=n(fl,"DIV",{class:!0});var J6=s(At);T(D8.$$.fragment,J6),Dir=i(J6),Bbe=n(J6,"P",{});var fbt=s(Bbe);Gir=r(fbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fbt.forEach(t),Oir=i(J6),Vd=n(J6,"P",{});var tZ=s(Vd);Vir=r(tZ,`Note:
Loading a model from its configuration file does `),Pbe=n(tZ,"STRONG",{});var gbt=s(Pbe);Xir=r(gbt,"not"),gbt.forEach(t),zir=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(tZ,"A",{href:!0});var hbt=s(Uz);Qir=r(hbt,"from_pretrained()"),hbt.forEach(t),Wir=r(tZ," to load the model weights."),tZ.forEach(t),Hir=i(J6),T(p4.$$.fragment,J6),J6.forEach(t),Uir=i(fl),Ar=n(fl,"DIV",{class:!0});var gl=s(Ar);T(G8.$$.fragment,gl),Jir=i(gl),Ibe=n(gl,"P",{});var ubt=s(Ibe);Yir=r(ubt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ubt.forEach(t),Kir=i(gl),Za=n(gl,"P",{});var Y6=s(Za);Zir=r(Y6,"The model class to instantiate is selected based on the "),qbe=n(Y6,"CODE",{});var pbt=s(qbe);edr=r(pbt,"model_type"),pbt.forEach(t),odr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(Y6,"CODE",{});var _bt=s(Nbe);rdr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),tdr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(Y6,"CODE",{});var bbt=s(jbe);adr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),ndr=r(Y6,":"),Y6.forEach(t),sdr=i(gl),se=n(gl,"UL",{});var le=s(se);_4=n(le,"LI",{});var W$e=s(_4);Dbe=n(W$e,"STRONG",{});var Fbt=s(Dbe);ldr=r(Fbt,"albert"),Fbt.forEach(t),idr=r(W$e," \u2014 "),Jz=n(W$e,"A",{href:!0});var vbt=s(Jz);ddr=r(vbt,"TFAlbertForPreTraining"),vbt.forEach(t),cdr=r(W$e," (ALBERT model)"),W$e.forEach(t),mdr=i(le),b4=n(le,"LI",{});var H$e=s(b4);Gbe=n(H$e,"STRONG",{});var Tbt=s(Gbe);fdr=r(Tbt,"bart"),Tbt.forEach(t),gdr=r(H$e," \u2014 "),Yz=n(H$e,"A",{href:!0});var Mbt=s(Yz);hdr=r(Mbt,"TFBartForConditionalGeneration"),Mbt.forEach(t),udr=r(H$e," (BART model)"),H$e.forEach(t),pdr=i(le),F4=n(le,"LI",{});var U$e=s(F4);Obe=n(U$e,"STRONG",{});var Ebt=s(Obe);_dr=r(Ebt,"bert"),Ebt.forEach(t),bdr=r(U$e," \u2014 "),Kz=n(U$e,"A",{href:!0});var Cbt=s(Kz);Fdr=r(Cbt,"TFBertForPreTraining"),Cbt.forEach(t),vdr=r(U$e," (BERT model)"),U$e.forEach(t),Tdr=i(le),v4=n(le,"LI",{});var J$e=s(v4);Vbe=n(J$e,"STRONG",{});var wbt=s(Vbe);Mdr=r(wbt,"camembert"),wbt.forEach(t),Edr=r(J$e," \u2014 "),Zz=n(J$e,"A",{href:!0});var Abt=s(Zz);Cdr=r(Abt,"TFCamembertForMaskedLM"),Abt.forEach(t),wdr=r(J$e," (CamemBERT model)"),J$e.forEach(t),Adr=i(le),T4=n(le,"LI",{});var Y$e=s(T4);Xbe=n(Y$e,"STRONG",{});var ybt=s(Xbe);ydr=r(ybt,"ctrl"),ybt.forEach(t),Ldr=r(Y$e," \u2014 "),eQ=n(Y$e,"A",{href:!0});var Lbt=s(eQ);xdr=r(Lbt,"TFCTRLLMHeadModel"),Lbt.forEach(t),$dr=r(Y$e," (CTRL model)"),Y$e.forEach(t),kdr=i(le),M4=n(le,"LI",{});var K$e=s(M4);zbe=n(K$e,"STRONG",{});var xbt=s(zbe);Sdr=r(xbt,"distilbert"),xbt.forEach(t),Rdr=r(K$e," \u2014 "),oQ=n(K$e,"A",{href:!0});var $bt=s(oQ);Bdr=r($bt,"TFDistilBertForMaskedLM"),$bt.forEach(t),Pdr=r(K$e," (DistilBERT model)"),K$e.forEach(t),Idr=i(le),E4=n(le,"LI",{});var Z$e=s(E4);Qbe=n(Z$e,"STRONG",{});var kbt=s(Qbe);qdr=r(kbt,"electra"),kbt.forEach(t),Ndr=r(Z$e," \u2014 "),rQ=n(Z$e,"A",{href:!0});var Sbt=s(rQ);jdr=r(Sbt,"TFElectraForPreTraining"),Sbt.forEach(t),Ddr=r(Z$e," (ELECTRA model)"),Z$e.forEach(t),Gdr=i(le),C4=n(le,"LI",{});var eke=s(C4);Wbe=n(eke,"STRONG",{});var Rbt=s(Wbe);Odr=r(Rbt,"flaubert"),Rbt.forEach(t),Vdr=r(eke," \u2014 "),tQ=n(eke,"A",{href:!0});var Bbt=s(tQ);Xdr=r(Bbt,"TFFlaubertWithLMHeadModel"),Bbt.forEach(t),zdr=r(eke," (FlauBERT model)"),eke.forEach(t),Qdr=i(le),w4=n(le,"LI",{});var oke=s(w4);Hbe=n(oke,"STRONG",{});var Pbt=s(Hbe);Wdr=r(Pbt,"funnel"),Pbt.forEach(t),Hdr=r(oke," \u2014 "),aQ=n(oke,"A",{href:!0});var Ibt=s(aQ);Udr=r(Ibt,"TFFunnelForPreTraining"),Ibt.forEach(t),Jdr=r(oke," (Funnel Transformer model)"),oke.forEach(t),Ydr=i(le),A4=n(le,"LI",{});var rke=s(A4);Ube=n(rke,"STRONG",{});var qbt=s(Ube);Kdr=r(qbt,"gpt2"),qbt.forEach(t),Zdr=r(rke," \u2014 "),nQ=n(rke,"A",{href:!0});var Nbt=s(nQ);ecr=r(Nbt,"TFGPT2LMHeadModel"),Nbt.forEach(t),ocr=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),rcr=i(le),y4=n(le,"LI",{});var tke=s(y4);Jbe=n(tke,"STRONG",{});var jbt=s(Jbe);tcr=r(jbt,"layoutlm"),jbt.forEach(t),acr=r(tke," \u2014 "),sQ=n(tke,"A",{href:!0});var Dbt=s(sQ);ncr=r(Dbt,"TFLayoutLMForMaskedLM"),Dbt.forEach(t),scr=r(tke," (LayoutLM model)"),tke.forEach(t),lcr=i(le),L4=n(le,"LI",{});var ake=s(L4);Ybe=n(ake,"STRONG",{});var Gbt=s(Ybe);icr=r(Gbt,"lxmert"),Gbt.forEach(t),dcr=r(ake," \u2014 "),lQ=n(ake,"A",{href:!0});var Obt=s(lQ);ccr=r(Obt,"TFLxmertForPreTraining"),Obt.forEach(t),mcr=r(ake," (LXMERT model)"),ake.forEach(t),fcr=i(le),x4=n(le,"LI",{});var nke=s(x4);Kbe=n(nke,"STRONG",{});var Vbt=s(Kbe);gcr=r(Vbt,"mobilebert"),Vbt.forEach(t),hcr=r(nke," \u2014 "),iQ=n(nke,"A",{href:!0});var Xbt=s(iQ);ucr=r(Xbt,"TFMobileBertForPreTraining"),Xbt.forEach(t),pcr=r(nke," (MobileBERT model)"),nke.forEach(t),_cr=i(le),$4=n(le,"LI",{});var ske=s($4);Zbe=n(ske,"STRONG",{});var zbt=s(Zbe);bcr=r(zbt,"mpnet"),zbt.forEach(t),Fcr=r(ske," \u2014 "),dQ=n(ske,"A",{href:!0});var Qbt=s(dQ);vcr=r(Qbt,"TFMPNetForMaskedLM"),Qbt.forEach(t),Tcr=r(ske," (MPNet model)"),ske.forEach(t),Mcr=i(le),k4=n(le,"LI",{});var lke=s(k4);e2e=n(lke,"STRONG",{});var Wbt=s(e2e);Ecr=r(Wbt,"openai-gpt"),Wbt.forEach(t),Ccr=r(lke," \u2014 "),cQ=n(lke,"A",{href:!0});var Hbt=s(cQ);wcr=r(Hbt,"TFOpenAIGPTLMHeadModel"),Hbt.forEach(t),Acr=r(lke," (OpenAI GPT model)"),lke.forEach(t),ycr=i(le),S4=n(le,"LI",{});var ike=s(S4);o2e=n(ike,"STRONG",{});var Ubt=s(o2e);Lcr=r(Ubt,"roberta"),Ubt.forEach(t),xcr=r(ike," \u2014 "),mQ=n(ike,"A",{href:!0});var Jbt=s(mQ);$cr=r(Jbt,"TFRobertaForMaskedLM"),Jbt.forEach(t),kcr=r(ike," (RoBERTa model)"),ike.forEach(t),Scr=i(le),R4=n(le,"LI",{});var dke=s(R4);r2e=n(dke,"STRONG",{});var Ybt=s(r2e);Rcr=r(Ybt,"t5"),Ybt.forEach(t),Bcr=r(dke," \u2014 "),fQ=n(dke,"A",{href:!0});var Kbt=s(fQ);Pcr=r(Kbt,"TFT5ForConditionalGeneration"),Kbt.forEach(t),Icr=r(dke," (T5 model)"),dke.forEach(t),qcr=i(le),B4=n(le,"LI",{});var cke=s(B4);t2e=n(cke,"STRONG",{});var Zbt=s(t2e);Ncr=r(Zbt,"tapas"),Zbt.forEach(t),jcr=r(cke," \u2014 "),gQ=n(cke,"A",{href:!0});var e2t=s(gQ);Dcr=r(e2t,"TFTapasForMaskedLM"),e2t.forEach(t),Gcr=r(cke," (TAPAS model)"),cke.forEach(t),Ocr=i(le),P4=n(le,"LI",{});var mke=s(P4);a2e=n(mke,"STRONG",{});var o2t=s(a2e);Vcr=r(o2t,"transfo-xl"),o2t.forEach(t),Xcr=r(mke," \u2014 "),hQ=n(mke,"A",{href:!0});var r2t=s(hQ);zcr=r(r2t,"TFTransfoXLLMHeadModel"),r2t.forEach(t),Qcr=r(mke," (Transformer-XL model)"),mke.forEach(t),Wcr=i(le),I4=n(le,"LI",{});var fke=s(I4);n2e=n(fke,"STRONG",{});var t2t=s(n2e);Hcr=r(t2t,"vit_mae"),t2t.forEach(t),Ucr=r(fke," \u2014 "),uQ=n(fke,"A",{href:!0});var a2t=s(uQ);Jcr=r(a2t,"TFViTMAEForPreTraining"),a2t.forEach(t),Ycr=r(fke," (ViTMAE model)"),fke.forEach(t),Kcr=i(le),q4=n(le,"LI",{});var gke=s(q4);s2e=n(gke,"STRONG",{});var n2t=s(s2e);Zcr=r(n2t,"xlm"),n2t.forEach(t),emr=r(gke," \u2014 "),pQ=n(gke,"A",{href:!0});var s2t=s(pQ);omr=r(s2t,"TFXLMWithLMHeadModel"),s2t.forEach(t),rmr=r(gke," (XLM model)"),gke.forEach(t),tmr=i(le),N4=n(le,"LI",{});var hke=s(N4);l2e=n(hke,"STRONG",{});var l2t=s(l2e);amr=r(l2t,"xlm-roberta"),l2t.forEach(t),nmr=r(hke," \u2014 "),_Q=n(hke,"A",{href:!0});var i2t=s(_Q);smr=r(i2t,"TFXLMRobertaForMaskedLM"),i2t.forEach(t),lmr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),imr=i(le),j4=n(le,"LI",{});var uke=s(j4);i2e=n(uke,"STRONG",{});var d2t=s(i2e);dmr=r(d2t,"xlnet"),d2t.forEach(t),cmr=r(uke," \u2014 "),bQ=n(uke,"A",{href:!0});var c2t=s(bQ);mmr=r(c2t,"TFXLNetLMHeadModel"),c2t.forEach(t),fmr=r(uke," (XLNet model)"),uke.forEach(t),le.forEach(t),gmr=i(gl),T(D4.$$.fragment,gl),gl.forEach(t),fl.forEach(t),HIe=i(m),Xd=n(m,"H2",{class:!0});var eje=s(Xd);G4=n(eje,"A",{id:!0,class:!0,href:!0});var m2t=s(G4);d2e=n(m2t,"SPAN",{});var f2t=s(d2e);T(O8.$$.fragment,f2t),f2t.forEach(t),m2t.forEach(t),hmr=i(eje),c2e=n(eje,"SPAN",{});var g2t=s(c2e);umr=r(g2t,"TFAutoModelForCausalLM"),g2t.forEach(t),eje.forEach(t),UIe=i(m),Zo=n(m,"DIV",{class:!0});var hl=s(Zo);T(V8.$$.fragment,hl),pmr=i(hl),zd=n(hl,"P",{});var aZ=s(zd);_mr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FQ=n(aZ,"A",{href:!0});var h2t=s(FQ);bmr=r(h2t,"from_pretrained()"),h2t.forEach(t),Fmr=r(aZ," class method or the "),vQ=n(aZ,"A",{href:!0});var u2t=s(vQ);vmr=r(u2t,"from_config()"),u2t.forEach(t),Tmr=r(aZ,` class
method.`),aZ.forEach(t),Mmr=i(hl),X8=n(hl,"P",{});var oje=s(X8);Emr=r(oje,"This class cannot be instantiated directly using "),m2e=n(oje,"CODE",{});var p2t=s(m2e);Cmr=r(p2t,"__init__()"),p2t.forEach(t),wmr=r(oje," (throws an error)."),oje.forEach(t),Amr=i(hl),yt=n(hl,"DIV",{class:!0});var K6=s(yt);T(z8.$$.fragment,K6),ymr=i(K6),f2e=n(K6,"P",{});var _2t=s(f2e);Lmr=r(_2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_2t.forEach(t),xmr=i(K6),Qd=n(K6,"P",{});var nZ=s(Qd);$mr=r(nZ,`Note:
Loading a model from its configuration file does `),g2e=n(nZ,"STRONG",{});var b2t=s(g2e);kmr=r(b2t,"not"),b2t.forEach(t),Smr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(nZ,"A",{href:!0});var F2t=s(TQ);Rmr=r(F2t,"from_pretrained()"),F2t.forEach(t),Bmr=r(nZ," to load the model weights."),nZ.forEach(t),Pmr=i(K6),T(O4.$$.fragment,K6),K6.forEach(t),Imr=i(hl),yr=n(hl,"DIV",{class:!0});var ul=s(yr);T(Q8.$$.fragment,ul),qmr=i(ul),h2e=n(ul,"P",{});var v2t=s(h2e);Nmr=r(v2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v2t.forEach(t),jmr=i(ul),en=n(ul,"P",{});var Z6=s(en);Dmr=r(Z6,"The model class to instantiate is selected based on the "),u2e=n(Z6,"CODE",{});var T2t=s(u2e);Gmr=r(T2t,"model_type"),T2t.forEach(t),Omr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),p2e=n(Z6,"CODE",{});var M2t=s(p2e);Vmr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),Xmr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(Z6,"CODE",{});var E2t=s(_2e);zmr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),Qmr=r(Z6,":"),Z6.forEach(t),Wmr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);V4=n(Ce,"LI",{});var pke=s(V4);b2e=n(pke,"STRONG",{});var C2t=s(b2e);Hmr=r(C2t,"bert"),C2t.forEach(t),Umr=r(pke," \u2014 "),MQ=n(pke,"A",{href:!0});var w2t=s(MQ);Jmr=r(w2t,"TFBertLMHeadModel"),w2t.forEach(t),Ymr=r(pke," (BERT model)"),pke.forEach(t),Kmr=i(Ce),X4=n(Ce,"LI",{});var _ke=s(X4);F2e=n(_ke,"STRONG",{});var A2t=s(F2e);Zmr=r(A2t,"camembert"),A2t.forEach(t),efr=r(_ke," \u2014 "),EQ=n(_ke,"A",{href:!0});var y2t=s(EQ);ofr=r(y2t,"TFCamembertForCausalLM"),y2t.forEach(t),rfr=r(_ke," (CamemBERT model)"),_ke.forEach(t),tfr=i(Ce),z4=n(Ce,"LI",{});var bke=s(z4);v2e=n(bke,"STRONG",{});var L2t=s(v2e);afr=r(L2t,"ctrl"),L2t.forEach(t),nfr=r(bke," \u2014 "),CQ=n(bke,"A",{href:!0});var x2t=s(CQ);sfr=r(x2t,"TFCTRLLMHeadModel"),x2t.forEach(t),lfr=r(bke," (CTRL model)"),bke.forEach(t),ifr=i(Ce),Q4=n(Ce,"LI",{});var Fke=s(Q4);T2e=n(Fke,"STRONG",{});var $2t=s(T2e);dfr=r($2t,"gpt2"),$2t.forEach(t),cfr=r(Fke," \u2014 "),wQ=n(Fke,"A",{href:!0});var k2t=s(wQ);mfr=r(k2t,"TFGPT2LMHeadModel"),k2t.forEach(t),ffr=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),gfr=i(Ce),W4=n(Ce,"LI",{});var vke=s(W4);M2e=n(vke,"STRONG",{});var S2t=s(M2e);hfr=r(S2t,"gptj"),S2t.forEach(t),ufr=r(vke," \u2014 "),AQ=n(vke,"A",{href:!0});var R2t=s(AQ);pfr=r(R2t,"TFGPTJForCausalLM"),R2t.forEach(t),_fr=r(vke," (GPT-J model)"),vke.forEach(t),bfr=i(Ce),H4=n(Ce,"LI",{});var Tke=s(H4);E2e=n(Tke,"STRONG",{});var B2t=s(E2e);Ffr=r(B2t,"openai-gpt"),B2t.forEach(t),vfr=r(Tke," \u2014 "),yQ=n(Tke,"A",{href:!0});var P2t=s(yQ);Tfr=r(P2t,"TFOpenAIGPTLMHeadModel"),P2t.forEach(t),Mfr=r(Tke," (OpenAI GPT model)"),Tke.forEach(t),Efr=i(Ce),U4=n(Ce,"LI",{});var Mke=s(U4);C2e=n(Mke,"STRONG",{});var I2t=s(C2e);Cfr=r(I2t,"rembert"),I2t.forEach(t),wfr=r(Mke," \u2014 "),LQ=n(Mke,"A",{href:!0});var q2t=s(LQ);Afr=r(q2t,"TFRemBertForCausalLM"),q2t.forEach(t),yfr=r(Mke," (RemBERT model)"),Mke.forEach(t),Lfr=i(Ce),J4=n(Ce,"LI",{});var Eke=s(J4);w2e=n(Eke,"STRONG",{});var N2t=s(w2e);xfr=r(N2t,"roberta"),N2t.forEach(t),$fr=r(Eke," \u2014 "),xQ=n(Eke,"A",{href:!0});var j2t=s(xQ);kfr=r(j2t,"TFRobertaForCausalLM"),j2t.forEach(t),Sfr=r(Eke," (RoBERTa model)"),Eke.forEach(t),Rfr=i(Ce),Y4=n(Ce,"LI",{});var Cke=s(Y4);A2e=n(Cke,"STRONG",{});var D2t=s(A2e);Bfr=r(D2t,"roformer"),D2t.forEach(t),Pfr=r(Cke," \u2014 "),$Q=n(Cke,"A",{href:!0});var G2t=s($Q);Ifr=r(G2t,"TFRoFormerForCausalLM"),G2t.forEach(t),qfr=r(Cke," (RoFormer model)"),Cke.forEach(t),Nfr=i(Ce),K4=n(Ce,"LI",{});var wke=s(K4);y2e=n(wke,"STRONG",{});var O2t=s(y2e);jfr=r(O2t,"transfo-xl"),O2t.forEach(t),Dfr=r(wke," \u2014 "),kQ=n(wke,"A",{href:!0});var V2t=s(kQ);Gfr=r(V2t,"TFTransfoXLLMHeadModel"),V2t.forEach(t),Ofr=r(wke," (Transformer-XL model)"),wke.forEach(t),Vfr=i(Ce),Z4=n(Ce,"LI",{});var Ake=s(Z4);L2e=n(Ake,"STRONG",{});var X2t=s(L2e);Xfr=r(X2t,"xlm"),X2t.forEach(t),zfr=r(Ake," \u2014 "),SQ=n(Ake,"A",{href:!0});var z2t=s(SQ);Qfr=r(z2t,"TFXLMWithLMHeadModel"),z2t.forEach(t),Wfr=r(Ake," (XLM model)"),Ake.forEach(t),Hfr=i(Ce),eE=n(Ce,"LI",{});var yke=s(eE);x2e=n(yke,"STRONG",{});var Q2t=s(x2e);Ufr=r(Q2t,"xlnet"),Q2t.forEach(t),Jfr=r(yke," \u2014 "),RQ=n(yke,"A",{href:!0});var W2t=s(RQ);Yfr=r(W2t,"TFXLNetLMHeadModel"),W2t.forEach(t),Kfr=r(yke," (XLNet model)"),yke.forEach(t),Ce.forEach(t),Zfr=i(ul),T(oE.$$.fragment,ul),ul.forEach(t),hl.forEach(t),JIe=i(m),Wd=n(m,"H2",{class:!0});var rje=s(Wd);rE=n(rje,"A",{id:!0,class:!0,href:!0});var H2t=s(rE);$2e=n(H2t,"SPAN",{});var U2t=s($2e);T(W8.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),egr=i(rje),k2e=n(rje,"SPAN",{});var J2t=s(k2e);ogr=r(J2t,"TFAutoModelForImageClassification"),J2t.forEach(t),rje.forEach(t),YIe=i(m),er=n(m,"DIV",{class:!0});var pl=s(er);T(H8.$$.fragment,pl),rgr=i(pl),Hd=n(pl,"P",{});var sZ=s(Hd);tgr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=n(sZ,"A",{href:!0});var Y2t=s(BQ);agr=r(Y2t,"from_pretrained()"),Y2t.forEach(t),ngr=r(sZ," class method or the "),PQ=n(sZ,"A",{href:!0});var K2t=s(PQ);sgr=r(K2t,"from_config()"),K2t.forEach(t),lgr=r(sZ,` class
method.`),sZ.forEach(t),igr=i(pl),U8=n(pl,"P",{});var tje=s(U8);dgr=r(tje,"This class cannot be instantiated directly using "),S2e=n(tje,"CODE",{});var Z2t=s(S2e);cgr=r(Z2t,"__init__()"),Z2t.forEach(t),mgr=r(tje," (throws an error)."),tje.forEach(t),fgr=i(pl),Lt=n(pl,"DIV",{class:!0});var e0=s(Lt);T(J8.$$.fragment,e0),ggr=i(e0),R2e=n(e0,"P",{});var eFt=s(R2e);hgr=r(eFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eFt.forEach(t),ugr=i(e0),Ud=n(e0,"P",{});var lZ=s(Ud);pgr=r(lZ,`Note:
Loading a model from its configuration file does `),B2e=n(lZ,"STRONG",{});var oFt=s(B2e);_gr=r(oFt,"not"),oFt.forEach(t),bgr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(lZ,"A",{href:!0});var rFt=s(IQ);Fgr=r(rFt,"from_pretrained()"),rFt.forEach(t),vgr=r(lZ," to load the model weights."),lZ.forEach(t),Tgr=i(e0),T(tE.$$.fragment,e0),e0.forEach(t),Mgr=i(pl),Lr=n(pl,"DIV",{class:!0});var _l=s(Lr);T(Y8.$$.fragment,_l),Egr=i(_l),P2e=n(_l,"P",{});var tFt=s(P2e);Cgr=r(tFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tFt.forEach(t),wgr=i(_l),on=n(_l,"P",{});var o0=s(on);Agr=r(o0,"The model class to instantiate is selected based on the "),I2e=n(o0,"CODE",{});var aFt=s(I2e);ygr=r(aFt,"model_type"),aFt.forEach(t),Lgr=r(o0,` property of the config object (either
passed as an argument or loaded from `),q2e=n(o0,"CODE",{});var nFt=s(q2e);xgr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),$gr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(o0,"CODE",{});var sFt=s(N2e);kgr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),Sgr=r(o0,":"),o0.forEach(t),Rgr=i(_l),rn=n(_l,"UL",{});var r0=s(rn);aE=n(r0,"LI",{});var Lke=s(aE);j2e=n(Lke,"STRONG",{});var lFt=s(j2e);Bgr=r(lFt,"convnext"),lFt.forEach(t),Pgr=r(Lke," \u2014 "),qQ=n(Lke,"A",{href:!0});var iFt=s(qQ);Igr=r(iFt,"TFConvNextForImageClassification"),iFt.forEach(t),qgr=r(Lke," (ConvNext model)"),Lke.forEach(t),Ngr=i(r0),nE=n(r0,"LI",{});var xke=s(nE);D2e=n(xke,"STRONG",{});var dFt=s(D2e);jgr=r(dFt,"data2vec-vision"),dFt.forEach(t),Dgr=r(xke," \u2014 "),NQ=n(xke,"A",{href:!0});var cFt=s(NQ);Ggr=r(cFt,"TFData2VecVisionForImageClassification"),cFt.forEach(t),Ogr=r(xke," (Data2VecVision model)"),xke.forEach(t),Vgr=i(r0),sE=n(r0,"LI",{});var $ke=s(sE);G2e=n($ke,"STRONG",{});var mFt=s(G2e);Xgr=r(mFt,"swin"),mFt.forEach(t),zgr=r($ke," \u2014 "),jQ=n($ke,"A",{href:!0});var fFt=s(jQ);Qgr=r(fFt,"TFSwinForImageClassification"),fFt.forEach(t),Wgr=r($ke," (Swin model)"),$ke.forEach(t),Hgr=i(r0),lE=n(r0,"LI",{});var kke=s(lE);O2e=n(kke,"STRONG",{});var gFt=s(O2e);Ugr=r(gFt,"vit"),gFt.forEach(t),Jgr=r(kke," \u2014 "),DQ=n(kke,"A",{href:!0});var hFt=s(DQ);Ygr=r(hFt,"TFViTForImageClassification"),hFt.forEach(t),Kgr=r(kke," (ViT model)"),kke.forEach(t),r0.forEach(t),Zgr=i(_l),T(iE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),KIe=i(m),Jd=n(m,"H2",{class:!0});var aje=s(Jd);dE=n(aje,"A",{id:!0,class:!0,href:!0});var uFt=s(dE);V2e=n(uFt,"SPAN",{});var pFt=s(V2e);T(K8.$$.fragment,pFt),pFt.forEach(t),uFt.forEach(t),ehr=i(aje),X2e=n(aje,"SPAN",{});var _Ft=s(X2e);ohr=r(_Ft,"TFAutoModelForMaskedLM"),_Ft.forEach(t),aje.forEach(t),ZIe=i(m),or=n(m,"DIV",{class:!0});var bl=s(or);T(Z8.$$.fragment,bl),rhr=i(bl),Yd=n(bl,"P",{});var iZ=s(Yd);thr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=n(iZ,"A",{href:!0});var bFt=s(GQ);ahr=r(bFt,"from_pretrained()"),bFt.forEach(t),nhr=r(iZ," class method or the "),OQ=n(iZ,"A",{href:!0});var FFt=s(OQ);shr=r(FFt,"from_config()"),FFt.forEach(t),lhr=r(iZ,` class
method.`),iZ.forEach(t),ihr=i(bl),ex=n(bl,"P",{});var nje=s(ex);dhr=r(nje,"This class cannot be instantiated directly using "),z2e=n(nje,"CODE",{});var vFt=s(z2e);chr=r(vFt,"__init__()"),vFt.forEach(t),mhr=r(nje," (throws an error)."),nje.forEach(t),fhr=i(bl),xt=n(bl,"DIV",{class:!0});var t0=s(xt);T(ox.$$.fragment,t0),ghr=i(t0),Q2e=n(t0,"P",{});var TFt=s(Q2e);hhr=r(TFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TFt.forEach(t),uhr=i(t0),Kd=n(t0,"P",{});var dZ=s(Kd);phr=r(dZ,`Note:
Loading a model from its configuration file does `),W2e=n(dZ,"STRONG",{});var MFt=s(W2e);_hr=r(MFt,"not"),MFt.forEach(t),bhr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(dZ,"A",{href:!0});var EFt=s(VQ);Fhr=r(EFt,"from_pretrained()"),EFt.forEach(t),vhr=r(dZ," to load the model weights."),dZ.forEach(t),Thr=i(t0),T(cE.$$.fragment,t0),t0.forEach(t),Mhr=i(bl),xr=n(bl,"DIV",{class:!0});var Fl=s(xr);T(rx.$$.fragment,Fl),Ehr=i(Fl),H2e=n(Fl,"P",{});var CFt=s(H2e);Chr=r(CFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CFt.forEach(t),whr=i(Fl),tn=n(Fl,"P",{});var a0=s(tn);Ahr=r(a0,"The model class to instantiate is selected based on the "),U2e=n(a0,"CODE",{});var wFt=s(U2e);yhr=r(wFt,"model_type"),wFt.forEach(t),Lhr=r(a0,` property of the config object (either
passed as an argument or loaded from `),J2e=n(a0,"CODE",{});var AFt=s(J2e);xhr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),$hr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(a0,"CODE",{});var yFt=s(Y2e);khr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),Shr=r(a0,":"),a0.forEach(t),Rhr=i(Fl),ie=n(Fl,"UL",{});var me=s(ie);mE=n(me,"LI",{});var Ske=s(mE);K2e=n(Ske,"STRONG",{});var LFt=s(K2e);Bhr=r(LFt,"albert"),LFt.forEach(t),Phr=r(Ske," \u2014 "),XQ=n(Ske,"A",{href:!0});var xFt=s(XQ);Ihr=r(xFt,"TFAlbertForMaskedLM"),xFt.forEach(t),qhr=r(Ske," (ALBERT model)"),Ske.forEach(t),Nhr=i(me),fE=n(me,"LI",{});var Rke=s(fE);Z2e=n(Rke,"STRONG",{});var $Ft=s(Z2e);jhr=r($Ft,"bert"),$Ft.forEach(t),Dhr=r(Rke," \u2014 "),zQ=n(Rke,"A",{href:!0});var kFt=s(zQ);Ghr=r(kFt,"TFBertForMaskedLM"),kFt.forEach(t),Ohr=r(Rke," (BERT model)"),Rke.forEach(t),Vhr=i(me),gE=n(me,"LI",{});var Bke=s(gE);eFe=n(Bke,"STRONG",{});var SFt=s(eFe);Xhr=r(SFt,"camembert"),SFt.forEach(t),zhr=r(Bke," \u2014 "),QQ=n(Bke,"A",{href:!0});var RFt=s(QQ);Qhr=r(RFt,"TFCamembertForMaskedLM"),RFt.forEach(t),Whr=r(Bke," (CamemBERT model)"),Bke.forEach(t),Hhr=i(me),hE=n(me,"LI",{});var Pke=s(hE);oFe=n(Pke,"STRONG",{});var BFt=s(oFe);Uhr=r(BFt,"convbert"),BFt.forEach(t),Jhr=r(Pke," \u2014 "),WQ=n(Pke,"A",{href:!0});var PFt=s(WQ);Yhr=r(PFt,"TFConvBertForMaskedLM"),PFt.forEach(t),Khr=r(Pke," (ConvBERT model)"),Pke.forEach(t),Zhr=i(me),uE=n(me,"LI",{});var Ike=s(uE);rFe=n(Ike,"STRONG",{});var IFt=s(rFe);eur=r(IFt,"deberta"),IFt.forEach(t),our=r(Ike," \u2014 "),HQ=n(Ike,"A",{href:!0});var qFt=s(HQ);rur=r(qFt,"TFDebertaForMaskedLM"),qFt.forEach(t),tur=r(Ike," (DeBERTa model)"),Ike.forEach(t),aur=i(me),pE=n(me,"LI",{});var qke=s(pE);tFe=n(qke,"STRONG",{});var NFt=s(tFe);nur=r(NFt,"deberta-v2"),NFt.forEach(t),sur=r(qke," \u2014 "),UQ=n(qke,"A",{href:!0});var jFt=s(UQ);lur=r(jFt,"TFDebertaV2ForMaskedLM"),jFt.forEach(t),iur=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),dur=i(me),_E=n(me,"LI",{});var Nke=s(_E);aFe=n(Nke,"STRONG",{});var DFt=s(aFe);cur=r(DFt,"distilbert"),DFt.forEach(t),mur=r(Nke," \u2014 "),JQ=n(Nke,"A",{href:!0});var GFt=s(JQ);fur=r(GFt,"TFDistilBertForMaskedLM"),GFt.forEach(t),gur=r(Nke," (DistilBERT model)"),Nke.forEach(t),hur=i(me),bE=n(me,"LI",{});var jke=s(bE);nFe=n(jke,"STRONG",{});var OFt=s(nFe);uur=r(OFt,"electra"),OFt.forEach(t),pur=r(jke," \u2014 "),YQ=n(jke,"A",{href:!0});var VFt=s(YQ);_ur=r(VFt,"TFElectraForMaskedLM"),VFt.forEach(t),bur=r(jke," (ELECTRA model)"),jke.forEach(t),Fur=i(me),FE=n(me,"LI",{});var Dke=s(FE);sFe=n(Dke,"STRONG",{});var XFt=s(sFe);vur=r(XFt,"flaubert"),XFt.forEach(t),Tur=r(Dke," \u2014 "),KQ=n(Dke,"A",{href:!0});var zFt=s(KQ);Mur=r(zFt,"TFFlaubertWithLMHeadModel"),zFt.forEach(t),Eur=r(Dke," (FlauBERT model)"),Dke.forEach(t),Cur=i(me),vE=n(me,"LI",{});var Gke=s(vE);lFe=n(Gke,"STRONG",{});var QFt=s(lFe);wur=r(QFt,"funnel"),QFt.forEach(t),Aur=r(Gke," \u2014 "),ZQ=n(Gke,"A",{href:!0});var WFt=s(ZQ);yur=r(WFt,"TFFunnelForMaskedLM"),WFt.forEach(t),Lur=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),xur=i(me),TE=n(me,"LI",{});var Oke=s(TE);iFe=n(Oke,"STRONG",{});var HFt=s(iFe);$ur=r(HFt,"layoutlm"),HFt.forEach(t),kur=r(Oke," \u2014 "),eW=n(Oke,"A",{href:!0});var UFt=s(eW);Sur=r(UFt,"TFLayoutLMForMaskedLM"),UFt.forEach(t),Rur=r(Oke," (LayoutLM model)"),Oke.forEach(t),Bur=i(me),ME=n(me,"LI",{});var Vke=s(ME);dFe=n(Vke,"STRONG",{});var JFt=s(dFe);Pur=r(JFt,"longformer"),JFt.forEach(t),Iur=r(Vke," \u2014 "),oW=n(Vke,"A",{href:!0});var YFt=s(oW);qur=r(YFt,"TFLongformerForMaskedLM"),YFt.forEach(t),Nur=r(Vke," (Longformer model)"),Vke.forEach(t),jur=i(me),EE=n(me,"LI",{});var Xke=s(EE);cFe=n(Xke,"STRONG",{});var KFt=s(cFe);Dur=r(KFt,"mobilebert"),KFt.forEach(t),Gur=r(Xke," \u2014 "),rW=n(Xke,"A",{href:!0});var ZFt=s(rW);Our=r(ZFt,"TFMobileBertForMaskedLM"),ZFt.forEach(t),Vur=r(Xke," (MobileBERT model)"),Xke.forEach(t),Xur=i(me),CE=n(me,"LI",{});var zke=s(CE);mFe=n(zke,"STRONG",{});var evt=s(mFe);zur=r(evt,"mpnet"),evt.forEach(t),Qur=r(zke," \u2014 "),tW=n(zke,"A",{href:!0});var ovt=s(tW);Wur=r(ovt,"TFMPNetForMaskedLM"),ovt.forEach(t),Hur=r(zke," (MPNet model)"),zke.forEach(t),Uur=i(me),wE=n(me,"LI",{});var Qke=s(wE);fFe=n(Qke,"STRONG",{});var rvt=s(fFe);Jur=r(rvt,"rembert"),rvt.forEach(t),Yur=r(Qke," \u2014 "),aW=n(Qke,"A",{href:!0});var tvt=s(aW);Kur=r(tvt,"TFRemBertForMaskedLM"),tvt.forEach(t),Zur=r(Qke," (RemBERT model)"),Qke.forEach(t),epr=i(me),AE=n(me,"LI",{});var Wke=s(AE);gFe=n(Wke,"STRONG",{});var avt=s(gFe);opr=r(avt,"roberta"),avt.forEach(t),rpr=r(Wke," \u2014 "),nW=n(Wke,"A",{href:!0});var nvt=s(nW);tpr=r(nvt,"TFRobertaForMaskedLM"),nvt.forEach(t),apr=r(Wke," (RoBERTa model)"),Wke.forEach(t),npr=i(me),yE=n(me,"LI",{});var Hke=s(yE);hFe=n(Hke,"STRONG",{});var svt=s(hFe);spr=r(svt,"roformer"),svt.forEach(t),lpr=r(Hke," \u2014 "),sW=n(Hke,"A",{href:!0});var lvt=s(sW);ipr=r(lvt,"TFRoFormerForMaskedLM"),lvt.forEach(t),dpr=r(Hke," (RoFormer model)"),Hke.forEach(t),cpr=i(me),LE=n(me,"LI",{});var Uke=s(LE);uFe=n(Uke,"STRONG",{});var ivt=s(uFe);mpr=r(ivt,"tapas"),ivt.forEach(t),fpr=r(Uke," \u2014 "),lW=n(Uke,"A",{href:!0});var dvt=s(lW);gpr=r(dvt,"TFTapasForMaskedLM"),dvt.forEach(t),hpr=r(Uke," (TAPAS model)"),Uke.forEach(t),upr=i(me),xE=n(me,"LI",{});var Jke=s(xE);pFe=n(Jke,"STRONG",{});var cvt=s(pFe);ppr=r(cvt,"xlm"),cvt.forEach(t),_pr=r(Jke," \u2014 "),iW=n(Jke,"A",{href:!0});var mvt=s(iW);bpr=r(mvt,"TFXLMWithLMHeadModel"),mvt.forEach(t),Fpr=r(Jke," (XLM model)"),Jke.forEach(t),vpr=i(me),$E=n(me,"LI",{});var Yke=s($E);_Fe=n(Yke,"STRONG",{});var fvt=s(_Fe);Tpr=r(fvt,"xlm-roberta"),fvt.forEach(t),Mpr=r(Yke," \u2014 "),dW=n(Yke,"A",{href:!0});var gvt=s(dW);Epr=r(gvt,"TFXLMRobertaForMaskedLM"),gvt.forEach(t),Cpr=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),me.forEach(t),wpr=i(Fl),T(kE.$$.fragment,Fl),Fl.forEach(t),bl.forEach(t),eqe=i(m),Zd=n(m,"H2",{class:!0});var sje=s(Zd);SE=n(sje,"A",{id:!0,class:!0,href:!0});var hvt=s(SE);bFe=n(hvt,"SPAN",{});var uvt=s(bFe);T(tx.$$.fragment,uvt),uvt.forEach(t),hvt.forEach(t),Apr=i(sje),FFe=n(sje,"SPAN",{});var pvt=s(FFe);ypr=r(pvt,"TFAutoModelForSeq2SeqLM"),pvt.forEach(t),sje.forEach(t),oqe=i(m),rr=n(m,"DIV",{class:!0});var vl=s(rr);T(ax.$$.fragment,vl),Lpr=i(vl),ec=n(vl,"P",{});var cZ=s(ec);xpr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=n(cZ,"A",{href:!0});var _vt=s(cW);$pr=r(_vt,"from_pretrained()"),_vt.forEach(t),kpr=r(cZ," class method or the "),mW=n(cZ,"A",{href:!0});var bvt=s(mW);Spr=r(bvt,"from_config()"),bvt.forEach(t),Rpr=r(cZ,` class
method.`),cZ.forEach(t),Bpr=i(vl),nx=n(vl,"P",{});var lje=s(nx);Ppr=r(lje,"This class cannot be instantiated directly using "),vFe=n(lje,"CODE",{});var Fvt=s(vFe);Ipr=r(Fvt,"__init__()"),Fvt.forEach(t),qpr=r(lje," (throws an error)."),lje.forEach(t),Npr=i(vl),$t=n(vl,"DIV",{class:!0});var n0=s($t);T(sx.$$.fragment,n0),jpr=i(n0),TFe=n(n0,"P",{});var vvt=s(TFe);Dpr=r(vvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vvt.forEach(t),Gpr=i(n0),oc=n(n0,"P",{});var mZ=s(oc);Opr=r(mZ,`Note:
Loading a model from its configuration file does `),MFe=n(mZ,"STRONG",{});var Tvt=s(MFe);Vpr=r(Tvt,"not"),Tvt.forEach(t),Xpr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(mZ,"A",{href:!0});var Mvt=s(fW);zpr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),Qpr=r(mZ," to load the model weights."),mZ.forEach(t),Wpr=i(n0),T(RE.$$.fragment,n0),n0.forEach(t),Hpr=i(vl),$r=n(vl,"DIV",{class:!0});var Tl=s($r);T(lx.$$.fragment,Tl),Upr=i(Tl),EFe=n(Tl,"P",{});var Evt=s(EFe);Jpr=r(Evt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Evt.forEach(t),Ypr=i(Tl),an=n(Tl,"P",{});var s0=s(an);Kpr=r(s0,"The model class to instantiate is selected based on the "),CFe=n(s0,"CODE",{});var Cvt=s(CFe);Zpr=r(Cvt,"model_type"),Cvt.forEach(t),e_r=r(s0,` property of the config object (either
passed as an argument or loaded from `),wFe=n(s0,"CODE",{});var wvt=s(wFe);o_r=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),r_r=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(s0,"CODE",{});var Avt=s(AFe);t_r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),a_r=r(s0,":"),s0.forEach(t),n_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);BE=n(Re,"LI",{});var Kke=s(BE);yFe=n(Kke,"STRONG",{});var yvt=s(yFe);s_r=r(yvt,"bart"),yvt.forEach(t),l_r=r(Kke," \u2014 "),gW=n(Kke,"A",{href:!0});var Lvt=s(gW);i_r=r(Lvt,"TFBartForConditionalGeneration"),Lvt.forEach(t),d_r=r(Kke," (BART model)"),Kke.forEach(t),c_r=i(Re),PE=n(Re,"LI",{});var Zke=s(PE);LFe=n(Zke,"STRONG",{});var xvt=s(LFe);m_r=r(xvt,"blenderbot"),xvt.forEach(t),f_r=r(Zke," \u2014 "),hW=n(Zke,"A",{href:!0});var $vt=s(hW);g_r=r($vt,"TFBlenderbotForConditionalGeneration"),$vt.forEach(t),h_r=r(Zke," (Blenderbot model)"),Zke.forEach(t),u_r=i(Re),IE=n(Re,"LI",{});var eSe=s(IE);xFe=n(eSe,"STRONG",{});var kvt=s(xFe);p_r=r(kvt,"blenderbot-small"),kvt.forEach(t),__r=r(eSe," \u2014 "),uW=n(eSe,"A",{href:!0});var Svt=s(uW);b_r=r(Svt,"TFBlenderbotSmallForConditionalGeneration"),Svt.forEach(t),F_r=r(eSe," (BlenderbotSmall model)"),eSe.forEach(t),v_r=i(Re),qE=n(Re,"LI",{});var oSe=s(qE);$Fe=n(oSe,"STRONG",{});var Rvt=s($Fe);T_r=r(Rvt,"encoder-decoder"),Rvt.forEach(t),M_r=r(oSe," \u2014 "),pW=n(oSe,"A",{href:!0});var Bvt=s(pW);E_r=r(Bvt,"TFEncoderDecoderModel"),Bvt.forEach(t),C_r=r(oSe," (Encoder decoder model)"),oSe.forEach(t),w_r=i(Re),NE=n(Re,"LI",{});var rSe=s(NE);kFe=n(rSe,"STRONG",{});var Pvt=s(kFe);A_r=r(Pvt,"led"),Pvt.forEach(t),y_r=r(rSe," \u2014 "),_W=n(rSe,"A",{href:!0});var Ivt=s(_W);L_r=r(Ivt,"TFLEDForConditionalGeneration"),Ivt.forEach(t),x_r=r(rSe," (LED model)"),rSe.forEach(t),$_r=i(Re),jE=n(Re,"LI",{});var tSe=s(jE);SFe=n(tSe,"STRONG",{});var qvt=s(SFe);k_r=r(qvt,"marian"),qvt.forEach(t),S_r=r(tSe," \u2014 "),bW=n(tSe,"A",{href:!0});var Nvt=s(bW);R_r=r(Nvt,"TFMarianMTModel"),Nvt.forEach(t),B_r=r(tSe," (Marian model)"),tSe.forEach(t),P_r=i(Re),DE=n(Re,"LI",{});var aSe=s(DE);RFe=n(aSe,"STRONG",{});var jvt=s(RFe);I_r=r(jvt,"mbart"),jvt.forEach(t),q_r=r(aSe," \u2014 "),FW=n(aSe,"A",{href:!0});var Dvt=s(FW);N_r=r(Dvt,"TFMBartForConditionalGeneration"),Dvt.forEach(t),j_r=r(aSe," (mBART model)"),aSe.forEach(t),D_r=i(Re),GE=n(Re,"LI",{});var nSe=s(GE);BFe=n(nSe,"STRONG",{});var Gvt=s(BFe);G_r=r(Gvt,"mt5"),Gvt.forEach(t),O_r=r(nSe," \u2014 "),vW=n(nSe,"A",{href:!0});var Ovt=s(vW);V_r=r(Ovt,"TFMT5ForConditionalGeneration"),Ovt.forEach(t),X_r=r(nSe," (mT5 model)"),nSe.forEach(t),z_r=i(Re),OE=n(Re,"LI",{});var sSe=s(OE);PFe=n(sSe,"STRONG",{});var Vvt=s(PFe);Q_r=r(Vvt,"pegasus"),Vvt.forEach(t),W_r=r(sSe," \u2014 "),TW=n(sSe,"A",{href:!0});var Xvt=s(TW);H_r=r(Xvt,"TFPegasusForConditionalGeneration"),Xvt.forEach(t),U_r=r(sSe," (Pegasus model)"),sSe.forEach(t),J_r=i(Re),VE=n(Re,"LI",{});var lSe=s(VE);IFe=n(lSe,"STRONG",{});var zvt=s(IFe);Y_r=r(zvt,"t5"),zvt.forEach(t),K_r=r(lSe," \u2014 "),MW=n(lSe,"A",{href:!0});var Qvt=s(MW);Z_r=r(Qvt,"TFT5ForConditionalGeneration"),Qvt.forEach(t),ebr=r(lSe," (T5 model)"),lSe.forEach(t),Re.forEach(t),obr=i(Tl),T(XE.$$.fragment,Tl),Tl.forEach(t),vl.forEach(t),rqe=i(m),rc=n(m,"H2",{class:!0});var ije=s(rc);zE=n(ije,"A",{id:!0,class:!0,href:!0});var Wvt=s(zE);qFe=n(Wvt,"SPAN",{});var Hvt=s(qFe);T(ix.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),rbr=i(ije),NFe=n(ije,"SPAN",{});var Uvt=s(NFe);tbr=r(Uvt,"TFAutoModelForSequenceClassification"),Uvt.forEach(t),ije.forEach(t),tqe=i(m),tr=n(m,"DIV",{class:!0});var Ml=s(tr);T(dx.$$.fragment,Ml),abr=i(Ml),tc=n(Ml,"P",{});var fZ=s(tc);nbr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=n(fZ,"A",{href:!0});var Jvt=s(EW);sbr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),lbr=r(fZ," class method or the "),CW=n(fZ,"A",{href:!0});var Yvt=s(CW);ibr=r(Yvt,"from_config()"),Yvt.forEach(t),dbr=r(fZ,` class
method.`),fZ.forEach(t),cbr=i(Ml),cx=n(Ml,"P",{});var dje=s(cx);mbr=r(dje,"This class cannot be instantiated directly using "),jFe=n(dje,"CODE",{});var Kvt=s(jFe);fbr=r(Kvt,"__init__()"),Kvt.forEach(t),gbr=r(dje," (throws an error)."),dje.forEach(t),hbr=i(Ml),kt=n(Ml,"DIV",{class:!0});var l0=s(kt);T(mx.$$.fragment,l0),ubr=i(l0),DFe=n(l0,"P",{});var Zvt=s(DFe);pbr=r(Zvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zvt.forEach(t),_br=i(l0),ac=n(l0,"P",{});var gZ=s(ac);bbr=r(gZ,`Note:
Loading a model from its configuration file does `),GFe=n(gZ,"STRONG",{});var e1t=s(GFe);Fbr=r(e1t,"not"),e1t.forEach(t),vbr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(gZ,"A",{href:!0});var o1t=s(wW);Tbr=r(o1t,"from_pretrained()"),o1t.forEach(t),Mbr=r(gZ," to load the model weights."),gZ.forEach(t),Ebr=i(l0),T(QE.$$.fragment,l0),l0.forEach(t),Cbr=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(fx.$$.fragment,El),wbr=i(El),OFe=n(El,"P",{});var r1t=s(OFe);Abr=r(r1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),r1t.forEach(t),ybr=i(El),nn=n(El,"P",{});var i0=s(nn);Lbr=r(i0,"The model class to instantiate is selected based on the "),VFe=n(i0,"CODE",{});var t1t=s(VFe);xbr=r(t1t,"model_type"),t1t.forEach(t),$br=r(i0,` property of the config object (either
passed as an argument or loaded from `),XFe=n(i0,"CODE",{});var a1t=s(XFe);kbr=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),Sbr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(i0,"CODE",{});var n1t=s(zFe);Rbr=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),Bbr=r(i0,":"),i0.forEach(t),Pbr=i(El),Z=n(El,"UL",{});var te=s(Z);WE=n(te,"LI",{});var iSe=s(WE);QFe=n(iSe,"STRONG",{});var s1t=s(QFe);Ibr=r(s1t,"albert"),s1t.forEach(t),qbr=r(iSe," \u2014 "),AW=n(iSe,"A",{href:!0});var l1t=s(AW);Nbr=r(l1t,"TFAlbertForSequenceClassification"),l1t.forEach(t),jbr=r(iSe," (ALBERT model)"),iSe.forEach(t),Dbr=i(te),HE=n(te,"LI",{});var dSe=s(HE);WFe=n(dSe,"STRONG",{});var i1t=s(WFe);Gbr=r(i1t,"bert"),i1t.forEach(t),Obr=r(dSe," \u2014 "),yW=n(dSe,"A",{href:!0});var d1t=s(yW);Vbr=r(d1t,"TFBertForSequenceClassification"),d1t.forEach(t),Xbr=r(dSe," (BERT model)"),dSe.forEach(t),zbr=i(te),UE=n(te,"LI",{});var cSe=s(UE);HFe=n(cSe,"STRONG",{});var c1t=s(HFe);Qbr=r(c1t,"camembert"),c1t.forEach(t),Wbr=r(cSe," \u2014 "),LW=n(cSe,"A",{href:!0});var m1t=s(LW);Hbr=r(m1t,"TFCamembertForSequenceClassification"),m1t.forEach(t),Ubr=r(cSe," (CamemBERT model)"),cSe.forEach(t),Jbr=i(te),JE=n(te,"LI",{});var mSe=s(JE);UFe=n(mSe,"STRONG",{});var f1t=s(UFe);Ybr=r(f1t,"convbert"),f1t.forEach(t),Kbr=r(mSe," \u2014 "),xW=n(mSe,"A",{href:!0});var g1t=s(xW);Zbr=r(g1t,"TFConvBertForSequenceClassification"),g1t.forEach(t),e2r=r(mSe," (ConvBERT model)"),mSe.forEach(t),o2r=i(te),YE=n(te,"LI",{});var fSe=s(YE);JFe=n(fSe,"STRONG",{});var h1t=s(JFe);r2r=r(h1t,"ctrl"),h1t.forEach(t),t2r=r(fSe," \u2014 "),$W=n(fSe,"A",{href:!0});var u1t=s($W);a2r=r(u1t,"TFCTRLForSequenceClassification"),u1t.forEach(t),n2r=r(fSe," (CTRL model)"),fSe.forEach(t),s2r=i(te),KE=n(te,"LI",{});var gSe=s(KE);YFe=n(gSe,"STRONG",{});var p1t=s(YFe);l2r=r(p1t,"deberta"),p1t.forEach(t),i2r=r(gSe," \u2014 "),kW=n(gSe,"A",{href:!0});var _1t=s(kW);d2r=r(_1t,"TFDebertaForSequenceClassification"),_1t.forEach(t),c2r=r(gSe," (DeBERTa model)"),gSe.forEach(t),m2r=i(te),ZE=n(te,"LI",{});var hSe=s(ZE);KFe=n(hSe,"STRONG",{});var b1t=s(KFe);f2r=r(b1t,"deberta-v2"),b1t.forEach(t),g2r=r(hSe," \u2014 "),SW=n(hSe,"A",{href:!0});var F1t=s(SW);h2r=r(F1t,"TFDebertaV2ForSequenceClassification"),F1t.forEach(t),u2r=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),p2r=i(te),e5=n(te,"LI",{});var uSe=s(e5);ZFe=n(uSe,"STRONG",{});var v1t=s(ZFe);_2r=r(v1t,"distilbert"),v1t.forEach(t),b2r=r(uSe," \u2014 "),RW=n(uSe,"A",{href:!0});var T1t=s(RW);F2r=r(T1t,"TFDistilBertForSequenceClassification"),T1t.forEach(t),v2r=r(uSe," (DistilBERT model)"),uSe.forEach(t),T2r=i(te),o5=n(te,"LI",{});var pSe=s(o5);eve=n(pSe,"STRONG",{});var M1t=s(eve);M2r=r(M1t,"electra"),M1t.forEach(t),E2r=r(pSe," \u2014 "),BW=n(pSe,"A",{href:!0});var E1t=s(BW);C2r=r(E1t,"TFElectraForSequenceClassification"),E1t.forEach(t),w2r=r(pSe," (ELECTRA model)"),pSe.forEach(t),A2r=i(te),r5=n(te,"LI",{});var _Se=s(r5);ove=n(_Se,"STRONG",{});var C1t=s(ove);y2r=r(C1t,"flaubert"),C1t.forEach(t),L2r=r(_Se," \u2014 "),PW=n(_Se,"A",{href:!0});var w1t=s(PW);x2r=r(w1t,"TFFlaubertForSequenceClassification"),w1t.forEach(t),$2r=r(_Se," (FlauBERT model)"),_Se.forEach(t),k2r=i(te),t5=n(te,"LI",{});var bSe=s(t5);rve=n(bSe,"STRONG",{});var A1t=s(rve);S2r=r(A1t,"funnel"),A1t.forEach(t),R2r=r(bSe," \u2014 "),IW=n(bSe,"A",{href:!0});var y1t=s(IW);B2r=r(y1t,"TFFunnelForSequenceClassification"),y1t.forEach(t),P2r=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),I2r=i(te),a5=n(te,"LI",{});var FSe=s(a5);tve=n(FSe,"STRONG",{});var L1t=s(tve);q2r=r(L1t,"gpt2"),L1t.forEach(t),N2r=r(FSe," \u2014 "),qW=n(FSe,"A",{href:!0});var x1t=s(qW);j2r=r(x1t,"TFGPT2ForSequenceClassification"),x1t.forEach(t),D2r=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),G2r=i(te),n5=n(te,"LI",{});var vSe=s(n5);ave=n(vSe,"STRONG",{});var $1t=s(ave);O2r=r($1t,"gptj"),$1t.forEach(t),V2r=r(vSe," \u2014 "),NW=n(vSe,"A",{href:!0});var k1t=s(NW);X2r=r(k1t,"TFGPTJForSequenceClassification"),k1t.forEach(t),z2r=r(vSe," (GPT-J model)"),vSe.forEach(t),Q2r=i(te),s5=n(te,"LI",{});var TSe=s(s5);nve=n(TSe,"STRONG",{});var S1t=s(nve);W2r=r(S1t,"layoutlm"),S1t.forEach(t),H2r=r(TSe," \u2014 "),jW=n(TSe,"A",{href:!0});var R1t=s(jW);U2r=r(R1t,"TFLayoutLMForSequenceClassification"),R1t.forEach(t),J2r=r(TSe," (LayoutLM model)"),TSe.forEach(t),Y2r=i(te),l5=n(te,"LI",{});var MSe=s(l5);sve=n(MSe,"STRONG",{});var B1t=s(sve);K2r=r(B1t,"longformer"),B1t.forEach(t),Z2r=r(MSe," \u2014 "),DW=n(MSe,"A",{href:!0});var P1t=s(DW);eFr=r(P1t,"TFLongformerForSequenceClassification"),P1t.forEach(t),oFr=r(MSe," (Longformer model)"),MSe.forEach(t),rFr=i(te),i5=n(te,"LI",{});var ESe=s(i5);lve=n(ESe,"STRONG",{});var I1t=s(lve);tFr=r(I1t,"mobilebert"),I1t.forEach(t),aFr=r(ESe," \u2014 "),GW=n(ESe,"A",{href:!0});var q1t=s(GW);nFr=r(q1t,"TFMobileBertForSequenceClassification"),q1t.forEach(t),sFr=r(ESe," (MobileBERT model)"),ESe.forEach(t),lFr=i(te),d5=n(te,"LI",{});var CSe=s(d5);ive=n(CSe,"STRONG",{});var N1t=s(ive);iFr=r(N1t,"mpnet"),N1t.forEach(t),dFr=r(CSe," \u2014 "),OW=n(CSe,"A",{href:!0});var j1t=s(OW);cFr=r(j1t,"TFMPNetForSequenceClassification"),j1t.forEach(t),mFr=r(CSe," (MPNet model)"),CSe.forEach(t),fFr=i(te),c5=n(te,"LI",{});var wSe=s(c5);dve=n(wSe,"STRONG",{});var D1t=s(dve);gFr=r(D1t,"openai-gpt"),D1t.forEach(t),hFr=r(wSe," \u2014 "),VW=n(wSe,"A",{href:!0});var G1t=s(VW);uFr=r(G1t,"TFOpenAIGPTForSequenceClassification"),G1t.forEach(t),pFr=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),_Fr=i(te),m5=n(te,"LI",{});var ASe=s(m5);cve=n(ASe,"STRONG",{});var O1t=s(cve);bFr=r(O1t,"rembert"),O1t.forEach(t),FFr=r(ASe," \u2014 "),XW=n(ASe,"A",{href:!0});var V1t=s(XW);vFr=r(V1t,"TFRemBertForSequenceClassification"),V1t.forEach(t),TFr=r(ASe," (RemBERT model)"),ASe.forEach(t),MFr=i(te),f5=n(te,"LI",{});var ySe=s(f5);mve=n(ySe,"STRONG",{});var X1t=s(mve);EFr=r(X1t,"roberta"),X1t.forEach(t),CFr=r(ySe," \u2014 "),zW=n(ySe,"A",{href:!0});var z1t=s(zW);wFr=r(z1t,"TFRobertaForSequenceClassification"),z1t.forEach(t),AFr=r(ySe," (RoBERTa model)"),ySe.forEach(t),yFr=i(te),g5=n(te,"LI",{});var LSe=s(g5);fve=n(LSe,"STRONG",{});var Q1t=s(fve);LFr=r(Q1t,"roformer"),Q1t.forEach(t),xFr=r(LSe," \u2014 "),QW=n(LSe,"A",{href:!0});var W1t=s(QW);$Fr=r(W1t,"TFRoFormerForSequenceClassification"),W1t.forEach(t),kFr=r(LSe," (RoFormer model)"),LSe.forEach(t),SFr=i(te),h5=n(te,"LI",{});var xSe=s(h5);gve=n(xSe,"STRONG",{});var H1t=s(gve);RFr=r(H1t,"tapas"),H1t.forEach(t),BFr=r(xSe," \u2014 "),WW=n(xSe,"A",{href:!0});var U1t=s(WW);PFr=r(U1t,"TFTapasForSequenceClassification"),U1t.forEach(t),IFr=r(xSe," (TAPAS model)"),xSe.forEach(t),qFr=i(te),u5=n(te,"LI",{});var $Se=s(u5);hve=n($Se,"STRONG",{});var J1t=s(hve);NFr=r(J1t,"transfo-xl"),J1t.forEach(t),jFr=r($Se," \u2014 "),HW=n($Se,"A",{href:!0});var Y1t=s(HW);DFr=r(Y1t,"TFTransfoXLForSequenceClassification"),Y1t.forEach(t),GFr=r($Se," (Transformer-XL model)"),$Se.forEach(t),OFr=i(te),p5=n(te,"LI",{});var kSe=s(p5);uve=n(kSe,"STRONG",{});var K1t=s(uve);VFr=r(K1t,"xlm"),K1t.forEach(t),XFr=r(kSe," \u2014 "),UW=n(kSe,"A",{href:!0});var Z1t=s(UW);zFr=r(Z1t,"TFXLMForSequenceClassification"),Z1t.forEach(t),QFr=r(kSe," (XLM model)"),kSe.forEach(t),WFr=i(te),_5=n(te,"LI",{});var SSe=s(_5);pve=n(SSe,"STRONG",{});var eTt=s(pve);HFr=r(eTt,"xlm-roberta"),eTt.forEach(t),UFr=r(SSe," \u2014 "),JW=n(SSe,"A",{href:!0});var oTt=s(JW);JFr=r(oTt,"TFXLMRobertaForSequenceClassification"),oTt.forEach(t),YFr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),KFr=i(te),b5=n(te,"LI",{});var RSe=s(b5);_ve=n(RSe,"STRONG",{});var rTt=s(_ve);ZFr=r(rTt,"xlnet"),rTt.forEach(t),evr=r(RSe," \u2014 "),YW=n(RSe,"A",{href:!0});var tTt=s(YW);ovr=r(tTt,"TFXLNetForSequenceClassification"),tTt.forEach(t),rvr=r(RSe," (XLNet model)"),RSe.forEach(t),te.forEach(t),tvr=i(El),T(F5.$$.fragment,El),El.forEach(t),Ml.forEach(t),aqe=i(m),nc=n(m,"H2",{class:!0});var cje=s(nc);v5=n(cje,"A",{id:!0,class:!0,href:!0});var aTt=s(v5);bve=n(aTt,"SPAN",{});var nTt=s(bve);T(gx.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),avr=i(cje),Fve=n(cje,"SPAN",{});var sTt=s(Fve);nvr=r(sTt,"TFAutoModelForMultipleChoice"),sTt.forEach(t),cje.forEach(t),nqe=i(m),ar=n(m,"DIV",{class:!0});var Cl=s(ar);T(hx.$$.fragment,Cl),svr=i(Cl),sc=n(Cl,"P",{});var hZ=s(sc);lvr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=n(hZ,"A",{href:!0});var lTt=s(KW);ivr=r(lTt,"from_pretrained()"),lTt.forEach(t),dvr=r(hZ," class method or the "),ZW=n(hZ,"A",{href:!0});var iTt=s(ZW);cvr=r(iTt,"from_config()"),iTt.forEach(t),mvr=r(hZ,` class
method.`),hZ.forEach(t),fvr=i(Cl),ux=n(Cl,"P",{});var mje=s(ux);gvr=r(mje,"This class cannot be instantiated directly using "),vve=n(mje,"CODE",{});var dTt=s(vve);hvr=r(dTt,"__init__()"),dTt.forEach(t),uvr=r(mje," (throws an error)."),mje.forEach(t),pvr=i(Cl),St=n(Cl,"DIV",{class:!0});var d0=s(St);T(px.$$.fragment,d0),_vr=i(d0),Tve=n(d0,"P",{});var cTt=s(Tve);bvr=r(cTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cTt.forEach(t),Fvr=i(d0),lc=n(d0,"P",{});var uZ=s(lc);vvr=r(uZ,`Note:
Loading a model from its configuration file does `),Mve=n(uZ,"STRONG",{});var mTt=s(Mve);Tvr=r(mTt,"not"),mTt.forEach(t),Mvr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(uZ,"A",{href:!0});var fTt=s(eH);Evr=r(fTt,"from_pretrained()"),fTt.forEach(t),Cvr=r(uZ," to load the model weights."),uZ.forEach(t),wvr=i(d0),T(T5.$$.fragment,d0),d0.forEach(t),Avr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(_x.$$.fragment,wl),yvr=i(wl),Eve=n(wl,"P",{});var gTt=s(Eve);Lvr=r(gTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gTt.forEach(t),xvr=i(wl),sn=n(wl,"P",{});var c0=s(sn);$vr=r(c0,"The model class to instantiate is selected based on the "),Cve=n(c0,"CODE",{});var hTt=s(Cve);kvr=r(hTt,"model_type"),hTt.forEach(t),Svr=r(c0,` property of the config object (either
passed as an argument or loaded from `),wve=n(c0,"CODE",{});var uTt=s(wve);Rvr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Bvr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(c0,"CODE",{});var pTt=s(Ave);Pvr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),Ivr=r(c0,":"),c0.forEach(t),qvr=i(wl),he=n(wl,"UL",{});var pe=s(he);M5=n(pe,"LI",{});var BSe=s(M5);yve=n(BSe,"STRONG",{});var _Tt=s(yve);Nvr=r(_Tt,"albert"),_Tt.forEach(t),jvr=r(BSe," \u2014 "),oH=n(BSe,"A",{href:!0});var bTt=s(oH);Dvr=r(bTt,"TFAlbertForMultipleChoice"),bTt.forEach(t),Gvr=r(BSe," (ALBERT model)"),BSe.forEach(t),Ovr=i(pe),E5=n(pe,"LI",{});var PSe=s(E5);Lve=n(PSe,"STRONG",{});var FTt=s(Lve);Vvr=r(FTt,"bert"),FTt.forEach(t),Xvr=r(PSe," \u2014 "),rH=n(PSe,"A",{href:!0});var vTt=s(rH);zvr=r(vTt,"TFBertForMultipleChoice"),vTt.forEach(t),Qvr=r(PSe," (BERT model)"),PSe.forEach(t),Wvr=i(pe),C5=n(pe,"LI",{});var ISe=s(C5);xve=n(ISe,"STRONG",{});var TTt=s(xve);Hvr=r(TTt,"camembert"),TTt.forEach(t),Uvr=r(ISe," \u2014 "),tH=n(ISe,"A",{href:!0});var MTt=s(tH);Jvr=r(MTt,"TFCamembertForMultipleChoice"),MTt.forEach(t),Yvr=r(ISe," (CamemBERT model)"),ISe.forEach(t),Kvr=i(pe),w5=n(pe,"LI",{});var qSe=s(w5);$ve=n(qSe,"STRONG",{});var ETt=s($ve);Zvr=r(ETt,"convbert"),ETt.forEach(t),e1r=r(qSe," \u2014 "),aH=n(qSe,"A",{href:!0});var CTt=s(aH);o1r=r(CTt,"TFConvBertForMultipleChoice"),CTt.forEach(t),r1r=r(qSe," (ConvBERT model)"),qSe.forEach(t),t1r=i(pe),A5=n(pe,"LI",{});var NSe=s(A5);kve=n(NSe,"STRONG",{});var wTt=s(kve);a1r=r(wTt,"distilbert"),wTt.forEach(t),n1r=r(NSe," \u2014 "),nH=n(NSe,"A",{href:!0});var ATt=s(nH);s1r=r(ATt,"TFDistilBertForMultipleChoice"),ATt.forEach(t),l1r=r(NSe," (DistilBERT model)"),NSe.forEach(t),i1r=i(pe),y5=n(pe,"LI",{});var jSe=s(y5);Sve=n(jSe,"STRONG",{});var yTt=s(Sve);d1r=r(yTt,"electra"),yTt.forEach(t),c1r=r(jSe," \u2014 "),sH=n(jSe,"A",{href:!0});var LTt=s(sH);m1r=r(LTt,"TFElectraForMultipleChoice"),LTt.forEach(t),f1r=r(jSe," (ELECTRA model)"),jSe.forEach(t),g1r=i(pe),L5=n(pe,"LI",{});var DSe=s(L5);Rve=n(DSe,"STRONG",{});var xTt=s(Rve);h1r=r(xTt,"flaubert"),xTt.forEach(t),u1r=r(DSe," \u2014 "),lH=n(DSe,"A",{href:!0});var $Tt=s(lH);p1r=r($Tt,"TFFlaubertForMultipleChoice"),$Tt.forEach(t),_1r=r(DSe," (FlauBERT model)"),DSe.forEach(t),b1r=i(pe),x5=n(pe,"LI",{});var GSe=s(x5);Bve=n(GSe,"STRONG",{});var kTt=s(Bve);F1r=r(kTt,"funnel"),kTt.forEach(t),v1r=r(GSe," \u2014 "),iH=n(GSe,"A",{href:!0});var STt=s(iH);T1r=r(STt,"TFFunnelForMultipleChoice"),STt.forEach(t),M1r=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),E1r=i(pe),$5=n(pe,"LI",{});var OSe=s($5);Pve=n(OSe,"STRONG",{});var RTt=s(Pve);C1r=r(RTt,"longformer"),RTt.forEach(t),w1r=r(OSe," \u2014 "),dH=n(OSe,"A",{href:!0});var BTt=s(dH);A1r=r(BTt,"TFLongformerForMultipleChoice"),BTt.forEach(t),y1r=r(OSe," (Longformer model)"),OSe.forEach(t),L1r=i(pe),k5=n(pe,"LI",{});var VSe=s(k5);Ive=n(VSe,"STRONG",{});var PTt=s(Ive);x1r=r(PTt,"mobilebert"),PTt.forEach(t),$1r=r(VSe," \u2014 "),cH=n(VSe,"A",{href:!0});var ITt=s(cH);k1r=r(ITt,"TFMobileBertForMultipleChoice"),ITt.forEach(t),S1r=r(VSe," (MobileBERT model)"),VSe.forEach(t),R1r=i(pe),S5=n(pe,"LI",{});var XSe=s(S5);qve=n(XSe,"STRONG",{});var qTt=s(qve);B1r=r(qTt,"mpnet"),qTt.forEach(t),P1r=r(XSe," \u2014 "),mH=n(XSe,"A",{href:!0});var NTt=s(mH);I1r=r(NTt,"TFMPNetForMultipleChoice"),NTt.forEach(t),q1r=r(XSe," (MPNet model)"),XSe.forEach(t),N1r=i(pe),R5=n(pe,"LI",{});var zSe=s(R5);Nve=n(zSe,"STRONG",{});var jTt=s(Nve);j1r=r(jTt,"rembert"),jTt.forEach(t),D1r=r(zSe," \u2014 "),fH=n(zSe,"A",{href:!0});var DTt=s(fH);G1r=r(DTt,"TFRemBertForMultipleChoice"),DTt.forEach(t),O1r=r(zSe," (RemBERT model)"),zSe.forEach(t),V1r=i(pe),B5=n(pe,"LI",{});var QSe=s(B5);jve=n(QSe,"STRONG",{});var GTt=s(jve);X1r=r(GTt,"roberta"),GTt.forEach(t),z1r=r(QSe," \u2014 "),gH=n(QSe,"A",{href:!0});var OTt=s(gH);Q1r=r(OTt,"TFRobertaForMultipleChoice"),OTt.forEach(t),W1r=r(QSe," (RoBERTa model)"),QSe.forEach(t),H1r=i(pe),P5=n(pe,"LI",{});var WSe=s(P5);Dve=n(WSe,"STRONG",{});var VTt=s(Dve);U1r=r(VTt,"roformer"),VTt.forEach(t),J1r=r(WSe," \u2014 "),hH=n(WSe,"A",{href:!0});var XTt=s(hH);Y1r=r(XTt,"TFRoFormerForMultipleChoice"),XTt.forEach(t),K1r=r(WSe," (RoFormer model)"),WSe.forEach(t),Z1r=i(pe),I5=n(pe,"LI",{});var HSe=s(I5);Gve=n(HSe,"STRONG",{});var zTt=s(Gve);eTr=r(zTt,"xlm"),zTt.forEach(t),oTr=r(HSe," \u2014 "),uH=n(HSe,"A",{href:!0});var QTt=s(uH);rTr=r(QTt,"TFXLMForMultipleChoice"),QTt.forEach(t),tTr=r(HSe," (XLM model)"),HSe.forEach(t),aTr=i(pe),q5=n(pe,"LI",{});var USe=s(q5);Ove=n(USe,"STRONG",{});var WTt=s(Ove);nTr=r(WTt,"xlm-roberta"),WTt.forEach(t),sTr=r(USe," \u2014 "),pH=n(USe,"A",{href:!0});var HTt=s(pH);lTr=r(HTt,"TFXLMRobertaForMultipleChoice"),HTt.forEach(t),iTr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),dTr=i(pe),N5=n(pe,"LI",{});var JSe=s(N5);Vve=n(JSe,"STRONG",{});var UTt=s(Vve);cTr=r(UTt,"xlnet"),UTt.forEach(t),mTr=r(JSe," \u2014 "),_H=n(JSe,"A",{href:!0});var JTt=s(_H);fTr=r(JTt,"TFXLNetForMultipleChoice"),JTt.forEach(t),gTr=r(JSe," (XLNet model)"),JSe.forEach(t),pe.forEach(t),hTr=i(wl),T(j5.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),sqe=i(m),ic=n(m,"H2",{class:!0});var fje=s(ic);D5=n(fje,"A",{id:!0,class:!0,href:!0});var YTt=s(D5);Xve=n(YTt,"SPAN",{});var KTt=s(Xve);T(bx.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),uTr=i(fje),zve=n(fje,"SPAN",{});var ZTt=s(zve);pTr=r(ZTt,"TFAutoModelForNextSentencePrediction"),ZTt.forEach(t),fje.forEach(t),lqe=i(m),nr=n(m,"DIV",{class:!0});var Al=s(nr);T(Fx.$$.fragment,Al),_Tr=i(Al),dc=n(Al,"P",{});var pZ=s(dc);bTr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=n(pZ,"A",{href:!0});var eMt=s(bH);FTr=r(eMt,"from_pretrained()"),eMt.forEach(t),vTr=r(pZ," class method or the "),FH=n(pZ,"A",{href:!0});var oMt=s(FH);TTr=r(oMt,"from_config()"),oMt.forEach(t),MTr=r(pZ,` class
method.`),pZ.forEach(t),ETr=i(Al),vx=n(Al,"P",{});var gje=s(vx);CTr=r(gje,"This class cannot be instantiated directly using "),Qve=n(gje,"CODE",{});var rMt=s(Qve);wTr=r(rMt,"__init__()"),rMt.forEach(t),ATr=r(gje," (throws an error)."),gje.forEach(t),yTr=i(Al),Rt=n(Al,"DIV",{class:!0});var m0=s(Rt);T(Tx.$$.fragment,m0),LTr=i(m0),Wve=n(m0,"P",{});var tMt=s(Wve);xTr=r(tMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tMt.forEach(t),$Tr=i(m0),cc=n(m0,"P",{});var _Z=s(cc);kTr=r(_Z,`Note:
Loading a model from its configuration file does `),Hve=n(_Z,"STRONG",{});var aMt=s(Hve);STr=r(aMt,"not"),aMt.forEach(t),RTr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(_Z,"A",{href:!0});var nMt=s(vH);BTr=r(nMt,"from_pretrained()"),nMt.forEach(t),PTr=r(_Z," to load the model weights."),_Z.forEach(t),ITr=i(m0),T(G5.$$.fragment,m0),m0.forEach(t),qTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(Mx.$$.fragment,yl),NTr=i(yl),Uve=n(yl,"P",{});var sMt=s(Uve);jTr=r(sMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sMt.forEach(t),DTr=i(yl),ln=n(yl,"P",{});var f0=s(ln);GTr=r(f0,"The model class to instantiate is selected based on the "),Jve=n(f0,"CODE",{});var lMt=s(Jve);OTr=r(lMt,"model_type"),lMt.forEach(t),VTr=r(f0,` property of the config object (either
passed as an argument or loaded from `),Yve=n(f0,"CODE",{});var iMt=s(Yve);XTr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),zTr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(f0,"CODE",{});var dMt=s(Kve);QTr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),WTr=r(f0,":"),f0.forEach(t),HTr=i(yl),Ex=n(yl,"UL",{});var hje=s(Ex);O5=n(hje,"LI",{});var YSe=s(O5);Zve=n(YSe,"STRONG",{});var cMt=s(Zve);UTr=r(cMt,"bert"),cMt.forEach(t),JTr=r(YSe," \u2014 "),TH=n(YSe,"A",{href:!0});var mMt=s(TH);YTr=r(mMt,"TFBertForNextSentencePrediction"),mMt.forEach(t),KTr=r(YSe," (BERT model)"),YSe.forEach(t),ZTr=i(hje),V5=n(hje,"LI",{});var KSe=s(V5);e1e=n(KSe,"STRONG",{});var fMt=s(e1e);eMr=r(fMt,"mobilebert"),fMt.forEach(t),oMr=r(KSe," \u2014 "),MH=n(KSe,"A",{href:!0});var gMt=s(MH);rMr=r(gMt,"TFMobileBertForNextSentencePrediction"),gMt.forEach(t),tMr=r(KSe," (MobileBERT model)"),KSe.forEach(t),hje.forEach(t),aMr=i(yl),T(X5.$$.fragment,yl),yl.forEach(t),Al.forEach(t),iqe=i(m),mc=n(m,"H2",{class:!0});var uje=s(mc);z5=n(uje,"A",{id:!0,class:!0,href:!0});var hMt=s(z5);o1e=n(hMt,"SPAN",{});var uMt=s(o1e);T(Cx.$$.fragment,uMt),uMt.forEach(t),hMt.forEach(t),nMr=i(uje),r1e=n(uje,"SPAN",{});var pMt=s(r1e);sMr=r(pMt,"TFAutoModelForTableQuestionAnswering"),pMt.forEach(t),uje.forEach(t),dqe=i(m),sr=n(m,"DIV",{class:!0});var Ll=s(sr);T(wx.$$.fragment,Ll),lMr=i(Ll),fc=n(Ll,"P",{});var bZ=s(fc);iMr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=n(bZ,"A",{href:!0});var _Mt=s(EH);dMr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),cMr=r(bZ," class method or the "),CH=n(bZ,"A",{href:!0});var bMt=s(CH);mMr=r(bMt,"from_config()"),bMt.forEach(t),fMr=r(bZ,` class
method.`),bZ.forEach(t),gMr=i(Ll),Ax=n(Ll,"P",{});var pje=s(Ax);hMr=r(pje,"This class cannot be instantiated directly using "),t1e=n(pje,"CODE",{});var FMt=s(t1e);uMr=r(FMt,"__init__()"),FMt.forEach(t),pMr=r(pje," (throws an error)."),pje.forEach(t),_Mr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var g0=s(Bt);T(yx.$$.fragment,g0),bMr=i(g0),a1e=n(g0,"P",{});var vMt=s(a1e);FMr=r(vMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vMt.forEach(t),vMr=i(g0),gc=n(g0,"P",{});var FZ=s(gc);TMr=r(FZ,`Note:
Loading a model from its configuration file does `),n1e=n(FZ,"STRONG",{});var TMt=s(n1e);MMr=r(TMt,"not"),TMt.forEach(t),EMr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(FZ,"A",{href:!0});var MMt=s(wH);CMr=r(MMt,"from_pretrained()"),MMt.forEach(t),wMr=r(FZ," to load the model weights."),FZ.forEach(t),AMr=i(g0),T(Q5.$$.fragment,g0),g0.forEach(t),yMr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(Lx.$$.fragment,xl),LMr=i(xl),s1e=n(xl,"P",{});var EMt=s(s1e);xMr=r(EMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EMt.forEach(t),$Mr=i(xl),dn=n(xl,"P",{});var h0=s(dn);kMr=r(h0,"The model class to instantiate is selected based on the "),l1e=n(h0,"CODE",{});var CMt=s(l1e);SMr=r(CMt,"model_type"),CMt.forEach(t),RMr=r(h0,` property of the config object (either
passed as an argument or loaded from `),i1e=n(h0,"CODE",{});var wMt=s(i1e);BMr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),PMr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(h0,"CODE",{});var AMt=s(d1e);IMr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),qMr=r(h0,":"),h0.forEach(t),NMr=i(xl),c1e=n(xl,"UL",{});var yMt=s(c1e);W5=n(yMt,"LI",{});var ZSe=s(W5);m1e=n(ZSe,"STRONG",{});var LMt=s(m1e);jMr=r(LMt,"tapas"),LMt.forEach(t),DMr=r(ZSe," \u2014 "),AH=n(ZSe,"A",{href:!0});var xMt=s(AH);GMr=r(xMt,"TFTapasForQuestionAnswering"),xMt.forEach(t),OMr=r(ZSe," (TAPAS model)"),ZSe.forEach(t),yMt.forEach(t),VMr=i(xl),T(H5.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),cqe=i(m),hc=n(m,"H2",{class:!0});var _je=s(hc);U5=n(_je,"A",{id:!0,class:!0,href:!0});var $Mt=s(U5);f1e=n($Mt,"SPAN",{});var kMt=s(f1e);T(xx.$$.fragment,kMt),kMt.forEach(t),$Mt.forEach(t),XMr=i(_je),g1e=n(_je,"SPAN",{});var SMt=s(g1e);zMr=r(SMt,"TFAutoModelForTokenClassification"),SMt.forEach(t),_je.forEach(t),mqe=i(m),lr=n(m,"DIV",{class:!0});var $l=s(lr);T($x.$$.fragment,$l),QMr=i($l),uc=n($l,"P",{});var vZ=s(uc);WMr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(vZ,"A",{href:!0});var RMt=s(yH);HMr=r(RMt,"from_pretrained()"),RMt.forEach(t),UMr=r(vZ," class method or the "),LH=n(vZ,"A",{href:!0});var BMt=s(LH);JMr=r(BMt,"from_config()"),BMt.forEach(t),YMr=r(vZ,` class
method.`),vZ.forEach(t),KMr=i($l),kx=n($l,"P",{});var bje=s(kx);ZMr=r(bje,"This class cannot be instantiated directly using "),h1e=n(bje,"CODE",{});var PMt=s(h1e);e4r=r(PMt,"__init__()"),PMt.forEach(t),o4r=r(bje," (throws an error)."),bje.forEach(t),r4r=i($l),Pt=n($l,"DIV",{class:!0});var u0=s(Pt);T(Sx.$$.fragment,u0),t4r=i(u0),u1e=n(u0,"P",{});var IMt=s(u1e);a4r=r(IMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IMt.forEach(t),n4r=i(u0),pc=n(u0,"P",{});var TZ=s(pc);s4r=r(TZ,`Note:
Loading a model from its configuration file does `),p1e=n(TZ,"STRONG",{});var qMt=s(p1e);l4r=r(qMt,"not"),qMt.forEach(t),i4r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(TZ,"A",{href:!0});var NMt=s(xH);d4r=r(NMt,"from_pretrained()"),NMt.forEach(t),c4r=r(TZ," to load the model weights."),TZ.forEach(t),m4r=i(u0),T(J5.$$.fragment,u0),u0.forEach(t),f4r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(Rx.$$.fragment,kl),g4r=i(kl),_1e=n(kl,"P",{});var jMt=s(_1e);h4r=r(jMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jMt.forEach(t),u4r=i(kl),cn=n(kl,"P",{});var p0=s(cn);p4r=r(p0,"The model class to instantiate is selected based on the "),b1e=n(p0,"CODE",{});var DMt=s(b1e);_4r=r(DMt,"model_type"),DMt.forEach(t),b4r=r(p0,` property of the config object (either
passed as an argument or loaded from `),F1e=n(p0,"CODE",{});var GMt=s(F1e);F4r=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),v4r=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(p0,"CODE",{});var OMt=s(v1e);T4r=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),M4r=r(p0,":"),p0.forEach(t),E4r=i(kl),de=n(kl,"UL",{});var fe=s(de);Y5=n(fe,"LI",{});var eRe=s(Y5);T1e=n(eRe,"STRONG",{});var VMt=s(T1e);C4r=r(VMt,"albert"),VMt.forEach(t),w4r=r(eRe," \u2014 "),$H=n(eRe,"A",{href:!0});var XMt=s($H);A4r=r(XMt,"TFAlbertForTokenClassification"),XMt.forEach(t),y4r=r(eRe," (ALBERT model)"),eRe.forEach(t),L4r=i(fe),K5=n(fe,"LI",{});var oRe=s(K5);M1e=n(oRe,"STRONG",{});var zMt=s(M1e);x4r=r(zMt,"bert"),zMt.forEach(t),$4r=r(oRe," \u2014 "),kH=n(oRe,"A",{href:!0});var QMt=s(kH);k4r=r(QMt,"TFBertForTokenClassification"),QMt.forEach(t),S4r=r(oRe," (BERT model)"),oRe.forEach(t),R4r=i(fe),Z5=n(fe,"LI",{});var rRe=s(Z5);E1e=n(rRe,"STRONG",{});var WMt=s(E1e);B4r=r(WMt,"camembert"),WMt.forEach(t),P4r=r(rRe," \u2014 "),SH=n(rRe,"A",{href:!0});var HMt=s(SH);I4r=r(HMt,"TFCamembertForTokenClassification"),HMt.forEach(t),q4r=r(rRe," (CamemBERT model)"),rRe.forEach(t),N4r=i(fe),eC=n(fe,"LI",{});var tRe=s(eC);C1e=n(tRe,"STRONG",{});var UMt=s(C1e);j4r=r(UMt,"convbert"),UMt.forEach(t),D4r=r(tRe," \u2014 "),RH=n(tRe,"A",{href:!0});var JMt=s(RH);G4r=r(JMt,"TFConvBertForTokenClassification"),JMt.forEach(t),O4r=r(tRe," (ConvBERT model)"),tRe.forEach(t),V4r=i(fe),oC=n(fe,"LI",{});var aRe=s(oC);w1e=n(aRe,"STRONG",{});var YMt=s(w1e);X4r=r(YMt,"deberta"),YMt.forEach(t),z4r=r(aRe," \u2014 "),BH=n(aRe,"A",{href:!0});var KMt=s(BH);Q4r=r(KMt,"TFDebertaForTokenClassification"),KMt.forEach(t),W4r=r(aRe," (DeBERTa model)"),aRe.forEach(t),H4r=i(fe),rC=n(fe,"LI",{});var nRe=s(rC);A1e=n(nRe,"STRONG",{});var ZMt=s(A1e);U4r=r(ZMt,"deberta-v2"),ZMt.forEach(t),J4r=r(nRe," \u2014 "),PH=n(nRe,"A",{href:!0});var e4t=s(PH);Y4r=r(e4t,"TFDebertaV2ForTokenClassification"),e4t.forEach(t),K4r=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),Z4r=i(fe),tC=n(fe,"LI",{});var sRe=s(tC);y1e=n(sRe,"STRONG",{});var o4t=s(y1e);eEr=r(o4t,"distilbert"),o4t.forEach(t),oEr=r(sRe," \u2014 "),IH=n(sRe,"A",{href:!0});var r4t=s(IH);rEr=r(r4t,"TFDistilBertForTokenClassification"),r4t.forEach(t),tEr=r(sRe," (DistilBERT model)"),sRe.forEach(t),aEr=i(fe),aC=n(fe,"LI",{});var lRe=s(aC);L1e=n(lRe,"STRONG",{});var t4t=s(L1e);nEr=r(t4t,"electra"),t4t.forEach(t),sEr=r(lRe," \u2014 "),qH=n(lRe,"A",{href:!0});var a4t=s(qH);lEr=r(a4t,"TFElectraForTokenClassification"),a4t.forEach(t),iEr=r(lRe," (ELECTRA model)"),lRe.forEach(t),dEr=i(fe),nC=n(fe,"LI",{});var iRe=s(nC);x1e=n(iRe,"STRONG",{});var n4t=s(x1e);cEr=r(n4t,"flaubert"),n4t.forEach(t),mEr=r(iRe," \u2014 "),NH=n(iRe,"A",{href:!0});var s4t=s(NH);fEr=r(s4t,"TFFlaubertForTokenClassification"),s4t.forEach(t),gEr=r(iRe," (FlauBERT model)"),iRe.forEach(t),hEr=i(fe),sC=n(fe,"LI",{});var dRe=s(sC);$1e=n(dRe,"STRONG",{});var l4t=s($1e);uEr=r(l4t,"funnel"),l4t.forEach(t),pEr=r(dRe," \u2014 "),jH=n(dRe,"A",{href:!0});var i4t=s(jH);_Er=r(i4t,"TFFunnelForTokenClassification"),i4t.forEach(t),bEr=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),FEr=i(fe),lC=n(fe,"LI",{});var cRe=s(lC);k1e=n(cRe,"STRONG",{});var d4t=s(k1e);vEr=r(d4t,"layoutlm"),d4t.forEach(t),TEr=r(cRe," \u2014 "),DH=n(cRe,"A",{href:!0});var c4t=s(DH);MEr=r(c4t,"TFLayoutLMForTokenClassification"),c4t.forEach(t),EEr=r(cRe," (LayoutLM model)"),cRe.forEach(t),CEr=i(fe),iC=n(fe,"LI",{});var mRe=s(iC);S1e=n(mRe,"STRONG",{});var m4t=s(S1e);wEr=r(m4t,"longformer"),m4t.forEach(t),AEr=r(mRe," \u2014 "),GH=n(mRe,"A",{href:!0});var f4t=s(GH);yEr=r(f4t,"TFLongformerForTokenClassification"),f4t.forEach(t),LEr=r(mRe," (Longformer model)"),mRe.forEach(t),xEr=i(fe),dC=n(fe,"LI",{});var fRe=s(dC);R1e=n(fRe,"STRONG",{});var g4t=s(R1e);$Er=r(g4t,"mobilebert"),g4t.forEach(t),kEr=r(fRe," \u2014 "),OH=n(fRe,"A",{href:!0});var h4t=s(OH);SEr=r(h4t,"TFMobileBertForTokenClassification"),h4t.forEach(t),REr=r(fRe," (MobileBERT model)"),fRe.forEach(t),BEr=i(fe),cC=n(fe,"LI",{});var gRe=s(cC);B1e=n(gRe,"STRONG",{});var u4t=s(B1e);PEr=r(u4t,"mpnet"),u4t.forEach(t),IEr=r(gRe," \u2014 "),VH=n(gRe,"A",{href:!0});var p4t=s(VH);qEr=r(p4t,"TFMPNetForTokenClassification"),p4t.forEach(t),NEr=r(gRe," (MPNet model)"),gRe.forEach(t),jEr=i(fe),mC=n(fe,"LI",{});var hRe=s(mC);P1e=n(hRe,"STRONG",{});var _4t=s(P1e);DEr=r(_4t,"rembert"),_4t.forEach(t),GEr=r(hRe," \u2014 "),XH=n(hRe,"A",{href:!0});var b4t=s(XH);OEr=r(b4t,"TFRemBertForTokenClassification"),b4t.forEach(t),VEr=r(hRe," (RemBERT model)"),hRe.forEach(t),XEr=i(fe),fC=n(fe,"LI",{});var uRe=s(fC);I1e=n(uRe,"STRONG",{});var F4t=s(I1e);zEr=r(F4t,"roberta"),F4t.forEach(t),QEr=r(uRe," \u2014 "),zH=n(uRe,"A",{href:!0});var v4t=s(zH);WEr=r(v4t,"TFRobertaForTokenClassification"),v4t.forEach(t),HEr=r(uRe," (RoBERTa model)"),uRe.forEach(t),UEr=i(fe),gC=n(fe,"LI",{});var pRe=s(gC);q1e=n(pRe,"STRONG",{});var T4t=s(q1e);JEr=r(T4t,"roformer"),T4t.forEach(t),YEr=r(pRe," \u2014 "),QH=n(pRe,"A",{href:!0});var M4t=s(QH);KEr=r(M4t,"TFRoFormerForTokenClassification"),M4t.forEach(t),ZEr=r(pRe," (RoFormer model)"),pRe.forEach(t),e5r=i(fe),hC=n(fe,"LI",{});var _Re=s(hC);N1e=n(_Re,"STRONG",{});var E4t=s(N1e);o5r=r(E4t,"xlm"),E4t.forEach(t),r5r=r(_Re," \u2014 "),WH=n(_Re,"A",{href:!0});var C4t=s(WH);t5r=r(C4t,"TFXLMForTokenClassification"),C4t.forEach(t),a5r=r(_Re," (XLM model)"),_Re.forEach(t),n5r=i(fe),uC=n(fe,"LI",{});var bRe=s(uC);j1e=n(bRe,"STRONG",{});var w4t=s(j1e);s5r=r(w4t,"xlm-roberta"),w4t.forEach(t),l5r=r(bRe," \u2014 "),HH=n(bRe,"A",{href:!0});var A4t=s(HH);i5r=r(A4t,"TFXLMRobertaForTokenClassification"),A4t.forEach(t),d5r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),c5r=i(fe),pC=n(fe,"LI",{});var FRe=s(pC);D1e=n(FRe,"STRONG",{});var y4t=s(D1e);m5r=r(y4t,"xlnet"),y4t.forEach(t),f5r=r(FRe," \u2014 "),UH=n(FRe,"A",{href:!0});var L4t=s(UH);g5r=r(L4t,"TFXLNetForTokenClassification"),L4t.forEach(t),h5r=r(FRe," (XLNet model)"),FRe.forEach(t),fe.forEach(t),u5r=i(kl),T(_C.$$.fragment,kl),kl.forEach(t),$l.forEach(t),fqe=i(m),_c=n(m,"H2",{class:!0});var Fje=s(_c);bC=n(Fje,"A",{id:!0,class:!0,href:!0});var x4t=s(bC);G1e=n(x4t,"SPAN",{});var $4t=s(G1e);T(Bx.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),p5r=i(Fje),O1e=n(Fje,"SPAN",{});var k4t=s(O1e);_5r=r(k4t,"TFAutoModelForQuestionAnswering"),k4t.forEach(t),Fje.forEach(t),gqe=i(m),ir=n(m,"DIV",{class:!0});var Sl=s(ir);T(Px.$$.fragment,Sl),b5r=i(Sl),bc=n(Sl,"P",{});var MZ=s(bc);F5r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=n(MZ,"A",{href:!0});var S4t=s(JH);v5r=r(S4t,"from_pretrained()"),S4t.forEach(t),T5r=r(MZ," class method or the "),YH=n(MZ,"A",{href:!0});var R4t=s(YH);M5r=r(R4t,"from_config()"),R4t.forEach(t),E5r=r(MZ,` class
method.`),MZ.forEach(t),C5r=i(Sl),Ix=n(Sl,"P",{});var vje=s(Ix);w5r=r(vje,"This class cannot be instantiated directly using "),V1e=n(vje,"CODE",{});var B4t=s(V1e);A5r=r(B4t,"__init__()"),B4t.forEach(t),y5r=r(vje," (throws an error)."),vje.forEach(t),L5r=i(Sl),It=n(Sl,"DIV",{class:!0});var _0=s(It);T(qx.$$.fragment,_0),x5r=i(_0),X1e=n(_0,"P",{});var P4t=s(X1e);$5r=r(P4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P4t.forEach(t),k5r=i(_0),Fc=n(_0,"P",{});var EZ=s(Fc);S5r=r(EZ,`Note:
Loading a model from its configuration file does `),z1e=n(EZ,"STRONG",{});var I4t=s(z1e);R5r=r(I4t,"not"),I4t.forEach(t),B5r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(EZ,"A",{href:!0});var q4t=s(KH);P5r=r(q4t,"from_pretrained()"),q4t.forEach(t),I5r=r(EZ," to load the model weights."),EZ.forEach(t),q5r=i(_0),T(FC.$$.fragment,_0),_0.forEach(t),N5r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(Nx.$$.fragment,Rl),j5r=i(Rl),Q1e=n(Rl,"P",{});var N4t=s(Q1e);D5r=r(N4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N4t.forEach(t),G5r=i(Rl),mn=n(Rl,"P",{});var b0=s(mn);O5r=r(b0,"The model class to instantiate is selected based on the "),W1e=n(b0,"CODE",{});var j4t=s(W1e);V5r=r(j4t,"model_type"),j4t.forEach(t),X5r=r(b0,` property of the config object (either
passed as an argument or loaded from `),H1e=n(b0,"CODE",{});var D4t=s(H1e);z5r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),Q5r=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(b0,"CODE",{});var G4t=s(U1e);W5r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),H5r=r(b0,":"),b0.forEach(t),U5r=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);vC=n(ge,"LI",{});var vRe=s(vC);J1e=n(vRe,"STRONG",{});var O4t=s(J1e);J5r=r(O4t,"albert"),O4t.forEach(t),Y5r=r(vRe," \u2014 "),ZH=n(vRe,"A",{href:!0});var V4t=s(ZH);K5r=r(V4t,"TFAlbertForQuestionAnswering"),V4t.forEach(t),Z5r=r(vRe," (ALBERT model)"),vRe.forEach(t),eCr=i(ge),TC=n(ge,"LI",{});var TRe=s(TC);Y1e=n(TRe,"STRONG",{});var X4t=s(Y1e);oCr=r(X4t,"bert"),X4t.forEach(t),rCr=r(TRe," \u2014 "),eU=n(TRe,"A",{href:!0});var z4t=s(eU);tCr=r(z4t,"TFBertForQuestionAnswering"),z4t.forEach(t),aCr=r(TRe," (BERT model)"),TRe.forEach(t),nCr=i(ge),MC=n(ge,"LI",{});var MRe=s(MC);K1e=n(MRe,"STRONG",{});var Q4t=s(K1e);sCr=r(Q4t,"camembert"),Q4t.forEach(t),lCr=r(MRe," \u2014 "),oU=n(MRe,"A",{href:!0});var W4t=s(oU);iCr=r(W4t,"TFCamembertForQuestionAnswering"),W4t.forEach(t),dCr=r(MRe," (CamemBERT model)"),MRe.forEach(t),cCr=i(ge),EC=n(ge,"LI",{});var ERe=s(EC);Z1e=n(ERe,"STRONG",{});var H4t=s(Z1e);mCr=r(H4t,"convbert"),H4t.forEach(t),fCr=r(ERe," \u2014 "),rU=n(ERe,"A",{href:!0});var U4t=s(rU);gCr=r(U4t,"TFConvBertForQuestionAnswering"),U4t.forEach(t),hCr=r(ERe," (ConvBERT model)"),ERe.forEach(t),uCr=i(ge),CC=n(ge,"LI",{});var CRe=s(CC);eTe=n(CRe,"STRONG",{});var J4t=s(eTe);pCr=r(J4t,"deberta"),J4t.forEach(t),_Cr=r(CRe," \u2014 "),tU=n(CRe,"A",{href:!0});var Y4t=s(tU);bCr=r(Y4t,"TFDebertaForQuestionAnswering"),Y4t.forEach(t),FCr=r(CRe," (DeBERTa model)"),CRe.forEach(t),vCr=i(ge),wC=n(ge,"LI",{});var wRe=s(wC);oTe=n(wRe,"STRONG",{});var K4t=s(oTe);TCr=r(K4t,"deberta-v2"),K4t.forEach(t),MCr=r(wRe," \u2014 "),aU=n(wRe,"A",{href:!0});var Z4t=s(aU);ECr=r(Z4t,"TFDebertaV2ForQuestionAnswering"),Z4t.forEach(t),CCr=r(wRe," (DeBERTa-v2 model)"),wRe.forEach(t),wCr=i(ge),AC=n(ge,"LI",{});var ARe=s(AC);rTe=n(ARe,"STRONG",{});var eEt=s(rTe);ACr=r(eEt,"distilbert"),eEt.forEach(t),yCr=r(ARe," \u2014 "),nU=n(ARe,"A",{href:!0});var oEt=s(nU);LCr=r(oEt,"TFDistilBertForQuestionAnswering"),oEt.forEach(t),xCr=r(ARe," (DistilBERT model)"),ARe.forEach(t),$Cr=i(ge),yC=n(ge,"LI",{});var yRe=s(yC);tTe=n(yRe,"STRONG",{});var rEt=s(tTe);kCr=r(rEt,"electra"),rEt.forEach(t),SCr=r(yRe," \u2014 "),sU=n(yRe,"A",{href:!0});var tEt=s(sU);RCr=r(tEt,"TFElectraForQuestionAnswering"),tEt.forEach(t),BCr=r(yRe," (ELECTRA model)"),yRe.forEach(t),PCr=i(ge),LC=n(ge,"LI",{});var LRe=s(LC);aTe=n(LRe,"STRONG",{});var aEt=s(aTe);ICr=r(aEt,"flaubert"),aEt.forEach(t),qCr=r(LRe," \u2014 "),lU=n(LRe,"A",{href:!0});var nEt=s(lU);NCr=r(nEt,"TFFlaubertForQuestionAnsweringSimple"),nEt.forEach(t),jCr=r(LRe," (FlauBERT model)"),LRe.forEach(t),DCr=i(ge),xC=n(ge,"LI",{});var xRe=s(xC);nTe=n(xRe,"STRONG",{});var sEt=s(nTe);GCr=r(sEt,"funnel"),sEt.forEach(t),OCr=r(xRe," \u2014 "),iU=n(xRe,"A",{href:!0});var lEt=s(iU);VCr=r(lEt,"TFFunnelForQuestionAnswering"),lEt.forEach(t),XCr=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),zCr=i(ge),$C=n(ge,"LI",{});var $Re=s($C);sTe=n($Re,"STRONG",{});var iEt=s(sTe);QCr=r(iEt,"gptj"),iEt.forEach(t),WCr=r($Re," \u2014 "),dU=n($Re,"A",{href:!0});var dEt=s(dU);HCr=r(dEt,"TFGPTJForQuestionAnswering"),dEt.forEach(t),UCr=r($Re," (GPT-J model)"),$Re.forEach(t),JCr=i(ge),kC=n(ge,"LI",{});var kRe=s(kC);lTe=n(kRe,"STRONG",{});var cEt=s(lTe);YCr=r(cEt,"longformer"),cEt.forEach(t),KCr=r(kRe," \u2014 "),cU=n(kRe,"A",{href:!0});var mEt=s(cU);ZCr=r(mEt,"TFLongformerForQuestionAnswering"),mEt.forEach(t),e3r=r(kRe," (Longformer model)"),kRe.forEach(t),o3r=i(ge),SC=n(ge,"LI",{});var SRe=s(SC);iTe=n(SRe,"STRONG",{});var fEt=s(iTe);r3r=r(fEt,"mobilebert"),fEt.forEach(t),t3r=r(SRe," \u2014 "),mU=n(SRe,"A",{href:!0});var gEt=s(mU);a3r=r(gEt,"TFMobileBertForQuestionAnswering"),gEt.forEach(t),n3r=r(SRe," (MobileBERT model)"),SRe.forEach(t),s3r=i(ge),RC=n(ge,"LI",{});var RRe=s(RC);dTe=n(RRe,"STRONG",{});var hEt=s(dTe);l3r=r(hEt,"mpnet"),hEt.forEach(t),i3r=r(RRe," \u2014 "),fU=n(RRe,"A",{href:!0});var uEt=s(fU);d3r=r(uEt,"TFMPNetForQuestionAnswering"),uEt.forEach(t),c3r=r(RRe," (MPNet model)"),RRe.forEach(t),m3r=i(ge),BC=n(ge,"LI",{});var BRe=s(BC);cTe=n(BRe,"STRONG",{});var pEt=s(cTe);f3r=r(pEt,"rembert"),pEt.forEach(t),g3r=r(BRe," \u2014 "),gU=n(BRe,"A",{href:!0});var _Et=s(gU);h3r=r(_Et,"TFRemBertForQuestionAnswering"),_Et.forEach(t),u3r=r(BRe," (RemBERT model)"),BRe.forEach(t),p3r=i(ge),PC=n(ge,"LI",{});var PRe=s(PC);mTe=n(PRe,"STRONG",{});var bEt=s(mTe);_3r=r(bEt,"roberta"),bEt.forEach(t),b3r=r(PRe," \u2014 "),hU=n(PRe,"A",{href:!0});var FEt=s(hU);F3r=r(FEt,"TFRobertaForQuestionAnswering"),FEt.forEach(t),v3r=r(PRe," (RoBERTa model)"),PRe.forEach(t),T3r=i(ge),IC=n(ge,"LI",{});var IRe=s(IC);fTe=n(IRe,"STRONG",{});var vEt=s(fTe);M3r=r(vEt,"roformer"),vEt.forEach(t),E3r=r(IRe," \u2014 "),uU=n(IRe,"A",{href:!0});var TEt=s(uU);C3r=r(TEt,"TFRoFormerForQuestionAnswering"),TEt.forEach(t),w3r=r(IRe," (RoFormer model)"),IRe.forEach(t),A3r=i(ge),qC=n(ge,"LI",{});var qRe=s(qC);gTe=n(qRe,"STRONG",{});var MEt=s(gTe);y3r=r(MEt,"xlm"),MEt.forEach(t),L3r=r(qRe," \u2014 "),pU=n(qRe,"A",{href:!0});var EEt=s(pU);x3r=r(EEt,"TFXLMForQuestionAnsweringSimple"),EEt.forEach(t),$3r=r(qRe," (XLM model)"),qRe.forEach(t),k3r=i(ge),NC=n(ge,"LI",{});var NRe=s(NC);hTe=n(NRe,"STRONG",{});var CEt=s(hTe);S3r=r(CEt,"xlm-roberta"),CEt.forEach(t),R3r=r(NRe," \u2014 "),_U=n(NRe,"A",{href:!0});var wEt=s(_U);B3r=r(wEt,"TFXLMRobertaForQuestionAnswering"),wEt.forEach(t),P3r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),I3r=i(ge),jC=n(ge,"LI",{});var jRe=s(jC);uTe=n(jRe,"STRONG",{});var AEt=s(uTe);q3r=r(AEt,"xlnet"),AEt.forEach(t),N3r=r(jRe," \u2014 "),bU=n(jRe,"A",{href:!0});var yEt=s(bU);j3r=r(yEt,"TFXLNetForQuestionAnsweringSimple"),yEt.forEach(t),D3r=r(jRe," (XLNet model)"),jRe.forEach(t),ge.forEach(t),G3r=i(Rl),T(DC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),hqe=i(m),vc=n(m,"H2",{class:!0});var Tje=s(vc);GC=n(Tje,"A",{id:!0,class:!0,href:!0});var LEt=s(GC);pTe=n(LEt,"SPAN",{});var xEt=s(pTe);T(jx.$$.fragment,xEt),xEt.forEach(t),LEt.forEach(t),O3r=i(Tje),_Te=n(Tje,"SPAN",{});var $Et=s(_Te);V3r=r($Et,"TFAutoModelForVision2Seq"),$Et.forEach(t),Tje.forEach(t),uqe=i(m),dr=n(m,"DIV",{class:!0});var Bl=s(dr);T(Dx.$$.fragment,Bl),X3r=i(Bl),Tc=n(Bl,"P",{});var CZ=s(Tc);z3r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FU=n(CZ,"A",{href:!0});var kEt=s(FU);Q3r=r(kEt,"from_pretrained()"),kEt.forEach(t),W3r=r(CZ," class method or the "),vU=n(CZ,"A",{href:!0});var SEt=s(vU);H3r=r(SEt,"from_config()"),SEt.forEach(t),U3r=r(CZ,` class
method.`),CZ.forEach(t),J3r=i(Bl),Gx=n(Bl,"P",{});var Mje=s(Gx);Y3r=r(Mje,"This class cannot be instantiated directly using "),bTe=n(Mje,"CODE",{});var REt=s(bTe);K3r=r(REt,"__init__()"),REt.forEach(t),Z3r=r(Mje," (throws an error)."),Mje.forEach(t),ewr=i(Bl),qt=n(Bl,"DIV",{class:!0});var F0=s(qt);T(Ox.$$.fragment,F0),owr=i(F0),FTe=n(F0,"P",{});var BEt=s(FTe);rwr=r(BEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BEt.forEach(t),twr=i(F0),Mc=n(F0,"P",{});var wZ=s(Mc);awr=r(wZ,`Note:
Loading a model from its configuration file does `),vTe=n(wZ,"STRONG",{});var PEt=s(vTe);nwr=r(PEt,"not"),PEt.forEach(t),swr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(wZ,"A",{href:!0});var IEt=s(TU);lwr=r(IEt,"from_pretrained()"),IEt.forEach(t),iwr=r(wZ," to load the model weights."),wZ.forEach(t),dwr=i(F0),T(OC.$$.fragment,F0),F0.forEach(t),cwr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(Vx.$$.fragment,Pl),mwr=i(Pl),TTe=n(Pl,"P",{});var qEt=s(TTe);fwr=r(qEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qEt.forEach(t),gwr=i(Pl),fn=n(Pl,"P",{});var v0=s(fn);hwr=r(v0,"The model class to instantiate is selected based on the "),MTe=n(v0,"CODE",{});var NEt=s(MTe);uwr=r(NEt,"model_type"),NEt.forEach(t),pwr=r(v0,` property of the config object (either
passed as an argument or loaded from `),ETe=n(v0,"CODE",{});var jEt=s(ETe);_wr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),bwr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(v0,"CODE",{});var DEt=s(CTe);Fwr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),vwr=r(v0,":"),v0.forEach(t),Twr=i(Pl),wTe=n(Pl,"UL",{});var GEt=s(wTe);VC=n(GEt,"LI",{});var DRe=s(VC);ATe=n(DRe,"STRONG",{});var OEt=s(ATe);Mwr=r(OEt,"vision-encoder-decoder"),OEt.forEach(t),Ewr=r(DRe," \u2014 "),MU=n(DRe,"A",{href:!0});var VEt=s(MU);Cwr=r(VEt,"TFVisionEncoderDecoderModel"),VEt.forEach(t),wwr=r(DRe," (Vision Encoder decoder model)"),DRe.forEach(t),GEt.forEach(t),Awr=i(Pl),T(XC.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),pqe=i(m),Ec=n(m,"H2",{class:!0});var Eje=s(Ec);zC=n(Eje,"A",{id:!0,class:!0,href:!0});var XEt=s(zC);yTe=n(XEt,"SPAN",{});var zEt=s(yTe);T(Xx.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),ywr=i(Eje),LTe=n(Eje,"SPAN",{});var QEt=s(LTe);Lwr=r(QEt,"TFAutoModelForSpeechSeq2Seq"),QEt.forEach(t),Eje.forEach(t),_qe=i(m),cr=n(m,"DIV",{class:!0});var Il=s(cr);T(zx.$$.fragment,Il),xwr=i(Il),Cc=n(Il,"P",{});var AZ=s(Cc);$wr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=n(AZ,"A",{href:!0});var WEt=s(EU);kwr=r(WEt,"from_pretrained()"),WEt.forEach(t),Swr=r(AZ," class method or the "),CU=n(AZ,"A",{href:!0});var HEt=s(CU);Rwr=r(HEt,"from_config()"),HEt.forEach(t),Bwr=r(AZ,` class
method.`),AZ.forEach(t),Pwr=i(Il),Qx=n(Il,"P",{});var Cje=s(Qx);Iwr=r(Cje,"This class cannot be instantiated directly using "),xTe=n(Cje,"CODE",{});var UEt=s(xTe);qwr=r(UEt,"__init__()"),UEt.forEach(t),Nwr=r(Cje," (throws an error)."),Cje.forEach(t),jwr=i(Il),Nt=n(Il,"DIV",{class:!0});var T0=s(Nt);T(Wx.$$.fragment,T0),Dwr=i(T0),$Te=n(T0,"P",{});var JEt=s($Te);Gwr=r(JEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JEt.forEach(t),Owr=i(T0),wc=n(T0,"P",{});var yZ=s(wc);Vwr=r(yZ,`Note:
Loading a model from its configuration file does `),kTe=n(yZ,"STRONG",{});var YEt=s(kTe);Xwr=r(YEt,"not"),YEt.forEach(t),zwr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(yZ,"A",{href:!0});var KEt=s(wU);Qwr=r(KEt,"from_pretrained()"),KEt.forEach(t),Wwr=r(yZ," to load the model weights."),yZ.forEach(t),Hwr=i(T0),T(QC.$$.fragment,T0),T0.forEach(t),Uwr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(Hx.$$.fragment,ql),Jwr=i(ql),STe=n(ql,"P",{});var ZEt=s(STe);Ywr=r(ZEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZEt.forEach(t),Kwr=i(ql),gn=n(ql,"P",{});var M0=s(gn);Zwr=r(M0,"The model class to instantiate is selected based on the "),RTe=n(M0,"CODE",{});var e5t=s(RTe);eAr=r(e5t,"model_type"),e5t.forEach(t),oAr=r(M0,` property of the config object (either
passed as an argument or loaded from `),BTe=n(M0,"CODE",{});var o5t=s(BTe);rAr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),tAr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(M0,"CODE",{});var r5t=s(PTe);aAr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),nAr=r(M0,":"),M0.forEach(t),sAr=i(ql),ITe=n(ql,"UL",{});var t5t=s(ITe);WC=n(t5t,"LI",{});var GRe=s(WC);qTe=n(GRe,"STRONG",{});var a5t=s(qTe);lAr=r(a5t,"speech_to_text"),a5t.forEach(t),iAr=r(GRe," \u2014 "),AU=n(GRe,"A",{href:!0});var n5t=s(AU);dAr=r(n5t,"TFSpeech2TextForConditionalGeneration"),n5t.forEach(t),cAr=r(GRe," (Speech2Text model)"),GRe.forEach(t),t5t.forEach(t),mAr=i(ql),T(HC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),bqe=i(m),Ac=n(m,"H2",{class:!0});var wje=s(Ac);UC=n(wje,"A",{id:!0,class:!0,href:!0});var s5t=s(UC);NTe=n(s5t,"SPAN",{});var l5t=s(NTe);T(Ux.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),fAr=i(wje),jTe=n(wje,"SPAN",{});var i5t=s(jTe);gAr=r(i5t,"FlaxAutoModel"),i5t.forEach(t),wje.forEach(t),Fqe=i(m),mr=n(m,"DIV",{class:!0});var Nl=s(mr);T(Jx.$$.fragment,Nl),hAr=i(Nl),yc=n(Nl,"P",{});var LZ=s(yc);uAr=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=n(LZ,"A",{href:!0});var d5t=s(yU);pAr=r(d5t,"from_pretrained()"),d5t.forEach(t),_Ar=r(LZ," class method or the "),LU=n(LZ,"A",{href:!0});var c5t=s(LU);bAr=r(c5t,"from_config()"),c5t.forEach(t),FAr=r(LZ,` class
method.`),LZ.forEach(t),vAr=i(Nl),Yx=n(Nl,"P",{});var Aje=s(Yx);TAr=r(Aje,"This class cannot be instantiated directly using "),DTe=n(Aje,"CODE",{});var m5t=s(DTe);MAr=r(m5t,"__init__()"),m5t.forEach(t),EAr=r(Aje," (throws an error)."),Aje.forEach(t),CAr=i(Nl),jt=n(Nl,"DIV",{class:!0});var E0=s(jt);T(Kx.$$.fragment,E0),wAr=i(E0),GTe=n(E0,"P",{});var f5t=s(GTe);AAr=r(f5t,"Instantiates one of the base model classes of the library from a configuration."),f5t.forEach(t),yAr=i(E0),Lc=n(E0,"P",{});var xZ=s(Lc);LAr=r(xZ,`Note:
Loading a model from its configuration file does `),OTe=n(xZ,"STRONG",{});var g5t=s(OTe);xAr=r(g5t,"not"),g5t.forEach(t),$Ar=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(xZ,"A",{href:!0});var h5t=s(xU);kAr=r(h5t,"from_pretrained()"),h5t.forEach(t),SAr=r(xZ," to load the model weights."),xZ.forEach(t),RAr=i(E0),T(JC.$$.fragment,E0),E0.forEach(t),BAr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(Zx.$$.fragment,jl),PAr=i(jl),VTe=n(jl,"P",{});var u5t=s(VTe);IAr=r(u5t,"Instantiate one of the base model classes of the library from a pretrained model."),u5t.forEach(t),qAr=i(jl),hn=n(jl,"P",{});var C0=s(hn);NAr=r(C0,"The model class to instantiate is selected based on the "),XTe=n(C0,"CODE",{});var p5t=s(XTe);jAr=r(p5t,"model_type"),p5t.forEach(t),DAr=r(C0,` property of the config object (either
passed as an argument or loaded from `),zTe=n(C0,"CODE",{});var _5t=s(zTe);GAr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),OAr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(C0,"CODE",{});var b5t=s(QTe);VAr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),XAr=r(C0,":"),C0.forEach(t),zAr=i(jl),re=n(jl,"UL",{});var ne=s(re);YC=n(ne,"LI",{});var ORe=s(YC);WTe=n(ORe,"STRONG",{});var F5t=s(WTe);QAr=r(F5t,"albert"),F5t.forEach(t),WAr=r(ORe," \u2014 "),$U=n(ORe,"A",{href:!0});var v5t=s($U);HAr=r(v5t,"FlaxAlbertModel"),v5t.forEach(t),UAr=r(ORe," (ALBERT model)"),ORe.forEach(t),JAr=i(ne),KC=n(ne,"LI",{});var VRe=s(KC);HTe=n(VRe,"STRONG",{});var T5t=s(HTe);YAr=r(T5t,"bart"),T5t.forEach(t),KAr=r(VRe," \u2014 "),kU=n(VRe,"A",{href:!0});var M5t=s(kU);ZAr=r(M5t,"FlaxBartModel"),M5t.forEach(t),e6r=r(VRe," (BART model)"),VRe.forEach(t),o6r=i(ne),ZC=n(ne,"LI",{});var XRe=s(ZC);UTe=n(XRe,"STRONG",{});var E5t=s(UTe);r6r=r(E5t,"beit"),E5t.forEach(t),t6r=r(XRe," \u2014 "),SU=n(XRe,"A",{href:!0});var C5t=s(SU);a6r=r(C5t,"FlaxBeitModel"),C5t.forEach(t),n6r=r(XRe," (BEiT model)"),XRe.forEach(t),s6r=i(ne),e3=n(ne,"LI",{});var zRe=s(e3);JTe=n(zRe,"STRONG",{});var w5t=s(JTe);l6r=r(w5t,"bert"),w5t.forEach(t),i6r=r(zRe," \u2014 "),RU=n(zRe,"A",{href:!0});var A5t=s(RU);d6r=r(A5t,"FlaxBertModel"),A5t.forEach(t),c6r=r(zRe," (BERT model)"),zRe.forEach(t),m6r=i(ne),o3=n(ne,"LI",{});var QRe=s(o3);YTe=n(QRe,"STRONG",{});var y5t=s(YTe);f6r=r(y5t,"big_bird"),y5t.forEach(t),g6r=r(QRe," \u2014 "),BU=n(QRe,"A",{href:!0});var L5t=s(BU);h6r=r(L5t,"FlaxBigBirdModel"),L5t.forEach(t),u6r=r(QRe," (BigBird model)"),QRe.forEach(t),p6r=i(ne),r3=n(ne,"LI",{});var WRe=s(r3);KTe=n(WRe,"STRONG",{});var x5t=s(KTe);_6r=r(x5t,"blenderbot"),x5t.forEach(t),b6r=r(WRe," \u2014 "),PU=n(WRe,"A",{href:!0});var $5t=s(PU);F6r=r($5t,"FlaxBlenderbotModel"),$5t.forEach(t),v6r=r(WRe," (Blenderbot model)"),WRe.forEach(t),T6r=i(ne),t3=n(ne,"LI",{});var HRe=s(t3);ZTe=n(HRe,"STRONG",{});var k5t=s(ZTe);M6r=r(k5t,"blenderbot-small"),k5t.forEach(t),E6r=r(HRe," \u2014 "),IU=n(HRe,"A",{href:!0});var S5t=s(IU);C6r=r(S5t,"FlaxBlenderbotSmallModel"),S5t.forEach(t),w6r=r(HRe," (BlenderbotSmall model)"),HRe.forEach(t),A6r=i(ne),a3=n(ne,"LI",{});var URe=s(a3);eMe=n(URe,"STRONG",{});var R5t=s(eMe);y6r=r(R5t,"clip"),R5t.forEach(t),L6r=r(URe," \u2014 "),qU=n(URe,"A",{href:!0});var B5t=s(qU);x6r=r(B5t,"FlaxCLIPModel"),B5t.forEach(t),$6r=r(URe," (CLIP model)"),URe.forEach(t),k6r=i(ne),n3=n(ne,"LI",{});var JRe=s(n3);oMe=n(JRe,"STRONG",{});var P5t=s(oMe);S6r=r(P5t,"distilbert"),P5t.forEach(t),R6r=r(JRe," \u2014 "),NU=n(JRe,"A",{href:!0});var I5t=s(NU);B6r=r(I5t,"FlaxDistilBertModel"),I5t.forEach(t),P6r=r(JRe," (DistilBERT model)"),JRe.forEach(t),I6r=i(ne),s3=n(ne,"LI",{});var YRe=s(s3);rMe=n(YRe,"STRONG",{});var q5t=s(rMe);q6r=r(q5t,"electra"),q5t.forEach(t),N6r=r(YRe," \u2014 "),jU=n(YRe,"A",{href:!0});var N5t=s(jU);j6r=r(N5t,"FlaxElectraModel"),N5t.forEach(t),D6r=r(YRe," (ELECTRA model)"),YRe.forEach(t),G6r=i(ne),l3=n(ne,"LI",{});var KRe=s(l3);tMe=n(KRe,"STRONG",{});var j5t=s(tMe);O6r=r(j5t,"gpt2"),j5t.forEach(t),V6r=r(KRe," \u2014 "),DU=n(KRe,"A",{href:!0});var D5t=s(DU);X6r=r(D5t,"FlaxGPT2Model"),D5t.forEach(t),z6r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),Q6r=i(ne),i3=n(ne,"LI",{});var ZRe=s(i3);aMe=n(ZRe,"STRONG",{});var G5t=s(aMe);W6r=r(G5t,"gpt_neo"),G5t.forEach(t),H6r=r(ZRe," \u2014 "),GU=n(ZRe,"A",{href:!0});var O5t=s(GU);U6r=r(O5t,"FlaxGPTNeoModel"),O5t.forEach(t),J6r=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),Y6r=i(ne),d3=n(ne,"LI",{});var eBe=s(d3);nMe=n(eBe,"STRONG",{});var V5t=s(nMe);K6r=r(V5t,"gptj"),V5t.forEach(t),Z6r=r(eBe," \u2014 "),OU=n(eBe,"A",{href:!0});var X5t=s(OU);e0r=r(X5t,"FlaxGPTJModel"),X5t.forEach(t),o0r=r(eBe," (GPT-J model)"),eBe.forEach(t),r0r=i(ne),c3=n(ne,"LI",{});var oBe=s(c3);sMe=n(oBe,"STRONG",{});var z5t=s(sMe);t0r=r(z5t,"marian"),z5t.forEach(t),a0r=r(oBe," \u2014 "),VU=n(oBe,"A",{href:!0});var Q5t=s(VU);n0r=r(Q5t,"FlaxMarianModel"),Q5t.forEach(t),s0r=r(oBe," (Marian model)"),oBe.forEach(t),l0r=i(ne),m3=n(ne,"LI",{});var rBe=s(m3);lMe=n(rBe,"STRONG",{});var W5t=s(lMe);i0r=r(W5t,"mbart"),W5t.forEach(t),d0r=r(rBe," \u2014 "),XU=n(rBe,"A",{href:!0});var H5t=s(XU);c0r=r(H5t,"FlaxMBartModel"),H5t.forEach(t),m0r=r(rBe," (mBART model)"),rBe.forEach(t),f0r=i(ne),f3=n(ne,"LI",{});var tBe=s(f3);iMe=n(tBe,"STRONG",{});var U5t=s(iMe);g0r=r(U5t,"mt5"),U5t.forEach(t),h0r=r(tBe," \u2014 "),zU=n(tBe,"A",{href:!0});var J5t=s(zU);u0r=r(J5t,"FlaxMT5Model"),J5t.forEach(t),p0r=r(tBe," (mT5 model)"),tBe.forEach(t),_0r=i(ne),g3=n(ne,"LI",{});var aBe=s(g3);dMe=n(aBe,"STRONG",{});var Y5t=s(dMe);b0r=r(Y5t,"pegasus"),Y5t.forEach(t),F0r=r(aBe," \u2014 "),QU=n(aBe,"A",{href:!0});var K5t=s(QU);v0r=r(K5t,"FlaxPegasusModel"),K5t.forEach(t),T0r=r(aBe," (Pegasus model)"),aBe.forEach(t),M0r=i(ne),h3=n(ne,"LI",{});var nBe=s(h3);cMe=n(nBe,"STRONG",{});var Z5t=s(cMe);E0r=r(Z5t,"roberta"),Z5t.forEach(t),C0r=r(nBe," \u2014 "),WU=n(nBe,"A",{href:!0});var eCt=s(WU);w0r=r(eCt,"FlaxRobertaModel"),eCt.forEach(t),A0r=r(nBe," (RoBERTa model)"),nBe.forEach(t),y0r=i(ne),u3=n(ne,"LI",{});var sBe=s(u3);mMe=n(sBe,"STRONG",{});var oCt=s(mMe);L0r=r(oCt,"roformer"),oCt.forEach(t),x0r=r(sBe," \u2014 "),HU=n(sBe,"A",{href:!0});var rCt=s(HU);$0r=r(rCt,"FlaxRoFormerModel"),rCt.forEach(t),k0r=r(sBe," (RoFormer model)"),sBe.forEach(t),S0r=i(ne),p3=n(ne,"LI",{});var lBe=s(p3);fMe=n(lBe,"STRONG",{});var tCt=s(fMe);R0r=r(tCt,"t5"),tCt.forEach(t),B0r=r(lBe," \u2014 "),UU=n(lBe,"A",{href:!0});var aCt=s(UU);P0r=r(aCt,"FlaxT5Model"),aCt.forEach(t),I0r=r(lBe," (T5 model)"),lBe.forEach(t),q0r=i(ne),_3=n(ne,"LI",{});var iBe=s(_3);gMe=n(iBe,"STRONG",{});var nCt=s(gMe);N0r=r(nCt,"vision-text-dual-encoder"),nCt.forEach(t),j0r=r(iBe," \u2014 "),JU=n(iBe,"A",{href:!0});var sCt=s(JU);D0r=r(sCt,"FlaxVisionTextDualEncoderModel"),sCt.forEach(t),G0r=r(iBe," (VisionTextDualEncoder model)"),iBe.forEach(t),O0r=i(ne),b3=n(ne,"LI",{});var dBe=s(b3);hMe=n(dBe,"STRONG",{});var lCt=s(hMe);V0r=r(lCt,"vit"),lCt.forEach(t),X0r=r(dBe," \u2014 "),YU=n(dBe,"A",{href:!0});var iCt=s(YU);z0r=r(iCt,"FlaxViTModel"),iCt.forEach(t),Q0r=r(dBe," (ViT model)"),dBe.forEach(t),W0r=i(ne),F3=n(ne,"LI",{});var cBe=s(F3);uMe=n(cBe,"STRONG",{});var dCt=s(uMe);H0r=r(dCt,"wav2vec2"),dCt.forEach(t),U0r=r(cBe," \u2014 "),KU=n(cBe,"A",{href:!0});var cCt=s(KU);J0r=r(cCt,"FlaxWav2Vec2Model"),cCt.forEach(t),Y0r=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),K0r=i(ne),v3=n(ne,"LI",{});var mBe=s(v3);pMe=n(mBe,"STRONG",{});var mCt=s(pMe);Z0r=r(mCt,"xglm"),mCt.forEach(t),eyr=r(mBe," \u2014 "),ZU=n(mBe,"A",{href:!0});var fCt=s(ZU);oyr=r(fCt,"FlaxXGLMModel"),fCt.forEach(t),ryr=r(mBe," (XGLM model)"),mBe.forEach(t),tyr=i(ne),T3=n(ne,"LI",{});var fBe=s(T3);_Me=n(fBe,"STRONG",{});var gCt=s(_Me);ayr=r(gCt,"xlm-roberta"),gCt.forEach(t),nyr=r(fBe," \u2014 "),eJ=n(fBe,"A",{href:!0});var hCt=s(eJ);syr=r(hCt,"FlaxXLMRobertaModel"),hCt.forEach(t),lyr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),ne.forEach(t),iyr=i(jl),T(M3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),vqe=i(m),xc=n(m,"H2",{class:!0});var yje=s(xc);E3=n(yje,"A",{id:!0,class:!0,href:!0});var uCt=s(E3);bMe=n(uCt,"SPAN",{});var pCt=s(bMe);T(e7.$$.fragment,pCt),pCt.forEach(t),uCt.forEach(t),dyr=i(yje),FMe=n(yje,"SPAN",{});var _Ct=s(FMe);cyr=r(_Ct,"FlaxAutoModelForCausalLM"),_Ct.forEach(t),yje.forEach(t),Tqe=i(m),fr=n(m,"DIV",{class:!0});var Dl=s(fr);T(o7.$$.fragment,Dl),myr=i(Dl),$c=n(Dl,"P",{});var $Z=s($c);fyr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=n($Z,"A",{href:!0});var bCt=s(oJ);gyr=r(bCt,"from_pretrained()"),bCt.forEach(t),hyr=r($Z," class method or the "),rJ=n($Z,"A",{href:!0});var FCt=s(rJ);uyr=r(FCt,"from_config()"),FCt.forEach(t),pyr=r($Z,` class
method.`),$Z.forEach(t),_yr=i(Dl),r7=n(Dl,"P",{});var Lje=s(r7);byr=r(Lje,"This class cannot be instantiated directly using "),vMe=n(Lje,"CODE",{});var vCt=s(vMe);Fyr=r(vCt,"__init__()"),vCt.forEach(t),vyr=r(Lje," (throws an error)."),Lje.forEach(t),Tyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var w0=s(Dt);T(t7.$$.fragment,w0),Myr=i(w0),TMe=n(w0,"P",{});var TCt=s(TMe);Eyr=r(TCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TCt.forEach(t),Cyr=i(w0),kc=n(w0,"P",{});var kZ=s(kc);wyr=r(kZ,`Note:
Loading a model from its configuration file does `),MMe=n(kZ,"STRONG",{});var MCt=s(MMe);Ayr=r(MCt,"not"),MCt.forEach(t),yyr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(kZ,"A",{href:!0});var ECt=s(tJ);Lyr=r(ECt,"from_pretrained()"),ECt.forEach(t),xyr=r(kZ," to load the model weights."),kZ.forEach(t),$yr=i(w0),T(C3.$$.fragment,w0),w0.forEach(t),kyr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(a7.$$.fragment,Gl),Syr=i(Gl),EMe=n(Gl,"P",{});var CCt=s(EMe);Ryr=r(CCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CCt.forEach(t),Byr=i(Gl),un=n(Gl,"P",{});var A0=s(un);Pyr=r(A0,"The model class to instantiate is selected based on the "),CMe=n(A0,"CODE",{});var wCt=s(CMe);Iyr=r(wCt,"model_type"),wCt.forEach(t),qyr=r(A0,` property of the config object (either
passed as an argument or loaded from `),wMe=n(A0,"CODE",{});var ACt=s(wMe);Nyr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),jyr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(A0,"CODE",{});var yCt=s(AMe);Dyr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),Gyr=r(A0,":"),A0.forEach(t),Oyr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);w3=n(Oe,"LI",{});var gBe=s(w3);yMe=n(gBe,"STRONG",{});var LCt=s(yMe);Vyr=r(LCt,"bart"),LCt.forEach(t),Xyr=r(gBe," \u2014 "),aJ=n(gBe,"A",{href:!0});var xCt=s(aJ);zyr=r(xCt,"FlaxBartForCausalLM"),xCt.forEach(t),Qyr=r(gBe," (BART model)"),gBe.forEach(t),Wyr=i(Oe),A3=n(Oe,"LI",{});var hBe=s(A3);LMe=n(hBe,"STRONG",{});var $Ct=s(LMe);Hyr=r($Ct,"bert"),$Ct.forEach(t),Uyr=r(hBe," \u2014 "),nJ=n(hBe,"A",{href:!0});var kCt=s(nJ);Jyr=r(kCt,"FlaxBertForCausalLM"),kCt.forEach(t),Yyr=r(hBe," (BERT model)"),hBe.forEach(t),Kyr=i(Oe),y3=n(Oe,"LI",{});var uBe=s(y3);xMe=n(uBe,"STRONG",{});var SCt=s(xMe);Zyr=r(SCt,"big_bird"),SCt.forEach(t),eLr=r(uBe," \u2014 "),sJ=n(uBe,"A",{href:!0});var RCt=s(sJ);oLr=r(RCt,"FlaxBigBirdForCausalLM"),RCt.forEach(t),rLr=r(uBe," (BigBird model)"),uBe.forEach(t),tLr=i(Oe),L3=n(Oe,"LI",{});var pBe=s(L3);$Me=n(pBe,"STRONG",{});var BCt=s($Me);aLr=r(BCt,"electra"),BCt.forEach(t),nLr=r(pBe," \u2014 "),lJ=n(pBe,"A",{href:!0});var PCt=s(lJ);sLr=r(PCt,"FlaxElectraForCausalLM"),PCt.forEach(t),lLr=r(pBe," (ELECTRA model)"),pBe.forEach(t),iLr=i(Oe),x3=n(Oe,"LI",{});var _Be=s(x3);kMe=n(_Be,"STRONG",{});var ICt=s(kMe);dLr=r(ICt,"gpt2"),ICt.forEach(t),cLr=r(_Be," \u2014 "),iJ=n(_Be,"A",{href:!0});var qCt=s(iJ);mLr=r(qCt,"FlaxGPT2LMHeadModel"),qCt.forEach(t),fLr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),gLr=i(Oe),$3=n(Oe,"LI",{});var bBe=s($3);SMe=n(bBe,"STRONG",{});var NCt=s(SMe);hLr=r(NCt,"gpt_neo"),NCt.forEach(t),uLr=r(bBe," \u2014 "),dJ=n(bBe,"A",{href:!0});var jCt=s(dJ);pLr=r(jCt,"FlaxGPTNeoForCausalLM"),jCt.forEach(t),_Lr=r(bBe," (GPT Neo model)"),bBe.forEach(t),bLr=i(Oe),k3=n(Oe,"LI",{});var FBe=s(k3);RMe=n(FBe,"STRONG",{});var DCt=s(RMe);FLr=r(DCt,"gptj"),DCt.forEach(t),vLr=r(FBe," \u2014 "),cJ=n(FBe,"A",{href:!0});var GCt=s(cJ);TLr=r(GCt,"FlaxGPTJForCausalLM"),GCt.forEach(t),MLr=r(FBe," (GPT-J model)"),FBe.forEach(t),ELr=i(Oe),S3=n(Oe,"LI",{});var vBe=s(S3);BMe=n(vBe,"STRONG",{});var OCt=s(BMe);CLr=r(OCt,"roberta"),OCt.forEach(t),wLr=r(vBe," \u2014 "),mJ=n(vBe,"A",{href:!0});var VCt=s(mJ);ALr=r(VCt,"FlaxRobertaForCausalLM"),VCt.forEach(t),yLr=r(vBe," (RoBERTa model)"),vBe.forEach(t),LLr=i(Oe),R3=n(Oe,"LI",{});var TBe=s(R3);PMe=n(TBe,"STRONG",{});var XCt=s(PMe);xLr=r(XCt,"xglm"),XCt.forEach(t),$Lr=r(TBe," \u2014 "),fJ=n(TBe,"A",{href:!0});var zCt=s(fJ);kLr=r(zCt,"FlaxXGLMForCausalLM"),zCt.forEach(t),SLr=r(TBe," (XGLM model)"),TBe.forEach(t),Oe.forEach(t),RLr=i(Gl),T(B3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Mqe=i(m),Sc=n(m,"H2",{class:!0});var xje=s(Sc);P3=n(xje,"A",{id:!0,class:!0,href:!0});var QCt=s(P3);IMe=n(QCt,"SPAN",{});var WCt=s(IMe);T(n7.$$.fragment,WCt),WCt.forEach(t),QCt.forEach(t),BLr=i(xje),qMe=n(xje,"SPAN",{});var HCt=s(qMe);PLr=r(HCt,"FlaxAutoModelForPreTraining"),HCt.forEach(t),xje.forEach(t),Eqe=i(m),gr=n(m,"DIV",{class:!0});var Ol=s(gr);T(s7.$$.fragment,Ol),ILr=i(Ol),Rc=n(Ol,"P",{});var SZ=s(Rc);qLr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=n(SZ,"A",{href:!0});var UCt=s(gJ);NLr=r(UCt,"from_pretrained()"),UCt.forEach(t),jLr=r(SZ," class method or the "),hJ=n(SZ,"A",{href:!0});var JCt=s(hJ);DLr=r(JCt,"from_config()"),JCt.forEach(t),GLr=r(SZ,` class
method.`),SZ.forEach(t),OLr=i(Ol),l7=n(Ol,"P",{});var $je=s(l7);VLr=r($je,"This class cannot be instantiated directly using "),NMe=n($je,"CODE",{});var YCt=s(NMe);XLr=r(YCt,"__init__()"),YCt.forEach(t),zLr=r($je," (throws an error)."),$je.forEach(t),QLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var y0=s(Gt);T(i7.$$.fragment,y0),WLr=i(y0),jMe=n(y0,"P",{});var KCt=s(jMe);HLr=r(KCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KCt.forEach(t),ULr=i(y0),Bc=n(y0,"P",{});var RZ=s(Bc);JLr=r(RZ,`Note:
Loading a model from its configuration file does `),DMe=n(RZ,"STRONG",{});var ZCt=s(DMe);YLr=r(ZCt,"not"),ZCt.forEach(t),KLr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(RZ,"A",{href:!0});var e3t=s(uJ);ZLr=r(e3t,"from_pretrained()"),e3t.forEach(t),e8r=r(RZ," to load the model weights."),RZ.forEach(t),o8r=i(y0),T(I3.$$.fragment,y0),y0.forEach(t),r8r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(d7.$$.fragment,Vl),t8r=i(Vl),GMe=n(Vl,"P",{});var o3t=s(GMe);a8r=r(o3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o3t.forEach(t),n8r=i(Vl),pn=n(Vl,"P",{});var L0=s(pn);s8r=r(L0,"The model class to instantiate is selected based on the "),OMe=n(L0,"CODE",{});var r3t=s(OMe);l8r=r(r3t,"model_type"),r3t.forEach(t),i8r=r(L0,` property of the config object (either
passed as an argument or loaded from `),VMe=n(L0,"CODE",{});var t3t=s(VMe);d8r=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),c8r=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(L0,"CODE",{});var a3t=s(XMe);m8r=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),f8r=r(L0,":"),L0.forEach(t),g8r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);q3=n(we,"LI",{});var MBe=s(q3);zMe=n(MBe,"STRONG",{});var n3t=s(zMe);h8r=r(n3t,"albert"),n3t.forEach(t),u8r=r(MBe," \u2014 "),pJ=n(MBe,"A",{href:!0});var s3t=s(pJ);p8r=r(s3t,"FlaxAlbertForPreTraining"),s3t.forEach(t),_8r=r(MBe," (ALBERT model)"),MBe.forEach(t),b8r=i(we),N3=n(we,"LI",{});var EBe=s(N3);QMe=n(EBe,"STRONG",{});var l3t=s(QMe);F8r=r(l3t,"bart"),l3t.forEach(t),v8r=r(EBe," \u2014 "),_J=n(EBe,"A",{href:!0});var i3t=s(_J);T8r=r(i3t,"FlaxBartForConditionalGeneration"),i3t.forEach(t),M8r=r(EBe," (BART model)"),EBe.forEach(t),E8r=i(we),j3=n(we,"LI",{});var CBe=s(j3);WMe=n(CBe,"STRONG",{});var d3t=s(WMe);C8r=r(d3t,"bert"),d3t.forEach(t),w8r=r(CBe," \u2014 "),bJ=n(CBe,"A",{href:!0});var c3t=s(bJ);A8r=r(c3t,"FlaxBertForPreTraining"),c3t.forEach(t),y8r=r(CBe," (BERT model)"),CBe.forEach(t),L8r=i(we),D3=n(we,"LI",{});var wBe=s(D3);HMe=n(wBe,"STRONG",{});var m3t=s(HMe);x8r=r(m3t,"big_bird"),m3t.forEach(t),$8r=r(wBe," \u2014 "),FJ=n(wBe,"A",{href:!0});var f3t=s(FJ);k8r=r(f3t,"FlaxBigBirdForPreTraining"),f3t.forEach(t),S8r=r(wBe," (BigBird model)"),wBe.forEach(t),R8r=i(we),G3=n(we,"LI",{});var ABe=s(G3);UMe=n(ABe,"STRONG",{});var g3t=s(UMe);B8r=r(g3t,"electra"),g3t.forEach(t),P8r=r(ABe," \u2014 "),vJ=n(ABe,"A",{href:!0});var h3t=s(vJ);I8r=r(h3t,"FlaxElectraForPreTraining"),h3t.forEach(t),q8r=r(ABe," (ELECTRA model)"),ABe.forEach(t),N8r=i(we),O3=n(we,"LI",{});var yBe=s(O3);JMe=n(yBe,"STRONG",{});var u3t=s(JMe);j8r=r(u3t,"mbart"),u3t.forEach(t),D8r=r(yBe," \u2014 "),TJ=n(yBe,"A",{href:!0});var p3t=s(TJ);G8r=r(p3t,"FlaxMBartForConditionalGeneration"),p3t.forEach(t),O8r=r(yBe," (mBART model)"),yBe.forEach(t),V8r=i(we),V3=n(we,"LI",{});var LBe=s(V3);YMe=n(LBe,"STRONG",{});var _3t=s(YMe);X8r=r(_3t,"mt5"),_3t.forEach(t),z8r=r(LBe," \u2014 "),MJ=n(LBe,"A",{href:!0});var b3t=s(MJ);Q8r=r(b3t,"FlaxMT5ForConditionalGeneration"),b3t.forEach(t),W8r=r(LBe," (mT5 model)"),LBe.forEach(t),H8r=i(we),X3=n(we,"LI",{});var xBe=s(X3);KMe=n(xBe,"STRONG",{});var F3t=s(KMe);U8r=r(F3t,"roberta"),F3t.forEach(t),J8r=r(xBe," \u2014 "),EJ=n(xBe,"A",{href:!0});var v3t=s(EJ);Y8r=r(v3t,"FlaxRobertaForMaskedLM"),v3t.forEach(t),K8r=r(xBe," (RoBERTa model)"),xBe.forEach(t),Z8r=i(we),z3=n(we,"LI",{});var $Be=s(z3);ZMe=n($Be,"STRONG",{});var T3t=s(ZMe);exr=r(T3t,"roformer"),T3t.forEach(t),oxr=r($Be," \u2014 "),CJ=n($Be,"A",{href:!0});var M3t=s(CJ);rxr=r(M3t,"FlaxRoFormerForMaskedLM"),M3t.forEach(t),txr=r($Be," (RoFormer model)"),$Be.forEach(t),axr=i(we),Q3=n(we,"LI",{});var kBe=s(Q3);e4e=n(kBe,"STRONG",{});var E3t=s(e4e);nxr=r(E3t,"t5"),E3t.forEach(t),sxr=r(kBe," \u2014 "),wJ=n(kBe,"A",{href:!0});var C3t=s(wJ);lxr=r(C3t,"FlaxT5ForConditionalGeneration"),C3t.forEach(t),ixr=r(kBe," (T5 model)"),kBe.forEach(t),dxr=i(we),W3=n(we,"LI",{});var SBe=s(W3);o4e=n(SBe,"STRONG",{});var w3t=s(o4e);cxr=r(w3t,"wav2vec2"),w3t.forEach(t),mxr=r(SBe," \u2014 "),AJ=n(SBe,"A",{href:!0});var A3t=s(AJ);fxr=r(A3t,"FlaxWav2Vec2ForPreTraining"),A3t.forEach(t),gxr=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),hxr=i(we),H3=n(we,"LI",{});var RBe=s(H3);r4e=n(RBe,"STRONG",{});var y3t=s(r4e);uxr=r(y3t,"xlm-roberta"),y3t.forEach(t),pxr=r(RBe," \u2014 "),yJ=n(RBe,"A",{href:!0});var L3t=s(yJ);_xr=r(L3t,"FlaxXLMRobertaForMaskedLM"),L3t.forEach(t),bxr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),we.forEach(t),Fxr=i(Vl),T(U3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Cqe=i(m),Pc=n(m,"H2",{class:!0});var kje=s(Pc);J3=n(kje,"A",{id:!0,class:!0,href:!0});var x3t=s(J3);t4e=n(x3t,"SPAN",{});var $3t=s(t4e);T(c7.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),vxr=i(kje),a4e=n(kje,"SPAN",{});var k3t=s(a4e);Txr=r(k3t,"FlaxAutoModelForMaskedLM"),k3t.forEach(t),kje.forEach(t),wqe=i(m),hr=n(m,"DIV",{class:!0});var Xl=s(hr);T(m7.$$.fragment,Xl),Mxr=i(Xl),Ic=n(Xl,"P",{});var BZ=s(Ic);Exr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=n(BZ,"A",{href:!0});var S3t=s(LJ);Cxr=r(S3t,"from_pretrained()"),S3t.forEach(t),wxr=r(BZ," class method or the "),xJ=n(BZ,"A",{href:!0});var R3t=s(xJ);Axr=r(R3t,"from_config()"),R3t.forEach(t),yxr=r(BZ,` class
method.`),BZ.forEach(t),Lxr=i(Xl),f7=n(Xl,"P",{});var Sje=s(f7);xxr=r(Sje,"This class cannot be instantiated directly using "),n4e=n(Sje,"CODE",{});var B3t=s(n4e);$xr=r(B3t,"__init__()"),B3t.forEach(t),kxr=r(Sje," (throws an error)."),Sje.forEach(t),Sxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var x0=s(Ot);T(g7.$$.fragment,x0),Rxr=i(x0),s4e=n(x0,"P",{});var P3t=s(s4e);Bxr=r(P3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3t.forEach(t),Pxr=i(x0),qc=n(x0,"P",{});var PZ=s(qc);Ixr=r(PZ,`Note:
Loading a model from its configuration file does `),l4e=n(PZ,"STRONG",{});var I3t=s(l4e);qxr=r(I3t,"not"),I3t.forEach(t),Nxr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(PZ,"A",{href:!0});var q3t=s($J);jxr=r(q3t,"from_pretrained()"),q3t.forEach(t),Dxr=r(PZ," to load the model weights."),PZ.forEach(t),Gxr=i(x0),T(Y3.$$.fragment,x0),x0.forEach(t),Oxr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(h7.$$.fragment,zl),Vxr=i(zl),i4e=n(zl,"P",{});var N3t=s(i4e);Xxr=r(N3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N3t.forEach(t),zxr=i(zl),_n=n(zl,"P",{});var $0=s(_n);Qxr=r($0,"The model class to instantiate is selected based on the "),d4e=n($0,"CODE",{});var j3t=s(d4e);Wxr=r(j3t,"model_type"),j3t.forEach(t),Hxr=r($0,` property of the config object (either
passed as an argument or loaded from `),c4e=n($0,"CODE",{});var D3t=s(c4e);Uxr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),Jxr=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n($0,"CODE",{});var G3t=s(m4e);Yxr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),Kxr=r($0,":"),$0.forEach(t),Zxr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);K3=n(Be,"LI",{});var BBe=s(K3);f4e=n(BBe,"STRONG",{});var O3t=s(f4e);e7r=r(O3t,"albert"),O3t.forEach(t),o7r=r(BBe," \u2014 "),kJ=n(BBe,"A",{href:!0});var V3t=s(kJ);r7r=r(V3t,"FlaxAlbertForMaskedLM"),V3t.forEach(t),t7r=r(BBe," (ALBERT model)"),BBe.forEach(t),a7r=i(Be),Z3=n(Be,"LI",{});var PBe=s(Z3);g4e=n(PBe,"STRONG",{});var X3t=s(g4e);n7r=r(X3t,"bart"),X3t.forEach(t),s7r=r(PBe," \u2014 "),SJ=n(PBe,"A",{href:!0});var z3t=s(SJ);l7r=r(z3t,"FlaxBartForConditionalGeneration"),z3t.forEach(t),i7r=r(PBe," (BART model)"),PBe.forEach(t),d7r=i(Be),ew=n(Be,"LI",{});var IBe=s(ew);h4e=n(IBe,"STRONG",{});var Q3t=s(h4e);c7r=r(Q3t,"bert"),Q3t.forEach(t),m7r=r(IBe," \u2014 "),RJ=n(IBe,"A",{href:!0});var W3t=s(RJ);f7r=r(W3t,"FlaxBertForMaskedLM"),W3t.forEach(t),g7r=r(IBe," (BERT model)"),IBe.forEach(t),h7r=i(Be),ow=n(Be,"LI",{});var qBe=s(ow);u4e=n(qBe,"STRONG",{});var H3t=s(u4e);u7r=r(H3t,"big_bird"),H3t.forEach(t),p7r=r(qBe," \u2014 "),BJ=n(qBe,"A",{href:!0});var U3t=s(BJ);_7r=r(U3t,"FlaxBigBirdForMaskedLM"),U3t.forEach(t),b7r=r(qBe," (BigBird model)"),qBe.forEach(t),F7r=i(Be),rw=n(Be,"LI",{});var NBe=s(rw);p4e=n(NBe,"STRONG",{});var J3t=s(p4e);v7r=r(J3t,"distilbert"),J3t.forEach(t),T7r=r(NBe," \u2014 "),PJ=n(NBe,"A",{href:!0});var Y3t=s(PJ);M7r=r(Y3t,"FlaxDistilBertForMaskedLM"),Y3t.forEach(t),E7r=r(NBe," (DistilBERT model)"),NBe.forEach(t),C7r=i(Be),tw=n(Be,"LI",{});var jBe=s(tw);_4e=n(jBe,"STRONG",{});var K3t=s(_4e);w7r=r(K3t,"electra"),K3t.forEach(t),A7r=r(jBe," \u2014 "),IJ=n(jBe,"A",{href:!0});var Z3t=s(IJ);y7r=r(Z3t,"FlaxElectraForMaskedLM"),Z3t.forEach(t),L7r=r(jBe," (ELECTRA model)"),jBe.forEach(t),x7r=i(Be),aw=n(Be,"LI",{});var DBe=s(aw);b4e=n(DBe,"STRONG",{});var ewt=s(b4e);$7r=r(ewt,"mbart"),ewt.forEach(t),k7r=r(DBe," \u2014 "),qJ=n(DBe,"A",{href:!0});var owt=s(qJ);S7r=r(owt,"FlaxMBartForConditionalGeneration"),owt.forEach(t),R7r=r(DBe," (mBART model)"),DBe.forEach(t),B7r=i(Be),nw=n(Be,"LI",{});var GBe=s(nw);F4e=n(GBe,"STRONG",{});var rwt=s(F4e);P7r=r(rwt,"roberta"),rwt.forEach(t),I7r=r(GBe," \u2014 "),NJ=n(GBe,"A",{href:!0});var twt=s(NJ);q7r=r(twt,"FlaxRobertaForMaskedLM"),twt.forEach(t),N7r=r(GBe," (RoBERTa model)"),GBe.forEach(t),j7r=i(Be),sw=n(Be,"LI",{});var OBe=s(sw);v4e=n(OBe,"STRONG",{});var awt=s(v4e);D7r=r(awt,"roformer"),awt.forEach(t),G7r=r(OBe," \u2014 "),jJ=n(OBe,"A",{href:!0});var nwt=s(jJ);O7r=r(nwt,"FlaxRoFormerForMaskedLM"),nwt.forEach(t),V7r=r(OBe," (RoFormer model)"),OBe.forEach(t),X7r=i(Be),lw=n(Be,"LI",{});var VBe=s(lw);T4e=n(VBe,"STRONG",{});var swt=s(T4e);z7r=r(swt,"xlm-roberta"),swt.forEach(t),Q7r=r(VBe," \u2014 "),DJ=n(VBe,"A",{href:!0});var lwt=s(DJ);W7r=r(lwt,"FlaxXLMRobertaForMaskedLM"),lwt.forEach(t),H7r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),Be.forEach(t),U7r=i(zl),T(iw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Aqe=i(m),Nc=n(m,"H2",{class:!0});var Rje=s(Nc);dw=n(Rje,"A",{id:!0,class:!0,href:!0});var iwt=s(dw);M4e=n(iwt,"SPAN",{});var dwt=s(M4e);T(u7.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),J7r=i(Rje),E4e=n(Rje,"SPAN",{});var cwt=s(E4e);Y7r=r(cwt,"FlaxAutoModelForSeq2SeqLM"),cwt.forEach(t),Rje.forEach(t),yqe=i(m),ur=n(m,"DIV",{class:!0});var Ql=s(ur);T(p7.$$.fragment,Ql),K7r=i(Ql),jc=n(Ql,"P",{});var IZ=s(jc);Z7r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=n(IZ,"A",{href:!0});var mwt=s(GJ);e9r=r(mwt,"from_pretrained()"),mwt.forEach(t),o9r=r(IZ," class method or the "),OJ=n(IZ,"A",{href:!0});var fwt=s(OJ);r9r=r(fwt,"from_config()"),fwt.forEach(t),t9r=r(IZ,` class
method.`),IZ.forEach(t),a9r=i(Ql),_7=n(Ql,"P",{});var Bje=s(_7);n9r=r(Bje,"This class cannot be instantiated directly using "),C4e=n(Bje,"CODE",{});var gwt=s(C4e);s9r=r(gwt,"__init__()"),gwt.forEach(t),l9r=r(Bje," (throws an error)."),Bje.forEach(t),i9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var k0=s(Vt);T(b7.$$.fragment,k0),d9r=i(k0),w4e=n(k0,"P",{});var hwt=s(w4e);c9r=r(hwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hwt.forEach(t),m9r=i(k0),Dc=n(k0,"P",{});var qZ=s(Dc);f9r=r(qZ,`Note:
Loading a model from its configuration file does `),A4e=n(qZ,"STRONG",{});var uwt=s(A4e);g9r=r(uwt,"not"),uwt.forEach(t),h9r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(qZ,"A",{href:!0});var pwt=s(VJ);u9r=r(pwt,"from_pretrained()"),pwt.forEach(t),p9r=r(qZ," to load the model weights."),qZ.forEach(t),_9r=i(k0),T(cw.$$.fragment,k0),k0.forEach(t),b9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(F7.$$.fragment,Wl),F9r=i(Wl),y4e=n(Wl,"P",{});var _wt=s(y4e);v9r=r(_wt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_wt.forEach(t),T9r=i(Wl),bn=n(Wl,"P",{});var S0=s(bn);M9r=r(S0,"The model class to instantiate is selected based on the "),L4e=n(S0,"CODE",{});var bwt=s(L4e);E9r=r(bwt,"model_type"),bwt.forEach(t),C9r=r(S0,` property of the config object (either
passed as an argument or loaded from `),x4e=n(S0,"CODE",{});var Fwt=s(x4e);w9r=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),A9r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(S0,"CODE",{});var vwt=s($4e);y9r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),L9r=r(S0,":"),S0.forEach(t),x9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);mw=n(Ve,"LI",{});var XBe=s(mw);k4e=n(XBe,"STRONG",{});var Twt=s(k4e);$9r=r(Twt,"bart"),Twt.forEach(t),k9r=r(XBe," \u2014 "),XJ=n(XBe,"A",{href:!0});var Mwt=s(XJ);S9r=r(Mwt,"FlaxBartForConditionalGeneration"),Mwt.forEach(t),R9r=r(XBe," (BART model)"),XBe.forEach(t),B9r=i(Ve),fw=n(Ve,"LI",{});var zBe=s(fw);S4e=n(zBe,"STRONG",{});var Ewt=s(S4e);P9r=r(Ewt,"blenderbot"),Ewt.forEach(t),I9r=r(zBe," \u2014 "),zJ=n(zBe,"A",{href:!0});var Cwt=s(zJ);q9r=r(Cwt,"FlaxBlenderbotForConditionalGeneration"),Cwt.forEach(t),N9r=r(zBe," (Blenderbot model)"),zBe.forEach(t),j9r=i(Ve),gw=n(Ve,"LI",{});var QBe=s(gw);R4e=n(QBe,"STRONG",{});var wwt=s(R4e);D9r=r(wwt,"blenderbot-small"),wwt.forEach(t),G9r=r(QBe," \u2014 "),QJ=n(QBe,"A",{href:!0});var Awt=s(QJ);O9r=r(Awt,"FlaxBlenderbotSmallForConditionalGeneration"),Awt.forEach(t),V9r=r(QBe," (BlenderbotSmall model)"),QBe.forEach(t),X9r=i(Ve),hw=n(Ve,"LI",{});var WBe=s(hw);B4e=n(WBe,"STRONG",{});var ywt=s(B4e);z9r=r(ywt,"encoder-decoder"),ywt.forEach(t),Q9r=r(WBe," \u2014 "),WJ=n(WBe,"A",{href:!0});var Lwt=s(WJ);W9r=r(Lwt,"FlaxEncoderDecoderModel"),Lwt.forEach(t),H9r=r(WBe," (Encoder decoder model)"),WBe.forEach(t),U9r=i(Ve),uw=n(Ve,"LI",{});var HBe=s(uw);P4e=n(HBe,"STRONG",{});var xwt=s(P4e);J9r=r(xwt,"marian"),xwt.forEach(t),Y9r=r(HBe," \u2014 "),HJ=n(HBe,"A",{href:!0});var $wt=s(HJ);K9r=r($wt,"FlaxMarianMTModel"),$wt.forEach(t),Z9r=r(HBe," (Marian model)"),HBe.forEach(t),e$r=i(Ve),pw=n(Ve,"LI",{});var UBe=s(pw);I4e=n(UBe,"STRONG",{});var kwt=s(I4e);o$r=r(kwt,"mbart"),kwt.forEach(t),r$r=r(UBe," \u2014 "),UJ=n(UBe,"A",{href:!0});var Swt=s(UJ);t$r=r(Swt,"FlaxMBartForConditionalGeneration"),Swt.forEach(t),a$r=r(UBe," (mBART model)"),UBe.forEach(t),n$r=i(Ve),_w=n(Ve,"LI",{});var JBe=s(_w);q4e=n(JBe,"STRONG",{});var Rwt=s(q4e);s$r=r(Rwt,"mt5"),Rwt.forEach(t),l$r=r(JBe," \u2014 "),JJ=n(JBe,"A",{href:!0});var Bwt=s(JJ);i$r=r(Bwt,"FlaxMT5ForConditionalGeneration"),Bwt.forEach(t),d$r=r(JBe," (mT5 model)"),JBe.forEach(t),c$r=i(Ve),bw=n(Ve,"LI",{});var YBe=s(bw);N4e=n(YBe,"STRONG",{});var Pwt=s(N4e);m$r=r(Pwt,"pegasus"),Pwt.forEach(t),f$r=r(YBe," \u2014 "),YJ=n(YBe,"A",{href:!0});var Iwt=s(YJ);g$r=r(Iwt,"FlaxPegasusForConditionalGeneration"),Iwt.forEach(t),h$r=r(YBe," (Pegasus model)"),YBe.forEach(t),u$r=i(Ve),Fw=n(Ve,"LI",{});var KBe=s(Fw);j4e=n(KBe,"STRONG",{});var qwt=s(j4e);p$r=r(qwt,"t5"),qwt.forEach(t),_$r=r(KBe," \u2014 "),KJ=n(KBe,"A",{href:!0});var Nwt=s(KJ);b$r=r(Nwt,"FlaxT5ForConditionalGeneration"),Nwt.forEach(t),F$r=r(KBe," (T5 model)"),KBe.forEach(t),Ve.forEach(t),v$r=i(Wl),T(vw.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lqe=i(m),Gc=n(m,"H2",{class:!0});var Pje=s(Gc);Tw=n(Pje,"A",{id:!0,class:!0,href:!0});var jwt=s(Tw);D4e=n(jwt,"SPAN",{});var Dwt=s(D4e);T(v7.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),T$r=i(Pje),G4e=n(Pje,"SPAN",{});var Gwt=s(G4e);M$r=r(Gwt,"FlaxAutoModelForSequenceClassification"),Gwt.forEach(t),Pje.forEach(t),xqe=i(m),pr=n(m,"DIV",{class:!0});var Hl=s(pr);T(T7.$$.fragment,Hl),E$r=i(Hl),Oc=n(Hl,"P",{});var NZ=s(Oc);C$r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=n(NZ,"A",{href:!0});var Owt=s(ZJ);w$r=r(Owt,"from_pretrained()"),Owt.forEach(t),A$r=r(NZ," class method or the "),eY=n(NZ,"A",{href:!0});var Vwt=s(eY);y$r=r(Vwt,"from_config()"),Vwt.forEach(t),L$r=r(NZ,` class
method.`),NZ.forEach(t),x$r=i(Hl),M7=n(Hl,"P",{});var Ije=s(M7);$$r=r(Ije,"This class cannot be instantiated directly using "),O4e=n(Ije,"CODE",{});var Xwt=s(O4e);k$r=r(Xwt,"__init__()"),Xwt.forEach(t),S$r=r(Ije," (throws an error)."),Ije.forEach(t),R$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var R0=s(Xt);T(E7.$$.fragment,R0),B$r=i(R0),V4e=n(R0,"P",{});var zwt=s(V4e);P$r=r(zwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zwt.forEach(t),I$r=i(R0),Vc=n(R0,"P",{});var jZ=s(Vc);q$r=r(jZ,`Note:
Loading a model from its configuration file does `),X4e=n(jZ,"STRONG",{});var Qwt=s(X4e);N$r=r(Qwt,"not"),Qwt.forEach(t),j$r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(jZ,"A",{href:!0});var Wwt=s(oY);D$r=r(Wwt,"from_pretrained()"),Wwt.forEach(t),G$r=r(jZ," to load the model weights."),jZ.forEach(t),O$r=i(R0),T(Mw.$$.fragment,R0),R0.forEach(t),V$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(C7.$$.fragment,Ul),X$r=i(Ul),z4e=n(Ul,"P",{});var Hwt=s(z4e);z$r=r(Hwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hwt.forEach(t),Q$r=i(Ul),Fn=n(Ul,"P",{});var B0=s(Fn);W$r=r(B0,"The model class to instantiate is selected based on the "),Q4e=n(B0,"CODE",{});var Uwt=s(Q4e);H$r=r(Uwt,"model_type"),Uwt.forEach(t),U$r=r(B0,` property of the config object (either
passed as an argument or loaded from `),W4e=n(B0,"CODE",{});var Jwt=s(W4e);J$r=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),Y$r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(B0,"CODE",{});var Ywt=s(H4e);K$r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),Z$r=r(B0,":"),B0.forEach(t),ekr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);Ew=n(Pe,"LI",{});var ZBe=s(Ew);U4e=n(ZBe,"STRONG",{});var Kwt=s(U4e);okr=r(Kwt,"albert"),Kwt.forEach(t),rkr=r(ZBe," \u2014 "),rY=n(ZBe,"A",{href:!0});var Zwt=s(rY);tkr=r(Zwt,"FlaxAlbertForSequenceClassification"),Zwt.forEach(t),akr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),nkr=i(Pe),Cw=n(Pe,"LI",{});var ePe=s(Cw);J4e=n(ePe,"STRONG",{});var eAt=s(J4e);skr=r(eAt,"bart"),eAt.forEach(t),lkr=r(ePe," \u2014 "),tY=n(ePe,"A",{href:!0});var oAt=s(tY);ikr=r(oAt,"FlaxBartForSequenceClassification"),oAt.forEach(t),dkr=r(ePe," (BART model)"),ePe.forEach(t),ckr=i(Pe),ww=n(Pe,"LI",{});var oPe=s(ww);Y4e=n(oPe,"STRONG",{});var rAt=s(Y4e);mkr=r(rAt,"bert"),rAt.forEach(t),fkr=r(oPe," \u2014 "),aY=n(oPe,"A",{href:!0});var tAt=s(aY);gkr=r(tAt,"FlaxBertForSequenceClassification"),tAt.forEach(t),hkr=r(oPe," (BERT model)"),oPe.forEach(t),ukr=i(Pe),Aw=n(Pe,"LI",{});var rPe=s(Aw);K4e=n(rPe,"STRONG",{});var aAt=s(K4e);pkr=r(aAt,"big_bird"),aAt.forEach(t),_kr=r(rPe," \u2014 "),nY=n(rPe,"A",{href:!0});var nAt=s(nY);bkr=r(nAt,"FlaxBigBirdForSequenceClassification"),nAt.forEach(t),Fkr=r(rPe," (BigBird model)"),rPe.forEach(t),vkr=i(Pe),yw=n(Pe,"LI",{});var tPe=s(yw);Z4e=n(tPe,"STRONG",{});var sAt=s(Z4e);Tkr=r(sAt,"distilbert"),sAt.forEach(t),Mkr=r(tPe," \u2014 "),sY=n(tPe,"A",{href:!0});var lAt=s(sY);Ekr=r(lAt,"FlaxDistilBertForSequenceClassification"),lAt.forEach(t),Ckr=r(tPe," (DistilBERT model)"),tPe.forEach(t),wkr=i(Pe),Lw=n(Pe,"LI",{});var aPe=s(Lw);eEe=n(aPe,"STRONG",{});var iAt=s(eEe);Akr=r(iAt,"electra"),iAt.forEach(t),ykr=r(aPe," \u2014 "),lY=n(aPe,"A",{href:!0});var dAt=s(lY);Lkr=r(dAt,"FlaxElectraForSequenceClassification"),dAt.forEach(t),xkr=r(aPe," (ELECTRA model)"),aPe.forEach(t),$kr=i(Pe),xw=n(Pe,"LI",{});var nPe=s(xw);oEe=n(nPe,"STRONG",{});var cAt=s(oEe);kkr=r(cAt,"mbart"),cAt.forEach(t),Skr=r(nPe," \u2014 "),iY=n(nPe,"A",{href:!0});var mAt=s(iY);Rkr=r(mAt,"FlaxMBartForSequenceClassification"),mAt.forEach(t),Bkr=r(nPe," (mBART model)"),nPe.forEach(t),Pkr=i(Pe),$w=n(Pe,"LI",{});var sPe=s($w);rEe=n(sPe,"STRONG",{});var fAt=s(rEe);Ikr=r(fAt,"roberta"),fAt.forEach(t),qkr=r(sPe," \u2014 "),dY=n(sPe,"A",{href:!0});var gAt=s(dY);Nkr=r(gAt,"FlaxRobertaForSequenceClassification"),gAt.forEach(t),jkr=r(sPe," (RoBERTa model)"),sPe.forEach(t),Dkr=i(Pe),kw=n(Pe,"LI",{});var lPe=s(kw);tEe=n(lPe,"STRONG",{});var hAt=s(tEe);Gkr=r(hAt,"roformer"),hAt.forEach(t),Okr=r(lPe," \u2014 "),cY=n(lPe,"A",{href:!0});var uAt=s(cY);Vkr=r(uAt,"FlaxRoFormerForSequenceClassification"),uAt.forEach(t),Xkr=r(lPe," (RoFormer model)"),lPe.forEach(t),zkr=i(Pe),Sw=n(Pe,"LI",{});var iPe=s(Sw);aEe=n(iPe,"STRONG",{});var pAt=s(aEe);Qkr=r(pAt,"xlm-roberta"),pAt.forEach(t),Wkr=r(iPe," \u2014 "),mY=n(iPe,"A",{href:!0});var _At=s(mY);Hkr=r(_At,"FlaxXLMRobertaForSequenceClassification"),_At.forEach(t),Ukr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),Pe.forEach(t),Jkr=i(Ul),T(Rw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),$qe=i(m),Xc=n(m,"H2",{class:!0});var qje=s(Xc);Bw=n(qje,"A",{id:!0,class:!0,href:!0});var bAt=s(Bw);nEe=n(bAt,"SPAN",{});var FAt=s(nEe);T(w7.$$.fragment,FAt),FAt.forEach(t),bAt.forEach(t),Ykr=i(qje),sEe=n(qje,"SPAN",{});var vAt=s(sEe);Kkr=r(vAt,"FlaxAutoModelForQuestionAnswering"),vAt.forEach(t),qje.forEach(t),kqe=i(m),_r=n(m,"DIV",{class:!0});var Jl=s(_r);T(A7.$$.fragment,Jl),Zkr=i(Jl),zc=n(Jl,"P",{});var DZ=s(zc);eSr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fY=n(DZ,"A",{href:!0});var TAt=s(fY);oSr=r(TAt,"from_pretrained()"),TAt.forEach(t),rSr=r(DZ," class method or the "),gY=n(DZ,"A",{href:!0});var MAt=s(gY);tSr=r(MAt,"from_config()"),MAt.forEach(t),aSr=r(DZ,` class
method.`),DZ.forEach(t),nSr=i(Jl),y7=n(Jl,"P",{});var Nje=s(y7);sSr=r(Nje,"This class cannot be instantiated directly using "),lEe=n(Nje,"CODE",{});var EAt=s(lEe);lSr=r(EAt,"__init__()"),EAt.forEach(t),iSr=r(Nje," (throws an error)."),Nje.forEach(t),dSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var P0=s(zt);T(L7.$$.fragment,P0),cSr=i(P0),iEe=n(P0,"P",{});var CAt=s(iEe);mSr=r(CAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CAt.forEach(t),fSr=i(P0),Qc=n(P0,"P",{});var GZ=s(Qc);gSr=r(GZ,`Note:
Loading a model from its configuration file does `),dEe=n(GZ,"STRONG",{});var wAt=s(dEe);hSr=r(wAt,"not"),wAt.forEach(t),uSr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(GZ,"A",{href:!0});var AAt=s(hY);pSr=r(AAt,"from_pretrained()"),AAt.forEach(t),_Sr=r(GZ," to load the model weights."),GZ.forEach(t),bSr=i(P0),T(Pw.$$.fragment,P0),P0.forEach(t),FSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(x7.$$.fragment,Yl),vSr=i(Yl),cEe=n(Yl,"P",{});var yAt=s(cEe);TSr=r(yAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yAt.forEach(t),MSr=i(Yl),vn=n(Yl,"P",{});var I0=s(vn);ESr=r(I0,"The model class to instantiate is selected based on the "),mEe=n(I0,"CODE",{});var LAt=s(mEe);CSr=r(LAt,"model_type"),LAt.forEach(t),wSr=r(I0,` property of the config object (either
passed as an argument or loaded from `),fEe=n(I0,"CODE",{});var xAt=s(fEe);ASr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),ySr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(I0,"CODE",{});var $At=s(gEe);LSr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),xSr=r(I0,":"),I0.forEach(t),$Sr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);Iw=n(Ie,"LI",{});var dPe=s(Iw);hEe=n(dPe,"STRONG",{});var kAt=s(hEe);kSr=r(kAt,"albert"),kAt.forEach(t),SSr=r(dPe," \u2014 "),uY=n(dPe,"A",{href:!0});var SAt=s(uY);RSr=r(SAt,"FlaxAlbertForQuestionAnswering"),SAt.forEach(t),BSr=r(dPe," (ALBERT model)"),dPe.forEach(t),PSr=i(Ie),qw=n(Ie,"LI",{});var cPe=s(qw);uEe=n(cPe,"STRONG",{});var RAt=s(uEe);ISr=r(RAt,"bart"),RAt.forEach(t),qSr=r(cPe," \u2014 "),pY=n(cPe,"A",{href:!0});var BAt=s(pY);NSr=r(BAt,"FlaxBartForQuestionAnswering"),BAt.forEach(t),jSr=r(cPe," (BART model)"),cPe.forEach(t),DSr=i(Ie),Nw=n(Ie,"LI",{});var mPe=s(Nw);pEe=n(mPe,"STRONG",{});var PAt=s(pEe);GSr=r(PAt,"bert"),PAt.forEach(t),OSr=r(mPe," \u2014 "),_Y=n(mPe,"A",{href:!0});var IAt=s(_Y);VSr=r(IAt,"FlaxBertForQuestionAnswering"),IAt.forEach(t),XSr=r(mPe," (BERT model)"),mPe.forEach(t),zSr=i(Ie),jw=n(Ie,"LI",{});var fPe=s(jw);_Ee=n(fPe,"STRONG",{});var qAt=s(_Ee);QSr=r(qAt,"big_bird"),qAt.forEach(t),WSr=r(fPe," \u2014 "),bY=n(fPe,"A",{href:!0});var NAt=s(bY);HSr=r(NAt,"FlaxBigBirdForQuestionAnswering"),NAt.forEach(t),USr=r(fPe," (BigBird model)"),fPe.forEach(t),JSr=i(Ie),Dw=n(Ie,"LI",{});var gPe=s(Dw);bEe=n(gPe,"STRONG",{});var jAt=s(bEe);YSr=r(jAt,"distilbert"),jAt.forEach(t),KSr=r(gPe," \u2014 "),FY=n(gPe,"A",{href:!0});var DAt=s(FY);ZSr=r(DAt,"FlaxDistilBertForQuestionAnswering"),DAt.forEach(t),eRr=r(gPe," (DistilBERT model)"),gPe.forEach(t),oRr=i(Ie),Gw=n(Ie,"LI",{});var hPe=s(Gw);FEe=n(hPe,"STRONG",{});var GAt=s(FEe);rRr=r(GAt,"electra"),GAt.forEach(t),tRr=r(hPe," \u2014 "),vY=n(hPe,"A",{href:!0});var OAt=s(vY);aRr=r(OAt,"FlaxElectraForQuestionAnswering"),OAt.forEach(t),nRr=r(hPe," (ELECTRA model)"),hPe.forEach(t),sRr=i(Ie),Ow=n(Ie,"LI",{});var uPe=s(Ow);vEe=n(uPe,"STRONG",{});var VAt=s(vEe);lRr=r(VAt,"mbart"),VAt.forEach(t),iRr=r(uPe," \u2014 "),TY=n(uPe,"A",{href:!0});var XAt=s(TY);dRr=r(XAt,"FlaxMBartForQuestionAnswering"),XAt.forEach(t),cRr=r(uPe," (mBART model)"),uPe.forEach(t),mRr=i(Ie),Vw=n(Ie,"LI",{});var pPe=s(Vw);TEe=n(pPe,"STRONG",{});var zAt=s(TEe);fRr=r(zAt,"roberta"),zAt.forEach(t),gRr=r(pPe," \u2014 "),MY=n(pPe,"A",{href:!0});var QAt=s(MY);hRr=r(QAt,"FlaxRobertaForQuestionAnswering"),QAt.forEach(t),uRr=r(pPe," (RoBERTa model)"),pPe.forEach(t),pRr=i(Ie),Xw=n(Ie,"LI",{});var _Pe=s(Xw);MEe=n(_Pe,"STRONG",{});var WAt=s(MEe);_Rr=r(WAt,"roformer"),WAt.forEach(t),bRr=r(_Pe," \u2014 "),EY=n(_Pe,"A",{href:!0});var HAt=s(EY);FRr=r(HAt,"FlaxRoFormerForQuestionAnswering"),HAt.forEach(t),vRr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),TRr=i(Ie),zw=n(Ie,"LI",{});var bPe=s(zw);EEe=n(bPe,"STRONG",{});var UAt=s(EEe);MRr=r(UAt,"xlm-roberta"),UAt.forEach(t),ERr=r(bPe," \u2014 "),CY=n(bPe,"A",{href:!0});var JAt=s(CY);CRr=r(JAt,"FlaxXLMRobertaForQuestionAnswering"),JAt.forEach(t),wRr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),Ie.forEach(t),ARr=i(Yl),T(Qw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Sqe=i(m),Wc=n(m,"H2",{class:!0});var jje=s(Wc);Ww=n(jje,"A",{id:!0,class:!0,href:!0});var YAt=s(Ww);CEe=n(YAt,"SPAN",{});var KAt=s(CEe);T($7.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),yRr=i(jje),wEe=n(jje,"SPAN",{});var ZAt=s(wEe);LRr=r(ZAt,"FlaxAutoModelForTokenClassification"),ZAt.forEach(t),jje.forEach(t),Rqe=i(m),br=n(m,"DIV",{class:!0});var Kl=s(br);T(k7.$$.fragment,Kl),xRr=i(Kl),Hc=n(Kl,"P",{});var OZ=s(Hc);$Rr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=n(OZ,"A",{href:!0});var e6t=s(wY);kRr=r(e6t,"from_pretrained()"),e6t.forEach(t),SRr=r(OZ," class method or the "),AY=n(OZ,"A",{href:!0});var o6t=s(AY);RRr=r(o6t,"from_config()"),o6t.forEach(t),BRr=r(OZ,` class
method.`),OZ.forEach(t),PRr=i(Kl),S7=n(Kl,"P",{});var Dje=s(S7);IRr=r(Dje,"This class cannot be instantiated directly using "),AEe=n(Dje,"CODE",{});var r6t=s(AEe);qRr=r(r6t,"__init__()"),r6t.forEach(t),NRr=r(Dje," (throws an error)."),Dje.forEach(t),jRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var q0=s(Qt);T(R7.$$.fragment,q0),DRr=i(q0),yEe=n(q0,"P",{});var t6t=s(yEe);GRr=r(t6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t6t.forEach(t),ORr=i(q0),Uc=n(q0,"P",{});var VZ=s(Uc);VRr=r(VZ,`Note:
Loading a model from its configuration file does `),LEe=n(VZ,"STRONG",{});var a6t=s(LEe);XRr=r(a6t,"not"),a6t.forEach(t),zRr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(VZ,"A",{href:!0});var n6t=s(yY);QRr=r(n6t,"from_pretrained()"),n6t.forEach(t),WRr=r(VZ," to load the model weights."),VZ.forEach(t),HRr=i(q0),T(Hw.$$.fragment,q0),q0.forEach(t),URr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(B7.$$.fragment,Zl),JRr=i(Zl),xEe=n(Zl,"P",{});var s6t=s(xEe);YRr=r(s6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s6t.forEach(t),KRr=i(Zl),Tn=n(Zl,"P",{});var N0=s(Tn);ZRr=r(N0,"The model class to instantiate is selected based on the "),$Ee=n(N0,"CODE",{});var l6t=s($Ee);eBr=r(l6t,"model_type"),l6t.forEach(t),oBr=r(N0,` property of the config object (either
passed as an argument or loaded from `),kEe=n(N0,"CODE",{});var i6t=s(kEe);rBr=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),tBr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(N0,"CODE",{});var d6t=s(SEe);aBr=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),nBr=r(N0,":"),N0.forEach(t),sBr=i(Zl),De=n(Zl,"UL",{});var vo=s(De);Uw=n(vo,"LI",{});var FPe=s(Uw);REe=n(FPe,"STRONG",{});var c6t=s(REe);lBr=r(c6t,"albert"),c6t.forEach(t),iBr=r(FPe," \u2014 "),LY=n(FPe,"A",{href:!0});var m6t=s(LY);dBr=r(m6t,"FlaxAlbertForTokenClassification"),m6t.forEach(t),cBr=r(FPe," (ALBERT model)"),FPe.forEach(t),mBr=i(vo),Jw=n(vo,"LI",{});var vPe=s(Jw);BEe=n(vPe,"STRONG",{});var f6t=s(BEe);fBr=r(f6t,"bert"),f6t.forEach(t),gBr=r(vPe," \u2014 "),xY=n(vPe,"A",{href:!0});var g6t=s(xY);hBr=r(g6t,"FlaxBertForTokenClassification"),g6t.forEach(t),uBr=r(vPe," (BERT model)"),vPe.forEach(t),pBr=i(vo),Yw=n(vo,"LI",{});var TPe=s(Yw);PEe=n(TPe,"STRONG",{});var h6t=s(PEe);_Br=r(h6t,"big_bird"),h6t.forEach(t),bBr=r(TPe," \u2014 "),$Y=n(TPe,"A",{href:!0});var u6t=s($Y);FBr=r(u6t,"FlaxBigBirdForTokenClassification"),u6t.forEach(t),vBr=r(TPe," (BigBird model)"),TPe.forEach(t),TBr=i(vo),Kw=n(vo,"LI",{});var MPe=s(Kw);IEe=n(MPe,"STRONG",{});var p6t=s(IEe);MBr=r(p6t,"distilbert"),p6t.forEach(t),EBr=r(MPe," \u2014 "),kY=n(MPe,"A",{href:!0});var _6t=s(kY);CBr=r(_6t,"FlaxDistilBertForTokenClassification"),_6t.forEach(t),wBr=r(MPe," (DistilBERT model)"),MPe.forEach(t),ABr=i(vo),Zw=n(vo,"LI",{});var EPe=s(Zw);qEe=n(EPe,"STRONG",{});var b6t=s(qEe);yBr=r(b6t,"electra"),b6t.forEach(t),LBr=r(EPe," \u2014 "),SY=n(EPe,"A",{href:!0});var F6t=s(SY);xBr=r(F6t,"FlaxElectraForTokenClassification"),F6t.forEach(t),$Br=r(EPe," (ELECTRA model)"),EPe.forEach(t),kBr=i(vo),eA=n(vo,"LI",{});var CPe=s(eA);NEe=n(CPe,"STRONG",{});var v6t=s(NEe);SBr=r(v6t,"roberta"),v6t.forEach(t),RBr=r(CPe," \u2014 "),RY=n(CPe,"A",{href:!0});var T6t=s(RY);BBr=r(T6t,"FlaxRobertaForTokenClassification"),T6t.forEach(t),PBr=r(CPe," (RoBERTa model)"),CPe.forEach(t),IBr=i(vo),oA=n(vo,"LI",{});var wPe=s(oA);jEe=n(wPe,"STRONG",{});var M6t=s(jEe);qBr=r(M6t,"roformer"),M6t.forEach(t),NBr=r(wPe," \u2014 "),BY=n(wPe,"A",{href:!0});var E6t=s(BY);jBr=r(E6t,"FlaxRoFormerForTokenClassification"),E6t.forEach(t),DBr=r(wPe," (RoFormer model)"),wPe.forEach(t),GBr=i(vo),rA=n(vo,"LI",{});var APe=s(rA);DEe=n(APe,"STRONG",{});var C6t=s(DEe);OBr=r(C6t,"xlm-roberta"),C6t.forEach(t),VBr=r(APe," \u2014 "),PY=n(APe,"A",{href:!0});var w6t=s(PY);XBr=r(w6t,"FlaxXLMRobertaForTokenClassification"),w6t.forEach(t),zBr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),vo.forEach(t),QBr=i(Zl),T(tA.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Bqe=i(m),Jc=n(m,"H2",{class:!0});var Gje=s(Jc);aA=n(Gje,"A",{id:!0,class:!0,href:!0});var A6t=s(aA);GEe=n(A6t,"SPAN",{});var y6t=s(GEe);T(P7.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),WBr=i(Gje),OEe=n(Gje,"SPAN",{});var L6t=s(OEe);HBr=r(L6t,"FlaxAutoModelForMultipleChoice"),L6t.forEach(t),Gje.forEach(t),Pqe=i(m),Fr=n(m,"DIV",{class:!0});var ei=s(Fr);T(I7.$$.fragment,ei),UBr=i(ei),Yc=n(ei,"P",{});var XZ=s(Yc);JBr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=n(XZ,"A",{href:!0});var x6t=s(IY);YBr=r(x6t,"from_pretrained()"),x6t.forEach(t),KBr=r(XZ," class method or the "),qY=n(XZ,"A",{href:!0});var $6t=s(qY);ZBr=r($6t,"from_config()"),$6t.forEach(t),ePr=r(XZ,` class
method.`),XZ.forEach(t),oPr=i(ei),q7=n(ei,"P",{});var Oje=s(q7);rPr=r(Oje,"This class cannot be instantiated directly using "),VEe=n(Oje,"CODE",{});var k6t=s(VEe);tPr=r(k6t,"__init__()"),k6t.forEach(t),aPr=r(Oje," (throws an error)."),Oje.forEach(t),nPr=i(ei),Wt=n(ei,"DIV",{class:!0});var j0=s(Wt);T(N7.$$.fragment,j0),sPr=i(j0),XEe=n(j0,"P",{});var S6t=s(XEe);lPr=r(S6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S6t.forEach(t),iPr=i(j0),Kc=n(j0,"P",{});var zZ=s(Kc);dPr=r(zZ,`Note:
Loading a model from its configuration file does `),zEe=n(zZ,"STRONG",{});var R6t=s(zEe);cPr=r(R6t,"not"),R6t.forEach(t),mPr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(zZ,"A",{href:!0});var B6t=s(NY);fPr=r(B6t,"from_pretrained()"),B6t.forEach(t),gPr=r(zZ," to load the model weights."),zZ.forEach(t),hPr=i(j0),T(nA.$$.fragment,j0),j0.forEach(t),uPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(j7.$$.fragment,oi),pPr=i(oi),QEe=n(oi,"P",{});var P6t=s(QEe);_Pr=r(P6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P6t.forEach(t),bPr=i(oi),Mn=n(oi,"P",{});var D0=s(Mn);FPr=r(D0,"The model class to instantiate is selected based on the "),WEe=n(D0,"CODE",{});var I6t=s(WEe);vPr=r(I6t,"model_type"),I6t.forEach(t),TPr=r(D0,` property of the config object (either
passed as an argument or loaded from `),HEe=n(D0,"CODE",{});var q6t=s(HEe);MPr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),EPr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(D0,"CODE",{});var N6t=s(UEe);CPr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),wPr=r(D0,":"),D0.forEach(t),APr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);sA=n(To,"LI",{});var yPe=s(sA);JEe=n(yPe,"STRONG",{});var j6t=s(JEe);yPr=r(j6t,"albert"),j6t.forEach(t),LPr=r(yPe," \u2014 "),jY=n(yPe,"A",{href:!0});var D6t=s(jY);xPr=r(D6t,"FlaxAlbertForMultipleChoice"),D6t.forEach(t),$Pr=r(yPe," (ALBERT model)"),yPe.forEach(t),kPr=i(To),lA=n(To,"LI",{});var LPe=s(lA);YEe=n(LPe,"STRONG",{});var G6t=s(YEe);SPr=r(G6t,"bert"),G6t.forEach(t),RPr=r(LPe," \u2014 "),DY=n(LPe,"A",{href:!0});var O6t=s(DY);BPr=r(O6t,"FlaxBertForMultipleChoice"),O6t.forEach(t),PPr=r(LPe," (BERT model)"),LPe.forEach(t),IPr=i(To),iA=n(To,"LI",{});var xPe=s(iA);KEe=n(xPe,"STRONG",{});var V6t=s(KEe);qPr=r(V6t,"big_bird"),V6t.forEach(t),NPr=r(xPe," \u2014 "),GY=n(xPe,"A",{href:!0});var X6t=s(GY);jPr=r(X6t,"FlaxBigBirdForMultipleChoice"),X6t.forEach(t),DPr=r(xPe," (BigBird model)"),xPe.forEach(t),GPr=i(To),dA=n(To,"LI",{});var $Pe=s(dA);ZEe=n($Pe,"STRONG",{});var z6t=s(ZEe);OPr=r(z6t,"distilbert"),z6t.forEach(t),VPr=r($Pe," \u2014 "),OY=n($Pe,"A",{href:!0});var Q6t=s(OY);XPr=r(Q6t,"FlaxDistilBertForMultipleChoice"),Q6t.forEach(t),zPr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),QPr=i(To),cA=n(To,"LI",{});var kPe=s(cA);e5e=n(kPe,"STRONG",{});var W6t=s(e5e);WPr=r(W6t,"electra"),W6t.forEach(t),HPr=r(kPe," \u2014 "),VY=n(kPe,"A",{href:!0});var H6t=s(VY);UPr=r(H6t,"FlaxElectraForMultipleChoice"),H6t.forEach(t),JPr=r(kPe," (ELECTRA model)"),kPe.forEach(t),YPr=i(To),mA=n(To,"LI",{});var SPe=s(mA);o5e=n(SPe,"STRONG",{});var U6t=s(o5e);KPr=r(U6t,"roberta"),U6t.forEach(t),ZPr=r(SPe," \u2014 "),XY=n(SPe,"A",{href:!0});var J6t=s(XY);eIr=r(J6t,"FlaxRobertaForMultipleChoice"),J6t.forEach(t),oIr=r(SPe," (RoBERTa model)"),SPe.forEach(t),rIr=i(To),fA=n(To,"LI",{});var RPe=s(fA);r5e=n(RPe,"STRONG",{});var Y6t=s(r5e);tIr=r(Y6t,"roformer"),Y6t.forEach(t),aIr=r(RPe," \u2014 "),zY=n(RPe,"A",{href:!0});var K6t=s(zY);nIr=r(K6t,"FlaxRoFormerForMultipleChoice"),K6t.forEach(t),sIr=r(RPe," (RoFormer model)"),RPe.forEach(t),lIr=i(To),gA=n(To,"LI",{});var BPe=s(gA);t5e=n(BPe,"STRONG",{});var Z6t=s(t5e);iIr=r(Z6t,"xlm-roberta"),Z6t.forEach(t),dIr=r(BPe," \u2014 "),QY=n(BPe,"A",{href:!0});var e0t=s(QY);cIr=r(e0t,"FlaxXLMRobertaForMultipleChoice"),e0t.forEach(t),mIr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),To.forEach(t),fIr=i(oi),T(hA.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Iqe=i(m),Zc=n(m,"H2",{class:!0});var Vje=s(Zc);uA=n(Vje,"A",{id:!0,class:!0,href:!0});var o0t=s(uA);a5e=n(o0t,"SPAN",{});var r0t=s(a5e);T(D7.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),gIr=i(Vje),n5e=n(Vje,"SPAN",{});var t0t=s(n5e);hIr=r(t0t,"FlaxAutoModelForNextSentencePrediction"),t0t.forEach(t),Vje.forEach(t),qqe=i(m),vr=n(m,"DIV",{class:!0});var ri=s(vr);T(G7.$$.fragment,ri),uIr=i(ri),em=n(ri,"P",{});var QZ=s(em);pIr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(QZ,"A",{href:!0});var a0t=s(WY);_Ir=r(a0t,"from_pretrained()"),a0t.forEach(t),bIr=r(QZ," class method or the "),HY=n(QZ,"A",{href:!0});var n0t=s(HY);FIr=r(n0t,"from_config()"),n0t.forEach(t),vIr=r(QZ,` class
method.`),QZ.forEach(t),TIr=i(ri),O7=n(ri,"P",{});var Xje=s(O7);MIr=r(Xje,"This class cannot be instantiated directly using "),s5e=n(Xje,"CODE",{});var s0t=s(s5e);EIr=r(s0t,"__init__()"),s0t.forEach(t),CIr=r(Xje," (throws an error)."),Xje.forEach(t),wIr=i(ri),Ht=n(ri,"DIV",{class:!0});var G0=s(Ht);T(V7.$$.fragment,G0),AIr=i(G0),l5e=n(G0,"P",{});var l0t=s(l5e);yIr=r(l0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l0t.forEach(t),LIr=i(G0),om=n(G0,"P",{});var WZ=s(om);xIr=r(WZ,`Note:
Loading a model from its configuration file does `),i5e=n(WZ,"STRONG",{});var i0t=s(i5e);$Ir=r(i0t,"not"),i0t.forEach(t),kIr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(WZ,"A",{href:!0});var d0t=s(UY);SIr=r(d0t,"from_pretrained()"),d0t.forEach(t),RIr=r(WZ," to load the model weights."),WZ.forEach(t),BIr=i(G0),T(pA.$$.fragment,G0),G0.forEach(t),PIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(X7.$$.fragment,ti),IIr=i(ti),d5e=n(ti,"P",{});var c0t=s(d5e);qIr=r(c0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c0t.forEach(t),NIr=i(ti),En=n(ti,"P",{});var O0=s(En);jIr=r(O0,"The model class to instantiate is selected based on the "),c5e=n(O0,"CODE",{});var m0t=s(c5e);DIr=r(m0t,"model_type"),m0t.forEach(t),GIr=r(O0,` property of the config object (either
passed as an argument or loaded from `),m5e=n(O0,"CODE",{});var f0t=s(m5e);OIr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),VIr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(O0,"CODE",{});var g0t=s(f5e);XIr=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),zIr=r(O0,":"),O0.forEach(t),QIr=i(ti),g5e=n(ti,"UL",{});var h0t=s(g5e);_A=n(h0t,"LI",{});var PPe=s(_A);h5e=n(PPe,"STRONG",{});var u0t=s(h5e);WIr=r(u0t,"bert"),u0t.forEach(t),HIr=r(PPe," \u2014 "),JY=n(PPe,"A",{href:!0});var p0t=s(JY);UIr=r(p0t,"FlaxBertForNextSentencePrediction"),p0t.forEach(t),JIr=r(PPe," (BERT model)"),PPe.forEach(t),h0t.forEach(t),YIr=i(ti),T(bA.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Nqe=i(m),rm=n(m,"H2",{class:!0});var zje=s(rm);FA=n(zje,"A",{id:!0,class:!0,href:!0});var _0t=s(FA);u5e=n(_0t,"SPAN",{});var b0t=s(u5e);T(z7.$$.fragment,b0t),b0t.forEach(t),_0t.forEach(t),KIr=i(zje),p5e=n(zje,"SPAN",{});var F0t=s(p5e);ZIr=r(F0t,"FlaxAutoModelForImageClassification"),F0t.forEach(t),zje.forEach(t),jqe=i(m),Tr=n(m,"DIV",{class:!0});var ai=s(Tr);T(Q7.$$.fragment,ai),eqr=i(ai),tm=n(ai,"P",{});var HZ=s(tm);oqr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=n(HZ,"A",{href:!0});var v0t=s(YY);rqr=r(v0t,"from_pretrained()"),v0t.forEach(t),tqr=r(HZ," class method or the "),KY=n(HZ,"A",{href:!0});var T0t=s(KY);aqr=r(T0t,"from_config()"),T0t.forEach(t),nqr=r(HZ,` class
method.`),HZ.forEach(t),sqr=i(ai),W7=n(ai,"P",{});var Qje=s(W7);lqr=r(Qje,"This class cannot be instantiated directly using "),_5e=n(Qje,"CODE",{});var M0t=s(_5e);iqr=r(M0t,"__init__()"),M0t.forEach(t),dqr=r(Qje," (throws an error)."),Qje.forEach(t),cqr=i(ai),Ut=n(ai,"DIV",{class:!0});var V0=s(Ut);T(H7.$$.fragment,V0),mqr=i(V0),b5e=n(V0,"P",{});var E0t=s(b5e);fqr=r(E0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E0t.forEach(t),gqr=i(V0),am=n(V0,"P",{});var UZ=s(am);hqr=r(UZ,`Note:
Loading a model from its configuration file does `),F5e=n(UZ,"STRONG",{});var C0t=s(F5e);uqr=r(C0t,"not"),C0t.forEach(t),pqr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(UZ,"A",{href:!0});var w0t=s(ZY);_qr=r(w0t,"from_pretrained()"),w0t.forEach(t),bqr=r(UZ," to load the model weights."),UZ.forEach(t),Fqr=i(V0),T(vA.$$.fragment,V0),V0.forEach(t),vqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(U7.$$.fragment,ni),Tqr=i(ni),v5e=n(ni,"P",{});var A0t=s(v5e);Mqr=r(A0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A0t.forEach(t),Eqr=i(ni),Cn=n(ni,"P",{});var X0=s(Cn);Cqr=r(X0,"The model class to instantiate is selected based on the "),T5e=n(X0,"CODE",{});var y0t=s(T5e);wqr=r(y0t,"model_type"),y0t.forEach(t),Aqr=r(X0,` property of the config object (either
passed as an argument or loaded from `),M5e=n(X0,"CODE",{});var L0t=s(M5e);yqr=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),Lqr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(X0,"CODE",{});var x0t=s(E5e);xqr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),$qr=r(X0,":"),X0.forEach(t),kqr=i(ni),J7=n(ni,"UL",{});var Wje=s(J7);TA=n(Wje,"LI",{});var IPe=s(TA);C5e=n(IPe,"STRONG",{});var $0t=s(C5e);Sqr=r($0t,"beit"),$0t.forEach(t),Rqr=r(IPe," \u2014 "),eK=n(IPe,"A",{href:!0});var k0t=s(eK);Bqr=r(k0t,"FlaxBeitForImageClassification"),k0t.forEach(t),Pqr=r(IPe," (BEiT model)"),IPe.forEach(t),Iqr=i(Wje),MA=n(Wje,"LI",{});var qPe=s(MA);w5e=n(qPe,"STRONG",{});var S0t=s(w5e);qqr=r(S0t,"vit"),S0t.forEach(t),Nqr=r(qPe," \u2014 "),oK=n(qPe,"A",{href:!0});var R0t=s(oK);jqr=r(R0t,"FlaxViTForImageClassification"),R0t.forEach(t),Dqr=r(qPe," (ViT model)"),qPe.forEach(t),Wje.forEach(t),Gqr=i(ni),T(EA.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Dqe=i(m),nm=n(m,"H2",{class:!0});var Hje=s(nm);CA=n(Hje,"A",{id:!0,class:!0,href:!0});var B0t=s(CA);A5e=n(B0t,"SPAN",{});var P0t=s(A5e);T(Y7.$$.fragment,P0t),P0t.forEach(t),B0t.forEach(t),Oqr=i(Hje),y5e=n(Hje,"SPAN",{});var I0t=s(y5e);Vqr=r(I0t,"FlaxAutoModelForVision2Seq"),I0t.forEach(t),Hje.forEach(t),Gqe=i(m),Mr=n(m,"DIV",{class:!0});var si=s(Mr);T(K7.$$.fragment,si),Xqr=i(si),sm=n(si,"P",{});var JZ=s(sm);zqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=n(JZ,"A",{href:!0});var q0t=s(rK);Qqr=r(q0t,"from_pretrained()"),q0t.forEach(t),Wqr=r(JZ," class method or the "),tK=n(JZ,"A",{href:!0});var N0t=s(tK);Hqr=r(N0t,"from_config()"),N0t.forEach(t),Uqr=r(JZ,` class
method.`),JZ.forEach(t),Jqr=i(si),Z7=n(si,"P",{});var Uje=s(Z7);Yqr=r(Uje,"This class cannot be instantiated directly using "),L5e=n(Uje,"CODE",{});var j0t=s(L5e);Kqr=r(j0t,"__init__()"),j0t.forEach(t),Zqr=r(Uje," (throws an error)."),Uje.forEach(t),eNr=i(si),Jt=n(si,"DIV",{class:!0});var z0=s(Jt);T(e9.$$.fragment,z0),oNr=i(z0),x5e=n(z0,"P",{});var D0t=s(x5e);rNr=r(D0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),D0t.forEach(t),tNr=i(z0),lm=n(z0,"P",{});var YZ=s(lm);aNr=r(YZ,`Note:
Loading a model from its configuration file does `),$5e=n(YZ,"STRONG",{});var G0t=s($5e);nNr=r(G0t,"not"),G0t.forEach(t),sNr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(YZ,"A",{href:!0});var O0t=s(aK);lNr=r(O0t,"from_pretrained()"),O0t.forEach(t),iNr=r(YZ," to load the model weights."),YZ.forEach(t),dNr=i(z0),T(wA.$$.fragment,z0),z0.forEach(t),cNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(o9.$$.fragment,li),mNr=i(li),k5e=n(li,"P",{});var V0t=s(k5e);fNr=r(V0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V0t.forEach(t),gNr=i(li),wn=n(li,"P",{});var Q0=s(wn);hNr=r(Q0,"The model class to instantiate is selected based on the "),S5e=n(Q0,"CODE",{});var X0t=s(S5e);uNr=r(X0t,"model_type"),X0t.forEach(t),pNr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),R5e=n(Q0,"CODE",{});var z0t=s(R5e);_Nr=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),bNr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(Q0,"CODE",{});var Q0t=s(B5e);FNr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),vNr=r(Q0,":"),Q0.forEach(t),TNr=i(li),P5e=n(li,"UL",{});var W0t=s(P5e);AA=n(W0t,"LI",{});var NPe=s(AA);I5e=n(NPe,"STRONG",{});var H0t=s(I5e);MNr=r(H0t,"vision-encoder-decoder"),H0t.forEach(t),ENr=r(NPe," \u2014 "),nK=n(NPe,"A",{href:!0});var U0t=s(nK);CNr=r(U0t,"FlaxVisionEncoderDecoderModel"),U0t.forEach(t),wNr=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),W0t.forEach(t),ANr=i(li),T(yA.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZLt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(um,"id","extending-the-auto-classes"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(_m,"id","transformers.AutoConfig"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(v$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($k,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Uk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(_S,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(FS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(TS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(MS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ES,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(AS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(yS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($S,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(fR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(WR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(Fi,"class","relative group"),c(JB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(fP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(pP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_P,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(MP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(CP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(AP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(xP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c($P,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(kP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(BP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(PP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(qP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(GP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(OP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(VP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(XP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(zP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(QP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(HP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(UP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(JP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(YP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(KP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(eI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(oI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(nI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(iI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(dI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(cI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(fI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(gI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(hI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(uI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(pI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(_I,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(bI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(vI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(TI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(EI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(CI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(wI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(xI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c($I,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(kI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(SI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(RI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(BI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(II,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(qI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(jI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(DI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(OI,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(VI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(XI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(zI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(QI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(HI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(UI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(JI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(YI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(KI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(eq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(oq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(rq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(tq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(aq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(nq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(lq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(dq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(cq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(mq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(fq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(uq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(pq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_q,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(vq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(wq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(yq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(xq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"id","transformers.AutoModelForPreTraining"),c(Ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ip,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c($q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Iq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Xq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(nN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(fN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_N,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(FN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(EN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(CN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(AN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($N,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(SN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(RN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(PN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(IN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(qN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(NN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(GN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(ON,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(VN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(XN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(QN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(WN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(HN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(UN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(JN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(KN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ej,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMaskedLM"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ij,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(vj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForSeq2SeqLM"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Gj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Qj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Wj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Hj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Yj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Kj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForSequenceClassification"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(sD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(pD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_D,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(FD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(vD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ED,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForMultipleChoice"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(oG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(fG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(pG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(_G,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(vG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(EG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($G,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForNextSentencePrediction"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTokenClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(GG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(EO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(LO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(xO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c($O,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(kO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(SO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(RO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(NO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(jO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(DO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(GO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(OO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(VO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForTableQuestionAnswering"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(mV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S1,"id","transformers.AutoModelForImageClassification"),c(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S1,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(EV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($V,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForVision2Seq"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForAudioClassification"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(NV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForAudioFrameClassification"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForCTC"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(lX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(iX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForSpeechSeq2Seq"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(_X,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForAudioXVector"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForAudioXVector"),c(Fd,"class","relative group"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForMaskedImageModeling"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(wX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($X,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForObjectDetection"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(PX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForImageSegmentation"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForSemanticSegmentation"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(XX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(QX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForInstanceSegmentation"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(oz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(rz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(tz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(az,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(sz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(lz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(iz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(dz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(fz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(pz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_z,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(bz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(vz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(wz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Az,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(yz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c($z,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(kz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qz,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(jz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Xz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(zz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.TFAutoModelForPreTraining"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Yz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Kz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Zz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(pQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForCausalLM"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForImageClassification"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForMaskedLM"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(uW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_W,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(FW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSequenceClassification"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.TFAutoModelForMultipleChoice"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_H,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.TFAutoModelForTokenClassification"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForQuestionAnswering"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(mU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(fU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(uU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(pU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_U,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForVision2Seq"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModel"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(SU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(RU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(BU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qU,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(DU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(XU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(JU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(KU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.FlaxAutoModelForCausalLM"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(iJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(mJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(fJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForPreTraining"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_J,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(FJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(vJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForMaskedLM"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(BJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(QJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(pY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(FY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(vY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForTokenClassification"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(aA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(QY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FA,"id","transformers.FlaxAutoModelForImageClassification"),c(FA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FA,"href","#transformers.FlaxAutoModelForImageClassification"),c(rm,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CA,"id","transformers.FlaxAutoModelForVision2Seq"),c(CA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nm,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,ii),b(m,mm,_),b(m,et,_),e(et,di),e(et,ci),e(ci,W0),e(et,fm),b(m,qe,_),b(m,Xe,_),e(Xe,mi),e(Xe,yn),e(yn,H0),e(Xe,Ln),e(Xe,xn),e(xn,U0),e(Xe,fi),e(Xe,$n),e($n,J0),e(Xe,gi),b(m,gm,_),M(Ma,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,h$),e(Ae,hi),e(hi,u$),e(Ae,p$),b(m,Eo,_),b(m,Ea,_),e(Ea,_$),e(Ea,hm),e(hm,b$),e(Ea,Jje),b(m,jPe,_),b(m,ui,_),e(ui,um),e(um,KZ),M(Y0,KZ,null),e(ui,Yje),e(ui,ZZ),e(ZZ,Kje),b(m,DPe,_),b(m,kn,_),e(kn,Zje),e(kn,eee),e(eee,eDe),e(kn,oDe),e(kn,oee),e(oee,rDe),e(kn,tDe),b(m,GPe,_),M(K0,m,_),b(m,OPe,_),b(m,F$,_),e(F$,aDe),b(m,VPe,_),M(pm,m,_),b(m,XPe,_),b(m,pi,_),e(pi,_m),e(_m,ree),M(Z0,ree,null),e(pi,nDe),e(pi,tee),e(tee,sDe),b(m,zPe,_),b(m,Co,_),M(ey,Co,null),e(Co,lDe),e(Co,oy),e(oy,iDe),e(oy,v$),e(v$,dDe),e(oy,cDe),e(Co,mDe),e(Co,ry),e(ry,fDe),e(ry,aee),e(aee,gDe),e(ry,hDe),e(Co,uDe),e(Co,Er),M(ty,Er,null),e(Er,pDe),e(Er,nee),e(nee,_De),e(Er,bDe),e(Er,_i),e(_i,FDe),e(_i,see),e(see,vDe),e(_i,TDe),e(_i,lee),e(lee,MDe),e(_i,EDe),e(Er,CDe),e(Er,y),e(y,bm),e(bm,iee),e(iee,wDe),e(bm,ADe),e(bm,T$),e(T$,yDe),e(bm,LDe),e(y,xDe),e(y,Fm),e(Fm,dee),e(dee,$De),e(Fm,kDe),e(Fm,M$),e(M$,SDe),e(Fm,RDe),e(y,BDe),e(y,vm),e(vm,cee),e(cee,PDe),e(vm,IDe),e(vm,E$),e(E$,qDe),e(vm,NDe),e(y,jDe),e(y,Tm),e(Tm,mee),e(mee,DDe),e(Tm,GDe),e(Tm,C$),e(C$,ODe),e(Tm,VDe),e(y,XDe),e(y,Mm),e(Mm,fee),e(fee,zDe),e(Mm,QDe),e(Mm,w$),e(w$,WDe),e(Mm,HDe),e(y,UDe),e(y,Em),e(Em,gee),e(gee,JDe),e(Em,YDe),e(Em,A$),e(A$,KDe),e(Em,ZDe),e(y,eGe),e(y,Cm),e(Cm,hee),e(hee,oGe),e(Cm,rGe),e(Cm,y$),e(y$,tGe),e(Cm,aGe),e(y,nGe),e(y,wm),e(wm,uee),e(uee,sGe),e(wm,lGe),e(wm,L$),e(L$,iGe),e(wm,dGe),e(y,cGe),e(y,Am),e(Am,pee),e(pee,mGe),e(Am,fGe),e(Am,x$),e(x$,gGe),e(Am,hGe),e(y,uGe),e(y,ym),e(ym,_ee),e(_ee,pGe),e(ym,_Ge),e(ym,$$),e($$,bGe),e(ym,FGe),e(y,vGe),e(y,Lm),e(Lm,bee),e(bee,TGe),e(Lm,MGe),e(Lm,k$),e(k$,EGe),e(Lm,CGe),e(y,wGe),e(y,xm),e(xm,Fee),e(Fee,AGe),e(xm,yGe),e(xm,S$),e(S$,LGe),e(xm,xGe),e(y,$Ge),e(y,$m),e($m,vee),e(vee,kGe),e($m,SGe),e($m,R$),e(R$,RGe),e($m,BGe),e(y,PGe),e(y,km),e(km,Tee),e(Tee,IGe),e(km,qGe),e(km,B$),e(B$,NGe),e(km,jGe),e(y,DGe),e(y,Sm),e(Sm,Mee),e(Mee,GGe),e(Sm,OGe),e(Sm,P$),e(P$,VGe),e(Sm,XGe),e(y,zGe),e(y,Rm),e(Rm,Eee),e(Eee,QGe),e(Rm,WGe),e(Rm,I$),e(I$,HGe),e(Rm,UGe),e(y,JGe),e(y,Bm),e(Bm,Cee),e(Cee,YGe),e(Bm,KGe),e(Bm,q$),e(q$,ZGe),e(Bm,eOe),e(y,oOe),e(y,Pm),e(Pm,wee),e(wee,rOe),e(Pm,tOe),e(Pm,N$),e(N$,aOe),e(Pm,nOe),e(y,sOe),e(y,Im),e(Im,Aee),e(Aee,lOe),e(Im,iOe),e(Im,j$),e(j$,dOe),e(Im,cOe),e(y,mOe),e(y,qm),e(qm,yee),e(yee,fOe),e(qm,gOe),e(qm,D$),e(D$,hOe),e(qm,uOe),e(y,pOe),e(y,Nm),e(Nm,Lee),e(Lee,_Oe),e(Nm,bOe),e(Nm,G$),e(G$,FOe),e(Nm,vOe),e(y,TOe),e(y,jm),e(jm,xee),e(xee,MOe),e(jm,EOe),e(jm,O$),e(O$,COe),e(jm,wOe),e(y,AOe),e(y,Dm),e(Dm,$ee),e($ee,yOe),e(Dm,LOe),e(Dm,V$),e(V$,xOe),e(Dm,$Oe),e(y,kOe),e(y,Gm),e(Gm,kee),e(kee,SOe),e(Gm,ROe),e(Gm,X$),e(X$,BOe),e(Gm,POe),e(y,IOe),e(y,Om),e(Om,See),e(See,qOe),e(Om,NOe),e(Om,z$),e(z$,jOe),e(Om,DOe),e(y,GOe),e(y,Vm),e(Vm,Ree),e(Ree,OOe),e(Vm,VOe),e(Vm,Q$),e(Q$,XOe),e(Vm,zOe),e(y,QOe),e(y,Xm),e(Xm,Bee),e(Bee,WOe),e(Xm,HOe),e(Xm,W$),e(W$,UOe),e(Xm,JOe),e(y,YOe),e(y,zm),e(zm,Pee),e(Pee,KOe),e(zm,ZOe),e(zm,H$),e(H$,eVe),e(zm,oVe),e(y,rVe),e(y,Qm),e(Qm,Iee),e(Iee,tVe),e(Qm,aVe),e(Qm,U$),e(U$,nVe),e(Qm,sVe),e(y,lVe),e(y,Wm),e(Wm,qee),e(qee,iVe),e(Wm,dVe),e(Wm,J$),e(J$,cVe),e(Wm,mVe),e(y,fVe),e(y,Hm),e(Hm,Nee),e(Nee,gVe),e(Hm,hVe),e(Hm,Y$),e(Y$,uVe),e(Hm,pVe),e(y,_Ve),e(y,Um),e(Um,jee),e(jee,bVe),e(Um,FVe),e(Um,K$),e(K$,vVe),e(Um,TVe),e(y,MVe),e(y,Jm),e(Jm,Dee),e(Dee,EVe),e(Jm,CVe),e(Jm,Z$),e(Z$,wVe),e(Jm,AVe),e(y,yVe),e(y,Ym),e(Ym,Gee),e(Gee,LVe),e(Ym,xVe),e(Ym,ek),e(ek,$Ve),e(Ym,kVe),e(y,SVe),e(y,Km),e(Km,Oee),e(Oee,RVe),e(Km,BVe),e(Km,ok),e(ok,PVe),e(Km,IVe),e(y,qVe),e(y,Zm),e(Zm,Vee),e(Vee,NVe),e(Zm,jVe),e(Zm,rk),e(rk,DVe),e(Zm,GVe),e(y,OVe),e(y,ef),e(ef,Xee),e(Xee,VVe),e(ef,XVe),e(ef,tk),e(tk,zVe),e(ef,QVe),e(y,WVe),e(y,of),e(of,zee),e(zee,HVe),e(of,UVe),e(of,ak),e(ak,JVe),e(of,YVe),e(y,KVe),e(y,rf),e(rf,Qee),e(Qee,ZVe),e(rf,eXe),e(rf,nk),e(nk,oXe),e(rf,rXe),e(y,tXe),e(y,tf),e(tf,Wee),e(Wee,aXe),e(tf,nXe),e(tf,sk),e(sk,sXe),e(tf,lXe),e(y,iXe),e(y,af),e(af,Hee),e(Hee,dXe),e(af,cXe),e(af,lk),e(lk,mXe),e(af,fXe),e(y,gXe),e(y,nf),e(nf,Uee),e(Uee,hXe),e(nf,uXe),e(nf,ik),e(ik,pXe),e(nf,_Xe),e(y,bXe),e(y,sf),e(sf,Jee),e(Jee,FXe),e(sf,vXe),e(sf,dk),e(dk,TXe),e(sf,MXe),e(y,EXe),e(y,lf),e(lf,Yee),e(Yee,CXe),e(lf,wXe),e(lf,ck),e(ck,AXe),e(lf,yXe),e(y,LXe),e(y,df),e(df,Kee),e(Kee,xXe),e(df,$Xe),e(df,mk),e(mk,kXe),e(df,SXe),e(y,RXe),e(y,cf),e(cf,Zee),e(Zee,BXe),e(cf,PXe),e(cf,fk),e(fk,IXe),e(cf,qXe),e(y,NXe),e(y,mf),e(mf,eoe),e(eoe,jXe),e(mf,DXe),e(mf,gk),e(gk,GXe),e(mf,OXe),e(y,VXe),e(y,ff),e(ff,ooe),e(ooe,XXe),e(ff,zXe),e(ff,hk),e(hk,QXe),e(ff,WXe),e(y,HXe),e(y,gf),e(gf,roe),e(roe,UXe),e(gf,JXe),e(gf,uk),e(uk,YXe),e(gf,KXe),e(y,ZXe),e(y,hf),e(hf,toe),e(toe,eze),e(hf,oze),e(hf,pk),e(pk,rze),e(hf,tze),e(y,aze),e(y,uf),e(uf,aoe),e(aoe,nze),e(uf,sze),e(uf,_k),e(_k,lze),e(uf,ize),e(y,dze),e(y,pf),e(pf,noe),e(noe,cze),e(pf,mze),e(pf,bk),e(bk,fze),e(pf,gze),e(y,hze),e(y,_f),e(_f,soe),e(soe,uze),e(_f,pze),e(_f,Fk),e(Fk,_ze),e(_f,bze),e(y,Fze),e(y,bf),e(bf,loe),e(loe,vze),e(bf,Tze),e(bf,vk),e(vk,Mze),e(bf,Eze),e(y,Cze),e(y,Ff),e(Ff,ioe),e(ioe,wze),e(Ff,Aze),e(Ff,Tk),e(Tk,yze),e(Ff,Lze),e(y,xze),e(y,vf),e(vf,doe),e(doe,$ze),e(vf,kze),e(vf,Mk),e(Mk,Sze),e(vf,Rze),e(y,Bze),e(y,Tf),e(Tf,coe),e(coe,Pze),e(Tf,Ize),e(Tf,Ek),e(Ek,qze),e(Tf,Nze),e(y,jze),e(y,Mf),e(Mf,moe),e(moe,Dze),e(Mf,Gze),e(Mf,Ck),e(Ck,Oze),e(Mf,Vze),e(y,Xze),e(y,Ef),e(Ef,foe),e(foe,zze),e(Ef,Qze),e(Ef,wk),e(wk,Wze),e(Ef,Hze),e(y,Uze),e(y,Cf),e(Cf,goe),e(goe,Jze),e(Cf,Yze),e(Cf,Ak),e(Ak,Kze),e(Cf,Zze),e(y,eQe),e(y,wf),e(wf,hoe),e(hoe,oQe),e(wf,rQe),e(wf,yk),e(yk,tQe),e(wf,aQe),e(y,nQe),e(y,Af),e(Af,uoe),e(uoe,sQe),e(Af,lQe),e(Af,Lk),e(Lk,iQe),e(Af,dQe),e(y,cQe),e(y,yf),e(yf,poe),e(poe,mQe),e(yf,fQe),e(yf,xk),e(xk,gQe),e(yf,hQe),e(y,uQe),e(y,Lf),e(Lf,_oe),e(_oe,pQe),e(Lf,_Qe),e(Lf,$k),e($k,bQe),e(Lf,FQe),e(y,vQe),e(y,xf),e(xf,boe),e(boe,TQe),e(xf,MQe),e(xf,kk),e(kk,EQe),e(xf,CQe),e(y,wQe),e(y,$f),e($f,Foe),e(Foe,AQe),e($f,yQe),e($f,Sk),e(Sk,LQe),e($f,xQe),e(y,$Qe),e(y,kf),e(kf,voe),e(voe,kQe),e(kf,SQe),e(kf,Rk),e(Rk,RQe),e(kf,BQe),e(y,PQe),e(y,Sf),e(Sf,Toe),e(Toe,IQe),e(Sf,qQe),e(Sf,Bk),e(Bk,NQe),e(Sf,jQe),e(y,DQe),e(y,Rf),e(Rf,Moe),e(Moe,GQe),e(Rf,OQe),e(Rf,Pk),e(Pk,VQe),e(Rf,XQe),e(y,zQe),e(y,Bf),e(Bf,Eoe),e(Eoe,QQe),e(Bf,WQe),e(Bf,Ik),e(Ik,HQe),e(Bf,UQe),e(y,JQe),e(y,Pf),e(Pf,Coe),e(Coe,YQe),e(Pf,KQe),e(Pf,qk),e(qk,ZQe),e(Pf,eWe),e(y,oWe),e(y,If),e(If,woe),e(woe,rWe),e(If,tWe),e(If,Nk),e(Nk,aWe),e(If,nWe),e(y,sWe),e(y,qf),e(qf,Aoe),e(Aoe,lWe),e(qf,iWe),e(qf,jk),e(jk,dWe),e(qf,cWe),e(y,mWe),e(y,Nf),e(Nf,yoe),e(yoe,fWe),e(Nf,gWe),e(Nf,Dk),e(Dk,hWe),e(Nf,uWe),e(y,pWe),e(y,jf),e(jf,Loe),e(Loe,_We),e(jf,bWe),e(jf,Gk),e(Gk,FWe),e(jf,vWe),e(y,TWe),e(y,Df),e(Df,xoe),e(xoe,MWe),e(Df,EWe),e(Df,Ok),e(Ok,CWe),e(Df,wWe),e(y,AWe),e(y,Gf),e(Gf,$oe),e($oe,yWe),e(Gf,LWe),e(Gf,Vk),e(Vk,xWe),e(Gf,$We),e(y,kWe),e(y,Of),e(Of,koe),e(koe,SWe),e(Of,RWe),e(Of,Xk),e(Xk,BWe),e(Of,PWe),e(y,IWe),e(y,Vf),e(Vf,Soe),e(Soe,qWe),e(Vf,NWe),e(Vf,zk),e(zk,jWe),e(Vf,DWe),e(y,GWe),e(y,Xf),e(Xf,Roe),e(Roe,OWe),e(Xf,VWe),e(Xf,Qk),e(Qk,XWe),e(Xf,zWe),e(y,QWe),e(y,zf),e(zf,Boe),e(Boe,WWe),e(zf,HWe),e(zf,Wk),e(Wk,UWe),e(zf,JWe),e(y,YWe),e(y,Qf),e(Qf,Poe),e(Poe,KWe),e(Qf,ZWe),e(Qf,Hk),e(Hk,eHe),e(Qf,oHe),e(y,rHe),e(y,Wf),e(Wf,Ioe),e(Ioe,tHe),e(Wf,aHe),e(Wf,Uk),e(Uk,nHe),e(Wf,sHe),e(y,lHe),e(y,Hf),e(Hf,qoe),e(qoe,iHe),e(Hf,dHe),e(Hf,Jk),e(Jk,cHe),e(Hf,mHe),e(y,fHe),e(y,Uf),e(Uf,Noe),e(Noe,gHe),e(Uf,hHe),e(Uf,Yk),e(Yk,uHe),e(Uf,pHe),e(y,_He),e(y,Jf),e(Jf,joe),e(joe,bHe),e(Jf,FHe),e(Jf,Kk),e(Kk,vHe),e(Jf,THe),e(y,MHe),e(y,Yf),e(Yf,Doe),e(Doe,EHe),e(Yf,CHe),e(Yf,Zk),e(Zk,wHe),e(Yf,AHe),e(y,yHe),e(y,Kf),e(Kf,Goe),e(Goe,LHe),e(Kf,xHe),e(Kf,eS),e(eS,$He),e(Kf,kHe),e(y,SHe),e(y,Zf),e(Zf,Ooe),e(Ooe,RHe),e(Zf,BHe),e(Zf,oS),e(oS,PHe),e(Zf,IHe),e(y,qHe),e(y,eg),e(eg,Voe),e(Voe,NHe),e(eg,jHe),e(eg,rS),e(rS,DHe),e(eg,GHe),e(y,OHe),e(y,og),e(og,Xoe),e(Xoe,VHe),e(og,XHe),e(og,tS),e(tS,zHe),e(og,QHe),e(y,WHe),e(y,rg),e(rg,zoe),e(zoe,HHe),e(rg,UHe),e(rg,aS),e(aS,JHe),e(rg,YHe),e(y,KHe),e(y,tg),e(tg,Qoe),e(Qoe,ZHe),e(tg,eUe),e(tg,nS),e(nS,oUe),e(tg,rUe),e(y,tUe),e(y,ag),e(ag,Woe),e(Woe,aUe),e(ag,nUe),e(ag,sS),e(sS,sUe),e(ag,lUe),e(y,iUe),e(y,ng),e(ng,Hoe),e(Hoe,dUe),e(ng,cUe),e(ng,lS),e(lS,mUe),e(ng,fUe),e(y,gUe),e(y,sg),e(sg,Uoe),e(Uoe,hUe),e(sg,uUe),e(sg,iS),e(iS,pUe),e(sg,_Ue),e(y,bUe),e(y,lg),e(lg,Joe),e(Joe,FUe),e(lg,vUe),e(lg,dS),e(dS,TUe),e(lg,MUe),e(y,EUe),e(y,ig),e(ig,Yoe),e(Yoe,CUe),e(ig,wUe),e(ig,cS),e(cS,AUe),e(ig,yUe),e(y,LUe),e(y,dg),e(dg,Koe),e(Koe,xUe),e(dg,$Ue),e(dg,mS),e(mS,kUe),e(dg,SUe),e(y,RUe),e(y,cg),e(cg,Zoe),e(Zoe,BUe),e(cg,PUe),e(cg,fS),e(fS,IUe),e(cg,qUe),e(y,NUe),e(y,mg),e(mg,ere),e(ere,jUe),e(mg,DUe),e(mg,gS),e(gS,GUe),e(mg,OUe),e(y,VUe),e(y,fg),e(fg,ore),e(ore,XUe),e(fg,zUe),e(fg,hS),e(hS,QUe),e(fg,WUe),e(y,HUe),e(y,gg),e(gg,rre),e(rre,UUe),e(gg,JUe),e(gg,uS),e(uS,YUe),e(gg,KUe),e(y,ZUe),e(y,hg),e(hg,tre),e(tre,eJe),e(hg,oJe),e(hg,pS),e(pS,rJe),e(hg,tJe),e(Er,aJe),M(ug,Er,null),e(Co,nJe),e(Co,pg),M(ay,pg,null),e(pg,sJe),e(pg,are),e(are,lJe),b(m,QPe,_),b(m,bi,_),e(bi,_g),e(_g,nre),M(ny,nre,null),e(bi,iJe),e(bi,sre),e(sre,dJe),b(m,WPe,_),b(m,wo,_),M(sy,wo,null),e(wo,cJe),e(wo,ly),e(ly,mJe),e(ly,_S),e(_S,fJe),e(ly,gJe),e(wo,hJe),e(wo,iy),e(iy,uJe),e(iy,lre),e(lre,pJe),e(iy,_Je),e(wo,bJe),e(wo,Cr),M(dy,Cr,null),e(Cr,FJe),e(Cr,ire),e(ire,vJe),e(Cr,TJe),e(Cr,Ca),e(Ca,MJe),e(Ca,dre),e(dre,EJe),e(Ca,CJe),e(Ca,cre),e(cre,wJe),e(Ca,AJe),e(Ca,mre),e(mre,yJe),e(Ca,LJe),e(Cr,xJe),e(Cr,k),e(k,Sn),e(Sn,fre),e(fre,$Je),e(Sn,kJe),e(Sn,bS),e(bS,SJe),e(Sn,RJe),e(Sn,FS),e(FS,BJe),e(Sn,PJe),e(k,IJe),e(k,Rn),e(Rn,gre),e(gre,qJe),e(Rn,NJe),e(Rn,vS),e(vS,jJe),e(Rn,DJe),e(Rn,TS),e(TS,GJe),e(Rn,OJe),e(k,VJe),e(k,Bn),e(Bn,hre),e(hre,XJe),e(Bn,zJe),e(Bn,MS),e(MS,QJe),e(Bn,WJe),e(Bn,ES),e(ES,HJe),e(Bn,UJe),e(k,JJe),e(k,bg),e(bg,ure),e(ure,YJe),e(bg,KJe),e(bg,CS),e(CS,ZJe),e(bg,eYe),e(k,oYe),e(k,Pn),e(Pn,pre),e(pre,rYe),e(Pn,tYe),e(Pn,wS),e(wS,aYe),e(Pn,nYe),e(Pn,AS),e(AS,sYe),e(Pn,lYe),e(k,iYe),e(k,Fg),e(Fg,_re),e(_re,dYe),e(Fg,cYe),e(Fg,yS),e(yS,mYe),e(Fg,fYe),e(k,gYe),e(k,vg),e(vg,bre),e(bre,hYe),e(vg,uYe),e(vg,LS),e(LS,pYe),e(vg,_Ye),e(k,bYe),e(k,Tg),e(Tg,Fre),e(Fre,FYe),e(Tg,vYe),e(Tg,xS),e(xS,TYe),e(Tg,MYe),e(k,EYe),e(k,In),e(In,vre),e(vre,CYe),e(In,wYe),e(In,$S),e($S,AYe),e(In,yYe),e(In,kS),e(kS,LYe),e(In,xYe),e(k,$Ye),e(k,qn),e(qn,Tre),e(Tre,kYe),e(qn,SYe),e(qn,SS),e(SS,RYe),e(qn,BYe),e(qn,RS),e(RS,PYe),e(qn,IYe),e(k,qYe),e(k,Nn),e(Nn,Mre),e(Mre,NYe),e(Nn,jYe),e(Nn,BS),e(BS,DYe),e(Nn,GYe),e(Nn,PS),e(PS,OYe),e(Nn,VYe),e(k,XYe),e(k,Mg),e(Mg,Ere),e(Ere,zYe),e(Mg,QYe),e(Mg,IS),e(IS,WYe),e(Mg,HYe),e(k,UYe),e(k,Eg),e(Eg,Cre),e(Cre,JYe),e(Eg,YYe),e(Eg,qS),e(qS,KYe),e(Eg,ZYe),e(k,eKe),e(k,jn),e(jn,wre),e(wre,oKe),e(jn,rKe),e(jn,NS),e(NS,tKe),e(jn,aKe),e(jn,jS),e(jS,nKe),e(jn,sKe),e(k,lKe),e(k,Cg),e(Cg,Are),e(Are,iKe),e(Cg,dKe),e(Cg,DS),e(DS,cKe),e(Cg,mKe),e(k,fKe),e(k,Dn),e(Dn,yre),e(yre,gKe),e(Dn,hKe),e(Dn,GS),e(GS,uKe),e(Dn,pKe),e(Dn,OS),e(OS,_Ke),e(Dn,bKe),e(k,FKe),e(k,Gn),e(Gn,Lre),e(Lre,vKe),e(Gn,TKe),e(Gn,VS),e(VS,MKe),e(Gn,EKe),e(Gn,XS),e(XS,CKe),e(Gn,wKe),e(k,AKe),e(k,On),e(On,xre),e(xre,yKe),e(On,LKe),e(On,zS),e(zS,xKe),e(On,$Ke),e(On,QS),e(QS,kKe),e(On,SKe),e(k,RKe),e(k,wg),e(wg,$re),e($re,BKe),e(wg,PKe),e(wg,WS),e(WS,IKe),e(wg,qKe),e(k,NKe),e(k,Vn),e(Vn,kre),e(kre,jKe),e(Vn,DKe),e(Vn,HS),e(HS,GKe),e(Vn,OKe),e(Vn,US),e(US,VKe),e(Vn,XKe),e(k,zKe),e(k,Xn),e(Xn,Sre),e(Sre,QKe),e(Xn,WKe),e(Xn,JS),e(JS,HKe),e(Xn,UKe),e(Xn,YS),e(YS,JKe),e(Xn,YKe),e(k,KKe),e(k,zn),e(zn,Rre),e(Rre,ZKe),e(zn,eZe),e(zn,KS),e(KS,oZe),e(zn,rZe),e(zn,ZS),e(ZS,tZe),e(zn,aZe),e(k,nZe),e(k,Qn),e(Qn,Bre),e(Bre,sZe),e(Qn,lZe),e(Qn,eR),e(eR,iZe),e(Qn,dZe),e(Qn,oR),e(oR,cZe),e(Qn,mZe),e(k,fZe),e(k,Wn),e(Wn,Pre),e(Pre,gZe),e(Wn,hZe),e(Wn,rR),e(rR,uZe),e(Wn,pZe),e(Wn,tR),e(tR,_Ze),e(Wn,bZe),e(k,FZe),e(k,Hn),e(Hn,Ire),e(Ire,vZe),e(Hn,TZe),e(Hn,aR),e(aR,MZe),e(Hn,EZe),e(Hn,nR),e(nR,CZe),e(Hn,wZe),e(k,AZe),e(k,Ag),e(Ag,qre),e(qre,yZe),e(Ag,LZe),e(Ag,sR),e(sR,xZe),e(Ag,$Ze),e(k,kZe),e(k,Un),e(Un,Nre),e(Nre,SZe),e(Un,RZe),e(Un,lR),e(lR,BZe),e(Un,PZe),e(Un,iR),e(iR,IZe),e(Un,qZe),e(k,NZe),e(k,yg),e(yg,jre),e(jre,jZe),e(yg,DZe),e(yg,dR),e(dR,GZe),e(yg,OZe),e(k,VZe),e(k,Jn),e(Jn,Dre),e(Dre,XZe),e(Jn,zZe),e(Jn,cR),e(cR,QZe),e(Jn,WZe),e(Jn,mR),e(mR,HZe),e(Jn,UZe),e(k,JZe),e(k,Yn),e(Yn,Gre),e(Gre,YZe),e(Yn,KZe),e(Yn,fR),e(fR,ZZe),e(Yn,eeo),e(Yn,gR),e(gR,oeo),e(Yn,reo),e(k,teo),e(k,Kn),e(Kn,Ore),e(Ore,aeo),e(Kn,neo),e(Kn,hR),e(hR,seo),e(Kn,leo),e(Kn,uR),e(uR,ieo),e(Kn,deo),e(k,ceo),e(k,Zn),e(Zn,Vre),e(Vre,meo),e(Zn,feo),e(Zn,pR),e(pR,geo),e(Zn,heo),e(Zn,_R),e(_R,ueo),e(Zn,peo),e(k,_eo),e(k,es),e(es,Xre),e(Xre,beo),e(es,Feo),e(es,bR),e(bR,veo),e(es,Teo),e(es,FR),e(FR,Meo),e(es,Eeo),e(k,Ceo),e(k,Lg),e(Lg,zre),e(zre,weo),e(Lg,Aeo),e(Lg,vR),e(vR,yeo),e(Lg,Leo),e(k,xeo),e(k,os),e(os,Qre),e(Qre,$eo),e(os,keo),e(os,TR),e(TR,Seo),e(os,Reo),e(os,MR),e(MR,Beo),e(os,Peo),e(k,Ieo),e(k,rs),e(rs,Wre),e(Wre,qeo),e(rs,Neo),e(rs,ER),e(ER,jeo),e(rs,Deo),e(rs,CR),e(CR,Geo),e(rs,Oeo),e(k,Veo),e(k,ts),e(ts,Hre),e(Hre,Xeo),e(ts,zeo),e(ts,wR),e(wR,Qeo),e(ts,Weo),e(ts,AR),e(AR,Heo),e(ts,Ueo),e(k,Jeo),e(k,as),e(as,Ure),e(Ure,Yeo),e(as,Keo),e(as,yR),e(yR,Zeo),e(as,eoo),e(as,LR),e(LR,ooo),e(as,roo),e(k,too),e(k,ns),e(ns,Jre),e(Jre,aoo),e(ns,noo),e(ns,xR),e(xR,soo),e(ns,loo),e(ns,$R),e($R,ioo),e(ns,doo),e(k,coo),e(k,ss),e(ss,Yre),e(Yre,moo),e(ss,foo),e(ss,kR),e(kR,goo),e(ss,hoo),e(ss,SR),e(SR,uoo),e(ss,poo),e(k,_oo),e(k,xg),e(xg,Kre),e(Kre,boo),e(xg,Foo),e(xg,RR),e(RR,voo),e(xg,Too),e(k,Moo),e(k,ls),e(ls,Zre),e(Zre,Eoo),e(ls,Coo),e(ls,BR),e(BR,woo),e(ls,Aoo),e(ls,PR),e(PR,yoo),e(ls,Loo),e(k,xoo),e(k,$g),e($g,ete),e(ete,$oo),e($g,koo),e($g,IR),e(IR,Soo),e($g,Roo),e(k,Boo),e(k,kg),e(kg,ote),e(ote,Poo),e(kg,Ioo),e(kg,qR),e(qR,qoo),e(kg,Noo),e(k,joo),e(k,is),e(is,rte),e(rte,Doo),e(is,Goo),e(is,NR),e(NR,Ooo),e(is,Voo),e(is,jR),e(jR,Xoo),e(is,zoo),e(k,Qoo),e(k,ds),e(ds,tte),e(tte,Woo),e(ds,Hoo),e(ds,DR),e(DR,Uoo),e(ds,Joo),e(ds,GR),e(GR,Yoo),e(ds,Koo),e(k,Zoo),e(k,cs),e(cs,ate),e(ate,ero),e(cs,oro),e(cs,OR),e(OR,rro),e(cs,tro),e(cs,VR),e(VR,aro),e(cs,nro),e(k,sro),e(k,Sg),e(Sg,nte),e(nte,lro),e(Sg,iro),e(Sg,XR),e(XR,dro),e(Sg,cro),e(k,mro),e(k,ms),e(ms,ste),e(ste,fro),e(ms,gro),e(ms,zR),e(zR,hro),e(ms,uro),e(ms,QR),e(QR,pro),e(ms,_ro),e(k,bro),e(k,fs),e(fs,lte),e(lte,Fro),e(fs,vro),e(fs,WR),e(WR,Tro),e(fs,Mro),e(fs,HR),e(HR,Ero),e(fs,Cro),e(k,wro),e(k,gs),e(gs,ite),e(ite,Aro),e(gs,yro),e(gs,UR),e(UR,Lro),e(gs,xro),e(gs,JR),e(JR,$ro),e(gs,kro),e(k,Sro),e(k,hs),e(hs,dte),e(dte,Rro),e(hs,Bro),e(hs,YR),e(YR,Pro),e(hs,Iro),e(hs,KR),e(KR,qro),e(hs,Nro),e(k,jro),e(k,us),e(us,cte),e(cte,Dro),e(us,Gro),e(us,ZR),e(ZR,Oro),e(us,Vro),e(us,eB),e(eB,Xro),e(us,zro),e(k,Qro),e(k,Rg),e(Rg,mte),e(mte,Wro),e(Rg,Hro),e(Rg,oB),e(oB,Uro),e(Rg,Jro),e(k,Yro),e(k,ps),e(ps,fte),e(fte,Kro),e(ps,Zro),e(ps,rB),e(rB,eto),e(ps,oto),e(ps,tB),e(tB,rto),e(ps,tto),e(k,ato),e(k,Bg),e(Bg,gte),e(gte,nto),e(Bg,sto),e(Bg,aB),e(aB,lto),e(Bg,ito),e(k,dto),e(k,Pg),e(Pg,hte),e(hte,cto),e(Pg,mto),e(Pg,nB),e(nB,fto),e(Pg,gto),e(k,hto),e(k,Ig),e(Ig,ute),e(ute,uto),e(Ig,pto),e(Ig,sB),e(sB,_to),e(Ig,bto),e(k,Fto),e(k,qg),e(qg,pte),e(pte,vto),e(qg,Tto),e(qg,lB),e(lB,Mto),e(qg,Eto),e(k,Cto),e(k,_s),e(_s,_te),e(_te,wto),e(_s,Ato),e(_s,iB),e(iB,yto),e(_s,Lto),e(_s,dB),e(dB,xto),e(_s,$to),e(k,kto),e(k,Ng),e(Ng,bte),e(bte,Sto),e(Ng,Rto),e(Ng,cB),e(cB,Bto),e(Ng,Pto),e(k,Ito),e(k,bs),e(bs,Fte),e(Fte,qto),e(bs,Nto),e(bs,mB),e(mB,jto),e(bs,Dto),e(bs,fB),e(fB,Gto),e(bs,Oto),e(k,Vto),e(k,Fs),e(Fs,vte),e(vte,Xto),e(Fs,zto),e(Fs,gB),e(gB,Qto),e(Fs,Wto),e(Fs,hB),e(hB,Hto),e(Fs,Uto),e(k,Jto),e(k,vs),e(vs,Tte),e(Tte,Yto),e(vs,Kto),e(vs,uB),e(uB,Zto),e(vs,eao),e(vs,pB),e(pB,oao),e(vs,rao),e(k,tao),e(k,Ts),e(Ts,Mte),e(Mte,aao),e(Ts,nao),e(Ts,_B),e(_B,sao),e(Ts,lao),e(Ts,bB),e(bB,iao),e(Ts,dao),e(k,cao),e(k,Ms),e(Ms,Ete),e(Ete,mao),e(Ms,fao),e(Ms,FB),e(FB,gao),e(Ms,hao),e(Ms,vB),e(vB,uao),e(Ms,pao),e(k,_ao),e(k,Es),e(Es,Cte),e(Cte,bao),e(Es,Fao),e(Es,TB),e(TB,vao),e(Es,Tao),e(Es,MB),e(MB,Mao),e(Es,Eao),e(k,Cao),e(k,jg),e(jg,wte),e(wte,wao),e(jg,Aao),e(jg,EB),e(EB,yao),e(jg,Lao),e(k,xao),e(k,Dg),e(Dg,Ate),e(Ate,$ao),e(Dg,kao),e(Dg,CB),e(CB,Sao),e(Dg,Rao),e(k,Bao),e(k,Cs),e(Cs,yte),e(yte,Pao),e(Cs,Iao),e(Cs,wB),e(wB,qao),e(Cs,Nao),e(Cs,AB),e(AB,jao),e(Cs,Dao),e(k,Gao),e(k,ws),e(ws,Lte),e(Lte,Oao),e(ws,Vao),e(ws,yB),e(yB,Xao),e(ws,zao),e(ws,LB),e(LB,Qao),e(ws,Wao),e(k,Hao),e(k,As),e(As,xte),e(xte,Uao),e(As,Jao),e(As,xB),e(xB,Yao),e(As,Kao),e(As,$B),e($B,Zao),e(As,eno),e(k,ono),e(k,Gg),e(Gg,$te),e($te,rno),e(Gg,tno),e(Gg,kB),e(kB,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,kte),e(kte,lno),e(Og,ino),e(Og,SB),e(SB,dno),e(Og,cno),e(k,mno),e(k,Vg),e(Vg,Ste),e(Ste,fno),e(Vg,gno),e(Vg,RB),e(RB,hno),e(Vg,uno),e(k,pno),e(k,ys),e(ys,Rte),e(Rte,_no),e(ys,bno),e(ys,BB),e(BB,Fno),e(ys,vno),e(ys,PB),e(PB,Tno),e(ys,Mno),e(k,Eno),e(k,Xg),e(Xg,Bte),e(Bte,Cno),e(Xg,wno),e(Xg,IB),e(IB,Ano),e(Xg,yno),e(k,Lno),e(k,zg),e(zg,Pte),e(Pte,xno),e(zg,$no),e(zg,qB),e(qB,kno),e(zg,Sno),e(k,Rno),e(k,Ls),e(Ls,Ite),e(Ite,Bno),e(Ls,Pno),e(Ls,NB),e(NB,Ino),e(Ls,qno),e(Ls,jB),e(jB,Nno),e(Ls,jno),e(k,Dno),e(k,Qg),e(Qg,qte),e(qte,Gno),e(Qg,Ono),e(Qg,DB),e(DB,Vno),e(Qg,Xno),e(k,zno),e(k,Wg),e(Wg,Nte),e(Nte,Qno),e(Wg,Wno),e(Wg,GB),e(GB,Hno),e(Wg,Uno),e(k,Jno),e(k,xs),e(xs,jte),e(jte,Yno),e(xs,Kno),e(xs,OB),e(OB,Zno),e(xs,eso),e(xs,VB),e(VB,oso),e(xs,rso),e(k,tso),e(k,$s),e($s,Dte),e(Dte,aso),e($s,nso),e($s,XB),e(XB,sso),e($s,lso),e($s,zB),e(zB,iso),e($s,dso),e(k,cso),e(k,ks),e(ks,Gte),e(Gte,mso),e(ks,fso),e(ks,QB),e(QB,gso),e(ks,hso),e(ks,WB),e(WB,uso),e(ks,pso),e(k,_so),e(k,Ss),e(Ss,Ote),e(Ote,bso),e(Ss,Fso),e(Ss,HB),e(HB,vso),e(Ss,Tso),e(Ss,UB),e(UB,Mso),e(Ss,Eso),e(Cr,Cso),M(Hg,Cr,null),e(wo,wso),e(wo,Ug),M(cy,Ug,null),e(Ug,Aso),e(Ug,Vte),e(Vte,yso),b(m,HPe,_),b(m,Fi,_),e(Fi,Jg),e(Jg,Xte),M(my,Xte,null),e(Fi,Lso),e(Fi,zte),e(zte,xso),b(m,UPe,_),b(m,Ao,_),M(fy,Ao,null),e(Ao,$so),e(Ao,gy),e(gy,kso),e(gy,JB),e(JB,Sso),e(gy,Rso),e(Ao,Bso),e(Ao,hy),e(hy,Pso),e(hy,Qte),e(Qte,Iso),e(hy,qso),e(Ao,Nso),e(Ao,Qe),M(uy,Qe,null),e(Qe,jso),e(Qe,Wte),e(Wte,Dso),e(Qe,Gso),e(Qe,wa),e(wa,Oso),e(wa,Hte),e(Hte,Vso),e(wa,Xso),e(wa,Ute),e(Ute,zso),e(wa,Qso),e(wa,Jte),e(Jte,Wso),e(wa,Hso),e(Qe,Uso),e(Qe,oe),e(oe,Yg),e(Yg,Yte),e(Yte,Jso),e(Yg,Yso),e(Yg,YB),e(YB,Kso),e(Yg,Zso),e(oe,elo),e(oe,Kg),e(Kg,Kte),e(Kte,olo),e(Kg,rlo),e(Kg,KB),e(KB,tlo),e(Kg,alo),e(oe,nlo),e(oe,Zg),e(Zg,Zte),e(Zte,slo),e(Zg,llo),e(Zg,ZB),e(ZB,ilo),e(Zg,dlo),e(oe,clo),e(oe,eh),e(eh,eae),e(eae,mlo),e(eh,flo),e(eh,eP),e(eP,glo),e(eh,hlo),e(oe,ulo),e(oe,oh),e(oh,oae),e(oae,plo),e(oh,_lo),e(oh,oP),e(oP,blo),e(oh,Flo),e(oe,vlo),e(oe,rh),e(rh,rae),e(rae,Tlo),e(rh,Mlo),e(rh,rP),e(rP,Elo),e(rh,Clo),e(oe,wlo),e(oe,th),e(th,tae),e(tae,Alo),e(th,ylo),e(th,tP),e(tP,Llo),e(th,xlo),e(oe,$lo),e(oe,ah),e(ah,aae),e(aae,klo),e(ah,Slo),e(ah,aP),e(aP,Rlo),e(ah,Blo),e(oe,Plo),e(oe,nh),e(nh,nae),e(nae,Ilo),e(nh,qlo),e(nh,nP),e(nP,Nlo),e(nh,jlo),e(oe,Dlo),e(oe,sh),e(sh,sae),e(sae,Glo),e(sh,Olo),e(sh,sP),e(sP,Vlo),e(sh,Xlo),e(oe,zlo),e(oe,lh),e(lh,lae),e(lae,Qlo),e(lh,Wlo),e(lh,lP),e(lP,Hlo),e(lh,Ulo),e(oe,Jlo),e(oe,ih),e(ih,iae),e(iae,Ylo),e(ih,Klo),e(ih,iP),e(iP,Zlo),e(ih,eio),e(oe,oio),e(oe,dh),e(dh,dae),e(dae,rio),e(dh,tio),e(dh,dP),e(dP,aio),e(dh,nio),e(oe,sio),e(oe,ch),e(ch,cae),e(cae,lio),e(ch,iio),e(ch,cP),e(cP,dio),e(ch,cio),e(oe,mio),e(oe,mh),e(mh,mae),e(mae,fio),e(mh,gio),e(mh,mP),e(mP,hio),e(mh,uio),e(oe,pio),e(oe,fh),e(fh,fae),e(fae,_io),e(fh,bio),e(fh,fP),e(fP,Fio),e(fh,vio),e(oe,Tio),e(oe,gh),e(gh,gae),e(gae,Mio),e(gh,Eio),e(gh,gP),e(gP,Cio),e(gh,wio),e(oe,Aio),e(oe,hh),e(hh,hae),e(hae,yio),e(hh,Lio),e(hh,hP),e(hP,xio),e(hh,$io),e(oe,kio),e(oe,uh),e(uh,uae),e(uae,Sio),e(uh,Rio),e(uh,uP),e(uP,Bio),e(uh,Pio),e(oe,Iio),e(oe,ph),e(ph,pae),e(pae,qio),e(ph,Nio),e(ph,pP),e(pP,jio),e(ph,Dio),e(oe,Gio),e(oe,_h),e(_h,_ae),e(_ae,Oio),e(_h,Vio),e(_h,_P),e(_P,Xio),e(_h,zio),e(oe,Qio),e(oe,bh),e(bh,bae),e(bae,Wio),e(bh,Hio),e(bh,bP),e(bP,Uio),e(bh,Jio),e(oe,Yio),e(oe,Fh),e(Fh,Fae),e(Fae,Kio),e(Fh,Zio),e(Fh,FP),e(FP,edo),e(Fh,odo),e(oe,rdo),e(oe,vh),e(vh,vae),e(vae,tdo),e(vh,ado),e(vh,vP),e(vP,ndo),e(vh,sdo),e(oe,ldo),e(oe,Th),e(Th,Tae),e(Tae,ido),e(Th,ddo),e(Th,TP),e(TP,cdo),e(Th,mdo),e(Qe,fdo),M(Mh,Qe,null),e(Qe,gdo),M(Eh,Qe,null),e(Ao,hdo),e(Ao,Ch),M(py,Ch,null),e(Ch,udo),e(Ch,Mae),e(Mae,pdo),b(m,JPe,_),b(m,vi,_),e(vi,wh),e(wh,Eae),M(_y,Eae,null),e(vi,_do),e(vi,Cae),e(Cae,bdo),b(m,YPe,_),b(m,yo,_),M(by,yo,null),e(yo,Fdo),e(yo,Fy),e(Fy,vdo),e(Fy,MP),e(MP,Tdo),e(Fy,Mdo),e(yo,Edo),e(yo,vy),e(vy,Cdo),e(vy,wae),e(wae,wdo),e(vy,Ado),e(yo,ydo),e(yo,We),M(Ty,We,null),e(We,Ldo),e(We,Aae),e(Aae,xdo),e(We,$do),e(We,Ti),e(Ti,kdo),e(Ti,yae),e(yae,Sdo),e(Ti,Rdo),e(Ti,Lae),e(Lae,Bdo),e(Ti,Pdo),e(We,Ido),e(We,_e),e(_e,Ah),e(Ah,xae),e(xae,qdo),e(Ah,Ndo),e(Ah,EP),e(EP,jdo),e(Ah,Ddo),e(_e,Gdo),e(_e,yh),e(yh,$ae),e($ae,Odo),e(yh,Vdo),e(yh,kae),e(kae,Xdo),e(yh,zdo),e(_e,Qdo),e(_e,Lh),e(Lh,Sae),e(Sae,Wdo),e(Lh,Hdo),e(Lh,CP),e(CP,Udo),e(Lh,Jdo),e(_e,Ydo),e(_e,xh),e(xh,Rae),e(Rae,Kdo),e(xh,Zdo),e(xh,wP),e(wP,eco),e(xh,oco),e(_e,rco),e(_e,$h),e($h,Bae),e(Bae,tco),e($h,aco),e($h,AP),e(AP,nco),e($h,sco),e(_e,lco),e(_e,kh),e(kh,Pae),e(Pae,ico),e(kh,dco),e(kh,yP),e(yP,cco),e(kh,mco),e(_e,fco),e(_e,Sh),e(Sh,Iae),e(Iae,gco),e(Sh,hco),e(Sh,LP),e(LP,uco),e(Sh,pco),e(_e,_co),e(_e,Rh),e(Rh,qae),e(qae,bco),e(Rh,Fco),e(Rh,xP),e(xP,vco),e(Rh,Tco),e(_e,Mco),e(_e,Bh),e(Bh,Nae),e(Nae,Eco),e(Bh,Cco),e(Bh,$P),e($P,wco),e(Bh,Aco),e(_e,yco),e(_e,Ph),e(Ph,jae),e(jae,Lco),e(Ph,xco),e(Ph,kP),e(kP,$co),e(Ph,kco),e(_e,Sco),e(_e,Ih),e(Ih,Dae),e(Dae,Rco),e(Ih,Bco),e(Ih,SP),e(SP,Pco),e(Ih,Ico),e(_e,qco),e(_e,qh),e(qh,Gae),e(Gae,Nco),e(qh,jco),e(qh,RP),e(RP,Dco),e(qh,Gco),e(_e,Oco),e(_e,Nh),e(Nh,Oae),e(Oae,Vco),e(Nh,Xco),e(Nh,BP),e(BP,zco),e(Nh,Qco),e(_e,Wco),e(_e,jh),e(jh,Vae),e(Vae,Hco),e(jh,Uco),e(jh,PP),e(PP,Jco),e(jh,Yco),e(_e,Kco),e(_e,Dh),e(Dh,Xae),e(Xae,Zco),e(Dh,emo),e(Dh,IP),e(IP,omo),e(Dh,rmo),e(We,tmo),M(Gh,We,null),e(We,amo),M(Oh,We,null),e(yo,nmo),e(yo,Vh),M(My,Vh,null),e(Vh,smo),e(Vh,zae),e(zae,lmo),b(m,KPe,_),b(m,Mi,_),e(Mi,Xh),e(Xh,Qae),M(Ey,Qae,null),e(Mi,imo),e(Mi,Wae),e(Wae,dmo),b(m,ZPe,_),b(m,Lo,_),M(Cy,Lo,null),e(Lo,cmo),e(Lo,Ei),e(Ei,mmo),e(Ei,qP),e(qP,fmo),e(Ei,gmo),e(Ei,NP),e(NP,hmo),e(Ei,umo),e(Lo,pmo),e(Lo,wy),e(wy,_mo),e(wy,Hae),e(Hae,bmo),e(wy,Fmo),e(Lo,vmo),e(Lo,ot),M(Ay,ot,null),e(ot,Tmo),e(ot,Uae),e(Uae,Mmo),e(ot,Emo),e(ot,Ci),e(Ci,Cmo),e(Ci,Jae),e(Jae,wmo),e(Ci,Amo),e(Ci,jP),e(jP,ymo),e(Ci,Lmo),e(ot,xmo),M(zh,ot,null),e(Lo,$mo),e(Lo,He),M(yy,He,null),e(He,kmo),e(He,Yae),e(Yae,Smo),e(He,Rmo),e(He,Aa),e(Aa,Bmo),e(Aa,Kae),e(Kae,Pmo),e(Aa,Imo),e(Aa,Zae),e(Zae,qmo),e(Aa,Nmo),e(Aa,ene),e(ene,jmo),e(Aa,Dmo),e(He,Gmo),e(He,x),e(x,Qh),e(Qh,one),e(one,Omo),e(Qh,Vmo),e(Qh,DP),e(DP,Xmo),e(Qh,zmo),e(x,Qmo),e(x,Wh),e(Wh,rne),e(rne,Wmo),e(Wh,Hmo),e(Wh,GP),e(GP,Umo),e(Wh,Jmo),e(x,Ymo),e(x,Hh),e(Hh,tne),e(tne,Kmo),e(Hh,Zmo),e(Hh,OP),e(OP,efo),e(Hh,ofo),e(x,rfo),e(x,Uh),e(Uh,ane),e(ane,tfo),e(Uh,afo),e(Uh,VP),e(VP,nfo),e(Uh,sfo),e(x,lfo),e(x,Jh),e(Jh,nne),e(nne,ifo),e(Jh,dfo),e(Jh,XP),e(XP,cfo),e(Jh,mfo),e(x,ffo),e(x,Yh),e(Yh,sne),e(sne,gfo),e(Yh,hfo),e(Yh,zP),e(zP,ufo),e(Yh,pfo),e(x,_fo),e(x,Kh),e(Kh,lne),e(lne,bfo),e(Kh,Ffo),e(Kh,QP),e(QP,vfo),e(Kh,Tfo),e(x,Mfo),e(x,Zh),e(Zh,ine),e(ine,Efo),e(Zh,Cfo),e(Zh,WP),e(WP,wfo),e(Zh,Afo),e(x,yfo),e(x,eu),e(eu,dne),e(dne,Lfo),e(eu,xfo),e(eu,HP),e(HP,$fo),e(eu,kfo),e(x,Sfo),e(x,ou),e(ou,cne),e(cne,Rfo),e(ou,Bfo),e(ou,UP),e(UP,Pfo),e(ou,Ifo),e(x,qfo),e(x,ru),e(ru,mne),e(mne,Nfo),e(ru,jfo),e(ru,JP),e(JP,Dfo),e(ru,Gfo),e(x,Ofo),e(x,tu),e(tu,fne),e(fne,Vfo),e(tu,Xfo),e(tu,YP),e(YP,zfo),e(tu,Qfo),e(x,Wfo),e(x,au),e(au,gne),e(gne,Hfo),e(au,Ufo),e(au,KP),e(KP,Jfo),e(au,Yfo),e(x,Kfo),e(x,nu),e(nu,hne),e(hne,Zfo),e(nu,ego),e(nu,ZP),e(ZP,ogo),e(nu,rgo),e(x,tgo),e(x,su),e(su,une),e(une,ago),e(su,ngo),e(su,eI),e(eI,sgo),e(su,lgo),e(x,igo),e(x,lu),e(lu,pne),e(pne,dgo),e(lu,cgo),e(lu,oI),e(oI,mgo),e(lu,fgo),e(x,ggo),e(x,iu),e(iu,_ne),e(_ne,hgo),e(iu,ugo),e(iu,rI),e(rI,pgo),e(iu,_go),e(x,bgo),e(x,du),e(du,bne),e(bne,Fgo),e(du,vgo),e(du,tI),e(tI,Tgo),e(du,Mgo),e(x,Ego),e(x,cu),e(cu,Fne),e(Fne,Cgo),e(cu,wgo),e(cu,aI),e(aI,Ago),e(cu,ygo),e(x,Lgo),e(x,mu),e(mu,vne),e(vne,xgo),e(mu,$go),e(mu,nI),e(nI,kgo),e(mu,Sgo),e(x,Rgo),e(x,fu),e(fu,Tne),e(Tne,Bgo),e(fu,Pgo),e(fu,sI),e(sI,Igo),e(fu,qgo),e(x,Ngo),e(x,gu),e(gu,Mne),e(Mne,jgo),e(gu,Dgo),e(gu,lI),e(lI,Ggo),e(gu,Ogo),e(x,Vgo),e(x,hu),e(hu,Ene),e(Ene,Xgo),e(hu,zgo),e(hu,iI),e(iI,Qgo),e(hu,Wgo),e(x,Hgo),e(x,uu),e(uu,Cne),e(Cne,Ugo),e(uu,Jgo),e(uu,dI),e(dI,Ygo),e(uu,Kgo),e(x,Zgo),e(x,pu),e(pu,wne),e(wne,eho),e(pu,oho),e(pu,cI),e(cI,rho),e(pu,tho),e(x,aho),e(x,_u),e(_u,Ane),e(Ane,nho),e(_u,sho),e(_u,mI),e(mI,lho),e(_u,iho),e(x,dho),e(x,bu),e(bu,yne),e(yne,cho),e(bu,mho),e(bu,fI),e(fI,fho),e(bu,gho),e(x,hho),e(x,Fu),e(Fu,Lne),e(Lne,uho),e(Fu,pho),e(Fu,gI),e(gI,_ho),e(Fu,bho),e(x,Fho),e(x,vu),e(vu,xne),e(xne,vho),e(vu,Tho),e(vu,hI),e(hI,Mho),e(vu,Eho),e(x,Cho),e(x,Tu),e(Tu,$ne),e($ne,who),e(Tu,Aho),e(Tu,uI),e(uI,yho),e(Tu,Lho),e(x,xho),e(x,Mu),e(Mu,kne),e(kne,$ho),e(Mu,kho),e(Mu,pI),e(pI,Sho),e(Mu,Rho),e(x,Bho),e(x,Rs),e(Rs,Sne),e(Sne,Pho),e(Rs,Iho),e(Rs,_I),e(_I,qho),e(Rs,Nho),e(Rs,bI),e(bI,jho),e(Rs,Dho),e(x,Gho),e(x,Eu),e(Eu,Rne),e(Rne,Oho),e(Eu,Vho),e(Eu,FI),e(FI,Xho),e(Eu,zho),e(x,Qho),e(x,Cu),e(Cu,Bne),e(Bne,Who),e(Cu,Hho),e(Cu,vI),e(vI,Uho),e(Cu,Jho),e(x,Yho),e(x,wu),e(wu,Pne),e(Pne,Kho),e(wu,Zho),e(wu,TI),e(TI,euo),e(wu,ouo),e(x,ruo),e(x,Au),e(Au,Ine),e(Ine,tuo),e(Au,auo),e(Au,MI),e(MI,nuo),e(Au,suo),e(x,luo),e(x,yu),e(yu,qne),e(qne,iuo),e(yu,duo),e(yu,EI),e(EI,cuo),e(yu,muo),e(x,fuo),e(x,Lu),e(Lu,Nne),e(Nne,guo),e(Lu,huo),e(Lu,CI),e(CI,uuo),e(Lu,puo),e(x,_uo),e(x,xu),e(xu,jne),e(jne,buo),e(xu,Fuo),e(xu,wI),e(wI,vuo),e(xu,Tuo),e(x,Muo),e(x,$u),e($u,Dne),e(Dne,Euo),e($u,Cuo),e($u,AI),e(AI,wuo),e($u,Auo),e(x,yuo),e(x,ku),e(ku,Gne),e(Gne,Luo),e(ku,xuo),e(ku,yI),e(yI,$uo),e(ku,kuo),e(x,Suo),e(x,Su),e(Su,One),e(One,Ruo),e(Su,Buo),e(Su,LI),e(LI,Puo),e(Su,Iuo),e(x,quo),e(x,Ru),e(Ru,Vne),e(Vne,Nuo),e(Ru,juo),e(Ru,xI),e(xI,Duo),e(Ru,Guo),e(x,Ouo),e(x,Bu),e(Bu,Xne),e(Xne,Vuo),e(Bu,Xuo),e(Bu,$I),e($I,zuo),e(Bu,Quo),e(x,Wuo),e(x,Pu),e(Pu,zne),e(zne,Huo),e(Pu,Uuo),e(Pu,kI),e(kI,Juo),e(Pu,Yuo),e(x,Kuo),e(x,Iu),e(Iu,Qne),e(Qne,Zuo),e(Iu,epo),e(Iu,SI),e(SI,opo),e(Iu,rpo),e(x,tpo),e(x,qu),e(qu,Wne),e(Wne,apo),e(qu,npo),e(qu,RI),e(RI,spo),e(qu,lpo),e(x,ipo),e(x,Nu),e(Nu,Hne),e(Hne,dpo),e(Nu,cpo),e(Nu,BI),e(BI,mpo),e(Nu,fpo),e(x,gpo),e(x,ju),e(ju,Une),e(Une,hpo),e(ju,upo),e(ju,PI),e(PI,ppo),e(ju,_po),e(x,bpo),e(x,Du),e(Du,Jne),e(Jne,Fpo),e(Du,vpo),e(Du,II),e(II,Tpo),e(Du,Mpo),e(x,Epo),e(x,Gu),e(Gu,Yne),e(Yne,Cpo),e(Gu,wpo),e(Gu,qI),e(qI,Apo),e(Gu,ypo),e(x,Lpo),e(x,Ou),e(Ou,Kne),e(Kne,xpo),e(Ou,$po),e(Ou,NI),e(NI,kpo),e(Ou,Spo),e(x,Rpo),e(x,Vu),e(Vu,Zne),e(Zne,Bpo),e(Vu,Ppo),e(Vu,jI),e(jI,Ipo),e(Vu,qpo),e(x,Npo),e(x,Xu),e(Xu,ese),e(ese,jpo),e(Xu,Dpo),e(Xu,DI),e(DI,Gpo),e(Xu,Opo),e(x,Vpo),e(x,zu),e(zu,ose),e(ose,Xpo),e(zu,zpo),e(zu,GI),e(GI,Qpo),e(zu,Wpo),e(x,Hpo),e(x,Qu),e(Qu,rse),e(rse,Upo),e(Qu,Jpo),e(Qu,OI),e(OI,Ypo),e(Qu,Kpo),e(x,Zpo),e(x,Wu),e(Wu,tse),e(tse,e_o),e(Wu,o_o),e(Wu,VI),e(VI,r_o),e(Wu,t_o),e(x,a_o),e(x,Hu),e(Hu,ase),e(ase,n_o),e(Hu,s_o),e(Hu,XI),e(XI,l_o),e(Hu,i_o),e(x,d_o),e(x,Uu),e(Uu,nse),e(nse,c_o),e(Uu,m_o),e(Uu,zI),e(zI,f_o),e(Uu,g_o),e(x,h_o),e(x,Ju),e(Ju,sse),e(sse,u_o),e(Ju,p_o),e(Ju,QI),e(QI,__o),e(Ju,b_o),e(x,F_o),e(x,Yu),e(Yu,lse),e(lse,v_o),e(Yu,T_o),e(Yu,WI),e(WI,M_o),e(Yu,E_o),e(x,C_o),e(x,Ku),e(Ku,ise),e(ise,w_o),e(Ku,A_o),e(Ku,HI),e(HI,y_o),e(Ku,L_o),e(x,x_o),e(x,Zu),e(Zu,dse),e(dse,$_o),e(Zu,k_o),e(Zu,UI),e(UI,S_o),e(Zu,R_o),e(x,B_o),e(x,ep),e(ep,cse),e(cse,P_o),e(ep,I_o),e(ep,JI),e(JI,q_o),e(ep,N_o),e(x,j_o),e(x,op),e(op,mse),e(mse,D_o),e(op,G_o),e(op,YI),e(YI,O_o),e(op,V_o),e(x,X_o),e(x,rp),e(rp,fse),e(fse,z_o),e(rp,Q_o),e(rp,KI),e(KI,W_o),e(rp,H_o),e(x,U_o),e(x,tp),e(tp,gse),e(gse,J_o),e(tp,Y_o),e(tp,ZI),e(ZI,K_o),e(tp,Z_o),e(x,ebo),e(x,ap),e(ap,hse),e(hse,obo),e(ap,rbo),e(ap,eq),e(eq,tbo),e(ap,abo),e(x,nbo),e(x,np),e(np,use),e(use,sbo),e(np,lbo),e(np,oq),e(oq,ibo),e(np,dbo),e(x,cbo),e(x,sp),e(sp,pse),e(pse,mbo),e(sp,fbo),e(sp,rq),e(rq,gbo),e(sp,hbo),e(x,ubo),e(x,lp),e(lp,_se),e(_se,pbo),e(lp,_bo),e(lp,tq),e(tq,bbo),e(lp,Fbo),e(x,vbo),e(x,ip),e(ip,bse),e(bse,Tbo),e(ip,Mbo),e(ip,aq),e(aq,Ebo),e(ip,Cbo),e(x,wbo),e(x,dp),e(dp,Fse),e(Fse,Abo),e(dp,ybo),e(dp,nq),e(nq,Lbo),e(dp,xbo),e(x,$bo),e(x,cp),e(cp,vse),e(vse,kbo),e(cp,Sbo),e(cp,sq),e(sq,Rbo),e(cp,Bbo),e(x,Pbo),e(x,mp),e(mp,Tse),e(Tse,Ibo),e(mp,qbo),e(mp,lq),e(lq,Nbo),e(mp,jbo),e(x,Dbo),e(x,fp),e(fp,Mse),e(Mse,Gbo),e(fp,Obo),e(fp,iq),e(iq,Vbo),e(fp,Xbo),e(x,zbo),e(x,gp),e(gp,Ese),e(Ese,Qbo),e(gp,Wbo),e(gp,dq),e(dq,Hbo),e(gp,Ubo),e(x,Jbo),e(x,hp),e(hp,Cse),e(Cse,Ybo),e(hp,Kbo),e(hp,cq),e(cq,Zbo),e(hp,e2o),e(x,o2o),e(x,up),e(up,wse),e(wse,r2o),e(up,t2o),e(up,mq),e(mq,a2o),e(up,n2o),e(x,s2o),e(x,pp),e(pp,Ase),e(Ase,l2o),e(pp,i2o),e(pp,fq),e(fq,d2o),e(pp,c2o),e(x,m2o),e(x,_p),e(_p,yse),e(yse,f2o),e(_p,g2o),e(_p,gq),e(gq,h2o),e(_p,u2o),e(x,p2o),e(x,bp),e(bp,Lse),e(Lse,_2o),e(bp,b2o),e(bp,hq),e(hq,F2o),e(bp,v2o),e(x,T2o),e(x,Fp),e(Fp,xse),e(xse,M2o),e(Fp,E2o),e(Fp,uq),e(uq,C2o),e(Fp,w2o),e(x,A2o),e(x,vp),e(vp,$se),e($se,y2o),e(vp,L2o),e(vp,pq),e(pq,x2o),e(vp,$2o),e(x,k2o),e(x,Tp),e(Tp,kse),e(kse,S2o),e(Tp,R2o),e(Tp,_q),e(_q,B2o),e(Tp,P2o),e(x,I2o),e(x,Mp),e(Mp,Sse),e(Sse,q2o),e(Mp,N2o),e(Mp,bq),e(bq,j2o),e(Mp,D2o),e(x,G2o),e(x,Ep),e(Ep,Rse),e(Rse,O2o),e(Ep,V2o),e(Ep,Fq),e(Fq,X2o),e(Ep,z2o),e(x,Q2o),e(x,Cp),e(Cp,Bse),e(Bse,W2o),e(Cp,H2o),e(Cp,vq),e(vq,U2o),e(Cp,J2o),e(x,Y2o),e(x,wp),e(wp,Pse),e(Pse,K2o),e(wp,Z2o),e(wp,Tq),e(Tq,eFo),e(wp,oFo),e(x,rFo),e(x,Ap),e(Ap,Ise),e(Ise,tFo),e(Ap,aFo),e(Ap,Mq),e(Mq,nFo),e(Ap,sFo),e(x,lFo),e(x,yp),e(yp,qse),e(qse,iFo),e(yp,dFo),e(yp,Eq),e(Eq,cFo),e(yp,mFo),e(x,fFo),e(x,Lp),e(Lp,Nse),e(Nse,gFo),e(Lp,hFo),e(Lp,Cq),e(Cq,uFo),e(Lp,pFo),e(x,_Fo),e(x,xp),e(xp,jse),e(jse,bFo),e(xp,FFo),e(xp,wq),e(wq,vFo),e(xp,TFo),e(x,MFo),e(x,$p),e($p,Dse),e(Dse,EFo),e($p,CFo),e($p,Aq),e(Aq,wFo),e($p,AFo),e(x,yFo),e(x,kp),e(kp,Gse),e(Gse,LFo),e(kp,xFo),e(kp,yq),e(yq,$Fo),e(kp,kFo),e(x,SFo),e(x,Sp),e(Sp,Ose),e(Ose,RFo),e(Sp,BFo),e(Sp,Lq),e(Lq,PFo),e(Sp,IFo),e(x,qFo),e(x,Rp),e(Rp,Vse),e(Vse,NFo),e(Rp,jFo),e(Rp,xq),e(xq,DFo),e(Rp,GFo),e(He,OFo),e(He,Bp),e(Bp,VFo),e(Bp,Xse),e(Xse,XFo),e(Bp,zFo),e(Bp,zse),e(zse,QFo),e(He,WFo),M(Pp,He,null),b(m,eIe,_),b(m,wi,_),e(wi,Ip),e(Ip,Qse),M(Ly,Qse,null),e(wi,HFo),e(wi,Wse),e(Wse,UFo),b(m,oIe,_),b(m,xo,_),M(xy,xo,null),e(xo,JFo),e(xo,Ai),e(Ai,YFo),e(Ai,$q),e($q,KFo),e(Ai,ZFo),e(Ai,kq),e(kq,evo),e(Ai,ovo),e(xo,rvo),e(xo,$y),e($y,tvo),e($y,Hse),e(Hse,avo),e($y,nvo),e(xo,svo),e(xo,rt),M(ky,rt,null),e(rt,lvo),e(rt,Use),e(Use,ivo),e(rt,dvo),e(rt,yi),e(yi,cvo),e(yi,Jse),e(Jse,mvo),e(yi,fvo),e(yi,Sq),e(Sq,gvo),e(yi,hvo),e(rt,uvo),M(qp,rt,null),e(xo,pvo),e(xo,Ue),M(Sy,Ue,null),e(Ue,_vo),e(Ue,Yse),e(Yse,bvo),e(Ue,Fvo),e(Ue,ya),e(ya,vvo),e(ya,Kse),e(Kse,Tvo),e(ya,Mvo),e(ya,Zse),e(Zse,Evo),e(ya,Cvo),e(ya,ele),e(ele,wvo),e(ya,Avo),e(Ue,yvo),e(Ue,G),e(G,Np),e(Np,ole),e(ole,Lvo),e(Np,xvo),e(Np,Rq),e(Rq,$vo),e(Np,kvo),e(G,Svo),e(G,jp),e(jp,rle),e(rle,Rvo),e(jp,Bvo),e(jp,Bq),e(Bq,Pvo),e(jp,Ivo),e(G,qvo),e(G,Dp),e(Dp,tle),e(tle,Nvo),e(Dp,jvo),e(Dp,Pq),e(Pq,Dvo),e(Dp,Gvo),e(G,Ovo),e(G,Gp),e(Gp,ale),e(ale,Vvo),e(Gp,Xvo),e(Gp,Iq),e(Iq,zvo),e(Gp,Qvo),e(G,Wvo),e(G,Op),e(Op,nle),e(nle,Hvo),e(Op,Uvo),e(Op,qq),e(qq,Jvo),e(Op,Yvo),e(G,Kvo),e(G,Vp),e(Vp,sle),e(sle,Zvo),e(Vp,e1o),e(Vp,Nq),e(Nq,o1o),e(Vp,r1o),e(G,t1o),e(G,Xp),e(Xp,lle),e(lle,a1o),e(Xp,n1o),e(Xp,jq),e(jq,s1o),e(Xp,l1o),e(G,i1o),e(G,zp),e(zp,ile),e(ile,d1o),e(zp,c1o),e(zp,Dq),e(Dq,m1o),e(zp,f1o),e(G,g1o),e(G,Qp),e(Qp,dle),e(dle,h1o),e(Qp,u1o),e(Qp,Gq),e(Gq,p1o),e(Qp,_1o),e(G,b1o),e(G,Wp),e(Wp,cle),e(cle,F1o),e(Wp,v1o),e(Wp,Oq),e(Oq,T1o),e(Wp,M1o),e(G,E1o),e(G,Hp),e(Hp,mle),e(mle,C1o),e(Hp,w1o),e(Hp,Vq),e(Vq,A1o),e(Hp,y1o),e(G,L1o),e(G,Up),e(Up,fle),e(fle,x1o),e(Up,$1o),e(Up,Xq),e(Xq,k1o),e(Up,S1o),e(G,R1o),e(G,Jp),e(Jp,gle),e(gle,B1o),e(Jp,P1o),e(Jp,zq),e(zq,I1o),e(Jp,q1o),e(G,N1o),e(G,Yp),e(Yp,hle),e(hle,j1o),e(Yp,D1o),e(Yp,Qq),e(Qq,G1o),e(Yp,O1o),e(G,V1o),e(G,Kp),e(Kp,ule),e(ule,X1o),e(Kp,z1o),e(Kp,Wq),e(Wq,Q1o),e(Kp,W1o),e(G,H1o),e(G,Zp),e(Zp,ple),e(ple,U1o),e(Zp,J1o),e(Zp,Hq),e(Hq,Y1o),e(Zp,K1o),e(G,Z1o),e(G,e_),e(e_,_le),e(_le,eTo),e(e_,oTo),e(e_,Uq),e(Uq,rTo),e(e_,tTo),e(G,aTo),e(G,o_),e(o_,ble),e(ble,nTo),e(o_,sTo),e(o_,Jq),e(Jq,lTo),e(o_,iTo),e(G,dTo),e(G,r_),e(r_,Fle),e(Fle,cTo),e(r_,mTo),e(r_,Yq),e(Yq,fTo),e(r_,gTo),e(G,hTo),e(G,t_),e(t_,vle),e(vle,uTo),e(t_,pTo),e(t_,Kq),e(Kq,_To),e(t_,bTo),e(G,FTo),e(G,a_),e(a_,Tle),e(Tle,vTo),e(a_,TTo),e(a_,Zq),e(Zq,MTo),e(a_,ETo),e(G,CTo),e(G,n_),e(n_,Mle),e(Mle,wTo),e(n_,ATo),e(n_,eN),e(eN,yTo),e(n_,LTo),e(G,xTo),e(G,s_),e(s_,Ele),e(Ele,$To),e(s_,kTo),e(s_,oN),e(oN,STo),e(s_,RTo),e(G,BTo),e(G,l_),e(l_,Cle),e(Cle,PTo),e(l_,ITo),e(l_,rN),e(rN,qTo),e(l_,NTo),e(G,jTo),e(G,i_),e(i_,wle),e(wle,DTo),e(i_,GTo),e(i_,tN),e(tN,OTo),e(i_,VTo),e(G,XTo),e(G,d_),e(d_,Ale),e(Ale,zTo),e(d_,QTo),e(d_,aN),e(aN,WTo),e(d_,HTo),e(G,UTo),e(G,c_),e(c_,yle),e(yle,JTo),e(c_,YTo),e(c_,nN),e(nN,KTo),e(c_,ZTo),e(G,eMo),e(G,m_),e(m_,Lle),e(Lle,oMo),e(m_,rMo),e(m_,sN),e(sN,tMo),e(m_,aMo),e(G,nMo),e(G,f_),e(f_,xle),e(xle,sMo),e(f_,lMo),e(f_,lN),e(lN,iMo),e(f_,dMo),e(G,cMo),e(G,g_),e(g_,$le),e($le,mMo),e(g_,fMo),e(g_,iN),e(iN,gMo),e(g_,hMo),e(G,uMo),e(G,h_),e(h_,kle),e(kle,pMo),e(h_,_Mo),e(h_,dN),e(dN,bMo),e(h_,FMo),e(G,vMo),e(G,u_),e(u_,Sle),e(Sle,TMo),e(u_,MMo),e(u_,cN),e(cN,EMo),e(u_,CMo),e(G,wMo),e(G,p_),e(p_,Rle),e(Rle,AMo),e(p_,yMo),e(p_,mN),e(mN,LMo),e(p_,xMo),e(G,$Mo),e(G,__),e(__,Ble),e(Ble,kMo),e(__,SMo),e(__,fN),e(fN,RMo),e(__,BMo),e(G,PMo),e(G,b_),e(b_,Ple),e(Ple,IMo),e(b_,qMo),e(b_,gN),e(gN,NMo),e(b_,jMo),e(G,DMo),e(G,F_),e(F_,Ile),e(Ile,GMo),e(F_,OMo),e(F_,hN),e(hN,VMo),e(F_,XMo),e(G,zMo),e(G,v_),e(v_,qle),e(qle,QMo),e(v_,WMo),e(v_,uN),e(uN,HMo),e(v_,UMo),e(G,JMo),e(G,T_),e(T_,Nle),e(Nle,YMo),e(T_,KMo),e(T_,pN),e(pN,ZMo),e(T_,e4o),e(G,o4o),e(G,M_),e(M_,jle),e(jle,r4o),e(M_,t4o),e(M_,_N),e(_N,a4o),e(M_,n4o),e(G,s4o),e(G,E_),e(E_,Dle),e(Dle,l4o),e(E_,i4o),e(E_,bN),e(bN,d4o),e(E_,c4o),e(Ue,m4o),e(Ue,C_),e(C_,f4o),e(C_,Gle),e(Gle,g4o),e(C_,h4o),e(C_,Ole),e(Ole,u4o),e(Ue,p4o),M(w_,Ue,null),b(m,rIe,_),b(m,Li,_),e(Li,A_),e(A_,Vle),M(Ry,Vle,null),e(Li,_4o),e(Li,Xle),e(Xle,b4o),b(m,tIe,_),b(m,$o,_),M(By,$o,null),e($o,F4o),e($o,xi),e(xi,v4o),e(xi,FN),e(FN,T4o),e(xi,M4o),e(xi,vN),e(vN,E4o),e(xi,C4o),e($o,w4o),e($o,Py),e(Py,A4o),e(Py,zle),e(zle,y4o),e(Py,L4o),e($o,x4o),e($o,tt),M(Iy,tt,null),e(tt,$4o),e(tt,Qle),e(Qle,k4o),e(tt,S4o),e(tt,$i),e($i,R4o),e($i,Wle),e(Wle,B4o),e($i,P4o),e($i,TN),e(TN,I4o),e($i,q4o),e(tt,N4o),M(y_,tt,null),e($o,j4o),e($o,Je),M(qy,Je,null),e(Je,D4o),e(Je,Hle),e(Hle,G4o),e(Je,O4o),e(Je,La),e(La,V4o),e(La,Ule),e(Ule,X4o),e(La,z4o),e(La,Jle),e(Jle,Q4o),e(La,W4o),e(La,Yle),e(Yle,H4o),e(La,U4o),e(Je,J4o),e(Je,z),e(z,L_),e(L_,Kle),e(Kle,Y4o),e(L_,K4o),e(L_,MN),e(MN,Z4o),e(L_,eEo),e(z,oEo),e(z,x_),e(x_,Zle),e(Zle,rEo),e(x_,tEo),e(x_,EN),e(EN,aEo),e(x_,nEo),e(z,sEo),e(z,$_),e($_,eie),e(eie,lEo),e($_,iEo),e($_,CN),e(CN,dEo),e($_,cEo),e(z,mEo),e(z,k_),e(k_,oie),e(oie,fEo),e(k_,gEo),e(k_,wN),e(wN,hEo),e(k_,uEo),e(z,pEo),e(z,S_),e(S_,rie),e(rie,_Eo),e(S_,bEo),e(S_,AN),e(AN,FEo),e(S_,vEo),e(z,TEo),e(z,R_),e(R_,tie),e(tie,MEo),e(R_,EEo),e(R_,yN),e(yN,CEo),e(R_,wEo),e(z,AEo),e(z,B_),e(B_,aie),e(aie,yEo),e(B_,LEo),e(B_,LN),e(LN,xEo),e(B_,$Eo),e(z,kEo),e(z,P_),e(P_,nie),e(nie,SEo),e(P_,REo),e(P_,xN),e(xN,BEo),e(P_,PEo),e(z,IEo),e(z,I_),e(I_,sie),e(sie,qEo),e(I_,NEo),e(I_,$N),e($N,jEo),e(I_,DEo),e(z,GEo),e(z,q_),e(q_,lie),e(lie,OEo),e(q_,VEo),e(q_,kN),e(kN,XEo),e(q_,zEo),e(z,QEo),e(z,N_),e(N_,iie),e(iie,WEo),e(N_,HEo),e(N_,SN),e(SN,UEo),e(N_,JEo),e(z,YEo),e(z,j_),e(j_,die),e(die,KEo),e(j_,ZEo),e(j_,RN),e(RN,e5o),e(j_,o5o),e(z,r5o),e(z,D_),e(D_,cie),e(cie,t5o),e(D_,a5o),e(D_,BN),e(BN,n5o),e(D_,s5o),e(z,l5o),e(z,G_),e(G_,mie),e(mie,i5o),e(G_,d5o),e(G_,PN),e(PN,c5o),e(G_,m5o),e(z,f5o),e(z,O_),e(O_,fie),e(fie,g5o),e(O_,h5o),e(O_,IN),e(IN,u5o),e(O_,p5o),e(z,_5o),e(z,V_),e(V_,gie),e(gie,b5o),e(V_,F5o),e(V_,qN),e(qN,v5o),e(V_,T5o),e(z,M5o),e(z,X_),e(X_,hie),e(hie,E5o),e(X_,C5o),e(X_,NN),e(NN,w5o),e(X_,A5o),e(z,y5o),e(z,z_),e(z_,uie),e(uie,L5o),e(z_,x5o),e(z_,jN),e(jN,$5o),e(z_,k5o),e(z,S5o),e(z,Q_),e(Q_,pie),e(pie,R5o),e(Q_,B5o),e(Q_,DN),e(DN,P5o),e(Q_,I5o),e(z,q5o),e(z,W_),e(W_,_ie),e(_ie,N5o),e(W_,j5o),e(W_,GN),e(GN,D5o),e(W_,G5o),e(z,O5o),e(z,H_),e(H_,bie),e(bie,V5o),e(H_,X5o),e(H_,ON),e(ON,z5o),e(H_,Q5o),e(z,W5o),e(z,U_),e(U_,Fie),e(Fie,H5o),e(U_,U5o),e(U_,VN),e(VN,J5o),e(U_,Y5o),e(z,K5o),e(z,J_),e(J_,vie),e(vie,Z5o),e(J_,eCo),e(J_,XN),e(XN,oCo),e(J_,rCo),e(z,tCo),e(z,Y_),e(Y_,Tie),e(Tie,aCo),e(Y_,nCo),e(Y_,zN),e(zN,sCo),e(Y_,lCo),e(z,iCo),e(z,K_),e(K_,Mie),e(Mie,dCo),e(K_,cCo),e(K_,QN),e(QN,mCo),e(K_,fCo),e(z,gCo),e(z,Z_),e(Z_,Eie),e(Eie,hCo),e(Z_,uCo),e(Z_,WN),e(WN,pCo),e(Z_,_Co),e(z,bCo),e(z,eb),e(eb,Cie),e(Cie,FCo),e(eb,vCo),e(eb,HN),e(HN,TCo),e(eb,MCo),e(z,ECo),e(z,ob),e(ob,wie),e(wie,CCo),e(ob,wCo),e(ob,UN),e(UN,ACo),e(ob,yCo),e(z,LCo),e(z,rb),e(rb,Aie),e(Aie,xCo),e(rb,$Co),e(rb,JN),e(JN,kCo),e(rb,SCo),e(z,RCo),e(z,tb),e(tb,yie),e(yie,BCo),e(tb,PCo),e(tb,YN),e(YN,ICo),e(tb,qCo),e(z,NCo),e(z,ab),e(ab,Lie),e(Lie,jCo),e(ab,DCo),e(ab,KN),e(KN,GCo),e(ab,OCo),e(z,VCo),e(z,nb),e(nb,xie),e(xie,XCo),e(nb,zCo),e(nb,ZN),e(ZN,QCo),e(nb,WCo),e(z,HCo),e(z,sb),e(sb,$ie),e($ie,UCo),e(sb,JCo),e(sb,ej),e(ej,YCo),e(sb,KCo),e(z,ZCo),e(z,lb),e(lb,kie),e(kie,e3o),e(lb,o3o),e(lb,oj),e(oj,r3o),e(lb,t3o),e(z,a3o),e(z,ib),e(ib,Sie),e(Sie,n3o),e(ib,s3o),e(ib,rj),e(rj,l3o),e(ib,i3o),e(z,d3o),e(z,db),e(db,Rie),e(Rie,c3o),e(db,m3o),e(db,tj),e(tj,f3o),e(db,g3o),e(Je,h3o),e(Je,cb),e(cb,u3o),e(cb,Bie),e(Bie,p3o),e(cb,_3o),e(cb,Pie),e(Pie,b3o),e(Je,F3o),M(mb,Je,null),b(m,aIe,_),b(m,ki,_),e(ki,fb),e(fb,Iie),M(Ny,Iie,null),e(ki,v3o),e(ki,qie),e(qie,T3o),b(m,nIe,_),b(m,ko,_),M(jy,ko,null),e(ko,M3o),e(ko,Si),e(Si,E3o),e(Si,aj),e(aj,C3o),e(Si,w3o),e(Si,nj),e(nj,A3o),e(Si,y3o),e(ko,L3o),e(ko,Dy),e(Dy,x3o),e(Dy,Nie),e(Nie,$3o),e(Dy,k3o),e(ko,S3o),e(ko,at),M(Gy,at,null),e(at,R3o),e(at,jie),e(jie,B3o),e(at,P3o),e(at,Ri),e(Ri,I3o),e(Ri,Die),e(Die,q3o),e(Ri,N3o),e(Ri,sj),e(sj,j3o),e(Ri,D3o),e(at,G3o),M(gb,at,null),e(ko,O3o),e(ko,Ye),M(Oy,Ye,null),e(Ye,V3o),e(Ye,Gie),e(Gie,X3o),e(Ye,z3o),e(Ye,xa),e(xa,Q3o),e(xa,Oie),e(Oie,W3o),e(xa,H3o),e(xa,Vie),e(Vie,U3o),e(xa,J3o),e(xa,Xie),e(Xie,Y3o),e(xa,K3o),e(Ye,Z3o),e(Ye,Q),e(Q,hb),e(hb,zie),e(zie,ewo),e(hb,owo),e(hb,lj),e(lj,rwo),e(hb,two),e(Q,awo),e(Q,ub),e(ub,Qie),e(Qie,nwo),e(ub,swo),e(ub,ij),e(ij,lwo),e(ub,iwo),e(Q,dwo),e(Q,pb),e(pb,Wie),e(Wie,cwo),e(pb,mwo),e(pb,dj),e(dj,fwo),e(pb,gwo),e(Q,hwo),e(Q,_b),e(_b,Hie),e(Hie,uwo),e(_b,pwo),e(_b,cj),e(cj,_wo),e(_b,bwo),e(Q,Fwo),e(Q,bb),e(bb,Uie),e(Uie,vwo),e(bb,Two),e(bb,mj),e(mj,Mwo),e(bb,Ewo),e(Q,Cwo),e(Q,Fb),e(Fb,Jie),e(Jie,wwo),e(Fb,Awo),e(Fb,fj),e(fj,ywo),e(Fb,Lwo),e(Q,xwo),e(Q,vb),e(vb,Yie),e(Yie,$wo),e(vb,kwo),e(vb,gj),e(gj,Swo),e(vb,Rwo),e(Q,Bwo),e(Q,Tb),e(Tb,Kie),e(Kie,Pwo),e(Tb,Iwo),e(Tb,hj),e(hj,qwo),e(Tb,Nwo),e(Q,jwo),e(Q,Mb),e(Mb,Zie),e(Zie,Dwo),e(Mb,Gwo),e(Mb,uj),e(uj,Owo),e(Mb,Vwo),e(Q,Xwo),e(Q,Eb),e(Eb,ede),e(ede,zwo),e(Eb,Qwo),e(Eb,pj),e(pj,Wwo),e(Eb,Hwo),e(Q,Uwo),e(Q,Cb),e(Cb,ode),e(ode,Jwo),e(Cb,Ywo),e(Cb,_j),e(_j,Kwo),e(Cb,Zwo),e(Q,eAo),e(Q,wb),e(wb,rde),e(rde,oAo),e(wb,rAo),e(wb,bj),e(bj,tAo),e(wb,aAo),e(Q,nAo),e(Q,Ab),e(Ab,tde),e(tde,sAo),e(Ab,lAo),e(Ab,Fj),e(Fj,iAo),e(Ab,dAo),e(Q,cAo),e(Q,yb),e(yb,ade),e(ade,mAo),e(yb,fAo),e(yb,vj),e(vj,gAo),e(yb,hAo),e(Q,uAo),e(Q,Lb),e(Lb,nde),e(nde,pAo),e(Lb,_Ao),e(Lb,Tj),e(Tj,bAo),e(Lb,FAo),e(Q,vAo),e(Q,xb),e(xb,sde),e(sde,TAo),e(xb,MAo),e(xb,Mj),e(Mj,EAo),e(xb,CAo),e(Q,wAo),e(Q,$b),e($b,lde),e(lde,AAo),e($b,yAo),e($b,Ej),e(Ej,LAo),e($b,xAo),e(Q,$Ao),e(Q,kb),e(kb,ide),e(ide,kAo),e(kb,SAo),e(kb,Cj),e(Cj,RAo),e(kb,BAo),e(Q,PAo),e(Q,Sb),e(Sb,dde),e(dde,IAo),e(Sb,qAo),e(Sb,wj),e(wj,NAo),e(Sb,jAo),e(Q,DAo),e(Q,Rb),e(Rb,cde),e(cde,GAo),e(Rb,OAo),e(Rb,Aj),e(Aj,VAo),e(Rb,XAo),e(Q,zAo),e(Q,Bb),e(Bb,mde),e(mde,QAo),e(Bb,WAo),e(Bb,yj),e(yj,HAo),e(Bb,UAo),e(Q,JAo),e(Q,Pb),e(Pb,fde),e(fde,YAo),e(Pb,KAo),e(Pb,Lj),e(Lj,ZAo),e(Pb,e6o),e(Q,o6o),e(Q,Ib),e(Ib,gde),e(gde,r6o),e(Ib,t6o),e(Ib,xj),e(xj,a6o),e(Ib,n6o),e(Q,s6o),e(Q,qb),e(qb,hde),e(hde,l6o),e(qb,i6o),e(qb,$j),e($j,d6o),e(qb,c6o),e(Q,m6o),e(Q,Nb),e(Nb,ude),e(ude,f6o),e(Nb,g6o),e(Nb,kj),e(kj,h6o),e(Nb,u6o),e(Q,p6o),e(Q,jb),e(jb,pde),e(pde,_6o),e(jb,b6o),e(jb,Sj),e(Sj,F6o),e(jb,v6o),e(Q,T6o),e(Q,Db),e(Db,_de),e(_de,M6o),e(Db,E6o),e(Db,Rj),e(Rj,C6o),e(Db,w6o),e(Q,A6o),e(Q,Gb),e(Gb,bde),e(bde,y6o),e(Gb,L6o),e(Gb,Bj),e(Bj,x6o),e(Gb,$6o),e(Q,k6o),e(Q,Ob),e(Ob,Fde),e(Fde,S6o),e(Ob,R6o),e(Ob,Pj),e(Pj,B6o),e(Ob,P6o),e(Q,I6o),e(Q,Vb),e(Vb,vde),e(vde,q6o),e(Vb,N6o),e(Vb,Ij),e(Ij,j6o),e(Vb,D6o),e(Q,G6o),e(Q,Xb),e(Xb,Tde),e(Tde,O6o),e(Xb,V6o),e(Xb,Mde),e(Mde,X6o),e(Xb,z6o),e(Q,Q6o),e(Q,zb),e(zb,Ede),e(Ede,W6o),e(zb,H6o),e(zb,qj),e(qj,U6o),e(zb,J6o),e(Q,Y6o),e(Q,Qb),e(Qb,Cde),e(Cde,K6o),e(Qb,Z6o),e(Qb,Nj),e(Nj,e0o),e(Qb,o0o),e(Q,r0o),e(Q,Wb),e(Wb,wde),e(wde,t0o),e(Wb,a0o),e(Wb,jj),e(jj,n0o),e(Wb,s0o),e(Q,l0o),e(Q,Hb),e(Hb,Ade),e(Ade,i0o),e(Hb,d0o),e(Hb,Dj),e(Dj,c0o),e(Hb,m0o),e(Ye,f0o),e(Ye,Ub),e(Ub,g0o),e(Ub,yde),e(yde,h0o),e(Ub,u0o),e(Ub,Lde),e(Lde,p0o),e(Ye,_0o),M(Jb,Ye,null),b(m,sIe,_),b(m,Bi,_),e(Bi,Yb),e(Yb,xde),M(Vy,xde,null),e(Bi,b0o),e(Bi,$de),e($de,F0o),b(m,lIe,_),b(m,So,_),M(Xy,So,null),e(So,v0o),e(So,Pi),e(Pi,T0o),e(Pi,Gj),e(Gj,M0o),e(Pi,E0o),e(Pi,Oj),e(Oj,C0o),e(Pi,w0o),e(So,A0o),e(So,zy),e(zy,y0o),e(zy,kde),e(kde,L0o),e(zy,x0o),e(So,$0o),e(So,nt),M(Qy,nt,null),e(nt,k0o),e(nt,Sde),e(Sde,S0o),e(nt,R0o),e(nt,Ii),e(Ii,B0o),e(Ii,Rde),e(Rde,P0o),e(Ii,I0o),e(Ii,Vj),e(Vj,q0o),e(Ii,N0o),e(nt,j0o),M(Kb,nt,null),e(So,D0o),e(So,Ke),M(Wy,Ke,null),e(Ke,G0o),e(Ke,Bde),e(Bde,O0o),e(Ke,V0o),e(Ke,$a),e($a,X0o),e($a,Pde),e(Pde,z0o),e($a,Q0o),e($a,Ide),e(Ide,W0o),e($a,H0o),e($a,qde),e(qde,U0o),e($a,J0o),e(Ke,Y0o),e(Ke,ue),e(ue,Zb),e(Zb,Nde),e(Nde,K0o),e(Zb,Z0o),e(Zb,Xj),e(Xj,eyo),e(Zb,oyo),e(ue,ryo),e(ue,e2),e(e2,jde),e(jde,tyo),e(e2,ayo),e(e2,zj),e(zj,nyo),e(e2,syo),e(ue,lyo),e(ue,o2),e(o2,Dde),e(Dde,iyo),e(o2,dyo),e(o2,Qj),e(Qj,cyo),e(o2,myo),e(ue,fyo),e(ue,r2),e(r2,Gde),e(Gde,gyo),e(r2,hyo),e(r2,Wj),e(Wj,uyo),e(r2,pyo),e(ue,_yo),e(ue,t2),e(t2,Ode),e(Ode,byo),e(t2,Fyo),e(t2,Hj),e(Hj,vyo),e(t2,Tyo),e(ue,Myo),e(ue,a2),e(a2,Vde),e(Vde,Eyo),e(a2,Cyo),e(a2,Uj),e(Uj,wyo),e(a2,Ayo),e(ue,yyo),e(ue,n2),e(n2,Xde),e(Xde,Lyo),e(n2,xyo),e(n2,Jj),e(Jj,$yo),e(n2,kyo),e(ue,Syo),e(ue,s2),e(s2,zde),e(zde,Ryo),e(s2,Byo),e(s2,Yj),e(Yj,Pyo),e(s2,Iyo),e(ue,qyo),e(ue,l2),e(l2,Qde),e(Qde,Nyo),e(l2,jyo),e(l2,Kj),e(Kj,Dyo),e(l2,Gyo),e(ue,Oyo),e(ue,i2),e(i2,Wde),e(Wde,Vyo),e(i2,Xyo),e(i2,Zj),e(Zj,zyo),e(i2,Qyo),e(ue,Wyo),e(ue,d2),e(d2,Hde),e(Hde,Hyo),e(d2,Uyo),e(d2,eD),e(eD,Jyo),e(d2,Yyo),e(ue,Kyo),e(ue,c2),e(c2,Ude),e(Ude,Zyo),e(c2,eLo),e(c2,oD),e(oD,oLo),e(c2,rLo),e(ue,tLo),e(ue,m2),e(m2,Jde),e(Jde,aLo),e(m2,nLo),e(m2,rD),e(rD,sLo),e(m2,lLo),e(ue,iLo),e(ue,f2),e(f2,Yde),e(Yde,dLo),e(f2,cLo),e(f2,tD),e(tD,mLo),e(f2,fLo),e(ue,gLo),e(ue,g2),e(g2,Kde),e(Kde,hLo),e(g2,uLo),e(g2,aD),e(aD,pLo),e(g2,_Lo),e(ue,bLo),e(ue,h2),e(h2,Zde),e(Zde,FLo),e(h2,vLo),e(h2,nD),e(nD,TLo),e(h2,MLo),e(Ke,ELo),e(Ke,u2),e(u2,CLo),e(u2,ece),e(ece,wLo),e(u2,ALo),e(u2,oce),e(oce,yLo),e(Ke,LLo),M(p2,Ke,null),b(m,iIe,_),b(m,qi,_),e(qi,_2),e(_2,rce),M(Hy,rce,null),e(qi,xLo),e(qi,tce),e(tce,$Lo),b(m,dIe,_),b(m,Ro,_),M(Uy,Ro,null),e(Ro,kLo),e(Ro,Ni),e(Ni,SLo),e(Ni,sD),e(sD,RLo),e(Ni,BLo),e(Ni,lD),e(lD,PLo),e(Ni,ILo),e(Ro,qLo),e(Ro,Jy),e(Jy,NLo),e(Jy,ace),e(ace,jLo),e(Jy,DLo),e(Ro,GLo),e(Ro,st),M(Yy,st,null),e(st,OLo),e(st,nce),e(nce,VLo),e(st,XLo),e(st,ji),e(ji,zLo),e(ji,sce),e(sce,QLo),e(ji,WLo),e(ji,iD),e(iD,HLo),e(ji,ULo),e(st,JLo),M(b2,st,null),e(Ro,YLo),e(Ro,Ze),M(Ky,Ze,null),e(Ze,KLo),e(Ze,lce),e(lce,ZLo),e(Ze,e8o),e(Ze,ka),e(ka,o8o),e(ka,ice),e(ice,r8o),e(ka,t8o),e(ka,dce),e(dce,a8o),e(ka,n8o),e(ka,cce),e(cce,s8o),e(ka,l8o),e(Ze,i8o),e(Ze,q),e(q,F2),e(F2,mce),e(mce,d8o),e(F2,c8o),e(F2,dD),e(dD,m8o),e(F2,f8o),e(q,g8o),e(q,v2),e(v2,fce),e(fce,h8o),e(v2,u8o),e(v2,cD),e(cD,p8o),e(v2,_8o),e(q,b8o),e(q,T2),e(T2,gce),e(gce,F8o),e(T2,v8o),e(T2,mD),e(mD,T8o),e(T2,M8o),e(q,E8o),e(q,M2),e(M2,hce),e(hce,C8o),e(M2,w8o),e(M2,fD),e(fD,A8o),e(M2,y8o),e(q,L8o),e(q,E2),e(E2,uce),e(uce,x8o),e(E2,$8o),e(E2,gD),e(gD,k8o),e(E2,S8o),e(q,R8o),e(q,C2),e(C2,pce),e(pce,B8o),e(C2,P8o),e(C2,hD),e(hD,I8o),e(C2,q8o),e(q,N8o),e(q,w2),e(w2,_ce),e(_ce,j8o),e(w2,D8o),e(w2,uD),e(uD,G8o),e(w2,O8o),e(q,V8o),e(q,A2),e(A2,bce),e(bce,X8o),e(A2,z8o),e(A2,pD),e(pD,Q8o),e(A2,W8o),e(q,H8o),e(q,y2),e(y2,Fce),e(Fce,U8o),e(y2,J8o),e(y2,_D),e(_D,Y8o),e(y2,K8o),e(q,Z8o),e(q,L2),e(L2,vce),e(vce,exo),e(L2,oxo),e(L2,bD),e(bD,rxo),e(L2,txo),e(q,axo),e(q,x2),e(x2,Tce),e(Tce,nxo),e(x2,sxo),e(x2,FD),e(FD,lxo),e(x2,ixo),e(q,dxo),e(q,$2),e($2,Mce),e(Mce,cxo),e($2,mxo),e($2,vD),e(vD,fxo),e($2,gxo),e(q,hxo),e(q,k2),e(k2,Ece),e(Ece,uxo),e(k2,pxo),e(k2,TD),e(TD,_xo),e(k2,bxo),e(q,Fxo),e(q,S2),e(S2,Cce),e(Cce,vxo),e(S2,Txo),e(S2,MD),e(MD,Mxo),e(S2,Exo),e(q,Cxo),e(q,R2),e(R2,wce),e(wce,wxo),e(R2,Axo),e(R2,ED),e(ED,yxo),e(R2,Lxo),e(q,xxo),e(q,B2),e(B2,Ace),e(Ace,$xo),e(B2,kxo),e(B2,CD),e(CD,Sxo),e(B2,Rxo),e(q,Bxo),e(q,P2),e(P2,yce),e(yce,Pxo),e(P2,Ixo),e(P2,wD),e(wD,qxo),e(P2,Nxo),e(q,jxo),e(q,I2),e(I2,Lce),e(Lce,Dxo),e(I2,Gxo),e(I2,AD),e(AD,Oxo),e(I2,Vxo),e(q,Xxo),e(q,q2),e(q2,xce),e(xce,zxo),e(q2,Qxo),e(q2,yD),e(yD,Wxo),e(q2,Hxo),e(q,Uxo),e(q,N2),e(N2,$ce),e($ce,Jxo),e(N2,Yxo),e(N2,LD),e(LD,Kxo),e(N2,Zxo),e(q,e7o),e(q,j2),e(j2,kce),e(kce,o7o),e(j2,r7o),e(j2,xD),e(xD,t7o),e(j2,a7o),e(q,n7o),e(q,D2),e(D2,Sce),e(Sce,s7o),e(D2,l7o),e(D2,$D),e($D,i7o),e(D2,d7o),e(q,c7o),e(q,G2),e(G2,Rce),e(Rce,m7o),e(G2,f7o),e(G2,kD),e(kD,g7o),e(G2,h7o),e(q,u7o),e(q,O2),e(O2,Bce),e(Bce,p7o),e(O2,_7o),e(O2,SD),e(SD,b7o),e(O2,F7o),e(q,v7o),e(q,V2),e(V2,Pce),e(Pce,T7o),e(V2,M7o),e(V2,RD),e(RD,E7o),e(V2,C7o),e(q,w7o),e(q,X2),e(X2,Ice),e(Ice,A7o),e(X2,y7o),e(X2,BD),e(BD,L7o),e(X2,x7o),e(q,$7o),e(q,z2),e(z2,qce),e(qce,k7o),e(z2,S7o),e(z2,PD),e(PD,R7o),e(z2,B7o),e(q,P7o),e(q,Q2),e(Q2,Nce),e(Nce,I7o),e(Q2,q7o),e(Q2,ID),e(ID,N7o),e(Q2,j7o),e(q,D7o),e(q,W2),e(W2,jce),e(jce,G7o),e(W2,O7o),e(W2,qD),e(qD,V7o),e(W2,X7o),e(q,z7o),e(q,H2),e(H2,Dce),e(Dce,Q7o),e(H2,W7o),e(H2,ND),e(ND,H7o),e(H2,U7o),e(q,J7o),e(q,U2),e(U2,Gce),e(Gce,Y7o),e(U2,K7o),e(U2,jD),e(jD,Z7o),e(U2,e9o),e(q,o9o),e(q,J2),e(J2,Oce),e(Oce,r9o),e(J2,t9o),e(J2,DD),e(DD,a9o),e(J2,n9o),e(q,s9o),e(q,Y2),e(Y2,Vce),e(Vce,l9o),e(Y2,i9o),e(Y2,GD),e(GD,d9o),e(Y2,c9o),e(q,m9o),e(q,K2),e(K2,Xce),e(Xce,f9o),e(K2,g9o),e(K2,OD),e(OD,h9o),e(K2,u9o),e(q,p9o),e(q,Z2),e(Z2,zce),e(zce,_9o),e(Z2,b9o),e(Z2,VD),e(VD,F9o),e(Z2,v9o),e(q,T9o),e(q,eF),e(eF,Qce),e(Qce,M9o),e(eF,E9o),e(eF,XD),e(XD,C9o),e(eF,w9o),e(q,A9o),e(q,oF),e(oF,Wce),e(Wce,y9o),e(oF,L9o),e(oF,zD),e(zD,x9o),e(oF,$9o),e(q,k9o),e(q,rF),e(rF,Hce),e(Hce,S9o),e(rF,R9o),e(rF,QD),e(QD,B9o),e(rF,P9o),e(q,I9o),e(q,tF),e(tF,Uce),e(Uce,q9o),e(tF,N9o),e(tF,WD),e(WD,j9o),e(tF,D9o),e(q,G9o),e(q,aF),e(aF,Jce),e(Jce,O9o),e(aF,V9o),e(aF,HD),e(HD,X9o),e(aF,z9o),e(q,Q9o),e(q,nF),e(nF,Yce),e(Yce,W9o),e(nF,H9o),e(nF,UD),e(UD,U9o),e(nF,J9o),e(q,Y9o),e(q,sF),e(sF,Kce),e(Kce,K9o),e(sF,Z9o),e(sF,JD),e(JD,e$o),e(sF,o$o),e(q,r$o),e(q,lF),e(lF,Zce),e(Zce,t$o),e(lF,a$o),e(lF,YD),e(YD,n$o),e(lF,s$o),e(q,l$o),e(q,iF),e(iF,eme),e(eme,i$o),e(iF,d$o),e(iF,KD),e(KD,c$o),e(iF,m$o),e(q,f$o),e(q,dF),e(dF,ome),e(ome,g$o),e(dF,h$o),e(dF,ZD),e(ZD,u$o),e(dF,p$o),e(q,_$o),e(q,cF),e(cF,rme),e(rme,b$o),e(cF,F$o),e(cF,eG),e(eG,v$o),e(cF,T$o),e(Ze,M$o),e(Ze,mF),e(mF,E$o),e(mF,tme),e(tme,C$o),e(mF,w$o),e(mF,ame),e(ame,A$o),e(Ze,y$o),M(fF,Ze,null),b(m,cIe,_),b(m,Di,_),e(Di,gF),e(gF,nme),M(Zy,nme,null),e(Di,L$o),e(Di,sme),e(sme,x$o),b(m,mIe,_),b(m,Bo,_),M(eL,Bo,null),e(Bo,$$o),e(Bo,Gi),e(Gi,k$o),e(Gi,oG),e(oG,S$o),e(Gi,R$o),e(Gi,rG),e(rG,B$o),e(Gi,P$o),e(Bo,I$o),e(Bo,oL),e(oL,q$o),e(oL,lme),e(lme,N$o),e(oL,j$o),e(Bo,D$o),e(Bo,lt),M(rL,lt,null),e(lt,G$o),e(lt,ime),e(ime,O$o),e(lt,V$o),e(lt,Oi),e(Oi,X$o),e(Oi,dme),e(dme,z$o),e(Oi,Q$o),e(Oi,tG),e(tG,W$o),e(Oi,H$o),e(lt,U$o),M(hF,lt,null),e(Bo,J$o),e(Bo,eo),M(tL,eo,null),e(eo,Y$o),e(eo,cme),e(cme,K$o),e(eo,Z$o),e(eo,Sa),e(Sa,eko),e(Sa,mme),e(mme,oko),e(Sa,rko),e(Sa,fme),e(fme,tko),e(Sa,ako),e(Sa,gme),e(gme,nko),e(Sa,sko),e(eo,lko),e(eo,Y),e(Y,uF),e(uF,hme),e(hme,iko),e(uF,dko),e(uF,aG),e(aG,cko),e(uF,mko),e(Y,fko),e(Y,pF),e(pF,ume),e(ume,gko),e(pF,hko),e(pF,nG),e(nG,uko),e(pF,pko),e(Y,_ko),e(Y,_F),e(_F,pme),e(pme,bko),e(_F,Fko),e(_F,sG),e(sG,vko),e(_F,Tko),e(Y,Mko),e(Y,bF),e(bF,_me),e(_me,Eko),e(bF,Cko),e(bF,lG),e(lG,wko),e(bF,Ako),e(Y,yko),e(Y,FF),e(FF,bme),e(bme,Lko),e(FF,xko),e(FF,iG),e(iG,$ko),e(FF,kko),e(Y,Sko),e(Y,vF),e(vF,Fme),e(Fme,Rko),e(vF,Bko),e(vF,dG),e(dG,Pko),e(vF,Iko),e(Y,qko),e(Y,TF),e(TF,vme),e(vme,Nko),e(TF,jko),e(TF,cG),e(cG,Dko),e(TF,Gko),e(Y,Oko),e(Y,MF),e(MF,Tme),e(Tme,Vko),e(MF,Xko),e(MF,mG),e(mG,zko),e(MF,Qko),e(Y,Wko),e(Y,EF),e(EF,Mme),e(Mme,Hko),e(EF,Uko),e(EF,fG),e(fG,Jko),e(EF,Yko),e(Y,Kko),e(Y,CF),e(CF,Eme),e(Eme,Zko),e(CF,eSo),e(CF,gG),e(gG,oSo),e(CF,rSo),e(Y,tSo),e(Y,wF),e(wF,Cme),e(Cme,aSo),e(wF,nSo),e(wF,hG),e(hG,sSo),e(wF,lSo),e(Y,iSo),e(Y,AF),e(AF,wme),e(wme,dSo),e(AF,cSo),e(AF,uG),e(uG,mSo),e(AF,fSo),e(Y,gSo),e(Y,yF),e(yF,Ame),e(Ame,hSo),e(yF,uSo),e(yF,pG),e(pG,pSo),e(yF,_So),e(Y,bSo),e(Y,LF),e(LF,yme),e(yme,FSo),e(LF,vSo),e(LF,_G),e(_G,TSo),e(LF,MSo),e(Y,ESo),e(Y,xF),e(xF,Lme),e(Lme,CSo),e(xF,wSo),e(xF,bG),e(bG,ASo),e(xF,ySo),e(Y,LSo),e(Y,$F),e($F,xme),e(xme,xSo),e($F,$So),e($F,FG),e(FG,kSo),e($F,SSo),e(Y,RSo),e(Y,kF),e(kF,$me),e($me,BSo),e(kF,PSo),e(kF,vG),e(vG,ISo),e(kF,qSo),e(Y,NSo),e(Y,SF),e(SF,kme),e(kme,jSo),e(SF,DSo),e(SF,TG),e(TG,GSo),e(SF,OSo),e(Y,VSo),e(Y,RF),e(RF,Sme),e(Sme,XSo),e(RF,zSo),e(RF,MG),e(MG,QSo),e(RF,WSo),e(Y,HSo),e(Y,BF),e(BF,Rme),e(Rme,USo),e(BF,JSo),e(BF,EG),e(EG,YSo),e(BF,KSo),e(Y,ZSo),e(Y,PF),e(PF,Bme),e(Bme,eRo),e(PF,oRo),e(PF,CG),e(CG,rRo),e(PF,tRo),e(Y,aRo),e(Y,IF),e(IF,Pme),e(Pme,nRo),e(IF,sRo),e(IF,wG),e(wG,lRo),e(IF,iRo),e(Y,dRo),e(Y,qF),e(qF,Ime),e(Ime,cRo),e(qF,mRo),e(qF,AG),e(AG,fRo),e(qF,gRo),e(Y,hRo),e(Y,NF),e(NF,qme),e(qme,uRo),e(NF,pRo),e(NF,yG),e(yG,_Ro),e(NF,bRo),e(Y,FRo),e(Y,jF),e(jF,Nme),e(Nme,vRo),e(jF,TRo),e(jF,LG),e(LG,MRo),e(jF,ERo),e(Y,CRo),e(Y,DF),e(DF,jme),e(jme,wRo),e(DF,ARo),e(DF,xG),e(xG,yRo),e(DF,LRo),e(Y,xRo),e(Y,GF),e(GF,Dme),e(Dme,$Ro),e(GF,kRo),e(GF,$G),e($G,SRo),e(GF,RRo),e(Y,BRo),e(Y,OF),e(OF,Gme),e(Gme,PRo),e(OF,IRo),e(OF,kG),e(kG,qRo),e(OF,NRo),e(Y,jRo),e(Y,VF),e(VF,Ome),e(Ome,DRo),e(VF,GRo),e(VF,SG),e(SG,ORo),e(VF,VRo),e(eo,XRo),e(eo,XF),e(XF,zRo),e(XF,Vme),e(Vme,QRo),e(XF,WRo),e(XF,Xme),e(Xme,HRo),e(eo,URo),M(zF,eo,null),b(m,fIe,_),b(m,Vi,_),e(Vi,QF),e(QF,zme),M(aL,zme,null),e(Vi,JRo),e(Vi,Qme),e(Qme,YRo),b(m,gIe,_),b(m,Po,_),M(nL,Po,null),e(Po,KRo),e(Po,Xi),e(Xi,ZRo),e(Xi,RG),e(RG,eBo),e(Xi,oBo),e(Xi,BG),e(BG,rBo),e(Xi,tBo),e(Po,aBo),e(Po,sL),e(sL,nBo),e(sL,Wme),e(Wme,sBo),e(sL,lBo),e(Po,iBo),e(Po,it),M(lL,it,null),e(it,dBo),e(it,Hme),e(Hme,cBo),e(it,mBo),e(it,zi),e(zi,fBo),e(zi,Ume),e(Ume,gBo),e(zi,hBo),e(zi,PG),e(PG,uBo),e(zi,pBo),e(it,_Bo),M(WF,it,null),e(Po,bBo),e(Po,oo),M(iL,oo,null),e(oo,FBo),e(oo,Jme),e(Jme,vBo),e(oo,TBo),e(oo,Ra),e(Ra,MBo),e(Ra,Yme),e(Yme,EBo),e(Ra,CBo),e(Ra,Kme),e(Kme,wBo),e(Ra,ABo),e(Ra,Zme),e(Zme,yBo),e(Ra,LBo),e(oo,xBo),e(oo,Yr),e(Yr,HF),e(HF,efe),e(efe,$Bo),e(HF,kBo),e(HF,IG),e(IG,SBo),e(HF,RBo),e(Yr,BBo),e(Yr,UF),e(UF,ofe),e(ofe,PBo),e(UF,IBo),e(UF,qG),e(qG,qBo),e(UF,NBo),e(Yr,jBo),e(Yr,JF),e(JF,rfe),e(rfe,DBo),e(JF,GBo),e(JF,NG),e(NG,OBo),e(JF,VBo),e(Yr,XBo),e(Yr,YF),e(YF,tfe),e(tfe,zBo),e(YF,QBo),e(YF,jG),e(jG,WBo),e(YF,HBo),e(Yr,UBo),e(Yr,KF),e(KF,afe),e(afe,JBo),e(KF,YBo),e(KF,DG),e(DG,KBo),e(KF,ZBo),e(oo,ePo),e(oo,ZF),e(ZF,oPo),e(ZF,nfe),e(nfe,rPo),e(ZF,tPo),e(ZF,sfe),e(sfe,aPo),e(oo,nPo),M(ev,oo,null),b(m,hIe,_),b(m,Qi,_),e(Qi,ov),e(ov,lfe),M(dL,lfe,null),e(Qi,sPo),e(Qi,ife),e(ife,lPo),b(m,uIe,_),b(m,Io,_),M(cL,Io,null),e(Io,iPo),e(Io,Wi),e(Wi,dPo),e(Wi,GG),e(GG,cPo),e(Wi,mPo),e(Wi,OG),e(OG,fPo),e(Wi,gPo),e(Io,hPo),e(Io,mL),e(mL,uPo),e(mL,dfe),e(dfe,pPo),e(mL,_Po),e(Io,bPo),e(Io,dt),M(fL,dt,null),e(dt,FPo),e(dt,cfe),e(cfe,vPo),e(dt,TPo),e(dt,Hi),e(Hi,MPo),e(Hi,mfe),e(mfe,EPo),e(Hi,CPo),e(Hi,VG),e(VG,wPo),e(Hi,APo),e(dt,yPo),M(rv,dt,null),e(Io,LPo),e(Io,ro),M(gL,ro,null),e(ro,xPo),e(ro,ffe),e(ffe,$Po),e(ro,kPo),e(ro,Ba),e(Ba,SPo),e(Ba,gfe),e(gfe,RPo),e(Ba,BPo),e(Ba,hfe),e(hfe,PPo),e(Ba,IPo),e(Ba,ufe),e(ufe,qPo),e(Ba,NPo),e(ro,jPo),e(ro,U),e(U,tv),e(tv,pfe),e(pfe,DPo),e(tv,GPo),e(tv,XG),e(XG,OPo),e(tv,VPo),e(U,XPo),e(U,av),e(av,_fe),e(_fe,zPo),e(av,QPo),e(av,zG),e(zG,WPo),e(av,HPo),e(U,UPo),e(U,nv),e(nv,bfe),e(bfe,JPo),e(nv,YPo),e(nv,QG),e(QG,KPo),e(nv,ZPo),e(U,eIo),e(U,sv),e(sv,Ffe),e(Ffe,oIo),e(sv,rIo),e(sv,WG),e(WG,tIo),e(sv,aIo),e(U,nIo),e(U,lv),e(lv,vfe),e(vfe,sIo),e(lv,lIo),e(lv,HG),e(HG,iIo),e(lv,dIo),e(U,cIo),e(U,iv),e(iv,Tfe),e(Tfe,mIo),e(iv,fIo),e(iv,UG),e(UG,gIo),e(iv,hIo),e(U,uIo),e(U,dv),e(dv,Mfe),e(Mfe,pIo),e(dv,_Io),e(dv,JG),e(JG,bIo),e(dv,FIo),e(U,vIo),e(U,cv),e(cv,Efe),e(Efe,TIo),e(cv,MIo),e(cv,YG),e(YG,EIo),e(cv,CIo),e(U,wIo),e(U,mv),e(mv,Cfe),e(Cfe,AIo),e(mv,yIo),e(mv,KG),e(KG,LIo),e(mv,xIo),e(U,$Io),e(U,fv),e(fv,wfe),e(wfe,kIo),e(fv,SIo),e(fv,ZG),e(ZG,RIo),e(fv,BIo),e(U,PIo),e(U,gv),e(gv,Afe),e(Afe,IIo),e(gv,qIo),e(gv,eO),e(eO,NIo),e(gv,jIo),e(U,DIo),e(U,hv),e(hv,yfe),e(yfe,GIo),e(hv,OIo),e(hv,oO),e(oO,VIo),e(hv,XIo),e(U,zIo),e(U,uv),e(uv,Lfe),e(Lfe,QIo),e(uv,WIo),e(uv,rO),e(rO,HIo),e(uv,UIo),e(U,JIo),e(U,pv),e(pv,xfe),e(xfe,YIo),e(pv,KIo),e(pv,tO),e(tO,ZIo),e(pv,eqo),e(U,oqo),e(U,_v),e(_v,$fe),e($fe,rqo),e(_v,tqo),e(_v,aO),e(aO,aqo),e(_v,nqo),e(U,sqo),e(U,bv),e(bv,kfe),e(kfe,lqo),e(bv,iqo),e(bv,nO),e(nO,dqo),e(bv,cqo),e(U,mqo),e(U,Fv),e(Fv,Sfe),e(Sfe,fqo),e(Fv,gqo),e(Fv,sO),e(sO,hqo),e(Fv,uqo),e(U,pqo),e(U,vv),e(vv,Rfe),e(Rfe,_qo),e(vv,bqo),e(vv,lO),e(lO,Fqo),e(vv,vqo),e(U,Tqo),e(U,Tv),e(Tv,Bfe),e(Bfe,Mqo),e(Tv,Eqo),e(Tv,iO),e(iO,Cqo),e(Tv,wqo),e(U,Aqo),e(U,Mv),e(Mv,Pfe),e(Pfe,yqo),e(Mv,Lqo),e(Mv,dO),e(dO,xqo),e(Mv,$qo),e(U,kqo),e(U,Ev),e(Ev,Ife),e(Ife,Sqo),e(Ev,Rqo),e(Ev,cO),e(cO,Bqo),e(Ev,Pqo),e(U,Iqo),e(U,Cv),e(Cv,qfe),e(qfe,qqo),e(Cv,Nqo),e(Cv,mO),e(mO,jqo),e(Cv,Dqo),e(U,Gqo),e(U,wv),e(wv,Nfe),e(Nfe,Oqo),e(wv,Vqo),e(wv,fO),e(fO,Xqo),e(wv,zqo),e(U,Qqo),e(U,Av),e(Av,jfe),e(jfe,Wqo),e(Av,Hqo),e(Av,gO),e(gO,Uqo),e(Av,Jqo),e(U,Yqo),e(U,yv),e(yv,Dfe),e(Dfe,Kqo),e(yv,Zqo),e(yv,hO),e(hO,eNo),e(yv,oNo),e(U,rNo),e(U,Lv),e(Lv,Gfe),e(Gfe,tNo),e(Lv,aNo),e(Lv,uO),e(uO,nNo),e(Lv,sNo),e(U,lNo),e(U,xv),e(xv,Ofe),e(Ofe,iNo),e(xv,dNo),e(xv,pO),e(pO,cNo),e(xv,mNo),e(U,fNo),e(U,$v),e($v,Vfe),e(Vfe,gNo),e($v,hNo),e($v,_O),e(_O,uNo),e($v,pNo),e(U,_No),e(U,kv),e(kv,Xfe),e(Xfe,bNo),e(kv,FNo),e(kv,bO),e(bO,vNo),e(kv,TNo),e(U,MNo),e(U,Sv),e(Sv,zfe),e(zfe,ENo),e(Sv,CNo),e(Sv,FO),e(FO,wNo),e(Sv,ANo),e(U,yNo),e(U,Rv),e(Rv,Qfe),e(Qfe,LNo),e(Rv,xNo),e(Rv,vO),e(vO,$No),e(Rv,kNo),e(U,SNo),e(U,Bv),e(Bv,Wfe),e(Wfe,RNo),e(Bv,BNo),e(Bv,TO),e(TO,PNo),e(Bv,INo),e(U,qNo),e(U,Pv),e(Pv,Hfe),e(Hfe,NNo),e(Pv,jNo),e(Pv,MO),e(MO,DNo),e(Pv,GNo),e(ro,ONo),e(ro,Iv),e(Iv,VNo),e(Iv,Ufe),e(Ufe,XNo),e(Iv,zNo),e(Iv,Jfe),e(Jfe,QNo),e(ro,WNo),M(qv,ro,null),b(m,pIe,_),b(m,Ui,_),e(Ui,Nv),e(Nv,Yfe),M(hL,Yfe,null),e(Ui,HNo),e(Ui,Kfe),e(Kfe,UNo),b(m,_Ie,_),b(m,qo,_),M(uL,qo,null),e(qo,JNo),e(qo,Ji),e(Ji,YNo),e(Ji,EO),e(EO,KNo),e(Ji,ZNo),e(Ji,CO),e(CO,ejo),e(Ji,ojo),e(qo,rjo),e(qo,pL),e(pL,tjo),e(pL,Zfe),e(Zfe,ajo),e(pL,njo),e(qo,sjo),e(qo,ct),M(_L,ct,null),e(ct,ljo),e(ct,ege),e(ege,ijo),e(ct,djo),e(ct,Yi),e(Yi,cjo),e(Yi,oge),e(oge,mjo),e(Yi,fjo),e(Yi,wO),e(wO,gjo),e(Yi,hjo),e(ct,ujo),M(jv,ct,null),e(qo,pjo),e(qo,to),M(bL,to,null),e(to,_jo),e(to,rge),e(rge,bjo),e(to,Fjo),e(to,Pa),e(Pa,vjo),e(Pa,tge),e(tge,Tjo),e(Pa,Mjo),e(Pa,age),e(age,Ejo),e(Pa,Cjo),e(Pa,nge),e(nge,wjo),e(Pa,Ajo),e(to,yjo),e(to,O),e(O,Dv),e(Dv,sge),e(sge,Ljo),e(Dv,xjo),e(Dv,AO),e(AO,$jo),e(Dv,kjo),e(O,Sjo),e(O,Gv),e(Gv,lge),e(lge,Rjo),e(Gv,Bjo),e(Gv,yO),e(yO,Pjo),e(Gv,Ijo),e(O,qjo),e(O,Ov),e(Ov,ige),e(ige,Njo),e(Ov,jjo),e(Ov,LO),e(LO,Djo),e(Ov,Gjo),e(O,Ojo),e(O,Vv),e(Vv,dge),e(dge,Vjo),e(Vv,Xjo),e(Vv,xO),e(xO,zjo),e(Vv,Qjo),e(O,Wjo),e(O,Xv),e(Xv,cge),e(cge,Hjo),e(Xv,Ujo),e(Xv,$O),e($O,Jjo),e(Xv,Yjo),e(O,Kjo),e(O,zv),e(zv,mge),e(mge,Zjo),e(zv,eDo),e(zv,kO),e(kO,oDo),e(zv,rDo),e(O,tDo),e(O,Qv),e(Qv,fge),e(fge,aDo),e(Qv,nDo),e(Qv,SO),e(SO,sDo),e(Qv,lDo),e(O,iDo),e(O,Wv),e(Wv,gge),e(gge,dDo),e(Wv,cDo),e(Wv,RO),e(RO,mDo),e(Wv,fDo),e(O,gDo),e(O,Hv),e(Hv,hge),e(hge,hDo),e(Hv,uDo),e(Hv,BO),e(BO,pDo),e(Hv,_Do),e(O,bDo),e(O,Uv),e(Uv,uge),e(uge,FDo),e(Uv,vDo),e(Uv,PO),e(PO,TDo),e(Uv,MDo),e(O,EDo),e(O,Jv),e(Jv,pge),e(pge,CDo),e(Jv,wDo),e(Jv,IO),e(IO,ADo),e(Jv,yDo),e(O,LDo),e(O,Yv),e(Yv,_ge),e(_ge,xDo),e(Yv,$Do),e(Yv,qO),e(qO,kDo),e(Yv,SDo),e(O,RDo),e(O,Kv),e(Kv,bge),e(bge,BDo),e(Kv,PDo),e(Kv,NO),e(NO,IDo),e(Kv,qDo),e(O,NDo),e(O,Zv),e(Zv,Fge),e(Fge,jDo),e(Zv,DDo),e(Zv,jO),e(jO,GDo),e(Zv,ODo),e(O,VDo),e(O,e1),e(e1,vge),e(vge,XDo),e(e1,zDo),e(e1,DO),e(DO,QDo),e(e1,WDo),e(O,HDo),e(O,o1),e(o1,Tge),e(Tge,UDo),e(o1,JDo),e(o1,GO),e(GO,YDo),e(o1,KDo),e(O,ZDo),e(O,r1),e(r1,Mge),e(Mge,eGo),e(r1,oGo),e(r1,OO),e(OO,rGo),e(r1,tGo),e(O,aGo),e(O,t1),e(t1,Ege),e(Ege,nGo),e(t1,sGo),e(t1,VO),e(VO,lGo),e(t1,iGo),e(O,dGo),e(O,a1),e(a1,Cge),e(Cge,cGo),e(a1,mGo),e(a1,XO),e(XO,fGo),e(a1,gGo),e(O,hGo),e(O,n1),e(n1,wge),e(wge,uGo),e(n1,pGo),e(n1,zO),e(zO,_Go),e(n1,bGo),e(O,FGo),e(O,s1),e(s1,Age),e(Age,vGo),e(s1,TGo),e(s1,QO),e(QO,MGo),e(s1,EGo),e(O,CGo),e(O,l1),e(l1,yge),e(yge,wGo),e(l1,AGo),e(l1,WO),e(WO,yGo),e(l1,LGo),e(O,xGo),e(O,i1),e(i1,Lge),e(Lge,$Go),e(i1,kGo),e(i1,HO),e(HO,SGo),e(i1,RGo),e(O,BGo),e(O,d1),e(d1,xge),e(xge,PGo),e(d1,IGo),e(d1,UO),e(UO,qGo),e(d1,NGo),e(O,jGo),e(O,c1),e(c1,$ge),e($ge,DGo),e(c1,GGo),e(c1,JO),e(JO,OGo),e(c1,VGo),e(O,XGo),e(O,m1),e(m1,kge),e(kge,zGo),e(m1,QGo),e(m1,YO),e(YO,WGo),e(m1,HGo),e(O,UGo),e(O,f1),e(f1,Sge),e(Sge,JGo),e(f1,YGo),e(f1,KO),e(KO,KGo),e(f1,ZGo),e(O,eOo),e(O,g1),e(g1,Rge),e(Rge,oOo),e(g1,rOo),e(g1,ZO),e(ZO,tOo),e(g1,aOo),e(O,nOo),e(O,h1),e(h1,Bge),e(Bge,sOo),e(h1,lOo),e(h1,eV),e(eV,iOo),e(h1,dOo),e(O,cOo),e(O,u1),e(u1,Pge),e(Pge,mOo),e(u1,fOo),e(u1,oV),e(oV,gOo),e(u1,hOo),e(O,uOo),e(O,p1),e(p1,Ige),e(Ige,pOo),e(p1,_Oo),e(p1,rV),e(rV,bOo),e(p1,FOo),e(O,vOo),e(O,_1),e(_1,qge),e(qge,TOo),e(_1,MOo),e(_1,tV),e(tV,EOo),e(_1,COo),e(O,wOo),e(O,b1),e(b1,Nge),e(Nge,AOo),e(b1,yOo),e(b1,aV),e(aV,LOo),e(b1,xOo),e(O,$Oo),e(O,F1),e(F1,jge),e(jge,kOo),e(F1,SOo),e(F1,nV),e(nV,ROo),e(F1,BOo),e(O,POo),e(O,v1),e(v1,Dge),e(Dge,IOo),e(v1,qOo),e(v1,sV),e(sV,NOo),e(v1,jOo),e(O,DOo),e(O,T1),e(T1,Gge),e(Gge,GOo),e(T1,OOo),e(T1,lV),e(lV,VOo),e(T1,XOo),e(O,zOo),e(O,M1),e(M1,Oge),e(Oge,QOo),e(M1,WOo),e(M1,iV),e(iV,HOo),e(M1,UOo),e(O,JOo),e(O,E1),e(E1,Vge),e(Vge,YOo),e(E1,KOo),e(E1,dV),e(dV,ZOo),e(E1,eVo),e(O,oVo),e(O,C1),e(C1,Xge),e(Xge,rVo),e(C1,tVo),e(C1,cV),e(cV,aVo),e(C1,nVo),e(to,sVo),e(to,w1),e(w1,lVo),e(w1,zge),e(zge,iVo),e(w1,dVo),e(w1,Qge),e(Qge,cVo),e(to,mVo),M(A1,to,null),b(m,bIe,_),b(m,Ki,_),e(Ki,y1),e(y1,Wge),M(FL,Wge,null),e(Ki,fVo),e(Ki,Hge),e(Hge,gVo),b(m,FIe,_),b(m,No,_),M(vL,No,null),e(No,hVo),e(No,Zi),e(Zi,uVo),e(Zi,mV),e(mV,pVo),e(Zi,_Vo),e(Zi,fV),e(fV,bVo),e(Zi,FVo),e(No,vVo),e(No,TL),e(TL,TVo),e(TL,Uge),e(Uge,MVo),e(TL,EVo),e(No,CVo),e(No,mt),M(ML,mt,null),e(mt,wVo),e(mt,Jge),e(Jge,AVo),e(mt,yVo),e(mt,ed),e(ed,LVo),e(ed,Yge),e(Yge,xVo),e(ed,$Vo),e(ed,gV),e(gV,kVo),e(ed,SVo),e(mt,RVo),M(L1,mt,null),e(No,BVo),e(No,ao),M(EL,ao,null),e(ao,PVo),e(ao,Kge),e(Kge,IVo),e(ao,qVo),e(ao,Ia),e(Ia,NVo),e(Ia,Zge),e(Zge,jVo),e(Ia,DVo),e(Ia,ehe),e(ehe,GVo),e(Ia,OVo),e(Ia,ohe),e(ohe,VVo),e(Ia,XVo),e(ao,zVo),e(ao,rhe),e(rhe,x1),e(x1,the),e(the,QVo),e(x1,WVo),e(x1,hV),e(hV,HVo),e(x1,UVo),e(ao,JVo),e(ao,$1),e($1,YVo),e($1,ahe),e(ahe,KVo),e($1,ZVo),e($1,nhe),e(nhe,eXo),e(ao,oXo),M(k1,ao,null),b(m,vIe,_),b(m,od,_),e(od,S1),e(S1,she),M(CL,she,null),e(od,rXo),e(od,lhe),e(lhe,tXo),b(m,TIe,_),b(m,jo,_),M(wL,jo,null),e(jo,aXo),e(jo,rd),e(rd,nXo),e(rd,uV),e(uV,sXo),e(rd,lXo),e(rd,pV),e(pV,iXo),e(rd,dXo),e(jo,cXo),e(jo,AL),e(AL,mXo),e(AL,ihe),e(ihe,fXo),e(AL,gXo),e(jo,hXo),e(jo,ft),M(yL,ft,null),e(ft,uXo),e(ft,dhe),e(dhe,pXo),e(ft,_Xo),e(ft,td),e(td,bXo),e(td,che),e(che,FXo),e(td,vXo),e(td,_V),e(_V,TXo),e(td,MXo),e(ft,EXo),M(R1,ft,null),e(jo,CXo),e(jo,no),M(LL,no,null),e(no,wXo),e(no,mhe),e(mhe,AXo),e(no,yXo),e(no,qa),e(qa,LXo),e(qa,fhe),e(fhe,xXo),e(qa,$Xo),e(qa,ghe),e(ghe,kXo),e(qa,SXo),e(qa,hhe),e(hhe,RXo),e(qa,BXo),e(no,PXo),e(no,ve),e(ve,B1),e(B1,uhe),e(uhe,IXo),e(B1,qXo),e(B1,bV),e(bV,NXo),e(B1,jXo),e(ve,DXo),e(ve,P1),e(P1,phe),e(phe,GXo),e(P1,OXo),e(P1,FV),e(FV,VXo),e(P1,XXo),e(ve,zXo),e(ve,I1),e(I1,_he),e(_he,QXo),e(I1,WXo),e(I1,vV),e(vV,HXo),e(I1,UXo),e(ve,JXo),e(ve,Bs),e(Bs,bhe),e(bhe,YXo),e(Bs,KXo),e(Bs,TV),e(TV,ZXo),e(Bs,ezo),e(Bs,MV),e(MV,ozo),e(Bs,rzo),e(ve,tzo),e(ve,q1),e(q1,Fhe),e(Fhe,azo),e(q1,nzo),e(q1,EV),e(EV,szo),e(q1,lzo),e(ve,izo),e(ve,gt),e(gt,vhe),e(vhe,dzo),e(gt,czo),e(gt,CV),e(CV,mzo),e(gt,fzo),e(gt,wV),e(wV,gzo),e(gt,hzo),e(gt,AV),e(AV,uzo),e(gt,pzo),e(ve,_zo),e(ve,N1),e(N1,The),e(The,bzo),e(N1,Fzo),e(N1,yV),e(yV,vzo),e(N1,Tzo),e(ve,Mzo),e(ve,j1),e(j1,Mhe),e(Mhe,Ezo),e(j1,Czo),e(j1,LV),e(LV,wzo),e(j1,Azo),e(ve,yzo),e(ve,D1),e(D1,Ehe),e(Ehe,Lzo),e(D1,xzo),e(D1,xV),e(xV,$zo),e(D1,kzo),e(ve,Szo),e(ve,G1),e(G1,Che),e(Che,Rzo),e(G1,Bzo),e(G1,$V),e($V,Pzo),e(G1,Izo),e(ve,qzo),e(ve,O1),e(O1,whe),e(whe,Nzo),e(O1,jzo),e(O1,kV),e(kV,Dzo),e(O1,Gzo),e(ve,Ozo),e(ve,V1),e(V1,Ahe),e(Ahe,Vzo),e(V1,Xzo),e(V1,SV),e(SV,zzo),e(V1,Qzo),e(ve,Wzo),e(ve,X1),e(X1,yhe),e(yhe,Hzo),e(X1,Uzo),e(X1,RV),e(RV,Jzo),e(X1,Yzo),e(no,Kzo),e(no,z1),e(z1,Zzo),e(z1,Lhe),e(Lhe,eQo),e(z1,oQo),e(z1,xhe),e(xhe,rQo),e(no,tQo),M(Q1,no,null),b(m,MIe,_),b(m,ad,_),e(ad,W1),e(W1,$he),M(xL,$he,null),e(ad,aQo),e(ad,khe),e(khe,nQo),b(m,EIe,_),b(m,Do,_),M($L,Do,null),e(Do,sQo),e(Do,nd),e(nd,lQo),e(nd,BV),e(BV,iQo),e(nd,dQo),e(nd,PV),e(PV,cQo),e(nd,mQo),e(Do,fQo),e(Do,kL),e(kL,gQo),e(kL,She),e(She,hQo),e(kL,uQo),e(Do,pQo),e(Do,ht),M(SL,ht,null),e(ht,_Qo),e(ht,Rhe),e(Rhe,bQo),e(ht,FQo),e(ht,sd),e(sd,vQo),e(sd,Bhe),e(Bhe,TQo),e(sd,MQo),e(sd,IV),e(IV,EQo),e(sd,CQo),e(ht,wQo),M(H1,ht,null),e(Do,AQo),e(Do,so),M(RL,so,null),e(so,yQo),e(so,Phe),e(Phe,LQo),e(so,xQo),e(so,Na),e(Na,$Qo),e(Na,Ihe),e(Ihe,kQo),e(Na,SQo),e(Na,qhe),e(qhe,RQo),e(Na,BQo),e(Na,Nhe),e(Nhe,PQo),e(Na,IQo),e(so,qQo),e(so,jhe),e(jhe,U1),e(U1,Dhe),e(Dhe,NQo),e(U1,jQo),e(U1,qV),e(qV,DQo),e(U1,GQo),e(so,OQo),e(so,J1),e(J1,VQo),e(J1,Ghe),e(Ghe,XQo),e(J1,zQo),e(J1,Ohe),e(Ohe,QQo),e(so,WQo),M(Y1,so,null),b(m,CIe,_),b(m,ld,_),e(ld,K1),e(K1,Vhe),M(BL,Vhe,null),e(ld,HQo),e(ld,Xhe),e(Xhe,UQo),b(m,wIe,_),b(m,Go,_),M(PL,Go,null),e(Go,JQo),e(Go,id),e(id,YQo),e(id,NV),e(NV,KQo),e(id,ZQo),e(id,jV),e(jV,eWo),e(id,oWo),e(Go,rWo),e(Go,IL),e(IL,tWo),e(IL,zhe),e(zhe,aWo),e(IL,nWo),e(Go,sWo),e(Go,ut),M(qL,ut,null),e(ut,lWo),e(ut,Qhe),e(Qhe,iWo),e(ut,dWo),e(ut,dd),e(dd,cWo),e(dd,Whe),e(Whe,mWo),e(dd,fWo),e(dd,DV),e(DV,gWo),e(dd,hWo),e(ut,uWo),M(Z1,ut,null),e(Go,pWo),e(Go,lo),M(NL,lo,null),e(lo,_Wo),e(lo,Hhe),e(Hhe,bWo),e(lo,FWo),e(lo,ja),e(ja,vWo),e(ja,Uhe),e(Uhe,TWo),e(ja,MWo),e(ja,Jhe),e(Jhe,EWo),e(ja,CWo),e(ja,Yhe),e(Yhe,wWo),e(ja,AWo),e(lo,yWo),e(lo,Ne),e(Ne,eT),e(eT,Khe),e(Khe,LWo),e(eT,xWo),e(eT,GV),e(GV,$Wo),e(eT,kWo),e(Ne,SWo),e(Ne,oT),e(oT,Zhe),e(Zhe,RWo),e(oT,BWo),e(oT,OV),e(OV,PWo),e(oT,IWo),e(Ne,qWo),e(Ne,rT),e(rT,eue),e(eue,NWo),e(rT,jWo),e(rT,VV),e(VV,DWo),e(rT,GWo),e(Ne,OWo),e(Ne,tT),e(tT,oue),e(oue,VWo),e(tT,XWo),e(tT,XV),e(XV,zWo),e(tT,QWo),e(Ne,WWo),e(Ne,aT),e(aT,rue),e(rue,HWo),e(aT,UWo),e(aT,zV),e(zV,JWo),e(aT,YWo),e(Ne,KWo),e(Ne,nT),e(nT,tue),e(tue,ZWo),e(nT,eHo),e(nT,QV),e(QV,oHo),e(nT,rHo),e(Ne,tHo),e(Ne,sT),e(sT,aue),e(aue,aHo),e(sT,nHo),e(sT,WV),e(WV,sHo),e(sT,lHo),e(Ne,iHo),e(Ne,lT),e(lT,nue),e(nue,dHo),e(lT,cHo),e(lT,HV),e(HV,mHo),e(lT,fHo),e(lo,gHo),e(lo,iT),e(iT,hHo),e(iT,sue),e(sue,uHo),e(iT,pHo),e(iT,lue),e(lue,_Ho),e(lo,bHo),M(dT,lo,null),b(m,AIe,_),b(m,cd,_),e(cd,cT),e(cT,iue),M(jL,iue,null),e(cd,FHo),e(cd,due),e(due,vHo),b(m,yIe,_),b(m,Oo,_),M(DL,Oo,null),e(Oo,THo),e(Oo,md),e(md,MHo),e(md,UV),e(UV,EHo),e(md,CHo),e(md,JV),e(JV,wHo),e(md,AHo),e(Oo,yHo),e(Oo,GL),e(GL,LHo),e(GL,cue),e(cue,xHo),e(GL,$Ho),e(Oo,kHo),e(Oo,pt),M(OL,pt,null),e(pt,SHo),e(pt,mue),e(mue,RHo),e(pt,BHo),e(pt,fd),e(fd,PHo),e(fd,fue),e(fue,IHo),e(fd,qHo),e(fd,YV),e(YV,NHo),e(fd,jHo),e(pt,DHo),M(mT,pt,null),e(Oo,GHo),e(Oo,io),M(VL,io,null),e(io,OHo),e(io,gue),e(gue,VHo),e(io,XHo),e(io,Da),e(Da,zHo),e(Da,hue),e(hue,QHo),e(Da,WHo),e(Da,uue),e(uue,HHo),e(Da,UHo),e(Da,pue),e(pue,JHo),e(Da,YHo),e(io,KHo),e(io,Ga),e(Ga,fT),e(fT,_ue),e(_ue,ZHo),e(fT,eUo),e(fT,KV),e(KV,oUo),e(fT,rUo),e(Ga,tUo),e(Ga,gT),e(gT,bue),e(bue,aUo),e(gT,nUo),e(gT,ZV),e(ZV,sUo),e(gT,lUo),e(Ga,iUo),e(Ga,hT),e(hT,Fue),e(Fue,dUo),e(hT,cUo),e(hT,eX),e(eX,mUo),e(hT,fUo),e(Ga,gUo),e(Ga,uT),e(uT,vue),e(vue,hUo),e(uT,uUo),e(uT,oX),e(oX,pUo),e(uT,_Uo),e(io,bUo),e(io,pT),e(pT,FUo),e(pT,Tue),e(Tue,vUo),e(pT,TUo),e(pT,Mue),e(Mue,MUo),e(io,EUo),M(_T,io,null),b(m,LIe,_),b(m,gd,_),e(gd,bT),e(bT,Eue),M(XL,Eue,null),e(gd,CUo),e(gd,Cue),e(Cue,wUo),b(m,xIe,_),b(m,Vo,_),M(zL,Vo,null),e(Vo,AUo),e(Vo,hd),e(hd,yUo),e(hd,rX),e(rX,LUo),e(hd,xUo),e(hd,tX),e(tX,$Uo),e(hd,kUo),e(Vo,SUo),e(Vo,QL),e(QL,RUo),e(QL,wue),e(wue,BUo),e(QL,PUo),e(Vo,IUo),e(Vo,_t),M(WL,_t,null),e(_t,qUo),e(_t,Aue),e(Aue,NUo),e(_t,jUo),e(_t,ud),e(ud,DUo),e(ud,yue),e(yue,GUo),e(ud,OUo),e(ud,aX),e(aX,VUo),e(ud,XUo),e(_t,zUo),M(FT,_t,null),e(Vo,QUo),e(Vo,co),M(HL,co,null),e(co,WUo),e(co,Lue),e(Lue,HUo),e(co,UUo),e(co,Oa),e(Oa,JUo),e(Oa,xue),e(xue,YUo),e(Oa,KUo),e(Oa,$ue),e($ue,ZUo),e(Oa,eJo),e(Oa,kue),e(kue,oJo),e(Oa,rJo),e(co,tJo),e(co,je),e(je,vT),e(vT,Sue),e(Sue,aJo),e(vT,nJo),e(vT,nX),e(nX,sJo),e(vT,lJo),e(je,iJo),e(je,TT),e(TT,Rue),e(Rue,dJo),e(TT,cJo),e(TT,sX),e(sX,mJo),e(TT,fJo),e(je,gJo),e(je,MT),e(MT,Bue),e(Bue,hJo),e(MT,uJo),e(MT,lX),e(lX,pJo),e(MT,_Jo),e(je,bJo),e(je,ET),e(ET,Pue),e(Pue,FJo),e(ET,vJo),e(ET,iX),e(iX,TJo),e(ET,MJo),e(je,EJo),e(je,CT),e(CT,Iue),e(Iue,CJo),e(CT,wJo),e(CT,dX),e(dX,AJo),e(CT,yJo),e(je,LJo),e(je,wT),e(wT,que),e(que,xJo),e(wT,$Jo),e(wT,cX),e(cX,kJo),e(wT,SJo),e(je,RJo),e(je,AT),e(AT,Nue),e(Nue,BJo),e(AT,PJo),e(AT,mX),e(mX,IJo),e(AT,qJo),e(je,NJo),e(je,yT),e(yT,jue),e(jue,jJo),e(yT,DJo),e(yT,fX),e(fX,GJo),e(yT,OJo),e(co,VJo),e(co,LT),e(LT,XJo),e(LT,Due),e(Due,zJo),e(LT,QJo),e(LT,Gue),e(Gue,WJo),e(co,HJo),M(xT,co,null),b(m,$Ie,_),b(m,pd,_),e(pd,$T),e($T,Oue),M(UL,Oue,null),e(pd,UJo),e(pd,Vue),e(Vue,JJo),b(m,kIe,_),b(m,Xo,_),M(JL,Xo,null),e(Xo,YJo),e(Xo,_d),e(_d,KJo),e(_d,gX),e(gX,ZJo),e(_d,eYo),e(_d,hX),e(hX,oYo),e(_d,rYo),e(Xo,tYo),e(Xo,YL),e(YL,aYo),e(YL,Xue),e(Xue,nYo),e(YL,sYo),e(Xo,lYo),e(Xo,bt),M(KL,bt,null),e(bt,iYo),e(bt,zue),e(zue,dYo),e(bt,cYo),e(bt,bd),e(bd,mYo),e(bd,Que),e(Que,fYo),e(bd,gYo),e(bd,uX),e(uX,hYo),e(bd,uYo),e(bt,pYo),M(kT,bt,null),e(Xo,_Yo),e(Xo,mo),M(ZL,mo,null),e(mo,bYo),e(mo,Wue),e(Wue,FYo),e(mo,vYo),e(mo,Va),e(Va,TYo),e(Va,Hue),e(Hue,MYo),e(Va,EYo),e(Va,Uue),e(Uue,CYo),e(Va,wYo),e(Va,Jue),e(Jue,AYo),e(Va,yYo),e(mo,LYo),e(mo,e8),e(e8,ST),e(ST,Yue),e(Yue,xYo),e(ST,$Yo),e(ST,pX),e(pX,kYo),e(ST,SYo),e(e8,RYo),e(e8,RT),e(RT,Kue),e(Kue,BYo),e(RT,PYo),e(RT,_X),e(_X,IYo),e(RT,qYo),e(mo,NYo),e(mo,BT),e(BT,jYo),e(BT,Zue),e(Zue,DYo),e(BT,GYo),e(BT,epe),e(epe,OYo),e(mo,VYo),M(PT,mo,null),b(m,SIe,_),b(m,Fd,_),e(Fd,IT),e(IT,ope),M(o8,ope,null),e(Fd,XYo),e(Fd,rpe),e(rpe,zYo),b(m,RIe,_),b(m,zo,_),M(r8,zo,null),e(zo,QYo),e(zo,vd),e(vd,WYo),e(vd,bX),e(bX,HYo),e(vd,UYo),e(vd,FX),e(FX,JYo),e(vd,YYo),e(zo,KYo),e(zo,t8),e(t8,ZYo),e(t8,tpe),e(tpe,eKo),e(t8,oKo),e(zo,rKo),e(zo,Ft),M(a8,Ft,null),e(Ft,tKo),e(Ft,ape),e(ape,aKo),e(Ft,nKo),e(Ft,Td),e(Td,sKo),e(Td,npe),e(npe,lKo),e(Td,iKo),e(Td,vX),e(vX,dKo),e(Td,cKo),e(Ft,mKo),M(qT,Ft,null),e(zo,fKo),e(zo,fo),M(n8,fo,null),e(fo,gKo),e(fo,spe),e(spe,hKo),e(fo,uKo),e(fo,Xa),e(Xa,pKo),e(Xa,lpe),e(lpe,_Ko),e(Xa,bKo),e(Xa,ipe),e(ipe,FKo),e(Xa,vKo),e(Xa,dpe),e(dpe,TKo),e(Xa,MKo),e(fo,EKo),e(fo,za),e(za,NT),e(NT,cpe),e(cpe,CKo),e(NT,wKo),e(NT,TX),e(TX,AKo),e(NT,yKo),e(za,LKo),e(za,jT),e(jT,mpe),e(mpe,xKo),e(jT,$Ko),e(jT,MX),e(MX,kKo),e(jT,SKo),e(za,RKo),e(za,DT),e(DT,fpe),e(fpe,BKo),e(DT,PKo),e(DT,EX),e(EX,IKo),e(DT,qKo),e(za,NKo),e(za,GT),e(GT,gpe),e(gpe,jKo),e(GT,DKo),e(GT,CX),e(CX,GKo),e(GT,OKo),e(fo,VKo),e(fo,OT),e(OT,XKo),e(OT,hpe),e(hpe,zKo),e(OT,QKo),e(OT,upe),e(upe,WKo),e(fo,HKo),M(VT,fo,null),b(m,BIe,_),b(m,Md,_),e(Md,XT),e(XT,ppe),M(s8,ppe,null),e(Md,UKo),e(Md,_pe),e(_pe,JKo),b(m,PIe,_),b(m,Qo,_),M(l8,Qo,null),e(Qo,YKo),e(Qo,Ed),e(Ed,KKo),e(Ed,wX),e(wX,ZKo),e(Ed,eZo),e(Ed,AX),e(AX,oZo),e(Ed,rZo),e(Qo,tZo),e(Qo,i8),e(i8,aZo),e(i8,bpe),e(bpe,nZo),e(i8,sZo),e(Qo,lZo),e(Qo,vt),M(d8,vt,null),e(vt,iZo),e(vt,Fpe),e(Fpe,dZo),e(vt,cZo),e(vt,Cd),e(Cd,mZo),e(Cd,vpe),e(vpe,fZo),e(Cd,gZo),e(Cd,yX),e(yX,hZo),e(Cd,uZo),e(vt,pZo),M(zT,vt,null),e(Qo,_Zo),e(Qo,go),M(c8,go,null),e(go,bZo),e(go,Tpe),e(Tpe,FZo),e(go,vZo),e(go,Qa),e(Qa,TZo),e(Qa,Mpe),e(Mpe,MZo),e(Qa,EZo),e(Qa,Epe),e(Epe,CZo),e(Qa,wZo),e(Qa,Cpe),e(Cpe,AZo),e(Qa,yZo),e(go,LZo),e(go,wd),e(wd,QT),e(QT,wpe),e(wpe,xZo),e(QT,$Zo),e(QT,LX),e(LX,kZo),e(QT,SZo),e(wd,RZo),e(wd,WT),e(WT,Ape),e(Ape,BZo),e(WT,PZo),e(WT,xX),e(xX,IZo),e(WT,qZo),e(wd,NZo),e(wd,HT),e(HT,ype),e(ype,jZo),e(HT,DZo),e(HT,$X),e($X,GZo),e(HT,OZo),e(go,VZo),e(go,UT),e(UT,XZo),e(UT,Lpe),e(Lpe,zZo),e(UT,QZo),e(UT,xpe),e(xpe,WZo),e(go,HZo),M(JT,go,null),b(m,IIe,_),b(m,Ad,_),e(Ad,YT),e(YT,$pe),M(m8,$pe,null),e(Ad,UZo),e(Ad,kpe),e(kpe,JZo),b(m,qIe,_),b(m,Wo,_),M(f8,Wo,null),e(Wo,YZo),e(Wo,yd),e(yd,KZo),e(yd,kX),e(kX,ZZo),e(yd,eer),e(yd,SX),e(SX,oer),e(yd,rer),e(Wo,ter),e(Wo,g8),e(g8,aer),e(g8,Spe),e(Spe,ner),e(g8,ser),e(Wo,ler),e(Wo,Tt),M(h8,Tt,null),e(Tt,ier),e(Tt,Rpe),e(Rpe,der),e(Tt,cer),e(Tt,Ld),e(Ld,mer),e(Ld,Bpe),e(Bpe,fer),e(Ld,ger),e(Ld,RX),e(RX,her),e(Ld,uer),e(Tt,per),M(KT,Tt,null),e(Wo,_er),e(Wo,ho),M(u8,ho,null),e(ho,ber),e(ho,Ppe),e(Ppe,Fer),e(ho,ver),e(ho,Wa),e(Wa,Ter),e(Wa,Ipe),e(Ipe,Mer),e(Wa,Eer),e(Wa,qpe),e(qpe,Cer),e(Wa,wer),e(Wa,Npe),e(Npe,Aer),e(Wa,yer),e(ho,Ler),e(ho,p8),e(p8,ZT),e(ZT,jpe),e(jpe,xer),e(ZT,$er),e(ZT,BX),e(BX,ker),e(ZT,Ser),e(p8,Rer),e(p8,eM),e(eM,Dpe),e(Dpe,Ber),e(eM,Per),e(eM,PX),e(PX,Ier),e(eM,qer),e(ho,Ner),e(ho,oM),e(oM,jer),e(oM,Gpe),e(Gpe,Der),e(oM,Ger),e(oM,Ope),e(Ope,Oer),e(ho,Ver),M(rM,ho,null),b(m,NIe,_),b(m,xd,_),e(xd,tM),e(tM,Vpe),M(_8,Vpe,null),e(xd,Xer),e(xd,Xpe),e(Xpe,zer),b(m,jIe,_),b(m,Ho,_),M(b8,Ho,null),e(Ho,Qer),e(Ho,$d),e($d,Wer),e($d,IX),e(IX,Her),e($d,Uer),e($d,qX),e(qX,Jer),e($d,Yer),e(Ho,Ker),e(Ho,F8),e(F8,Zer),e(F8,zpe),e(zpe,eor),e(F8,oor),e(Ho,ror),e(Ho,Mt),M(v8,Mt,null),e(Mt,tor),e(Mt,Qpe),e(Qpe,aor),e(Mt,nor),e(Mt,kd),e(kd,sor),e(kd,Wpe),e(Wpe,lor),e(kd,ior),e(kd,NX),e(NX,dor),e(kd,cor),e(Mt,mor),M(aM,Mt,null),e(Ho,gor),e(Ho,uo),M(T8,uo,null),e(uo,hor),e(uo,Hpe),e(Hpe,uor),e(uo,por),e(uo,Ha),e(Ha,_or),e(Ha,Upe),e(Upe,bor),e(Ha,For),e(Ha,Jpe),e(Jpe,vor),e(Ha,Tor),e(Ha,Ype),e(Ype,Mor),e(Ha,Eor),e(uo,Cor),e(uo,Kpe),e(Kpe,nM),e(nM,Zpe),e(Zpe,wor),e(nM,Aor),e(nM,jX),e(jX,yor),e(nM,Lor),e(uo,xor),e(uo,sM),e(sM,$or),e(sM,e_e),e(e_e,kor),e(sM,Sor),e(sM,o_e),e(o_e,Ror),e(uo,Bor),M(lM,uo,null),b(m,DIe,_),b(m,Sd,_),e(Sd,iM),e(iM,r_e),M(M8,r_e,null),e(Sd,Por),e(Sd,t_e),e(t_e,Ior),b(m,GIe,_),b(m,Uo,_),M(E8,Uo,null),e(Uo,qor),e(Uo,Rd),e(Rd,Nor),e(Rd,DX),e(DX,jor),e(Rd,Dor),e(Rd,GX),e(GX,Gor),e(Rd,Oor),e(Uo,Vor),e(Uo,C8),e(C8,Xor),e(C8,a_e),e(a_e,zor),e(C8,Qor),e(Uo,Wor),e(Uo,Et),M(w8,Et,null),e(Et,Hor),e(Et,n_e),e(n_e,Uor),e(Et,Jor),e(Et,Bd),e(Bd,Yor),e(Bd,s_e),e(s_e,Kor),e(Bd,Zor),e(Bd,OX),e(OX,err),e(Bd,orr),e(Et,rrr),M(dM,Et,null),e(Uo,trr),e(Uo,po),M(A8,po,null),e(po,arr),e(po,l_e),e(l_e,nrr),e(po,srr),e(po,Ua),e(Ua,lrr),e(Ua,i_e),e(i_e,irr),e(Ua,drr),e(Ua,d_e),e(d_e,crr),e(Ua,mrr),e(Ua,c_e),e(c_e,frr),e(Ua,grr),e(po,hrr),e(po,Ja),e(Ja,cM),e(cM,m_e),e(m_e,urr),e(cM,prr),e(cM,VX),e(VX,_rr),e(cM,brr),e(Ja,Frr),e(Ja,mM),e(mM,f_e),e(f_e,vrr),e(mM,Trr),e(mM,XX),e(XX,Mrr),e(mM,Err),e(Ja,Crr),e(Ja,fM),e(fM,g_e),e(g_e,wrr),e(fM,Arr),e(fM,zX),e(zX,yrr),e(fM,Lrr),e(Ja,xrr),e(Ja,gM),e(gM,h_e),e(h_e,$rr),e(gM,krr),e(gM,QX),e(QX,Srr),e(gM,Rrr),e(po,Brr),e(po,hM),e(hM,Prr),e(hM,u_e),e(u_e,Irr),e(hM,qrr),e(hM,p_e),e(p_e,Nrr),e(po,jrr),M(uM,po,null),b(m,OIe,_),b(m,Pd,_),e(Pd,pM),e(pM,__e),M(y8,__e,null),e(Pd,Drr),e(Pd,b_e),e(b_e,Grr),b(m,VIe,_),b(m,Jo,_),M(L8,Jo,null),e(Jo,Orr),e(Jo,Id),e(Id,Vrr),e(Id,WX),e(WX,Xrr),e(Id,zrr),e(Id,HX),e(HX,Qrr),e(Id,Wrr),e(Jo,Hrr),e(Jo,x8),e(x8,Urr),e(x8,F_e),e(F_e,Jrr),e(x8,Yrr),e(Jo,Krr),e(Jo,Ct),M($8,Ct,null),e(Ct,Zrr),e(Ct,v_e),e(v_e,etr),e(Ct,otr),e(Ct,qd),e(qd,rtr),e(qd,T_e),e(T_e,ttr),e(qd,atr),e(qd,UX),e(UX,ntr),e(qd,str),e(Ct,ltr),M(_M,Ct,null),e(Jo,itr),e(Jo,_o),M(k8,_o,null),e(_o,dtr),e(_o,M_e),e(M_e,ctr),e(_o,mtr),e(_o,Ya),e(Ya,ftr),e(Ya,E_e),e(E_e,gtr),e(Ya,htr),e(Ya,C_e),e(C_e,utr),e(Ya,ptr),e(Ya,w_e),e(w_e,_tr),e(Ya,btr),e(_o,Ftr),e(_o,A_e),e(A_e,bM),e(bM,y_e),e(y_e,vtr),e(bM,Ttr),e(bM,JX),e(JX,Mtr),e(bM,Etr),e(_o,Ctr),e(_o,FM),e(FM,wtr),e(FM,L_e),e(L_e,Atr),e(FM,ytr),e(FM,x_e),e(x_e,Ltr),e(_o,xtr),M(vM,_o,null),b(m,XIe,_),b(m,Nd,_),e(Nd,TM),e(TM,$_e),M(S8,$_e,null),e(Nd,$tr),e(Nd,k_e),e(k_e,ktr),b(m,zIe,_),b(m,Yo,_),M(R8,Yo,null),e(Yo,Str),e(Yo,jd),e(jd,Rtr),e(jd,YX),e(YX,Btr),e(jd,Ptr),e(jd,KX),e(KX,Itr),e(jd,qtr),e(Yo,Ntr),e(Yo,B8),e(B8,jtr),e(B8,S_e),e(S_e,Dtr),e(B8,Gtr),e(Yo,Otr),e(Yo,wt),M(P8,wt,null),e(wt,Vtr),e(wt,R_e),e(R_e,Xtr),e(wt,ztr),e(wt,Dd),e(Dd,Qtr),e(Dd,B_e),e(B_e,Wtr),e(Dd,Htr),e(Dd,ZX),e(ZX,Utr),e(Dd,Jtr),e(wt,Ytr),M(MM,wt,null),e(Yo,Ktr),e(Yo,wr),M(I8,wr,null),e(wr,Ztr),e(wr,P_e),e(P_e,ear),e(wr,oar),e(wr,Ka),e(Ka,rar),e(Ka,I_e),e(I_e,tar),e(Ka,aar),e(Ka,q_e),e(q_e,nar),e(Ka,sar),e(Ka,N_e),e(N_e,lar),e(Ka,iar),e(wr,dar),e(wr,N),e(N,EM),e(EM,j_e),e(j_e,car),e(EM,mar),e(EM,ez),e(ez,far),e(EM,gar),e(N,har),e(N,CM),e(CM,D_e),e(D_e,uar),e(CM,par),e(CM,oz),e(oz,_ar),e(CM,bar),e(N,Far),e(N,wM),e(wM,G_e),e(G_e,Tar),e(wM,Mar),e(wM,rz),e(rz,Ear),e(wM,Car),e(N,war),e(N,AM),e(AM,O_e),e(O_e,Aar),e(AM,yar),e(AM,tz),e(tz,Lar),e(AM,xar),e(N,$ar),e(N,yM),e(yM,V_e),e(V_e,kar),e(yM,Sar),e(yM,az),e(az,Rar),e(yM,Bar),e(N,Par),e(N,LM),e(LM,X_e),e(X_e,Iar),e(LM,qar),e(LM,nz),e(nz,Nar),e(LM,jar),e(N,Dar),e(N,xM),e(xM,z_e),e(z_e,Gar),e(xM,Oar),e(xM,sz),e(sz,Var),e(xM,Xar),e(N,zar),e(N,$M),e($M,Q_e),e(Q_e,Qar),e($M,War),e($M,lz),e(lz,Har),e($M,Uar),e(N,Jar),e(N,kM),e(kM,W_e),e(W_e,Yar),e(kM,Kar),e(kM,iz),e(iz,Zar),e(kM,enr),e(N,onr),e(N,SM),e(SM,H_e),e(H_e,rnr),e(SM,tnr),e(SM,dz),e(dz,anr),e(SM,nnr),e(N,snr),e(N,RM),e(RM,U_e),e(U_e,lnr),e(RM,inr),e(RM,cz),e(cz,dnr),e(RM,cnr),e(N,mnr),e(N,BM),e(BM,J_e),e(J_e,fnr),e(BM,gnr),e(BM,mz),e(mz,hnr),e(BM,unr),e(N,pnr),e(N,PM),e(PM,Y_e),e(Y_e,_nr),e(PM,bnr),e(PM,fz),e(fz,Fnr),e(PM,vnr),e(N,Tnr),e(N,IM),e(IM,K_e),e(K_e,Mnr),e(IM,Enr),e(IM,gz),e(gz,Cnr),e(IM,wnr),e(N,Anr),e(N,qM),e(qM,Z_e),e(Z_e,ynr),e(qM,Lnr),e(qM,hz),e(hz,xnr),e(qM,$nr),e(N,knr),e(N,NM),e(NM,ebe),e(ebe,Snr),e(NM,Rnr),e(NM,uz),e(uz,Bnr),e(NM,Pnr),e(N,Inr),e(N,jM),e(jM,obe),e(obe,qnr),e(jM,Nnr),e(jM,pz),e(pz,jnr),e(jM,Dnr),e(N,Gnr),e(N,Ps),e(Ps,rbe),e(rbe,Onr),e(Ps,Vnr),e(Ps,_z),e(_z,Xnr),e(Ps,znr),e(Ps,bz),e(bz,Qnr),e(Ps,Wnr),e(N,Hnr),e(N,DM),e(DM,tbe),e(tbe,Unr),e(DM,Jnr),e(DM,Fz),e(Fz,Ynr),e(DM,Knr),e(N,Znr),e(N,GM),e(GM,abe),e(abe,esr),e(GM,osr),e(GM,vz),e(vz,rsr),e(GM,tsr),e(N,asr),e(N,OM),e(OM,nbe),e(nbe,nsr),e(OM,ssr),e(OM,Tz),e(Tz,lsr),e(OM,isr),e(N,dsr),e(N,VM),e(VM,sbe),e(sbe,csr),e(VM,msr),e(VM,Mz),e(Mz,fsr),e(VM,gsr),e(N,hsr),e(N,XM),e(XM,lbe),e(lbe,usr),e(XM,psr),e(XM,Ez),e(Ez,_sr),e(XM,bsr),e(N,Fsr),e(N,zM),e(zM,ibe),e(ibe,vsr),e(zM,Tsr),e(zM,Cz),e(Cz,Msr),e(zM,Esr),e(N,Csr),e(N,QM),e(QM,dbe),e(dbe,wsr),e(QM,Asr),e(QM,wz),e(wz,ysr),e(QM,Lsr),e(N,xsr),e(N,WM),e(WM,cbe),e(cbe,$sr),e(WM,ksr),e(WM,Az),e(Az,Ssr),e(WM,Rsr),e(N,Bsr),e(N,HM),e(HM,mbe),e(mbe,Psr),e(HM,Isr),e(HM,yz),e(yz,qsr),e(HM,Nsr),e(N,jsr),e(N,UM),e(UM,fbe),e(fbe,Dsr),e(UM,Gsr),e(UM,Lz),e(Lz,Osr),e(UM,Vsr),e(N,Xsr),e(N,JM),e(JM,gbe),e(gbe,zsr),e(JM,Qsr),e(JM,xz),e(xz,Wsr),e(JM,Hsr),e(N,Usr),e(N,YM),e(YM,hbe),e(hbe,Jsr),e(YM,Ysr),e(YM,$z),e($z,Ksr),e(YM,Zsr),e(N,elr),e(N,KM),e(KM,ube),e(ube,olr),e(KM,rlr),e(KM,kz),e(kz,tlr),e(KM,alr),e(N,nlr),e(N,ZM),e(ZM,pbe),e(pbe,slr),e(ZM,llr),e(ZM,Sz),e(Sz,ilr),e(ZM,dlr),e(N,clr),e(N,e4),e(e4,_be),e(_be,mlr),e(e4,flr),e(e4,Rz),e(Rz,glr),e(e4,hlr),e(N,ulr),e(N,o4),e(o4,bbe),e(bbe,plr),e(o4,_lr),e(o4,Bz),e(Bz,blr),e(o4,Flr),e(N,vlr),e(N,r4),e(r4,Fbe),e(Fbe,Tlr),e(r4,Mlr),e(r4,Pz),e(Pz,Elr),e(r4,Clr),e(N,wlr),e(N,t4),e(t4,vbe),e(vbe,Alr),e(t4,ylr),e(t4,Iz),e(Iz,Llr),e(t4,xlr),e(N,$lr),e(N,a4),e(a4,Tbe),e(Tbe,klr),e(a4,Slr),e(a4,qz),e(qz,Rlr),e(a4,Blr),e(N,Plr),e(N,n4),e(n4,Mbe),e(Mbe,Ilr),e(n4,qlr),e(n4,Nz),e(Nz,Nlr),e(n4,jlr),e(N,Dlr),e(N,s4),e(s4,Ebe),e(Ebe,Glr),e(s4,Olr),e(s4,jz),e(jz,Vlr),e(s4,Xlr),e(N,zlr),e(N,l4),e(l4,Cbe),e(Cbe,Qlr),e(l4,Wlr),e(l4,Dz),e(Dz,Hlr),e(l4,Ulr),e(N,Jlr),e(N,i4),e(i4,wbe),e(wbe,Ylr),e(i4,Klr),e(i4,Gz),e(Gz,Zlr),e(i4,eir),e(N,oir),e(N,d4),e(d4,Abe),e(Abe,rir),e(d4,tir),e(d4,Oz),e(Oz,air),e(d4,nir),e(N,sir),e(N,c4),e(c4,ybe),e(ybe,lir),e(c4,iir),e(c4,Vz),e(Vz,dir),e(c4,cir),e(N,mir),e(N,m4),e(m4,Lbe),e(Lbe,fir),e(m4,gir),e(m4,Xz),e(Xz,hir),e(m4,uir),e(N,pir),e(N,f4),e(f4,xbe),e(xbe,_ir),e(f4,bir),e(f4,zz),e(zz,Fir),e(f4,vir),e(N,Tir),e(N,g4),e(g4,$be),e($be,Mir),e(g4,Eir),e(g4,Qz),e(Qz,Cir),e(g4,wir),e(wr,Air),M(h4,wr,null),b(m,QIe,_),b(m,Gd,_),e(Gd,u4),e(u4,kbe),M(q8,kbe,null),e(Gd,yir),e(Gd,Sbe),e(Sbe,Lir),b(m,WIe,_),b(m,Ko,_),M(N8,Ko,null),e(Ko,xir),e(Ko,Od),e(Od,$ir),e(Od,Wz),e(Wz,kir),e(Od,Sir),e(Od,Hz),e(Hz,Rir),e(Od,Bir),e(Ko,Pir),e(Ko,j8),e(j8,Iir),e(j8,Rbe),e(Rbe,qir),e(j8,Nir),e(Ko,jir),e(Ko,At),M(D8,At,null),e(At,Dir),e(At,Bbe),e(Bbe,Gir),e(At,Oir),e(At,Vd),e(Vd,Vir),e(Vd,Pbe),e(Pbe,Xir),e(Vd,zir),e(Vd,Uz),e(Uz,Qir),e(Vd,Wir),e(At,Hir),M(p4,At,null),e(Ko,Uir),e(Ko,Ar),M(G8,Ar,null),e(Ar,Jir),e(Ar,Ibe),e(Ibe,Yir),e(Ar,Kir),e(Ar,Za),e(Za,Zir),e(Za,qbe),e(qbe,edr),e(Za,odr),e(Za,Nbe),e(Nbe,rdr),e(Za,tdr),e(Za,jbe),e(jbe,adr),e(Za,ndr),e(Ar,sdr),e(Ar,se),e(se,_4),e(_4,Dbe),e(Dbe,ldr),e(_4,idr),e(_4,Jz),e(Jz,ddr),e(_4,cdr),e(se,mdr),e(se,b4),e(b4,Gbe),e(Gbe,fdr),e(b4,gdr),e(b4,Yz),e(Yz,hdr),e(b4,udr),e(se,pdr),e(se,F4),e(F4,Obe),e(Obe,_dr),e(F4,bdr),e(F4,Kz),e(Kz,Fdr),e(F4,vdr),e(se,Tdr),e(se,v4),e(v4,Vbe),e(Vbe,Mdr),e(v4,Edr),e(v4,Zz),e(Zz,Cdr),e(v4,wdr),e(se,Adr),e(se,T4),e(T4,Xbe),e(Xbe,ydr),e(T4,Ldr),e(T4,eQ),e(eQ,xdr),e(T4,$dr),e(se,kdr),e(se,M4),e(M4,zbe),e(zbe,Sdr),e(M4,Rdr),e(M4,oQ),e(oQ,Bdr),e(M4,Pdr),e(se,Idr),e(se,E4),e(E4,Qbe),e(Qbe,qdr),e(E4,Ndr),e(E4,rQ),e(rQ,jdr),e(E4,Ddr),e(se,Gdr),e(se,C4),e(C4,Wbe),e(Wbe,Odr),e(C4,Vdr),e(C4,tQ),e(tQ,Xdr),e(C4,zdr),e(se,Qdr),e(se,w4),e(w4,Hbe),e(Hbe,Wdr),e(w4,Hdr),e(w4,aQ),e(aQ,Udr),e(w4,Jdr),e(se,Ydr),e(se,A4),e(A4,Ube),e(Ube,Kdr),e(A4,Zdr),e(A4,nQ),e(nQ,ecr),e(A4,ocr),e(se,rcr),e(se,y4),e(y4,Jbe),e(Jbe,tcr),e(y4,acr),e(y4,sQ),e(sQ,ncr),e(y4,scr),e(se,lcr),e(se,L4),e(L4,Ybe),e(Ybe,icr),e(L4,dcr),e(L4,lQ),e(lQ,ccr),e(L4,mcr),e(se,fcr),e(se,x4),e(x4,Kbe),e(Kbe,gcr),e(x4,hcr),e(x4,iQ),e(iQ,ucr),e(x4,pcr),e(se,_cr),e(se,$4),e($4,Zbe),e(Zbe,bcr),e($4,Fcr),e($4,dQ),e(dQ,vcr),e($4,Tcr),e(se,Mcr),e(se,k4),e(k4,e2e),e(e2e,Ecr),e(k4,Ccr),e(k4,cQ),e(cQ,wcr),e(k4,Acr),e(se,ycr),e(se,S4),e(S4,o2e),e(o2e,Lcr),e(S4,xcr),e(S4,mQ),e(mQ,$cr),e(S4,kcr),e(se,Scr),e(se,R4),e(R4,r2e),e(r2e,Rcr),e(R4,Bcr),e(R4,fQ),e(fQ,Pcr),e(R4,Icr),e(se,qcr),e(se,B4),e(B4,t2e),e(t2e,Ncr),e(B4,jcr),e(B4,gQ),e(gQ,Dcr),e(B4,Gcr),e(se,Ocr),e(se,P4),e(P4,a2e),e(a2e,Vcr),e(P4,Xcr),e(P4,hQ),e(hQ,zcr),e(P4,Qcr),e(se,Wcr),e(se,I4),e(I4,n2e),e(n2e,Hcr),e(I4,Ucr),e(I4,uQ),e(uQ,Jcr),e(I4,Ycr),e(se,Kcr),e(se,q4),e(q4,s2e),e(s2e,Zcr),e(q4,emr),e(q4,pQ),e(pQ,omr),e(q4,rmr),e(se,tmr),e(se,N4),e(N4,l2e),e(l2e,amr),e(N4,nmr),e(N4,_Q),e(_Q,smr),e(N4,lmr),e(se,imr),e(se,j4),e(j4,i2e),e(i2e,dmr),e(j4,cmr),e(j4,bQ),e(bQ,mmr),e(j4,fmr),e(Ar,gmr),M(D4,Ar,null),b(m,HIe,_),b(m,Xd,_),e(Xd,G4),e(G4,d2e),M(O8,d2e,null),e(Xd,hmr),e(Xd,c2e),e(c2e,umr),b(m,UIe,_),b(m,Zo,_),M(V8,Zo,null),e(Zo,pmr),e(Zo,zd),e(zd,_mr),e(zd,FQ),e(FQ,bmr),e(zd,Fmr),e(zd,vQ),e(vQ,vmr),e(zd,Tmr),e(Zo,Mmr),e(Zo,X8),e(X8,Emr),e(X8,m2e),e(m2e,Cmr),e(X8,wmr),e(Zo,Amr),e(Zo,yt),M(z8,yt,null),e(yt,ymr),e(yt,f2e),e(f2e,Lmr),e(yt,xmr),e(yt,Qd),e(Qd,$mr),e(Qd,g2e),e(g2e,kmr),e(Qd,Smr),e(Qd,TQ),e(TQ,Rmr),e(Qd,Bmr),e(yt,Pmr),M(O4,yt,null),e(Zo,Imr),e(Zo,yr),M(Q8,yr,null),e(yr,qmr),e(yr,h2e),e(h2e,Nmr),e(yr,jmr),e(yr,en),e(en,Dmr),e(en,u2e),e(u2e,Gmr),e(en,Omr),e(en,p2e),e(p2e,Vmr),e(en,Xmr),e(en,_2e),e(_2e,zmr),e(en,Qmr),e(yr,Wmr),e(yr,Te),e(Te,V4),e(V4,b2e),e(b2e,Hmr),e(V4,Umr),e(V4,MQ),e(MQ,Jmr),e(V4,Ymr),e(Te,Kmr),e(Te,X4),e(X4,F2e),e(F2e,Zmr),e(X4,efr),e(X4,EQ),e(EQ,ofr),e(X4,rfr),e(Te,tfr),e(Te,z4),e(z4,v2e),e(v2e,afr),e(z4,nfr),e(z4,CQ),e(CQ,sfr),e(z4,lfr),e(Te,ifr),e(Te,Q4),e(Q4,T2e),e(T2e,dfr),e(Q4,cfr),e(Q4,wQ),e(wQ,mfr),e(Q4,ffr),e(Te,gfr),e(Te,W4),e(W4,M2e),e(M2e,hfr),e(W4,ufr),e(W4,AQ),e(AQ,pfr),e(W4,_fr),e(Te,bfr),e(Te,H4),e(H4,E2e),e(E2e,Ffr),e(H4,vfr),e(H4,yQ),e(yQ,Tfr),e(H4,Mfr),e(Te,Efr),e(Te,U4),e(U4,C2e),e(C2e,Cfr),e(U4,wfr),e(U4,LQ),e(LQ,Afr),e(U4,yfr),e(Te,Lfr),e(Te,J4),e(J4,w2e),e(w2e,xfr),e(J4,$fr),e(J4,xQ),e(xQ,kfr),e(J4,Sfr),e(Te,Rfr),e(Te,Y4),e(Y4,A2e),e(A2e,Bfr),e(Y4,Pfr),e(Y4,$Q),e($Q,Ifr),e(Y4,qfr),e(Te,Nfr),e(Te,K4),e(K4,y2e),e(y2e,jfr),e(K4,Dfr),e(K4,kQ),e(kQ,Gfr),e(K4,Ofr),e(Te,Vfr),e(Te,Z4),e(Z4,L2e),e(L2e,Xfr),e(Z4,zfr),e(Z4,SQ),e(SQ,Qfr),e(Z4,Wfr),e(Te,Hfr),e(Te,eE),e(eE,x2e),e(x2e,Ufr),e(eE,Jfr),e(eE,RQ),e(RQ,Yfr),e(eE,Kfr),e(yr,Zfr),M(oE,yr,null),b(m,JIe,_),b(m,Wd,_),e(Wd,rE),e(rE,$2e),M(W8,$2e,null),e(Wd,egr),e(Wd,k2e),e(k2e,ogr),b(m,YIe,_),b(m,er,_),M(H8,er,null),e(er,rgr),e(er,Hd),e(Hd,tgr),e(Hd,BQ),e(BQ,agr),e(Hd,ngr),e(Hd,PQ),e(PQ,sgr),e(Hd,lgr),e(er,igr),e(er,U8),e(U8,dgr),e(U8,S2e),e(S2e,cgr),e(U8,mgr),e(er,fgr),e(er,Lt),M(J8,Lt,null),e(Lt,ggr),e(Lt,R2e),e(R2e,hgr),e(Lt,ugr),e(Lt,Ud),e(Ud,pgr),e(Ud,B2e),e(B2e,_gr),e(Ud,bgr),e(Ud,IQ),e(IQ,Fgr),e(Ud,vgr),e(Lt,Tgr),M(tE,Lt,null),e(er,Mgr),e(er,Lr),M(Y8,Lr,null),e(Lr,Egr),e(Lr,P2e),e(P2e,Cgr),e(Lr,wgr),e(Lr,on),e(on,Agr),e(on,I2e),e(I2e,ygr),e(on,Lgr),e(on,q2e),e(q2e,xgr),e(on,$gr),e(on,N2e),e(N2e,kgr),e(on,Sgr),e(Lr,Rgr),e(Lr,rn),e(rn,aE),e(aE,j2e),e(j2e,Bgr),e(aE,Pgr),e(aE,qQ),e(qQ,Igr),e(aE,qgr),e(rn,Ngr),e(rn,nE),e(nE,D2e),e(D2e,jgr),e(nE,Dgr),e(nE,NQ),e(NQ,Ggr),e(nE,Ogr),e(rn,Vgr),e(rn,sE),e(sE,G2e),e(G2e,Xgr),e(sE,zgr),e(sE,jQ),e(jQ,Qgr),e(sE,Wgr),e(rn,Hgr),e(rn,lE),e(lE,O2e),e(O2e,Ugr),e(lE,Jgr),e(lE,DQ),e(DQ,Ygr),e(lE,Kgr),e(Lr,Zgr),M(iE,Lr,null),b(m,KIe,_),b(m,Jd,_),e(Jd,dE),e(dE,V2e),M(K8,V2e,null),e(Jd,ehr),e(Jd,X2e),e(X2e,ohr),b(m,ZIe,_),b(m,or,_),M(Z8,or,null),e(or,rhr),e(or,Yd),e(Yd,thr),e(Yd,GQ),e(GQ,ahr),e(Yd,nhr),e(Yd,OQ),e(OQ,shr),e(Yd,lhr),e(or,ihr),e(or,ex),e(ex,dhr),e(ex,z2e),e(z2e,chr),e(ex,mhr),e(or,fhr),e(or,xt),M(ox,xt,null),e(xt,ghr),e(xt,Q2e),e(Q2e,hhr),e(xt,uhr),e(xt,Kd),e(Kd,phr),e(Kd,W2e),e(W2e,_hr),e(Kd,bhr),e(Kd,VQ),e(VQ,Fhr),e(Kd,vhr),e(xt,Thr),M(cE,xt,null),e(or,Mhr),e(or,xr),M(rx,xr,null),e(xr,Ehr),e(xr,H2e),e(H2e,Chr),e(xr,whr),e(xr,tn),e(tn,Ahr),e(tn,U2e),e(U2e,yhr),e(tn,Lhr),e(tn,J2e),e(J2e,xhr),e(tn,$hr),e(tn,Y2e),e(Y2e,khr),e(tn,Shr),e(xr,Rhr),e(xr,ie),e(ie,mE),e(mE,K2e),e(K2e,Bhr),e(mE,Phr),e(mE,XQ),e(XQ,Ihr),e(mE,qhr),e(ie,Nhr),e(ie,fE),e(fE,Z2e),e(Z2e,jhr),e(fE,Dhr),e(fE,zQ),e(zQ,Ghr),e(fE,Ohr),e(ie,Vhr),e(ie,gE),e(gE,eFe),e(eFe,Xhr),e(gE,zhr),e(gE,QQ),e(QQ,Qhr),e(gE,Whr),e(ie,Hhr),e(ie,hE),e(hE,oFe),e(oFe,Uhr),e(hE,Jhr),e(hE,WQ),e(WQ,Yhr),e(hE,Khr),e(ie,Zhr),e(ie,uE),e(uE,rFe),e(rFe,eur),e(uE,our),e(uE,HQ),e(HQ,rur),e(uE,tur),e(ie,aur),e(ie,pE),e(pE,tFe),e(tFe,nur),e(pE,sur),e(pE,UQ),e(UQ,lur),e(pE,iur),e(ie,dur),e(ie,_E),e(_E,aFe),e(aFe,cur),e(_E,mur),e(_E,JQ),e(JQ,fur),e(_E,gur),e(ie,hur),e(ie,bE),e(bE,nFe),e(nFe,uur),e(bE,pur),e(bE,YQ),e(YQ,_ur),e(bE,bur),e(ie,Fur),e(ie,FE),e(FE,sFe),e(sFe,vur),e(FE,Tur),e(FE,KQ),e(KQ,Mur),e(FE,Eur),e(ie,Cur),e(ie,vE),e(vE,lFe),e(lFe,wur),e(vE,Aur),e(vE,ZQ),e(ZQ,yur),e(vE,Lur),e(ie,xur),e(ie,TE),e(TE,iFe),e(iFe,$ur),e(TE,kur),e(TE,eW),e(eW,Sur),e(TE,Rur),e(ie,Bur),e(ie,ME),e(ME,dFe),e(dFe,Pur),e(ME,Iur),e(ME,oW),e(oW,qur),e(ME,Nur),e(ie,jur),e(ie,EE),e(EE,cFe),e(cFe,Dur),e(EE,Gur),e(EE,rW),e(rW,Our),e(EE,Vur),e(ie,Xur),e(ie,CE),e(CE,mFe),e(mFe,zur),e(CE,Qur),e(CE,tW),e(tW,Wur),e(CE,Hur),e(ie,Uur),e(ie,wE),e(wE,fFe),e(fFe,Jur),e(wE,Yur),e(wE,aW),e(aW,Kur),e(wE,Zur),e(ie,epr),e(ie,AE),e(AE,gFe),e(gFe,opr),e(AE,rpr),e(AE,nW),e(nW,tpr),e(AE,apr),e(ie,npr),e(ie,yE),e(yE,hFe),e(hFe,spr),e(yE,lpr),e(yE,sW),e(sW,ipr),e(yE,dpr),e(ie,cpr),e(ie,LE),e(LE,uFe),e(uFe,mpr),e(LE,fpr),e(LE,lW),e(lW,gpr),e(LE,hpr),e(ie,upr),e(ie,xE),e(xE,pFe),e(pFe,ppr),e(xE,_pr),e(xE,iW),e(iW,bpr),e(xE,Fpr),e(ie,vpr),e(ie,$E),e($E,_Fe),e(_Fe,Tpr),e($E,Mpr),e($E,dW),e(dW,Epr),e($E,Cpr),e(xr,wpr),M(kE,xr,null),b(m,eqe,_),b(m,Zd,_),e(Zd,SE),e(SE,bFe),M(tx,bFe,null),e(Zd,Apr),e(Zd,FFe),e(FFe,ypr),b(m,oqe,_),b(m,rr,_),M(ax,rr,null),e(rr,Lpr),e(rr,ec),e(ec,xpr),e(ec,cW),e(cW,$pr),e(ec,kpr),e(ec,mW),e(mW,Spr),e(ec,Rpr),e(rr,Bpr),e(rr,nx),e(nx,Ppr),e(nx,vFe),e(vFe,Ipr),e(nx,qpr),e(rr,Npr),e(rr,$t),M(sx,$t,null),e($t,jpr),e($t,TFe),e(TFe,Dpr),e($t,Gpr),e($t,oc),e(oc,Opr),e(oc,MFe),e(MFe,Vpr),e(oc,Xpr),e(oc,fW),e(fW,zpr),e(oc,Qpr),e($t,Wpr),M(RE,$t,null),e(rr,Hpr),e(rr,$r),M(lx,$r,null),e($r,Upr),e($r,EFe),e(EFe,Jpr),e($r,Ypr),e($r,an),e(an,Kpr),e(an,CFe),e(CFe,Zpr),e(an,e_r),e(an,wFe),e(wFe,o_r),e(an,r_r),e(an,AFe),e(AFe,t_r),e(an,a_r),e($r,n_r),e($r,ye),e(ye,BE),e(BE,yFe),e(yFe,s_r),e(BE,l_r),e(BE,gW),e(gW,i_r),e(BE,d_r),e(ye,c_r),e(ye,PE),e(PE,LFe),e(LFe,m_r),e(PE,f_r),e(PE,hW),e(hW,g_r),e(PE,h_r),e(ye,u_r),e(ye,IE),e(IE,xFe),e(xFe,p_r),e(IE,__r),e(IE,uW),e(uW,b_r),e(IE,F_r),e(ye,v_r),e(ye,qE),e(qE,$Fe),e($Fe,T_r),e(qE,M_r),e(qE,pW),e(pW,E_r),e(qE,C_r),e(ye,w_r),e(ye,NE),e(NE,kFe),e(kFe,A_r),e(NE,y_r),e(NE,_W),e(_W,L_r),e(NE,x_r),e(ye,$_r),e(ye,jE),e(jE,SFe),e(SFe,k_r),e(jE,S_r),e(jE,bW),e(bW,R_r),e(jE,B_r),e(ye,P_r),e(ye,DE),e(DE,RFe),e(RFe,I_r),e(DE,q_r),e(DE,FW),e(FW,N_r),e(DE,j_r),e(ye,D_r),e(ye,GE),e(GE,BFe),e(BFe,G_r),e(GE,O_r),e(GE,vW),e(vW,V_r),e(GE,X_r),e(ye,z_r),e(ye,OE),e(OE,PFe),e(PFe,Q_r),e(OE,W_r),e(OE,TW),e(TW,H_r),e(OE,U_r),e(ye,J_r),e(ye,VE),e(VE,IFe),e(IFe,Y_r),e(VE,K_r),e(VE,MW),e(MW,Z_r),e(VE,ebr),e($r,obr),M(XE,$r,null),b(m,rqe,_),b(m,rc,_),e(rc,zE),e(zE,qFe),M(ix,qFe,null),e(rc,rbr),e(rc,NFe),e(NFe,tbr),b(m,tqe,_),b(m,tr,_),M(dx,tr,null),e(tr,abr),e(tr,tc),e(tc,nbr),e(tc,EW),e(EW,sbr),e(tc,lbr),e(tc,CW),e(CW,ibr),e(tc,dbr),e(tr,cbr),e(tr,cx),e(cx,mbr),e(cx,jFe),e(jFe,fbr),e(cx,gbr),e(tr,hbr),e(tr,kt),M(mx,kt,null),e(kt,ubr),e(kt,DFe),e(DFe,pbr),e(kt,_br),e(kt,ac),e(ac,bbr),e(ac,GFe),e(GFe,Fbr),e(ac,vbr),e(ac,wW),e(wW,Tbr),e(ac,Mbr),e(kt,Ebr),M(QE,kt,null),e(tr,Cbr),e(tr,kr),M(fx,kr,null),e(kr,wbr),e(kr,OFe),e(OFe,Abr),e(kr,ybr),e(kr,nn),e(nn,Lbr),e(nn,VFe),e(VFe,xbr),e(nn,$br),e(nn,XFe),e(XFe,kbr),e(nn,Sbr),e(nn,zFe),e(zFe,Rbr),e(nn,Bbr),e(kr,Pbr),e(kr,Z),e(Z,WE),e(WE,QFe),e(QFe,Ibr),e(WE,qbr),e(WE,AW),e(AW,Nbr),e(WE,jbr),e(Z,Dbr),e(Z,HE),e(HE,WFe),e(WFe,Gbr),e(HE,Obr),e(HE,yW),e(yW,Vbr),e(HE,Xbr),e(Z,zbr),e(Z,UE),e(UE,HFe),e(HFe,Qbr),e(UE,Wbr),e(UE,LW),e(LW,Hbr),e(UE,Ubr),e(Z,Jbr),e(Z,JE),e(JE,UFe),e(UFe,Ybr),e(JE,Kbr),e(JE,xW),e(xW,Zbr),e(JE,e2r),e(Z,o2r),e(Z,YE),e(YE,JFe),e(JFe,r2r),e(YE,t2r),e(YE,$W),e($W,a2r),e(YE,n2r),e(Z,s2r),e(Z,KE),e(KE,YFe),e(YFe,l2r),e(KE,i2r),e(KE,kW),e(kW,d2r),e(KE,c2r),e(Z,m2r),e(Z,ZE),e(ZE,KFe),e(KFe,f2r),e(ZE,g2r),e(ZE,SW),e(SW,h2r),e(ZE,u2r),e(Z,p2r),e(Z,e5),e(e5,ZFe),e(ZFe,_2r),e(e5,b2r),e(e5,RW),e(RW,F2r),e(e5,v2r),e(Z,T2r),e(Z,o5),e(o5,eve),e(eve,M2r),e(o5,E2r),e(o5,BW),e(BW,C2r),e(o5,w2r),e(Z,A2r),e(Z,r5),e(r5,ove),e(ove,y2r),e(r5,L2r),e(r5,PW),e(PW,x2r),e(r5,$2r),e(Z,k2r),e(Z,t5),e(t5,rve),e(rve,S2r),e(t5,R2r),e(t5,IW),e(IW,B2r),e(t5,P2r),e(Z,I2r),e(Z,a5),e(a5,tve),e(tve,q2r),e(a5,N2r),e(a5,qW),e(qW,j2r),e(a5,D2r),e(Z,G2r),e(Z,n5),e(n5,ave),e(ave,O2r),e(n5,V2r),e(n5,NW),e(NW,X2r),e(n5,z2r),e(Z,Q2r),e(Z,s5),e(s5,nve),e(nve,W2r),e(s5,H2r),e(s5,jW),e(jW,U2r),e(s5,J2r),e(Z,Y2r),e(Z,l5),e(l5,sve),e(sve,K2r),e(l5,Z2r),e(l5,DW),e(DW,eFr),e(l5,oFr),e(Z,rFr),e(Z,i5),e(i5,lve),e(lve,tFr),e(i5,aFr),e(i5,GW),e(GW,nFr),e(i5,sFr),e(Z,lFr),e(Z,d5),e(d5,ive),e(ive,iFr),e(d5,dFr),e(d5,OW),e(OW,cFr),e(d5,mFr),e(Z,fFr),e(Z,c5),e(c5,dve),e(dve,gFr),e(c5,hFr),e(c5,VW),e(VW,uFr),e(c5,pFr),e(Z,_Fr),e(Z,m5),e(m5,cve),e(cve,bFr),e(m5,FFr),e(m5,XW),e(XW,vFr),e(m5,TFr),e(Z,MFr),e(Z,f5),e(f5,mve),e(mve,EFr),e(f5,CFr),e(f5,zW),e(zW,wFr),e(f5,AFr),e(Z,yFr),e(Z,g5),e(g5,fve),e(fve,LFr),e(g5,xFr),e(g5,QW),e(QW,$Fr),e(g5,kFr),e(Z,SFr),e(Z,h5),e(h5,gve),e(gve,RFr),e(h5,BFr),e(h5,WW),e(WW,PFr),e(h5,IFr),e(Z,qFr),e(Z,u5),e(u5,hve),e(hve,NFr),e(u5,jFr),e(u5,HW),e(HW,DFr),e(u5,GFr),e(Z,OFr),e(Z,p5),e(p5,uve),e(uve,VFr),e(p5,XFr),e(p5,UW),e(UW,zFr),e(p5,QFr),e(Z,WFr),e(Z,_5),e(_5,pve),e(pve,HFr),e(_5,UFr),e(_5,JW),e(JW,JFr),e(_5,YFr),e(Z,KFr),e(Z,b5),e(b5,_ve),e(_ve,ZFr),e(b5,evr),e(b5,YW),e(YW,ovr),e(b5,rvr),e(kr,tvr),M(F5,kr,null),b(m,aqe,_),b(m,nc,_),e(nc,v5),e(v5,bve),M(gx,bve,null),e(nc,avr),e(nc,Fve),e(Fve,nvr),b(m,nqe,_),b(m,ar,_),M(hx,ar,null),e(ar,svr),e(ar,sc),e(sc,lvr),e(sc,KW),e(KW,ivr),e(sc,dvr),e(sc,ZW),e(ZW,cvr),e(sc,mvr),e(ar,fvr),e(ar,ux),e(ux,gvr),e(ux,vve),e(vve,hvr),e(ux,uvr),e(ar,pvr),e(ar,St),M(px,St,null),e(St,_vr),e(St,Tve),e(Tve,bvr),e(St,Fvr),e(St,lc),e(lc,vvr),e(lc,Mve),e(Mve,Tvr),e(lc,Mvr),e(lc,eH),e(eH,Evr),e(lc,Cvr),e(St,wvr),M(T5,St,null),e(ar,Avr),e(ar,Sr),M(_x,Sr,null),e(Sr,yvr),e(Sr,Eve),e(Eve,Lvr),e(Sr,xvr),e(Sr,sn),e(sn,$vr),e(sn,Cve),e(Cve,kvr),e(sn,Svr),e(sn,wve),e(wve,Rvr),e(sn,Bvr),e(sn,Ave),e(Ave,Pvr),e(sn,Ivr),e(Sr,qvr),e(Sr,he),e(he,M5),e(M5,yve),e(yve,Nvr),e(M5,jvr),e(M5,oH),e(oH,Dvr),e(M5,Gvr),e(he,Ovr),e(he,E5),e(E5,Lve),e(Lve,Vvr),e(E5,Xvr),e(E5,rH),e(rH,zvr),e(E5,Qvr),e(he,Wvr),e(he,C5),e(C5,xve),e(xve,Hvr),e(C5,Uvr),e(C5,tH),e(tH,Jvr),e(C5,Yvr),e(he,Kvr),e(he,w5),e(w5,$ve),e($ve,Zvr),e(w5,e1r),e(w5,aH),e(aH,o1r),e(w5,r1r),e(he,t1r),e(he,A5),e(A5,kve),e(kve,a1r),e(A5,n1r),e(A5,nH),e(nH,s1r),e(A5,l1r),e(he,i1r),e(he,y5),e(y5,Sve),e(Sve,d1r),e(y5,c1r),e(y5,sH),e(sH,m1r),e(y5,f1r),e(he,g1r),e(he,L5),e(L5,Rve),e(Rve,h1r),e(L5,u1r),e(L5,lH),e(lH,p1r),e(L5,_1r),e(he,b1r),e(he,x5),e(x5,Bve),e(Bve,F1r),e(x5,v1r),e(x5,iH),e(iH,T1r),e(x5,M1r),e(he,E1r),e(he,$5),e($5,Pve),e(Pve,C1r),e($5,w1r),e($5,dH),e(dH,A1r),e($5,y1r),e(he,L1r),e(he,k5),e(k5,Ive),e(Ive,x1r),e(k5,$1r),e(k5,cH),e(cH,k1r),e(k5,S1r),e(he,R1r),e(he,S5),e(S5,qve),e(qve,B1r),e(S5,P1r),e(S5,mH),e(mH,I1r),e(S5,q1r),e(he,N1r),e(he,R5),e(R5,Nve),e(Nve,j1r),e(R5,D1r),e(R5,fH),e(fH,G1r),e(R5,O1r),e(he,V1r),e(he,B5),e(B5,jve),e(jve,X1r),e(B5,z1r),e(B5,gH),e(gH,Q1r),e(B5,W1r),e(he,H1r),e(he,P5),e(P5,Dve),e(Dve,U1r),e(P5,J1r),e(P5,hH),e(hH,Y1r),e(P5,K1r),e(he,Z1r),e(he,I5),e(I5,Gve),e(Gve,eTr),e(I5,oTr),e(I5,uH),e(uH,rTr),e(I5,tTr),e(he,aTr),e(he,q5),e(q5,Ove),e(Ove,nTr),e(q5,sTr),e(q5,pH),e(pH,lTr),e(q5,iTr),e(he,dTr),e(he,N5),e(N5,Vve),e(Vve,cTr),e(N5,mTr),e(N5,_H),e(_H,fTr),e(N5,gTr),e(Sr,hTr),M(j5,Sr,null),b(m,sqe,_),b(m,ic,_),e(ic,D5),e(D5,Xve),M(bx,Xve,null),e(ic,uTr),e(ic,zve),e(zve,pTr),b(m,lqe,_),b(m,nr,_),M(Fx,nr,null),e(nr,_Tr),e(nr,dc),e(dc,bTr),e(dc,bH),e(bH,FTr),e(dc,vTr),e(dc,FH),e(FH,TTr),e(dc,MTr),e(nr,ETr),e(nr,vx),e(vx,CTr),e(vx,Qve),e(Qve,wTr),e(vx,ATr),e(nr,yTr),e(nr,Rt),M(Tx,Rt,null),e(Rt,LTr),e(Rt,Wve),e(Wve,xTr),e(Rt,$Tr),e(Rt,cc),e(cc,kTr),e(cc,Hve),e(Hve,STr),e(cc,RTr),e(cc,vH),e(vH,BTr),e(cc,PTr),e(Rt,ITr),M(G5,Rt,null),e(nr,qTr),e(nr,Rr),M(Mx,Rr,null),e(Rr,NTr),e(Rr,Uve),e(Uve,jTr),e(Rr,DTr),e(Rr,ln),e(ln,GTr),e(ln,Jve),e(Jve,OTr),e(ln,VTr),e(ln,Yve),e(Yve,XTr),e(ln,zTr),e(ln,Kve),e(Kve,QTr),e(ln,WTr),e(Rr,HTr),e(Rr,Ex),e(Ex,O5),e(O5,Zve),e(Zve,UTr),e(O5,JTr),e(O5,TH),e(TH,YTr),e(O5,KTr),e(Ex,ZTr),e(Ex,V5),e(V5,e1e),e(e1e,eMr),e(V5,oMr),e(V5,MH),e(MH,rMr),e(V5,tMr),e(Rr,aMr),M(X5,Rr,null),b(m,iqe,_),b(m,mc,_),e(mc,z5),e(z5,o1e),M(Cx,o1e,null),e(mc,nMr),e(mc,r1e),e(r1e,sMr),b(m,dqe,_),b(m,sr,_),M(wx,sr,null),e(sr,lMr),e(sr,fc),e(fc,iMr),e(fc,EH),e(EH,dMr),e(fc,cMr),e(fc,CH),e(CH,mMr),e(fc,fMr),e(sr,gMr),e(sr,Ax),e(Ax,hMr),e(Ax,t1e),e(t1e,uMr),e(Ax,pMr),e(sr,_Mr),e(sr,Bt),M(yx,Bt,null),e(Bt,bMr),e(Bt,a1e),e(a1e,FMr),e(Bt,vMr),e(Bt,gc),e(gc,TMr),e(gc,n1e),e(n1e,MMr),e(gc,EMr),e(gc,wH),e(wH,CMr),e(gc,wMr),e(Bt,AMr),M(Q5,Bt,null),e(sr,yMr),e(sr,Br),M(Lx,Br,null),e(Br,LMr),e(Br,s1e),e(s1e,xMr),e(Br,$Mr),e(Br,dn),e(dn,kMr),e(dn,l1e),e(l1e,SMr),e(dn,RMr),e(dn,i1e),e(i1e,BMr),e(dn,PMr),e(dn,d1e),e(d1e,IMr),e(dn,qMr),e(Br,NMr),e(Br,c1e),e(c1e,W5),e(W5,m1e),e(m1e,jMr),e(W5,DMr),e(W5,AH),e(AH,GMr),e(W5,OMr),e(Br,VMr),M(H5,Br,null),b(m,cqe,_),b(m,hc,_),e(hc,U5),e(U5,f1e),M(xx,f1e,null),e(hc,XMr),e(hc,g1e),e(g1e,zMr),b(m,mqe,_),b(m,lr,_),M($x,lr,null),e(lr,QMr),e(lr,uc),e(uc,WMr),e(uc,yH),e(yH,HMr),e(uc,UMr),e(uc,LH),e(LH,JMr),e(uc,YMr),e(lr,KMr),e(lr,kx),e(kx,ZMr),e(kx,h1e),e(h1e,e4r),e(kx,o4r),e(lr,r4r),e(lr,Pt),M(Sx,Pt,null),e(Pt,t4r),e(Pt,u1e),e(u1e,a4r),e(Pt,n4r),e(Pt,pc),e(pc,s4r),e(pc,p1e),e(p1e,l4r),e(pc,i4r),e(pc,xH),e(xH,d4r),e(pc,c4r),e(Pt,m4r),M(J5,Pt,null),e(lr,f4r),e(lr,Pr),M(Rx,Pr,null),e(Pr,g4r),e(Pr,_1e),e(_1e,h4r),e(Pr,u4r),e(Pr,cn),e(cn,p4r),e(cn,b1e),e(b1e,_4r),e(cn,b4r),e(cn,F1e),e(F1e,F4r),e(cn,v4r),e(cn,v1e),e(v1e,T4r),e(cn,M4r),e(Pr,E4r),e(Pr,de),e(de,Y5),e(Y5,T1e),e(T1e,C4r),e(Y5,w4r),e(Y5,$H),e($H,A4r),e(Y5,y4r),e(de,L4r),e(de,K5),e(K5,M1e),e(M1e,x4r),e(K5,$4r),e(K5,kH),e(kH,k4r),e(K5,S4r),e(de,R4r),e(de,Z5),e(Z5,E1e),e(E1e,B4r),e(Z5,P4r),e(Z5,SH),e(SH,I4r),e(Z5,q4r),e(de,N4r),e(de,eC),e(eC,C1e),e(C1e,j4r),e(eC,D4r),e(eC,RH),e(RH,G4r),e(eC,O4r),e(de,V4r),e(de,oC),e(oC,w1e),e(w1e,X4r),e(oC,z4r),e(oC,BH),e(BH,Q4r),e(oC,W4r),e(de,H4r),e(de,rC),e(rC,A1e),e(A1e,U4r),e(rC,J4r),e(rC,PH),e(PH,Y4r),e(rC,K4r),e(de,Z4r),e(de,tC),e(tC,y1e),e(y1e,eEr),e(tC,oEr),e(tC,IH),e(IH,rEr),e(tC,tEr),e(de,aEr),e(de,aC),e(aC,L1e),e(L1e,nEr),e(aC,sEr),e(aC,qH),e(qH,lEr),e(aC,iEr),e(de,dEr),e(de,nC),e(nC,x1e),e(x1e,cEr),e(nC,mEr),e(nC,NH),e(NH,fEr),e(nC,gEr),e(de,hEr),e(de,sC),e(sC,$1e),e($1e,uEr),e(sC,pEr),e(sC,jH),e(jH,_Er),e(sC,bEr),e(de,FEr),e(de,lC),e(lC,k1e),e(k1e,vEr),e(lC,TEr),e(lC,DH),e(DH,MEr),e(lC,EEr),e(de,CEr),e(de,iC),e(iC,S1e),e(S1e,wEr),e(iC,AEr),e(iC,GH),e(GH,yEr),e(iC,LEr),e(de,xEr),e(de,dC),e(dC,R1e),e(R1e,$Er),e(dC,kEr),e(dC,OH),e(OH,SEr),e(dC,REr),e(de,BEr),e(de,cC),e(cC,B1e),e(B1e,PEr),e(cC,IEr),e(cC,VH),e(VH,qEr),e(cC,NEr),e(de,jEr),e(de,mC),e(mC,P1e),e(P1e,DEr),e(mC,GEr),e(mC,XH),e(XH,OEr),e(mC,VEr),e(de,XEr),e(de,fC),e(fC,I1e),e(I1e,zEr),e(fC,QEr),e(fC,zH),e(zH,WEr),e(fC,HEr),e(de,UEr),e(de,gC),e(gC,q1e),e(q1e,JEr),e(gC,YEr),e(gC,QH),e(QH,KEr),e(gC,ZEr),e(de,e5r),e(de,hC),e(hC,N1e),e(N1e,o5r),e(hC,r5r),e(hC,WH),e(WH,t5r),e(hC,a5r),e(de,n5r),e(de,uC),e(uC,j1e),e(j1e,s5r),e(uC,l5r),e(uC,HH),e(HH,i5r),e(uC,d5r),e(de,c5r),e(de,pC),e(pC,D1e),e(D1e,m5r),e(pC,f5r),e(pC,UH),e(UH,g5r),e(pC,h5r),e(Pr,u5r),M(_C,Pr,null),b(m,fqe,_),b(m,_c,_),e(_c,bC),e(bC,G1e),M(Bx,G1e,null),e(_c,p5r),e(_c,O1e),e(O1e,_5r),b(m,gqe,_),b(m,ir,_),M(Px,ir,null),e(ir,b5r),e(ir,bc),e(bc,F5r),e(bc,JH),e(JH,v5r),e(bc,T5r),e(bc,YH),e(YH,M5r),e(bc,E5r),e(ir,C5r),e(ir,Ix),e(Ix,w5r),e(Ix,V1e),e(V1e,A5r),e(Ix,y5r),e(ir,L5r),e(ir,It),M(qx,It,null),e(It,x5r),e(It,X1e),e(X1e,$5r),e(It,k5r),e(It,Fc),e(Fc,S5r),e(Fc,z1e),e(z1e,R5r),e(Fc,B5r),e(Fc,KH),e(KH,P5r),e(Fc,I5r),e(It,q5r),M(FC,It,null),e(ir,N5r),e(ir,Ir),M(Nx,Ir,null),e(Ir,j5r),e(Ir,Q1e),e(Q1e,D5r),e(Ir,G5r),e(Ir,mn),e(mn,O5r),e(mn,W1e),e(W1e,V5r),e(mn,X5r),e(mn,H1e),e(H1e,z5r),e(mn,Q5r),e(mn,U1e),e(U1e,W5r),e(mn,H5r),e(Ir,U5r),e(Ir,ce),e(ce,vC),e(vC,J1e),e(J1e,J5r),e(vC,Y5r),e(vC,ZH),e(ZH,K5r),e(vC,Z5r),e(ce,eCr),e(ce,TC),e(TC,Y1e),e(Y1e,oCr),e(TC,rCr),e(TC,eU),e(eU,tCr),e(TC,aCr),e(ce,nCr),e(ce,MC),e(MC,K1e),e(K1e,sCr),e(MC,lCr),e(MC,oU),e(oU,iCr),e(MC,dCr),e(ce,cCr),e(ce,EC),e(EC,Z1e),e(Z1e,mCr),e(EC,fCr),e(EC,rU),e(rU,gCr),e(EC,hCr),e(ce,uCr),e(ce,CC),e(CC,eTe),e(eTe,pCr),e(CC,_Cr),e(CC,tU),e(tU,bCr),e(CC,FCr),e(ce,vCr),e(ce,wC),e(wC,oTe),e(oTe,TCr),e(wC,MCr),e(wC,aU),e(aU,ECr),e(wC,CCr),e(ce,wCr),e(ce,AC),e(AC,rTe),e(rTe,ACr),e(AC,yCr),e(AC,nU),e(nU,LCr),e(AC,xCr),e(ce,$Cr),e(ce,yC),e(yC,tTe),e(tTe,kCr),e(yC,SCr),e(yC,sU),e(sU,RCr),e(yC,BCr),e(ce,PCr),e(ce,LC),e(LC,aTe),e(aTe,ICr),e(LC,qCr),e(LC,lU),e(lU,NCr),e(LC,jCr),e(ce,DCr),e(ce,xC),e(xC,nTe),e(nTe,GCr),e(xC,OCr),e(xC,iU),e(iU,VCr),e(xC,XCr),e(ce,zCr),e(ce,$C),e($C,sTe),e(sTe,QCr),e($C,WCr),e($C,dU),e(dU,HCr),e($C,UCr),e(ce,JCr),e(ce,kC),e(kC,lTe),e(lTe,YCr),e(kC,KCr),e(kC,cU),e(cU,ZCr),e(kC,e3r),e(ce,o3r),e(ce,SC),e(SC,iTe),e(iTe,r3r),e(SC,t3r),e(SC,mU),e(mU,a3r),e(SC,n3r),e(ce,s3r),e(ce,RC),e(RC,dTe),e(dTe,l3r),e(RC,i3r),e(RC,fU),e(fU,d3r),e(RC,c3r),e(ce,m3r),e(ce,BC),e(BC,cTe),e(cTe,f3r),e(BC,g3r),e(BC,gU),e(gU,h3r),e(BC,u3r),e(ce,p3r),e(ce,PC),e(PC,mTe),e(mTe,_3r),e(PC,b3r),e(PC,hU),e(hU,F3r),e(PC,v3r),e(ce,T3r),e(ce,IC),e(IC,fTe),e(fTe,M3r),e(IC,E3r),e(IC,uU),e(uU,C3r),e(IC,w3r),e(ce,A3r),e(ce,qC),e(qC,gTe),e(gTe,y3r),e(qC,L3r),e(qC,pU),e(pU,x3r),e(qC,$3r),e(ce,k3r),e(ce,NC),e(NC,hTe),e(hTe,S3r),e(NC,R3r),e(NC,_U),e(_U,B3r),e(NC,P3r),e(ce,I3r),e(ce,jC),e(jC,uTe),e(uTe,q3r),e(jC,N3r),e(jC,bU),e(bU,j3r),e(jC,D3r),e(Ir,G3r),M(DC,Ir,null),b(m,hqe,_),b(m,vc,_),e(vc,GC),e(GC,pTe),M(jx,pTe,null),e(vc,O3r),e(vc,_Te),e(_Te,V3r),b(m,uqe,_),b(m,dr,_),M(Dx,dr,null),e(dr,X3r),e(dr,Tc),e(Tc,z3r),e(Tc,FU),e(FU,Q3r),e(Tc,W3r),e(Tc,vU),e(vU,H3r),e(Tc,U3r),e(dr,J3r),e(dr,Gx),e(Gx,Y3r),e(Gx,bTe),e(bTe,K3r),e(Gx,Z3r),e(dr,ewr),e(dr,qt),M(Ox,qt,null),e(qt,owr),e(qt,FTe),e(FTe,rwr),e(qt,twr),e(qt,Mc),e(Mc,awr),e(Mc,vTe),e(vTe,nwr),e(Mc,swr),e(Mc,TU),e(TU,lwr),e(Mc,iwr),e(qt,dwr),M(OC,qt,null),e(dr,cwr),e(dr,qr),M(Vx,qr,null),e(qr,mwr),e(qr,TTe),e(TTe,fwr),e(qr,gwr),e(qr,fn),e(fn,hwr),e(fn,MTe),e(MTe,uwr),e(fn,pwr),e(fn,ETe),e(ETe,_wr),e(fn,bwr),e(fn,CTe),e(CTe,Fwr),e(fn,vwr),e(qr,Twr),e(qr,wTe),e(wTe,VC),e(VC,ATe),e(ATe,Mwr),e(VC,Ewr),e(VC,MU),e(MU,Cwr),e(VC,wwr),e(qr,Awr),M(XC,qr,null),b(m,pqe,_),b(m,Ec,_),e(Ec,zC),e(zC,yTe),M(Xx,yTe,null),e(Ec,ywr),e(Ec,LTe),e(LTe,Lwr),b(m,_qe,_),b(m,cr,_),M(zx,cr,null),e(cr,xwr),e(cr,Cc),e(Cc,$wr),e(Cc,EU),e(EU,kwr),e(Cc,Swr),e(Cc,CU),e(CU,Rwr),e(Cc,Bwr),e(cr,Pwr),e(cr,Qx),e(Qx,Iwr),e(Qx,xTe),e(xTe,qwr),e(Qx,Nwr),e(cr,jwr),e(cr,Nt),M(Wx,Nt,null),e(Nt,Dwr),e(Nt,$Te),e($Te,Gwr),e(Nt,Owr),e(Nt,wc),e(wc,Vwr),e(wc,kTe),e(kTe,Xwr),e(wc,zwr),e(wc,wU),e(wU,Qwr),e(wc,Wwr),e(Nt,Hwr),M(QC,Nt,null),e(cr,Uwr),e(cr,Nr),M(Hx,Nr,null),e(Nr,Jwr),e(Nr,STe),e(STe,Ywr),e(Nr,Kwr),e(Nr,gn),e(gn,Zwr),e(gn,RTe),e(RTe,eAr),e(gn,oAr),e(gn,BTe),e(BTe,rAr),e(gn,tAr),e(gn,PTe),e(PTe,aAr),e(gn,nAr),e(Nr,sAr),e(Nr,ITe),e(ITe,WC),e(WC,qTe),e(qTe,lAr),e(WC,iAr),e(WC,AU),e(AU,dAr),e(WC,cAr),e(Nr,mAr),M(HC,Nr,null),b(m,bqe,_),b(m,Ac,_),e(Ac,UC),e(UC,NTe),M(Ux,NTe,null),e(Ac,fAr),e(Ac,jTe),e(jTe,gAr),b(m,Fqe,_),b(m,mr,_),M(Jx,mr,null),e(mr,hAr),e(mr,yc),e(yc,uAr),e(yc,yU),e(yU,pAr),e(yc,_Ar),e(yc,LU),e(LU,bAr),e(yc,FAr),e(mr,vAr),e(mr,Yx),e(Yx,TAr),e(Yx,DTe),e(DTe,MAr),e(Yx,EAr),e(mr,CAr),e(mr,jt),M(Kx,jt,null),e(jt,wAr),e(jt,GTe),e(GTe,AAr),e(jt,yAr),e(jt,Lc),e(Lc,LAr),e(Lc,OTe),e(OTe,xAr),e(Lc,$Ar),e(Lc,xU),e(xU,kAr),e(Lc,SAr),e(jt,RAr),M(JC,jt,null),e(mr,BAr),e(mr,jr),M(Zx,jr,null),e(jr,PAr),e(jr,VTe),e(VTe,IAr),e(jr,qAr),e(jr,hn),e(hn,NAr),e(hn,XTe),e(XTe,jAr),e(hn,DAr),e(hn,zTe),e(zTe,GAr),e(hn,OAr),e(hn,QTe),e(QTe,VAr),e(hn,XAr),e(jr,zAr),e(jr,re),e(re,YC),e(YC,WTe),e(WTe,QAr),e(YC,WAr),e(YC,$U),e($U,HAr),e(YC,UAr),e(re,JAr),e(re,KC),e(KC,HTe),e(HTe,YAr),e(KC,KAr),e(KC,kU),e(kU,ZAr),e(KC,e6r),e(re,o6r),e(re,ZC),e(ZC,UTe),e(UTe,r6r),e(ZC,t6r),e(ZC,SU),e(SU,a6r),e(ZC,n6r),e(re,s6r),e(re,e3),e(e3,JTe),e(JTe,l6r),e(e3,i6r),e(e3,RU),e(RU,d6r),e(e3,c6r),e(re,m6r),e(re,o3),e(o3,YTe),e(YTe,f6r),e(o3,g6r),e(o3,BU),e(BU,h6r),e(o3,u6r),e(re,p6r),e(re,r3),e(r3,KTe),e(KTe,_6r),e(r3,b6r),e(r3,PU),e(PU,F6r),e(r3,v6r),e(re,T6r),e(re,t3),e(t3,ZTe),e(ZTe,M6r),e(t3,E6r),e(t3,IU),e(IU,C6r),e(t3,w6r),e(re,A6r),e(re,a3),e(a3,eMe),e(eMe,y6r),e(a3,L6r),e(a3,qU),e(qU,x6r),e(a3,$6r),e(re,k6r),e(re,n3),e(n3,oMe),e(oMe,S6r),e(n3,R6r),e(n3,NU),e(NU,B6r),e(n3,P6r),e(re,I6r),e(re,s3),e(s3,rMe),e(rMe,q6r),e(s3,N6r),e(s3,jU),e(jU,j6r),e(s3,D6r),e(re,G6r),e(re,l3),e(l3,tMe),e(tMe,O6r),e(l3,V6r),e(l3,DU),e(DU,X6r),e(l3,z6r),e(re,Q6r),e(re,i3),e(i3,aMe),e(aMe,W6r),e(i3,H6r),e(i3,GU),e(GU,U6r),e(i3,J6r),e(re,Y6r),e(re,d3),e(d3,nMe),e(nMe,K6r),e(d3,Z6r),e(d3,OU),e(OU,e0r),e(d3,o0r),e(re,r0r),e(re,c3),e(c3,sMe),e(sMe,t0r),e(c3,a0r),e(c3,VU),e(VU,n0r),e(c3,s0r),e(re,l0r),e(re,m3),e(m3,lMe),e(lMe,i0r),e(m3,d0r),e(m3,XU),e(XU,c0r),e(m3,m0r),e(re,f0r),e(re,f3),e(f3,iMe),e(iMe,g0r),e(f3,h0r),e(f3,zU),e(zU,u0r),e(f3,p0r),e(re,_0r),e(re,g3),e(g3,dMe),e(dMe,b0r),e(g3,F0r),e(g3,QU),e(QU,v0r),e(g3,T0r),e(re,M0r),e(re,h3),e(h3,cMe),e(cMe,E0r),e(h3,C0r),e(h3,WU),e(WU,w0r),e(h3,A0r),e(re,y0r),e(re,u3),e(u3,mMe),e(mMe,L0r),e(u3,x0r),e(u3,HU),e(HU,$0r),e(u3,k0r),e(re,S0r),e(re,p3),e(p3,fMe),e(fMe,R0r),e(p3,B0r),e(p3,UU),e(UU,P0r),e(p3,I0r),e(re,q0r),e(re,_3),e(_3,gMe),e(gMe,N0r),e(_3,j0r),e(_3,JU),e(JU,D0r),e(_3,G0r),e(re,O0r),e(re,b3),e(b3,hMe),e(hMe,V0r),e(b3,X0r),e(b3,YU),e(YU,z0r),e(b3,Q0r),e(re,W0r),e(re,F3),e(F3,uMe),e(uMe,H0r),e(F3,U0r),e(F3,KU),e(KU,J0r),e(F3,Y0r),e(re,K0r),e(re,v3),e(v3,pMe),e(pMe,Z0r),e(v3,eyr),e(v3,ZU),e(ZU,oyr),e(v3,ryr),e(re,tyr),e(re,T3),e(T3,_Me),e(_Me,ayr),e(T3,nyr),e(T3,eJ),e(eJ,syr),e(T3,lyr),e(jr,iyr),M(M3,jr,null),b(m,vqe,_),b(m,xc,_),e(xc,E3),e(E3,bMe),M(e7,bMe,null),e(xc,dyr),e(xc,FMe),e(FMe,cyr),b(m,Tqe,_),b(m,fr,_),M(o7,fr,null),e(fr,myr),e(fr,$c),e($c,fyr),e($c,oJ),e(oJ,gyr),e($c,hyr),e($c,rJ),e(rJ,uyr),e($c,pyr),e(fr,_yr),e(fr,r7),e(r7,byr),e(r7,vMe),e(vMe,Fyr),e(r7,vyr),e(fr,Tyr),e(fr,Dt),M(t7,Dt,null),e(Dt,Myr),e(Dt,TMe),e(TMe,Eyr),e(Dt,Cyr),e(Dt,kc),e(kc,wyr),e(kc,MMe),e(MMe,Ayr),e(kc,yyr),e(kc,tJ),e(tJ,Lyr),e(kc,xyr),e(Dt,$yr),M(C3,Dt,null),e(fr,kyr),e(fr,Dr),M(a7,Dr,null),e(Dr,Syr),e(Dr,EMe),e(EMe,Ryr),e(Dr,Byr),e(Dr,un),e(un,Pyr),e(un,CMe),e(CMe,Iyr),e(un,qyr),e(un,wMe),e(wMe,Nyr),e(un,jyr),e(un,AMe),e(AMe,Dyr),e(un,Gyr),e(Dr,Oyr),e(Dr,ke),e(ke,w3),e(w3,yMe),e(yMe,Vyr),e(w3,Xyr),e(w3,aJ),e(aJ,zyr),e(w3,Qyr),e(ke,Wyr),e(ke,A3),e(A3,LMe),e(LMe,Hyr),e(A3,Uyr),e(A3,nJ),e(nJ,Jyr),e(A3,Yyr),e(ke,Kyr),e(ke,y3),e(y3,xMe),e(xMe,Zyr),e(y3,eLr),e(y3,sJ),e(sJ,oLr),e(y3,rLr),e(ke,tLr),e(ke,L3),e(L3,$Me),e($Me,aLr),e(L3,nLr),e(L3,lJ),e(lJ,sLr),e(L3,lLr),e(ke,iLr),e(ke,x3),e(x3,kMe),e(kMe,dLr),e(x3,cLr),e(x3,iJ),e(iJ,mLr),e(x3,fLr),e(ke,gLr),e(ke,$3),e($3,SMe),e(SMe,hLr),e($3,uLr),e($3,dJ),e(dJ,pLr),e($3,_Lr),e(ke,bLr),e(ke,k3),e(k3,RMe),e(RMe,FLr),e(k3,vLr),e(k3,cJ),e(cJ,TLr),e(k3,MLr),e(ke,ELr),e(ke,S3),e(S3,BMe),e(BMe,CLr),e(S3,wLr),e(S3,mJ),e(mJ,ALr),e(S3,yLr),e(ke,LLr),e(ke,R3),e(R3,PMe),e(PMe,xLr),e(R3,$Lr),e(R3,fJ),e(fJ,kLr),e(R3,SLr),e(Dr,RLr),M(B3,Dr,null),b(m,Mqe,_),b(m,Sc,_),e(Sc,P3),e(P3,IMe),M(n7,IMe,null),e(Sc,BLr),e(Sc,qMe),e(qMe,PLr),b(m,Eqe,_),b(m,gr,_),M(s7,gr,null),e(gr,ILr),e(gr,Rc),e(Rc,qLr),e(Rc,gJ),e(gJ,NLr),e(Rc,jLr),e(Rc,hJ),e(hJ,DLr),e(Rc,GLr),e(gr,OLr),e(gr,l7),e(l7,VLr),e(l7,NMe),e(NMe,XLr),e(l7,zLr),e(gr,QLr),e(gr,Gt),M(i7,Gt,null),e(Gt,WLr),e(Gt,jMe),e(jMe,HLr),e(Gt,ULr),e(Gt,Bc),e(Bc,JLr),e(Bc,DMe),e(DMe,YLr),e(Bc,KLr),e(Bc,uJ),e(uJ,ZLr),e(Bc,e8r),e(Gt,o8r),M(I3,Gt,null),e(gr,r8r),e(gr,Gr),M(d7,Gr,null),e(Gr,t8r),e(Gr,GMe),e(GMe,a8r),e(Gr,n8r),e(Gr,pn),e(pn,s8r),e(pn,OMe),e(OMe,l8r),e(pn,i8r),e(pn,VMe),e(VMe,d8r),e(pn,c8r),e(pn,XMe),e(XMe,m8r),e(pn,f8r),e(Gr,g8r),e(Gr,Me),e(Me,q3),e(q3,zMe),e(zMe,h8r),e(q3,u8r),e(q3,pJ),e(pJ,p8r),e(q3,_8r),e(Me,b8r),e(Me,N3),e(N3,QMe),e(QMe,F8r),e(N3,v8r),e(N3,_J),e(_J,T8r),e(N3,M8r),e(Me,E8r),e(Me,j3),e(j3,WMe),e(WMe,C8r),e(j3,w8r),e(j3,bJ),e(bJ,A8r),e(j3,y8r),e(Me,L8r),e(Me,D3),e(D3,HMe),e(HMe,x8r),e(D3,$8r),e(D3,FJ),e(FJ,k8r),e(D3,S8r),e(Me,R8r),e(Me,G3),e(G3,UMe),e(UMe,B8r),e(G3,P8r),e(G3,vJ),e(vJ,I8r),e(G3,q8r),e(Me,N8r),e(Me,O3),e(O3,JMe),e(JMe,j8r),e(O3,D8r),e(O3,TJ),e(TJ,G8r),e(O3,O8r),e(Me,V8r),e(Me,V3),e(V3,YMe),e(YMe,X8r),e(V3,z8r),e(V3,MJ),e(MJ,Q8r),e(V3,W8r),e(Me,H8r),e(Me,X3),e(X3,KMe),e(KMe,U8r),e(X3,J8r),e(X3,EJ),e(EJ,Y8r),e(X3,K8r),e(Me,Z8r),e(Me,z3),e(z3,ZMe),e(ZMe,exr),e(z3,oxr),e(z3,CJ),e(CJ,rxr),e(z3,txr),e(Me,axr),e(Me,Q3),e(Q3,e4e),e(e4e,nxr),e(Q3,sxr),e(Q3,wJ),e(wJ,lxr),e(Q3,ixr),e(Me,dxr),e(Me,W3),e(W3,o4e),e(o4e,cxr),e(W3,mxr),e(W3,AJ),e(AJ,fxr),e(W3,gxr),e(Me,hxr),e(Me,H3),e(H3,r4e),e(r4e,uxr),e(H3,pxr),e(H3,yJ),e(yJ,_xr),e(H3,bxr),e(Gr,Fxr),M(U3,Gr,null),b(m,Cqe,_),b(m,Pc,_),e(Pc,J3),e(J3,t4e),M(c7,t4e,null),e(Pc,vxr),e(Pc,a4e),e(a4e,Txr),b(m,wqe,_),b(m,hr,_),M(m7,hr,null),e(hr,Mxr),e(hr,Ic),e(Ic,Exr),e(Ic,LJ),e(LJ,Cxr),e(Ic,wxr),e(Ic,xJ),e(xJ,Axr),e(Ic,yxr),e(hr,Lxr),e(hr,f7),e(f7,xxr),e(f7,n4e),e(n4e,$xr),e(f7,kxr),e(hr,Sxr),e(hr,Ot),M(g7,Ot,null),e(Ot,Rxr),e(Ot,s4e),e(s4e,Bxr),e(Ot,Pxr),e(Ot,qc),e(qc,Ixr),e(qc,l4e),e(l4e,qxr),e(qc,Nxr),e(qc,$J),e($J,jxr),e(qc,Dxr),e(Ot,Gxr),M(Y3,Ot,null),e(hr,Oxr),e(hr,Or),M(h7,Or,null),e(Or,Vxr),e(Or,i4e),e(i4e,Xxr),e(Or,zxr),e(Or,_n),e(_n,Qxr),e(_n,d4e),e(d4e,Wxr),e(_n,Hxr),e(_n,c4e),e(c4e,Uxr),e(_n,Jxr),e(_n,m4e),e(m4e,Yxr),e(_n,Kxr),e(Or,Zxr),e(Or,Le),e(Le,K3),e(K3,f4e),e(f4e,e7r),e(K3,o7r),e(K3,kJ),e(kJ,r7r),e(K3,t7r),e(Le,a7r),e(Le,Z3),e(Z3,g4e),e(g4e,n7r),e(Z3,s7r),e(Z3,SJ),e(SJ,l7r),e(Z3,i7r),e(Le,d7r),e(Le,ew),e(ew,h4e),e(h4e,c7r),e(ew,m7r),e(ew,RJ),e(RJ,f7r),e(ew,g7r),e(Le,h7r),e(Le,ow),e(ow,u4e),e(u4e,u7r),e(ow,p7r),e(ow,BJ),e(BJ,_7r),e(ow,b7r),e(Le,F7r),e(Le,rw),e(rw,p4e),e(p4e,v7r),e(rw,T7r),e(rw,PJ),e(PJ,M7r),e(rw,E7r),e(Le,C7r),e(Le,tw),e(tw,_4e),e(_4e,w7r),e(tw,A7r),e(tw,IJ),e(IJ,y7r),e(tw,L7r),e(Le,x7r),e(Le,aw),e(aw,b4e),e(b4e,$7r),e(aw,k7r),e(aw,qJ),e(qJ,S7r),e(aw,R7r),e(Le,B7r),e(Le,nw),e(nw,F4e),e(F4e,P7r),e(nw,I7r),e(nw,NJ),e(NJ,q7r),e(nw,N7r),e(Le,j7r),e(Le,sw),e(sw,v4e),e(v4e,D7r),e(sw,G7r),e(sw,jJ),e(jJ,O7r),e(sw,V7r),e(Le,X7r),e(Le,lw),e(lw,T4e),e(T4e,z7r),e(lw,Q7r),e(lw,DJ),e(DJ,W7r),e(lw,H7r),e(Or,U7r),M(iw,Or,null),b(m,Aqe,_),b(m,Nc,_),e(Nc,dw),e(dw,M4e),M(u7,M4e,null),e(Nc,J7r),e(Nc,E4e),e(E4e,Y7r),b(m,yqe,_),b(m,ur,_),M(p7,ur,null),e(ur,K7r),e(ur,jc),e(jc,Z7r),e(jc,GJ),e(GJ,e9r),e(jc,o9r),e(jc,OJ),e(OJ,r9r),e(jc,t9r),e(ur,a9r),e(ur,_7),e(_7,n9r),e(_7,C4e),e(C4e,s9r),e(_7,l9r),e(ur,i9r),e(ur,Vt),M(b7,Vt,null),e(Vt,d9r),e(Vt,w4e),e(w4e,c9r),e(Vt,m9r),e(Vt,Dc),e(Dc,f9r),e(Dc,A4e),e(A4e,g9r),e(Dc,h9r),e(Dc,VJ),e(VJ,u9r),e(Dc,p9r),e(Vt,_9r),M(cw,Vt,null),e(ur,b9r),e(ur,Vr),M(F7,Vr,null),e(Vr,F9r),e(Vr,y4e),e(y4e,v9r),e(Vr,T9r),e(Vr,bn),e(bn,M9r),e(bn,L4e),e(L4e,E9r),e(bn,C9r),e(bn,x4e),e(x4e,w9r),e(bn,A9r),e(bn,$4e),e($4e,y9r),e(bn,L9r),e(Vr,x9r),e(Vr,Se),e(Se,mw),e(mw,k4e),e(k4e,$9r),e(mw,k9r),e(mw,XJ),e(XJ,S9r),e(mw,R9r),e(Se,B9r),e(Se,fw),e(fw,S4e),e(S4e,P9r),e(fw,I9r),e(fw,zJ),e(zJ,q9r),e(fw,N9r),e(Se,j9r),e(Se,gw),e(gw,R4e),e(R4e,D9r),e(gw,G9r),e(gw,QJ),e(QJ,O9r),e(gw,V9r),e(Se,X9r),e(Se,hw),e(hw,B4e),e(B4e,z9r),e(hw,Q9r),e(hw,WJ),e(WJ,W9r),e(hw,H9r),e(Se,U9r),e(Se,uw),e(uw,P4e),e(P4e,J9r),e(uw,Y9r),e(uw,HJ),e(HJ,K9r),e(uw,Z9r),e(Se,e$r),e(Se,pw),e(pw,I4e),e(I4e,o$r),e(pw,r$r),e(pw,UJ),e(UJ,t$r),e(pw,a$r),e(Se,n$r),e(Se,_w),e(_w,q4e),e(q4e,s$r),e(_w,l$r),e(_w,JJ),e(JJ,i$r),e(_w,d$r),e(Se,c$r),e(Se,bw),e(bw,N4e),e(N4e,m$r),e(bw,f$r),e(bw,YJ),e(YJ,g$r),e(bw,h$r),e(Se,u$r),e(Se,Fw),e(Fw,j4e),e(j4e,p$r),e(Fw,_$r),e(Fw,KJ),e(KJ,b$r),e(Fw,F$r),e(Vr,v$r),M(vw,Vr,null),b(m,Lqe,_),b(m,Gc,_),e(Gc,Tw),e(Tw,D4e),M(v7,D4e,null),e(Gc,T$r),e(Gc,G4e),e(G4e,M$r),b(m,xqe,_),b(m,pr,_),M(T7,pr,null),e(pr,E$r),e(pr,Oc),e(Oc,C$r),e(Oc,ZJ),e(ZJ,w$r),e(Oc,A$r),e(Oc,eY),e(eY,y$r),e(Oc,L$r),e(pr,x$r),e(pr,M7),e(M7,$$r),e(M7,O4e),e(O4e,k$r),e(M7,S$r),e(pr,R$r),e(pr,Xt),M(E7,Xt,null),e(Xt,B$r),e(Xt,V4e),e(V4e,P$r),e(Xt,I$r),e(Xt,Vc),e(Vc,q$r),e(Vc,X4e),e(X4e,N$r),e(Vc,j$r),e(Vc,oY),e(oY,D$r),e(Vc,G$r),e(Xt,O$r),M(Mw,Xt,null),e(pr,V$r),e(pr,Xr),M(C7,Xr,null),e(Xr,X$r),e(Xr,z4e),e(z4e,z$r),e(Xr,Q$r),e(Xr,Fn),e(Fn,W$r),e(Fn,Q4e),e(Q4e,H$r),e(Fn,U$r),e(Fn,W4e),e(W4e,J$r),e(Fn,Y$r),e(Fn,H4e),e(H4e,K$r),e(Fn,Z$r),e(Xr,ekr),e(Xr,xe),e(xe,Ew),e(Ew,U4e),e(U4e,okr),e(Ew,rkr),e(Ew,rY),e(rY,tkr),e(Ew,akr),e(xe,nkr),e(xe,Cw),e(Cw,J4e),e(J4e,skr),e(Cw,lkr),e(Cw,tY),e(tY,ikr),e(Cw,dkr),e(xe,ckr),e(xe,ww),e(ww,Y4e),e(Y4e,mkr),e(ww,fkr),e(ww,aY),e(aY,gkr),e(ww,hkr),e(xe,ukr),e(xe,Aw),e(Aw,K4e),e(K4e,pkr),e(Aw,_kr),e(Aw,nY),e(nY,bkr),e(Aw,Fkr),e(xe,vkr),e(xe,yw),e(yw,Z4e),e(Z4e,Tkr),e(yw,Mkr),e(yw,sY),e(sY,Ekr),e(yw,Ckr),e(xe,wkr),e(xe,Lw),e(Lw,eEe),e(eEe,Akr),e(Lw,ykr),e(Lw,lY),e(lY,Lkr),e(Lw,xkr),e(xe,$kr),e(xe,xw),e(xw,oEe),e(oEe,kkr),e(xw,Skr),e(xw,iY),e(iY,Rkr),e(xw,Bkr),e(xe,Pkr),e(xe,$w),e($w,rEe),e(rEe,Ikr),e($w,qkr),e($w,dY),e(dY,Nkr),e($w,jkr),e(xe,Dkr),e(xe,kw),e(kw,tEe),e(tEe,Gkr),e(kw,Okr),e(kw,cY),e(cY,Vkr),e(kw,Xkr),e(xe,zkr),e(xe,Sw),e(Sw,aEe),e(aEe,Qkr),e(Sw,Wkr),e(Sw,mY),e(mY,Hkr),e(Sw,Ukr),e(Xr,Jkr),M(Rw,Xr,null),b(m,$qe,_),b(m,Xc,_),e(Xc,Bw),e(Bw,nEe),M(w7,nEe,null),e(Xc,Ykr),e(Xc,sEe),e(sEe,Kkr),b(m,kqe,_),b(m,_r,_),M(A7,_r,null),e(_r,Zkr),e(_r,zc),e(zc,eSr),e(zc,fY),e(fY,oSr),e(zc,rSr),e(zc,gY),e(gY,tSr),e(zc,aSr),e(_r,nSr),e(_r,y7),e(y7,sSr),e(y7,lEe),e(lEe,lSr),e(y7,iSr),e(_r,dSr),e(_r,zt),M(L7,zt,null),e(zt,cSr),e(zt,iEe),e(iEe,mSr),e(zt,fSr),e(zt,Qc),e(Qc,gSr),e(Qc,dEe),e(dEe,hSr),e(Qc,uSr),e(Qc,hY),e(hY,pSr),e(Qc,_Sr),e(zt,bSr),M(Pw,zt,null),e(_r,FSr),e(_r,zr),M(x7,zr,null),e(zr,vSr),e(zr,cEe),e(cEe,TSr),e(zr,MSr),e(zr,vn),e(vn,ESr),e(vn,mEe),e(mEe,CSr),e(vn,wSr),e(vn,fEe),e(fEe,ASr),e(vn,ySr),e(vn,gEe),e(gEe,LSr),e(vn,xSr),e(zr,$Sr),e(zr,$e),e($e,Iw),e(Iw,hEe),e(hEe,kSr),e(Iw,SSr),e(Iw,uY),e(uY,RSr),e(Iw,BSr),e($e,PSr),e($e,qw),e(qw,uEe),e(uEe,ISr),e(qw,qSr),e(qw,pY),e(pY,NSr),e(qw,jSr),e($e,DSr),e($e,Nw),e(Nw,pEe),e(pEe,GSr),e(Nw,OSr),e(Nw,_Y),e(_Y,VSr),e(Nw,XSr),e($e,zSr),e($e,jw),e(jw,_Ee),e(_Ee,QSr),e(jw,WSr),e(jw,bY),e(bY,HSr),e(jw,USr),e($e,JSr),e($e,Dw),e(Dw,bEe),e(bEe,YSr),e(Dw,KSr),e(Dw,FY),e(FY,ZSr),e(Dw,eRr),e($e,oRr),e($e,Gw),e(Gw,FEe),e(FEe,rRr),e(Gw,tRr),e(Gw,vY),e(vY,aRr),e(Gw,nRr),e($e,sRr),e($e,Ow),e(Ow,vEe),e(vEe,lRr),e(Ow,iRr),e(Ow,TY),e(TY,dRr),e(Ow,cRr),e($e,mRr),e($e,Vw),e(Vw,TEe),e(TEe,fRr),e(Vw,gRr),e(Vw,MY),e(MY,hRr),e(Vw,uRr),e($e,pRr),e($e,Xw),e(Xw,MEe),e(MEe,_Rr),e(Xw,bRr),e(Xw,EY),e(EY,FRr),e(Xw,vRr),e($e,TRr),e($e,zw),e(zw,EEe),e(EEe,MRr),e(zw,ERr),e(zw,CY),e(CY,CRr),e(zw,wRr),e(zr,ARr),M(Qw,zr,null),b(m,Sqe,_),b(m,Wc,_),e(Wc,Ww),e(Ww,CEe),M($7,CEe,null),e(Wc,yRr),e(Wc,wEe),e(wEe,LRr),b(m,Rqe,_),b(m,br,_),M(k7,br,null),e(br,xRr),e(br,Hc),e(Hc,$Rr),e(Hc,wY),e(wY,kRr),e(Hc,SRr),e(Hc,AY),e(AY,RRr),e(Hc,BRr),e(br,PRr),e(br,S7),e(S7,IRr),e(S7,AEe),e(AEe,qRr),e(S7,NRr),e(br,jRr),e(br,Qt),M(R7,Qt,null),e(Qt,DRr),e(Qt,yEe),e(yEe,GRr),e(Qt,ORr),e(Qt,Uc),e(Uc,VRr),e(Uc,LEe),e(LEe,XRr),e(Uc,zRr),e(Uc,yY),e(yY,QRr),e(Uc,WRr),e(Qt,HRr),M(Hw,Qt,null),e(br,URr),e(br,Qr),M(B7,Qr,null),e(Qr,JRr),e(Qr,xEe),e(xEe,YRr),e(Qr,KRr),e(Qr,Tn),e(Tn,ZRr),e(Tn,$Ee),e($Ee,eBr),e(Tn,oBr),e(Tn,kEe),e(kEe,rBr),e(Tn,tBr),e(Tn,SEe),e(SEe,aBr),e(Tn,nBr),e(Qr,sBr),e(Qr,De),e(De,Uw),e(Uw,REe),e(REe,lBr),e(Uw,iBr),e(Uw,LY),e(LY,dBr),e(Uw,cBr),e(De,mBr),e(De,Jw),e(Jw,BEe),e(BEe,fBr),e(Jw,gBr),e(Jw,xY),e(xY,hBr),e(Jw,uBr),e(De,pBr),e(De,Yw),e(Yw,PEe),e(PEe,_Br),e(Yw,bBr),e(Yw,$Y),e($Y,FBr),e(Yw,vBr),e(De,TBr),e(De,Kw),e(Kw,IEe),e(IEe,MBr),e(Kw,EBr),e(Kw,kY),e(kY,CBr),e(Kw,wBr),e(De,ABr),e(De,Zw),e(Zw,qEe),e(qEe,yBr),e(Zw,LBr),e(Zw,SY),e(SY,xBr),e(Zw,$Br),e(De,kBr),e(De,eA),e(eA,NEe),e(NEe,SBr),e(eA,RBr),e(eA,RY),e(RY,BBr),e(eA,PBr),e(De,IBr),e(De,oA),e(oA,jEe),e(jEe,qBr),e(oA,NBr),e(oA,BY),e(BY,jBr),e(oA,DBr),e(De,GBr),e(De,rA),e(rA,DEe),e(DEe,OBr),e(rA,VBr),e(rA,PY),e(PY,XBr),e(rA,zBr),e(Qr,QBr),M(tA,Qr,null),b(m,Bqe,_),b(m,Jc,_),e(Jc,aA),e(aA,GEe),M(P7,GEe,null),e(Jc,WBr),e(Jc,OEe),e(OEe,HBr),b(m,Pqe,_),b(m,Fr,_),M(I7,Fr,null),e(Fr,UBr),e(Fr,Yc),e(Yc,JBr),e(Yc,IY),e(IY,YBr),e(Yc,KBr),e(Yc,qY),e(qY,ZBr),e(Yc,ePr),e(Fr,oPr),e(Fr,q7),e(q7,rPr),e(q7,VEe),e(VEe,tPr),e(q7,aPr),e(Fr,nPr),e(Fr,Wt),M(N7,Wt,null),e(Wt,sPr),e(Wt,XEe),e(XEe,lPr),e(Wt,iPr),e(Wt,Kc),e(Kc,dPr),e(Kc,zEe),e(zEe,cPr),e(Kc,mPr),e(Kc,NY),e(NY,fPr),e(Kc,gPr),e(Wt,hPr),M(nA,Wt,null),e(Fr,uPr),e(Fr,Wr),M(j7,Wr,null),e(Wr,pPr),e(Wr,QEe),e(QEe,_Pr),e(Wr,bPr),e(Wr,Mn),e(Mn,FPr),e(Mn,WEe),e(WEe,vPr),e(Mn,TPr),e(Mn,HEe),e(HEe,MPr),e(Mn,EPr),e(Mn,UEe),e(UEe,CPr),e(Mn,wPr),e(Wr,APr),e(Wr,Ge),e(Ge,sA),e(sA,JEe),e(JEe,yPr),e(sA,LPr),e(sA,jY),e(jY,xPr),e(sA,$Pr),e(Ge,kPr),e(Ge,lA),e(lA,YEe),e(YEe,SPr),e(lA,RPr),e(lA,DY),e(DY,BPr),e(lA,PPr),e(Ge,IPr),e(Ge,iA),e(iA,KEe),e(KEe,qPr),e(iA,NPr),e(iA,GY),e(GY,jPr),e(iA,DPr),e(Ge,GPr),e(Ge,dA),e(dA,ZEe),e(ZEe,OPr),e(dA,VPr),e(dA,OY),e(OY,XPr),e(dA,zPr),e(Ge,QPr),e(Ge,cA),e(cA,e5e),e(e5e,WPr),e(cA,HPr),e(cA,VY),e(VY,UPr),e(cA,JPr),e(Ge,YPr),e(Ge,mA),e(mA,o5e),e(o5e,KPr),e(mA,ZPr),e(mA,XY),e(XY,eIr),e(mA,oIr),e(Ge,rIr),e(Ge,fA),e(fA,r5e),e(r5e,tIr),e(fA,aIr),e(fA,zY),e(zY,nIr),e(fA,sIr),e(Ge,lIr),e(Ge,gA),e(gA,t5e),e(t5e,iIr),e(gA,dIr),e(gA,QY),e(QY,cIr),e(gA,mIr),e(Wr,fIr),M(hA,Wr,null),b(m,Iqe,_),b(m,Zc,_),e(Zc,uA),e(uA,a5e),M(D7,a5e,null),e(Zc,gIr),e(Zc,n5e),e(n5e,hIr),b(m,qqe,_),b(m,vr,_),M(G7,vr,null),e(vr,uIr),e(vr,em),e(em,pIr),e(em,WY),e(WY,_Ir),e(em,bIr),e(em,HY),e(HY,FIr),e(em,vIr),e(vr,TIr),e(vr,O7),e(O7,MIr),e(O7,s5e),e(s5e,EIr),e(O7,CIr),e(vr,wIr),e(vr,Ht),M(V7,Ht,null),e(Ht,AIr),e(Ht,l5e),e(l5e,yIr),e(Ht,LIr),e(Ht,om),e(om,xIr),e(om,i5e),e(i5e,$Ir),e(om,kIr),e(om,UY),e(UY,SIr),e(om,RIr),e(Ht,BIr),M(pA,Ht,null),e(vr,PIr),e(vr,Hr),M(X7,Hr,null),e(Hr,IIr),e(Hr,d5e),e(d5e,qIr),e(Hr,NIr),e(Hr,En),e(En,jIr),e(En,c5e),e(c5e,DIr),e(En,GIr),e(En,m5e),e(m5e,OIr),e(En,VIr),e(En,f5e),e(f5e,XIr),e(En,zIr),e(Hr,QIr),e(Hr,g5e),e(g5e,_A),e(_A,h5e),e(h5e,WIr),e(_A,HIr),e(_A,JY),e(JY,UIr),e(_A,JIr),e(Hr,YIr),M(bA,Hr,null),b(m,Nqe,_),b(m,rm,_),e(rm,FA),e(FA,u5e),M(z7,u5e,null),e(rm,KIr),e(rm,p5e),e(p5e,ZIr),b(m,jqe,_),b(m,Tr,_),M(Q7,Tr,null),e(Tr,eqr),e(Tr,tm),e(tm,oqr),e(tm,YY),e(YY,rqr),e(tm,tqr),e(tm,KY),e(KY,aqr),e(tm,nqr),e(Tr,sqr),e(Tr,W7),e(W7,lqr),e(W7,_5e),e(_5e,iqr),e(W7,dqr),e(Tr,cqr),e(Tr,Ut),M(H7,Ut,null),e(Ut,mqr),e(Ut,b5e),e(b5e,fqr),e(Ut,gqr),e(Ut,am),e(am,hqr),e(am,F5e),e(F5e,uqr),e(am,pqr),e(am,ZY),e(ZY,_qr),e(am,bqr),e(Ut,Fqr),M(vA,Ut,null),e(Tr,vqr),e(Tr,Ur),M(U7,Ur,null),e(Ur,Tqr),e(Ur,v5e),e(v5e,Mqr),e(Ur,Eqr),e(Ur,Cn),e(Cn,Cqr),e(Cn,T5e),e(T5e,wqr),e(Cn,Aqr),e(Cn,M5e),e(M5e,yqr),e(Cn,Lqr),e(Cn,E5e),e(E5e,xqr),e(Cn,$qr),e(Ur,kqr),e(Ur,J7),e(J7,TA),e(TA,C5e),e(C5e,Sqr),e(TA,Rqr),e(TA,eK),e(eK,Bqr),e(TA,Pqr),e(J7,Iqr),e(J7,MA),e(MA,w5e),e(w5e,qqr),e(MA,Nqr),e(MA,oK),e(oK,jqr),e(MA,Dqr),e(Ur,Gqr),M(EA,Ur,null),b(m,Dqe,_),b(m,nm,_),e(nm,CA),e(CA,A5e),M(Y7,A5e,null),e(nm,Oqr),e(nm,y5e),e(y5e,Vqr),b(m,Gqe,_),b(m,Mr,_),M(K7,Mr,null),e(Mr,Xqr),e(Mr,sm),e(sm,zqr),e(sm,rK),e(rK,Qqr),e(sm,Wqr),e(sm,tK),e(tK,Hqr),e(sm,Uqr),e(Mr,Jqr),e(Mr,Z7),e(Z7,Yqr),e(Z7,L5e),e(L5e,Kqr),e(Z7,Zqr),e(Mr,eNr),e(Mr,Jt),M(e9,Jt,null),e(Jt,oNr),e(Jt,x5e),e(x5e,rNr),e(Jt,tNr),e(Jt,lm),e(lm,aNr),e(lm,$5e),e($5e,nNr),e(lm,sNr),e(lm,aK),e(aK,lNr),e(lm,iNr),e(Jt,dNr),M(wA,Jt,null),e(Mr,cNr),e(Mr,Jr),M(o9,Jr,null),e(Jr,mNr),e(Jr,k5e),e(k5e,fNr),e(Jr,gNr),e(Jr,wn),e(wn,hNr),e(wn,S5e),e(S5e,uNr),e(wn,pNr),e(wn,R5e),e(R5e,_Nr),e(wn,bNr),e(wn,B5e),e(B5e,FNr),e(wn,vNr),e(Jr,TNr),e(Jr,P5e),e(P5e,AA),e(AA,I5e),e(I5e,MNr),e(AA,ENr),e(AA,nK),e(nK,CNr),e(AA,wNr),e(Jr,ANr),M(yA,Jr,null),Oqe=!0},p(m,[_]){const r9={};_&2&&(r9.$$scope={dirty:_,ctx:m}),pm.$set(r9);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),ug.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),Hg.$set(N5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),Mh.$set(j5e);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:m}),Eh.$set(t9);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),Gh.$set(D5e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),Oh.$set(An);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),zh.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),Pp.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),qp.$set(V5e);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:m}),w_.$set(a9);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),y_.$set(X5e);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:m}),mb.$set(n9);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),gb.$set(z5e);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:m}),Jb.$set(s9);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),Kb.$set(Q5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),p2.$set(W5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),b2.$set(H5e);const im={};_&2&&(im.$$scope={dirty:_,ctx:m}),fF.$set(im);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),hF.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),zF.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),WF.$set(Y5e);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:m}),ev.$set(l9);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),rv.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),qv.$set(Z5e);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:m}),jv.$set(eCe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:m}),A1.$set(Kr);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:m}),L1.$set(i9);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:m}),k1.$set(oCe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:m}),R1.$set(d9);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:m}),Q1.$set(rCe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:m}),H1.$set(Zr);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:m}),Y1.$set(tCe);const dm={};_&2&&(dm.$$scope={dirty:_,ctx:m}),Z1.$set(dm);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:m}),dT.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:m}),mT.$set(nCe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),_T.$set(L);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),FT.$set(LA);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:m}),xT.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:m}),kT.$set(lCe);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),PT.$set(xA);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:m}),qT.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:m}),VT.$set(dCe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),zT.$set($A);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:m}),JT.$set(cCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:m}),KT.$set(mCe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),rM.$set(kA);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:m}),aM.$set(fCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:m}),lM.$set(gCe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),dM.$set(SA);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:m}),uM.$set(hCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:m}),_M.$set(uCe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),vM.$set(RA);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:m}),MM.$set(pCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:m}),h4.$set(_Ce);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),p4.$set(BA);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:m}),D4.$set(bCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:m}),O4.$set(FCe);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),oE.$set(PA);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:m}),tE.$set(vCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:m}),iE.$set(TCe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),cE.$set(IA);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:m}),kE.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:m}),RE.$set(ECe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),XE.$set(qA);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:m}),QE.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:m}),F5.$set(wCe);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),T5.$set(NA);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:m}),j5.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:m}),G5.$set(yCe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),X5.$set(jA);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:m}),Q5.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:m}),H5.$set(xCe);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),J5.$set(DA);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:m}),_C.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:m}),FC.$set(kCe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),DC.$set(GA);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:m}),OC.$set(SCe);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:m}),XC.$set(RCe);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),QC.$set(OA);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:m}),HC.$set(BCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:m}),JC.$set(PCe);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),M3.$set(VA);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:m}),C3.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:m}),B3.$set(qCe);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),I3.$set(XA);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:m}),U3.$set(NCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:m}),Y3.$set(jCe);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),iw.$set(zA);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:m}),cw.$set(DCe);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:m}),vw.$set(GCe);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),Mw.$set(QA);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:m}),Rw.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:m}),Pw.$set(VCe);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),Qw.$set(WA);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:m}),Hw.$set(XCe);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:m}),tA.$set(zCe);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),nA.$set(HA);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:m}),hA.$set(QCe);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:m}),pA.$set(WCe);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),bA.$set(UA);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:m}),vA.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:m}),EA.$set(UCe);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),wA.$set(JA);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:m}),yA.$set(JCe)},i(m){Oqe||(E(d.$$.fragment,m),E(Ma.$$.fragment,m),E(Y0.$$.fragment,m),E(K0.$$.fragment,m),E(pm.$$.fragment,m),E(Z0.$$.fragment,m),E(ey.$$.fragment,m),E(ty.$$.fragment,m),E(ug.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(sy.$$.fragment,m),E(dy.$$.fragment,m),E(Hg.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(fy.$$.fragment,m),E(uy.$$.fragment,m),E(Mh.$$.fragment,m),E(Eh.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(Ty.$$.fragment,m),E(Gh.$$.fragment,m),E(Oh.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ay.$$.fragment,m),E(zh.$$.fragment,m),E(yy.$$.fragment,m),E(Pp.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(ky.$$.fragment,m),E(qp.$$.fragment,m),E(Sy.$$.fragment,m),E(w_.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(y_.$$.fragment,m),E(qy.$$.fragment,m),E(mb.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(gb.$$.fragment,m),E(Oy.$$.fragment,m),E(Jb.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(Kb.$$.fragment,m),E(Wy.$$.fragment,m),E(p2.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(b2.$$.fragment,m),E(Ky.$$.fragment,m),E(fF.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(hF.$$.fragment,m),E(tL.$$.fragment,m),E(zF.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(WF.$$.fragment,m),E(iL.$$.fragment,m),E(ev.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(rv.$$.fragment,m),E(gL.$$.fragment,m),E(qv.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(jv.$$.fragment,m),E(bL.$$.fragment,m),E(A1.$$.fragment,m),E(FL.$$.fragment,m),E(vL.$$.fragment,m),E(ML.$$.fragment,m),E(L1.$$.fragment,m),E(EL.$$.fragment,m),E(k1.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(R1.$$.fragment,m),E(LL.$$.fragment,m),E(Q1.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(H1.$$.fragment,m),E(RL.$$.fragment,m),E(Y1.$$.fragment,m),E(BL.$$.fragment,m),E(PL.$$.fragment,m),E(qL.$$.fragment,m),E(Z1.$$.fragment,m),E(NL.$$.fragment,m),E(dT.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(mT.$$.fragment,m),E(VL.$$.fragment,m),E(_T.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(WL.$$.fragment,m),E(FT.$$.fragment,m),E(HL.$$.fragment,m),E(xT.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(kT.$$.fragment,m),E(ZL.$$.fragment,m),E(PT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(qT.$$.fragment,m),E(n8.$$.fragment,m),E(VT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(zT.$$.fragment,m),E(c8.$$.fragment,m),E(JT.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(KT.$$.fragment,m),E(u8.$$.fragment,m),E(rM.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(aM.$$.fragment,m),E(T8.$$.fragment,m),E(lM.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(dM.$$.fragment,m),E(A8.$$.fragment,m),E(uM.$$.fragment,m),E(y8.$$.fragment,m),E(L8.$$.fragment,m),E($8.$$.fragment,m),E(_M.$$.fragment,m),E(k8.$$.fragment,m),E(vM.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(MM.$$.fragment,m),E(I8.$$.fragment,m),E(h4.$$.fragment,m),E(q8.$$.fragment,m),E(N8.$$.fragment,m),E(D8.$$.fragment,m),E(p4.$$.fragment,m),E(G8.$$.fragment,m),E(D4.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(O4.$$.fragment,m),E(Q8.$$.fragment,m),E(oE.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(tE.$$.fragment,m),E(Y8.$$.fragment,m),E(iE.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(ox.$$.fragment,m),E(cE.$$.fragment,m),E(rx.$$.fragment,m),E(kE.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(RE.$$.fragment,m),E(lx.$$.fragment,m),E(XE.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(QE.$$.fragment,m),E(fx.$$.fragment,m),E(F5.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(T5.$$.fragment,m),E(_x.$$.fragment,m),E(j5.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(Tx.$$.fragment,m),E(G5.$$.fragment,m),E(Mx.$$.fragment,m),E(X5.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(yx.$$.fragment,m),E(Q5.$$.fragment,m),E(Lx.$$.fragment,m),E(H5.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(J5.$$.fragment,m),E(Rx.$$.fragment,m),E(_C.$$.fragment,m),E(Bx.$$.fragment,m),E(Px.$$.fragment,m),E(qx.$$.fragment,m),E(FC.$$.fragment,m),E(Nx.$$.fragment,m),E(DC.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(OC.$$.fragment,m),E(Vx.$$.fragment,m),E(XC.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(QC.$$.fragment,m),E(Hx.$$.fragment,m),E(HC.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(JC.$$.fragment,m),E(Zx.$$.fragment,m),E(M3.$$.fragment,m),E(e7.$$.fragment,m),E(o7.$$.fragment,m),E(t7.$$.fragment,m),E(C3.$$.fragment,m),E(a7.$$.fragment,m),E(B3.$$.fragment,m),E(n7.$$.fragment,m),E(s7.$$.fragment,m),E(i7.$$.fragment,m),E(I3.$$.fragment,m),E(d7.$$.fragment,m),E(U3.$$.fragment,m),E(c7.$$.fragment,m),E(m7.$$.fragment,m),E(g7.$$.fragment,m),E(Y3.$$.fragment,m),E(h7.$$.fragment,m),E(iw.$$.fragment,m),E(u7.$$.fragment,m),E(p7.$$.fragment,m),E(b7.$$.fragment,m),E(cw.$$.fragment,m),E(F7.$$.fragment,m),E(vw.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(E7.$$.fragment,m),E(Mw.$$.fragment,m),E(C7.$$.fragment,m),E(Rw.$$.fragment,m),E(w7.$$.fragment,m),E(A7.$$.fragment,m),E(L7.$$.fragment,m),E(Pw.$$.fragment,m),E(x7.$$.fragment,m),E(Qw.$$.fragment,m),E($7.$$.fragment,m),E(k7.$$.fragment,m),E(R7.$$.fragment,m),E(Hw.$$.fragment,m),E(B7.$$.fragment,m),E(tA.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(N7.$$.fragment,m),E(nA.$$.fragment,m),E(j7.$$.fragment,m),E(hA.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(V7.$$.fragment,m),E(pA.$$.fragment,m),E(X7.$$.fragment,m),E(bA.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(vA.$$.fragment,m),E(U7.$$.fragment,m),E(EA.$$.fragment,m),E(Y7.$$.fragment,m),E(K7.$$.fragment,m),E(e9.$$.fragment,m),E(wA.$$.fragment,m),E(o9.$$.fragment,m),E(yA.$$.fragment,m),Oqe=!0)},o(m){C(d.$$.fragment,m),C(Ma.$$.fragment,m),C(Y0.$$.fragment,m),C(K0.$$.fragment,m),C(pm.$$.fragment,m),C(Z0.$$.fragment,m),C(ey.$$.fragment,m),C(ty.$$.fragment,m),C(ug.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(sy.$$.fragment,m),C(dy.$$.fragment,m),C(Hg.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(fy.$$.fragment,m),C(uy.$$.fragment,m),C(Mh.$$.fragment,m),C(Eh.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(Ty.$$.fragment,m),C(Gh.$$.fragment,m),C(Oh.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ay.$$.fragment,m),C(zh.$$.fragment,m),C(yy.$$.fragment,m),C(Pp.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(ky.$$.fragment,m),C(qp.$$.fragment,m),C(Sy.$$.fragment,m),C(w_.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(y_.$$.fragment,m),C(qy.$$.fragment,m),C(mb.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(gb.$$.fragment,m),C(Oy.$$.fragment,m),C(Jb.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(Kb.$$.fragment,m),C(Wy.$$.fragment,m),C(p2.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(b2.$$.fragment,m),C(Ky.$$.fragment,m),C(fF.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(hF.$$.fragment,m),C(tL.$$.fragment,m),C(zF.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(WF.$$.fragment,m),C(iL.$$.fragment,m),C(ev.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(rv.$$.fragment,m),C(gL.$$.fragment,m),C(qv.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(jv.$$.fragment,m),C(bL.$$.fragment,m),C(A1.$$.fragment,m),C(FL.$$.fragment,m),C(vL.$$.fragment,m),C(ML.$$.fragment,m),C(L1.$$.fragment,m),C(EL.$$.fragment,m),C(k1.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(R1.$$.fragment,m),C(LL.$$.fragment,m),C(Q1.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(H1.$$.fragment,m),C(RL.$$.fragment,m),C(Y1.$$.fragment,m),C(BL.$$.fragment,m),C(PL.$$.fragment,m),C(qL.$$.fragment,m),C(Z1.$$.fragment,m),C(NL.$$.fragment,m),C(dT.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(mT.$$.fragment,m),C(VL.$$.fragment,m),C(_T.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(WL.$$.fragment,m),C(FT.$$.fragment,m),C(HL.$$.fragment,m),C(xT.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(kT.$$.fragment,m),C(ZL.$$.fragment,m),C(PT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(qT.$$.fragment,m),C(n8.$$.fragment,m),C(VT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(zT.$$.fragment,m),C(c8.$$.fragment,m),C(JT.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(KT.$$.fragment,m),C(u8.$$.fragment,m),C(rM.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(aM.$$.fragment,m),C(T8.$$.fragment,m),C(lM.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(dM.$$.fragment,m),C(A8.$$.fragment,m),C(uM.$$.fragment,m),C(y8.$$.fragment,m),C(L8.$$.fragment,m),C($8.$$.fragment,m),C(_M.$$.fragment,m),C(k8.$$.fragment,m),C(vM.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(MM.$$.fragment,m),C(I8.$$.fragment,m),C(h4.$$.fragment,m),C(q8.$$.fragment,m),C(N8.$$.fragment,m),C(D8.$$.fragment,m),C(p4.$$.fragment,m),C(G8.$$.fragment,m),C(D4.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(O4.$$.fragment,m),C(Q8.$$.fragment,m),C(oE.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(tE.$$.fragment,m),C(Y8.$$.fragment,m),C(iE.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(ox.$$.fragment,m),C(cE.$$.fragment,m),C(rx.$$.fragment,m),C(kE.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(RE.$$.fragment,m),C(lx.$$.fragment,m),C(XE.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(QE.$$.fragment,m),C(fx.$$.fragment,m),C(F5.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(T5.$$.fragment,m),C(_x.$$.fragment,m),C(j5.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(Tx.$$.fragment,m),C(G5.$$.fragment,m),C(Mx.$$.fragment,m),C(X5.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(yx.$$.fragment,m),C(Q5.$$.fragment,m),C(Lx.$$.fragment,m),C(H5.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(J5.$$.fragment,m),C(Rx.$$.fragment,m),C(_C.$$.fragment,m),C(Bx.$$.fragment,m),C(Px.$$.fragment,m),C(qx.$$.fragment,m),C(FC.$$.fragment,m),C(Nx.$$.fragment,m),C(DC.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(OC.$$.fragment,m),C(Vx.$$.fragment,m),C(XC.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(QC.$$.fragment,m),C(Hx.$$.fragment,m),C(HC.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(JC.$$.fragment,m),C(Zx.$$.fragment,m),C(M3.$$.fragment,m),C(e7.$$.fragment,m),C(o7.$$.fragment,m),C(t7.$$.fragment,m),C(C3.$$.fragment,m),C(a7.$$.fragment,m),C(B3.$$.fragment,m),C(n7.$$.fragment,m),C(s7.$$.fragment,m),C(i7.$$.fragment,m),C(I3.$$.fragment,m),C(d7.$$.fragment,m),C(U3.$$.fragment,m),C(c7.$$.fragment,m),C(m7.$$.fragment,m),C(g7.$$.fragment,m),C(Y3.$$.fragment,m),C(h7.$$.fragment,m),C(iw.$$.fragment,m),C(u7.$$.fragment,m),C(p7.$$.fragment,m),C(b7.$$.fragment,m),C(cw.$$.fragment,m),C(F7.$$.fragment,m),C(vw.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(E7.$$.fragment,m),C(Mw.$$.fragment,m),C(C7.$$.fragment,m),C(Rw.$$.fragment,m),C(w7.$$.fragment,m),C(A7.$$.fragment,m),C(L7.$$.fragment,m),C(Pw.$$.fragment,m),C(x7.$$.fragment,m),C(Qw.$$.fragment,m),C($7.$$.fragment,m),C(k7.$$.fragment,m),C(R7.$$.fragment,m),C(Hw.$$.fragment,m),C(B7.$$.fragment,m),C(tA.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(N7.$$.fragment,m),C(nA.$$.fragment,m),C(j7.$$.fragment,m),C(hA.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(V7.$$.fragment,m),C(pA.$$.fragment,m),C(X7.$$.fragment,m),C(bA.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(vA.$$.fragment,m),C(U7.$$.fragment,m),C(EA.$$.fragment,m),C(Y7.$$.fragment,m),C(K7.$$.fragment,m),C(e9.$$.fragment,m),C(wA.$$.fragment,m),C(o9.$$.fragment,m),C(yA.$$.fragment,m),Oqe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(mm),m&&t(et),m&&t(qe),m&&t(Xe),m&&t(gm),w(Ma,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(Ea),m&&t(jPe),m&&t(ui),w(Y0),m&&t(DPe),m&&t(kn),m&&t(GPe),w(K0,m),m&&t(OPe),m&&t(F$),m&&t(VPe),w(pm,m),m&&t(XPe),m&&t(pi),w(Z0),m&&t(zPe),m&&t(Co),w(ey),w(ty),w(ug),w(ay),m&&t(QPe),m&&t(bi),w(ny),m&&t(WPe),m&&t(wo),w(sy),w(dy),w(Hg),w(cy),m&&t(HPe),m&&t(Fi),w(my),m&&t(UPe),m&&t(Ao),w(fy),w(uy),w(Mh),w(Eh),w(py),m&&t(JPe),m&&t(vi),w(_y),m&&t(YPe),m&&t(yo),w(by),w(Ty),w(Gh),w(Oh),w(My),m&&t(KPe),m&&t(Mi),w(Ey),m&&t(ZPe),m&&t(Lo),w(Cy),w(Ay),w(zh),w(yy),w(Pp),m&&t(eIe),m&&t(wi),w(Ly),m&&t(oIe),m&&t(xo),w(xy),w(ky),w(qp),w(Sy),w(w_),m&&t(rIe),m&&t(Li),w(Ry),m&&t(tIe),m&&t($o),w(By),w(Iy),w(y_),w(qy),w(mb),m&&t(aIe),m&&t(ki),w(Ny),m&&t(nIe),m&&t(ko),w(jy),w(Gy),w(gb),w(Oy),w(Jb),m&&t(sIe),m&&t(Bi),w(Vy),m&&t(lIe),m&&t(So),w(Xy),w(Qy),w(Kb),w(Wy),w(p2),m&&t(iIe),m&&t(qi),w(Hy),m&&t(dIe),m&&t(Ro),w(Uy),w(Yy),w(b2),w(Ky),w(fF),m&&t(cIe),m&&t(Di),w(Zy),m&&t(mIe),m&&t(Bo),w(eL),w(rL),w(hF),w(tL),w(zF),m&&t(fIe),m&&t(Vi),w(aL),m&&t(gIe),m&&t(Po),w(nL),w(lL),w(WF),w(iL),w(ev),m&&t(hIe),m&&t(Qi),w(dL),m&&t(uIe),m&&t(Io),w(cL),w(fL),w(rv),w(gL),w(qv),m&&t(pIe),m&&t(Ui),w(hL),m&&t(_Ie),m&&t(qo),w(uL),w(_L),w(jv),w(bL),w(A1),m&&t(bIe),m&&t(Ki),w(FL),m&&t(FIe),m&&t(No),w(vL),w(ML),w(L1),w(EL),w(k1),m&&t(vIe),m&&t(od),w(CL),m&&t(TIe),m&&t(jo),w(wL),w(yL),w(R1),w(LL),w(Q1),m&&t(MIe),m&&t(ad),w(xL),m&&t(EIe),m&&t(Do),w($L),w(SL),w(H1),w(RL),w(Y1),m&&t(CIe),m&&t(ld),w(BL),m&&t(wIe),m&&t(Go),w(PL),w(qL),w(Z1),w(NL),w(dT),m&&t(AIe),m&&t(cd),w(jL),m&&t(yIe),m&&t(Oo),w(DL),w(OL),w(mT),w(VL),w(_T),m&&t(LIe),m&&t(gd),w(XL),m&&t(xIe),m&&t(Vo),w(zL),w(WL),w(FT),w(HL),w(xT),m&&t($Ie),m&&t(pd),w(UL),m&&t(kIe),m&&t(Xo),w(JL),w(KL),w(kT),w(ZL),w(PT),m&&t(SIe),m&&t(Fd),w(o8),m&&t(RIe),m&&t(zo),w(r8),w(a8),w(qT),w(n8),w(VT),m&&t(BIe),m&&t(Md),w(s8),m&&t(PIe),m&&t(Qo),w(l8),w(d8),w(zT),w(c8),w(JT),m&&t(IIe),m&&t(Ad),w(m8),m&&t(qIe),m&&t(Wo),w(f8),w(h8),w(KT),w(u8),w(rM),m&&t(NIe),m&&t(xd),w(_8),m&&t(jIe),m&&t(Ho),w(b8),w(v8),w(aM),w(T8),w(lM),m&&t(DIe),m&&t(Sd),w(M8),m&&t(GIe),m&&t(Uo),w(E8),w(w8),w(dM),w(A8),w(uM),m&&t(OIe),m&&t(Pd),w(y8),m&&t(VIe),m&&t(Jo),w(L8),w($8),w(_M),w(k8),w(vM),m&&t(XIe),m&&t(Nd),w(S8),m&&t(zIe),m&&t(Yo),w(R8),w(P8),w(MM),w(I8),w(h4),m&&t(QIe),m&&t(Gd),w(q8),m&&t(WIe),m&&t(Ko),w(N8),w(D8),w(p4),w(G8),w(D4),m&&t(HIe),m&&t(Xd),w(O8),m&&t(UIe),m&&t(Zo),w(V8),w(z8),w(O4),w(Q8),w(oE),m&&t(JIe),m&&t(Wd),w(W8),m&&t(YIe),m&&t(er),w(H8),w(J8),w(tE),w(Y8),w(iE),m&&t(KIe),m&&t(Jd),w(K8),m&&t(ZIe),m&&t(or),w(Z8),w(ox),w(cE),w(rx),w(kE),m&&t(eqe),m&&t(Zd),w(tx),m&&t(oqe),m&&t(rr),w(ax),w(sx),w(RE),w(lx),w(XE),m&&t(rqe),m&&t(rc),w(ix),m&&t(tqe),m&&t(tr),w(dx),w(mx),w(QE),w(fx),w(F5),m&&t(aqe),m&&t(nc),w(gx),m&&t(nqe),m&&t(ar),w(hx),w(px),w(T5),w(_x),w(j5),m&&t(sqe),m&&t(ic),w(bx),m&&t(lqe),m&&t(nr),w(Fx),w(Tx),w(G5),w(Mx),w(X5),m&&t(iqe),m&&t(mc),w(Cx),m&&t(dqe),m&&t(sr),w(wx),w(yx),w(Q5),w(Lx),w(H5),m&&t(cqe),m&&t(hc),w(xx),m&&t(mqe),m&&t(lr),w($x),w(Sx),w(J5),w(Rx),w(_C),m&&t(fqe),m&&t(_c),w(Bx),m&&t(gqe),m&&t(ir),w(Px),w(qx),w(FC),w(Nx),w(DC),m&&t(hqe),m&&t(vc),w(jx),m&&t(uqe),m&&t(dr),w(Dx),w(Ox),w(OC),w(Vx),w(XC),m&&t(pqe),m&&t(Ec),w(Xx),m&&t(_qe),m&&t(cr),w(zx),w(Wx),w(QC),w(Hx),w(HC),m&&t(bqe),m&&t(Ac),w(Ux),m&&t(Fqe),m&&t(mr),w(Jx),w(Kx),w(JC),w(Zx),w(M3),m&&t(vqe),m&&t(xc),w(e7),m&&t(Tqe),m&&t(fr),w(o7),w(t7),w(C3),w(a7),w(B3),m&&t(Mqe),m&&t(Sc),w(n7),m&&t(Eqe),m&&t(gr),w(s7),w(i7),w(I3),w(d7),w(U3),m&&t(Cqe),m&&t(Pc),w(c7),m&&t(wqe),m&&t(hr),w(m7),w(g7),w(Y3),w(h7),w(iw),m&&t(Aqe),m&&t(Nc),w(u7),m&&t(yqe),m&&t(ur),w(p7),w(b7),w(cw),w(F7),w(vw),m&&t(Lqe),m&&t(Gc),w(v7),m&&t(xqe),m&&t(pr),w(T7),w(E7),w(Mw),w(C7),w(Rw),m&&t($qe),m&&t(Xc),w(w7),m&&t(kqe),m&&t(_r),w(A7),w(L7),w(Pw),w(x7),w(Qw),m&&t(Sqe),m&&t(Wc),w($7),m&&t(Rqe),m&&t(br),w(k7),w(R7),w(Hw),w(B7),w(tA),m&&t(Bqe),m&&t(Jc),w(P7),m&&t(Pqe),m&&t(Fr),w(I7),w(N7),w(nA),w(j7),w(hA),m&&t(Iqe),m&&t(Zc),w(D7),m&&t(qqe),m&&t(vr),w(G7),w(V7),w(pA),w(X7),w(bA),m&&t(Nqe),m&&t(rm),w(z7),m&&t(jqe),m&&t(Tr),w(Q7),w(H7),w(vA),w(U7),w(EA),m&&t(Dqe),m&&t(nm),w(Y7),m&&t(Gqe),m&&t(Mr),w(K7),w(e9),w(wA),w(o9),w(yA)}}}const ZLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function e8t(A){return eyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class l8t extends J0t{constructor(g){super();Y0t(this,g,e8t,KLt,K0t,{})}}export{l8t as default,ZLt as metadata};
